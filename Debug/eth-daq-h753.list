
eth-daq-h753.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023ff8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003874  08024298  08024298  00025298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08027b0c  08027b0c  00028b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08027b14  08027b14  00028b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08027b18  08027b18  00028b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  08027b1c  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000277c  20000088  08027ba4  00029088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20002804  08027ba4  00029804  2**0
                  ALLOC
  9 .dtcm_data    00018000  20002e08  08027ba4  00029e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ethernet_data 000580c0  24000000  24000000  00042000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ram2_data    00030110  30000000  30000000  0009b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ram3_data    00008000  38000000  38000000  000cc000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  000d4000  2**0
                  CONTENTS, READONLY
 14 .debug_info   0006343a  00000000  00000000  000d402e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c048  00000000  00000000  00137468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000031a0  00000000  00000000  001434b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000027d1  00000000  00000000  00146650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004f652  00000000  00000000  00148e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0005caf3  00000000  00000000  00198473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00191f2b  00000000  00000000  001f4f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00386e91  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d7e4  00000000  00000000  00386ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  003946b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000088 	.word	0x20000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08024280 	.word	0x08024280

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	08024280 	.word	0x08024280

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a6:	f001 fcf7 	bl	8002098 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006aa:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <main+0xd0>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <main+0xd0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <main+0xd0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <main+0xd0>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	e000      	b.n	80006f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <main+0xd0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d13b      	bne.n	8000774 <main+0xd4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0xd0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <main+0xd0>)
 800070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000710:	617b      	str	r3, [r7, #20]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800071a:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000724:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	490e      	ldr	r1, [pc, #56]	@ (8000770 <main+0xd0>)
 8000736:	4313      	orrs	r3, r2
 8000738:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	60fa      	str	r2, [r7, #12]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <main+0x86>
    } while(sets-- != 0U);
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	613a      	str	r2, [r7, #16]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e5      	bne.n	800071c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <main+0xd0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <main+0xd0>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	e003      	b.n	8000776 <main+0xd6>
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000774:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f019 fc51 	bl	801a01c <HAL_Init>

  /* USER CODE BEGIN Init */
  usZero = 0;
 800077a:	4ba7      	ldr	r3, [pc, #668]	@ (8000a18 <main+0x378>)
 800077c:	2200      	movs	r2, #0
 800077e:	801a      	strh	r2, [r3, #0]

  memset(usADCDataMock0, 0x41, sizeof(usADCDataMock0));
 8000780:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000784:	2141      	movs	r1, #65	@ 0x41
 8000786:	48a5      	ldr	r0, [pc, #660]	@ (8000a1c <main+0x37c>)
 8000788:	f022 f807 	bl	802279a <memset>
  memset(usADCDataMock1, 0x42, sizeof(usADCDataMock1));
 800078c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000790:	2142      	movs	r1, #66	@ 0x42
 8000792:	48a3      	ldr	r0, [pc, #652]	@ (8000a20 <main+0x380>)
 8000794:	f022 f801 	bl	802279a <memset>
  memset(usAuxADCDataMock0, 0x43, sizeof(usAuxADCDataMock0));
 8000798:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800079c:	2143      	movs	r1, #67	@ 0x43
 800079e:	48a1      	ldr	r0, [pc, #644]	@ (8000a24 <main+0x384>)
 80007a0:	f021 fffb 	bl	802279a <memset>
  memset(usAuxADCDataMock1, 0x44, sizeof(usAuxADCDataMock1));
 80007a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007a8:	2144      	movs	r1, #68	@ 0x44
 80007aa:	489f      	ldr	r0, [pc, #636]	@ (8000a28 <main+0x388>)
 80007ac:	f021 fff5 	bl	802279a <memset>
  __ASM volatile ("dsb 0xF":::"memory");
 80007b0:	f3bf 8f4f 	dsb	sy
}
 80007b4:	bf00      	nop
  __DSB();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 fb9b 	bl	8000ef0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007ba:	f000 fc47 	bl	800104c <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  vHeapInit();
 80007be:	f001 f8ad 	bl	800191c <vHeapInit>
  vStartHighResolutionTimer();
 80007c2:	f021 fe09 	bl	80223d8 <vStartHighResolutionTimer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f000 ffd1 	bl	800176c <MX_GPIO_Init>
  MX_DMA_Init();
 80007ca:	f000 ff77 	bl	80016bc <MX_DMA_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80007ce:	f000 ff29 	bl	8001624 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80007d2:	f000 fcab 	bl	800112c <MX_SPI1_Init>
  MX_SPI2_Init();
 80007d6:	f000 fd01 	bl	80011dc <MX_SPI2_Init>
  MX_SPI3_Init();
 80007da:	f000 fd55 	bl	8001288 <MX_SPI3_Init>
  MX_TIM1_Init();
 80007de:	f000 fdab 	bl	8001338 <MX_TIM1_Init>
  MX_TIM3_Init();
 80007e2:	f000 fdfb 	bl	80013dc <MX_TIM3_Init>
  // MX_TIM2_Init();
  MX_I2C4_Init();
 80007e6:	f000 fc61 	bl	80010ac <MX_I2C4_Init>
  MX_TIM4_Init();
 80007ea:	f000 fe45 	bl	8001478 <MX_TIM4_Init>
  MX_TIM5_Init();
 80007ee:	f000 fec9 	bl	8001584 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //7 Segment Setup
  //TIM4 CH1
  DMA1_Stream4->M0AR = &ulSevenSegD1;
 80007f2:	4b8e      	ldr	r3, [pc, #568]	@ (8000a2c <main+0x38c>)
 80007f4:	4a8e      	ldr	r2, [pc, #568]	@ (8000a30 <main+0x390>)
 80007f6:	60da      	str	r2, [r3, #12]
  DMA1_Stream4->PAR = &(GPIOD->BSRR); //top 16 bits are reset, bottom 16 bits are set, set has priority if both bits set
 80007f8:	4b8c      	ldr	r3, [pc, #560]	@ (8000a2c <main+0x38c>)
 80007fa:	4a8e      	ldr	r2, [pc, #568]	@ (8000a34 <main+0x394>)
 80007fc:	609a      	str	r2, [r3, #8]
  DMA1_Stream4->NDTR = 1;
 80007fe:	4b8b      	ldr	r3, [pc, #556]	@ (8000a2c <main+0x38c>)
 8000800:	2201      	movs	r2, #1
 8000802:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000804:	f3bf 8f4f 	dsb	sy
}
 8000808:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream4->CR |= DMA_SxCR_EN;
 800080a:	4b88      	ldr	r3, [pc, #544]	@ (8000a2c <main+0x38c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a87      	ldr	r2, [pc, #540]	@ (8000a2c <main+0x38c>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6013      	str	r3, [r2, #0]
  //TIM4 UP
  DMA1_Stream5->M0AR = &ulSevenSegD2;
 8000816:	4b88      	ldr	r3, [pc, #544]	@ (8000a38 <main+0x398>)
 8000818:	4a88      	ldr	r2, [pc, #544]	@ (8000a3c <main+0x39c>)
 800081a:	60da      	str	r2, [r3, #12]
  DMA1_Stream5->PAR = &(GPIOD->BSRR);
 800081c:	4b86      	ldr	r3, [pc, #536]	@ (8000a38 <main+0x398>)
 800081e:	4a85      	ldr	r2, [pc, #532]	@ (8000a34 <main+0x394>)
 8000820:	609a      	str	r2, [r3, #8]
  DMA1_Stream5->NDTR = 1;
 8000822:	4b85      	ldr	r3, [pc, #532]	@ (8000a38 <main+0x398>)
 8000824:	2201      	movs	r2, #1
 8000826:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000828:	f3bf 8f4f 	dsb	sy
}
 800082c:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream5->CR |= DMA_SxCR_EN;
 800082e:	4b82      	ldr	r3, [pc, #520]	@ (8000a38 <main+0x398>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a81      	ldr	r2, [pc, #516]	@ (8000a38 <main+0x398>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6013      	str	r3, [r2, #0]
  //??? initializing the vars in the top just doesn't work???
  ulSevenSegD2 = 0x00FF00FF;
 800083a:	4b80      	ldr	r3, [pc, #512]	@ (8000a3c <main+0x39c>)
 800083c:	f04f 12ff 	mov.w	r2, #16711935	@ 0xff00ff
 8000840:	601a      	str	r2, [r3, #0]
  ulSevenSegD1 = 0x00FF000F;
 8000842:	4b7b      	ldr	r3, [pc, #492]	@ (8000a30 <main+0x390>)
 8000844:	4a7e      	ldr	r2, [pc, #504]	@ (8000a40 <main+0x3a0>)
 8000846:	601a      	str	r2, [r3, #0]
  //TIM4 drives multiplexing
  TIM4->CR1 |= TIM_CR1_URS;
 8000848:	4b7e      	ldr	r3, [pc, #504]	@ (8000a44 <main+0x3a4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a7d      	ldr	r2, [pc, #500]	@ (8000a44 <main+0x3a4>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6013      	str	r3, [r2, #0]
  TIM4->CR1 &= ~TIM_CR1_UDIS;
 8000854:	4b7b      	ldr	r3, [pc, #492]	@ (8000a44 <main+0x3a4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a7a      	ldr	r2, [pc, #488]	@ (8000a44 <main+0x3a4>)
 800085a:	f023 0302 	bic.w	r3, r3, #2
 800085e:	6013      	str	r3, [r2, #0]
  TIM4->CR2 &= ~TIM_CR2_CCDS;
 8000860:	4b78      	ldr	r3, [pc, #480]	@ (8000a44 <main+0x3a4>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	4a77      	ldr	r2, [pc, #476]	@ (8000a44 <main+0x3a4>)
 8000866:	f023 0308 	bic.w	r3, r3, #8
 800086a:	6053      	str	r3, [r2, #4]
  TIM4->DIER |= TIM_DIER_UDE | TIM_DIER_CC1DE;
 800086c:	4b75      	ldr	r3, [pc, #468]	@ (8000a44 <main+0x3a4>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	4a74      	ldr	r2, [pc, #464]	@ (8000a44 <main+0x3a4>)
 8000872:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000876:	60d3      	str	r3, [r2, #12]
  TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 8000878:	4b72      	ldr	r3, [pc, #456]	@ (8000a44 <main+0x3a4>)
 800087a:	6a1b      	ldr	r3, [r3, #32]
 800087c:	4a71      	ldr	r2, [pc, #452]	@ (8000a44 <main+0x3a4>)
 800087e:	f043 0311 	orr.w	r3, r3, #17
 8000882:	6213      	str	r3, [r2, #32]
  TIM4->EGR |= TIM_EGR_UG | TIM_EGR_CC1G;
 8000884:	4b6f      	ldr	r3, [pc, #444]	@ (8000a44 <main+0x3a4>)
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	4a6e      	ldr	r2, [pc, #440]	@ (8000a44 <main+0x3a4>)
 800088a:	f043 0303 	orr.w	r3, r3, #3
 800088e:	6153      	str	r3, [r2, #20]
  TIM4->CR1 |= TIM_CR1_CEN;
 8000890:	4b6c      	ldr	r3, [pc, #432]	@ (8000a44 <main+0x3a4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a6b      	ldr	r2, [pc, #428]	@ (8000a44 <main+0x3a4>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6013      	str	r3, [r2, #0]

  //DAC Setup
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008a2:	4869      	ldr	r0, [pc, #420]	@ (8000a48 <main+0x3a8>)
 80008a4:	f01b fed0 	bl	801c648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_DAC_LDAC_GPIO_Port, DUT_DAC_LDAC_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008ae:	4866      	ldr	r0, [pc, #408]	@ (8000a48 <main+0x3a8>)
 80008b0:	f01b feca 	bl	801c648 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008b4:	2032      	movs	r0, #50	@ 0x32
 80008b6:	f019 fc43 	bl	801a140 <HAL_Delay>
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008c0:	4861      	ldr	r0, [pc, #388]	@ (8000a48 <main+0x3a8>)
 80008c2:	f01b fec1 	bl	801c648 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008c6:	2032      	movs	r0, #50	@ 0x32
 80008c8:	f019 fc3a 	bl	801a140 <HAL_Delay>

  I2C4->CR2 = ( (0b0001100 << 1) & 0xFFFE )  // 7-bit address
 80008cc:	4b5f      	ldr	r3, [pc, #380]	@ (8000a4c <main+0x3ac>)
 80008ce:	4a60      	ldr	r2, [pc, #384]	@ (8000a50 <main+0x3b0>)
 80008d0:	605a      	str	r2, [r3, #4]
                 | (3 << 16)                   // NBYTES = 2
                 | (0 << 10)                   // Write direction (0 = write)
                 | I2C_CR2_AUTOEND             // Auto generate STOP
                 | I2C_CR2_START;              // Generate START
  while( (I2C4->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)) == 0 );
 80008d2:	bf00      	nop
 80008d4:	4b5d      	ldr	r3, [pc, #372]	@ (8000a4c <main+0x3ac>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0312 	and.w	r3, r3, #18
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d0f9      	beq.n	80008d4 <main+0x234>
//      if (I2C4->ISR & I2C_ISR_NACKF) {
//          I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
//          return;  // Abort on failure
//      }
  I2C4->TXDR = 0b00111001; //write to both registers
 80008e0:	4b5a      	ldr	r3, [pc, #360]	@ (8000a4c <main+0x3ac>)
 80008e2:	2239      	movs	r2, #57	@ 0x39
 80008e4:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008e6:	bf00      	nop
 80008e8:	4b58      	ldr	r3, [pc, #352]	@ (8000a4c <main+0x3ac>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0302 	and.w	r3, r3, #2
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d0f9      	beq.n	80008e8 <main+0x248>
  I2C4->TXDR = 0; //MSB
 80008f4:	4b55      	ldr	r3, [pc, #340]	@ (8000a4c <main+0x3ac>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008fa:	bf00      	nop
 80008fc:	4b53      	ldr	r3, [pc, #332]	@ (8000a4c <main+0x3ac>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0302 	and.w	r3, r3, #2
 8000904:	2b00      	cmp	r3, #0
 8000906:	d0f9      	beq.n	80008fc <main+0x25c>
  I2C4->TXDR = 4; //LSB
 8000908:	4b50      	ldr	r3, [pc, #320]	@ (8000a4c <main+0x3ac>)
 800090a:	2204      	movs	r2, #4
 800090c:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXE)) == 0 );
 800090e:	bf00      	nop
 8000910:	4b4e      	ldr	r3, [pc, #312]	@ (8000a4c <main+0x3ac>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0f9      	beq.n	8000910 <main+0x270>
  // Check if NACK occurred
  if (I2C4->ISR & I2C_ISR_NACKF) {
 800091c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a4c <main+0x3ac>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0310 	and.w	r3, r3, #16
 8000924:	2b00      	cmp	r3, #0
 8000926:	d005      	beq.n	8000934 <main+0x294>
      // Handle error (e.g., reset I2C)
      I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
 8000928:	4b48      	ldr	r3, [pc, #288]	@ (8000a4c <main+0x3ac>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	4a47      	ldr	r2, [pc, #284]	@ (8000a4c <main+0x3ac>)
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	61d3      	str	r3, [r2, #28]
  }

  //SPI1 RX Stream
   DMA1_Stream0->M0AR = usADCDataMock0;
 8000934:	4b47      	ldr	r3, [pc, #284]	@ (8000a54 <main+0x3b4>)
 8000936:	4a39      	ldr	r2, [pc, #228]	@ (8000a1c <main+0x37c>)
 8000938:	60da      	str	r2, [r3, #12]
   DMA1_Stream0->M1AR = usADCDataMock1;
 800093a:	4b46      	ldr	r3, [pc, #280]	@ (8000a54 <main+0x3b4>)
 800093c:	4a38      	ldr	r2, [pc, #224]	@ (8000a20 <main+0x380>)
 800093e:	611a      	str	r2, [r3, #16]
   DMA1_Stream0->PAR = &(SPI1->RXDR);
 8000940:	4b44      	ldr	r3, [pc, #272]	@ (8000a54 <main+0x3b4>)
 8000942:	4a45      	ldr	r2, [pc, #276]	@ (8000a58 <main+0x3b8>)
 8000944:	609a      	str	r2, [r3, #8]
   DMA1_Stream0->CR |= DMA_DOUBLE_BUFFER_M0;
 8000946:	4b43      	ldr	r3, [pc, #268]	@ (8000a54 <main+0x3b4>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a42      	ldr	r2, [pc, #264]	@ (8000a54 <main+0x3b4>)
 800094c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000950:	6013      	str	r3, [r2, #0]
   DMA1_Stream0->NDTR = ADC_BUFFER_HALF_SIZE;
 8000952:	4b40      	ldr	r3, [pc, #256]	@ (8000a54 <main+0x3b4>)
 8000954:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000958:	605a      	str	r2, [r3, #4]
  //  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
   DMA1_Stream0->CR |= DMA_SxCR_TCIE;
 800095a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a54 <main+0x3b4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a54 <main+0x3b4>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000966:	f3bf 8f4f 	dsb	sy
}
 800096a:	bf00      	nop
   __DSB(); //required?
   DMA1_Stream0->CR |= DMA_SxCR_EN;
 800096c:	4b39      	ldr	r3, [pc, #228]	@ (8000a54 <main+0x3b4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a38      	ldr	r2, [pc, #224]	@ (8000a54 <main+0x3b4>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6013      	str	r3, [r2, #0]

  //SPI2 RX Stream
  DMA1_Stream1->M0AR = usAuxADCDataMock0;
 8000978:	4b38      	ldr	r3, [pc, #224]	@ (8000a5c <main+0x3bc>)
 800097a:	4a2a      	ldr	r2, [pc, #168]	@ (8000a24 <main+0x384>)
 800097c:	60da      	str	r2, [r3, #12]
  DMA1_Stream1->M1AR = usAuxADCDataMock1;
 800097e:	4b37      	ldr	r3, [pc, #220]	@ (8000a5c <main+0x3bc>)
 8000980:	4a29      	ldr	r2, [pc, #164]	@ (8000a28 <main+0x388>)
 8000982:	611a      	str	r2, [r3, #16]
  DMA1_Stream1->PAR = &(SPI2->RXDR);
 8000984:	4b35      	ldr	r3, [pc, #212]	@ (8000a5c <main+0x3bc>)
 8000986:	4a36      	ldr	r2, [pc, #216]	@ (8000a60 <main+0x3c0>)
 8000988:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_DOUBLE_BUFFER_M0;
 800098a:	4b34      	ldr	r3, [pc, #208]	@ (8000a5c <main+0x3bc>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a33      	ldr	r2, [pc, #204]	@ (8000a5c <main+0x3bc>)
 8000990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000994:	6013      	str	r3, [r2, #0]
  DMA1_Stream1->NDTR = AUX_ADC_BUFFER_HALF_SIZE;
 8000996:	4b31      	ldr	r3, [pc, #196]	@ (8000a5c <main+0x3bc>)
 8000998:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800099c:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream1->CR |= DMA_SxCR_TCIE;
 800099e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a5c <main+0x3bc>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a2e      	ldr	r2, [pc, #184]	@ (8000a5c <main+0x3bc>)
 80009a4:	f043 0310 	orr.w	r3, r3, #16
 80009a8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80009aa:	f3bf 8f4f 	dsb	sy
}
 80009ae:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 80009b0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a5c <main+0x3bc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a29      	ldr	r2, [pc, #164]	@ (8000a5c <main+0x3bc>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	6013      	str	r3, [r2, #0]

  //TIM1 UP DMA
  DMA1_Stream2->M0AR = &usZero;
 80009bc:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <main+0x3c4>)
 80009be:	4a16      	ldr	r2, [pc, #88]	@ (8000a18 <main+0x378>)
 80009c0:	60da      	str	r2, [r3, #12]
  DMA1_Stream2->PAR = &(SPI1->TXDR);
 80009c2:	4b28      	ldr	r3, [pc, #160]	@ (8000a64 <main+0x3c4>)
 80009c4:	4a28      	ldr	r2, [pc, #160]	@ (8000a68 <main+0x3c8>)
 80009c6:	609a      	str	r2, [r3, #8]
  DMA1_Stream2->NDTR = 1;
 80009c8:	4b26      	ldr	r3, [pc, #152]	@ (8000a64 <main+0x3c4>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80009ce:	f3bf 8f4f 	dsb	sy
}
 80009d2:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream2->CR |= DMA_SxCR_EN;
 80009d4:	4b23      	ldr	r3, [pc, #140]	@ (8000a64 <main+0x3c4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a22      	ldr	r2, [pc, #136]	@ (8000a64 <main+0x3c4>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]

  //TIM3 UP DMA
  DMA1_Stream3->M0AR = &usZero;
 80009e0:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <main+0x3cc>)
 80009e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <main+0x378>)
 80009e4:	60da      	str	r2, [r3, #12]
  DMA1_Stream3->PAR = &(SPI2->TXDR);
 80009e6:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <main+0x3cc>)
 80009e8:	4a21      	ldr	r2, [pc, #132]	@ (8000a70 <main+0x3d0>)
 80009ea:	609a      	str	r2, [r3, #8]
  DMA1_Stream3->NDTR = 1;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <main+0x3cc>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80009f2:	f3bf 8f4f 	dsb	sy
}
 80009f6:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream3->CR |= DMA_SxCR_EN;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <main+0x3cc>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a6c <main+0x3cc>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6013      	str	r3, [r2, #0]

  //initialize high speed ADC here
  SPI1->CR2 = 0; //reinitialize tsize
 8000a04:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <main+0x3d4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	605a      	str	r2, [r3, #4]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <main+0x3d4>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a19      	ldr	r2, [pc, #100]	@ (8000a74 <main+0x3d4>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	e030      	b.n	8000a78 <main+0x3d8>
 8000a16:	bf00      	nop
 8000a18:	30000000 	.word	0x30000000
 8000a1c:	30000004 	.word	0x30000004
 8000a20:	30010004 	.word	0x30010004
 8000a24:	30020004 	.word	0x30020004
 8000a28:	30028004 	.word	0x30028004
 8000a2c:	40020070 	.word	0x40020070
 8000a30:	30030108 	.word	0x30030108
 8000a34:	58020c18 	.word	0x58020c18
 8000a38:	40020088 	.word	0x40020088
 8000a3c:	3003010c 	.word	0x3003010c
 8000a40:	00ff000f 	.word	0x00ff000f
 8000a44:	40000800 	.word	0x40000800
 8000a48:	58020c00 	.word	0x58020c00
 8000a4c:	58001c00 	.word	0x58001c00
 8000a50:	02032018 	.word	0x02032018
 8000a54:	40020010 	.word	0x40020010
 8000a58:	40013030 	.word	0x40013030
 8000a5c:	40020028 	.word	0x40020028
 8000a60:	40003830 	.word	0x40003830
 8000a64:	40020040 	.word	0x40020040
 8000a68:	40013020 	.word	0x40013020
 8000a6c:	40020058 	.word	0x40020058
 8000a70:	40003820 	.word	0x40003820
 8000a74:	40013000 	.word	0x40013000
 8000a78:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000a7a:	4ba3      	ldr	r3, [pc, #652]	@ (8000d08 <main+0x668>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4aa2      	ldr	r2, [pc, #648]	@ (8000d08 <main+0x668>)
 8000a80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a84:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a8c:	489f      	ldr	r0, [pc, #636]	@ (8000d0c <main+0x66c>)
 8000a8e:	f01b fddb 	bl	801c648 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a92:	2064      	movs	r0, #100	@ 0x64
 8000a94:	f019 fb54 	bl	801a140 <HAL_Delay>
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a9e:	489b      	ldr	r0, [pc, #620]	@ (8000d0c <main+0x66c>)
 8000aa0:	f01b fdd2 	bl	801c648 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000aa4:	2064      	movs	r0, #100	@ 0x64
 8000aa6:	f019 fb4b 	bl	801a140 <HAL_Delay>
  uint8_t spi_data[2] = {0b00011011, 0x80+0x05}; //low reference, low input, vcm on, refpbuf on, input buf on
 8000aaa:	f248 531b 	movw	r3, #34075	@ 0x851b
 8000aae:	813b      	strh	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000ab0:	7a7b      	ldrb	r3, [r7, #9]
 8000ab2:	021b      	lsls	r3, r3, #8
 8000ab4:	7a3a      	ldrb	r2, [r7, #8]
 8000ab6:	431a      	orrs	r2, r3
 8000ab8:	4b93      	ldr	r3, [pc, #588]	@ (8000d08 <main+0x668>)
 8000aba:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000abc:	bf00      	nop
 8000abe:	4b92      	ldr	r3, [pc, #584]	@ (8000d08 <main+0x668>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0f9      	beq.n	8000abe <main+0x41e>
  spi_data[1]++;
 8000aca:	7a7b      	ldrb	r3, [r7, #9]
 8000acc:	3301      	adds	r3, #1
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00010000; //sync control mode
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000ad6:	7a7b      	ldrb	r3, [r7, #9]
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	7a3a      	ldrb	r2, [r7, #8]
 8000adc:	431a      	orrs	r2, r3
 8000ade:	4b8a      	ldr	r3, [pc, #552]	@ (8000d08 <main+0x668>)
 8000ae0:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000ae2:	bf00      	nop
 8000ae4:	4b88      	ldr	r3, [pc, #544]	@ (8000d08 <main+0x668>)
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d0f9      	beq.n	8000ae4 <main+0x444>
  spi_data[1]++;
 8000af0:	7a7b      	ldrb	r3, [r7, #9]
 8000af2:	3301      	adds	r3, #1
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00001001; //sinc4 osr16
 8000af8:	2309      	movs	r3, #9
 8000afa:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000afc:	7a7b      	ldrb	r3, [r7, #9]
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	7a3a      	ldrb	r2, [r7, #8]
 8000b02:	431a      	orrs	r2, r3
 8000b04:	4b80      	ldr	r3, [pc, #512]	@ (8000d08 <main+0x668>)
 8000b06:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b08:	bf00      	nop
 8000b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8000d08 <main+0x668>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d0f9      	beq.n	8000b0a <main+0x46a>
  spi_data[1]++;
 8000b16:	7a7b      	ldrb	r3, [r7, #9]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	727b      	strb	r3, [r7, #9]
  spi_data[0]=0b10000000; //external clock
 8000b1e:	2380      	movs	r3, #128	@ 0x80
 8000b20:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b22:	7a7b      	ldrb	r3, [r7, #9]
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	7a3a      	ldrb	r2, [r7, #8]
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	4b77      	ldr	r3, [pc, #476]	@ (8000d08 <main+0x668>)
 8000b2c:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b2e:	bf00      	nop
 8000b30:	4b75      	ldr	r3, [pc, #468]	@ (8000d08 <main+0x668>)
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0f9      	beq.n	8000b30 <main+0x490>
  spi_data[1]=0x80+0x03; //start conversion
 8000b3c:	2383      	movs	r3, #131	@ 0x83
 8000b3e:	727b      	strb	r3, [r7, #9]
  spi_data[0]=0b00000010;
 8000b40:	2302      	movs	r3, #2
 8000b42:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b44:	7a7b      	ldrb	r3, [r7, #9]
 8000b46:	021b      	lsls	r3, r3, #8
 8000b48:	7a3a      	ldrb	r2, [r7, #8]
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	4b6e      	ldr	r3, [pc, #440]	@ (8000d08 <main+0x668>)
 8000b4e:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b50:	bf00      	nop
 8000b52:	4b6d      	ldr	r3, [pc, #436]	@ (8000d08 <main+0x668>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f9      	beq.n	8000b52 <main+0x4b2>
  SPI1->CR1 &= ~SPI_CR1_SPE;
 8000b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8000d08 <main+0x668>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a69      	ldr	r2, [pc, #420]	@ (8000d08 <main+0x668>)
 8000b64:	f023 0301 	bic.w	r3, r3, #1
 8000b68:	6013      	str	r3, [r2, #0]

  //GADC Setup
  SPI2->CR2 = 0; //reinitialize tsize
 8000b6a:	4b69      	ldr	r3, [pc, #420]	@ (8000d10 <main+0x670>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= 0b11111; //use 32 bit mode for config
 8000b70:	4b67      	ldr	r3, [pc, #412]	@ (8000d10 <main+0x670>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	4a66      	ldr	r2, [pc, #408]	@ (8000d10 <main+0x670>)
 8000b76:	f043 031f 	orr.w	r3, r3, #31
 8000b7a:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000b7c:	4b64      	ldr	r3, [pc, #400]	@ (8000d10 <main+0x670>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a63      	ldr	r2, [pc, #396]	@ (8000d10 <main+0x670>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000b88:	4b61      	ldr	r3, [pc, #388]	@ (8000d10 <main+0x670>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a60      	ldr	r2, [pc, #384]	@ (8000d10 <main+0x670>)
 8000b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b92:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b9a:	485e      	ldr	r0, [pc, #376]	@ (8000d14 <main+0x674>)
 8000b9c:	f01b fd54 	bl	801c648 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000ba0:	2064      	movs	r0, #100	@ 0x64
 8000ba2:	f019 facd 	bl	801a140 <HAL_Delay>
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bac:	4859      	ldr	r0, [pc, #356]	@ (8000d14 <main+0x674>)
 8000bae:	f01b fd4b 	bl	801c648 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000bb2:	2064      	movs	r0, #100	@ 0x64
 8000bb4:	f019 fac4 	bl	801a140 <HAL_Delay>
  uint16_t ucGADCSPIData[2] = {0b1101000000000100, (1<<5) | (1<<4)}; //disable alarms
 8000bb8:	4b57      	ldr	r3, [pc, #348]	@ (8000d18 <main+0x678>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	607b      	str	r3, [r7, #4]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000bbe:	88bb      	ldrh	r3, [r7, #4]
 8000bc0:	041b      	lsls	r3, r3, #16
 8000bc2:	88fa      	ldrh	r2, [r7, #6]
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4b52      	ldr	r3, [pc, #328]	@ (8000d10 <main+0x670>)
 8000bc8:	621a      	str	r2, [r3, #32]
  while((SPI2->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000bca:	bf00      	nop
 8000bcc:	4b50      	ldr	r3, [pc, #320]	@ (8000d10 <main+0x670>)
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0f9      	beq.n	8000bcc <main+0x52c>
  ucGADCSPIData[0] = 0b1101000000010100; //14h
 8000bd8:	f24d 0314 	movw	r3, #53268	@ 0xd014
 8000bdc:	80bb      	strh	r3, [r7, #4]
  ucGADCSPIData[1] = 0b10; //range select +-1.5x VREF
 8000bde:	2302      	movs	r3, #2
 8000be0:	80fb      	strh	r3, [r7, #6]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000be2:	88bb      	ldrh	r3, [r7, #4]
 8000be4:	041b      	lsls	r3, r3, #16
 8000be6:	88fa      	ldrh	r2, [r7, #6]
 8000be8:	431a      	orrs	r2, r3
 8000bea:	4b49      	ldr	r3, [pc, #292]	@ (8000d10 <main+0x670>)
 8000bec:	621a      	str	r2, [r3, #32]
  while((SPI2->SR & SPI_SR_TXC) == 0){};
 8000bee:	bf00      	nop
 8000bf0:	4b47      	ldr	r3, [pc, #284]	@ (8000d10 <main+0x670>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0f9      	beq.n	8000bf0 <main+0x550>
  SPI2->CR1 &= ~SPI_CR1_SPE;
 8000bfc:	4b44      	ldr	r3, [pc, #272]	@ (8000d10 <main+0x670>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a43      	ldr	r2, [pc, #268]	@ (8000d10 <main+0x670>)
 8000c02:	f023 0301 	bic.w	r3, r3, #1
 8000c06:	6013      	str	r3, [r2, #0]
  SPI2->CFG1 &= ~0b11111;
 8000c08:	4b41      	ldr	r3, [pc, #260]	@ (8000d10 <main+0x670>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	4a40      	ldr	r2, [pc, #256]	@ (8000d10 <main+0x670>)
 8000c0e:	f023 031f 	bic.w	r3, r3, #31
 8000c12:	6093      	str	r3, [r2, #8]
  SPI2->CFG1 |= 0b1111; //switch back to 16 bit transfers
 8000c14:	4b3e      	ldr	r3, [pc, #248]	@ (8000d10 <main+0x670>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	4a3d      	ldr	r2, [pc, #244]	@ (8000d10 <main+0x670>)
 8000c1a:	f043 030f 	orr.w	r3, r3, #15
 8000c1e:	6093      	str	r3, [r2, #8]

  //TC ADC SETUP
  //interleave temp sensor and internal ADC
  usTCADCConfig[0] = 0b1000101110001010; //FSR 0.256mV, 128SPS, Single Conversion, Start Conversion, Default Inputs
 8000c20:	4b3e      	ldr	r3, [pc, #248]	@ (8000d1c <main+0x67c>)
 8000c22:	f648 328a 	movw	r2, #35722	@ 0x8b8a
 8000c26:	801a      	strh	r2, [r3, #0]
  usTCADCConfig[1] = 0b1000101110011010; //same as above, use internal temp sensor
 8000c28:	4b3c      	ldr	r3, [pc, #240]	@ (8000d1c <main+0x67c>)
 8000c2a:	f648 329a 	movw	r2, #35738	@ 0x8b9a
 8000c2e:	805a      	strh	r2, [r3, #2]
  //TIM5 UP
  DMA1_Stream6->M0AR = usTCADCConfig;
 8000c30:	4b3b      	ldr	r3, [pc, #236]	@ (8000d20 <main+0x680>)
 8000c32:	4a3a      	ldr	r2, [pc, #232]	@ (8000d1c <main+0x67c>)
 8000c34:	60da      	str	r2, [r3, #12]
  DMA1_Stream6->PAR = &(SPI3->TXDR);
 8000c36:	4b3a      	ldr	r3, [pc, #232]	@ (8000d20 <main+0x680>)
 8000c38:	4a3a      	ldr	r2, [pc, #232]	@ (8000d24 <main+0x684>)
 8000c3a:	609a      	str	r2, [r3, #8]
  DMA1_Stream6->NDTR = 2;
 8000c3c:	4b38      	ldr	r3, [pc, #224]	@ (8000d20 <main+0x680>)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c42:	f3bf 8f4f 	dsb	sy
}
 8000c46:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream6->CR |= DMA_SxCR_EN;
 8000c48:	4b35      	ldr	r3, [pc, #212]	@ (8000d20 <main+0x680>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a34      	ldr	r2, [pc, #208]	@ (8000d20 <main+0x680>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6013      	str	r3, [r2, #0]
  //SPI3 RX Stream
  DMA1_Stream7->M0AR = usTCADCData0;
 8000c54:	4b34      	ldr	r3, [pc, #208]	@ (8000d28 <main+0x688>)
 8000c56:	4a35      	ldr	r2, [pc, #212]	@ (8000d2c <main+0x68c>)
 8000c58:	60da      	str	r2, [r3, #12]
  DMA1_Stream7->M1AR = usTCADCData1;
 8000c5a:	4b33      	ldr	r3, [pc, #204]	@ (8000d28 <main+0x688>)
 8000c5c:	4a34      	ldr	r2, [pc, #208]	@ (8000d30 <main+0x690>)
 8000c5e:	611a      	str	r2, [r3, #16]
  DMA1_Stream7->PAR = &(SPI3->RXDR);
 8000c60:	4b31      	ldr	r3, [pc, #196]	@ (8000d28 <main+0x688>)
 8000c62:	4a34      	ldr	r2, [pc, #208]	@ (8000d34 <main+0x694>)
 8000c64:	609a      	str	r2, [r3, #8]
  DMA1_Stream7->CR |= DMA_DOUBLE_BUFFER_M0;
 8000c66:	4b30      	ldr	r3, [pc, #192]	@ (8000d28 <main+0x688>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d28 <main+0x688>)
 8000c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c70:	6013      	str	r3, [r2, #0]
  DMA1_Stream7->NDTR = TC_ADC_BUFFER_HALF_SIZE;
 8000c72:	4b2d      	ldr	r3, [pc, #180]	@ (8000d28 <main+0x688>)
 8000c74:	2240      	movs	r2, #64	@ 0x40
 8000c76:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream7->CR |= DMA_SxCR_TCIE;
 8000c78:	4b2b      	ldr	r3, [pc, #172]	@ (8000d28 <main+0x688>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a2a      	ldr	r2, [pc, #168]	@ (8000d28 <main+0x688>)
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c84:	f3bf 8f4f 	dsb	sy
}
 8000c88:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream7->CR |= DMA_SxCR_EN;
 8000c8a:	4b27      	ldr	r3, [pc, #156]	@ (8000d28 <main+0x688>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a26      	ldr	r2, [pc, #152]	@ (8000d28 <main+0x688>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6013      	str	r3, [r2, #0]
  //SPI3 Config
  SPI3->CR2 = 0; //reinitialize tsize
 8000c96:	4b28      	ldr	r3, [pc, #160]	@ (8000d38 <main+0x698>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	605a      	str	r2, [r3, #4]
  SPI3->CFG1 |= SPI_CFG1_RXDMAEN;
 8000c9c:	4b26      	ldr	r3, [pc, #152]	@ (8000d38 <main+0x698>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	4a25      	ldr	r2, [pc, #148]	@ (8000d38 <main+0x698>)
 8000ca2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca6:	6093      	str	r3, [r2, #8]
  SPI3->CR1 |= SPI_CR1_SPE;
 8000ca8:	4b23      	ldr	r3, [pc, #140]	@ (8000d38 <main+0x698>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a22      	ldr	r2, [pc, #136]	@ (8000d38 <main+0x698>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6013      	str	r3, [r2, #0]
  SPI3->CR1 |= SPI_CR1_CSTART;
 8000cb4:	4b20      	ldr	r3, [pc, #128]	@ (8000d38 <main+0x698>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000d38 <main+0x698>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cbe:	6013      	str	r3, [r2, #0]
  //enable TIM5 (SPI3 TX)
  TIM5->CR1 |= TIM_CR1_URS;
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <main+0x69c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d3c <main+0x69c>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6013      	str	r3, [r2, #0]
  TIM5->CR1 &= ~TIM_CR1_UDIS;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <main+0x69c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d3c <main+0x69c>)
 8000cd2:	f023 0302 	bic.w	r3, r3, #2
 8000cd6:	6013      	str	r3, [r2, #0]
  TIM5->DIER |= TIM_DMA_UPDATE;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <main+0x69c>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	4a17      	ldr	r2, [pc, #92]	@ (8000d3c <main+0x69c>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce2:	60d3      	str	r3, [r2, #12]
  TIM5->EGR |= TIM_EGR_UG;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <main+0x69c>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <main+0x69c>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6153      	str	r3, [r2, #20]
  TIM5->CR1 |= TIM_CR1_CEN;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <main+0x69c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a11      	ldr	r2, [pc, #68]	@ (8000d3c <main+0x69c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2120      	movs	r1, #32
 8000d00:	480f      	ldr	r0, [pc, #60]	@ (8000d40 <main+0x6a0>)
 8000d02:	f01b fca1 	bl	801c648 <HAL_GPIO_WritePin>
 8000d06:	e01d      	b.n	8000d44 <main+0x6a4>
 8000d08:	40013000 	.word	0x40013000
 8000d0c:	58020000 	.word	0x58020000
 8000d10:	40003800 	.word	0x40003800
 8000d14:	58020c00 	.word	0x58020c00
 8000d18:	080242c4 	.word	0x080242c4
 8000d1c:	30030004 	.word	0x30030004
 8000d20:	400200a0 	.word	0x400200a0
 8000d24:	40003c20 	.word	0x40003c20
 8000d28:	400200b8 	.word	0x400200b8
 8000d2c:	30030008 	.word	0x30030008
 8000d30:	30030088 	.word	0x30030088
 8000d34:	40003c30 	.word	0x40003c30
 8000d38:	40003c00 	.word	0x40003c00
 8000d3c:	40000c00 	.word	0x40000c00
 8000d40:	58021000 	.word	0x58021000

  //Enable SPI1
//  SPI1->CR1 &=  ~SPI_CR1_SPE;
  SPI1->CR2 = 0; //reinitialize tsize
 8000d44:	4b53      	ldr	r3, [pc, #332]	@ (8000e94 <main+0x7f4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
  SPI1->CFG1 |= SPI_CFG1_RXDMAEN;
 8000d4a:	4b52      	ldr	r3, [pc, #328]	@ (8000e94 <main+0x7f4>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	4a51      	ldr	r2, [pc, #324]	@ (8000e94 <main+0x7f4>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d54:	6093      	str	r3, [r2, #8]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000d56:	4b4f      	ldr	r3, [pc, #316]	@ (8000e94 <main+0x7f4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a4e      	ldr	r2, [pc, #312]	@ (8000e94 <main+0x7f4>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000d62:	4b4c      	ldr	r3, [pc, #304]	@ (8000e94 <main+0x7f4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a4b      	ldr	r2, [pc, #300]	@ (8000e94 <main+0x7f4>)
 8000d68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6c:	6013      	str	r3, [r2, #0]

  //Enable SPI2
  SPI2->CR2 = 0; //reinitialize tsize
 8000d6e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e98 <main+0x7f8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= SPI_CFG1_RXDMAEN;
 8000d74:	4b48      	ldr	r3, [pc, #288]	@ (8000e98 <main+0x7f8>)
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	4a47      	ldr	r2, [pc, #284]	@ (8000e98 <main+0x7f8>)
 8000d7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d7e:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000d80:	4b45      	ldr	r3, [pc, #276]	@ (8000e98 <main+0x7f8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a44      	ldr	r2, [pc, #272]	@ (8000e98 <main+0x7f8>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000d8c:	4b42      	ldr	r3, [pc, #264]	@ (8000e98 <main+0x7f8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a41      	ldr	r2, [pc, #260]	@ (8000e98 <main+0x7f8>)
 8000d92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d96:	6013      	str	r3, [r2, #0]

  //Enable TIM1 (SPI1)
  TIM1->CR1 |= TIM_CR1_URS;
 8000d98:	4b40      	ldr	r3, [pc, #256]	@ (8000e9c <main+0x7fc>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a3f      	ldr	r2, [pc, #252]	@ (8000e9c <main+0x7fc>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	6013      	str	r3, [r2, #0]
  TIM1->CR1 &= ~TIM_CR1_UDIS;
 8000da4:	4b3d      	ldr	r3, [pc, #244]	@ (8000e9c <main+0x7fc>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a3c      	ldr	r2, [pc, #240]	@ (8000e9c <main+0x7fc>)
 8000daa:	f023 0302 	bic.w	r3, r3, #2
 8000dae:	6013      	str	r3, [r2, #0]
  TIM1->DIER |= TIM_DMA_UPDATE;
 8000db0:	4b3a      	ldr	r3, [pc, #232]	@ (8000e9c <main+0x7fc>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	4a39      	ldr	r2, [pc, #228]	@ (8000e9c <main+0x7fc>)
 8000db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dba:	60d3      	str	r3, [r2, #12]
  TIM1->EGR |= TIM_EGR_UG;
 8000dbc:	4b37      	ldr	r3, [pc, #220]	@ (8000e9c <main+0x7fc>)
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	4a36      	ldr	r2, [pc, #216]	@ (8000e9c <main+0x7fc>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6153      	str	r3, [r2, #20]
  TIM1->CR1 |= TIM_CR1_CEN;
 8000dc8:	4b34      	ldr	r3, [pc, #208]	@ (8000e9c <main+0x7fc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a33      	ldr	r2, [pc, #204]	@ (8000e9c <main+0x7fc>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6013      	str	r3, [r2, #0]

  //Enable TIM3 (SPI2)
  TIM3->CR1 |= TIM_CR1_URS;
 8000dd4:	4b32      	ldr	r3, [pc, #200]	@ (8000ea0 <main+0x800>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a31      	ldr	r2, [pc, #196]	@ (8000ea0 <main+0x800>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6013      	str	r3, [r2, #0]
  TIM3->CR1 &= ~TIM_CR1_UDIS;
 8000de0:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea0 <main+0x800>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a2e      	ldr	r2, [pc, #184]	@ (8000ea0 <main+0x800>)
 8000de6:	f023 0302 	bic.w	r3, r3, #2
 8000dea:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= TIM_DMA_UPDATE;
 8000dec:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea0 <main+0x800>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	4a2b      	ldr	r2, [pc, #172]	@ (8000ea0 <main+0x800>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df6:	60d3      	str	r3, [r2, #12]
  TIM3->EGR |= TIM_EGR_UG;
 8000df8:	4b29      	ldr	r3, [pc, #164]	@ (8000ea0 <main+0x800>)
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	4a28      	ldr	r2, [pc, #160]	@ (8000ea0 <main+0x800>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6153      	str	r3, [r2, #20]
  TIM3->CR1 |= TIM_CR1_CEN;
 8000e04:	4b26      	ldr	r3, [pc, #152]	@ (8000ea0 <main+0x800>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a25      	ldr	r2, [pc, #148]	@ (8000ea0 <main+0x800>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6013      	str	r3, [r2, #0]


  /* Initialise the interface descriptor for WinPCap for example. */
     pxSTM32H_FillInterfaceDescriptor( 0, &( xInterfaces[ 0 ] ) );
 8000e10:	4924      	ldr	r1, [pc, #144]	@ (8000ea4 <main+0x804>)
 8000e12:	2000      	movs	r0, #0
 8000e14:	f017 fa36 	bl	8018284 <pxSTM32H_FillInterfaceDescriptor>

     FreeRTOS_FillEndPoint( &( xInterfaces[ 0 ] ), &( xEndPoints[ 0 ] ), ucIPAddress,
 8000e18:	4b23      	ldr	r3, [pc, #140]	@ (8000ea8 <main+0x808>)
 8000e1a:	9302      	str	r3, [sp, #8]
 8000e1c:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <main+0x80c>)
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	4b23      	ldr	r3, [pc, #140]	@ (8000eb0 <main+0x810>)
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	4b23      	ldr	r3, [pc, #140]	@ (8000eb4 <main+0x814>)
 8000e26:	4a24      	ldr	r2, [pc, #144]	@ (8000eb8 <main+0x818>)
 8000e28:	4924      	ldr	r1, [pc, #144]	@ (8000ebc <main+0x81c>)
 8000e2a:	481e      	ldr	r0, [pc, #120]	@ (8000ea4 <main+0x804>)
 8000e2c:	f00c fb08 	bl	800d440 <FreeRTOS_FillEndPoint>
     #endif /* ( ipconfigUSE_DHCP != 0 ) */

     /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
        are created in the vApplicationIPNetworkEventHook() hook function
        below.  The hook function is called when the network connects. */
      FreeRTOS_IPInit_Multi();
 8000e30:	f008 fc56 	bl	80096e0 <FreeRTOS_IPInit_Multi>


      xTaskCreate( prvServerWorkTask, "SvrWork", mainTCP_SERVER_STACK_SIZE, NULL, 0, &xServerWorkTaskHandle );
 8000e34:	4b22      	ldr	r3, [pc, #136]	@ (8000ec0 <main+0x820>)
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e42:	4920      	ldr	r1, [pc, #128]	@ (8000ec4 <main+0x824>)
 8000e44:	4820      	ldr	r0, [pc, #128]	@ (8000ec8 <main+0x828>)
 8000e46:	f003 fa23 	bl	8004290 <xTaskCreate>
//      xTaskCreate ( vNotifierTask, "Notif", 200, NULL, 0, &vNotifierTaskHandle);
      xTaskCreate ( vADCTCPTask, "HSADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vADCTCPTaskHandle);
 8000e4a:	4b20      	ldr	r3, [pc, #128]	@ (8000ecc <main+0x82c>)
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	2301      	movs	r3, #1
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2300      	movs	r3, #0
 8000e54:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e58:	491d      	ldr	r1, [pc, #116]	@ (8000ed0 <main+0x830>)
 8000e5a:	481e      	ldr	r0, [pc, #120]	@ (8000ed4 <main+0x834>)
 8000e5c:	f003 fa18 	bl	8004290 <xTaskCreate>
      xTaskCreate ( vAuxADCTCPTask, "GADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vAuxADCTCPTaskHandle);
 8000e60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <main+0x838>)
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	2301      	movs	r3, #1
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e6e:	491b      	ldr	r1, [pc, #108]	@ (8000edc <main+0x83c>)
 8000e70:	481b      	ldr	r0, [pc, #108]	@ (8000ee0 <main+0x840>)
 8000e72:	f003 fa0d 	bl	8004290 <xTaskCreate>
      xTaskCreate ( vTCADCTCPTask, "TCADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vTCADCTCPTaskHandle);
 8000e76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee4 <main+0x844>)
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e84:	4918      	ldr	r1, [pc, #96]	@ (8000ee8 <main+0x848>)
 8000e86:	4819      	ldr	r0, [pc, #100]	@ (8000eec <main+0x84c>)
 8000e88:	f003 fa02 	bl	8004290 <xTaskCreate>

      vTaskStartScheduler();
 8000e8c:	f003 fbbc 	bl	8004608 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <main+0x7f0>
 8000e94:	40013000 	.word	0x40013000
 8000e98:	40003800 	.word	0x40003800
 8000e9c:	40010000 	.word	0x40010000
 8000ea0:	40000400 	.word	0x40000400
 8000ea4:	20000860 	.word	0x20000860
 8000ea8:	080277ac 	.word	0x080277ac
 8000eac:	080277a8 	.word	0x080277a8
 8000eb0:	080277a4 	.word	0x080277a4
 8000eb4:	080277a0 	.word	0x080277a0
 8000eb8:	0802779c 	.word	0x0802779c
 8000ebc:	20000888 	.word	0x20000888
 8000ec0:	20000d30 	.word	0x20000d30
 8000ec4:	08024298 	.word	0x08024298
 8000ec8:	08001b49 	.word	0x08001b49
 8000ecc:	20000d34 	.word	0x20000d34
 8000ed0:	080242a0 	.word	0x080242a0
 8000ed4:	08001b71 	.word	0x08001b71
 8000ed8:	20000d38 	.word	0x20000d38
 8000edc:	080242ac 	.word	0x080242ac
 8000ee0:	08001d29 	.word	0x08001d29
 8000ee4:	20000d3c 	.word	0x20000d3c
 8000ee8:	080242b8 	.word	0x080242b8
 8000eec:	08001ee1 	.word	0x08001ee1

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09e      	sub	sp, #120	@ 0x78
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000efa:	224c      	movs	r2, #76	@ 0x4c
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f021 fc4b 	bl	802279a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	2220      	movs	r2, #32
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f021 fc44 	bl	802279a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f12:	2002      	movs	r0, #2
 8000f14:	f01b fce6 	bl	801c8e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	4b48      	ldr	r3, [pc, #288]	@ (8001040 <SystemClock_Config+0x150>)
 8000f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f20:	4a47      	ldr	r2, [pc, #284]	@ (8001040 <SystemClock_Config+0x150>)
 8000f22:	f023 0301 	bic.w	r3, r3, #1
 8000f26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f28:	4b45      	ldr	r3, [pc, #276]	@ (8001040 <SystemClock_Config+0x150>)
 8000f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	4b44      	ldr	r3, [pc, #272]	@ (8001044 <SystemClock_Config+0x154>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4a43      	ldr	r2, [pc, #268]	@ (8001044 <SystemClock_Config+0x154>)
 8000f38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f3c:	6193      	str	r3, [r2, #24]
 8000f3e:	4b41      	ldr	r3, [pc, #260]	@ (8001044 <SystemClock_Config+0x154>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f4a:	bf00      	nop
 8000f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8001044 <SystemClock_Config+0x154>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f58:	d1f8      	bne.n	8000f4c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001048 <SystemClock_Config+0x158>)
 8000f5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f60:	4a39      	ldr	r2, [pc, #228]	@ (8001048 <SystemClock_Config+0x158>)
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f6a:	4b37      	ldr	r3, [pc, #220]	@ (8001048 <SystemClock_Config+0x158>)
 8000f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f78:	2300      	movs	r3, #0
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	4b31      	ldr	r3, [pc, #196]	@ (8001044 <SystemClock_Config+0x154>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a30      	ldr	r2, [pc, #192]	@ (8001044 <SystemClock_Config+0x154>)
 8000f82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f86:	6193      	str	r3, [r2, #24]
 8000f88:	4b2e      	ldr	r3, [pc, #184]	@ (8001044 <SystemClock_Config+0x154>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	4b2b      	ldr	r3, [pc, #172]	@ (8001040 <SystemClock_Config+0x150>)
 8000f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f96:	4a2a      	ldr	r2, [pc, #168]	@ (8001040 <SystemClock_Config+0x150>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f9e:	4b28      	ldr	r3, [pc, #160]	@ (8001040 <SystemClock_Config+0x150>)
 8000fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000faa:	bf00      	nop
 8000fac:	4b25      	ldr	r3, [pc, #148]	@ (8001044 <SystemClock_Config+0x154>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fb8:	d1f8      	bne.n	8000fac <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fbe:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000fc2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000fd0:	2340      	movs	r3, #64	@ 0x40
 8000fd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fe0:	230c      	movs	r3, #12
 8000fe2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f01b fcb1 	bl	801c958 <HAL_RCC_OscConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ffc:	f001 f882 	bl	8002104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001000:	233f      	movs	r3, #63	@ 0x3f
 8001002:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001004:	2303      	movs	r3, #3
 8001006:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800100c:	2308      	movs	r3, #8
 800100e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001010:	2340      	movs	r3, #64	@ 0x40
 8001012:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001014:	2340      	movs	r3, #64	@ 0x40
 8001016:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800101e:	2340      	movs	r3, #64	@ 0x40
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	2102      	movs	r1, #2
 8001028:	4618      	mov	r0, r3
 800102a:	f01c f8ef 	bl	801d20c <HAL_RCC_ClockConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001034:	f001 f866 	bl	8002104 <Error_Handler>
  }
}
 8001038:	bf00      	nop
 800103a:	3778      	adds	r7, #120	@ 0x78
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	58000400 	.word	0x58000400
 8001044:	58024800 	.word	0x58024800
 8001048:	58024400 	.word	0x58024400

0800104c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0b0      	sub	sp, #192	@ 0xc0
 8001050:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001052:	463b      	mov	r3, r7
 8001054:	22c0      	movs	r2, #192	@ 0xc0
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f021 fb9e 	bl	802279a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 800105e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 800106a:	2308      	movs	r3, #8
 800106c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 64;
 800106e:	2340      	movs	r3, #64	@ 0x40
 8001070:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001072:	2302      	movs	r3, #2
 8001074:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001076:	2302      	movs	r3, #2
 8001078:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800107e:	2340      	movs	r3, #64	@ 0x40
 8001080:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800108a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800108e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	4618      	mov	r0, r3
 8001094:	f01c fc46 	bl	801d924 <HAL_RCCEx_PeriphCLKConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800109e:	f001 f831 	bl	8002104 <Error_Handler>
  }
}
 80010a2:	bf00      	nop
 80010a4:	37c0      	adds	r7, #192	@ 0xc0
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <MX_I2C4_Init+0x74>)
 80010b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001124 <MX_I2C4_Init+0x78>)
 80010b4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <MX_I2C4_Init+0x74>)
 80010b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001128 <MX_I2C4_Init+0x7c>)
 80010ba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80010bc:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <MX_I2C4_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c2:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <MX_I2C4_Init+0x74>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <MX_I2C4_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80010ce:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <MX_I2C4_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <MX_I2C4_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MX_I2C4_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_I2C4_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80010e6:	480e      	ldr	r0, [pc, #56]	@ (8001120 <MX_I2C4_Init+0x74>)
 80010e8:	f01b fac8 	bl	801c67c <HAL_I2C_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80010f2:	f001 f807 	bl	8002104 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010f6:	2100      	movs	r1, #0
 80010f8:	4809      	ldr	r0, [pc, #36]	@ (8001120 <MX_I2C4_Init+0x74>)
 80010fa:	f01b fb5b 	bl	801c7b4 <HAL_I2CEx_ConfigAnalogFilter>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001104:	f000 fffe 	bl	8002104 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001108:	2100      	movs	r1, #0
 800110a:	4805      	ldr	r0, [pc, #20]	@ (8001120 <MX_I2C4_Init+0x74>)
 800110c:	f01b fb9d 	bl	801c84a <HAL_I2CEx_ConfigDigitalFilter>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001116:	f000 fff5 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200000a4 	.word	0x200000a4
 8001124:	58001c00 	.word	0x58001c00
 8001128:	10c0ecff 	.word	0x10c0ecff

0800112c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001130:	4b28      	ldr	r3, [pc, #160]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 8001132:	4a29      	ldr	r2, [pc, #164]	@ (80011d8 <MX_SPI1_Init+0xac>)
 8001134:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001136:	4b27      	ldr	r3, [pc, #156]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 8001138:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800113c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800113e:	4b25      	ldr	r3, [pc, #148]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001144:	4b23      	ldr	r3, [pc, #140]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 8001146:	220f      	movs	r2, #15
 8001148:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800114a:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001150:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 8001152:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001156:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 800115a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800115e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001160:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 8001162:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001166:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800116e:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001174:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800117a:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 800117c:	2200      	movs	r2, #0
 800117e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 8001182:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001186:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 800118a:	2200      	movs	r2, #0
 800118c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 8001190:	2200      	movs	r2, #0
 8001192:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 8001196:	2200      	movs	r2, #0
 8001198:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800119a:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 800119c:	2200      	movs	r2, #0
 800119e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 80011a2:	2203      	movs	r2, #3
 80011a4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 80011a8:	2230      	movs	r2, #48	@ 0x30
 80011aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <MX_SPI1_Init+0xa8>)
 80011c0:	f01e f9dc 	bl	801f57c <HAL_SPI_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80011ca:	f000 ff9b 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000f8 	.word	0x200000f8
 80011d8:	40013000 	.word	0x40013000

080011dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011e0:	4b27      	ldr	r3, [pc, #156]	@ (8001280 <MX_SPI2_Init+0xa4>)
 80011e2:	4a28      	ldr	r2, [pc, #160]	@ (8001284 <MX_SPI2_Init+0xa8>)
 80011e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011e6:	4b26      	ldr	r3, [pc, #152]	@ (8001280 <MX_SPI2_Init+0xa4>)
 80011e8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011ee:	4b24      	ldr	r3, [pc, #144]	@ (8001280 <MX_SPI2_Init+0xa4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80011f4:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <MX_SPI2_Init+0xa4>)
 80011f6:	220f      	movs	r2, #15
 80011f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011fa:	4b21      	ldr	r3, [pc, #132]	@ (8001280 <MX_SPI2_Init+0xa4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001200:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <MX_SPI2_Init+0xa4>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001206:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <MX_SPI2_Init+0xa4>)
 8001208:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800120c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800120e:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <MX_SPI2_Init+0xa4>)
 8001210:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001214:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001216:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <MX_SPI2_Init+0xa4>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800121c:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <MX_SPI2_Init+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001222:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <MX_SPI2_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001228:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <MX_SPI2_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800122e:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <MX_SPI2_Init+0xa4>)
 8001230:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001234:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001236:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <MX_SPI2_Init+0xa4>)
 8001238:	2200      	movs	r2, #0
 800123a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800123c:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <MX_SPI2_Init+0xa4>)
 800123e:	2200      	movs	r2, #0
 8001240:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <MX_SPI2_Init+0xa4>)
 8001244:	2200      	movs	r2, #0
 8001246:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001248:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <MX_SPI2_Init+0xa4>)
 800124a:	2200      	movs	r2, #0
 800124c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 800124e:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <MX_SPI2_Init+0xa4>)
 8001250:	2203      	movs	r2, #3
 8001252:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8001254:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <MX_SPI2_Init+0xa4>)
 8001256:	2230      	movs	r2, #48	@ 0x30
 8001258:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <MX_SPI2_Init+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <MX_SPI2_Init+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <MX_SPI2_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	@ (8001280 <MX_SPI2_Init+0xa4>)
 800126e:	f01e f985 	bl	801f57c <HAL_SPI_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001278:	f000 ff44 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000180 	.word	0x20000180
 8001284:	40003800 	.word	0x40003800

08001288 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800128c:	4b28      	ldr	r3, [pc, #160]	@ (8001330 <MX_SPI3_Init+0xa8>)
 800128e:	4a29      	ldr	r2, [pc, #164]	@ (8001334 <MX_SPI3_Init+0xac>)
 8001290:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001292:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <MX_SPI3_Init+0xa8>)
 8001294:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001298:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800129a:	4b25      	ldr	r3, [pc, #148]	@ (8001330 <MX_SPI3_Init+0xa8>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80012a0:	4b23      	ldr	r3, [pc, #140]	@ (8001330 <MX_SPI3_Init+0xa8>)
 80012a2:	220f      	movs	r2, #15
 80012a4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a6:	4b22      	ldr	r3, [pc, #136]	@ (8001330 <MX_SPI3_Init+0xa8>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012ac:	4b20      	ldr	r3, [pc, #128]	@ (8001330 <MX_SPI3_Init+0xa8>)
 80012ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80012b2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <MX_SPI3_Init+0xa8>)
 80012b6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80012ba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <MX_SPI3_Init+0xa8>)
 80012be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012c2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <MX_SPI3_Init+0xa8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ca:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <MX_SPI3_Init+0xa8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d0:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <MX_SPI3_Init+0xa8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80012d6:	4b16      	ldr	r3, [pc, #88]	@ (8001330 <MX_SPI3_Init+0xa8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012dc:	4b14      	ldr	r3, [pc, #80]	@ (8001330 <MX_SPI3_Init+0xa8>)
 80012de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012e4:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <MX_SPI3_Init+0xa8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012ea:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <MX_SPI3_Init+0xa8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <MX_SPI3_Init+0xa8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <MX_SPI3_Init+0xa8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_02CYCLE;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <MX_SPI3_Init+0xa8>)
 80012fe:	2202      	movs	r2, #2
 8001300:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8001302:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <MX_SPI3_Init+0xa8>)
 8001304:	2220      	movs	r2, #32
 8001306:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001308:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <MX_SPI3_Init+0xa8>)
 800130a:	2200      	movs	r2, #0
 800130c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800130e:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <MX_SPI3_Init+0xa8>)
 8001310:	2200      	movs	r2, #0
 8001312:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <MX_SPI3_Init+0xa8>)
 8001316:	2200      	movs	r2, #0
 8001318:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800131a:	4805      	ldr	r0, [pc, #20]	@ (8001330 <MX_SPI3_Init+0xa8>)
 800131c:	f01e f92e 	bl	801f57c <HAL_SPI_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001326:	f000 feed 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000208 	.word	0x20000208
 8001334:	40003c00 	.word	0x40003c00

08001338 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001356:	4b1f      	ldr	r3, [pc, #124]	@ (80013d4 <MX_TIM1_Init+0x9c>)
 8001358:	4a1f      	ldr	r2, [pc, #124]	@ (80013d8 <MX_TIM1_Init+0xa0>)
 800135a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800135c:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <MX_TIM1_Init+0x9c>)
 800135e:	2200      	movs	r2, #0
 8001360:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b1c      	ldr	r3, [pc, #112]	@ (80013d4 <MX_TIM1_Init+0x9c>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001368:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <MX_TIM1_Init+0x9c>)
 800136a:	22ff      	movs	r2, #255	@ 0xff
 800136c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136e:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <MX_TIM1_Init+0x9c>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001374:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <MX_TIM1_Init+0x9c>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137a:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <MX_TIM1_Init+0x9c>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001380:	4814      	ldr	r0, [pc, #80]	@ (80013d4 <MX_TIM1_Init+0x9c>)
 8001382:	f01e fcf4 	bl	801fd6e <HAL_TIM_Base_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800138c:	f000 feba 	bl	8002104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001390:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001394:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4619      	mov	r1, r3
 800139c:	480d      	ldr	r0, [pc, #52]	@ (80013d4 <MX_TIM1_Init+0x9c>)
 800139e:	f01e ff2b 	bl	80201f8 <HAL_TIM_ConfigClockSource>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013a8:	f000 feac 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013ac:	2320      	movs	r3, #32
 80013ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <MX_TIM1_Init+0x9c>)
 80013be:	f01f fc2d 	bl	8020c1c <HAL_TIMEx_MasterConfigSynchronization>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80013c8:	f000 fe9c 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	3720      	adds	r7, #32
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200003f8 	.word	0x200003f8
 80013d8:	40010000 	.word	0x40010000

080013dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001470 <MX_TIM3_Init+0x94>)
 80013fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001474 <MX_TIM3_Init+0x98>)
 80013fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 8001400:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <MX_TIM3_Init+0x94>)
 8001402:	22c7      	movs	r2, #199	@ 0xc7
 8001404:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001406:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <MX_TIM3_Init+0x94>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 800140c:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <MX_TIM3_Init+0x94>)
 800140e:	2209      	movs	r2, #9
 8001410:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001412:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <MX_TIM3_Init+0x94>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001418:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <MX_TIM3_Init+0x94>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800141e:	4814      	ldr	r0, [pc, #80]	@ (8001470 <MX_TIM3_Init+0x94>)
 8001420:	f01e fca5 	bl	801fd6e <HAL_TIM_Base_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800142a:	f000 fe6b 	bl	8002104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001432:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4619      	mov	r1, r3
 800143a:	480d      	ldr	r0, [pc, #52]	@ (8001470 <MX_TIM3_Init+0x94>)
 800143c:	f01e fedc 	bl	80201f8 <HAL_TIM_ConfigClockSource>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001446:	f000 fe5d 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	@ (8001470 <MX_TIM3_Init+0x94>)
 8001458:	f01f fbe0 	bl	8020c1c <HAL_TIMEx_MasterConfigSynchronization>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001462:	f000 fe4f 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	3720      	adds	r7, #32
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000490 	.word	0x20000490
 8001474:	40000400 	.word	0x40000400

08001478 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08e      	sub	sp, #56	@ 0x38
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001498:	463b      	mov	r3, r7
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]
 80014a6:	615a      	str	r2, [r3, #20]
 80014a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014aa:	4b34      	ldr	r3, [pc, #208]	@ (800157c <MX_TIM4_Init+0x104>)
 80014ac:	4a34      	ldr	r2, [pc, #208]	@ (8001580 <MX_TIM4_Init+0x108>)
 80014ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 80014b0:	4b32      	ldr	r3, [pc, #200]	@ (800157c <MX_TIM4_Init+0x104>)
 80014b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b30      	ldr	r3, [pc, #192]	@ (800157c <MX_TIM4_Init+0x104>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80014be:	4b2f      	ldr	r3, [pc, #188]	@ (800157c <MX_TIM4_Init+0x104>)
 80014c0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80014c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c6:	4b2d      	ldr	r3, [pc, #180]	@ (800157c <MX_TIM4_Init+0x104>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014cc:	4b2b      	ldr	r3, [pc, #172]	@ (800157c <MX_TIM4_Init+0x104>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014d2:	482a      	ldr	r0, [pc, #168]	@ (800157c <MX_TIM4_Init+0x104>)
 80014d4:	f01e fc4b 	bl	801fd6e <HAL_TIM_Base_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80014de:	f000 fe11 	bl	8002104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ec:	4619      	mov	r1, r3
 80014ee:	4823      	ldr	r0, [pc, #140]	@ (800157c <MX_TIM4_Init+0x104>)
 80014f0:	f01e fe82 	bl	80201f8 <HAL_TIM_ConfigClockSource>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80014fa:	f000 fe03 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014fe:	481f      	ldr	r0, [pc, #124]	@ (800157c <MX_TIM4_Init+0x104>)
 8001500:	f01e fd04 	bl	801ff0c <HAL_TIM_PWM_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800150a:	f000 fdfb 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4817      	ldr	r0, [pc, #92]	@ (800157c <MX_TIM4_Init+0x104>)
 800151e:	f01f fb7d 	bl	8020c1c <HAL_TIMEx_MasterConfigSynchronization>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001528:	f000 fdec 	bl	8002104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152c:	2360      	movs	r3, #96	@ 0x60
 800152e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 999;
 8001530:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001534:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800153e:	463b      	mov	r3, r7
 8001540:	2200      	movs	r2, #0
 8001542:	4619      	mov	r1, r3
 8001544:	480d      	ldr	r0, [pc, #52]	@ (800157c <MX_TIM4_Init+0x104>)
 8001546:	f01e fd43 	bl	801ffd0 <HAL_TIM_PWM_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001550:	f000 fdd8 	bl	8002104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001554:	2370      	movs	r3, #112	@ 0x70
 8001556:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001558:	463b      	mov	r3, r7
 800155a:	2204      	movs	r2, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4807      	ldr	r0, [pc, #28]	@ (800157c <MX_TIM4_Init+0x104>)
 8001560:	f01e fd36 	bl	801ffd0 <HAL_TIM_PWM_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 800156a:	f000 fdcb 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800156e:	4803      	ldr	r0, [pc, #12]	@ (800157c <MX_TIM4_Init+0x104>)
 8001570:	f001 fa78 	bl	8002a64 <HAL_TIM_MspPostInit>

}
 8001574:	bf00      	nop
 8001576:	3738      	adds	r7, #56	@ 0x38
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200004dc 	.word	0x200004dc
 8001580:	40000800 	.word	0x40000800

08001584 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015a2:	4b1e      	ldr	r3, [pc, #120]	@ (800161c <MX_TIM5_Init+0x98>)
 80015a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001620 <MX_TIM5_Init+0x9c>)
 80015a6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 999;
 80015a8:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <MX_TIM5_Init+0x98>)
 80015aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015ae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <MX_TIM5_Init+0x98>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3124;
 80015b6:	4b19      	ldr	r3, [pc, #100]	@ (800161c <MX_TIM5_Init+0x98>)
 80015b8:	f640 4234 	movw	r2, #3124	@ 0xc34
 80015bc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015be:	4b17      	ldr	r3, [pc, #92]	@ (800161c <MX_TIM5_Init+0x98>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c4:	4b15      	ldr	r3, [pc, #84]	@ (800161c <MX_TIM5_Init+0x98>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015ca:	4814      	ldr	r0, [pc, #80]	@ (800161c <MX_TIM5_Init+0x98>)
 80015cc:	f01e fbcf 	bl	801fd6e <HAL_TIM_Base_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80015d6:	f000 fd95 	bl	8002104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4619      	mov	r1, r3
 80015e6:	480d      	ldr	r0, [pc, #52]	@ (800161c <MX_TIM5_Init+0x98>)
 80015e8:	f01e fe06 	bl	80201f8 <HAL_TIM_ConfigClockSource>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80015f2:	f000 fd87 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	4619      	mov	r1, r3
 8001602:	4806      	ldr	r0, [pc, #24]	@ (800161c <MX_TIM5_Init+0x98>)
 8001604:	f01f fb0a 	bl	8020c1c <HAL_TIMEx_MasterConfigSynchronization>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800160e:	f000 fd79 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	3720      	adds	r7, #32
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000528 	.word	0x20000528
 8001620:	40000c00 	.word	0x40000c00

08001624 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 800162a:	4a23      	ldr	r2, [pc, #140]	@ (80016b8 <MX_USART3_UART_Init+0x94>)
 800162c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001630:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001634:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001660:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001666:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001668:	2200      	movs	r2, #0
 800166a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800166c:	4811      	ldr	r0, [pc, #68]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 800166e:	f01f fb63 	bl	8020d38 <HAL_UART_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001678:	f000 fd44 	bl	8002104 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800167c:	2100      	movs	r1, #0
 800167e:	480d      	ldr	r0, [pc, #52]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001680:	f020 fb6b 	bl	8021d5a <HAL_UARTEx_SetTxFifoThreshold>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800168a:	f000 fd3b 	bl	8002104 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800168e:	2100      	movs	r1, #0
 8001690:	4808      	ldr	r0, [pc, #32]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001692:	f020 fba0 	bl	8021dd6 <HAL_UARTEx_SetRxFifoThreshold>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800169c:	f000 fd32 	bl	8002104 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 80016a2:	f020 fb21 	bl	8021ce8 <HAL_UARTEx_DisableFifoMode>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80016ac:	f000 fd2a 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200007cc 	.word	0x200007cc
 80016b8:	40004800 	.word	0x40004800

080016bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016c2:	4b29      	ldr	r3, [pc, #164]	@ (8001768 <MX_DMA_Init+0xac>)
 80016c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016c8:	4a27      	ldr	r2, [pc, #156]	@ (8001768 <MX_DMA_Init+0xac>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80016d2:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <MX_DMA_Init+0xac>)
 80016d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2106      	movs	r1, #6
 80016e4:	200b      	movs	r0, #11
 80016e6:	f018 fe4a 	bl	801a37e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016ea:	200b      	movs	r0, #11
 80016ec:	f018 fe61 	bl	801a3b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2106      	movs	r1, #6
 80016f4:	200c      	movs	r0, #12
 80016f6:	f018 fe42 	bl	801a37e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80016fa:	200c      	movs	r0, #12
 80016fc:	f018 fe59 	bl	801a3b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2107      	movs	r1, #7
 8001704:	200d      	movs	r0, #13
 8001706:	f018 fe3a 	bl	801a37e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800170a:	200d      	movs	r0, #13
 800170c:	f018 fe51 	bl	801a3b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 7, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2107      	movs	r1, #7
 8001714:	200e      	movs	r0, #14
 8001716:	f018 fe32 	bl	801a37e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800171a:	200e      	movs	r0, #14
 800171c:	f018 fe49 	bl	801a3b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2107      	movs	r1, #7
 8001724:	200f      	movs	r0, #15
 8001726:	f018 fe2a 	bl	801a37e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800172a:	200f      	movs	r0, #15
 800172c:	f018 fe41 	bl	801a3b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 7, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	2107      	movs	r1, #7
 8001734:	2010      	movs	r0, #16
 8001736:	f018 fe22 	bl	801a37e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800173a:	2010      	movs	r0, #16
 800173c:	f018 fe39 	bl	801a3b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 7, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2107      	movs	r1, #7
 8001744:	2011      	movs	r0, #17
 8001746:	f018 fe1a 	bl	801a37e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800174a:	2011      	movs	r0, #17
 800174c:	f018 fe31 	bl	801a3b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 7, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2107      	movs	r1, #7
 8001754:	202f      	movs	r0, #47	@ 0x2f
 8001756:	f018 fe12 	bl	801a37e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800175a:	202f      	movs	r0, #47	@ 0x2f
 800175c:	f018 fe29 	bl	801a3b2 <HAL_NVIC_EnableIRQ>

}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	58024400 	.word	0x58024400

0800176c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	@ 0x30
 8001770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	f107 031c 	add.w	r3, r7, #28
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001782:	4b61      	ldr	r3, [pc, #388]	@ (8001908 <MX_GPIO_Init+0x19c>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001788:	4a5f      	ldr	r2, [pc, #380]	@ (8001908 <MX_GPIO_Init+0x19c>)
 800178a:	f043 0310 	orr.w	r3, r3, #16
 800178e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001792:	4b5d      	ldr	r3, [pc, #372]	@ (8001908 <MX_GPIO_Init+0x19c>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a0:	4b59      	ldr	r3, [pc, #356]	@ (8001908 <MX_GPIO_Init+0x19c>)
 80017a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a6:	4a58      	ldr	r2, [pc, #352]	@ (8001908 <MX_GPIO_Init+0x19c>)
 80017a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017b0:	4b55      	ldr	r3, [pc, #340]	@ (8001908 <MX_GPIO_Init+0x19c>)
 80017b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	4b52      	ldr	r3, [pc, #328]	@ (8001908 <MX_GPIO_Init+0x19c>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c4:	4a50      	ldr	r2, [pc, #320]	@ (8001908 <MX_GPIO_Init+0x19c>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001908 <MX_GPIO_Init+0x19c>)
 80017d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001908 <MX_GPIO_Init+0x19c>)
 80017de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e2:	4a49      	ldr	r2, [pc, #292]	@ (8001908 <MX_GPIO_Init+0x19c>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ec:	4b46      	ldr	r3, [pc, #280]	@ (8001908 <MX_GPIO_Init+0x19c>)
 80017ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	4b43      	ldr	r3, [pc, #268]	@ (8001908 <MX_GPIO_Init+0x19c>)
 80017fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001800:	4a41      	ldr	r2, [pc, #260]	@ (8001908 <MX_GPIO_Init+0x19c>)
 8001802:	f043 0302 	orr.w	r3, r3, #2
 8001806:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800180a:	4b3f      	ldr	r3, [pc, #252]	@ (8001908 <MX_GPIO_Init+0x19c>)
 800180c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001818:	4b3b      	ldr	r3, [pc, #236]	@ (8001908 <MX_GPIO_Init+0x19c>)
 800181a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181e:	4a3a      	ldr	r2, [pc, #232]	@ (8001908 <MX_GPIO_Init+0x19c>)
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001828:	4b37      	ldr	r3, [pc, #220]	@ (8001908 <MX_GPIO_Init+0x19c>)
 800182a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DUT_HVDC_ISOLATE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	213c      	movs	r1, #60	@ 0x3c
 800183a:	4834      	ldr	r0, [pc, #208]	@ (800190c <MX_GPIO_Init+0x1a0>)
 800183c:	f01a ff04 	bl	801c648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 8001840:	2200      	movs	r2, #0
 8001842:	f24c 41ff 	movw	r1, #50431	@ 0xc4ff
 8001846:	4832      	ldr	r0, [pc, #200]	@ (8001910 <MX_GPIO_Init+0x1a4>)
 8001848:	f01a fefe 	bl	801c648 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HS_ADC_START_Pin|HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001852:	4830      	ldr	r0, [pc, #192]	@ (8001914 <MX_GPIO_Init+0x1a8>)
 8001854:	f01a fef8 	bl	801c648 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DUT_HVDC_ISOLATE_Pin DUT_VGS_IDLE_SEL_Pin DUT_VICTRL_SEL_Pin DUT_GATE_SEL_Pin */
  GPIO_InitStruct.Pin = DUT_HVDC_ISOLATE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin;
 8001858:	233c      	movs	r3, #60	@ 0x3c
 800185a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185c:	2301      	movs	r3, #1
 800185e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	4619      	mov	r1, r3
 800186e:	4827      	ldr	r0, [pc, #156]	@ (800190c <MX_GPIO_Init+0x1a0>)
 8001870:	f01a fd3a 	bl	801c2e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GADC_RESET_Pin DUT_DAC_LDAC_Pin DUT_DAC_RESET_Pin PD0
                           PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 8001874:	f24c 43ff 	movw	r3, #50431	@ 0xc4ff
 8001878:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	4619      	mov	r1, r3
 800188c:	4820      	ldr	r0, [pc, #128]	@ (8001910 <MX_GPIO_Init+0x1a4>)
 800188e:	f01a fd2b 	bl	801c2e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GADC_RVS_Pin */
  GPIO_InitStruct.Pin = GADC_RVS_Pin;
 8001892:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GADC_RVS_GPIO_Port, &GPIO_InitStruct);
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	4619      	mov	r1, r3
 80018a6:	481a      	ldr	r0, [pc, #104]	@ (8001910 <MX_GPIO_Init+0x1a4>)
 80018a8:	f01a fd1e 	bl	801c2e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS_ADC_START_Pin HS_ADC_RESET_Pin */
  GPIO_InitStruct.Pin = HS_ADC_START_Pin|HS_ADC_RESET_Pin;
 80018ac:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80018b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	4813      	ldr	r0, [pc, #76]	@ (8001914 <MX_GPIO_Init+0x1a8>)
 80018c6:	f01a fd0f 	bl	801c2e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HS_ADC_DRDY_Pin */
  GPIO_InitStruct.Pin = HS_ADC_DRDY_Pin;
 80018ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HS_ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	480d      	ldr	r0, [pc, #52]	@ (8001914 <MX_GPIO_Init+0x1a8>)
 80018e0:	f01a fd02 	bl	801c2e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EFUSE_FLT_Pin EFUSE_PGOOD_Pin */
  GPIO_InitStruct.Pin = EFUSE_FLT_Pin|EFUSE_PGOOD_Pin;
 80018e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	4807      	ldr	r0, [pc, #28]	@ (8001918 <MX_GPIO_Init+0x1ac>)
 80018fa:	f01a fcf5 	bl	801c2e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018fe:	bf00      	nop
 8001900:	3730      	adds	r7, #48	@ 0x30
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	58024400 	.word	0x58024400
 800190c:	58021000 	.word	0x58021000
 8001910:	58020c00 	.word	0x58020c00
 8001914:	58020000 	.word	0x58020000
 8001918:	58020400 	.word	0x58020400

0800191c <vHeapInit>:
static uint8_t ucRAM_3 [ 32 * 1024] __attribute__( ( section( ".ram3_data" ) ) );

#define mainMEM_REGION( REGION )   REGION, sizeof( REGION )

static void vHeapInit( )
{
 800191c:	b5b0      	push	{r4, r5, r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
	/* Note: the memories must be sorted on their physical address. */
	HeapRegion_t xHeapRegions[] = {
 8001922:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <vHeapInit+0x28>)
 8001924:	463c      	mov	r4, r7
 8001926:	461d      	mov	r5, r3
 8001928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800192c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001930:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//		{ mainMEM_REGION( ucRAM_2 ) },
		{ mainMEM_REGION( ucRAM_3 ) },
		{ NULL, 0 }
		};

	vPortDefineHeapRegions( xHeapRegions );
 8001934:	463b      	mov	r3, r7
 8001936:	4618      	mov	r0, r3
 8001938:	f004 ffbc 	bl	80068b4 <vPortDefineHeapRegions>
}
 800193c:	bf00      	nop
 800193e:	3720      	adds	r7, #32
 8001940:	46bd      	mov	sp, r7
 8001942:	bdb0      	pop	{r4, r5, r7, pc}
 8001944:	080242c8 	.word	0x080242c8

08001948 <ulGetRunTimeCounterValue>:


// helper functions

uint32_t ulGetRunTimeCounterValue()
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
	return 0U;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <vAssertCalled>:

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]

	( void ) pcFile;
	( void ) ulLine;

	taskENTER_CRITICAL();
 8001966:	f004 fd0b 	bl	8006380 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		function. */
		while( ul == 0 )
 800196a:	e000      	b.n	800196e <vAssertCalled+0x16>
		{
			__NOP();
 800196c:	bf00      	nop
		while( ul == 0 )
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0fb      	beq.n	800196c <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 8001974:	f004 fd30 	bl	80063d8 <vPortExitCritical>
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
 8001984:	f240 5115 	movw	r1, #1301	@ 0x515
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <vApplicationMallocFailedHook+0x14>)
 800198a:	f7ff ffe5 	bl	8001958 <vAssertCalled>
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	080242e8 	.word	0x080242e8

08001998 <ulApplicationGetNextSequenceNumber>:
uint32_t ulApplicationGetNextSequenceNumber(
    uint32_t ulSourceAddress,
    uint16_t usSourcePort,
    uint32_t ulDestinationAddress,
    uint16_t usDestinationPort )
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	461a      	mov	r2, r3
 80019a4:	460b      	mov	r3, r1
 80019a6:	817b      	strh	r3, [r7, #10]
 80019a8:	4613      	mov	r3, r2
 80019aa:	813b      	strh	r3, [r7, #8]
	uint32_t ulReturn;
	( void ) ulSourceAddress;
	( void ) usSourcePort;
	( void ) ulDestinationAddress;
	( void ) usDestinationPort;
	xApplicationGetRandomNumber( &ulReturn );
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f89b 	bl	8001aec <xApplicationGetRandomNumber>

	return ulReturn;
 80019b6:	697b      	ldr	r3, [r7, #20]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <vApplicationIPNetworkEventHook>:

void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	@ 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
	/* If the network has just come up...*/
	if( eNetworkEvent == eNetworkUp )
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d147      	bne.n	8001a60 <vApplicationIPNetworkEventHook+0xa0>
	uint32_t ulIPAddress, ulNetMask, ulGatewayAddress, ulDNSServerAddress;
	char cBuffer[ 16 ];

		/* Create the tasks that use the IP stack if they have not already been
		created. */
		if( xTasksAlreadyCreated == pdFALSE )
 80019d0:	4b25      	ldr	r3, [pc, #148]	@ (8001a68 <vApplicationIPNetworkEventHook+0xa8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <vApplicationIPNetworkEventHook+0x24>
		{
			xTasksAlreadyCreated = pdTRUE;
 80019d8:	4b23      	ldr	r3, [pc, #140]	@ (8001a68 <vApplicationIPNetworkEventHook+0xa8>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
			/* Sockets, and tasks that use the TCP/IP stack can be created here. */
//
			xDoCreateSockets = pdTRUE;
 80019de:	4b23      	ldr	r3, [pc, #140]	@ (8001a6c <vApplicationIPNetworkEventHook+0xac>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
		}
		/* Print out the network configuration, which may have come from a DHCP
		server. */
		FreeRTOS_GetAddressConfiguration( &ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress );
 80019e4:	f107 0318 	add.w	r3, r7, #24
 80019e8:	f107 021c 	add.w	r2, r7, #28
 80019ec:	f107 0120 	add.w	r1, r7, #32
 80019f0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80019f4:	f007 ff0c 	bl	8009810 <FreeRTOS_GetAddressConfiguration>
		FreeRTOS_inet_ntoa( ulIPAddress, cBuffer );
 80019f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fa:	f107 0208 	add.w	r2, r7, #8
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f00d fd09 	bl	800f418 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "IP Address: %s\n", cBuffer ) );
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4818      	ldr	r0, [pc, #96]	@ (8001a70 <vApplicationIPNetworkEventHook+0xb0>)
 8001a0e:	f020 fb9b 	bl	8022148 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulNetMask, cBuffer );
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	f107 0208 	add.w	r2, r7, #8
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f00d fcfc 	bl	800f418 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Subnet Mask: %s\n", cBuffer ) );
 8001a20:	f107 0308 	add.w	r3, r7, #8
 8001a24:	4619      	mov	r1, r3
 8001a26:	4813      	ldr	r0, [pc, #76]	@ (8001a74 <vApplicationIPNetworkEventHook+0xb4>)
 8001a28:	f020 fb8e 	bl	8022148 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulGatewayAddress, cBuffer );
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f107 0208 	add.w	r2, r7, #8
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00d fcef 	bl	800f418 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Gateway Address: %s\n", cBuffer ) );
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480d      	ldr	r0, [pc, #52]	@ (8001a78 <vApplicationIPNetworkEventHook+0xb8>)
 8001a42:	f020 fb81 	bl	8022148 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulDNSServerAddress, cBuffer );
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	f107 0208 	add.w	r2, r7, #8
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f00d fce2 	bl	800f418 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "DNS Server Address: %s\n", cBuffer ) );
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4808      	ldr	r0, [pc, #32]	@ (8001a7c <vApplicationIPNetworkEventHook+0xbc>)
 8001a5c:	f020 fb74 	bl	8022148 <lUDPLoggingPrintf>
	}
}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	@ 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000d28 	.word	0x20000d28
 8001a6c:	20000d2c 	.word	0x20000d2c
 8001a70:	080242fc 	.word	0x080242fc
 8001a74:	0802430c 	.word	0x0802430c
 8001a78:	08024320 	.word	0x08024320
 8001a7c:	08024338 	.word	0x08024338

08001a80 <xApplicationDNSQueryHook>:
/*-----------------------------------------------------------*/

BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFAIL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 8001a8c:	f000 f810 	bl	8001ab0 <pcApplicationHostnameHook>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4619      	mov	r1, r3
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f021 fd33 	bl	8023500 <strcasecmp>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <xApplicationDNSQueryHook+0x24>
	{
		xReturn = pdPASS;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
	}
	return xReturn;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <pcApplicationHostnameHook>:
/*-----------------------------------------------------------*/

const char *pcApplicationHostnameHook( void )
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
	/* Assign the name "STM32H7" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return "STM32H7";
 8001ab4:	4b02      	ldr	r3, [pc, #8]	@ (8001ac0 <pcApplicationHostnameHook+0x10>)
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	08024350 	.word	0x08024350

08001ac4 <vApplicationPingReplyHook>:
/*-----------------------------------------------------------*/

#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
	void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, uint16_t usIdentifier )
	{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	460a      	mov	r2, r1
 8001ace:	71fb      	strb	r3, [r7, #7]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	80bb      	strh	r3, [r7, #4]
		FreeRTOS_printf( ( "Received ping ID %04X\n", usIdentifier ) );
 8001ad4:	88bb      	ldrh	r3, [r7, #4]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4803      	ldr	r0, [pc, #12]	@ (8001ae8 <vApplicationPingReplyHook+0x24>)
 8001ada:	f020 fb35 	bl	8022148 <lUDPLoggingPrintf>
	}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	08024358 	.word	0x08024358

08001aec <xApplicationGetRandomNumber>:
#endif

/*-----------------------------------------------------------*/

BaseType_t xApplicationGetRandomNumber( uint32_t *pulNumber ){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	*pulNumber = rand();
 8001af4:	f021 fb96 	bl	8023224 <rand>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 8001b00:	2301      	movs	r3, #1
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <prvGetRegistersFromStack>:
};

volatile struct xREGISTER_STACK *pxRegisterStack = NULL;

void prvGetRegistersFromStack( uint32_t * pulFaultStackAddress )
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	/* When the debuggger stops here, you can inspect the registeers of the
	application by looking at *pxRegisterStack. */
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
		( pulFaultStackAddress - ARRAY_SIZE( pxRegisterStack->spare0 ) );
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b20      	subs	r3, #32
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
 8001b18:	4a01      	ldr	r2, [pc, #4]	@ (8001b20 <prvGetRegistersFromStack+0x14>)
 8001b1a:	6013      	str	r3, [r2, #0]

	/* When the following line is hit, the variables contain the register values. */
	for( ;; );
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <prvGetRegistersFromStack+0x10>
 8001b20:	20000d40 	.word	0x20000d40

08001b24 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
	__asm volatile
 8001b28:	f01e 0f04 	tst.w	lr, #4
 8001b2c:	bf0c      	ite	eq
 8001b2e:	f3ef 8008 	mrseq	r0, MSP
 8001b32:	f3ef 8009 	mrsne	r0, PSP
 8001b36:	6981      	ldr	r1, [r0, #24]
 8001b38:	f7ff ffe8 	bl	8001b0c <prvGetRegistersFromStack>
		" mrseq r0, msp                                             \n"
		" mrsne r0, psp                                             \n"
		" ldr r1, [r0, #24]                                         \n"
		" bl prvGetRegistersFromStack                               \n"
	);
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <prvServerWorkTask>:



static void prvServerWorkTask( void *pvParameters )
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 100U );
#endif	/* ( CONTINUOUS_PING != 0 ) */

	for( ;; )
	{
		vTaskDelay( 10U );
 8001b50:	200a      	movs	r0, #10
 8001b52:	f002 fcdd 	bl	8004510 <vTaskDelay>
		if( xDoCreateSockets != pdFALSE )
 8001b56:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <prvServerWorkTask+0x24>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f8      	beq.n	8001b50 <prvServerWorkTask+0x8>
		{
			xDoCreateSockets = pdFALSE;
 8001b5e:	4b03      	ldr	r3, [pc, #12]	@ (8001b6c <prvServerWorkTask+0x24>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
			/* Start a new task to fetch logging lines and send them out.
			See FreeRTOSConfig.h for the configuration of UDP logging. */
			vUDPLoggingTaskCreate();
 8001b64:	f020 fb0c 	bl	8022180 <vUDPLoggingTaskCreate>
		vTaskDelay( 10U );
 8001b68:	e7f2      	b.n	8001b50 <prvServerWorkTask+0x8>
 8001b6a:	bf00      	nop
 8001b6c:	20000d2c 	.word	0x20000d2c

08001b70 <vADCTCPTask>:

}



static void vADCTCPTask(void *pvParameters) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b098      	sub	sp, #96	@ 0x60
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usADCDataMock0);
 8001b78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b82:	2218      	movs	r2, #24
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f020 fe07 	bl	802279a <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usADCPort);
 8001b8c:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	b21a      	sxth	r2, r3
 8001b94:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	b21b      	sxth	r3, r3
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	b21b      	sxth	r3, r3
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	061a      	lsls	r2, r3, #24
 8001baa:	2301      	movs	r3, #1
 8001bac:	041b      	lsls	r3, r3, #16
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	23a8      	movs	r3, #168	@ 0xa8
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	22c0      	movs	r2, #192	@ 0xc0
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001bc2:	2206      	movs	r2, #6
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	2002      	movs	r0, #2
 8001bc8:	f00c fb1a 	bl	800e200 <FreeRTOS_socket>
 8001bcc:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001bce:	f107 0310 	add.w	r3, r7, #16
 8001bd2:	2210      	movs	r2, #16
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f020 fddf 	bl	802279a <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 8001bdc:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001be0:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 8001be2:	230c      	movs	r3, #12
 8001be4:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 8001be6:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001bea:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001bec:	230c      	movs	r3, #12
 8001bee:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	4b48      	ldr	r3, [pc, #288]	@ (8001d18 <vADCTCPTask+0x1a8>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001bfc:	f00d faba 	bl	800f174 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001c00:	2304      	movs	r3, #4
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	4b44      	ldr	r3, [pc, #272]	@ (8001d18 <vADCTCPTask+0x1a8>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	2100      	movs	r1, #0
 8001c0a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c0c:	f00d fab2 	bl	800f174 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	2210      	movs	r2, #16
 8001c16:	9200      	str	r2, [sp, #0]
 8001c18:	220d      	movs	r2, #13
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c1e:	f00d faa9 	bl	800f174 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c28:	d104      	bne.n	8001c34 <vADCTCPTask+0xc4>
 8001c2a:	f240 613d 	movw	r1, #1597	@ 0x63d
 8001c2e:	483b      	ldr	r0, [pc, #236]	@ (8001d1c <vADCTCPTask+0x1ac>)
 8001c30:	f7ff fe92 	bl	8001958 <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001c34:	f107 0320 	add.w	r3, r7, #32
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	9200      	str	r2, [sp, #0]
 8001c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c42:	2100      	movs	r1, #0
 8001c44:	2000      	movs	r0, #0
 8001c46:	f003 fded 	bl	8005824 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <vADCTCPTask+0xea>
	    pcBufferToTransmit = usADCDataMock1;
 8001c54:	4b32      	ldr	r3, [pc, #200]	@ (8001d20 <vADCTCPTask+0x1b0>)
 8001c56:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c58:	e001      	b.n	8001c5e <vADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usADCDataMock0;
 8001c5a:	4b32      	ldr	r3, [pc, #200]	@ (8001d24 <vADCTCPTask+0x1b4>)
 8001c5c:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
        xAlreadyTransmitted = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8001c66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c6a:	2218      	movs	r2, #24
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c70:	f00d fe1e 	bl	800f8b0 <FreeRTOS_connect>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d139      	bne.n	8001cee <vADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001c7a:	e030      	b.n	8001cde <vADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	4619      	mov	r1, r3
 8001c8a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c8c:	f00d fff9 	bl	800fc82 <FreeRTOS_get_tx_head>
 8001c90:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8001c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d027      	beq.n	8001ce8 <vADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d902      	bls.n	8001caa <vADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ca8:	e003      	b.n	8001cb2 <vADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8001caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001cb6:	4413      	add	r3, r2
 8001cb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001cbe:	f020 fc5f 	bl	8022580 <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 8001cc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cca:	f00e f8e5 	bl	800fe98 <FreeRTOS_send>
 8001cce:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 8001cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0a      	blt.n	8001cec <vADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 8001cd6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001cd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cda:	4413      	add	r3, r2
 8001cdc:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d8ca      	bhi.n	8001c7c <vADCTCPTask+0x10c>
 8001ce6:	e002      	b.n	8001cee <vADCTCPTask+0x17e>
                        break;
 8001ce8:	bf00      	nop
 8001cea:	e000      	b.n	8001cee <vADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 8001cec:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8001cee:	2102      	movs	r1, #2
 8001cf0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cf2:	f00e f980 	bl	800fff6 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001cf6:	e002      	b.n	8001cfe <vADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f002 fc09 	bl	8004510 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001cfe:	2300      	movs	r3, #0
 8001d00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d02:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001d04:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d06:	f00d ff27 	bl	800fb58 <FreeRTOS_recv>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	daf3      	bge.n	8001cf8 <vADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 8001d10:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d12:	f00c fe39 	bl	800e988 <FreeRTOS_closesocket>
    for(;;) {
 8001d16:	e754      	b.n	8001bc2 <vADCTCPTask+0x52>
 8001d18:	080277b4 	.word	0x080277b4
 8001d1c:	080242e8 	.word	0x080242e8
 8001d20:	30010004 	.word	0x30010004
 8001d24:	30000004 	.word	0x30000004

08001d28 <vAuxADCTCPTask>:
//        FreeRTOS_printf(("End Mock Transmission \n"));
    }
}

static void vAuxADCTCPTask(void *pvParameters) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b098      	sub	sp, #96	@ 0x60
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usAuxADCDataMock0);
 8001d30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d34:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d3a:	2218      	movs	r2, #24
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f020 fd2b 	bl	802279a <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usAuxADCPort);
 8001d44:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	b21a      	sxth	r2, r3
 8001d4c:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	b21b      	sxth	r3, r3
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001d5e:	2303      	movs	r3, #3
 8001d60:	061a      	lsls	r2, r3, #24
 8001d62:	2301      	movs	r3, #1
 8001d64:	041b      	lsls	r3, r3, #16
 8001d66:	431a      	orrs	r2, r3
 8001d68:	23a8      	movs	r3, #168	@ 0xa8
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	22c0      	movs	r2, #192	@ 0xc0
 8001d70:	4313      	orrs	r3, r2
 8001d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001d74:	2302      	movs	r3, #2
 8001d76:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001d7a:	2206      	movs	r2, #6
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	2002      	movs	r0, #2
 8001d80:	f00c fa3e 	bl	800e200 <FreeRTOS_socket>
 8001d84:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	2210      	movs	r2, #16
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f020 fd03 	bl	802279a <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 8001d94:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001d98:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 8001d9a:	230c      	movs	r3, #12
 8001d9c:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 8001d9e:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001da2:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001da4:	230c      	movs	r3, #12
 8001da6:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 8001da8:	2304      	movs	r3, #4
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	4b48      	ldr	r3, [pc, #288]	@ (8001ed0 <vAuxADCTCPTask+0x1a8>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001db4:	f00d f9de 	bl	800f174 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001db8:	2304      	movs	r3, #4
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	4b44      	ldr	r3, [pc, #272]	@ (8001ed0 <vAuxADCTCPTask+0x1a8>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001dc4:	f00d f9d6 	bl	800f174 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	2210      	movs	r2, #16
 8001dce:	9200      	str	r2, [sp, #0]
 8001dd0:	220d      	movs	r2, #13
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001dd6:	f00d f9cd 	bl	800f174 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de0:	d104      	bne.n	8001dec <vAuxADCTCPTask+0xc4>
 8001de2:	f240 61c7 	movw	r1, #1735	@ 0x6c7
 8001de6:	483b      	ldr	r0, [pc, #236]	@ (8001ed4 <vAuxADCTCPTask+0x1ac>)
 8001de8:	f7ff fdb6 	bl	8001958 <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001dec:	f107 0320 	add.w	r3, r7, #32
 8001df0:	f04f 32ff 	mov.w	r2, #4294967295
 8001df4:	9200      	str	r2, [sp, #0]
 8001df6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f003 fd11 	bl	8005824 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <vAuxADCTCPTask+0xea>
	    pcBufferToTransmit = usAuxADCDataMock1;
 8001e0c:	4b32      	ldr	r3, [pc, #200]	@ (8001ed8 <vAuxADCTCPTask+0x1b0>)
 8001e0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e10:	e001      	b.n	8001e16 <vAuxADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usAuxADCDataMock0;
 8001e12:	4b32      	ldr	r3, [pc, #200]	@ (8001edc <vAuxADCTCPTask+0x1b4>)
 8001e14:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
        xAlreadyTransmitted = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8001e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e22:	2218      	movs	r2, #24
 8001e24:	4619      	mov	r1, r3
 8001e26:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e28:	f00d fd42 	bl	800f8b0 <FreeRTOS_connect>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d139      	bne.n	8001ea6 <vAuxADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001e32:	e030      	b.n	8001e96 <vAuxADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	4619      	mov	r1, r3
 8001e42:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e44:	f00d ff1d 	bl	800fc82 <FreeRTOS_get_tx_head>
 8001e48:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8001e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d027      	beq.n	8001ea0 <vAuxADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d902      	bls.n	8001e62 <vAuxADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e60:	e003      	b.n	8001e6a <vAuxADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8001e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 8001e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e6e:	4413      	add	r3, r2
 8001e70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e72:	4619      	mov	r1, r3
 8001e74:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001e76:	f020 fb83 	bl	8022580 <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 8001e7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	2100      	movs	r1, #0
 8001e80:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e82:	f00e f809 	bl	800fe98 <FreeRTOS_send>
 8001e86:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 8001e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	db0a      	blt.n	8001ea4 <vAuxADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 8001e8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e92:	4413      	add	r3, r2
 8001e94:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d8ca      	bhi.n	8001e34 <vAuxADCTCPTask+0x10c>
 8001e9e:	e002      	b.n	8001ea6 <vAuxADCTCPTask+0x17e>
                        break;
 8001ea0:	bf00      	nop
 8001ea2:	e000      	b.n	8001ea6 <vAuxADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 8001ea4:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001eaa:	f00e f8a4 	bl	800fff6 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001eae:	e002      	b.n	8001eb6 <vAuxADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f002 fb2d 	bl	8004510 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001eba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001ebc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ebe:	f00d fe4b 	bl	800fb58 <FreeRTOS_recv>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	daf3      	bge.n	8001eb0 <vAuxADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 8001ec8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001eca:	f00c fd5d 	bl	800e988 <FreeRTOS_closesocket>
    for(;;) {
 8001ece:	e754      	b.n	8001d7a <vAuxADCTCPTask+0x52>
 8001ed0:	080277b8 	.word	0x080277b8
 8001ed4:	080242e8 	.word	0x080242e8
 8001ed8:	30028004 	.word	0x30028004
 8001edc:	30020004 	.word	0x30020004

08001ee0 <vTCADCTCPTask>:
//        FreeRTOS_printf(("End Mock Transmission \n"));
    }
}

static void vTCADCTCPTask(void *pvParameters) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b098      	sub	sp, #96	@ 0x60
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usTCADCData0);
 8001ee8:	2380      	movs	r3, #128	@ 0x80
 8001eea:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001eec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ef0:	2218      	movs	r2, #24
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f020 fc50 	bl	802279a <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usTCADCPort);
 8001efa:	f241 53b5 	movw	r3, #5557	@ 0x15b5
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	b21a      	sxth	r2, r3
 8001f02:	f241 53b5 	movw	r3, #5557	@ 0x15b5
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	b21b      	sxth	r3, r3
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001f14:	2303      	movs	r3, #3
 8001f16:	061a      	lsls	r2, r3, #24
 8001f18:	2301      	movs	r3, #1
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	23a8      	movs	r3, #168	@ 0xa8
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	4313      	orrs	r3, r2
 8001f24:	22c0      	movs	r2, #192	@ 0xc0
 8001f26:	4313      	orrs	r3, r2
 8001f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001f30:	2206      	movs	r2, #6
 8001f32:	2101      	movs	r1, #1
 8001f34:	2002      	movs	r0, #2
 8001f36:	f00c f963 	bl	800e200 <FreeRTOS_socket>
 8001f3a:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001f3c:	f107 0310 	add.w	r3, r7, #16
 8001f40:	2210      	movs	r2, #16
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f020 fc28 	bl	802279a <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 8001f4a:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001f4e:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 8001f50:	230c      	movs	r3, #12
 8001f52:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 8001f54:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001f58:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001f5a:	230c      	movs	r3, #12
 8001f5c:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 8001f5e:	2304      	movs	r3, #4
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	4b49      	ldr	r3, [pc, #292]	@ (8002088 <vTCADCTCPTask+0x1a8>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	2100      	movs	r1, #0
 8001f68:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001f6a:	f00d f903 	bl	800f174 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001f6e:	2304      	movs	r3, #4
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	4b45      	ldr	r3, [pc, #276]	@ (8002088 <vTCADCTCPTask+0x1a8>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	2100      	movs	r1, #0
 8001f78:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001f7a:	f00d f8fb 	bl	800f174 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001f7e:	f107 0310 	add.w	r3, r7, #16
 8001f82:	2210      	movs	r2, #16
 8001f84:	9200      	str	r2, [sp, #0]
 8001f86:	220d      	movs	r2, #13
 8001f88:	2100      	movs	r1, #0
 8001f8a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001f8c:	f00d f8f2 	bl	800f174 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f96:	d104      	bne.n	8001fa2 <vTCADCTCPTask+0xc2>
 8001f98:	f240 7151 	movw	r1, #1873	@ 0x751
 8001f9c:	483b      	ldr	r0, [pc, #236]	@ (800208c <vTCADCTCPTask+0x1ac>)
 8001f9e:	f7ff fcdb 	bl	8001958 <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001fa2:	f107 0320 	add.w	r3, r7, #32
 8001fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8001faa:	9200      	str	r2, [sp, #0]
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f003 fc36 	bl	8005824 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <vTCADCTCPTask+0xe8>
	    pcBufferToTransmit = usTCADCData1;
 8001fc2:	4b33      	ldr	r3, [pc, #204]	@ (8002090 <vTCADCTCPTask+0x1b0>)
 8001fc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001fc6:	e001      	b.n	8001fcc <vTCADCTCPTask+0xec>
	} else {
	    pcBufferToTransmit = usTCADCData0;
 8001fc8:	4b32      	ldr	r3, [pc, #200]	@ (8002094 <vTCADCTCPTask+0x1b4>)
 8001fca:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
        xAlreadyTransmitted = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8001fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fd8:	2218      	movs	r2, #24
 8001fda:	4619      	mov	r1, r3
 8001fdc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001fde:	f00d fc67 	bl	800f8b0 <FreeRTOS_connect>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d139      	bne.n	800205c <vTCADCTCPTask+0x17c>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001fe8:	e030      	b.n	800204c <vTCADCTCPTask+0x16c>
                {
                    BaseType_t xAvlSpace = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ffa:	f00d fe42 	bl	800fc82 <FreeRTOS_get_tx_head>
 8001ffe:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8002000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002002:	2b00      	cmp	r3, #0
 8002004:	d027      	beq.n	8002056 <vTCADCTCPTask+0x176>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8002006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002008:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4293      	cmp	r3, r2
 8002010:	d902      	bls.n	8002018 <vTCADCTCPTask+0x138>
                        {
                            xBytesToSend = xAvlSpace;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002016:	e003      	b.n	8002020 <vTCADCTCPTask+0x140>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8002018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800201a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 8002020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002022:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002024:	4413      	add	r3, r2
 8002026:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002028:	4619      	mov	r1, r3
 800202a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800202c:	f020 faa8 	bl	8022580 <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 8002030:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002032:	2300      	movs	r3, #0
 8002034:	2100      	movs	r1, #0
 8002036:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002038:	f00d ff2e 	bl	800fe98 <FreeRTOS_send>
 800203c:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 800203e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	db0a      	blt.n	800205a <vTCADCTCPTask+0x17a>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 8002044:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002048:	4413      	add	r3, r2
 800204a:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 800204c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800204e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002050:	429a      	cmp	r2, r3
 8002052:	d8ca      	bhi.n	8001fea <vTCADCTCPTask+0x10a>
 8002054:	e002      	b.n	800205c <vTCADCTCPTask+0x17c>
                        break;
 8002056:	bf00      	nop
 8002058:	e000      	b.n	800205c <vTCADCTCPTask+0x17c>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 800205a:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 800205c:	2102      	movs	r1, #2
 800205e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002060:	f00d ffc9 	bl	800fff6 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8002064:	e002      	b.n	800206c <vTCADCTCPTask+0x18c>
            vTaskDelay(pdMS_TO_TICKS(1));
 8002066:	2001      	movs	r0, #1
 8002068:	f002 fa52 	bl	8004510 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 800206c:	2300      	movs	r3, #0
 800206e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002070:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002072:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002074:	f00d fd70 	bl	800fb58 <FreeRTOS_recv>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	daf3      	bge.n	8002066 <vTCADCTCPTask+0x186>
        }
        FreeRTOS_closesocket(xSocket);
 800207e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002080:	f00c fc82 	bl	800e988 <FreeRTOS_closesocket>
    for(;;) {
 8002084:	e754      	b.n	8001f30 <vTCADCTCPTask+0x50>
 8002086:	bf00      	nop
 8002088:	080277bc 	.word	0x080277bc
 800208c:	080242e8 	.word	0x080242e8
 8002090:	30030088 	.word	0x30030088
 8002094:	30030008 	.word	0x30030008

08002098 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800209e:	463b      	mov	r3, r7
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80020aa:	f018 f99d 	bl	801a3e8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80020ae:	2301      	movs	r3, #1
 80020b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 80020b6:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 80020ba:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80020bc:	2312      	movs	r3, #18
 80020be:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80020c4:	2301      	movs	r3, #1
 80020c6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80020c8:	2303      	movs	r3, #3
 80020ca:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80020d0:	2301      	movs	r3, #1
 80020d2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80020dc:	463b      	mov	r3, r7
 80020de:	4618      	mov	r0, r3
 80020e0:	f018 f9ba 	bl	801a458 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80020e4:	2301      	movs	r3, #1
 80020e6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80020e8:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80020ec:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80020ee:	463b      	mov	r3, r7
 80020f0:	4618      	mov	r0, r3
 80020f2:	f018 f9b1 	bl	801a458 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80020f6:	2004      	movs	r0, #4
 80020f8:	f018 f98e 	bl	801a418 <HAL_MPU_Enable>

}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002108:	b672      	cpsid	i
}
 800210a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800210c:	bf00      	nop
 800210e:	e7fd      	b.n	800210c <Error_Handler+0x8>

08002110 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	4b0a      	ldr	r3, [pc, #40]	@ (8002140 <HAL_MspInit+0x30>)
 8002118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800211c:	4a08      	ldr	r2, [pc, #32]	@ (8002140 <HAL_MspInit+0x30>)
 800211e:	f043 0302 	orr.w	r3, r3, #2
 8002122:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002126:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <HAL_MspInit+0x30>)
 8002128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	58024400 	.word	0x58024400

08002144 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08e      	sub	sp, #56	@ 0x38
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a61      	ldr	r2, [pc, #388]	@ (80022e8 <HAL_ETH_MspInit+0x1a4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	f040 80bb 	bne.w	80022de <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002168:	4b60      	ldr	r3, [pc, #384]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 800216a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800216e:	4a5f      	ldr	r2, [pc, #380]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 8002170:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002174:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002178:	4b5c      	ldr	r3, [pc, #368]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 800217a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800217e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002182:	623b      	str	r3, [r7, #32]
 8002184:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002186:	4b59      	ldr	r3, [pc, #356]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 8002188:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800218c:	4a57      	ldr	r2, [pc, #348]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 800218e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002192:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002196:	4b55      	ldr	r3, [pc, #340]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 8002198:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800219c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80021a4:	4b51      	ldr	r3, [pc, #324]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 80021a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80021aa:	4a50      	ldr	r2, [pc, #320]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80021b4:	4b4d      	ldr	r3, [pc, #308]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 80021b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	61bb      	str	r3, [r7, #24]
 80021c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c2:	4b4a      	ldr	r3, [pc, #296]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 80021c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c8:	4a48      	ldr	r2, [pc, #288]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021d2:	4b46      	ldr	r3, [pc, #280]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 80021d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e0:	4b42      	ldr	r3, [pc, #264]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 80021e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e6:	4a41      	ldr	r2, [pc, #260]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021f0:	4b3e      	ldr	r3, [pc, #248]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 80021f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	4b3b      	ldr	r3, [pc, #236]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 8002200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002204:	4a39      	ldr	r2, [pc, #228]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 8002206:	f043 0302 	orr.w	r3, r3, #2
 800220a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800220e:	4b37      	ldr	r3, [pc, #220]	@ (80022ec <HAL_ETH_MspInit+0x1a8>)
 8002210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800221c:	2302      	movs	r3, #2
 800221e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800222c:	230b      	movs	r3, #11
 800222e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002230:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002234:	4619      	mov	r1, r3
 8002236:	482e      	ldr	r0, [pc, #184]	@ (80022f0 <HAL_ETH_MspInit+0x1ac>)
 8002238:	f01a f856 	bl	801c2e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800223c:	2306      	movs	r3, #6
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800224c:	230b      	movs	r3, #11
 800224e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002254:	4619      	mov	r1, r3
 8002256:	4827      	ldr	r0, [pc, #156]	@ (80022f4 <HAL_ETH_MspInit+0x1b0>)
 8002258:	f01a f846 	bl	801c2e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800225c:	2380      	movs	r3, #128	@ 0x80
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800226c:	230b      	movs	r3, #11
 800226e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002274:	4619      	mov	r1, r3
 8002276:	481f      	ldr	r0, [pc, #124]	@ (80022f4 <HAL_ETH_MspInit+0x1b0>)
 8002278:	f01a f836 	bl	801c2e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800227c:	2330      	movs	r3, #48	@ 0x30
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2300      	movs	r3, #0
 800228a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800228c:	230b      	movs	r3, #11
 800228e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002294:	4619      	mov	r1, r3
 8002296:	4816      	ldr	r0, [pc, #88]	@ (80022f0 <HAL_ETH_MspInit+0x1ac>)
 8002298:	f01a f826 	bl	801c2e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800229c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022aa:	2303      	movs	r3, #3
 80022ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022ae:	230b      	movs	r3, #11
 80022b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022b6:	4619      	mov	r1, r3
 80022b8:	480f      	ldr	r0, [pc, #60]	@ (80022f8 <HAL_ETH_MspInit+0x1b4>)
 80022ba:	f01a f815 	bl	801c2e8 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2105      	movs	r1, #5
 80022c2:	203d      	movs	r0, #61	@ 0x3d
 80022c4:	f018 f85b 	bl	801a37e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80022c8:	203d      	movs	r0, #61	@ 0x3d
 80022ca:	f018 f872 	bl	801a3b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2105      	movs	r1, #5
 80022d2:	203e      	movs	r0, #62	@ 0x3e
 80022d4:	f018 f853 	bl	801a37e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80022d8:	203e      	movs	r0, #62	@ 0x3e
 80022da:	f018 f86a 	bl	801a3b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80022de:	bf00      	nop
 80022e0:	3738      	adds	r7, #56	@ 0x38
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40028000 	.word	0x40028000
 80022ec:	58024400 	.word	0x58024400
 80022f0:	58020800 	.word	0x58020800
 80022f4:	58020000 	.word	0x58020000
 80022f8:	58020400 	.word	0x58020400

080022fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b0ba      	sub	sp, #232	@ 0xe8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002314:	f107 0310 	add.w	r3, r7, #16
 8002318:	22c0      	movs	r2, #192	@ 0xc0
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f020 fa3c 	bl	802279a <memset>
  if(hi2c->Instance==I2C4)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a27      	ldr	r2, [pc, #156]	@ (80023c4 <HAL_I2C_MspInit+0xc8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d146      	bne.n	80023ba <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800232c:	f04f 0210 	mov.w	r2, #16
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	4618      	mov	r0, r3
 8002344:	f01b faee 	bl	801d924 <HAL_RCCEx_PeriphCLKConfig>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800234e:	f7ff fed9 	bl	8002104 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002352:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <HAL_I2C_MspInit+0xcc>)
 8002354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002358:	4a1b      	ldr	r2, [pc, #108]	@ (80023c8 <HAL_I2C_MspInit+0xcc>)
 800235a:	f043 0308 	orr.w	r3, r3, #8
 800235e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002362:	4b19      	ldr	r3, [pc, #100]	@ (80023c8 <HAL_I2C_MspInit+0xcc>)
 8002364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002370:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002374:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002378:	2312      	movs	r3, #18
 800237a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800238a:	2304      	movs	r3, #4
 800238c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002390:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002394:	4619      	mov	r1, r3
 8002396:	480d      	ldr	r0, [pc, #52]	@ (80023cc <HAL_I2C_MspInit+0xd0>)
 8002398:	f019 ffa6 	bl	801c2e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800239c:	4b0a      	ldr	r3, [pc, #40]	@ (80023c8 <HAL_I2C_MspInit+0xcc>)
 800239e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023a2:	4a09      	ldr	r2, [pc, #36]	@ (80023c8 <HAL_I2C_MspInit+0xcc>)
 80023a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023ac:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <HAL_I2C_MspInit+0xcc>)
 80023ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 80023ba:	bf00      	nop
 80023bc:	37e8      	adds	r7, #232	@ 0xe8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	58001c00 	.word	0x58001c00
 80023c8:	58024400 	.word	0x58024400
 80023cc:	58020c00 	.word	0x58020c00

080023d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b090      	sub	sp, #64	@ 0x40
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a88      	ldr	r2, [pc, #544]	@ (8002610 <HAL_SPI_MspInit+0x240>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	f040 8083 	bne.w	80024fa <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023f4:	4b87      	ldr	r3, [pc, #540]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 80023f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023fa:	4a86      	ldr	r2, [pc, #536]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 80023fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002400:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002404:	4b83      	ldr	r3, [pc, #524]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 8002406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800240a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800240e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002410:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	4b80      	ldr	r3, [pc, #512]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 8002414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002418:	4a7e      	ldr	r2, [pc, #504]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002422:	4b7c      	ldr	r3, [pc, #496]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 8002424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	627b      	str	r3, [r7, #36]	@ 0x24
 800242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002430:	4b78      	ldr	r3, [pc, #480]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 8002432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002436:	4a77      	ldr	r2, [pc, #476]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002440:	4b74      	ldr	r3, [pc, #464]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 8002442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	623b      	str	r3, [r7, #32]
 800244c:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800244e:	2370      	movs	r3, #112	@ 0x70
 8002450:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002452:	2302      	movs	r3, #2
 8002454:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	2300      	movs	r3, #0
 800245c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800245e:	2305      	movs	r3, #5
 8002460:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002462:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002466:	4619      	mov	r1, r3
 8002468:	486b      	ldr	r0, [pc, #428]	@ (8002618 <HAL_SPI_MspInit+0x248>)
 800246a:	f019 ff3d 	bl	801c2e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800246e:	2320      	movs	r3, #32
 8002470:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800247e:	2305      	movs	r3, #5
 8002480:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002486:	4619      	mov	r1, r3
 8002488:	4864      	ldr	r0, [pc, #400]	@ (800261c <HAL_SPI_MspInit+0x24c>)
 800248a:	f019 ff2d 	bl	801c2e8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 800248e:	4b64      	ldr	r3, [pc, #400]	@ (8002620 <HAL_SPI_MspInit+0x250>)
 8002490:	4a64      	ldr	r2, [pc, #400]	@ (8002624 <HAL_SPI_MspInit+0x254>)
 8002492:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002494:	4b62      	ldr	r3, [pc, #392]	@ (8002620 <HAL_SPI_MspInit+0x250>)
 8002496:	2225      	movs	r2, #37	@ 0x25
 8002498:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800249a:	4b61      	ldr	r3, [pc, #388]	@ (8002620 <HAL_SPI_MspInit+0x250>)
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a0:	4b5f      	ldr	r3, [pc, #380]	@ (8002620 <HAL_SPI_MspInit+0x250>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024a6:	4b5e      	ldr	r3, [pc, #376]	@ (8002620 <HAL_SPI_MspInit+0x250>)
 80024a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ac:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002620 <HAL_SPI_MspInit+0x250>)
 80024b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024b4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002620 <HAL_SPI_MspInit+0x250>)
 80024b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80024be:	4b58      	ldr	r3, [pc, #352]	@ (8002620 <HAL_SPI_MspInit+0x250>)
 80024c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024c4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024c6:	4b56      	ldr	r3, [pc, #344]	@ (8002620 <HAL_SPI_MspInit+0x250>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024cc:	4b54      	ldr	r3, [pc, #336]	@ (8002620 <HAL_SPI_MspInit+0x250>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80024d2:	4853      	ldr	r0, [pc, #332]	@ (8002620 <HAL_SPI_MspInit+0x250>)
 80024d4:	f018 f800 	bl	801a4d8 <HAL_DMA_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80024de:	f7ff fe11 	bl	8002104 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002620 <HAL_SPI_MspInit+0x250>)
 80024e6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80024e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002620 <HAL_SPI_MspInit+0x250>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	2023      	movs	r0, #35	@ 0x23
 80024f4:	f017 ff43 	bl	801a37e <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80024f8:	e126      	b.n	8002748 <HAL_SPI_MspInit+0x378>
  else if(hspi->Instance==SPI2)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a4a      	ldr	r2, [pc, #296]	@ (8002628 <HAL_SPI_MspInit+0x258>)
 8002500:	4293      	cmp	r3, r2
 8002502:	f040 8097 	bne.w	8002634 <HAL_SPI_MspInit+0x264>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002506:	4b43      	ldr	r3, [pc, #268]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 8002508:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800250c:	4a41      	ldr	r2, [pc, #260]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 800250e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002512:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002516:	4b3f      	ldr	r3, [pc, #252]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 8002518:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800251c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002524:	4b3b      	ldr	r3, [pc, #236]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 8002526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800252a:	4a3a      	ldr	r2, [pc, #232]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 800252c:	f043 0302 	orr.w	r3, r3, #2
 8002530:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002534:	4b37      	ldr	r3, [pc, #220]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 8002536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002542:	4b34      	ldr	r3, [pc, #208]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 8002544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002548:	4a32      	ldr	r2, [pc, #200]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002552:	4b30      	ldr	r3, [pc, #192]	@ (8002614 <HAL_SPI_MspInit+0x244>)
 8002554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002560:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8002564:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002566:	2302      	movs	r3, #2
 8002568:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	2300      	movs	r3, #0
 8002570:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002572:	2305      	movs	r3, #5
 8002574:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002576:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800257a:	4619      	mov	r1, r3
 800257c:	4827      	ldr	r0, [pc, #156]	@ (800261c <HAL_SPI_MspInit+0x24c>)
 800257e:	f019 feb3 	bl	801c2e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002582:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002586:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2302      	movs	r3, #2
 800258a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002590:	2300      	movs	r3, #0
 8002592:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002594:	2305      	movs	r3, #5
 8002596:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002598:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800259c:	4619      	mov	r1, r3
 800259e:	481e      	ldr	r0, [pc, #120]	@ (8002618 <HAL_SPI_MspInit+0x248>)
 80025a0:	f019 fea2 	bl	801c2e8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 80025a4:	4b21      	ldr	r3, [pc, #132]	@ (800262c <HAL_SPI_MspInit+0x25c>)
 80025a6:	4a22      	ldr	r2, [pc, #136]	@ (8002630 <HAL_SPI_MspInit+0x260>)
 80025a8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80025aa:	4b20      	ldr	r3, [pc, #128]	@ (800262c <HAL_SPI_MspInit+0x25c>)
 80025ac:	2227      	movs	r2, #39	@ 0x27
 80025ae:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025b0:	4b1e      	ldr	r3, [pc, #120]	@ (800262c <HAL_SPI_MspInit+0x25c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b6:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <HAL_SPI_MspInit+0x25c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	@ (800262c <HAL_SPI_MspInit+0x25c>)
 80025be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025c2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025c4:	4b19      	ldr	r3, [pc, #100]	@ (800262c <HAL_SPI_MspInit+0x25c>)
 80025c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025ca:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025cc:	4b17      	ldr	r3, [pc, #92]	@ (800262c <HAL_SPI_MspInit+0x25c>)
 80025ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025d2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80025d4:	4b15      	ldr	r3, [pc, #84]	@ (800262c <HAL_SPI_MspInit+0x25c>)
 80025d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025da:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025dc:	4b13      	ldr	r3, [pc, #76]	@ (800262c <HAL_SPI_MspInit+0x25c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025e2:	4b12      	ldr	r3, [pc, #72]	@ (800262c <HAL_SPI_MspInit+0x25c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80025e8:	4810      	ldr	r0, [pc, #64]	@ (800262c <HAL_SPI_MspInit+0x25c>)
 80025ea:	f017 ff75 	bl	801a4d8 <HAL_DMA_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_SPI_MspInit+0x228>
      Error_Handler();
 80025f4:	f7ff fd86 	bl	8002104 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a0c      	ldr	r2, [pc, #48]	@ (800262c <HAL_SPI_MspInit+0x25c>)
 80025fc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80025fe:	4a0b      	ldr	r2, [pc, #44]	@ (800262c <HAL_SPI_MspInit+0x25c>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002604:	2200      	movs	r2, #0
 8002606:	2100      	movs	r1, #0
 8002608:	2024      	movs	r0, #36	@ 0x24
 800260a:	f017 feb8 	bl	801a37e <HAL_NVIC_SetPriority>
}
 800260e:	e09b      	b.n	8002748 <HAL_SPI_MspInit+0x378>
 8002610:	40013000 	.word	0x40013000
 8002614:	58024400 	.word	0x58024400
 8002618:	58020000 	.word	0x58020000
 800261c:	58020400 	.word	0x58020400
 8002620:	20000290 	.word	0x20000290
 8002624:	40020010 	.word	0x40020010
 8002628:	40003800 	.word	0x40003800
 800262c:	20000308 	.word	0x20000308
 8002630:	40020028 	.word	0x40020028
  else if(hspi->Instance==SPI3)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a45      	ldr	r2, [pc, #276]	@ (8002750 <HAL_SPI_MspInit+0x380>)
 800263a:	4293      	cmp	r3, r2
 800263c:	f040 8084 	bne.w	8002748 <HAL_SPI_MspInit+0x378>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002640:	4b44      	ldr	r3, [pc, #272]	@ (8002754 <HAL_SPI_MspInit+0x384>)
 8002642:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002646:	4a43      	ldr	r2, [pc, #268]	@ (8002754 <HAL_SPI_MspInit+0x384>)
 8002648:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800264c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002650:	4b40      	ldr	r3, [pc, #256]	@ (8002754 <HAL_SPI_MspInit+0x384>)
 8002652:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002656:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265e:	4b3d      	ldr	r3, [pc, #244]	@ (8002754 <HAL_SPI_MspInit+0x384>)
 8002660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002664:	4a3b      	ldr	r2, [pc, #236]	@ (8002754 <HAL_SPI_MspInit+0x384>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800266e:	4b39      	ldr	r3, [pc, #228]	@ (8002754 <HAL_SPI_MspInit+0x384>)
 8002670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800267c:	4b35      	ldr	r3, [pc, #212]	@ (8002754 <HAL_SPI_MspInit+0x384>)
 800267e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002682:	4a34      	ldr	r2, [pc, #208]	@ (8002754 <HAL_SPI_MspInit+0x384>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800268c:	4b31      	ldr	r3, [pc, #196]	@ (8002754 <HAL_SPI_MspInit+0x384>)
 800268e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800269a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800269e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a8:	2300      	movs	r3, #0
 80026aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026ac:	2306      	movs	r3, #6
 80026ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026b4:	4619      	mov	r1, r3
 80026b6:	4828      	ldr	r0, [pc, #160]	@ (8002758 <HAL_SPI_MspInit+0x388>)
 80026b8:	f019 fe16 	bl	801c2e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80026bc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80026c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026ce:	2306      	movs	r3, #6
 80026d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026d6:	4619      	mov	r1, r3
 80026d8:	4820      	ldr	r0, [pc, #128]	@ (800275c <HAL_SPI_MspInit+0x38c>)
 80026da:	f019 fe05 	bl	801c2e8 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream7;
 80026de:	4b20      	ldr	r3, [pc, #128]	@ (8002760 <HAL_SPI_MspInit+0x390>)
 80026e0:	4a20      	ldr	r2, [pc, #128]	@ (8002764 <HAL_SPI_MspInit+0x394>)
 80026e2:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 80026e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002760 <HAL_SPI_MspInit+0x390>)
 80026e6:	223d      	movs	r2, #61	@ 0x3d
 80026e8:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002760 <HAL_SPI_MspInit+0x390>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HAL_SPI_MspInit+0x390>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002760 <HAL_SPI_MspInit+0x390>)
 80026f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026fc:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026fe:	4b18      	ldr	r3, [pc, #96]	@ (8002760 <HAL_SPI_MspInit+0x390>)
 8002700:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002704:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002706:	4b16      	ldr	r3, [pc, #88]	@ (8002760 <HAL_SPI_MspInit+0x390>)
 8002708:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800270c:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 800270e:	4b14      	ldr	r3, [pc, #80]	@ (8002760 <HAL_SPI_MspInit+0x390>)
 8002710:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002714:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002716:	4b12      	ldr	r3, [pc, #72]	@ (8002760 <HAL_SPI_MspInit+0x390>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800271c:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <HAL_SPI_MspInit+0x390>)
 800271e:	2200      	movs	r2, #0
 8002720:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8002722:	480f      	ldr	r0, [pc, #60]	@ (8002760 <HAL_SPI_MspInit+0x390>)
 8002724:	f017 fed8 	bl	801a4d8 <HAL_DMA_Init>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_SPI_MspInit+0x362>
      Error_Handler();
 800272e:	f7ff fce9 	bl	8002104 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <HAL_SPI_MspInit+0x390>)
 8002736:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002738:	4a09      	ldr	r2, [pc, #36]	@ (8002760 <HAL_SPI_MspInit+0x390>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	2100      	movs	r1, #0
 8002742:	2033      	movs	r0, #51	@ 0x33
 8002744:	f017 fe1b 	bl	801a37e <HAL_NVIC_SetPriority>
}
 8002748:	bf00      	nop
 800274a:	3740      	adds	r7, #64	@ 0x40
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40003c00 	.word	0x40003c00
 8002754:	58024400 	.word	0x58024400
 8002758:	58020000 	.word	0x58020000
 800275c:	58020800 	.word	0x58020800
 8002760:	20000380 	.word	0x20000380
 8002764:	400200b8 	.word	0x400200b8

08002768 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a87      	ldr	r2, [pc, #540]	@ (8002994 <HAL_TIM_Base_MspInit+0x22c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d13e      	bne.n	80027f8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800277a:	4b87      	ldr	r3, [pc, #540]	@ (8002998 <HAL_TIM_Base_MspInit+0x230>)
 800277c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002780:	4a85      	ldr	r2, [pc, #532]	@ (8002998 <HAL_TIM_Base_MspInit+0x230>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800278a:	4b83      	ldr	r3, [pc, #524]	@ (8002998 <HAL_TIM_Base_MspInit+0x230>)
 800278c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Stream2;
 8002798:	4b80      	ldr	r3, [pc, #512]	@ (800299c <HAL_TIM_Base_MspInit+0x234>)
 800279a:	4a81      	ldr	r2, [pc, #516]	@ (80029a0 <HAL_TIM_Base_MspInit+0x238>)
 800279c:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 800279e:	4b7f      	ldr	r3, [pc, #508]	@ (800299c <HAL_TIM_Base_MspInit+0x234>)
 80027a0:	220f      	movs	r2, #15
 80027a2:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027a4:	4b7d      	ldr	r3, [pc, #500]	@ (800299c <HAL_TIM_Base_MspInit+0x234>)
 80027a6:	2240      	movs	r2, #64	@ 0x40
 80027a8:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80027aa:	4b7c      	ldr	r3, [pc, #496]	@ (800299c <HAL_TIM_Base_MspInit+0x234>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 80027b0:	4b7a      	ldr	r3, [pc, #488]	@ (800299c <HAL_TIM_Base_MspInit+0x234>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027b6:	4b79      	ldr	r3, [pc, #484]	@ (800299c <HAL_TIM_Base_MspInit+0x234>)
 80027b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027bc:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027be:	4b77      	ldr	r3, [pc, #476]	@ (800299c <HAL_TIM_Base_MspInit+0x234>)
 80027c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027c4:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80027c6:	4b75      	ldr	r3, [pc, #468]	@ (800299c <HAL_TIM_Base_MspInit+0x234>)
 80027c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027cc:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 80027ce:	4b73      	ldr	r3, [pc, #460]	@ (800299c <HAL_TIM_Base_MspInit+0x234>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027d4:	4b71      	ldr	r3, [pc, #452]	@ (800299c <HAL_TIM_Base_MspInit+0x234>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80027da:	4870      	ldr	r0, [pc, #448]	@ (800299c <HAL_TIM_Base_MspInit+0x234>)
 80027dc:	f017 fe7c 	bl	801a4d8 <HAL_DMA_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80027e6:	f7ff fc8d 	bl	8002104 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a6b      	ldr	r2, [pc, #428]	@ (800299c <HAL_TIM_Base_MspInit+0x234>)
 80027ee:	621a      	str	r2, [r3, #32]
 80027f0:	4a6a      	ldr	r2, [pc, #424]	@ (800299c <HAL_TIM_Base_MspInit+0x234>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80027f6:	e129      	b.n	8002a4c <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002800:	d10f      	bne.n	8002822 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002802:	4b65      	ldr	r3, [pc, #404]	@ (8002998 <HAL_TIM_Base_MspInit+0x230>)
 8002804:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002808:	4a63      	ldr	r2, [pc, #396]	@ (8002998 <HAL_TIM_Base_MspInit+0x230>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002812:	4b61      	ldr	r3, [pc, #388]	@ (8002998 <HAL_TIM_Base_MspInit+0x230>)
 8002814:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	69bb      	ldr	r3, [r7, #24]
}
 8002820:	e114      	b.n	8002a4c <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM3)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a5f      	ldr	r2, [pc, #380]	@ (80029a4 <HAL_TIM_Base_MspInit+0x23c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d13e      	bne.n	80028aa <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800282c:	4b5a      	ldr	r3, [pc, #360]	@ (8002998 <HAL_TIM_Base_MspInit+0x230>)
 800282e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002832:	4a59      	ldr	r2, [pc, #356]	@ (8002998 <HAL_TIM_Base_MspInit+0x230>)
 8002834:	f043 0302 	orr.w	r3, r3, #2
 8002838:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800283c:	4b56      	ldr	r3, [pc, #344]	@ (8002998 <HAL_TIM_Base_MspInit+0x230>)
 800283e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_up.Instance = DMA1_Stream3;
 800284a:	4b57      	ldr	r3, [pc, #348]	@ (80029a8 <HAL_TIM_Base_MspInit+0x240>)
 800284c:	4a57      	ldr	r2, [pc, #348]	@ (80029ac <HAL_TIM_Base_MspInit+0x244>)
 800284e:	601a      	str	r2, [r3, #0]
    hdma_tim3_up.Init.Request = DMA_REQUEST_TIM3_UP;
 8002850:	4b55      	ldr	r3, [pc, #340]	@ (80029a8 <HAL_TIM_Base_MspInit+0x240>)
 8002852:	221b      	movs	r2, #27
 8002854:	605a      	str	r2, [r3, #4]
    hdma_tim3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002856:	4b54      	ldr	r3, [pc, #336]	@ (80029a8 <HAL_TIM_Base_MspInit+0x240>)
 8002858:	2240      	movs	r2, #64	@ 0x40
 800285a:	609a      	str	r2, [r3, #8]
    hdma_tim3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800285c:	4b52      	ldr	r3, [pc, #328]	@ (80029a8 <HAL_TIM_Base_MspInit+0x240>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
    hdma_tim3_up.Init.MemInc = DMA_MINC_DISABLE;
 8002862:	4b51      	ldr	r3, [pc, #324]	@ (80029a8 <HAL_TIM_Base_MspInit+0x240>)
 8002864:	2200      	movs	r2, #0
 8002866:	611a      	str	r2, [r3, #16]
    hdma_tim3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002868:	4b4f      	ldr	r3, [pc, #316]	@ (80029a8 <HAL_TIM_Base_MspInit+0x240>)
 800286a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800286e:	615a      	str	r2, [r3, #20]
    hdma_tim3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002870:	4b4d      	ldr	r3, [pc, #308]	@ (80029a8 <HAL_TIM_Base_MspInit+0x240>)
 8002872:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002876:	619a      	str	r2, [r3, #24]
    hdma_tim3_up.Init.Mode = DMA_CIRCULAR;
 8002878:	4b4b      	ldr	r3, [pc, #300]	@ (80029a8 <HAL_TIM_Base_MspInit+0x240>)
 800287a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800287e:	61da      	str	r2, [r3, #28]
    hdma_tim3_up.Init.Priority = DMA_PRIORITY_LOW;
 8002880:	4b49      	ldr	r3, [pc, #292]	@ (80029a8 <HAL_TIM_Base_MspInit+0x240>)
 8002882:	2200      	movs	r2, #0
 8002884:	621a      	str	r2, [r3, #32]
    hdma_tim3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002886:	4b48      	ldr	r3, [pc, #288]	@ (80029a8 <HAL_TIM_Base_MspInit+0x240>)
 8002888:	2200      	movs	r2, #0
 800288a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_up) != HAL_OK)
 800288c:	4846      	ldr	r0, [pc, #280]	@ (80029a8 <HAL_TIM_Base_MspInit+0x240>)
 800288e:	f017 fe23 	bl	801a4d8 <HAL_DMA_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 8002898:	f7ff fc34 	bl	8002104 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_up);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a42      	ldr	r2, [pc, #264]	@ (80029a8 <HAL_TIM_Base_MspInit+0x240>)
 80028a0:	621a      	str	r2, [r3, #32]
 80028a2:	4a41      	ldr	r2, [pc, #260]	@ (80029a8 <HAL_TIM_Base_MspInit+0x240>)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80028a8:	e0d0      	b.n	8002a4c <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM4)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a40      	ldr	r2, [pc, #256]	@ (80029b0 <HAL_TIM_Base_MspInit+0x248>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	f040 8087 	bne.w	80029c4 <HAL_TIM_Base_MspInit+0x25c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028b6:	4b38      	ldr	r3, [pc, #224]	@ (8002998 <HAL_TIM_Base_MspInit+0x230>)
 80028b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028bc:	4a36      	ldr	r2, [pc, #216]	@ (8002998 <HAL_TIM_Base_MspInit+0x230>)
 80028be:	f043 0304 	orr.w	r3, r3, #4
 80028c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028c6:	4b34      	ldr	r3, [pc, #208]	@ (8002998 <HAL_TIM_Base_MspInit+0x230>)
 80028c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Stream4;
 80028d4:	4b37      	ldr	r3, [pc, #220]	@ (80029b4 <HAL_TIM_Base_MspInit+0x24c>)
 80028d6:	4a38      	ldr	r2, [pc, #224]	@ (80029b8 <HAL_TIM_Base_MspInit+0x250>)
 80028d8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 80028da:	4b36      	ldr	r3, [pc, #216]	@ (80029b4 <HAL_TIM_Base_MspInit+0x24c>)
 80028dc:	221d      	movs	r2, #29
 80028de:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028e0:	4b34      	ldr	r3, [pc, #208]	@ (80029b4 <HAL_TIM_Base_MspInit+0x24c>)
 80028e2:	2240      	movs	r2, #64	@ 0x40
 80028e4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028e6:	4b33      	ldr	r3, [pc, #204]	@ (80029b4 <HAL_TIM_Base_MspInit+0x24c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_DISABLE;
 80028ec:	4b31      	ldr	r3, [pc, #196]	@ (80029b4 <HAL_TIM_Base_MspInit+0x24c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028f2:	4b30      	ldr	r3, [pc, #192]	@ (80029b4 <HAL_TIM_Base_MspInit+0x24c>)
 80028f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028f8:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028fa:	4b2e      	ldr	r3, [pc, #184]	@ (80029b4 <HAL_TIM_Base_MspInit+0x24c>)
 80028fc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002900:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8002902:	4b2c      	ldr	r3, [pc, #176]	@ (80029b4 <HAL_TIM_Base_MspInit+0x24c>)
 8002904:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002908:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800290a:	4b2a      	ldr	r3, [pc, #168]	@ (80029b4 <HAL_TIM_Base_MspInit+0x24c>)
 800290c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002910:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002912:	4b28      	ldr	r3, [pc, #160]	@ (80029b4 <HAL_TIM_Base_MspInit+0x24c>)
 8002914:	2200      	movs	r2, #0
 8002916:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002918:	4826      	ldr	r0, [pc, #152]	@ (80029b4 <HAL_TIM_Base_MspInit+0x24c>)
 800291a:	f017 fddd 	bl	801a4d8 <HAL_DMA_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_TIM_Base_MspInit+0x1c0>
      Error_Handler();
 8002924:	f7ff fbee 	bl	8002104 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a22      	ldr	r2, [pc, #136]	@ (80029b4 <HAL_TIM_Base_MspInit+0x24c>)
 800292c:	625a      	str	r2, [r3, #36]	@ 0x24
 800292e:	4a21      	ldr	r2, [pc, #132]	@ (80029b4 <HAL_TIM_Base_MspInit+0x24c>)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim4_up.Instance = DMA1_Stream5;
 8002934:	4b21      	ldr	r3, [pc, #132]	@ (80029bc <HAL_TIM_Base_MspInit+0x254>)
 8002936:	4a22      	ldr	r2, [pc, #136]	@ (80029c0 <HAL_TIM_Base_MspInit+0x258>)
 8002938:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Request = DMA_REQUEST_TIM4_UP;
 800293a:	4b20      	ldr	r3, [pc, #128]	@ (80029bc <HAL_TIM_Base_MspInit+0x254>)
 800293c:	2220      	movs	r2, #32
 800293e:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002940:	4b1e      	ldr	r3, [pc, #120]	@ (80029bc <HAL_TIM_Base_MspInit+0x254>)
 8002942:	2240      	movs	r2, #64	@ 0x40
 8002944:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002946:	4b1d      	ldr	r3, [pc, #116]	@ (80029bc <HAL_TIM_Base_MspInit+0x254>)
 8002948:	2200      	movs	r2, #0
 800294a:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_DISABLE;
 800294c:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <HAL_TIM_Base_MspInit+0x254>)
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002952:	4b1a      	ldr	r3, [pc, #104]	@ (80029bc <HAL_TIM_Base_MspInit+0x254>)
 8002954:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002958:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800295a:	4b18      	ldr	r3, [pc, #96]	@ (80029bc <HAL_TIM_Base_MspInit+0x254>)
 800295c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002960:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8002962:	4b16      	ldr	r3, [pc, #88]	@ (80029bc <HAL_TIM_Base_MspInit+0x254>)
 8002964:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002968:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 800296a:	4b14      	ldr	r3, [pc, #80]	@ (80029bc <HAL_TIM_Base_MspInit+0x254>)
 800296c:	2200      	movs	r2, #0
 800296e:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002970:	4b12      	ldr	r3, [pc, #72]	@ (80029bc <HAL_TIM_Base_MspInit+0x254>)
 8002972:	2200      	movs	r2, #0
 8002974:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8002976:	4811      	ldr	r0, [pc, #68]	@ (80029bc <HAL_TIM_Base_MspInit+0x254>)
 8002978:	f017 fdae 	bl	801a4d8 <HAL_DMA_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_TIM_Base_MspInit+0x21e>
      Error_Handler();
 8002982:	f7ff fbbf 	bl	8002104 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a0c      	ldr	r2, [pc, #48]	@ (80029bc <HAL_TIM_Base_MspInit+0x254>)
 800298a:	621a      	str	r2, [r3, #32]
 800298c:	4a0b      	ldr	r2, [pc, #44]	@ (80029bc <HAL_TIM_Base_MspInit+0x254>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002992:	e05b      	b.n	8002a4c <HAL_TIM_Base_MspInit+0x2e4>
 8002994:	40010000 	.word	0x40010000
 8002998:	58024400 	.word	0x58024400
 800299c:	20000574 	.word	0x20000574
 80029a0:	40020040 	.word	0x40020040
 80029a4:	40000400 	.word	0x40000400
 80029a8:	200005ec 	.word	0x200005ec
 80029ac:	40020058 	.word	0x40020058
 80029b0:	40000800 	.word	0x40000800
 80029b4:	20000664 	.word	0x20000664
 80029b8:	40020070 	.word	0x40020070
 80029bc:	200006dc 	.word	0x200006dc
 80029c0:	40020088 	.word	0x40020088
  else if(htim_base->Instance==TIM5)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a22      	ldr	r2, [pc, #136]	@ (8002a54 <HAL_TIM_Base_MspInit+0x2ec>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d13e      	bne.n	8002a4c <HAL_TIM_Base_MspInit+0x2e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029ce:	4b22      	ldr	r3, [pc, #136]	@ (8002a58 <HAL_TIM_Base_MspInit+0x2f0>)
 80029d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029d4:	4a20      	ldr	r2, [pc, #128]	@ (8002a58 <HAL_TIM_Base_MspInit+0x2f0>)
 80029d6:	f043 0308 	orr.w	r3, r3, #8
 80029da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029de:	4b1e      	ldr	r3, [pc, #120]	@ (8002a58 <HAL_TIM_Base_MspInit+0x2f0>)
 80029e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_up.Instance = DMA1_Stream6;
 80029ec:	4b1b      	ldr	r3, [pc, #108]	@ (8002a5c <HAL_TIM_Base_MspInit+0x2f4>)
 80029ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002a60 <HAL_TIM_Base_MspInit+0x2f8>)
 80029f0:	601a      	str	r2, [r3, #0]
    hdma_tim5_up.Init.Request = DMA_REQUEST_TIM5_UP;
 80029f2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a5c <HAL_TIM_Base_MspInit+0x2f4>)
 80029f4:	223b      	movs	r2, #59	@ 0x3b
 80029f6:	605a      	str	r2, [r3, #4]
    hdma_tim5_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029f8:	4b18      	ldr	r3, [pc, #96]	@ (8002a5c <HAL_TIM_Base_MspInit+0x2f4>)
 80029fa:	2240      	movs	r2, #64	@ 0x40
 80029fc:	609a      	str	r2, [r3, #8]
    hdma_tim5_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80029fe:	4b17      	ldr	r3, [pc, #92]	@ (8002a5c <HAL_TIM_Base_MspInit+0x2f4>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	60da      	str	r2, [r3, #12]
    hdma_tim5_up.Init.MemInc = DMA_MINC_ENABLE;
 8002a04:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <HAL_TIM_Base_MspInit+0x2f4>)
 8002a06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a0a:	611a      	str	r2, [r3, #16]
    hdma_tim5_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a0c:	4b13      	ldr	r3, [pc, #76]	@ (8002a5c <HAL_TIM_Base_MspInit+0x2f4>)
 8002a0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a12:	615a      	str	r2, [r3, #20]
    hdma_tim5_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a14:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <HAL_TIM_Base_MspInit+0x2f4>)
 8002a16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a1a:	619a      	str	r2, [r3, #24]
    hdma_tim5_up.Init.Mode = DMA_CIRCULAR;
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a5c <HAL_TIM_Base_MspInit+0x2f4>)
 8002a1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a22:	61da      	str	r2, [r3, #28]
    hdma_tim5_up.Init.Priority = DMA_PRIORITY_LOW;
 8002a24:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <HAL_TIM_Base_MspInit+0x2f4>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	621a      	str	r2, [r3, #32]
    hdma_tim5_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a5c <HAL_TIM_Base_MspInit+0x2f4>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_up) != HAL_OK)
 8002a30:	480a      	ldr	r0, [pc, #40]	@ (8002a5c <HAL_TIM_Base_MspInit+0x2f4>)
 8002a32:	f017 fd51 	bl	801a4d8 <HAL_DMA_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_TIM_Base_MspInit+0x2d8>
      Error_Handler();
 8002a3c:	f7ff fb62 	bl	8002104 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_up);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a06      	ldr	r2, [pc, #24]	@ (8002a5c <HAL_TIM_Base_MspInit+0x2f4>)
 8002a44:	621a      	str	r2, [r3, #32]
 8002a46:	4a05      	ldr	r2, [pc, #20]	@ (8002a5c <HAL_TIM_Base_MspInit+0x2f4>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002a4c:	bf00      	nop
 8002a4e:	3720      	adds	r7, #32
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40000c00 	.word	0x40000c00
 8002a58:	58024400 	.word	0x58024400
 8002a5c:	20000754 	.word	0x20000754
 8002a60:	400200a0 	.word	0x400200a0

08002a64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a12      	ldr	r2, [pc, #72]	@ (8002acc <HAL_TIM_MspPostInit+0x68>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d11e      	bne.n	8002ac4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a86:	4b12      	ldr	r3, [pc, #72]	@ (8002ad0 <HAL_TIM_MspPostInit+0x6c>)
 8002a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a8c:	4a10      	ldr	r2, [pc, #64]	@ (8002ad0 <HAL_TIM_MspPostInit+0x6c>)
 8002a8e:	f043 0302 	orr.w	r3, r3, #2
 8002a92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a96:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <HAL_TIM_MspPostInit+0x6c>)
 8002a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aa4:	23c0      	movs	r3, #192	@ 0xc0
 8002aa6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab8:	f107 030c 	add.w	r3, r7, #12
 8002abc:	4619      	mov	r1, r3
 8002abe:	4805      	ldr	r0, [pc, #20]	@ (8002ad4 <HAL_TIM_MspPostInit+0x70>)
 8002ac0:	f019 fc12 	bl	801c2e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ac4:	bf00      	nop
 8002ac6:	3720      	adds	r7, #32
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40000800 	.word	0x40000800
 8002ad0:	58024400 	.word	0x58024400
 8002ad4:	58020400 	.word	0x58020400

08002ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b0ba      	sub	sp, #232	@ 0xe8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002af0:	f107 0310 	add.w	r3, r7, #16
 8002af4:	22c0      	movs	r2, #192	@ 0xc0
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f01f fe4e 	bl	802279a <memset>
  if(huart->Instance==USART3)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a27      	ldr	r2, [pc, #156]	@ (8002ba0 <HAL_UART_MspInit+0xc8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d146      	bne.n	8002b96 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002b08:	f04f 0202 	mov.w	r2, #2
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b1a:	f107 0310 	add.w	r3, r7, #16
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f01a ff00 	bl	801d924 <HAL_RCCEx_PeriphCLKConfig>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002b2a:	f7ff faeb 	bl	8002104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba4 <HAL_UART_MspInit+0xcc>)
 8002b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b34:	4a1b      	ldr	r2, [pc, #108]	@ (8002ba4 <HAL_UART_MspInit+0xcc>)
 8002b36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b3a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ba4 <HAL_UART_MspInit+0xcc>)
 8002b40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b4c:	4b15      	ldr	r3, [pc, #84]	@ (8002ba4 <HAL_UART_MspInit+0xcc>)
 8002b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b52:	4a14      	ldr	r2, [pc, #80]	@ (8002ba4 <HAL_UART_MspInit+0xcc>)
 8002b54:	f043 0308 	orr.w	r3, r3, #8
 8002b58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ba4 <HAL_UART_MspInit+0xcc>)
 8002b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b84:	2307      	movs	r3, #7
 8002b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b8a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4805      	ldr	r0, [pc, #20]	@ (8002ba8 <HAL_UART_MspInit+0xd0>)
 8002b92:	f019 fba9 	bl	801c2e8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002b96:	bf00      	nop
 8002b98:	37e8      	adds	r7, #232	@ 0xe8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40004800 	.word	0x40004800
 8002ba4:	58024400 	.word	0x58024400
 8002ba8:	58020c00 	.word	0x58020c00

08002bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bb0:	bf00      	nop
 8002bb2:	e7fd      	b.n	8002bb0 <NMI_Handler+0x4>

08002bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb8:	bf00      	nop
 8002bba:	e7fd      	b.n	8002bb8 <MemManage_Handler+0x4>

08002bbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <BusFault_Handler+0x4>

08002bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc8:	bf00      	nop
 8002bca:	e7fd      	b.n	8002bc8 <UsageFault_Handler+0x4>

08002bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bde:	f017 fa8f 	bl	801a100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002be2:	f002 fb6b 	bl	80052bc <xTaskGetSchedulerState>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d101      	bne.n	8002bf0 <SysTick_Handler+0x16>
      {
    	xPortSysTickHandler();
 8002bec:	f003 fc4c 	bl	8006488 <xPortSysTickHandler>
      }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF0_4){
 8002bfe:	4b19      	ldr	r3, [pc, #100]	@ (8002c64 <DMA1_Stream0_IRQHandler+0x70>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00c      	beq.n	8002c24 <DMA1_Stream0_IRQHandler+0x30>
      uint32_t status = DMA1_Stream0->CR;
 8002c0a:	4b17      	ldr	r3, [pc, #92]	@ (8002c68 <DMA1_Stream0_IRQHandler+0x74>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60bb      	str	r3, [r7, #8]
        if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <DMA1_Stream0_IRQHandler+0x2c>
  	  ulCurrBuf = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	e001      	b.n	8002c24 <DMA1_Stream0_IRQHandler+0x30>
        } else {
  	  ulCurrBuf = 1;
 8002c20:	2301      	movs	r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
        }

    }
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002c24:	4811      	ldr	r0, [pc, #68]	@ (8002c6c <DMA1_Stream0_IRQHandler+0x78>)
 8002c26:	f018 f9f9 	bl	801b01c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vADCTCPTaskHandle,
 8002c2e:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <DMA1_Stream0_IRQHandler+0x7c>)
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	2300      	movs	r3, #0
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	2100      	movs	r1, #0
 8002c40:	f002 ff94 	bl	8005b6c <xTaskGenericNotifyFromISR>
			     &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d007      	beq.n	8002c5a <DMA1_Stream0_IRQHandler+0x66>
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <DMA1_Stream0_IRQHandler+0x80>)
 8002c4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40020000 	.word	0x40020000
 8002c68:	40020010 	.word	0x40020010
 8002c6c:	20000290 	.word	0x20000290
 8002c70:	20000d34 	.word	0x20000d34
 8002c74:	e000ed04 	.word	0xe000ed04

08002c78 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF1_5){
 8002c82:	4b19      	ldr	r3, [pc, #100]	@ (8002ce8 <DMA1_Stream1_IRQHandler+0x70>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00c      	beq.n	8002ca8 <DMA1_Stream1_IRQHandler+0x30>
      uint32_t status = DMA1_Stream1->CR;
 8002c8e:	4b17      	ldr	r3, [pc, #92]	@ (8002cec <DMA1_Stream1_IRQHandler+0x74>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60bb      	str	r3, [r7, #8]
	if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <DMA1_Stream1_IRQHandler+0x2c>
	ulCurrBuf = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	e001      	b.n	8002ca8 <DMA1_Stream1_IRQHandler+0x30>
	} else {
	ulCurrBuf = 1;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
	}

    }
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002ca8:	4811      	ldr	r0, [pc, #68]	@ (8002cf0 <DMA1_Stream1_IRQHandler+0x78>)
 8002caa:	f018 f9b7 	bl	801b01c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
       xTaskNotifyFromISR() unblocks the handling task, and the priority of
       the handling task is higher than the priority of the currently running task,
       then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
    xHigherPriorityTaskWoken = pdFALSE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]
    /* Unblock the handling task so the task can perform any processing necessitated
       by the interrupt. xHandlingTask is the task's handle, which was obtained
       when the task was created. The handling task's 0th notification value
       is bitwise ORed with the interrupt status - ensuring bits that are already
       set are not overwritten. */
    xTaskNotifyFromISR( vAuxADCTCPTaskHandle,
 8002cb2:	4b10      	ldr	r3, [pc, #64]	@ (8002cf4 <DMA1_Stream1_IRQHandler+0x7c>)
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	1d3b      	adds	r3, r7, #4
 8002cb8:	9301      	str	r3, [sp, #4]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	f002 ff52 	bl	8005b6c <xTaskGenericNotifyFromISR>
  			     &xHigherPriorityTaskWoken );

    /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
       The macro used to do this is dependent on the port and may be called
       portEND_SWITCHING_ISR. */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d007      	beq.n	8002cde <DMA1_Stream1_IRQHandler+0x66>
 8002cce:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <DMA1_Stream1_IRQHandler+0x80>)
 8002cd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40020000 	.word	0x40020000
 8002cec:	40020028 	.word	0x40020028
 8002cf0:	20000308 	.word	0x20000308
 8002cf4:	20000d38 	.word	0x20000d38
 8002cf8:	e000ed04 	.word	0xe000ed04

08002cfc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8002d00:	4802      	ldr	r0, [pc, #8]	@ (8002d0c <DMA1_Stream2_IRQHandler+0x10>)
 8002d02:	f018 f98b 	bl	801b01c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000574 	.word	0x20000574

08002d10 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_up);
 8002d14:	4802      	ldr	r0, [pc, #8]	@ (8002d20 <DMA1_Stream3_IRQHandler+0x10>)
 8002d16:	f018 f981 	bl	801b01c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200005ec 	.word	0x200005ec

08002d24 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002d28:	4802      	ldr	r0, [pc, #8]	@ (8002d34 <DMA1_Stream4_IRQHandler+0x10>)
 8002d2a:	f018 f977 	bl	801b01c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000664 	.word	0x20000664

08002d38 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8002d3c:	4802      	ldr	r0, [pc, #8]	@ (8002d48 <DMA1_Stream5_IRQHandler+0x10>)
 8002d3e:	f018 f96d 	bl	801b01c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	200006dc 	.word	0x200006dc

08002d4c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_up);
 8002d50:	4802      	ldr	r0, [pc, #8]	@ (8002d5c <DMA1_Stream6_IRQHandler+0x10>)
 8002d52:	f018 f963 	bl	801b01c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000754 	.word	0x20000754

08002d60 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002d64:	4802      	ldr	r0, [pc, #8]	@ (8002d70 <SPI1_IRQHandler+0x10>)
 8002d66:	f01c fd2d 	bl	801f7c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	200000f8 	.word	0x200000f8

08002d74 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002d78:	4802      	ldr	r0, [pc, #8]	@ (8002d84 <SPI2_IRQHandler+0x10>)
 8002d7a:	f01c fd23 	bl	801f7c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000180 	.word	0x20000180

08002d88 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->HISR & DMA_FLAG_TCIF3_7){
 8002d92:	4b19      	ldr	r3, [pc, #100]	@ (8002df8 <DMA1_Stream7_IRQHandler+0x70>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00c      	beq.n	8002db8 <DMA1_Stream7_IRQHandler+0x30>
      uint32_t status = DMA1_Stream7->CR;
 8002d9e:	4b17      	ldr	r3, [pc, #92]	@ (8002dfc <DMA1_Stream7_IRQHandler+0x74>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60bb      	str	r3, [r7, #8]
      if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <DMA1_Stream7_IRQHandler+0x2c>
      ulCurrBuf = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	e001      	b.n	8002db8 <DMA1_Stream7_IRQHandler+0x30>
      } else {
      ulCurrBuf = 1;
 8002db4:	2301      	movs	r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
      }

    }
  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8002db8:	4811      	ldr	r0, [pc, #68]	@ (8002e00 <DMA1_Stream7_IRQHandler+0x78>)
 8002dba:	f018 f92f 	bl	801b01c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vTCADCTCPTaskHandle,
 8002dc2:	4b10      	ldr	r3, [pc, #64]	@ (8002e04 <DMA1_Stream7_IRQHandler+0x7c>)
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	2301      	movs	r3, #1
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	f002 feca 	bl	8005b6c <xTaskGenericNotifyFromISR>
			 &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <DMA1_Stream7_IRQHandler+0x66>
 8002dde:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <DMA1_Stream7_IRQHandler+0x80>)
 8002de0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40020000 	.word	0x40020000
 8002dfc:	400200b8 	.word	0x400200b8
 8002e00:	20000380 	.word	0x20000380
 8002e04:	20000d3c 	.word	0x20000d3c
 8002e08:	e000ed04 	.word	0xe000ed04

08002e0c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002e10:	4802      	ldr	r0, [pc, #8]	@ (8002e1c <SPI3_IRQHandler+0x10>)
 8002e12:	f01c fcd7 	bl	801f7c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000208 	.word	0x20000208

08002e20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return 1;
 8002e24:	2301      	movs	r3, #1
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <_kill>:

int _kill(int pid, int sig)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e3a:	f020 fbd5 	bl	80235e8 <__errno>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2216      	movs	r2, #22
 8002e42:	601a      	str	r2, [r3, #0]
  return -1;
 8002e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <_exit>:

void _exit (int status)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e58:	f04f 31ff 	mov.w	r1, #4294967295
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ffe7 	bl	8002e30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e62:	bf00      	nop
 8002e64:	e7fd      	b.n	8002e62 <_exit+0x12>

08002e66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b086      	sub	sp, #24
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	e00a      	b.n	8002e8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e78:	f3af 8000 	nop.w
 8002e7c:	4601      	mov	r1, r0
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	60ba      	str	r2, [r7, #8]
 8002e84:	b2ca      	uxtb	r2, r1
 8002e86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	dbf0      	blt.n	8002e78 <_read+0x12>
  }

  return len;
 8002e96:	687b      	ldr	r3, [r7, #4]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	e009      	b.n	8002ec6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	60ba      	str	r2, [r7, #8]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	dbf1      	blt.n	8002eb2 <_write+0x12>
  }
  return len;
 8002ece:	687b      	ldr	r3, [r7, #4]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <_close>:

int _close(int file)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ee0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f00:	605a      	str	r2, [r3, #4]
  return 0;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <_isatty>:

int _isatty(int file)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f18:	2301      	movs	r3, #1
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f48:	4a14      	ldr	r2, [pc, #80]	@ (8002f9c <_sbrk+0x5c>)
 8002f4a:	4b15      	ldr	r3, [pc, #84]	@ (8002fa0 <_sbrk+0x60>)
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f54:	4b13      	ldr	r3, [pc, #76]	@ (8002fa4 <_sbrk+0x64>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f5c:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <_sbrk+0x64>)
 8002f5e:	4a12      	ldr	r2, [pc, #72]	@ (8002fa8 <_sbrk+0x68>)
 8002f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f62:	4b10      	ldr	r3, [pc, #64]	@ (8002fa4 <_sbrk+0x64>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d207      	bcs.n	8002f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f70:	f020 fb3a 	bl	80235e8 <__errno>
 8002f74:	4603      	mov	r3, r0
 8002f76:	220c      	movs	r2, #12
 8002f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7e:	e009      	b.n	8002f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f80:	4b08      	ldr	r3, [pc, #32]	@ (8002fa4 <_sbrk+0x64>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f86:	4b07      	ldr	r3, [pc, #28]	@ (8002fa4 <_sbrk+0x64>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4a05      	ldr	r2, [pc, #20]	@ (8002fa4 <_sbrk+0x64>)
 8002f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f92:	68fb      	ldr	r3, [r7, #12]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	24080000 	.word	0x24080000
 8002fa0:	00000400 	.word	0x00000400
 8002fa4:	20000d44 	.word	0x20000d44
 8002fa8:	20002808 	.word	0x20002808

08002fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80030b0 <SystemInit+0x104>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb8:	4a3d      	ldr	r2, [pc, #244]	@ (80030b0 <SystemInit+0x104>)
 8002fba:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fbe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002fc2:	4b3c      	ldr	r3, [pc, #240]	@ (80030b4 <SystemInit+0x108>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d807      	bhi.n	8002fde <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002fce:	4b39      	ldr	r3, [pc, #228]	@ (80030b4 <SystemInit+0x108>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 030f 	bic.w	r3, r3, #15
 8002fd6:	4a37      	ldr	r2, [pc, #220]	@ (80030b4 <SystemInit+0x108>)
 8002fd8:	f043 0307 	orr.w	r3, r3, #7
 8002fdc:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002fde:	4b36      	ldr	r3, [pc, #216]	@ (80030b8 <SystemInit+0x10c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a35      	ldr	r2, [pc, #212]	@ (80030b8 <SystemInit+0x10c>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002fea:	4b33      	ldr	r3, [pc, #204]	@ (80030b8 <SystemInit+0x10c>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002ff0:	4b31      	ldr	r3, [pc, #196]	@ (80030b8 <SystemInit+0x10c>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4930      	ldr	r1, [pc, #192]	@ (80030b8 <SystemInit+0x10c>)
 8002ff6:	4b31      	ldr	r3, [pc, #196]	@ (80030bc <SystemInit+0x110>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ffc:	4b2d      	ldr	r3, [pc, #180]	@ (80030b4 <SystemInit+0x108>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003008:	4b2a      	ldr	r3, [pc, #168]	@ (80030b4 <SystemInit+0x108>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f023 030f 	bic.w	r3, r3, #15
 8003010:	4a28      	ldr	r2, [pc, #160]	@ (80030b4 <SystemInit+0x108>)
 8003012:	f043 0307 	orr.w	r3, r3, #7
 8003016:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003018:	4b27      	ldr	r3, [pc, #156]	@ (80030b8 <SystemInit+0x10c>)
 800301a:	2200      	movs	r2, #0
 800301c:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800301e:	4b26      	ldr	r3, [pc, #152]	@ (80030b8 <SystemInit+0x10c>)
 8003020:	2200      	movs	r2, #0
 8003022:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003024:	4b24      	ldr	r3, [pc, #144]	@ (80030b8 <SystemInit+0x10c>)
 8003026:	2200      	movs	r2, #0
 8003028:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800302a:	4b23      	ldr	r3, [pc, #140]	@ (80030b8 <SystemInit+0x10c>)
 800302c:	4a24      	ldr	r2, [pc, #144]	@ (80030c0 <SystemInit+0x114>)
 800302e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003030:	4b21      	ldr	r3, [pc, #132]	@ (80030b8 <SystemInit+0x10c>)
 8003032:	4a24      	ldr	r2, [pc, #144]	@ (80030c4 <SystemInit+0x118>)
 8003034:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003036:	4b20      	ldr	r3, [pc, #128]	@ (80030b8 <SystemInit+0x10c>)
 8003038:	4a23      	ldr	r2, [pc, #140]	@ (80030c8 <SystemInit+0x11c>)
 800303a:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800303c:	4b1e      	ldr	r3, [pc, #120]	@ (80030b8 <SystemInit+0x10c>)
 800303e:	2200      	movs	r2, #0
 8003040:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003042:	4b1d      	ldr	r3, [pc, #116]	@ (80030b8 <SystemInit+0x10c>)
 8003044:	4a20      	ldr	r2, [pc, #128]	@ (80030c8 <SystemInit+0x11c>)
 8003046:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003048:	4b1b      	ldr	r3, [pc, #108]	@ (80030b8 <SystemInit+0x10c>)
 800304a:	2200      	movs	r2, #0
 800304c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800304e:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <SystemInit+0x10c>)
 8003050:	4a1d      	ldr	r2, [pc, #116]	@ (80030c8 <SystemInit+0x11c>)
 8003052:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003054:	4b18      	ldr	r3, [pc, #96]	@ (80030b8 <SystemInit+0x10c>)
 8003056:	2200      	movs	r2, #0
 8003058:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800305a:	4b17      	ldr	r3, [pc, #92]	@ (80030b8 <SystemInit+0x10c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a16      	ldr	r2, [pc, #88]	@ (80030b8 <SystemInit+0x10c>)
 8003060:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003064:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003066:	4b14      	ldr	r3, [pc, #80]	@ (80030b8 <SystemInit+0x10c>)
 8003068:	2200      	movs	r2, #0
 800306a:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800306c:	4b17      	ldr	r3, [pc, #92]	@ (80030cc <SystemInit+0x120>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4b17      	ldr	r3, [pc, #92]	@ (80030d0 <SystemInit+0x124>)
 8003072:	4013      	ands	r3, r2
 8003074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003078:	d202      	bcs.n	8003080 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800307a:	4b16      	ldr	r3, [pc, #88]	@ (80030d4 <SystemInit+0x128>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8003080:	4b0d      	ldr	r3, [pc, #52]	@ (80030b8 <SystemInit+0x10c>)
 8003082:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003086:	4a0c      	ldr	r2, [pc, #48]	@ (80030b8 <SystemInit+0x10c>)
 8003088:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 800308c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003090:	4b09      	ldr	r3, [pc, #36]	@ (80030b8 <SystemInit+0x10c>)
 8003092:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003096:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8003098:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800309a:	4b0f      	ldr	r3, [pc, #60]	@ (80030d8 <SystemInit+0x12c>)
 800309c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80030a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000ed00 	.word	0xe000ed00
 80030b4:	52002000 	.word	0x52002000
 80030b8:	58024400 	.word	0x58024400
 80030bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80030c0:	02020200 	.word	0x02020200
 80030c4:	01ff0000 	.word	0x01ff0000
 80030c8:	01010280 	.word	0x01010280
 80030cc:	5c001000 	.word	0x5c001000
 80030d0:	ffff0000 	.word	0xffff0000
 80030d4:	51008108 	.word	0x51008108
 80030d8:	52004000 	.word	0x52004000

080030dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80030dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003114 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80030e0:	f7ff ff64 	bl	8002fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030e4:	480c      	ldr	r0, [pc, #48]	@ (8003118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030e6:	490d      	ldr	r1, [pc, #52]	@ (800311c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030ec:	e002      	b.n	80030f4 <LoopCopyDataInit>

080030ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030f2:	3304      	adds	r3, #4

080030f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030f8:	d3f9      	bcc.n	80030ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003100:	e001      	b.n	8003106 <LoopFillZerobss>

08003102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003104:	3204      	adds	r2, #4

08003106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003108:	d3fb      	bcc.n	8003102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800310a:	f020 fa73 	bl	80235f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800310e:	f7fd fac7 	bl	80006a0 <main>
  bx  lr
 8003112:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003114:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800311c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003120:	08027b1c 	.word	0x08027b1c
  ldr r2, =_sbss
 8003124:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003128:	20002804 	.word	0x20002804

0800312c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800312c:	e7fe      	b.n	800312c <ADC3_IRQHandler>

0800312e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8003134:	201c      	movs	r0, #28
 8003136:	f003 fa25 	bl	8006584 <pvPortMalloc>
 800313a:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d007      	beq.n	8003152 <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	4618      	mov	r0, r3
 800314e:	f000 f9c3 	bl	80034d8 <vListInitialise>
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
 8003152:	687b      	ldr	r3, [r7, #4]
        }
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	@ 0x30
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	603b      	str	r3, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
        EventBits_t uxReturn, uxControlBits = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xWaitConditionMet, xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 8003172:	2300      	movs	r3, #0
 8003174:	623b      	str	r3, [r7, #32]

        traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );

        /* Check the user is not attempting to wait on the bits used by the kernel
         * itself, and that at least one bit is being requested. */
        configASSERT( xEventGroup );
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d104      	bne.n	8003186 <xEventGroupWaitBits+0x2a>
 800317c:	f240 1147 	movw	r1, #327	@ 0x147
 8003180:	4850      	ldr	r0, [pc, #320]	@ (80032c4 <xEventGroupWaitBits+0x168>)
 8003182:	f7fe fbe9 	bl	8001958 <vAssertCalled>
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800318c:	d304      	bcc.n	8003198 <xEventGroupWaitBits+0x3c>
 800318e:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8003192:	484c      	ldr	r0, [pc, #304]	@ (80032c4 <xEventGroupWaitBits+0x168>)
 8003194:	f7fe fbe0 	bl	8001958 <vAssertCalled>
        configASSERT( uxBitsToWaitFor != 0 );
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d104      	bne.n	80031a8 <xEventGroupWaitBits+0x4c>
 800319e:	f240 1149 	movw	r1, #329	@ 0x149
 80031a2:	4848      	ldr	r0, [pc, #288]	@ (80032c4 <xEventGroupWaitBits+0x168>)
 80031a4:	f7fe fbd8 	bl	8001958 <vAssertCalled>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031a8:	f002 f888 	bl	80052bc <xTaskGetSchedulerState>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d102      	bne.n	80031b8 <xEventGroupWaitBits+0x5c>
 80031b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <xEventGroupWaitBits+0x60>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <xEventGroupWaitBits+0x62>
 80031bc:	2300      	movs	r3, #0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d104      	bne.n	80031cc <xEventGroupWaitBits+0x70>
 80031c2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 80031c6:	483f      	ldr	r0, [pc, #252]	@ (80032c4 <xEventGroupWaitBits+0x168>)
 80031c8:	f7fe fbc6 	bl	8001958 <vAssertCalled>
        }
        #endif

        vTaskSuspendAll();
 80031cc:	f001 fa58 	bl	8004680 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	61fb      	str	r3, [r7, #28]

            /* Check to see if the wait condition is already met or not. */
            xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	69f8      	ldr	r0, [r7, #28]
 80031dc:	f000 f95a 	bl	8003494 <prvTestWaitCondition>
 80031e0:	61b8      	str	r0, [r7, #24]

            if( xWaitConditionMet != pdFALSE )
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00e      	beq.n	8003206 <xEventGroupWaitBits+0xaa>
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTicksToWait = ( TickType_t ) 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d028      	beq.n	8003248 <xEventGroupWaitBits+0xec>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	401a      	ands	r2, r3
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	e020      	b.n	8003248 <xEventGroupWaitBits+0xec>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
 8003206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003208:	2b00      	cmp	r3, #0
 800320a:	d104      	bne.n	8003216 <xEventGroupWaitBits+0xba>
            {
                /* The wait condition has not been met, but no block time was
                 * specified, so just return the current value. */
                uxReturn = uxCurrentEventBits;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTimeoutOccurred = pdTRUE;
 8003210:	2301      	movs	r3, #1
 8003212:	623b      	str	r3, [r7, #32]
 8003214:	e018      	b.n	8003248 <xEventGroupWaitBits+0xec>
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <xEventGroupWaitBits+0xc8>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800321c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003222:	62bb      	str	r3, [r7, #40]	@ 0x28
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <xEventGroupWaitBits+0xd6>
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800322a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003230:	62bb      	str	r3, [r7, #40]	@ 0x28
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	1d18      	adds	r0, r3, #4
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323a:	4313      	orrs	r3, r2
 800323c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800323e:	4619      	mov	r1, r3
 8003240:	f001 fd06 	bl	8004c50 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	62fb      	str	r3, [r7, #44]	@ 0x2c

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003248:	f001 fa28 	bl	800469c <xTaskResumeAll>
 800324c:	6178      	str	r0, [r7, #20]

        if( xTicksToWait != ( TickType_t ) 0 )
 800324e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003250:	2b00      	cmp	r3, #0
 8003252:	d031      	beq.n	80032b8 <xEventGroupWaitBits+0x15c>
        {
            if( xAlreadyYielded == pdFALSE )
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d107      	bne.n	800326a <xEventGroupWaitBits+0x10e>
            {
                taskYIELD_WITHIN_API();
 800325a:	4b1b      	ldr	r3, [pc, #108]	@ (80032c8 <xEventGroupWaitBits+0x16c>)
 800325c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 800326a:	f002 fa31 	bl	80056d0 <uxTaskResetEventItemValue>
 800326e:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d11a      	bne.n	80032b0 <xEventGroupWaitBits+0x154>
            {
                taskENTER_CRITICAL();
 800327a:	f003 f881 	bl	8006380 <vPortEnterCritical>
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800328a:	f000 f903 	bl	8003494 <prvTestWaitCondition>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <xEventGroupWaitBits+0x14c>
                    {
                        if( xClearOnExit != pdFALSE )
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d006      	beq.n	80032a8 <xEventGroupWaitBits+0x14c>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800329a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	401a      	ands	r2, r3
 80032a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
 80032a8:	2301      	movs	r3, #1
 80032aa:	623b      	str	r3, [r7, #32]
                }
                taskEXIT_CRITICAL();
 80032ac:	f003 f894 	bl	80063d8 <vPortExitCritical>
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80032b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80032b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
 80032b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80032ba:	4618      	mov	r0, r3
 80032bc:	3730      	adds	r7, #48	@ 0x30
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	08024370 	.word	0x08024370
 80032c8:	e000ed04 	.word	0xe000ed04

080032cc <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	60fb      	str	r3, [r7, #12]

        traceENTER_xEventGroupClearBits( xEventGroup, uxBitsToClear );

        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d104      	bne.n	80032ea <xEventGroupClearBits+0x1e>
 80032e0:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 80032e4:	480f      	ldr	r0, [pc, #60]	@ (8003324 <xEventGroupClearBits+0x58>)
 80032e6:	f7fe fb37 	bl	8001958 <vAssertCalled>
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032f0:	d304      	bcc.n	80032fc <xEventGroupClearBits+0x30>
 80032f2:	f240 11e3 	movw	r1, #483	@ 0x1e3
 80032f6:	480b      	ldr	r0, [pc, #44]	@ (8003324 <xEventGroupClearBits+0x58>)
 80032f8:	f7fe fb2e 	bl	8001958 <vAssertCalled>

        taskENTER_CRITICAL();
 80032fc:	f003 f840 	bl	8006380 <vPortEnterCritical>
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60bb      	str	r3, [r7, #8]

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	43db      	mvns	r3, r3
 800330e:	401a      	ands	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	601a      	str	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003314:	f003 f860 	bl	80063d8 <vPortExitCritical>

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
 8003318:	68bb      	ldr	r3, [r7, #8]
    }
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	08024370 	.word	0x08024370

08003328 <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 8003328:	b580      	push	{r7, lr}
 800332a:	b08c      	sub	sp, #48	@ 0x30
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8003332:	2300      	movs	r3, #0
 8003334:	62bb      	str	r3, [r7, #40]	@ 0x28
        EventGroup_t * pxEventBits = xEventGroup;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	623b      	str	r3, [r7, #32]
        BaseType_t xMatchFound = pdFALSE;
 800333a:	2300      	movs	r3, #0
 800333c:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d104      	bne.n	800334e <xEventGroupSetBits+0x26>
 8003344:	f240 2132 	movw	r1, #562	@ 0x232
 8003348:	4836      	ldr	r0, [pc, #216]	@ (8003424 <xEventGroupSetBits+0xfc>)
 800334a:	f7fe fb05 	bl	8001958 <vAssertCalled>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003354:	d304      	bcc.n	8003360 <xEventGroupSetBits+0x38>
 8003356:	f240 2133 	movw	r1, #563	@ 0x233
 800335a:	4832      	ldr	r0, [pc, #200]	@ (8003424 <xEventGroupSetBits+0xfc>)
 800335c:	f7fe fafc 	bl	8001958 <vAssertCalled>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	3304      	adds	r3, #4
 8003364:	61fb      	str	r3, [r7, #28]
        pxListEnd = listGET_END_MARKER( pxList );
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3308      	adds	r3, #8
 800336a:	61bb      	str	r3, [r7, #24]
        vTaskSuspendAll();
 800336c:	f001 f988 	bl	8004680 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	431a      	orrs	r2, r3
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 8003382:	e03c      	b.n	80033fe <xEventGroupSetBits+0xd6>
            {
                pxNext = listGET_NEXT( pxListItem );
 8003384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800338a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	613b      	str	r3, [r7, #16]
                xMatchFound = pdFALSE;
 8003390:	2300      	movs	r3, #0
 8003392:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800339a:	60fb      	str	r3, [r7, #12]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80033a2:	613b      	str	r3, [r7, #16]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d108      	bne.n	80033c0 <xEventGroupSetBits+0x98>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <xEventGroupSetBits+0xaa>
                    {
                        xMatchFound = pdTRUE;
 80033ba:	2301      	movs	r3, #1
 80033bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80033be:	e008      	b.n	80033d2 <xEventGroupSetBits+0xaa>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4013      	ands	r3, r2
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d101      	bne.n	80033d2 <xEventGroupSetBits+0xaa>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 80033ce:	2301      	movs	r3, #1
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d010      	beq.n	80033fa <xEventGroupSetBits+0xd2>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <xEventGroupSetBits+0xc2>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 80033e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033f2:	4619      	mov	r1, r3
 80033f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033f6:	f001 fd49 	bl	8004e8c <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while( pxListItem != pxListEnd )
 80033fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	429a      	cmp	r2, r3
 8003404:	d1be      	bne.n	8003384 <xEventGroupSetBits+0x5c>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340c:	43db      	mvns	r3, r3
 800340e:	401a      	ands	r2, r3
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 8003414:	f001 f942 	bl	800469c <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	681b      	ldr	r3, [r3, #0]
    }
 800341c:	4618      	mov	r0, r3
 800341e:	3730      	adds	r7, #48	@ 0x30
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	08024370 	.word	0x08024370

08003428 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
        EventGroup_t * pxEventBits = xEventGroup;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	60fb      	str	r3, [r7, #12]
        const List_t * pxTasksWaitingForBits;

        traceENTER_vEventGroupDelete( xEventGroup );

        configASSERT( pxEventBits );
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d104      	bne.n	8003444 <vEventGroupDelete+0x1c>
 800343a:	f240 218e 	movw	r1, #654	@ 0x28e
 800343e:	4814      	ldr	r0, [pc, #80]	@ (8003490 <vEventGroupDelete+0x68>)
 8003440:	f7fe fa8a 	bl	8001958 <vAssertCalled>

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3304      	adds	r3, #4
 8003448:	60bb      	str	r3, [r7, #8]

        vTaskSuspendAll();
 800344a:	f001 f919 	bl	8004680 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800344e:	e011      	b.n	8003474 <vEventGroupDelete+0x4c>
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	3308      	adds	r3, #8
 8003458:	429a      	cmp	r2, r3
 800345a:	d104      	bne.n	8003466 <vEventGroupDelete+0x3e>
 800345c:	f240 219a 	movw	r1, #666	@ 0x29a
 8003460:	480b      	ldr	r0, [pc, #44]	@ (8003490 <vEventGroupDelete+0x68>)
 8003462:	f7fe fa79 	bl	8001958 <vAssertCalled>
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800346e:	4618      	mov	r0, r3
 8003470:	f001 fd0c 	bl	8004e8c <vTaskRemoveFromUnorderedEventList>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e9      	bne.n	8003450 <vEventGroupDelete+0x28>
            }
        }
        ( void ) xTaskResumeAll();
 800347c:	f001 f90e 	bl	800469c <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f003 f953 	bl	800672c <vPortFree>
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	08024370 	.word	0x08024370

08003494 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
        BaseType_t xWaitConditionMet = pdFALSE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]

        if( xWaitForAllBits == pdFALSE )
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d107      	bne.n	80034ba <prvTestWaitCondition+0x26>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 80034b4:	2301      	movs	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	e007      	b.n	80034ca <prvTestWaitCondition+0x36>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4013      	ands	r3, r2
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d101      	bne.n	80034ca <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 80034c6:	2301      	movs	r3, #1
 80034c8:	617b      	str	r3, [r7, #20]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return xWaitConditionMet;
 80034ca:	697b      	ldr	r3, [r7, #20]
    }
 80034cc:	4618      	mov	r0, r3
 80034ce:	371c      	adds	r7, #28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f103 0208 	add.w	r2, r3, #8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295
 80034f0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f103 0208 	add.w	r2, r3, #8
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f103 0208 	add.w	r2, r3, #8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d103      	bne.n	800359a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	e00c      	b.n	80035b4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3308      	adds	r3, #8
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e002      	b.n	80035a8 <vListInsert+0x2e>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d2f6      	bcs.n	80035a2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6892      	ldr	r2, [r2, #8]
 8003602:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6852      	ldr	r2, [r2, #4]
 800360c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	429a      	cmp	r2, r3
 8003616:	d103      	bne.n	8003620 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	1e5a      	subs	r2, r3, #1
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800364a:	2301      	movs	r3, #1
 800364c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d104      	bne.n	8003662 <xQueueGenericReset+0x22>
 8003658:	f240 1137 	movw	r1, #311	@ 0x137
 800365c:	4839      	ldr	r0, [pc, #228]	@ (8003744 <xQueueGenericReset+0x104>)
 800365e:	f7fe f97b 	bl	8001958 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d05d      	beq.n	8003724 <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800366c:	2b00      	cmp	r3, #0
 800366e:	d059      	beq.n	8003724 <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003678:	2100      	movs	r1, #0
 800367a:	fba3 2302 	umull	r2, r3, r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d000      	beq.n	8003684 <xQueueGenericReset+0x44>
 8003682:	2101      	movs	r1, #1
 8003684:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003686:	2b00      	cmp	r3, #0
 8003688:	d14c      	bne.n	8003724 <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 800368a:	f002 fe79 	bl	8006380 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800369a:	fb01 f303 	mul.w	r3, r1, r3
 800369e:	441a      	add	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2200      	movs	r2, #0
 80036a8:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ba:	3b01      	subs	r3, #1
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	441a      	add	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	22ff      	movs	r2, #255	@ 0xff
 80036ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	22ff      	movs	r2, #255	@ 0xff
 80036d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d114      	bne.n	800370a <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01a      	beq.n	800371e <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	3310      	adds	r3, #16
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 fafb 	bl	8004ce8 <xTaskRemoveFromEventList>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d012      	beq.n	800371e <xQueueGenericReset+0xde>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80036f8:	4b13      	ldr	r3, [pc, #76]	@ (8003748 <xQueueGenericReset+0x108>)
 80036fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	e009      	b.n	800371e <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	3310      	adds	r3, #16
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff fee2 	bl	80034d8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	3324      	adds	r3, #36	@ 0x24
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff fedd 	bl	80034d8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800371e:	f002 fe5b 	bl	80063d8 <vPortExitCritical>
 8003722:	e001      	b.n	8003728 <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d104      	bne.n	8003738 <xQueueGenericReset+0xf8>
 800372e:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8003732:	4804      	ldr	r0, [pc, #16]	@ (8003744 <xQueueGenericReset+0x104>)
 8003734:	f7fe f910 	bl	8001958 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8003738:	68fb      	ldr	r3, [r7, #12]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	0802439c 	.word	0x0802439c
 8003748:	e000ed04 	.word	0xe000ed04

0800374c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	@ 0x28
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	4613      	mov	r3, r2
 8003758:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d02e      	beq.n	80037c2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003764:	2100      	movs	r1, #0
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	fba3 2302 	umull	r2, r3, r3, r2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d000      	beq.n	8003774 <xQueueGenericCreate+0x28>
 8003772:	2101      	movs	r1, #1
 8003774:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003776:	2b00      	cmp	r3, #0
 8003778:	d123      	bne.n	80037c2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003782:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8003786:	d81c      	bhi.n	80037c2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	fb02 f303 	mul.w	r3, r2, r3
 8003790:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	3350      	adds	r3, #80	@ 0x50
 8003796:	4618      	mov	r0, r3
 8003798:	f002 fef4 	bl	8006584 <pvPortMalloc>
 800379c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d016      	beq.n	80037d2 <xQueueGenericCreate+0x86>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	3350      	adds	r3, #80	@ 0x50
 80037ac:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037ae:	79fa      	ldrb	r2, [r7, #7]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f810 	bl	80037e0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80037c0:	e007      	b.n	80037d2 <xQueueGenericCreate+0x86>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d104      	bne.n	80037d2 <xQueueGenericCreate+0x86>
 80037c8:	f240 212a 	movw	r1, #554	@ 0x22a
 80037cc:	4803      	ldr	r0, [pc, #12]	@ (80037dc <xQueueGenericCreate+0x90>)
 80037ce:	f7fe f8c3 	bl	8001958 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 80037d2:	69fb      	ldr	r3, [r7, #28]
    }
 80037d4:	4618      	mov	r0, r3
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	0802439c 	.word	0x0802439c

080037e0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d103      	bne.n	80037fc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e002      	b.n	8003802 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800380e:	2101      	movs	r1, #1
 8003810:	69b8      	ldr	r0, [r7, #24]
 8003812:	f7ff ff15 	bl	8003640 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00e      	beq.n	8003852 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003846:	2300      	movs	r3, #0
 8003848:	2200      	movs	r2, #0
 800384a:	2100      	movs	r1, #0
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f847 	bl	80038e0 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800385a:	b580      	push	{r7, lr}
 800385c:	b086      	sub	sp, #24
 800385e:	af00      	add	r7, sp, #0
 8003860:	4603      	mov	r3, r0
 8003862:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003864:	2301      	movs	r3, #1
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	461a      	mov	r2, r3
 8003870:	6939      	ldr	r1, [r7, #16]
 8003872:	6978      	ldr	r0, [r7, #20]
 8003874:	f7ff ff6a 	bl	800374c <xQueueGenericCreate>
 8003878:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff ffd3 	bl	8003826 <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8003880:	68fb      	ldr	r3, [r7, #12]
    }
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );

        if( ( uxMaxCount != 0U ) &&
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d010      	beq.n	80038c2 <xQueueCreateCountingSemaphore+0x36>
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d80c      	bhi.n	80038c2 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80038a8:	2202      	movs	r2, #2
 80038aa:	2100      	movs	r1, #0
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ff4d 	bl	800374c <xQueueGenericCreate>
 80038b2:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00b      	beq.n	80038d2 <xQueueCreateCountingSemaphore+0x46>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 80038c0:	e007      	b.n	80038d2 <xQueueCreateCountingSemaphore+0x46>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d104      	bne.n	80038d2 <xQueueCreateCountingSemaphore+0x46>
 80038c8:	f240 319f 	movw	r1, #927	@ 0x39f
 80038cc:	4803      	ldr	r0, [pc, #12]	@ (80038dc <xQueueCreateCountingSemaphore+0x50>)
 80038ce:	f7fe f843 	bl	8001958 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphore( xHandle );

        return xHandle;
 80038d2:	68fb      	ldr	r3, [r7, #12]
    }
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	0802439c 	.word	0x0802439c

080038e0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	@ 0x28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038ee:	2300      	movs	r3, #0
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d104      	bne.n	8003906 <xQueueGenericSend+0x26>
 80038fc:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8003900:	4869      	ldr	r0, [pc, #420]	@ (8003aa8 <xQueueGenericSend+0x1c8>)
 8003902:	f7fe f829 	bl	8001958 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d103      	bne.n	8003914 <xQueueGenericSend+0x34>
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <xQueueGenericSend+0x38>
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <xQueueGenericSend+0x3a>
 8003918:	2300      	movs	r3, #0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d104      	bne.n	8003928 <xQueueGenericSend+0x48>
 800391e:	f240 31b7 	movw	r1, #951	@ 0x3b7
 8003922:	4861      	ldr	r0, [pc, #388]	@ (8003aa8 <xQueueGenericSend+0x1c8>)
 8003924:	f7fe f818 	bl	8001958 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d103      	bne.n	8003936 <xQueueGenericSend+0x56>
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <xQueueGenericSend+0x5a>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <xQueueGenericSend+0x5c>
 800393a:	2300      	movs	r3, #0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <xQueueGenericSend+0x6a>
 8003940:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 8003944:	4858      	ldr	r0, [pc, #352]	@ (8003aa8 <xQueueGenericSend+0x1c8>)
 8003946:	f7fe f807 	bl	8001958 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800394a:	f001 fcb7 	bl	80052bc <xTaskGetSchedulerState>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d102      	bne.n	800395a <xQueueGenericSend+0x7a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <xQueueGenericSend+0x7e>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <xQueueGenericSend+0x80>
 800395e:	2300      	movs	r3, #0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d104      	bne.n	800396e <xQueueGenericSend+0x8e>
 8003964:	f240 31bb 	movw	r1, #955	@ 0x3bb
 8003968:	484f      	ldr	r0, [pc, #316]	@ (8003aa8 <xQueueGenericSend+0x1c8>)
 800396a:	f7fd fff5 	bl	8001958 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800396e:	f002 fd07 	bl	8006380 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397a:	429a      	cmp	r2, r3
 800397c:	d302      	bcc.n	8003984 <xQueueGenericSend+0xa4>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b02      	cmp	r3, #2
 8003982:	d129      	bne.n	80039d8 <xQueueGenericSend+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	6a38      	ldr	r0, [r7, #32]
 800398a:	f000 fabb 	bl	8003f04 <prvCopyDataToQueue>
 800398e:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	2b00      	cmp	r3, #0
 8003996:	d010      	beq.n	80039ba <xQueueGenericSend+0xda>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	3324      	adds	r3, #36	@ 0x24
 800399c:	4618      	mov	r0, r3
 800399e:	f001 f9a3 	bl	8004ce8 <xTaskRemoveFromEventList>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d013      	beq.n	80039d0 <xQueueGenericSend+0xf0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80039a8:	4b40      	ldr	r3, [pc, #256]	@ (8003aac <xQueueGenericSend+0x1cc>)
 80039aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	e00a      	b.n	80039d0 <xQueueGenericSend+0xf0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d007      	beq.n	80039d0 <xQueueGenericSend+0xf0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80039c0:	4b3a      	ldr	r3, [pc, #232]	@ (8003aac <xQueueGenericSend+0x1cc>)
 80039c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80039d0:	f002 fd02 	bl	80063d8 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e063      	b.n	8003aa0 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d103      	bne.n	80039e6 <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80039de:	f002 fcfb 	bl	80063d8 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e05c      	b.n	8003aa0 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d106      	bne.n	80039fa <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80039ec:	f107 0314 	add.w	r3, r7, #20
 80039f0:	4618      	mov	r0, r3
 80039f2:	f001 fb23 	bl	800503c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80039f6:	2301      	movs	r3, #1
 80039f8:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80039fa:	f002 fced 	bl	80063d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80039fe:	f000 fe3f 	bl	8004680 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003a02:	f002 fcbd 	bl	8006380 <vPortEnterCritical>
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a0c:	b25b      	sxtb	r3, r3
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a12:	d103      	bne.n	8003a1c <xQueueGenericSend+0x13c>
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a22:	b25b      	sxtb	r3, r3
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d103      	bne.n	8003a32 <xQueueGenericSend+0x152>
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a32:	f002 fcd1 	bl	80063d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a36:	1d3a      	adds	r2, r7, #4
 8003a38:	f107 0314 	add.w	r3, r7, #20
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 fb12 	bl	8005068 <xTaskCheckForTimeOut>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d124      	bne.n	8003a94 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a4a:	6a38      	ldr	r0, [r7, #32]
 8003a4c:	f000 fb52 	bl	80040f4 <prvIsQueueFull>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d018      	beq.n	8003a88 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	3310      	adds	r3, #16
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f001 f8d6 	bl	8004c10 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003a64:	6a38      	ldr	r0, [r7, #32]
 8003a66:	f000 fadd 	bl	8004024 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003a6a:	f000 fe17 	bl	800469c <xTaskResumeAll>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f47f af7c 	bne.w	800396e <xQueueGenericSend+0x8e>
                {
                    taskYIELD_WITHIN_API();
 8003a76:	4b0d      	ldr	r3, [pc, #52]	@ (8003aac <xQueueGenericSend+0x1cc>)
 8003a78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	e772      	b.n	800396e <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003a88:	6a38      	ldr	r0, [r7, #32]
 8003a8a:	f000 facb 	bl	8004024 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003a8e:	f000 fe05 	bl	800469c <xTaskResumeAll>
 8003a92:	e76c      	b.n	800396e <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003a94:	6a38      	ldr	r0, [r7, #32]
 8003a96:	f000 fac5 	bl	8004024 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003a9a:	f000 fdff 	bl	800469c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8003a9e:	2300      	movs	r3, #0
        }
    }
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3728      	adds	r7, #40	@ 0x28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	0802439c 	.word	0x0802439c
 8003aac:	e000ed04 	.word	0xe000ed04

08003ab0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	@ 0x28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003abc:	2300      	movs	r3, #0
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d104      	bne.n	8003ad4 <xQueueReceive+0x24>
 8003aca:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 8003ace:	485e      	ldr	r0, [pc, #376]	@ (8003c48 <xQueueReceive+0x198>)
 8003ad0:	f7fd ff42 	bl	8001958 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d103      	bne.n	8003ae2 <xQueueReceive+0x32>
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <xQueueReceive+0x36>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <xQueueReceive+0x38>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d104      	bne.n	8003af6 <xQueueReceive+0x46>
 8003aec:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 8003af0:	4855      	ldr	r0, [pc, #340]	@ (8003c48 <xQueueReceive+0x198>)
 8003af2:	f7fd ff31 	bl	8001958 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003af6:	f001 fbe1 	bl	80052bc <xTaskGetSchedulerState>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <xQueueReceive+0x56>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <xQueueReceive+0x5a>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <xQueueReceive+0x5c>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d104      	bne.n	8003b1a <xQueueReceive+0x6a>
 8003b10:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 8003b14:	484c      	ldr	r0, [pc, #304]	@ (8003c48 <xQueueReceive+0x198>)
 8003b16:	f7fd ff1f 	bl	8001958 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003b1a:	f002 fc31 	bl	8006380 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b22:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d01f      	beq.n	8003b6a <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	6a38      	ldr	r0, [r7, #32]
 8003b2e:	f000 fa53 	bl	8003fd8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	1e5a      	subs	r2, r3, #1
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00f      	beq.n	8003b62 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	3310      	adds	r3, #16
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 f8ce 	bl	8004ce8 <xTaskRemoveFromEventList>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003b52:	4b3e      	ldr	r3, [pc, #248]	@ (8003c4c <xQueueReceive+0x19c>)
 8003b54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003b62:	f002 fc39 	bl	80063d8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e069      	b.n	8003c3e <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d103      	bne.n	8003b78 <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003b70:	f002 fc32 	bl	80063d8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8003b74:	2300      	movs	r3, #0
 8003b76:	e062      	b.n	8003c3e <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003b7e:	f107 0314 	add.w	r3, r7, #20
 8003b82:	4618      	mov	r0, r3
 8003b84:	f001 fa5a 	bl	800503c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003b8c:	f002 fc24 	bl	80063d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003b90:	f000 fd76 	bl	8004680 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003b94:	f002 fbf4 	bl	8006380 <vPortEnterCritical>
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b9e:	b25b      	sxtb	r3, r3
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d103      	bne.n	8003bae <xQueueReceive+0xfe>
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bb4:	b25b      	sxtb	r3, r3
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d103      	bne.n	8003bc4 <xQueueReceive+0x114>
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bc4:	f002 fc08 	bl	80063d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bc8:	1d3a      	adds	r2, r7, #4
 8003bca:	f107 0314 	add.w	r3, r7, #20
 8003bce:	4611      	mov	r1, r2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f001 fa49 	bl	8005068 <xTaskCheckForTimeOut>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d123      	bne.n	8003c24 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bdc:	6a38      	ldr	r0, [r7, #32]
 8003bde:	f000 fa73 	bl	80040c8 <prvIsQueueEmpty>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d017      	beq.n	8003c18 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	3324      	adds	r3, #36	@ 0x24
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f001 f80d 	bl	8004c10 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003bf6:	6a38      	ldr	r0, [r7, #32]
 8003bf8:	f000 fa14 	bl	8004024 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003bfc:	f000 fd4e 	bl	800469c <xTaskResumeAll>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d189      	bne.n	8003b1a <xQueueReceive+0x6a>
                {
                    taskYIELD_WITHIN_API();
 8003c06:	4b11      	ldr	r3, [pc, #68]	@ (8003c4c <xQueueReceive+0x19c>)
 8003c08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	e780      	b.n	8003b1a <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003c18:	6a38      	ldr	r0, [r7, #32]
 8003c1a:	f000 fa03 	bl	8004024 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003c1e:	f000 fd3d 	bl	800469c <xTaskResumeAll>
 8003c22:	e77a      	b.n	8003b1a <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003c24:	6a38      	ldr	r0, [r7, #32]
 8003c26:	f000 f9fd 	bl	8004024 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003c2a:	f000 fd37 	bl	800469c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c2e:	6a38      	ldr	r0, [r7, #32]
 8003c30:	f000 fa4a 	bl	80040c8 <prvIsQueueEmpty>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f43f af6f 	beq.w	8003b1a <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8003c3c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3728      	adds	r7, #40	@ 0x28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	0802439c 	.word	0x0802439c
 8003c4c:	e000ed04 	.word	0xe000ed04

08003c50 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08a      	sub	sp, #40	@ 0x28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	623b      	str	r3, [r7, #32]
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d104      	bne.n	8003c76 <xQueueSemaphoreTake+0x26>
 8003c6c:	f240 6182 	movw	r1, #1666	@ 0x682
 8003c70:	486c      	ldr	r0, [pc, #432]	@ (8003e24 <xQueueSemaphoreTake+0x1d4>)
 8003c72:	f7fd fe71 	bl	8001958 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d004      	beq.n	8003c88 <xQueueSemaphoreTake+0x38>
 8003c7e:	f240 6186 	movw	r1, #1670	@ 0x686
 8003c82:	4868      	ldr	r0, [pc, #416]	@ (8003e24 <xQueueSemaphoreTake+0x1d4>)
 8003c84:	f7fd fe68 	bl	8001958 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c88:	f001 fb18 	bl	80052bc <xTaskGetSchedulerState>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <xQueueSemaphoreTake+0x48>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <xQueueSemaphoreTake+0x4c>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <xQueueSemaphoreTake+0x4e>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <xQueueSemaphoreTake+0x5c>
 8003ca2:	f240 618b 	movw	r1, #1675	@ 0x68b
 8003ca6:	485f      	ldr	r0, [pc, #380]	@ (8003e24 <xQueueSemaphoreTake+0x1d4>)
 8003ca8:	f7fd fe56 	bl	8001958 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003cac:	f002 fb68 	bl	8006380 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb4:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d024      	beq.n	8003d06 <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	1e5a      	subs	r2, r3, #1
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d104      	bne.n	8003cd6 <xQueueSemaphoreTake+0x86>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003ccc:	f001 fd18 	bl	8005700 <pvTaskIncrementMutexHeldCount>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00f      	beq.n	8003cfe <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	3310      	adds	r3, #16
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f001 f800 	bl	8004ce8 <xTaskRemoveFromEventList>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003cee:	4b4e      	ldr	r3, [pc, #312]	@ (8003e28 <xQueueSemaphoreTake+0x1d8>)
 8003cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003cfe:	f002 fb6b 	bl	80063d8 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e089      	b.n	8003e1a <xQueueSemaphoreTake+0x1ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d103      	bne.n	8003d14 <xQueueSemaphoreTake+0xc4>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003d0c:	f002 fb64 	bl	80063d8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8003d10:	2300      	movs	r3, #0
 8003d12:	e082      	b.n	8003e1a <xQueueSemaphoreTake+0x1ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <xQueueSemaphoreTake+0xd8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003d1a:	f107 030c 	add.w	r3, r7, #12
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 f98c 	bl	800503c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003d24:	2301      	movs	r3, #1
 8003d26:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003d28:	f002 fb56 	bl	80063d8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003d2c:	f000 fca8 	bl	8004680 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003d30:	f002 fb26 	bl	8006380 <vPortEnterCritical>
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d3a:	b25b      	sxtb	r3, r3
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d103      	bne.n	8003d4a <xQueueSemaphoreTake+0xfa>
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d50:	b25b      	sxtb	r3, r3
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d56:	d103      	bne.n	8003d60 <xQueueSemaphoreTake+0x110>
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d60:	f002 fb3a 	bl	80063d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d64:	463a      	mov	r2, r7
 8003d66:	f107 030c 	add.w	r3, r7, #12
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f001 f97b 	bl	8005068 <xTaskCheckForTimeOut>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d132      	bne.n	8003dde <xQueueSemaphoreTake+0x18e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d78:	69f8      	ldr	r0, [r7, #28]
 8003d7a:	f000 f9a5 	bl	80040c8 <prvIsQueueEmpty>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d026      	beq.n	8003dd2 <xQueueSemaphoreTake+0x182>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d109      	bne.n	8003da0 <xQueueSemaphoreTake+0x150>
                    {
                        taskENTER_CRITICAL();
 8003d8c:	f002 faf8 	bl	8006380 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f001 faaf 	bl	80052f8 <xTaskPriorityInherit>
 8003d9a:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 8003d9c:	f002 fb1c 	bl	80063d8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	3324      	adds	r3, #36	@ 0x24
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	4611      	mov	r1, r2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 ff31 	bl	8004c10 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003dae:	69f8      	ldr	r0, [r7, #28]
 8003db0:	f000 f938 	bl	8004024 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003db4:	f000 fc72 	bl	800469c <xTaskResumeAll>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f47f af76 	bne.w	8003cac <xQueueSemaphoreTake+0x5c>
                {
                    taskYIELD_WITHIN_API();
 8003dc0:	4b19      	ldr	r3, [pc, #100]	@ (8003e28 <xQueueSemaphoreTake+0x1d8>)
 8003dc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	e76c      	b.n	8003cac <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003dd2:	69f8      	ldr	r0, [r7, #28]
 8003dd4:	f000 f926 	bl	8004024 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003dd8:	f000 fc60 	bl	800469c <xTaskResumeAll>
 8003ddc:	e766      	b.n	8003cac <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003dde:	69f8      	ldr	r0, [r7, #28]
 8003de0:	f000 f920 	bl	8004024 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003de4:	f000 fc5a 	bl	800469c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003de8:	69f8      	ldr	r0, [r7, #28]
 8003dea:	f000 f96d 	bl	80040c8 <prvIsQueueEmpty>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f43f af5b 	beq.w	8003cac <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00d      	beq.n	8003e18 <xQueueSemaphoreTake+0x1c8>
                    {
                        taskENTER_CRITICAL();
 8003dfc:	f002 fac0 	bl	8006380 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003e00:	69f8      	ldr	r0, [r7, #28]
 8003e02:	f000 f867 	bl	8003ed4 <prvGetDisinheritPriorityAfterTimeout>
 8003e06:	6178      	str	r0, [r7, #20]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	6979      	ldr	r1, [r7, #20]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f001 fbae 	bl	8005570 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8003e14:	f002 fae0 	bl	80063d8 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8003e18:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3728      	adds	r7, #40	@ 0x28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	0802439c 	.word	0x0802439c
 8003e28:	e000ed04 	.word	0xe000ed04

08003e2c <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d104      	bne.n	8003e44 <uxQueueMessagesWaiting+0x18>
 8003e3a:	f640 019b 	movw	r1, #2203	@ 0x89b
 8003e3e:	4807      	ldr	r0, [pc, #28]	@ (8003e5c <uxQueueMessagesWaiting+0x30>)
 8003e40:	f7fd fd8a 	bl	8001958 <vAssertCalled>

    taskENTER_CRITICAL();
 8003e44:	f002 fa9c 	bl	8006380 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4c:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8003e4e:	f002 fac3 	bl	80063d8 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 8003e52:	68fb      	ldr	r3, [r7, #12]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	0802439c 	.word	0x0802439c

08003e60 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	60fb      	str	r3, [r7, #12]

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d104      	bne.n	8003e7c <uxQueueSpacesAvailable+0x1c>
 8003e72:	f44f 610b 	mov.w	r1, #2224	@ 0x8b0
 8003e76:	4809      	ldr	r0, [pc, #36]	@ (8003e9c <uxQueueSpacesAvailable+0x3c>)
 8003e78:	f7fd fd6e 	bl	8001958 <vAssertCalled>

    taskENTER_CRITICAL();
 8003e7c:	f002 fa80 	bl	8006380 <vPortEnterCritical>
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	60bb      	str	r3, [r7, #8]
    }
    taskEXIT_CRITICAL();
 8003e8c:	f002 faa4 	bl	80063d8 <vPortExitCritical>

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
 8003e90:	68bb      	ldr	r3, [r7, #8]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	0802439c 	.word	0x0802439c

08003ea0 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d104      	bne.n	8003ebc <vQueueDelete+0x1c>
 8003eb2:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 8003eb6:	4806      	ldr	r0, [pc, #24]	@ (8003ed0 <vQueueDelete+0x30>)
 8003eb8:	f7fd fd4e 	bl	8001958 <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f979 	bl	80041b4 <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f002 fc32 	bl	800672c <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	0802439c 	.word	0x0802439c

08003ed4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d006      	beq.n	8003ef2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f1c3 0307 	rsb	r3, r3, #7
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	e001      	b.n	8003ef6 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
    }
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f18:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10d      	bne.n	8003f3e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d14d      	bne.n	8003fc6 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 fa82 	bl	8005438 <xTaskPriorityDisinherit>
 8003f34:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	e043      	b.n	8003fc6 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d119      	bne.n	8003f78 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6858      	ldr	r0, [r3, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	f01e fb16 	bl	8022580 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5c:	441a      	add	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d32b      	bcc.n	8003fc6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	e026      	b.n	8003fc6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	68d8      	ldr	r0, [r3, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	461a      	mov	r2, r3
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	f01e fafc 	bl	8022580 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	425b      	negs	r3, r3
 8003f92:	441a      	add	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d207      	bcs.n	8003fb4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	425b      	negs	r3, r3
 8003fae:	441a      	add	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d105      	bne.n	8003fc6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003fce:	697b      	ldr	r3, [r7, #20]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d018      	beq.n	800401c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	441a      	add	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	d303      	bcc.n	800400c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68d9      	ldr	r1, [r3, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004014:	461a      	mov	r2, r3
 8004016:	6838      	ldr	r0, [r7, #0]
 8004018:	f01e fab2 	bl	8022580 <memcpy>
    }
}
 800401c:	bf00      	nop
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800402c:	f002 f9a8 	bl	8006380 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004036:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004038:	e011      	b.n	800405e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403e:	2b00      	cmp	r3, #0
 8004040:	d012      	beq.n	8004068 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3324      	adds	r3, #36	@ 0x24
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fe4e 	bl	8004ce8 <xTaskRemoveFromEventList>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004052:	f001 f865 	bl	8005120 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	3b01      	subs	r3, #1
 800405a:	b2db      	uxtb	r3, r3
 800405c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800405e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004062:	2b00      	cmp	r3, #0
 8004064:	dce9      	bgt.n	800403a <prvUnlockQueue+0x16>
 8004066:	e000      	b.n	800406a <prvUnlockQueue+0x46>
                    break;
 8004068:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	22ff      	movs	r2, #255	@ 0xff
 800406e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004072:	f002 f9b1 	bl	80063d8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004076:	f002 f983 	bl	8006380 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004080:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004082:	e011      	b.n	80040a8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d012      	beq.n	80040b2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3310      	adds	r3, #16
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fe29 	bl	8004ce8 <xTaskRemoveFromEventList>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800409c:	f001 f840 	bl	8005120 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80040a0:	7bbb      	ldrb	r3, [r7, #14]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80040a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	dce9      	bgt.n	8004084 <prvUnlockQueue+0x60>
 80040b0:	e000      	b.n	80040b4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80040b2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	22ff      	movs	r2, #255	@ 0xff
 80040b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80040bc:	f002 f98c 	bl	80063d8 <vPortExitCritical>
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80040d0:	f002 f956 	bl	8006380 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d102      	bne.n	80040e2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80040dc:	2301      	movs	r3, #1
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	e001      	b.n	80040e6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80040e6:	f002 f977 	bl	80063d8 <vPortExitCritical>

    return xReturn;
 80040ea:	68fb      	ldr	r3, [r7, #12]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80040fc:	f002 f940 	bl	8006380 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004108:	429a      	cmp	r2, r3
 800410a:	d102      	bne.n	8004112 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800410c:	2301      	movs	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	e001      	b.n	8004116 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004116:	f002 f95f 	bl	80063d8 <vPortExitCritical>

    return xReturn;
 800411a:	68fb      	ldr	r3, [r7, #12]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800412e:	2300      	movs	r3, #0
 8004130:	60bb      	str	r3, [r7, #8]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <vQueueAddToRegistry+0x1e>
 8004138:	f640 31c9 	movw	r1, #3017	@ 0xbc9
 800413c:	481b      	ldr	r0, [pc, #108]	@ (80041ac <vQueueAddToRegistry+0x88>)
 800413e:	f7fd fc0b 	bl	8001958 <vAssertCalled>

        if( pcQueueName != NULL )
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d024      	beq.n	8004192 <vQueueAddToRegistry+0x6e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	e01e      	b.n	800418c <vQueueAddToRegistry+0x68>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800414e:	4a18      	ldr	r2, [pc, #96]	@ (80041b0 <vQueueAddToRegistry+0x8c>)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	429a      	cmp	r2, r3
 800415c:	d105      	bne.n	800416a <vQueueAddToRegistry+0x46>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4a13      	ldr	r2, [pc, #76]	@ (80041b0 <vQueueAddToRegistry+0x8c>)
 8004164:	4413      	add	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
                    break;
 8004168:	e013      	b.n	8004192 <vQueueAddToRegistry+0x6e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <vQueueAddToRegistry+0x62>
 8004170:	4a0f      	ldr	r2, [pc, #60]	@ (80041b0 <vQueueAddToRegistry+0x8c>)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d104      	bne.n	8004186 <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	4a0b      	ldr	r2, [pc, #44]	@ (80041b0 <vQueueAddToRegistry+0x8c>)
 8004182:	4413      	add	r3, r2
 8004184:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3301      	adds	r3, #1
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b07      	cmp	r3, #7
 8004190:	d9dd      	bls.n	800414e <vQueueAddToRegistry+0x2a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <vQueueAddToRegistry+0x80>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 80041a4:	bf00      	nop
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	0802439c 	.word	0x0802439c
 80041b0:	20000d48 	.word	0x20000d48

080041b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d104      	bne.n	80041cc <vQueueUnregisterQueue+0x18>
 80041c2:	f640 411d 	movw	r1, #3101	@ 0xc1d
 80041c6:	4812      	ldr	r0, [pc, #72]	@ (8004210 <vQueueUnregisterQueue+0x5c>)
 80041c8:	f7fd fbc6 	bl	8001958 <vAssertCalled>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	e016      	b.n	8004200 <vQueueUnregisterQueue+0x4c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 80041d2:	4a10      	ldr	r2, [pc, #64]	@ (8004214 <vQueueUnregisterQueue+0x60>)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d10b      	bne.n	80041fa <vQueueUnregisterQueue+0x46>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 80041e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004214 <vQueueUnregisterQueue+0x60>)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2100      	movs	r1, #0
 80041e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80041ec:	4a09      	ldr	r2, [pc, #36]	@ (8004214 <vQueueUnregisterQueue+0x60>)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	2200      	movs	r2, #0
 80041f6:	605a      	str	r2, [r3, #4]
                break;
 80041f8:	e006      	b.n	8004208 <vQueueUnregisterQueue+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3301      	adds	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b07      	cmp	r3, #7
 8004204:	d9e5      	bls.n	80041d2 <vQueueUnregisterQueue+0x1e>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	0802439c 	.word	0x0802439c
 8004214:	20000d48 	.word	0x20000d48

08004218 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	@ 0x28
 800421c:	af04      	add	r7, sp, #16
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4618      	mov	r0, r3
 800422c:	f002 f9aa 	bl	8006584 <pvPortMalloc>
 8004230:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d013      	beq.n	8004260 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8004238:	206c      	movs	r0, #108	@ 0x6c
 800423a:	f002 f9a3 	bl	8006584 <pvPortMalloc>
 800423e:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004246:	226c      	movs	r2, #108	@ 0x6c
 8004248:	2100      	movs	r1, #0
 800424a:	6978      	ldr	r0, [r7, #20]
 800424c:	f01e faa5 	bl	802279a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	631a      	str	r2, [r3, #48]	@ 0x30
 8004256:	e005      	b.n	8004264 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004258:	6938      	ldr	r0, [r7, #16]
 800425a:	f002 fa67 	bl	800672c <vPortFree>
 800425e:	e001      	b.n	8004264 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00d      	beq.n	8004286 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800426a:	2300      	movs	r3, #0
 800426c:	9303      	str	r3, [sp, #12]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	9302      	str	r3, [sp, #8]
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f829 	bl	80042d8 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8004286:	697b      	ldr	r3, [r7, #20]
    }
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7ff ffb3 	bl	8004218 <prvCreateTask>
 80042b2:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80042ba:	6938      	ldr	r0, [r7, #16]
 80042bc:	f000 f890 	bl	80043e0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80042c0:	2301      	movs	r3, #1
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	e002      	b.n	80042cc <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042c6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ca:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80042cc:	697b      	ldr	r3, [r7, #20]
    }
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80042e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	461a      	mov	r2, r3
 80042f0:	21a5      	movs	r1, #165	@ 0xa5
 80042f2:	f01e fa52 	bl	802279a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80042f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004300:	440b      	add	r3, r1
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f023 0307 	bic.w	r3, r3, #7
 800430e:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	2b00      	cmp	r3, #0
 8004318:	d004      	beq.n	8004324 <prvInitialiseNewTask+0x4c>
 800431a:	f240 712e 	movw	r1, #1838	@ 0x72e
 800431e:	482f      	ldr	r0, [pc, #188]	@ (80043dc <prvInitialiseNewTask+0x104>)
 8004320:	f7fd fb1a 	bl	8001958 <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01e      	beq.n	8004368 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	e012      	b.n	8004356 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	4413      	add	r3, r2
 8004336:	7819      	ldrb	r1, [r3, #0]
 8004338:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	4413      	add	r3, r2
 800433e:	3334      	adds	r3, #52	@ 0x34
 8004340:	460a      	mov	r2, r1
 8004342:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	4413      	add	r3, r2
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d006      	beq.n	800435e <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	3301      	adds	r3, #1
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b0f      	cmp	r3, #15
 800435a:	d9e9      	bls.n	8004330 <prvInitialiseNewTask+0x58>
 800435c:	e000      	b.n	8004360 <prvInitialiseNewTask+0x88>
            {
                break;
 800435e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8004360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	2b06      	cmp	r3, #6
 800436c:	d904      	bls.n	8004378 <prvInitialiseNewTask+0xa0>
 800436e:	f240 7164 	movw	r1, #1892	@ 0x764
 8004372:	481a      	ldr	r0, [pc, #104]	@ (80043dc <prvInitialiseNewTask+0x104>)
 8004374:	f7fd faf0 	bl	8001958 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	2b06      	cmp	r3, #6
 800437c:	d901      	bls.n	8004382 <prvInitialiseNewTask+0xaa>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800437e:	2306      	movs	r3, #6
 8004380:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004384:	6a3a      	ldr	r2, [r7, #32]
 8004386:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438a:	6a3a      	ldr	r2, [r7, #32]
 800438c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800438e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004390:	3304      	adds	r3, #4
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff f8c0 	bl	8003518 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439a:	3318      	adds	r3, #24
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff f8bb 	bl	8003518 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043a6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	f1c3 0207 	rsb	r2, r3, #7
 80043ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043b6:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	68f9      	ldr	r1, [r7, #12]
 80043bc:	6938      	ldr	r0, [r7, #16]
 80043be:	f001 fea5 	bl	800610c <pxPortInitialiseStack>
 80043c2:	4602      	mov	r2, r0
 80043c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c6:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043d2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80043d4:	bf00      	nop
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	080243c0 	.word	0x080243c0

080043e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80043e8:	f001 ffca 	bl	8006380 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80043ec:	4b41      	ldr	r3, [pc, #260]	@ (80044f4 <prvAddNewTaskToReadyList+0x114>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3301      	adds	r3, #1
 80043f2:	4a40      	ldr	r2, [pc, #256]	@ (80044f4 <prvAddNewTaskToReadyList+0x114>)
 80043f4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80043f6:	4b40      	ldr	r3, [pc, #256]	@ (80044f8 <prvAddNewTaskToReadyList+0x118>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d109      	bne.n	8004412 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80043fe:	4a3e      	ldr	r2, [pc, #248]	@ (80044f8 <prvAddNewTaskToReadyList+0x118>)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004404:	4b3b      	ldr	r3, [pc, #236]	@ (80044f4 <prvAddNewTaskToReadyList+0x114>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d110      	bne.n	800442e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800440c:	f000 feac 	bl	8005168 <prvInitialiseTaskLists>
 8004410:	e00d      	b.n	800442e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8004412:	4b3a      	ldr	r3, [pc, #232]	@ (80044fc <prvAddNewTaskToReadyList+0x11c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d109      	bne.n	800442e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800441a:	4b37      	ldr	r3, [pc, #220]	@ (80044f8 <prvAddNewTaskToReadyList+0x118>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004424:	429a      	cmp	r2, r3
 8004426:	d802      	bhi.n	800442e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8004428:	4a33      	ldr	r2, [pc, #204]	@ (80044f8 <prvAddNewTaskToReadyList+0x118>)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800442e:	4b34      	ldr	r3, [pc, #208]	@ (8004500 <prvAddNewTaskToReadyList+0x120>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3301      	adds	r3, #1
 8004434:	4a32      	ldr	r2, [pc, #200]	@ (8004500 <prvAddNewTaskToReadyList+0x120>)
 8004436:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004438:	4b31      	ldr	r3, [pc, #196]	@ (8004500 <prvAddNewTaskToReadyList+0x120>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004444:	2201      	movs	r2, #1
 8004446:	409a      	lsls	r2, r3
 8004448:	4b2e      	ldr	r3, [pc, #184]	@ (8004504 <prvAddNewTaskToReadyList+0x124>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4313      	orrs	r3, r2
 800444e:	4a2d      	ldr	r2, [pc, #180]	@ (8004504 <prvAddNewTaskToReadyList+0x124>)
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004456:	492c      	ldr	r1, [pc, #176]	@ (8004508 <prvAddNewTaskToReadyList+0x128>)
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	3304      	adds	r3, #4
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	609a      	str	r2, [r3, #8]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	60da      	str	r2, [r3, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	3204      	adds	r2, #4
 800447e:	605a      	str	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	1d1a      	adds	r2, r3, #4
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4a1c      	ldr	r2, [pc, #112]	@ (8004508 <prvAddNewTaskToReadyList+0x128>)
 8004496:	441a      	add	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	615a      	str	r2, [r3, #20]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a0:	4919      	ldr	r1, [pc, #100]	@ (8004508 <prvAddNewTaskToReadyList+0x128>)
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80044b2:	1c59      	adds	r1, r3, #1
 80044b4:	4814      	ldr	r0, [pc, #80]	@ (8004508 <prvAddNewTaskToReadyList+0x128>)
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4403      	add	r3, r0
 80044c0:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80044c2:	f001 ff89 	bl	80063d8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80044c6:	4b0d      	ldr	r3, [pc, #52]	@ (80044fc <prvAddNewTaskToReadyList+0x11c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00e      	beq.n	80044ec <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80044ce:	4b0a      	ldr	r3, [pc, #40]	@ (80044f8 <prvAddNewTaskToReadyList+0x118>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d8:	429a      	cmp	r2, r3
 80044da:	d207      	bcs.n	80044ec <prvAddNewTaskToReadyList+0x10c>
 80044dc:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <prvAddNewTaskToReadyList+0x12c>)
 80044de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20000e88 	.word	0x20000e88
 80044f8:	20000d88 	.word	0x20000d88
 80044fc:	20000e94 	.word	0x20000e94
 8004500:	20000ea4 	.word	0x20000ea4
 8004504:	20000e90 	.word	0x20000e90
 8004508:	20000d8c 	.word	0x20000d8c
 800450c:	e000ed04 	.word	0xe000ed04

08004510 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d011      	beq.n	8004546 <vTaskDelay+0x36>
        {
            vTaskSuspendAll();
 8004522:	f000 f8ad 	bl	8004680 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8004526:	4b0f      	ldr	r3, [pc, #60]	@ (8004564 <vTaskDelay+0x54>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d004      	beq.n	8004538 <vTaskDelay+0x28>
 800452e:	f640 118e 	movw	r1, #2446	@ 0x98e
 8004532:	480d      	ldr	r0, [pc, #52]	@ (8004568 <vTaskDelay+0x58>)
 8004534:	f7fd fa10 	bl	8001958 <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004538:	2100      	movs	r1, #0
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f001 fd64 	bl	8006008 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004540:	f000 f8ac 	bl	800469c <xTaskResumeAll>
 8004544:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d107      	bne.n	800455c <vTaskDelay+0x4c>
        {
            taskYIELD_WITHIN_API();
 800454c:	4b07      	ldr	r3, [pc, #28]	@ (800456c <vTaskDelay+0x5c>)
 800454e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20000eb0 	.word	0x20000eb0
 8004568:	080243c0 	.word	0x080243c0
 800456c:	e000ed04 	.word	0xe000ed04

08004570 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	@ 0x28
 8004574:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8004576:	2301      	movs	r3, #1
 8004578:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800457a:	2300      	movs	r3, #0
 800457c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	e011      	b.n	80045a8 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8004584:	4a1d      	ldr	r2, [pc, #116]	@ (80045fc <prvCreateIdleTasks+0x8c>)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	4413      	add	r3, r2
 800458a:	7819      	ldrb	r1, [r3, #0]
 800458c:	463a      	mov	r2, r7
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	4413      	add	r3, r2
 8004592:	460a      	mov	r2, r1
 8004594:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8004596:	463a      	mov	r2, r7
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	4413      	add	r3, r2
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d006      	beq.n	80045b0 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	3301      	adds	r3, #1
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2b0f      	cmp	r3, #15
 80045ac:	ddea      	ble.n	8004584 <prvCreateIdleTasks+0x14>
 80045ae:	e000      	b.n	80045b2 <prvCreateIdleTasks+0x42>
        {
            break;
 80045b0:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	e016      	b.n	80045e6 <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80045b8:	4b11      	ldr	r3, [pc, #68]	@ (8004600 <prvCreateIdleTasks+0x90>)
 80045ba:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4a10      	ldr	r2, [pc, #64]	@ (8004604 <prvCreateIdleTasks+0x94>)
 80045c2:	4413      	add	r3, r2
 80045c4:	4639      	mov	r1, r7
 80045c6:	9301      	str	r3, [sp, #4]
 80045c8:	2300      	movs	r3, #0
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	2300      	movs	r3, #0
 80045ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045d2:	6938      	ldr	r0, [r7, #16]
 80045d4:	f7ff fe5c 	bl	8004290 <xTaskCreate>
 80045d8:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d006      	beq.n	80045ee <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	3301      	adds	r3, #1
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	dde5      	ble.n	80045b8 <prvCreateIdleTasks+0x48>
 80045ec:	e000      	b.n	80045f0 <prvCreateIdleTasks+0x80>
        {
            break;
 80045ee:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80045f0:	69fb      	ldr	r3, [r7, #28]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	080243e4 	.word	0x080243e4
 8004600:	08005139 	.word	0x08005139
 8004604:	20000eac 	.word	0x20000eac

08004608 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800460e:	f7ff ffaf 	bl	8004570 <prvCreateIdleTasks>
 8004612:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d118      	bne.n	800464c <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800461a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800461e:	b672      	cpsid	i
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	b662      	cpsie	i
 800462e:	603b      	str	r3, [r7, #0]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8004630:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004632:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <vTaskStartScheduler+0x64>)
 8004634:	f04f 32ff 	mov.w	r2, #4294967295
 8004638:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800463a:	4b0d      	ldr	r3, [pc, #52]	@ (8004670 <vTaskStartScheduler+0x68>)
 800463c:	2201      	movs	r2, #1
 800463e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004640:	4b0c      	ldr	r3, [pc, #48]	@ (8004674 <vTaskStartScheduler+0x6c>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8004646:	f001 fded 	bl	8006224 <xPortStartScheduler>
 800464a:	e008      	b.n	800465e <vTaskStartScheduler+0x56>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004652:	d104      	bne.n	800465e <vTaskStartScheduler+0x56>
 8004654:	f640 61a9 	movw	r1, #3753	@ 0xea9
 8004658:	4807      	ldr	r0, [pc, #28]	@ (8004678 <vTaskStartScheduler+0x70>)
 800465a:	f7fd f97d 	bl	8001958 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800465e:	4b07      	ldr	r3, [pc, #28]	@ (800467c <vTaskStartScheduler+0x74>)
 8004660:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000ea8 	.word	0x20000ea8
 8004670:	20000e94 	.word	0x20000e94
 8004674:	20000e8c 	.word	0x20000e8c
 8004678:	080243c0 	.word	0x080243c0
 800467c:	20000008 	.word	0x20000008

08004680 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8004684:	4b04      	ldr	r3, [pc, #16]	@ (8004698 <vTaskSuspendAll+0x18>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3301      	adds	r3, #1
 800468a:	4a03      	ldr	r2, [pc, #12]	@ (8004698 <vTaskSuspendAll+0x18>)
 800468c:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800468e:	bf00      	nop
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	20000eb0 	.word	0x20000eb0

0800469c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80046aa:	f001 fe69 	bl	8006380 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80046b2:	4b72      	ldr	r3, [pc, #456]	@ (800487c <xTaskResumeAll+0x1e0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d104      	bne.n	80046c4 <xTaskResumeAll+0x28>
 80046ba:	f640 718b 	movw	r1, #3979	@ 0xf8b
 80046be:	4870      	ldr	r0, [pc, #448]	@ (8004880 <xTaskResumeAll+0x1e4>)
 80046c0:	f7fd f94a 	bl	8001958 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80046c4:	4b6d      	ldr	r3, [pc, #436]	@ (800487c <xTaskResumeAll+0x1e0>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	4a6c      	ldr	r2, [pc, #432]	@ (800487c <xTaskResumeAll+0x1e0>)
 80046cc:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80046ce:	4b6b      	ldr	r3, [pc, #428]	@ (800487c <xTaskResumeAll+0x1e0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f040 80ca 	bne.w	800486c <xTaskResumeAll+0x1d0>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004884 <xTaskResumeAll+0x1e8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80c5 	beq.w	800486c <xTaskResumeAll+0x1d0>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046e2:	e08e      	b.n	8004802 <xTaskResumeAll+0x166>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80046e4:	4b68      	ldr	r3, [pc, #416]	@ (8004888 <xTaskResumeAll+0x1ec>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	6a12      	ldr	r2, [r2, #32]
 80046fa:	609a      	str	r2, [r3, #8]
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	69fa      	ldr	r2, [r7, #28]
 8004702:	69d2      	ldr	r2, [r2, #28]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3318      	adds	r3, #24
 800470e:	429a      	cmp	r2, r3
 8004710:	d103      	bne.n	800471a <xTaskResumeAll+0x7e>
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	6a1a      	ldr	r2, [r3, #32]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	605a      	str	r2, [r3, #4]
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	2200      	movs	r2, #0
 800471e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	1e5a      	subs	r2, r3, #1
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	69fa      	ldr	r2, [r7, #28]
 8004736:	68d2      	ldr	r2, [r2, #12]
 8004738:	609a      	str	r2, [r3, #8]
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	6892      	ldr	r2, [r2, #8]
 8004742:	605a      	str	r2, [r3, #4]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	3304      	adds	r3, #4
 800474c:	429a      	cmp	r2, r3
 800474e:	d103      	bne.n	8004758 <xTaskResumeAll+0xbc>
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	605a      	str	r2, [r3, #4]
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2200      	movs	r2, #0
 800475c:	615a      	str	r2, [r3, #20]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	1e5a      	subs	r2, r3, #1
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476c:	2201      	movs	r2, #1
 800476e:	409a      	lsls	r2, r3
 8004770:	4b46      	ldr	r3, [pc, #280]	@ (800488c <xTaskResumeAll+0x1f0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4313      	orrs	r3, r2
 8004776:	4a45      	ldr	r2, [pc, #276]	@ (800488c <xTaskResumeAll+0x1f0>)
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800477e:	4944      	ldr	r1, [pc, #272]	@ (8004890 <xTaskResumeAll+0x1f4>)
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	3304      	adds	r3, #4
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	607b      	str	r3, [r7, #4]
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	609a      	str	r2, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	60da      	str	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	3204      	adds	r2, #4
 80047a6:	605a      	str	r2, [r3, #4]
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	1d1a      	adds	r2, r3, #4
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	609a      	str	r2, [r3, #8]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4a34      	ldr	r2, [pc, #208]	@ (8004890 <xTaskResumeAll+0x1f4>)
 80047be:	441a      	add	r2, r3
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	615a      	str	r2, [r3, #20]
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047c8:	4931      	ldr	r1, [pc, #196]	@ (8004890 <xTaskResumeAll+0x1f4>)
 80047ca:	4613      	mov	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80047da:	1c59      	adds	r1, r3, #1
 80047dc:	482c      	ldr	r0, [pc, #176]	@ (8004890 <xTaskResumeAll+0x1f4>)
 80047de:	4613      	mov	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4403      	add	r3, r0
 80047e8:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ee:	4b29      	ldr	r3, [pc, #164]	@ (8004894 <xTaskResumeAll+0x1f8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d904      	bls.n	8004802 <xTaskResumeAll+0x166>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80047f8:	4a27      	ldr	r2, [pc, #156]	@ (8004898 <xTaskResumeAll+0x1fc>)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2101      	movs	r1, #1
 80047fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004802:	4b21      	ldr	r3, [pc, #132]	@ (8004888 <xTaskResumeAll+0x1ec>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f47f af6c 	bne.w	80046e4 <xTaskResumeAll+0x48>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <xTaskResumeAll+0x17a>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8004812:	f000 fd27 	bl	8005264 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004816:	4b21      	ldr	r3, [pc, #132]	@ (800489c <xTaskResumeAll+0x200>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d012      	beq.n	8004848 <xTaskResumeAll+0x1ac>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8004822:	f000 f86d 	bl	8004900 <xTaskIncrementTick>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d004      	beq.n	8004836 <xTaskResumeAll+0x19a>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800482c:	4a1a      	ldr	r2, [pc, #104]	@ (8004898 <xTaskResumeAll+0x1fc>)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2101      	movs	r1, #1
 8004832:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	3b01      	subs	r3, #1
 800483a:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1ef      	bne.n	8004822 <xTaskResumeAll+0x186>

                            xPendedTicks = 0;
 8004842:	4b16      	ldr	r3, [pc, #88]	@ (800489c <xTaskResumeAll+0x200>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8004848:	4a13      	ldr	r2, [pc, #76]	@ (8004898 <xTaskResumeAll+0x1fc>)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <xTaskResumeAll+0x1d0>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004854:	2301      	movs	r3, #1
 8004856:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8004858:	4b0e      	ldr	r3, [pc, #56]	@ (8004894 <xTaskResumeAll+0x1f8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4b10      	ldr	r3, [pc, #64]	@ (80048a0 <xTaskResumeAll+0x204>)
 800485e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800486c:	f001 fdb4 	bl	80063d8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8004870:	69bb      	ldr	r3, [r7, #24]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3720      	adds	r7, #32
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000eb0 	.word	0x20000eb0
 8004880:	080243c0 	.word	0x080243c0
 8004884:	20000e88 	.word	0x20000e88
 8004888:	20000e48 	.word	0x20000e48
 800488c:	20000e90 	.word	0x20000e90
 8004890:	20000d8c 	.word	0x20000d8c
 8004894:	20000d88 	.word	0x20000d88
 8004898:	20000e9c 	.word	0x20000e9c
 800489c:	20000e98 	.word	0x20000e98
 80048a0:	e000ed04 	.word	0xe000ed04

080048a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80048aa:	4b05      	ldr	r3, [pc, #20]	@ (80048c0 <xTaskGetTickCount+0x1c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 80048b0:	687b      	ldr	r3, [r7, #4]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	20000e8c 	.word	0x20000e8c

080048c4 <pcTaskGetName>:
    return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d102      	bne.n	80048d8 <pcTaskGetName+0x14>
 80048d2:	4b09      	ldr	r3, [pc, #36]	@ (80048f8 <pcTaskGetName+0x34>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	e000      	b.n	80048da <pcTaskGetName+0x16>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d104      	bne.n	80048ec <pcTaskGetName+0x28>
 80048e2:	f241 0155 	movw	r1, #4181	@ 0x1055
 80048e6:	4805      	ldr	r0, [pc, #20]	@ (80048fc <pcTaskGetName+0x38>)
 80048e8:	f7fd f836 	bl	8001958 <vAssertCalled>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3334      	adds	r3, #52	@ 0x34
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20000d88 	.word	0x20000d88
 80048fc:	080243c0 	.word	0x080243c0

08004900 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800490a:	4b7b      	ldr	r3, [pc, #492]	@ (8004af8 <xTaskIncrementTick+0x1f8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f040 80e8 	bne.w	8004ae4 <xTaskIncrementTick+0x1e4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004914:	4b79      	ldr	r3, [pc, #484]	@ (8004afc <xTaskIncrementTick+0x1fc>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3301      	adds	r3, #1
 800491a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800491c:	4a77      	ldr	r2, [pc, #476]	@ (8004afc <xTaskIncrementTick+0x1fc>)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d11a      	bne.n	800495e <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8004928:	4b75      	ldr	r3, [pc, #468]	@ (8004b00 <xTaskIncrementTick+0x200>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d004      	beq.n	800493c <xTaskIncrementTick+0x3c>
 8004932:	f241 215f 	movw	r1, #4703	@ 0x125f
 8004936:	4873      	ldr	r0, [pc, #460]	@ (8004b04 <xTaskIncrementTick+0x204>)
 8004938:	f7fd f80e 	bl	8001958 <vAssertCalled>
 800493c:	4b70      	ldr	r3, [pc, #448]	@ (8004b00 <xTaskIncrementTick+0x200>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	4b71      	ldr	r3, [pc, #452]	@ (8004b08 <xTaskIncrementTick+0x208>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a6e      	ldr	r2, [pc, #440]	@ (8004b00 <xTaskIncrementTick+0x200>)
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	4a6f      	ldr	r2, [pc, #444]	@ (8004b08 <xTaskIncrementTick+0x208>)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	4b6e      	ldr	r3, [pc, #440]	@ (8004b0c <xTaskIncrementTick+0x20c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3301      	adds	r3, #1
 8004956:	4a6d      	ldr	r2, [pc, #436]	@ (8004b0c <xTaskIncrementTick+0x20c>)
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	f000 fc83 	bl	8005264 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800495e:	4b6c      	ldr	r3, [pc, #432]	@ (8004b10 <xTaskIncrementTick+0x210>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	429a      	cmp	r2, r3
 8004966:	f0c0 80a8 	bcc.w	8004aba <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800496a:	4b65      	ldr	r3, [pc, #404]	@ (8004b00 <xTaskIncrementTick+0x200>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d104      	bne.n	800497e <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8004974:	4b66      	ldr	r3, [pc, #408]	@ (8004b10 <xTaskIncrementTick+0x210>)
 8004976:	f04f 32ff 	mov.w	r2, #4294967295
 800497a:	601a      	str	r2, [r3, #0]
                    break;
 800497c:	e09d      	b.n	8004aba <xTaskIncrementTick+0x1ba>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800497e:	4b60      	ldr	r3, [pc, #384]	@ (8004b00 <xTaskIncrementTick+0x200>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	429a      	cmp	r2, r3
 8004994:	d203      	bcs.n	800499e <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004996:	4a5e      	ldr	r2, [pc, #376]	@ (8004b10 <xTaskIncrementTick+0x210>)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6013      	str	r3, [r2, #0]
                        break;
 800499c:	e08d      	b.n	8004aba <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	68d2      	ldr	r2, [r2, #12]
 80049ac:	609a      	str	r2, [r3, #8]
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	6892      	ldr	r2, [r2, #8]
 80049b6:	605a      	str	r2, [r3, #4]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	3304      	adds	r3, #4
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d103      	bne.n	80049cc <xTaskIncrementTick+0xcc>
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	605a      	str	r2, [r3, #4]
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2200      	movs	r2, #0
 80049d0:	615a      	str	r2, [r3, #20]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	1e5a      	subs	r2, r3, #1
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01e      	beq.n	8004a22 <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	6a12      	ldr	r2, [r2, #32]
 80049f2:	609a      	str	r2, [r3, #8]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	69d2      	ldr	r2, [r2, #28]
 80049fc:	605a      	str	r2, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	3318      	adds	r3, #24
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d103      	bne.n	8004a12 <xTaskIncrementTick+0x112>
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	6a1a      	ldr	r2, [r3, #32]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	605a      	str	r2, [r3, #4]
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	2200      	movs	r2, #0
 8004a16:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	1e5a      	subs	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a26:	2201      	movs	r2, #1
 8004a28:	409a      	lsls	r2, r3
 8004a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b14 <xTaskIncrementTick+0x214>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	4a38      	ldr	r2, [pc, #224]	@ (8004b14 <xTaskIncrementTick+0x214>)
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a38:	4937      	ldr	r1, [pc, #220]	@ (8004b18 <xTaskIncrementTick+0x218>)
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	3304      	adds	r3, #4
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	603b      	str	r3, [r7, #0]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	60da      	str	r2, [r3, #12]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	3204      	adds	r2, #4
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1d1a      	adds	r2, r3, #4
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	609a      	str	r2, [r3, #8]
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4a28      	ldr	r2, [pc, #160]	@ (8004b18 <xTaskIncrementTick+0x218>)
 8004a78:	441a      	add	r2, r3
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	615a      	str	r2, [r3, #20]
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a82:	4925      	ldr	r1, [pc, #148]	@ (8004b18 <xTaskIncrementTick+0x218>)
 8004a84:	4613      	mov	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a94:	1c59      	adds	r1, r3, #1
 8004a96:	4820      	ldr	r0, [pc, #128]	@ (8004b18 <xTaskIncrementTick+0x218>)
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4403      	add	r3, r0
 8004aa2:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8004b1c <xTaskIncrementTick+0x21c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	f67f af5b 	bls.w	800496a <xTaskIncrementTick+0x6a>
                            {
                                xSwitchRequired = pdTRUE;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ab8:	e757      	b.n	800496a <xTaskIncrementTick+0x6a>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8004aba:	4b18      	ldr	r3, [pc, #96]	@ (8004b1c <xTaskIncrementTick+0x21c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac0:	4915      	ldr	r1, [pc, #84]	@ (8004b18 <xTaskIncrementTick+0x218>)
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d901      	bls.n	8004ad6 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004ad6:	4b12      	ldr	r3, [pc, #72]	@ (8004b20 <xTaskIncrementTick+0x220>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	e004      	b.n	8004aee <xTaskIncrementTick+0x1ee>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8004b24 <xTaskIncrementTick+0x224>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	4a0e      	ldr	r2, [pc, #56]	@ (8004b24 <xTaskIncrementTick+0x224>)
 8004aec:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8004aee:	69fb      	ldr	r3, [r7, #28]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	20000eb0 	.word	0x20000eb0
 8004afc:	20000e8c 	.word	0x20000e8c
 8004b00:	20000e40 	.word	0x20000e40
 8004b04:	080243c0 	.word	0x080243c0
 8004b08:	20000e44 	.word	0x20000e44
 8004b0c:	20000ea0 	.word	0x20000ea0
 8004b10:	20000ea8 	.word	0x20000ea8
 8004b14:	20000e90 	.word	0x20000e90
 8004b18:	20000d8c 	.word	0x20000d8c
 8004b1c:	20000d88 	.word	0x20000d88
 8004b20:	20000e9c 	.word	0x20000e9c
 8004b24:	20000e98 	.word	0x20000e98

08004b28 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004b2e:	4b30      	ldr	r3, [pc, #192]	@ (8004bf0 <vTaskSwitchContext+0xc8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004b36:	4b2f      	ldr	r3, [pc, #188]	@ (8004bf4 <vTaskSwitchContext+0xcc>)
 8004b38:	2201      	movs	r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8004b3c:	e053      	b.n	8004be6 <vTaskSwitchContext+0xbe>
            xYieldPendings[ 0 ] = pdFALSE;
 8004b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8004bf4 <vTaskSwitchContext+0xcc>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 8004b44:	f7fc ff00 	bl	8001948 <ulGetRunTimeCounterValue>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf8 <vTaskSwitchContext+0xd0>)
 8004b4c:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 8004b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8004bf8 <vTaskSwitchContext+0xd0>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	4b2a      	ldr	r3, [pc, #168]	@ (8004bfc <vTaskSwitchContext+0xd4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d909      	bls.n	8004b6e <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 8004b5a:	4b27      	ldr	r3, [pc, #156]	@ (8004bf8 <vTaskSwitchContext+0xd0>)
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	4b27      	ldr	r3, [pc, #156]	@ (8004bfc <vTaskSwitchContext+0xd4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	1ad1      	subs	r1, r2, r3
 8004b64:	4b26      	ldr	r3, [pc, #152]	@ (8004c00 <vTaskSwitchContext+0xd8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004b6a:	440a      	add	r2, r1
 8004b6c:	661a      	str	r2, [r3, #96]	@ 0x60
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 8004b6e:	4b22      	ldr	r3, [pc, #136]	@ (8004bf8 <vTaskSwitchContext+0xd0>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a22      	ldr	r2, [pc, #136]	@ (8004bfc <vTaskSwitchContext+0xd4>)
 8004b74:	6013      	str	r3, [r2, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b76:	4b23      	ldr	r3, [pc, #140]	@ (8004c04 <vTaskSwitchContext+0xdc>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	fab3 f383 	clz	r3, r3
 8004b82:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	f1c3 031f 	rsb	r3, r3, #31
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	491e      	ldr	r1, [pc, #120]	@ (8004c08 <vTaskSwitchContext+0xe0>)
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d104      	bne.n	8004baa <vTaskSwitchContext+0x82>
 8004ba0:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 8004ba4:	4819      	ldr	r0, [pc, #100]	@ (8004c0c <vTaskSwitchContext+0xe4>)
 8004ba6:	f7fc fed7 	bl	8001958 <vAssertCalled>
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4a14      	ldr	r2, [pc, #80]	@ (8004c08 <vTaskSwitchContext+0xe0>)
 8004bb6:	4413      	add	r3, r2
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	605a      	str	r2, [r3, #4]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	3308      	adds	r3, #8
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d103      	bne.n	8004bd8 <vTaskSwitchContext+0xb0>
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	605a      	str	r2, [r3, #4]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	4a08      	ldr	r2, [pc, #32]	@ (8004c00 <vTaskSwitchContext+0xd8>)
 8004be0:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8004be2:	4b07      	ldr	r3, [pc, #28]	@ (8004c00 <vTaskSwitchContext+0xd8>)
 8004be4:	681b      	ldr	r3, [r3, #0]
    }
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20000eb0 	.word	0x20000eb0
 8004bf4:	20000e9c 	.word	0x20000e9c
 8004bf8:	20000eb8 	.word	0x20000eb8
 8004bfc:	20000eb4 	.word	0x20000eb4
 8004c00:	20000d88 	.word	0x20000d88
 8004c04:	20000e90 	.word	0x20000e90
 8004c08:	20000d8c 	.word	0x20000d8c
 8004c0c:	080243c0 	.word	0x080243c0

08004c10 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d104      	bne.n	8004c2a <vTaskPlaceOnEventList+0x1a>
 8004c20:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 8004c24:	4808      	ldr	r0, [pc, #32]	@ (8004c48 <vTaskPlaceOnEventList+0x38>)
 8004c26:	f7fc fe97 	bl	8001958 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c2a:	4b08      	ldr	r3, [pc, #32]	@ (8004c4c <vTaskPlaceOnEventList+0x3c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3318      	adds	r3, #24
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fe fca1 	bl	800357a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c38:	2101      	movs	r1, #1
 8004c3a:	6838      	ldr	r0, [r7, #0]
 8004c3c:	f001 f9e4 	bl	8006008 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	080243c0 	.word	0x080243c0
 8004c4c:	20000d88 	.word	0x20000d88

08004c50 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d104      	bne.n	8004c6c <vTaskPlaceOnUnorderedEventList+0x1c>
 8004c62:	f241 419e 	movw	r1, #5278	@ 0x149e
 8004c66:	481d      	ldr	r0, [pc, #116]	@ (8004cdc <vTaskPlaceOnUnorderedEventList+0x8c>)
 8004c68:	f7fc fe76 	bl	8001958 <vAssertCalled>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8004c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce0 <vTaskPlaceOnUnorderedEventList+0x90>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d104      	bne.n	8004c7e <vTaskPlaceOnUnorderedEventList+0x2e>
 8004c74:	f241 41a2 	movw	r1, #5282	@ 0x14a2
 8004c78:	4818      	ldr	r0, [pc, #96]	@ (8004cdc <vTaskPlaceOnUnorderedEventList+0x8c>)
 8004c7a:	f7fc fe6d 	bl	8001958 <vAssertCalled>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004c7e:	4b19      	ldr	r3, [pc, #100]	@ (8004ce4 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004c88:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	4b14      	ldr	r3, [pc, #80]	@ (8004ce4 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	61da      	str	r2, [r3, #28]
 8004c98:	4b12      	ldr	r3, [pc, #72]	@ (8004ce4 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	6892      	ldr	r2, [r2, #8]
 8004ca0:	621a      	str	r2, [r3, #32]
 8004ca2:	4b10      	ldr	r3, [pc, #64]	@ (8004ce4 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	3218      	adds	r2, #24
 8004cac:	605a      	str	r2, [r3, #4]
 8004cae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce4 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f103 0218 	add.w	r2, r3, #24
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	609a      	str	r2, [r3, #8]
 8004cba:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce4 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ccc:	2101      	movs	r1, #1
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f001 f99a 	bl	8006008 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 8004cd4:	bf00      	nop
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	080243c0 	.word	0x080243c0
 8004ce0:	20000eb0 	.word	0x20000eb0
 8004ce4:	20000d88 	.word	0x20000d88

08004ce8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d104      	bne.n	8004d08 <xTaskRemoveFromEventList+0x20>
 8004cfe:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 8004d02:	485b      	ldr	r0, [pc, #364]	@ (8004e70 <xTaskRemoveFromEventList+0x188>)
 8004d04:	f7fc fe28 	bl	8001958 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	6a12      	ldr	r2, [r2, #32]
 8004d16:	609a      	str	r2, [r3, #8]
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	69d2      	ldr	r2, [r2, #28]
 8004d20:	605a      	str	r2, [r3, #4]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	3318      	adds	r3, #24
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d103      	bne.n	8004d36 <xTaskRemoveFromEventList+0x4e>
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	6a1a      	ldr	r2, [r3, #32]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	605a      	str	r2, [r3, #4]
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	1e5a      	subs	r2, r3, #1
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004d46:	4b4b      	ldr	r3, [pc, #300]	@ (8004e74 <xTaskRemoveFromEventList+0x18c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d160      	bne.n	8004e10 <xTaskRemoveFromEventList+0x128>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	68d2      	ldr	r2, [r2, #12]
 8004d5c:	609a      	str	r2, [r3, #8]
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	6892      	ldr	r2, [r2, #8]
 8004d66:	605a      	str	r2, [r3, #4]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d103      	bne.n	8004d7c <xTaskRemoveFromEventList+0x94>
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	605a      	str	r2, [r3, #4]
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	615a      	str	r2, [r3, #20]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	1e5a      	subs	r2, r3, #1
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d90:	2201      	movs	r2, #1
 8004d92:	409a      	lsls	r2, r3
 8004d94:	4b38      	ldr	r3, [pc, #224]	@ (8004e78 <xTaskRemoveFromEventList+0x190>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	4a37      	ldr	r2, [pc, #220]	@ (8004e78 <xTaskRemoveFromEventList+0x190>)
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da2:	4936      	ldr	r1, [pc, #216]	@ (8004e7c <xTaskRemoveFromEventList+0x194>)
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	3304      	adds	r3, #4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60bb      	str	r3, [r7, #8]
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	609a      	str	r2, [r3, #8]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	60da      	str	r2, [r3, #12]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	3204      	adds	r2, #4
 8004dca:	605a      	str	r2, [r3, #4]
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	1d1a      	adds	r2, r3, #4
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	609a      	str	r2, [r3, #8]
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4a26      	ldr	r2, [pc, #152]	@ (8004e7c <xTaskRemoveFromEventList+0x194>)
 8004de2:	441a      	add	r2, r3
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	615a      	str	r2, [r3, #20]
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dec:	4923      	ldr	r1, [pc, #140]	@ (8004e7c <xTaskRemoveFromEventList+0x194>)
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004dfe:	1c59      	adds	r1, r3, #1
 8004e00:	481e      	ldr	r0, [pc, #120]	@ (8004e7c <xTaskRemoveFromEventList+0x194>)
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4403      	add	r3, r0
 8004e0c:	6019      	str	r1, [r3, #0]
 8004e0e:	e01b      	b.n	8004e48 <xTaskRemoveFromEventList+0x160>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e10:	4b1b      	ldr	r3, [pc, #108]	@ (8004e80 <xTaskRemoveFromEventList+0x198>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	61da      	str	r2, [r3, #28]
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	621a      	str	r2, [r3, #32]
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	3218      	adds	r2, #24
 8004e2c:	605a      	str	r2, [r3, #4]
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	f103 0218 	add.w	r2, r3, #24
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	609a      	str	r2, [r3, #8]
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	4a11      	ldr	r2, [pc, #68]	@ (8004e80 <xTaskRemoveFromEventList+0x198>)
 8004e3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e3e:	4b10      	ldr	r3, [pc, #64]	@ (8004e80 <xTaskRemoveFromEventList+0x198>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3301      	adds	r3, #1
 8004e44:	4a0e      	ldr	r2, [pc, #56]	@ (8004e80 <xTaskRemoveFromEventList+0x198>)
 8004e46:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e84 <xTaskRemoveFromEventList+0x19c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d905      	bls.n	8004e62 <xTaskRemoveFromEventList+0x17a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8004e56:	2301      	movs	r3, #1
 8004e58:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e88 <xTaskRemoveFromEventList+0x1a0>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	e001      	b.n	8004e66 <xTaskRemoveFromEventList+0x17e>
        }
        else
        {
            xReturn = pdFALSE;
 8004e62:	2300      	movs	r3, #0
 8004e64:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8004e66:	69fb      	ldr	r3, [r7, #28]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3720      	adds	r7, #32
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	080243c0 	.word	0x080243c0
 8004e74:	20000eb0 	.word	0x20000eb0
 8004e78:	20000e90 	.word	0x20000e90
 8004e7c:	20000d8c 	.word	0x20000d8c
 8004e80:	20000e48 	.word	0x20000e48
 8004e84:	20000d88 	.word	0x20000d88
 8004e88:	20000e9c 	.word	0x20000e9c

08004e8c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8004e96:	4b52      	ldr	r3, [pc, #328]	@ (8004fe0 <vTaskRemoveFromUnorderedEventList+0x154>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d104      	bne.n	8004ea8 <vTaskRemoveFromUnorderedEventList+0x1c>
 8004e9e:	f241 5143 	movw	r1, #5443	@ 0x1543
 8004ea2:	4850      	ldr	r0, [pc, #320]	@ (8004fe4 <vTaskRemoveFromUnorderedEventList+0x158>)
 8004ea4:	f7fc fd58 	bl	8001958 <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d104      	bne.n	8004ec8 <vTaskRemoveFromUnorderedEventList+0x3c>
 8004ebe:	f241 514e 	movw	r1, #5454	@ 0x154e
 8004ec2:	4848      	ldr	r0, [pc, #288]	@ (8004fe4 <vTaskRemoveFromUnorderedEventList+0x158>)
 8004ec4:	f7fc fd48 	bl	8001958 <vAssertCalled>
    listREMOVE_ITEM( pxEventListItem );
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6892      	ldr	r2, [r2, #8]
 8004ed6:	609a      	str	r2, [r3, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6852      	ldr	r2, [r2, #4]
 8004ee0:	605a      	str	r2, [r3, #4]
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d103      	bne.n	8004ef4 <vTaskRemoveFromUnorderedEventList+0x68>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	605a      	str	r2, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	611a      	str	r2, [r3, #16]
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	1e5a      	subs	r2, r3, #1
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	68d2      	ldr	r2, [r2, #12]
 8004f12:	609a      	str	r2, [r3, #8]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	6892      	ldr	r2, [r2, #8]
 8004f1c:	605a      	str	r2, [r3, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	3304      	adds	r3, #4
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d103      	bne.n	8004f32 <vTaskRemoveFromUnorderedEventList+0xa6>
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2200      	movs	r2, #0
 8004f36:	615a      	str	r2, [r3, #20]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	1e5a      	subs	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f46:	2201      	movs	r2, #1
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	4b27      	ldr	r3, [pc, #156]	@ (8004fe8 <vTaskRemoveFromUnorderedEventList+0x15c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	4a25      	ldr	r2, [pc, #148]	@ (8004fe8 <vTaskRemoveFromUnorderedEventList+0x15c>)
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f58:	4924      	ldr	r1, [pc, #144]	@ (8004fec <vTaskRemoveFromUnorderedEventList+0x160>)
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	3304      	adds	r3, #4
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	609a      	str	r2, [r3, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	60da      	str	r2, [r3, #12]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	3204      	adds	r2, #4
 8004f80:	605a      	str	r2, [r3, #4]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	1d1a      	adds	r2, r3, #4
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	609a      	str	r2, [r3, #8]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f8e:	4613      	mov	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4a15      	ldr	r2, [pc, #84]	@ (8004fec <vTaskRemoveFromUnorderedEventList+0x160>)
 8004f98:	441a      	add	r2, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	615a      	str	r2, [r3, #20]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa2:	4912      	ldr	r1, [pc, #72]	@ (8004fec <vTaskRemoveFromUnorderedEventList+0x160>)
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004fb4:	1c59      	adds	r1, r3, #1
 8004fb6:	480d      	ldr	r0, [pc, #52]	@ (8004fec <vTaskRemoveFromUnorderedEventList+0x160>)
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4403      	add	r3, r0
 8004fc2:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc8:	4b09      	ldr	r3, [pc, #36]	@ (8004ff0 <vTaskRemoveFromUnorderedEventList+0x164>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d902      	bls.n	8004fd8 <vTaskRemoveFromUnorderedEventList+0x14c>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 8004fd2:	4b08      	ldr	r3, [pc, #32]	@ (8004ff4 <vTaskRemoveFromUnorderedEventList+0x168>)
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 8004fd8:	bf00      	nop
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	20000eb0 	.word	0x20000eb0
 8004fe4:	080243c0 	.word	0x080243c0
 8004fe8:	20000e90 	.word	0x20000e90
 8004fec:	20000d8c 	.word	0x20000d8c
 8004ff0:	20000d88 	.word	0x20000d88
 8004ff4:	20000e9c 	.word	0x20000e9c

08004ff8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d104      	bne.n	8005010 <vTaskSetTimeOutState+0x18>
 8005006:	f241 5186 	movw	r1, #5510	@ 0x1586
 800500a:	4809      	ldr	r0, [pc, #36]	@ (8005030 <vTaskSetTimeOutState+0x38>)
 800500c:	f7fc fca4 	bl	8001958 <vAssertCalled>
    taskENTER_CRITICAL();
 8005010:	f001 f9b6 	bl	8006380 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005014:	4b07      	ldr	r3, [pc, #28]	@ (8005034 <vTaskSetTimeOutState+0x3c>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 800501c:	4b06      	ldr	r3, [pc, #24]	@ (8005038 <vTaskSetTimeOutState+0x40>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 8005024:	f001 f9d8 	bl	80063d8 <vPortExitCritical>

    traceRETURN_vTaskSetTimeOutState();
}
 8005028:	bf00      	nop
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	080243c0 	.word	0x080243c0
 8005034:	20000ea0 	.word	0x20000ea0
 8005038:	20000e8c 	.word	0x20000e8c

0800503c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005044:	4b06      	ldr	r3, [pc, #24]	@ (8005060 <vTaskInternalSetTimeOutState+0x24>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800504c:	4b05      	ldr	r3, [pc, #20]	@ (8005064 <vTaskInternalSetTimeOutState+0x28>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	20000ea0 	.word	0x20000ea0
 8005064:	20000e8c 	.word	0x20000e8c

08005068 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d104      	bne.n	8005082 <xTaskCheckForTimeOut+0x1a>
 8005078:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 800507c:	4825      	ldr	r0, [pc, #148]	@ (8005114 <xTaskCheckForTimeOut+0xac>)
 800507e:	f7fc fc6b 	bl	8001958 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d104      	bne.n	8005092 <xTaskCheckForTimeOut+0x2a>
 8005088:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 800508c:	4821      	ldr	r0, [pc, #132]	@ (8005114 <xTaskCheckForTimeOut+0xac>)
 800508e:	f7fc fc63 	bl	8001958 <vAssertCalled>

    taskENTER_CRITICAL();
 8005092:	f001 f975 	bl	8006380 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005096:	4b20      	ldr	r3, [pc, #128]	@ (8005118 <xTaskCheckForTimeOut+0xb0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ae:	d102      	bne.n	80050b6 <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80050b0:	2300      	movs	r3, #0
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	e026      	b.n	8005104 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b18      	ldr	r3, [pc, #96]	@ (800511c <xTaskCheckForTimeOut+0xb4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d00a      	beq.n	80050d8 <xTaskCheckForTimeOut+0x70>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d305      	bcc.n	80050d8 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80050cc:	2301      	movs	r3, #1
 80050ce:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e015      	b.n	8005104 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d20b      	bcs.n	80050fa <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1ad2      	subs	r2, r2, r3
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7ff ffa4 	bl	800503c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	e004      	b.n	8005104 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005100:	2301      	movs	r3, #1
 8005102:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8005104:	f001 f968 	bl	80063d8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8005108:	697b      	ldr	r3, [r7, #20]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	080243c0 	.word	0x080243c0
 8005118:	20000e8c 	.word	0x20000e8c
 800511c:	20000ea0 	.word	0x20000ea0

08005120 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8005124:	4b03      	ldr	r3, [pc, #12]	@ (8005134 <vTaskMissedYield+0x14>)
 8005126:	2201      	movs	r2, #1
 8005128:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 800512a:	bf00      	nop
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	20000e9c 	.word	0x20000e9c

08005138 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005140:	f000 f852 	bl	80051e8 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8005144:	4b06      	ldr	r3, [pc, #24]	@ (8005160 <prvIdleTask+0x28>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d9f9      	bls.n	8005140 <prvIdleTask+0x8>
            {
                taskYIELD();
 800514c:	4b05      	ldr	r3, [pc, #20]	@ (8005164 <prvIdleTask+0x2c>)
 800514e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800515c:	e7f0      	b.n	8005140 <prvIdleTask+0x8>
 800515e:	bf00      	nop
 8005160:	20000d8c 	.word	0x20000d8c
 8005164:	e000ed04 	.word	0xe000ed04

08005168 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800516e:	2300      	movs	r3, #0
 8005170:	607b      	str	r3, [r7, #4]
 8005172:	e00c      	b.n	800518e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4a12      	ldr	r2, [pc, #72]	@ (80051c8 <prvInitialiseTaskLists+0x60>)
 8005180:	4413      	add	r3, r2
 8005182:	4618      	mov	r0, r3
 8005184:	f7fe f9a8 	bl	80034d8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3301      	adds	r3, #1
 800518c:	607b      	str	r3, [r7, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b06      	cmp	r3, #6
 8005192:	d9ef      	bls.n	8005174 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005194:	480d      	ldr	r0, [pc, #52]	@ (80051cc <prvInitialiseTaskLists+0x64>)
 8005196:	f7fe f99f 	bl	80034d8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800519a:	480d      	ldr	r0, [pc, #52]	@ (80051d0 <prvInitialiseTaskLists+0x68>)
 800519c:	f7fe f99c 	bl	80034d8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80051a0:	480c      	ldr	r0, [pc, #48]	@ (80051d4 <prvInitialiseTaskLists+0x6c>)
 80051a2:	f7fe f999 	bl	80034d8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80051a6:	480c      	ldr	r0, [pc, #48]	@ (80051d8 <prvInitialiseTaskLists+0x70>)
 80051a8:	f7fe f996 	bl	80034d8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80051ac:	480b      	ldr	r0, [pc, #44]	@ (80051dc <prvInitialiseTaskLists+0x74>)
 80051ae:	f7fe f993 	bl	80034d8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80051b2:	4b0b      	ldr	r3, [pc, #44]	@ (80051e0 <prvInitialiseTaskLists+0x78>)
 80051b4:	4a05      	ldr	r2, [pc, #20]	@ (80051cc <prvInitialiseTaskLists+0x64>)
 80051b6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051b8:	4b0a      	ldr	r3, [pc, #40]	@ (80051e4 <prvInitialiseTaskLists+0x7c>)
 80051ba:	4a05      	ldr	r2, [pc, #20]	@ (80051d0 <prvInitialiseTaskLists+0x68>)
 80051bc:	601a      	str	r2, [r3, #0]
}
 80051be:	bf00      	nop
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20000d8c 	.word	0x20000d8c
 80051cc:	20000e18 	.word	0x20000e18
 80051d0:	20000e2c 	.word	0x20000e2c
 80051d4:	20000e48 	.word	0x20000e48
 80051d8:	20000e5c 	.word	0x20000e5c
 80051dc:	20000e74 	.word	0x20000e74
 80051e0:	20000e40 	.word	0x20000e40
 80051e4:	20000e44 	.word	0x20000e44

080051e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051ee:	e019      	b.n	8005224 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80051f0:	f001 f8c6 	bl	8006380 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80051f4:	4b10      	ldr	r3, [pc, #64]	@ (8005238 <prvCheckTasksWaitingTermination+0x50>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3304      	adds	r3, #4
 8005200:	4618      	mov	r0, r3
 8005202:	f7fe f9f3 	bl	80035ec <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8005206:	4b0d      	ldr	r3, [pc, #52]	@ (800523c <prvCheckTasksWaitingTermination+0x54>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3b01      	subs	r3, #1
 800520c:	4a0b      	ldr	r2, [pc, #44]	@ (800523c <prvCheckTasksWaitingTermination+0x54>)
 800520e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8005210:	4b0b      	ldr	r3, [pc, #44]	@ (8005240 <prvCheckTasksWaitingTermination+0x58>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3b01      	subs	r3, #1
 8005216:	4a0a      	ldr	r2, [pc, #40]	@ (8005240 <prvCheckTasksWaitingTermination+0x58>)
 8005218:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800521a:	f001 f8dd 	bl	80063d8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f810 	bl	8005244 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005224:	4b06      	ldr	r3, [pc, #24]	@ (8005240 <prvCheckTasksWaitingTermination+0x58>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1e1      	bne.n	80051f0 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000e5c 	.word	0x20000e5c
 800523c:	20000e88 	.word	0x20000e88
 8005240:	20000e70 	.word	0x20000e70

08005244 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005250:	4618      	mov	r0, r3
 8005252:	f001 fa6b 	bl	800672c <vPortFree>
            vPortFree( pxTCB );
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f001 fa68 	bl	800672c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800525c:	bf00      	nop
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005268:	4b0a      	ldr	r3, [pc, #40]	@ (8005294 <prvResetNextTaskUnblockTime+0x30>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d104      	bne.n	800527c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005272:	4b09      	ldr	r3, [pc, #36]	@ (8005298 <prvResetNextTaskUnblockTime+0x34>)
 8005274:	f04f 32ff 	mov.w	r2, #4294967295
 8005278:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800527a:	e005      	b.n	8005288 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800527c:	4b05      	ldr	r3, [pc, #20]	@ (8005294 <prvResetNextTaskUnblockTime+0x30>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a04      	ldr	r2, [pc, #16]	@ (8005298 <prvResetNextTaskUnblockTime+0x34>)
 8005286:	6013      	str	r3, [r2, #0]
}
 8005288:	bf00      	nop
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	20000e40 	.word	0x20000e40
 8005298:	20000ea8 	.word	0x20000ea8

0800529c <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 80052a2:	4b05      	ldr	r3, [pc, #20]	@ (80052b8 <xTaskGetCurrentTaskHandle+0x1c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 80052a8:	687b      	ldr	r3, [r7, #4]
        }
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20000d88 	.word	0x20000d88

080052bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80052c2:	4b0b      	ldr	r3, [pc, #44]	@ (80052f0 <xTaskGetSchedulerState+0x34>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d102      	bne.n	80052d0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80052ca:	2301      	movs	r3, #1
 80052cc:	607b      	str	r3, [r7, #4]
 80052ce:	e008      	b.n	80052e2 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80052d0:	4b08      	ldr	r3, [pc, #32]	@ (80052f4 <xTaskGetSchedulerState+0x38>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d102      	bne.n	80052de <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80052d8:	2302      	movs	r3, #2
 80052da:	607b      	str	r3, [r7, #4]
 80052dc:	e001      	b.n	80052e2 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80052de:	2300      	movs	r3, #0
 80052e0:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80052e2:	687b      	ldr	r3, [r7, #4]
    }
 80052e4:	4618      	mov	r0, r3
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	20000e94 	.word	0x20000e94
 80052f4:	20000eb0 	.word	0x20000eb0

080052f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005304:	2300      	movs	r3, #0
 8005306:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 8089 	beq.w	8005422 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005314:	4b45      	ldr	r3, [pc, #276]	@ (800542c <xTaskPriorityInherit+0x134>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531a:	429a      	cmp	r2, r3
 800531c:	d278      	bcs.n	8005410 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	2b00      	cmp	r3, #0
 8005324:	db06      	blt.n	8005334 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8005326:	4b41      	ldr	r3, [pc, #260]	@ (800542c <xTaskPriorityInherit+0x134>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532c:	f1c3 0207 	rsb	r2, r3, #7
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	6959      	ldr	r1, [r3, #20]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800533c:	4613      	mov	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4a3a      	ldr	r2, [pc, #232]	@ (8005430 <xTaskPriorityInherit+0x138>)
 8005346:	4413      	add	r3, r2
 8005348:	4299      	cmp	r1, r3
 800534a:	d159      	bne.n	8005400 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	3304      	adds	r3, #4
 8005350:	4618      	mov	r0, r3
 8005352:	f7fe f94b 	bl	80035ec <uxListRemove>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005360:	2201      	movs	r2, #1
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	43da      	mvns	r2, r3
 8005368:	4b32      	ldr	r3, [pc, #200]	@ (8005434 <xTaskPriorityInherit+0x13c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4013      	ands	r3, r2
 800536e:	4a31      	ldr	r2, [pc, #196]	@ (8005434 <xTaskPriorityInherit+0x13c>)
 8005370:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005372:	4b2e      	ldr	r3, [pc, #184]	@ (800542c <xTaskPriorityInherit+0x134>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005380:	2201      	movs	r2, #1
 8005382:	409a      	lsls	r2, r3
 8005384:	4b2b      	ldr	r3, [pc, #172]	@ (8005434 <xTaskPriorityInherit+0x13c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4313      	orrs	r3, r2
 800538a:	4a2a      	ldr	r2, [pc, #168]	@ (8005434 <xTaskPriorityInherit+0x13c>)
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005392:	4927      	ldr	r1, [pc, #156]	@ (8005430 <xTaskPriorityInherit+0x138>)
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	3304      	adds	r3, #4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	609a      	str	r2, [r3, #8]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	60da      	str	r2, [r3, #12]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	3204      	adds	r2, #4
 80053ba:	605a      	str	r2, [r3, #4]
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1d1a      	adds	r2, r3, #4
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	609a      	str	r2, [r3, #8]
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4a17      	ldr	r2, [pc, #92]	@ (8005430 <xTaskPriorityInherit+0x138>)
 80053d2:	441a      	add	r2, r3
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	615a      	str	r2, [r3, #20]
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053dc:	4914      	ldr	r1, [pc, #80]	@ (8005430 <xTaskPriorityInherit+0x138>)
 80053de:	4613      	mov	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053ee:	1c59      	adds	r1, r3, #1
 80053f0:	480f      	ldr	r0, [pc, #60]	@ (8005430 <xTaskPriorityInherit+0x138>)
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4403      	add	r3, r0
 80053fc:	6019      	str	r1, [r3, #0]
 80053fe:	e004      	b.n	800540a <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005400:	4b0a      	ldr	r3, [pc, #40]	@ (800542c <xTaskPriorityInherit+0x134>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800540a:	2301      	movs	r3, #1
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	e008      	b.n	8005422 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005414:	4b05      	ldr	r3, [pc, #20]	@ (800542c <xTaskPriorityInherit+0x134>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541a:	429a      	cmp	r2, r3
 800541c:	d201      	bcs.n	8005422 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800541e:	2301      	movs	r3, #1
 8005420:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 8005422:	697b      	ldr	r3, [r7, #20]
    }
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	20000d88 	.word	0x20000d88
 8005430:	20000d8c 	.word	0x20000d8c
 8005434:	20000e90 	.word	0x20000e90

08005438 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 8082 	beq.w	8005554 <xTaskPriorityDisinherit+0x11c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005450:	4b43      	ldr	r3, [pc, #268]	@ (8005560 <xTaskPriorityDisinherit+0x128>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	429a      	cmp	r2, r3
 8005458:	d004      	beq.n	8005464 <xTaskPriorityDisinherit+0x2c>
 800545a:	f641 2128 	movw	r1, #6696	@ 0x1a28
 800545e:	4841      	ldr	r0, [pc, #260]	@ (8005564 <xTaskPriorityDisinherit+0x12c>)
 8005460:	f7fc fa7a 	bl	8001958 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005468:	2b00      	cmp	r3, #0
 800546a:	d104      	bne.n	8005476 <xTaskPriorityDisinherit+0x3e>
 800546c:	f641 2129 	movw	r1, #6697	@ 0x1a29
 8005470:	483c      	ldr	r0, [pc, #240]	@ (8005564 <xTaskPriorityDisinherit+0x12c>)
 8005472:	f7fc fa71 	bl	8001958 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800547a:	1e5a      	subs	r2, r3, #1
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005488:	429a      	cmp	r2, r3
 800548a:	d063      	beq.n	8005554 <xTaskPriorityDisinherit+0x11c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005490:	2b00      	cmp	r3, #0
 8005492:	d15f      	bne.n	8005554 <xTaskPriorityDisinherit+0x11c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	3304      	adds	r3, #4
 8005498:	4618      	mov	r0, r3
 800549a:	f7fe f8a7 	bl	80035ec <uxListRemove>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <xTaskPriorityDisinherit+0x82>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a8:	2201      	movs	r2, #1
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43da      	mvns	r2, r3
 80054b0:	4b2d      	ldr	r3, [pc, #180]	@ (8005568 <xTaskPriorityDisinherit+0x130>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4013      	ands	r3, r2
 80054b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005568 <xTaskPriorityDisinherit+0x130>)
 80054b8:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c6:	f1c3 0207 	rsb	r2, r3, #7
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d2:	2201      	movs	r2, #1
 80054d4:	409a      	lsls	r2, r3
 80054d6:	4b24      	ldr	r3, [pc, #144]	@ (8005568 <xTaskPriorityDisinherit+0x130>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4313      	orrs	r3, r2
 80054dc:	4a22      	ldr	r2, [pc, #136]	@ (8005568 <xTaskPriorityDisinherit+0x130>)
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e4:	4921      	ldr	r1, [pc, #132]	@ (800556c <xTaskPriorityDisinherit+0x134>)
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	440b      	add	r3, r1
 80054f0:	3304      	adds	r3, #4
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	609a      	str	r2, [r3, #8]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	60da      	str	r2, [r3, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	3204      	adds	r2, #4
 800550c:	605a      	str	r2, [r3, #4]
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1d1a      	adds	r2, r3, #4
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	609a      	str	r2, [r3, #8]
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4a12      	ldr	r2, [pc, #72]	@ (800556c <xTaskPriorityDisinherit+0x134>)
 8005524:	441a      	add	r2, r3
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	615a      	str	r2, [r3, #20]
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552e:	490f      	ldr	r1, [pc, #60]	@ (800556c <xTaskPriorityDisinherit+0x134>)
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005540:	1c59      	adds	r1, r3, #1
 8005542:	480a      	ldr	r0, [pc, #40]	@ (800556c <xTaskPriorityDisinherit+0x134>)
 8005544:	4613      	mov	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4403      	add	r3, r0
 800554e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005550:	2301      	movs	r3, #1
 8005552:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8005554:	697b      	ldr	r3, [r7, #20]
    }
 8005556:	4618      	mov	r0, r3
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20000d88 	.word	0x20000d88
 8005564:	080243c0 	.word	0x080243c0
 8005568:	20000e90 	.word	0x20000e90
 800556c:	20000d8c 	.word	0x20000d8c

08005570 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800557e:	2301      	movs	r3, #1
 8005580:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8096 	beq.w	80056b6 <vTaskPriorityDisinheritAfterTimeout+0x146>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800558e:	2b00      	cmp	r3, #0
 8005590:	d104      	bne.n	800559c <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8005592:	f641 2186 	movw	r1, #6790	@ 0x1a86
 8005596:	484a      	ldr	r0, [pc, #296]	@ (80056c0 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8005598:	f7fc f9de 	bl	8001958 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d902      	bls.n	80055ac <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	61fb      	str	r3, [r7, #28]
 80055aa:	e002      	b.n	80055b2 <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055b0:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d07c      	beq.n	80056b6 <vTaskPriorityDisinheritAfterTimeout+0x146>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d177      	bne.n	80056b6 <vTaskPriorityDisinheritAfterTimeout+0x146>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80055c6:	4b3f      	ldr	r3, [pc, #252]	@ (80056c4 <vTaskPriorityDisinheritAfterTimeout+0x154>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d104      	bne.n	80055da <vTaskPriorityDisinheritAfterTimeout+0x6a>
 80055d0:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 80055d4:	483a      	ldr	r0, [pc, #232]	@ (80056c0 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 80055d6:	f7fc f9bf 	bl	8001958 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055de:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	db04      	blt.n	80055f8 <vTaskPriorityDisinheritAfterTimeout+0x88>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	f1c3 0207 	rsb	r2, r3, #7
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	6959      	ldr	r1, [r3, #20]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4a30      	ldr	r2, [pc, #192]	@ (80056c8 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005608:	4413      	add	r3, r2
 800560a:	4299      	cmp	r1, r3
 800560c:	d153      	bne.n	80056b6 <vTaskPriorityDisinheritAfterTimeout+0x146>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	3304      	adds	r3, #4
 8005612:	4618      	mov	r0, r3
 8005614:	f7fd ffea 	bl	80035ec <uxListRemove>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10a      	bne.n	8005634 <vTaskPriorityDisinheritAfterTimeout+0xc4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005622:	2201      	movs	r2, #1
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	43da      	mvns	r2, r3
 800562a:	4b28      	ldr	r3, [pc, #160]	@ (80056cc <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4013      	ands	r3, r2
 8005630:	4a26      	ldr	r2, [pc, #152]	@ (80056cc <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005632:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	2201      	movs	r2, #1
 800563a:	409a      	lsls	r2, r3
 800563c:	4b23      	ldr	r3, [pc, #140]	@ (80056cc <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4313      	orrs	r3, r2
 8005642:	4a22      	ldr	r2, [pc, #136]	@ (80056cc <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800564a:	491f      	ldr	r1, [pc, #124]	@ (80056c8 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	3304      	adds	r3, #4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	609a      	str	r2, [r3, #8]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	60da      	str	r2, [r3, #12]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	3204      	adds	r2, #4
 8005672:	605a      	str	r2, [r3, #4]
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	1d1a      	adds	r2, r3, #4
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	609a      	str	r2, [r3, #8]
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4a0f      	ldr	r2, [pc, #60]	@ (80056c8 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 800568a:	441a      	add	r2, r3
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	615a      	str	r2, [r3, #20]
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005694:	490c      	ldr	r1, [pc, #48]	@ (80056c8 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005696:	4613      	mov	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	440b      	add	r3, r1
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80056a6:	1c59      	adds	r1, r3, #1
 80056a8:	4807      	ldr	r0, [pc, #28]	@ (80056c8 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 80056aa:	4613      	mov	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4403      	add	r3, r0
 80056b4:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 80056b6:	bf00      	nop
 80056b8:	3720      	adds	r7, #32
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	080243c0 	.word	0x080243c0
 80056c4:	20000d88 	.word	0x20000d88
 80056c8:	20000d8c 	.word	0x20000d8c
 80056cc:	20000e90 	.word	0x20000e90

080056d0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80056d6:	4b09      	ldr	r3, [pc, #36]	@ (80056fc <uxTaskResetEventItemValue+0x2c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 80056de:	4b07      	ldr	r3, [pc, #28]	@ (80056fc <uxTaskResetEventItemValue+0x2c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e4:	4b05      	ldr	r3, [pc, #20]	@ (80056fc <uxTaskResetEventItemValue+0x2c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f1c2 0207 	rsb	r2, r2, #7
 80056ec:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 80056ee:	687b      	ldr	r3, [r7, #4]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	20000d88 	.word	0x20000d88

08005700 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 8005706:	4b09      	ldr	r3, [pc, #36]	@ (800572c <pvTaskIncrementMutexHeldCount+0x2c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d004      	beq.n	800571c <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 800571c:	687b      	ldr	r3, [r7, #4]
    }
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20000d88 	.word	0x20000d88

08005730 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 800573c:	2300      	movs	r3, #0
 800573e:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d004      	beq.n	8005750 <ulTaskGenericNotifyTake+0x20>
 8005746:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
 800574a:	4833      	ldr	r0, [pc, #204]	@ (8005818 <ulTaskGenericNotifyTake+0xe8>)
 800574c:	f7fc f904 	bl	8001958 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8005750:	f7fe ff96 	bl	8004680 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 8005754:	f000 fe14 	bl	8006380 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 8005758:	4b30      	ldr	r3, [pc, #192]	@ (800581c <ulTaskGenericNotifyTake+0xec>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	3318      	adds	r3, #24
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <ulTaskGenericNotifyTake+0x52>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 800576a:	4b2c      	ldr	r3, [pc, #176]	@ (800581c <ulTaskGenericNotifyTake+0xec>)
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	3368      	adds	r3, #104	@ 0x68
 8005774:	2201      	movs	r2, #1
 8005776:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <ulTaskGenericNotifyTake+0x52>
                    {
                        xShouldBlock = pdTRUE;
 800577e:	2301      	movs	r3, #1
 8005780:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8005782:	f000 fe29 	bl	80063d8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d103      	bne.n	8005794 <ulTaskGenericNotifyTake+0x64>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800578c:	2101      	movs	r1, #1
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fc3a 	bl	8006008 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005794:	f7fe ff82 	bl	800469c <xTaskResumeAll>
 8005798:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d10a      	bne.n	80057b6 <ulTaskGenericNotifyTake+0x86>
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d107      	bne.n	80057b6 <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
 80057a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005820 <ulTaskGenericNotifyTake+0xf0>)
 80057a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80057b6:	f000 fde3 	bl	8006380 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 80057ba:	4b18      	ldr	r3, [pc, #96]	@ (800581c <ulTaskGenericNotifyTake+0xec>)
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3318      	adds	r3, #24
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d014      	beq.n	80057fa <ulTaskGenericNotifyTake+0xca>
            {
                if( xClearCountOnExit != pdFALSE )
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d008      	beq.n	80057e8 <ulTaskGenericNotifyTake+0xb8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 80057d6:	4b11      	ldr	r3, [pc, #68]	@ (800581c <ulTaskGenericNotifyTake+0xec>)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3318      	adds	r3, #24
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	2200      	movs	r2, #0
 80057e4:	605a      	str	r2, [r3, #4]
 80057e6:	e008      	b.n	80057fa <ulTaskGenericNotifyTake+0xca>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 80057e8:	4b0c      	ldr	r3, [pc, #48]	@ (800581c <ulTaskGenericNotifyTake+0xec>)
 80057ea:	6819      	ldr	r1, [r3, #0]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	1e5a      	subs	r2, r3, #1
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3318      	adds	r3, #24
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 80057fa:	4b08      	ldr	r3, [pc, #32]	@ (800581c <ulTaskGenericNotifyTake+0xec>)
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4413      	add	r3, r2
 8005802:	3368      	adds	r3, #104	@ 0x68
 8005804:	2200      	movs	r2, #0
 8005806:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005808:	f000 fde6 	bl	80063d8 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 800580c:	697b      	ldr	r3, [r7, #20]
    }
 800580e:	4618      	mov	r0, r3
 8005810:	3720      	adds	r7, #32
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	080243c0 	.word	0x080243c0
 800581c:	20000d88 	.word	0x20000d88
 8005820:	e000ed04 	.word	0xe000ed04

08005824 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8005832:	2300      	movs	r3, #0
 8005834:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d004      	beq.n	8005846 <xTaskGenericNotifyWait+0x22>
 800583c:	f641 612f 	movw	r1, #7727	@ 0x1e2f
 8005840:	483e      	ldr	r0, [pc, #248]	@ (800593c <xTaskGenericNotifyWait+0x118>)
 8005842:	f7fc f889 	bl	8001958 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8005846:	f7fe ff1b 	bl	8004680 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 800584a:	f000 fd99 	bl	8006380 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800584e:	4b3c      	ldr	r3, [pc, #240]	@ (8005940 <xTaskGenericNotifyWait+0x11c>)
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4413      	add	r3, r2
 8005856:	3368      	adds	r3, #104	@ 0x68
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d01a      	beq.n	8005896 <xTaskGenericNotifyWait+0x72>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8005860:	4b37      	ldr	r3, [pc, #220]	@ (8005940 <xTaskGenericNotifyWait+0x11c>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3318      	adds	r3, #24
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	6859      	ldr	r1, [r3, #4]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	43db      	mvns	r3, r3
 8005872:	4019      	ands	r1, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3318      	adds	r3, #24
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 800587e:	4b30      	ldr	r3, [pc, #192]	@ (8005940 <xTaskGenericNotifyWait+0x11c>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4413      	add	r3, r2
 8005886:	3368      	adds	r3, #104	@ 0x68
 8005888:	2201      	movs	r2, #1
 800588a:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 800588c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <xTaskGenericNotifyWait+0x72>
                    {
                        xShouldBlock = pdTRUE;
 8005892:	2301      	movs	r3, #1
 8005894:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8005896:	f000 fd9f 	bl	80063d8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d103      	bne.n	80058a8 <xTaskGenericNotifyWait+0x84>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058a0:	2101      	movs	r1, #1
 80058a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058a4:	f000 fbb0 	bl	8006008 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80058a8:	f7fe fef8 	bl	800469c <xTaskResumeAll>
 80058ac:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d10a      	bne.n	80058ca <xTaskGenericNotifyWait+0xa6>
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d107      	bne.n	80058ca <xTaskGenericNotifyWait+0xa6>
        {
            taskYIELD_WITHIN_API();
 80058ba:	4b22      	ldr	r3, [pc, #136]	@ (8005944 <xTaskGenericNotifyWait+0x120>)
 80058bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80058ca:	f000 fd59 	bl	8006380 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d008      	beq.n	80058e6 <xTaskGenericNotifyWait+0xc2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 80058d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005940 <xTaskGenericNotifyWait+0x11c>)
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3318      	adds	r3, #24
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80058e6:	4b16      	ldr	r3, [pc, #88]	@ (8005940 <xTaskGenericNotifyWait+0x11c>)
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4413      	add	r3, r2
 80058ee:	3368      	adds	r3, #104	@ 0x68
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d002      	beq.n	80058fe <xTaskGenericNotifyWait+0xda>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80058f8:	2300      	movs	r3, #0
 80058fa:	61fb      	str	r3, [r7, #28]
 80058fc:	e010      	b.n	8005920 <xTaskGenericNotifyWait+0xfc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 80058fe:	4b10      	ldr	r3, [pc, #64]	@ (8005940 <xTaskGenericNotifyWait+0x11c>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3318      	adds	r3, #24
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	6859      	ldr	r1, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	43db      	mvns	r3, r3
 8005910:	4019      	ands	r1, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3318      	adds	r3, #24
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 800591c:	2301      	movs	r3, #1
 800591e:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8005920:	4b07      	ldr	r3, [pc, #28]	@ (8005940 <xTaskGenericNotifyWait+0x11c>)
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4413      	add	r3, r2
 8005928:	3368      	adds	r3, #104	@ 0x68
 800592a:	2200      	movs	r2, #0
 800592c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800592e:	f000 fd53 	bl	80063d8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8005932:	69fb      	ldr	r3, [r7, #28]
    }
 8005934:	4618      	mov	r0, r3
 8005936:	3720      	adds	r7, #32
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	080243c0 	.word	0x080243c0
 8005940:	20000d88 	.word	0x20000d88
 8005944:	e000ed04 	.word	0xe000ed04

08005948 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005948:	b580      	push	{r7, lr}
 800594a:	b08a      	sub	sp, #40	@ 0x28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005956:	2301      	movs	r3, #1
 8005958:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d004      	beq.n	800596a <xTaskGenericNotify+0x22>
 8005960:	f641 61a4 	movw	r1, #7844	@ 0x1ea4
 8005964:	487b      	ldr	r0, [pc, #492]	@ (8005b54 <xTaskGenericNotify+0x20c>)
 8005966:	f7fb fff7 	bl	8001958 <vAssertCalled>
        configASSERT( xTaskToNotify );
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <xTaskGenericNotify+0x32>
 8005970:	f641 61a5 	movw	r1, #7845	@ 0x1ea5
 8005974:	4877      	ldr	r0, [pc, #476]	@ (8005b54 <xTaskGenericNotify+0x20c>)
 8005976:	f7fb ffef 	bl	8001958 <vAssertCalled>
        pxTCB = xTaskToNotify;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 800597e:	f000 fcff 	bl	8006380 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	2b00      	cmp	r3, #0
 8005986:	d007      	beq.n	8005998 <xTaskGenericNotify+0x50>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005988:	6a3a      	ldr	r2, [r7, #32]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	3318      	adds	r3, #24
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005996:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005998:	6a3a      	ldr	r2, [r7, #32]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	4413      	add	r3, r2
 800599e:	3368      	adds	r3, #104	@ 0x68
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80059a4:	6a3a      	ldr	r2, [r7, #32]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	4413      	add	r3, r2
 80059aa:	3368      	adds	r3, #104	@ 0x68
 80059ac:	2202      	movs	r2, #2
 80059ae:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d83f      	bhi.n	8005a36 <xTaskGenericNotify+0xee>
 80059b6:	a201      	add	r2, pc, #4	@ (adr r2, 80059bc <xTaskGenericNotify+0x74>)
 80059b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059bc:	08005a4b 	.word	0x08005a4b
 80059c0:	080059d1 	.word	0x080059d1
 80059c4:	080059ef 	.word	0x080059ef
 80059c8:	08005a0b 	.word	0x08005a0b
 80059cc:	08005a1b 	.word	0x08005a1b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80059d0:	6a3a      	ldr	r2, [r7, #32]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	3318      	adds	r3, #24
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	431a      	orrs	r2, r3
 80059e0:	6a39      	ldr	r1, [r7, #32]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	3318      	adds	r3, #24
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	440b      	add	r3, r1
 80059ea:	605a      	str	r2, [r3, #4]
                    break;
 80059ec:	e030      	b.n	8005a50 <xTaskGenericNotify+0x108>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80059ee:	6a3a      	ldr	r2, [r7, #32]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	3318      	adds	r3, #24
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	6a39      	ldr	r1, [r7, #32]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	3318      	adds	r3, #24
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	440b      	add	r3, r1
 8005a06:	605a      	str	r2, [r3, #4]
                    break;
 8005a08:	e022      	b.n	8005a50 <xTaskGenericNotify+0x108>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005a0a:	6a3a      	ldr	r2, [r7, #32]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	3318      	adds	r3, #24
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	605a      	str	r2, [r3, #4]
                    break;
 8005a18:	e01a      	b.n	8005a50 <xTaskGenericNotify+0x108>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005a1a:	7ffb      	ldrb	r3, [r7, #31]
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d007      	beq.n	8005a30 <xTaskGenericNotify+0xe8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005a20:	6a3a      	ldr	r2, [r7, #32]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	3318      	adds	r3, #24
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005a2e:	e00f      	b.n	8005a50 <xTaskGenericNotify+0x108>
                        xReturn = pdFAIL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8005a34:	e00c      	b.n	8005a50 <xTaskGenericNotify+0x108>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005a36:	4b48      	ldr	r3, [pc, #288]	@ (8005b58 <xTaskGenericNotify+0x210>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <xTaskGenericNotify+0x106>
 8005a3e:	f641 61da 	movw	r1, #7898	@ 0x1eda
 8005a42:	4844      	ldr	r0, [pc, #272]	@ (8005b54 <xTaskGenericNotify+0x20c>)
 8005a44:	f7fb ff88 	bl	8001958 <vAssertCalled>

                    break;
 8005a48:	e001      	b.n	8005a4e <xTaskGenericNotify+0x106>
                    break;
 8005a4a:	bf00      	nop
 8005a4c:	e000      	b.n	8005a50 <xTaskGenericNotify+0x108>
                    break;
 8005a4e:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005a50:	7ffb      	ldrb	r3, [r7, #31]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d177      	bne.n	8005b46 <xTaskGenericNotify+0x1fe>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	61bb      	str	r3, [r7, #24]
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	6a3a      	ldr	r2, [r7, #32]
 8005a62:	68d2      	ldr	r2, [r2, #12]
 8005a64:	609a      	str	r2, [r3, #8]
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	6a3a      	ldr	r2, [r7, #32]
 8005a6c:	6892      	ldr	r2, [r2, #8]
 8005a6e:	605a      	str	r2, [r3, #4]
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	3304      	adds	r3, #4
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d103      	bne.n	8005a84 <xTaskGenericNotify+0x13c>
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	605a      	str	r2, [r3, #4]
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	2200      	movs	r2, #0
 8005a88:	615a      	str	r2, [r3, #20]
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	1e5a      	subs	r2, r3, #1
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a98:	2201      	movs	r2, #1
 8005a9a:	409a      	lsls	r2, r3
 8005a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8005b5c <xTaskGenericNotify+0x214>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	4a2e      	ldr	r2, [pc, #184]	@ (8005b5c <xTaskGenericNotify+0x214>)
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aaa:	492d      	ldr	r1, [pc, #180]	@ (8005b60 <xTaskGenericNotify+0x218>)
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	440b      	add	r3, r1
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	609a      	str	r2, [r3, #8]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	60da      	str	r2, [r3, #12]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	6a3a      	ldr	r2, [r7, #32]
 8005ad0:	3204      	adds	r2, #4
 8005ad2:	605a      	str	r2, [r3, #4]
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	1d1a      	adds	r2, r3, #4
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	609a      	str	r2, [r3, #8]
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b60 <xTaskGenericNotify+0x218>)
 8005aea:	441a      	add	r2, r3
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	615a      	str	r2, [r3, #20]
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005af4:	491a      	ldr	r1, [pc, #104]	@ (8005b60 <xTaskGenericNotify+0x218>)
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6a3a      	ldr	r2, [r7, #32]
 8005b04:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005b06:	1c59      	adds	r1, r3, #1
 8005b08:	4815      	ldr	r0, [pc, #84]	@ (8005b60 <xTaskGenericNotify+0x218>)
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4403      	add	r3, r0
 8005b14:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d004      	beq.n	8005b28 <xTaskGenericNotify+0x1e0>
 8005b1e:	f641 61e9 	movw	r1, #7913	@ 0x1ee9
 8005b22:	480c      	ldr	r0, [pc, #48]	@ (8005b54 <xTaskGenericNotify+0x20c>)
 8005b24:	f7fb ff18 	bl	8001958 <vAssertCalled>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8005b28:	4b0e      	ldr	r3, [pc, #56]	@ (8005b64 <xTaskGenericNotify+0x21c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d207      	bcs.n	8005b46 <xTaskGenericNotify+0x1fe>
 8005b36:	4b0c      	ldr	r3, [pc, #48]	@ (8005b68 <xTaskGenericNotify+0x220>)
 8005b38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005b46:	f000 fc47 	bl	80063d8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3728      	adds	r7, #40	@ 0x28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	080243c0 	.word	0x080243c0
 8005b58:	20000e8c 	.word	0x20000e8c
 8005b5c:	20000e90 	.word	0x20000e90
 8005b60:	20000d8c 	.word	0x20000d8c
 8005b64:	20000d88 	.word	0x20000d88
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08e      	sub	sp, #56	@ 0x38
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	637b      	str	r3, [r7, #52]	@ 0x34
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d104      	bne.n	8005b8e <xTaskGenericNotifyFromISR+0x22>
 8005b84:	f641 711e 	movw	r1, #7966	@ 0x1f1e
 8005b88:	4899      	ldr	r0, [pc, #612]	@ (8005df0 <xTaskGenericNotifyFromISR+0x284>)
 8005b8a:	f7fb fee5 	bl	8001958 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <xTaskGenericNotifyFromISR+0x32>
 8005b94:	f641 711f 	movw	r1, #7967	@ 0x1f1f
 8005b98:	4895      	ldr	r0, [pc, #596]	@ (8005df0 <xTaskGenericNotifyFromISR+0x284>)
 8005b9a:	f7fb fedd 	bl	8001958 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b9e:	f000 fcbd 	bl	800651c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8005ba6:	f3ef 8211 	mrs	r2, BASEPRI
 8005baa:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005bae:	b672      	cpsid	i
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	b662      	cpsie	i
 8005bbe:	61ba      	str	r2, [r7, #24]
 8005bc0:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8005bc2:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8005bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
            if( pulPreviousNotificationValue != NULL )
 8005bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d007      	beq.n	8005bdc <xTaskGenericNotifyFromISR+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	3318      	adds	r3, #24
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bda:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	4413      	add	r3, r2
 8005be2:	3368      	adds	r3, #104	@ 0x68
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	4413      	add	r3, r2
 8005bf0:	3368      	adds	r3, #104	@ 0x68
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005bf6:	78fb      	ldrb	r3, [r7, #3]
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d841      	bhi.n	8005c80 <xTaskGenericNotifyFromISR+0x114>
 8005bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8005c04 <xTaskGenericNotifyFromISR+0x98>)
 8005bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c02:	bf00      	nop
 8005c04:	08005c95 	.word	0x08005c95
 8005c08:	08005c19 	.word	0x08005c19
 8005c0c:	08005c37 	.word	0x08005c37
 8005c10:	08005c53 	.word	0x08005c53
 8005c14:	08005c63 	.word	0x08005c63
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005c18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	3318      	adds	r3, #24
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	3318      	adds	r3, #24
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	440b      	add	r3, r1
 8005c32:	605a      	str	r2, [r3, #4]
                    break;
 8005c34:	e031      	b.n	8005c9a <xTaskGenericNotifyFromISR+0x12e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	3318      	adds	r3, #24
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	3318      	adds	r3, #24
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	605a      	str	r2, [r3, #4]
                    break;
 8005c50:	e023      	b.n	8005c9a <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	3318      	adds	r3, #24
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	605a      	str	r2, [r3, #4]
                    break;
 8005c60:	e01b      	b.n	8005c9a <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005c62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d007      	beq.n	8005c7a <xTaskGenericNotifyFromISR+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005c6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	3318      	adds	r3, #24
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005c78:	e00f      	b.n	8005c9a <xTaskGenericNotifyFromISR+0x12e>
                        xReturn = pdFAIL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8005c7e:	e00c      	b.n	8005c9a <xTaskGenericNotifyFromISR+0x12e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005c80:	4b5c      	ldr	r3, [pc, #368]	@ (8005df4 <xTaskGenericNotifyFromISR+0x288>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <xTaskGenericNotifyFromISR+0x12c>
 8005c88:	f641 7169 	movw	r1, #8041	@ 0x1f69
 8005c8c:	4858      	ldr	r0, [pc, #352]	@ (8005df0 <xTaskGenericNotifyFromISR+0x284>)
 8005c8e:	f7fb fe63 	bl	8001958 <vAssertCalled>
                    break;
 8005c92:	e001      	b.n	8005c98 <xTaskGenericNotifyFromISR+0x12c>
                    break;
 8005c94:	bf00      	nop
 8005c96:	e000      	b.n	8005c9a <xTaskGenericNotifyFromISR+0x12e>
                    break;
 8005c98:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005c9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	f040 809a 	bne.w	8005dd8 <xTaskGenericNotifyFromISR+0x26c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d004      	beq.n	8005cb6 <xTaskGenericNotifyFromISR+0x14a>
 8005cac:	f641 7174 	movw	r1, #8052	@ 0x1f74
 8005cb0:	484f      	ldr	r0, [pc, #316]	@ (8005df0 <xTaskGenericNotifyFromISR+0x284>)
 8005cb2:	f7fb fe51 	bl	8001958 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005cb6:	4b50      	ldr	r3, [pc, #320]	@ (8005df8 <xTaskGenericNotifyFromISR+0x28c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d160      	bne.n	8005d80 <xTaskGenericNotifyFromISR+0x214>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	623b      	str	r3, [r7, #32]
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cca:	68d2      	ldr	r2, [r2, #12]
 8005ccc:	609a      	str	r2, [r3, #8]
 8005cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cd4:	6892      	ldr	r2, [r2, #8]
 8005cd6:	605a      	str	r2, [r3, #4]
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cde:	3304      	adds	r3, #4
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d103      	bne.n	8005cec <xTaskGenericNotifyFromISR+0x180>
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	605a      	str	r2, [r3, #4]
 8005cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cee:	2200      	movs	r2, #0
 8005cf0:	615a      	str	r2, [r3, #20]
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	1e5a      	subs	r2, r3, #1
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d00:	2201      	movs	r2, #1
 8005d02:	409a      	lsls	r2, r3
 8005d04:	4b3d      	ldr	r3, [pc, #244]	@ (8005dfc <xTaskGenericNotifyFromISR+0x290>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	4a3c      	ldr	r2, [pc, #240]	@ (8005dfc <xTaskGenericNotifyFromISR+0x290>)
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d12:	493b      	ldr	r1, [pc, #236]	@ (8005e00 <xTaskGenericNotifyFromISR+0x294>)
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	3304      	adds	r3, #4
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	61fb      	str	r3, [r7, #28]
 8005d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	609a      	str	r2, [r3, #8]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d30:	60da      	str	r2, [r3, #12]
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d38:	3204      	adds	r2, #4
 8005d3a:	605a      	str	r2, [r3, #4]
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3e:	1d1a      	adds	r2, r3, #4
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	609a      	str	r2, [r3, #8]
 8005d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4a2b      	ldr	r2, [pc, #172]	@ (8005e00 <xTaskGenericNotifyFromISR+0x294>)
 8005d52:	441a      	add	r2, r3
 8005d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d56:	615a      	str	r2, [r3, #20]
 8005d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d5c:	4928      	ldr	r1, [pc, #160]	@ (8005e00 <xTaskGenericNotifyFromISR+0x294>)
 8005d5e:	4613      	mov	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	440b      	add	r3, r1
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d6c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005d6e:	1c59      	adds	r1, r3, #1
 8005d70:	4823      	ldr	r0, [pc, #140]	@ (8005e00 <xTaskGenericNotifyFromISR+0x294>)
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4403      	add	r3, r0
 8005d7c:	6019      	str	r1, [r3, #0]
 8005d7e:	e01b      	b.n	8005db8 <xTaskGenericNotifyFromISR+0x24c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005d80:	4b20      	ldr	r3, [pc, #128]	@ (8005e04 <xTaskGenericNotifyFromISR+0x298>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d8a:	61da      	str	r2, [r3, #28]
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d92:	621a      	str	r2, [r3, #32]
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d9a:	3218      	adds	r2, #24
 8005d9c:	605a      	str	r2, [r3, #4]
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da0:	f103 0218 	add.w	r2, r3, #24
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	609a      	str	r2, [r3, #8]
 8005da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005daa:	4a16      	ldr	r2, [pc, #88]	@ (8005e04 <xTaskGenericNotifyFromISR+0x298>)
 8005dac:	629a      	str	r2, [r3, #40]	@ 0x28
 8005dae:	4b15      	ldr	r3, [pc, #84]	@ (8005e04 <xTaskGenericNotifyFromISR+0x298>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	4a13      	ldr	r2, [pc, #76]	@ (8005e04 <xTaskGenericNotifyFromISR+0x298>)
 8005db6:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dbc:	4b12      	ldr	r3, [pc, #72]	@ (8005e08 <xTaskGenericNotifyFromISR+0x29c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d908      	bls.n	8005dd8 <xTaskGenericNotifyFromISR+0x26c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005dc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <xTaskGenericNotifyFromISR+0x266>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dce:	2201      	movs	r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8005dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8005e0c <xTaskGenericNotifyFromISR+0x2a0>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dda:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8005de2:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 8005de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8005de6:	4618      	mov	r0, r3
 8005de8:	3738      	adds	r7, #56	@ 0x38
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	080243c0 	.word	0x080243c0
 8005df4:	20000e8c 	.word	0x20000e8c
 8005df8:	20000eb0 	.word	0x20000eb0
 8005dfc:	20000e90 	.word	0x20000e90
 8005e00:	20000d8c 	.word	0x20000d8c
 8005e04:	20000e48 	.word	0x20000e48
 8005e08:	20000d88 	.word	0x20000d88
 8005e0c:	20000e9c 	.word	0x20000e9c

08005e10 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08e      	sub	sp, #56	@ 0x38
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d104      	bne.n	8005e2c <vTaskGenericNotifyGiveFromISR+0x1c>
 8005e22:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 8005e26:	4871      	ldr	r0, [pc, #452]	@ (8005fec <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8005e28:	f7fb fd96 	bl	8001958 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d004      	beq.n	8005e3c <vTaskGenericNotifyGiveFromISR+0x2c>
 8005e32:	f641 71c1 	movw	r1, #8129	@ 0x1fc1
 8005e36:	486d      	ldr	r0, [pc, #436]	@ (8005fec <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8005e38:	f7fb fd8e 	bl	8001958 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e3c:	f000 fb6e 	bl	800651c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm volatile
 8005e44:	f3ef 8211 	mrs	r2, BASEPRI
 8005e48:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005e4c:	b672      	cpsid	i
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	b662      	cpsie	i
 8005e5c:	61fa      	str	r2, [r7, #28]
 8005e5e:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8005e60:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8005e62:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005e64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	4413      	add	r3, r2
 8005e6a:	3368      	adds	r3, #104	@ 0x68
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005e72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4413      	add	r3, r2
 8005e78:	3368      	adds	r3, #104	@ 0x68
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005e7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	3318      	adds	r3, #24
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	3318      	adds	r3, #24
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	440b      	add	r3, r1
 8005e96:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005e98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	f040 809a 	bne.w	8005fd6 <vTaskGenericNotifyGiveFromISR+0x1c6>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d004      	beq.n	8005eb4 <vTaskGenericNotifyGiveFromISR+0xa4>
 8005eaa:	f641 71ea 	movw	r1, #8170	@ 0x1fea
 8005eae:	484f      	ldr	r0, [pc, #316]	@ (8005fec <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8005eb0:	f7fb fd52 	bl	8001958 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005eb4:	4b4e      	ldr	r3, [pc, #312]	@ (8005ff0 <vTaskGenericNotifyGiveFromISR+0x1e0>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d160      	bne.n	8005f7e <vTaskGenericNotifyGiveFromISR+0x16e>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ec8:	68d2      	ldr	r2, [r2, #12]
 8005eca:	609a      	str	r2, [r3, #8]
 8005ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ed2:	6892      	ldr	r2, [r2, #8]
 8005ed4:	605a      	str	r2, [r3, #4]
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005edc:	3304      	adds	r3, #4
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d103      	bne.n	8005eea <vTaskGenericNotifyGiveFromISR+0xda>
 8005ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	605a      	str	r2, [r3, #4]
 8005eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eec:	2200      	movs	r2, #0
 8005eee:	615a      	str	r2, [r3, #20]
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	1e5a      	subs	r2, r3, #1
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005efe:	2201      	movs	r2, #1
 8005f00:	409a      	lsls	r2, r3
 8005f02:	4b3c      	ldr	r3, [pc, #240]	@ (8005ff4 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	4a3a      	ldr	r2, [pc, #232]	@ (8005ff4 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f10:	4939      	ldr	r1, [pc, #228]	@ (8005ff8 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	623b      	str	r3, [r7, #32]
 8005f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f24:	6a3a      	ldr	r2, [r7, #32]
 8005f26:	609a      	str	r2, [r3, #8]
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2e:	60da      	str	r2, [r3, #12]
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f36:	3204      	adds	r2, #4
 8005f38:	605a      	str	r2, [r3, #4]
 8005f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f3c:	1d1a      	adds	r2, r3, #4
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	609a      	str	r2, [r3, #8]
 8005f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4a2a      	ldr	r2, [pc, #168]	@ (8005ff8 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8005f50:	441a      	add	r2, r3
 8005f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f54:	615a      	str	r2, [r3, #20]
 8005f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f5a:	4927      	ldr	r1, [pc, #156]	@ (8005ff8 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	440b      	add	r3, r1
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f6a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f6c:	1c59      	adds	r1, r3, #1
 8005f6e:	4822      	ldr	r0, [pc, #136]	@ (8005ff8 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8005f70:	4613      	mov	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4403      	add	r3, r0
 8005f7a:	6019      	str	r1, [r3, #0]
 8005f7c:	e01b      	b.n	8005fb6 <vTaskGenericNotifyGiveFromISR+0x1a6>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8005ffc <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f88:	61da      	str	r2, [r3, #28]
 8005f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f90:	621a      	str	r2, [r3, #32]
 8005f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f98:	3218      	adds	r2, #24
 8005f9a:	605a      	str	r2, [r3, #4]
 8005f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f9e:	f103 0218 	add.w	r2, r3, #24
 8005fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa4:	609a      	str	r2, [r3, #8]
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa8:	4a14      	ldr	r2, [pc, #80]	@ (8005ffc <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005faa:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fac:	4b13      	ldr	r3, [pc, #76]	@ (8005ffc <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	4a12      	ldr	r2, [pc, #72]	@ (8005ffc <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005fb4:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fba:	4b11      	ldr	r3, [pc, #68]	@ (8006000 <vTaskGenericNotifyGiveFromISR+0x1f0>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d908      	bls.n	8005fd6 <vTaskGenericNotifyGiveFromISR+0x1c6>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <vTaskGenericNotifyGiveFromISR+0x1c0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8005fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8006004 <vTaskGenericNotifyGiveFromISR+0x1f4>)
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	617b      	str	r3, [r7, #20]
    __asm volatile
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f383 8811 	msr	BASEPRI, r3
}
 8005fe0:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 8005fe2:	bf00      	nop
 8005fe4:	3738      	adds	r7, #56	@ 0x38
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	080243c0 	.word	0x080243c0
 8005ff0:	20000eb0 	.word	0x20000eb0
 8005ff4:	20000e90 	.word	0x20000e90
 8005ff8:	20000d8c 	.word	0x20000d8c
 8005ffc:	20000e48 	.word	0x20000e48
 8006000:	20000d88 	.word	0x20000d88
 8006004:	20000e9c 	.word	0x20000e9c

08006008 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006012:	4b37      	ldr	r3, [pc, #220]	@ (80060f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8006018:	4b36      	ldr	r3, [pc, #216]	@ (80060f4 <prvAddCurrentTaskToDelayedList+0xec>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800601e:	4b36      	ldr	r3, [pc, #216]	@ (80060f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006024:	4b35      	ldr	r3, [pc, #212]	@ (80060fc <prvAddCurrentTaskToDelayedList+0xf4>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3304      	adds	r3, #4
 800602a:	4618      	mov	r0, r3
 800602c:	f7fd fade 	bl	80035ec <uxListRemove>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10b      	bne.n	800604e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006036:	4b31      	ldr	r3, [pc, #196]	@ (80060fc <prvAddCurrentTaskToDelayedList+0xf4>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603c:	2201      	movs	r2, #1
 800603e:	fa02 f303 	lsl.w	r3, r2, r3
 8006042:	43da      	mvns	r2, r3
 8006044:	4b2e      	ldr	r3, [pc, #184]	@ (8006100 <prvAddCurrentTaskToDelayedList+0xf8>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4013      	ands	r3, r2
 800604a:	4a2d      	ldr	r2, [pc, #180]	@ (8006100 <prvAddCurrentTaskToDelayedList+0xf8>)
 800604c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006054:	d124      	bne.n	80060a0 <prvAddCurrentTaskToDelayedList+0x98>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d021      	beq.n	80060a0 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800605c:	4b29      	ldr	r3, [pc, #164]	@ (8006104 <prvAddCurrentTaskToDelayedList+0xfc>)
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	4b26      	ldr	r3, [pc, #152]	@ (80060fc <prvAddCurrentTaskToDelayedList+0xf4>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	609a      	str	r2, [r3, #8]
 800606a:	4b24      	ldr	r3, [pc, #144]	@ (80060fc <prvAddCurrentTaskToDelayedList+0xf4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	6892      	ldr	r2, [r2, #8]
 8006072:	60da      	str	r2, [r3, #12]
 8006074:	4b21      	ldr	r3, [pc, #132]	@ (80060fc <prvAddCurrentTaskToDelayedList+0xf4>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	3204      	adds	r2, #4
 800607e:	605a      	str	r2, [r3, #4]
 8006080:	4b1e      	ldr	r3, [pc, #120]	@ (80060fc <prvAddCurrentTaskToDelayedList+0xf4>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	1d1a      	adds	r2, r3, #4
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	609a      	str	r2, [r3, #8]
 800608a:	4b1c      	ldr	r3, [pc, #112]	@ (80060fc <prvAddCurrentTaskToDelayedList+0xf4>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a1d      	ldr	r2, [pc, #116]	@ (8006104 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006090:	615a      	str	r2, [r3, #20]
 8006092:	4b1c      	ldr	r3, [pc, #112]	@ (8006104 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3301      	adds	r3, #1
 8006098:	4a1a      	ldr	r2, [pc, #104]	@ (8006104 <prvAddCurrentTaskToDelayedList+0xfc>)
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800609e:	e022      	b.n	80060e6 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4413      	add	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060a8:	4b14      	ldr	r3, [pc, #80]	@ (80060fc <prvAddCurrentTaskToDelayedList+0xf4>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d207      	bcs.n	80060c8 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80060b8:	4b10      	ldr	r3, [pc, #64]	@ (80060fc <prvAddCurrentTaskToDelayedList+0xf4>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3304      	adds	r3, #4
 80060be:	4619      	mov	r1, r3
 80060c0:	6978      	ldr	r0, [r7, #20]
 80060c2:	f7fd fa5a 	bl	800357a <vListInsert>
}
 80060c6:	e00e      	b.n	80060e6 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80060c8:	4b0c      	ldr	r3, [pc, #48]	@ (80060fc <prvAddCurrentTaskToDelayedList+0xf4>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4619      	mov	r1, r3
 80060d0:	69b8      	ldr	r0, [r7, #24]
 80060d2:	f7fd fa52 	bl	800357a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80060d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006108 <prvAddCurrentTaskToDelayedList+0x100>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d202      	bcs.n	80060e6 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80060e0:	4a09      	ldr	r2, [pc, #36]	@ (8006108 <prvAddCurrentTaskToDelayedList+0x100>)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6013      	str	r3, [r2, #0]
}
 80060e6:	bf00      	nop
 80060e8:	3720      	adds	r7, #32
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20000e8c 	.word	0x20000e8c
 80060f4:	20000e40 	.word	0x20000e40
 80060f8:	20000e44 	.word	0x20000e44
 80060fc:	20000d88 	.word	0x20000d88
 8006100:	20000e90 	.word	0x20000e90
 8006104:	20000e74 	.word	0x20000e74
 8006108:	20000ea8 	.word	0x20000ea8

0800610c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3b04      	subs	r3, #4
 800611c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006124:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3b04      	subs	r3, #4
 800612a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f023 0201 	bic.w	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3b04      	subs	r3, #4
 800613a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800613c:	4a0c      	ldr	r2, [pc, #48]	@ (8006170 <pxPortInitialiseStack+0x64>)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3b14      	subs	r3, #20
 8006146:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3b04      	subs	r3, #4
 8006152:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f06f 0202 	mvn.w	r2, #2
 800615a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3b20      	subs	r3, #32
 8006160:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006162:	68fb      	ldr	r3, [r7, #12]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	08006175 	.word	0x08006175

08006174 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800617e:	4b0f      	ldr	r3, [pc, #60]	@ (80061bc <prvTaskExitError+0x48>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006186:	d003      	beq.n	8006190 <prvTaskExitError+0x1c>
 8006188:	21ee      	movs	r1, #238	@ 0xee
 800618a:	480d      	ldr	r0, [pc, #52]	@ (80061c0 <prvTaskExitError+0x4c>)
 800618c:	f7fb fbe4 	bl	8001958 <vAssertCalled>
    __asm volatile
 8006190:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006194:	b672      	cpsid	i
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	b662      	cpsie	i
 80061a4:	607b      	str	r3, [r7, #4]
}
 80061a6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80061a8:	bf00      	nop
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0fc      	beq.n	80061aa <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80061b0:	bf00      	nop
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	2000000c 	.word	0x2000000c
 80061c0:	080243ec 	.word	0x080243ec
	...

080061d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80061d0:	4b07      	ldr	r3, [pc, #28]	@ (80061f0 <pxCurrentTCBConst2>)
 80061d2:	6819      	ldr	r1, [r3, #0]
 80061d4:	6808      	ldr	r0, [r1, #0]
 80061d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061da:	f380 8809 	msr	PSP, r0
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f04f 0000 	mov.w	r0, #0
 80061e6:	f380 8811 	msr	BASEPRI, r0
 80061ea:	4770      	bx	lr
 80061ec:	f3af 8000 	nop.w

080061f0 <pxCurrentTCBConst2>:
 80061f0:	20000d88 	.word	0x20000d88
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80061f4:	bf00      	nop
 80061f6:	bf00      	nop

080061f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80061f8:	4808      	ldr	r0, [pc, #32]	@ (800621c <prvPortStartFirstTask+0x24>)
 80061fa:	6800      	ldr	r0, [r0, #0]
 80061fc:	6800      	ldr	r0, [r0, #0]
 80061fe:	f380 8808 	msr	MSP, r0
 8006202:	f04f 0000 	mov.w	r0, #0
 8006206:	f380 8814 	msr	CONTROL, r0
 800620a:	b662      	cpsie	i
 800620c:	b661      	cpsie	f
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	df00      	svc	0
 8006218:	bf00      	nop
 800621a:	0000      	.short	0x0000
 800621c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8006220:	bf00      	nop
 8006222:	bf00      	nop

08006224 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800622a:	4b4a      	ldr	r3, [pc, #296]	@ (8006354 <xPortStartScheduler+0x130>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	617b      	str	r3, [r7, #20]
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	332c      	adds	r3, #44	@ 0x2c
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a48      	ldr	r2, [pc, #288]	@ (8006358 <xPortStartScheduler+0x134>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d004      	beq.n	8006246 <xPortStartScheduler+0x22>
 800623c:	f240 114b 	movw	r1, #331	@ 0x14b
 8006240:	4846      	ldr	r0, [pc, #280]	@ (800635c <xPortStartScheduler+0x138>)
 8006242:	f7fb fb89 	bl	8001958 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	3338      	adds	r3, #56	@ 0x38
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a44      	ldr	r2, [pc, #272]	@ (8006360 <xPortStartScheduler+0x13c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d004      	beq.n	800625c <xPortStartScheduler+0x38>
 8006252:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8006256:	4841      	ldr	r0, [pc, #260]	@ (800635c <xPortStartScheduler+0x138>)
 8006258:	f7fb fb7e 	bl	8001958 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006260:	4b40      	ldr	r3, [pc, #256]	@ (8006364 <xPortStartScheduler+0x140>)
 8006262:	613b      	str	r3, [r7, #16]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	22ff      	movs	r2, #255	@ 0xff
 8006270:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	b2db      	uxtb	r3, r3
 8006278:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	b2db      	uxtb	r3, r3
 800627e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006282:	b2da      	uxtb	r2, r3
 8006284:	4b38      	ldr	r3, [pc, #224]	@ (8006368 <xPortStartScheduler+0x144>)
 8006286:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8006288:	4b37      	ldr	r3, [pc, #220]	@ (8006368 <xPortStartScheduler+0x144>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d104      	bne.n	800629a <xPortStartScheduler+0x76>
 8006290:	f240 116f 	movw	r1, #367	@ 0x16f
 8006294:	4831      	ldr	r0, [pc, #196]	@ (800635c <xPortStartScheduler+0x138>)
 8006296:	f7fb fb5f 	bl	8001958 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	43db      	mvns	r3, r3
 80062a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00d      	beq.n	80062c4 <xPortStartScheduler+0xa0>
 80062a8:	f240 1173 	movw	r1, #371	@ 0x173
 80062ac:	482b      	ldr	r0, [pc, #172]	@ (800635c <xPortStartScheduler+0x138>)
 80062ae:	f7fb fb53 	bl	8001958 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062b2:	e007      	b.n	80062c4 <xPortStartScheduler+0xa0>
        {
            ulImplementedPrioBits++;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	3301      	adds	r3, #1
 80062b8:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062c4:	79fb      	ldrb	r3, [r7, #7]
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062cc:	2b80      	cmp	r3, #128	@ 0x80
 80062ce:	d0f1      	beq.n	80062b4 <xPortStartScheduler+0x90>
        }

        if( ulImplementedPrioBits == 8 )
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b08      	cmp	r3, #8
 80062d4:	d103      	bne.n	80062de <xPortStartScheduler+0xba>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80062d6:	4b25      	ldr	r3, [pc, #148]	@ (800636c <xPortStartScheduler+0x148>)
 80062d8:	2200      	movs	r2, #0
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	e004      	b.n	80062e8 <xPortStartScheduler+0xc4>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f1c3 0307 	rsb	r3, r3, #7
 80062e4:	4a21      	ldr	r2, [pc, #132]	@ (800636c <xPortStartScheduler+0x148>)
 80062e6:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062e8:	4b20      	ldr	r3, [pc, #128]	@ (800636c <xPortStartScheduler+0x148>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	021b      	lsls	r3, r3, #8
 80062ee:	4a1f      	ldr	r2, [pc, #124]	@ (800636c <xPortStartScheduler+0x148>)
 80062f0:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062f2:	4b1e      	ldr	r3, [pc, #120]	@ (800636c <xPortStartScheduler+0x148>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062fa:	4a1c      	ldr	r2, [pc, #112]	@ (800636c <xPortStartScheduler+0x148>)
 80062fc:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	b2da      	uxtb	r2, r3
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006306:	4b1a      	ldr	r3, [pc, #104]	@ (8006370 <xPortStartScheduler+0x14c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a19      	ldr	r2, [pc, #100]	@ (8006370 <xPortStartScheduler+0x14c>)
 800630c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006310:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006312:	4b17      	ldr	r3, [pc, #92]	@ (8006370 <xPortStartScheduler+0x14c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a16      	ldr	r2, [pc, #88]	@ (8006370 <xPortStartScheduler+0x14c>)
 8006318:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800631c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800631e:	4b15      	ldr	r3, [pc, #84]	@ (8006374 <xPortStartScheduler+0x150>)
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006324:	f000 f8d4 	bl	80064d0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006328:	4b13      	ldr	r3, [pc, #76]	@ (8006378 <xPortStartScheduler+0x154>)
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800632e:	f000 f8e9 	bl	8006504 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006332:	4b12      	ldr	r3, [pc, #72]	@ (800637c <xPortStartScheduler+0x158>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a11      	ldr	r2, [pc, #68]	@ (800637c <xPortStartScheduler+0x158>)
 8006338:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800633c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800633e:	f7ff ff5b 	bl	80061f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006342:	f7fe fbf1 	bl	8004b28 <vTaskSwitchContext>
    prvTaskExitError();
 8006346:	f7ff ff15 	bl	8006174 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	e000ed08 	.word	0xe000ed08
 8006358:	080061d1 	.word	0x080061d1
 800635c:	080243ec 	.word	0x080243ec
 8006360:	08006421 	.word	0x08006421
 8006364:	e000e400 	.word	0xe000e400
 8006368:	20000ebc 	.word	0x20000ebc
 800636c:	20000ec0 	.word	0x20000ec0
 8006370:	e000ed20 	.word	0xe000ed20
 8006374:	e000ed1c 	.word	0xe000ed1c
 8006378:	2000000c 	.word	0x2000000c
 800637c:	e000ef34 	.word	0xe000ef34

08006380 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
    __asm volatile
 8006386:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800638a:	b672      	cpsid	i
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	b662      	cpsie	i
 800639a:	607b      	str	r3, [r7, #4]
}
 800639c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800639e:	4b0b      	ldr	r3, [pc, #44]	@ (80063cc <vPortEnterCritical+0x4c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3301      	adds	r3, #1
 80063a4:	4a09      	ldr	r2, [pc, #36]	@ (80063cc <vPortEnterCritical+0x4c>)
 80063a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80063a8:	4b08      	ldr	r3, [pc, #32]	@ (80063cc <vPortEnterCritical+0x4c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d109      	bne.n	80063c4 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063b0:	4b07      	ldr	r3, [pc, #28]	@ (80063d0 <vPortEnterCritical+0x50>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d004      	beq.n	80063c4 <vPortEnterCritical+0x44>
 80063ba:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 80063be:	4805      	ldr	r0, [pc, #20]	@ (80063d4 <vPortEnterCritical+0x54>)
 80063c0:	f7fb faca 	bl	8001958 <vAssertCalled>
    }
}
 80063c4:	bf00      	nop
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	2000000c 	.word	0x2000000c
 80063d0:	e000ed04 	.word	0xe000ed04
 80063d4:	080243ec 	.word	0x080243ec

080063d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80063de:	4b0e      	ldr	r3, [pc, #56]	@ (8006418 <vPortExitCritical+0x40>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d104      	bne.n	80063f0 <vPortExitCritical+0x18>
 80063e6:	f240 11e3 	movw	r1, #483	@ 0x1e3
 80063ea:	480c      	ldr	r0, [pc, #48]	@ (800641c <vPortExitCritical+0x44>)
 80063ec:	f7fb fab4 	bl	8001958 <vAssertCalled>
    uxCriticalNesting--;
 80063f0:	4b09      	ldr	r3, [pc, #36]	@ (8006418 <vPortExitCritical+0x40>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	4a08      	ldr	r2, [pc, #32]	@ (8006418 <vPortExitCritical+0x40>)
 80063f8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80063fa:	4b07      	ldr	r3, [pc, #28]	@ (8006418 <vPortExitCritical+0x40>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d105      	bne.n	800640e <vPortExitCritical+0x36>
 8006402:	2300      	movs	r3, #0
 8006404:	607b      	str	r3, [r7, #4]
    __asm volatile
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f383 8811 	msr	BASEPRI, r3
}
 800640c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	2000000c 	.word	0x2000000c
 800641c:	080243ec 	.word	0x080243ec

08006420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006420:	f3ef 8009 	mrs	r0, PSP
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	4b15      	ldr	r3, [pc, #84]	@ (8006480 <pxCurrentTCBConst>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	f01e 0f10 	tst.w	lr, #16
 8006430:	bf08      	it	eq
 8006432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643a:	6010      	str	r0, [r2, #0]
 800643c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006440:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8006444:	b672      	cpsid	i
 8006446:	f380 8811 	msr	BASEPRI, r0
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	b662      	cpsie	i
 8006454:	f7fe fb68 	bl	8004b28 <vTaskSwitchContext>
 8006458:	f04f 0000 	mov.w	r0, #0
 800645c:	f380 8811 	msr	BASEPRI, r0
 8006460:	bc09      	pop	{r0, r3}
 8006462:	6819      	ldr	r1, [r3, #0]
 8006464:	6808      	ldr	r0, [r1, #0]
 8006466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646a:	f01e 0f10 	tst.w	lr, #16
 800646e:	bf08      	it	eq
 8006470:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006474:	f380 8809 	msr	PSP, r0
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop

08006480 <pxCurrentTCBConst>:
 8006480:	20000d88 	.word	0x20000d88
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop

08006488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
    __asm volatile
 800648e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006492:	b672      	cpsid	i
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	b662      	cpsie	i
 80064a2:	607b      	str	r3, [r7, #4]
}
 80064a4:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80064a6:	f7fe fa2b 	bl	8004900 <xTaskIncrementTick>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064b0:	4b06      	ldr	r3, [pc, #24]	@ (80064cc <xPortSysTickHandler+0x44>)
 80064b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	2300      	movs	r3, #0
 80064ba:	603b      	str	r3, [r7, #0]
    __asm volatile
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	f383 8811 	msr	BASEPRI, r3
}
 80064c2:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	e000ed04 	.word	0xe000ed04

080064d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064d4:	4b08      	ldr	r3, [pc, #32]	@ (80064f8 <vPortSetupTimerInterrupt+0x28>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064da:	4b08      	ldr	r3, [pc, #32]	@ (80064fc <vPortSetupTimerInterrupt+0x2c>)
 80064dc:	2200      	movs	r2, #0
 80064de:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064e0:	4b07      	ldr	r3, [pc, #28]	@ (8006500 <vPortSetupTimerInterrupt+0x30>)
 80064e2:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80064e6:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064e8:	4b03      	ldr	r3, [pc, #12]	@ (80064f8 <vPortSetupTimerInterrupt+0x28>)
 80064ea:	2203      	movs	r2, #3
 80064ec:	601a      	str	r2, [r3, #0]
}
 80064ee:	bf00      	nop
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	e000e010 	.word	0xe000e010
 80064fc:	e000e018 	.word	0xe000e018
 8006500:	e000e014 	.word	0xe000e014

08006504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006504:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006514 <vPortEnableVFP+0x10>
 8006508:	6801      	ldr	r1, [r0, #0]
 800650a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800650e:	6001      	str	r1, [r0, #0]
 8006510:	4770      	bx	lr
 8006512:	0000      	.short	0x0000
 8006514:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8006518:	bf00      	nop
 800651a:	bf00      	nop

0800651c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006522:	f3ef 8305 	mrs	r3, IPSR
 8006526:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b0f      	cmp	r3, #15
 800652c:	d90e      	bls.n	800654c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800652e:	4a10      	ldr	r2, [pc, #64]	@ (8006570 <vPortValidateInterruptPriority+0x54>)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4413      	add	r3, r2
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006538:	4b0e      	ldr	r3, [pc, #56]	@ (8006574 <vPortValidateInterruptPriority+0x58>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	78fa      	ldrb	r2, [r7, #3]
 800653e:	429a      	cmp	r2, r3
 8006540:	d204      	bcs.n	800654c <vPortValidateInterruptPriority+0x30>
 8006542:	f44f 715c 	mov.w	r1, #880	@ 0x370
 8006546:	480c      	ldr	r0, [pc, #48]	@ (8006578 <vPortValidateInterruptPriority+0x5c>)
 8006548:	f7fb fa06 	bl	8001958 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800654c:	4b0b      	ldr	r3, [pc, #44]	@ (800657c <vPortValidateInterruptPriority+0x60>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006554:	4b0a      	ldr	r3, [pc, #40]	@ (8006580 <vPortValidateInterruptPriority+0x64>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	429a      	cmp	r2, r3
 800655a:	d904      	bls.n	8006566 <vPortValidateInterruptPriority+0x4a>
 800655c:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8006560:	4805      	ldr	r0, [pc, #20]	@ (8006578 <vPortValidateInterruptPriority+0x5c>)
 8006562:	f7fb f9f9 	bl	8001958 <vAssertCalled>
    }
 8006566:	bf00      	nop
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	e000e3f0 	.word	0xe000e3f0
 8006574:	20000ebc 	.word	0x20000ebc
 8006578:	080243ec 	.word	0x080243ec
 800657c:	e000ed0c 	.word	0xe000ed0c
 8006580:	20000ec0 	.word	0x20000ec0

08006584 <pvPortMalloc>:
#endif /* configENABLE_HEAP_PROTECTOR */

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800658c:	2300      	movs	r3, #0
 800658e:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    /* The heap must be initialised before the first call to
     * pvPortMalloc(). */
    configASSERT( pxEnd );
 8006590:	4b60      	ldr	r3, [pc, #384]	@ (8006714 <pvPortMalloc+0x190>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d103      	bne.n	80065a0 <pvPortMalloc+0x1c>
 8006598:	21da      	movs	r1, #218	@ 0xda
 800659a:	485f      	ldr	r0, [pc, #380]	@ (8006718 <pvPortMalloc+0x194>)
 800659c:	f7fb f9dc 	bl	8001958 <vAssertCalled>

    if( xWantedSize > 0 )
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d022      	beq.n	80065ec <pvPortMalloc+0x68>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80065a6:	2308      	movs	r3, #8
 80065a8:	43db      	mvns	r3, r3
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d81b      	bhi.n	80065e8 <pvPortMalloc+0x64>
        {
            xWantedSize += xHeapStructSize;
 80065b0:	2208      	movs	r2, #8
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4413      	add	r3, r2
 80065b6:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f003 0307 	and.w	r3, r3, #7
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d014      	beq.n	80065ec <pvPortMalloc+0x68>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	f1c3 0308 	rsb	r3, r3, #8
 80065cc:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	43db      	mvns	r3, r3
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d804      	bhi.n	80065e2 <pvPortMalloc+0x5e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	4413      	add	r3, r2
 80065de:	607b      	str	r3, [r7, #4]
 80065e0:	e004      	b.n	80065ec <pvPortMalloc+0x68>
                }
                else
                {
                    xWantedSize = 0;
 80065e2:	2300      	movs	r3, #0
 80065e4:	607b      	str	r3, [r7, #4]
 80065e6:	e001      	b.n	80065ec <pvPortMalloc+0x68>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80065ec:	f7fe f848 	bl	8004680 <vTaskSuspendAll>
    {
        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	db78      	blt.n	80066e8 <pvPortMalloc+0x164>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d075      	beq.n	80066e8 <pvPortMalloc+0x164>
 80065fc:	4b47      	ldr	r3, [pc, #284]	@ (800671c <pvPortMalloc+0x198>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	429a      	cmp	r2, r3
 8006604:	d870      	bhi.n	80066e8 <pvPortMalloc+0x164>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006606:	4b46      	ldr	r3, [pc, #280]	@ (8006720 <pvPortMalloc+0x19c>)
 8006608:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 800660a:	4b45      	ldr	r3, [pc, #276]	@ (8006720 <pvPortMalloc+0x19c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8006610:	e004      	b.n	800661c <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	429a      	cmp	r2, r3
 8006624:	d903      	bls.n	800662e <pvPortMalloc+0xaa>
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1f1      	bne.n	8006612 <pvPortMalloc+0x8e>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800662e:	4b39      	ldr	r3, [pc, #228]	@ (8006714 <pvPortMalloc+0x190>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69fa      	ldr	r2, [r7, #28]
 8006634:	429a      	cmp	r2, r3
 8006636:	d057      	beq.n	80066e8 <pvPortMalloc+0x164>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2208      	movs	r2, #8
 800663e:	4413      	add	r3, r2
 8006640:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	429a      	cmp	r2, r3
 8006652:	d904      	bls.n	800665e <pvPortMalloc+0xda>
 8006654:	f240 1129 	movw	r1, #297	@ 0x129
 8006658:	482f      	ldr	r0, [pc, #188]	@ (8006718 <pvPortMalloc+0x194>)
 800665a:	f7fb f97d 	bl	8001958 <vAssertCalled>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	1ad2      	subs	r2, r2, r3
 8006666:	2308      	movs	r3, #8
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	429a      	cmp	r2, r3
 800666c:	d91d      	bls.n	80066aa <pvPortMalloc+0x126>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800666e:	69fa      	ldr	r2, [r7, #28]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4413      	add	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	2b00      	cmp	r3, #0
 800667e:	d004      	beq.n	800668a <pvPortMalloc+0x106>
 8006680:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8006684:	4824      	ldr	r0, [pc, #144]	@ (8006718 <pvPortMalloc+0x194>)
 8006686:	f7fb f967 	bl	8001958 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	1ad2      	subs	r2, r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066aa:	4b1c      	ldr	r3, [pc, #112]	@ (800671c <pvPortMalloc+0x198>)
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	4a19      	ldr	r2, [pc, #100]	@ (800671c <pvPortMalloc+0x198>)
 80066b6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066b8:	4b18      	ldr	r3, [pc, #96]	@ (800671c <pvPortMalloc+0x198>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	4b19      	ldr	r3, [pc, #100]	@ (8006724 <pvPortMalloc+0x1a0>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d203      	bcs.n	80066cc <pvPortMalloc+0x148>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066c4:	4b15      	ldr	r3, [pc, #84]	@ (800671c <pvPortMalloc+0x198>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a16      	ldr	r2, [pc, #88]	@ (8006724 <pvPortMalloc+0x1a0>)
 80066ca:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80066de:	4b12      	ldr	r3, [pc, #72]	@ (8006728 <pvPortMalloc+0x1a4>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3301      	adds	r3, #1
 80066e4:	4a10      	ldr	r2, [pc, #64]	@ (8006728 <pvPortMalloc+0x1a4>)
 80066e6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80066e8:	f7fd ffd8 	bl	800469c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <pvPortMalloc+0x172>
        {
            vApplicationMallocFailedHook();
 80066f2:	f7fb f945 	bl	8001980 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d004      	beq.n	800670a <pvPortMalloc+0x186>
 8006700:	f240 1173 	movw	r1, #371	@ 0x173
 8006704:	4804      	ldr	r0, [pc, #16]	@ (8006718 <pvPortMalloc+0x194>)
 8006706:	f7fb f927 	bl	8001958 <vAssertCalled>
    return pvReturn;
 800670a:	697b      	ldr	r3, [r7, #20]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3720      	adds	r7, #32
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20000ecc 	.word	0x20000ecc
 8006718:	08024428 	.word	0x08024428
 800671c:	20000ed0 	.word	0x20000ed0
 8006720:	20000ec4 	.word	0x20000ec4
 8006724:	20000ed4 	.word	0x20000ed4
 8006728:	20000ed8 	.word	0x20000ed8

0800672c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d03d      	beq.n	80067ba <vPortFree+0x8e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800673e:	2308      	movs	r3, #8
 8006740:	425b      	negs	r3, r3
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4413      	add	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	db04      	blt.n	800675e <vPortFree+0x32>
 8006754:	f240 1187 	movw	r1, #391	@ 0x187
 8006758:	481a      	ldr	r0, [pc, #104]	@ (80067c4 <vPortFree+0x98>)
 800675a:	f7fb f8fd 	bl	8001958 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d004      	beq.n	8006770 <vPortFree+0x44>
 8006766:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 800676a:	4816      	ldr	r0, [pc, #88]	@ (80067c4 <vPortFree+0x98>)
 800676c:	f7fb f8f4 	bl	8001958 <vAssertCalled>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	0fdb      	lsrs	r3, r3, #31
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01c      	beq.n	80067ba <vPortFree+0x8e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d118      	bne.n	80067ba <vPortFree+0x8e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8006794:	f7fd ff74 	bl	8004680 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	4b0a      	ldr	r3, [pc, #40]	@ (80067c8 <vPortFree+0x9c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4413      	add	r3, r2
 80067a2:	4a09      	ldr	r2, [pc, #36]	@ (80067c8 <vPortFree+0x9c>)
 80067a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067a6:	68b8      	ldr	r0, [r7, #8]
 80067a8:	f000 f82a 	bl	8006800 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80067ac:	4b07      	ldr	r3, [pc, #28]	@ (80067cc <vPortFree+0xa0>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3301      	adds	r3, #1
 80067b2:	4a06      	ldr	r2, [pc, #24]	@ (80067cc <vPortFree+0xa0>)
 80067b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80067b6:	f7fd ff71 	bl	800469c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80067ba:	bf00      	nop
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	08024428 	.word	0x08024428
 80067c8:	20000ed0 	.word	0x20000ed0
 80067cc:	20000edc 	.word	0x20000edc

080067d0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80067d0:	b480      	push	{r7}
 80067d2:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 80067d4:	4b03      	ldr	r3, [pc, #12]	@ (80067e4 <xPortGetFreeHeapSize+0x14>)
 80067d6:	681b      	ldr	r3, [r3, #0]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	20000ed0 	.word	0x20000ed0

080067e8 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 80067ec:	4b03      	ldr	r3, [pc, #12]	@ (80067fc <xPortGetMinimumEverFreeHeapSize+0x14>)
 80067ee:	681b      	ldr	r3, [r3, #0]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	20000ed4 	.word	0x20000ed4

08006800 <prvInsertBlockIntoFreeList>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006808:	4b28      	ldr	r3, [pc, #160]	@ (80068ac <prvInsertBlockIntoFreeList+0xac>)
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	e002      	b.n	8006814 <prvInsertBlockIntoFreeList+0x14>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	429a      	cmp	r2, r3
 800681c:	d8f7      	bhi.n	800680e <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	4413      	add	r3, r2
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	429a      	cmp	r2, r3
 800682e:	d108      	bne.n	8006842 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	441a      	add	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	441a      	add	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d118      	bne.n	8006888 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	4b15      	ldr	r3, [pc, #84]	@ (80068b0 <prvInsertBlockIntoFreeList+0xb0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	429a      	cmp	r2, r3
 8006860:	d00d      	beq.n	800687e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	441a      	add	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	e008      	b.n	8006890 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800687e:	4b0c      	ldr	r3, [pc, #48]	@ (80068b0 <prvInsertBlockIntoFreeList+0xb0>)
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	e003      	b.n	8006890 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	429a      	cmp	r2, r3
 8006896:	d002      	beq.n	800689e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800689e:	bf00      	nop
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	20000ec4 	.word	0x20000ec4
 80068b0:	20000ecc 	.word	0x20000ecc

080068b4 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) /* PRIVILEGED_FUNCTION */
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08a      	sub	sp, #40	@ 0x28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxFirstFreeBlockInRegion = NULL;
 80068bc:	2300      	movs	r3, #0
 80068be:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxPreviousFreeBlock;
    portPOINTER_SIZE_TYPE xAlignedHeap;
    size_t xTotalRegionSize, xTotalHeapSize = 0;
 80068c0:	2300      	movs	r3, #0
 80068c2:	623b      	str	r3, [r7, #32]
    BaseType_t xDefinedRegions = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	61fb      	str	r3, [r7, #28]
    portPOINTER_SIZE_TYPE xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
 80068c8:	4b4b      	ldr	r3, [pc, #300]	@ (80069f8 <vPortDefineHeapRegions+0x144>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d004      	beq.n	80068da <vPortDefineHeapRegions+0x26>
 80068d0:	f240 2121 	movw	r1, #545	@ 0x221
 80068d4:	4849      	ldr	r0, [pc, #292]	@ (80069fc <vPortDefineHeapRegions+0x148>)
 80068d6:	f7fb f83f 	bl	8001958 <vAssertCalled>
    {
        vApplicationGetRandomHeapCanary( &( xHeapCanary ) );
    }
    #endif

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	4413      	add	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]

    while( pxHeapRegion->xSizeInBytes > 0 )
 80068e4:	e071      	b.n	80069ca <vPortDefineHeapRegions+0x116>
    {
        xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Ensure the heap region starts on a correctly aligned boundary. */
        xAddress = ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	61bb      	str	r3, [r7, #24]

        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00e      	beq.n	800691a <vPortDefineHeapRegions+0x66>
        {
            xAddress += ( portBYTE_ALIGNMENT - 1 );
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	3307      	adds	r3, #7
 8006900:	61bb      	str	r3, [r7, #24]
            xAddress &= ~( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK;
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	f023 0307 	bic.w	r3, r3, #7
 8006908:	61bb      	str	r3, [r7, #24]

            /* Adjust the size for the bytes lost to alignment. */
            xTotalRegionSize -= ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress );
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006916:	4413      	add	r3, r2
 8006918:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        xAlignedHeap = xAddress;
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	60fb      	str	r3, [r7, #12]

        /* Set xStart if it has not already been set. */
        if( xDefinedRegions == 0 )
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d106      	bne.n	8006932 <vPortDefineHeapRegions+0x7e>
        {
            /* xStart is used to hold a pointer to the first item in the list of
             *  free blocks.  The void cast is used to prevent compiler warnings. */
            xStart.pxNextFreeBlock = ( BlockLink_t * ) heapPROTECT_BLOCK_POINTER( xAlignedHeap );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4a36      	ldr	r2, [pc, #216]	@ (8006a00 <vPortDefineHeapRegions+0x14c>)
 8006928:	6013      	str	r3, [r2, #0]
            xStart.xBlockSize = ( size_t ) 0;
 800692a:	4b35      	ldr	r3, [pc, #212]	@ (8006a00 <vPortDefineHeapRegions+0x14c>)
 800692c:	2200      	movs	r2, #0
 800692e:	605a      	str	r2, [r3, #4]
 8006930:	e013      	b.n	800695a <vPortDefineHeapRegions+0xa6>
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != heapPROTECT_BLOCK_POINTER( NULL ) );
 8006932:	4b31      	ldr	r3, [pc, #196]	@ (80069f8 <vPortDefineHeapRegions+0x144>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d104      	bne.n	8006944 <vPortDefineHeapRegions+0x90>
 800693a:	f240 2149 	movw	r1, #585	@ 0x249
 800693e:	482f      	ldr	r0, [pc, #188]	@ (80069fc <vPortDefineHeapRegions+0x148>)
 8006940:	f7fb f80a 	bl	8001958 <vAssertCalled>

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( ( size_t ) xAddress > ( size_t ) pxEnd );
 8006944:	4b2c      	ldr	r3, [pc, #176]	@ (80069f8 <vPortDefineHeapRegions+0x144>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	4293      	cmp	r3, r2
 800694e:	d804      	bhi.n	800695a <vPortDefineHeapRegions+0xa6>
 8006950:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8006954:	4829      	ldr	r0, [pc, #164]	@ (80069fc <vPortDefineHeapRegions+0x148>)
 8006956:	f7fa ffff 	bl	8001958 <vAssertCalled>
        }
        #endif /* configENABLE_HEAP_PROTECTOR */

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
 800695a:	4b27      	ldr	r3, [pc, #156]	@ (80069f8 <vPortDefineHeapRegions+0x144>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	60bb      	str	r3, [r7, #8]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + ( portPOINTER_SIZE_TYPE ) xTotalRegionSize;
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006964:	4413      	add	r3, r2
 8006966:	61bb      	str	r3, [r7, #24]
        xAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8006968:	2208      	movs	r2, #8
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	1a9b      	subs	r3, r3, r2
 800696e:	61bb      	str	r3, [r7, #24]
        xAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	f023 0307 	bic.w	r3, r3, #7
 8006976:	61bb      	str	r3, [r7, #24]
        pxEnd = ( BlockLink_t * ) xAddress;
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	4a1f      	ldr	r2, [pc, #124]	@ (80069f8 <vPortDefineHeapRegions+0x144>)
 800697c:	6013      	str	r3, [r2, #0]
        pxEnd->xBlockSize = 0;
 800697e:	4b1e      	ldr	r3, [pc, #120]	@ (80069f8 <vPortDefineHeapRegions+0x144>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2200      	movs	r2, #0
 8006984:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8006986:	4b1c      	ldr	r3, [pc, #112]	@ (80069f8 <vPortDefineHeapRegions+0x144>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2200      	movs	r2, #0
 800698c:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	613b      	str	r3, [r7, #16]
        pxFirstFreeBlockInRegion->xBlockSize = ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlockInRegion );
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	1ad2      	subs	r2, r2, r3
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	605a      	str	r2, [r3, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800699c:	4b16      	ldr	r3, [pc, #88]	@ (80069f8 <vPortDefineHeapRegions+0x144>)
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	601a      	str	r2, [r3, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <vPortDefineHeapRegions+0xfc>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxFirstFreeBlockInRegion );
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	601a      	str	r2, [r3, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	6a3a      	ldr	r2, [r7, #32]
 80069b6:	4413      	add	r3, r2
 80069b8:	623b      	str	r3, [r7, #32]
            }
        }
        #endif

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	3301      	adds	r3, #1
 80069be:	61fb      	str	r3, [r7, #28]
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	4413      	add	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]
    while( pxHeapRegion->xSizeInBytes > 0 )
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d189      	bne.n	80068e6 <vPortDefineHeapRegions+0x32>
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 80069d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006a04 <vPortDefineHeapRegions+0x150>)
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
 80069d8:	4a0b      	ldr	r2, [pc, #44]	@ (8006a08 <vPortDefineHeapRegions+0x154>)
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	6013      	str	r3, [r2, #0]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d104      	bne.n	80069ee <vPortDefineHeapRegions+0x13a>
 80069e4:	f240 2189 	movw	r1, #649	@ 0x289
 80069e8:	4804      	ldr	r0, [pc, #16]	@ (80069fc <vPortDefineHeapRegions+0x148>)
 80069ea:	f7fa ffb5 	bl	8001958 <vAssertCalled>
}
 80069ee:	bf00      	nop
 80069f0:	3728      	adds	r7, #40	@ 0x28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20000ecc 	.word	0x20000ecc
 80069fc:	08024428 	.word	0x08024428
 8006a00:	20000ec4 	.word	0x20000ec4
 8006a04:	20000ed4 	.word	0x20000ed4
 8006a08:	20000ed0 	.word	0x20000ed0

08006a0c <eARPProcessPacket>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be processed.
 *
 * @return An enum which says whether to return the frame or to release it.
 */
    eFrameProcessingResult_t eARPProcessPacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b090      	sub	sp, #64	@ 0x40
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ARPPacket_t * pxARPFrame = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a18:	63bb      	str	r3, [r7, #56]	@ 0x38
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;
        NetworkEndPoint_t * pxTargetEndPoint = pxNetworkBuffer->pxEndPoint;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a24:	637b      	str	r3, [r7, #52]	@ 0x34
         * period. */
        static UBaseType_t uxARPClashCounter = 0U;
        /* The time at which the last ARP clash was sent. */
        static TimeOut_t xARPClashTimeOut;

        pxARPHeader = &( pxARPFrame->xARPHeader );
 8006a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a28:	330e      	adds	r3, #14
 8006a2a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Only Ethernet hardware type is supported.
         * Only IPv4 address can be present in the ARP packet.
         * The hardware length (the MAC address) must be 6 bytes. And,
         * The Protocol address length must be 4 bytes as it is IPv4. */
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a36:	f040 81bb 	bne.w	8006db0 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	885b      	ldrh	r3, [r3, #2]
 8006a3e:	b29b      	uxth	r3, r3
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	f040 81b5 	bne.w	8006db0 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8006a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a48:	791b      	ldrb	r3, [r3, #4]
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 8006a4a:	2b06      	cmp	r3, #6
 8006a4c:	f040 81b0 	bne.w	8006db0 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 8006a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a52:	795b      	ldrb	r3, [r3, #5]
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	f040 81ab 	bne.w	8006db0 <eARPProcessPacket+0x3a4>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5c:	330e      	adds	r3, #14
 8006a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &ulSenderProtocolAddress;
 8006a60:	f107 0320 	add.w	r3, r7, #32
 8006a64:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 8006a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6e:	601a      	str	r2, [r3, #0]
            /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
            ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8006a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxARPClashCounter != 0U )
 8006a76:	4b9c      	ldr	r3, [pc, #624]	@ (8006ce8 <eARPProcessPacket+0x2dc>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d009      	beq.n	8006a92 <eARPProcessPacket+0x86>
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xARPClashTimeOut, &uxARPClashTimeoutPeriod ) == pdTRUE )
 8006a7e:	499b      	ldr	r1, [pc, #620]	@ (8006cec <eARPProcessPacket+0x2e0>)
 8006a80:	489b      	ldr	r0, [pc, #620]	@ (8006cf0 <eARPProcessPacket+0x2e4>)
 8006a82:	f7fe faf1 	bl	8005068 <xTaskCheckForTimeOut>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d102      	bne.n	8006a92 <eARPProcessPacket+0x86>
                {
                    /* We have waited long enough, reset the counter. */
                    uxARPClashCounter = 0;
 8006a8c:	4b96      	ldr	r3, [pc, #600]	@ (8006ce8 <eARPProcessPacket+0x2dc>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]
                }
            }

            /* Check whether the lowest bit of the highest byte is 1 to check for
             * multicast address or even a broadcast address (FF:FF:FF:FF:FF:FF). */
            if( ( pxARPHeader->xSenderHardwareAddress.ucBytes[ 0 ] & 0x01U ) == 0x01U )
 8006a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a94:	7a1b      	ldrb	r3, [r3, #8]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f040 8188 	bne.w	8006db0 <eARPProcessPacket+0x3a4>
                /* Senders address is a multicast OR broadcast address which is not
                 * allowed for an ARP packet. Drop the packet. See RFC 1812 section
                 * 3.3.2. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	061a      	lsls	r2, r3, #24
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006aac:	431a      	orrs	r2, r3
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	0a1b      	lsrs	r3, r3, #8
 8006ab2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	0e1b      	lsrs	r3, r3, #24
 8006abc:	4313      	orrs	r3, r2
 8006abe:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8006ac2:	d311      	bcc.n	8006ae8 <eARPProcessPacket+0xdc>
                     ( ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) < ipLAST_LOOPBACK_IPv4 ) )
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	061a      	lsls	r2, r3, #24
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	021b      	lsls	r3, r3, #8
 8006acc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	0a1b      	lsrs	r3, r3, #8
 8006ad6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006ada:	431a      	orrs	r2, r3
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	0e1b      	lsrs	r3, r3, #24
 8006ae0:	4313      	orrs	r3, r2
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f280 8164 	bge.w	8006db0 <eARPProcessPacket+0x3a4>
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            /* Check whether there is a clash with another device for this IP address. */
            else if( ( pxTargetEndPoint != NULL ) && ( ulSenderProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) )
 8006ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d021      	beq.n	8006b32 <eARPProcessPacket+0x126>
 8006aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d11c      	bne.n	8006b32 <eARPProcessPacket+0x126>
            {
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8006af8:	4b7b      	ldr	r3, [pc, #492]	@ (8006ce8 <eARPProcessPacket+0x2dc>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f040 8157 	bne.w	8006db0 <eARPProcessPacket+0x3a4>
                {
                    /* Increment the counter. */
                    uxARPClashCounter++;
 8006b02:	4b79      	ldr	r3, [pc, #484]	@ (8006ce8 <eARPProcessPacket+0x2dc>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3301      	adds	r3, #1
 8006b08:	4a77      	ldr	r2, [pc, #476]	@ (8006ce8 <eARPProcessPacket+0x2dc>)
 8006b0a:	6013      	str	r3, [r2, #0]

                    /* Send out a defensive ARP request. */
                    FreeRTOS_OutputARPRequest_Multi( pxTargetEndPoint, pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8006b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4619      	mov	r1, r3
 8006b12:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006b14:	f000 fe32 	bl	800777c <FreeRTOS_OutputARPRequest_Multi>

                    /* Since an ARP Request for this IP was just sent, do not send a gratuitous
                     * ARP for arpGRATUITOUS_ARP_PERIOD. */
                    xLastGratuitousARPTime = xTaskGetTickCount();
 8006b18:	f7fd fec4 	bl	80048a4 <xTaskGetTickCount>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	4a75      	ldr	r2, [pc, #468]	@ (8006cf4 <eARPProcessPacket+0x2e8>)
 8006b20:	6013      	str	r3, [r2, #0]

                    /* Note the time at which this request was sent. */
                    vTaskSetTimeOutState( &xARPClashTimeOut );
 8006b22:	4873      	ldr	r0, [pc, #460]	@ (8006cf0 <eARPProcessPacket+0x2e4>)
 8006b24:	f7fe fa68 	bl	8004ff8 <vTaskSetTimeOutState>

                    /* Reset the time-out period to the given value. */
                    uxARPClashTimeoutPeriod = pdMS_TO_TICKS( arpIP_CLASH_RESET_TIMEOUT_MS );
 8006b28:	4b70      	ldr	r3, [pc, #448]	@ (8006cec <eARPProcessPacket+0x2e0>)
 8006b2a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006b2e:	601a      	str	r2, [r3, #0]
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8006b30:	e13e      	b.n	8006db0 <eARPProcessPacket+0x3a4>
            {
                traceARP_PACKET_RECEIVED();

                /* Some extra logging while still testing. */
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( pxARPHeader->usOperation == ( uint16_t ) ipARP_REPLY )
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	88db      	ldrh	r3, [r3, #6]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b3c:	d14a      	bne.n	8006bd4 <eARPProcessPacket+0x1c8>
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REPLY from %xip to %xip end-point %xip\n",
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	061a      	lsls	r2, r3, #24
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	021b      	lsls	r3, r3, #8
 8006b46:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	0a1b      	lsrs	r3, r3, #8
 8006b50:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006b54:	431a      	orrs	r2, r3
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	0e1b      	lsrs	r3, r3, #24
 8006b5a:	ea42 0103 	orr.w	r1, r2, r3
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b60:	061a      	lsls	r2, r3, #24
 8006b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6e:	0a1b      	lsrs	r3, r3, #8
 8006b70:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006b74:	431a      	orrs	r2, r3
 8006b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b78:	0e1b      	lsrs	r3, r3, #24
 8006b7a:	ea42 0003 	orr.w	r0, r2, r3
 8006b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <eARPProcessPacket+0x180>
 8006b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	061a      	lsls	r2, r3, #24
 8006b8a:	e000      	b.n	8006b8e <eARPProcessPacket+0x182>
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d005      	beq.n	8006ba0 <eARPProcessPacket+0x194>
 8006b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	021b      	lsls	r3, r3, #8
 8006b9a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006b9e:	e000      	b.n	8006ba2 <eARPProcessPacket+0x196>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <eARPProcessPacket+0x1aa>
 8006baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	0a1b      	lsrs	r3, r3, #8
 8006bb0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006bb4:	e000      	b.n	8006bb8 <eARPProcessPacket+0x1ac>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <eARPProcessPacket+0x1bc>
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	0e1b      	lsrs	r3, r3, #24
 8006bc6:	e000      	b.n	8006bca <eARPProcessPacket+0x1be>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	4602      	mov	r2, r0
 8006bce:	484a      	ldr	r0, [pc, #296]	@ (8006cf8 <eARPProcessPacket+0x2ec>)
 8006bd0:	f01b faba 	bl	8022148 <lUDPLoggingPrintf>
                                                 ( unsigned ) FreeRTOS_ntohl( ( pxTargetEndPoint != NULL ) ? pxTargetEndPoint->ipv4_settings.ulIPAddress : 0U ) ) );
                    }
                #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd6:	88db      	ldrh	r3, [r3, #6]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bde:	d151      	bne.n	8006c84 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8006be0:	6a3b      	ldr	r3, [r7, #32]
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8006be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d04d      	beq.n	8006c84 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8006be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d04a      	beq.n	8006c84 <eARPProcessPacket+0x278>
                        ( pxTargetEndPoint != NULL ) )
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REQUEST from %xip to %xip end-point %xip\n",
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	061a      	lsls	r2, r3, #24
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	021b      	lsls	r3, r3, #8
 8006bf6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	0a1b      	lsrs	r3, r3, #8
 8006c00:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006c04:	431a      	orrs	r2, r3
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	0e1b      	lsrs	r3, r3, #24
 8006c0a:	ea42 0103 	orr.w	r1, r2, r3
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c10:	061a      	lsls	r2, r3, #24
 8006c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c14:	021b      	lsls	r3, r3, #8
 8006c16:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1e:	0a1b      	lsrs	r3, r3, #8
 8006c20:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006c24:	431a      	orrs	r2, r3
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	0e1b      	lsrs	r3, r3, #24
 8006c2a:	ea42 0003 	orr.w	r0, r2, r3
 8006c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <eARPProcessPacket+0x230>
 8006c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	061a      	lsls	r2, r3, #24
 8006c3a:	e000      	b.n	8006c3e <eARPProcessPacket+0x232>
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <eARPProcessPacket+0x244>
 8006c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	021b      	lsls	r3, r3, #8
 8006c4a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006c4e:	e000      	b.n	8006c52 <eARPProcessPacket+0x246>
 8006c50:	2300      	movs	r3, #0
 8006c52:	431a      	orrs	r2, r3
 8006c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d005      	beq.n	8006c66 <eARPProcessPacket+0x25a>
 8006c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	0a1b      	lsrs	r3, r3, #8
 8006c60:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006c64:	e000      	b.n	8006c68 <eARPProcessPacket+0x25c>
 8006c66:	2300      	movs	r3, #0
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <eARPProcessPacket+0x26c>
 8006c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	0e1b      	lsrs	r3, r3, #24
 8006c76:	e000      	b.n	8006c7a <eARPProcessPacket+0x26e>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	481f      	ldr	r0, [pc, #124]	@ (8006cfc <eARPProcessPacket+0x2f0>)
 8006c80:	f01b fa62 	bl	8022148 <lUDPLoggingPrintf>
                /* ulTargetProtocolAddress won't be used unless logging is enabled. */
                ( void ) ulTargetProtocolAddress;

                /* Don't do anything if the local IP address is zero because
                 * that means a DHCP request has not completed. */
                if( ( pxTargetEndPoint != NULL ) && ( pxTargetEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) )
 8006c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 8092 	beq.w	8006db0 <eARPProcessPacket+0x3a4>
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c8e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006c92:	f003 0310 	and.w	r3, r3, #16
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 8089 	beq.w	8006db0 <eARPProcessPacket+0x3a4>
                {
                    switch( pxARPHeader->usOperation )
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	88db      	ldrh	r3, [r3, #6]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ca8:	d003      	beq.n	8006cb2 <eARPProcessPacket+0x2a6>
 8006caa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cae:	d077      	beq.n	8006da0 <eARPProcessPacket+0x394>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
                            break;

                        default:
                            /* Invalid. */
                            break;
 8006cb0:	e07e      	b.n	8006db0 <eARPProcessPacket+0x3a4>
                            if( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress )
 8006cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d121      	bne.n	8006d00 <eARPProcessPacket+0x2f4>
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8006cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cbe:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
                                            pxARPHeader->xSenderHardwareAddress.ucBytes,
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc4:	3308      	adds	r3, #8
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8006cc6:	2206      	movs	r2, #6
 8006cc8:	4619      	mov	r1, r3
 8006cca:	f01c fbee 	bl	80234aa <memcmp>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d06c      	beq.n	8006dae <eARPProcessPacket+0x3a2>
                                    vARPProcessPacketRequest( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006cda:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006cdc:	f000 f872 	bl	8006dc4 <vARPProcessPacketRequest>
                                    eReturn = eReturnEthernetFrame;
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 8006ce6:	e062      	b.n	8006dae <eARPProcessPacket+0x3a2>
 8006ce8:	20000f44 	.word	0x20000f44
 8006cec:	20000010 	.word	0x20000010
 8006cf0:	20000f48 	.word	0x20000f48
 8006cf4:	20000f40 	.word	0x20000f40
 8006cf8:	08024460 	.word	0x08024460
 8006cfc:	08024490 	.word	0x08024490
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d152      	bne.n	8006dae <eARPProcessPacket+0x3a2>
                                     ( ( ulSenderProtocolAddress & pxTargetEndPoint->ipv4_settings.ulNetMask ) == ( pxTargetEndPoint->ipv4_settings.ulNetMask & pxTargetEndPoint->ipv4_settings.ulIPAddress ) ) )
 8006d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	405a      	eors	r2, r3
 8006d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	4013      	ands	r3, r2
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d149      	bne.n	8006dae <eARPProcessPacket+0x3a2>
                                const MACAddress_t xGARPTargetAddress = { { 0, 0, 0, 0, 0, 0 } };
 8006d1a:	4a28      	ldr	r2, [pc, #160]	@ (8006dbc <eARPProcessPacket+0x3b0>)
 8006d1c:	f107 0318 	add.w	r3, r7, #24
 8006d20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d24:	6018      	str	r0, [r3, #0]
 8006d26:	3304      	adds	r3, #4
 8006d28:	8019      	strh	r1, [r3, #0]
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	3312      	adds	r3, #18
 8006d2e:	2206      	movs	r2, #6
 8006d30:	4923      	ldr	r1, [pc, #140]	@ (8006dc0 <eARPProcessPacket+0x3b4>)
 8006d32:	4618      	mov	r0, r3
 8006d34:	f01c fbb9 	bl	80234aa <memcmp>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <eARPProcessPacket+0x348>
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	3312      	adds	r3, #18
 8006d42:	f107 0118 	add.w	r1, r7, #24
 8006d46:	2206      	movs	r2, #6
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f01c fbae 	bl	80234aa <memcmp>
 8006d4e:	4603      	mov	r3, r0
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d12c      	bne.n	8006dae <eARPProcessPacket+0x3a2>
                                    ( memcmp( pxTargetEndPoint->xMACAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) != 0 ) )
 8006d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d56:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	2206      	movs	r2, #6
 8006d60:	4619      	mov	r1, r3
 8006d62:	f01c fba2 	bl	80234aa <memcmp>
 8006d66:	4603      	mov	r3, r0
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d020      	beq.n	8006dae <eARPProcessPacket+0x3a2>
                                    pxCachedEndPoint = NULL;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]
                                    if( eARPGetCacheEntry( &( ulSenderProtocolAddress ), &( xHardwareAddress ), &( pxCachedEndPoint ) ) == eARPCacheHit )
 8006d70:	f107 020c 	add.w	r2, r7, #12
 8006d74:	f107 0110 	add.w	r1, r7, #16
 8006d78:	f107 0320 	add.w	r3, r7, #32
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 fb11 	bl	80073a4 <eARPGetCacheEntry>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d112      	bne.n	8006dae <eARPProcessPacket+0x3a2>
                                        if( pxCachedEndPoint == pxTargetEndPoint )
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d10e      	bne.n	8006dae <eARPProcessPacket+0x3a2>
                                            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8006d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d92:	3308      	adds	r3, #8
 8006d94:	6a39      	ldr	r1, [r7, #32]
 8006d96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 f9ef 	bl	800717c <vARPRefreshCacheEntry>
                            break;
 8006d9e:	e006      	b.n	8006dae <eARPProcessPacket+0x3a2>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	461a      	mov	r2, r3
 8006da4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006da6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006da8:	f000 f84a 	bl	8006e40 <vARPProcessPacketReply>
                            break;
 8006dac:	e000      	b.n	8006db0 <eARPProcessPacket+0x3a4>
                            break;
 8006dae:	bf00      	nop
        else
        {
            iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
        }

        return eReturn;
 8006db0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
    }
 8006db4:	4618      	mov	r0, r3
 8006db6:	3740      	adds	r7, #64	@ 0x40
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	080244c0 	.word	0x080244c0
 8006dc0:	08027808 	.word	0x08027808

08006dc4 <vARPProcessPacketRequest>:
 *
 */
    static void vARPProcessPacketRequest( ARPPacket_t * pxARPFrame,
                                          NetworkEndPoint_t * pxTargetEndPoint,
                                          uint32_t ulSenderProtocolAddress )
    {
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
        ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	330e      	adds	r3, #14
 8006dd4:	61fb      	str	r3, [r7, #28]
        iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );

        /* The request is for the address of this node.  Add the
         * entry into the ARP cache, or refresh the entry if it
         * already exists. */
        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	3308      	adds	r3, #8
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 f9cc 	bl	800717c <vARPRefreshCacheEntry>

        /* Generate a reply payload in the same buffer. */
        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	2200      	movs	r2, #0
 8006de8:	719a      	strb	r2, [r3, #6]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f042 0202 	orr.w	r2, r2, #2
 8006df0:	71da      	strb	r2, [r3, #7]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	3308      	adds	r3, #8
 8006df6:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	3312      	adds	r3, #18
 8006dfc:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8006dfe:	2206      	movs	r2, #6
 8006e00:	69b9      	ldr	r1, [r7, #24]
 8006e02:	6978      	ldr	r0, [r7, #20]
 8006e04:	f01b fbbc 	bl	8022580 <memcpy>
        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	619a      	str	r2, [r3, #24]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxTargetEndPoint->xMACAddress.ucBytes;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	33e8      	adds	r3, #232	@ 0xe8
 8006e12:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	3308      	adds	r3, #8
 8006e18:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8006e1a:	2206      	movs	r2, #6
 8006e1c:	69b9      	ldr	r1, [r7, #24]
 8006e1e:	6978      	ldr	r0, [r7, #20]
 8006e20:	f01b fbae 	bl	8022580 <memcpy>
        pvCopySource = &( pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	330e      	adds	r3, #14
 8006e2c:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	601a      	str	r2, [r3, #0]
    }
 8006e38:	bf00      	nop
 8006e3a:	3720      	adds	r7, #32
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <vARPProcessPacketReply>:
 * @param[in] ulSenderProtocolAddress The IPv4 address involved.
 */
    static void vARPProcessPacketReply( const ARPPacket_t * pxARPFrame,
                                        NetworkEndPoint_t * pxTargetEndPoint,
                                        uint32_t ulSenderProtocolAddress )
    {
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08c      	sub	sp, #48	@ 0x30
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
        const ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	330e      	adds	r3, #14
 8006e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8006e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If the packet is meant for this device or if the entry already exists. */
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d005      	beq.n	8006e6e <vARPProcessPacketReply+0x2e>
            ( xIsIPInARPCache( ulSenderProtocolAddress ) == pdTRUE ) )
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f844 	bl	8006ef0 <xIsIPInARPCache>
 8006e68:	4603      	mov	r3, r0
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d106      	bne.n	8006e7c <vARPProcessPacketReply+0x3c>
        {
            iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8006e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e70:	3308      	adds	r3, #8
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 f980 	bl	800717c <vARPRefreshCacheEntry>
        }

        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8006e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8006eec <vARPProcessPacketReply+0xac>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d02e      	beq.n	8006ee2 <vARPProcessPacketReply+0xa2>
            ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv4_HEADER ) )
 8006e84:	4b19      	ldr	r3, [pc, #100]	@ (8006eec <vARPProcessPacketReply+0xac>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f003 f8a5 	bl	8009fd8 <uxIPHeaderSizePacket>
 8006e8e:	4603      	mov	r3, r0
        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8006e90:	2b14      	cmp	r3, #20
 8006e92:	d126      	bne.n	8006ee2 <vARPProcessPacketReply+0xa2>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_t * pxARPWaitingIPPacket = ( ( IPPacket_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 8006e94:	4b15      	ldr	r3, [pc, #84]	@ (8006eec <vARPProcessPacketReply+0xac>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9a:	627b      	str	r3, [r7, #36]	@ 0x24
            const IPHeader_t * pxARPWaitingIPHeader = &( pxARPWaitingIPPacket->xIPHeader );
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9e:	330e      	adds	r3, #14
 8006ea0:	623b      	str	r3, [r7, #32]

            if( ulSenderProtocolAddress == pxARPWaitingIPHeader->ulSourceIPAddress )
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d11a      	bne.n	8006ee2 <vARPProcessPacketReply+0xa2>
            {
                IPStackEvent_t xEventMessage;
                const TickType_t xDontBlock = ( TickType_t ) 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	61fb      	str	r3, [r7, #28]

                xEventMessage.eEventType = eNetworkRxEvent;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	753b      	strb	r3, [r7, #20]
                xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 8006eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8006eec <vARPProcessPacketReply+0xac>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	61bb      	str	r3, [r7, #24]

                if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 8006eba:	f107 0314 	add.w	r3, r7, #20
 8006ebe:	69f9      	ldr	r1, [r7, #28]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f002 fcd5 	bl	8009870 <xSendEventStructToIPTask>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d004      	beq.n	8006ed6 <vARPProcessPacketReply+0x96>
                {
                    /* Failed to send the message, so release the network buffer. */
                    vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 8006ecc:	4b07      	ldr	r3, [pc, #28]	@ (8006eec <vARPProcessPacketReply+0xac>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f010 fa91 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Clear the buffer. */
                pxARPWaitingNetworkBuffer = NULL;
 8006ed6:	4b05      	ldr	r3, [pc, #20]	@ (8006eec <vARPProcessPacketReply+0xac>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]

                /* Found an ARP resolution, disable ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 8006edc:	2000      	movs	r0, #0
 8006ede:	f003 fabd 	bl	800a45c <vIPSetARPResolutionTimerEnableState>

                iptrace_DELAYED_ARP_REQUEST_REPLIED();
            }
        }
    }
 8006ee2:	bf00      	nop
 8006ee4:	3730      	adds	r7, #48	@ 0x30
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20001118 	.word	0x20001118

08006ef0 <xIsIPInARPCache>:
 *                    check for.
 *
 * @return When the IP-address is found: pdTRUE, else pdFALSE.
 */
BaseType_t xIsIPInARPCache( uint32_t ulAddressToLookup )
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
    BaseType_t x, xReturn = pdFALSE;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60bb      	str	r3, [r7, #8]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	e017      	b.n	8006f32 <xIsIPInARPCache+0x42>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8006f02:	4a12      	ldr	r2, [pc, #72]	@ (8006f4c <xIsIPInARPCache+0x5c>)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	011b      	lsls	r3, r3, #4
 8006f08:	4413      	add	r3, r2
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d10c      	bne.n	8006f2c <xIsIPInARPCache+0x3c>
        {
            xReturn = pdTRUE;
 8006f12:	2301      	movs	r3, #1
 8006f14:	60bb      	str	r3, [r7, #8]

            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8006f16:	4a0d      	ldr	r2, [pc, #52]	@ (8006f4c <xIsIPInARPCache+0x5c>)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	4413      	add	r3, r2
 8006f1e:	330b      	adds	r3, #11
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d109      	bne.n	8006f3a <xIsIPInARPCache+0x4a>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                xReturn = pdFALSE;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60bb      	str	r3, [r7, #8]
            }

            break;
 8006f2a:	e006      	b.n	8006f3a <xIsIPInARPCache+0x4a>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b05      	cmp	r3, #5
 8006f36:	dde4      	ble.n	8006f02 <xIsIPInARPCache+0x12>
 8006f38:	e000      	b.n	8006f3c <xIsIPInARPCache+0x4c>
            break;
 8006f3a:	bf00      	nop
        }
    }

    return xReturn;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	20000ee0 	.word	0x20000ee0

08006f50 <xCheckRequiresARPResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs ARP resolution, pdFALSE otherwise.
 */
BaseType_t xCheckRequiresARPResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8006f50:	b590      	push	{r4, r7, lr}
 8006f52:	b0a5      	sub	sp, #148	@ 0x94
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
    BaseType_t xNeedsARPResolution = pdFALSE;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f003 f83a 	bl	8009fd8 <uxIPHeaderSizePacket>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b14      	cmp	r3, #20
 8006f68:	d002      	beq.n	8006f70 <xCheckRequiresARPResolution+0x20>
 8006f6a:	2b28      	cmp	r3, #40	@ 0x28
 8006f6c:	d029      	beq.n	8006fc2 <xCheckRequiresARPResolution+0x72>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* Shouldn't reach here */
            /* MISRA 16.4 Compliance */
            break;
 8006f6e:	e0b6      	b.n	80070de <xCheckRequiresARPResolution+0x18e>
                   const IPPacket_t * pxIPPacket = ( ( const IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f74:	673b      	str	r3, [r7, #112]	@ 0x70
                   const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8006f76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f78:	330e      	adds	r3, #14
 8006f7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                   const IPV4Parameters_t * pxIPv4Settings = &( pxNetworkBuffer->pxEndPoint->ipv4_settings );
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f80:	66bb      	str	r3, [r7, #104]	@ 0x68
                   if( ( pxIPHeader->ulSourceIPAddress & pxIPv4Settings->ulNetMask ) == ( pxIPv4Settings->ulIPAddress & pxIPv4Settings->ulNetMask ) )
 8006f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	405a      	eors	r2, r3
 8006f8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	4013      	ands	r3, r2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f040 80a0 	bne.w	80070d8 <xCheckRequiresARPResolution+0x188>
                       if( xIsIPInARPCache( pxIPHeader->ulSourceIPAddress ) == pdFALSE )
 8006f98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff ffa7 	bl	8006ef0 <xIsIPInARPCache>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f040 8097 	bne.w	80070d8 <xCheckRequiresARPResolution+0x188>
                           FreeRTOS_OutputARPRequest_Multi( pxNetworkBuffer->pxEndPoint, pxIPHeader->ulSourceIPAddress );
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f000 fbe1 	bl	800777c <FreeRTOS_OutputARPRequest_Multi>
                           xNeedsARPResolution = pdTRUE;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8006fc0:	e08a      	b.n	80070d8 <xCheckRequiresARPResolution+0x188>
                   IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                   IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8006fca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006fce:	330e      	adds	r3, #14
 8006fd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                   IPv6_Address_t * pxIPAddress = &( pxIPHeader->xSourceAddress );
 8006fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fd8:	3308      	adds	r3, #8
 8006fda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                   uint8_t ucNextHeader = pxIPHeader->ucNextHeader;
 8006fde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fe2:	799b      	ldrb	r3, [r3, #6]
 8006fe4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
                   if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 8006fe8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006fec:	2b06      	cmp	r3, #6
 8006fee:	d003      	beq.n	8006ff8 <xCheckRequiresARPResolution+0xa8>
 8006ff0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006ff4:	2b11      	cmp	r3, #17
 8006ff6:	d171      	bne.n	80070dc <xCheckRequiresARPResolution+0x18c>
                       IPv6_Type_t eType = xIPv6_GetIPType( ( const IPv6_Address_t * ) pxIPAddress );
 8006ff8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8006ffc:	f006 ff68 	bl	800ded0 <xIPv6_GetIPType>
 8007000:	4603      	mov	r3, r0
 8007002:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
                       FreeRTOS_debug_printf( ( "xCheckRequiresARPResolution: %pip type %s\n",
 8007006:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800700a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00d      	beq.n	800702e <xCheckRequiresARPResolution+0xde>
 8007012:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8007016:	2b01      	cmp	r3, #1
 8007018:	d007      	beq.n	800702a <xCheckRequiresARPResolution+0xda>
 800701a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800701e:	2b04      	cmp	r3, #4
 8007020:	d101      	bne.n	8007026 <xCheckRequiresARPResolution+0xd6>
 8007022:	4b32      	ldr	r3, [pc, #200]	@ (80070ec <xCheckRequiresARPResolution+0x19c>)
 8007024:	e004      	b.n	8007030 <xCheckRequiresARPResolution+0xe0>
 8007026:	4b32      	ldr	r3, [pc, #200]	@ (80070f0 <xCheckRequiresARPResolution+0x1a0>)
 8007028:	e002      	b.n	8007030 <xCheckRequiresARPResolution+0xe0>
 800702a:	4b32      	ldr	r3, [pc, #200]	@ (80070f4 <xCheckRequiresARPResolution+0x1a4>)
 800702c:	e000      	b.n	8007030 <xCheckRequiresARPResolution+0xe0>
 800702e:	4b32      	ldr	r3, [pc, #200]	@ (80070f8 <xCheckRequiresARPResolution+0x1a8>)
 8007030:	461a      	mov	r2, r3
 8007032:	4832      	ldr	r0, [pc, #200]	@ (80070fc <xCheckRequiresARPResolution+0x1ac>)
 8007034:	f01b f888 	bl	8022148 <lUDPLoggingPrintf>
                       if( eType == eIPv6_LinkLocal )
 8007038:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800703c:	2b01      	cmp	r3, #1
 800703e:	d14d      	bne.n	80070dc <xCheckRequiresARPResolution+0x18c>
                           ( void ) memset( &( pcName ), 0, sizeof( pcName ) );
 8007040:	f107 030c 	add.w	r3, r7, #12
 8007044:	2250      	movs	r2, #80	@ 0x50
 8007046:	2100      	movs	r1, #0
 8007048:	4618      	mov	r0, r3
 800704a:	f01b fba6 	bl	802279a <memset>
                           eResult = eNDGetCacheEntry( pxIPAddress, &xMACAddress, &pxEndPoint );
 800704e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8007052:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007056:	4619      	mov	r1, r3
 8007058:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800705c:	f004 fe0e 	bl	800bc7c <eNDGetCacheEntry>
 8007060:	4603      	mov	r3, r0
 8007062:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
                           FreeRTOS_printf( ( "xCheckRequiresARPResolution: eResult %s with EP %s\n", ( eResult == eARPCacheMiss ) ? "Miss" : ( eResult == eARPCacheHit ) ? "Hit" : "Error", pcEndpointName( pxEndPoint, pcName, sizeof pcName ) ) );
 8007066:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800706a:	2b00      	cmp	r3, #0
 800706c:	d007      	beq.n	800707e <xCheckRequiresARPResolution+0x12e>
 800706e:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8007072:	2b01      	cmp	r3, #1
 8007074:	d101      	bne.n	800707a <xCheckRequiresARPResolution+0x12a>
 8007076:	4c22      	ldr	r4, [pc, #136]	@ (8007100 <xCheckRequiresARPResolution+0x1b0>)
 8007078:	e002      	b.n	8007080 <xCheckRequiresARPResolution+0x130>
 800707a:	4c22      	ldr	r4, [pc, #136]	@ (8007104 <xCheckRequiresARPResolution+0x1b4>)
 800707c:	e000      	b.n	8007080 <xCheckRequiresARPResolution+0x130>
 800707e:	4c22      	ldr	r4, [pc, #136]	@ (8007108 <xCheckRequiresARPResolution+0x1b8>)
 8007080:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007082:	f107 010c 	add.w	r1, r7, #12
 8007086:	2250      	movs	r2, #80	@ 0x50
 8007088:	4618      	mov	r0, r3
 800708a:	f006 ff79 	bl	800df80 <pcEndpointName>
 800708e:	4603      	mov	r3, r0
 8007090:	461a      	mov	r2, r3
 8007092:	4621      	mov	r1, r4
 8007094:	481d      	ldr	r0, [pc, #116]	@ (800710c <xCheckRequiresARPResolution+0x1bc>)
 8007096:	f01b f857 	bl	8022148 <lUDPLoggingPrintf>
                           if( eResult == eARPCacheMiss )
 800709a:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d11c      	bne.n	80070dc <xCheckRequiresARPResolution+0x18c>
                               uxNeededSize = sizeof( ICMPPacket_IPv6_t );
 80070a2:	2356      	movs	r3, #86	@ 0x56
 80070a4:	67bb      	str	r3, [r7, #120]	@ 0x78
                               pxTempBuffer = pxGetNetworkBufferWithDescriptor( BUFFER_FROM_WHERE_CALL( 199 ) uxNeededSize, 0U );
 80070a6:	2100      	movs	r1, #0
 80070a8:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80070aa:	f010 f93d 	bl	8017328 <pxGetNetworkBufferWithDescriptor>
 80070ae:	6778      	str	r0, [r7, #116]	@ 0x74
                               if( pxTempBuffer != NULL )
 80070b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00c      	beq.n	80070d0 <xCheckRequiresARPResolution+0x180>
                                   pxTempBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070bc:	631a      	str	r2, [r3, #48]	@ 0x30
                                   pxTempBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070c4:	62da      	str	r2, [r3, #44]	@ 0x2c
                                   vNDSendNeighbourSolicitation( pxTempBuffer, pxIPAddress );
 80070c6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80070ca:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80070cc:	f005 f842 	bl	800c154 <vNDSendNeighbourSolicitation>
                               xNeedsARPResolution = pdTRUE;
 80070d0:	2301      	movs	r3, #1
 80070d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 80070d6:	e001      	b.n	80070dc <xCheckRequiresARPResolution+0x18c>
                   break;
 80070d8:	bf00      	nop
 80070da:	e000      	b.n	80070de <xCheckRequiresARPResolution+0x18e>
                   break;
 80070dc:	bf00      	nop
    }

    return xNeedsARPResolution;
 80070de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3794      	adds	r7, #148	@ 0x94
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd90      	pop	{r4, r7, pc}
 80070ea:	bf00      	nop
 80070ec:	080244c8 	.word	0x080244c8
 80070f0:	080244d4 	.word	0x080244d4
 80070f4:	080244dc 	.word	0x080244dc
 80070f8:	080244e8 	.word	0x080244e8
 80070fc:	080244f0 	.word	0x080244f0
 8007100:	0802451c 	.word	0x0802451c
 8007104:	08024520 	.word	0x08024520
 8007108:	08024528 	.word	0x08024528
 800710c:	08024530 	.word	0x08024530

08007110 <vARPRefreshCacheEntryAge>:
 * @param[in] pxMACAddress Pointer to the MAC address whose entry needs to be updated.
 * @param[in] ulIPAddress the IP address whose corresponding entry needs to be updated.
 */
void vARPRefreshCacheEntryAge( const MACAddress_t * pxMACAddress,
                               const uint32_t ulIPAddress )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
    BaseType_t x;

    if( pxMACAddress != NULL )
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d026      	beq.n	800716e <vARPRefreshCacheEntryAge+0x5e>
    {
        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007120:	2300      	movs	r3, #0
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	e020      	b.n	8007168 <vARPRefreshCacheEntryAge+0x58>
        {
            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8007126:	4a14      	ldr	r2, [pc, #80]	@ (8007178 <vARPRefreshCacheEntryAge+0x68>)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	011b      	lsls	r3, r3, #4
 800712c:	4413      	add	r3, r2
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d115      	bne.n	8007162 <vARPRefreshCacheEntryAge+0x52>
            {
                /* Does this cache entry have the same MAC address? */
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	011b      	lsls	r3, r3, #4
 800713a:	4a0f      	ldr	r2, [pc, #60]	@ (8007178 <vARPRefreshCacheEntryAge+0x68>)
 800713c:	4413      	add	r3, r2
 800713e:	3304      	adds	r3, #4
 8007140:	6879      	ldr	r1, [r7, #4]
 8007142:	2206      	movs	r2, #6
 8007144:	4618      	mov	r0, r3
 8007146:	f01c f9b0 	bl	80234aa <memcmp>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d108      	bne.n	8007162 <vARPRefreshCacheEntryAge+0x52>
                {
                    /* The IP address and the MAC matched, update this entry age. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007150:	4a09      	ldr	r2, [pc, #36]	@ (8007178 <vARPRefreshCacheEntryAge+0x68>)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	4413      	add	r3, r2
 8007158:	330a      	adds	r3, #10
 800715a:	2296      	movs	r2, #150	@ 0x96
 800715c:	701a      	strb	r2, [r3, #0]
                    break;
 800715e:	bf00      	nop
                }
            }
        }
    }
}
 8007160:	e005      	b.n	800716e <vARPRefreshCacheEntryAge+0x5e>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3301      	adds	r3, #1
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2b05      	cmp	r3, #5
 800716c:	dddb      	ble.n	8007126 <vARPRefreshCacheEntryAge+0x16>
}
 800716e:	bf00      	nop
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20000ee0 	.word	0x20000ee0

0800717c <vARPRefreshCacheEntry>:
 * @param[in] pxEndPoint The end-point stored in the table.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress,
                            struct xNetworkEndPoint * pxEndPoint )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
    #endif
    {
        CacheLocation_t xLocation;
        BaseType_t xReady;

        xReady = prvFindCacheEntry( pxMACAddress, ulIPAddress, pxEndPoint, &( xLocation ) );
 8007188:	f107 0310 	add.w	r3, r7, #16
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	68b9      	ldr	r1, [r7, #8]
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 f85b 	bl	800724c <prvFindCacheEntry>
 8007196:	61f8      	str	r0, [r7, #28]

        if( xReady == pdFALSE )
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d150      	bne.n	8007240 <vARPRefreshCacheEntry+0xc4>
        {
            if( xLocation.xMacEntry >= 0 )
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	db0e      	blt.n	80071c2 <vARPRefreshCacheEntry+0x46>
            {
                xLocation.xUseEntry = xLocation.xMacEntry;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	61bb      	str	r3, [r7, #24]

                if( xLocation.xIpEntry >= 0 )
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	db0e      	blt.n	80071cc <vARPRefreshCacheEntry+0x50>
                {
                    /* Both the MAC address as well as the IP address were found in
                     * different locations: clear the entry which matches the
                     * IP-address */
                    ( void ) memset( &( xARPCache[ xLocation.xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	011b      	lsls	r3, r3, #4
 80071b2:	4a25      	ldr	r2, [pc, #148]	@ (8007248 <vARPRefreshCacheEntry+0xcc>)
 80071b4:	4413      	add	r3, r2
 80071b6:	2210      	movs	r2, #16
 80071b8:	2100      	movs	r1, #0
 80071ba:	4618      	mov	r0, r3
 80071bc:	f01b faed 	bl	802279a <memset>
 80071c0:	e004      	b.n	80071cc <vARPRefreshCacheEntry+0x50>
                }
            }
            else if( xLocation.xIpEntry >= 0 )
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	db01      	blt.n	80071cc <vARPRefreshCacheEntry+0x50>
            {
                /* An entry containing the IP-address was found, but it had a different MAC address */
                xLocation.xUseEntry = xLocation.xIpEntry;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	61bb      	str	r3, [r7, #24]
            {
                /* No matching entry found. */
            }

            /* If the entry was not found, we use the oldest entry and set the IPaddress */
            xARPCache[ xLocation.xUseEntry ].ulIPAddress = ulIPAddress;
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007248 <vARPRefreshCacheEntry+0xcc>)
 80071d0:	011b      	lsls	r3, r3, #4
 80071d2:	4413      	add	r3, r2
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	601a      	str	r2, [r3, #0]

            if( pxMACAddress != NULL )
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d01f      	beq.n	800721e <vARPRefreshCacheEntry+0xa2>
            {
                ( void ) memcpy( xARPCache[ xLocation.xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	011b      	lsls	r3, r3, #4
 80071e2:	4a19      	ldr	r2, [pc, #100]	@ (8007248 <vARPRefreshCacheEntry+0xcc>)
 80071e4:	4413      	add	r3, r2
 80071e6:	3304      	adds	r3, #4
 80071e8:	68f9      	ldr	r1, [r7, #12]
 80071ea:	2206      	movs	r2, #6
 80071ec:	4618      	mov	r0, r3
 80071ee:	f01b f9c7 	bl	8022580 <memcpy>

                iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
                /* And this entry does not need immediate attention */
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	4a14      	ldr	r2, [pc, #80]	@ (8007248 <vARPRefreshCacheEntry+0xcc>)
 80071f6:	011b      	lsls	r3, r3, #4
 80071f8:	4413      	add	r3, r2
 80071fa:	330a      	adds	r3, #10
 80071fc:	2296      	movs	r2, #150	@ 0x96
 80071fe:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	4a11      	ldr	r2, [pc, #68]	@ (8007248 <vARPRefreshCacheEntry+0xcc>)
 8007204:	011b      	lsls	r3, r3, #4
 8007206:	4413      	add	r3, r2
 8007208:	330b      	adds	r3, #11
 800720a:	2201      	movs	r2, #1
 800720c:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].pxEndPoint = pxEndPoint;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	4a0d      	ldr	r2, [pc, #52]	@ (8007248 <vARPRefreshCacheEntry+0xcc>)
 8007212:	011b      	lsls	r3, r3, #4
 8007214:	4413      	add	r3, r2
 8007216:	330c      	adds	r3, #12
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	601a      	str	r2, [r3, #0]
            {
                /* Nothing will be stored. */
            }
        }
    }
}
 800721c:	e010      	b.n	8007240 <vARPRefreshCacheEntry+0xc4>
            else if( xLocation.xIpEntry < 0 )
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	da0d      	bge.n	8007240 <vARPRefreshCacheEntry+0xc4>
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	4a08      	ldr	r2, [pc, #32]	@ (8007248 <vARPRefreshCacheEntry+0xcc>)
 8007228:	011b      	lsls	r3, r3, #4
 800722a:	4413      	add	r3, r2
 800722c:	330a      	adds	r3, #10
 800722e:	2205      	movs	r2, #5
 8007230:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	4a04      	ldr	r2, [pc, #16]	@ (8007248 <vARPRefreshCacheEntry+0xcc>)
 8007236:	011b      	lsls	r3, r3, #4
 8007238:	4413      	add	r3, r2
 800723a:	330b      	adds	r3, #11
 800723c:	2200      	movs	r2, #0
 800723e:	701a      	strb	r2, [r3, #0]
}
 8007240:	bf00      	nop
 8007242:	3720      	adds	r7, #32
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	20000ee0 	.word	0x20000ee0

0800724c <prvFindCacheEntry>:
 */
static BaseType_t prvFindCacheEntry( const MACAddress_t * pxMACAddress,
                                     const uint32_t ulIPAddress,
                                     struct xNetworkEndPoint * pxEndPoint,
                                     CacheLocation_t * pxLocation )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08a      	sub	sp, #40	@ 0x28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
 8007258:	603b      	str	r3, [r7, #0]
    BaseType_t x = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t ucMinAgeFound = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    BaseType_t xReturn = pdFALSE;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]

    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
        BaseType_t xAddressIsLocal = ( FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 2 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8007268:	2102      	movs	r1, #2
 800726a:	68b8      	ldr	r0, [r7, #8]
 800726c:	f006 fb24 	bl	800d8b8 <FreeRTOS_FindEndPointOnNetMask>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	bf14      	ite	ne
 8007276:	2301      	movne	r3, #1
 8007278:	2300      	moveq	r3, #0
 800727a:	b2db      	uxtb	r3, r3
 800727c:	617b      	str	r3, [r7, #20]
    #endif

    /* Start with the maximum possible number. */
    ucMinAgeFound--;
 800727e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007282:	3b01      	subs	r3, #1
 8007284:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    pxLocation->xIpEntry = -1;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	f04f 32ff 	mov.w	r2, #4294967295
 800728e:	601a      	str	r2, [r3, #0]
    pxLocation->xMacEntry = -1;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	f04f 32ff 	mov.w	r2, #4294967295
 8007296:	605a      	str	r2, [r3, #4]
    pxLocation->xUseEntry = 0;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2200      	movs	r2, #0
 800729c:	609a      	str	r2, [r3, #8]

    /* For each entry in the ARP cache table. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800729e:	2300      	movs	r3, #0
 80072a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80072a2:	e074      	b.n	800738e <prvFindCacheEntry+0x142>
    {
        BaseType_t xMatchingMAC = pdFALSE;
 80072a4:	2300      	movs	r3, #0
 80072a6:	61bb      	str	r3, [r7, #24]

        if( pxMACAddress != NULL )
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00e      	beq.n	80072cc <prvFindCacheEntry+0x80>
        {
            if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 80072ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	4a3b      	ldr	r2, [pc, #236]	@ (80073a0 <prvFindCacheEntry+0x154>)
 80072b4:	4413      	add	r3, r2
 80072b6:	3304      	adds	r3, #4
 80072b8:	68f9      	ldr	r1, [r7, #12]
 80072ba:	2206      	movs	r2, #6
 80072bc:	4618      	mov	r0, r3
 80072be:	f01c f8f4 	bl	80234aa <memcmp>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <prvFindCacheEntry+0x80>
            {
                xMatchingMAC = pdTRUE;
 80072c8:	2301      	movs	r3, #1
 80072ca:	61bb      	str	r3, [r7, #24]
            }
        }

        /* Does this line in the cache table hold an entry for the IP
         * address being queried? */
        if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 80072cc:	4a34      	ldr	r2, [pc, #208]	@ (80073a0 <prvFindCacheEntry+0x154>)
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	011b      	lsls	r3, r3, #4
 80072d2:	4413      	add	r3, r2
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d125      	bne.n	8007328 <prvFindCacheEntry+0xdc>
        {
            if( pxMACAddress == NULL )
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d103      	bne.n	80072ea <prvFindCacheEntry+0x9e>
            {
                /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                 * indicate that there is an outstanding ARP request, This entry will have
                 * "ucValid == pdFALSE". */
                pxLocation->xIpEntry = x;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072e6:	601a      	str	r2, [r3, #0]
                break;
 80072e8:	e054      	b.n	8007394 <prvFindCacheEntry+0x148>
            }

            /* See if the MAC-address also matches. */
            if( xMatchingMAC != pdFALSE )
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d017      	beq.n	8007320 <prvFindCacheEntry+0xd4>
            {
                /* This function will be called for each received packet
                 * This is by far the most common path. */
                xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80072f0:	4a2b      	ldr	r2, [pc, #172]	@ (80073a0 <prvFindCacheEntry+0x154>)
 80072f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f4:	011b      	lsls	r3, r3, #4
 80072f6:	4413      	add	r3, r2
 80072f8:	330a      	adds	r3, #10
 80072fa:	2296      	movs	r2, #150	@ 0x96
 80072fc:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 80072fe:	4a28      	ldr	r2, [pc, #160]	@ (80073a0 <prvFindCacheEntry+0x154>)
 8007300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	4413      	add	r3, r2
 8007306:	330b      	adds	r3, #11
 8007308:	2201      	movs	r2, #1
 800730a:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].pxEndPoint = pxEndPoint;
 800730c:	4a24      	ldr	r2, [pc, #144]	@ (80073a0 <prvFindCacheEntry+0x154>)
 800730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007310:	011b      	lsls	r3, r3, #4
 8007312:	4413      	add	r3, r2
 8007314:	330c      	adds	r3, #12
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	601a      	str	r2, [r3, #0]
                /* Indicate to the caller that the entry is updated. */
                xReturn = pdTRUE;
 800731a:	2301      	movs	r3, #1
 800731c:	61fb      	str	r3, [r7, #28]
                break;
 800731e:	e039      	b.n	8007394 <prvFindCacheEntry+0x148>
            /* Found an entry containing ulIPAddress, but the MAC address
             * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
             * for an ARP reply.  Still want to see if there is match with the
             * given MAC address.ucBytes.  If found, either of the two entries
             * must be cleared. */
            pxLocation->xIpEntry = x;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	e02f      	b.n	8007388 <prvFindCacheEntry+0x13c>
        }
        else if( xMatchingMAC != pdFALSE )
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d017      	beq.n	800735e <prvFindCacheEntry+0x112>
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
            {
                /* If ARP stores the MAC address of IP addresses outside the
                 * network, than the MAC address of the gateway should not be
                 * overwritten. */
                BaseType_t xOtherIsLocal = ( FreeRTOS_FindEndPointOnNetMask( xARPCache[ x ].ulIPAddress, 3 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 800732e:	4a1c      	ldr	r2, [pc, #112]	@ (80073a0 <prvFindCacheEntry+0x154>)
 8007330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	4413      	add	r3, r2
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2103      	movs	r1, #3
 800733a:	4618      	mov	r0, r3
 800733c:	f006 fabc 	bl	800d8b8 <FreeRTOS_FindEndPointOnNetMask>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	bf14      	ite	ne
 8007346:	2301      	movne	r3, #1
 8007348:	2300      	moveq	r3, #0
 800734a:	b2db      	uxtb	r3, r3
 800734c:	613b      	str	r3, [r7, #16]

                if( xAddressIsLocal == xOtherIsLocal )
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	429a      	cmp	r2, r3
 8007354:	d118      	bne.n	8007388 <prvFindCacheEntry+0x13c>
                {
                    pxLocation->xMacEntry = x;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800735a:	605a      	str	r2, [r3, #4]
 800735c:	e014      	b.n	8007388 <prvFindCacheEntry+0x13c>
            #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
        }

        /* _HT_
         * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
        else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 800735e:	4a10      	ldr	r2, [pc, #64]	@ (80073a0 <prvFindCacheEntry+0x154>)
 8007360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	4413      	add	r3, r2
 8007366:	330a      	adds	r3, #10
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800736e:	429a      	cmp	r2, r3
 8007370:	d90a      	bls.n	8007388 <prvFindCacheEntry+0x13c>
        {
            /* As the table is traversed, remember the table row that
             * contains the oldest entry (the lowest age count, as ages are
             * decremented to zero) so the row can be re-used if this function
             * needs to add an entry that does not already exist. */
            ucMinAgeFound = xARPCache[ x ].ucAge;
 8007372:	4a0b      	ldr	r2, [pc, #44]	@ (80073a0 <prvFindCacheEntry+0x154>)
 8007374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	4413      	add	r3, r2
 800737a:	330a      	adds	r3, #10
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            pxLocation->xUseEntry = x;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007386:	609a      	str	r2, [r3, #8]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738a:	3301      	adds	r3, #1
 800738c:	627b      	str	r3, [r7, #36]	@ 0x24
 800738e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007390:	2b05      	cmp	r3, #5
 8007392:	dd87      	ble.n	80072a4 <prvFindCacheEntry+0x58>
        {
            /* Nothing happens to this cache entry for now. */
        }
    } /* for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ ) */

    return xReturn;
 8007394:	69fb      	ldr	r3, [r7, #28]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3728      	adds	r7, #40	@ 0x28
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	20000ee0 	.word	0x20000ee0

080073a4 <eARPGetCacheEntry>:
 *         eCantSendPacket.
 */
    eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                          MACAddress_t * const pxMACAddress,
                                          struct xNetworkEndPoint ** ppxEndPoint )
    {
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b088      	sub	sp, #32
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        uint32_t ulAddressToLookup;
        NetworkEndPoint_t * pxEndPoint = NULL;
 80073b0:	2300      	movs	r3, #0
 80073b2:	61bb      	str	r3, [r7, #24]

        configASSERT( pxMACAddress != NULL );
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d104      	bne.n	80073c4 <eARPGetCacheEntry+0x20>
 80073ba:	f240 31c9 	movw	r1, #969	@ 0x3c9
 80073be:	483c      	ldr	r0, [pc, #240]	@ (80074b0 <eARPGetCacheEntry+0x10c>)
 80073c0:	f7fa faca 	bl	8001958 <vAssertCalled>
        configASSERT( pulIPAddress != NULL );
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d104      	bne.n	80073d4 <eARPGetCacheEntry+0x30>
 80073ca:	f240 31ca 	movw	r1, #970	@ 0x3ca
 80073ce:	4838      	ldr	r0, [pc, #224]	@ (80074b0 <eARPGetCacheEntry+0x10c>)
 80073d0:	f7fa fac2 	bl	8001958 <vAssertCalled>
        configASSERT( ppxEndPoint != NULL );
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d104      	bne.n	80073e4 <eARPGetCacheEntry+0x40>
 80073da:	f240 31cb 	movw	r1, #971	@ 0x3cb
 80073de:	4834      	ldr	r0, [pc, #208]	@ (80074b0 <eARPGetCacheEntry+0x10c>)
 80073e0:	f7fa faba 	bl	8001958 <vAssertCalled>

        *( ppxEndPoint ) = NULL;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]
        ulAddressToLookup = *pulIPAddress;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	617b      	str	r3, [r7, #20]
        pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulAddressToLookup, 0 );
 80073f0:	2100      	movs	r1, #0
 80073f2:	6978      	ldr	r0, [r7, #20]
 80073f4:	f006 f9d4 	bl	800d7a0 <FreeRTOS_FindEndPointOnIP_IPv4>
 80073f8:	61b8      	str	r0, [r7, #24]

        if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 80073fa:	6978      	ldr	r0, [r7, #20]
 80073fc:	f003 fc3c 	bl	800ac78 <xIsIPv4Multicast>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d021      	beq.n	800744a <eARPGetCacheEntry+0xa6>
        {
            /* Get the lowest 23 bits of the IP-address. */
            vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8007406:	68b9      	ldr	r1, [r7, #8]
 8007408:	6978      	ldr	r0, [r7, #20]
 800740a:	f003 fd63 	bl	800aed4 <vSetMultiCastIPv4MacAddress>

            eReturn = eCantSendPacket;
 800740e:	2302      	movs	r3, #2
 8007410:	77fb      	strb	r3, [r7, #31]
            pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8007412:	2000      	movs	r0, #0
 8007414:	f006 f978 	bl	800d708 <FreeRTOS_FirstEndPoint>
 8007418:	61b8      	str	r0, [r7, #24]

            for( ;
 800741a:	e012      	b.n	8007442 <eARPGetCacheEntry+0x9e>
                 pxEndPoint != NULL;
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
            {
                if( pxEndPoint->bits.bIPv6 == 0U ) /*NULL End Point is checked in the for loop, no need for an extra check */
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b00      	cmp	r3, #0
 800742a:	d105      	bne.n	8007438 <eARPGetCacheEntry+0x94>
                {
                    /* For multi-cast, use the first IPv4 end-point. */
                    *( ppxEndPoint ) = pxEndPoint;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8007432:	2301      	movs	r3, #1
 8007434:	77fb      	strb	r3, [r7, #31]
                    break;
 8007436:	e035      	b.n	80074a4 <eARPGetCacheEntry+0x100>
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8007438:	69b9      	ldr	r1, [r7, #24]
 800743a:	2000      	movs	r0, #0
 800743c:	f006 f986 	bl	800d74c <FreeRTOS_NextEndPoint>
 8007440:	61b8      	str	r0, [r7, #24]
                 pxEndPoint != NULL;
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e9      	bne.n	800741c <eARPGetCacheEntry+0x78>
 8007448:	e02c      	b.n	80074a4 <eARPGetCacheEntry+0x100>
                }
            }
        }
        else if( ( FreeRTOS_htonl( ulAddressToLookup ) & 0xffU ) == 0xffU ) /* Is this a broadcast address like x.x.x.255 ? */
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	061a      	lsls	r2, r3, #24
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	021b      	lsls	r3, r3, #8
 8007452:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007456:	431a      	orrs	r2, r3
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	0a1b      	lsrs	r3, r3, #8
 800745c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007460:	431a      	orrs	r2, r3
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	0e1b      	lsrs	r3, r3, #24
 8007466:	4313      	orrs	r3, r2
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2bff      	cmp	r3, #255	@ 0xff
 800746c:	d113      	bne.n	8007496 <eARPGetCacheEntry+0xf2>
        {
            /* This is a broadcast so it uses the broadcast MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	4a10      	ldr	r2, [pc, #64]	@ (80074b4 <eARPGetCacheEntry+0x110>)
 8007472:	6811      	ldr	r1, [r2, #0]
 8007474:	6019      	str	r1, [r3, #0]
 8007476:	8892      	ldrh	r2, [r2, #4]
 8007478:	809a      	strh	r2, [r3, #4]
            pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 800747a:	2104      	movs	r1, #4
 800747c:	6978      	ldr	r0, [r7, #20]
 800747e:	f006 fa1b 	bl	800d8b8 <FreeRTOS_FindEndPointOnNetMask>
 8007482:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <eARPGetCacheEntry+0xec>
            {
                *( ppxEndPoint ) = pxEndPoint;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 8007490:	2301      	movs	r3, #1
 8007492:	77fb      	strb	r3, [r7, #31]
 8007494:	e006      	b.n	80074a4 <eARPGetCacheEntry+0x100>
        }
        else
        {
            eReturn = eARPGetCacheEntryGateWay( pulIPAddress, pxMACAddress, ppxEndPoint );
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	68b9      	ldr	r1, [r7, #8]
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 f80c 	bl	80074b8 <eARPGetCacheEntryGateWay>
 80074a0:	4603      	mov	r3, r0
 80074a2:	77fb      	strb	r3, [r7, #31]
        }

        return eReturn;
 80074a4:	7ffb      	ldrb	r3, [r7, #31]
    }
 80074a6:	4618      	mov	r0, r3
 80074a8:	3720      	adds	r7, #32
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	08024564 	.word	0x08024564
 80074b4:	08027808 	.word	0x08027808

080074b8 <eARPGetCacheEntryGateWay>:
 * @param[out] ppxEndPoint The end-point of the gateway will be copy to the pointee.
 */
    static eARPLookupResult_t eARPGetCacheEntryGateWay( uint32_t * pulIPAddress,
                                                        MACAddress_t * const pxMACAddress,
                                                        struct xNetworkEndPoint ** ppxEndPoint )
    {
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn = eARPCacheMiss;
 80074c4:	2300      	movs	r3, #0
 80074c6:	77fb      	strb	r3, [r7, #31]
        uint32_t ulAddressToLookup = *( pulIPAddress );
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	61bb      	str	r3, [r7, #24]
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulOriginal = *pulIPAddress;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	617b      	str	r3, [r7, #20]

        /* It is assumed that devices with the same netmask are on the same
         * LAN and don't need a gateway. */
        pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 80074d4:	2104      	movs	r1, #4
 80074d6:	69b8      	ldr	r0, [r7, #24]
 80074d8:	f006 f9ee 	bl	800d8b8 <FreeRTOS_FindEndPointOnNetMask>
 80074dc:	6138      	str	r0, [r7, #16]

        if( pxEndPoint == NULL )
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d11b      	bne.n	800751c <eARPGetCacheEntryGateWay+0x64>
        {
            /* No matching end-point is found, look for a gateway. */
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	68b9      	ldr	r1, [r7, #8]
 80074e8:	69b8      	ldr	r0, [r7, #24]
 80074ea:	f000 f86b 	bl	80075c4 <prvCacheLookup>
 80074ee:	4603      	mov	r3, r0
 80074f0:	77fb      	strb	r3, [r7, #31]

                if( eReturn == eARPCacheHit )
 80074f2:	7ffb      	ldrb	r3, [r7, #31]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d017      	beq.n	8007528 <eARPGetCacheEntryGateWay+0x70>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                *( ppxEndPoint ) = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv4 );
 80074f8:	2040      	movs	r0, #64	@ 0x40
 80074fa:	f006 fca9 	bl	800de50 <FreeRTOS_FindGateWay>
 80074fe:	4602      	mov	r2, r0
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	601a      	str	r2, [r3, #0]

                if( *( ppxEndPoint ) != NULL )
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d004      	beq.n	8007516 <eARPGetCacheEntryGateWay+0x5e>
                {
                    /* 'ipv4_settings' can be accessed safely, because 'ipTYPE_IPv4' was provided. */
                    ulAddressToLookup = ( *ppxEndPoint )->ipv4_settings.ulGatewayAddress;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	61bb      	str	r3, [r7, #24]
 8007514:	e008      	b.n	8007528 <eARPGetCacheEntryGateWay+0x70>
                }
                else
                {
                    ulAddressToLookup = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	61bb      	str	r3, [r7, #24]
 800751a:	e005      	b.n	8007528 <eARPGetCacheEntryGateWay+0x70>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	61bb      	str	r3, [r7, #24]
            *ppxEndPoint = pxEndPoint;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	601a      	str	r2, [r3, #0]
        }

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
            if( eReturn == eARPCacheMiss )
 8007528:	7ffb      	ldrb	r3, [r7, #31]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d13f      	bne.n	80075ae <eARPGetCacheEntryGateWay+0xf6>
        #endif
        {
            if( ulAddressToLookup == 0U )
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d102      	bne.n	800753a <eARPGetCacheEntryGateWay+0x82>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 8007534:	2302      	movs	r3, #2
 8007536:	77fb      	strb	r3, [r7, #31]
 8007538:	e039      	b.n	80075ae <eARPGetCacheEntryGateWay+0xf6>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	69b8      	ldr	r0, [r7, #24]
 8007540:	f000 f840 	bl	80075c4 <prvCacheLookup>
 8007544:	4603      	mov	r3, r0
 8007546:	77fb      	strb	r3, [r7, #31]

                if( ( eReturn != eARPCacheHit ) || ( ulOriginal != ulAddressToLookup ) )
 8007548:	7ffb      	ldrb	r3, [r7, #31]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d103      	bne.n	8007556 <eARPGetCacheEntryGateWay+0x9e>
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	429a      	cmp	r2, r3
 8007554:	d028      	beq.n	80075a8 <eARPGetCacheEntryGateWay+0xf0>
                {
                    FreeRTOS_debug_printf( ( "ARP %xip %s using %xip\n",
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	061a      	lsls	r2, r3, #24
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	021b      	lsls	r3, r3, #8
 800755e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007562:	431a      	orrs	r2, r3
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	0a1b      	lsrs	r3, r3, #8
 8007568:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800756c:	431a      	orrs	r2, r3
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	0e1b      	lsrs	r3, r3, #24
 8007572:	ea42 0103 	orr.w	r1, r2, r3
 8007576:	7ffb      	ldrb	r3, [r7, #31]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d101      	bne.n	8007580 <eARPGetCacheEntryGateWay+0xc8>
 800757c:	480e      	ldr	r0, [pc, #56]	@ (80075b8 <eARPGetCacheEntryGateWay+0x100>)
 800757e:	e000      	b.n	8007582 <eARPGetCacheEntryGateWay+0xca>
 8007580:	480e      	ldr	r0, [pc, #56]	@ (80075bc <eARPGetCacheEntryGateWay+0x104>)
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	061a      	lsls	r2, r3, #24
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	021b      	lsls	r3, r3, #8
 800758a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800758e:	431a      	orrs	r2, r3
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	0a1b      	lsrs	r3, r3, #8
 8007594:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007598:	431a      	orrs	r2, r3
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	0e1b      	lsrs	r3, r3, #24
 800759e:	4313      	orrs	r3, r2
 80075a0:	4602      	mov	r2, r0
 80075a2:	4807      	ldr	r0, [pc, #28]	@ (80075c0 <eARPGetCacheEntryGateWay+0x108>)
 80075a4:	f01a fdd0 	bl	8022148 <lUDPLoggingPrintf>
                                             ( eReturn == eARPCacheHit ) ? "hit" : "miss",
                                             ( unsigned ) FreeRTOS_ntohl( ulAddressToLookup ) ) );
                }

                /* It might be that the ARP has to go to the gateway. */
                *pulIPAddress = ulAddressToLookup;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	69ba      	ldr	r2, [r7, #24]
 80075ac:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 80075ae:	7ffb      	ldrb	r3, [r7, #31]
    }
 80075b0:	4618      	mov	r0, r3
 80075b2:	3720      	adds	r7, #32
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	08024590 	.word	0x08024590
 80075bc:	08024594 	.word	0x08024594
 80075c0:	0802459c 	.word	0x0802459c

080075c4 <prvCacheLookup>:
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
    static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                              MACAddress_t * const pxMACAddress,
                                              NetworkEndPoint_t ** ppxEndPoint )
    {
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 80075d0:	2300      	movs	r3, #0
 80075d2:	74fb      	strb	r3, [r7, #19]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	e02a      	b.n	8007630 <prvCacheLookup+0x6c>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 80075da:	4a19      	ldr	r2, [pc, #100]	@ (8007640 <prvCacheLookup+0x7c>)
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	011b      	lsls	r3, r3, #4
 80075e0:	4413      	add	r3, r2
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d11f      	bne.n	800762a <prvCacheLookup+0x66>
            {
                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80075ea:	4a15      	ldr	r2, [pc, #84]	@ (8007640 <prvCacheLookup+0x7c>)
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	011b      	lsls	r3, r3, #4
 80075f0:	4413      	add	r3, r2
 80075f2:	330b      	adds	r3, #11
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d102      	bne.n	8007600 <prvCacheLookup+0x3c>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    eReturn = eCantSendPacket;
 80075fa:	2302      	movs	r3, #2
 80075fc:	74fb      	strb	r3, [r7, #19]
                    /* ppxEndPoint != NULL was tested in the only caller eARPGetCacheEntry(). */
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
                    eReturn = eARPCacheHit;
                }

                break;
 80075fe:	e01a      	b.n	8007636 <prvCacheLookup+0x72>
                    ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8007600:	68b8      	ldr	r0, [r7, #8]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	4a0e      	ldr	r2, [pc, #56]	@ (8007640 <prvCacheLookup+0x7c>)
 8007608:	4413      	add	r3, r2
 800760a:	3304      	adds	r3, #4
 800760c:	2206      	movs	r2, #6
 800760e:	4619      	mov	r1, r3
 8007610:	f01a ffb6 	bl	8022580 <memcpy>
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
 8007614:	4a0a      	ldr	r2, [pc, #40]	@ (8007640 <prvCacheLookup+0x7c>)
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	011b      	lsls	r3, r3, #4
 800761a:	4413      	add	r3, r2
 800761c:	330c      	adds	r3, #12
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8007624:	2301      	movs	r3, #1
 8007626:	74fb      	strb	r3, [r7, #19]
                break;
 8007628:	e005      	b.n	8007636 <prvCacheLookup+0x72>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	3301      	adds	r3, #1
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2b05      	cmp	r3, #5
 8007634:	ddd1      	ble.n	80075da <prvCacheLookup+0x16>
            }
        }

        return eReturn;
 8007636:	7cfb      	ldrb	r3, [r7, #19]
    }
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20000ee0 	.word	0x20000ee0

08007644 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
    void vARPAgeCache( void )
    {
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
        BaseType_t x;
        TickType_t xTimeNow;

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800764a:	2300      	movs	r3, #0
 800764c:	60fb      	str	r3, [r7, #12]
 800764e:	e048      	b.n	80076e2 <vARPAgeCache+0x9e>
        {
            /* If the entry is valid (its age is greater than zero). */
            if( xARPCache[ x ].ucAge > 0U )
 8007650:	4a47      	ldr	r2, [pc, #284]	@ (8007770 <vARPAgeCache+0x12c>)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	011b      	lsls	r3, r3, #4
 8007656:	4413      	add	r3, r2
 8007658:	330a      	adds	r3, #10
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d03d      	beq.n	80076dc <vARPAgeCache+0x98>
            {
                /* Decrement the age value of the entry in this ARP cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xARPCache[ x ].ucAge )--;
 8007660:	4a43      	ldr	r2, [pc, #268]	@ (8007770 <vARPAgeCache+0x12c>)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	011b      	lsls	r3, r3, #4
 8007666:	4413      	add	r3, r2
 8007668:	330a      	adds	r3, #10
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	3b01      	subs	r3, #1
 800766e:	b2d9      	uxtb	r1, r3
 8007670:	4a3f      	ldr	r2, [pc, #252]	@ (8007770 <vARPAgeCache+0x12c>)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	011b      	lsls	r3, r3, #4
 8007676:	4413      	add	r3, r2
 8007678:	330a      	adds	r3, #10
 800767a:	460a      	mov	r2, r1
 800767c:	701a      	strb	r2, [r3, #0]

                /* If the entry is not yet valid, then it is waiting an ARP
                 * reply, and the ARP request should be retransmitted. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800767e:	4a3c      	ldr	r2, [pc, #240]	@ (8007770 <vARPAgeCache+0x12c>)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	011b      	lsls	r3, r3, #4
 8007684:	4413      	add	r3, r2
 8007686:	330b      	adds	r3, #11
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d108      	bne.n	80076a0 <vARPAgeCache+0x5c>
                {
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 800768e:	4a38      	ldr	r2, [pc, #224]	@ (8007770 <vARPAgeCache+0x12c>)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	011b      	lsls	r3, r3, #4
 8007694:	4413      	add	r3, r2
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4618      	mov	r0, r3
 800769a:	f000 f8d7 	bl	800784c <FreeRTOS_OutputARPRequest>
 800769e:	e00f      	b.n	80076c0 <vARPAgeCache+0x7c>
                }
                else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 80076a0:	4a33      	ldr	r2, [pc, #204]	@ (8007770 <vARPAgeCache+0x12c>)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	4413      	add	r3, r2
 80076a8:	330a      	adds	r3, #10
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d807      	bhi.n	80076c0 <vARPAgeCache+0x7c>
                {
                    /* This entry will get removed soon.  See if the MAC address is
                     * still valid to prevent this happening. */
                    iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 80076b0:	4a2f      	ldr	r2, [pc, #188]	@ (8007770 <vARPAgeCache+0x12c>)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	011b      	lsls	r3, r3, #4
 80076b6:	4413      	add	r3, r2
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 f8c6 	bl	800784c <FreeRTOS_OutputARPRequest>
                else
                {
                    /* The age has just ticked down, with nothing to do. */
                }

                if( xARPCache[ x ].ucAge == 0U )
 80076c0:	4a2b      	ldr	r2, [pc, #172]	@ (8007770 <vARPAgeCache+0x12c>)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	011b      	lsls	r3, r3, #4
 80076c6:	4413      	add	r3, r2
 80076c8:	330a      	adds	r3, #10
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d105      	bne.n	80076dc <vARPAgeCache+0x98>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                    xARPCache[ x ].ulIPAddress = 0U;
 80076d0:	4a27      	ldr	r2, [pc, #156]	@ (8007770 <vARPAgeCache+0x12c>)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	011b      	lsls	r3, r3, #4
 80076d6:	4413      	add	r3, r2
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3301      	adds	r3, #1
 80076e0:	60fb      	str	r3, [r7, #12]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2b05      	cmp	r3, #5
 80076e6:	ddb3      	ble.n	8007650 <vARPAgeCache+0xc>
                }
            }
        }

        xTimeNow = xTaskGetTickCount();
 80076e8:	f7fd f8dc 	bl	80048a4 <xTaskGetTickCount>
 80076ec:	6078      	str	r0, [r7, #4]

        if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 80076ee:	4b21      	ldr	r3, [pc, #132]	@ (8007774 <vARPAgeCache+0x130>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d007      	beq.n	8007706 <vARPAgeCache+0xc2>
 80076f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007774 <vARPAgeCache+0x130>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8007702:	4293      	cmp	r3, r2
 8007704:	d92f      	bls.n	8007766 <vARPAgeCache+0x122>
        {
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8007706:	4b1c      	ldr	r3, [pc, #112]	@ (8007778 <vARPAgeCache+0x134>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	60bb      	str	r3, [r7, #8]

            while( pxEndPoint != NULL )
 800770c:	e025      	b.n	800775a <vARPAgeCache+0x116>
            {
                if( ( pxEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) && ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007714:	f003 0310 	and.w	r3, r3, #16
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d019      	beq.n	8007752 <vARPAgeCache+0x10e>
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d015      	beq.n	8007752 <vARPAgeCache+0x10e>
                {
                    /* Case default is never toggled because IPv6 flag can be TRUE or FALSE */
                    switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800772c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <vARPAgeCache+0xf8>
 8007736:	2b01      	cmp	r3, #1
 8007738:	d007      	beq.n	800774a <vARPAgeCache+0x106>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default: /* LCOV_EXCL_LINE */
                            /* Shouldn't reach here */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 800773a:	e00a      	b.n	8007752 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputARPRequest_Multi( pxEndPoint, pxEndPoint->ipv4_settings.ulIPAddress );
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4619      	mov	r1, r3
 8007742:	68b8      	ldr	r0, [r7, #8]
 8007744:	f000 f81a 	bl	800777c <FreeRTOS_OutputARPRequest_Multi>
                                break;
 8007748:	e003      	b.n	8007752 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputAdvertiseIPv6( pxEndPoint );
 800774a:	68b8      	ldr	r0, [r7, #8]
 800774c:	f005 f822 	bl	800c794 <FreeRTOS_OutputAdvertiseIPv6>
                                break;
 8007750:	bf00      	nop
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8007758:	60bb      	str	r3, [r7, #8]
            while( pxEndPoint != NULL )
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1d6      	bne.n	800770e <vARPAgeCache+0xca>
            }

            xLastGratuitousARPTime = xTimeNow;
 8007760:	4a04      	ldr	r2, [pc, #16]	@ (8007774 <vARPAgeCache+0x130>)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6013      	str	r3, [r2, #0]
        }
    }
 8007766:	bf00      	nop
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	20000ee0 	.word	0x20000ee0
 8007774:	20000f40 	.word	0x20000f40
 8007778:	200014a4 	.word	0x200014a4

0800777c <FreeRTOS_OutputARPRequest_Multi>:
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest_Multi( NetworkEndPoint_t * pxEndPoint,
                                          uint32_t ulIPAddress )
    {
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800778c:	f003 0304 	and.w	r3, r3, #4
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d156      	bne.n	8007844 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 800779a:	2b00      	cmp	r3, #0
 800779c:	d052      	beq.n	8007844 <FreeRTOS_OutputARPRequest_Multi+0xc8>
        {
            /* This is called from the context of the IP event task, so a block time
             * must not be used. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 800779e:	2100      	movs	r1, #0
 80077a0:	202a      	movs	r0, #42	@ 0x2a
 80077a2:	f00f fdc1 	bl	8017328 <pxGetNetworkBufferWithDescriptor>
 80077a6:	6138      	str	r0, [r7, #16]

            if( pxNetworkBuffer != NULL )
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d04a      	beq.n	8007844 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	615a      	str	r2, [r3, #20]
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	631a      	str	r2, [r3, #48]	@ 0x30
                pxNetworkBuffer->pxInterface = pxEndPoint->pxNetworkInterface;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	62da      	str	r2, [r3, #44]	@ 0x2c
                vARPGenerateRequestPacket( pxNetworkBuffer );
 80077c4:	6938      	ldr	r0, [r7, #16]
 80077c6:	f000 f855 	bl	8007874 <vARPGenerateRequestPacket>

                #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ce:	2b3b      	cmp	r3, #59	@ 0x3b
 80077d0:	d812      	bhi.n	80077f8 <FreeRTOS_OutputARPRequest_Multi+0x7c>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	e008      	b.n	80077ec <FreeRTOS_OutputARPRequest_Multi+0x70>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	4413      	add	r3, r2
 80077e2:	2200      	movs	r2, #0
 80077e4:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	3301      	adds	r3, #1
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2b3b      	cmp	r3, #59	@ 0x3b
 80077f0:	ddf3      	ble.n	80077da <FreeRTOS_OutputARPRequest_Multi+0x5e>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	223c      	movs	r2, #60	@ 0x3c
 80077f6:	629a      	str	r2, [r3, #40]	@ 0x28
                    }
                }
                #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

                if( xIsCallingFromIPTask() != pdFALSE )
 80077f8:	f002 ff7c 	bl	800a6f4 <xIsCallingFromIPTask>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00f      	beq.n	8007822 <FreeRTOS_OutputARPRequest_Multi+0xa6>
                {
                    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

                    /* Only the IP-task is allowed to call this function directly. */
                    if( pxEndPoint->pxNetworkInterface != NULL )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007808:	2b00      	cmp	r3, #0
 800780a:	d01b      	beq.n	8007844 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    {
                        ( void ) pxEndPoint->pxNetworkInterface->pfOutput( pxEndPoint->pxNetworkInterface, pxNetworkBuffer, pdTRUE );
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	f8d2 0120 	ldr.w	r0, [r2, #288]	@ 0x120
 800781a:	2201      	movs	r2, #1
 800781c:	6939      	ldr	r1, [r7, #16]
 800781e:	4798      	blx	r3
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                    }
                }
            }
        }
    }
 8007820:	e010      	b.n	8007844 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    xSendEvent.eEventType = eNetworkTxEvent;
 8007822:	2302      	movs	r3, #2
 8007824:	723b      	strb	r3, [r7, #8]
                    xSendEvent.pvData = pxNetworkBuffer;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	60fb      	str	r3, [r7, #12]
                    if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800782a:	f107 0308 	add.w	r3, r7, #8
 800782e:	f04f 31ff 	mov.w	r1, #4294967295
 8007832:	4618      	mov	r0, r3
 8007834:	f002 f81c 	bl	8009870 <xSendEventStructToIPTask>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d102      	bne.n	8007844 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800783e:	6938      	ldr	r0, [r7, #16]
 8007840:	f00f fdda 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
    }
 8007844:	bf00      	nop
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
    {
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
        /* Its assumed that IPv4 endpoints belonging to different physical interface
         * in the system will have a different subnet, but endpoints on same interface
         * may have it. */
        NetworkEndPoint_t * pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 12 );
 8007854:	210c      	movs	r1, #12
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f006 f82e 	bl	800d8b8 <FreeRTOS_FindEndPointOnNetMask>
 800785c:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <FreeRTOS_OutputARPRequest+0x20>
        {
            FreeRTOS_OutputARPRequest_Multi( pxEndPoint, ulIPAddress );
 8007864:	6879      	ldr	r1, [r7, #4]
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f7ff ff88 	bl	800777c <FreeRTOS_OutputARPRequest_Multi>
        }
    }
 800786c:	bf00      	nop
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
    void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
        void * pvCopyDest;

        /* Buffer allocation ensures that buffers always have space
         * for an ARP packet. See buffer allocation implementations 1
         * and 2 under portable/BufferManagement. */
        configASSERT( pxNetworkBuffer != NULL );
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d104      	bne.n	800788c <vARPGenerateRequestPacket+0x18>
 8007882:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 8007886:	4828      	ldr	r0, [pc, #160]	@ (8007928 <vARPGenerateRequestPacket+0xb4>)
 8007888:	f7fa f866 	bl	8001958 <vAssertCalled>
        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007890:	2b29      	cmp	r3, #41	@ 0x29
 8007892:	d804      	bhi.n	800789e <vARPGenerateRequestPacket+0x2a>
 8007894:	f240 51b2 	movw	r1, #1458	@ 0x5b2
 8007898:	4823      	ldr	r0, [pc, #140]	@ (8007928 <vARPGenerateRequestPacket+0xb4>)
 800789a:	f7fa f85d 	bl	8001958 <vAssertCalled>
        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d104      	bne.n	80078b0 <vARPGenerateRequestPacket+0x3c>
 80078a6:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 80078aa:	481f      	ldr	r0, [pc, #124]	@ (8007928 <vARPGenerateRequestPacket+0xb4>)
 80078ac:	f7fa f854 	bl	8001958 <vAssertCalled>

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxARPPacket = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b4:	617b      	str	r3, [r7, #20]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = xDefaultPartARPPacketHeader;
 80078b6:	4b1d      	ldr	r3, [pc, #116]	@ (800792c <vARPGenerateRequestPacket+0xb8>)
 80078b8:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 80078be:	2226      	movs	r2, #38	@ 0x26
 80078c0:	6939      	ldr	r1, [r7, #16]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f01a fe5c 	bl	8022580 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078cc:	33e8      	adds	r3, #232	@ 0xe8
 80078ce:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	3306      	adds	r3, #6
 80078d4:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 80078d6:	2206      	movs	r2, #6
 80078d8:	6939      	ldr	r1, [r7, #16]
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f01a fe50 	bl	8022580 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e4:	33e8      	adds	r3, #232	@ 0xe8
 80078e6:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	3316      	adds	r3, #22
 80078ec:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 80078ee:	2206      	movs	r2, #6
 80078f0:	6939      	ldr	r1, [r7, #16]
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f01a fe44 	bl	8022580 <memcpy>

        pvCopySource = &( pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress );
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078fc:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	331c      	adds	r3, #28
 8007902:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	461a      	mov	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	601a      	str	r2, [r3, #0]
        pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	695a      	ldr	r2, [r3, #20]
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26

        pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	222a      	movs	r2, #42	@ 0x2a
 800791c:	629a      	str	r2, [r3, #40]	@ 0x28

        iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );
    }
 800791e:	bf00      	nop
 8007920:	3718      	adds	r7, #24
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	08024564 	.word	0x08024564
 800792c:	080277d0 	.word	0x080277d0

08007930 <FreeRTOS_ClearARP>:
 * @brief A call to this function will clear the ARP cache.
 * @param[in] pxEndPoint only clean entries with this end-point, or when NULL,
 *                        clear the entire ARP cache.
 */
void FreeRTOS_ClearARP( const struct xNetworkEndPoint * pxEndPoint )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
    if( pxEndPoint != NULL )
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d01b      	beq.n	8007976 <FreeRTOS_ClearARP+0x46>
    {
        BaseType_t x;

        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	e014      	b.n	800796e <FreeRTOS_ClearARP+0x3e>
        {
            if( xARPCache[ x ].pxEndPoint == pxEndPoint )
 8007944:	4a10      	ldr	r2, [pc, #64]	@ (8007988 <FreeRTOS_ClearARP+0x58>)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	011b      	lsls	r3, r3, #4
 800794a:	4413      	add	r3, r2
 800794c:	330c      	adds	r3, #12
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	429a      	cmp	r2, r3
 8007954:	d108      	bne.n	8007968 <FreeRTOS_ClearARP+0x38>
            {
                ( void ) memset( &( xARPCache[ x ] ), 0, sizeof( ARPCacheRow_t ) );
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	011b      	lsls	r3, r3, #4
 800795a:	4a0b      	ldr	r2, [pc, #44]	@ (8007988 <FreeRTOS_ClearARP+0x58>)
 800795c:	4413      	add	r3, r2
 800795e:	2210      	movs	r2, #16
 8007960:	2100      	movs	r1, #0
 8007962:	4618      	mov	r0, r3
 8007964:	f01a ff19 	bl	802279a <memset>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3301      	adds	r3, #1
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b05      	cmp	r3, #5
 8007972:	dde7      	ble.n	8007944 <FreeRTOS_ClearARP+0x14>
    }
    else
    {
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
    }
}
 8007974:	e004      	b.n	8007980 <FreeRTOS_ClearARP+0x50>
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 8007976:	2260      	movs	r2, #96	@ 0x60
 8007978:	2100      	movs	r1, #0
 800797a:	4803      	ldr	r0, [pc, #12]	@ (8007988 <FreeRTOS_ClearARP+0x58>)
 800797c:	f01a ff0d 	bl	802279a <memset>
}
 8007980:	bf00      	nop
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	20000ee0 	.word	0x20000ee0

0800798c <vDNSInitialise>:
    #if ( ipconfigDNS_USE_CALLBACKS == 1 )

/** @brief Initialise the list of call-back structures.
 */
        void vDNSInitialise( void )
        {
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
            vDNSCallbackInitialise();
 8007990:	f000 fc8a 	bl	80082a8 <vDNSCallbackInitialise>
        }
 8007994:	bf00      	nop
 8007996:	bd80      	pop	{r7, pc}

08007998 <pxNew_AddrInfo>:
 * @return A pointer to the newly allocated struct, or NULL in case malloc failed..
 */
    struct freertos_addrinfo * pxNew_AddrInfo( const char * pcName,
                                               BaseType_t xFamily,
                                               const uint8_t * pucAddress )
    {
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
        struct freertos_addrinfo * pxAddrInfo = NULL;
 80079a4:	2300      	movs	r3, #0
 80079a6:	61fb      	str	r3, [r7, #28]
        void * pvBuffer;

        /* 'xFamily' might not be used when IPv6 is disabled. */
        ( void ) xFamily;
        pvBuffer = pvPortMalloc( sizeof( *pxAddrInfo ) );
 80079a8:	2048      	movs	r0, #72	@ 0x48
 80079aa:	f7fe fdeb 	bl	8006584 <pvPortMalloc>
 80079ae:	61b8      	str	r0, [r7, #24]

        if( pvBuffer != NULL )
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d057      	beq.n	8007a66 <pxNew_AddrInfo+0xce>
        {
            pxAddrInfo = ( struct freertos_addrinfo * ) pvBuffer;
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	61fb      	str	r3, [r7, #28]

            ( void ) memset( pxAddrInfo, 0, sizeof( *pxAddrInfo ) );
 80079ba:	2248      	movs	r2, #72	@ 0x48
 80079bc:	2100      	movs	r1, #0
 80079be:	69f8      	ldr	r0, [r7, #28]
 80079c0:	f01a feeb 	bl	802279a <memset>
            #if ( ipconfigUSE_DNS_CACHE != 0 )
                pxAddrInfo->ai_canonname = pxAddrInfo->xPrivateStorage.ucName;
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	619a      	str	r2, [r3, #24]
                ( void ) strncpy( pxAddrInfo->xPrivateStorage.ucName, pcName, sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U );
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	3338      	adds	r3, #56	@ 0x38
 80079d2:	220f      	movs	r2, #15
 80079d4:	68f9      	ldr	r1, [r7, #12]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f01b fdac 	bl	8023534 <strncpy>
                pxAddrInfo->xPrivateStorage.ucName[ sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U ] = '\0';
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            #endif /* (ipconfigUSE_DNS_CACHE != 0 ) */

            pxAddrInfo->ai_addr = ( ( struct freertos_sockaddr * ) &( pxAddrInfo->xPrivateStorage.sockaddr ) );
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	f103 0220 	add.w	r2, r3, #32
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	615a      	str	r2, [r3, #20]

            switch( xFamily )
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d003      	beq.n	80079fc <pxNew_AddrInfo+0x64>
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b0a      	cmp	r3, #10
 80079f8:	d01e      	beq.n	8007a38 <pxNew_AddrInfo+0xa0>
 80079fa:	e02b      	b.n	8007a54 <pxNew_AddrInfo+0xbc>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                       {
                           /* ulChar2u32 reads from big-endian to host-endian. */
                           uint32_t ulIPAddress = ulChar2u32( pucAddress );
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f003 f87d 	bl	800aafc <ulChar2u32>
 8007a02:	6178      	str	r0, [r7, #20]
                           /* Translate to network-endian. */
                           pxAddrInfo->ai_addr->sin_address.ulIP_IPv4 = FreeRTOS_htonl( ulIPAddress );
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	061a      	lsls	r2, r3, #24
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	021b      	lsls	r3, r3, #8
 8007a0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007a10:	431a      	orrs	r2, r3
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	0a1b      	lsrs	r3, r3, #8
 8007a16:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007a1a:	ea42 0103 	orr.w	r1, r2, r3
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	0e1a      	lsrs	r2, r3, #24
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	609a      	str	r2, [r3, #8]
                           pxAddrInfo->ai_family = FREERTOS_AF_INET4;
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	605a      	str	r2, [r3, #4]
                           pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv4_ADDRESS;
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	2204      	movs	r2, #4
 8007a34:	611a      	str	r2, [r3, #16]
                       }
                       break;
 8007a36:	e016      	b.n	8007a66 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxAddrInfo->ai_family = FREERTOS_AF_INET6;
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	220a      	movs	r2, #10
 8007a3c:	605a      	str	r2, [r3, #4]
                        pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv6_ADDRESS;
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	2210      	movs	r2, #16
 8007a42:	611a      	str	r2, [r3, #16]
                        ( void ) memcpy( pxAddrInfo->xPrivateStorage.sockaddr.sin_address.xIP_IPv6.ucBytes, pucAddress, ipSIZE_OF_IPv6_ADDRESS );
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	3328      	adds	r3, #40	@ 0x28
 8007a48:	2210      	movs	r2, #16
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f01a fd97 	bl	8022580 <memcpy>
                        break;
 8007a52:	e008      	b.n	8007a66 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "pxNew_AddrInfo: Undefined xFamily Type \n" ) );
 8007a54:	4806      	ldr	r0, [pc, #24]	@ (8007a70 <pxNew_AddrInfo+0xd8>)
 8007a56:	f01a fb77 	bl	8022148 <lUDPLoggingPrintf>

                    vPortFree( pvBuffer );
 8007a5a:	69b8      	ldr	r0, [r7, #24]
 8007a5c:	f7fe fe66 	bl	800672c <vPortFree>
                    pxAddrInfo = NULL;
 8007a60:	2300      	movs	r3, #0
 8007a62:	61fb      	str	r3, [r7, #28]

                    break;
 8007a64:	bf00      	nop
            }
        }

        return pxAddrInfo;
 8007a66:	69fb      	ldr	r3, [r7, #28]
    }
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3720      	adds	r7, #32
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	08024608 	.word	0x08024608

08007a74 <FreeRTOS_freeaddrinfo>:
/**
 * @brief Free a chain of structs of type 'freertos_addrinfo'.
 * @param[in] pxInfo The first find result.
 */
    void FreeRTOS_freeaddrinfo( struct freertos_addrinfo * pxInfo )
    {
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
        struct freertos_addrinfo * pxNext;
        struct freertos_addrinfo * pxIterator = pxInfo;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	60fb      	str	r3, [r7, #12]

        if( pxInfo != NULL )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00b      	beq.n	8007a9e <FreeRTOS_freeaddrinfo+0x2a>
        {
            while( pxIterator != NULL )
 8007a86:	e007      	b.n	8007a98 <FreeRTOS_freeaddrinfo+0x24>
            {
                pxNext = pxIterator->ai_next;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	60bb      	str	r3, [r7, #8]
                vPortFree( pxIterator );
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f7fe fe4c 	bl	800672c <vPortFree>
                pxIterator = pxNext;
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	60fb      	str	r3, [r7, #12]
            while( pxIterator != NULL )
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1f4      	bne.n	8007a88 <FreeRTOS_freeaddrinfo+0x14>
            }
        }
    }
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <ulDNSHandlePacket>:
 * @param[in] pxNetworkBuffer The network buffer to be parsed.
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b088      	sub	sp, #32
 8007aaa:	af02      	add	r7, sp, #8
 8007aac:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;
        size_t uxUDPPacketSize = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f002 fa92 	bl	8009fd8 <uxIPHeaderSizePacket>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	3316      	adds	r3, #22
 8007ab8:	617b      	str	r3, [r7, #20]

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= uxUDPPacketSize )
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d829      	bhi.n	8007b18 <ulDNSHandlePacket+0x72>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxUDPPacketSize;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	613b      	str	r3, [r7, #16]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	2b0b      	cmp	r3, #11
 8007ad2:	d921      	bls.n	8007b18 <ulDNSHandlePacket+0x72>
            {
                struct freertos_addrinfo * pxAddressInfo = NULL;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60bb      	str	r3, [r7, #8]
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPPacketSize ] );
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	4413      	add	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]
                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
                                            uxPayloadSize,
                                            &( pxAddressInfo ),
                                            pdFALSE,
                                            FreeRTOS_ntohs( pxNetworkBuffer->usPort ) );
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007ae6:	021b      	lsls	r3, r3, #8
 8007ae8:	b21a      	sxth	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007aee:	0a1b      	lsrs	r3, r3, #8
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	b21b      	sxth	r3, r3
 8007af4:	4313      	orrs	r3, r2
 8007af6:	b21b      	sxth	r3, r3
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	f107 0208 	add.w	r2, r7, #8
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	2300      	movs	r3, #0
 8007b02:	6939      	ldr	r1, [r7, #16]
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 fcb5 	bl	8008474 <DNS_ParseDNSReply>

                if( pxAddressInfo != NULL )
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <ulDNSHandlePacket+0x72>
                {
                    FreeRTOS_freeaddrinfo( pxAddressInfo );
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff ffae 	bl	8007a74 <FreeRTOS_freeaddrinfo>
                }
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 8007b18:	2300      	movs	r3, #0
    }
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3718      	adds	r7, #24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <FreeRTOS_dns_update>:
    BaseType_t FreeRTOS_dns_update( const char * pcName,
                                    IPv46_Address_t * pxIP,
                                    uint32_t ulTTL,
                                    BaseType_t xLookUp,
                                    struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b086      	sub	sp, #24
 8007b26:	af02      	add	r7, sp, #8
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
 8007b2e:	603b      	str	r3, [r7, #0]
        /* _HT_ we can as well remove the parameter 'xLookUp'. */
        ( void ) xLookUp;
        ( void ) FreeRTOS_ProcessDNSCache( pcName,
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	2300      	movs	r3, #0
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	68b9      	ldr	r1, [r7, #8]
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f000 f818 	bl	8007b70 <FreeRTOS_ProcessDNSCache>
                                           pxIP,
                                           ulTTL,
                                           pdFALSE,
                                           ppxAddressInfo );
        return pdTRUE;
 8007b40:	2301      	movs	r3, #1
    }
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <FreeRTOS_dnsclear>:
/**
 * @brief perform a dns clear in the local cache
 * @post the global structure \a xDNSCache is modified
 */
    void FreeRTOS_dnsclear( void )
    {
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
        ( void ) memset( xDNSCache, 0x0, sizeof( xDNSCache ) );
 8007b50:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8007b54:	2100      	movs	r1, #0
 8007b56:	4804      	ldr	r0, [pc, #16]	@ (8007b68 <FreeRTOS_dnsclear+0x1c>)
 8007b58:	f01a fe1f 	bl	802279a <memset>
        uxFreeEntry = 0U;
 8007b5c:	4b03      	ldr	r3, [pc, #12]	@ (8007b6c <FreeRTOS_dnsclear+0x20>)
 8007b5e:	2200      	movs	r2, #0
 8007b60:	601a      	str	r2, [r3, #0]
    }
 8007b62:	bf00      	nop
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20000f50 	.word	0x20000f50
 8007b6c:	20001100 	.word	0x20001100

08007b70 <FreeRTOS_ProcessDNSCache>:
    BaseType_t FreeRTOS_ProcessDNSCache( const char * pcName,
                                         IPv46_Address_t * pxIP,
                                         uint32_t ulTTL,
                                         BaseType_t xLookUp,
                                         struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007b70:	b590      	push	{r4, r7, lr}
 8007b72:	b09b      	sub	sp, #108	@ 0x6c
 8007b74:	af02      	add	r7, sp, #8
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
 8007b7c:	603b      	str	r3, [r7, #0]
        UBaseType_t uxIndex;
        BaseType_t xResult;
        /* Get the current time in clock-ticks. */
        TickType_t xCurrentTickCount = xTaskGetTickCount();
 8007b7e:	f7fc fe91 	bl	80048a4 <xTaskGetTickCount>
 8007b82:	65b8      	str	r0, [r7, #88]	@ 0x58
        /* In milliseconds. */
        uint32_t ulCurrentTimeSeconds;

        configASSERT( ( pcName != NULL ) );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d103      	bne.n	8007b92 <FreeRTOS_ProcessDNSCache+0x22>
 8007b8a:	21d8      	movs	r1, #216	@ 0xd8
 8007b8c:	4841      	ldr	r0, [pc, #260]	@ (8007c94 <FreeRTOS_ProcessDNSCache+0x124>)
 8007b8e:	f7f9 fee3 	bl	8001958 <vAssertCalled>

        if( xLookUp != pdFALSE )
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <FreeRTOS_ProcessDNSCache+0x2e>
        {
            pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	601a      	str	r2, [r3, #0]
        }

        ulCurrentTimeSeconds = ( uint32_t ) ( ( xCurrentTickCount / portTICK_PERIOD_MS ) / 1000U );
 8007b9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ba0:	4a3d      	ldr	r2, [pc, #244]	@ (8007c98 <FreeRTOS_ProcessDNSCache+0x128>)
 8007ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba6:	099b      	lsrs	r3, r3, #6
 8007ba8:	657b      	str	r3, [r7, #84]	@ 0x54
        xResult = prvFindEntryIndex( pcName, pxIP, &uxIndex );
 8007baa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8007bae:	461a      	mov	r2, r3
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 f87a 	bl	8007cac <prvFindEntryIndex>
 8007bb8:	6538      	str	r0, [r7, #80]	@ 0x50

        if( xResult == pdTRUE )
 8007bba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d110      	bne.n	8007be2 <FreeRTOS_ProcessDNSCache+0x72>
        { /* Element found */
            /* Is this function called for a lookup or to add/update an IP address? */
            if( xLookUp == pdTRUE )
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d106      	bne.n	8007bd4 <FreeRTOS_ProcessDNSCache+0x64>
            {
                /* This statement can only be reached when xResult is true; which
                 * implies that the entry is present and a 'get' operation will result
                 * in success. Therefore, it is safe to ignore the return value of the
                 * below function. */
                ( void ) prvGetCacheIPEntry( uxIndex,
 8007bc6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007bc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007bcc:	68b9      	ldr	r1, [r7, #8]
 8007bce:	f000 f8b1 	bl	8007d34 <prvGetCacheIPEntry>
 8007bd2:	e013      	b.n	8007bfc <FreeRTOS_ProcessDNSCache+0x8c>
                                             ulCurrentTimeSeconds,
                                             ppxAddressInfo );
            }
            else
            {
                prvUpdateCacheEntry( uxIndex,
 8007bd4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	f000 f94a 	bl	8007e74 <prvUpdateCacheEntry>
 8007be0:	e00c      	b.n	8007bfc <FreeRTOS_ProcessDNSCache+0x8c>
                                     ulCurrentTimeSeconds );
            }
        }
        else /* Element not Found xResult = pdFALSE */
        {
            if( xLookUp == pdTRUE )
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d103      	bne.n	8007bf0 <FreeRTOS_ProcessDNSCache+0x80>
            {
                pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	e005      	b.n	8007bfc <FreeRTOS_ProcessDNSCache+0x8c>
            }
            else
            {
                prvInsertCacheEntry( pcName,
 8007bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	6879      	ldr	r1, [r7, #4]
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 f994 	bl	8007f24 <prvInsertCacheEntry>
                                     ulCurrentTimeSeconds );
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( ( xLookUp == pdFALSE ) || ( pxIP->xIPAddress.ulIP_IPv4 != 0U ) )
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <FreeRTOS_ProcessDNSCache+0x9a>
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d03f      	beq.n	8007c8a <FreeRTOS_ProcessDNSCache+0x11a>
            {
                char pcAddress[ 40 ];
                IP_Address_t xAddress;
                BaseType_t xFamily = FREERTOS_AF_INET;
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	65fb      	str	r3, [r7, #92]	@ 0x5c

                switch( pxIP->xIs_IPv6 )
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00c      	beq.n	8007c30 <FreeRTOS_ProcessDNSCache+0xc0>
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d10e      	bne.n	8007c38 <FreeRTOS_ProcessDNSCache+0xc8>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case pdTRUE:
                            ( void ) memcpy( xAddress.xIP_IPv6.ucBytes, pxIP->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8007c20:	6818      	ldr	r0, [r3, #0]
 8007c22:	6859      	ldr	r1, [r3, #4]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            xFamily = FREERTOS_AF_INET6;
 8007c2a:	230a      	movs	r3, #10
 8007c2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            break;
 8007c2e:	e007      	b.n	8007c40 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE:
                            xAddress.ulIP_IPv4 = pxIP->xIPAddress.ulIP_IPv4;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            break;
 8007c36:	e003      	b.n	8007c40 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: Undefined IP Type \n" ) );
 8007c38:	4818      	ldr	r0, [pc, #96]	@ (8007c9c <FreeRTOS_ProcessDNSCache+0x12c>)
 8007c3a:	f01a fa85 	bl	8022148 <lUDPLoggingPrintf>
                        break;
 8007c3e:	bf00      	nop
                }

                ( void ) FreeRTOS_inet_ntop( xFamily,
 8007c40:	f107 0214 	add.w	r2, r7, #20
 8007c44:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8007c48:	2328      	movs	r3, #40	@ 0x28
 8007c4a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8007c4c:	f007 fc62 	bl	800f514 <FreeRTOS_inet_ntop>
                                             ( const void * ) xAddress.xIP_IPv6.ucBytes,
                                             pcAddress,
                                             ( socklen_t ) sizeof( pcAddress ) );
                FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: %s: '%s' @ %s (TTL %u)\n",
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <FreeRTOS_ProcessDNSCache+0xea>
 8007c56:	4912      	ldr	r1, [pc, #72]	@ (8007ca0 <FreeRTOS_ProcessDNSCache+0x130>)
 8007c58:	e000      	b.n	8007c5c <FreeRTOS_ProcessDNSCache+0xec>
 8007c5a:	4912      	ldr	r1, [pc, #72]	@ (8007ca4 <FreeRTOS_ProcessDNSCache+0x134>)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	061a      	lsls	r2, r3, #24
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	021b      	lsls	r3, r3, #8
 8007c64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	0a1b      	lsrs	r3, r3, #8
 8007c6e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007c72:	431a      	orrs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	0e1b      	lsrs	r3, r3, #24
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	f107 0214 	add.w	r2, r7, #20
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	4613      	mov	r3, r2
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	4808      	ldr	r0, [pc, #32]	@ (8007ca8 <FreeRTOS_ProcessDNSCache+0x138>)
 8007c86:	f01a fa5f 	bl	8022148 <lUDPLoggingPrintf>
                                         pcAddress,
                                         ( unsigned ) FreeRTOS_ntohl( ulTTL ) ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return xResult;
 8007c8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    }
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3764      	adds	r7, #100	@ 0x64
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd90      	pop	{r4, r7, pc}
 8007c94:	08024884 	.word	0x08024884
 8007c98:	10624dd3 	.word	0x10624dd3
 8007c9c:	080248b8 	.word	0x080248b8
 8007ca0:	080248e8 	.word	0x080248e8
 8007ca4:	080248f0 	.word	0x080248f0
 8007ca8:	080248f4 	.word	0x080248f4

08007cac <prvFindEntryIndex>:
 * @returns res pdTRUE if index in found else pdFALSE
 */
    static BaseType_t prvFindEntryIndex( const char * pcName,
                                         const IPv46_Address_t * pxIP,
                                         UBaseType_t * uxResult )
    {
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIndex;

        /* For each entry in the DNS cache table. */
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	613b      	str	r3, [r7, #16]
 8007cc0:	e02d      	b.n	8007d1e <prvFindEntryIndex+0x72>
        {
            if( xDNSCache[ uxIndex ].pcName[ 0 ] == ( char ) 0 )
 8007cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8007d30 <prvFindEntryIndex+0x84>)
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	216c      	movs	r1, #108	@ 0x6c
 8007cc8:	fb01 f303 	mul.w	r3, r1, r3
 8007ccc:	4413      	add	r3, r2
 8007cce:	3350      	adds	r3, #80	@ 0x50
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d01f      	beq.n	8007d16 <prvFindEntryIndex+0x6a>
            { /* empty slot */
                continue;
            }

            if( strcmp( xDNSCache[ uxIndex ].pcName, pcName ) == 0 )
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	226c      	movs	r2, #108	@ 0x6c
 8007cda:	fb02 f303 	mul.w	r3, r2, r3
 8007cde:	3350      	adds	r3, #80	@ 0x50
 8007ce0:	4a13      	ldr	r2, [pc, #76]	@ (8007d30 <prvFindEntryIndex+0x84>)
 8007ce2:	4413      	add	r3, r2
 8007ce4:	68f9      	ldr	r1, [r7, #12]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7f8 fafa 	bl	80002e0 <strcmp>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d112      	bne.n	8007d18 <prvFindEntryIndex+0x6c>
            { /* hostname found */
                /* IPv6 is enabled, See if the cache entry has the correct type. */
                if( pxIP->xIs_IPv6 == xDNSCache[ uxIndex ].xAddresses[ 0 ].xIs_IPv6 )
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	691a      	ldr	r2, [r3, #16]
 8007cf6:	490e      	ldr	r1, [pc, #56]	@ (8007d30 <prvFindEntryIndex+0x84>)
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	206c      	movs	r0, #108	@ 0x6c
 8007cfc:	fb00 f303 	mul.w	r3, r0, r3
 8007d00:	440b      	add	r3, r1
 8007d02:	3310      	adds	r3, #16
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d106      	bne.n	8007d18 <prvFindEntryIndex+0x6c>
                {
                    xReturn = pdTRUE;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	617b      	str	r3, [r7, #20]
                    *uxResult = uxIndex;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	601a      	str	r2, [r3, #0]
                    break;
 8007d14:	e006      	b.n	8007d24 <prvFindEntryIndex+0x78>
                continue;
 8007d16:	bf00      	nop
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	613b      	str	r3, [r7, #16]
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	d9ce      	bls.n	8007cc2 <prvFindEntryIndex+0x16>
                }
            }
        }

        return xReturn;
 8007d24:	697b      	ldr	r3, [r7, #20]
    }
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000f50 	.word	0x20000f50

08007d34 <prvGetCacheIPEntry>:

    static BaseType_t prvGetCacheIPEntry( UBaseType_t uxIndex,
                                          IPv46_Address_t * pxIP,
                                          uint32_t ulCurrentTimeSeconds,
                                          struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b088      	sub	sp, #32
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	603b      	str	r3, [r7, #0]
        BaseType_t isRead;
        uint32_t ulIPAddressIndex = 0;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61bb      	str	r3, [r7, #24]
        uint32_t ulAge = ulCurrentTimeSeconds - xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds;
 8007d46:	4a4a      	ldr	r2, [pc, #296]	@ (8007e70 <prvGetCacheIPEntry+0x13c>)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	216c      	movs	r1, #108	@ 0x6c
 8007d4c:	fb01 f303 	mul.w	r3, r1, r3
 8007d50:	4413      	add	r3, r2
 8007d52:	3364      	adds	r3, #100	@ 0x64
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	617b      	str	r3, [r7, #20]

        /* Confirm that the record is still fresh.
         * The field ulTTL was stored as network-endian. */
        if( ulAge < FreeRTOS_ntohl( xDNSCache[ uxIndex ].ulTTL ) )
 8007d5c:	4a44      	ldr	r2, [pc, #272]	@ (8007e70 <prvGetCacheIPEntry+0x13c>)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	216c      	movs	r1, #108	@ 0x6c
 8007d62:	fb01 f303 	mul.w	r3, r1, r3
 8007d66:	4413      	add	r3, r2
 8007d68:	3360      	adds	r3, #96	@ 0x60
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	061a      	lsls	r2, r3, #24
 8007d6e:	4940      	ldr	r1, [pc, #256]	@ (8007e70 <prvGetCacheIPEntry+0x13c>)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	206c      	movs	r0, #108	@ 0x6c
 8007d74:	fb00 f303 	mul.w	r3, r0, r3
 8007d78:	440b      	add	r3, r1
 8007d7a:	3360      	adds	r3, #96	@ 0x60
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007d84:	431a      	orrs	r2, r3
 8007d86:	493a      	ldr	r1, [pc, #232]	@ (8007e70 <prvGetCacheIPEntry+0x13c>)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	206c      	movs	r0, #108	@ 0x6c
 8007d8c:	fb00 f303 	mul.w	r3, r0, r3
 8007d90:	440b      	add	r3, r1
 8007d92:	3360      	adds	r3, #96	@ 0x60
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	0a1b      	lsrs	r3, r3, #8
 8007d98:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007d9c:	431a      	orrs	r2, r3
 8007d9e:	4934      	ldr	r1, [pc, #208]	@ (8007e70 <prvGetCacheIPEntry+0x13c>)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	206c      	movs	r0, #108	@ 0x6c
 8007da4:	fb00 f303 	mul.w	r3, r0, r3
 8007da8:	440b      	add	r3, r1
 8007daa:	3360      	adds	r3, #96	@ 0x60
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	0e1b      	lsrs	r3, r3, #24
 8007db0:	4313      	orrs	r3, r2
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d24a      	bcs.n	8007e4e <prvGetCacheIPEntry+0x11a>
                /*  modulo it by the number of IP addresses to keep it in range.     */
                /*  Also perform a final modulo by the max number of IP addresses    */
                /*  per DNS cache entry to prevent out-of-bounds access in the event */
                /*  that ucNumIPAddresses has been corrupted.                        */

                ucIndex = xDNSCache[ uxIndex ].ucCurrentIPAddress % xDNSCache[ uxIndex ].ucNumIPAddresses;
 8007db8:	4a2d      	ldr	r2, [pc, #180]	@ (8007e70 <prvGetCacheIPEntry+0x13c>)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	216c      	movs	r1, #108	@ 0x6c
 8007dbe:	fb01 f303 	mul.w	r3, r1, r3
 8007dc2:	4413      	add	r3, r2
 8007dc4:	3369      	adds	r3, #105	@ 0x69
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	4929      	ldr	r1, [pc, #164]	@ (8007e70 <prvGetCacheIPEntry+0x13c>)
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	206c      	movs	r0, #108	@ 0x6c
 8007dce:	fb00 f202 	mul.w	r2, r0, r2
 8007dd2:	440a      	add	r2, r1
 8007dd4:	3268      	adds	r2, #104	@ 0x68
 8007dd6:	7812      	ldrb	r2, [r2, #0]
 8007dd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ddc:	fb01 f202 	mul.w	r2, r1, r2
 8007de0:	1a9b      	subs	r3, r3, r2
 8007de2:	74fb      	strb	r3, [r7, #19]
                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8007de4:	7cfb      	ldrb	r3, [r7, #19]
 8007de6:	f003 0303 	and.w	r3, r3, #3
 8007dea:	74fb      	strb	r3, [r7, #19]
                ulIPAddressIndex = ucIndex;
 8007dec:	7cfb      	ldrb	r3, [r7, #19]
 8007dee:	61bb      	str	r3, [r7, #24]

                xDNSCache[ uxIndex ].ucCurrentIPAddress++;
 8007df0:	4a1f      	ldr	r2, [pc, #124]	@ (8007e70 <prvGetCacheIPEntry+0x13c>)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	216c      	movs	r1, #108	@ 0x6c
 8007df6:	fb01 f303 	mul.w	r3, r1, r3
 8007dfa:	4413      	add	r3, r2
 8007dfc:	3369      	adds	r3, #105	@ 0x69
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	3301      	adds	r3, #1
 8007e02:	b2d8      	uxtb	r0, r3
 8007e04:	4a1a      	ldr	r2, [pc, #104]	@ (8007e70 <prvGetCacheIPEntry+0x13c>)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	216c      	movs	r1, #108	@ 0x6c
 8007e0a:	fb01 f303 	mul.w	r3, r1, r3
 8007e0e:	4413      	add	r3, r2
 8007e10:	3369      	adds	r3, #105	@ 0x69
 8007e12:	4602      	mov	r2, r0
 8007e14:	701a      	strb	r2, [r3, #0]
            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

            ( void ) memcpy( pxIP, &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), sizeof( *pxIP ) );
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	216c      	movs	r1, #108	@ 0x6c
 8007e24:	fb01 f202 	mul.w	r2, r1, r2
 8007e28:	4413      	add	r3, r2
 8007e2a:	4a11      	ldr	r2, [pc, #68]	@ (8007e70 <prvGetCacheIPEntry+0x13c>)
 8007e2c:	4413      	add	r3, r2
 8007e2e:	2214      	movs	r2, #20
 8007e30:	4619      	mov	r1, r3
 8007e32:	68b8      	ldr	r0, [r7, #8]
 8007e34:	f01a fba4 	bl	8022580 <memcpy>
            isRead = pdTRUE;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	61fb      	str	r3, [r7, #28]

            if( ppxAddressInfo != NULL )
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d010      	beq.n	8007e64 <prvGetCacheIPEntry+0x130>
            {
                /* Copy all entries from position 'uxIndex' to a linked struct addrinfo. */
                prvReadDNSCache( ( BaseType_t ) uxIndex, ppxAddressInfo );
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 f8dc 	bl	8008004 <prvReadDNSCache>
 8007e4c:	e00a      	b.n	8007e64 <prvGetCacheIPEntry+0x130>
            }
        }
        else
        {
            /* Age out the old cached record. */
            xDNSCache[ uxIndex ].pcName[ 0 ] = ( char ) 0;
 8007e4e:	4a08      	ldr	r2, [pc, #32]	@ (8007e70 <prvGetCacheIPEntry+0x13c>)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	216c      	movs	r1, #108	@ 0x6c
 8007e54:	fb01 f303 	mul.w	r3, r1, r3
 8007e58:	4413      	add	r3, r2
 8007e5a:	3350      	adds	r3, #80	@ 0x50
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	701a      	strb	r2, [r3, #0]
            isRead = pdFALSE;
 8007e60:	2300      	movs	r3, #0
 8007e62:	61fb      	str	r3, [r7, #28]
        }

        return isRead;
 8007e64:	69fb      	ldr	r3, [r7, #28]
    }
 8007e66:	4618      	mov	r0, r3
 8007e68:	3720      	adds	r7, #32
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	20000f50 	.word	0x20000f50

08007e74 <prvUpdateCacheEntry>:
 */
    static void prvUpdateCacheEntry( UBaseType_t uxIndex,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
 8007e80:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddressIndex = 0;
 8007e82:	2300      	movs	r3, #0
 8007e84:	617b      	str	r3, [r7, #20]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            if( xDNSCache[ uxIndex ].ucNumIPAddresses <
 8007e86:	4a26      	ldr	r2, [pc, #152]	@ (8007f20 <prvUpdateCacheEntry+0xac>)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	216c      	movs	r1, #108	@ 0x6c
 8007e8c:	fb01 f303 	mul.w	r3, r1, r3
 8007e90:	4413      	add	r3, r2
 8007e92:	3368      	adds	r3, #104	@ 0x68
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	d81b      	bhi.n	8007ed2 <prvUpdateCacheEntry+0x5e>
                ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
            {
                /* If more answers exist than there are IP address storage
                 * slots they will overwrite entry 0 */
                ulIPAddressIndex = xDNSCache[ uxIndex ].ucNumIPAddresses;
 8007e9a:	4a21      	ldr	r2, [pc, #132]	@ (8007f20 <prvUpdateCacheEntry+0xac>)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	216c      	movs	r1, #108	@ 0x6c
 8007ea0:	fb01 f303 	mul.w	r3, r1, r3
 8007ea4:	4413      	add	r3, r2
 8007ea6:	3368      	adds	r3, #104	@ 0x68
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	617b      	str	r3, [r7, #20]
                xDNSCache[ uxIndex ].ucNumIPAddresses++;
 8007eac:	4a1c      	ldr	r2, [pc, #112]	@ (8007f20 <prvUpdateCacheEntry+0xac>)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	216c      	movs	r1, #108	@ 0x6c
 8007eb2:	fb01 f303 	mul.w	r3, r1, r3
 8007eb6:	4413      	add	r3, r2
 8007eb8:	3368      	adds	r3, #104	@ 0x68
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	b2d8      	uxtb	r0, r3
 8007ec0:	4a17      	ldr	r2, [pc, #92]	@ (8007f20 <prvUpdateCacheEntry+0xac>)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	216c      	movs	r1, #108	@ 0x6c
 8007ec6:	fb01 f303 	mul.w	r3, r1, r3
 8007eca:	4413      	add	r3, r2
 8007ecc:	3368      	adds	r3, #104	@ 0x68
 8007ece:	4602      	mov	r2, r0
 8007ed0:	701a      	strb	r2, [r3, #0]
            }
        #endif
        ( void ) memcpy( &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), pxIP, sizeof( *pxIP ) );
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	216c      	movs	r1, #108	@ 0x6c
 8007ee0:	fb01 f202 	mul.w	r2, r1, r2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8007f20 <prvUpdateCacheEntry+0xac>)
 8007ee8:	4413      	add	r3, r2
 8007eea:	2214      	movs	r2, #20
 8007eec:	6879      	ldr	r1, [r7, #4]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f01a fb46 	bl	8022580 <memcpy>
        xDNSCache[ uxIndex ].ulTTL = ulTTL;
 8007ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8007f20 <prvUpdateCacheEntry+0xac>)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	216c      	movs	r1, #108	@ 0x6c
 8007efa:	fb01 f303 	mul.w	r3, r1, r3
 8007efe:	4413      	add	r3, r2
 8007f00:	3360      	adds	r3, #96	@ 0x60
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	601a      	str	r2, [r3, #0]
        xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8007f06:	4a06      	ldr	r2, [pc, #24]	@ (8007f20 <prvUpdateCacheEntry+0xac>)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	216c      	movs	r1, #108	@ 0x6c
 8007f0c:	fb01 f303 	mul.w	r3, r1, r3
 8007f10:	4413      	add	r3, r2
 8007f12:	3364      	adds	r3, #100	@ 0x64
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	601a      	str	r2, [r3, #0]
    }
 8007f18:	bf00      	nop
 8007f1a:	3718      	adds	r7, #24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	20000f50 	.word	0x20000f50

08007f24 <prvInsertCacheEntry>:
 */
    static void prvInsertCacheEntry( const char * pcName,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	603b      	str	r3, [r7, #0]
        /* Add or update the item. */
        if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f7f8 f9de 	bl	80002f4 <strlen>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b0f      	cmp	r3, #15
 8007f3c:	d859      	bhi.n	8007ff2 <prvInsertCacheEntry+0xce>
        {
            ( void ) strncpy( xDNSCache[ uxFreeEntry ].pcName, pcName, ipconfigDNS_CACHE_NAME_LENGTH );
 8007f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8007ffc <prvInsertCacheEntry+0xd8>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	226c      	movs	r2, #108	@ 0x6c
 8007f44:	fb02 f303 	mul.w	r3, r2, r3
 8007f48:	3350      	adds	r3, #80	@ 0x50
 8007f4a:	4a2d      	ldr	r2, [pc, #180]	@ (8008000 <prvInsertCacheEntry+0xdc>)
 8007f4c:	4413      	add	r3, r2
 8007f4e:	2210      	movs	r2, #16
 8007f50:	68f9      	ldr	r1, [r7, #12]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f01b faee 	bl	8023534 <strncpy>
            ( void ) memcpy( &( xDNSCache[ uxFreeEntry ].xAddresses[ 0 ] ), pxIP, sizeof( *pxIP ) );
 8007f58:	4b28      	ldr	r3, [pc, #160]	@ (8007ffc <prvInsertCacheEntry+0xd8>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	226c      	movs	r2, #108	@ 0x6c
 8007f5e:	fb02 f303 	mul.w	r3, r2, r3
 8007f62:	4a27      	ldr	r2, [pc, #156]	@ (8008000 <prvInsertCacheEntry+0xdc>)
 8007f64:	4413      	add	r3, r2
 8007f66:	2214      	movs	r2, #20
 8007f68:	6879      	ldr	r1, [r7, #4]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f01a fb08 	bl	8022580 <memcpy>


            xDNSCache[ uxFreeEntry ].ulTTL = ulTTL;
 8007f70:	4b22      	ldr	r3, [pc, #136]	@ (8007ffc <prvInsertCacheEntry+0xd8>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a22      	ldr	r2, [pc, #136]	@ (8008000 <prvInsertCacheEntry+0xdc>)
 8007f76:	216c      	movs	r1, #108	@ 0x6c
 8007f78:	fb01 f303 	mul.w	r3, r1, r3
 8007f7c:	4413      	add	r3, r2
 8007f7e:	3360      	adds	r3, #96	@ 0x60
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	601a      	str	r2, [r3, #0]
            xDNSCache[ uxFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8007f84:	4b1d      	ldr	r3, [pc, #116]	@ (8007ffc <prvInsertCacheEntry+0xd8>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a1d      	ldr	r2, [pc, #116]	@ (8008000 <prvInsertCacheEntry+0xdc>)
 8007f8a:	216c      	movs	r1, #108	@ 0x6c
 8007f8c:	fb01 f303 	mul.w	r3, r1, r3
 8007f90:	4413      	add	r3, r2
 8007f92:	3364      	adds	r3, #100	@ 0x64
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	601a      	str	r2, [r3, #0]
            #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
                xDNSCache[ uxFreeEntry ].ucNumIPAddresses = 1;
 8007f98:	4b18      	ldr	r3, [pc, #96]	@ (8007ffc <prvInsertCacheEntry+0xd8>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a18      	ldr	r2, [pc, #96]	@ (8008000 <prvInsertCacheEntry+0xdc>)
 8007f9e:	216c      	movs	r1, #108	@ 0x6c
 8007fa0:	fb01 f303 	mul.w	r3, r1, r3
 8007fa4:	4413      	add	r3, r2
 8007fa6:	3368      	adds	r3, #104	@ 0x68
 8007fa8:	2201      	movs	r2, #1
 8007faa:	701a      	strb	r2, [r3, #0]
                xDNSCache[ uxFreeEntry ].ucCurrentIPAddress = 0;
 8007fac:	4b13      	ldr	r3, [pc, #76]	@ (8007ffc <prvInsertCacheEntry+0xd8>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a13      	ldr	r2, [pc, #76]	@ (8008000 <prvInsertCacheEntry+0xdc>)
 8007fb2:	216c      	movs	r1, #108	@ 0x6c
 8007fb4:	fb01 f303 	mul.w	r3, r1, r3
 8007fb8:	4413      	add	r3, r2
 8007fba:	3369      	adds	r3, #105	@ 0x69
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	701a      	strb	r2, [r3, #0]

                /* Initialize all remaining IP addresses in this entry to 0 */
                ( void ) memset( &xDNSCache[ uxFreeEntry ].xAddresses[ 1 ],
 8007fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8007ffc <prvInsertCacheEntry+0xd8>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	226c      	movs	r2, #108	@ 0x6c
 8007fc6:	fb02 f303 	mul.w	r3, r2, r3
 8007fca:	3314      	adds	r3, #20
 8007fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8008000 <prvInsertCacheEntry+0xdc>)
 8007fce:	4413      	add	r3, r2
 8007fd0:	223c      	movs	r2, #60	@ 0x3c
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f01a fbe0 	bl	802279a <memset>
                                 0,
                                 sizeof( xDNSCache[ uxFreeEntry ].xAddresses[ 1 ] ) *
                                 ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
            #endif
            uxFreeEntry++;
 8007fda:	4b08      	ldr	r3, [pc, #32]	@ (8007ffc <prvInsertCacheEntry+0xd8>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	4a06      	ldr	r2, [pc, #24]	@ (8007ffc <prvInsertCacheEntry+0xd8>)
 8007fe2:	6013      	str	r3, [r2, #0]

            if( uxFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8007fe4:	4b05      	ldr	r3, [pc, #20]	@ (8007ffc <prvInsertCacheEntry+0xd8>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	d102      	bne.n	8007ff2 <prvInsertCacheEntry+0xce>
            {
                uxFreeEntry = 0;
 8007fec:	4b03      	ldr	r3, [pc, #12]	@ (8007ffc <prvInsertCacheEntry+0xd8>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8007ff2:	bf00      	nop
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20001100 	.word	0x20001100
 8008000:	20000f50 	.word	0x20000f50

08008004 <prvReadDNSCache>:
 * @param[in] uxIndex The index from where entries must be copied.
 * @param[out] ppxAddressInfo Target to store the DNS entries.
 */
    static void prvReadDNSCache( BaseType_t uxIndex,
                                 struct freertos_addrinfo ** ppxAddressInfo )
    {
 8008004:	b580      	push	{r7, lr}
 8008006:	b088      	sub	sp, #32
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
        size_t uxIPAddressIndex;
        size_t uxNumIPAddresses = 1U;
 800800e:	2301      	movs	r3, #1
 8008010:	61bb      	str	r3, [r7, #24]
        const IPv46_Address_t * pxAddresses;
        struct freertos_addrinfo * pxNewAddress = NULL;
 8008012:	2300      	movs	r3, #0
 8008014:	617b      	str	r3, [r7, #20]
        struct freertos_addrinfo ** ppxLastAddress = ppxAddressInfo;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	613b      	str	r3, [r7, #16]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            uxNumIPAddresses = ( size_t ) xDNSCache[ uxIndex ].ucNumIPAddresses;
 800801a:	4a2e      	ldr	r2, [pc, #184]	@ (80080d4 <prvReadDNSCache+0xd0>)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	216c      	movs	r1, #108	@ 0x6c
 8008020:	fb01 f303 	mul.w	r3, r1, r3
 8008024:	4413      	add	r3, r2
 8008026:	3368      	adds	r3, #104	@ 0x68
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	61bb      	str	r3, [r7, #24]

            if( uxNumIPAddresses > ( size_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	2b04      	cmp	r3, #4
 8008030:	d901      	bls.n	8008036 <prvReadDNSCache+0x32>
            {
                /* Make this a configASSERT()? */
                uxNumIPAddresses = ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8008032:	2304      	movs	r3, #4
 8008034:	61bb      	str	r3, [r7, #24]
            }
        #endif /* ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8008036:	2300      	movs	r3, #0
 8008038:	61fb      	str	r3, [r7, #28]
 800803a:	e041      	b.n	80080c0 <prvReadDNSCache+0xbc>
        {
            pxAddresses = &( xDNSCache[ uxIndex ].xAddresses[ uxIPAddressIndex ] );
 800803c:	69fa      	ldr	r2, [r7, #28]
 800803e:	4613      	mov	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	216c      	movs	r1, #108	@ 0x6c
 800804a:	fb01 f202 	mul.w	r2, r1, r2
 800804e:	4413      	add	r3, r2
 8008050:	4a20      	ldr	r2, [pc, #128]	@ (80080d4 <prvReadDNSCache+0xd0>)
 8008052:	4413      	add	r3, r2
 8008054:	60fb      	str	r3, [r7, #12]

            switch( pxAddresses->xIs_IPv6 ) /* LCOV_EXCL_BR_LINE - xIs_IPv6 is always either pdFALSE or pdTRUE. */
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <prvReadDNSCache+0x60>
 800805e:	2b01      	cmp	r3, #1
 8008060:	d010      	beq.n	8008084 <prvReadDNSCache+0x80>
 8008062:	e01d      	b.n	80080a0 <prvReadDNSCache+0x9c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE:
                       {
                           const uint8_t * ucBytes = ( const uint8_t * ) &( pxAddresses->xIPAddress.ulIP_IPv4 );
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	60bb      	str	r3, [r7, #8]
                           pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET4, ucBytes );
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	226c      	movs	r2, #108	@ 0x6c
 800806c:	fb02 f303 	mul.w	r3, r2, r3
 8008070:	3350      	adds	r3, #80	@ 0x50
 8008072:	4a18      	ldr	r2, [pc, #96]	@ (80080d4 <prvReadDNSCache+0xd0>)
 8008074:	4413      	add	r3, r2
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	2102      	movs	r1, #2
 800807a:	4618      	mov	r0, r3
 800807c:	f7ff fc8c 	bl	8007998 <pxNew_AddrInfo>
 8008080:	6178      	str	r0, [r7, #20]
                       }
                       break;
 8008082:	e011      	b.n	80080a8 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE:
                        pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET6, pxAddresses->xIPAddress.xIP_IPv6.ucBytes );
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	226c      	movs	r2, #108	@ 0x6c
 8008088:	fb02 f303 	mul.w	r3, r2, r3
 800808c:	3350      	adds	r3, #80	@ 0x50
 800808e:	4a11      	ldr	r2, [pc, #68]	@ (80080d4 <prvReadDNSCache+0xd0>)
 8008090:	4413      	add	r3, r2
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	210a      	movs	r1, #10
 8008096:	4618      	mov	r0, r3
 8008098:	f7ff fc7e 	bl	8007998 <pxNew_AddrInfo>
 800809c:	6178      	str	r0, [r7, #20]
                        break;
 800809e:	e003      	b.n	80080a8 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default: /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "prvReadDNSCache: Undefined IP Type \n" ) );
 80080a0:	480d      	ldr	r0, [pc, #52]	@ (80080d8 <prvReadDNSCache+0xd4>)
 80080a2:	f01a f851 	bl	8022148 <lUDPLoggingPrintf>
                    break; /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
 80080a6:	bf00      	nop
            }

            if( pxNewAddress == NULL )
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00d      	beq.n	80080ca <prvReadDNSCache+0xc6>
                /* Malloc must has failed. */
                break;
            }

            /* Set either 'ppxAddressInfo' or 'pxNewAddress->ai_next'. */
            *( ppxLastAddress ) = pxNewAddress;
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	601a      	str	r2, [r3, #0]

            ppxLastAddress = &( pxNewAddress->ai_next );
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	331c      	adds	r3, #28
 80080b8:	613b      	str	r3, [r7, #16]
        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	3301      	adds	r3, #1
 80080be:	61fb      	str	r3, [r7, #28]
 80080c0:	69fa      	ldr	r2, [r7, #28]
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d3b9      	bcc.n	800803c <prvReadDNSCache+0x38>
        }
    }
 80080c8:	e000      	b.n	80080cc <prvReadDNSCache+0xc8>
                break;
 80080ca:	bf00      	nop
    }
 80080cc:	bf00      	nop
 80080ce:	3720      	adds	r7, #32
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	20000f50 	.word	0x20000f50
 80080d8:	08024928 	.word	0x08024928

080080dc <xDNSDoCallback>:
 *
 * @return Returns pdTRUE if uxIdentifier was recognized.
 */
    BaseType_t xDNSDoCallback( ParseSet_t * pxSet,
                               struct freertos_addrinfo * pxAddress )
    {
 80080dc:	b580      	push	{r7, lr}
 80080de:	b08a      	sub	sp, #40	@ 0x28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	627b      	str	r3, [r7, #36]	@ 0x24
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 80080ea:	4b28      	ldr	r3, [pc, #160]	@ (800818c <xDNSDoCallback+0xb0>)
 80080ec:	617b      	str	r3, [r7, #20]
        TickType_t uxIdentifier = ( TickType_t ) pxSet->pxDNSMessageHeader->usIdentifier;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	613b      	str	r3, [r7, #16]

        /* While iterating through the list, the scheduler is suspended.
         * Remember which function shall be called once the scheduler is
         * running again. */
        FOnDNSEvent pCallbackFunction = NULL;
 80080f8:	2300      	movs	r3, #0
 80080fa:	61fb      	str	r3, [r7, #28]
        void * pvSearchID = NULL;
 80080fc:	2300      	movs	r3, #0
 80080fe:	61bb      	str	r3, [r7, #24]

        vTaskSuspendAll();
 8008100:	f7fc fabe 	bl	8004680 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	623b      	str	r3, [r7, #32]
 800810a:	e029      	b.n	8008160 <xDNSDoCallback+0x84>
                 pxIterator != ( const ListItem_t * ) xEnd;
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
            {
                BaseType_t xMatching;
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	60fb      	str	r3, [r7, #12]
                        xMatching = ( strcasecmp( pxCallback->pcName, pxSet->pcName ) == 0 ) ? pdTRUE : pdFALSE;
                    }
                    else
                #endif /* if ( ipconfigUSE_MDNS == 1 ) */
                {
                    xMatching = ( listGET_LIST_ITEM_VALUE( pxIterator ) == uxIdentifier ) ? pdTRUE : pdFALSE;
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	429a      	cmp	r2, r3
 800811a:	d101      	bne.n	8008120 <xDNSDoCallback+0x44>
 800811c:	2301      	movs	r3, #1
 800811e:	e000      	b.n	8008122 <xDNSDoCallback+0x46>
 8008120:	2300      	movs	r3, #0
 8008122:	60bb      	str	r3, [r7, #8]
                }

                if( xMatching == pdTRUE )
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d117      	bne.n	800815a <xDNSDoCallback+0x7e>
                {
                    pvSearchID = pxCallback->pvSearchID;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	61bb      	str	r3, [r7, #24]
                    pCallbackFunction = pxCallback->pCallbackFunction;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	61fb      	str	r3, [r7, #28]
                    ( void ) uxListRemove( &pxCallback->xListItem );
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3314      	adds	r3, #20
 800813a:	4618      	mov	r0, r3
 800813c:	f7fb fa56 	bl	80035ec <uxListRemove>
                    vPortFree( pxCallback );
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f7fe faf3 	bl	800672c <vPortFree>

                    if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8008146:	4b12      	ldr	r3, [pc, #72]	@ (8008190 <xDNSDoCallback+0xb4>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d102      	bne.n	8008154 <xDNSDoCallback+0x78>
                    {
                        /* The list of outstanding requests is empty. No need for periodic polling. */
                        vIPSetDNSTimerEnableState( pdFALSE );
 800814e:	2000      	movs	r0, #0
 8008150:	f002 f9ca 	bl	800a4e8 <vIPSetDNSTimerEnableState>
                    }

                    xResult = pdTRUE;
 8008154:	2301      	movs	r3, #1
 8008156:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8008158:	e006      	b.n	8008168 <xDNSDoCallback+0x8c>
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	623b      	str	r3, [r7, #32]
                 pxIterator != ( const ListItem_t * ) xEnd;
 8008160:	6a3a      	ldr	r2, [r7, #32]
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	429a      	cmp	r2, r3
 8008166:	d1d1      	bne.n	800810c <xDNSDoCallback+0x30>
                }
            }
        }
        ( void ) xTaskResumeAll();
 8008168:	f7fc fa98 	bl	800469c <xTaskResumeAll>

        if( pCallbackFunction != NULL )
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d006      	beq.n	8008180 <xDNSDoCallback+0xa4>
        {
            pCallbackFunction( pxSet->pcName, pvSearchID, pxAddress );
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	69b9      	ldr	r1, [r7, #24]
 800817e:	4798      	blx	r3
        }

        return xResult;
 8008180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8008182:	4618      	mov	r0, r3
 8008184:	3728      	adds	r7, #40	@ 0x28
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	2000110c 	.word	0x2000110c
 8008190:	20001104 	.word	0x20001104

08008194 <vDNSCheckCallBack>:
 * @param[in] pvSearchID The search ID of callback function whose associated
 *                 DNS request is being cancelled. If non-ID specific checking of
 *                 all requests is required, then this field should be kept as NULL.
 */
    void vDNSCheckCallBack( void * pvSearchID )
    {
 8008194:	b580      	push	{r7, lr}
 8008196:	b08c      	sub	sp, #48	@ 0x30
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 800819c:	4b40      	ldr	r3, [pc, #256]	@ (80082a0 <vDNSCheckCallBack+0x10c>)
 800819e:	62bb      	str	r3, [r7, #40]	@ 0x28
         * be called. Store theses item in a temporary list.
         * Only when the scheduler is running, user functions
         * shall be called. */
        List_t xTempList;

        vListInitialise( &xTempList );
 80081a0:	f107 030c 	add.w	r3, r7, #12
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fb f997 	bl	80034d8 <vListInitialise>

        vTaskSuspendAll();
 80081aa:	f7fc fa69 	bl	8004680 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80081ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081b4:	e02e      	b.n	8008214 <vDNSCheckCallBack+0x80>
                 pxIterator != xEnd; )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80081b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	623b      	str	r3, [r7, #32]
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 80081bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00d      	beq.n	80081e4 <vDNSCheckCallBack+0x50>
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d108      	bne.n	80081e4 <vDNSCheckCallBack+0x50>
                {
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	3314      	adds	r3, #20
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fb fa08 	bl	80035ec <uxListRemove>
                    vPortFree( pxCallback );
 80081dc:	6a38      	ldr	r0, [r7, #32]
 80081de:	f7fe faa5 	bl	800672c <vPortFree>
 80081e2:	e017      	b.n	8008214 <vDNSCheckCallBack+0x80>
                }
                else if( xTaskCheckForTimeOut( &pxCallback->uxTimeoutState, &( pxCallback->uxRemainingTime ) ) != pdFALSE )
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	3308      	adds	r3, #8
 80081e8:	6a3a      	ldr	r2, [r7, #32]
 80081ea:	4611      	mov	r1, r2
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fc ff3b 	bl	8005068 <xTaskCheckForTimeOut>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00d      	beq.n	8008214 <vDNSCheckCallBack+0x80>
                {
                    /* A time-out occurred in the asynchronous search.
                     * Remove it from xCallbackList. */
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	3314      	adds	r3, #20
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fb f9f5 	bl	80035ec <uxListRemove>

                    /* Insert it in a temporary list. The function will be called
                     * once the scheduler is resumed. */
                    vListInsertEnd( &( xTempList ), &pxCallback->xListItem );
 8008202:	6a3b      	ldr	r3, [r7, #32]
 8008204:	f103 0214 	add.w	r2, r3, #20
 8008208:	f107 030c 	add.w	r3, r7, #12
 800820c:	4611      	mov	r1, r2
 800820e:	4618      	mov	r0, r3
 8008210:	f7fb f98f 	bl	8003532 <vListInsertEnd>
                 pxIterator != xEnd; )
 8008214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008218:	429a      	cmp	r2, r3
 800821a:	d1cc      	bne.n	80081b6 <vDNSCheckCallBack+0x22>
                {
                    /* This call-back is still waiting for a reply or a time-out. */
                }
            }
        }
        ( void ) xTaskResumeAll();
 800821c:	f7fc fa3e 	bl	800469c <xTaskResumeAll>

        if( listLIST_IS_EMPTY( &xTempList ) == pdFALSE )
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d030      	beq.n	8008288 <vDNSCheckCallBack+0xf4>
        {
            /* There is at least one item in xTempList which must be removed and deleted. */
            xEnd = listGET_END_MARKER( &xTempList );
 8008226:	f107 030c 	add.w	r3, r7, #12
 800822a:	3308      	adds	r3, #8
 800822c:	62bb      	str	r3, [r7, #40]	@ 0x28

            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800822e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008234:	e024      	b.n	8008280 <vDNSCheckCallBack+0xec>
                 pxIterator != xEnd;
                 )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8008236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800823c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* A time-out occurred in the asynchronous search.
                 * Call the application hook with the proper information. */
                if( pxCallback->xIsIPv6 != 0 )
 8008242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008246:	2b00      	cmp	r3, #0
 8008248:	d009      	beq.n	800825e <vDNSCheckCallBack+0xca>
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, NULL );
 800824a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008250:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8008254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008256:	6911      	ldr	r1, [r2, #16]
 8008258:	2200      	movs	r2, #0
 800825a:	4798      	blx	r3
 800825c:	e008      	b.n	8008270 <vDNSCheckCallBack+0xdc>
                }
                else
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0U );
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008264:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8008268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800826a:	6911      	ldr	r1, [r2, #16]
 800826c:	2200      	movs	r2, #0
 800826e:	4798      	blx	r3
                }

                /* Remove it from 'xTempList' and free the memory. */
                ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8008270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008272:	3314      	adds	r3, #20
 8008274:	4618      	mov	r0, r3
 8008276:	f7fb f9b9 	bl	80035ec <uxListRemove>
                vPortFree( pxCallback );
 800827a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800827c:	f7fe fa56 	bl	800672c <vPortFree>
                 pxIterator != xEnd;
 8008280:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008284:	429a      	cmp	r2, r3
 8008286:	d1d6      	bne.n	8008236 <vDNSCheckCallBack+0xa2>
            }
        }

        if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8008288:	4b06      	ldr	r3, [pc, #24]	@ (80082a4 <vDNSCheckCallBack+0x110>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d102      	bne.n	8008296 <vDNSCheckCallBack+0x102>
        {
            vIPSetDNSTimerEnableState( pdFALSE );
 8008290:	2000      	movs	r0, #0
 8008292:	f002 f929 	bl	800a4e8 <vIPSetDNSTimerEnableState>
        }
    }
 8008296:	bf00      	nop
 8008298:	3730      	adds	r7, #48	@ 0x30
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	2000110c 	.word	0x2000110c
 80082a4:	20001104 	.word	0x20001104

080082a8 <vDNSCallbackInitialise>:
/**
 * @brief initialize the cache
 * @post will modify global list xCallbackList
 */
    void vDNSCallbackInitialise()
    {
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
        vListInitialise( &xCallbackList );
 80082ac:	4802      	ldr	r0, [pc, #8]	@ (80082b8 <vDNSCallbackInitialise+0x10>)
 80082ae:	f7fb f913 	bl	80034d8 <vListInitialise>
    }
 80082b2:	bf00      	nop
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20001104 	.word	0x20001104

080082bc <DNS_ReadNameField>:
 *
 * @return If a fully formed name was found, then return the number of bytes processed in pucByte.
 */
    size_t DNS_ReadNameField( ParseSet_t * pxSet,
                              size_t uxDestLen )
    {
 80082bc:	b480      	push	{r7}
 80082be:	b089      	sub	sp, #36	@ 0x24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
        size_t uxNameLen = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	61fb      	str	r3, [r7, #28]
        size_t uxIndex = 0U;
 80082ca:	2300      	movs	r3, #0
 80082cc:	61bb      	str	r3, [r7, #24]
        size_t uxSourceLen = pxSet->uxSourceBytesRemaining;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	613b      	str	r3, [r7, #16]
        const uint8_t * pucByte = pxSet->pucByte;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	60fb      	str	r3, [r7, #12]

        /* uxCount gets the values from pucByte and counts down to 0.
         * No need to have a different type than that of pucByte */
        size_t uxCount;

        if( uxSourceLen == ( size_t ) 0U )
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d102      	bne.n	80082e6 <DNS_ReadNameField+0x2a>
        {
            /* Return 0 value in case of error. */
            uxIndex = 0U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	61bb      	str	r3, [r7, #24]
 80082e4:	e069      	b.n	80083ba <DNS_ReadNameField+0xfe>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	4413      	add	r3, r2
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80082f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80082f4:	d144      	bne.n	8008380 <DNS_ReadNameField+0xc4>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLen > sizeof( uint16_t ) )
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d903      	bls.n	8008304 <DNS_ReadNameField+0x48>
            {
                uxIndex += sizeof( uint16_t );
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	3302      	adds	r3, #2
 8008300:	61bb      	str	r3, [r7, #24]
 8008302:	e05a      	b.n	80083ba <DNS_ReadNameField+0xfe>
            }
            else
            {
                uxIndex = 0U;
 8008304:	2300      	movs	r3, #0
 8008306:	61bb      	str	r3, [r7, #24]
 8008308:	e057      	b.n	80083ba <DNS_ReadNameField+0xfe>
            /* 'uxIndex' points to the full name. Walk over the string. */
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
            {
                /* If this is not the first time through the loop, then add a
                 * separator in the output. */
                if( ( uxNameLen > 0U ) )
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d008      	beq.n	8008322 <DNS_ReadNameField+0x66>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = '.';
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	4413      	add	r3, r2
 8008316:	3334      	adds	r3, #52	@ 0x34
 8008318:	222e      	movs	r2, #46	@ 0x2e
 800831a:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	3301      	adds	r3, #1
 8008320:	61fb      	str	r3, [r7, #28]
                }

                /* Process the first/next sub-string. */
                uxCount = ( size_t ) pucByte[ uxIndex ];
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	4413      	add	r3, r2
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	617b      	str	r3, [r7, #20]

                /* uxIndex should point to the first character now, unless uxCount
                 * is an offset field. */
                uxIndex++;
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	3301      	adds	r3, #1
 8008330:	61bb      	str	r3, [r7, #24]

                if( ( uxIndex + uxCount ) > uxSourceLen )
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	4413      	add	r3, r2
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	429a      	cmp	r2, r3
 800833c:	d202      	bcs.n	8008344 <DNS_ReadNameField+0x88>
                {
                    uxIndex = 0U;
 800833e:	2300      	movs	r3, #0
 8008340:	61bb      	str	r3, [r7, #24]
                    break;
 8008342:	e027      	b.n	8008394 <DNS_ReadNameField+0xd8>
                }

                if( ( uxNameLen + uxCount ) >= uxDestLen )
 8008344:	69fa      	ldr	r2, [r7, #28]
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	4413      	add	r3, r2
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	429a      	cmp	r2, r3
 800834e:	d812      	bhi.n	8008376 <DNS_ReadNameField+0xba>
                {
                    uxIndex = 0U;
 8008350:	2300      	movs	r3, #0
 8008352:	61bb      	str	r3, [r7, #24]
                    break;
 8008354:	e01e      	b.n	8008394 <DNS_ReadNameField+0xd8>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	4413      	add	r3, r2
 800835c:	7819      	ldrb	r1, [r3, #0]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	4413      	add	r3, r2
 8008364:	3334      	adds	r3, #52	@ 0x34
 8008366:	460a      	mov	r2, r1
 8008368:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	3301      	adds	r3, #1
 800836e:	61fb      	str	r3, [r7, #28]
                    uxIndex++;
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	3301      	adds	r3, #1
 8008374:	61bb      	str	r3, [r7, #24]
                while( uxCount-- != 0U )
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	1e5a      	subs	r2, r3, #1
 800837a:	617a      	str	r2, [r7, #20]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1ea      	bne.n	8008356 <DNS_ReadNameField+0x9a>
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	429a      	cmp	r2, r3
 8008386:	d205      	bcs.n	8008394 <DNS_ReadNameField+0xd8>
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	4413      	add	r3, r2
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1ba      	bne.n	800830a <DNS_ReadNameField+0x4e>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00f      	beq.n	80083ba <DNS_ReadNameField+0xfe>
                 * failing above check. Whenever we exit the loop otherwise, either
                 * pucByte[ uxIndex ] == 0 (which makes the check here unnecessary) or
                 * uxIndex >= uxSourceLen (which makes sure that we do not go in the 'if'
                 * case).
                 */
                if( uxIndex < uxSourceLen )
 800839a:	69ba      	ldr	r2, [r7, #24]
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d209      	bcs.n	80083b6 <DNS_ReadNameField+0xfa>
                {
                    pxSet->pcName[ uxNameLen ] = '\0';
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	4413      	add	r3, r2
 80083a8:	3334      	adds	r3, #52	@ 0x34
 80083aa:	2200      	movs	r2, #0
 80083ac:	701a      	strb	r2, [r3, #0]
                    uxIndex++;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	3301      	adds	r3, #1
 80083b2:	61bb      	str	r3, [r7, #24]
 80083b4:	e001      	b.n	80083ba <DNS_ReadNameField+0xfe>
                }
                else
                {
                    uxIndex = 0U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	61bb      	str	r3, [r7, #24]
                }
            }
        }

        return uxIndex;
 80083ba:	69bb      	ldr	r3, [r7, #24]
    }
 80083bc:	4618      	mov	r0, r3
 80083be:	3724      	adds	r7, #36	@ 0x24
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <DNS_SkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    size_t DNS_SkipNameField( const uint8_t * pucByte,
                              size_t uxLength )
    {
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 80083d6:	2300      	movs	r3, #0
 80083d8:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d102      	bne.n	80083e6 <DNS_SkipNameField+0x1e>
        {
            uxIndex = 0U;
 80083e0:	2300      	movs	r3, #0
 80083e2:	613b      	str	r3, [r7, #16]
 80083e4:	e03f      	b.n	8008466 <DNS_SkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	4413      	add	r3, r2
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80083f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80083f4:	d11f      	bne.n	8008436 <DNS_SkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d903      	bls.n	8008404 <DNS_SkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	3302      	adds	r3, #2
 8008400:	613b      	str	r3, [r7, #16]
 8008402:	e030      	b.n	8008466 <DNS_SkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 8008404:	2300      	movs	r3, #0
 8008406:	613b      	str	r3, [r7, #16]
 8008408:	e02d      	b.n	8008466 <DNS_SkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	4413      	add	r3, r2
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	3301      	adds	r3, #1
 8008414:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	429a      	cmp	r2, r3
 800841c:	d908      	bls.n	8008430 <DNS_SkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4413      	add	r3, r2
 800842c:	613b      	str	r3, [r7, #16]
 800842e:	e002      	b.n	8008436 <DNS_SkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 8008430:	2300      	movs	r3, #0
 8008432:	613b      	str	r3, [r7, #16]
                    break;
 8008434:	e008      	b.n	8008448 <DNS_SkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	4413      	add	r3, r2
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d002      	beq.n	8008448 <DNS_SkipNameField+0x80>
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d8e0      	bhi.n	800840a <DNS_SkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00b      	beq.n	8008466 <DNS_SkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	4413      	add	r3, r2
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d103      	bne.n	8008462 <DNS_SkipNameField+0x9a>
                {
                    uxIndex++;
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	3301      	adds	r3, #1
 800845e:	613b      	str	r3, [r7, #16]
 8008460:	e001      	b.n	8008466 <DNS_SkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 8008462:	2300      	movs	r3, #0
 8008464:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8008466:	693b      	ldr	r3, [r7, #16]
    }
 8008468:	4618      	mov	r0, r3
 800846a:	371c      	adds	r7, #28
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <DNS_ParseDNSReply>:
    uint32_t DNS_ParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                size_t uxBufferLength,
                                struct freertos_addrinfo ** ppxAddressInfo,
                                BaseType_t xExpected,
                                uint16_t usPort )
    {
 8008474:	b5b0      	push	{r4, r5, r7, lr}
 8008476:	b0f6      	sub	sp, #472	@ 0x1d8
 8008478:	af00      	add	r7, sp, #0
 800847a:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 800847e:	f5a4 74e6 	sub.w	r4, r4, #460	@ 0x1cc
 8008482:	6020      	str	r0, [r4, #0]
 8008484:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8008488:	f5a0 70e8 	sub.w	r0, r0, #464	@ 0x1d0
 800848c:	6001      	str	r1, [r0, #0]
 800848e:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8008492:	f5a1 71ea 	sub.w	r1, r1, #468	@ 0x1d4
 8008496:	600a      	str	r2, [r1, #0]
 8008498:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 800849c:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 80084a0:	6013      	str	r3, [r2, #0]
        ParseSet_t xSet;
        uint16_t x;
        BaseType_t xReturn = pdTRUE;
 80084a2:	2301      	movs	r3, #1
 80084a4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
        uint32_t ulIPAddress = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        BaseType_t xDNSHookReturn;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 80084ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80084b2:	224c      	movs	r2, #76	@ 0x4c
 80084b4:	2100      	movs	r1, #0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f01a f96f 	bl	802279a <memset>
        xSet.usPortNumber = usPort;
 80084bc:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 80084c0:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166
        xSet.ppxLastAddress = &( xSet.pxLastAddress );
 80084c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80084c8:	3344      	adds	r3, #68	@ 0x44
 80084ca:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            xSet.xDoStore = xExpected;
 80084ce:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80084d2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
        #endif

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 80084dc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80084e0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b0b      	cmp	r3, #11
 80084e8:	d803      	bhi.n	80084f2 <DNS_ParseDNSReply+0x7e>
        {
            ( void ) xDNSHookReturn;
            xReturn = pdFALSE;
 80084ea:	2300      	movs	r3, #0
 80084ec:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80084f0:	e35a      	b.n	8008ba8 <DNS_ParseDNSReply+0x734>
        }
        else
        {
            xSet.uxBufferLength = uxBufferLength;
 80084f2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80084f6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            xSet.uxSourceBytesRemaining = uxBufferLength;
 8008500:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008504:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
             * for easier access. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xSet.pxDNSMessageHeader = ( ( DNSMessage_t * )
 800850e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008512:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                                        pucUDPPayloadBuffer );

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 800851c:	2300      	movs	r3, #0
 800851e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                size_t uxResult;
                BaseType_t xIsResponse = pdFALSE;
 8008522:	2300      	movs	r3, #0
 8008524:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                /* Start at the first byte after the header. */
                xSet.pucUDPPayloadBuffer = pucUDPPayloadBuffer;
 8008528:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800852c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                /* Skip 12-byte header. */
                xSet.pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8008536:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800853a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	330c      	adds	r3, #12
 8008542:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                xSet.uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 8008546:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800854a:	3b0c      	subs	r3, #12
 800854c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                /* The number of questions supplied. */
                xSet.usQuestions = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usQuestions );
 8008550:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008554:	889b      	ldrh	r3, [r3, #4]
 8008556:	b29b      	uxth	r3, r3
 8008558:	021b      	lsls	r3, r3, #8
 800855a:	b21a      	sxth	r2, r3
 800855c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008560:	889b      	ldrh	r3, [r3, #4]
 8008562:	b29b      	uxth	r3, r3
 8008564:	0a1b      	lsrs	r3, r3, #8
 8008566:	b29b      	uxth	r3, r3
 8008568:	b21b      	sxth	r3, r3
 800856a:	4313      	orrs	r3, r2
 800856c:	b21b      	sxth	r3, r3
 800856e:	b29b      	uxth	r3, r3
 8008570:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
                /* The number of answer records. */
                xSet.usAnswers = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usAnswers );
 8008574:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008578:	88db      	ldrh	r3, [r3, #6]
 800857a:	b29b      	uxth	r3, r3
 800857c:	021b      	lsls	r3, r3, #8
 800857e:	b21a      	sxth	r2, r3
 8008580:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008584:	88db      	ldrh	r3, [r3, #6]
 8008586:	b29b      	uxth	r3, r3
 8008588:	0a1b      	lsrs	r3, r3, #8
 800858a:	b29b      	uxth	r3, r3
 800858c:	b21b      	sxth	r3, r3
 800858e:	4313      	orrs	r3, r2
 8008590:	b21b      	sxth	r3, r3
 8008592:	b29b      	uxth	r3, r3
 8008594:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146

                if( ( xSet.pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8008598:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800859c:	885b      	ldrh	r3, [r3, #2]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 80085a4:	2b80      	cmp	r3, #128	@ 0x80
 80085a6:	d11b      	bne.n	80085e0 <DNS_ParseDNSReply+0x16c>
                {
                    xIsResponse = pdTRUE;
 80085a8:	2301      	movs	r3, #1
 80085aa:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                    if( xSet.usAnswers == 0U )
 80085ae:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d103      	bne.n	80085be <DNS_ParseDNSReply+0x14a>
                    {
                        /* This is a response that does not include answers. */
                        xReturn = pdFALSE;
 80085b6:	2300      	movs	r3, #0
 80085b8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 80085bc:	e2f4      	b.n	8008ba8 <DNS_ParseDNSReply+0x734>
                    }

                    if( xSet.usQuestions == 0U )
 80085be:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d114      	bne.n	80085f0 <DNS_ParseDNSReply+0x17c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 80085c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085ca:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                        #endif

                        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                            uxResult = DNS_ReadNameField( &xSet,
 80085ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80085d2:	2110      	movs	r1, #16
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7ff fe71 	bl	80082bc <DNS_ReadNameField>
 80085da:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 80085de:	e007      	b.n	80085f0 <DNS_ParseDNSReply+0x17c>
                        #endif
                    }
                }
                else
                {
                    if( xSet.usQuestions == 0U )
 80085e0:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d103      	bne.n	80085f0 <DNS_ParseDNSReply+0x17c>
                    {
                        /* This is a query that does not include any question. */
                        xReturn = pdFALSE;
 80085e8:	2300      	movs	r3, #0
 80085ea:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 80085ee:	e2db      	b.n	8008ba8 <DNS_ParseDNSReply+0x734>
                    }
                }

                for( x = 0U; x < xSet.usQuestions; x++ )
 80085f0:	2300      	movs	r3, #0
 80085f2:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 80085f6:	e064      	b.n	80086c2 <DNS_ParseDNSReply+0x24e>
                {
                    #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                    {
                        if( x == 0U )
 80085f8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d103      	bne.n	8008608 <DNS_ParseDNSReply+0x194>
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8008600:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008604:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                    }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 8008608:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 800860c:	2b00      	cmp	r3, #0
 800860e:	d108      	bne.n	8008622 <DNS_ParseDNSReply+0x1ae>
                        {
                            uxResult = DNS_ReadNameField( &xSet,
 8008610:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008614:	2110      	movs	r1, #16
 8008616:	4618      	mov	r0, r3
 8008618:	f7ff fe50 	bl	80082bc <DNS_ReadNameField>
 800861c:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 8008620:	e009      	b.n	8008636 <DNS_ParseDNSReply+0x1c2>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = DNS_SkipNameField( xSet.pucByte,
 8008622:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008626:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 800862a:	4611      	mov	r1, r2
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff fecb 	bl	80083c8 <DNS_SkipNameField>
 8008632:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
                                                      xSet.uxSourceBytesRemaining );
                    }

                    /* Check for a malformed response. */
                    if( uxResult == 0U )
 8008636:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800863a:	2b00      	cmp	r3, #0
 800863c:	d103      	bne.n	8008646 <DNS_ParseDNSReply+0x1d2>
                    {
                        xReturn = pdFALSE;
 800863e:	2300      	movs	r3, #0
 8008640:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8008644:	e043      	b.n	80086ce <DNS_ParseDNSReply+0x25a>
                    }

                    uxBytesRead += uxResult;
 8008646:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800864a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800864e:	4413      	add	r3, r2
 8008650:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    xSet.pucByte = &( xSet.pucByte[ uxResult ] );
 8008654:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008658:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800865c:	4413      	add	r3, r2
 800865e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                    xSet.uxSourceBytesRemaining -= uxResult;
 8008662:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8008666:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                    /* Check the remaining buffer size. */
                    if( xSet.uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8008670:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008674:	2b03      	cmp	r3, #3
 8008676:	d91b      	bls.n	80086b0 <DNS_ParseDNSReply+0x23c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            /* usChar2u16 returns value in host endianness. */
                            xSet.usType = usChar2u16( xSet.pucByte );
 8008678:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800867c:	4618      	mov	r0, r3
 800867e:	f002 fa58 	bl	800ab32 <usChar2u16>
 8008682:	4603      	mov	r3, r0
 8008684:	f8a7 3158 	strh.w	r3, [r7, #344]	@ 0x158
                            xSet.usClass = usChar2u16( &( xSet.pucByte[ 2 ] ) );
 8008688:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800868c:	3302      	adds	r3, #2
 800868e:	4618      	mov	r0, r3
 8008690:	f002 fa4f 	bl	800ab32 <usChar2u16>
 8008694:	4603      	mov	r3, r0
 8008696:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
                        }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        xSet.pucByte = &( xSet.pucByte[ sizeof( uint32_t ) ] );
 800869a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800869e:	3304      	adds	r3, #4
 80086a0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                        xSet.uxSourceBytesRemaining -= sizeof( uint32_t );
 80086a4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80086a8:	3b04      	subs	r3, #4
 80086aa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80086ae:	e003      	b.n	80086b8 <DNS_ParseDNSReply+0x244>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 80086b0:	2300      	movs	r3, #0
 80086b2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 80086b6:	e00a      	b.n	80086ce <DNS_ParseDNSReply+0x25a>
                for( x = 0U; x < xSet.usQuestions; x++ )
 80086b8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 80086bc:	3301      	adds	r3, #1
 80086be:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 80086c2:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 80086c6:	f8b7 21d6 	ldrh.w	r2, [r7, #470]	@ 0x1d6
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d394      	bcc.n	80085f8 <DNS_ParseDNSReply+0x184>
                    }
                } /* for( x = 0U; x < xSet.usQuestions; x++ ) */

                if( xReturn == pdFALSE )
 80086ce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 8265 	beq.w	8008ba2 <DNS_ParseDNSReply+0x72e>
                {
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                if( xIsResponse == pdTRUE )
 80086d8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d10d      	bne.n	80086fc <DNS_ParseDNSReply+0x288>
                {
                    /* Search through the answer records. */
                    ulIPAddress = parseDNSAnswer( &( xSet ), ppxAddressInfo, &uxBytesRead );
 80086e0:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80086e4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80086e8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80086ec:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80086f0:	6819      	ldr	r1, [r3, #0]
 80086f2:	f000 fa73 	bl	8008bdc <parseDNSAnswer>
 80086f6:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
 80086fa:	e255      	b.n	8008ba8 <DNS_ParseDNSReply+0x734>

                    /* No need to check that pcRequestedName != NULL since sQuestions != 0, then
                     * pcRequestedName is assigned with this statement
                     * "pcRequestedName = ( char * ) pucByte;" */
                    /* No need to check that usQuestions != 0, since the check is done before */
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 80086fc:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008700:	2b01      	cmp	r3, #1
 8008702:	d004      	beq.n	800870e <DNS_ParseDNSReply+0x29a>
 8008704:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008708:	2b1c      	cmp	r3, #28
 800870a:	f040 824d 	bne.w	8008ba8 <DNS_ParseDNSReply+0x734>
                             ( xSet.usClass == dnsCLASS_IN ) )
 800870e:	f8b7 3168 	ldrh.w	r3, [r7, #360]	@ 0x168
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8008712:	2b01      	cmp	r3, #1
 8008714:	f040 8248 	bne.w	8008ba8 <DNS_ParseDNSReply+0x734>
                    {
                        NetworkBufferDescriptor_t * pxNetworkBuffer;
                        NetworkEndPoint_t * pxEndPoint, xEndPoint;
                        size_t uxUDPOffset;

                        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8008718:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800871c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008720:	6818      	ldr	r0, [r3, #0]
 8008722:	f001 ff9f 	bl	800a664 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8008726:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

                        /* This test could be replaced with a assert(). */
                        if( pxNetworkBuffer == NULL )
 800872a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800872e:	2b00      	cmp	r3, #0
 8008730:	d103      	bne.n	800873a <DNS_ParseDNSReply+0x2c6>
                        {
                            /* _HT_ just while testing. When the program gets here,
                             * pucUDPPayloadBuffer was invalid. */
                            FreeRTOS_printf( ( "DNS_ParseDNSReply: pucUDPPayloadBuffer was invalid\n" ) );
 8008732:	48c4      	ldr	r0, [pc, #784]	@ (8008a44 <DNS_ParseDNSReply+0x5d0>)
 8008734:	f019 fd08 	bl	8022148 <lUDPLoggingPrintf>
                            break;
 8008738:	e236      	b.n	8008ba8 <DNS_ParseDNSReply+0x734>
                        }

                        uxUDPOffset = ( size_t ) ( pucUDPPayloadBuffer - pxNetworkBuffer->pucEthernetBuffer );
 800873a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800873e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008740:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008744:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8008748:	6812      	ldr	r2, [r2, #0]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
                        configASSERT( ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv4 ) || ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv6 ) );
 8008750:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008754:	2b2a      	cmp	r3, #42	@ 0x2a
 8008756:	d003      	beq.n	8008760 <DNS_ParseDNSReply+0x2ec>
 8008758:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800875c:	2b3e      	cmp	r3, #62	@ 0x3e
 800875e:	d101      	bne.n	8008764 <DNS_ParseDNSReply+0x2f0>
 8008760:	2301      	movs	r3, #1
 8008762:	e000      	b.n	8008766 <DNS_ParseDNSReply+0x2f2>
 8008764:	2300      	movs	r3, #0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d104      	bne.n	8008774 <DNS_ParseDNSReply+0x300>
 800876a:	f240 11bb 	movw	r1, #443	@ 0x1bb
 800876e:	48b6      	ldr	r0, [pc, #728]	@ (8008a48 <DNS_ParseDNSReply+0x5d4>)
 8008770:	f7f9 f8f2 	bl	8001958 <vAssertCalled>

                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8008774:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800877a:	2b00      	cmp	r3, #0
 800877c:	f000 8213 	beq.w	8008ba6 <DNS_ParseDNSReply+0x732>
                        {
                            break;
                        }

                        pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8008780:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008786:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

                        /* Make a copy of the end-point because xApplicationDNSQueryHook() is allowed
                         * to write into it. */
                        ( void ) memcpy( &( xEndPoint ), pxEndPoint, sizeof( xEndPoint ) );
 800878a:	f107 0314 	add.w	r3, r7, #20
 800878e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8008792:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8008796:	4618      	mov	r0, r3
 8008798:	f019 fef2 	bl	8022580 <memcpy>

                        #if ( ipconfigUSE_IPv6 != 0 )
                        {
                            /*logging*/
                            FreeRTOS_printf( ( "prvParseDNS_HandleLLMNRRequest[%s]: type %04X\n", xSet.pcName, xSet.usType ) );
 800879c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80087a0:	461a      	mov	r2, r3
 80087a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80087a6:	3334      	adds	r3, #52	@ 0x34
 80087a8:	4619      	mov	r1, r3
 80087aa:	48a8      	ldr	r0, [pc, #672]	@ (8008a4c <DNS_ParseDNSReply+0x5d8>)
 80087ac:	f019 fccc 	bl	8022148 <lUDPLoggingPrintf>

                            xEndPoint.usDNSType = ( uint8_t ) xSet.usType;
 80087b0:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80087ba:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80087be:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        /* If this is not a reply to our DNS request, it might be an mDNS or an LLMNR
                         * request. Ask the application if it uses the name. */
                        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                            xDNSHookReturn = xApplicationDNSQueryHook( xSet.pcName );
 80087c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80087c6:	3334      	adds	r3, #52	@ 0x34
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7f9 f959 	bl	8001a80 <xApplicationDNSQueryHook>
 80087ce:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8
                            xDNSHookReturn = xApplicationDNSQueryHook_Multi( &xEndPoint, xSet.pcName );
                        #endif

                        /* During the early stages of boot or after a DHCP lease expires, our end-point
                         * may have an IP address of 0.0.0.0. Do not respond to name queries with that address. */
                        if( ( xDNSHookReturn != pdFALSE ) && ( xEndPoint.bits.bIPv6 == pdFALSE ) && ( xEndPoint.ipv4_settings.ulIPAddress == 0U ) )
 80087d2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d014      	beq.n	8008804 <DNS_ParseDNSReply+0x390>
 80087da:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80087de:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80087e2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80087e6:	f003 0304 	and.w	r3, r3, #4
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d109      	bne.n	8008804 <DNS_ParseDNSReply+0x390>
 80087f0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80087f4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d102      	bne.n	8008804 <DNS_ParseDNSReply+0x390>
                        {
                            xDNSHookReturn = pdFALSE;
 80087fe:	2300      	movs	r3, #0
 8008800:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                        }

                        if( xDNSHookReturn != pdFALSE )
 8008804:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 81cd 	beq.w	8008ba8 <DNS_ParseDNSReply+0x734>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 800880e:	2300      	movs	r3, #0
 8008810:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 8008814:	2300      	movs	r3, #0
 8008816:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            size_t uxExtraLength;

                            if( xBufferAllocFixedSize == pdFALSE )
 800881a:	4b8d      	ldr	r3, [pc, #564]	@ (8008a50 <DNS_ParseDNSReply+0x5dc>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d164      	bne.n	80088ec <DNS_ParseDNSReply+0x478>
                            {
                                size_t uxDataLength = uxBufferLength +
                                                      sizeof( UDPHeader_t ) +
                                                      sizeof( EthernetHeader_t ) +
                                                      uxIPHeaderSizePacket( pxNetworkBuffer );
 8008822:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008826:	f001 fbd7 	bl	8009fd8 <uxIPHeaderSizePacket>
 800882a:	4602      	mov	r2, r0
                                                      sizeof( EthernetHeader_t ) +
 800882c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008830:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4413      	add	r3, r2
                                size_t uxDataLength = uxBufferLength +
 8008838:	3316      	adds	r3, #22
 800883a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 800883e:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008842:	2b1c      	cmp	r3, #28
 8008844:	d103      	bne.n	800884e <DNS_ParseDNSReply+0x3da>
                                    {
                                        uxExtraLength = sizeof( LLMNRAnswer_t ) + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress );
 8008846:	231c      	movs	r3, #28
 8008848:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 800884c:	e002      	b.n	8008854 <DNS_ParseDNSReply+0x3e0>
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                #if ( ipconfigUSE_IPv4 != 0 )
                                {
                                    uxExtraLength = sizeof( LLMNRAnswer_t );
 800884e:	2310      	movs	r3, #16
 8008850:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
                                    /* do nothing, coverity happy */
                                }
                                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 8008854:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008858:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 800885c:	629a      	str	r2, [r3, #40]	@ 0x28
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer,
 800885e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8008862:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8008866:	4413      	add	r3, r2
 8008868:	4619      	mov	r1, r3
 800886a:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 800886e:	f001 fe65 	bl	800a53c <pxDuplicateNetworkBufferWithDescriptor>
 8008872:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
                                                                                      uxDataLength +
                                                                                      uxExtraLength );

                                if( pxNewBuffer != NULL )
 8008876:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800887a:	2b00      	cmp	r3, #0
 800887c:	d032      	beq.n	80088e4 <DNS_ParseDNSReply+0x470>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( xSet.pucByte - pucUDPPayloadBuffer );
 800887e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008882:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008886:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) xSet.pcRequestedName ) - pucUDPPayloadBuffer );
 8008892:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8008896:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800889a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

                                    pxNetworkBuffer = pxNewBuffer;
 80088a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80088aa:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 80088ae:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80088b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80088b8:	4413      	add	r3, r2
 80088ba:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

                                    xSet.pucByte = &( pucNewBuffer[ xOffset1 ] );
 80088be:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80088c2:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 80088c6:	4413      	add	r3, r2
 80088c8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                                    xSet.pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 80088cc:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80088d0:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 80088d4:	4413      	add	r3, r2
 80088d6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                                    xSet.pxDNSMessageHeader = ( ( DNSMessage_t * ) pucNewBuffer );
 80088da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80088de:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80088e2:	e00b      	b.n	80088fc <DNS_ParseDNSReply+0x488>
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 80088e4:	2300      	movs	r3, #0
 80088e6:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80088ea:	e007      	b.n	80088fc <DNS_ParseDNSReply+0x488>
                                }
                            }
                            else
                            {
                                pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 80088ec:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80088f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80088f6:	4413      	add	r3, r2
 80088f8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            }

                            if( ( pxNetworkBuffer != NULL ) )
 80088fc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 8151 	beq.w	8008ba8 <DNS_ParseDNSReply+0x734>
                            {
                                pxAnswer = ( ( LLMNRAnswer_t * ) xSet.pucByte );
 8008906:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800890a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_RESPONSE ); /* Set the response flag */
 800890e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008912:	3302      	adds	r3, #2
 8008914:	2280      	movs	r2, #128	@ 0x80
 8008916:	701a      	strb	r2, [r3, #0]
 8008918:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800891c:	3303      	adds	r3, #3
 800891e:	2200      	movs	r2, #0
 8008920:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                        /* Provide a single answer */
 8008922:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008926:	3306      	adds	r3, #6
 8008928:	2200      	movs	r2, #0
 800892a:	701a      	strb	r2, [r3, #0]
 800892c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008930:	3307      	adds	r3, #7
 8008932:	2201      	movs	r2, #1
 8008934:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                   /* No authority */
 8008936:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800893a:	3308      	adds	r3, #8
 800893c:	2200      	movs	r2, #0
 800893e:	701a      	strb	r2, [r3, #0]
 8008940:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008944:	3309      	adds	r3, #9
 8008946:	2200      	movs	r2, #0
 8008948:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                  /* No additional info */
 800894a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800894e:	330a      	adds	r3, #10
 8008950:	2200      	movs	r2, #0
 8008952:	701a      	strb	r2, [r3, #0]
 8008954:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008958:	330b      	adds	r3, #11
 800895a:	2200      	movs	r2, #0
 800895c:	701a      	strb	r2, [r3, #0]

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 800895e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008962:	22c0      	movs	r2, #192	@ 0xc0
 8008964:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( xSet.pcRequestedName - ( char * ) pucNewBuffer );
 8008966:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 800896a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	b2da      	uxtb	r2, r3
 8008972:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008976:	705a      	strb	r2, [r3, #1]

                                vSetField16( pxAnswer, LLMNRAnswer_t, usType, xSet.usType );  /* Type A or AAAA: host */
 8008978:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 800897c:	0a1b      	lsrs	r3, r3, #8
 800897e:	b29a      	uxth	r2, r3
 8008980:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008984:	3302      	adds	r3, #2
 8008986:	b2d2      	uxtb	r2, r2
 8008988:	701a      	strb	r2, [r3, #0]
 800898a:	f8b7 2158 	ldrh.w	r2, [r7, #344]	@ 0x158
 800898e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008992:	3303      	adds	r3, #3
 8008994:	b2d2      	uxtb	r2, r2
 8008996:	701a      	strb	r2, [r3, #0]
                                vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN ); /* 1: Class IN */
 8008998:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800899c:	3304      	adds	r3, #4
 800899e:	2200      	movs	r2, #0
 80089a0:	701a      	strb	r2, [r3, #0]
 80089a2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80089a6:	3305      	adds	r3, #5
 80089a8:	2201      	movs	r2, #1
 80089aa:	701a      	strb	r2, [r3, #0]
                                vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 80089ac:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80089b0:	3306      	adds	r3, #6
 80089b2:	2200      	movs	r2, #0
 80089b4:	701a      	strb	r2, [r3, #0]
 80089b6:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80089ba:	3307      	adds	r3, #7
 80089bc:	2200      	movs	r2, #0
 80089be:	701a      	strb	r2, [r3, #0]
 80089c0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80089c4:	3308      	adds	r3, #8
 80089c6:	2201      	movs	r2, #1
 80089c8:	701a      	strb	r2, [r3, #0]
 80089ca:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80089ce:	3309      	adds	r3, #9
 80089d0:	222c      	movs	r2, #44	@ 0x2c
 80089d2:	701a      	strb	r2, [r3, #0]

                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( xSet.pucByte - pucNewBuffer ) );
 80089d4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80089d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	b29b      	uxth	r3, r3
 80089e0:	3310      	adds	r3, #16
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 80089e8:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80089ec:	2b1c      	cmp	r3, #28
 80089ee:	d131      	bne.n	8008a54 <DNS_ParseDNSReply+0x5e0>
                                    {
                                        size_t uxDistance;
                                        vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ipSIZE_OF_IPv6_ADDRESS );
 80089f0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80089f4:	330a      	adds	r3, #10
 80089f6:	2200      	movs	r2, #0
 80089f8:	701a      	strb	r2, [r3, #0]
 80089fa:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80089fe:	330b      	adds	r3, #11
 8008a00:	2210      	movs	r2, #16
 8008a02:	701a      	strb	r2, [r3, #0]
                                        ( void ) memcpy( &( pxAnswer->ulIPAddress ), xEndPoint.ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8008a04:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008a08:	f103 020c 	add.w	r2, r3, #12
 8008a0c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008a10:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008a14:	4615      	mov	r5, r2
 8008a16:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8008a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a1c:	6028      	str	r0, [r5, #0]
 8008a1e:	6069      	str	r1, [r5, #4]
 8008a20:	60aa      	str	r2, [r5, #8]
 8008a22:	60eb      	str	r3, [r5, #12]
                                        uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8008a24:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008a28:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                                        /* An extra 12 bytes will be sent compared to an A-record. */
                                        usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress ) );
 8008a32:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	331c      	adds	r3, #28
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
 8008a40:	e09a      	b.n	8008b78 <DNS_ParseDNSReply+0x704>
 8008a42:	bf00      	nop
 8008a44:	080249d0 	.word	0x080249d0
 8008a48:	08024a04 	.word	0x08024a04
 8008a4c:	08024a38 	.word	0x08024a38
 8008a50:	080278f4 	.word	0x080278f4
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                {
                                    size_t uxDistance;
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ( uint16_t ) sizeof( pxAnswer->ulIPAddress ) );
 8008a54:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008a58:	330a      	adds	r3, #10
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	701a      	strb	r2, [r3, #0]
 8008a5e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008a62:	330b      	adds	r3, #11
 8008a64:	2204      	movs	r2, #4
 8008a66:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( xEndPoint.ipv4_settings.ulIPAddress ) );
 8008a68:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008a6c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	061a      	lsls	r2, r3, #24
 8008a74:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008a78:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	021b      	lsls	r3, r3, #8
 8008a80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008a84:	431a      	orrs	r2, r3
 8008a86:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008a8a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	0a1b      	lsrs	r3, r3, #8
 8008a92:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008a96:	431a      	orrs	r2, r3
 8008a98:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008a9c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	0e1b      	lsrs	r3, r3, #24
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	0e1a      	lsrs	r2, r3, #24
 8008aa8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008aac:	330c      	adds	r3, #12
 8008aae:	b2d2      	uxtb	r2, r2
 8008ab0:	701a      	strb	r2, [r3, #0]
 8008ab2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ab6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	061a      	lsls	r2, r3, #24
 8008abe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ac2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	021b      	lsls	r3, r3, #8
 8008aca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ad4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	0a1b      	lsrs	r3, r3, #8
 8008adc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008ae0:	431a      	orrs	r2, r3
 8008ae2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ae6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	0e1b      	lsrs	r3, r3, #24
 8008aee:	4313      	orrs	r3, r2
 8008af0:	0c1a      	lsrs	r2, r3, #16
 8008af2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008af6:	330d      	adds	r3, #13
 8008af8:	b2d2      	uxtb	r2, r2
 8008afa:	701a      	strb	r2, [r3, #0]
 8008afc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b00:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	061a      	lsls	r2, r3, #24
 8008b08:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b0c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	021b      	lsls	r3, r3, #8
 8008b14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b1e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	0a1b      	lsrs	r3, r3, #8
 8008b26:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008b2a:	431a      	orrs	r2, r3
 8008b2c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b30:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	0e1b      	lsrs	r3, r3, #24
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	0a1a      	lsrs	r2, r3, #8
 8008b3c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008b40:	330e      	adds	r3, #14
 8008b42:	b2d2      	uxtb	r2, r2
 8008b44:	701a      	strb	r2, [r3, #0]
 8008b46:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b4a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	0e1a      	lsrs	r2, r3, #24
 8008b52:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008b56:	330f      	adds	r3, #15
 8008b58:	b2d2      	uxtb	r2, r2
 8008b5a:	701a      	strb	r2, [r3, #0]
                                    uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8008b5c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008b60:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
                                    usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance );
 8008b6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	3310      	adds	r3, #16
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
                                }

                                prepareReplyDNSMessage( pxNetworkBuffer, usLength );
 8008b78:	f9b7 31ba 	ldrsh.w	r3, [r7, #442]	@ 0x1ba
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008b82:	f000 fa21 	bl	8008fc8 <prepareReplyDNSMessage>
                                /* This function will fill in the eth addresses and send the packet */
                                vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8008b86:	2100      	movs	r1, #0
 8008b88:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008b8c:	f001 f924 	bl	8009dd8 <vReturnEthernetFrame>

                                if( pxNewBuffer != NULL )
 8008b90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d007      	beq.n	8008ba8 <DNS_ParseDNSReply+0x734>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8008b98:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8008b9c:	f00e fc2c 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
 8008ba0:	e002      	b.n	8008ba8 <DNS_ParseDNSReply+0x734>
                    break;
 8008ba2:	bf00      	nop
 8008ba4:	e000      	b.n	8008ba8 <DNS_ParseDNSReply+0x734>
                            break;
 8008ba6:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 8008ba8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d103      	bne.n	8008bb8 <DNS_ParseDNSReply+0x744>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = ( uint32_t ) dnsPARSE_ERROR;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008bb6:	e009      	b.n	8008bcc <DNS_ParseDNSReply+0x758>
        }
        else if( xExpected == pdFALSE )
 8008bb8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008bbc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d102      	bne.n	8008bcc <DNS_ParseDNSReply+0x758>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        else
        {
            /* The IP-address found will be returned. */
        }

        return ulIPAddress;
 8008bcc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8008bda:	bf00      	nop

08008bdc <parseDNSAnswer>:
 * @return pdTRUE when successful, otherwise pdFALSE.
 */
    uint32_t parseDNSAnswer( ParseSet_t * pxSet,
                             struct freertos_addrinfo ** ppxAddressInfo,
                             size_t * uxBytesRead )
    {
 8008bdc:	b590      	push	{r4, r7, lr}
 8008bde:	b0a7      	sub	sp, #156	@ 0x9c
 8008be0:	af02      	add	r7, sp, #8
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
        uint16_t x;
        size_t uxResult;
        uint32_t ulReturnIPAddress = 0U;
 8008be8:	2300      	movs	r3, #0
 8008bea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8008bee:	2304      	movs	r3, #4
 8008bf0:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        BaseType_t xReturn = pdTRUE;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        IPv46_Address_t xIP_Address;

        struct freertos_addrinfo * pxNewAddress = NULL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for( x = 0U; x < pxSet->usAnswers; x++ )
 8008c00:	2300      	movs	r3, #0
 8008c02:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008c06:	e1c1      	b.n	8008f8c <parseDNSAnswer+0x3b0>
        {
            BaseType_t xDoAccept = pdFALSE;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if( pxSet->usNumARecordsStored >= usCount )
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008c10:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8008c14:	429a      	cmp	r2, r3
 8008c16:	f240 81c1 	bls.w	8008f9c <parseDNSAnswer+0x3c0>
            {
                /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                break;
            }

            uxResult = DNS_SkipNameField( pxSet->pucByte,
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	68da      	ldr	r2, [r3, #12]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	4619      	mov	r1, r3
 8008c24:	4610      	mov	r0, r2
 8008c26:	f7ff fbcf 	bl	80083c8 <DNS_SkipNameField>
 8008c2a:	6778      	str	r0, [r7, #116]	@ 0x74
                                          pxSet->uxSourceBytesRemaining );

            /* Check for a malformed response. */
            if( uxResult == 0U )
 8008c2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d103      	bne.n	8008c3a <parseDNSAnswer+0x5e>
            {
                xReturn = pdFALSE;
 8008c32:	2300      	movs	r3, #0
 8008c34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8008c38:	e1b1      	b.n	8008f9e <parseDNSAnswer+0x3c2>
            }

            if( uxBytesRead != NULL )
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d005      	beq.n	8008c4c <parseDNSAnswer+0x70>
            {
                *uxBytesRead += uxResult;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c46:	441a      	add	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	601a      	str	r2, [r3, #0]
            }

            pxSet->pucByte = &( pxSet->pucByte[ uxResult ] );
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	68da      	ldr	r2, [r3, #12]
 8008c50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c52:	441a      	add	r2, r3
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	60da      	str	r2, [r3, #12]
            pxSet->uxSourceBytesRemaining -= uxResult;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	695a      	ldr	r2, [r3, #20]
 8008c5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c5e:	1ad2      	subs	r2, r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	615a      	str	r2, [r3, #20]

            /* Is there enough data for an IPv4 A record answer and, if so,
             * is this an A record? */
            if( pxSet->uxSourceBytesRemaining < sizeof( uint16_t ) )
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d803      	bhi.n	8008c74 <parseDNSAnswer+0x98>
            {
                xReturn = pdFALSE;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8008c72:	e194      	b.n	8008f9e <parseDNSAnswer+0x3c2>
            }

            pxSet->usType = usChar2u16( pxSet->pucByte );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f001 ff5a 	bl	800ab32 <usChar2u16>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	461a      	mov	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	831a      	strh	r2, [r3, #24]

            if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8b1b      	ldrh	r3, [r3, #24]
 8008c8a:	2b1c      	cmp	r3, #28
 8008c8c:	d10c      	bne.n	8008ca8 <parseDNSAnswer+0xcc>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv6_ADDRESS;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2210      	movs	r2, #16
 8008c92:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	695a      	ldr	r2, [r3, #20]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6a1b      	ldr	r3, [r3, #32]
 8008c9c:	330a      	adds	r3, #10
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d323      	bcc.n	8008cea <parseDNSAnswer+0x10e>
                {
                    xDoAccept = pdTRUE;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008ca6:	e020      	b.n	8008cea <parseDNSAnswer+0x10e>
                }
            }
            else if( pxSet->usType == ( uint16_t ) dnsTYPE_A_HOST )
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	8b1b      	ldrh	r3, [r3, #24]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d11c      	bne.n	8008cea <parseDNSAnswer+0x10e>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2204      	movs	r2, #4
 8008cb4:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	695a      	ldr	r2, [r3, #20]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	330a      	adds	r3, #10
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d312      	bcc.n	8008cea <parseDNSAnswer+0x10e>
                     * invoke the user callback and also store this invalid address in our cache. */
                    void * pvCopyDest;
                    const void * pvCopySource;
                    uint32_t ulTestAddress;

                    pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	330a      	adds	r3, #10
 8008cca:	673b      	str	r3, [r7, #112]	@ 0x70
                    pvCopyDest = &( ulTestAddress );
 8008ccc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008cd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008cda:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008cdc:	f019 fc50 	bl	8022580 <memcpy>

                    if( ulTestAddress != 0U )
 8008ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <parseDNSAnswer+0x10e>
                    {
                        xDoAccept = pdTRUE;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	67fb      	str	r3, [r7, #124]	@ 0x7c
            {
                /* Unknown host type, AAAA nor A.
                 * 'xDoAccept' was already initialised as pdFALSE. */
            }

            if( xDoAccept != pdFALSE )
 8008cea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 810d 	beq.w	8008f0c <parseDNSAnswer+0x330>
                 * fields of the structure. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Sanity check the data length of an IPv4 answer. */
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8008cf8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cfa:	891b      	ldrh	r3, [r3, #8]
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	021b      	lsls	r3, r3, #8
 8008d00:	b21a      	sxth	r2, r3
 8008d02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008d04:	891b      	ldrh	r3, [r3, #8]
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	0a1b      	lsrs	r3, r3, #8
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	b21b      	sxth	r3, r3
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	b21a      	sxth	r2, r3
                    ( uint16_t ) pxSet->uxAddressLength )
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8008d16:	b21b      	sxth	r3, r3
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	f040 80d0 	bne.w	8008ebe <parseDNSAnswer+0x2e2>
                {
                    if( pxSet->uxAddressLength == ipSIZE_OF_IPv6_ADDRESS ) /*No check needed for pxSet->usType as uxAddressLength is set based on usType*/
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	2b10      	cmp	r3, #16
 8008d24:	d11c      	bne.n	8008d60 <parseDNSAnswer+0x184>
                    {
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
                                         &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] ),
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	330a      	adds	r3, #10
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
 8008d2c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8008d30:	6818      	ldr	r0, [r3, #0]
 8008d32:	6859      	ldr	r1, [r3, #4]
 8008d34:	689a      	ldr	r2, [r3, #8]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                         ipSIZE_OF_IPv6_ADDRESS );

                        if( ppxAddressInfo != NULL )
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d009      	beq.n	8008d54 <parseDNSAnswer+0x178>
                        {
                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET6, xIP_Address.xIPAddress.xIP_IPv6.ucBytes );
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	3334      	adds	r3, #52	@ 0x34
 8008d44:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8008d48:	210a      	movs	r1, #10
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fe fe24 	bl	8007998 <pxNew_AddrInfo>
 8008d50:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIs_IPv6 = pdTRUE;
 8008d54:	2301      	movs	r3, #1
 8008d56:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Return non-zero to inform the caller that a valid
                         * IPv6 address was found. */
                        pxSet->ulIPAddress = 1U;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	61da      	str	r2, [r3, #28]
 8008d5e:	e021      	b.n	8008da4 <parseDNSAnswer+0x1c8>
                        /*
                         * Use helper variables for memcpy() to remain
                         * compliant with MISRA Rule 21.15.  These should be
                         * optimized away.
                         */
                        pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	330a      	adds	r3, #10
 8008d66:	663b      	str	r3, [r7, #96]	@ 0x60
                        pvCopyDest = &( pxSet->ulIPAddress );
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	331c      	adds	r3, #28
 8008d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6a1b      	ldr	r3, [r3, #32]
 8008d72:	461a      	mov	r2, r3
 8008d74:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008d76:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8008d78:	f019 fc02 	bl	8022580 <memcpy>

                        if( ppxAddressInfo != NULL )
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00b      	beq.n	8008d9a <parseDNSAnswer+0x1be>
                        {
                            const uint8_t * ucBytes = ( uint8_t * ) &( pxSet->ulIPAddress );
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	331c      	adds	r3, #28
 8008d86:	65bb      	str	r3, [r7, #88]	@ 0x58

                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET4, ucBytes );
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	3334      	adds	r3, #52	@ 0x34
 8008d8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d8e:	2102      	movs	r1, #2
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7fe fe01 	bl	8007998 <pxNew_AddrInfo>
 8008d96:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIPAddress.ulIP_IPv4 = pxSet->ulIPAddress;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	643b      	str	r3, [r7, #64]	@ 0x40
                        xIP_Address.xIs_IPv6 = pdFALSE;
 8008da0:	2300      	movs	r3, #0
 8008da2:	653b      	str	r3, [r7, #80]	@ 0x50
                    }

                    if( pxNewAddress != NULL )
 8008da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d013      	beq.n	8008dd4 <parseDNSAnswer+0x1f8>
                    {
                        if( *( ppxAddressInfo ) == NULL )
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d104      	bne.n	8008dbe <parseDNSAnswer+0x1e2>
                        {
                            /* For the first address found. */
                            *( ppxAddressInfo ) = pxNewAddress;
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	e004      	b.n	8008dc8 <parseDNSAnswer+0x1ec>
                        }
                        else
                        {
                            /* For the next address found. */
                            *( pxSet->ppxLastAddress ) = pxNewAddress;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008dc6:	601a      	str	r2, [r3, #0]
                        }

                        pxSet->ppxLastAddress = &( pxNewAddress->ai_next );
 8008dc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008dcc:	f103 021c 	add.w	r2, r3, #28
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	649a      	str	r2, [r3, #72]	@ 0x48

                    #if ( ipconfigDNS_USE_CALLBACKS == 1 )
                    {
                        BaseType_t xCallbackResult;

                        xCallbackResult = xDNSDoCallback( pxSet, ( ppxAddressInfo != NULL ) ? *( ppxAddressInfo ) : NULL );
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <parseDNSAnswer+0x204>
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	e000      	b.n	8008de2 <parseDNSAnswer+0x206>
 8008de0:	2300      	movs	r3, #0
 8008de2:	4619      	mov	r1, r3
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f7ff f979 	bl	80080dc <xDNSDoCallback>
 8008dea:	6578      	str	r0, [r7, #84]	@ 0x54

                        /* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
                        if( xCallbackResult != pdFALSE )
 8008dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d002      	beq.n	8008df8 <parseDNSAnswer+0x21c>
                        {
                            /* This device has requested this DNS look-up.
                             * The result may be stored in the DNS cache. */
                            pxSet->xDoStore = pdTRUE;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2201      	movs	r2, #1
 8008df6:	631a      	str	r2, [r3, #48]	@ 0x30
                    {
                        char cBuffer[ 40 ];

                        /* The reply will only be stored in the DNS cache when the
                         * request was issued by this device. */
                        if( pxSet->xDoStore != pdFALSE )
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d011      	beq.n	8008e24 <parseDNSAnswer+0x248>
                        {
                            ( void ) FreeRTOS_dns_update(
                                pxSet->pcName,
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f103 0034 	add.w	r0, r3, #52	@ 0x34
                                &xIP_Address,
                                pxDNSAnswerRecord->ulTTL,
 8008e06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e08:	685a      	ldr	r2, [r3, #4]
                            ( void ) FreeRTOS_dns_update(
 8008e0a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8008e0e:	2300      	movs	r3, #0
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	2300      	movs	r3, #0
 8008e14:	f7fe fe85 	bl	8007b22 <FreeRTOS_dns_update>
                                pdFALSE,
                                NULL );
                            pxSet->usNumARecordsStored++; /* Track # of A records stored */
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	849a      	strh	r2, [r3, #36]	@ 0x24
                        }

                        if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8b1b      	ldrh	r3, [r3, #24]
 8008e28:	2b1c      	cmp	r3, #28
 8008e2a:	d11f      	bne.n	8008e6c <parseDNSAnswer+0x290>
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) xIP_Address.xIPAddress.xIP_IPv6.ucBytes, cBuffer, sizeof( cBuffer ) );
 8008e2c:	f107 0214 	add.w	r2, r7, #20
 8008e30:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8008e34:	2328      	movs	r3, #40	@ 0x28
 8008e36:	200a      	movs	r0, #10
 8008e38:	f006 fb6c 	bl	800f514 <FreeRTOS_inet_ntop>
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	4618      	mov	r0, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <parseDNSAnswer+0x27c>
 8008e54:	4b58      	ldr	r3, [pc, #352]	@ (8008fb8 <parseDNSAnswer+0x3dc>)
 8008e56:	e000      	b.n	8008e5a <parseDNSAnswer+0x27e>
 8008e58:	4b58      	ldr	r3, [pc, #352]	@ (8008fbc <parseDNSAnswer+0x3e0>)
 8008e5a:	f107 0114 	add.w	r1, r7, #20
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	460b      	mov	r3, r1
 8008e62:	4601      	mov	r1, r0
 8008e64:	4856      	ldr	r0, [pc, #344]	@ (8008fc0 <parseDNSAnswer+0x3e4>)
 8008e66:	f019 f96f 	bl	8022148 <lUDPLoggingPrintf>
 8008e6a:	e01f      	b.n	8008eac <parseDNSAnswer+0x2d0>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                        else
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
                                                         ( const void * ) &( pxSet->ulIPAddress ),
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f103 011c 	add.w	r1, r3, #28
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
 8008e72:	f107 0214 	add.w	r2, r7, #20
 8008e76:	2328      	movs	r3, #40	@ 0x28
 8008e78:	2002      	movs	r0, #2
 8008e7a:	f006 fb4b 	bl	800f514 <FreeRTOS_inet_ntop>
                                                         cBuffer,
                                                         ( socklen_t ) sizeof( cBuffer ) );
                            /* Show what has happened. */
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	4618      	mov	r0, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d001      	beq.n	8008e9a <parseDNSAnswer+0x2be>
 8008e96:	4b48      	ldr	r3, [pc, #288]	@ (8008fb8 <parseDNSAnswer+0x3dc>)
 8008e98:	e000      	b.n	8008e9c <parseDNSAnswer+0x2c0>
 8008e9a:	4b48      	ldr	r3, [pc, #288]	@ (8008fbc <parseDNSAnswer+0x3e0>)
 8008e9c:	f107 0114 	add.w	r1, r7, #20
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4601      	mov	r1, r0
 8008ea6:	4846      	ldr	r0, [pc, #280]	@ (8008fc0 <parseDNSAnswer+0x3e4>)
 8008ea8:	f019 f94e 	bl	8022148 <lUDPLoggingPrintf>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                    }
                    #endif /* ipconfigUSE_DNS_CACHE */

                    if( ulReturnIPAddress == 0U )
 8008eac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d119      	bne.n	8008ee8 <parseDNSAnswer+0x30c>
                    {
                        /* Here pxSet->ulIPAddress should be not equal tp 0 since pxSet->ulIPAddress is copied from
                         * pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] and os verified to be non zero above. */
                        /* Remember the first IP-address that is found. */
                        ulReturnIPAddress = pxSet->ulIPAddress;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ebc:	e014      	b.n	8008ee8 <parseDNSAnswer+0x30c>
                    }
                }
                else
                {
                    FreeRTOS_printf( ( "DNS sanity check failed: %u != %u\n",
 8008ebe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ec0:	891b      	ldrh	r3, [r3, #8]
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	021b      	lsls	r3, r3, #8
 8008ec6:	b21a      	sxth	r2, r3
 8008ec8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008eca:	891b      	ldrh	r3, [r3, #8]
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	0a1b      	lsrs	r3, r3, #8
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	b21b      	sxth	r3, r3
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	b21b      	sxth	r3, r3
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	4619      	mov	r1, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6a1b      	ldr	r3, [r3, #32]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	4838      	ldr	r0, [pc, #224]	@ (8008fc4 <parseDNSAnswer+0x3e8>)
 8008ee4:	f019 f930 	bl	8022148 <lUDPLoggingPrintf>
                                       FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ),
                                       ( unsigned ) pxSet->uxAddressLength ) );
                }

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ] );
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	68da      	ldr	r2, [r3, #12]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6a1b      	ldr	r3, [r3, #32]
 8008ef0:	330a      	adds	r3, #10
 8008ef2:	441a      	add	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength );
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	695a      	ldr	r2, [r3, #20]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6a1b      	ldr	r3, [r3, #32]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	f1a3 020a 	sub.w	r2, r3, #10
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	615a      	str	r2, [r3, #20]
 8008f0a:	e03a      	b.n	8008f82 <parseDNSAnswer+0x3a6>
            }
            else if( pxSet->uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	695b      	ldr	r3, [r3, #20]
 8008f10:	2b09      	cmp	r3, #9
 8008f12:	d936      	bls.n	8008f82 <parseDNSAnswer+0x3a6>
                /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	66bb      	str	r3, [r7, #104]	@ 0x68

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	f103 020a 	add.w	r2, r3, #10
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	f1a3 020a 	sub.w	r2, r3, #10
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	615a      	str	r2, [r3, #20]

                /* Determine the length of the answer data from the header. */
                usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 8008f32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f34:	891b      	ldrh	r3, [r3, #8]
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	021b      	lsls	r3, r3, #8
 8008f3a:	b21a      	sxth	r2, r3
 8008f3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f3e:	891b      	ldrh	r3, [r3, #8]
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	0a1b      	lsrs	r3, r3, #8
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	b21b      	sxth	r3, r3
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	b21b      	sxth	r3, r3
 8008f4c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                /* Jump over the answer. */
                if( pxSet->uxSourceBytesRemaining >= usDataLength )
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	695a      	ldr	r2, [r3, #20]
 8008f54:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d30e      	bcc.n	8008f7a <parseDNSAnswer+0x39e>
                {
                    pxSet->pucByte = &( pxSet->pucByte[ usDataLength ] );
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	68da      	ldr	r2, [r3, #12]
 8008f60:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008f64:	441a      	add	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	60da      	str	r2, [r3, #12]
                    pxSet->uxSourceBytesRemaining -= usDataLength;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	695a      	ldr	r2, [r3, #20]
 8008f6e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008f72:	1ad2      	subs	r2, r2, r3
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	615a      	str	r2, [r3, #20]
 8008f78:	e003      	b.n	8008f82 <parseDNSAnswer+0x3a6>
                }
                else
                {
                    /* Malformed response. */
                    xReturn = pdFALSE;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    break;
 8008f80:	e00d      	b.n	8008f9e <parseDNSAnswer+0x3c2>
        for( x = 0U; x < pxSet->usAnswers; x++ )
 8008f82:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008f86:	3301      	adds	r3, #1
 8008f88:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	88db      	ldrh	r3, [r3, #6]
 8008f90:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008f94:	429a      	cmp	r2, r3
 8008f96:	f4ff ae37 	bcc.w	8008c08 <parseDNSAnswer+0x2c>
 8008f9a:	e000      	b.n	8008f9e <parseDNSAnswer+0x3c2>
                break;
 8008f9c:	bf00      	nop
            {
                /* Do nothing */
            }
        }

        return ( xReturn != 0 ) ? ulReturnIPAddress : 0U;
 8008f9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d002      	beq.n	8008fac <parseDNSAnswer+0x3d0>
 8008fa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008faa:	e000      	b.n	8008fae <parseDNSAnswer+0x3d2>
 8008fac:	2300      	movs	r3, #0
    }
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3794      	adds	r7, #148	@ 0x94
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd90      	pop	{r4, r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	08024a68 	.word	0x08024a68
 8008fbc:	08024a6c 	.word	0x08024a6c
 8008fc0:	08024a74 	.word	0x08024a74
 8008fc4:	08024aac 	.word	0x08024aac

08008fc8 <prepareReplyDNSMessage>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the DNS message.
 * @param[in] lNetLength The length of the DNS message.
 */
        void prepareReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                     BaseType_t lNetLength )
        {
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08c      	sub	sp, #48	@ 0x30
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;
            NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
            const size_t uxIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fffd 	bl	8009fd8 <uxIPHeaderSizePacket>
 8008fde:	6278      	str	r0, [r7, #36]	@ 0x24

            configASSERT( pxEndPoint != NULL );
 8008fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d104      	bne.n	8008ff0 <prepareReplyDNSMessage+0x28>
 8008fe6:	f240 319f 	movw	r1, #927	@ 0x39f
 8008fea:	4865      	ldr	r0, [pc, #404]	@ (8009180 <prepareReplyDNSMessage+0x1b8>)
 8008fec:	f7f8 fcb4 	bl	8001958 <vAssertCalled>
            pxUDPPacket = ( ( UDPPacket_t * )
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff4:	623b      	str	r3, [r7, #32]
                            pxNetworkBuffer->pucEthernetBuffer );
            pxIPHeader = &pxUDPPacket->xIPHeader;
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	330e      	adds	r3, #14
 8008ffa:	61fb      	str	r3, [r7, #28]

            #if ( ipconfigUSE_IPv6 != 0 )
                if( ( ( uxIPHeaderLength == ipSIZE_OF_IPv6_HEADER ) && ( ( pxIPHeader->ucVersionHeaderLength & 0xf0U ) == 0x60U ) ) )
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffe:	2b28      	cmp	r3, #40	@ 0x28
 8009000:	d150      	bne.n	80090a4 <prepareReplyDNSMessage+0xdc>
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800900a:	2b60      	cmp	r3, #96	@ 0x60
 800900c:	d14a      	bne.n	80090a4 <prepareReplyDNSMessage+0xdc>
                {
                    UDPPacket_IPv6_t * xUDPPacket_IPv6;
                    IPHeader_IPv6_t * pxIPHeader_IPv6;

                    xUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009012:	61bb      	str	r3, [r7, #24]
                    pxIPHeader_IPv6 = &( xUDPPacket_IPv6->xIPHeader );
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	330e      	adds	r3, #14
 8009018:	617b      	str	r3, [r7, #20]
                    pxUDPHeader = &xUDPPacket_IPv6->xUDPHeader;
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	3336      	adds	r3, #54	@ 0x36
 800901e:	613b      	str	r3, [r7, #16]

                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	b29b      	uxth	r3, r3
 8009024:	3308      	adds	r3, #8
 8009026:	b29b      	uxth	r3, r3
 8009028:	021b      	lsls	r3, r3, #8
 800902a:	b29a      	uxth	r2, r3
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	b29b      	uxth	r3, r3
 8009030:	3308      	adds	r3, #8
 8009032:	0a1b      	lsrs	r3, r3, #8
 8009034:	b29b      	uxth	r3, r3
 8009036:	4313      	orrs	r3, r2
 8009038:	b29a      	uxth	r2, r3
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	809a      	strh	r2, [r3, #4]

                    {
                        ( void ) memcpy( pxIPHeader_IPv6->xDestinationAddress.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f103 0018 	add.w	r0, r3, #24
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	3308      	adds	r3, #8
 8009048:	2210      	movs	r2, #16
 800904a:	4619      	mov	r1, r3
 800904c:	f019 fa98 	bl	8022580 <memcpy>
                        ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	f103 0008 	add.w	r0, r3, #8
 8009056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009058:	3338      	adds	r3, #56	@ 0x38
 800905a:	2210      	movs	r2, #16
 800905c:	4619      	mov	r1, r3
 800905e:	f019 fa8f 	bl	8022580 <memcpy>
                    }

                    xUDPPacket_IPv6->xUDPHeader.usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	b29b      	uxth	r3, r3
 8009066:	3308      	adds	r3, #8
 8009068:	b29b      	uxth	r3, r3
 800906a:	021b      	lsls	r3, r3, #8
 800906c:	b29a      	uxth	r2, r3
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	b29b      	uxth	r3, r3
 8009072:	3308      	adds	r3, #8
 8009074:	0a1b      	lsrs	r3, r3, #8
 8009076:	b29b      	uxth	r3, r3
 8009078:	4313      	orrs	r3, r2
 800907a:	b29a      	uxth	r2, r3
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	875a      	strh	r2, [r3, #58]	@ 0x3a
                    vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	781a      	ldrb	r2, [r3, #0]
 8009084:	785b      	ldrb	r3, [r3, #1]
 8009086:	021b      	lsls	r3, r3, #8
 8009088:	4313      	orrs	r3, r2
 800908a:	81fb      	strh	r3, [r7, #14]
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	885b      	ldrh	r3, [r3, #2]
 8009090:	b29a      	uxth	r2, r3
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	801a      	strh	r2, [r3, #0]
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	89fa      	ldrh	r2, [r7, #14]
 800909a:	805a      	strh	r2, [r3, #2]
                    uxDataLength = ( size_t ) lNetLength + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	333e      	adds	r3, #62	@ 0x3e
 80090a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                {
 80090a2:	e066      	b.n	8009172 <prepareReplyDNSMessage+0x1aa>
                }
                else
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            {
                pxUDPHeader = &pxUDPPacket->xUDPHeader;
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	3322      	adds	r3, #34	@ 0x22
 80090a8:	613b      	str	r3, [r7, #16]
                /* HT: started using defines like 'ipSIZE_OF_xxx' */
                pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength +
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	4413      	add	r3, r2
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	3308      	adds	r3, #8
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	021b      	lsls	r3, r3, #8
 80090bc:	b29a      	uxth	r2, r3
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	4619      	mov	r1, r3
 80090c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c6:	440b      	add	r3, r1
 80090c8:	3308      	adds	r3, #8
 80090ca:	0a1b      	lsrs	r3, r3, #8
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	4313      	orrs	r3, r2
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	805a      	strh	r2, [r3, #2]
                                                       uxIPHeaderLength +
                                                       ipSIZE_OF_UDP_HEADER );

                /* HT:endian: should not be translated, copying from packet to packet */
                if( pxIPHeader->ulDestinationIPAddress == ipMDNS_IP_ADDRESS )
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	4a2a      	ldr	r2, [pc, #168]	@ (8009184 <prepareReplyDNSMessage+0x1bc>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d103      	bne.n	80090e8 <prepareReplyDNSMessage+0x120>
                {
                    pxIPHeader->ucTimeToLive = ipMDNS_TIME_TO_LIVE;
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	22ff      	movs	r2, #255	@ 0xff
 80090e4:	721a      	strb	r2, [r3, #8]
 80090e6:	e006      	b.n	80090f6 <prepareReplyDNSMessage+0x12e>
                }
                else
                {
                    pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	68da      	ldr	r2, [r3, #12]
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	611a      	str	r2, [r3, #16]
                    pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	2280      	movs	r2, #128	@ 0x80
 80090f4:	721a      	strb	r2, [r3, #8]
                }

                pxIPHeader->ulSourceIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 80090f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	60da      	str	r2, [r3, #12]
                pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 80090fe:	4b22      	ldr	r3, [pc, #136]	@ (8009188 <prepareReplyDNSMessage+0x1c0>)
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	021b      	lsls	r3, r3, #8
 8009104:	b21a      	sxth	r2, r3
 8009106:	4b20      	ldr	r3, [pc, #128]	@ (8009188 <prepareReplyDNSMessage+0x1c0>)
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	0a1b      	lsrs	r3, r3, #8
 800910c:	b29b      	uxth	r3, r3
 800910e:	b21b      	sxth	r3, r3
 8009110:	4313      	orrs	r3, r2
 8009112:	b21b      	sxth	r3, r3
 8009114:	b29a      	uxth	r2, r3
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	809a      	strh	r2, [r3, #4]
                 * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
                 */
                #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                    pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
                #else
                    pxIPHeader->usFragmentOffset = 0U;
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	2200      	movs	r2, #0
 800911e:	719a      	strb	r2, [r3, #6]
 8009120:	2200      	movs	r2, #0
 8009122:	71da      	strb	r2, [r3, #7]
                #endif
                usPacketIdentifier++;
 8009124:	4b18      	ldr	r3, [pc, #96]	@ (8009188 <prepareReplyDNSMessage+0x1c0>)
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	3301      	adds	r3, #1
 800912a:	b29a      	uxth	r2, r3
 800912c:	4b16      	ldr	r3, [pc, #88]	@ (8009188 <prepareReplyDNSMessage+0x1c0>)
 800912e:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength +
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	b29b      	uxth	r3, r3
 8009134:	3308      	adds	r3, #8
 8009136:	b29b      	uxth	r3, r3
 8009138:	021b      	lsls	r3, r3, #8
 800913a:	b29a      	uxth	r2, r3
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	3308      	adds	r3, #8
 8009140:	0a1b      	lsrs	r3, r3, #8
 8009142:	b29b      	uxth	r3, r3
 8009144:	4313      	orrs	r3, r2
 8009146:	b29a      	uxth	r2, r3
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	809a      	strh	r2, [r3, #4]
                                                        ipSIZE_OF_UDP_HEADER );
                vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	781a      	ldrb	r2, [r3, #0]
 8009150:	785b      	ldrb	r3, [r3, #1]
 8009152:	021b      	lsls	r3, r3, #8
 8009154:	4313      	orrs	r3, r2
 8009156:	81bb      	strh	r3, [r7, #12]
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	885b      	ldrh	r3, [r3, #2]
 800915c:	b29a      	uxth	r2, r3
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	801a      	strh	r2, [r3, #0]
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	89ba      	ldrh	r2, [r7, #12]
 8009166:	805a      	strh	r2, [r3, #2]

                /* Important: tell NIC driver how many bytes must be sent */
                uxDataLength = ( ( size_t ) lNetLength ) + uxIPHeaderLength + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916c:	4413      	add	r3, r2
 800916e:	3316      	adds	r3, #22
 8009170:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009176:	629a      	str	r2, [r3, #40]	@ 0x28
        }
 8009178:	bf00      	nop
 800917a:	3730      	adds	r7, #48	@ 0x30
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	08024a04 	.word	0x08024a04
 8009184:	fb0000e0 	.word	0xfb0000e0
 8009188:	20001120 	.word	0x20001120

0800918c <ProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    eFrameProcessingResult_t ProcessICMPPacket( const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009194:	2300      	movs	r3, #0
 8009196:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800919c:	2b29      	cmp	r3, #41	@ 0x29
 800919e:	d803      	bhi.n	80091a8 <ProcessICMPPacket+0x1c>
 80091a0:	2159      	movs	r1, #89	@ 0x59
 80091a2:	4811      	ldr	r0, [pc, #68]	@ (80091e8 <ProcessICMPPacket+0x5c>)
 80091a4:	f7f8 fbd8 	bl	8001958 <vAssertCalled>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ac:	2b29      	cmp	r3, #41	@ 0x29
 80091ae:	d915      	bls.n	80091dc <ProcessICMPPacket+0x50>
             * fields of ICMP packet. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            ICMPPacket_t * pxICMPPacket = ( ( ICMPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b4:	60bb      	str	r3, [r7, #8]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d008      	beq.n	80091d2 <ProcessICMPPacket+0x46>
 80091c0:	2b08      	cmp	r3, #8
 80091c2:	d10a      	bne.n	80091da <ProcessICMPPacket+0x4e>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    {
                        eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 80091c4:	6879      	ldr	r1, [r7, #4]
 80091c6:	68b8      	ldr	r0, [r7, #8]
 80091c8:	f000 f810 	bl	80091ec <prvProcessICMPEchoRequest>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73fb      	strb	r3, [r7, #15]
                    }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 80091d0:	e004      	b.n	80091dc <ProcessICMPPacket+0x50>

                case ipICMP_ECHO_REPLY:
                    #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    {
                        prvProcessICMPEchoReply( pxICMPPacket );
 80091d2:	68b8      	ldr	r0, [r7, #8]
 80091d4:	f000 f836 	bl	8009244 <prvProcessICMPEchoReply>
                    }
                    #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                    break;
 80091d8:	e000      	b.n	80091dc <ProcessICMPPacket+0x50>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
 80091da:	bf00      	nop
            }
        }

        return eReturn;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
    }
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	08024ad0 	.word	0x08024ad0

080091ec <prvProcessICMPEchoRequest>:
 * @param pxNetworkBuffer Pointer to the network buffer containing the ICMP packet.
 * @returns Function returns eReturnEthernetFrame.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80091ec:	b480      	push	{r7}
 80091ee:	b087      	sub	sp, #28
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint32_t ulIPAddress;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	3322      	adds	r3, #34	@ 0x22
 80091fa:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	330e      	adds	r3, #14
 8009200:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2200      	movs	r2, #0
 8009206:	701a      	strb	r2, [r3, #0]
        ulIPAddress = pxIPHeader->ulDestinationIPAddress;
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	60fb      	str	r3, [r7, #12]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	68da      	ldr	r2, [r3, #12]
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = ulIPAddress;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	60da      	str	r2, [r3, #12]
        /* Update the TTL field. */
        pxIPHeader->ucTimeToLive = ipconfigICMP_TIME_TO_LIVE;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	2240      	movs	r2, #64	@ 0x40
 8009220:	721a      	strb	r2, [r3, #8]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	2200      	movs	r2, #0
 8009226:	719a      	strb	r2, [r3, #6]
 8009228:	2200      	movs	r2, #0
 800922a:	71da      	strb	r2, [r3, #7]
            /* Just to prevent compiler warnings about unused parameters. */
            ( void ) pxNetworkBuffer;

            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPHeader->usChecksum = 0U;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	2200      	movs	r2, #0
 8009230:	709a      	strb	r2, [r3, #2]
 8009232:	2200      	movs	r2, #0
 8009234:	70da      	strb	r2, [r3, #3]
        }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 8009236:	2302      	movs	r3, #2
    }
 8009238:	4618      	mov	r0, r3
 800923a:	371c      	adds	r7, #28
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <prvProcessICMPEchoReply>:
 * @brief Process an ICMP echo reply.
 *
 * @param[in] pxICMPPacket The IP packet that contains the ICMP message.
 */
    static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
    {
 8009244:	b580      	push	{r7, lr}
 8009246:	b086      	sub	sp, #24
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
        ePingReplyStatus_t eStatus = eSuccess;
 800924c:	2300      	movs	r3, #0
 800924e:	75fb      	strb	r3, [r7, #23]
        uint16_t usDataLength, usCount;
        uint8_t * pucByte;

        /* Find the total length of the IP packet. */
        usDataLength = pxICMPPacket->xIPHeader.usLength;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	7c1a      	ldrb	r2, [r3, #16]
 8009254:	7c5b      	ldrb	r3, [r3, #17]
 8009256:	021b      	lsls	r3, r3, #8
 8009258:	4313      	orrs	r3, r2
 800925a:	81fb      	strh	r3, [r7, #14]
        usDataLength = FreeRTOS_ntohs( usDataLength );
 800925c:	89fb      	ldrh	r3, [r7, #14]
 800925e:	021b      	lsls	r3, r3, #8
 8009260:	b21a      	sxth	r2, r3
 8009262:	89fb      	ldrh	r3, [r7, #14]
 8009264:	0a1b      	lsrs	r3, r3, #8
 8009266:	b29b      	uxth	r3, r3
 8009268:	b21b      	sxth	r3, r3
 800926a:	4313      	orrs	r3, r2
 800926c:	b21b      	sxth	r3, r3
 800926e:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the IP headers to obtain the length of the ICMP
         * message itself. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 8009270:	89fb      	ldrh	r3, [r7, #14]
 8009272:	3b14      	subs	r3, #20
 8009274:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the ICMP header, to obtain the length of
         * data contained in the ping. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMPv4_HEADER );
 8009276:	89fb      	ldrh	r3, [r7, #14]
 8009278:	3b08      	subs	r3, #8
 800927a:	81fb      	strh	r3, [r7, #14]

        /* Checksum has already been checked before in prvProcessIPPacket */

        /* Find the first byte of the data within the ICMP packet. */
        pucByte = ( uint8_t * ) pxICMPPacket;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	613b      	str	r3, [r7, #16]
        pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	332a      	adds	r3, #42	@ 0x2a
 8009284:	613b      	str	r3, [r7, #16]

        /* Check each byte. */
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8009286:	2300      	movs	r3, #0
 8009288:	82bb      	strh	r3, [r7, #20]
 800928a:	e00c      	b.n	80092a6 <prvProcessICMPEchoReply+0x62>
        {
            if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	2b78      	cmp	r3, #120	@ 0x78
 8009292:	d002      	beq.n	800929a <prvProcessICMPEchoReply+0x56>
            {
                eStatus = eInvalidData;
 8009294:	2302      	movs	r3, #2
 8009296:	75fb      	strb	r3, [r7, #23]
                break;
 8009298:	e009      	b.n	80092ae <prvProcessICMPEchoReply+0x6a>
            }

            pucByte++;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	3301      	adds	r3, #1
 800929e:	613b      	str	r3, [r7, #16]
        for( usCount = 0; usCount < usDataLength; usCount++ )
 80092a0:	8abb      	ldrh	r3, [r7, #20]
 80092a2:	3301      	adds	r3, #1
 80092a4:	82bb      	strh	r3, [r7, #20]
 80092a6:	8aba      	ldrh	r2, [r7, #20]
 80092a8:	89fb      	ldrh	r3, [r7, #14]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d3ee      	bcc.n	800928c <prvProcessICMPEchoReply+0x48>
        }

        /* Call back into the application to pass it the result. */
        vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	7dfb      	ldrb	r3, [r7, #23]
 80092b6:	4611      	mov	r1, r2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7f8 fc03 	bl	8001ac4 <vApplicationPingReplyHook>
    }
 80092be:	bf00      	nop
 80092c0:	3718      	adds	r7, #24
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <prvIPTask>:

/* MISRA Ref 8.13.1 [Not decorating a pointer to const parameter with const] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-813 */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void * pvParameters )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
    /* Just to prevent compiler warnings about unused parameters. */
    ( void ) pvParameters;

    prvIPTask_Initialise();
 80092d0:	f000 f90e 	bl	80094f0 <prvIPTask_Initialise>

    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 80092d4:	4802      	ldr	r0, [pc, #8]	@ (80092e0 <prvIPTask+0x18>)
 80092d6:	f018 ff37 	bl	8022148 <lUDPLoggingPrintf>

    /* Loop, processing IP events. */
    while( ipFOREVER() == pdTRUE )
    {
        prvProcessIPEventsAndTimers();
 80092da:	f000 f803 	bl	80092e4 <prvProcessIPEventsAndTimers>
 80092de:	e7fc      	b.n	80092da <prvIPTask+0x12>
 80092e0:	08024b00 	.word	0x08024b00

080092e4 <prvProcessIPEventsAndTimers>:

/**
 * @brief Process the events sent to the IP task and process the timers.
 */
static void prvProcessIPEventsAndTimers( void )
{
 80092e4:	b590      	push	{r4, r7, lr}
 80092e6:	b08d      	sub	sp, #52	@ 0x34
 80092e8:	af00      	add	r7, sp, #0

    ipconfigWATCHDOG_TIMER();

    /* Check the ARP, DHCP and TCP timers to see if there is any periodic
     * or timeout processing to perform. */
    vCheckNetworkTimers();
 80092ea:	f000 ff09 	bl	800a100 <vCheckNetworkTimers>

    /* Calculate the acceptable maximum sleep time. */
    xNextIPSleep = xCalculateSleepTime();
 80092ee:	f000 fea7 	bl	800a040 <xCalculateSleepTime>
 80092f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Wait until there is something to do. If the following call exits
     * due to a time out rather than a message being received, set a
     * 'NoEvent' value. */
    if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 80092f4:	4b7c      	ldr	r3, [pc, #496]	@ (80094e8 <prvProcessIPEventsAndTimers+0x204>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f107 0118 	add.w	r1, r7, #24
 80092fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fa fbd6 	bl	8003ab0 <xQueueReceive>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <prvProcessIPEventsAndTimers+0x2a>
    {
        xReceivedEvent.eEventType = eNoEvent;
 800930a:	23ff      	movs	r3, #255	@ 0xff
 800930c:	763b      	strb	r3, [r7, #24]
    }

    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
    {
        if( xReceivedEvent.eEventType != eNoEvent )
 800930e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8009312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009316:	d00d      	beq.n	8009334 <prvProcessIPEventsAndTimers+0x50>
        {
            UBaseType_t uxCount;

            uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 8009318:	4b73      	ldr	r3, [pc, #460]	@ (80094e8 <prvProcessIPEventsAndTimers+0x204>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4618      	mov	r0, r3
 800931e:	f7fa fd9f 	bl	8003e60 <uxQueueSpacesAvailable>
 8009322:	62b8      	str	r0, [r7, #40]	@ 0x28

            if( uxQueueMinimumSpace > uxCount )
 8009324:	4b71      	ldr	r3, [pc, #452]	@ (80094ec <prvProcessIPEventsAndTimers+0x208>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800932a:	429a      	cmp	r2, r3
 800932c:	d202      	bcs.n	8009334 <prvProcessIPEventsAndTimers+0x50>
            {
                uxQueueMinimumSpace = uxCount;
 800932e:	4a6f      	ldr	r2, [pc, #444]	@ (80094ec <prvProcessIPEventsAndTimers+0x208>)
 8009330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009332:	6013      	str	r3, [r2, #0]
    }
    #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

    iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

    switch( xReceivedEvent.eEventType )
 8009334:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8009338:	3301      	adds	r3, #1
 800933a:	2b0e      	cmp	r3, #14
 800933c:	f200 80ca 	bhi.w	80094d4 <prvProcessIPEventsAndTimers+0x1f0>
 8009340:	a201      	add	r2, pc, #4	@ (adr r2, 8009348 <prvProcessIPEventsAndTimers+0x64>)
 8009342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009346:	bf00      	nop
 8009348:	080094d5 	.word	0x080094d5
 800934c:	08009385 	.word	0x08009385
 8009350:	0800938f 	.word	0x0800938f
 8009354:	08009399 	.word	0x08009399
 8009358:	080093a5 	.word	0x080093a5
 800935c:	0800946f 	.word	0x0800946f
 8009360:	08009479 	.word	0x08009479
 8009364:	0800948d 	.word	0x0800948d
 8009368:	08009495 	.word	0x08009495
 800936c:	080094b9 	.word	0x080094b9
 8009370:	080093af 	.word	0x080093af
 8009374:	08009465 	.word	0x08009465
 8009378:	08009483 	.word	0x08009483
 800937c:	080094d5 	.word	0x080094d5
 8009380:	080094bf 	.word	0x080094bf
    {
        case eNetworkDownEvent:
            /* Attempt to establish a connection. */
            prvProcessNetworkDownEvent( ( ( NetworkInterface_t * ) xReceivedEvent.pvData ) );
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	4618      	mov	r0, r3
 8009388:	f001 f9cc 	bl	800a724 <prvProcessNetworkDownEvent>
            break;
 800938c:	e0a5      	b.n	80094da <prvProcessIPEventsAndTimers+0x1f6>
        case eNetworkRxEvent:

            /* The network hardware driver has received a new packet.  A
             * pointer to the received buffer is located in the pvData member
             * of the received event structure. */
            prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	4618      	mov	r0, r3
 8009392:	f000 f955 	bl	8009640 <prvHandleEthernetPacket>
            break;
 8009396:	e0a0      	b.n	80094da <prvProcessIPEventsAndTimers+0x1f6>

        case eNetworkTxEvent:

            /* Send a network packet. The ownership will  be transferred to
             * the driver, which will release it after delivery. */
            prvForwardTxPacket( ( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData ), pdTRUE );
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	2101      	movs	r1, #1
 800939c:	4618      	mov	r0, r3
 800939e:	f000 f95d 	bl	800965c <prvForwardTxPacket>
            break;
 80093a2:	e09a      	b.n	80094da <prvProcessIPEventsAndTimers+0x1f6>

        case eARPTimerEvent:
            /* The ARP timer has expired, process the ARP cache. */
            #if ( ipconfigUSE_IPv4 != 0 )
                vARPAgeCache();
 80093a4:	f7fe f94e 	bl	8007644 <vARPAgeCache>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            #if ( ipconfigUSE_IPv6 != 0 )
                vNDAgeCache();
 80093a8:	f002 fdb6 	bl	800bf18 <vNDAgeCache>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            break;
 80093ac:	e095      	b.n	80094da <prvProcessIPEventsAndTimers+0x1f6>
            /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
             * to a port. The port number is communicated in the socket field
             * usLocalPort. vSocketBind() will actually bind the socket and the
             * API will unblock as soon as the eSOCKET_BOUND event is
             * triggered. */
            pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	623b      	str	r3, [r7, #32]
            xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 80093b2:	2318      	movs	r3, #24
 80093b4:	703b      	strb	r3, [r7, #0]

            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	7a1b      	ldrb	r3, [r3, #8]
 80093ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <prvProcessIPEventsAndTimers+0xe6>
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d01a      	beq.n	80093fe <prvProcessIPEventsAndTimers+0x11a>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 80093c8:	e02c      	b.n	8009424 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET;
 80093ca:	2302      	movs	r3, #2
 80093cc:	707b      	strb	r3, [r7, #1]
                        xAddress.sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 80093ce:	6a3b      	ldr	r3, [r7, #32]
 80093d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d2:	061a      	lsls	r2, r3, #24
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d8:	021b      	lsls	r3, r3, #8
 80093da:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80093de:	431a      	orrs	r2, r3
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e4:	0a1b      	lsrs	r3, r3, #8
 80093e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80093ea:	431a      	orrs	r2, r3
 80093ec:	6a3b      	ldr	r3, [r7, #32]
 80093ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f0:	0e1b      	lsrs	r3, r3, #24
 80093f2:	4313      	orrs	r3, r2
 80093f4:	60bb      	str	r3, [r7, #8]
                        pxSocket->xLocalAddress.ulIP_IPv4 = 0;
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	2200      	movs	r2, #0
 80093fa:	629a      	str	r2, [r3, #40]	@ 0x28
                        break;
 80093fc:	e012      	b.n	8009424 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET6;
 80093fe:	230a      	movs	r3, #10
 8009400:	707b      	strb	r3, [r7, #1]
                        ( void ) memcpy( xAddress.sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( xAddress.sin_address.xIP_IPv6.ucBytes ) );
 8009402:	6a3b      	ldr	r3, [r7, #32]
 8009404:	3328      	adds	r3, #40	@ 0x28
 8009406:	f107 0408 	add.w	r4, r7, #8
 800940a:	6818      	ldr	r0, [r3, #0]
 800940c:	6859      	ldr	r1, [r3, #4]
 800940e:	689a      	ldr	r2, [r3, #8]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 8009414:	6a3b      	ldr	r3, [r7, #32]
 8009416:	3328      	adds	r3, #40	@ 0x28
 8009418:	2210      	movs	r2, #16
 800941a:	2100      	movs	r1, #0
 800941c:	4618      	mov	r0, r3
 800941e:	f019 f9bc 	bl	802279a <memset>
                        break;
 8009422:	bf00      	nop
            }

            xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8009424:	6a3b      	ldr	r3, [r7, #32]
 8009426:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8009428:	021b      	lsls	r3, r3, #8
 800942a:	b21a      	sxth	r2, r3
 800942c:	6a3b      	ldr	r3, [r7, #32]
 800942e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8009430:	0a1b      	lsrs	r3, r3, #8
 8009432:	b29b      	uxth	r3, r3
 8009434:	b21b      	sxth	r3, r3
 8009436:	4313      	orrs	r3, r2
 8009438:	b21b      	sxth	r3, r3
 800943a:	b29b      	uxth	r3, r3
 800943c:	807b      	strh	r3, [r7, #2]
            /* 'usLocalPort' will be set again by vSocketBind(). */
            pxSocket->usLocalPort = 0U;
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	2200      	movs	r2, #0
 8009442:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8009444:	4639      	mov	r1, r7
 8009446:	2300      	movs	r3, #0
 8009448:	2218      	movs	r2, #24
 800944a:	6a38      	ldr	r0, [r7, #32]
 800944c:	f005 fa32 	bl	800e8b4 <vSocketBind>

            /* Before 'eSocketBindEvent' was sent it was tested that
             * ( xEventGroup != NULL ) so it can be used now to wake up the
             * user. */
            pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f043 0210 	orr.w	r2, r3, #16
 8009458:	6a3b      	ldr	r3, [r7, #32]
 800945a:	601a      	str	r2, [r3, #0]
            vSocketWakeUpUser( pxSocket );
 800945c:	6a38      	ldr	r0, [r7, #32]
 800945e:	f006 f8d8 	bl	800f612 <vSocketWakeUpUser>
            break;
 8009462:	e03a      	b.n	80094da <prvProcessIPEventsAndTimers+0x1f6>

            /* The user API FreeRTOS_closesocket() has sent a message to the
             * IP-task to actually close a socket. This is handled in
             * vSocketClose().  As the socket gets closed, there is no way to
             * report back to the API, so the API won't wait for the result */
            ( void ) vSocketClose( ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData ) );
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	4618      	mov	r0, r3
 8009468:	f005 fad8 	bl	800ea1c <vSocketClose>
            break;
 800946c:	e035      	b.n	80094da <prvProcessIPEventsAndTimers+0x1f6>
        case eStackTxEvent:

            /* The network stack has generated a packet to send.  A
             * pointer to the generated buffer is located in the pvData
             * member of the received event structure. */
            vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	4618      	mov	r0, r3
 8009472:	f00d f9b1 	bl	80167d8 <vProcessGeneratedUDPPacket>
            break;
 8009476:	e030      	b.n	80094da <prvProcessIPEventsAndTimers+0x1f6>

        case eDHCPEvent:
            prvCallDHCP_RA_Handler( ( ( NetworkEndPoint_t * ) xReceivedEvent.pvData ) );
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	4618      	mov	r0, r3
 800947c:	f000 f88c 	bl	8009598 <prvCallDHCP_RA_Handler>
            break;
 8009480:	e02b      	b.n	80094da <prvProcessIPEventsAndTimers+0x1f6>
                    vSocketSelect( pxMessage->pxSocketSet );
                    ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                }
            #else
                {
                    vSocketSelect( ( ( SocketSelect_t * ) xReceivedEvent.pvData ) );
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	4618      	mov	r0, r3
 8009486:	f007 fab3 	bl	80109f0 <vSocketSelect>
                }
            #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 800948a:	e026      	b.n	80094da <prvProcessIPEventsAndTimers+0x1f6>
        case eTCPTimerEvent:
            #if ( ipconfigUSE_TCP == 1 )

                /* Simply mark the TCP timer as expired so it gets processed
                 * the next time prvCheckNetworkTimers() is called. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 800948c:	2001      	movs	r0, #1
 800948e:	f000 ffab 	bl	800a3e8 <vIPSetTCPTimerExpiredState>
            #endif /* ipconfigUSE_TCP */
            break;
 8009492:	e022      	b.n	80094da <prvProcessIPEventsAndTimers+0x1f6>

            /* The API FreeRTOS_accept() was called, the IP-task will now
             * check if the listening socket (communicated in pvData) actually
             * received a new connection. */
            #if ( ipconfigUSE_TCP == 1 )
                pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	623b      	str	r3, [r7, #32]

                if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8009498:	6a38      	ldr	r0, [r7, #32]
 800949a:	f008 fbed 	bl	8011c78 <xTCPCheckNewClient>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d019      	beq.n	80094d8 <prvProcessIPEventsAndTimers+0x1f4>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f043 0204 	orr.w	r2, r3, #4
 80094ac:	6a3b      	ldr	r3, [r7, #32]
 80094ae:	601a      	str	r2, [r3, #0]
                    vSocketWakeUpUser( pxSocket );
 80094b0:	6a38      	ldr	r0, [r7, #32]
 80094b2:	f006 f8ae 	bl	800f612 <vSocketWakeUpUser>
                }
            #endif /* ipconfigUSE_TCP */
            break;
 80094b6:	e00f      	b.n	80094d8 <prvProcessIPEventsAndTimers+0x1f4>
        case eTCPNetStat:

            /* FreeRTOS_netstat() was called to have the IP-task print an
             * overview of all sockets and their connections */
            #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                vTCPNetStat();
 80094b8:	f007 f984 	bl	80107c4 <vTCPNetStat>
            #endif /* ipconfigUSE_TCP */
            break;
 80094bc:	e00d      	b.n	80094da <prvProcessIPEventsAndTimers+0x1f6>

        case eSocketSetDeleteEvent:
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	627b      	str	r3, [r7, #36]	@ 0x24

                iptraceMEM_STATS_DELETE( pxSocketSet );
                vEventGroupDelete( pxSocketSet->xSelectGroup );
 80094c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7f9 ffae 	bl	8003428 <vEventGroupDelete>
                vPortFree( ( void * ) pxSocketSet );
 80094cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094ce:	f7fd f92d 	bl	800672c <vPortFree>
            }
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 80094d2:	e002      	b.n	80094da <prvProcessIPEventsAndTimers+0x1f6>
            /* xQueueReceive() returned because of a normal time-out. */
            break;

        default:
            /* Should not get here. */
            break;
 80094d4:	bf00      	nop
 80094d6:	e000      	b.n	80094da <prvProcessIPEventsAndTimers+0x1f6>
            break;
 80094d8:	bf00      	nop
    }

    prvIPTask_CheckPendingEvents();
 80094da:	f000 f833 	bl	8009544 <prvIPTask_CheckPendingEvents>
}
 80094de:	bf00      	nop
 80094e0:	3734      	adds	r7, #52	@ 0x34
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd90      	pop	{r4, r7, pc}
 80094e6:	bf00      	nop
 80094e8:	2000111c 	.word	0x2000111c
 80094ec:	20000014 	.word	0x20000014

080094f0 <prvIPTask_Initialise>:
/**
 * @brief Helper function for prvIPTask, it does the first initializations
 *        at start-up. No parameters, no return type.
 */
static void prvIPTask_Initialise( void )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
    /* Generate a dummy message to say that the network connection has gone
     * down.  This will cause this task to initialise the network interface.  After
     * this it is the responsibility of the network interface hardware driver to
     * send this message if a previously connected network is disconnected. */

    vNetworkTimerReload( pdMS_TO_TICKS( ipINITIALISATION_RETRY_DELAY ) );
 80094f6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80094fa:	f000 ff2b 	bl	800a354 <vNetworkTimerReload>

    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 80094fe:	4b0f      	ldr	r3, [pc, #60]	@ (800953c <prvIPTask_Initialise+0x4c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	607b      	str	r3, [r7, #4]
 8009504:	e005      	b.n	8009512 <prvIPTask_Initialise+0x22>
    {
        /* Post a 'eNetworkDownEvent' for every interface. */
        FreeRTOS_NetworkDown( pxInterface );
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f8be 	bl	8009688 <FreeRTOS_NetworkDown>
    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009510:	607b      	str	r3, [r7, #4]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1f6      	bne.n	8009506 <prvIPTask_Initialise+0x16>
    }

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* Initialise the TCP timer. */
        vTCPTimerReload( pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8009518:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800951c:	f000 fee8 	bl	800a2f0 <vTCPTimerReload>
    }
    #endif

    /* Mark the timer as inactive since we are not waiting on any ARP resolution as of now. */
    vIPSetARPResolutionTimerEnableState( pdFALSE );
 8009520:	2000      	movs	r0, #0
 8009522:	f000 ff9b 	bl	800a45c <vIPSetARPResolutionTimerEnableState>

    #if ( ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        vDNSInitialise();
 8009526:	f7fe fa31 	bl	800798c <vDNSInitialise>
    #endif /* ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) */

    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* Clear the DNS cache once only. */
        FreeRTOS_dnsclear();
 800952a:	f7fe fb0f 	bl	8007b4c <FreeRTOS_dnsclear>
    }
    #endif /* ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) ) */

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 800952e:	4b04      	ldr	r3, [pc, #16]	@ (8009540 <prvIPTask_Initialise+0x50>)
 8009530:	2201      	movs	r2, #1
 8009532:	601a      	str	r2, [r3, #0]
}
 8009534:	bf00      	nop
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	200014a8 	.word	0x200014a8
 8009540:	2000112c 	.word	0x2000112c

08009544 <prvIPTask_CheckPendingEvents>:
/**
 * @brief Check the value of 'xNetworkDownEventPending'. When non-zero, pending
 *        network-down events will be handled.
 */
static void prvIPTask_CheckPendingEvents( void )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    if( xNetworkDownEventPending != pdFALSE )
 800954a:	4b12      	ldr	r3, [pc, #72]	@ (8009594 <prvIPTask_CheckPendingEvents+0x50>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d01c      	beq.n	800958c <prvIPTask_CheckPendingEvents+0x48>
    {
        /* A network down event could not be posted to the network event
         * queue because the queue was full.
         * As this code runs in the IP-task, it can be done directly by
         * calling prvProcessNetworkDownEvent(). */
        xNetworkDownEventPending = pdFALSE;
 8009552:	4b10      	ldr	r3, [pc, #64]	@ (8009594 <prvIPTask_CheckPendingEvents+0x50>)
 8009554:	2200      	movs	r2, #0
 8009556:	601a      	str	r2, [r3, #0]

        for( pxInterface = FreeRTOS_FirstNetworkInterface();
 8009558:	f004 f836 	bl	800d5c8 <FreeRTOS_FirstNetworkInterface>
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	e012      	b.n	8009586 <prvIPTask_CheckPendingEvents+0x42>
             pxInterface != NULL;
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
        {
            if( pxInterface->bits.bCallDownEvent != pdFALSE_UNSIGNED )
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	7f1b      	ldrb	r3, [r3, #28]
 8009564:	f003 0302 	and.w	r3, r3, #2
 8009568:	b2db      	uxtb	r3, r3
 800956a:	2b00      	cmp	r3, #0
 800956c:	d007      	beq.n	800957e <prvIPTask_CheckPendingEvents+0x3a>
            {
                prvProcessNetworkDownEvent( pxInterface );
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f001 f8d8 	bl	800a724 <prvProcessNetworkDownEvent>
                pxInterface->bits.bCallDownEvent = pdFALSE_UNSIGNED;
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	7f13      	ldrb	r3, [r2, #28]
 8009578:	f36f 0341 	bfc	r3, #1, #1
 800957c:	7713      	strb	r3, [r2, #28]
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f004 f82e 	bl	800d5e0 <FreeRTOS_NextNetworkInterface>
 8009584:	6078      	str	r0, [r7, #4]
             pxInterface != NULL;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e9      	bne.n	8009560 <prvIPTask_CheckPendingEvents+0x1c>
            }
        }
    }
}
 800958c:	bf00      	nop
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20001124 	.word	0x20001124

08009598 <prvCallDHCP_RA_Handler>:
 * @brief Call the state machine of either DHCP, DHCPv6, or RA, whichever is activated.
 *
 * @param[in] pxEndPoint The end-point for which the state-machine will be called.
 */
static void prvCallDHCP_RA_Handler( NetworkEndPoint_t * pxEndPoint )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
    BaseType_t xIsIPv6 = pdFALSE;
 80095a0:	2300      	movs	r3, #0
 80095a2:	60fb      	str	r3, [r7, #12]

    #if ( ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_RA == 1 ) )
        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80095aa:	f003 0304 	and.w	r3, r3, #4
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <prvCallDHCP_RA_Handler+0x20>
        {
            xIsIPv6 = pdTRUE;
 80095b4:	2301      	movs	r3, #1
 80095b6:	60fb      	str	r3, [r7, #12]
        }
    }
    #endif /* ipconfigUSE_DHCPv6 */
    #if ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
    {
        if( ( xIsIPv6 == pdTRUE ) && ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) )
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d10b      	bne.n	80095d6 <prvCallDHCP_RA_Handler+0x3e>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80095c4:	f003 0302 	and.w	r3, r3, #2
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d003      	beq.n	80095d6 <prvCallDHCP_RA_Handler+0x3e>
        {
            /* Process RA messages for a given end-point. */
            vRAProcess( pdFALSE, pxEndPoint );
 80095ce:	6879      	ldr	r1, [r7, #4]
 80095d0:	2000      	movs	r0, #0
 80095d2:	f003 fecd 	bl	800d370 <vRAProcess>
    #endif /* ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) ) */

    /* Mention pxEndPoint and xIsIPv6 in case they have not been used. */
    ( void ) pxEndPoint;
    ( void ) xIsIPv6;
}
 80095d6:	bf00      	nop
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
	...

080095e0 <FreeRTOS_GetIPTaskHandle>:
 *        gives read-only access to it.
 *
 * @return The handle of the IP-task.
 */
TaskHandle_t FreeRTOS_GetIPTaskHandle( void )
{
 80095e0:	b480      	push	{r7}
 80095e2:	af00      	add	r7, sp, #0
    return xIPTaskHandle;
 80095e4:	4b03      	ldr	r3, [pc, #12]	@ (80095f4 <FreeRTOS_GetIPTaskHandle+0x14>)
 80095e6:	681b      	ldr	r3, [r3, #0]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	20001128 	.word	0x20001128

080095f8 <vIPNetworkUpCalls>:
 * @brief Perform all the required tasks when the network gets connected.
 *
 * @param pxEndPoint The end-point which goes up.
 */
void vIPNetworkUpCalls( struct xNetworkEndPoint * pxEndPoint )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
    if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009606:	f003 0304 	and.w	r3, r3, #4
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <vIPNetworkUpCalls+0x20>
    {
        /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
        #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
            vManageSolicitedNodeAddress( pxEndPoint, pdTRUE );
 8009610:	2101      	movs	r1, #1
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f002 fa7e 	bl	800bb14 <vManageSolicitedNodeAddress>
        #endif
    }

    pxEndPoint->bits.bEndPointUp = pdTRUE_UNSIGNED;
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800961e:	f043 0310 	orr.w	r3, r3, #16
 8009622:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 8009626:	2000      	movs	r0, #0
 8009628:	f7f8 f9ca 	bl	80019c0 <vApplicationIPNetworkEventHook>
    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        extern void vDNSInitialise( void );
        vDNSInitialise();
 800962c:	f7fe f9ae 	bl	800798c <vDNSInitialise>
    }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    vARPTimerReload( pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 8009630:	f242 7010 	movw	r0, #10000	@ 0x2710
 8009634:	f000 fe6a 	bl	800a30c <vARPTimerReload>
}
 8009638:	bf00      	nop
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
    {
        /* When ipconfigUSE_LINKED_RX_MESSAGES is set to 0 then only one
         * buffer will be sent at a time.  This is the default way for +TCP to pass
         * messages from the MAC to the TCP/IP stack. */
        if( pxBuffer != NULL )
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d002      	beq.n	8009654 <prvHandleEthernetPacket+0x14>
        {
            prvProcessEthernetPacket( pxBuffer );
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f9c8 	bl	80099e4 <prvProcessEthernetPacket>
            prvProcessEthernetPacket( pxBuffer );
            pxBuffer = pxNextBuffer;
        }
    }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 8009654:	bf00      	nop
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <prvForwardTxPacket>:
 * @param[in] pxNetworkBuffer The message buffer.
 * @param[in] xReleaseAfterSend When true, the network interface will own the buffer and is responsible for it's release.
 */
static void prvForwardTxPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                BaseType_t xReleaseAfterSend )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    if( pxNetworkBuffer->pxInterface != NULL )
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966a:	2b00      	cmp	r3, #0
 800966c:	d007      	beq.n	800967e <prvForwardTxPacket+0x22>
    {
        ( void ) pxNetworkBuffer->pxInterface->pfOutput( pxNetworkBuffer->pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	6879      	ldr	r1, [r7, #4]
 800967c:	4798      	blx	r3
    }
}
 800967e:	bf00      	nop
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
	...

08009688 <FreeRTOS_NetworkDown>:
 *         and later on a 'network-down' event, it will be executed.
 *
 * @param[in] pxNetworkInterface The interface that goes down.
 */
void FreeRTOS_NetworkDown( struct xNetworkInterface * pxNetworkInterface )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xNetworkDownEvent;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8009690:	2300      	movs	r3, #0
 8009692:	617b      	str	r3, [r7, #20]

    pxNetworkInterface->bits.bInterfaceUp = pdFALSE_UNSIGNED;
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	7f13      	ldrb	r3, [r2, #28]
 8009698:	f36f 0300 	bfc	r3, #0, #1
 800969c:	7713      	strb	r3, [r2, #28]
    xNetworkDownEvent.eEventType = eNetworkDownEvent;
 800969e:	2300      	movs	r3, #0
 80096a0:	733b      	strb	r3, [r7, #12]
    xNetworkDownEvent.pvData = pxNetworkInterface;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	613b      	str	r3, [r7, #16]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 80096a6:	f107 030c 	add.w	r3, r7, #12
 80096aa:	6979      	ldr	r1, [r7, #20]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 f8df 	bl	8009870 <xSendEventStructToIPTask>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d008      	beq.n	80096ca <FreeRTOS_NetworkDown+0x42>
    {
        /* Could not send the message, so it is still pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdTRUE;
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	7f13      	ldrb	r3, [r2, #28]
 80096bc:	f043 0302 	orr.w	r3, r3, #2
 80096c0:	7713      	strb	r3, [r2, #28]
        xNetworkDownEventPending = pdTRUE;
 80096c2:	4b06      	ldr	r3, [pc, #24]	@ (80096dc <FreeRTOS_NetworkDown+0x54>)
 80096c4:	2201      	movs	r2, #1
 80096c6:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 80096c8:	e004      	b.n	80096d4 <FreeRTOS_NetworkDown+0x4c>
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	7f13      	ldrb	r3, [r2, #28]
 80096ce:	f36f 0341 	bfc	r3, #1, #1
 80096d2:	7713      	strb	r3, [r2, #28]
}
 80096d4:	bf00      	nop
 80096d6:	3718      	adds	r7, #24
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	20001124 	.word	0x20001124

080096e0 <FreeRTOS_IPInit_Multi>:
 * @brief Initialise the FreeRTOS-Plus-TCP network stack and initialise the IP-task.
 *        Before calling this function, at least 1 interface and 1 end-point must
 *        have been set-up.
 */
BaseType_t FreeRTOS_IPInit_Multi( void )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdFALSE;
 80096e6:	2300      	movs	r3, #0
 80096e8:	607b      	str	r3, [r7, #4]

    /* There must be at least one interface and one end-point. */
    configASSERT( FreeRTOS_FirstNetworkInterface() != NULL );
 80096ea:	f003 ff6d 	bl	800d5c8 <FreeRTOS_FirstNetworkInterface>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d104      	bne.n	80096fe <FreeRTOS_IPInit_Multi+0x1e>
 80096f4:	f240 31b5 	movw	r1, #949	@ 0x3b5
 80096f8:	4823      	ldr	r0, [pc, #140]	@ (8009788 <FreeRTOS_IPInit_Multi+0xa8>)
 80096fa:	f7f8 f92d 	bl	8001958 <vAssertCalled>

    /* Check that the configuration values are correct and that the IP-task has not
     * already been initialized. */
    vPreCheckConfigs();
 80096fe:	f001 f8cb 	bl	800a898 <vPreCheckConfigs>
                                                 ucNetworkEventQueueStorageArea,
                                                 &xNetworkEventStaticQueue );
    }
    #else
    {
        xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 8009702:	2200      	movs	r2, #0
 8009704:	2108      	movs	r1, #8
 8009706:	2045      	movs	r0, #69	@ 0x45
 8009708:	f7fa f820 	bl	800374c <xQueueGenericCreate>
 800970c:	4603      	mov	r3, r0
 800970e:	4a1f      	ldr	r2, [pc, #124]	@ (800978c <FreeRTOS_IPInit_Multi+0xac>)
 8009710:	6013      	str	r3, [r2, #0]
        configASSERT( xNetworkEventQueue != NULL );
 8009712:	4b1e      	ldr	r3, [pc, #120]	@ (800978c <FreeRTOS_IPInit_Multi+0xac>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d104      	bne.n	8009724 <FreeRTOS_IPInit_Multi+0x44>
 800971a:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
 800971e:	481a      	ldr	r0, [pc, #104]	@ (8009788 <FreeRTOS_IPInit_Multi+0xa8>)
 8009720:	f7f8 f91a 	bl	8001958 <vAssertCalled>
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 8009724:	4b19      	ldr	r3, [pc, #100]	@ (800978c <FreeRTOS_IPInit_Multi+0xac>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d025      	beq.n	8009778 <FreeRTOS_IPInit_Multi+0x98>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            /* A queue registry is normally used to assist a kernel aware
             * debugger.  If one is in use then it will be helpful for the debugger
             * to show information about the network event queue. */
            vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 800972c:	4b17      	ldr	r3, [pc, #92]	@ (800978c <FreeRTOS_IPInit_Multi+0xac>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4917      	ldr	r1, [pc, #92]	@ (8009790 <FreeRTOS_IPInit_Multi+0xb0>)
 8009732:	4618      	mov	r0, r3
 8009734:	f7fa fcf6 	bl	8004124 <vQueueAddToRegistry>
        }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 8009738:	f00d fd8c 	bl	8017254 <xNetworkBuffersInitialise>
 800973c:	4603      	mov	r3, r0
 800973e:	2b01      	cmp	r3, #1
 8009740:	d10e      	bne.n	8009760 <FreeRTOS_IPInit_Multi+0x80>
        {
            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 8009742:	f004 fc7f 	bl	800e044 <vNetworkSocketsInit>
                    xReturn = pdTRUE;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvIPTask,
 8009746:	4b13      	ldr	r3, [pc, #76]	@ (8009794 <FreeRTOS_IPInit_Multi+0xb4>)
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	2304      	movs	r3, #4
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	2300      	movs	r3, #0
 8009750:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8009754:	4910      	ldr	r1, [pc, #64]	@ (8009798 <FreeRTOS_IPInit_Multi+0xb8>)
 8009756:	4811      	ldr	r0, [pc, #68]	@ (800979c <FreeRTOS_IPInit_Multi+0xbc>)
 8009758:	f7fa fd9a 	bl	8004290 <xTaskCreate>
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	e00e      	b.n	800977e <FreeRTOS_IPInit_Multi+0x9e>
            }
            #endif /* configSUPPORT_STATIC_ALLOCATION */
        }
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: xNetworkBuffersInitialise() failed\n" ) );
 8009760:	480f      	ldr	r0, [pc, #60]	@ (80097a0 <FreeRTOS_IPInit_Multi+0xc0>)
 8009762:	f018 fcf1 	bl	8022148 <lUDPLoggingPrintf>

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 8009766:	4b09      	ldr	r3, [pc, #36]	@ (800978c <FreeRTOS_IPInit_Multi+0xac>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4618      	mov	r0, r3
 800976c:	f7fa fb98 	bl	8003ea0 <vQueueDelete>
            xNetworkEventQueue = NULL;
 8009770:	4b06      	ldr	r3, [pc, #24]	@ (800978c <FreeRTOS_IPInit_Multi+0xac>)
 8009772:	2200      	movs	r2, #0
 8009774:	601a      	str	r2, [r3, #0]
 8009776:	e002      	b.n	800977e <FreeRTOS_IPInit_Multi+0x9e>
        }
    }
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: Network event queue could not be created\n" ) );
 8009778:	480a      	ldr	r0, [pc, #40]	@ (80097a4 <FreeRTOS_IPInit_Multi+0xc4>)
 800977a:	f018 fce5 	bl	8022148 <lUDPLoggingPrintf>
    }

    return xReturn;
 800977e:	687b      	ldr	r3, [r7, #4]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	08024b14 	.word	0x08024b14
 800978c:	2000111c 	.word	0x2000111c
 8009790:	08024b40 	.word	0x08024b40
 8009794:	20001128 	.word	0x20001128
 8009798:	08024b48 	.word	0x08024b48
 800979c:	080092c9 	.word	0x080092c9
 80097a0:	08024b50 	.word	0x08024b50
 80097a4:	08024b8c 	.word	0x08024b8c

080097a8 <FreeRTOS_GetEndPointConfiguration>:
    void FreeRTOS_GetEndPointConfiguration( uint32_t * pulIPAddress,
                                            uint32_t * pulNetMask,
                                            uint32_t * pulGatewayAddress,
                                            uint32_t * pulDNSServerAddress,
                                            const struct xNetworkEndPoint * pxEndPoint )
    {
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
 80097b4:	603b      	str	r3, [r7, #0]
        if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d023      	beq.n	8009804 <FreeRTOS_GetEndPointConfiguration+0x5c>
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80097c2:	f003 0304 	and.w	r3, r3, #4
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d11b      	bne.n	8009804 <FreeRTOS_GetEndPointConfiguration+0x5c>
        {
            /* Return the address configuration to the caller. */

            if( pulIPAddress != NULL )
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d003      	beq.n	80097da <FreeRTOS_GetEndPointConfiguration+0x32>
            {
                *pulIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	601a      	str	r2, [r3, #0]
            }

            if( pulNetMask != NULL )
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d003      	beq.n	80097e8 <FreeRTOS_GetEndPointConfiguration+0x40>
            {
                *pulNetMask = pxEndPoint->ipv4_settings.ulNetMask;
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	601a      	str	r2, [r3, #0]
            }

            if( pulGatewayAddress != NULL )
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <FreeRTOS_GetEndPointConfiguration+0x4e>
            {
                *pulGatewayAddress = pxEndPoint->ipv4_settings.ulGatewayAddress;
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	689a      	ldr	r2, [r3, #8]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	601a      	str	r2, [r3, #0]
            }

            if( pulDNSServerAddress != NULL )
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d003      	beq.n	8009804 <FreeRTOS_GetEndPointConfiguration+0x5c>
            {
                *pulDNSServerAddress = pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ]; /*_RB_ Only returning the address of the first DNS server. */
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	68da      	ldr	r2, [r3, #12]
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8009804:	bf00      	nop
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <FreeRTOS_GetAddressConfiguration>:
 */
    void FreeRTOS_GetAddressConfiguration( uint32_t * pulIPAddress,
                                           uint32_t * pulNetMask,
                                           uint32_t * pulGatewayAddress,
                                           uint32_t * pulDNSServerAddress )
    {
 8009810:	b580      	push	{r7, lr}
 8009812:	b088      	sub	sp, #32
 8009814:	af02      	add	r7, sp, #8
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
 800981c:	603b      	str	r3, [r7, #0]
        NetworkEndPoint_t * pxEndPoint;

        /* Get first end point. */
        pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800981e:	2000      	movs	r0, #0
 8009820:	f003 ff72 	bl	800d708 <FreeRTOS_FirstEndPoint>
 8009824:	6178      	str	r0, [r7, #20]

        if( pxEndPoint != NULL )
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d007      	beq.n	800983c <FreeRTOS_GetAddressConfiguration+0x2c>
        {
            FreeRTOS_GetEndPointConfiguration( pulIPAddress, pulNetMask,
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	68b9      	ldr	r1, [r7, #8]
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f7ff ffb6 	bl	80097a8 <FreeRTOS_GetEndPointConfiguration>
                                               pulGatewayAddress, pulDNSServerAddress, pxEndPoint );
        }
    }
 800983c:	bf00      	nop
 800983e:	3718      	adds	r7, #24
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <xSendEventToIPTask>:
 * @param[in] eEvent The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 800984e:	2300      	movs	r3, #0
 8009850:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 8009852:	79fb      	ldrb	r3, [r7, #7]
 8009854:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 8009856:	2300      	movs	r3, #0
 8009858:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 800985a:	f107 030c 	add.w	r3, r7, #12
 800985e:	6979      	ldr	r1, [r7, #20]
 8009860:	4618      	mov	r0, r3
 8009862:	f000 f805 	bl	8009870 <xSendEventStructToIPTask>
 8009866:	4603      	mov	r3, r0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3718      	adds	r7, #24
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 800987e:	f000 fb93 	bl	8009fa8 <xIPIsNetworkTaskReady>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d107      	bne.n	8009898 <xSendEventStructToIPTask+0x28>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f993 3000 	ldrsb.w	r3, [r3]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d002      	beq.n	8009898 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 8009892:	2300      	movs	r3, #0
 8009894:	617b      	str	r3, [r7, #20]
 8009896:	e035      	b.n	8009904 <xSendEventStructToIPTask+0x94>
    }
    else
    {
        xSendMessage = pdTRUE;
 8009898:	2301      	movs	r3, #1
 800989a:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
        {
            if( pxEvent->eEventType == eTCPTimerEvent )
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f993 3000 	ldrsb.w	r3, [r3]
 80098a2:	2b06      	cmp	r3, #6
 80098a4:	d10c      	bne.n	80098c0 <xSendEventStructToIPTask+0x50>
            {
                /* TCP timer events are sent to wake the timer task when
                 * xTCPTimer has expired, but there is no point sending them if the
                 * IP task is already awake processing other message. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 80098a6:	2001      	movs	r0, #1
 80098a8:	f000 fd9e 	bl	800a3e8 <vIPSetTCPTimerExpiredState>

                if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 80098ac:	4b18      	ldr	r3, [pc, #96]	@ (8009910 <xSendEventStructToIPTask+0xa0>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7fa fabb 	bl	8003e2c <uxQueueMessagesWaiting>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <xSendEventStructToIPTask+0x50>
                {
                    /* Not actually going to send the message but this is not a
                     * failure as the message didn't need to be sent. */
                    xSendMessage = pdFALSE;
 80098bc:	2300      	movs	r3, #0
 80098be:	613b      	str	r3, [r7, #16]
                }
            }
        }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d01c      	beq.n	8009900 <xSendEventStructToIPTask+0x90>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 80098c6:	f000 ff15 	bl	800a6f4 <xIsCallingFromIPTask>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d104      	bne.n	80098da <xSendEventStructToIPTask+0x6a>
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <xSendEventStructToIPTask+0x6a>
            {
                uxUseTimeout = ( TickType_t ) 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 80098da:	4b0d      	ldr	r3, [pc, #52]	@ (8009910 <xSendEventStructToIPTask+0xa0>)
 80098dc:	6818      	ldr	r0, [r3, #0]
 80098de:	2300      	movs	r3, #0
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	6879      	ldr	r1, [r7, #4]
 80098e4:	f7f9 fffc 	bl	80038e0 <xQueueGenericSend>
 80098e8:	6178      	str	r0, [r7, #20]

            if( xReturn == pdFAIL )
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d109      	bne.n	8009904 <xSendEventStructToIPTask+0x94>
            {
                /* A message should have been sent to the IP task, but wasn't. */
                FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f993 3000 	ldrsb.w	r3, [r3]
 80098f6:	4619      	mov	r1, r3
 80098f8:	4806      	ldr	r0, [pc, #24]	@ (8009914 <xSendEventStructToIPTask+0xa4>)
 80098fa:	f018 fc25 	bl	8022148 <lUDPLoggingPrintf>
 80098fe:	e001      	b.n	8009904 <xSendEventStructToIPTask+0x94>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 8009900:	2301      	movs	r3, #1
 8009902:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 8009904:	697b      	ldr	r3, [r7, #20]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	2000111c 	.word	0x2000111c
 8009914:	08024bd0 	.word	0x08024bd0

08009918 <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8009920:	2301      	movs	r3, #1
 8009922:	75fb      	strb	r3, [r7, #23]
    const EthernetHeader_t * pxEthernetHeader = NULL;
 8009924:	2300      	movs	r3, #0
 8009926:	613b      	str	r3, [r7, #16]
    const NetworkEndPoint_t * pxEndPoint = NULL;
 8009928:	2300      	movs	r3, #0
 800992a:	60fb      	str	r3, [r7, #12]

    if( pucEthernetBuffer == NULL )
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d102      	bne.n	8009938 <eConsiderFrameForProcessing+0x20>
    {
        eReturn = eReleaseBuffer;
 8009932:	2300      	movs	r3, #0
 8009934:	75fb      	strb	r3, [r7, #23]
 8009936:	e032      	b.n	800999e <eConsiderFrameForProcessing+0x86>
        /* Map the buffer onto Ethernet Header struct for easy access to fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	613b      	str	r3, [r7, #16]

        /* Examine the destination MAC from the Ethernet header to see if it matches
         * that of an end point managed by FreeRTOS+TCP. */
        pxEndPoint = FreeRTOS_FindEndPointOnMAC( &( pxEthernetHeader->xDestinationAddress ), NULL );
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	2100      	movs	r1, #0
 8009940:	4618      	mov	r0, r3
 8009942:	f003 ff81 	bl	800d848 <FreeRTOS_FindEndPointOnMAC>
 8009946:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d002      	beq.n	8009954 <eConsiderFrameForProcessing+0x3c>
        {
            /* The packet was directed to this node - process it. */
            eReturn = eProcessBuffer;
 800994e:	2301      	movs	r3, #1
 8009950:	75fb      	strb	r3, [r7, #23]
 8009952:	e024      	b.n	800999e <eConsiderFrameForProcessing+0x86>
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	2206      	movs	r2, #6
 8009958:	4619      	mov	r1, r3
 800995a:	4820      	ldr	r0, [pc, #128]	@ (80099dc <eConsiderFrameForProcessing+0xc4>)
 800995c:	f019 fda5 	bl	80234aa <memcmp>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d102      	bne.n	800996c <eConsiderFrameForProcessing+0x54>
        {
            /* The packet was a broadcast - process it. */
            eReturn = eProcessBuffer;
 8009966:	2301      	movs	r3, #1
 8009968:	75fb      	strb	r3, [r7, #23]
 800996a:	e018      	b.n	800999e <eConsiderFrameForProcessing+0x86>
        }
        else
        #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_DNS != 0 ) )
            if( memcmp( xLLMNR_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	2206      	movs	r2, #6
 8009970:	4619      	mov	r1, r3
 8009972:	481b      	ldr	r0, [pc, #108]	@ (80099e0 <eConsiderFrameForProcessing+0xc8>)
 8009974:	f019 fd99 	bl	80234aa <memcmp>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d102      	bne.n	8009984 <eConsiderFrameForProcessing+0x6c>
            {
                /* The packet is a request for LLMNR - process it. */
                eReturn = eProcessBuffer;
 800997e:	2301      	movs	r3, #1
 8009980:	75fb      	strb	r3, [r7, #23]
 8009982:	e00c      	b.n	800999e <eConsiderFrameForProcessing+0x86>
                /* The packet is a request for MDNS - process it. */
                eReturn = eProcessBuffer;
            }
            else
        #endif /* ipconfigUSE_MDNS */
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	2b33      	cmp	r3, #51	@ 0x33
 800998a:	d106      	bne.n	800999a <eConsiderFrameForProcessing+0x82>
            ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv6_1 ) )
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	785b      	ldrb	r3, [r3, #1]
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009990:	2b33      	cmp	r3, #51	@ 0x33
 8009992:	d102      	bne.n	800999a <eConsiderFrameForProcessing+0x82>
        {
            /* The packet is a request for LLMNR - process it. */
            eReturn = eProcessBuffer;
 8009994:	2301      	movs	r3, #1
 8009996:	75fb      	strb	r3, [r7, #23]
 8009998:	e001      	b.n	800999e <eConsiderFrameForProcessing+0x86>
        }
        else
        {
            /* The packet was not a broadcast, or for this node, just release
             * the buffer without taking any other action. */
            eReturn = eReleaseBuffer;
 800999a:	2300      	movs	r3, #0
 800999c:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
    {
        uint16_t usFrameType;

        if( eReturn == eProcessBuffer )
 800999e:	7dfb      	ldrb	r3, [r7, #23]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d115      	bne.n	80099d0 <eConsiderFrameForProcessing+0xb8>
        {
            usFrameType = pxEthernetHeader->usFrameType;
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	7b1a      	ldrb	r2, [r3, #12]
 80099a8:	7b5b      	ldrb	r3, [r3, #13]
 80099aa:	021b      	lsls	r3, r3, #8
 80099ac:	4313      	orrs	r3, r2
 80099ae:	817b      	strh	r3, [r7, #10]
            usFrameType = FreeRTOS_ntohs( usFrameType );
 80099b0:	897b      	ldrh	r3, [r7, #10]
 80099b2:	021b      	lsls	r3, r3, #8
 80099b4:	b21a      	sxth	r2, r3
 80099b6:	897b      	ldrh	r3, [r7, #10]
 80099b8:	0a1b      	lsrs	r3, r3, #8
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	b21b      	sxth	r3, r3
 80099be:	4313      	orrs	r3, r2
 80099c0:	b21b      	sxth	r3, r3
 80099c2:	817b      	strh	r3, [r7, #10]

            if( usFrameType <= 0x600U )
 80099c4:	897b      	ldrh	r3, [r7, #10]
 80099c6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80099ca:	d801      	bhi.n	80099d0 <eConsiderFrameForProcessing+0xb8>
            {
                /* Not an Ethernet II frame. */
                eReturn = eReleaseBuffer;
 80099cc:	2300      	movs	r3, #0
 80099ce:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

    return eReturn;
 80099d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3718      	adds	r7, #24
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	08027808 	.word	0x08027808
 80099e0:	080277f8 	.word	0x080277f8

080099e4 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 80099ec:	2300      	movs	r3, #0
 80099ee:	73fb      	strb	r3, [r7, #15]
    {
        /* prvHandleEthernetPacket() already checked for ( pxNetworkBuffer != NULL ) so
         * it is safe to break out of the do{}while() and let the second half of this
         * function handle the releasing of pxNetworkBuffer */

        if( ( pxNetworkBuffer->pxInterface == NULL ) || ( pxNetworkBuffer->pxEndPoint == NULL ) )
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d03d      	beq.n	8009a74 <prvProcessEthernetPacket+0x90>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d039      	beq.n	8009a74 <prvProcessEthernetPacket+0x90>
         * None of the above need to be checked again in code that handles incoming packets. */

        iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

        /* Interpret the Ethernet frame. */
        if( pxNetworkBuffer->xDataLength < sizeof( EthernetHeader_t ) )
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a04:	2b0d      	cmp	r3, #13
 8009a06:	d934      	bls.n	8009a72 <prvProcessEthernetPacket+0x8e>
        {
            break;
        }

        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 8009a08:	2301      	movs	r3, #1
 8009a0a:	73fb      	strb	r3, [r7, #15]
        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a10:	60bb      	str	r3, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	899b      	ldrh	r3, [r3, #12]
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d015      	beq.n	8009a4c <prvProcessEthernetPacket+0x68>
 8009a20:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009a24:	4293      	cmp	r3, r2
 8009a26:	dc21      	bgt.n	8009a6c <prvProcessEthernetPacket+0x88>
 8009a28:	2b08      	cmp	r3, #8
 8009a2a:	d00f      	beq.n	8009a4c <prvProcessEthernetPacket+0x68>
 8009a2c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8009a30:	d11c      	bne.n	8009a6c <prvProcessEthernetPacket+0x88>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipARP_FRAME_TYPE:

                        /* The Ethernet frame contains an ARP packet. */
                        if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a36:	2b29      	cmp	r3, #41	@ 0x29
 8009a38:	d905      	bls.n	8009a46 <prvProcessEthernetPacket+0x62>
                        {
                            /* MISRA Ref 11.3.1 [Misaligned access] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                            /* coverity[misra_c_2012_rule_11_3_violation] */
                            eReturned = eARPProcessPacket( pxNetworkBuffer );
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7fc ffe6 	bl	8006a0c <eARPProcessPacket>
 8009a40:	4603      	mov	r3, r0
 8009a42:	73fb      	strb	r3, [r7, #15]
                        }
                        else
                        {
                            eReturned = eReleaseBuffer;
                        }
                        break;
 8009a44:	e016      	b.n	8009a74 <prvProcessEthernetPacket+0x90>
                            eReturned = eReleaseBuffer;
 8009a46:	2300      	movs	r3, #0
 8009a48:	73fb      	strb	r3, [r7, #15]
                        break;
 8009a4a:	e013      	b.n	8009a74 <prvProcessEthernetPacket+0x90>

                case ipIPv4_FRAME_TYPE:
                case ipIPv6_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a50:	2b21      	cmp	r3, #33	@ 0x21
 8009a52:	d908      	bls.n	8009a66 <prvProcessEthernetPacket+0x82>
                    {
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        eReturned = prvProcessIPPacket( ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a58:	6879      	ldr	r1, [r7, #4]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 f8c6 	bl	8009bec <prvProcessIPPacket>
 8009a60:	4603      	mov	r3, r0
 8009a62:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 8009a64:	e006      	b.n	8009a74 <prvProcessEthernetPacket+0x90>
                        eReturned = eReleaseBuffer;
 8009a66:	2300      	movs	r3, #0
 8009a68:	73fb      	strb	r3, [r7, #15]
                    break;
 8009a6a:	e003      	b.n	8009a74 <prvProcessEthernetPacket+0x90>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]
                    #endif
                    break;
 8009a70:	e000      	b.n	8009a74 <prvProcessEthernetPacket+0x90>
            break;
 8009a72:	bf00      	nop
            } /* switch( pxEthernetHeader->usFrameType ) */
        }
    } while( pdFALSE );

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
 8009a76:	2b04      	cmp	r3, #4
 8009a78:	d00b      	beq.n	8009a92 <prvProcessEthernetPacket+0xae>
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	dc19      	bgt.n	8009ab2 <prvProcessEthernetPacket+0xce>
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	d002      	beq.n	8009a88 <prvProcessEthernetPacket+0xa4>
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d019      	beq.n	8009aba <prvProcessEthernetPacket+0xd6>
 8009a86:	e014      	b.n	8009ab2 <prvProcessEthernetPacket+0xce>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 8009a88:	2101      	movs	r1, #1
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f9a4 	bl	8009dd8 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 8009a90:	e014      	b.n	8009abc <prvProcessEthernetPacket+0xd8>
             * yet. */
            break;

        case eWaitingARPResolution:

            if( pxARPWaitingNetworkBuffer == NULL )
 8009a92:	4b0c      	ldr	r3, [pc, #48]	@ (8009ac4 <prvProcessEthernetPacket+0xe0>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d107      	bne.n	8009aaa <prvProcessEthernetPacket+0xc6>
            {
                pxARPWaitingNetworkBuffer = pxNetworkBuffer;
 8009a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8009ac4 <prvProcessEthernetPacket+0xe0>)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6013      	str	r3, [r2, #0]
                vIPTimerStartARPResolution( ipARP_RESOLUTION_MAX_DELAY );
 8009aa0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8009aa4:	f000 fc06 	bl	800a2b4 <vIPTimerStartARPResolution>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );

                iptraceDELAYED_ARP_BUFFER_FULL();
            }

            break;
 8009aa8:	e008      	b.n	8009abc <prvProcessEthernetPacket+0xd8>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f00d fca4 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009ab0:	e004      	b.n	8009abc <prvProcessEthernetPacket+0xd8>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f00d fca0 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009ab8:	e000      	b.n	8009abc <prvProcessEthernetPacket+0xd8>
            break;
 8009aba:	bf00      	nop
    }
}
 8009abc:	bf00      	nop
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	20001118 	.word	0x20001118

08009ac8 <prvProcessUDPPacket>:
 * @return eReleaseBuffer ( please release the buffer ).
 *         eFrameConsumed ( the buffer has now been released ).
 */

static eFrameProcessingResult_t prvProcessUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009ac8:	b5b0      	push	{r4, r5, r7, lr}
 8009aca:	b08c      	sub	sp, #48	@ 0x30
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BaseType_t xIsWaitingARPResolution = pdFALSE;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60bb      	str	r3, [r7, #8]
    /* The IP packet contained a UDP frame. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const UDPPacket_t * pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ade:	627b      	str	r3, [r7, #36]	@ 0x24
    const UDPHeader_t * pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae2:	3322      	adds	r3, #34	@ 0x22
 8009ae4:	62bb      	str	r3, [r7, #40]	@ 0x28

    size_t uxMinSize = ipSIZE_OF_ETH_HEADER + ( size_t ) uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fa76 	bl	8009fd8 <uxIPHeaderSizePacket>
 8009aec:	4603      	mov	r3, r0
 8009aee:	3316      	adds	r3, #22
 8009af0:	623b      	str	r3, [r7, #32]
    size_t uxLength;
    uint16_t usLength;

    #if ( ipconfigUSE_IPv6 != 0 )
        if( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv6_FRAME_TYPE )
 8009af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af4:	899b      	ldrh	r3, [r3, #12]
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d105      	bne.n	8009b0c <prvProcessUDPPacket+0x44>
            const ProtocolHeaders_t * pxProtocolHeaders;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] ) );
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b04:	3336      	adds	r3, #54	@ 0x36
 8009b06:	61fb      	str	r3, [r7, #28]
            pxUDPHeader = &( pxProtocolHeaders->xUDPHeader );
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    usLength = FreeRTOS_ntohs( pxUDPHeader->usLength );
 8009b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0e:	889b      	ldrh	r3, [r3, #4]
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	021b      	lsls	r3, r3, #8
 8009b14:	b21a      	sxth	r2, r3
 8009b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b18:	889b      	ldrh	r3, [r3, #4]
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	0a1b      	lsrs	r3, r3, #8
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	b21b      	sxth	r3, r3
 8009b22:	4313      	orrs	r3, r2
 8009b24:	b21b      	sxth	r3, r3
 8009b26:	837b      	strh	r3, [r7, #26]
    uxLength = ( size_t ) usLength;
 8009b28:	8b7b      	ldrh	r3, [r7, #26]
 8009b2a:	617b      	str	r3, [r7, #20]

    /* Note the header values required prior to the checksum
     * generation as the checksum pseudo header may clobber some of
     * these values. */
    #if ( ipconfigUSE_IPv4 != 0 )
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2e:	899b      	ldrh	r3, [r3, #12]
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	2b08      	cmp	r3, #8
 8009b34:	d11a      	bne.n	8009b6c <prvProcessUDPPacket+0xa4>
            ( usLength > ( FreeRTOS_ntohs( pxUDPPacket->xIPHeader.usLength ) - uxIPHeaderSizePacket( pxNetworkBuffer ) ) ) )
 8009b36:	8b7c      	ldrh	r4, [r7, #26]
 8009b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3a:	8a1b      	ldrh	r3, [r3, #16]
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	021b      	lsls	r3, r3, #8
 8009b40:	b21a      	sxth	r2, r3
 8009b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b44:	8a1b      	ldrh	r3, [r3, #16]
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	0a1b      	lsrs	r3, r3, #8
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	b21b      	sxth	r3, r3
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	b21b      	sxth	r3, r3
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	461d      	mov	r5, r3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fa3e 	bl	8009fd8 <uxIPHeaderSizePacket>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	1aeb      	subs	r3, r5, r3
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8009b60:	429c      	cmp	r4, r3
 8009b62:	d903      	bls.n	8009b6c <prvProcessUDPPacket+0xa4>
        {
            eReturn = eReleaseBuffer;
 8009b64:	2300      	movs	r3, #0
 8009b66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009b6a:	e038      	b.n	8009bde <prvProcessUDPPacket+0x116>
        }
        else
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    if( ( pxNetworkBuffer->xDataLength >= uxMinSize ) &&
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b70:	6a3a      	ldr	r2, [r7, #32]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d833      	bhi.n	8009bde <prvProcessUDPPacket+0x116>
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2b07      	cmp	r3, #7
 8009b7a:	d930      	bls.n	8009bde <prvProcessUDPPacket+0x116>
         * size of the UDP header.
         *
         * The size of the UDP packet structure in this implementation
         * includes the size of the Ethernet header, the size of
         * the IP header, and the size of the UDP header. */
        uxPayloadSize_1 = pxNetworkBuffer->xDataLength - uxMinSize;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	613b      	str	r3, [r7, #16]
        uxPayloadSize_2 = uxLength - ipSIZE_OF_UDP_HEADER;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	3b08      	subs	r3, #8
 8009b8a:	60fb      	str	r3, [r7, #12]

        if( uxPayloadSize_1 > uxPayloadSize_2 )
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d904      	bls.n	8009b9e <prvProcessUDPPacket+0xd6>
        {
            pxNetworkBuffer->xDataLength = uxPayloadSize_2 + uxMinSize;
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	441a      	add	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pxNetworkBuffer->usPort = pxUDPHeader->usSourcePort;
 8009b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba0:	881b      	ldrh	r3, [r3, #0]
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009baa:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	615a      	str	r2, [r3, #20]
         * by the NIC driver. */

        /* Pass the packet payload to the UDP sockets
         * implementation. */
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
                                       pxUDPHeader->usDestinationPort,
 8009bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb4:	885b      	ldrh	r3, [r3, #2]
 8009bb6:	b29b      	uxth	r3, r3
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8009bb8:	f107 0208 	add.w	r2, r7, #8
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f00c fe2a 	bl	8016818 <xProcessReceivedUDPPacket>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d103      	bne.n	8009bd2 <prvProcessUDPPacket+0x10a>
                                       &( xIsWaitingARPResolution ) ) == pdPASS )
        {
            eReturn = eFrameConsumed;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009bd0:	e005      	b.n	8009bde <prvProcessUDPPacket+0x116>
        }
        else
        {
            /* Is this packet to be set aside for ARP resolution. */
            if( xIsWaitingARPResolution == pdTRUE )
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d102      	bne.n	8009bde <prvProcessUDPPacket+0x116>
            {
                eReturn = eWaitingARPResolution;
 8009bd8:	2304      	movs	r3, #4
 8009bda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        /* Length checks failed, the buffer will be released. */
    }

    return eReturn;
 8009bde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3730      	adds	r7, #48	@ 0x30
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009bec <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b088      	sub	sp, #32
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    UBaseType_t uxHeaderLength = ipSIZE_OF_IPv4_HEADER;
 8009bf6:	2314      	movs	r3, #20
 8009bf8:	61bb      	str	r3, [r7, #24]
    uint8_t ucProtocol = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigUSE_IPv6 != 0 )
        const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	613b      	str	r3, [r7, #16]
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    #if ( ipconfigUSE_IPv4 != 0 )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	330e      	adds	r3, #14
 8009c06:	60fb      	str	r3, [r7, #12]
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    switch( pxIPPacket->xEthernetHeader.usFrameType )
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	899b      	ldrh	r3, [r3, #12]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	2b08      	cmp	r3, #8
 8009c10:	d023      	beq.n	8009c5a <prvProcessIPPacket+0x6e>
 8009c12:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d144      	bne.n	8009ca4 <prvProcessIPPacket+0xb8>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case ipIPv6_FRAME_TYPE:

                if( pxNetworkBuffer->xDataLength < sizeof( IPPacket_IPv6_t ) )
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c1e:	2b35      	cmp	r3, #53	@ 0x35
 8009c20:	d802      	bhi.n	8009c28 <prvProcessIPPacket+0x3c>
                {
                    /* The packet size is less than minimum IPv6 packet. */
                    eReturn = eReleaseBuffer;
 8009c22:	2300      	movs	r3, #0
 8009c24:	77fb      	strb	r3, [r7, #31]
                    /* The IP-header type is copied to a special reserved location a few bytes before the message
                     * starts. In the case of IPv6, this value is never actually used and the line below can safely be removed
                     * with no ill effects. We only store it to help with debugging. */
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
                }
                break;
 8009c26:	e043      	b.n	8009cb0 <prvProcessIPPacket+0xc4>
                    pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c2c:	330e      	adds	r3, #14
 8009c2e:	613b      	str	r3, [r7, #16]
                    uxHeaderLength = ipSIZE_OF_IPv6_HEADER;
 8009c30:	2328      	movs	r3, #40	@ 0x28
 8009c32:	61bb      	str	r3, [r7, #24]
                    ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	799b      	ldrb	r3, [r3, #6]
 8009c38:	75fb      	strb	r3, [r7, #23]
                    eReturn = prvAllowIPPacketIPv6( ( ( const IPHeader_IPv6_t * ) &( pxIPPacket->xIPHeader ) ), pxNetworkBuffer, uxHeaderLength );
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	330e      	adds	r3, #14
 8009c3e:	69ba      	ldr	r2, [r7, #24]
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f001 fb6c 	bl	800b320 <prvAllowIPPacketIPv6>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	77fb      	strb	r3, [r7, #31]
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c50:	3b06      	subs	r3, #6
 8009c52:	693a      	ldr	r2, [r7, #16]
 8009c54:	7812      	ldrb	r2, [r2, #0]
 8009c56:	701a      	strb	r2, [r3, #0]
                break;
 8009c58:	e02a      	b.n	8009cb0 <prvProcessIPPacket+0xc4>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
               {
                   size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	60bb      	str	r3, [r7, #8]

                   /* Check if the IP headers are acceptable and if it has our destination.
                    * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
                    * length in multiples of 4. */
                   uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8009c68:	61bb      	str	r3, [r7, #24]

                   if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c6e:	3b0e      	subs	r3, #14
 8009c70:	69ba      	ldr	r2, [r7, #24]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d802      	bhi.n	8009c7c <prvProcessIPPacket+0x90>
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	2b13      	cmp	r3, #19
 8009c7a:	d802      	bhi.n	8009c82 <prvProcessIPPacket+0x96>
                       ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
                   {
                       eReturn = eReleaseBuffer;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	77fb      	strb	r3, [r7, #31]
                            * buffer is being used. */
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
                       }
                   }

                   break;
 8009c80:	e016      	b.n	8009cb0 <prvProcessIPPacket+0xc4>
                       ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	7ddb      	ldrb	r3, [r3, #23]
 8009c86:	75fb      	strb	r3, [r7, #23]
                       eReturn = prvAllowIPPacketIPv4( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 8009c88:	69ba      	ldr	r2, [r7, #24]
 8009c8a:	6839      	ldr	r1, [r7, #0]
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f001 f81b 	bl	800acc8 <prvAllowIPPacketIPv4>
 8009c92:	4603      	mov	r3, r0
 8009c94:	77fb      	strb	r3, [r7, #31]
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c9a:	3b06      	subs	r3, #6
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	7812      	ldrb	r2, [r2, #0]
 8009ca0:	701a      	strb	r2, [r3, #0]
                   break;
 8009ca2:	e005      	b.n	8009cb0 <prvProcessIPPacket+0xc4>
               }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            eReturn = eReleaseBuffer;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	77fb      	strb	r3, [r7, #31]
            FreeRTOS_debug_printf( ( "prvProcessIPPacket: Undefined Frame Type \n" ) );
 8009ca8:	484a      	ldr	r0, [pc, #296]	@ (8009dd4 <prvProcessIPPacket+0x1e8>)
 8009caa:	f018 fa4d 	bl	8022148 <lUDPLoggingPrintf>
            /* MISRA 16.4 Compliance */
            break;
 8009cae:	bf00      	nop

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    /* coverity[cond_const] */
    if( eReturn == eProcessBuffer )
 8009cb0:	7ffb      	ldrb	r3, [r7, #31]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	f040 8088 	bne.w	8009dc8 <prvProcessIPPacket+0x1dc>
    {
        /* Are there IP-options. */
        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
        switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	899b      	ldrh	r3, [r3, #12]
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	2b08      	cmp	r3, #8
 8009cc0:	d004      	beq.n	8009ccc <prvProcessIPPacket+0xe0>
 8009cc2:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d009      	beq.n	8009cde <prvProcessIPPacket+0xf2>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 8009cca:	e020      	b.n	8009d0e <prvProcessIPPacket+0x122>
                    if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	2b14      	cmp	r3, #20
 8009cd0:	d91a      	bls.n	8009d08 <prvProcessIPPacket+0x11c>
                        eReturn = prvCheckIP4HeaderOptions( pxNetworkBuffer );
 8009cd2:	6838      	ldr	r0, [r7, #0]
 8009cd4:	f001 f852 	bl	800ad7c <prvCheckIP4HeaderOptions>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	77fb      	strb	r3, [r7, #31]
                    break;
 8009cdc:	e014      	b.n	8009d08 <prvProcessIPPacket+0x11c>
                    if( xGetExtensionOrder( ucProtocol, 0U ) > 0 )
 8009cde:	7dfb      	ldrb	r3, [r7, #23]
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f001 fb3a 	bl	800b35c <xGetExtensionOrder>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	dd0e      	ble.n	8009d0c <prvProcessIPPacket+0x120>
                        eReturn = eHandleIPv6ExtensionHeaders( pxNetworkBuffer, pdTRUE );
 8009cee:	2101      	movs	r1, #1
 8009cf0:	6838      	ldr	r0, [r7, #0]
 8009cf2:	f001 fb99 	bl	800b428 <eHandleIPv6ExtensionHeaders>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	77fb      	strb	r3, [r7, #31]
                        if( eReturn != eReleaseBuffer )
 8009cfa:	7ffb      	ldrb	r3, [r7, #31]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d005      	beq.n	8009d0c <prvProcessIPPacket+0x120>
                            ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	799b      	ldrb	r3, [r3, #6]
 8009d04:	75fb      	strb	r3, [r7, #23]
                    break;
 8009d06:	e001      	b.n	8009d0c <prvProcessIPPacket+0x120>
                    break;
 8009d08:	bf00      	nop
 8009d0a:	e000      	b.n	8009d0e <prvProcessIPPacket+0x122>
                    break;
 8009d0c:	bf00      	nop

        /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
        /* coverity[misra_c_2012_rule_14_3_violation] */
        /* coverity[const] */
        if( eReturn != eReleaseBuffer )
 8009d0e:	7ffb      	ldrb	r3, [r7, #31]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d059      	beq.n	8009dc8 <prvProcessIPPacket+0x1dc>
        {
            /* Add the IP and MAC addresses to the ARP table if they are not
             * already there - otherwise refresh the age of the existing
             * entry. */
            if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	2b11      	cmp	r3, #17
 8009d18:	d026      	beq.n	8009d68 <prvProcessIPPacket+0x17c>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8009d1a:	6838      	ldr	r0, [r7, #0]
 8009d1c:	f7fd f918 	bl	8006f50 <xCheckRequiresARPResolution>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d102      	bne.n	8009d2c <prvProcessIPPacket+0x140>
                {
                    eReturn = eWaitingARPResolution;
 8009d26:	2304      	movs	r3, #4
 8009d28:	77fb      	strb	r3, [r7, #31]
 8009d2a:	e01d      	b.n	8009d68 <prvProcessIPPacket+0x17c>
                     * packet.  For UDP packets, this will be done later in
                     * xProcessReceivedUDPPacket(), as soon as it's know that the message
                     * will be handled.  This will prevent the ARP cache getting
                     * overwritten with the IP address of useless broadcast packets. */
                    /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                    switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	899b      	ldrh	r3, [r3, #12]
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	2b08      	cmp	r3, #8
 8009d34:	d00e      	beq.n	8009d54 <prvProcessIPPacket+0x168>
 8009d36:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d113      	bne.n	8009d66 <prvProcessIPPacket+0x17a>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            case ipIPv6_FRAME_TYPE:
                                vNDRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), &( pxIPHeader_IPv6->xSourceAddress ), pxNetworkBuffer->pxEndPoint );
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	1d98      	adds	r0, r3, #6
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	f103 0108 	add.w	r1, r3, #8
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	f002 f843 	bl	800bdd8 <vNDRefreshCacheEntry>
                                break;
 8009d52:	e009      	b.n	8009d68 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        #if ( ipconfigUSE_IPv4 != 0 )
                            case ipIPv4_FRAME_TYPE:
                                /* Refresh the age of this cache entry since a packet was received. */
                                vARPRefreshCacheEntryAge( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	1d9a      	adds	r2, r3, #6
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4610      	mov	r0, r2
 8009d60:	f7fd f9d6 	bl	8007110 <vARPRefreshCacheEntryAge>
                                break;
 8009d64:	e000      	b.n	8009d68 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                        default:   /* LCOV_EXCL_LINE */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 8009d66:	bf00      	nop
                    }
                }
            }

            if( eReturn != eWaitingARPResolution )
 8009d68:	7ffb      	ldrb	r3, [r7, #31]
 8009d6a:	2b04      	cmp	r3, #4
 8009d6c:	d02c      	beq.n	8009dc8 <prvProcessIPPacket+0x1dc>
            {
                switch( ucProtocol )
 8009d6e:	7dfb      	ldrb	r3, [r7, #23]
 8009d70:	2b3a      	cmp	r3, #58	@ 0x3a
 8009d72:	d010      	beq.n	8009d96 <prvProcessIPPacket+0x1aa>
 8009d74:	2b3a      	cmp	r3, #58	@ 0x3a
 8009d76:	dc23      	bgt.n	8009dc0 <prvProcessIPPacket+0x1d4>
 8009d78:	2b11      	cmp	r3, #17
 8009d7a:	d012      	beq.n	8009da2 <prvProcessIPPacket+0x1b6>
 8009d7c:	2b11      	cmp	r3, #17
 8009d7e:	dc1f      	bgt.n	8009dc0 <prvProcessIPPacket+0x1d4>
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d002      	beq.n	8009d8a <prvProcessIPPacket+0x19e>
 8009d84:	2b06      	cmp	r3, #6
 8009d86:	d012      	beq.n	8009dae <prvProcessIPPacket+0x1c2>
 8009d88:	e01a      	b.n	8009dc0 <prvProcessIPPacket+0x1d4>
                             * also be returned, and the source of the ping will know something
                             * went wrong because it will not be able to validate what it
                             * receives. */
                            #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                            {
                                eReturn = ProcessICMPPacket( pxNetworkBuffer );
 8009d8a:	6838      	ldr	r0, [r7, #0]
 8009d8c:	f7ff f9fe 	bl	800918c <ProcessICMPPacket>
 8009d90:	4603      	mov	r3, r0
 8009d92:	77fb      	strb	r3, [r7, #31]
                            }
                            #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
                            break;
 8009d94:	e018      	b.n	8009dc8 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ipPROTOCOL_ICMP_IPv6:
                            eReturn = prvProcessICMPMessage_IPv6( pxNetworkBuffer );
 8009d96:	6838      	ldr	r0, [r7, #0]
 8009d98:	f002 fb6e 	bl	800c478 <prvProcessICMPMessage_IPv6>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	77fb      	strb	r3, [r7, #31]
                            break;
 8009da0:	e012      	b.n	8009dc8 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ipPROTOCOL_UDP:
                        /* The IP packet contained a UDP frame. */

                        eReturn = prvProcessUDPPacket( pxNetworkBuffer );
 8009da2:	6838      	ldr	r0, [r7, #0]
 8009da4:	f7ff fe90 	bl	8009ac8 <prvProcessUDPPacket>
 8009da8:	4603      	mov	r3, r0
 8009daa:	77fb      	strb	r3, [r7, #31]
                        break;
 8009dac:	e00c      	b.n	8009dc8 <prvProcessIPPacket+0x1dc>

                        #if ipconfigUSE_TCP == 1
                            case ipPROTOCOL_TCP:

                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 8009dae:	6838      	ldr	r0, [r7, #0]
 8009db0:	f007 fda0 	bl	80118f4 <xProcessReceivedTCPPacket>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d105      	bne.n	8009dc6 <prvProcessIPPacket+0x1da>
                                {
                                    eReturn = eFrameConsumed;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	77fb      	strb	r3, [r7, #31]
                                }
                                break;
 8009dbe:	e002      	b.n	8009dc6 <prvProcessIPPacket+0x1da>
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        eReturn = eReleaseBuffer;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	77fb      	strb	r3, [r7, #31]
                        break;
 8009dc4:	e000      	b.n	8009dc8 <prvProcessIPPacket+0x1dc>
                                break;
 8009dc6:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 8009dc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3720      	adds	r7, #32
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	08024bfc 	.word	0x08024bfc

08009dd8 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b08e      	sub	sp, #56	@ 0x38
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
    {
        if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de6:	2b3b      	cmp	r3, #59	@ 0x3b
 8009de8:	d818      	bhi.n	8009e1c <vReturnEthernetFrame+0x44>
        {
            BaseType_t xIndex;

            FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dee:	4619      	mov	r1, r3
 8009df0:	486a      	ldr	r0, [pc, #424]	@ (8009f9c <vReturnEthernetFrame+0x1c4>)
 8009df2:	f018 f9a9 	bl	8022148 <lUDPLoggingPrintf>

            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dfc:	e008      	b.n	8009e10 <vReturnEthernetFrame+0x38>
            {
                pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e04:	4413      	add	r3, r2
 8009e06:	2200      	movs	r2, #0
 8009e08:	701a      	strb	r2, [r3, #0]
            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e12:	2b3b      	cmp	r3, #59	@ 0x3b
 8009e14:	ddf3      	ble.n	8009dfe <vReturnEthernetFrame+0x26>
            }

            pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	223c      	movs	r2, #60	@ 0x3c
 8009e1a:	629a      	str	r2, [r3, #40]	@ 0x28
        }
    }
    #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d111      	bne.n	8009e46 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e26:	4619      	mov	r1, r3
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 fb87 	bl	800a53c <pxDuplicateNetworkBufferWithDescriptor>
 8009e2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( pxNewBuffer != NULL )
 8009e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d005      	beq.n	8009e42 <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 8009e36:	2301      	movs	r3, #1
 8009e38:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e40:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            pxNetworkBuffer = pxNewBuffer;
 8009e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e44:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 80a3 	beq.w	8009f94 <vReturnEthernetFrame+0x1bc>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPPacket_t * pxIPPacket = ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e52:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource = NULL;
 8009e54:	2300      	movs	r3, #0
 8009e56:	633b      	str	r3, [r7, #48]	@ 0x30
        void * pvCopyDest;

        #if ( ipconfigUSE_IPv4 != 0 )
            MACAddress_t xMACAddress;
            eARPLookupResult_t eResult;
            uint32_t ulDestinationIPAddress = 0U;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	613b      	str	r3, [r7, #16]
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        /* Send! */
        if( pxNetworkBuffer->pxEndPoint == NULL )
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d12f      	bne.n	8009ec4 <vReturnEthernetFrame+0xec>
        {
            /* _HT_ I wonder if this ad-hoc search of an end-point it necessary. */
            FreeRTOS_printf( ( "vReturnEthernetFrame: No pxEndPoint yet for %x ip?\n", ( unsigned int ) FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ) ) );
 8009e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e66:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009e6a:	061a      	lsls	r2, r3, #24
 8009e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e6e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009e72:	021b      	lsls	r3, r3, #8
 8009e74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009e78:	431a      	orrs	r2, r3
 8009e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7c:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009e80:	0a1b      	lsrs	r3, r3, #8
 8009e82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009e86:	431a      	orrs	r2, r3
 8009e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e8a:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009e8e:	0e1b      	lsrs	r3, r3, #24
 8009e90:	4313      	orrs	r3, r2
 8009e92:	4619      	mov	r1, r3
 8009e94:	4842      	ldr	r0, [pc, #264]	@ (8009fa0 <vReturnEthernetFrame+0x1c8>)
 8009e96:	f018 f957 	bl	8022148 <lUDPLoggingPrintf>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            switch( ( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer ) )->usFrameType )
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e9e:	899b      	ldrh	r3, [r3, #12]
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	2b08      	cmp	r3, #8
 8009ea4:	d003      	beq.n	8009eae <vReturnEthernetFrame+0xd6>
 8009ea6:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009eaa:	4293      	cmp	r3, r2
                        break;
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8009eac:	e00a      	b.n	8009ec4 <vReturnEthernetFrame+0xec>
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPPacket->xIPHeader.ulDestinationIPAddress, 7 );
 8009eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb0:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009eb4:	2107      	movs	r1, #7
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f003 fcfe 	bl	800d8b8 <FreeRTOS_FindEndPointOnNetMask>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	631a      	str	r2, [r3, #48]	@ 0x30
                        break;
 8009ec2:	bf00      	nop
            }
        }

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d063      	beq.n	8009f94 <vReturnEthernetFrame+0x1bc>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface; /*_RB_ Why not use the pxNetworkBuffer->pxNetworkInterface directly? */
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ed0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8009ed4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Interpret the Ethernet packet being sent. */
            switch( pxIPPacket->xEthernetHeader.usFrameType )
 8009ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed8:	899b      	ldrh	r3, [r3, #12]
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	2b08      	cmp	r3, #8
 8009ede:	d11c      	bne.n	8009f1a <vReturnEthernetFrame+0x142>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        ulDestinationIPAddress = pxIPPacket->xIPHeader.ulDestinationIPAddress;
 8009ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee2:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009ee6:	613b      	str	r3, [r7, #16]

                        /* Try to find a MAC address corresponding to the destination IP
                         * address. */
                        eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009eee:	f107 0114 	add.w	r1, r7, #20
 8009ef2:	f107 0310 	add.w	r3, r7, #16
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fd fa54 	bl	80073a4 <eARPGetCacheEntry>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                        if( eResult == eARPCacheHit )
 8009f02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d103      	bne.n	8009f12 <vReturnEthernetFrame+0x13a>
                        {
                            /* Best case scenario - an address is found, use it. */
                            pvCopySource = &xMACAddress;
 8009f0a:	f107 0314 	add.w	r3, r7, #20
 8009f0e:	633b      	str	r3, [r7, #48]	@ 0x30
                        else
                        {
                            /* If an address is not found, just swap the source and destination MAC addresses. */
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
                        }
                        break;
 8009f10:	e007      	b.n	8009f22 <vReturnEthernetFrame+0x14a>
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f14:	3306      	adds	r3, #6
 8009f16:	633b      	str	r3, [r7, #48]	@ 0x30
                        break;
 8009f18:	e003      	b.n	8009f22 <vReturnEthernetFrame+0x14a>

                case ipIPv6_FRAME_TYPE:
                case ipARP_FRAME_TYPE:
                default:
                    /* In case of ARP frame, just swap the source and destination MAC addresses. */
                    pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f1c:	3306      	adds	r3, #6
 8009f1e:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 8009f20:	bf00      	nop
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xDestinationAddress );
 8009f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f24:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxIPPacket->xEthernetHeader.xDestinationAddress ) );
 8009f26:	2206      	movs	r2, #6
 8009f28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f2a:	69f8      	ldr	r0, [r7, #28]
 8009f2c:	f018 fb28 	bl	8022580 <memcpy>

            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f34:	33e8      	adds	r3, #232	@ 0xe8
 8009f36:	633b      	str	r3, [r7, #48]	@ 0x30
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3a:	3306      	adds	r3, #6
 8009f3c:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8009f3e:	2206      	movs	r2, #6
 8009f40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f42:	69f8      	ldr	r0, [r7, #28]
 8009f44:	f018 fb1c 	bl	8022580 <memcpy>

            /* Send! */
            if( xIsCallingFromIPTask() == pdTRUE )
 8009f48:	f000 fbd4 	bl	800a6f4 <xIsCallingFromIPTask>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d106      	bne.n	8009f60 <vReturnEthernetFrame+0x188>
            {
                iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 8009f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	6879      	ldr	r1, [r7, #4]
 8009f5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009f5c:	4798      	blx	r3
                /* This should never reach or the packet is gone. */
                configASSERT( pdFALSE );
            }
        }
    }
}
 8009f5e:	e019      	b.n	8009f94 <vReturnEthernetFrame+0x1bc>
            else if( xReleaseAfterSend != pdFALSE )
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d011      	beq.n	8009f8a <vReturnEthernetFrame+0x1b2>
                xSendEvent.eEventType = eNetworkTxEvent;
 8009f66:	2302      	movs	r3, #2
 8009f68:	723b      	strb	r3, [r7, #8]
                xSendEvent.pvData = pxNetworkBuffer;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	60fb      	str	r3, [r7, #12]
                if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8009f6e:	f107 0308 	add.w	r3, r7, #8
 8009f72:	f04f 31ff 	mov.w	r1, #4294967295
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7ff fc7a 	bl	8009870 <xSendEventStructToIPTask>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d108      	bne.n	8009f94 <vReturnEthernetFrame+0x1bc>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f00d fa38 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
}
 8009f88:	e004      	b.n	8009f94 <vReturnEthernetFrame+0x1bc>
                configASSERT( pdFALSE );
 8009f8a:	f640 019f 	movw	r1, #2207	@ 0x89f
 8009f8e:	4805      	ldr	r0, [pc, #20]	@ (8009fa4 <vReturnEthernetFrame+0x1cc>)
 8009f90:	f7f7 fce2 	bl	8001958 <vAssertCalled>
}
 8009f94:	bf00      	nop
 8009f96:	3738      	adds	r7, #56	@ 0x38
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	08024c28 	.word	0x08024c28
 8009fa0:	08024c4c 	.word	0x08024c4c
 8009fa4:	08024b14 	.word	0x08024b14

08009fa8 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 8009fa8:	b480      	push	{r7}
 8009faa:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 8009fac:	4b03      	ldr	r3, [pc, #12]	@ (8009fbc <xIPIsNetworkTaskReady+0x14>)
 8009fae:	681b      	ldr	r3, [r3, #0]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	2000112c 	.word	0x2000112c

08009fc0 <uxGetMinimumIPQueueSpace>:
 * @brief Get the minimum space in the IP task queue.
 *
 * @return The minimum possible space in the IP task queue.
 */
    UBaseType_t uxGetMinimumIPQueueSpace( void )
    {
 8009fc0:	b480      	push	{r7}
 8009fc2:	af00      	add	r7, sp, #0
        return uxQueueMinimumSpace;
 8009fc4:	4b03      	ldr	r3, [pc, #12]	@ (8009fd4 <uxGetMinimumIPQueueSpace+0x14>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
    }
 8009fc8:	4618      	mov	r0, r3
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	20000014 	.word	0x20000014

08009fd8 <uxIPHeaderSizePacket>:
 * @brief Get the size of the IP-header, by checking the type of the network buffer.
 * @param[in] pxNetworkBuffer The network buffer.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
    size_t uxResult;
    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe4:	60bb      	str	r3, [r7, #8]

    if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	899b      	ldrh	r3, [r3, #12]
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d102      	bne.n	8009ffa <uxIPHeaderSizePacket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8009ff4:	2328      	movs	r3, #40	@ 0x28
 8009ff6:	60fb      	str	r3, [r7, #12]
 8009ff8:	e001      	b.n	8009ffe <uxIPHeaderSizePacket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 8009ffa:	2314      	movs	r3, #20
 8009ffc:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <uxIPHeaderSizeSocket>:
 * @brief Get the size of the IP-header, by checking if the socket bIsIPv6 set.
 * @param[in] pxSocket The socket.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizeSocket( const FreeRTOS_Socket_t * pxSocket )
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
    size_t uxResult;

    if( ( pxSocket != NULL ) && ( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED ) )
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d009      	beq.n	800a02e <uxIPHeaderSizeSocket+0x22>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	7a1b      	ldrb	r3, [r3, #8]
 800a01e:	f003 0301 	and.w	r3, r3, #1
 800a022:	b2db      	uxtb	r3, r3
 800a024:	2b00      	cmp	r3, #0
 800a026:	d002      	beq.n	800a02e <uxIPHeaderSizeSocket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 800a028:	2328      	movs	r3, #40	@ 0x28
 800a02a:	60fb      	str	r3, [r7, #12]
 800a02c:	e001      	b.n	800a032 <uxIPHeaderSizeSocket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800a02e:	2314      	movs	r3, #20
 800a030:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 800a032:	68fb      	ldr	r3, [r7, #12]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <xCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
TickType_t xCalculateSleepTime( void )
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
    TickType_t uxMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    uxMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800a046:	f242 7310 	movw	r3, #10000	@ 0x2710
 800a04a:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800a04c:	4b28      	ldr	r3, [pc, #160]	@ (800a0f0 <xCalculateSleepTime+0xb0>)
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	f003 0301 	and.w	r3, r3, #1
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d007      	beq.n	800a06a <xCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < uxMaximumSleepTime )
 800a05a:	4b25      	ldr	r3, [pc, #148]	@ (800a0f0 <xCalculateSleepTime+0xb0>)
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	429a      	cmp	r2, r3
 800a062:	d902      	bls.n	800a06a <xCalculateSleepTime+0x2a>
        {
            uxMaximumSleepTime = xARPTimer.ulRemainingTime;
 800a064:	4b22      	ldr	r3, [pc, #136]	@ (800a0f0 <xCalculateSleepTime+0xb0>)
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	607b      	str	r3, [r7, #4]
        }
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800a06a:	4b22      	ldr	r3, [pc, #136]	@ (800a0f4 <xCalculateSleepTime+0xb4>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	603b      	str	r3, [r7, #0]

        while( pxEndPoint != NULL )
 800a070:	e015      	b.n	800a09e <xCalculateSleepTime+0x5e>
        {
            if( pxEndPoint->xDHCP_RATimer.bActive != pdFALSE_UNSIGNED )
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d009      	beq.n	800a096 <xCalculateSleepTime+0x56>
            {
                if( pxEndPoint->xDHCP_RATimer.ulRemainingTime < uxMaximumSleepTime )
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d903      	bls.n	800a096 <xCalculateSleepTime+0x56>
                {
                    uxMaximumSleepTime = pxEndPoint->xDHCP_RATimer.ulRemainingTime;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a094:	607b      	str	r3, [r7, #4]
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800a09c:	603b      	str	r3, [r7, #0]
        while( pxEndPoint != NULL )
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1e6      	bne.n	800a072 <xCalculateSleepTime+0x32>
    }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
    {
        if( xTCPTimer.bActive != pdFALSE_UNSIGNED )
 800a0a4:	4b14      	ldr	r3, [pc, #80]	@ (800a0f8 <xCalculateSleepTime+0xb8>)
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	f003 0301 	and.w	r3, r3, #1
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d007      	beq.n	800a0c2 <xCalculateSleepTime+0x82>
        {
            if( xTCPTimer.ulRemainingTime < uxMaximumSleepTime )
 800a0b2:	4b11      	ldr	r3, [pc, #68]	@ (800a0f8 <xCalculateSleepTime+0xb8>)
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d902      	bls.n	800a0c2 <xCalculateSleepTime+0x82>
            {
                uxMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800a0bc:	4b0e      	ldr	r3, [pc, #56]	@ (800a0f8 <xCalculateSleepTime+0xb8>)
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	607b      	str	r3, [r7, #4]
    }
    #endif

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 800a0c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a0fc <xCalculateSleepTime+0xbc>)
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	f003 0301 	and.w	r3, r3, #1
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d007      	beq.n	800a0e0 <xCalculateSleepTime+0xa0>
        {
            if( xDNSTimer.ulRemainingTime < uxMaximumSleepTime )
 800a0d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a0fc <xCalculateSleepTime+0xbc>)
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d902      	bls.n	800a0e0 <xCalculateSleepTime+0xa0>
            {
                uxMaximumSleepTime = xDNSTimer.ulRemainingTime;
 800a0da:	4b08      	ldr	r3, [pc, #32]	@ (800a0fc <xCalculateSleepTime+0xbc>)
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif

    return uxMaximumSleepTime;
 800a0e0:	687b      	ldr	r3, [r7, #4]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	20001148 	.word	0x20001148
 800a0f4:	200014a4 	.word	0x200014a4
 800a0f8:	2000115c 	.word	0x2000115c
 800a0fc:	20001170 	.word	0x20001170

0800a100 <vCheckNetworkTimers>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void vCheckNetworkTimers( void )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800a106:	484f      	ldr	r0, [pc, #316]	@ (800a244 <vCheckNetworkTimers+0x144>)
 800a108:	f000 f932 	bl	800a370 <prvIPTimerCheck>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d002      	beq.n	800a118 <vCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 800a112:	2003      	movs	r0, #3
 800a114:	f7ff fb96 	bl	8009844 <xSendEventToIPTask>
    }

    /* Is the ARP resolution timer expired? */
    if( prvIPTimerCheck( &xARPResolutionTimer ) != pdFALSE )
 800a118:	484b      	ldr	r0, [pc, #300]	@ (800a248 <vCheckNetworkTimers+0x148>)
 800a11a:	f000 f929 	bl	800a370 <prvIPTimerCheck>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00e      	beq.n	800a142 <vCheckNetworkTimers+0x42>
    {
        if( pxARPWaitingNetworkBuffer != NULL )
 800a124:	4b49      	ldr	r3, [pc, #292]	@ (800a24c <vCheckNetworkTimers+0x14c>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00a      	beq.n	800a142 <vCheckNetworkTimers+0x42>
        {
            /* Disable the ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800a12c:	2000      	movs	r0, #0
 800a12e:	f000 f995 	bl	800a45c <vIPSetARPResolutionTimerEnableState>

            /* We have waited long enough for the ARP response. Now, free the network
             * buffer. */
            vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800a132:	4b46      	ldr	r3, [pc, #280]	@ (800a24c <vCheckNetworkTimers+0x14c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4618      	mov	r0, r3
 800a138:	f00d f95e 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>

            /* Clear the pointer. */
            pxARPWaitingNetworkBuffer = NULL;
 800a13c:	4b43      	ldr	r3, [pc, #268]	@ (800a24c <vCheckNetworkTimers+0x14c>)
 800a13e:	2200      	movs	r2, #0
 800a140:	601a      	str	r2, [r3, #0]
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        /* Is it time for DHCP processing? */
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800a142:	4b43      	ldr	r3, [pc, #268]	@ (800a250 <vCheckNetworkTimers+0x150>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	613b      	str	r3, [r7, #16]

        while( pxEndPoint != NULL )
 800a148:	e01f      	b.n	800a18a <vCheckNetworkTimers+0x8a>
        {
            if( prvIPTimerCheck( &( pxEndPoint->xDHCP_RATimer ) ) != pdFALSE )
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	33f8      	adds	r3, #248	@ 0xf8
 800a14e:	4618      	mov	r0, r3
 800a150:	f000 f90e 	bl	800a370 <prvIPTimerCheck>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d013      	beq.n	800a182 <vCheckNetworkTimers+0x82>
                        ( void ) xSendDHCPEvent( pxEndPoint );
                    }
                #endif /* ( ipconfigUSE_DHCP == 1 ) */

                #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                    if( END_POINT_USES_RA( pxEndPoint ) )
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a160:	f003 0304 	and.w	r3, r3, #4
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00b      	beq.n	800a182 <vCheckNetworkTimers+0x82>
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a170:	f003 0302 	and.w	r3, r3, #2
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b00      	cmp	r3, #0
 800a178:	d003      	beq.n	800a182 <vCheckNetworkTimers+0x82>
                    {
                        vRAProcess( pdFALSE, pxEndPoint );
 800a17a:	6939      	ldr	r1, [r7, #16]
 800a17c:	2000      	movs	r0, #0
 800a17e:	f003 f8f7 	bl	800d370 <vRAProcess>
                    }
                #endif /* ( ipconfigUSE_RA != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800a188:	613b      	str	r3, [r7, #16]
        while( pxEndPoint != NULL )
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1dc      	bne.n	800a14a <vCheckNetworkTimers+0x4a>
    #endif /* ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA != 0 ) */

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* Is it time for DNS processing? */
        if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 800a190:	4830      	ldr	r0, [pc, #192]	@ (800a254 <vCheckNetworkTimers+0x154>)
 800a192:	f000 f8ed 	bl	800a370 <prvIPTimerCheck>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d002      	beq.n	800a1a2 <vCheckNetworkTimers+0xa2>
        {
            vDNSCheckCallBack( NULL );
 800a19c:	2000      	movs	r0, #0
 800a19e:	f7fd fff9 	bl	8008194 <vDNSCheckCallBack>
        TickType_t xNextTime;
        BaseType_t xCheckTCPSockets;

        /* If the IP task has messages waiting to be processed then
         * it will not sleep in any case. */
        if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 800a1a2:	4b2d      	ldr	r3, [pc, #180]	@ (800a258 <vCheckNetworkTimers+0x158>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7f9 fe40 	bl	8003e2c <uxQueueMessagesWaiting>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d102      	bne.n	800a1b8 <vCheckNetworkTimers+0xb8>
        {
            xWillSleep = pdTRUE;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	60fb      	str	r3, [r7, #12]
 800a1b6:	e001      	b.n	800a1bc <vCheckNetworkTimers+0xbc>
        }
        else
        {
            xWillSleep = pdFALSE;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	60fb      	str	r3, [r7, #12]
        }

        /* Sockets need to be checked if the TCP timer has expired. */
        xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800a1bc:	4827      	ldr	r0, [pc, #156]	@ (800a25c <vCheckNetworkTimers+0x15c>)
 800a1be:	f000 f8d7 	bl	800a370 <prvIPTimerCheck>
 800a1c2:	60b8      	str	r0, [r7, #8]

        /* Sockets will also be checked if there are TCP messages but the
        * message queue is empty (indicated by xWillSleep being true). */
        if( xWillSleep != pdFALSE )
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d001      	beq.n	800a1ce <vCheckNetworkTimers+0xce>
        {
            xCheckTCPSockets = pdTRUE;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	60bb      	str	r3, [r7, #8]
        }

        if( xCheckTCPSockets != pdFALSE )
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d007      	beq.n	800a1e4 <vCheckNetworkTimers+0xe4>
        {
            /* Attend to the sockets, returning the period after which the
             * check must be repeated. */
            xNextTime = xTCPTimerCheck( xWillSleep );
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f005 ff3f 	bl	8010058 <xTCPTimerCheck>
 800a1da:	6038      	str	r0, [r7, #0]
            prvIPTimerStart( &xTCPTimer, xNextTime );
 800a1dc:	6839      	ldr	r1, [r7, #0]
 800a1de:	481f      	ldr	r0, [pc, #124]	@ (800a25c <vCheckNetworkTimers+0x15c>)
 800a1e0:	f000 f844 	bl	800a26c <prvIPTimerStart>
        }
    }

    /* See if any socket was planned to be closed. */
    vSocketCloseNextTime( NULL );
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	f006 fe6f 	bl	8010ec8 <vSocketCloseNextTime>

    /* See if any reusable socket needs to go back to 'eTCP_LISTEN' state. */
    vSocketListenNextTime( NULL );
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	f006 fe88 	bl	8010f00 <vSocketListenNextTime>
    #endif /* ipconfigUSE_TCP == 1 */

    /* Is it time to trigger the repeated NetworkDown events? */
    if( xAllNetworksUp == pdFALSE )
 800a1f0:	4b1b      	ldr	r3, [pc, #108]	@ (800a260 <vCheckNetworkTimers+0x160>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d120      	bne.n	800a23a <vCheckNetworkTimers+0x13a>
    {
        if( prvIPTimerCheck( &( xNetworkTimer ) ) != pdFALSE )
 800a1f8:	481a      	ldr	r0, [pc, #104]	@ (800a264 <vCheckNetworkTimers+0x164>)
 800a1fa:	f000 f8b9 	bl	800a370 <prvIPTimerCheck>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d01a      	beq.n	800a23a <vCheckNetworkTimers+0x13a>
        {
            BaseType_t xUp = pdTRUE;
 800a204:	2301      	movs	r3, #1
 800a206:	607b      	str	r3, [r7, #4]

            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a208:	4b17      	ldr	r3, [pc, #92]	@ (800a268 <vCheckNetworkTimers+0x168>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	617b      	str	r3, [r7, #20]
 800a20e:	e00e      	b.n	800a22e <vCheckNetworkTimers+0x12e>
            {
                if( pxInterface->bits.bInterfaceUp == pdFALSE_UNSIGNED )
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	7f1b      	ldrb	r3, [r3, #28]
 800a214:	f003 0301 	and.w	r3, r3, #1
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d104      	bne.n	800a228 <vCheckNetworkTimers+0x128>
                {
                    xUp = pdFALSE;
 800a21e:	2300      	movs	r3, #0
 800a220:	607b      	str	r3, [r7, #4]
                    FreeRTOS_NetworkDown( pxInterface );
 800a222:	6978      	ldr	r0, [r7, #20]
 800a224:	f7ff fa30 	bl	8009688 <FreeRTOS_NetworkDown>
            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a22c:	617b      	str	r3, [r7, #20]
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1ed      	bne.n	800a210 <vCheckNetworkTimers+0x110>
                }
            }

            vSetAllNetworksUp( xUp );
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f971 	bl	800a51c <vSetAllNetworksUp>
        }
    }
}
 800a23a:	bf00      	nop
 800a23c:	3718      	adds	r7, #24
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	20001148 	.word	0x20001148
 800a248:	20001134 	.word	0x20001134
 800a24c:	20001118 	.word	0x20001118
 800a250:	200014a4 	.word	0x200014a4
 800a254:	20001170 	.word	0x20001170
 800a258:	2000111c 	.word	0x2000111c
 800a25c:	2000115c 	.word	0x2000115c
 800a260:	20001130 	.word	0x20001130
 800a264:	20001184 	.word	0x20001184
 800a268:	200014a8 	.word	0x200014a8

0800a26c <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	3304      	adds	r3, #4
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7fa febc 	bl	8004ff8 <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d105      	bne.n	800a298 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	7813      	ldrb	r3, [r2, #0]
 800a290:	f043 0302 	orr.w	r3, r3, #2
 800a294:	7013      	strb	r3, [r2, #0]
 800a296:	e004      	b.n	800a2a2 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	7813      	ldrb	r3, [r2, #0]
 800a29c:	f36f 0341 	bfc	r3, #1, #1
 800a2a0:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	7813      	ldrb	r3, [r2, #0]
 800a2a6:	f043 0301 	orr.w	r3, r3, #1
 800a2aa:	7013      	strb	r3, [r2, #0]
}
 800a2ac:	bf00      	nop
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <vIPTimerStartARPResolution>:
 * @brief Start an ARP Resolution timer.
 *
 * @param[in] xTime Time to be loaded into the ARP Resolution timer.
 */
void vIPTimerStartARPResolution( TickType_t xTime )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
    prvIPTimerStart( &( xARPResolutionTimer ), xTime );
 800a2bc:	6879      	ldr	r1, [r7, #4]
 800a2be:	4803      	ldr	r0, [pc, #12]	@ (800a2cc <vIPTimerStartARPResolution+0x18>)
 800a2c0:	f7ff ffd4 	bl	800a26c <prvIPTimerStart>
}
 800a2c4:	bf00      	nop
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	20001134 	.word	0x20001134

0800a2d0 <prvIPTimerReload>:
 * @param[in] pxTimer Pointer to the IP timer.
 * @param[in] xTime Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 800a2e0:	6839      	ldr	r1, [r7, #0]
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f7ff ffc2 	bl	800a26c <prvIPTimerStart>
}
 800a2e8:	bf00      	nop
 800a2ea:	3708      	adds	r7, #8
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <vTCPTimerReload>:
 * @brief Sets the reload time of the TCP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the TCP timer.
 */
    void vTCPTimerReload( TickType_t xTime )
    {
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xTCPTimer, xTime );
 800a2f8:	6879      	ldr	r1, [r7, #4]
 800a2fa:	4803      	ldr	r0, [pc, #12]	@ (800a308 <vTCPTimerReload+0x18>)
 800a2fc:	f7ff ffe8 	bl	800a2d0 <prvIPTimerReload>
    }
 800a300:	bf00      	nop
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	2000115c 	.word	0x2000115c

0800a30c <vARPTimerReload>:
 * @brief Sets the reload time of the ARP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the ARP timer.
 */
void vARPTimerReload( TickType_t xTime )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xARPTimer, xTime );
 800a314:	6879      	ldr	r1, [r7, #4]
 800a316:	4803      	ldr	r0, [pc, #12]	@ (800a324 <vARPTimerReload+0x18>)
 800a318:	f7ff ffda 	bl	800a2d0 <prvIPTimerReload>
}
 800a31c:	bf00      	nop
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	20001148 	.word	0x20001148

0800a328 <vDHCP_RATimerReload>:
 * @param[in] uxClockTicks The number of clock-ticks after which the timer should expire.
 */

    void vDHCP_RATimerReload( NetworkEndPoint_t * pxEndPoint,
                              TickType_t uxClockTicks )
    {
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vDHCP_RATimerReload: %lu\n", uxClockTicks ) );
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	4806      	ldr	r0, [pc, #24]	@ (800a350 <vDHCP_RATimerReload+0x28>)
 800a336:	f017 ff07 	bl	8022148 <lUDPLoggingPrintf>
        prvIPTimerReload( &( pxEndPoint->xDHCP_RATimer ), uxClockTicks );
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	33f8      	adds	r3, #248	@ 0xf8
 800a33e:	6839      	ldr	r1, [r7, #0]
 800a340:	4618      	mov	r0, r3
 800a342:	f7ff ffc5 	bl	800a2d0 <prvIPTimerReload>
    }
 800a346:	bf00      	nop
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	08024c80 	.word	0x08024c80

0800a354 <vNetworkTimerReload>:
 * @brief Reload the Network timer.
 *
 * @param[in] xTime Time to be reloaded into the Network timer.
 */
void vNetworkTimerReload( TickType_t xTime )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xNetworkTimer, xTime );
 800a35c:	6879      	ldr	r1, [r7, #4]
 800a35e:	4803      	ldr	r0, [pc, #12]	@ (800a36c <vNetworkTimerReload+0x18>)
 800a360:	f7ff ffb6 	bl	800a2d0 <prvIPTimerReload>
}
 800a364:	bf00      	nop
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	20001184 	.word	0x20001184

0800a370 <prvIPTimerCheck>:
 * @param[in] pxTimer Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	f003 0301 	and.w	r3, r3, #1
 800a380:	b2db      	uxtb	r3, r3
 800a382:	2b00      	cmp	r3, #0
 800a384:	d102      	bne.n	800a38c <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 800a386:	2300      	movs	r3, #0
 800a388:	60fb      	str	r3, [r7, #12]
 800a38a:	e028      	b.n	800a3de <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	f003 0302 	and.w	r3, r3, #2
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10f      	bne.n	800a3ba <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	1d1a      	adds	r2, r3, #4
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	330c      	adds	r3, #12
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	f7fa fe5f 	bl	8005068 <xTaskCheckForTimeOut>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d004      	beq.n	800a3ba <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	7813      	ldrb	r3, [r2, #0]
 800a3b4:	f043 0302 	orr.w	r3, r3, #2
 800a3b8:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	f003 0302 	and.w	r3, r3, #2
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d008      	beq.n	800a3da <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f7ff ff4c 	bl	800a26c <prvIPTimerStart>
            xReturn = pdTRUE;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	60fb      	str	r3, [r7, #12]
 800a3d8:	e001      	b.n	800a3de <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800a3de:	68fb      	ldr	r3, [r7, #12]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <vIPSetTCPTimerExpiredState>:
 * @brief Enable/disable the TCP timer.
 *
 * @param[in] xExpiredState pdTRUE - set as expired; pdFALSE - set as non-expired.
 */
    void vIPSetTCPTimerExpiredState( BaseType_t xExpiredState )
    {
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
        xTCPTimer.bActive = pdTRUE_UNSIGNED;
 800a3f0:	4a0c      	ldr	r2, [pc, #48]	@ (800a424 <vIPSetTCPTimerExpiredState+0x3c>)
 800a3f2:	7813      	ldrb	r3, [r2, #0]
 800a3f4:	f043 0301 	orr.w	r3, r3, #1
 800a3f8:	7013      	strb	r3, [r2, #0]

        if( xExpiredState != pdFALSE )
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d005      	beq.n	800a40c <vIPSetTCPTimerExpiredState+0x24>
        {
            xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800a400:	4a08      	ldr	r2, [pc, #32]	@ (800a424 <vIPSetTCPTimerExpiredState+0x3c>)
 800a402:	7813      	ldrb	r3, [r2, #0]
 800a404:	f043 0302 	orr.w	r3, r3, #2
 800a408:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
        }
    }
 800a40a:	e004      	b.n	800a416 <vIPSetTCPTimerExpiredState+0x2e>
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
 800a40c:	4a05      	ldr	r2, [pc, #20]	@ (800a424 <vIPSetTCPTimerExpiredState+0x3c>)
 800a40e:	7813      	ldrb	r3, [r2, #0]
 800a410:	f36f 0341 	bfc	r3, #1, #1
 800a414:	7013      	strb	r3, [r2, #0]
    }
 800a416:	bf00      	nop
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	2000115c 	.word	0x2000115c

0800a428 <vIPSetARPTimerEnableState>:
 * @brief Enable/disable the ARP timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
void vIPSetARPTimerEnableState( BaseType_t xEnableState )
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d005      	beq.n	800a442 <vIPSetARPTimerEnableState+0x1a>
    {
        xARPTimer.bActive = pdTRUE_UNSIGNED;
 800a436:	4a08      	ldr	r2, [pc, #32]	@ (800a458 <vIPSetARPTimerEnableState+0x30>)
 800a438:	7813      	ldrb	r3, [r2, #0]
 800a43a:	f043 0301 	orr.w	r3, r3, #1
 800a43e:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 800a440:	e004      	b.n	800a44c <vIPSetARPTimerEnableState+0x24>
        xARPTimer.bActive = pdFALSE_UNSIGNED;
 800a442:	4a05      	ldr	r2, [pc, #20]	@ (800a458 <vIPSetARPTimerEnableState+0x30>)
 800a444:	7813      	ldrb	r3, [r2, #0]
 800a446:	f36f 0300 	bfc	r3, #0, #1
 800a44a:	7013      	strb	r3, [r2, #0]
}
 800a44c:	bf00      	nop
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr
 800a458:	20001148 	.word	0x20001148

0800a45c <vIPSetARPResolutionTimerEnableState>:
 * @brief Enable or disable the ARP resolution timer.
 *
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
void vIPSetARPResolutionTimerEnableState( BaseType_t xEnableState )
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d005      	beq.n	800a476 <vIPSetARPResolutionTimerEnableState+0x1a>
    {
        xARPResolutionTimer.bActive = pdTRUE_UNSIGNED;
 800a46a:	4a08      	ldr	r2, [pc, #32]	@ (800a48c <vIPSetARPResolutionTimerEnableState+0x30>)
 800a46c:	7813      	ldrb	r3, [r2, #0]
 800a46e:	f043 0301 	orr.w	r3, r3, #1
 800a472:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 800a474:	e004      	b.n	800a480 <vIPSetARPResolutionTimerEnableState+0x24>
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
 800a476:	4a05      	ldr	r2, [pc, #20]	@ (800a48c <vIPSetARPResolutionTimerEnableState+0x30>)
 800a478:	7813      	ldrb	r3, [r2, #0]
 800a47a:	f36f 0300 	bfc	r3, #0, #1
 800a47e:	7013      	strb	r3, [r2, #0]
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr
 800a48c:	20001134 	.word	0x20001134

0800a490 <vIPSetDHCP_RATimerEnableState>:
 * @param[in] pxEndPoint The end-point that needs to acquire an IP-address.
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetDHCP_RATimerEnableState( NetworkEndPoint_t * pxEndPoint,
                                        BaseType_t xEnableState )
    {
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vIPSetDHCP_RATimerEnableState: %s\n", ( xEnableState != 0 ) ? "On" : "Off" ) );
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <vIPSetDHCP_RATimerEnableState+0x14>
 800a4a0:	4b0e      	ldr	r3, [pc, #56]	@ (800a4dc <vIPSetDHCP_RATimerEnableState+0x4c>)
 800a4a2:	e000      	b.n	800a4a6 <vIPSetDHCP_RATimerEnableState+0x16>
 800a4a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a4e0 <vIPSetDHCP_RATimerEnableState+0x50>)
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	480e      	ldr	r0, [pc, #56]	@ (800a4e4 <vIPSetDHCP_RATimerEnableState+0x54>)
 800a4aa:	f017 fe4d 	bl	8022148 <lUDPLoggingPrintf>

        /* 'xDHCP_RATimer' is shared between DHCP (IPv4) and RA/SLAAC (IPv6). */
        if( xEnableState != 0 )
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d007      	beq.n	800a4c4 <vIPSetDHCP_RATimerEnableState+0x34>
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdTRUE_UNSIGNED;
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800a4ba:	f043 0301 	orr.w	r3, r3, #1
 800a4be:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
        }
        else
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a4c2:	e006      	b.n	800a4d2 <vIPSetDHCP_RATimerEnableState+0x42>
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800a4ca:	f36f 0300 	bfc	r3, #0, #1
 800a4ce:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
    }
 800a4d2:	bf00      	nop
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	08024c9c 	.word	0x08024c9c
 800a4e0:	08024ca0 	.word	0x08024ca0
 800a4e4:	08024ca4 	.word	0x08024ca4

0800a4e8 <vIPSetDNSTimerEnableState>:
 * @brief Enable/disable the DNS timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDNSTimerEnableState( BaseType_t xEnableState )
    {
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
        if( xEnableState != 0 )
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d005      	beq.n	800a502 <vIPSetDNSTimerEnableState+0x1a>
        {
            xDNSTimer.bActive = pdTRUE_UNSIGNED;
 800a4f6:	4a08      	ldr	r2, [pc, #32]	@ (800a518 <vIPSetDNSTimerEnableState+0x30>)
 800a4f8:	7813      	ldrb	r3, [r2, #0]
 800a4fa:	f043 0301 	orr.w	r3, r3, #1
 800a4fe:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a500:	e004      	b.n	800a50c <vIPSetDNSTimerEnableState+0x24>
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
 800a502:	4a05      	ldr	r2, [pc, #20]	@ (800a518 <vIPSetDNSTimerEnableState+0x30>)
 800a504:	7813      	ldrb	r3, [r2, #0]
 800a506:	f36f 0300 	bfc	r3, #0, #1
 800a50a:	7013      	strb	r3, [r2, #0]
    }
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr
 800a518:	20001170 	.word	0x20001170

0800a51c <vSetAllNetworksUp>:
/**
 * @brief Mark whether all interfaces are up or at least one interface is down.
 *        If all interfaces are up, the 'xNetworkTimer' will not be checked.
 */
void vSetAllNetworksUp( BaseType_t xIsAllNetworksUp )
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
    xAllNetworksUp = xIsAllNetworksUp;
 800a524:	4a04      	ldr	r2, [pc, #16]	@ (800a538 <vSetAllNetworksUp+0x1c>)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6013      	str	r3, [r2, #0]
}
 800a52a:	bf00      	nop
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	20001130 	.word	0x20001130

0800a53c <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;
    size_t uxLengthToCopy = uxNewLength;
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	60fb      	str	r3, [r7, #12]

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 800a54a:	2100      	movs	r1, #0
 800a54c:	6838      	ldr	r0, [r7, #0]
 800a54e:	f00c feeb 	bl	8017328 <pxGetNetworkBufferWithDescriptor>
 800a552:	60b8      	str	r0, [r7, #8]

    if( pxNewBuffer != NULL )
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d03e      	beq.n	800a5d8 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
    {
        configASSERT( pxNewBuffer->pucEthernetBuffer != NULL );
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d104      	bne.n	800a56c <pxDuplicateNetworkBufferWithDescriptor+0x30>
 800a562:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800a566:	481f      	ldr	r0, [pc, #124]	@ (800a5e4 <pxDuplicateNetworkBufferWithDescriptor+0xa8>)
 800a568:	f7f7 f9f6 	bl	8001958 <vAssertCalled>

        /* Get the minimum of both values to copy the data. */
        if( uxLengthToCopy > pxNetworkBuffer->xDataLength )
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	429a      	cmp	r2, r3
 800a574:	d902      	bls.n	800a57c <pxDuplicateNetworkBufferWithDescriptor+0x40>
        {
            uxLengthToCopy = pxNetworkBuffer->xDataLength;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a57a:	60fb      	str	r3, [r7, #12]
        }

        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Copy the original packet information. */
        pxNewBuffer->xIPAddress.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	695a      	ldr	r2, [r3, #20]
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	86da      	strh	r2, [r3, #54]	@ 0x36
        pxNewBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	631a      	str	r2, [r3, #48]	@ 0x30
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, uxLengthToCopy );
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	f017 ffe3 	bl	8022580 <memcpy>

        #if ( ipconfigUSE_IPv6 != 0 )
            if( uxIPHeaderSizePacket( pxNewBuffer ) == ipSIZE_OF_IPv6_HEADER )
 800a5ba:	68b8      	ldr	r0, [r7, #8]
 800a5bc:	f7ff fd0c 	bl	8009fd8 <uxIPHeaderSizePacket>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b28      	cmp	r3, #40	@ 0x28
 800a5c4:	d108      	bne.n	800a5d8 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
            {
                ( void ) memcpy( pxNewBuffer->xIPAddress.xIP_IPv6.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	f103 0014 	add.w	r0, r3, #20
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	3314      	adds	r3, #20
 800a5d0:	2210      	movs	r2, #16
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	f017 ffd4 	bl	8022580 <memcpy>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
    }

    return pxNewBuffer;
 800a5d8:	68bb      	ldr	r3, [r7, #8]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	08024cc8 	.word	0x08024cc8

0800a5e8 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d102      	bne.n	800a5fe <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	60fb      	str	r3, [r7, #12]
 800a5fc:	e013      	b.n	800a626 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        /* Obtain the network buffer from the zero copy pointer. */

        /* MISRA Ref 11.6.2 [Pointer arithmetic and hidden pointer] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        uxBuffer = void_ptr_to_uintptr( pvBuffer );
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f816 	bl	800a630 <void_ptr_to_uintptr>
 800a604:	60b8      	str	r0, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	1ad3      	subs	r3, r2, r3
 800a60c:	3b0a      	subs	r3, #10
 800a60e:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	f003 0303 	and.w	r3, r3, #3
 800a616:	2b00      	cmp	r3, #0
 800a618:	d103      	bne.n	800a622 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        {
            /* MISRA Ref 11.4.2 [Validation of pointer alignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	60fb      	str	r3, [r7, #12]
 800a620:	e001      	b.n	800a626 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        }
        else
        {
            pxResult = NULL;
 800a622:	2300      	movs	r3, #0
 800a624:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 800a626:	68fb      	ldr	r3, [r7, #12]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <void_ptr_to_uintptr>:
 *        using a union as defined here above.
 * @param[in] pvPointer A void pointer to be converted.
 * @return The value of the void pointer as an unsigned number.
 */
static uintptr_t void_ptr_to_uintptr( const void * pvPointer )
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
    /* The type 'uintptr_t' has the same size as a pointer.
     * Therefore, it is safe to use a union to convert it. */
    union uIntPtr intPtr;

    intPtr.pvPtr = pvPointer;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	60fb      	str	r3, [r7, #12]
    return intPtr.uxPtr;
 800a63c:	68fb      	ldr	r3, [r7, #12]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3714      	adds	r7, #20
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr

0800a64a <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b082      	sub	sp, #8
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 800a652:	2100      	movs	r1, #0
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7ff ffc7 	bl	800a5e8 <prvPacketBuffer_to_NetworkBuffer>
 800a65a:	4603      	mov	r3, r0
    }
 800a65c:	4618      	mov	r0, r3
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b088      	sub	sp, #32
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d102      	bne.n	800a678 <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
    {
        pxResult = NULL;
 800a672:	2300      	movs	r3, #0
 800a674:	61fb      	str	r3, [r7, #28]
 800a676:	e033      	b.n	800a6e0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x7c>
        const uint8_t * pucIPType;
        uint8_t ucIPType;

        /* When IPv6 is supported, find out the type of the packet.
         * It is stored 48 bytes before the payload buffer as 0x40 or 0x60. */
        uxTypeOffset = void_ptr_to_uintptr( pvBuffer );
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f7ff ffd9 	bl	800a630 <void_ptr_to_uintptr>
 800a67e:	6178      	str	r0, [r7, #20]
        uxTypeOffset -= ipUDP_PAYLOAD_IP_TYPE_OFFSET;
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	3b30      	subs	r3, #48	@ 0x30
 800a684:	617b      	str	r3, [r7, #20]
        /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
        /* coverity[misra_c_2012_rule_11_4_violation] */
        pucIPType = ( const uint8_t * ) uxTypeOffset;
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	613b      	str	r3, [r7, #16]

        /* For an IPv4 packet, pucIPType points to 6 bytes before the pucEthernetBuffer,
         * for a IPv6 packet, pucIPType will point to the first byte of the IP-header: 'ucVersionTrafficClass'. */
        ucIPType = pucIPType[ 0 ] & 0xf0U;
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	f023 030f 	bic.w	r3, r3, #15
 800a692:	73fb      	strb	r3, [r7, #15]

        /* To help the translation from a UDP payload pointer to a networkBuffer,
         * a byte was stored at a certain negative offset (-48 bytes).
         * It must have a value of either 0x4x or 0x6x. */
        configASSERT( ( ucIPType == ipTYPE_IPv4 ) || ( ucIPType == ipTYPE_IPv6 ) );
 800a694:	7bfb      	ldrb	r3, [r7, #15]
 800a696:	2b40      	cmp	r3, #64	@ 0x40
 800a698:	d002      	beq.n	800a6a0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x3c>
 800a69a:	7bfb      	ldrb	r3, [r7, #15]
 800a69c:	2b60      	cmp	r3, #96	@ 0x60
 800a69e:	d101      	bne.n	800a6a4 <pxUDPPayloadBuffer_to_NetworkBuffer+0x40>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e000      	b.n	800a6a6 <pxUDPPayloadBuffer_to_NetworkBuffer+0x42>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d104      	bne.n	800a6b4 <pxUDPPayloadBuffer_to_NetworkBuffer+0x50>
 800a6aa:	f240 21f1 	movw	r1, #753	@ 0x2f1
 800a6ae:	480f      	ldr	r0, [pc, #60]	@ (800a6ec <pxUDPPayloadBuffer_to_NetworkBuffer+0x88>)
 800a6b0:	f7f7 f952 	bl	8001958 <vAssertCalled>

        switch( ucIPType ) /* LCOV_EXCL_BR_LINE */
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
 800a6b6:	2b40      	cmp	r3, #64	@ 0x40
 800a6b8:	d004      	beq.n	800a6c4 <pxUDPPayloadBuffer_to_NetworkBuffer+0x60>
 800a6ba:	2b60      	cmp	r3, #96	@ 0x60
 800a6bc:	d105      	bne.n	800a6ca <pxUDPPayloadBuffer_to_NetworkBuffer+0x66>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                case ipTYPE_IPv6:
                    uxOffset = sizeof( UDPPacket_IPv6_t );
 800a6be:	233e      	movs	r3, #62	@ 0x3e
 800a6c0:	61bb      	str	r3, [r7, #24]
                    break;
 800a6c2:	e008      	b.n	800a6d6 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            #if ( ipconfigUSE_IPv4 != 0 )
                case ipTYPE_IPv4:
                    uxOffset = sizeof( UDPPacket_t );
 800a6c4:	232a      	movs	r3, #42	@ 0x2a
 800a6c6:	61bb      	str	r3, [r7, #24]
                    break;
 800a6c8:	e005      	b.n	800a6d6 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            default:
                FreeRTOS_debug_printf( ( "pxUDPPayloadBuffer_to_NetworkBuffer: Undefined ucIPType \n" ) );
 800a6ca:	4809      	ldr	r0, [pc, #36]	@ (800a6f0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x8c>)
 800a6cc:	f017 fd3c 	bl	8022148 <lUDPLoggingPrintf>
                uxOffset = sizeof( UDPPacket_t );
 800a6d0:	232a      	movs	r3, #42	@ 0x2a
 800a6d2:	61bb      	str	r3, [r7, #24]
                break;
 800a6d4:	bf00      	nop
        }

        pxResult = prvPacketBuffer_to_NetworkBuffer( pvBuffer, uxOffset );
 800a6d6:	69b9      	ldr	r1, [r7, #24]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7ff ff85 	bl	800a5e8 <prvPacketBuffer_to_NetworkBuffer>
 800a6de:	61f8      	str	r0, [r7, #28]
    }

    return pxResult;
 800a6e0:	69fb      	ldr	r3, [r7, #28]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3720      	adds	r7, #32
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	08024cc8 	.word	0x08024cc8
 800a6f0:	08024da0 	.word	0x08024da0

0800a6f4 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    const struct tskTaskControlBlock * const xCurrentHandle = xTaskGetCurrentTaskHandle();
 800a6fa:	f7fa fdcf 	bl	800529c <xTaskGetCurrentTaskHandle>
 800a6fe:	60b8      	str	r0, [r7, #8]
    const struct tskTaskControlBlock * const xCurrentIPTaskHandle = FreeRTOS_GetIPTaskHandle();
 800a700:	f7fe ff6e 	bl	80095e0 <FreeRTOS_GetIPTaskHandle>
 800a704:	6078      	str	r0, [r7, #4]

    if( xCurrentHandle == xCurrentIPTaskHandle )
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d102      	bne.n	800a714 <xIsCallingFromIPTask+0x20>
    {
        xReturn = pdTRUE;
 800a70e:	2301      	movs	r3, #1
 800a710:	60fb      	str	r3, [r7, #12]
 800a712:	e001      	b.n	800a718 <xIsCallingFromIPTask+0x24>
    }
    else
    {
        xReturn = pdFALSE;
 800a714:	2300      	movs	r3, #0
 800a716:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800a718:	68fb      	ldr	r3, [r7, #12]
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
	...

0800a724 <prvProcessNetworkDownEvent>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void prvProcessNetworkDownEvent( struct xNetworkInterface * pxInterface )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
    NetworkEndPoint_t * pxEndPoint;

    configASSERT( pxInterface != NULL );
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d104      	bne.n	800a73c <prvProcessNetworkDownEvent+0x18>
 800a732:	f240 3137 	movw	r1, #823	@ 0x337
 800a736:	4857      	ldr	r0, [pc, #348]	@ (800a894 <prvProcessNetworkDownEvent+0x170>)
 800a738:	f7f7 f90e 	bl	8001958 <vAssertCalled>
    configASSERT( pxInterface->pfInitialise != NULL );
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d104      	bne.n	800a74e <prvProcessNetworkDownEvent+0x2a>
 800a744:	f44f 714e 	mov.w	r1, #824	@ 0x338
 800a748:	4852      	ldr	r0, [pc, #328]	@ (800a894 <prvProcessNetworkDownEvent+0x170>)
 800a74a:	f7f7 f905 	bl	8001958 <vAssertCalled>
    /* Stop the ARP timer while there is no network. */
    vIPSetARPTimerEnableState( pdFALSE );
 800a74e:	2000      	movs	r0, #0
 800a750:	f7ff fe6a 	bl	800a428 <vIPSetARPTimerEnableState>

    /* The first network down event is generated by the IP stack itself to
     * initialise the network hardware, so do not call the network down event
     * the first time through. */

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f002 ffd7 	bl	800d708 <FreeRTOS_FirstEndPoint>
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	e041      	b.n	800a7e2 <prvProcessNetworkDownEvent+0xbe>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
    {
        /* The bit 'bEndPointUp' stays low until vIPNetworkUpCalls() is called. */
        pxEndPoint->bits.bEndPointUp = pdFALSE_UNSIGNED;
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800a764:	f36f 1304 	bfc	r3, #4, #1
 800a768:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

        if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a772:	f003 0304 	and.w	r3, r3, #4
 800a776:	b2db      	uxtb	r3, r3
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d003      	beq.n	800a784 <prvProcessNetworkDownEvent+0x60>
        {
            /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
            #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
                vManageSolicitedNodeAddress( pxEndPoint, pdFALSE );
 800a77c:	2100      	movs	r1, #0
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f001 f9c8 	bl	800bb14 <vManageSolicitedNodeAddress>
            #endif
        }

        #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            if( pxEndPoint->bits.bCallDownHook != pdFALSE_UNSIGNED )
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a78a:	f003 0308 	and.w	r3, r3, #8
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	2b00      	cmp	r3, #0
 800a792:	d003      	beq.n	800a79c <prvProcessNetworkDownEvent+0x78>
            {
                #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                {
                    vApplicationIPNetworkEventHook( eNetworkDown );
 800a794:	2001      	movs	r0, #1
 800a796:	f7f7 f913 	bl	80019c0 <vApplicationIPNetworkEventHook>
 800a79a:	e006      	b.n	800a7aa <prvProcessNetworkDownEvent+0x86>
                #endif
            }
            else
            {
                /* The next time NetworkEventHook will be called for this end-point. */
                pxEndPoint->bits.bCallDownHook = pdTRUE_UNSIGNED;
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800a7a2:	f043 0308 	orr.w	r3, r3, #8
 800a7a6:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
        #endif /* ipconfigUSE_NETWORK_EVENT_HOOK */

        /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122
         * treat network down as a "delivery problem" and flush the ARP cache for this
         *  interface. */
        FreeRTOS_ClearARP( pxEndPoint );
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	f7fd f8c0 	bl	8007930 <FreeRTOS_ClearARP>
                }
            }
        #endif /* ( ipconfigUSE_DHCP == 1 ) */

        #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
            if( END_POINT_USES_RA( pxEndPoint ) )
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a7b6:	f003 0304 	and.w	r3, r3, #4
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00b      	beq.n	800a7d8 <prvProcessNetworkDownEvent+0xb4>
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a7c6:	f003 0302 	and.w	r3, r3, #2
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d003      	beq.n	800a7d8 <prvProcessNetworkDownEvent+0xb4>
            {
                /* Stop the RA/SLAAC process for this end-point. */
                vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f7ff fe5c 	bl	800a490 <vIPSetDHCP_RATimerEnableState>
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800a7d8:	68f9      	ldr	r1, [r7, #12]
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f002 ffb6 	bl	800d74c <FreeRTOS_NextEndPoint>
 800a7e0:	60f8      	str	r0, [r7, #12]
         pxEndPoint != NULL;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d1ba      	bne.n	800a75e <prvProcessNetworkDownEvent+0x3a>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */

    if( pxInterface->pfInitialise( pxInterface ) == pdPASS )
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	4798      	blx	r3
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d147      	bne.n	800a886 <prvProcessNetworkDownEvent+0x162>
    {
        pxInterface->bits.bInterfaceUp = pdTRUE_UNSIGNED;
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	7f13      	ldrb	r3, [r2, #28]
 800a7fa:	f043 0301 	orr.w	r3, r3, #1
 800a7fe:	7713      	strb	r3, [r2, #28]
        /* Set remaining time to 0 so it will become active immediately. */

        /* The network is not up until DHCP has completed.
         * Start it now for all associated end-points. */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f002 ff81 	bl	800d708 <FreeRTOS_FirstEndPoint>
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	e039      	b.n	800a87e <prvProcessNetworkDownEvent+0x15a>
                }
                else /* Yes this else ought to be here. */
            #endif /* ( ipconfigUSE_DHCP == 1 ) */

            #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                if( END_POINT_USES_RA( pxEndPoint ) )
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a810:	f003 0304 	and.w	r3, r3, #4
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00c      	beq.n	800a834 <prvProcessNetworkDownEvent+0x110>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a820:	f003 0302 	and.w	r3, r3, #2
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b00      	cmp	r3, #0
 800a828:	d004      	beq.n	800a834 <prvProcessNetworkDownEvent+0x110>
                {
                    /* Reset the RA/SLAAC process for this end-point. */
                    vRAProcess( pdTRUE, pxEndPoint );
 800a82a:	68f9      	ldr	r1, [r7, #12]
 800a82c:	2001      	movs	r0, #1
 800a82e:	f002 fd9f 	bl	800d370 <vRAProcess>
 800a832:	e01f      	b.n	800a874 <prvProcessNetworkDownEvent+0x150>
                }
                else
            #endif /* ( (ipconfigUSE_RA != 0) && ( ipconfigUSE_IPv6 != 0 )) */

            {
                switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a83a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	2b00      	cmp	r3, #0
 800a842:	d002      	beq.n	800a84a <prvProcessNetworkDownEvent+0x126>
 800a844:	2b01      	cmp	r3, #1
 800a846:	d008      	beq.n	800a85a <prvProcessNetworkDownEvent+0x136>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800a848:	e011      	b.n	800a86e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv4_settings ), &( pxEndPoint->ipv4_defaults ), sizeof( pxEndPoint->ipv4_settings ) );
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	331c      	adds	r3, #28
 800a850:	221c      	movs	r2, #28
 800a852:	4619      	mov	r1, r3
 800a854:	f017 fe94 	bl	8022580 <memcpy>
                            break;
 800a858:	e009      	b.n	800a86e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	3390      	adds	r3, #144	@ 0x90
 800a864:	2258      	movs	r2, #88	@ 0x58
 800a866:	4619      	mov	r1, r3
 800a868:	f017 fe8a 	bl	8022580 <memcpy>
                            break;
 800a86c:	bf00      	nop
                }

                /* DHCP or Router Advertisement are not enabled for this end-point.
                 * Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls( pxEndPoint );
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f7fe fec2 	bl	80095f8 <vIPNetworkUpCalls>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800a874:	68f9      	ldr	r1, [r7, #12]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f002 ff68 	bl	800d74c <FreeRTOS_NextEndPoint>
 800a87c:	60f8      	str	r0, [r7, #12]
             pxEndPoint != NULL;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1c2      	bne.n	800a80a <prvProcessNetworkDownEvent+0xe6>
        vSetAllNetworksUp( pdFALSE );

        /* Nothing else to do. When the 'xNetworkTimer' expires, all interfaces
         * with bits.bInterfaceUp cleared will get a new 'eNetworkDownEvent' */
    }
}
 800a884:	e002      	b.n	800a88c <prvProcessNetworkDownEvent+0x168>
        vSetAllNetworksUp( pdFALSE );
 800a886:	2000      	movs	r0, #0
 800a888:	f7ff fe48 	bl	800a51c <vSetAllNetworksUp>
}
 800a88c:	bf00      	nop
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	08024cc8 	.word	0x08024cc8

0800a898 <vPreCheckConfigs>:
/**
 * @brief Check the values of configuration options and assert on it. Also verify that the IP-task
 *        has not already been initialized.
 */
void vPreCheckConfigs( void )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800a89e:	f7ff fb83 	bl	8009fa8 <xIPIsNetworkTaskReady>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d004      	beq.n	800a8b2 <vPreCheckConfigs+0x1a>
 800a8a8:	f240 31db 	movw	r1, #987	@ 0x3db
 800a8ac:	4831      	ldr	r0, [pc, #196]	@ (800a974 <vPreCheckConfigs+0xdc>)
 800a8ae:	f7f7 f853 	bl	8001958 <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 800a8b2:	4b31      	ldr	r3, [pc, #196]	@ (800a978 <vPreCheckConfigs+0xe0>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d004      	beq.n	800a8c4 <vPreCheckConfigs+0x2c>
 800a8ba:	f44f 7177 	mov.w	r1, #988	@ 0x3dc
 800a8be:	482d      	ldr	r0, [pc, #180]	@ (800a974 <vPreCheckConfigs+0xdc>)
 800a8c0:	f7f7 f84a 	bl	8001958 <vAssertCalled>
    configASSERT( FreeRTOS_GetIPTaskHandle() == NULL );
 800a8c4:	f7fe fe8c 	bl	80095e0 <FreeRTOS_GetIPTaskHandle>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d004      	beq.n	800a8d8 <vPreCheckConfigs+0x40>
 800a8ce:	f240 31dd 	movw	r1, #989	@ 0x3dd
 800a8d2:	4828      	ldr	r0, [pc, #160]	@ (800a974 <vPreCheckConfigs+0xdc>)
 800a8d4:	f7f7 f840 	bl	8001958 <vAssertCalled>
         * fields in the protocol headers.
         */
        configASSERT( ( ( ( ipSIZE_OF_ETH_HEADER ) + ( ipBUFFER_PADDING ) ) % 4U ) == 0U );

        /* LCOV_EXCL_BR_START */
        uxSize = ipconfigNETWORK_MTU;
 800a8d8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800a8dc:	607b      	str	r3, [r7, #4]
        /* Check if MTU is big enough. */
        configASSERT( uxSize >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + ipconfigTCP_MSS ) );
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f240 52db 	movw	r2, #1499	@ 0x5db
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d804      	bhi.n	800a8f2 <vPreCheckConfigs+0x5a>
 800a8e8:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 800a8ec:	4821      	ldr	r0, [pc, #132]	@ (800a974 <vPreCheckConfigs+0xdc>)
 800a8ee:	f7f7 f833 	bl	8001958 <vAssertCalled>

        uxSize = sizeof( EthernetHeader_t );
 800a8f2:	230e      	movs	r3, #14
 800a8f4:	607b      	str	r3, [r7, #4]
        /* Check structure packing is correct. */
        configASSERT( uxSize == ipEXPECTED_EthernetHeader_t_SIZE );
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2b0e      	cmp	r3, #14
 800a8fa:	d004      	beq.n	800a906 <vPreCheckConfigs+0x6e>
 800a8fc:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800a900:	481c      	ldr	r0, [pc, #112]	@ (800a974 <vPreCheckConfigs+0xdc>)
 800a902:	f7f7 f829 	bl	8001958 <vAssertCalled>

        uxSize = sizeof( ARPHeader_t );
 800a906:	231c      	movs	r3, #28
 800a908:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ARPHeader_t_SIZE );
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b1c      	cmp	r3, #28
 800a90e:	d004      	beq.n	800a91a <vPreCheckConfigs+0x82>
 800a910:	f240 4102 	movw	r1, #1026	@ 0x402
 800a914:	4817      	ldr	r0, [pc, #92]	@ (800a974 <vPreCheckConfigs+0xdc>)
 800a916:	f7f7 f81f 	bl	8001958 <vAssertCalled>

        uxSize = sizeof( IPHeader_t );
 800a91a:	2314      	movs	r3, #20
 800a91c:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_IPHeader_t_SIZE );
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2b14      	cmp	r3, #20
 800a922:	d004      	beq.n	800a92e <vPreCheckConfigs+0x96>
 800a924:	f240 4105 	movw	r1, #1029	@ 0x405
 800a928:	4812      	ldr	r0, [pc, #72]	@ (800a974 <vPreCheckConfigs+0xdc>)
 800a92a:	f7f7 f815 	bl	8001958 <vAssertCalled>

        uxSize = sizeof( ICMPHeader_t );
 800a92e:	2308      	movs	r3, #8
 800a930:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ICMPHeader_t_SIZE );
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2b08      	cmp	r3, #8
 800a936:	d004      	beq.n	800a942 <vPreCheckConfigs+0xaa>
 800a938:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 800a93c:	480d      	ldr	r0, [pc, #52]	@ (800a974 <vPreCheckConfigs+0xdc>)
 800a93e:	f7f7 f80b 	bl	8001958 <vAssertCalled>

        uxSize = sizeof( UDPHeader_t );
 800a942:	2308      	movs	r3, #8
 800a944:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_UDPHeader_t_SIZE );
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b08      	cmp	r3, #8
 800a94a:	d004      	beq.n	800a956 <vPreCheckConfigs+0xbe>
 800a94c:	f240 410b 	movw	r1, #1035	@ 0x40b
 800a950:	4808      	ldr	r0, [pc, #32]	@ (800a974 <vPreCheckConfigs+0xdc>)
 800a952:	f7f7 f801 	bl	8001958 <vAssertCalled>

        #if ipconfigUSE_TCP == 1
        {
            uxSize = sizeof( TCPHeader_t );
 800a956:	2324      	movs	r3, #36	@ 0x24
 800a958:	607b      	str	r3, [r7, #4]
            configASSERT( uxSize == ( ipEXPECTED_TCPHeader_t_SIZE + ipSIZE_TCP_OPTIONS ) );
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2b24      	cmp	r3, #36	@ 0x24
 800a95e:	d004      	beq.n	800a96a <vPreCheckConfigs+0xd2>
 800a960:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800a964:	4803      	ldr	r0, [pc, #12]	@ (800a974 <vPreCheckConfigs+0xdc>)
 800a966:	f7f6 fff7 	bl	8001958 <vAssertCalled>
         * It's value MUST be > 0. Otherwise, storing the IPv4 version byte
         * will overwrite the Ethernet header. */
        configASSERT( ipIP_TYPE_OFFSET > 0 );
    }
    #endif /* if ( configASSERT_DEFINED == 1 ) */
}
 800a96a:	bf00      	nop
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	08024cc8 	.word	0x08024cc8
 800a978:	2000111c 	.word	0x2000111c

0800a97c <vPrintResourceStats>:
/**
 * @brief A function that monitors a three resources: the heap, the space in the message
 *        queue of the IP-task, the number of available network buffer descriptors.
 */
    void vPrintResourceStats( void )
    {
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
        /* When setting up and testing a project with FreeRTOS+TCP, it is
         * can be helpful to monitor a few resources: the number of network
         * buffers and the amount of available heap.
         * This function will issue some logging when a minimum value has
         * changed. */
        uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 800a982:	f00c fd7f 	bl	8017484 <uxGetMinimumFreeNetworkBuffers>
 800a986:	60f8      	str	r0, [r7, #12]

        if( uxLastMinBufferCount > uxCurrentBufferCount )
 800a988:	4b24      	ldr	r3, [pc, #144]	@ (800aa1c <vPrintResourceStats+0xa0>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d20a      	bcs.n	800a9a8 <vPrintResourceStats+0x2c>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentBufferCount;
 800a992:	4a22      	ldr	r2, [pc, #136]	@ (800aa1c <vPrintResourceStats+0xa0>)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 800a998:	f00c fd80 	bl	801749c <uxGetNumberOfFreeNetworkBuffers>
 800a99c:	4603      	mov	r3, r0
 800a99e:	68fa      	ldr	r2, [r7, #12]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	481f      	ldr	r0, [pc, #124]	@ (800aa20 <vPrintResourceStats+0xa4>)
 800a9a4:	f017 fbd0 	bl	8022148 <lUDPLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(),
                               uxCurrentBufferCount ) );
        }

        uxMinSize = xPortGetMinimumEverFreeHeapSize();
 800a9a8:	f7fb ff1e 	bl	80067e8 <xPortGetMinimumEverFreeHeapSize>
 800a9ac:	60b8      	str	r0, [r7, #8]

        if( uxMinLastSize == 0U )
 800a9ae:	4b1d      	ldr	r3, [pc, #116]	@ (800aa24 <vPrintResourceStats+0xa8>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d103      	bne.n	800a9be <vPrintResourceStats+0x42>
        {
            /* Probably the first time this function is called. */
            uxMinLastSize = uxMinSize;
 800a9b6:	4a1b      	ldr	r2, [pc, #108]	@ (800aa24 <vPrintResourceStats+0xa8>)
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	6013      	str	r3, [r2, #0]
 800a9bc:	e019      	b.n	800a9f2 <vPrintResourceStats+0x76>
        }
        else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9c4:	d215      	bcs.n	800a9f2 <vPrintResourceStats+0x76>
        {
            /* There is more than enough heap space. No need for logging. */
        }
        /* Write logging if there is a 10% decrease since the last time logging was written. */
        else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 800a9c6:	4b17      	ldr	r3, [pc, #92]	@ (800aa24 <vPrintResourceStats+0xa8>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	225a      	movs	r2, #90	@ 0x5a
 800a9cc:	fb03 f202 	mul.w	r2, r3, r2
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	2164      	movs	r1, #100	@ 0x64
 800a9d4:	fb01 f303 	mul.w	r3, r1, r3
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d90a      	bls.n	800a9f2 <vPrintResourceStats+0x76>
        {
            uxMinLastSize = uxMinSize;
 800a9dc:	4a11      	ldr	r2, [pc, #68]	@ (800aa24 <vPrintResourceStats+0xa8>)
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Heap: current %u lowest %u\n", ( unsigned ) xPortGetFreeHeapSize(), ( unsigned ) uxMinSize ) );
 800a9e2:	f7fb fef5 	bl	80067d0 <xPortGetFreeHeapSize>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	68ba      	ldr	r2, [r7, #8]
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	480e      	ldr	r0, [pc, #56]	@ (800aa28 <vPrintResourceStats+0xac>)
 800a9ee:	f017 fbab 	bl	8022148 <lUDPLoggingPrintf>
            /* Nothing to log. */
        }

        #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        {
            UBaseType_t uxCurrentCount = 0u;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	607b      	str	r3, [r7, #4]

            uxCurrentCount = uxGetMinimumIPQueueSpace();
 800a9f6:	f7ff fae3 	bl	8009fc0 <uxGetMinimumIPQueueSpace>
 800a9fa:	6078      	str	r0, [r7, #4]

            if( uxLastMinQueueSpace != uxCurrentCount )
 800a9fc:	4b0b      	ldr	r3, [pc, #44]	@ (800aa2c <vPrintResourceStats+0xb0>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d006      	beq.n	800aa14 <vPrintResourceStats+0x98>
            {
                /* The logging produced below may be helpful
                 * while tuning +TCP: see how many buffers are in use. */
                uxLastMinQueueSpace = uxCurrentCount;
 800aa06:	4a09      	ldr	r2, [pc, #36]	@ (800aa2c <vPrintResourceStats+0xb0>)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 800aa0c:	6879      	ldr	r1, [r7, #4]
 800aa0e:	4808      	ldr	r0, [pc, #32]	@ (800aa30 <vPrintResourceStats+0xb4>)
 800aa10:	f017 fb9a 	bl	8022148 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */
    }
 800aa14:	bf00      	nop
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	20000018 	.word	0x20000018
 800aa20:	08024e38 	.word	0x08024e38
 800aa24:	20001198 	.word	0x20001198
 800aa28:	08024e5c 	.word	0x08024e5c
 800aa2c:	2000119c 	.word	0x2000119c
 800aa30:	08024e78 	.word	0x08024e78

0800aa34 <FreeRTOS_max_size_t>:
 * @param[in] b the second value.
 * @return The highest of the two values.
 */
size_t FreeRTOS_max_size_t( size_t a,
                            size_t b )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	4293      	cmp	r3, r2
 800aa44:	bf38      	it	cc
 800aa46:	4613      	movcc	r3, r2
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <FreeRTOS_min_int32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	4293      	cmp	r3, r2
 800aa64:	bfa8      	it	ge
 800aa66:	4613      	movge	r3, r2
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <FreeRTOS_min_uint32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	4293      	cmp	r3, r2
 800aa84:	bf28      	it	cs
 800aa86:	4613      	movcs	r3, r2
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <FreeRTOS_min_size_t>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
size_t FreeRTOS_min_size_t( size_t a,
                            size_t b )
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	bf28      	it	cs
 800aaa6:	4613      	movcs	r3, r2
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <FreeRTOS_round_up>:
 * @param[in] d the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
    uint32_t ulResult = a;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	60fb      	str	r3, [r7, #12]

    configASSERT( d != 0U );
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d104      	bne.n	800aad2 <FreeRTOS_round_up+0x1e>
 800aac8:	f240 61ac 	movw	r1, #1708	@ 0x6ac
 800aacc:	480a      	ldr	r0, [pc, #40]	@ (800aaf8 <FreeRTOS_round_up+0x44>)
 800aace:	f7f6 ff43 	bl	8001958 <vAssertCalled>

    if( d != 0U )
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00a      	beq.n	800aaee <FreeRTOS_round_up+0x3a>
    {
        ulResult = d * ( ( a + d - 1U ) / d );
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	4413      	add	r3, r2
 800aade:	1e5a      	subs	r2, r3, #1
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	fbb2 f2f3 	udiv	r2, r2, r3
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	fb02 f303 	mul.w	r3, r2, r3
 800aaec:	60fb      	str	r3, [r7, #12]
    }

    return ulResult;
 800aaee:	68fb      	ldr	r3, [r7, #12]
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3710      	adds	r7, #16
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	08024cc8 	.word	0x08024cc8

0800aafc <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800ab12:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	3302      	adds	r3, #2
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800ab1c:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	3203      	adds	r2, #3
 800ab22:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800ab24:	4313      	orrs	r3, r2
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	370c      	adds	r7, #12
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr

0800ab32 <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 800ab32:	b480      	push	{r7}
 800ab34:	b083      	sub	sp, #12
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	021b      	lsls	r3, r3, #8
 800ab40:	b29b      	uxth	r3, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	3201      	adds	r2, #1
 800ab46:	7812      	ldrb	r2, [r2, #0]
    return ( uint16_t )
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	b29b      	uxth	r3, r3
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <xCheckIPv4SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv4SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b08a      	sub	sp, #40	@ 0x28
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIPHeaderLength;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 800ab62:	2300      	movs	r3, #0
 800ab64:	623b      	str	r3, [r7, #32]

        /* Map the buffer onto a IP-Packet struct to easily access the
         * fields of the IP packet. */
        const IPPacket_t * const pxIPPacket = ( ( const IPPacket_t * const ) pvEthernetBuffer );
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	61bb      	str	r3, [r7, #24]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	2b21      	cmp	r3, #33	@ 0x21
 800ab72:	d802      	bhi.n	800ab7a <xCheckIPv4SizeFields+0x22>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800ab74:	2301      	movs	r3, #1
 800ab76:	61fb      	str	r3, [r7, #28]
                break;
 800ab78:	e06f      	b.n	800ac5a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	7b9b      	ldrb	r3, [r3, #14]
 800ab7e:	82fb      	strh	r3, [r7, #22]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800ab80:	8afb      	ldrh	r3, [r7, #22]
 800ab82:	2b44      	cmp	r3, #68	@ 0x44
 800ab84:	d902      	bls.n	800ab8c <xCheckIPv4SizeFields+0x34>
 800ab86:	8afb      	ldrh	r3, [r7, #22]
 800ab88:	2b4f      	cmp	r3, #79	@ 0x4f
 800ab8a:	d902      	bls.n	800ab92 <xCheckIPv4SizeFields+0x3a>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	61fb      	str	r3, [r7, #28]
                break;
 800ab90:	e063      	b.n	800ac5a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = ( uint16_t ) ( ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2U );
 800ab92:	8afb      	ldrh	r3, [r7, #22]
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800ab9c:	82fb      	strh	r3, [r7, #22]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 800ab9e:	8afb      	ldrh	r3, [r7, #22]
 800aba0:	613b      	str	r3, [r7, #16]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	330e      	adds	r3, #14
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d202      	bcs.n	800abb2 <xCheckIPv4SizeFields+0x5a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800abac:	2303      	movs	r3, #3
 800abae:	61fb      	str	r3, [r7, #28]
                break;
 800abb0:	e053      	b.n	800ac5a <xCheckIPv4SizeFields+0x102>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	7c1a      	ldrb	r2, [r3, #16]
 800abb6:	7c5b      	ldrb	r3, [r3, #17]
 800abb8:	021b      	lsls	r3, r3, #8
 800abba:	4313      	orrs	r3, r2
 800abbc:	81fb      	strh	r3, [r7, #14]
            usLength = FreeRTOS_ntohs( usLength );
 800abbe:	89fb      	ldrh	r3, [r7, #14]
 800abc0:	021b      	lsls	r3, r3, #8
 800abc2:	b21a      	sxth	r2, r3
 800abc4:	89fb      	ldrh	r3, [r7, #14]
 800abc6:	0a1b      	lsrs	r3, r3, #8
 800abc8:	b29b      	uxth	r3, r3
 800abca:	b21b      	sxth	r3, r3
 800abcc:	4313      	orrs	r3, r2
 800abce:	b21b      	sxth	r3, r3
 800abd0:	81fb      	strh	r3, [r7, #14]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800abd2:	89fb      	ldrh	r3, [r7, #14]
 800abd4:	330e      	adds	r3, #14
 800abd6:	683a      	ldr	r2, [r7, #0]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d202      	bcs.n	800abe2 <xCheckIPv4SizeFields+0x8a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800abdc:	2304      	movs	r3, #4
 800abde:	61fb      	str	r3, [r7, #28]
                break;
 800abe0:	e03b      	b.n	800ac5a <xCheckIPv4SizeFields+0x102>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	7ddb      	ldrb	r3, [r3, #23]
 800abe6:	737b      	strb	r3, [r7, #13]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800abe8:	7b7b      	ldrb	r3, [r7, #13]
 800abea:	2b11      	cmp	r3, #17
 800abec:	d103      	bne.n	800abf6 <xCheckIPv4SizeFields+0x9e>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	3316      	adds	r3, #22
 800abf2:	627b      	str	r3, [r7, #36]	@ 0x24
 800abf4:	e013      	b.n	800ac1e <xCheckIPv4SizeFields+0xc6>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800abf6:	7b7b      	ldrb	r3, [r7, #13]
 800abf8:	2b06      	cmp	r3, #6
 800abfa:	d103      	bne.n	800ac04 <xCheckIPv4SizeFields+0xac>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	3322      	adds	r3, #34	@ 0x22
 800ac00:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac02:	e00c      	b.n	800ac1e <xCheckIPv4SizeFields+0xc6>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800ac04:	7b7b      	ldrb	r3, [r7, #13]
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d002      	beq.n	800ac10 <xCheckIPv4SizeFields+0xb8>
 800ac0a:	7b7b      	ldrb	r3, [r7, #13]
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d103      	bne.n	800ac18 <xCheckIPv4SizeFields+0xc0>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMPv4_HEADER;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	3316      	adds	r3, #22
 800ac14:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac16:	e002      	b.n	800ac1e <xCheckIPv4SizeFields+0xc6>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800ac18:	2305      	movs	r3, #5
 800ac1a:	61fb      	str	r3, [r7, #28]
                break;
 800ac1c:	e01d      	b.n	800ac5a <xCheckIPv4SizeFields+0x102>
            }

            if( uxBufferLength < uxMinimumLength )
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d202      	bcs.n	800ac2c <xCheckIPv4SizeFields+0xd4>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800ac26:	2306      	movs	r3, #6
 800ac28:	61fb      	str	r3, [r7, #28]
                break;
 800ac2a:	e016      	b.n	800ac5a <xCheckIPv4SizeFields+0x102>
            }

            uxLength = ( size_t ) usLength;
 800ac2c:	89fb      	ldrh	r3, [r7, #14]
 800ac2e:	60bb      	str	r3, [r7, #8]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	461a      	mov	r2, r3
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	1a9b      	subs	r3, r3, r2
 800ac3a:	60bb      	str	r3, [r7, #8]

            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	2b07      	cmp	r3, #7
 800ac40:	d906      	bls.n	800ac50 <xCheckIPv4SizeFields+0xf8>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 800ac42:	693a      	ldr	r2, [r7, #16]
 800ac44:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800ac48:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d902      	bls.n	800ac56 <xCheckIPv4SizeFields+0xfe>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800ac50:	2307      	movs	r3, #7
 800ac52:	61fb      	str	r3, [r7, #28]
                break;
 800ac54:	e001      	b.n	800ac5a <xCheckIPv4SizeFields+0x102>
            }

            xResult = pdPASS;
 800ac56:	2301      	movs	r3, #1
 800ac58:	623b      	str	r3, [r7, #32]
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800ac5a:	6a3b      	ldr	r3, [r7, #32]
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d003      	beq.n	800ac68 <xCheckIPv4SizeFields+0x110>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv4SizeFields: location %ld\n", xLocation ) );
 800ac60:	69f9      	ldr	r1, [r7, #28]
 800ac62:	4804      	ldr	r0, [pc, #16]	@ (800ac74 <xCheckIPv4SizeFields+0x11c>)
 800ac64:	f017 fa70 	bl	8022148 <lUDPLoggingPrintf>
        }

        return xResult;
 800ac68:	6a3b      	ldr	r3, [r7, #32]
    }
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3728      	adds	r7, #40	@ 0x28
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	08024f44 	.word	0x08024f44

0800ac78 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	061a      	lsls	r2, r3, #24
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	021b      	lsls	r3, r3, #8
 800ac88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ac8c:	431a      	orrs	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	0a1b      	lsrs	r3, r3, #8
 800ac92:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ac96:	431a      	orrs	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	0e1b      	lsrs	r3, r3, #24
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800aca6:	d306      	bcc.n	800acb6 <xIsIPv4Multicast+0x3e>
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 800acae:	d202      	bcs.n	800acb6 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 800acb0:	2301      	movs	r3, #1
 800acb2:	60fb      	str	r3, [r7, #12]
 800acb4:	e001      	b.n	800acba <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 800acb6:	2300      	movs	r3, #0
 800acb8:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800acba:	68fb      	ldr	r3, [r7, #12]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <prvAllowIPPacketIPv4>:
 * @return Whether the packet should be processed or dropped.
 */
enum eFrameProcessingResult prvAllowIPPacketIPv4( const struct xIP_PACKET * const pxIPPacket,
                                                  const struct xNETWORK_BUFFER * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800acd4:	2301      	movs	r3, #1
 800acd6:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d10c      	bne.n	800acf8 <prvAllowIPPacketIPv4+0x30>
        {
            if( xCheckIPv4SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ace6:	4619      	mov	r1, r3
 800ace8:	4610      	mov	r0, r2
 800acea:	f7ff ff35 	bl	800ab58 <xCheckIPv4SizeFields>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d001      	beq.n	800acf8 <prvAllowIPPacketIPv4+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800acf4:	2300      	movs	r3, #0
 800acf6:	75fb      	strb	r3, [r7, #23]
        }

        #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
        {
            /* Check if this is a UDP packet without a checksum. */
            if( eReturn == eProcessBuffer )
 800acf8:	7dfb      	ldrb	r3, [r7, #23]
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d134      	bne.n	800ad68 <prvAllowIPPacketIPv4+0xa0>
                const ProtocolHeaders_t * pxProtocolHeaders;

                /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                 * and so UDP packets carrying a protocol checksum of 0, will
                 * be dropped. */
                ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	7ddb      	ldrb	r3, [r3, #23]
 800ad02:	75bb      	strb	r3, [r7, #22]
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ( size_t ) ipSIZE_OF_IPv4_HEADER ] ) );
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad08:	3322      	adds	r3, #34	@ 0x22
 800ad0a:	613b      	str	r3, [r7, #16]

                /* Identify the next protocol. */
                if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800ad0c:	7dbb      	ldrb	r3, [r7, #22]
 800ad0e:	2b11      	cmp	r3, #17
 800ad10:	d12a      	bne.n	800ad68 <prvAllowIPPacketIPv4+0xa0>
                {
                    if( pxProtocolHeaders->xUDPHeader.usChecksum == ( uint16_t ) 0U )
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	88db      	ldrh	r3, [r3, #6]
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d125      	bne.n	800ad68 <prvAllowIPPacketIPv4+0xa0>
                        #if ( ipconfigHAS_PRINTF != 0 )
                        {
                            static BaseType_t xCount = 0;

                            /* Exclude this from branch coverage as this is only used for debugging. */
                            if( xCount < 5 ) /* LCOV_EXCL_BR_LINE */
 800ad1c:	4b15      	ldr	r3, [pc, #84]	@ (800ad74 <prvAllowIPPacketIPv4+0xac>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b04      	cmp	r3, #4
 800ad22:	dc1f      	bgt.n	800ad64 <prvAllowIPPacketIPv4+0x9c>
                            {
                                FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ad2a:	061a      	lsls	r2, r3, #24
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ad32:	021b      	lsls	r3, r3, #8
 800ad34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ad38:	431a      	orrs	r2, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ad40:	0a1b      	lsrs	r3, r3, #8
 800ad42:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ad46:	431a      	orrs	r2, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ad4e:	0e1b      	lsrs	r3, r3, #24
 800ad50:	4313      	orrs	r3, r2
 800ad52:	4619      	mov	r1, r3
 800ad54:	4808      	ldr	r0, [pc, #32]	@ (800ad78 <prvAllowIPPacketIPv4+0xb0>)
 800ad56:	f017 f9f7 	bl	8022148 <lUDPLoggingPrintf>
                                                   FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                xCount++;
 800ad5a:	4b06      	ldr	r3, [pc, #24]	@ (800ad74 <prvAllowIPPacketIPv4+0xac>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	4a04      	ldr	r2, [pc, #16]	@ (800ad74 <prvAllowIPPacketIPv4+0xac>)
 800ad62:	6013      	str	r3, [r2, #0]
                            }
                        }
                        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                        /* Protocol checksum not accepted. */
                        eReturn = eReleaseBuffer;
 800ad64:	2300      	movs	r3, #0
 800ad66:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
        ( void ) uxHeaderLength;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 800ad68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3718      	adds	r7, #24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	200011a0 	.word	0x200011a0
 800ad78:	08024f68 	.word	0x08024f68

0800ad7c <prvCheckIP4HeaderOptions>:
 * @param[in] pxNetworkBuffer the network buffer that contains the packet.
 *
 * @return Either 'eProcessBuffer' or 'eReleaseBuffer'
 */
enum eFrameProcessingResult prvCheckIP4HeaderOptions( struct xNETWORK_BUFFER * const pxNetworkBuffer )
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b08a      	sub	sp, #40	@ 0x28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800ad84:	2301      	movs	r3, #1
 800ad86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad8e:	330e      	adds	r3, #14
 800ad90:	623b      	str	r3, [r7, #32]

        /* All structs of headers expect a IP header size of 20 bytes
         * IP header options were included, we'll ignore them and cut them out. */
        size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800ad92:	6a3b      	ldr	r3, [r7, #32]
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	61fb      	str	r3, [r7, #28]

        /* Check if the IP headers are acceptable and if it has our destination.
         * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
         * length in multiples of 4. */
        size_t uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800ad98:	69fb      	ldr	r3, [r7, #28]
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800ada0:	61bb      	str	r3, [r7, #24]

        /* Number of bytes contained in IPv4 header options. */
        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	3b14      	subs	r3, #20
 800ada6:	617b      	str	r3, [r7, #20]
        /* From: the previous start of UDP/ICMP/TCP data. */
        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	330e      	adds	r3, #14
 800adb0:	4413      	add	r3, r2
 800adb2:	613b      	str	r3, [r7, #16]
        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb8:	3322      	adds	r3, #34	@ 0x22
 800adba:	60fb      	str	r3, [r7, #12]
        /* How many: total length minus the options and the lower headers. */
        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	1ad3      	subs	r3, r2, r3
 800adc4:	3b22      	subs	r3, #34	@ 0x22
 800adc6:	60bb      	str	r3, [r7, #8]

        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 800adc8:	68ba      	ldr	r2, [r7, #8]
 800adca:	6939      	ldr	r1, [r7, #16]
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f018 fb7c 	bl	80234ca <memmove>
        pxNetworkBuffer->xDataLength -= optlen;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	1ad2      	subs	r2, r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	629a      	str	r2, [r3, #40]	@ 0x28
        /* Update the total length of the IP packet after removing options. */
        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 800adde:	6a3b      	ldr	r3, [r7, #32]
 800ade0:	885b      	ldrh	r3, [r3, #2]
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	021b      	lsls	r3, r3, #8
 800ade6:	b21a      	sxth	r2, r3
 800ade8:	6a3b      	ldr	r3, [r7, #32]
 800adea:	885b      	ldrh	r3, [r3, #2]
 800adec:	b29b      	uxth	r3, r3
 800adee:	0a1b      	lsrs	r3, r3, #8
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	b21b      	sxth	r3, r3
 800adf4:	4313      	orrs	r3, r2
 800adf6:	b21b      	sxth	r3, r3
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	021b      	lsls	r3, r3, #8
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	6a3b      	ldr	r3, [r7, #32]
 800ae08:	885b      	ldrh	r3, [r3, #2]
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	021b      	lsls	r3, r3, #8
 800ae0e:	b219      	sxth	r1, r3
 800ae10:	6a3b      	ldr	r3, [r7, #32]
 800ae12:	885b      	ldrh	r3, [r3, #2]
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	0a1b      	lsrs	r3, r3, #8
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	b21b      	sxth	r3, r3
 800ae1c:	430b      	orrs	r3, r1
 800ae1e:	b21b      	sxth	r3, r3
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	4619      	mov	r1, r3
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	1acb      	subs	r3, r1, r3
 800ae28:	0a1b      	lsrs	r3, r3, #8
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	6a3b      	ldr	r3, [r7, #32]
 800ae32:	805a      	strh	r2, [r3, #2]

        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
        pxIPHeader->ucVersionHeaderLength = ( uint8_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800ae34:	6a3b      	ldr	r3, [r7, #32]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	f023 030f 	bic.w	r3, r3, #15
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	f043 0305 	orr.w	r3, r3, #5
 800ae42:	b2da      	uxtb	r2, r3
 800ae44:	6a3b      	ldr	r3, [r7, #32]
 800ae46:	701a      	strb	r2, [r3, #0]
         * IP-options will be dropped. */
        eReturn = eReleaseBuffer;
    }
    #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */

    return eReturn;
 800ae48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3728      	adds	r7, #40	@ 0x28
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b088      	sub	sp, #32
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2b0f      	cmp	r3, #15
 800ae64:	d802      	bhi.n	800ae6c <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	61fb      	str	r3, [r7, #28]
 800ae6a:	e00e      	b.n	800ae8a <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800ae6c:	f107 0314 	add.w	r3, r7, #20
 800ae70:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	461a      	mov	r2, r3
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	68b9      	ldr	r1, [r7, #8]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f004 fac9 	bl	800f418 <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800ae8a:	69fb      	ldr	r3, [r7, #28]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3720      	adds	r7, #32
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <xSend_UDP_Update_IPv4>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
    UDPPacket_t * pxUDPPacket;

    if( ( pxNetworkBuffer != NULL ) && ( pxDestinationAddress != NULL ) )
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d010      	beq.n	800aec6 <xSend_UDP_Update_IPv4+0x32>
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00d      	beq.n	800aec6 <xSend_UDP_Update_IPv4+0x32>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeae:	60fb      	str	r3, [r7, #12]

        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxDestinationAddress->sin_address.ulIP_IPv4;
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	689a      	ldr	r2, [r3, #8]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	615a      	str	r2, [r3, #20]
        /* Map the UDP packet onto the start of the frame. */
        pxUDPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f042 0208 	orr.w	r2, r2, #8
 800aec0:	731a      	strb	r2, [r3, #12]
 800aec2:	2200      	movs	r2, #0
 800aec4:	735a      	strb	r2, [r3, #13]
    }

    return NULL;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3714      	adds	r7, #20
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress IP address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	061a      	lsls	r2, r3, #24
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	021b      	lsls	r3, r3, #8
 800aee6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800aeea:	431a      	orrs	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	0a1b      	lsrs	r3, r3, #8
 800aef0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800aef4:	431a      	orrs	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	0e1b      	lsrs	r3, r3, #24
 800aefa:	4313      	orrs	r3, r2
 800aefc:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	2201      	movs	r2, #1
 800af02:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	2200      	movs	r2, #0
 800af08:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	225e      	movs	r2, #94	@ 0x5e
 800af0e:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	0c1b      	lsrs	r3, r3, #16
 800af14:	b2db      	uxtb	r3, r3
 800af16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af1a:	b2da      	uxtb	r2, r3
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	0a1b      	lsrs	r3, r3, #8
 800af24:	b2da      	uxtb	r2, r3
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	b2da      	uxtb	r2, r3
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	715a      	strb	r2, [r3, #5]
}
 800af32:	bf00      	nop
 800af34:	3714      	adds	r7, #20
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
	...

0800af40 <xCheckIPv6SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv6SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800af40:	b580      	push	{r7, lr}
 800af42:	b08c      	sub	sp, #48	@ 0x30
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800af4a:	2300      	movs	r3, #0
 800af4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint16_t ucVersionTrafficClass;
        uint16_t usPayloadLength;
        uint8_t ucNextHeader;
        size_t uxMinimumLength;
        size_t uxExtHeaderLength = 0;
 800af4e:	2300      	movs	r3, #0
 800af50:	623b      	str	r3, [r7, #32]
        const IPExtHeader_IPv6_t * pxExtHeader = NULL;
 800af52:	2300      	movs	r3, #0
 800af54:	61bb      	str	r3, [r7, #24]
        const uint8_t * const pucEthernetBuffer = ( const uint8_t * const ) pvEthernetBuffer;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	617b      	str	r3, [r7, #20]

        /* Map the buffer onto a IPv6-Packet struct to easily access the
         * fields of the IPv6 packet. */
        const IPPacket_IPv6_t * const pxIPv6Packet = ( const IPPacket_IPv6_t * const ) pucEthernetBuffer;
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	613b      	str	r3, [r7, #16]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800af5e:	2300      	movs	r3, #0
 800af60:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IPv6-header, 54 bytes */
            if( uxBufferLength < sizeof( IPHeader_IPv6_t ) )
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	2b27      	cmp	r3, #39	@ 0x27
 800af66:	d802      	bhi.n	800af6e <xCheckIPv6SizeFields+0x2e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800af68:	2301      	movs	r3, #1
 800af6a:	61fb      	str	r3, [r7, #28]
                break;
 800af6c:	e098      	b.n	800b0a0 <xCheckIPv6SizeFields+0x160>
            }

            ucVersionTrafficClass = pxIPv6Packet->xIPHeader.ucVersionTrafficClass;
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	7b9b      	ldrb	r3, [r3, #14]
 800af72:	81fb      	strh	r3, [r7, #14]

            /* Test if the IP-version is 6. */
            if( ( ( ucVersionTrafficClass & ( uint8_t ) 0xF0U ) >> 4 ) != 6U )
 800af74:	89fb      	ldrh	r3, [r7, #14]
 800af76:	111b      	asrs	r3, r3, #4
 800af78:	f003 030f 	and.w	r3, r3, #15
 800af7c:	2b06      	cmp	r3, #6
 800af7e:	d002      	beq.n	800af86 <xCheckIPv6SizeFields+0x46>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800af80:	2302      	movs	r3, #2
 800af82:	61fb      	str	r3, [r7, #28]
                break;
 800af84:	e08c      	b.n	800b0a0 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the IPv6-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) )
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	2b35      	cmp	r3, #53	@ 0x35
 800af8a:	d802      	bhi.n	800af92 <xCheckIPv6SizeFields+0x52>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800af8c:	2303      	movs	r3, #3
 800af8e:	61fb      	str	r3, [r7, #28]
                break;
 800af90:	e086      	b.n	800b0a0 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the complete IPv6-header plus protocol data have been transferred: */
            usPayloadLength = FreeRTOS_ntohs( pxIPv6Packet->xIPHeader.usPayloadLength );
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	8a5b      	ldrh	r3, [r3, #18]
 800af96:	b29b      	uxth	r3, r3
 800af98:	021b      	lsls	r3, r3, #8
 800af9a:	b21a      	sxth	r2, r3
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	8a5b      	ldrh	r3, [r3, #18]
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	0a1b      	lsrs	r3, r3, #8
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	b21b      	sxth	r3, r3
 800afa8:	4313      	orrs	r3, r2
 800afaa:	b21b      	sxth	r3, r3
 800afac:	81bb      	strh	r3, [r7, #12]

            if( uxBufferLength != ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ( size_t ) usPayloadLength ) )
 800afae:	89bb      	ldrh	r3, [r7, #12]
 800afb0:	3336      	adds	r3, #54	@ 0x36
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d002      	beq.n	800afbe <xCheckIPv6SizeFields+0x7e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800afb8:	2304      	movs	r3, #4
 800afba:	61fb      	str	r3, [r7, #28]
                break;
 800afbc:	e070      	b.n	800b0a0 <xCheckIPv6SizeFields+0x160>
            }

            /* Identify the next protocol. */
            ucNextHeader = pxIPv6Packet->xIPHeader.ucNextHeader;
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	7d1b      	ldrb	r3, [r3, #20]
 800afc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            while( xIsExtHeader( ucNextHeader ) )
 800afc6:	e015      	b.n	800aff4 <xCheckIPv6SizeFields+0xb4>
            {
                pxExtHeader = ( const IPExtHeader_IPv6_t * ) ( &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength ] ) );
 800afc8:	6a3b      	ldr	r3, [r7, #32]
 800afca:	3336      	adds	r3, #54	@ 0x36
 800afcc:	697a      	ldr	r2, [r7, #20]
 800afce:	4413      	add	r3, r2
 800afd0:	61bb      	str	r3, [r7, #24]
                /* The definition of length in extension header - Length of this header in 8-octet units, not including the first 8 octets. */
                uxExtHeaderLength += ( size_t ) ( ( 8 * pxExtHeader->ucHeaderExtLength ) + 8 );
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	785b      	ldrb	r3, [r3, #1]
 800afd6:	3301      	adds	r3, #1
 800afd8:	00db      	lsls	r3, r3, #3
 800afda:	461a      	mov	r2, r3
 800afdc:	6a3b      	ldr	r3, [r7, #32]
 800afde:	4413      	add	r3, r2
 800afe0:	623b      	str	r3, [r7, #32]

                ucNextHeader = pxExtHeader->ucNextHeader;
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800afea:	6a3b      	ldr	r3, [r7, #32]
 800afec:	3336      	adds	r3, #54	@ 0x36
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d908      	bls.n	800b006 <xCheckIPv6SizeFields+0xc6>
            while( xIsExtHeader( ucNextHeader ) )
 800aff4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aff8:	4618      	mov	r0, r3
 800affa:	f000 f85f 	bl	800b0bc <xIsExtHeader>
 800affe:	4603      	mov	r3, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1e1      	bne.n	800afc8 <xCheckIPv6SizeFields+0x88>
 800b004:	e000      	b.n	800b008 <xCheckIPv6SizeFields+0xc8>
                {
                    break;
 800b006:	bf00      	nop
                }
            }

            if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800b008:	6a3b      	ldr	r3, [r7, #32]
 800b00a:	3336      	adds	r3, #54	@ 0x36
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d802      	bhi.n	800b018 <xCheckIPv6SizeFields+0xd8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800b012:	2307      	movs	r3, #7
 800b014:	61fb      	str	r3, [r7, #28]
                break;
 800b016:	e043      	b.n	800b0a0 <xCheckIPv6SizeFields+0x160>
            }

            /* Switch on the Layer 3/4 protocol. */
            if( ucNextHeader == ( uint8_t ) ipPROTOCOL_UDP )
 800b018:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b01c:	2b11      	cmp	r3, #17
 800b01e:	d103      	bne.n	800b028 <xCheckIPv6SizeFields+0xe8>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_UDP_HEADER;
 800b020:	6a3b      	ldr	r3, [r7, #32]
 800b022:	333e      	adds	r3, #62	@ 0x3e
 800b024:	627b      	str	r3, [r7, #36]	@ 0x24
 800b026:	e032      	b.n	800b08e <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_TCP )
 800b028:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b02c:	2b06      	cmp	r3, #6
 800b02e:	d103      	bne.n	800b038 <xCheckIPv6SizeFields+0xf8>
            {
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_TCP_HEADER;
 800b030:	6a3b      	ldr	r3, [r7, #32]
 800b032:	334a      	adds	r3, #74	@ 0x4a
 800b034:	627b      	str	r3, [r7, #36]	@ 0x24
 800b036:	e02a      	b.n	800b08e <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_ICMP_IPv6 )
 800b038:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b03c:	2b3a      	cmp	r3, #58	@ 0x3a
 800b03e:	d123      	bne.n	800b088 <xCheckIPv6SizeFields+0x148>
            {
                uint8_t ucTypeOfMessage;

                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength;
 800b040:	6a3b      	ldr	r3, [r7, #32]
 800b042:	3336      	adds	r3, #54	@ 0x36
 800b044:	627b      	str	r3, [r7, #36]	@ 0x24

                ucTypeOfMessage = pucEthernetBuffer[ uxMinimumLength ];
 800b046:	697a      	ldr	r2, [r7, #20]
 800b048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04a:	4413      	add	r3, r2
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	72fb      	strb	r3, [r7, #11]

                if( ( ucTypeOfMessage == ipICMP_PING_REQUEST_IPv6 ) ||
 800b050:	7afb      	ldrb	r3, [r7, #11]
 800b052:	2b80      	cmp	r3, #128	@ 0x80
 800b054:	d002      	beq.n	800b05c <xCheckIPv6SizeFields+0x11c>
 800b056:	7afb      	ldrb	r3, [r7, #11]
 800b058:	2b81      	cmp	r3, #129	@ 0x81
 800b05a:	d103      	bne.n	800b064 <xCheckIPv6SizeFields+0x124>
                    ( ucTypeOfMessage == ipICMP_PING_REPLY_IPv6 ) )
                {
                    uxMinimumLength += sizeof( ICMPEcho_IPv6_t );
 800b05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b05e:	3308      	adds	r3, #8
 800b060:	627b      	str	r3, [r7, #36]	@ 0x24
 800b062:	e014      	b.n	800b08e <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_SOLICITATION_IPv6 )
 800b064:	7afb      	ldrb	r3, [r7, #11]
 800b066:	2b85      	cmp	r3, #133	@ 0x85
 800b068:	d103      	bne.n	800b072 <xCheckIPv6SizeFields+0x132>
                {
                    uxMinimumLength += sizeof( ICMPRouterSolicitation_IPv6_t );
 800b06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06c:	3308      	adds	r3, #8
 800b06e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b070:	e00d      	b.n	800b08e <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_ADVERTISEMENT_IPv6 )
 800b072:	7afb      	ldrb	r3, [r7, #11]
 800b074:	2b86      	cmp	r3, #134	@ 0x86
 800b076:	d103      	bne.n	800b080 <xCheckIPv6SizeFields+0x140>
                {
                    uxMinimumLength += sizeof( ICMPRouterAdvertisement_IPv6_t );
 800b078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b07a:	3310      	adds	r3, #16
 800b07c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b07e:	e006      	b.n	800b08e <xCheckIPv6SizeFields+0x14e>
                }
                else
                {
                    uxMinimumLength += ipSIZE_OF_ICMPv6_HEADER;
 800b080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b082:	3318      	adds	r3, #24
 800b084:	627b      	str	r3, [r7, #36]	@ 0x24
 800b086:	e002      	b.n	800b08e <xCheckIPv6SizeFields+0x14e>
                }
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800b088:	2305      	movs	r3, #5
 800b08a:	61fb      	str	r3, [r7, #28]
                break;
 800b08c:	e008      	b.n	800b0a0 <xCheckIPv6SizeFields+0x160>
            }

            if( uxBufferLength < uxMinimumLength )
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b092:	429a      	cmp	r2, r3
 800b094:	d202      	bcs.n	800b09c <xCheckIPv6SizeFields+0x15c>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800b096:	2306      	movs	r3, #6
 800b098:	61fb      	str	r3, [r7, #28]
                break;
 800b09a:	e001      	b.n	800b0a0 <xCheckIPv6SizeFields+0x160>
            }

            xResult = pdPASS;
 800b09c:	2301      	movs	r3, #1
 800b09e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800b0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d003      	beq.n	800b0ae <xCheckIPv6SizeFields+0x16e>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv6SizeFields: location %ld\n", xLocation ) );
 800b0a6:	69f9      	ldr	r1, [r7, #28]
 800b0a8:	4803      	ldr	r0, [pc, #12]	@ (800b0b8 <xCheckIPv6SizeFields+0x178>)
 800b0aa:	f017 f84d 	bl	8022148 <lUDPLoggingPrintf>
        }

        return xResult;
 800b0ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3730      	adds	r7, #48	@ 0x30
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	08024fa4 	.word	0x08024fa4

0800b0bc <xIsExtHeader>:
 * @param[in] ucNextHeader Next header, such as ipIPv6_EXT_HEADER_HOP_BY_HOP.
 *
 * @return pdTRUE if it's extension header, otherwise pdFALSE.
 */
    static BaseType_t xIsExtHeader( uint8_t ucNextHeader )
    {
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	71fb      	strb	r3, [r7, #7]
        BaseType_t xReturn = pdFALSE;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60fb      	str	r3, [r7, #12]

        switch( ucNextHeader )
 800b0ca:	79fb      	ldrb	r3, [r7, #7]
 800b0cc:	2b87      	cmp	r3, #135	@ 0x87
 800b0ce:	d016      	beq.n	800b0fe <xIsExtHeader+0x42>
 800b0d0:	2b87      	cmp	r3, #135	@ 0x87
 800b0d2:	dc16      	bgt.n	800b102 <xIsExtHeader+0x46>
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d012      	beq.n	800b0fe <xIsExtHeader+0x42>
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	db12      	blt.n	800b102 <xIsExtHeader+0x46>
 800b0dc:	2b3c      	cmp	r3, #60	@ 0x3c
 800b0de:	dc10      	bgt.n	800b102 <xIsExtHeader+0x46>
 800b0e0:	2b2b      	cmp	r3, #43	@ 0x2b
 800b0e2:	db0e      	blt.n	800b102 <xIsExtHeader+0x46>
 800b0e4:	3b2b      	subs	r3, #43	@ 0x2b
 800b0e6:	4a0a      	ldr	r2, [pc, #40]	@ (800b110 <xIsExtHeader+0x54>)
 800b0e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ec:	f003 0301 	and.w	r3, r3, #1
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	bf14      	ite	ne
 800b0f4:	2301      	movne	r3, #1
 800b0f6:	2300      	moveq	r3, #0
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <xIsExtHeader+0x46>
            case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
                xReturn = pdTRUE;
 800b0fe:	2301      	movs	r3, #1
 800b100:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800b102:	68fb      	ldr	r3, [r7, #12]
    }
 800b104:	4618      	mov	r0, r3
 800b106:	3714      	adds	r7, #20
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr
 800b110:	00020183 	.word	0x00020183

0800b114 <xGetIPv6MulticastGroupID>:
 * @param[in] pxIPv6Address The multicast address to filter group ID.
 * @param[out] pxReturnGroupID The buffer to store group ID.
 */
static void xGetIPv6MulticastGroupID( const IPv6_Address_t * pxIPv6Address,
                                      IPv6_Address_t * pxReturnGroupID )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
    configASSERT( pxIPv6Address != NULL );
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d104      	bne.n	800b12e <xGetIPv6MulticastGroupID+0x1a>
 800b124:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800b128:	480e      	ldr	r0, [pc, #56]	@ (800b164 <xGetIPv6MulticastGroupID+0x50>)
 800b12a:	f7f6 fc15 	bl	8001958 <vAssertCalled>
    configASSERT( pxReturnGroupID != NULL );
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d104      	bne.n	800b13e <xGetIPv6MulticastGroupID+0x2a>
 800b134:	f240 1113 	movw	r1, #275	@ 0x113
 800b138:	480a      	ldr	r0, [pc, #40]	@ (800b164 <xGetIPv6MulticastGroupID+0x50>)
 800b13a:	f7f6 fc0d 	bl	8001958 <vAssertCalled>

    pxReturnGroupID->ucBytes[ 0 ] = 0U;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	2200      	movs	r2, #0
 800b142:	701a      	strb	r2, [r3, #0]
    pxReturnGroupID->ucBytes[ 1 ] = 0U;
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	2200      	movs	r2, #0
 800b148:	705a      	strb	r2, [r3, #1]
    ( void ) memcpy( &( pxReturnGroupID->ucBytes[ 2 ] ), &( pxIPv6Address->ucBytes[ 2 ] ), 14 );
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	1c98      	adds	r0, r3, #2
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	3302      	adds	r3, #2
 800b152:	220e      	movs	r2, #14
 800b154:	4619      	mov	r1, r3
 800b156:	f017 fa13 	bl	8022580 <memcpy>
}
 800b15a:	bf00      	nop
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	08024fc8 	.word	0x08024fc8

0800b168 <xIsIPv6Loopback>:
 * @param[in] pxAddress The IP-address being checked.
 *
 * @return pdTRUE if the IP-address is a loopback address or else, pdFALSE.
 */
BaseType_t xIsIPv6Loopback( const IPv6_Address_t * pxAddress )
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800b170:	2300      	movs	r3, #0
 800b172:	60fb      	str	r3, [r7, #12]

    if( memcmp( pxAddress->ucBytes, FreeRTOS_in6addr_loopback.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2210      	movs	r2, #16
 800b178:	4906      	ldr	r1, [pc, #24]	@ (800b194 <xIsIPv6Loopback+0x2c>)
 800b17a:	4618      	mov	r0, r3
 800b17c:	f018 f995 	bl	80234aa <memcmp>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d101      	bne.n	800b18a <xIsIPv6Loopback+0x22>
    {
        xReturn = pdTRUE;
 800b186:	2301      	movs	r3, #1
 800b188:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800b18a:	68fb      	ldr	r3, [r7, #12]
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	08027820 	.word	0x08027820

0800b198 <xIsIPv6AllowedMulticast>:
 * @param[in] pxIPAddress The IP address to be checked.
 *
 * @return Returns pdTRUE if pxIPAddress is an allowed multicast address, pdFALSE if not.
 */
BaseType_t xIsIPv6AllowedMulticast( const IPv6_Address_t * pxIPAddress )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b088      	sub	sp, #32
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	61fb      	str	r3, [r7, #28]
    IPv6_Address_t xGroupIDAddress;

    if( pxIPAddress->ucBytes[ 0 ] == 0xffU )
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	2bff      	cmp	r3, #255	@ 0xff
 800b1aa:	d123      	bne.n	800b1f4 <xIsIPv6AllowedMulticast+0x5c>
    {
        IPv6MC_GET_GROUP_ID( pxIPAddress, &xGroupIDAddress );
 800b1ac:	f107 030c 	add.w	r3, r7, #12
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f7ff ffae 	bl	800b114 <xGetIPv6MulticastGroupID>

        /* From RFC4291 - sec 2.7, packets from multicast address whose scope field is 0
         * should be silently dropped. */
        if( IPv6MC_GET_SCOPE_VALUE( pxIPAddress ) == 0U )
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	785b      	ldrb	r3, [r3, #1]
 800b1bc:	f003 030f 	and.w	r3, r3, #15
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d102      	bne.n	800b1ca <xIsIPv6AllowedMulticast+0x32>
        {
            xReturn = pdFALSE;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	61fb      	str	r3, [r7, #28]
 800b1c8:	e014      	b.n	800b1f4 <xIsIPv6AllowedMulticast+0x5c>
        /* From RFC4291 - sec 2.7.1, packets from predefined multicast address should never be used.
         * - 0xFF00::
         * - 0xFF01::
         * - ..
         * - 0xFF0F:: */
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	785b      	ldrb	r3, [r3, #1]
 800b1ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10c      	bne.n	800b1f0 <xIsIPv6AllowedMulticast+0x58>
                 ( memcmp( xGroupIDAddress.ucBytes, FreeRTOS_in6addr_any.ucBytes, sizeof( IPv6_Address_t ) ) == 0 ) )
 800b1d6:	f107 030c 	add.w	r3, r7, #12
 800b1da:	2210      	movs	r2, #16
 800b1dc:	4908      	ldr	r1, [pc, #32]	@ (800b200 <xIsIPv6AllowedMulticast+0x68>)
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f018 f963 	bl	80234aa <memcmp>
 800b1e4:	4603      	mov	r3, r0
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d102      	bne.n	800b1f0 <xIsIPv6AllowedMulticast+0x58>
        {
            xReturn = pdFALSE;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	61fb      	str	r3, [r7, #28]
 800b1ee:	e001      	b.n	800b1f4 <xIsIPv6AllowedMulticast+0x5c>
        }
        else
        {
            xReturn = pdTRUE;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800b1f4:	69fb      	ldr	r3, [r7, #28]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3720      	adds	r7, #32
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	08027810 	.word	0x08027810

0800b204 <xCompareIPv6_Address>:
 * @return Returns 0 if it can handle it, else non zero .
 */
BaseType_t xCompareIPv6_Address( const IPv6_Address_t * pxLeft,
                                 const IPv6_Address_t * pxRight,
                                 size_t uxPrefixLength )
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b08a      	sub	sp, #40	@ 0x28
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
    /* This variable is initialized by the system to contain the IPv6 multicast address for all nodes. */
    static const struct xIPv6_Address FreeRTOS_in6addr_allnodes = { { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } };

    /* 0    2    4    6    8    10   12   14 */
    /* ff02:0000:0000:0000:0000:0001:ff66:4a81 */
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	2bff      	cmp	r3, #255	@ 0xff
 800b216:	d112      	bne.n	800b23e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d10e      	bne.n	800b23e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 12 ] == 0xffU ) )
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	7b1b      	ldrb	r3, [r3, #12]
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800b224:	2bff      	cmp	r3, #255	@ 0xff
 800b226:	d10a      	bne.n	800b23e <xCompareIPv6_Address+0x3a>
    {
        /* This is an LLMNR address. */
        xResult = memcmp( &( pxLeft->ucBytes[ 13 ] ), &( pxRight->ucBytes[ 13 ] ), 3 );
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f103 000d 	add.w	r0, r3, #13
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	330d      	adds	r3, #13
 800b232:	2203      	movs	r2, #3
 800b234:	4619      	mov	r1, r3
 800b236:	f018 f938 	bl	80234aa <memcmp>
 800b23a:	6278      	str	r0, [r7, #36]	@ 0x24
 800b23c:	e069      	b.n	800b312 <xCompareIPv6_Address+0x10e>
    }
    else
    if( memcmp( pxRight->ucBytes, FreeRTOS_in6addr_allnodes.ucBytes, sizeof( IPv6_Address_t ) ) == 0 )
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	2210      	movs	r2, #16
 800b242:	4936      	ldr	r1, [pc, #216]	@ (800b31c <xCompareIPv6_Address+0x118>)
 800b244:	4618      	mov	r0, r3
 800b246:	f018 f930 	bl	80234aa <memcmp>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d102      	bne.n	800b256 <xCompareIPv6_Address+0x52>
    {
        /* FF02::1 is all node address to reach out all nodes in the same link. */
        xResult = 0;
 800b250:	2300      	movs	r3, #0
 800b252:	627b      	str	r3, [r7, #36]	@ 0x24
 800b254:	e05d      	b.n	800b312 <xCompareIPv6_Address+0x10e>
    }
    else
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	2bfe      	cmp	r3, #254	@ 0xfe
 800b25c:	d10e      	bne.n	800b27c <xCompareIPv6_Address+0x78>
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800b262:	2b80      	cmp	r3, #128	@ 0x80
 800b264:	d10a      	bne.n	800b27c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	781b      	ldrb	r3, [r3, #0]
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800b26a:	2bfe      	cmp	r3, #254	@ 0xfe
 800b26c:	d106      	bne.n	800b27c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 1 ] == 0x80U ) )
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	785b      	ldrb	r3, [r3, #1]
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800b272:	2b80      	cmp	r3, #128	@ 0x80
 800b274:	d102      	bne.n	800b27c <xCompareIPv6_Address+0x78>
    {
        /* Both are local addresses. */
        xResult = 0;
 800b276:	2300      	movs	r3, #0
 800b278:	627b      	str	r3, [r7, #36]	@ 0x24
 800b27a:	e04a      	b.n	800b312 <xCompareIPv6_Address+0x10e>
    }
    else
    {
        if( uxPrefixLength == 0U )
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d102      	bne.n	800b288 <xCompareIPv6_Address+0x84>
        {
            xResult = 0;
 800b282:	2300      	movs	r3, #0
 800b284:	627b      	str	r3, [r7, #36]	@ 0x24
 800b286:	e044      	b.n	800b312 <xCompareIPv6_Address+0x10e>
        }
        else if( uxPrefixLength == ( 8U * ipSIZE_OF_IPv6_ADDRESS ) )
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2b80      	cmp	r3, #128	@ 0x80
 800b28c:	d107      	bne.n	800b29e <xCompareIPv6_Address+0x9a>
        {
            xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	68b9      	ldr	r1, [r7, #8]
 800b292:	2210      	movs	r2, #16
 800b294:	4618      	mov	r0, r3
 800b296:	f018 f908 	bl	80234aa <memcmp>
 800b29a:	6278      	str	r0, [r7, #36]	@ 0x24
 800b29c:	e039      	b.n	800b312 <xCompareIPv6_Address+0x10e>
        }
        else
        {
            size_t uxLength = uxPrefixLength / 8U;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	08db      	lsrs	r3, r3, #3
 800b2a2:	623b      	str	r3, [r7, #32]

            xResult = 0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxLength > 0U )
 800b2a8:	6a3b      	ldr	r3, [r7, #32]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d006      	beq.n	800b2bc <xCompareIPv6_Address+0xb8>
            {
                xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, uxLength );
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	68b9      	ldr	r1, [r7, #8]
 800b2b2:	6a3a      	ldr	r2, [r7, #32]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f018 f8f8 	bl	80234aa <memcmp>
 800b2ba:	6278      	str	r0, [r7, #36]	@ 0x24
            }

            if( ( xResult == 0 ) && ( ( uxPrefixLength % 8U ) != 0U ) )
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d127      	bne.n	800b312 <xCompareIPv6_Address+0x10e>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f003 0307 	and.w	r3, r3, #7
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d022      	beq.n	800b312 <xCompareIPv6_Address+0x10e>
            {
                /* One byte has both a network- and a host-address. */
                size_t uxBits = uxPrefixLength % 8U;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f003 0307 	and.w	r3, r3, #7
 800b2d2:	61fb      	str	r3, [r7, #28]
                size_t uxHostLen = 8U - uxBits;
 800b2d4:	69fb      	ldr	r3, [r7, #28]
 800b2d6:	f1c3 0308 	rsb	r3, r3, #8
 800b2da:	61bb      	str	r3, [r7, #24]
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800b2dc:	2201      	movs	r2, #1
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	617b      	str	r3, [r7, #20]
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	43db      	mvns	r3, r3
 800b2ee:	74fb      	strb	r3, [r7, #19]

                if( ( pxLeft->ucBytes[ uxLength ] & ucNetMask ) != ( pxRight->ucBytes[ uxLength ] & ucNetMask ) )
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	6a3b      	ldr	r3, [r7, #32]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	781a      	ldrb	r2, [r3, #0]
 800b2f8:	68b9      	ldr	r1, [r7, #8]
 800b2fa:	6a3b      	ldr	r3, [r7, #32]
 800b2fc:	440b      	add	r3, r1
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	4053      	eors	r3, r2
 800b302:	b2da      	uxtb	r2, r3
 800b304:	7cfb      	ldrb	r3, [r7, #19]
 800b306:	4013      	ands	r3, r2
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d001      	beq.n	800b312 <xCompareIPv6_Address+0x10e>
                {
                    xResult = 1;
 800b30e:	2301      	movs	r3, #1
 800b310:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }
    }

    return xResult;
 800b312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b314:	4618      	mov	r0, r3
 800b316:	3728      	adds	r7, #40	@ 0x28
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	08027830 	.word	0x08027830

0800b320 <prvAllowIPPacketIPv6>:
 * @return Whether the packet should be processed or dropped.
 */
eFrameProcessingResult_t prvAllowIPPacketIPv6( const IPHeader_IPv6_t * const pxIPv6Header,
                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                               UBaseType_t uxHeaderLength )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	607a      	str	r2, [r7, #4]
    }
    #else /* if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) */
    {
        ( void ) pxIPv6Header;
        /* The packet has been checked by the network interface. */
        eReturn = eProcessBuffer;
 800b32c:	2301      	movs	r3, #1
 800b32e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800b330:	7dfb      	ldrb	r3, [r7, #23]
 800b332:	2b01      	cmp	r3, #1
 800b334:	d10c      	bne.n	800b350 <prvAllowIPPacketIPv6+0x30>
        {
            if( xCheckIPv6SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b33e:	4619      	mov	r1, r3
 800b340:	4610      	mov	r0, r2
 800b342:	f7ff fdfd 	bl	800af40 <xCheckIPv6SizeFields>
 800b346:	4603      	mov	r3, r0
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d001      	beq.n	800b350 <prvAllowIPPacketIPv6+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800b34c:	2300      	movs	r3, #0
 800b34e:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
    ( void ) uxHeaderLength;

    return eReturn;
 800b350:	7dfb      	ldrb	r3, [r7, #23]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3718      	adds	r7, #24
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
	...

0800b35c <xGetExtensionOrder>:
 *
 * @return Extension header order in the packet.
 */
BaseType_t xGetExtensionOrder( uint8_t ucProtocol,
                               uint8_t ucNextHeader )
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	4603      	mov	r3, r0
 800b364:	460a      	mov	r2, r1
 800b366:	71fb      	strb	r3, [r7, #7]
 800b368:	4613      	mov	r3, r2
 800b36a:	71bb      	strb	r3, [r7, #6]
    BaseType_t xReturn;

    switch( ucProtocol )
 800b36c:	79fb      	ldrb	r3, [r7, #7]
 800b36e:	2b87      	cmp	r3, #135	@ 0x87
 800b370:	d04b      	beq.n	800b40a <xGetExtensionOrder+0xae>
 800b372:	2b87      	cmp	r3, #135	@ 0x87
 800b374:	dc4c      	bgt.n	800b410 <xGetExtensionOrder+0xb4>
 800b376:	2b00      	cmp	r3, #0
 800b378:	d030      	beq.n	800b3dc <xGetExtensionOrder+0x80>
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	db48      	blt.n	800b410 <xGetExtensionOrder+0xb4>
 800b37e:	2b3c      	cmp	r3, #60	@ 0x3c
 800b380:	dc46      	bgt.n	800b410 <xGetExtensionOrder+0xb4>
 800b382:	2b2b      	cmp	r3, #43	@ 0x2b
 800b384:	db44      	blt.n	800b410 <xGetExtensionOrder+0xb4>
 800b386:	3b2b      	subs	r3, #43	@ 0x2b
 800b388:	2b11      	cmp	r3, #17
 800b38a:	d841      	bhi.n	800b410 <xGetExtensionOrder+0xb4>
 800b38c:	a201      	add	r2, pc, #4	@ (adr r2, 800b394 <xGetExtensionOrder+0x38>)
 800b38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b392:	bf00      	nop
 800b394:	0800b3f3 	.word	0x0800b3f3
 800b398:	0800b3f9 	.word	0x0800b3f9
 800b39c:	0800b411 	.word	0x0800b411
 800b3a0:	0800b411 	.word	0x0800b411
 800b3a4:	0800b411 	.word	0x0800b411
 800b3a8:	0800b411 	.word	0x0800b411
 800b3ac:	0800b411 	.word	0x0800b411
 800b3b0:	0800b405 	.word	0x0800b405
 800b3b4:	0800b3ff 	.word	0x0800b3ff
 800b3b8:	0800b411 	.word	0x0800b411
 800b3bc:	0800b411 	.word	0x0800b411
 800b3c0:	0800b411 	.word	0x0800b411
 800b3c4:	0800b411 	.word	0x0800b411
 800b3c8:	0800b411 	.word	0x0800b411
 800b3cc:	0800b411 	.word	0x0800b411
 800b3d0:	0800b411 	.word	0x0800b411
 800b3d4:	0800b411 	.word	0x0800b411
 800b3d8:	0800b3e3 	.word	0x0800b3e3
    {
        case ipIPv6_EXT_HEADER_HOP_BY_HOP:
            xReturn = 1;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	60fb      	str	r3, [r7, #12]
            break;
 800b3e0:	e01b      	b.n	800b41a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            xReturn = 7;
 800b3e2:	2307      	movs	r3, #7
 800b3e4:	60fb      	str	r3, [r7, #12]

            if( ucNextHeader == ipIPv6_EXT_HEADER_ROUTING_HEADER )
 800b3e6:	79bb      	ldrb	r3, [r7, #6]
 800b3e8:	2b2b      	cmp	r3, #43	@ 0x2b
 800b3ea:	d115      	bne.n	800b418 <xGetExtensionOrder+0xbc>
            {
                xReturn = 2;
 800b3ec:	2302      	movs	r3, #2
 800b3ee:	60fb      	str	r3, [r7, #12]
            }

            break;
 800b3f0:	e012      	b.n	800b418 <xGetExtensionOrder+0xbc>

        case ipIPv6_EXT_HEADER_ROUTING_HEADER:
            xReturn = 3;
 800b3f2:	2303      	movs	r3, #3
 800b3f4:	60fb      	str	r3, [r7, #12]
            break;
 800b3f6:	e010      	b.n	800b41a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            xReturn = 4;
 800b3f8:	2304      	movs	r3, #4
 800b3fa:	60fb      	str	r3, [r7, #12]
            break;
 800b3fc:	e00d      	b.n	800b41a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            xReturn = 5;
 800b3fe:	2305      	movs	r3, #5
 800b400:	60fb      	str	r3, [r7, #12]
            break;
 800b402:	e00a      	b.n	800b41a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            xReturn = 6;
 800b404:	2306      	movs	r3, #6
 800b406:	60fb      	str	r3, [r7, #12]
            break;
 800b408:	e007      	b.n	800b41a <xGetExtensionOrder+0xbe>

        /* Destination options may follow here in case there are no routing options. */
        case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
            xReturn = 8;
 800b40a:	2308      	movs	r3, #8
 800b40c:	60fb      	str	r3, [r7, #12]
            break;
 800b40e:	e004      	b.n	800b41a <xGetExtensionOrder+0xbe>

        default:
            xReturn = -1;
 800b410:	f04f 33ff 	mov.w	r3, #4294967295
 800b414:	60fb      	str	r3, [r7, #12]
            break;
 800b416:	e000      	b.n	800b41a <xGetExtensionOrder+0xbe>
            break;
 800b418:	bf00      	nop
    }

    return xReturn;
 800b41a:	68fb      	ldr	r3, [r7, #12]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3714      	adds	r7, #20
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <eHandleIPv6ExtensionHeaders>:
 * @return eProcessBuffer in case the options are removed successfully, otherwise
 *         eReleaseBuffer.
 */
eFrameProcessingResult_t eHandleIPv6ExtensionHeaders( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                      BaseType_t xDoRemove )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b08e      	sub	sp, #56	@ 0x38
 800b42c:	af02      	add	r7, sp, #8
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eResult = eReleaseBuffer;
 800b432:	2300      	movs	r3, #0
 800b434:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    const size_t uxMaxLength = pxNetworkBuffer->xDataLength;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b43c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b442:	623b      	str	r3, [r7, #32]
    size_t xMoveLen = 0U;
 800b444:	2300      	movs	r3, #0
 800b446:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxRemovedBytes = 0U;
 800b448:	2300      	movs	r3, #0
 800b44a:	61fb      	str	r3, [r7, #28]
    uint8_t ucNextHeader = 0U;
 800b44c:	2300      	movs	r3, #0
 800b44e:	72fb      	strb	r3, [r7, #11]
    size_t uxIndex = 0U;
 800b450:	2300      	movs	r3, #0
 800b452:	61bb      	str	r3, [r7, #24]

    uxRemovedBytes = usGetExtensionHeaderLength( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength, &ucNextHeader );
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b45c:	f107 020b 	add.w	r2, r7, #11
 800b460:	4619      	mov	r1, r3
 800b462:	f000 faa5 	bl	800b9b0 <usGetExtensionHeaderLength>
 800b466:	61f8      	str	r0, [r7, #28]
    uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxRemovedBytes;
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	3336      	adds	r3, #54	@ 0x36
 800b46c:	61bb      	str	r3, [r7, #24]

    if( uxIndex < uxMaxLength )
 800b46e:	69ba      	ldr	r2, [r7, #24]
 800b470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b472:	429a      	cmp	r2, r3
 800b474:	d243      	bcs.n	800b4fe <eHandleIPv6ExtensionHeaders+0xd6>
    {
        uint8_t * pucTo;
        const uint8_t * pucFrom;
        uint16_t usPayloadLength = FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength );
 800b476:	6a3b      	ldr	r3, [r7, #32]
 800b478:	8a5b      	ldrh	r3, [r3, #18]
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	021b      	lsls	r3, r3, #8
 800b47e:	b21a      	sxth	r2, r3
 800b480:	6a3b      	ldr	r3, [r7, #32]
 800b482:	8a5b      	ldrh	r3, [r3, #18]
 800b484:	b29b      	uxth	r3, r3
 800b486:	0a1b      	lsrs	r3, r3, #8
 800b488:	b29b      	uxth	r3, r3
 800b48a:	b21b      	sxth	r3, r3
 800b48c:	4313      	orrs	r3, r2
 800b48e:	b21b      	sxth	r3, r3
 800b490:	82fb      	strh	r3, [r7, #22]

        if( uxRemovedBytes >= ( size_t ) usPayloadLength )
 800b492:	8afb      	ldrh	r3, [r7, #22]
 800b494:	69fa      	ldr	r2, [r7, #28]
 800b496:	429a      	cmp	r2, r3
 800b498:	d231      	bcs.n	800b4fe <eHandleIPv6ExtensionHeaders+0xd6>
        {
            /* Can not remove more bytes than the payload length. */
        }
        else if( xDoRemove == pdTRUE )
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d12e      	bne.n	800b4fe <eHandleIPv6ExtensionHeaders+0xd6>
        {
            pxIPPacket_IPv6->xIPHeader.ucNextHeader = ucNextHeader;
 800b4a0:	7afa      	ldrb	r2, [r7, #11]
 800b4a2:	6a3b      	ldr	r3, [r7, #32]
 800b4a4:	751a      	strb	r2, [r3, #20]
            pucTo = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] );
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4aa:	3336      	adds	r3, #54	@ 0x36
 800b4ac:	613b      	str	r3, [r7, #16]
            pucFrom = &( pxNetworkBuffer->pucEthernetBuffer[ uxIndex ] );
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	60fb      	str	r3, [r7, #12]
            xMoveLen = uxMaxLength - uxIndex;
 800b4b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memmove( pucTo, pucFrom, xMoveLen );
 800b4c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4c2:	68f9      	ldr	r1, [r7, #12]
 800b4c4:	6938      	ldr	r0, [r7, #16]
 800b4c6:	f018 f800 	bl	80234ca <memmove>
            pxNetworkBuffer->xDataLength -= uxRemovedBytes;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	1ad2      	subs	r2, r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	629a      	str	r2, [r3, #40]	@ 0x28

            usPayloadLength = ( uint16_t ) ( usPayloadLength - uxRemovedBytes );
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	8afa      	ldrh	r2, [r7, #22]
 800b4dc:	1ad3      	subs	r3, r2, r3
 800b4de:	82fb      	strh	r3, [r7, #22]
            pxIPPacket_IPv6->xIPHeader.usPayloadLength = FreeRTOS_htons( usPayloadLength );
 800b4e0:	8afb      	ldrh	r3, [r7, #22]
 800b4e2:	021b      	lsls	r3, r3, #8
 800b4e4:	b21a      	sxth	r2, r3
 800b4e6:	8afb      	ldrh	r3, [r7, #22]
 800b4e8:	0a1b      	lsrs	r3, r3, #8
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	b21b      	sxth	r3, r3
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	b21b      	sxth	r3, r3
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	6a3b      	ldr	r3, [r7, #32]
 800b4f6:	825a      	strh	r2, [r3, #18]
            eResult = eProcessBuffer;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* xDoRemove is false, so the function is not supposed to
             * remove extension headers. */
        }
    }

    FreeRTOS_printf( ( "Extension headers : %s Truncated %u bytes. Removed %u, Payload %u xDataLength now %u\n",
 800b4fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b502:	2b01      	cmp	r3, #1
 800b504:	d101      	bne.n	800b50a <eHandleIPv6ExtensionHeaders+0xe2>
 800b506:	4910      	ldr	r1, [pc, #64]	@ (800b548 <eHandleIPv6ExtensionHeaders+0x120>)
 800b508:	e000      	b.n	800b50c <eHandleIPv6ExtensionHeaders+0xe4>
 800b50a:	4910      	ldr	r1, [pc, #64]	@ (800b54c <eHandleIPv6ExtensionHeaders+0x124>)
 800b50c:	6a3b      	ldr	r3, [r7, #32]
 800b50e:	8a5b      	ldrh	r3, [r3, #18]
 800b510:	b29b      	uxth	r3, r3
 800b512:	021b      	lsls	r3, r3, #8
 800b514:	b21a      	sxth	r2, r3
 800b516:	6a3b      	ldr	r3, [r7, #32]
 800b518:	8a5b      	ldrh	r3, [r3, #18]
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	0a1b      	lsrs	r3, r3, #8
 800b51e:	b29b      	uxth	r3, r3
 800b520:	b21b      	sxth	r3, r3
 800b522:	4313      	orrs	r3, r2
 800b524:	b21b      	sxth	r3, r3
 800b526:	b29b      	uxth	r3, r3
 800b528:	461a      	mov	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b52e:	9301      	str	r3, [sp, #4]
 800b530:	9200      	str	r2, [sp, #0]
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b536:	4806      	ldr	r0, [pc, #24]	@ (800b550 <eHandleIPv6ExtensionHeaders+0x128>)
 800b538:	f016 fe06 	bl	8022148 <lUDPLoggingPrintf>
                       ( eResult == eProcessBuffer ) ? "good" : "bad",
                       ( unsigned ) xMoveLen,
                       ( unsigned ) uxRemovedBytes,
                       FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength ),
                       ( unsigned ) pxNetworkBuffer->xDataLength ) );
    return eResult;
 800b53c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b540:	4618      	mov	r0, r3
 800b542:	3730      	adds	r7, #48	@ 0x30
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	08024ff8 	.word	0x08024ff8
 800b54c:	08025000 	.word	0x08025000
 800b550:	08025004 	.word	0x08025004

0800b554 <pxTCPSocketLookup_IPv6>:
 * @param[in] pxAddress The IPv4/IPv6 address.
 * @return The socket in case it is connected to the remote IP-address.
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup_IPv6( FreeRTOS_Socket_t * pxSocket,
                                                const IPv46_Address_t * pxAddress )
    {
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxResult = NULL;
 800b55e:	2300      	movs	r3, #0
 800b560:	60fb      	str	r3, [r7, #12]

        if( ( pxSocket != NULL ) && ( pxAddress != NULL ) )
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d026      	beq.n	800b5b6 <pxTCPSocketLookup_IPv6+0x62>
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d023      	beq.n	800b5b6 <pxTCPSocketLookup_IPv6+0x62>
        {
            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	7a1b      	ldrb	r3, [r3, #8]
 800b572:	f003 0301 	and.w	r3, r3, #1
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d010      	beq.n	800b59e <pxTCPSocketLookup_IPv6+0x4a>
            {
                if( pxAddress->xIs_IPv6 != pdFALSE )
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d018      	beq.n	800b5b6 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( memcmp( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	3354      	adds	r3, #84	@ 0x54
 800b588:	6839      	ldr	r1, [r7, #0]
 800b58a:	2210      	movs	r2, #16
 800b58c:	4618      	mov	r0, r3
 800b58e:	f017 ff8c 	bl	80234aa <memcmp>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d10e      	bne.n	800b5b6 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	60fb      	str	r3, [r7, #12]
 800b59c:	e00b      	b.n	800b5b6 <pxTCPSocketLookup_IPv6+0x62>
                    }
                }
            }
            else
            {
                if( pxAddress->xIs_IPv6 == pdFALSE )
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d107      	bne.n	800b5b6 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == pxAddress->xIPAddress.ulIP_IPv4 )
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d101      	bne.n	800b5b6 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	60fb      	str	r3, [r7, #12]
                    }
                }
            }
        }

        return pxResult;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
    }
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <xSend_UDP_Update_IPv6>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    UDPPacket_IPv6_t * pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ce:	60fb      	str	r3, [r7, #12]

    pxNetworkBuffer->xIPAddress.ulIP_IPv4 = 0U;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	615a      	str	r2, [r3, #20]

    configASSERT( pxDestinationAddress != NULL );
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d103      	bne.n	800b5e4 <xSend_UDP_Update_IPv6+0x24>
 800b5dc:	2173      	movs	r1, #115	@ 0x73
 800b5de:	4811      	ldr	r0, [pc, #68]	@ (800b624 <xSend_UDP_Update_IPv6+0x64>)
 800b5e0:	f7f6 f9ba 	bl	8001958 <vAssertCalled>
    ( void ) memcpy( pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	3308      	adds	r3, #8
 800b5ee:	2210      	movs	r2, #16
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	f016 ffc5 	bl	8022580 <memcpy>
    ( void ) memcpy( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f103 0014 	add.w	r0, r3, #20
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	3308      	adds	r3, #8
 800b600:	2210      	movs	r2, #16
 800b602:	4619      	mov	r1, r3
 800b604:	f016 ffbc 	bl	8022580 <memcpy>
    pxUDPPacket_IPv6->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800b610:	731a      	strb	r2, [r3, #12]
 800b612:	2200      	movs	r2, #0
 800b614:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800b618:	735a      	strb	r2, [r3, #13]

    return NULL;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	0802505c 	.word	0x0802505c

0800b628 <cHexToChar>:
 * @brief Converts a 4 bit (nibble) value to a readable hex character, e.g. 14 becomes 'e'.
 * @param usValue  The value to be converted, must be between 0 and 15.
 * @return The character, between '0' and '9', or between 'a' and 'f'.
 */
char cHexToChar( uint16_t usValue )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	4603      	mov	r3, r0
 800b630:	80fb      	strh	r3, [r7, #6]
    char cReturn = '0';
 800b632:	2330      	movs	r3, #48	@ 0x30
 800b634:	73fb      	strb	r3, [r7, #15]

    if( usValue <= 9U )
 800b636:	88fb      	ldrh	r3, [r7, #6]
 800b638:	2b09      	cmp	r3, #9
 800b63a:	d805      	bhi.n	800b648 <cHexToChar+0x20>
    {
        cReturn = ( char ) ( cReturn + usValue );
 800b63c:	88fb      	ldrh	r3, [r7, #6]
 800b63e:	b2da      	uxtb	r2, r3
 800b640:	7bfb      	ldrb	r3, [r7, #15]
 800b642:	4413      	add	r3, r2
 800b644:	73fb      	strb	r3, [r7, #15]
 800b646:	e010      	b.n	800b66a <cHexToChar+0x42>
    }
    else if( usValue <= 15U )
 800b648:	88fb      	ldrh	r3, [r7, #6]
 800b64a:	2b0f      	cmp	r3, #15
 800b64c:	d809      	bhi.n	800b662 <cHexToChar+0x3a>
    {
        cReturn = 'a';
 800b64e:	2361      	movs	r3, #97	@ 0x61
 800b650:	73fb      	strb	r3, [r7, #15]
        cReturn = ( char ) ( cReturn + ( usValue - ( uint16_t ) 10 ) );
 800b652:	88fb      	ldrh	r3, [r7, #6]
 800b654:	b2da      	uxtb	r2, r3
 800b656:	7bfb      	ldrb	r3, [r7, #15]
 800b658:	4413      	add	r3, r2
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	3b0a      	subs	r3, #10
 800b65e:	73fb      	strb	r3, [r7, #15]
 800b660:	e003      	b.n	800b66a <cHexToChar+0x42>
    }
    else
    {
        /* The value passed to 'usValue' has been and-ed with 0x0f,
         * so this else clause should never be reached. */
        configASSERT( 0 == 1 );
 800b662:	21b3      	movs	r1, #179	@ 0xb3
 800b664:	4803      	ldr	r0, [pc, #12]	@ (800b674 <cHexToChar+0x4c>)
 800b666:	f7f6 f977 	bl	8001958 <vAssertCalled>
    }

    return cReturn;
 800b66a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3710      	adds	r7, #16
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	0802505c 	.word	0x0802505c

0800b678 <uxHexPrintShort>:
 * @return The number of bytes written to 'pcBuffer'.
 */
socklen_t uxHexPrintShort( char * pcBuffer,
                           size_t uxBufferSize,
                           uint16_t usValue )
{
 800b678:	b590      	push	{r4, r7, lr}
 800b67a:	b08b      	sub	sp, #44	@ 0x2c
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	4613      	mov	r3, r2
 800b684:	80fb      	strh	r3, [r7, #6]
    const size_t uxNibbleCount = 4U;
 800b686:	2304      	movs	r3, #4
 800b688:	617b      	str	r3, [r7, #20]
    size_t uxNibble;
    socklen_t uxIndex = 0U;
 800b68a:	2300      	movs	r3, #0
 800b68c:	623b      	str	r3, [r7, #32]
    uint16_t usShifter = usValue;
 800b68e:	88fb      	ldrh	r3, [r7, #6]
 800b690:	83fb      	strh	r3, [r7, #30]
    BaseType_t xHadNonZero = pdFALSE;
 800b692:	2300      	movs	r3, #0
 800b694:	61bb      	str	r3, [r7, #24]

    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800b696:	2300      	movs	r3, #0
 800b698:	627b      	str	r3, [r7, #36]	@ 0x24
 800b69a:	e026      	b.n	800b6ea <uxHexPrintShort+0x72>
    {
        uint16_t usNibble = ( usShifter >> 12 ) & 0x0FU;
 800b69c:	8bfb      	ldrh	r3, [r7, #30]
 800b69e:	0b1b      	lsrs	r3, r3, #12
 800b6a0:	827b      	strh	r3, [r7, #18]

        if( usNibble != 0U )
 800b6a2:	8a7b      	ldrh	r3, [r7, #18]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <uxHexPrintShort+0x34>
        {
            xHadNonZero = pdTRUE;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	61bb      	str	r3, [r7, #24]
        }

        if( ( xHadNonZero != pdFALSE ) || ( uxNibble == ( uxNibbleCount - 1U ) ) )
 800b6ac:	69bb      	ldr	r3, [r7, #24]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d104      	bne.n	800b6bc <uxHexPrintShort+0x44>
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d110      	bne.n	800b6de <uxHexPrintShort+0x66>
        {
            if( uxIndex >= ( uxBufferSize - 1U ) )
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	6a3a      	ldr	r2, [r7, #32]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d216      	bcs.n	800b6f4 <uxHexPrintShort+0x7c>
            {
                break;
            }

            pcBuffer[ uxIndex ] = cHexToChar( usNibble );
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	6a3b      	ldr	r3, [r7, #32]
 800b6ca:	18d4      	adds	r4, r2, r3
 800b6cc:	8a7b      	ldrh	r3, [r7, #18]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7ff ffaa 	bl	800b628 <cHexToChar>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	7023      	strb	r3, [r4, #0]
            uxIndex++;
 800b6d8:	6a3b      	ldr	r3, [r7, #32]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	623b      	str	r3, [r7, #32]
        }

        usShifter = ( uint16_t ) ( usShifter << 4 );
 800b6de:	8bfb      	ldrh	r3, [r7, #30]
 800b6e0:	011b      	lsls	r3, r3, #4
 800b6e2:	83fb      	strh	r3, [r7, #30]
    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d3d4      	bcc.n	800b69c <uxHexPrintShort+0x24>
 800b6f2:	e000      	b.n	800b6f6 <uxHexPrintShort+0x7e>
                break;
 800b6f4:	bf00      	nop
    }

    return uxIndex;
 800b6f6:	6a3b      	ldr	r3, [r7, #32]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	372c      	adds	r7, #44	@ 0x2c
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd90      	pop	{r4, r7, pc}

0800b700 <prv_ntop6_search_zeros>:
 * @brief Scan the binary IPv6 address and find the longest train of consecutive zero's.
 *        The result of this search will be stored in 'xZeroStart' and 'xZeroLength'.
 * @param pxSet the set of parameters as used by FreeRTOS_inet_ntop6().
 */
void prv_ntop6_search_zeros( struct sNTOP6_Set * pxSet )
{
 800b700:	b480      	push	{r7}
 800b702:	b089      	sub	sp, #36	@ 0x24
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
    BaseType_t xIndex = 0;            /* The index in the IPv6 address: 0..7. */
 800b708:	2300      	movs	r3, #0
 800b70a:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurStart = 0;         /* The position of the first zero found so far. */
 800b70c:	2300      	movs	r3, #0
 800b70e:	61bb      	str	r3, [r7, #24]
    BaseType_t xCurLength = 0;        /* The number of zero's seen so far. */
 800b710:	2300      	movs	r3, #0
 800b712:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800b714:	2308      	movs	r3, #8
 800b716:	613b      	str	r3, [r7, #16]

    /* Default: when xZeroStart is negative, it won't match with any xIndex. */
    pxSet->xZeroStart = -1;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f04f 32ff 	mov.w	r2, #4294967295
 800b71e:	605a      	str	r2, [r3, #4]

    /* Look for the longest train of zero's 0:0:0:... */
    for( ; xIndex < xShortCount; xIndex++ )
 800b720:	e02c      	b.n	800b77c <prv_ntop6_search_zeros+0x7c>
    {
        uint16_t usValue = pxSet->pusAddress[ xIndex ];
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	005b      	lsls	r3, r3, #1
 800b72a:	4413      	add	r3, r2
 800b72c:	881b      	ldrh	r3, [r3, #0]
 800b72e:	81fb      	strh	r3, [r7, #14]

        if( usValue == 0U )
 800b730:	89fb      	ldrh	r3, [r7, #14]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d107      	bne.n	800b746 <prv_ntop6_search_zeros+0x46>
        {
            if( xCurLength == 0 )
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d101      	bne.n	800b740 <prv_ntop6_search_zeros+0x40>
            {
                /* Remember the position of the first zero. */
                xCurStart = xIndex;
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	61bb      	str	r3, [r7, #24]
            }

            /* Count consecutive zeros. */
            xCurLength++;
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	3301      	adds	r3, #1
 800b744:	617b      	str	r3, [r7, #20]
        }

        if( ( usValue != 0U ) || ( xIndex == ( xShortCount - 1 ) ) )
 800b746:	89fb      	ldrh	r3, [r7, #14]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d104      	bne.n	800b756 <prv_ntop6_search_zeros+0x56>
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	3b01      	subs	r3, #1
 800b750:	69fa      	ldr	r2, [r7, #28]
 800b752:	429a      	cmp	r2, r3
 800b754:	d10f      	bne.n	800b776 <prv_ntop6_search_zeros+0x76>
        {
            /* Has a longer train of zero's been found? */
            if( ( xCurLength > 1 ) && ( pxSet->xZeroLength < xCurLength ) )
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	dd0a      	ble.n	800b772 <prv_ntop6_search_zeros+0x72>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	697a      	ldr	r2, [r7, #20]
 800b762:	429a      	cmp	r2, r3
 800b764:	dd05      	ble.n	800b772 <prv_ntop6_search_zeros+0x72>
            {
                /* Remember the number of consecutive zeros. */
                pxSet->xZeroLength = xCurLength;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	697a      	ldr	r2, [r7, #20]
 800b76a:	609a      	str	r2, [r3, #8]
                /* Remember the index of the first zero found. */
                pxSet->xZeroStart = xCurStart;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	69ba      	ldr	r2, [r7, #24]
 800b770:	605a      	str	r2, [r3, #4]
            }

            /* Reset the counter of consecutive zeros. */
            xCurLength = 0;
 800b772:	2300      	movs	r3, #0
 800b774:	617b      	str	r3, [r7, #20]
    for( ; xIndex < xShortCount; xIndex++ )
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	3301      	adds	r3, #1
 800b77a:	61fb      	str	r3, [r7, #28]
 800b77c:	69fa      	ldr	r2, [r7, #28]
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	429a      	cmp	r2, r3
 800b782:	dbce      	blt.n	800b722 <prv_ntop6_search_zeros+0x22>
        }
    }
}
 800b784:	bf00      	nop
 800b786:	bf00      	nop
 800b788:	3724      	adds	r7, #36	@ 0x24
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <prv_ntop6_write_zeros>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_zeros( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800b792:	b480      	push	{r7}
 800b794:	b087      	sub	sp, #28
 800b796:	af00      	add	r7, sp, #0
 800b798:	60f8      	str	r0, [r7, #12]
 800b79a:	60b9      	str	r1, [r7, #8]
 800b79c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdPASS;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800b7a2:	2308      	movs	r3, #8
 800b7a4:	613b      	str	r3, [r7, #16]

    if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	691a      	ldr	r2, [r3, #16]
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	3b01      	subs	r3, #1
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d827      	bhi.n	800b802 <prv_ntop6_write_zeros+0x70>
    {
        pcDestination[ pxSet->uxTargetIndex ] = ':';
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	223a      	movs	r2, #58	@ 0x3a
 800b7bc:	701a      	strb	r2, [r3, #0]
        pxSet->uxTargetIndex++;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	691b      	ldr	r3, [r3, #16]
 800b7c2:	1c5a      	adds	r2, r3, #1
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	611a      	str	r2, [r3, #16]

        if( ( pxSet->xIndex + pxSet->xZeroLength ) == xShortCount )
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	68da      	ldr	r2, [r3, #12]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	693a      	ldr	r2, [r7, #16]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d116      	bne.n	800b806 <prv_ntop6_write_zeros+0x74>
        {
            /* Reached the last index, write a second ":". */
            if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	691a      	ldr	r2, [r3, #16]
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d80b      	bhi.n	800b7fc <prv_ntop6_write_zeros+0x6a>
            {
                pcDestination[ pxSet->uxTargetIndex ] = ':';
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	691b      	ldr	r3, [r3, #16]
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	223a      	movs	r2, #58	@ 0x3a
 800b7ee:	701a      	strb	r2, [r3, #0]
                pxSet->uxTargetIndex++;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	691b      	ldr	r3, [r3, #16]
 800b7f4:	1c5a      	adds	r2, r3, #1
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	611a      	str	r2, [r3, #16]
 800b7fa:	e004      	b.n	800b806 <prv_ntop6_write_zeros+0x74>
            }
            else
            {
                /* Can not write the second colon. */
                xReturn = pdFAIL;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	617b      	str	r3, [r7, #20]
 800b800:	e001      	b.n	800b806 <prv_ntop6_write_zeros+0x74>
        }
    }
    else
    {
        /* Can not write the first colon. */
        xReturn = pdFAIL;
 800b802:	2300      	movs	r3, #0
 800b804:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800b806:	697b      	ldr	r3, [r7, #20]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	371c      	adds	r7, #28
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <prv_ntop6_write_short>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_short( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800b814:	b590      	push	{r4, r7, lr}
 800b816:	b089      	sub	sp, #36	@ 0x24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
    socklen_t uxLength;
    BaseType_t xReturn = pdPASS;
 800b820:	2301      	movs	r3, #1
 800b822:	61fb      	str	r3, [r7, #28]
    const size_t uxBytesPerShortValue = 4U;
 800b824:	2304      	movs	r3, #4
 800b826:	61bb      	str	r3, [r7, #24]

    if( pxSet->xIndex > 0 )
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	dd13      	ble.n	800b858 <prv_ntop6_write_short+0x44>
    {
        if( pxSet->uxTargetIndex >= ( uxSize - 1U ) )
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	691a      	ldr	r2, [r3, #16]
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	3b01      	subs	r3, #1
 800b838:	429a      	cmp	r2, r3
 800b83a:	d302      	bcc.n	800b842 <prv_ntop6_write_short+0x2e>
        {
            xReturn = pdFAIL;
 800b83c:	2300      	movs	r3, #0
 800b83e:	61fb      	str	r3, [r7, #28]
 800b840:	e00a      	b.n	800b858 <prv_ntop6_write_short+0x44>
        }
        else
        {
            pcDestination[ pxSet->uxTargetIndex ] = ':';
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	68fa      	ldr	r2, [r7, #12]
 800b848:	4413      	add	r3, r2
 800b84a:	223a      	movs	r2, #58	@ 0x3a
 800b84c:	701a      	strb	r2, [r3, #0]
            pxSet->uxTargetIndex++;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	1c5a      	adds	r2, r3, #1
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	611a      	str	r2, [r3, #16]
        }
    }

    if( xReturn == pdPASS )
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d130      	bne.n	800b8c0 <prv_ntop6_write_short+0xac>
    {
        /* If there is enough space to write a short. */
        if( pxSet->uxTargetIndex <= ( uxSize - uxBytesPerShortValue ) )
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	691a      	ldr	r2, [r3, #16]
 800b862:	68b9      	ldr	r1, [r7, #8]
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	1acb      	subs	r3, r1, r3
 800b868:	429a      	cmp	r2, r3
 800b86a:	d827      	bhi.n	800b8bc <prv_ntop6_write_short+0xa8>
        {
            /* Write hex value of short. at most 4 + 1 bytes. */
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	691b      	ldr	r3, [r3, #16]
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	18d0      	adds	r0, r2, r3
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	1c5c      	adds	r4, r3, #1
                                        uxBytesPerShortValue + 1U,
                                        FreeRTOS_ntohs( pxSet->pusAddress[ pxSet->xIndex ] ) );
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	005b      	lsls	r3, r3, #1
 800b882:	4413      	add	r3, r2
 800b884:	881b      	ldrh	r3, [r3, #0]
 800b886:	021b      	lsls	r3, r3, #8
 800b888:	b21a      	sxth	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6819      	ldr	r1, [r3, #0]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	005b      	lsls	r3, r3, #1
 800b894:	440b      	add	r3, r1
 800b896:	881b      	ldrh	r3, [r3, #0]
 800b898:	0a1b      	lsrs	r3, r3, #8
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	b21b      	sxth	r3, r3
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	b21b      	sxth	r3, r3
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	4621      	mov	r1, r4
 800b8a8:	f7ff fee6 	bl	800b678 <uxHexPrintShort>
 800b8ac:	6178      	str	r0, [r7, #20]

            /* uxLength will be non zero and positive always. */
            pxSet->uxTargetIndex += uxLength;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	691a      	ldr	r2, [r3, #16]
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	441a      	add	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	611a      	str	r2, [r3, #16]
 800b8ba:	e001      	b.n	800b8c0 <prv_ntop6_write_short+0xac>
        }
        else
        {
            xReturn = pdFAIL;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800b8c0:	69fb      	ldr	r3, [r7, #28]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3724      	adds	r7, #36	@ 0x24
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd90      	pop	{r4, r7, pc}

0800b8ca <FreeRTOS_inet_ntop6>:
 * @return pdPASS if the translation was successful or else pdFAIL.
 */
const char * FreeRTOS_inet_ntop6( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b08a      	sub	sp, #40	@ 0x28
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	60f8      	str	r0, [r7, #12]
 800b8d2:	60b9      	str	r1, [r7, #8]
 800b8d4:	607a      	str	r2, [r7, #4]
    const char * pcReturn;  /* The return value, which is either 'pcDestination' or NULL. */
    struct sNTOP6_Set xSet; /* A set of values for easy exchange with the helper functions prv_ntop6_xxx(). */

    ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800b8d6:	f107 0310 	add.w	r3, r7, #16
 800b8da:	2214      	movs	r2, #20
 800b8dc:	2100      	movs	r1, #0
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f016 ff5b 	bl	802279a <memset>

    xSet.pusAddress = pvSource;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	613b      	str	r3, [r7, #16]

    if( uxSize < 3U )
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b02      	cmp	r3, #2
 800b8ec:	d92c      	bls.n	800b948 <FreeRTOS_inet_ntop6+0x7e>
    {
        /* Can not even print :: */
    }
    else
    {
        prv_ntop6_search_zeros( &( xSet ) );
 800b8ee:	f107 0310 	add.w	r3, r7, #16
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff ff04 	bl	800b700 <prv_ntop6_search_zeros>

        while( xSet.xIndex < 8 )
 800b8f8:	e01f      	b.n	800b93a <FreeRTOS_inet_ntop6+0x70>
        {
            if( xSet.xIndex == xSet.xZeroStart )
 800b8fa:	69fa      	ldr	r2, [r7, #28]
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d10e      	bne.n	800b920 <FreeRTOS_inet_ntop6+0x56>
            {
                if( prv_ntop6_write_zeros( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800b902:	f107 0310 	add.w	r3, r7, #16
 800b906:	461a      	mov	r2, r3
 800b908:	6879      	ldr	r1, [r7, #4]
 800b90a:	68b8      	ldr	r0, [r7, #8]
 800b90c:	f7ff ff41 	bl	800b792 <prv_ntop6_write_zeros>
 800b910:	4603      	mov	r3, r0
 800b912:	2b00      	cmp	r3, #0
 800b914:	d015      	beq.n	800b942 <FreeRTOS_inet_ntop6+0x78>
                {
                    break;
                }

                xSet.xIndex += xSet.xZeroLength;
 800b916:	69fa      	ldr	r2, [r7, #28]
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	4413      	add	r3, r2
 800b91c:	61fb      	str	r3, [r7, #28]
 800b91e:	e00c      	b.n	800b93a <FreeRTOS_inet_ntop6+0x70>
            }
            else
            {
                if( prv_ntop6_write_short( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800b920:	f107 0310 	add.w	r3, r7, #16
 800b924:	461a      	mov	r2, r3
 800b926:	6879      	ldr	r1, [r7, #4]
 800b928:	68b8      	ldr	r0, [r7, #8]
 800b92a:	f7ff ff73 	bl	800b814 <prv_ntop6_write_short>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d008      	beq.n	800b946 <FreeRTOS_inet_ntop6+0x7c>
                {
                    break;
                }

                xSet.xIndex++;
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	3301      	adds	r3, #1
 800b938:	61fb      	str	r3, [r7, #28]
        while( xSet.xIndex < 8 )
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	2b07      	cmp	r3, #7
 800b93e:	dddc      	ble.n	800b8fa <FreeRTOS_inet_ntop6+0x30>
 800b940:	e002      	b.n	800b948 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800b942:	bf00      	nop
 800b944:	e000      	b.n	800b948 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800b946:	bf00      	nop
            }
        }
    }

    if( xSet.xIndex < 8 )
 800b948:	69fb      	ldr	r3, [r7, #28]
 800b94a:	2b07      	cmp	r3, #7
 800b94c:	dc02      	bgt.n	800b954 <FreeRTOS_inet_ntop6+0x8a>
    {
        /* Didn't reach the last nibble: clear the string. */
        pcReturn = NULL;
 800b94e:	2300      	movs	r3, #0
 800b950:	627b      	str	r3, [r7, #36]	@ 0x24
 800b952:	e006      	b.n	800b962 <FreeRTOS_inet_ntop6+0x98>
    }
    else
    {
        pcDestination[ xSet.uxTargetIndex ] = '\0';
 800b954:	6a3b      	ldr	r3, [r7, #32]
 800b956:	68ba      	ldr	r2, [r7, #8]
 800b958:	4413      	add	r3, r2
 800b95a:	2200      	movs	r2, #0
 800b95c:	701a      	strb	r2, [r3, #0]
        pcReturn = pcDestination;
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pcReturn;
 800b962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b964:	4618      	mov	r0, r3
 800b966:	3728      	adds	r7, #40	@ 0x28
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <vSetMultiCastIPv6MacAddress>:
 * @param[in] pxAddress IPv6 address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv6MacAddress( const IPv6_Address_t * pxAddress,
                                  MACAddress_t * pxMACAddress )
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
    pxMACAddress->ucBytes[ 0 ] = 0x33U;
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	2233      	movs	r2, #51	@ 0x33
 800b97a:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = 0x33U;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	2233      	movs	r2, #51	@ 0x33
 800b980:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = pxAddress->ucBytes[ 12 ];
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	7b1a      	ldrb	r2, [r3, #12]
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = pxAddress->ucBytes[ 13 ];
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	7b5a      	ldrb	r2, [r3, #13]
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = pxAddress->ucBytes[ 14 ];
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	7b9a      	ldrb	r2, [r3, #14]
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = pxAddress->ucBytes[ 15 ];
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	7bda      	ldrb	r2, [r3, #15]
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	715a      	strb	r2, [r3, #5]
}
 800b9a2:	bf00      	nop
 800b9a4:	370c      	adds	r7, #12
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
	...

0800b9b0 <usGetExtensionHeaderLength>:
 * @return The total length of all extension headers, or whole buffer length when error detected.
 */
size_t usGetExtensionHeaderLength( const uint8_t * pucEthernetBuffer,
                                   size_t uxBufferLength,
                                   uint8_t * pucProtocol )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b08e      	sub	sp, #56	@ 0x38
 800b9b4:	af02      	add	r7, sp, #8
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
    uint8_t ucCurrentHeader;
    const IPPacket_IPv6_t * pxIPPacket_IPv6;
    uint8_t ucNextHeader = 0U;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    size_t uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER;
 800b9c2:	2336      	movs	r3, #54	@ 0x36
 800b9c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxHopSize = 0U;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurrentOrder = 0;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	61bb      	str	r3, [r7, #24]
    BaseType_t xNextOrder = 0;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	617b      	str	r3, [r7, #20]
    size_t uxReturn = uxBufferLength;
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	627b      	str	r3, [r7, #36]	@ 0x24

    if( ( pucEthernetBuffer != NULL ) && ( pucProtocol != NULL ) )
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	f000 808c 	beq.w	800baf6 <usGetExtensionHeaderLength+0x146>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f000 8088 	beq.w	800baf6 <usGetExtensionHeaderLength+0x146>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	613b      	str	r3, [r7, #16]
        ucCurrentHeader = pxIPPacket_IPv6->xIPHeader.ucNextHeader;
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	7d1b      	ldrb	r3, [r3, #20]
 800b9ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        /* Check if packet has extension header. */
        if( xGetExtensionOrder( ucCurrentHeader, 0U ) > 0 )
 800b9f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7ff fcaf 	bl	800b35c <xGetExtensionOrder>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	dd72      	ble.n	800baea <usGetExtensionHeaderLength+0x13a>
        {
            while( ( uxIndex + 8U ) < uxBufferLength )
 800ba04:	e06b      	b.n	800bade <usGetExtensionHeaderLength+0x12e>
            {
                ucNextHeader = pucEthernetBuffer[ uxIndex ];
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba0a:	4413      	add	r3, r2
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                xCurrentOrder = xGetExtensionOrder( ucCurrentHeader, ucNextHeader );
 800ba12:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800ba16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7ff fc9d 	bl	800b35c <xGetExtensionOrder>
 800ba22:	61b8      	str	r0, [r7, #24]

                /* To avoid compile warning if debug print is disabled. */
                ( void ) xCurrentOrder;

                /* Read the length expressed in number of octets. */
                uxHopSize = ( size_t ) pucEthernetBuffer[ uxIndex + 1U ];
 800ba24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba26:	3301      	adds	r3, #1
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	61fb      	str	r3, [r7, #28]
                /* And multiply by 8 and add the minimum size of 8. */
                uxHopSize = ( uxHopSize * 8U ) + 8U;
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	3301      	adds	r3, #1
 800ba34:	00db      	lsls	r3, r3, #3
 800ba36:	61fb      	str	r3, [r7, #28]

                if( ( uxIndex + uxHopSize ) >= uxBufferLength )
 800ba38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d806      	bhi.n	800ba52 <usGetExtensionHeaderLength+0xa2>
                {
                    FreeRTOS_debug_printf( ( "The length %u + %u of extension header is larger than buffer size %u \n", ( unsigned ) uxIndex, ( unsigned ) uxHopSize, ( unsigned ) uxBufferLength ) );
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	69fa      	ldr	r2, [r7, #28]
 800ba48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba4a:	482d      	ldr	r0, [pc, #180]	@ (800bb00 <usGetExtensionHeaderLength+0x150>)
 800ba4c:	f016 fb7c 	bl	8022148 <lUDPLoggingPrintf>
                    break;
 800ba50:	e051      	b.n	800baf6 <usGetExtensionHeaderLength+0x146>
                }

                uxIndex = uxIndex + uxHopSize;
 800ba52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	4413      	add	r3, r2
 800ba58:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 800ba5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ba5e:	2b06      	cmp	r3, #6
 800ba60:	d007      	beq.n	800ba72 <usGetExtensionHeaderLength+0xc2>
 800ba62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ba66:	2b11      	cmp	r3, #17
 800ba68:	d003      	beq.n	800ba72 <usGetExtensionHeaderLength+0xc2>
                    ( ucNextHeader == ipPROTOCOL_UDP ) ||
 800ba6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ba6e:	2b3a      	cmp	r3, #58	@ 0x3a
 800ba70:	d10d      	bne.n	800ba8e <usGetExtensionHeaderLength+0xde>
                    ( ucNextHeader == ipPROTOCOL_ICMP_IPv6 ) )
                {
                    FreeRTOS_debug_printf( ( "Stop at header %u\n", ucNextHeader ) );
 800ba72:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ba76:	4619      	mov	r1, r3
 800ba78:	4822      	ldr	r0, [pc, #136]	@ (800bb04 <usGetExtensionHeaderLength+0x154>)
 800ba7a:	f016 fb65 	bl	8022148 <lUDPLoggingPrintf>

                    uxReturn = uxIndex - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER );
 800ba7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba80:	3b36      	subs	r3, #54	@ 0x36
 800ba82:	627b      	str	r3, [r7, #36]	@ 0x24
                    *pucProtocol = ucNextHeader;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800ba8a:	701a      	strb	r2, [r3, #0]
                    break;
 800ba8c:	e033      	b.n	800baf6 <usGetExtensionHeaderLength+0x146>
                }

                xNextOrder = xGetExtensionOrder( ucNextHeader, pucEthernetBuffer[ uxIndex ] );
 800ba8e:	68fa      	ldr	r2, [r7, #12]
 800ba90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba92:	4413      	add	r3, r2
 800ba94:	781a      	ldrb	r2, [r3, #0]
 800ba96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ba9a:	4611      	mov	r1, r2
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7ff fc5d 	bl	800b35c <xGetExtensionOrder>
 800baa2:	6178      	str	r0, [r7, #20]

                FreeRTOS_debug_printf( ( "Going from header %2u (%d) to %2u (%d)\n",
 800baa4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800baa8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	9300      	str	r3, [sp, #0]
 800bab0:	4613      	mov	r3, r2
 800bab2:	69ba      	ldr	r2, [r7, #24]
 800bab4:	4814      	ldr	r0, [pc, #80]	@ (800bb08 <usGetExtensionHeaderLength+0x158>)
 800bab6:	f016 fb47 	bl	8022148 <lUDPLoggingPrintf>
                 * any order and occurring any number of times in the same packet,
                 * except for the Hop-by-Hop Options header which is restricted to
                 * appear immediately after an IPv6 header only. Outlined
                 * by RFC 2460 section 4.1  Extension Header Order.
                 */
                if( xNextOrder == 1 ) /* ipIPv6_EXT_HEADER_HOP_BY_HOP */
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	2b01      	cmp	r3, #1
 800babe:	d103      	bne.n	800bac8 <usGetExtensionHeaderLength+0x118>
                {
                    FreeRTOS_printf( ( "Wrong order. Hop-by-Hop Options header restricted to appear immediately after an IPv6 header\n" ) );
 800bac0:	4812      	ldr	r0, [pc, #72]	@ (800bb0c <usGetExtensionHeaderLength+0x15c>)
 800bac2:	f016 fb41 	bl	8022148 <lUDPLoggingPrintf>
                    break;
 800bac6:	e016      	b.n	800baf6 <usGetExtensionHeaderLength+0x146>
                }
                else if( xNextOrder < 0 )
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	da03      	bge.n	800bad6 <usGetExtensionHeaderLength+0x126>
                {
                    FreeRTOS_printf( ( "Invalid extension header detected\n" ) );
 800bace:	4810      	ldr	r0, [pc, #64]	@ (800bb10 <usGetExtensionHeaderLength+0x160>)
 800bad0:	f016 fb3a 	bl	8022148 <lUDPLoggingPrintf>
                    break;
 800bad4:	e00f      	b.n	800baf6 <usGetExtensionHeaderLength+0x146>
                else
                {
                    /* Do nothing, coverity happy. */
                }

                ucCurrentHeader = ucNextHeader;
 800bad6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bada:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            while( ( uxIndex + 8U ) < uxBufferLength )
 800bade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae0:	3308      	adds	r3, #8
 800bae2:	68ba      	ldr	r2, [r7, #8]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d88e      	bhi.n	800ba06 <usGetExtensionHeaderLength+0x56>
 800bae8:	e005      	b.n	800baf6 <usGetExtensionHeaderLength+0x146>
            }
        }
        else
        {
            /* No extension headers. */
            *pucProtocol = ucCurrentHeader;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800baf0:	701a      	strb	r2, [r3, #0]
            uxReturn = 0;
 800baf2:	2300      	movs	r3, #0
 800baf4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    return uxReturn;
 800baf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3730      	adds	r7, #48	@ 0x30
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	080250a4 	.word	0x080250a4
 800bb04:	080250ec 	.word	0x080250ec
 800bb08:	08025100 	.word	0x08025100
 800bb0c:	08025128 	.word	0x08025128
 800bb10:	08025188 	.word	0x08025188

0800bb14 <vManageSolicitedNodeAddress>:
 * @param[in] pxEndPoint The end-point for which a network up/down event is being handled.
 * @param[in] xNetworkGoingUp pdTRUE when the network goes UP, pdFALSE when the network goes DOWN.
 */
void vManageSolicitedNodeAddress( const struct xNetworkEndPoint * pxEndPoint,
                                  BaseType_t xNetworkGoingUp )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]
    IPv6_Type_t xAddressType;
    MACAddress_t xMACAddress;

    configASSERT( pxEndPoint != NULL );
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d104      	bne.n	800bb2e <vManageSolicitedNodeAddress+0x1a>
 800bb24:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800bb28:	482d      	ldr	r0, [pc, #180]	@ (800bbe0 <vManageSolicitedNodeAddress+0xcc>)
 800bb2a:	f7f5 ff15 	bl	8001958 <vAssertCalled>
    configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d104      	bne.n	800bb42 <vManageSolicitedNodeAddress+0x2e>
 800bb38:	f240 1133 	movw	r1, #307	@ 0x133
 800bb3c:	4828      	ldr	r0, [pc, #160]	@ (800bbe0 <vManageSolicitedNodeAddress+0xcc>)
 800bb3e:	f7f5 ff0b 	bl	8001958 <vAssertCalled>
         * therefore the calculated MAC address will be incorrect. Nothing bad will happen though, because the address
         * type check below will kick us out before the call to pfRemoveAllowedMAC(). Without the check below, the network
         * driver ends up being called once to register 33:33:FF:00:00:00 and that MAC never gets unregistered. */

        /* Solicited-node multicast addresses only apply to normal unicast non-loopback addresses. */
        xAddressType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	3338      	adds	r3, #56	@ 0x38
 800bb46:	4618      	mov	r0, r3
 800bb48:	f002 f9c2 	bl	800ded0 <xIPv6_GetIPType>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	73fb      	strb	r3, [r7, #15]

        if( ( xAddressType != eIPv6_LinkLocal ) && ( xAddressType != eIPv6_SiteLocal ) && ( xAddressType != eIPv6_Global ) )
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d005      	beq.n	800bb62 <vManageSolicitedNodeAddress+0x4e>
 800bb56:	7bfb      	ldrb	r3, [r7, #15]
 800bb58:	2b02      	cmp	r3, #2
 800bb5a:	d002      	beq.n	800bb62 <vManageSolicitedNodeAddress+0x4e>
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d138      	bne.n	800bbd4 <vManageSolicitedNodeAddress+0xc0>
             * solicited-node multicast address that we need to manage. Do nothing.*/
            break;
        }

        /* Calculate the multicast MAC that corresponds to this endpoint's IPv6 address. */
        xMACAddress.ucBytes[ 0 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800bb62:	2333      	movs	r3, #51	@ 0x33
 800bb64:	723b      	strb	r3, [r7, #8]
        xMACAddress.ucBytes[ 1 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800bb66:	2333      	movs	r3, #51	@ 0x33
 800bb68:	727b      	strb	r3, [r7, #9]
        xMACAddress.ucBytes[ 2 ] = 0xFFU;
 800bb6a:	23ff      	movs	r3, #255	@ 0xff
 800bb6c:	72bb      	strb	r3, [r7, #10]
        xMACAddress.ucBytes[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb74:	72fb      	strb	r3, [r7, #11]
        xMACAddress.ucBytes[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800bb7c:	733b      	strb	r3, [r7, #12]
        xMACAddress.ucBytes[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800bb84:	737b      	strb	r3, [r7, #13]

        /* Update the network driver filter */
        if( xNetworkGoingUp == pdTRUE )
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d111      	bne.n	800bbb0 <vManageSolicitedNodeAddress+0x9c>
        {
            if( pxEndPoint->pxNetworkInterface->pfAddAllowedMAC != NULL )
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bb92:	695b      	ldr	r3, [r3, #20]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d01e      	beq.n	800bbd6 <vManageSolicitedNodeAddress+0xc2>
            {
                pxEndPoint->pxNetworkInterface->pfAddAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bb9e:	695b      	ldr	r3, [r3, #20]
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800bba6:	f107 0108 	add.w	r1, r7, #8
 800bbaa:	4610      	mov	r0, r2
 800bbac:	4798      	blx	r3
            {
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
            }
        }
    } while( pdFALSE );
}
 800bbae:	e012      	b.n	800bbd6 <vManageSolicitedNodeAddress+0xc2>
            if( pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC != NULL )
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bbb6:	699b      	ldr	r3, [r3, #24]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00c      	beq.n	800bbd6 <vManageSolicitedNodeAddress+0xc2>
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bbc2:	699b      	ldr	r3, [r3, #24]
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800bbca:	f107 0108 	add.w	r1, r7, #8
 800bbce:	4610      	mov	r0, r2
 800bbd0:	4798      	blx	r3
}
 800bbd2:	e000      	b.n	800bbd6 <vManageSolicitedNodeAddress+0xc2>
            break;
 800bbd4:	bf00      	nop
}
 800bbd6:	bf00      	nop
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	080251ac 	.word	0x080251ac

0800bbe4 <pxFindLocalEndpoint>:
 * @brief Find the first end-point of type IPv6.
 *
 * @return The first IPv6 end-point found.
 */
    static NetworkEndPoint_t * pxFindLocalEndpoint( void )
    {
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800bbea:	2000      	movs	r0, #0
 800bbec:	f001 fd8c 	bl	800d708 <FreeRTOS_FirstEndPoint>
 800bbf0:	6078      	str	r0, [r7, #4]
 800bbf2:	e016      	b.n	800bc22 <pxFindLocalEndpoint+0x3e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
        {
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bbfa:	f003 0304 	and.w	r3, r3, #4
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d009      	beq.n	800bc18 <pxFindLocalEndpoint+0x34>
            {
                IPv6_Type_t eType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	3338      	adds	r3, #56	@ 0x38
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f002 f961 	bl	800ded0 <xIPv6_GetIPType>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	70fb      	strb	r3, [r7, #3]

                if( eType == eIPv6_LinkLocal )
 800bc12:	78fb      	ldrb	r3, [r7, #3]
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d008      	beq.n	800bc2a <pxFindLocalEndpoint+0x46>
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800bc18:	6879      	ldr	r1, [r7, #4]
 800bc1a:	2000      	movs	r0, #0
 800bc1c:	f001 fd96 	bl	800d74c <FreeRTOS_NextEndPoint>
 800bc20:	6078      	str	r0, [r7, #4]
             pxEndPoint != NULL;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d1e5      	bne.n	800bbf4 <pxFindLocalEndpoint+0x10>
 800bc28:	e000      	b.n	800bc2c <pxFindLocalEndpoint+0x48>
                {
                    break;
 800bc2a:	bf00      	nop
                }
            }
        }

        return pxEndPoint;
 800bc2c:	687b      	ldr	r3, [r7, #4]
    }
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3708      	adds	r7, #8
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <prvMACResolve>:
 * @return An enum, either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvMACResolve( const IPv6_Address_t * pxAddressToLookup,
                                             MACAddress_t * const pxMACAddress,
                                             NetworkEndPoint_t ** ppxEndPoint )
    {
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b086      	sub	sp, #24
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	60f8      	str	r0, [r7, #12]
 800bc3e:	60b9      	str	r1, [r7, #8]
 800bc40:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;

        /* Mostly used multi-cast address is ff02::. */
        if( xIsIPv6AllowedMulticast( pxAddressToLookup ) != pdFALSE )
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f7ff faa8 	bl	800b198 <xIsIPv6AllowedMulticast>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00e      	beq.n	800bc6c <prvMACResolve+0x36>
        {
            vSetMultiCastIPv6MacAddress( pxAddressToLookup, pxMACAddress );
 800bc4e:	68b9      	ldr	r1, [r7, #8]
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	f7ff fe8b 	bl	800b96c <vSetMultiCastIPv6MacAddress>

            if( ppxEndPoint != NULL )
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d004      	beq.n	800bc66 <prvMACResolve+0x30>
            {
                *ppxEndPoint = pxFindLocalEndpoint();
 800bc5c:	f7ff ffc2 	bl	800bbe4 <pxFindLocalEndpoint>
 800bc60:	4602      	mov	r2, r0
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 800bc66:	2301      	movs	r3, #1
 800bc68:	75fb      	strb	r3, [r7, #23]
 800bc6a:	e001      	b.n	800bc70 <prvMACResolve+0x3a>
        }
        else
        {
            /* Not a multicast IP address. */
            eReturn = eARPCacheMiss;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	75fb      	strb	r3, [r7, #23]
        }

        return eReturn;
 800bc70:	7dfb      	ldrb	r3, [r7, #23]
    }
 800bc72:	4618      	mov	r0, r3
 800bc74:	3718      	adds	r7, #24
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
	...

0800bc7c <eNDGetCacheEntry>:
 * @return An enum which says whether the address was found: eARPCacheHit or eARPCacheMiss.
 */
    eARPLookupResult_t eNDGetCacheEntry( IPv6_Address_t * pxIPAddress,
                                         MACAddress_t * const pxMACAddress,
                                         struct xNetworkEndPoint ** ppxEndPoint )
    {
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b088      	sub	sp, #32
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        NetworkEndPoint_t * pxEndPoint;

        /* Multi-cast addresses can be resolved immediately. */
        eReturn = prvMACResolve( pxIPAddress, pxMACAddress, ppxEndPoint );
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	68b9      	ldr	r1, [r7, #8]
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f7ff ffd2 	bl	800bc36 <prvMACResolve>
 800bc92:	4603      	mov	r3, r0
 800bc94:	77fb      	strb	r3, [r7, #31]

        if( eReturn == eARPCacheMiss )
 800bc96:	7ffb      	ldrb	r3, [r7, #31]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d106      	bne.n	800bcaa <eNDGetCacheEntry+0x2e>
        {
            /* See if the IP-address has an entry in the cache. */
            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	68b9      	ldr	r1, [r7, #8]
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f000 f9a9 	bl	800bff8 <prvNDCacheLookup>
 800bca6:	4603      	mov	r3, r0
 800bca8:	77fb      	strb	r3, [r7, #31]
        }

        if( eReturn == eARPCacheMiss )
 800bcaa:	7ffb      	ldrb	r3, [r7, #31]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d104      	bne.n	800bcba <eNDGetCacheEntry+0x3e>
        {
            FreeRTOS_printf( ( "eNDGetCacheEntry: lookup %pip miss\n", ( void * ) pxIPAddress->ucBytes ) );
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	4840      	ldr	r0, [pc, #256]	@ (800bdb8 <eNDGetCacheEntry+0x13c>)
 800bcb6:	f016 fa47 	bl	8022148 <lUDPLoggingPrintf>
        }

        if( eReturn == eARPCacheMiss )
 800bcba:	7ffb      	ldrb	r3, [r7, #31]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d176      	bne.n	800bdae <eNDGetCacheEntry+0x132>
        {
            IPv6_Type_t eIPType = xIPv6_GetIPType( pxIPAddress );
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f002 f905 	bl	800ded0 <xIPv6_GetIPType>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	75fb      	strb	r3, [r7, #23]

            pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( pxIPAddress );
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f001 fdae 	bl	800d82c <FreeRTOS_FindEndPointOnIP_IPv6>
 800bcd0:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00d      	beq.n	800bcf4 <eNDGetCacheEntry+0x78>
            {
                if( ppxEndPoint != NULL )
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d002      	beq.n	800bce4 <eNDGetCacheEntry+0x68>
                {
                    *( ppxEndPoint ) = pxEndPoint;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	69ba      	ldr	r2, [r7, #24]
 800bce2:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_printf( ( "eNDGetCacheEntry: FindEndPointOnIP failed for %pip (endpoint %pip)\n",
 800bce4:	68f9      	ldr	r1, [r7, #12]
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	3338      	adds	r3, #56	@ 0x38
 800bcea:	461a      	mov	r2, r3
 800bcec:	4833      	ldr	r0, [pc, #204]	@ (800bdbc <eNDGetCacheEntry+0x140>)
 800bcee:	f016 fa2b 	bl	8022148 <lUDPLoggingPrintf>
 800bcf2:	e05c      	b.n	800bdae <eNDGetCacheEntry+0x132>
                                   ( void * ) pxIPAddress->ucBytes,
                                   ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
            }
            else
            {
                if( eIPType == eIPv6_LinkLocal )
 800bcf4:	7dfb      	ldrb	r3, [r7, #23]
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d12b      	bne.n	800bd52 <eNDGetCacheEntry+0xd6>
                {
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	f001 fd04 	bl	800d708 <FreeRTOS_FirstEndPoint>
 800bd00:	61b8      	str	r0, [r7, #24]
 800bd02:	e017      	b.n	800bd34 <eNDGetCacheEntry+0xb8>
                         pxEndPoint != NULL;
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
                    {
                        IPv6_Type_t eMyType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	3338      	adds	r3, #56	@ 0x38
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f002 f8e1 	bl	800ded0 <xIPv6_GetIPType>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	75bb      	strb	r3, [r7, #22]

                        if( eMyType == eIPType )
 800bd12:	7dba      	ldrb	r2, [r7, #22]
 800bd14:	7dfb      	ldrb	r3, [r7, #23]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d107      	bne.n	800bd2a <eNDGetCacheEntry+0xae>
                        {
                            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	68b9      	ldr	r1, [r7, #8]
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f000 f96a 	bl	800bff8 <prvNDCacheLookup>
 800bd24:	4603      	mov	r3, r0
 800bd26:	77fb      	strb	r3, [r7, #31]
                            break;
 800bd28:	e007      	b.n	800bd3a <eNDGetCacheEntry+0xbe>
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800bd2a:	69b9      	ldr	r1, [r7, #24]
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	f001 fd0d 	bl	800d74c <FreeRTOS_NextEndPoint>
 800bd32:	61b8      	str	r0, [r7, #24]
                         pxEndPoint != NULL;
 800bd34:	69bb      	ldr	r3, [r7, #24]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d1e4      	bne.n	800bd04 <eNDGetCacheEntry+0x88>
                        }
                    }

                    FreeRTOS_printf( ( "eNDGetCacheEntry: LinkLocal %pip \"%s\"\n", ( void * ) pxIPAddress->ucBytes,
 800bd3a:	68f9      	ldr	r1, [r7, #12]
 800bd3c:	7ffb      	ldrb	r3, [r7, #31]
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d101      	bne.n	800bd46 <eNDGetCacheEntry+0xca>
 800bd42:	4b1f      	ldr	r3, [pc, #124]	@ (800bdc0 <eNDGetCacheEntry+0x144>)
 800bd44:	e000      	b.n	800bd48 <eNDGetCacheEntry+0xcc>
 800bd46:	4b1f      	ldr	r3, [pc, #124]	@ (800bdc4 <eNDGetCacheEntry+0x148>)
 800bd48:	461a      	mov	r2, r3
 800bd4a:	481f      	ldr	r0, [pc, #124]	@ (800bdc8 <eNDGetCacheEntry+0x14c>)
 800bd4c:	f016 f9fc 	bl	8022148 <lUDPLoggingPrintf>
 800bd50:	e02d      	b.n	800bdae <eNDGetCacheEntry+0x132>
                                       ( eReturn == eARPCacheHit ) ? "hit" : "miss" ) );
                }
                else
                {
                    pxEndPoint = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv6 );
 800bd52:	2060      	movs	r0, #96	@ 0x60
 800bd54:	f002 f87c 	bl	800de50 <FreeRTOS_FindGateWay>
 800bd58:	61b8      	str	r0, [r7, #24]

                    if( pxEndPoint != NULL )
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d026      	beq.n	800bdae <eNDGetCacheEntry+0x132>
                    {
                        ( void ) memcpy( pxIPAddress->ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	335c      	adds	r3, #92	@ 0x5c
 800bd66:	2210      	movs	r2, #16
 800bd68:	4619      	mov	r1, r3
 800bd6a:	f016 fc09 	bl	8022580 <memcpy>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: Using gw %pip\n", ( void * ) pxIPAddress->ucBytes ) );
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	4619      	mov	r1, r3
 800bd72:	4816      	ldr	r0, [pc, #88]	@ (800bdcc <eNDGetCacheEntry+0x150>)
 800bd74:	f016 f9e8 	bl	8022148 <lUDPLoggingPrintf>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: From addr %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	3338      	adds	r3, #56	@ 0x38
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	4814      	ldr	r0, [pc, #80]	@ (800bdd0 <eNDGetCacheEntry+0x154>)
 800bd80:	f016 f9e2 	bl	8022148 <lUDPLoggingPrintf>

                        /* See if the gateway has an entry in the cache. */
                        eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	68b9      	ldr	r1, [r7, #8]
 800bd88:	68f8      	ldr	r0, [r7, #12]
 800bd8a:	f000 f935 	bl	800bff8 <prvNDCacheLookup>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	77fb      	strb	r3, [r7, #31]

                        if( *ppxEndPoint != NULL )
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d006      	beq.n	800bda8 <eNDGetCacheEntry+0x12c>
                        {
                            FreeRTOS_printf( ( "eNDGetCacheEntry: found end-point %pip\n", ( void * ) ( *ppxEndPoint )->ipv6_settings.xIPAddress.ucBytes ) );
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	3338      	adds	r3, #56	@ 0x38
 800bda0:	4619      	mov	r1, r3
 800bda2:	480c      	ldr	r0, [pc, #48]	@ (800bdd4 <eNDGetCacheEntry+0x158>)
 800bda4:	f016 f9d0 	bl	8022148 <lUDPLoggingPrintf>
                        }

                        *( ppxEndPoint ) = pxEndPoint;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	69ba      	ldr	r2, [r7, #24]
 800bdac:	601a      	str	r2, [r3, #0]
                    }
                }
            }
        }

        return eReturn;
 800bdae:	7ffb      	ldrb	r3, [r7, #31]
    }
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3720      	adds	r7, #32
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	080251e0 	.word	0x080251e0
 800bdbc:	08025204 	.word	0x08025204
 800bdc0:	08025248 	.word	0x08025248
 800bdc4:	0802524c 	.word	0x0802524c
 800bdc8:	08025254 	.word	0x08025254
 800bdcc:	0802527c 	.word	0x0802527c
 800bdd0:	080252a0 	.word	0x080252a0
 800bdd4:	080252c4 	.word	0x080252c4

0800bdd8 <vNDRefreshCacheEntry>:
 *
 */
    void vNDRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                               const IPv6_Address_t * pxIPAddress,
                               NetworkEndPoint_t * pxEndPoint )
    {
 800bdd8:	b5b0      	push	{r4, r5, r7, lr}
 800bdda:	b08e      	sub	sp, #56	@ 0x38
 800bddc:	af04      	add	r7, sp, #16
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        BaseType_t xFreeEntry = -1, xEntryFound = -1;
 800bde4:	f04f 33ff 	mov.w	r3, #4294967295
 800bde8:	623b      	str	r3, [r7, #32]
 800bdea:	f04f 33ff 	mov.w	r3, #4294967295
 800bdee:	61fb      	str	r3, [r7, #28]
        uint16_t xOldestValue = ipconfigMAX_ARP_AGE + 1;
 800bdf0:	2397      	movs	r3, #151	@ 0x97
 800bdf2:	837b      	strh	r3, [r7, #26]
        BaseType_t xOldestEntry = 0;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	617b      	str	r3, [r7, #20]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdfc:	e033      	b.n	800be66 <vNDRefreshCacheEntry+0x8e>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800bdfe:	4a44      	ldr	r2, [pc, #272]	@ (800bf10 <vNDRefreshCacheEntry+0x138>)
 800be00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be02:	015b      	lsls	r3, r3, #5
 800be04:	4413      	add	r3, r2
 800be06:	331d      	adds	r3, #29
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d106      	bne.n	800be1c <vNDRefreshCacheEntry+0x44>
            {
                if( xFreeEntry == -1 )
 800be0e:	6a3b      	ldr	r3, [r7, #32]
 800be10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be14:	d124      	bne.n	800be60 <vNDRefreshCacheEntry+0x88>
                {
                    xFreeEntry = x;
 800be16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be18:	623b      	str	r3, [r7, #32]
 800be1a:	e021      	b.n	800be60 <vNDRefreshCacheEntry+0x88>
                }
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800be1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1e:	015b      	lsls	r3, r3, #5
 800be20:	4a3b      	ldr	r2, [pc, #236]	@ (800bf10 <vNDRefreshCacheEntry+0x138>)
 800be22:	4413      	add	r3, r2
 800be24:	68b9      	ldr	r1, [r7, #8]
 800be26:	2210      	movs	r2, #16
 800be28:	4618      	mov	r0, r3
 800be2a:	f017 fb3e 	bl	80234aa <memcmp>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d102      	bne.n	800be3a <vNDRefreshCacheEntry+0x62>
            {
                xEntryFound = x;
 800be34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be36:	61fb      	str	r3, [r7, #28]
                break;
 800be38:	e018      	b.n	800be6c <vNDRefreshCacheEntry+0x94>
                 * neighbor advertisement needed for that packet. If we don't store this network advertisement in cache,
                 * the parting of the frame from pxARPWaitingNetworkBuffer will cause the sending of neighbor solicitation
                 * and stores the frame in pxARPWaitingNetworkBuffer. This becomes a vicious circle with thousands of
                 * neighbor solicitation/advertisement packets going back and forth because the ND cache is full.
                 * Overwriting the oldest cache entry is not a fool-proof solution, but it's something. */
                if( xNDCache[ x ].ucAge < xOldestValue )
 800be3a:	4a35      	ldr	r2, [pc, #212]	@ (800bf10 <vNDRefreshCacheEntry+0x138>)
 800be3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be3e:	015b      	lsls	r3, r3, #5
 800be40:	4413      	add	r3, r2
 800be42:	331c      	adds	r3, #28
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	461a      	mov	r2, r3
 800be48:	8b7b      	ldrh	r3, [r7, #26]
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d908      	bls.n	800be60 <vNDRefreshCacheEntry+0x88>
                {
                    xOldestValue = xNDCache[ x ].ucAge;
 800be4e:	4a30      	ldr	r2, [pc, #192]	@ (800bf10 <vNDRefreshCacheEntry+0x138>)
 800be50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be52:	015b      	lsls	r3, r3, #5
 800be54:	4413      	add	r3, r2
 800be56:	331c      	adds	r3, #28
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	837b      	strh	r3, [r7, #26]
                    xOldestEntry = x;
 800be5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be5e:	617b      	str	r3, [r7, #20]
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800be60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be62:	3301      	adds	r3, #1
 800be64:	627b      	str	r3, [r7, #36]	@ 0x24
 800be66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be68:	2b17      	cmp	r3, #23
 800be6a:	ddc8      	ble.n	800bdfe <vNDRefreshCacheEntry+0x26>
                }
            }
        }

        if( xEntryFound < 0 )
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	da22      	bge.n	800beb8 <vNDRefreshCacheEntry+0xe0>
        {
            /* The IP-address was not found, use the first free location. */
            if( xFreeEntry >= 0 )
 800be72:	6a3b      	ldr	r3, [r7, #32]
 800be74:	2b00      	cmp	r3, #0
 800be76:	db02      	blt.n	800be7e <vNDRefreshCacheEntry+0xa6>
            {
                xEntryFound = xFreeEntry;
 800be78:	6a3b      	ldr	r3, [r7, #32]
 800be7a:	61fb      	str	r3, [r7, #28]
 800be7c:	e01c      	b.n	800beb8 <vNDRefreshCacheEntry+0xe0>
            }
            else
            {
                /* No free location. Overwrite the oldest. */
                xEntryFound = xOldestEntry;
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "vNDRefreshCacheEntry: Cache FULL! Overwriting oldest entry %i with %02X-%02X-%02X-%02X-%02X-%02X\n", ( int ) xEntryFound, pxMACAddress->ucBytes[ 0 ], pxMACAddress->ucBytes[ 1 ], pxMACAddress->ucBytes[ 2 ], pxMACAddress->ucBytes[ 3 ], pxMACAddress->ucBytes[ 4 ], pxMACAddress->ucBytes[ 5 ] ) );
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	461c      	mov	r4, r3
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	785b      	ldrb	r3, [r3, #1]
 800be8c:	461d      	mov	r5, r3
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	789b      	ldrb	r3, [r3, #2]
 800be92:	461a      	mov	r2, r3
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	78db      	ldrb	r3, [r3, #3]
 800be98:	4619      	mov	r1, r3
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	791b      	ldrb	r3, [r3, #4]
 800be9e:	4618      	mov	r0, r3
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	795b      	ldrb	r3, [r3, #5]
 800bea4:	9303      	str	r3, [sp, #12]
 800bea6:	9002      	str	r0, [sp, #8]
 800bea8:	9101      	str	r1, [sp, #4]
 800beaa:	9200      	str	r2, [sp, #0]
 800beac:	462b      	mov	r3, r5
 800beae:	4622      	mov	r2, r4
 800beb0:	69f9      	ldr	r1, [r7, #28]
 800beb2:	4818      	ldr	r0, [pc, #96]	@ (800bf14 <vNDRefreshCacheEntry+0x13c>)
 800beb4:	f016 f948 	bl	8022148 <lUDPLoggingPrintf>
            }
        }

        /* At this point, xEntryFound is always a valid index. */
        /* Copy the IP-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	015b      	lsls	r3, r3, #5
 800bebc:	4a14      	ldr	r2, [pc, #80]	@ (800bf10 <vNDRefreshCacheEntry+0x138>)
 800bebe:	4413      	add	r3, r2
 800bec0:	68b9      	ldr	r1, [r7, #8]
 800bec2:	2210      	movs	r2, #16
 800bec4:	4618      	mov	r0, r3
 800bec6:	f016 fb5b 	bl	8022580 <memcpy>
        /* Copy the MAC-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( MACAddress_t ) );
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	015b      	lsls	r3, r3, #5
 800bece:	3310      	adds	r3, #16
 800bed0:	4a0f      	ldr	r2, [pc, #60]	@ (800bf10 <vNDRefreshCacheEntry+0x138>)
 800bed2:	4413      	add	r3, r2
 800bed4:	68f9      	ldr	r1, [r7, #12]
 800bed6:	2206      	movs	r2, #6
 800bed8:	4618      	mov	r0, r3
 800beda:	f016 fb51 	bl	8022580 <memcpy>
        xNDCache[ xEntryFound ].pxEndPoint = pxEndPoint;
 800bede:	4a0c      	ldr	r2, [pc, #48]	@ (800bf10 <vNDRefreshCacheEntry+0x138>)
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	015b      	lsls	r3, r3, #5
 800bee4:	4413      	add	r3, r2
 800bee6:	3318      	adds	r3, #24
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	601a      	str	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800beec:	4a08      	ldr	r2, [pc, #32]	@ (800bf10 <vNDRefreshCacheEntry+0x138>)
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	015b      	lsls	r3, r3, #5
 800bef2:	4413      	add	r3, r2
 800bef4:	331c      	adds	r3, #28
 800bef6:	2296      	movs	r2, #150	@ 0x96
 800bef8:	701a      	strb	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucValid = ( uint8_t ) pdTRUE;
 800befa:	4a05      	ldr	r2, [pc, #20]	@ (800bf10 <vNDRefreshCacheEntry+0x138>)
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	015b      	lsls	r3, r3, #5
 800bf00:	4413      	add	r3, r2
 800bf02:	331d      	adds	r3, #29
 800bf04:	2201      	movs	r2, #1
 800bf06:	701a      	strb	r2, [r3, #0]
    }
 800bf08:	bf00      	nop
 800bf0a:	3728      	adds	r7, #40	@ 0x28
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bdb0      	pop	{r4, r5, r7, pc}
 800bf10:	200011a4 	.word	0x200011a4
 800bf14:	080252ec 	.word	0x080252ec

0800bf18 <vNDAgeCache>:
 * @brief Reduce the age counter in each entry within the ND cache.  An entry is no
 * longer considered valid and is deleted if its age reaches zero.
 * Just before getting to zero, 3 times a neighbour solicitation will be sent.
 */
    void vNDAgeCache( void )
    {
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
        BaseType_t x;

        /* Loop through each entry in the ND cache. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800bf1e:	2300      	movs	r3, #0
 800bf20:	60fb      	str	r3, [r7, #12]
 800bf22:	e05f      	b.n	800bfe4 <vNDAgeCache+0xcc>
        {
            BaseType_t xDoSolicitate = pdFALSE;
 800bf24:	2300      	movs	r3, #0
 800bf26:	60bb      	str	r3, [r7, #8]

            /* If the entry is valid (its age is greater than zero). */
            if( xNDCache[ x ].ucAge > 0U )
 800bf28:	4a32      	ldr	r2, [pc, #200]	@ (800bff4 <vNDAgeCache+0xdc>)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	015b      	lsls	r3, r3, #5
 800bf2e:	4413      	add	r3, r2
 800bf30:	331c      	adds	r3, #28
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d052      	beq.n	800bfde <vNDAgeCache+0xc6>
            {
                /* Decrement the age value of the entry in this ND cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xNDCache[ x ].ucAge )--;
 800bf38:	4a2e      	ldr	r2, [pc, #184]	@ (800bff4 <vNDAgeCache+0xdc>)
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	015b      	lsls	r3, r3, #5
 800bf3e:	4413      	add	r3, r2
 800bf40:	331c      	adds	r3, #28
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	3b01      	subs	r3, #1
 800bf46:	b2d9      	uxtb	r1, r3
 800bf48:	4a2a      	ldr	r2, [pc, #168]	@ (800bff4 <vNDAgeCache+0xdc>)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	015b      	lsls	r3, r3, #5
 800bf4e:	4413      	add	r3, r2
 800bf50:	331c      	adds	r3, #28
 800bf52:	460a      	mov	r2, r1
 800bf54:	701a      	strb	r2, [r3, #0]

                if( xNDCache[ x ].ucAge == 0U )
 800bf56:	4a27      	ldr	r2, [pc, #156]	@ (800bff4 <vNDAgeCache+0xdc>)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	015b      	lsls	r3, r3, #5
 800bf5c:	4413      	add	r3, r2
 800bf5e:	331c      	adds	r3, #28
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d109      	bne.n	800bf7a <vNDAgeCache+0x62>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceND_TABLE_ENTRY_EXPIRED( xNDCache[ x ].xIPAddress );
                    ( void ) memset( &( xNDCache[ x ] ), 0, sizeof( xNDCache[ x ] ) );
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	015b      	lsls	r3, r3, #5
 800bf6a:	4a22      	ldr	r2, [pc, #136]	@ (800bff4 <vNDAgeCache+0xdc>)
 800bf6c:	4413      	add	r3, r2
 800bf6e:	2220      	movs	r2, #32
 800bf70:	2100      	movs	r1, #0
 800bf72:	4618      	mov	r0, r3
 800bf74:	f016 fc11 	bl	802279a <memset>
 800bf78:	e031      	b.n	800bfde <vNDAgeCache+0xc6>
                }
                else
                {
                    /* If the entry is not yet valid, then it is waiting an ND
                     * advertisement, and the ND solicitation should be retransmitted. */
                    if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800bf7a:	4a1e      	ldr	r2, [pc, #120]	@ (800bff4 <vNDAgeCache+0xdc>)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	015b      	lsls	r3, r3, #5
 800bf80:	4413      	add	r3, r2
 800bf82:	331d      	adds	r3, #29
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d102      	bne.n	800bf90 <vNDAgeCache+0x78>
                    {
                        xDoSolicitate = pdTRUE;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	60bb      	str	r3, [r7, #8]
 800bf8e:	e009      	b.n	800bfa4 <vNDAgeCache+0x8c>
                    }
                    else if( xNDCache[ x ].ucAge <= ( uint8_t ) ndMAX_CACHE_AGE_BEFORE_NEW_ND_SOLICITATION )
 800bf90:	4a18      	ldr	r2, [pc, #96]	@ (800bff4 <vNDAgeCache+0xdc>)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	015b      	lsls	r3, r3, #5
 800bf96:	4413      	add	r3, r2
 800bf98:	331c      	adds	r3, #28
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	2b03      	cmp	r3, #3
 800bf9e:	d801      	bhi.n	800bfa4 <vNDAgeCache+0x8c>
                    {
                        /* This entry will get removed soon.  See if the MAC address is
                         * still valid to prevent this happening. */
                        iptraceND_TABLE_ENTRY_WILL_EXPIRE( xNDCache[ x ].xIPAddress );
                        xDoSolicitate = pdTRUE;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	60bb      	str	r3, [r7, #8]
                    else
                    {
                        /* The age has just ticked down, with nothing to do. */
                    }

                    if( xDoSolicitate != pdFALSE )
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d019      	beq.n	800bfde <vNDAgeCache+0xc6>
                    {
                        size_t uxNeededSize;
                        NetworkBufferDescriptor_t * pxNetworkBuffer;

                        uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800bfaa:	2356      	movs	r3, #86	@ 0x56
 800bfac:	607b      	str	r3, [r7, #4]
                        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 800bfae:	2100      	movs	r1, #0
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f00b f9b9 	bl	8017328 <pxGetNetworkBufferWithDescriptor>
 800bfb6:	6038      	str	r0, [r7, #0]

                        if( pxNetworkBuffer != NULL )
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00f      	beq.n	800bfde <vNDAgeCache+0xc6>
                        {
                            pxNetworkBuffer->pxEndPoint = xNDCache[ x ].pxEndPoint;
 800bfbe:	4a0d      	ldr	r2, [pc, #52]	@ (800bff4 <vNDAgeCache+0xdc>)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	015b      	lsls	r3, r3, #5
 800bfc4:	4413      	add	r3, r2
 800bfc6:	3318      	adds	r3, #24
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	631a      	str	r2, [r3, #48]	@ 0x30
                            /* _HT_ From here I am suspecting a network buffer leak */
                            vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xNDCache[ x ].xIPAddress ) );
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	015b      	lsls	r3, r3, #5
 800bfd2:	4a08      	ldr	r2, [pc, #32]	@ (800bff4 <vNDAgeCache+0xdc>)
 800bfd4:	4413      	add	r3, r2
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	6838      	ldr	r0, [r7, #0]
 800bfda:	f000 f8bb 	bl	800c154 <vNDSendNeighbourSolicitation>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	60fb      	str	r3, [r7, #12]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2b17      	cmp	r3, #23
 800bfe8:	dd9c      	ble.n	800bf24 <vNDAgeCache+0xc>
                        }
                    }
                }
            }
        }
    }
 800bfea:	bf00      	nop
 800bfec:	bf00      	nop
 800bfee:	3710      	adds	r7, #16
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	200011a4 	.word	0x200011a4

0800bff8 <prvNDCacheLookup>:
 * @return An enum: either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvNDCacheLookup( const IPv6_Address_t * pxAddressToLookup,
                                                MACAddress_t * const pxMACAddress,
                                                NetworkEndPoint_t ** ppxEndPoint )
    {
 800bff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bffa:	b08d      	sub	sp, #52	@ 0x34
 800bffc:	af06      	add	r7, sp, #24
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 800c004:	2300      	movs	r3, #0
 800c006:	74fb      	strb	r3, [r7, #19]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c008:	2300      	movs	r3, #0
 800c00a:	617b      	str	r3, [r7, #20]
 800c00c:	e04a      	b.n	800c0a4 <prvNDCacheLookup+0xac>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800c00e:	4a30      	ldr	r2, [pc, #192]	@ (800c0d0 <prvNDCacheLookup+0xd8>)
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	015b      	lsls	r3, r3, #5
 800c014:	4413      	add	r3, r2
 800c016:	331d      	adds	r3, #29
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d03f      	beq.n	800c09e <prvNDCacheLookup+0xa6>
            {
                /* Skip invalid entries. */
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxAddressToLookup->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	015b      	lsls	r3, r3, #5
 800c022:	4a2b      	ldr	r2, [pc, #172]	@ (800c0d0 <prvNDCacheLookup+0xd8>)
 800c024:	4413      	add	r3, r2
 800c026:	68f9      	ldr	r1, [r7, #12]
 800c028:	2210      	movs	r2, #16
 800c02a:	4618      	mov	r0, r3
 800c02c:	f017 fa3d 	bl	80234aa <memcmp>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d133      	bne.n	800c09e <prvNDCacheLookup+0xa6>
            {
                ( void ) memcpy( pxMACAddress->ucBytes, xNDCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800c036:	68b8      	ldr	r0, [r7, #8]
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	015b      	lsls	r3, r3, #5
 800c03c:	3310      	adds	r3, #16
 800c03e:	4a24      	ldr	r2, [pc, #144]	@ (800c0d0 <prvNDCacheLookup+0xd8>)
 800c040:	4413      	add	r3, r2
 800c042:	2206      	movs	r2, #6
 800c044:	4619      	mov	r1, r3
 800c046:	f016 fa9b 	bl	8022580 <memcpy>
                eReturn = eARPCacheHit;
 800c04a:	2301      	movs	r3, #1
 800c04c:	74fb      	strb	r3, [r7, #19]

                if( ppxEndPoint != NULL )
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d007      	beq.n	800c064 <prvNDCacheLookup+0x6c>
                {
                    *ppxEndPoint = xNDCache[ x ].pxEndPoint;
 800c054:	4a1e      	ldr	r2, [pc, #120]	@ (800c0d0 <prvNDCacheLookup+0xd8>)
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	015b      	lsls	r3, r3, #5
 800c05a:	4413      	add	r3, r2
 800c05c:	3318      	adds	r3, #24
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_debug_printf( ( "prvCacheLookup6[ %d ] %pip with %02x:%02x:%02x:%02x:%02x:%02x\n",
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	461e      	mov	r6, r3
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	785b      	ldrb	r3, [r3, #1]
 800c070:	4619      	mov	r1, r3
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	789b      	ldrb	r3, [r3, #2]
 800c076:	4618      	mov	r0, r3
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	78db      	ldrb	r3, [r3, #3]
 800c07c:	461c      	mov	r4, r3
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	791b      	ldrb	r3, [r3, #4]
 800c082:	461d      	mov	r5, r3
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	795b      	ldrb	r3, [r3, #5]
 800c088:	9304      	str	r3, [sp, #16]
 800c08a:	9503      	str	r5, [sp, #12]
 800c08c:	9402      	str	r4, [sp, #8]
 800c08e:	9001      	str	r0, [sp, #4]
 800c090:	9100      	str	r1, [sp, #0]
 800c092:	4633      	mov	r3, r6
 800c094:	6979      	ldr	r1, [r7, #20]
 800c096:	480f      	ldr	r0, [pc, #60]	@ (800c0d4 <prvNDCacheLookup+0xdc>)
 800c098:	f016 f856 	bl	8022148 <lUDPLoggingPrintf>
                                         pxMACAddress->ucBytes[ 1 ],
                                         pxMACAddress->ucBytes[ 2 ],
                                         pxMACAddress->ucBytes[ 3 ],
                                         pxMACAddress->ucBytes[ 4 ],
                                         pxMACAddress->ucBytes[ 5 ] ) );
                break;
 800c09c:	e005      	b.n	800c0aa <prvNDCacheLookup+0xb2>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	617b      	str	r3, [r7, #20]
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	2b17      	cmp	r3, #23
 800c0a8:	ddb1      	ble.n	800c00e <prvNDCacheLookup+0x16>
            {
                /* Entry is valid but the MAC-address doesn't match. */
            }
        }

        if( eReturn == eARPCacheMiss )
 800c0aa:	7cfb      	ldrb	r3, [r7, #19]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10a      	bne.n	800c0c6 <prvNDCacheLookup+0xce>
        {
            FreeRTOS_printf( ( "prvNDCacheLookup %pip Miss\n", ( void * ) pxAddressToLookup->ucBytes ) );
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	4808      	ldr	r0, [pc, #32]	@ (800c0d8 <prvNDCacheLookup+0xe0>)
 800c0b6:	f016 f847 	bl	8022148 <lUDPLoggingPrintf>

            if( ppxEndPoint != NULL )
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d002      	beq.n	800c0c6 <prvNDCacheLookup+0xce>
            {
                *ppxEndPoint = NULL;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800c0c6:	7cfb      	ldrb	r3, [r7, #19]
    }
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	371c      	adds	r7, #28
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0d0:	200011a4 	.word	0x200011a4
 800c0d4:	08025350 	.word	0x08025350
 800c0d8:	08025390 	.word	0x08025390

0800c0dc <prvReturnICMP_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet.
 * @param[in] uxICMPSize The number of bytes to be sent.
 */
    static void prvReturnICMP_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                    size_t uxICMPSize )
    {
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0ea:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0f0:	60bb      	str	r3, [r7, #8]

        ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	3316      	adds	r3, #22
 800c0fc:	2210      	movs	r2, #16
 800c0fe:	4619      	mov	r1, r3
 800c100:	f016 fa3e 	bl	8022580 <memcpy>
        ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	f103 0016 	add.w	r0, r3, #22
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	3338      	adds	r3, #56	@ 0x38
 800c10e:	2210      	movs	r2, #16
 800c110:	4619      	mov	r1, r3
 800c112:	f016 fa35 	bl	8022580 <memcpy>
        pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( uxICMPSize );
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	b29b      	uxth	r3, r3
 800c11a:	021b      	lsls	r3, r3, #8
 800c11c:	b29a      	uxth	r2, r3
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	0a1b      	lsrs	r3, r3, #8
 800c122:	b29b      	uxth	r3, r3
 800c124:	4313      	orrs	r3, r2
 800c126:	b29a      	uxth	r2, r3
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	825a      	strh	r2, [r3, #18]

        /* Important: tell NIC driver how many bytes must be sent */
        pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        #else
        {
            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPPacket->xICMPHeaderIPv6.usChecksum = 0;
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	2200      	movs	r2, #0
 800c13a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800c13e:	2200      	movs	r2, #0
 800c140:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
        #endif

        /* This function will fill in the Ethernet addresses and send the packet */
        vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 800c144:	2100      	movs	r1, #0
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f7fd fe46 	bl	8009dd8 <vReturnEthernetFrame>
    }
 800c14c:	bf00      	nop
 800c14e:	3710      	adds	r7, #16
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <vNDSendNeighbourSolicitation>:
 * outstanding so re-transmissions can be generated.
 */

    void vNDSendNeighbourSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                       const IPv6_Address_t * pxIPAddress )
    {
 800c154:	b5b0      	push	{r4, r5, r7, lr}
 800c156:	b090      	sub	sp, #64	@ 0x40
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c162:	637b      	str	r3, [r7, #52]	@ 0x34
        size_t uxNeededSize;
        IPv6_Address_t xTargetIPAddress;
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800c168:	2300      	movs	r3, #0
 800c16a:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xReleased = pdFALSE;
 800c16c:	2300      	movs	r3, #0
 800c16e:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( ( pxEndPoint != NULL ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800c170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c172:	2b00      	cmp	r3, #0
 800c174:	f000 80c1 	beq.w	800c2fa <vNDSendNeighbourSolicitation+0x1a6>
 800c178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c17a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c17e:	f003 0304 	and.w	r3, r3, #4
 800c182:	b2db      	uxtb	r3, r3
 800c184:	2b00      	cmp	r3, #0
 800c186:	f000 80b8 	beq.w	800c2fa <vNDSendNeighbourSolicitation+0x1a6>
        {
            uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800c18a:	2356      	movs	r3, #86	@ 0x56
 800c18c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if( pxDescriptor->xDataLength < uxNeededSize )
 800c18e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c192:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c194:	429a      	cmp	r2, r3
 800c196:	d909      	bls.n	800c1ac <vNDSendNeighbourSolicitation+0x58>
            {
                pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800c198:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c19a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c19c:	f7fe f9ce 	bl	800a53c <pxDuplicateNetworkBufferWithDescriptor>
 800c1a0:	6338      	str	r0, [r7, #48]	@ 0x30
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c1a2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c1a4:	f00b f928 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
                pxDescriptor = pxNewDescriptor;
 800c1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            if( pxDescriptor != NULL )
 800c1ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	f000 80a3 	beq.w	800c2fa <vNDSendNeighbourSolicitation+0x1a6>
            {
                const uint32_t ulPayloadLength = 32U;
 800c1b4:	2320      	movs	r3, #32
 800c1b6:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800c1b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1bc:	627b      	str	r3, [r7, #36]	@ 0x24
                pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c0:	3336      	adds	r3, #54	@ 0x36
 800c1c2:	623b      	str	r3, [r7, #32]

                pxDescriptor->xDataLength = uxNeededSize;
 800c1c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1c8:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Set the multi-cast MAC-address. */
                xMultiCastMacAddress.ucBytes[ 0 ] = 0x33U;
 800c1ca:	2333      	movs	r3, #51	@ 0x33
 800c1cc:	723b      	strb	r3, [r7, #8]
                xMultiCastMacAddress.ucBytes[ 1 ] = 0x33U;
 800c1ce:	2333      	movs	r3, #51	@ 0x33
 800c1d0:	727b      	strb	r3, [r7, #9]
                xMultiCastMacAddress.ucBytes[ 2 ] = 0xffU;
 800c1d2:	23ff      	movs	r3, #255	@ 0xff
 800c1d4:	72bb      	strb	r3, [r7, #10]
                xMultiCastMacAddress.ucBytes[ 3 ] = pxIPAddress->ucBytes[ 13 ];
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	7b5b      	ldrb	r3, [r3, #13]
 800c1da:	72fb      	strb	r3, [r7, #11]
                xMultiCastMacAddress.ucBytes[ 4 ] = pxIPAddress->ucBytes[ 14 ];
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	7b9b      	ldrb	r3, [r3, #14]
 800c1e0:	733b      	strb	r3, [r7, #12]
                xMultiCastMacAddress.ucBytes[ 5 ] = pxIPAddress->ucBytes[ 15 ];
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	7bdb      	ldrb	r3, [r3, #15]
 800c1e6:	737b      	strb	r3, [r7, #13]

                /* Set Ethernet header. Source and Destination will be swapped. */
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ea:	3306      	adds	r3, #6
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	f107 0308 	add.w	r3, r7, #8
 800c1f2:	6818      	ldr	r0, [r3, #0]
 800c1f4:	6010      	str	r0, [r2, #0]
 800c1f6:	889b      	ldrh	r3, [r3, #4]
 800c1f8:	8093      	strh	r3, [r2, #4]
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c1fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c1fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1fe:	33e8      	adds	r3, #232	@ 0xe8
 800c200:	2206      	movs	r2, #6
 800c202:	4619      	mov	r1, r3
 800c204:	f016 f9bc 	bl	8022580 <memcpy>
                pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800c208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20a:	2200      	movs	r2, #0
 800c20c:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800c210:	731a      	strb	r2, [r3, #12]
 800c212:	2200      	movs	r2, #0
 800c214:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800c218:	735a      	strb	r2, [r3, #13]

                /* Set IP-header. */
                pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60U;
 800c21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21c:	2260      	movs	r2, #96	@ 0x60
 800c21e:	739a      	strb	r2, [r3, #14]
                pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800c220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c222:	2200      	movs	r2, #0
 800c224:	73da      	strb	r2, [r3, #15]
                pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800c226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c228:	2200      	movs	r2, #0
 800c22a:	741a      	strb	r2, [r3, #16]
 800c22c:	2200      	movs	r2, #0
 800c22e:	745a      	strb	r2, [r3, #17]
                pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( ulPayloadLength );
 800c230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c232:	b29b      	uxth	r3, r3
 800c234:	021b      	lsls	r3, r3, #8
 800c236:	b29a      	uxth	r2, r3
 800c238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c23a:	0a1b      	lsrs	r3, r3, #8
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	4313      	orrs	r3, r2
 800c240:	b29a      	uxth	r2, r3
 800c242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c244:	825a      	strh	r2, [r3, #18]
                pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800c246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c248:	223a      	movs	r2, #58	@ 0x3a
 800c24a:	751a      	strb	r2, [r3, #20]
                pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800c24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c24e:	22ff      	movs	r2, #255	@ 0xff
 800c250:	755a      	strb	r2, [r3, #21]

                /* Source address */
                ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c254:	f103 0016 	add.w	r0, r3, #22
 800c258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c25a:	3338      	adds	r3, #56	@ 0x38
 800c25c:	2210      	movs	r2, #16
 800c25e:	4619      	mov	r1, r3
 800c260:	f016 f98e 	bl	8022580 <memcpy>

                /*ff02::1:ff5a:afe7 */
                ( void ) memset( xTargetIPAddress.ucBytes, 0, sizeof( xTargetIPAddress.ucBytes ) );
 800c264:	f107 0310 	add.w	r3, r7, #16
 800c268:	2210      	movs	r2, #16
 800c26a:	2100      	movs	r1, #0
 800c26c:	4618      	mov	r0, r3
 800c26e:	f016 fa94 	bl	802279a <memset>
                xTargetIPAddress.ucBytes[ 0 ] = 0xff;
 800c272:	23ff      	movs	r3, #255	@ 0xff
 800c274:	743b      	strb	r3, [r7, #16]
                xTargetIPAddress.ucBytes[ 1 ] = 0x02;
 800c276:	2302      	movs	r3, #2
 800c278:	747b      	strb	r3, [r7, #17]
                xTargetIPAddress.ucBytes[ 11 ] = 0x01;
 800c27a:	2301      	movs	r3, #1
 800c27c:	76fb      	strb	r3, [r7, #27]
                xTargetIPAddress.ucBytes[ 12 ] = 0xff;
 800c27e:	23ff      	movs	r3, #255	@ 0xff
 800c280:	773b      	strb	r3, [r7, #28]
                xTargetIPAddress.ucBytes[ 13 ] = pxIPAddress->ucBytes[ 13 ];
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	7b5b      	ldrb	r3, [r3, #13]
 800c286:	777b      	strb	r3, [r7, #29]
                xTargetIPAddress.ucBytes[ 14 ] = pxIPAddress->ucBytes[ 14 ];
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	7b9b      	ldrb	r3, [r3, #14]
 800c28c:	77bb      	strb	r3, [r7, #30]
                xTargetIPAddress.ucBytes[ 15 ] = pxIPAddress->ucBytes[ 15 ];
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	7bdb      	ldrb	r3, [r3, #15]
 800c292:	77fb      	strb	r3, [r7, #31]
                ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, xTargetIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c296:	3326      	adds	r3, #38	@ 0x26
 800c298:	461d      	mov	r5, r3
 800c29a:	f107 0410 	add.w	r4, r7, #16
 800c29e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2a0:	6028      	str	r0, [r5, #0]
 800c2a2:	6069      	str	r1, [r5, #4]
 800c2a4:	60aa      	str	r2, [r5, #8]
 800c2a6:	60eb      	str	r3, [r5, #12]

                /* Set ICMP header. */
                ( void ) memset( pxICMPHeader_IPv6, 0, sizeof( *pxICMPHeader_IPv6 ) );
 800c2a8:	2220      	movs	r2, #32
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	6a38      	ldr	r0, [r7, #32]
 800c2ae:	f016 fa74 	bl	802279a <memset>
                pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_SOLICITATION_IPv6;
 800c2b2:	6a3b      	ldr	r3, [r7, #32]
 800c2b4:	2287      	movs	r2, #135	@ 0x87
 800c2b6:	701a      	strb	r2, [r3, #0]
                ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c2b8:	6a3b      	ldr	r3, [r7, #32]
 800c2ba:	3308      	adds	r3, #8
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	2210      	movs	r2, #16
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f016 f95d 	bl	8022580 <memcpy>
                pxICMPHeader_IPv6->ucOptionType = ndICMP_SOURCE_LINK_LAYER_ADDRESS;
 800c2c6:	6a3b      	ldr	r3, [r7, #32]
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	761a      	strb	r2, [r3, #24]
                pxICMPHeader_IPv6->ucOptionLength = 1U; /* times 8 bytes. */
 800c2cc:	6a3b      	ldr	r3, [r7, #32]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	765a      	strb	r2, [r3, #25]
                ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c2d2:	6a3b      	ldr	r3, [r7, #32]
 800c2d4:	f103 001a 	add.w	r0, r3, #26
 800c2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2da:	33e8      	adds	r3, #232	@ 0xe8
 800c2dc:	2206      	movs	r2, #6
 800c2de:	4619      	mov	r1, r3
 800c2e0:	f016 f94e 	bl	8022580 <memcpy>
                }
                #else
                {
                    /* Many EMAC peripherals will only calculate the ICMP checksum
                     * correctly if the field is nulled beforehand. */
                    pxICMPHeader_IPv6->usChecksum = 0U;
 800c2e4:	6a3b      	ldr	r3, [r7, #32]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	709a      	strb	r2, [r3, #2]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	70da      	strb	r2, [r3, #3]
                }
                #endif

                /* This function will fill in the eth addresses and send the packet */
                vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800c2ee:	2101      	movs	r1, #1
 800c2f0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c2f2:	f7fd fd71 	bl	8009dd8 <vReturnEthernetFrame>
                xReleased = pdTRUE;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        }

        if( ( pxDescriptor != NULL ) && ( xReleased == pdFALSE ) )
 800c2fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d005      	beq.n	800c30c <vNDSendNeighbourSolicitation+0x1b8>
 800c300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c302:	2b00      	cmp	r3, #0
 800c304:	d102      	bne.n	800c30c <vNDSendNeighbourSolicitation+0x1b8>
        {
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c306:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c308:	f00b f876 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
        }
    }
 800c30c:	bf00      	nop
 800c30e:	3740      	adds	r7, #64	@ 0x40
 800c310:	46bd      	mov	sp, r7
 800c312:	bdb0      	pop	{r4, r5, r7, pc}

0800c314 <pcMessageType>:
 * @param[in] xType The type of message.
 *
 * @return A null-terminated string that represents the type the kind of message.
 */
        static const char * pcMessageType( BaseType_t xType )
        {
 800c314:	b480      	push	{r7}
 800c316:	b085      	sub	sp, #20
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
            const char * pcReturn;

            switch( ( uint8_t ) xType )
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	2b04      	cmp	r3, #4
 800c322:	dc29      	bgt.n	800c378 <pcMessageType+0x64>
 800c324:	2b00      	cmp	r3, #0
 800c326:	dc19      	bgt.n	800c35c <pcMessageType+0x48>
 800c328:	e049      	b.n	800c3be <pcMessageType+0xaa>
 800c32a:	3b80      	subs	r3, #128	@ 0x80
 800c32c:	2b08      	cmp	r3, #8
 800c32e:	d846      	bhi.n	800c3be <pcMessageType+0xaa>
 800c330:	a201      	add	r2, pc, #4	@ (adr r2, 800c338 <pcMessageType+0x24>)
 800c332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c336:	bf00      	nop
 800c338:	0800c39b 	.word	0x0800c39b
 800c33c:	0800c3a1 	.word	0x0800c3a1
 800c340:	0800c3bf 	.word	0x0800c3bf
 800c344:	0800c3bf 	.word	0x0800c3bf
 800c348:	0800c3bf 	.word	0x0800c3bf
 800c34c:	0800c3a7 	.word	0x0800c3a7
 800c350:	0800c3ad 	.word	0x0800c3ad
 800c354:	0800c3b3 	.word	0x0800c3b3
 800c358:	0800c3b9 	.word	0x0800c3b9
 800c35c:	3b01      	subs	r3, #1
 800c35e:	2b03      	cmp	r3, #3
 800c360:	d82d      	bhi.n	800c3be <pcMessageType+0xaa>
 800c362:	a201      	add	r2, pc, #4	@ (adr r2, 800c368 <pcMessageType+0x54>)
 800c364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c368:	0800c383 	.word	0x0800c383
 800c36c:	0800c389 	.word	0x0800c389
 800c370:	0800c38f 	.word	0x0800c38f
 800c374:	0800c395 	.word	0x0800c395
 800c378:	2b88      	cmp	r3, #136	@ 0x88
 800c37a:	dc20      	bgt.n	800c3be <pcMessageType+0xaa>
 800c37c:	2b80      	cmp	r3, #128	@ 0x80
 800c37e:	dad4      	bge.n	800c32a <pcMessageType+0x16>
 800c380:	e01d      	b.n	800c3be <pcMessageType+0xaa>
            {
                case ipICMP_DEST_UNREACHABLE_IPv6:
                    pcReturn = "DEST_UNREACHABLE";
 800c382:	4b14      	ldr	r3, [pc, #80]	@ (800c3d4 <pcMessageType+0xc0>)
 800c384:	60fb      	str	r3, [r7, #12]
                    break;
 800c386:	e01d      	b.n	800c3c4 <pcMessageType+0xb0>

                case ipICMP_PACKET_TOO_BIG_IPv6:
                    pcReturn = "PACKET_TOO_BIG";
 800c388:	4b13      	ldr	r3, [pc, #76]	@ (800c3d8 <pcMessageType+0xc4>)
 800c38a:	60fb      	str	r3, [r7, #12]
                    break;
 800c38c:	e01a      	b.n	800c3c4 <pcMessageType+0xb0>

                case ipICMP_TIME_EXCEEDED_IPv6:
                    pcReturn = "TIME_EXCEEDED";
 800c38e:	4b13      	ldr	r3, [pc, #76]	@ (800c3dc <pcMessageType+0xc8>)
 800c390:	60fb      	str	r3, [r7, #12]
                    break;
 800c392:	e017      	b.n	800c3c4 <pcMessageType+0xb0>

                case ipICMP_PARAMETER_PROBLEM_IPv6:
                    pcReturn = "PARAMETER_PROBLEM";
 800c394:	4b12      	ldr	r3, [pc, #72]	@ (800c3e0 <pcMessageType+0xcc>)
 800c396:	60fb      	str	r3, [r7, #12]
                    break;
 800c398:	e014      	b.n	800c3c4 <pcMessageType+0xb0>

                case ipICMP_PING_REQUEST_IPv6:
                    pcReturn = "PING_REQUEST";
 800c39a:	4b12      	ldr	r3, [pc, #72]	@ (800c3e4 <pcMessageType+0xd0>)
 800c39c:	60fb      	str	r3, [r7, #12]
                    break;
 800c39e:	e011      	b.n	800c3c4 <pcMessageType+0xb0>

                case ipICMP_PING_REPLY_IPv6:
                    pcReturn = "PING_REPLY";
 800c3a0:	4b11      	ldr	r3, [pc, #68]	@ (800c3e8 <pcMessageType+0xd4>)
 800c3a2:	60fb      	str	r3, [r7, #12]
                    break;
 800c3a4:	e00e      	b.n	800c3c4 <pcMessageType+0xb0>

                case ipICMP_ROUTER_SOLICITATION_IPv6:
                    pcReturn = "ROUTER_SOL";
 800c3a6:	4b11      	ldr	r3, [pc, #68]	@ (800c3ec <pcMessageType+0xd8>)
 800c3a8:	60fb      	str	r3, [r7, #12]
                    break;
 800c3aa:	e00b      	b.n	800c3c4 <pcMessageType+0xb0>

                case ipICMP_ROUTER_ADVERTISEMENT_IPv6:
                    pcReturn = "ROUTER_ADV";
 800c3ac:	4b10      	ldr	r3, [pc, #64]	@ (800c3f0 <pcMessageType+0xdc>)
 800c3ae:	60fb      	str	r3, [r7, #12]
                    break;
 800c3b0:	e008      	b.n	800c3c4 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_SOLICITATION_IPv6:
                    pcReturn = "NEIGHBOR_SOL";
 800c3b2:	4b10      	ldr	r3, [pc, #64]	@ (800c3f4 <pcMessageType+0xe0>)
 800c3b4:	60fb      	str	r3, [r7, #12]
                    break;
 800c3b6:	e005      	b.n	800c3c4 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6:
                    pcReturn = "NEIGHBOR_ADV";
 800c3b8:	4b0f      	ldr	r3, [pc, #60]	@ (800c3f8 <pcMessageType+0xe4>)
 800c3ba:	60fb      	str	r3, [r7, #12]
                    break;
 800c3bc:	e002      	b.n	800c3c4 <pcMessageType+0xb0>

                default:
                    pcReturn = "UNKNOWN ICMP";
 800c3be:	4b0f      	ldr	r3, [pc, #60]	@ (800c3fc <pcMessageType+0xe8>)
 800c3c0:	60fb      	str	r3, [r7, #12]
                    break;
 800c3c2:	bf00      	nop
            }

            return pcReturn;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
        }
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3714      	adds	r7, #20
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	08025458 	.word	0x08025458
 800c3d8:	0802546c 	.word	0x0802546c
 800c3dc:	0802547c 	.word	0x0802547c
 800c3e0:	0802548c 	.word	0x0802548c
 800c3e4:	080254a0 	.word	0x080254a0
 800c3e8:	080254b0 	.word	0x080254b0
 800c3ec:	080254bc 	.word	0x080254bc
 800c3f0:	080254c8 	.word	0x080254c8
 800c3f4:	080254d4 	.word	0x080254d4
 800c3f8:	080254e4 	.word	0x080254e4
 800c3fc:	080254f4 	.word	0x080254f4

0800c400 <prvCheckWaitingBuffer>:
 * @brief When a neighbour advertisement has been received, check if 'pxARPWaitingNetworkBuffer'
 *        was waiting for this new address look-up. If so, feed it to the IP-task as a new
 *        incoming packet.
 */
    static void prvCheckWaitingBuffer( const IPv6_Address_t * pxIPv6Address )
    {
 800c400:	b580      	push	{r7, lr}
 800c402:	b088      	sub	sp, #32
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 800c408:	4b19      	ldr	r3, [pc, #100]	@ (800c470 <prvCheckWaitingBuffer+0x70>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c40e:	61fb      	str	r3, [r7, #28]
        const IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	330e      	adds	r3, #14
 800c414:	61bb      	str	r3, [r7, #24]

        if( memcmp( pxIPv6Address->ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	3308      	adds	r3, #8
 800c41c:	2210      	movs	r2, #16
 800c41e:	4619      	mov	r1, r3
 800c420:	f017 f843 	bl	80234aa <memcmp>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d11d      	bne.n	800c466 <prvCheckWaitingBuffer+0x66>
        {
            IPStackEvent_t xEventMessage;
            const TickType_t xDontBlock = ( TickType_t ) 0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	617b      	str	r3, [r7, #20]

            FreeRTOS_printf( ( "Waiting done\n" ) );
 800c42e:	4811      	ldr	r0, [pc, #68]	@ (800c474 <prvCheckWaitingBuffer+0x74>)
 800c430:	f015 fe8a 	bl	8022148 <lUDPLoggingPrintf>

            xEventMessage.eEventType = eNetworkRxEvent;
 800c434:	2301      	movs	r3, #1
 800c436:	733b      	strb	r3, [r7, #12]
            xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 800c438:	4b0d      	ldr	r3, [pc, #52]	@ (800c470 <prvCheckWaitingBuffer+0x70>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	613b      	str	r3, [r7, #16]

            if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800c43e:	f107 030c 	add.w	r3, r7, #12
 800c442:	6979      	ldr	r1, [r7, #20]
 800c444:	4618      	mov	r0, r3
 800c446:	f7fd fa13 	bl	8009870 <xSendEventStructToIPTask>
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d004      	beq.n	800c45a <prvCheckWaitingBuffer+0x5a>
            {
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( BUFFER_FROM_WHERE_CALL( 140 ) pxARPWaitingNetworkBuffer );
 800c450:	4b07      	ldr	r3, [pc, #28]	@ (800c470 <prvCheckWaitingBuffer+0x70>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4618      	mov	r0, r3
 800c456:	f00a ffcf 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
            }

            /* Clear the buffer. */
            pxARPWaitingNetworkBuffer = NULL;
 800c45a:	4b05      	ldr	r3, [pc, #20]	@ (800c470 <prvCheckWaitingBuffer+0x70>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	601a      	str	r2, [r3, #0]

            /* Found an ARP resolution, disable ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800c460:	2000      	movs	r0, #0
 800c462:	f7fd fffb 	bl	800a45c <vIPSetARPResolutionTimerEnableState>

            iptrace_DELAYED_ARP_REQUEST_REPLIED();
        }
    }
 800c466:	bf00      	nop
 800c468:	3720      	adds	r7, #32
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	20001118 	.word	0x20001118
 800c474:	08025504 	.word	0x08025504

0800c478 <prvProcessICMPMessage_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet which contains an IPv6 message.
 *
 * @return A const value 'eReleaseBuffer' which means that the network must still be released.
 */
    eFrameProcessingResult_t prvProcessICMPMessage_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800c478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c47c:	b09e      	sub	sp, #120	@ 0x78
 800c47e:	af02      	add	r7, sp, #8
 800c480:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c486:	65fb      	str	r3, [r7, #92]	@ 0x5c
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c488:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c48a:	3336      	adds	r3, #54	@ 0x36
 800c48c:	65bb      	str	r3, [r7, #88]	@ 0x58
        /* Note: pxNetworkBuffer->pxEndPoint is already verified to be non-NULL in prvProcessEthernetPacket() */
        NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c492:	657b      	str	r3, [r7, #84]	@ 0x54
        size_t uxNeededSize;

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            if( pxICMPHeader_IPv6->ucTypeOfMessage != ipICMP_PING_REQUEST_IPv6 )
 800c494:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	2b80      	cmp	r3, #128	@ 0x80
 800c49a:	d01e      	beq.n	800c4da <prvProcessICMPMessage_IPv6+0x62>
            {
                char pcAddress[ 40 ];
                FreeRTOS_printf( ( "ICMPv6_recv %d (%s) from %pip to %pip end-point = %s\n",
 800c49c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	4698      	mov	r8, r3
 800c4a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7ff ff34 	bl	800c314 <pcMessageType>
 800c4ac:	4606      	mov	r6, r0
 800c4ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c4b0:	f103 0516 	add.w	r5, r3, #22
 800c4b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c4b6:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800c4ba:	f107 030c 	add.w	r3, r7, #12
 800c4be:	2228      	movs	r2, #40	@ 0x28
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c4c4:	f001 fd5c 	bl	800df80 <pcEndpointName>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	9301      	str	r3, [sp, #4]
 800c4cc:	9400      	str	r4, [sp, #0]
 800c4ce:	462b      	mov	r3, r5
 800c4d0:	4632      	mov	r2, r6
 800c4d2:	4641      	mov	r1, r8
 800c4d4:	48a7      	ldr	r0, [pc, #668]	@ (800c774 <prvProcessICMPMessage_IPv6+0x2fc>)
 800c4d6:	f015 fe37 	bl	8022148 <lUDPLoggingPrintf>
                                   pcEndpointName( pxEndPoint, pcAddress, sizeof( pcAddress ) ) ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800c4da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4dc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c4e0:	f003 0304 	and.w	r3, r3, #4
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f000 813e 	beq.w	800c768 <prvProcessICMPMessage_IPv6+0x2f0>
        {
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800c4ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	2b04      	cmp	r3, #4
 800c4f2:	dc1d      	bgt.n	800c530 <prvProcessICMPMessage_IPv6+0xb8>
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f300 8130 	bgt.w	800c75a <prvProcessICMPMessage_IPv6+0x2e2>
                            break;
                    #endif /* ( ipconfigUSE_RA != 0 ) */

                default:
                    /* All possible values are included here above. */
                    break;
 800c4fa:	e130      	b.n	800c75e <prvProcessICMPMessage_IPv6+0x2e6>
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800c4fc:	3b80      	subs	r3, #128	@ 0x80
 800c4fe:	2b08      	cmp	r3, #8
 800c500:	f200 812d 	bhi.w	800c75e <prvProcessICMPMessage_IPv6+0x2e6>
 800c504:	a201      	add	r2, pc, #4	@ (adr r2, 800c50c <prvProcessICMPMessage_IPv6+0x94>)
 800c506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c50a:	bf00      	nop
 800c50c:	0800c53d 	.word	0x0800c53d
 800c510:	0800c585 	.word	0x0800c585
 800c514:	0800c75f 	.word	0x0800c75f
 800c518:	0800c75f 	.word	0x0800c75f
 800c51c:	0800c75f 	.word	0x0800c75f
 800c520:	0800c75f 	.word	0x0800c75f
 800c524:	0800c753 	.word	0x0800c753
 800c528:	0800c5fb 	.word	0x0800c5fb
 800c52c:	0800c70b 	.word	0x0800c70b
 800c530:	2b88      	cmp	r3, #136	@ 0x88
 800c532:	f300 8114 	bgt.w	800c75e <prvProcessICMPMessage_IPv6+0x2e6>
 800c536:	2b80      	cmp	r3, #128	@ 0x80
 800c538:	dae0      	bge.n	800c4fc <prvProcessICMPMessage_IPv6+0x84>
                    break;
 800c53a:	e110      	b.n	800c75e <prvProcessICMPMessage_IPv6+0x2e6>
                       usICMPSize = FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength );
 800c53c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c53e:	8a5b      	ldrh	r3, [r3, #18]
 800c540:	b29b      	uxth	r3, r3
 800c542:	021b      	lsls	r3, r3, #8
 800c544:	b21a      	sxth	r2, r3
 800c546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c548:	8a5b      	ldrh	r3, [r3, #18]
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	0a1b      	lsrs	r3, r3, #8
 800c54e:	b29b      	uxth	r3, r3
 800c550:	b21b      	sxth	r3, r3
 800c552:	4313      	orrs	r3, r2
 800c554:	b21b      	sxth	r3, r3
 800c556:	877b      	strh	r3, [r7, #58]	@ 0x3a
                       uxICMPSize = ( size_t ) usICMPSize;
 800c558:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c55a:	637b      	str	r3, [r7, #52]	@ 0x34
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c55c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c55e:	3336      	adds	r3, #54	@ 0x36
 800c560:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c568:	429a      	cmp	r2, r3
 800c56a:	d903      	bls.n	800c574 <prvProcessICMPMessage_IPv6+0xfc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800c56c:	4882      	ldr	r0, [pc, #520]	@ (800c778 <prvProcessICMPMessage_IPv6+0x300>)
 800c56e:	f015 fdeb 	bl	8022148 <lUDPLoggingPrintf>
                           break;
 800c572:	e0f9      	b.n	800c768 <prvProcessICMPMessage_IPv6+0x2f0>
                       pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_PING_REPLY_IPv6;
 800c574:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c576:	2281      	movs	r2, #129	@ 0x81
 800c578:	701a      	strb	r2, [r3, #0]
                       prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800c57a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff fdad 	bl	800c0dc <prvReturnICMP_IPv6>
                   break;
 800c582:	e0f1      	b.n	800c768 <prvProcessICMPMessage_IPv6+0x2f0>
                               ePingReplyStatus_t eStatus = eSuccess;
 800c584:	2300      	movs	r3, #0
 800c586:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                               const ICMPEcho_IPv6_t * pxICMPEchoHeader = ( ( const ICMPEcho_IPv6_t * ) pxICMPHeader_IPv6 );
 800c58a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c58c:	643b      	str	r3, [r7, #64]	@ 0x40
                               uxDataLength = ipNUMERIC_CAST( size_t, FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength ) );
 800c58e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c590:	8a5b      	ldrh	r3, [r3, #18]
 800c592:	b29b      	uxth	r3, r3
 800c594:	021b      	lsls	r3, r3, #8
 800c596:	b21a      	sxth	r2, r3
 800c598:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c59a:	8a5b      	ldrh	r3, [r3, #18]
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	0a1b      	lsrs	r3, r3, #8
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	b21b      	sxth	r3, r3
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	b21b      	sxth	r3, r3
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               uxDataLength = uxDataLength - sizeof( *pxICMPEchoHeader );
 800c5ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5ae:	3b08      	subs	r3, #8
 800c5b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               pucByte = ( const uint8_t * ) pxICMPEchoHeader;
 800c5b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5b4:	667b      	str	r3, [r7, #100]	@ 0x64
                               pucByte = &( pucByte[ sizeof( *pxICMPEchoHeader ) ] );
 800c5b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c5b8:	3308      	adds	r3, #8
 800c5ba:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800c5bc:	2300      	movs	r3, #0
 800c5be:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c5c0:	e00d      	b.n	800c5de <prvProcessICMPMessage_IPv6+0x166>
                                   if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800c5c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	2b78      	cmp	r3, #120	@ 0x78
 800c5c8:	d003      	beq.n	800c5d2 <prvProcessICMPMessage_IPv6+0x15a>
                                       eStatus = eInvalidData;
 800c5ca:	2302      	movs	r3, #2
 800c5cc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                                       break;
 800c5d0:	e009      	b.n	800c5e6 <prvProcessICMPMessage_IPv6+0x16e>
                                   pucByte++;
 800c5d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800c5d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c5da:	3301      	adds	r3, #1
 800c5dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c5de:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c5e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d3ed      	bcc.n	800c5c2 <prvProcessICMPMessage_IPv6+0x14a>
                               vApplicationPingReplyHook( eStatus, pxICMPEchoHeader->usIdentifier );
 800c5e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5e8:	889b      	ldrh	r3, [r3, #4]
 800c5ea:	b29a      	uxth	r2, r3
 800c5ec:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c5f0:	4611      	mov	r1, r2
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7f5 fa66 	bl	8001ac4 <vApplicationPingReplyHook>
                           break;
 800c5f8:	e0b6      	b.n	800c768 <prvProcessICMPMessage_IPv6+0x2f0>
                       const NetworkEndPoint_t * pxTargetedEndPoint = pxEndPoint;
 800c5fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5fc:	663b      	str	r3, [r7, #96]	@ 0x60
                       const NetworkEndPoint_t * pxEndPointInSameSubnet = FreeRTOS_InterfaceEPInSameSubnet_IPv6( pxNetworkBuffer->pxInterface, &( pxICMPHeader_IPv6->xIPv6Address ) );
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c602:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c604:	3308      	adds	r3, #8
 800c606:	4619      	mov	r1, r3
 800c608:	4610      	mov	r0, r2
 800c60a:	f001 f9cd 	bl	800d9a8 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800c60e:	6538      	str	r0, [r7, #80]	@ 0x50
                       if( pxEndPointInSameSubnet != NULL )
 800c610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c612:	2b00      	cmp	r3, #0
 800c614:	d002      	beq.n	800c61c <prvProcessICMPMessage_IPv6+0x1a4>
                           pxTargetedEndPoint = pxEndPointInSameSubnet;
 800c616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c618:	663b      	str	r3, [r7, #96]	@ 0x60
 800c61a:	e005      	b.n	800c628 <prvProcessICMPMessage_IPv6+0x1b0>
                           FreeRTOS_debug_printf( ( "prvProcessICMPMessage_IPv6: No match for %pip\n",
 800c61c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c61e:	3308      	adds	r3, #8
 800c620:	4619      	mov	r1, r3
 800c622:	4856      	ldr	r0, [pc, #344]	@ (800c77c <prvProcessICMPMessage_IPv6+0x304>)
 800c624:	f015 fd90 	bl	8022148 <lUDPLoggingPrintf>
                       uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800c628:	2320      	movs	r3, #32
 800c62a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c62c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c62e:	3336      	adds	r3, #54	@ 0x36
 800c630:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c636:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c638:	429a      	cmp	r2, r3
 800c63a:	d903      	bls.n	800c644 <prvProcessICMPMessage_IPv6+0x1cc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800c63c:	484e      	ldr	r0, [pc, #312]	@ (800c778 <prvProcessICMPMessage_IPv6+0x300>)
 800c63e:	f015 fd83 	bl	8022148 <lUDPLoggingPrintf>
                           break;
 800c642:	e091      	b.n	800c768 <prvProcessICMPMessage_IPv6+0x2f0>
                       xCompare = memcmp( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c644:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c646:	f103 0008 	add.w	r0, r3, #8
 800c64a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c64c:	3338      	adds	r3, #56	@ 0x38
 800c64e:	2210      	movs	r2, #16
 800c650:	4619      	mov	r1, r3
 800c652:	f016 ff2a 	bl	80234aa <memcmp>
 800c656:	6478      	str	r0, [r7, #68]	@ 0x44
                       FreeRTOS_printf( ( "ND NS for %pip endpoint %pip %s\n",
 800c658:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c65a:	f103 0108 	add.w	r1, r3, #8
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c662:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d101      	bne.n	800c670 <prvProcessICMPMessage_IPv6+0x1f8>
 800c66c:	4b44      	ldr	r3, [pc, #272]	@ (800c780 <prvProcessICMPMessage_IPv6+0x308>)
 800c66e:	e000      	b.n	800c672 <prvProcessICMPMessage_IPv6+0x1fa>
 800c670:	4b44      	ldr	r3, [pc, #272]	@ (800c784 <prvProcessICMPMessage_IPv6+0x30c>)
 800c672:	4845      	ldr	r0, [pc, #276]	@ (800c788 <prvProcessICMPMessage_IPv6+0x310>)
 800c674:	f015 fd68 	bl	8022148 <lUDPLoggingPrintf>
                       if( xCompare == 0 )
 800c678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d171      	bne.n	800c762 <prvProcessICMPMessage_IPv6+0x2ea>
                           pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800c67e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c680:	2288      	movs	r2, #136	@ 0x88
 800c682:	701a      	strb	r2, [r3, #0]
                           pxICMPHeader_IPv6->ucTypeOfService = 0U;
 800c684:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c686:	2200      	movs	r2, #0
 800c688:	705a      	strb	r2, [r3, #1]
                           pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800c68a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c68c:	2200      	movs	r2, #0
 800c68e:	711a      	strb	r2, [r3, #4]
 800c690:	2200      	movs	r2, #0
 800c692:	715a      	strb	r2, [r3, #5]
 800c694:	2200      	movs	r2, #0
 800c696:	719a      	strb	r2, [r3, #6]
 800c698:	2200      	movs	r2, #0
 800c69a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c69e:	71da      	strb	r2, [r3, #7]
                           pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800c6a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	061a      	lsls	r2, r3, #24
 800c6a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	021b      	lsls	r3, r3, #8
 800c6ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c6b0:	431a      	orrs	r2, r3
 800c6b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	0a1b      	lsrs	r3, r3, #8
 800c6b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c6bc:	431a      	orrs	r2, r3
 800c6be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	0e1b      	lsrs	r3, r3, #24
 800c6c4:	431a      	orrs	r2, r3
 800c6c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6c8:	605a      	str	r2, [r3, #4]
                           pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800c6ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6cc:	2202      	movs	r2, #2
 800c6ce:	761a      	strb	r2, [r3, #24]
                           pxICMPHeader_IPv6->ucOptionLength = 1U;
 800c6d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	765a      	strb	r2, [r3, #25]
                           ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxTargetedEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800c6d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6d8:	f103 001a 	add.w	r0, r3, #26
 800c6dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c6de:	33e8      	adds	r3, #232	@ 0xe8
 800c6e0:	2206      	movs	r2, #6
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	f015 ff4c 	bl	8022580 <memcpy>
                           pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800c6e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c6ea:	22ff      	movs	r2, #255	@ 0xff
 800c6ec:	755a      	strb	r2, [r3, #21]
                           ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800c6ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6f0:	f103 0008 	add.w	r0, r3, #8
 800c6f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c6f6:	3338      	adds	r3, #56	@ 0x38
 800c6f8:	2210      	movs	r2, #16
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	f015 ff40 	bl	8022580 <memcpy>
                           prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800c700:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f7ff fcea 	bl	800c0dc <prvReturnICMP_IPv6>
                   break;
 800c708:	e02b      	b.n	800c762 <prvProcessICMPMessage_IPv6+0x2ea>
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800c70a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c70c:	f103 001a 	add.w	r0, r3, #26
                                          &( pxICMPHeader_IPv6->xIPv6Address ),
 800c710:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c712:	3308      	adds	r3, #8
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800c714:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c716:	4619      	mov	r1, r3
 800c718:	f7ff fb5e 	bl	800bdd8 <vNDRefreshCacheEntry>
                    FreeRTOS_printf( ( "NEIGHBOR_ADV from %pip\n",
 800c71c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c71e:	3308      	adds	r3, #8
 800c720:	4619      	mov	r1, r3
 800c722:	481a      	ldr	r0, [pc, #104]	@ (800c78c <prvProcessICMPMessage_IPv6+0x314>)
 800c724:	f015 fd10 	bl	8022148 <lUDPLoggingPrintf>
                        vReceiveNA( pxNetworkBuffer );
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 fa89 	bl	800cc40 <vReceiveNA>
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800c72e:	4b18      	ldr	r3, [pc, #96]	@ (800c790 <prvProcessICMPMessage_IPv6+0x318>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d017      	beq.n	800c766 <prvProcessICMPMessage_IPv6+0x2ee>
                        ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER ) )
 800c736:	4b16      	ldr	r3, [pc, #88]	@ (800c790 <prvProcessICMPMessage_IPv6+0x318>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7fd fc4c 	bl	8009fd8 <uxIPHeaderSizePacket>
 800c740:	4603      	mov	r3, r0
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800c742:	2b28      	cmp	r3, #40	@ 0x28
 800c744:	d10f      	bne.n	800c766 <prvProcessICMPMessage_IPv6+0x2ee>
                        prvCheckWaitingBuffer( &( pxICMPHeader_IPv6->xIPv6Address ) );
 800c746:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c748:	3308      	adds	r3, #8
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7ff fe58 	bl	800c400 <prvCheckWaitingBuffer>
                    break;
 800c750:	e009      	b.n	800c766 <prvProcessICMPMessage_IPv6+0x2ee>
                            vReceiveRA( pxNetworkBuffer );
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 fb9a 	bl	800ce8c <vReceiveRA>
                            break;
 800c758:	e006      	b.n	800c768 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800c75a:	bf00      	nop
 800c75c:	e004      	b.n	800c768 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800c75e:	bf00      	nop
 800c760:	e002      	b.n	800c768 <prvProcessICMPMessage_IPv6+0x2f0>
                   break;
 800c762:	bf00      	nop
 800c764:	e000      	b.n	800c768 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800c766:	bf00      	nop
            } /* switch( pxICMPHeader_IPv6->ucTypeOfMessage ) */
        }     /* if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) */

        return eReleaseBuffer;
 800c768:	2300      	movs	r3, #0
    }
 800c76a:	4618      	mov	r0, r3
 800c76c:	3770      	adds	r7, #112	@ 0x70
 800c76e:	46bd      	mov	sp, r7
 800c770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c774:	08025514 	.word	0x08025514
 800c778:	0802554c 	.word	0x0802554c
 800c77c:	08025558 	.word	0x08025558
 800c780:	08025588 	.word	0x08025588
 800c784:	08025590 	.word	0x08025590
 800c788:	08025598 	.word	0x08025598
 800c78c:	080255bc 	.word	0x080255bc
 800c790:	20001118 	.word	0x20001118

0800c794 <FreeRTOS_OutputAdvertiseIPv6>:
    /* MISRA Ref 8.9.1 [File scoped variables] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
    /* coverity[misra_c_2012_rule_8_9_violation] */
    /* coverity[single_use] */
    void FreeRTOS_OutputAdvertiseIPv6( NetworkEndPoint_t * pxEndPoint )
    {
 800c794:	b5b0      	push	{r4, r5, r7, lr}
 800c796:	b088      	sub	sp, #32
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxInterface;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        size_t uxICMPSize;
        size_t uxPacketSize;

        uxPacketSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800c79c:	2356      	movs	r3, #86	@ 0x56
 800c79e:	61fb      	str	r3, [r7, #28]

        /* This is called from the context of the IP event task, so a block time
         * must not be used. */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPacketSize, ndDONT_BLOCK );
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	69f8      	ldr	r0, [r7, #28]
 800c7a4:	f00a fdc0 	bl	8017328 <pxGetNetworkBufferWithDescriptor>
 800c7a8:	61b8      	str	r0, [r7, #24]

        if( pxNetworkBuffer != NULL )
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f000 80b1 	beq.w	800c914 <FreeRTOS_OutputAdvertiseIPv6+0x180>
        {
            ( void ) memset( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	3314      	adds	r3, #20
 800c7b6:	2210      	movs	r2, #16
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f015 ffed 	bl	802279a <memset>
            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	631a      	str	r2, [r3, #48]	@ 0x30

            pxInterface = pxEndPoint->pxNetworkInterface;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c7cc:	617b      	str	r3, [r7, #20]

            configASSERT( pxInterface != NULL );
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d104      	bne.n	800c7de <FreeRTOS_OutputAdvertiseIPv6+0x4a>
 800c7d4:	f240 419e 	movw	r1, #1182	@ 0x49e
 800c7d8:	4850      	ldr	r0, [pc, #320]	@ (800c91c <FreeRTOS_OutputAdvertiseIPv6+0x188>)
 800c7da:	f7f5 f8bd 	bl	8001958 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e2:	613b      	str	r3, [r7, #16]
            pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	3336      	adds	r3, #54	@ 0x36
 800c7e8:	60fb      	str	r3, [r7, #12]

            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_MAC, ipMAC_ADDRESS_LENGTH_BYTES );
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	4a4c      	ldr	r2, [pc, #304]	@ (800c920 <FreeRTOS_OutputAdvertiseIPv6+0x18c>)
 800c7ee:	6810      	ldr	r0, [r2, #0]
 800c7f0:	6018      	str	r0, [r3, #0]
 800c7f2:	8892      	ldrh	r2, [r2, #4]
 800c7f4:	809a      	strh	r2, [r3, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	1d98      	adds	r0, r3, #6
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	33e8      	adds	r3, #232	@ 0xe8
 800c7fe:	2206      	movs	r2, #6
 800c800:	4619      	mov	r1, r3
 800c802:	f015 febd 	bl	8022580 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE; /* 12 + 2 = 14 */
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	2200      	movs	r2, #0
 800c80a:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800c80e:	731a      	strb	r2, [r3, #12]
 800c810:	2200      	movs	r2, #0
 800c812:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800c816:	735a      	strb	r2, [r3, #13]

            pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60;
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	2260      	movs	r2, #96	@ 0x60
 800c81c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0;
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	2200      	movs	r2, #0
 800c822:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0;
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	2200      	movs	r2, #0
 800c828:	741a      	strb	r2, [r3, #16]
 800c82a:	2200      	movs	r2, #0
 800c82c:	745a      	strb	r2, [r3, #17]

            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPHeader_IPv6_t ) );
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	2200      	movs	r2, #0
 800c832:	749a      	strb	r2, [r3, #18]
 800c834:	2200      	movs	r2, #0
 800c836:	f042 0220 	orr.w	r2, r2, #32
 800c83a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	223a      	movs	r2, #58	@ 0x3a
 800c840:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	22ff      	movs	r2, #255	@ 0xff
 800c846:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	f103 0016 	add.w	r0, r3, #22
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	3338      	adds	r3, #56	@ 0x38
 800c852:	2210      	movs	r2, #16
 800c854:	4619      	mov	r1, r3
 800c856:	f015 fe93 	bl	8022580 <memcpy>
            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_IP, ipSIZE_OF_IPv6_ADDRESS );
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	3326      	adds	r3, #38	@ 0x26
 800c85e:	4a31      	ldr	r2, [pc, #196]	@ (800c924 <FreeRTOS_OutputAdvertiseIPv6+0x190>)
 800c860:	461c      	mov	r4, r3
 800c862:	4615      	mov	r5, r2
 800c864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c866:	6020      	str	r0, [r4, #0]
 800c868:	6061      	str	r1, [r4, #4]
 800c86a:	60a2      	str	r2, [r4, #8]
 800c86c:	60e3      	str	r3, [r4, #12]

            uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800c86e:	2320      	movs	r3, #32
 800c870:	60bb      	str	r3, [r7, #8]
            pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2288      	movs	r2, #136	@ 0x88
 800c876:	701a      	strb	r2, [r3, #0]
            pxICMPHeader_IPv6->ucTypeOfService = 0;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2200      	movs	r2, #0
 800c87c:	705a      	strb	r2, [r3, #1]
            pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2200      	movs	r2, #0
 800c882:	711a      	strb	r2, [r3, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	715a      	strb	r2, [r3, #5]
 800c888:	2200      	movs	r2, #0
 800c88a:	719a      	strb	r2, [r3, #6]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c892:	71da      	strb	r2, [r3, #7]
            pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	061a      	lsls	r2, r3, #24
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	021b      	lsls	r3, r3, #8
 800c8a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c8a4:	431a      	orrs	r2, r3
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	0a1b      	lsrs	r3, r3, #8
 800c8ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c8b0:	431a      	orrs	r2, r3
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	0e1b      	lsrs	r3, r3, #24
 800c8b8:	431a      	orrs	r2, r3
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	605a      	str	r2, [r3, #4]

            /* Type of option. */
            pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2202      	movs	r2, #2
 800c8c2:	761a      	strb	r2, [r3, #24]
            /* Length of option in units of 8 bytes. */
            pxICMPHeader_IPv6->ucOptionLength = 1;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	765a      	strb	r2, [r3, #25]
            ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f103 001a 	add.w	r0, r3, #26
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	33e8      	adds	r3, #232	@ 0xe8
 800c8d4:	2206      	movs	r2, #6
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	f015 fe52 	bl	8022580 <memcpy>
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	22ff      	movs	r2, #255	@ 0xff
 800c8e0:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f103 0008 	add.w	r0, r3, #8
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	3338      	adds	r3, #56	@ 0x38
 800c8ec:	2210      	movs	r2, #16
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	f015 fe46 	bl	8022580 <memcpy>

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	629a      	str	r2, [r3, #40]	@ 0x28
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                pxICMPHeader_IPv6->usChecksum = 0;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2200      	movs	r2, #0
 800c902:	709a      	strb	r2, [r3, #2]
 800c904:	2200      	movs	r2, #0
 800c906:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* Set the parameter 'bReleaseAfterSend'. */
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	2201      	movs	r2, #1
 800c90e:	69b9      	ldr	r1, [r7, #24]
 800c910:	6978      	ldr	r0, [r7, #20]
 800c912:	4798      	blx	r3
        }
    }
 800c914:	bf00      	nop
 800c916:	3720      	adds	r7, #32
 800c918:	46bd      	mov	sp, r7
 800c91a:	bdb0      	pop	{r4, r5, r7, pc}
 800c91c:	080255d4 	.word	0x080255d4
 800c920:	08027850 	.word	0x08027850
 800c924:	08027840 	.word	0x08027840

0800c928 <FreeRTOS_CreateIPv6Address>:
 */
    BaseType_t FreeRTOS_CreateIPv6Address( IPv6_Address_t * pxIPAddress,
                                           const IPv6_Address_t * pxPrefix,
                                           size_t uxPrefixLength,
                                           BaseType_t xDoRandom )
    {
 800c928:	b580      	push	{r7, lr}
 800c92a:	b090      	sub	sp, #64	@ 0x40
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	607a      	str	r2, [r7, #4]
 800c934:	603b      	str	r3, [r7, #0]
        uint32_t pulRandom[ 4 ];
        uint8_t * pucSource;
        BaseType_t xIndex, xResult = pdPASS;
 800c936:	2301      	movs	r3, #1
 800c938:	637b      	str	r3, [r7, #52]	@ 0x34

        if( xDoRandom != pdFALSE )
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d017      	beq.n	800c970 <FreeRTOS_CreateIPv6Address+0x48>
            /* Create an IP-address, based on a net prefix and a
             * random host address.
             * ARRAY_SIZE_X() returns the size of an array as a
             * signed value ( BaseType_t ).
             */
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800c940:	2300      	movs	r3, #0
 800c942:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c944:	e010      	b.n	800c968 <FreeRTOS_CreateIPv6Address+0x40>
            {
                if( xApplicationGetRandomNumber( &( pulRandom[ xIndex ] ) ) == pdFAIL )
 800c946:	f107 0214 	add.w	r2, r7, #20
 800c94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	4413      	add	r3, r2
 800c950:	4618      	mov	r0, r3
 800c952:	f7f5 f8cb 	bl	8001aec <xApplicationGetRandomNumber>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d102      	bne.n	800c962 <FreeRTOS_CreateIPv6Address+0x3a>
                {
                    xResult = pdFAIL;
 800c95c:	2300      	movs	r3, #0
 800c95e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800c960:	e00d      	b.n	800c97e <FreeRTOS_CreateIPv6Address+0x56>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800c962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c964:	3301      	adds	r3, #1
 800c966:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c96a:	2b03      	cmp	r3, #3
 800c96c:	ddeb      	ble.n	800c946 <FreeRTOS_CreateIPv6Address+0x1e>
 800c96e:	e006      	b.n	800c97e <FreeRTOS_CreateIPv6Address+0x56>
                }
            }
        }
        else
        {
            ( void ) memset( pulRandom, 0, sizeof( pulRandom ) );
 800c970:	f107 0314 	add.w	r3, r7, #20
 800c974:	2210      	movs	r2, #16
 800c976:	2100      	movs	r1, #0
 800c978:	4618      	mov	r0, r3
 800c97a:	f015 ff0e 	bl	802279a <memset>
        }

        if( xResult == pdPASS )
 800c97e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c980:	2b01      	cmp	r3, #1
 800c982:	d167      	bne.n	800ca54 <FreeRTOS_CreateIPv6Address+0x12c>
        {
            size_t uxIndex;
            /* A loopback IP-address has a prefix of 128. */
            configASSERT( ( uxPrefixLength > 0U ) && ( uxPrefixLength <= ( 8U * ipSIZE_OF_IPv6_ADDRESS ) ) );
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d004      	beq.n	800c994 <FreeRTOS_CreateIPv6Address+0x6c>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2b80      	cmp	r3, #128	@ 0x80
 800c98e:	d801      	bhi.n	800c994 <FreeRTOS_CreateIPv6Address+0x6c>
 800c990:	2301      	movs	r3, #1
 800c992:	e000      	b.n	800c996 <FreeRTOS_CreateIPv6Address+0x6e>
 800c994:	2300      	movs	r3, #0
 800c996:	2b00      	cmp	r3, #0
 800c998:	d104      	bne.n	800c9a4 <FreeRTOS_CreateIPv6Address+0x7c>
 800c99a:	f240 5105 	movw	r1, #1285	@ 0x505
 800c99e:	4830      	ldr	r0, [pc, #192]	@ (800ca60 <FreeRTOS_CreateIPv6Address+0x138>)
 800c9a0:	f7f4 ffda 	bl	8001958 <vAssertCalled>

            if( uxPrefixLength >= 8U )
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b07      	cmp	r3, #7
 800c9a8:	d907      	bls.n	800c9ba <FreeRTOS_CreateIPv6Address+0x92>
            {
                ( void ) memcpy( pxIPAddress->ucBytes, pxPrefix->ucBytes, ( uxPrefixLength + 7U ) / 8U );
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	68b9      	ldr	r1, [r7, #8]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	3307      	adds	r3, #7
 800c9b2:	08db      	lsrs	r3, r3, #3
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	f015 fde3 	bl	8022580 <memcpy>
            }

            pucSource = ( uint8_t * ) pulRandom;
 800c9ba:	f107 0314 	add.w	r3, r7, #20
 800c9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxIndex = uxPrefixLength / 8U;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	08db      	lsrs	r3, r3, #3
 800c9c4:	633b      	str	r3, [r7, #48]	@ 0x30

            if( ( uxPrefixLength % 8U ) != 0U )
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f003 0307 	and.w	r3, r3, #7
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d034      	beq.n	800ca3a <FreeRTOS_CreateIPv6Address+0x112>
            {
                /* uxHostLen is between 1 and 7 bits long. */
                size_t uxHostLen = 8U - ( uxPrefixLength % 8U );
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f003 0307 	and.w	r3, r3, #7
 800c9d6:	f1c3 0308 	rsb	r3, r3, #8
 800c9da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800c9dc:	2201      	movs	r2, #1
 800c9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	62bb      	str	r3, [r7, #40]	@ 0x28
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800c9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	43db      	mvns	r3, r3
 800c9ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                pxIPAddress->ucBytes[ uxIndex ] &= ucNetMask;
 800c9f2:	68fa      	ldr	r2, [r7, #12]
 800c9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9f6:	4413      	add	r3, r2
 800c9f8:	781a      	ldrb	r2, [r3, #0]
 800c9fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9fe:	4013      	ands	r3, r2
 800ca00:	b2d9      	uxtb	r1, r3
 800ca02:	68fa      	ldr	r2, [r7, #12]
 800ca04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca06:	4413      	add	r3, r2
 800ca08:	460a      	mov	r2, r1
 800ca0a:	701a      	strb	r2, [r3, #0]
                pxIPAddress->ucBytes[ uxIndex ] |= ( pucSource[ 0 ] & ( ( uint8_t ) uxHostMask ) );
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca10:	4413      	add	r3, r2
 800ca12:	781a      	ldrb	r2, [r3, #0]
 800ca14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca16:	7819      	ldrb	r1, [r3, #0]
 800ca18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	400b      	ands	r3, r1
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	4313      	orrs	r3, r2
 800ca22:	b2d9      	uxtb	r1, r3
 800ca24:	68fa      	ldr	r2, [r7, #12]
 800ca26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca28:	4413      	add	r3, r2
 800ca2a:	460a      	mov	r2, r1
 800ca2c:	701a      	strb	r2, [r3, #0]
                pucSource = &( pucSource[ 1 ] );
 800ca2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca30:	3301      	adds	r3, #1
 800ca32:	63fb      	str	r3, [r7, #60]	@ 0x3c
                uxIndex++;
 800ca34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca36:	3301      	adds	r3, #1
 800ca38:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            if( uxIndex < ipSIZE_OF_IPv6_ADDRESS )
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca3c:	2b0f      	cmp	r3, #15
 800ca3e:	d809      	bhi.n	800ca54 <FreeRTOS_CreateIPv6Address+0x12c>
            {
                ( void ) memcpy( &( pxIPAddress->ucBytes[ uxIndex ] ), pucSource, ipSIZE_OF_IPv6_ADDRESS - uxIndex );
 800ca40:	68fa      	ldr	r2, [r7, #12]
 800ca42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca44:	18d0      	adds	r0, r2, r3
 800ca46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca48:	f1c3 0310 	rsb	r3, r3, #16
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ca50:	f015 fd96 	bl	8022580 <memcpy>
            }
        }

        return xResult;
 800ca54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800ca56:	4618      	mov	r0, r3
 800ca58:	3740      	adds	r7, #64	@ 0x40
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	080255d4 	.word	0x080255d4

0800ca64 <xGetLinkLocalAddress>:
 *
 * @return pdPASS in case a link-local address was found, otherwise pdFAIL.
 */
    static BaseType_t xGetLinkLocalAddress( const NetworkInterface_t * pxInterface,
                                            IPv6_Address_t * pxAddress )
    {
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	60fb      	str	r3, [r7, #12]
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 fe48 	bl	800d708 <FreeRTOS_FirstEndPoint>
 800ca78:	60b8      	str	r0, [r7, #8]
 800ca7a:	e01a      	b.n	800cab2 <xGetLinkLocalAddress+0x4e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
        {
            /* Check if it has the link-local prefix FE80::/10 */
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ca82:	2bfe      	cmp	r3, #254	@ 0xfe
 800ca84:	d110      	bne.n	800caa8 <xGetLinkLocalAddress+0x44>
                ( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 1 ] & 0xc0U ) == 0x80U ) )
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ca8c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800ca90:	2b80      	cmp	r3, #128	@ 0x80
 800ca92:	d109      	bne.n	800caa8 <xGetLinkLocalAddress+0x44>
            {
                ( void ) memcpy( pxAddress->ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ca94:	6838      	ldr	r0, [r7, #0]
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	3338      	adds	r3, #56	@ 0x38
 800ca9a:	2210      	movs	r2, #16
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	f015 fd6f 	bl	8022580 <memcpy>
                xResult = pdPASS;
 800caa2:	2301      	movs	r3, #1
 800caa4:	60fb      	str	r3, [r7, #12]
                break;
 800caa6:	e007      	b.n	800cab8 <xGetLinkLocalAddress+0x54>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800caa8:	68b9      	ldr	r1, [r7, #8]
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 fe4e 	bl	800d74c <FreeRTOS_NextEndPoint>
 800cab0:	60b8      	str	r0, [r7, #8]
             pxEndPoint != NULL;
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d1e1      	bne.n	800ca7c <xGetLinkLocalAddress+0x18>
            }
        }

        return xResult;
 800cab8:	68fb      	ldr	r3, [r7, #12]
    }
 800caba:	4618      	mov	r0, r3
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
	...

0800cac4 <vNDSendRouterSolicitation>:
 * @param[in] pxIPAddress The target address, normally ff02::2
 *
 */
    void vNDSendRouterSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                    IPv6_Address_t * pxIPAddress )
    {
 800cac4:	b5b0      	push	{r4, r5, r7, lr}
 800cac6:	b090      	sub	sp, #64	@ 0x40
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPRouterSolicitation_IPv6_t * xRASolicitationRequest;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cad2:	63bb      	str	r3, [r7, #56]	@ 0x38
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800cad4:	233e      	movs	r3, #62	@ 0x3e
 800cad6:	637b      	str	r3, [r7, #52]	@ 0x34
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        IPv6_Address_t xSourceAddress;
        BaseType_t xHasLocal;
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800cadc:	2300      	movs	r3, #0
 800cade:	633b      	str	r3, [r7, #48]	@ 0x30

        configASSERT( pxEndPoint != NULL );
 800cae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d103      	bne.n	800caee <vNDSendRouterSolicitation+0x2a>
 800cae6:	218f      	movs	r1, #143	@ 0x8f
 800cae8:	4852      	ldr	r0, [pc, #328]	@ (800cc34 <vNDSendRouterSolicitation+0x170>)
 800caea:	f7f4 ff35 	bl	8001958 <vAssertCalled>
        configASSERT( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED );
 800caee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800caf4:	f003 0304 	and.w	r3, r3, #4
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d103      	bne.n	800cb06 <vNDSendRouterSolicitation+0x42>
 800cafe:	2190      	movs	r1, #144	@ 0x90
 800cb00:	484c      	ldr	r0, [pc, #304]	@ (800cc34 <vNDSendRouterSolicitation+0x170>)
 800cb02:	f7f4 ff29 	bl	8001958 <vAssertCalled>

        xHasLocal = xGetLinkLocalAddress( pxEndPoint->pxNetworkInterface, &( xSourceAddress ) );
 800cb06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb08:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cb0c:	f107 020c 	add.w	r2, r7, #12
 800cb10:	4611      	mov	r1, r2
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7ff ffa6 	bl	800ca64 <xGetLinkLocalAddress>
 800cb18:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if( xHasLocal == pdFAIL )
 800cb1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d10a      	bne.n	800cb36 <vNDSendRouterSolicitation+0x72>
        {
            FreeRTOS_printf( ( "RA: can not find a Link-local address\n" ) );
 800cb20:	4845      	ldr	r0, [pc, #276]	@ (800cc38 <vNDSendRouterSolicitation+0x174>)
 800cb22:	f015 fb11 	bl	8022148 <lUDPLoggingPrintf>
            ( void ) memset( xSourceAddress.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800cb26:	f107 030c 	add.w	r3, r7, #12
 800cb2a:	2210      	movs	r2, #16
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f015 fe33 	bl	802279a <memset>
 800cb34:	e005      	b.n	800cb42 <vNDSendRouterSolicitation+0x7e>
        }
        else
        {
            FreeRTOS_printf( ( "RA: source %pip\n", ( void * ) xSourceAddress.ucBytes ) );
 800cb36:	f107 030c 	add.w	r3, r7, #12
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	483f      	ldr	r0, [pc, #252]	@ (800cc3c <vNDSendRouterSolicitation+0x178>)
 800cb3e:	f015 fb03 	bl	8022148 <lUDPLoggingPrintf>
        }

        if( pxDescriptor->xDataLength < uxNeededSize )
 800cb42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d909      	bls.n	800cb60 <vNDSendRouterSolicitation+0x9c>
        {
            pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800cb4c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cb4e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cb50:	f7fd fcf4 	bl	800a53c <pxDuplicateNetworkBufferWithDescriptor>
 800cb54:	6338      	str	r0, [r7, #48]	@ 0x30
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800cb56:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cb58:	f00a fc4e 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
            pxDescriptor = pxNewDescriptor;
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        if( pxDescriptor != NULL )
 800cb60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d062      	beq.n	800cc2c <vNDSendRouterSolicitation+0x168>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800cb66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb6a:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xRASolicitationRequest = ( ( ICMPRouterSolicitation_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800cb6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb6e:	3336      	adds	r3, #54	@ 0x36
 800cb70:	627b      	str	r3, [r7, #36]	@ 0x24

            pxDescriptor->xDataLength = uxNeededSize;
 800cb72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb76:	629a      	str	r2, [r3, #40]	@ 0x28

            ( void ) eNDGetCacheEntry( pxIPAddress, &( xMultiCastMacAddress ), NULL );
 800cb78:	f107 031c 	add.w	r3, r7, #28
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	4619      	mov	r1, r3
 800cb80:	6838      	ldr	r0, [r7, #0]
 800cb82:	f7ff f87b 	bl	800bc7c <eNDGetCacheEntry>

            /* Set Ethernet header. Will be swapped. */
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800cb86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb88:	3306      	adds	r3, #6
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	f107 031c 	add.w	r3, r7, #28
 800cb90:	6818      	ldr	r0, [r3, #0]
 800cb92:	6010      	str	r0, [r2, #0]
 800cb94:	889b      	ldrh	r3, [r3, #4]
 800cb96:	8093      	strh	r3, [r2, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800cb98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb9c:	33e8      	adds	r3, #232	@ 0xe8
 800cb9e:	2206      	movs	r2, #6
 800cba0:	4619      	mov	r1, r3
 800cba2:	f015 fced 	bl	8022580 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800cba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800cbae:	731a      	strb	r2, [r3, #12]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800cbb6:	735a      	strb	r2, [r3, #13]

            /* Set IP-header. */
            pxICMPPacket->xIPHeader.ucVersionTrafficClass = raDEFAULT_VERSION_TRAFFIC_CLASS;
 800cbb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbba:	2260      	movs	r2, #96	@ 0x60
 800cbbc:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800cbbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800cbc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	741a      	strb	r2, [r3, #16]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	745a      	strb	r2, [r3, #17]
            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPRouterSolicitation_IPv6_t ) );
 800cbce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	749a      	strb	r2, [r3, #18]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f042 0208 	orr.w	r2, r2, #8
 800cbda:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800cbdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbde:	223a      	movs	r2, #58	@ 0x3a
 800cbe0:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = raDEFAULT_HOP_LIMIT;
 800cbe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbe4:	22ff      	movs	r2, #255	@ 0xff
 800cbe6:	755a      	strb	r2, [r3, #21]

            /* Normally, the source address is set as 'ipv6_settings.xIPAddress'.
             * But is some routers will not accept a public IP-address, the original
             * default address will be used. It must be a link-local address. */
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800cbe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbea:	3316      	adds	r3, #22
 800cbec:	461d      	mov	r5, r3
 800cbee:	f107 040c 	add.w	r4, r7, #12
 800cbf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbf4:	6028      	str	r0, [r5, #0]
 800cbf6:	6069      	str	r1, [r5, #4]
 800cbf8:	60aa      	str	r2, [r5, #8]
 800cbfa:	60eb      	str	r3, [r5, #12]

            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800cbfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbfe:	3326      	adds	r3, #38	@ 0x26
 800cc00:	6839      	ldr	r1, [r7, #0]
 800cc02:	2210      	movs	r2, #16
 800cc04:	4618      	mov	r0, r3
 800cc06:	f015 fcbb 	bl	8022580 <memcpy>

            /* Set ICMP header. */
            ( void ) memset( xRASolicitationRequest, 0, sizeof( *xRASolicitationRequest ) );
 800cc0a:	2208      	movs	r2, #8
 800cc0c:	2100      	movs	r1, #0
 800cc0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cc10:	f015 fdc3 	bl	802279a <memset>
            xRASolicitationRequest->ucTypeOfMessage = ipICMP_ROUTER_SOLICITATION_IPv6;
 800cc14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc16:	2285      	movs	r2, #133	@ 0x85
 800cc18:	701a      	strb	r2, [r3, #0]
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                xRASolicitationRequest->usChecksum = 0U;
 800cc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	709a      	strb	r2, [r3, #2]
 800cc20:	2200      	movs	r2, #0
 800cc22:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800cc24:	2101      	movs	r1, #1
 800cc26:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cc28:	f7fd f8d6 	bl	8009dd8 <vReturnEthernetFrame>
        }
    }
 800cc2c:	bf00      	nop
 800cc2e:	3740      	adds	r7, #64	@ 0x40
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bdb0      	pop	{r4, r5, r7, pc}
 800cc34:	08025600 	.word	0x08025600
 800cc38:	0802562c 	.word	0x0802562c
 800cc3c:	08025654 	.word	0x08025654

0800cc40 <vReceiveNA>:
 * @brief Receive a NA ( Neighbour Advertisement ) message to see if a chosen IP-address is already in use.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveNA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b086      	sub	sp, #24
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
        const NetworkInterface_t * pxInterface = pxNetworkBuffer->pxInterface;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc4c:	613b      	str	r3, [r7, #16]
        NetworkEndPoint_t * pxPoint;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc52:	60fb      	str	r3, [r7, #12]
        const ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( const ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	3336      	adds	r3, #54	@ 0x36
 800cc58:	60bb      	str	r3, [r7, #8]

        for( pxPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800cc5a:	6938      	ldr	r0, [r7, #16]
 800cc5c:	f000 fd54 	bl	800d708 <FreeRTOS_FirstEndPoint>
 800cc60:	6178      	str	r0, [r7, #20]
 800cc62:	e028      	b.n	800ccb6 <vReceiveNA+0x76>
             pxPoint != NULL;
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
        {
            if( ( pxPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxPoint->xRAData.eRAState == eRAStateIPWait ) )
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cc6a:	f003 0302 	and.w	r3, r3, #2
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d01b      	beq.n	800ccac <vReceiveNA+0x6c>
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	d116      	bne.n	800ccac <vReceiveNA+0x6c>
            {
                if( memcmp( pxPoint->ipv6_settings.xIPAddress.ucBytes, pxICMPHeader_IPv6->xIPv6Address.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	3308      	adds	r3, #8
 800cc88:	2210      	movs	r2, #16
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	f016 fc0d 	bl	80234aa <memcmp>
 800cc90:	4603      	mov	r3, r0
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d10a      	bne.n	800ccac <vReceiveNA+0x6c>
                {
                    pxPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800cc96:	697a      	ldr	r2, [r7, #20]
 800cc98:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800cc9c:	f043 0302 	orr.w	r3, r3, #2
 800cca0:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                    vDHCP_RATimerReload( pxPoint, 100U );
 800cca4:	2164      	movs	r1, #100	@ 0x64
 800cca6:	6978      	ldr	r0, [r7, #20]
 800cca8:	f7fd fb3e 	bl	800a328 <vDHCP_RATimerReload>
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
 800ccac:	6979      	ldr	r1, [r7, #20]
 800ccae:	6938      	ldr	r0, [r7, #16]
 800ccb0:	f000 fd4c 	bl	800d74c <FreeRTOS_NextEndPoint>
 800ccb4:	6178      	str	r0, [r7, #20]
             pxPoint != NULL;
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1d3      	bne.n	800cc64 <vReceiveNA+0x24>
                }
            }
        }
    }
 800ccbc:	bf00      	nop
 800ccbe:	bf00      	nop
 800ccc0:	3718      	adds	r7, #24
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
	...

0800ccc8 <vReceiveRA_ReadReply>:
 *
 * @returns Returns the ICMP prefix option pointer, pointing to its location in the
 *          input RA reply message buffer.
 */
    static ICMPPrefixOption_IPv6_t * vReceiveRA_ReadReply( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800ccc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccca:	b091      	sub	sp, #68	@ 0x44
 800cccc:	af04      	add	r7, sp, #16
 800ccce:	6078      	str	r0, [r7, #4]
        size_t uxIndex = 0U;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800ccd4:	2310      	movs	r3, #16
 800ccd6:	627b      	str	r3, [r7, #36]	@ 0x24
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800ccd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccda:	3336      	adds	r3, #54	@ 0x36
 800ccdc:	623b      	str	r3, [r7, #32]
        /* uxLast points to the first byte after the buffer. */
        const size_t uxLast = pxNetworkBuffer->xDataLength - uxNeededSize;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cce2:	6a3b      	ldr	r3, [r7, #32]
 800cce4:	1ad3      	subs	r3, r2, r3
 800cce6:	61fb      	str	r3, [r7, #28]
        uint8_t * pucBytes = &( pxNetworkBuffer->pucEthernetBuffer[ uxNeededSize ] );
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ccec:	6a3b      	ldr	r3, [r7, #32]
 800ccee:	4413      	add	r3, r2
 800ccf0:	61bb      	str	r3, [r7, #24]
        ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	62bb      	str	r3, [r7, #40]	@ 0x28

        while( ( uxIndex + 1U ) < uxLast )
 800ccf6:	e0b2      	b.n	800ce5e <vReceiveRA_ReadReply+0x196>
        {
            uint8_t ucType = pucBytes[ uxIndex ];
 800ccf8:	69ba      	ldr	r2, [r7, #24]
 800ccfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccfc:	4413      	add	r3, r2
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	75fb      	strb	r3, [r7, #23]
            size_t uxPrefixLength = ( size_t ) pucBytes[ uxIndex + 1U ];
 800cd02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd04:	3301      	adds	r3, #1
 800cd06:	69ba      	ldr	r2, [r7, #24]
 800cd08:	4413      	add	r3, r2
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	613b      	str	r3, [r7, #16]
            size_t uxLength = uxPrefixLength * 8U;
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	00db      	lsls	r3, r3, #3
 800cd12:	60fb      	str	r3, [r7, #12]

            if( uxPrefixLength == 0U )
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d103      	bne.n	800cd22 <vReceiveRA_ReadReply+0x5a>
            {
                /* According to RFC 4861, length of the option value 0 is invalid. Hence returning from here */
                FreeRTOS_printf( ( "RA: Invalid length of the option value as zero. " ) );
 800cd1a:	4856      	ldr	r0, [pc, #344]	@ (800ce74 <vReceiveRA_ReadReply+0x1ac>)
 800cd1c:	f015 fa14 	bl	8022148 <lUDPLoggingPrintf>
                break;
 800cd20:	e0a3      	b.n	800ce6a <vReceiveRA_ReadReply+0x1a2>
            }

            if( uxLast < ( uxIndex + uxLength ) )
 800cd22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	4413      	add	r3, r2
 800cd28:	69fa      	ldr	r2, [r7, #28]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d208      	bcs.n	800cd40 <vReceiveRA_ReadReply+0x78>
            {
                FreeRTOS_printf( ( "RA: Not enough bytes ( %u > %u )\n", ( unsigned ) ( uxIndex + uxLength ), ( unsigned ) uxLast ) );
 800cd2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	4413      	add	r3, r2
 800cd34:	69fa      	ldr	r2, [r7, #28]
 800cd36:	4619      	mov	r1, r3
 800cd38:	484f      	ldr	r0, [pc, #316]	@ (800ce78 <vReceiveRA_ReadReply+0x1b0>)
 800cd3a:	f015 fa05 	bl	8022148 <lUDPLoggingPrintf>
                break;
 800cd3e:	e094      	b.n	800ce6a <vReceiveRA_ReadReply+0x1a2>
            }

            switch( ucType )
 800cd40:	7dfb      	ldrb	r3, [r7, #23]
 800cd42:	3b01      	subs	r3, #1
 800cd44:	2b04      	cmp	r3, #4
 800cd46:	d87f      	bhi.n	800ce48 <vReceiveRA_ReadReply+0x180>
 800cd48:	a201      	add	r2, pc, #4	@ (adr r2, 800cd50 <vReceiveRA_ReadReply+0x88>)
 800cd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd4e:	bf00      	nop
 800cd50:	0800cd65 	.word	0x0800cd65
 800cd54:	0800ce55 	.word	0x0800ce55
 800cd58:	0800cdbf 	.word	0x0800cdbf
 800cd5c:	0800ce55 	.word	0x0800ce55
 800cd60:	0800ce2f 	.word	0x0800ce2f
            {
                case ndICMP_SOURCE_LINK_LAYER_ADDRESS: /* 1 */
                    FreeRTOS_printf( ( "RA: Source = %02x-%02x-%02x-%02x-%02x-%02x\n",
 800cd64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd66:	3302      	adds	r3, #2
 800cd68:	69ba      	ldr	r2, [r7, #24]
 800cd6a:	4413      	add	r3, r2
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	461c      	mov	r4, r3
 800cd70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd72:	3303      	adds	r3, #3
 800cd74:	69ba      	ldr	r2, [r7, #24]
 800cd76:	4413      	add	r3, r2
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	461d      	mov	r5, r3
 800cd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd7e:	3304      	adds	r3, #4
 800cd80:	69ba      	ldr	r2, [r7, #24]
 800cd82:	4413      	add	r3, r2
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	461e      	mov	r6, r3
 800cd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd8a:	3305      	adds	r3, #5
 800cd8c:	69ba      	ldr	r2, [r7, #24]
 800cd8e:	4413      	add	r3, r2
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	4619      	mov	r1, r3
 800cd94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd96:	3306      	adds	r3, #6
 800cd98:	69ba      	ldr	r2, [r7, #24]
 800cd9a:	4413      	add	r3, r2
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cda2:	3307      	adds	r3, #7
 800cda4:	69ba      	ldr	r2, [r7, #24]
 800cda6:	4413      	add	r3, r2
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	9302      	str	r3, [sp, #8]
 800cdac:	9001      	str	r0, [sp, #4]
 800cdae:	9100      	str	r1, [sp, #0]
 800cdb0:	4633      	mov	r3, r6
 800cdb2:	462a      	mov	r2, r5
 800cdb4:	4621      	mov	r1, r4
 800cdb6:	4831      	ldr	r0, [pc, #196]	@ (800ce7c <vReceiveRA_ReadReply+0x1b4>)
 800cdb8:	f015 f9c6 	bl	8022148 <lUDPLoggingPrintf>
                                       pucBytes[ uxIndex + 3U ],
                                       pucBytes[ uxIndex + 4U ],
                                       pucBytes[ uxIndex + 5U ],
                                       pucBytes[ uxIndex + 6U ],
                                       pucBytes[ uxIndex + 7U ] ) );
                    break;
 800cdbc:	e04b      	b.n	800ce56 <vReceiveRA_ReadReply+0x18e>

                case ndICMP_PREFIX_INFORMATION: /* 3 */
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxPrefixOption = ( ( ICMPPrefixOption_IPv6_t * ) &( pucBytes[ uxIndex ] ) );
 800cdbe:	69ba      	ldr	r2, [r7, #24]
 800cdc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc2:	4413      	add	r3, r2
 800cdc4:	62bb      	str	r3, [r7, #40]	@ 0x28

                    FreeRTOS_printf( ( "RA: Prefix len %d Life %u, %u (%pip)\n",
 800cdc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdc8:	789b      	ldrb	r3, [r3, #2]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	061a      	lsls	r2, r3, #24
 800cdd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	021b      	lsls	r3, r3, #8
 800cdd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cddc:	431a      	orrs	r2, r3
 800cdde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	0a1b      	lsrs	r3, r3, #8
 800cde4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cde8:	431a      	orrs	r2, r3
 800cdea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	0e1b      	lsrs	r3, r3, #24
 800cdf0:	ea42 0103 	orr.w	r1, r2, r3
 800cdf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	061a      	lsls	r2, r3, #24
 800cdfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	021b      	lsls	r3, r3, #8
 800ce00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ce04:	431a      	orrs	r2, r3
 800ce06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	0a1b      	lsrs	r3, r3, #8
 800ce0c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ce10:	431a      	orrs	r2, r3
 800ce12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce14:	689b      	ldr	r3, [r3, #8]
 800ce16:	0e1b      	lsrs	r3, r3, #24
 800ce18:	431a      	orrs	r2, r3
 800ce1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce1c:	3310      	adds	r3, #16
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	4613      	mov	r3, r2
 800ce22:	460a      	mov	r2, r1
 800ce24:	4601      	mov	r1, r0
 800ce26:	4816      	ldr	r0, [pc, #88]	@ (800ce80 <vReceiveRA_ReadReply+0x1b8>)
 800ce28:	f015 f98e 	bl	8022148 <lUDPLoggingPrintf>
                                       pxPrefixOption->ucPrefixLength,
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulValidLifeTime ),
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime ),
                                       ( void * ) pxPrefixOption->ucPrefix ) );
                    break;
 800ce2c:	e013      	b.n	800ce56 <vReceiveRA_ReadReply+0x18e>
                   {
                       uint32_t ulMTU;
                       ( void ) ulMTU;

                       /* ulChar2u32 returns host-endian numbers. */
                       ulMTU = ulChar2u32( &( pucBytes[ uxIndex + 4U ] ) );
 800ce2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce30:	3304      	adds	r3, #4
 800ce32:	69ba      	ldr	r2, [r7, #24]
 800ce34:	4413      	add	r3, r2
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7fd fe60 	bl	800aafc <ulChar2u32>
 800ce3c:	60b8      	str	r0, [r7, #8]
                       FreeRTOS_printf( ( "RA: MTU = %u\n", ( unsigned int ) ulMTU ) );
 800ce3e:	68b9      	ldr	r1, [r7, #8]
 800ce40:	4810      	ldr	r0, [pc, #64]	@ (800ce84 <vReceiveRA_ReadReply+0x1bc>)
 800ce42:	f015 f981 	bl	8022148 <lUDPLoggingPrintf>
                   }
                   break;
 800ce46:	e006      	b.n	800ce56 <vReceiveRA_ReadReply+0x18e>

                default:
                    FreeRTOS_printf( ( "RA: Type 0x%02x not implemented\n", ucType ) );
 800ce48:	7dfb      	ldrb	r3, [r7, #23]
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	480e      	ldr	r0, [pc, #56]	@ (800ce88 <vReceiveRA_ReadReply+0x1c0>)
 800ce4e:	f015 f97b 	bl	8022148 <lUDPLoggingPrintf>
                    break;
 800ce52:	e000      	b.n	800ce56 <vReceiveRA_ReadReply+0x18e>
                    break;
 800ce54:	bf00      	nop
            }

            uxIndex = uxIndex + uxLength;
 800ce56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( ( uxIndex + 1U ) < uxLast )
 800ce5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce60:	3301      	adds	r3, #1
 800ce62:	69fa      	ldr	r2, [r7, #28]
 800ce64:	429a      	cmp	r2, r3
 800ce66:	f63f af47 	bhi.w	800ccf8 <vReceiveRA_ReadReply+0x30>
        } /* while( ( uxIndex + 1 ) < uxLast ) */

        return pxPrefixOption;
 800ce6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3734      	adds	r7, #52	@ 0x34
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce74:	08025668 	.word	0x08025668
 800ce78:	0802569c 	.word	0x0802569c
 800ce7c:	080256c0 	.word	0x080256c0
 800ce80:	080256ec 	.word	0x080256ec
 800ce84:	08025714 	.word	0x08025714
 800ce88:	08025724 	.word	0x08025724

0800ce8c <vReceiveRA>:
 *        already exists that uses the same IP-address.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveRA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800ce8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce8e:	b08d      	sub	sp, #52	@ 0x34
 800ce90:	af04      	add	r7, sp, #16
 800ce92:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce98:	61bb      	str	r3, [r7, #24]
        const ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	617b      	str	r3, [r7, #20]
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800ce9e:	2310      	movs	r3, #16
 800cea0:	613b      	str	r3, [r7, #16]
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	3336      	adds	r3, #54	@ 0x36
 800cea6:	60fb      	str	r3, [r7, #12]

        /* A Router Advertisement was received, handle it here. */
        if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d903      	bls.n	800ceba <vReceiveRA+0x2e>
        {
            FreeRTOS_printf( ( "vReceiveRA: The buffer provided is too small\n" ) );
 800ceb2:	485b      	ldr	r0, [pc, #364]	@ (800d020 <vReceiveRA+0x194>)
 800ceb4:	f015 f948 	bl	8022148 <lUDPLoggingPrintf>
            else
            {
                /* The life-time field contains zero. */
            }
        }
    }
 800ceb8:	e0ae      	b.n	800d018 <vReceiveRA+0x18c>
            const ICMPRouterAdvertisement_IPv6_t * pxAdvertisement = ( ( const ICMPRouterAdvertisement_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800ceba:	69bb      	ldr	r3, [r7, #24]
 800cebc:	3336      	adds	r3, #54	@ 0x36
 800cebe:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "RA: Type %02x Srv %02x Checksum %04x Hops %d Flags %02x Life %d\n",
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	461c      	mov	r4, r3
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	785b      	ldrb	r3, [r3, #1]
 800ceca:	461d      	mov	r5, r3
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	885b      	ldrh	r3, [r3, #2]
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	021b      	lsls	r3, r3, #8
 800ced4:	b21a      	sxth	r2, r3
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	885b      	ldrh	r3, [r3, #2]
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	0a1b      	lsrs	r3, r3, #8
 800cede:	b29b      	uxth	r3, r3
 800cee0:	b21b      	sxth	r3, r3
 800cee2:	4313      	orrs	r3, r2
 800cee4:	b21b      	sxth	r3, r3
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	461e      	mov	r6, r3
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	791b      	ldrb	r3, [r3, #4]
 800ceee:	4619      	mov	r1, r3
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	795b      	ldrb	r3, [r3, #5]
 800cef4:	4618      	mov	r0, r3
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	88db      	ldrh	r3, [r3, #6]
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	021b      	lsls	r3, r3, #8
 800cefe:	b21a      	sxth	r2, r3
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	88db      	ldrh	r3, [r3, #6]
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	0a1b      	lsrs	r3, r3, #8
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	b21b      	sxth	r3, r3
 800cf0c:	4313      	orrs	r3, r2
 800cf0e:	b21b      	sxth	r3, r3
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	9302      	str	r3, [sp, #8]
 800cf14:	9001      	str	r0, [sp, #4]
 800cf16:	9100      	str	r1, [sp, #0]
 800cf18:	4633      	mov	r3, r6
 800cf1a:	462a      	mov	r2, r5
 800cf1c:	4621      	mov	r1, r4
 800cf1e:	4841      	ldr	r0, [pc, #260]	@ (800d024 <vReceiveRA+0x198>)
 800cf20:	f015 f912 	bl	8022148 <lUDPLoggingPrintf>
            if( pxAdvertisement->usLifetime != 0U )
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	88db      	ldrh	r3, [r3, #6]
 800cf28:	b29b      	uxth	r3, r3
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d074      	beq.n	800d018 <vReceiveRA+0x18c>
                pxPrefixOption = vReceiveRA_ReadReply( pxNetworkBuffer );
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f7ff feca 	bl	800ccc8 <vReceiveRA_ReadReply>
 800cf34:	6178      	str	r0, [r7, #20]
                configASSERT( pxNetworkBuffer->pxInterface != NULL );
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d104      	bne.n	800cf48 <vReceiveRA+0xbc>
 800cf3e:	f240 118b 	movw	r1, #395	@ 0x18b
 800cf42:	4839      	ldr	r0, [pc, #228]	@ (800d028 <vReceiveRA+0x19c>)
 800cf44:	f7f4 fd08 	bl	8001958 <vAssertCalled>
                if( pxPrefixOption != NULL )
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d064      	beq.n	800d018 <vReceiveRA+0x18c>
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkBuffer->pxInterface );
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf52:	4618      	mov	r0, r3
 800cf54:	f000 fbd8 	bl	800d708 <FreeRTOS_FirstEndPoint>
 800cf58:	61f8      	str	r0, [r7, #28]
 800cf5a:	e05a      	b.n	800d012 <vReceiveRA+0x186>
                        if( ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxEndPoint->xRAData.eRAState == eRAStateWait ) )
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cf62:	f003 0302 	and.w	r3, r3, #2
 800cf66:	b2db      	uxtb	r3, r3
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d04b      	beq.n	800d004 <vReceiveRA+0x178>
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d146      	bne.n	800d004 <vReceiveRA+0x178>
                            pxEndPoint->ipv6_settings.uxPrefixLength = pxPrefixOption->ucPrefixLength;
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	789b      	ldrb	r3, [r3, #2]
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	649a      	str	r2, [r3, #72]	@ 0x48
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xPrefix.ucBytes, pxPrefixOption->ucPrefix, ipSIZE_OF_IPv6_ADDRESS );
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	3310      	adds	r3, #16
 800cf8a:	2210      	movs	r2, #16
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	f015 faf7 	bl	8022580 <memcpy>
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	3316      	adds	r3, #22
 800cf9c:	2210      	movs	r2, #16
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	f015 faee 	bl	8022580 <memcpy>
                            pxEndPoint->xRAData.bits.bRouterReplied = pdTRUE_UNSIGNED;
 800cfa4:	69fa      	ldr	r2, [r7, #28]
 800cfa6:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800cfaa:	f043 0301 	orr.w	r3, r3, #1
 800cfae:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.uxRetryCount = 0U;
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                            pxEndPoint->xRAData.ulPreferredLifeTime = FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime );
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	061a      	lsls	r2, r3, #24
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	021b      	lsls	r3, r3, #8
 800cfc6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cfca:	431a      	orrs	r2, r3
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	0a1b      	lsrs	r3, r3, #8
 800cfd2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cfd6:	431a      	orrs	r2, r3
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	0e1b      	lsrs	r3, r3, #24
 800cfde:	431a      	orrs	r2, r3
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                            pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800cfe6:	69fa      	ldr	r2, [r7, #28]
 800cfe8:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800cfec:	f043 0302 	orr.w	r3, r3, #2
 800cff0:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800cff4:	69fb      	ldr	r3, [r7, #28]
 800cff6:	2202      	movs	r2, #2
 800cff8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                            vRAProcess( pdFALSE, pxEndPoint );
 800cffc:	69f9      	ldr	r1, [r7, #28]
 800cffe:	2000      	movs	r0, #0
 800d000:	f000 f9b6 	bl	800d370 <vRAProcess>
                         pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkBuffer->pxInterface, pxEndPoint ) )
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d008:	69f9      	ldr	r1, [r7, #28]
 800d00a:	4618      	mov	r0, r3
 800d00c:	f000 fb9e 	bl	800d74c <FreeRTOS_NextEndPoint>
 800d010:	61f8      	str	r0, [r7, #28]
                         pxEndPoint != NULL;
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d1a1      	bne.n	800cf5c <vReceiveRA+0xd0>
    }
 800d018:	bf00      	nop
 800d01a:	3724      	adds	r7, #36	@ 0x24
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d020:	08025748 	.word	0x08025748
 800d024:	08025778 	.word	0x08025778
 800d028:	08025600 	.word	0x08025600

0800d02c <xRAProcess_HandleWaitStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleWaitStates( NetworkEndPoint_t * pxEndPoint,
                                                   TickType_t uxReloadTime )
    {
 800d02c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d030:	b088      	sub	sp, #32
 800d032:	af00      	add	r7, sp, #0
 800d034:	6178      	str	r0, [r7, #20]
 800d036:	6139      	str	r1, [r7, #16]
        TickType_t uxNewReloadTime = uxReloadTime;
 800d038:	6939      	ldr	r1, [r7, #16]
 800d03a:	61f9      	str	r1, [r7, #28]

        if( pxEndPoint->xRAData.eRAState == eRAStateWait )
 800d03c:	6979      	ldr	r1, [r7, #20]
 800d03e:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800d042:	2901      	cmp	r1, #1
 800d044:	d133      	bne.n	800d0ae <xRAProcess_HandleWaitStates+0x82>
        {
            /* A Router Solicitation has been sent, waited for a reply, but no came.
             * All replies will be handled in the function vReceiveRA(). */
            pxEndPoint->xRAData.uxRetryCount++;
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d04c:	1c5a      	adds	r2, r3, #1
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

            if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_SEARCH_COUNT )
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d05a:	2b02      	cmp	r3, #2
 800d05c:	d804      	bhi.n	800d068 <xRAProcess_HandleWaitStates+0x3c>
            {
                pxEndPoint->xRAData.eRAState = eRAStateApply;
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	2200      	movs	r2, #0
 800d062:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800d066:	e0bf      	b.n	800d1e8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                FreeRTOS_printf( ( "RA: Giving up waiting for a Router.\n" ) );
 800d068:	4862      	ldr	r0, [pc, #392]	@ (800d1f4 <xRAProcess_HandleWaitStates+0x1c8>)
 800d06a:	f015 f86d 	bl	8022148 <lUDPLoggingPrintf>
                ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	3390      	adds	r3, #144	@ 0x90
 800d078:	2258      	movs	r2, #88	@ 0x58
 800d07a:	4619      	mov	r1, r3
 800d07c:	f015 fa80 	bl	8022580 <memcpy>

                pxEndPoint->xRAData.bits.bRouterReplied = pdFALSE_UNSIGNED;
 800d080:	697a      	ldr	r2, [r7, #20]
 800d082:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d086:	f36f 0300 	bfc	r3, #0, #1
 800d08a:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	2200      	movs	r2, #0
 800d092:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                /* Force taking a new random IP-address. */
                pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800d096:	697a      	ldr	r2, [r7, #20]
 800d098:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d09c:	f043 0302 	orr.w	r3, r3, #2
 800d0a0:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	2202      	movs	r2, #2
 800d0a8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800d0ac:	e09c      	b.n	800d1e8 <xRAProcess_HandleWaitStates+0x1bc>
            }
        }
        else if( pxEndPoint->xRAData.eRAState == eRAStateIPWait )
 800d0ae:	6979      	ldr	r1, [r7, #20]
 800d0b0:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800d0b4:	2903      	cmp	r1, #3
 800d0b6:	f040 8097 	bne.w	800d1e8 <xRAProcess_HandleWaitStates+0x1bc>
        {
            /* A Neighbour Solicitation has been sent, waited for a reply.
             * Repeat this 'ipconfigRA_IP_TEST_COUNT' times to be sure. */
            if( pxEndPoint->xRAData.bits.bIPAddressInUse != pdFALSE_UNSIGNED )
 800d0ba:	6979      	ldr	r1, [r7, #20]
 800d0bc:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800d0c0:	f001 0102 	and.w	r1, r1, #2
 800d0c4:	b2c9      	uxtb	r1, r1
 800d0c6:	2900      	cmp	r1, #0
 800d0c8:	d00b      	beq.n	800d0e2 <xRAProcess_HandleWaitStates+0xb6>
            {
                /* Another device has responded with the same IPv4 address. */
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	2202      	movs	r2, #2
 800d0d6:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800d0da:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800d0de:	61fb      	str	r3, [r7, #28]
 800d0e0:	e082      	b.n	800d1e8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_IP_TEST_COUNT )
 800d0e2:	6979      	ldr	r1, [r7, #20]
 800d0e4:	f8d1 1118 	ldr.w	r1, [r1, #280]	@ 0x118
 800d0e8:	2902      	cmp	r1, #2
 800d0ea:	d80e      	bhi.n	800d10a <xRAProcess_HandleWaitStates+0xde>
            {
                /* Try again. */
                pxEndPoint->xRAData.uxRetryCount++;
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d0f2:	1c5a      	adds	r2, r3, #1
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	2202      	movs	r2, #2
 800d0fe:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800d102:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800d106:	61fb      	str	r3, [r7, #28]
 800d108:	e06e      	b.n	800d1e8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                /* Now it is assumed that there is no other device using the same IP-address. */
                if( pxEndPoint->xRAData.bits.bRouterReplied != pdFALSE_UNSIGNED )
 800d10a:	6979      	ldr	r1, [r7, #20]
 800d10c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800d110:	f001 0101 	and.w	r1, r1, #1
 800d114:	b2c9      	uxtb	r1, r1
 800d116:	2900      	cmp	r1, #0
 800d118:	d057      	beq.n	800d1ca <xRAProcess_HandleWaitStates+0x19e>
                {
                    /* Obtained configuration from a router. */
                    uxNewReloadTime = pdMS_TO_TICKS( ( 1000U * ( uint64_t ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
 800d11a:	6979      	ldr	r1, [r7, #20]
 800d11c:	f8d1 1114 	ldr.w	r1, [r1, #276]	@ 0x114
 800d120:	2000      	movs	r0, #0
 800d122:	4688      	mov	r8, r1
 800d124:	4681      	mov	r9, r0
 800d126:	4640      	mov	r0, r8
 800d128:	4649      	mov	r1, r9
 800d12a:	f04f 0a00 	mov.w	sl, #0
 800d12e:	f04f 0b00 	mov.w	fp, #0
 800d132:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800d136:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800d13a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800d13e:	4650      	mov	r0, sl
 800d140:	4659      	mov	r1, fp
 800d142:	ebb0 0208 	subs.w	r2, r0, r8
 800d146:	eb61 0309 	sbc.w	r3, r1, r9
 800d14a:	f04f 0000 	mov.w	r0, #0
 800d14e:	f04f 0100 	mov.w	r1, #0
 800d152:	0259      	lsls	r1, r3, #9
 800d154:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800d158:	0250      	lsls	r0, r2, #9
 800d15a:	4602      	mov	r2, r0
 800d15c:	460b      	mov	r3, r1
 800d15e:	eb12 0408 	adds.w	r4, r2, r8
 800d162:	eb43 0509 	adc.w	r5, r3, r9
 800d166:	f04f 0200 	mov.w	r2, #0
 800d16a:	f04f 0300 	mov.w	r3, #0
 800d16e:	01ab      	lsls	r3, r5, #6
 800d170:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800d174:	01a2      	lsls	r2, r4, #6
 800d176:	1b11      	subs	r1, r2, r4
 800d178:	6039      	str	r1, [r7, #0]
 800d17a:	eb63 0305 	sbc.w	r3, r3, r5
 800d17e:	607b      	str	r3, [r7, #4]
 800d180:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d184:	460b      	mov	r3, r1
 800d186:	eb13 0308 	adds.w	r3, r3, r8
 800d18a:	60bb      	str	r3, [r7, #8]
 800d18c:	4613      	mov	r3, r2
 800d18e:	eb43 0309 	adc.w	r3, r3, r9
 800d192:	60fb      	str	r3, [r7, #12]
 800d194:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d198:	f04f 0300 	mov.w	r3, #0
 800d19c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d1a0:	f7f3 f906 	bl	80003b0 <__aeabi_uldivmod>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	61fb      	str	r3, [r7, #28]
                    pxEndPoint->xRAData.eRAState = eRAStatePreLease;
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	2204      	movs	r2, #4
 800d1b0:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                    iptraceRA_SUCCEEDED( &( pxEndPoint->ipv6_settings.xIPAddress ) );
                    FreeRTOS_printf( ( "RA: succeeded, using IP address %pip Reload after %u seconds\n",
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	480d      	ldr	r0, [pc, #52]	@ (800d1f8 <xRAProcess_HandleWaitStates+0x1cc>)
 800d1c4:	f014 ffc0 	bl	8022148 <lUDPLoggingPrintf>
 800d1c8:	e00b      	b.n	800d1e2 <xRAProcess_HandleWaitStates+0x1b6>
                                       ( unsigned ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
                }
                else
                {
                    /* Using the default network parameters. */
                    pxEndPoint->xRAData.eRAState = eRAStateFailed;
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	2206      	movs	r2, #6
 800d1ce:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                    iptraceRA_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( &( pxEndPoint->ipv6_settings.xIPAddress ) );

                    FreeRTOS_printf( ( "RA: failed, using default parameters and IP address %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	3338      	adds	r3, #56	@ 0x38
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	4808      	ldr	r0, [pc, #32]	@ (800d1fc <xRAProcess_HandleWaitStates+0x1d0>)
 800d1da:	f014 ffb5 	bl	8022148 <lUDPLoggingPrintf>
                    /* Disable the timer. */
                    uxNewReloadTime = 0U;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	61fb      	str	r3, [r7, #28]
                }

                /* Now call vIPNetworkUpCalls() to send the network-up event and
                 * start the ARP timer. */
                vIPNetworkUpCalls( pxEndPoint );
 800d1e2:	6978      	ldr	r0, [r7, #20]
 800d1e4:	f7fc fa08 	bl	80095f8 <vIPNetworkUpCalls>
        else
        {
            /* Do nothing */
        }

        return uxNewReloadTime;
 800d1e8:	69fb      	ldr	r3, [r7, #28]
    }
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3720      	adds	r7, #32
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d1f4:	080257bc 	.word	0x080257bc
 800d1f8:	080257e4 	.word	0x080257e4
 800d1fc:	08025824 	.word	0x08025824

0800d200 <xRAProcess_HandleOtherStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleOtherStates( NetworkEndPoint_t * pxEndPoint,
                                                    TickType_t uxReloadTime )
    {
 800d200:	b580      	push	{r7, lr}
 800d202:	b08c      	sub	sp, #48	@ 0x30
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
        TickType_t uxNewReloadTime = uxReloadTime;
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        switch( pxEndPoint->xRAData.eRAState )
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d214:	2b06      	cmp	r3, #6
 800d216:	f200 808c 	bhi.w	800d332 <xRAProcess_HandleOtherStates+0x132>
 800d21a:	a201      	add	r2, pc, #4	@ (adr r2, 800d220 <xRAProcess_HandleOtherStates+0x20>)
 800d21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d220:	0800d23d 	.word	0x0800d23d
 800d224:	0800d333 	.word	0x0800d333
 800d228:	0800d29f 	.word	0x0800d29f
 800d22c:	0800d333 	.word	0x0800d333
 800d230:	0800d31b 	.word	0x0800d31b
 800d234:	0800d325 	.word	0x0800d325
 800d238:	0800d333 	.word	0x0800d333
                   IPv6_Address_t xIPAddress;
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Send a Router Solicitation to ff02::2 */
                   ( void ) memset( xIPAddress.ucBytes, 0, sizeof( xIPAddress.ucBytes ) );
 800d23c:	f107 030c 	add.w	r3, r7, #12
 800d240:	2210      	movs	r2, #16
 800d242:	2100      	movs	r1, #0
 800d244:	4618      	mov	r0, r3
 800d246:	f015 faa8 	bl	802279a <memset>
                   xIPAddress.ucBytes[ 0 ] = 0xffU;
 800d24a:	23ff      	movs	r3, #255	@ 0xff
 800d24c:	733b      	strb	r3, [r7, #12]
                   xIPAddress.ucBytes[ 1 ] = 0x02U;
 800d24e:	2302      	movs	r3, #2
 800d250:	737b      	strb	r3, [r7, #13]
                   xIPAddress.ucBytes[ 15 ] = 0x02U;
 800d252:	2302      	movs	r3, #2
 800d254:	76fb      	strb	r3, [r7, #27]
                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800d256:	233e      	movs	r3, #62	@ 0x3e
 800d258:	623b      	str	r3, [r7, #32]
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800d25a:	2100      	movs	r1, #0
 800d25c:	6a38      	ldr	r0, [r7, #32]
 800d25e:	f00a f863 	bl	8017328 <pxGetNetworkBufferWithDescriptor>
 800d262:	61f8      	str	r0, [r7, #28]

                   if( pxNetworkBuffer != NULL )
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d008      	beq.n	800d27c <xRAProcess_HandleOtherStates+0x7c>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendRouterSolicitation( pxNetworkBuffer, &( xIPAddress ) );
 800d270:	f107 030c 	add.w	r3, r7, #12
 800d274:	4619      	mov	r1, r3
 800d276:	69f8      	ldr	r0, [r7, #28]
 800d278:	f7ff fc24 	bl	800cac4 <vNDSendRouterSolicitation>
                   }

                   FreeRTOS_printf( ( "vRAProcess: Router Solicitation, attempt %lu/%u\n",
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d282:	3301      	adds	r3, #1
 800d284:	2203      	movs	r2, #3
 800d286:	4619      	mov	r1, r3
 800d288:	482d      	ldr	r0, [pc, #180]	@ (800d340 <xRAProcess_HandleOtherStates+0x140>)
 800d28a:	f014 ff5d 	bl	8022148 <lUDPLoggingPrintf>
                                      pxEndPoint->xRAData.uxRetryCount + 1U,
                                      ipconfigRA_SEARCH_COUNT ) );
                   /* Wait a configurable time for a router advertisement. */
                   uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_SEARCH_TIME_OUT_MSEC );
 800d28e:	f242 7310 	movw	r3, #10000	@ 0x2710
 800d292:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateWait;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2201      	movs	r2, #1
 800d298:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800d29c:	e04a      	b.n	800d334 <xRAProcess_HandleOtherStates+0x134>
               {
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Get an IP-address, using the network prefix and a random host address. */
                   if( pxEndPoint->xRAData.bits.bIPAddressInUse != 0U )
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d2a4:	f003 0302 	and.w	r3, r3, #2
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d014      	beq.n	800d2d8 <xRAProcess_HandleOtherStates+0xd8>
                   {
                       pxEndPoint->xRAData.bits.bIPAddressInUse = pdFALSE_UNSIGNED;
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d2b4:	f36f 0341 	bfc	r3, #1, #1
 800d2b8:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110

                       ( void ) FreeRTOS_CreateIPv6Address( &pxEndPoint->ipv6_settings.xIPAddress, &pxEndPoint->ipv6_settings.xPrefix, pxEndPoint->ipv6_settings.uxPrefixLength, pdTRUE );
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	f7ff fb2b 	bl	800c928 <FreeRTOS_CreateIPv6Address>

                       FreeRTOS_printf( ( "RA: Creating a random IP-address\n" ) );
 800d2d2:	481c      	ldr	r0, [pc, #112]	@ (800d344 <xRAProcess_HandleOtherStates+0x144>)
 800d2d4:	f014 ff38 	bl	8022148 <lUDPLoggingPrintf>
                   }

                   FreeRTOS_printf( ( "RA: Neighbour solicitation for %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	3338      	adds	r3, #56	@ 0x38
 800d2dc:	4619      	mov	r1, r3
 800d2de:	481a      	ldr	r0, [pc, #104]	@ (800d348 <xRAProcess_HandleOtherStates+0x148>)
 800d2e0:	f014 ff32 	bl	8022148 <lUDPLoggingPrintf>

                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800d2e4:	2356      	movs	r3, #86	@ 0x56
 800d2e6:	62bb      	str	r3, [r7, #40]	@ 0x28
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800d2e8:	2100      	movs	r1, #0
 800d2ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d2ec:	f00a f81c 	bl	8017328 <pxGetNetworkBufferWithDescriptor>
 800d2f0:	6278      	str	r0, [r7, #36]	@ 0x24

                   if( pxNetworkBuffer != NULL )
 800d2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d008      	beq.n	800d30a <xRAProcess_HandleOtherStates+0x10a>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	3338      	adds	r3, #56	@ 0x38
 800d302:	4619      	mov	r1, r3
 800d304:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d306:	f7fe ff25 	bl	800c154 <vNDSendNeighbourSolicitation>
                   }

                   uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800d30a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d30e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateIPWait;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2203      	movs	r2, #3
 800d314:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800d318:	e00c      	b.n	800d334 <xRAProcess_HandleOtherStates+0x134>

            case eRAStatePreLease:
                pxEndPoint->xRAData.eRAState = eRAStateLease;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2205      	movs	r2, #5
 800d31e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                break;
 800d322:	e007      	b.n	800d334 <xRAProcess_HandleOtherStates+0x134>

            case eRAStateLease:

                vRAProcessInit( pxEndPoint );
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 f811 	bl	800d34c <vRAProcessInit>
                uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800d32a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d32e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                break;
 800d330:	e000      	b.n	800d334 <xRAProcess_HandleOtherStates+0x134>
            case eRAStateFailed:
                break;

            default:
                /* All states were handled. */
                break;
 800d332:	bf00      	nop
        }

        return uxNewReloadTime;
 800d334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800d336:	4618      	mov	r0, r3
 800d338:	3730      	adds	r7, #48	@ 0x30
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	08025860 	.word	0x08025860
 800d344:	08025894 	.word	0x08025894
 800d348:	080258b8 	.word	0x080258b8

0800d34c <vRAProcessInit>:
 * @brief Initialise the RA state machine.
 *
 * @param[in] pxEndPoint The end-point for which Router Advertisement is required.
 */
    static void vRAProcessInit( NetworkEndPoint_t * pxEndPoint )
    {
 800d34c:	b480      	push	{r7}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
        pxEndPoint->xRAData.uxRetryCount = 0U;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxEndPoint->xRAData.eRAState = eRAStateApply;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    }
 800d364:	bf00      	nop
 800d366:	370c      	adds	r7, #12
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <vRAProcess>:
 * @param[in] xDoReset pdTRUE if the state machine must be reset.
 * @param[in] pxEndPoint The end-point for which a RA assignment is required.
 */
    void vRAProcess( BaseType_t xDoReset,
                     NetworkEndPoint_t * pxEndPoint )
    {
 800d370:	b590      	push	{r4, r7, lr}
 800d372:	b089      	sub	sp, #36	@ 0x24
 800d374:	af04      	add	r7, sp, #16
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
        TickType_t uxReloadTime = pdMS_TO_TICKS( 5000U );
 800d37a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d37e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
            eRAState_t eRAState;
        #endif

        configASSERT( pxEndPoint != NULL );
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d104      	bne.n	800d390 <vRAProcess+0x20>
 800d386:	f240 2189 	movw	r1, #649	@ 0x289
 800d38a:	4828      	ldr	r0, [pc, #160]	@ (800d42c <vRAProcess+0xbc>)
 800d38c:	f7f4 fae4 	bl	8001958 <vAssertCalled>

        #if ( ipconfigHAS_PRINTF == 1 )
            /* Remember the initial state, just for logging. */
            eRAState = pxEndPoint->xRAData.eRAState;
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d396:	72fb      	strb	r3, [r7, #11]
        #endif

        if( xDoReset != pdFALSE )
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d002      	beq.n	800d3a4 <vRAProcess+0x34>
        {
            vRAProcessInit( pxEndPoint );
 800d39e:	6838      	ldr	r0, [r7, #0]
 800d3a0:	f7ff ffd4 	bl	800d34c <vRAProcessInit>
        }

        /* First handle the states that are limited by a timer. See if some
         * timer has expired. */
        uxReloadTime = xRAProcess_HandleWaitStates( pxEndPoint, uxReloadTime );
 800d3a4:	68f9      	ldr	r1, [r7, #12]
 800d3a6:	6838      	ldr	r0, [r7, #0]
 800d3a8:	f7ff fe40 	bl	800d02c <xRAProcess_HandleWaitStates>
 800d3ac:	60f8      	str	r0, [r7, #12]

        /* Now handle the other states. */
        uxReloadTime = xRAProcess_HandleOtherStates( pxEndPoint, uxReloadTime );
 800d3ae:	68f9      	ldr	r1, [r7, #12]
 800d3b0:	6838      	ldr	r0, [r7, #0]
 800d3b2:	f7ff ff25 	bl	800d200 <xRAProcess_HandleOtherStates>
 800d3b6:	60f8      	str	r0, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            FreeRTOS_printf( ( "vRAProcess( %ld, %pip) bRouterReplied=%d bIPAddressInUse=%d state %d -> %d\n",
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d3c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	461c      	mov	r4, r3
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d3d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	4618      	mov	r0, r3
 800d3da:	7afb      	ldrb	r3, [r7, #11]
 800d3dc:	683a      	ldr	r2, [r7, #0]
 800d3de:	f892 211c 	ldrb.w	r2, [r2, #284]	@ 0x11c
 800d3e2:	9202      	str	r2, [sp, #8]
 800d3e4:	9301      	str	r3, [sp, #4]
 800d3e6:	9000      	str	r0, [sp, #0]
 800d3e8:	4623      	mov	r3, r4
 800d3ea:	460a      	mov	r2, r1
 800d3ec:	6879      	ldr	r1, [r7, #4]
 800d3ee:	4810      	ldr	r0, [pc, #64]	@ (800d430 <vRAProcess+0xc0>)
 800d3f0:	f014 feaa 	bl	8022148 <lUDPLoggingPrintf>
                               eRAState,
                               pxEndPoint->xRAData.eRAState ) );
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( uxReloadTime != 0U )
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d00d      	beq.n	800d416 <vRAProcess+0xa6>
        {
            FreeRTOS_printf( ( "RA: Reload %u seconds\n", ( unsigned ) ( uxReloadTime / 1000U ) ) );
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	4a0d      	ldr	r2, [pc, #52]	@ (800d434 <vRAProcess+0xc4>)
 800d3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d402:	099b      	lsrs	r3, r3, #6
 800d404:	4619      	mov	r1, r3
 800d406:	480c      	ldr	r0, [pc, #48]	@ (800d438 <vRAProcess+0xc8>)
 800d408:	f014 fe9e 	bl	8022148 <lUDPLoggingPrintf>
            vDHCP_RATimerReload( pxEndPoint, uxReloadTime );
 800d40c:	68f9      	ldr	r1, [r7, #12]
 800d40e:	6838      	ldr	r0, [r7, #0]
 800d410:	f7fc ff8a 	bl	800a328 <vDHCP_RATimerReload>
        {
            /* Disable the timer, this function vRAProcess() won't be called anymore for this end-point. */
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
        }
    }
 800d414:	e006      	b.n	800d424 <vRAProcess+0xb4>
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
 800d416:	4809      	ldr	r0, [pc, #36]	@ (800d43c <vRAProcess+0xcc>)
 800d418:	f014 fe96 	bl	8022148 <lUDPLoggingPrintf>
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800d41c:	2100      	movs	r1, #0
 800d41e:	6838      	ldr	r0, [r7, #0]
 800d420:	f7fd f836 	bl	800a490 <vIPSetDHCP_RATimerEnableState>
    }
 800d424:	bf00      	nop
 800d426:	3714      	adds	r7, #20
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd90      	pop	{r4, r7, pc}
 800d42c:	08025600 	.word	0x08025600
 800d430:	080258e0 	.word	0x080258e0
 800d434:	10624dd3 	.word	0x10624dd3
 800d438:	0802592c 	.word	0x0802592c
 800d43c:	08025944 	.word	0x08025944

0800d440 <FreeRTOS_FillEndPoint>:
                                const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
    {
 800d440:	b580      	push	{r7, lr}
 800d442:	b086      	sub	sp, #24
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	607a      	str	r2, [r7, #4]
 800d44c:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddress;

        if( ( pxNetworkInterface == NULL ) || ( pxEndPoint == NULL ) )
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d002      	beq.n	800d45a <FreeRTOS_FillEndPoint+0x1a>
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d105      	bne.n	800d466 <FreeRTOS_FillEndPoint+0x26>
        {
            /* Invalid input. */
            FreeRTOS_printf( ( "FreeRTOS_FillEndPoint: Invalid input, netif=%p, endpoint=%p\n",
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	68f9      	ldr	r1, [r7, #12]
 800d45e:	483f      	ldr	r0, [pc, #252]	@ (800d55c <FreeRTOS_FillEndPoint+0x11c>)
 800d460:	f014 fe72 	bl	8022148 <lUDPLoggingPrintf>
 800d464:	e075      	b.n	800d552 <FreeRTOS_FillEndPoint+0x112>
             * The user must make sure that the object pointed to by 'pxEndPoint'
             * will remain to exist. */

            /* As the endpoint might be part of a linked list,
             * protect the field pxNext from being overwritten. */
            NetworkEndPoint_t * pxNext = pxEndPoint->pxNext;
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d46c:	617b      	str	r3, [r7, #20]
            ( void ) memset( pxEndPoint, 0, sizeof( *pxEndPoint ) );
 800d46e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d472:	2100      	movs	r1, #0
 800d474:	68b8      	ldr	r0, [r7, #8]
 800d476:	f015 f990 	bl	802279a <memset>
            pxEndPoint->pxNext = pxNext;
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	697a      	ldr	r2, [r7, #20]
 800d47e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

            ulIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	3303      	adds	r3, #3
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	061a      	lsls	r2, r3, #24
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	3302      	adds	r3, #2
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	041b      	lsls	r3, r3, #16
 800d492:	431a      	orrs	r2, r3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	3301      	adds	r3, #1
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	021b      	lsls	r3, r3, #8
 800d49c:	4313      	orrs	r3, r2
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	7812      	ldrb	r2, [r2, #0]
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	613b      	str	r3, [r7, #16]
            pxEndPoint->ipv4_settings.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	3303      	adds	r3, #3
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	061a      	lsls	r2, r3, #24
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	3302      	adds	r3, #2
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	041b      	lsls	r3, r3, #16
 800d4b6:	431a      	orrs	r2, r3
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	021b      	lsls	r3, r3, #8
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	683a      	ldr	r2, [r7, #0]
 800d4c4:	7812      	ldrb	r2, [r2, #0]
 800d4c6:	431a      	orrs	r2, r3
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	605a      	str	r2, [r3, #4]
            pxEndPoint->ipv4_settings.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800d4cc:	6a3b      	ldr	r3, [r7, #32]
 800d4ce:	3303      	adds	r3, #3
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	061a      	lsls	r2, r3, #24
 800d4d4:	6a3b      	ldr	r3, [r7, #32]
 800d4d6:	3302      	adds	r3, #2
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	041b      	lsls	r3, r3, #16
 800d4dc:	431a      	orrs	r2, r3
 800d4de:	6a3b      	ldr	r3, [r7, #32]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	021b      	lsls	r3, r3, #8
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	6a3a      	ldr	r2, [r7, #32]
 800d4ea:	7812      	ldrb	r2, [r2, #0]
 800d4ec:	431a      	orrs	r2, r3
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	609a      	str	r2, [r3, #8]
            pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ] = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800d4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f4:	3303      	adds	r3, #3
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	061a      	lsls	r2, r3, #24
 800d4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4fc:	3302      	adds	r3, #2
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	041b      	lsls	r3, r3, #16
 800d502:	431a      	orrs	r2, r3
 800d504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d506:	3301      	adds	r3, #1
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	021b      	lsls	r3, r3, #8
 800d50c:	4313      	orrs	r3, r2
 800d50e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d510:	7812      	ldrb	r2, [r2, #0]
 800d512:	431a      	orrs	r2, r3
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	60da      	str	r2, [r3, #12]
            pxEndPoint->ipv4_settings.ulBroadcastAddress = ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	43da      	mvns	r2, r3
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	431a      	orrs	r2, r3
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	615a      	str	r2, [r3, #20]

            /* Copy the current values to the default values. */
            ( void ) memcpy( &( pxEndPoint->ipv4_defaults ), &( pxEndPoint->ipv4_settings ), sizeof( pxEndPoint->ipv4_defaults ) );
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	331c      	adds	r3, #28
 800d52a:	68b9      	ldr	r1, [r7, #8]
 800d52c:	221c      	movs	r2, #28
 800d52e:	4618      	mov	r0, r3
 800d530:	f015 f826 	bl	8022580 <memcpy>

            /* The default IP-address will be used in case DHCP is not used, or also if DHCP has failed, or
             * when the user chooses to use the default IP-address. */
            pxEndPoint->ipv4_defaults.ulIPAddress = ulIPAddress;
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	693a      	ldr	r2, [r7, #16]
 800d538:	61da      	str	r2, [r3, #28]

            /* The field 'ipv4_settings.ulIPAddress' will be set later on. */

            ( void ) memcpy( pxEndPoint->xMACAddress.ucBytes, ucMACAddress, sizeof( pxEndPoint->xMACAddress ) );
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	33e8      	adds	r3, #232	@ 0xe8
 800d53e:	2206      	movs	r2, #6
 800d540:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d542:	4618      	mov	r0, r3
 800d544:	f015 f81c 	bl	8022580 <memcpy>
            ( void ) FreeRTOS_AddEndPoint( pxNetworkInterface, pxEndPoint );
 800d548:	68b9      	ldr	r1, [r7, #8]
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f000 f85c 	bl	800d608 <FreeRTOS_AddEndPoint>
        }
    }
 800d550:	bf00      	nop
 800d552:	bf00      	nop
 800d554:	3718      	adds	r7, #24
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	0802595c 	.word	0x0802595c

0800d560 <FreeRTOS_AddNetworkInterface>:
 * @param[in] pxInterface The address of the new interface.
 *
 * @return The value of the parameter 'pxInterface'.
 */
    NetworkInterface_t * FreeRTOS_AddNetworkInterface( NetworkInterface_t * pxInterface )
    {
 800d560:	b480      	push	{r7}
 800d562:	b085      	sub	sp, #20
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxIterator = NULL;
 800d568:	2300      	movs	r3, #0
 800d56a:	60fb      	str	r3, [r7, #12]

        if( pxInterface != NULL )
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d021      	beq.n	800d5b6 <FreeRTOS_AddNetworkInterface+0x56>
        {
            if( pxNetworkInterfaces == NULL )
 800d572:	4b14      	ldr	r3, [pc, #80]	@ (800d5c4 <FreeRTOS_AddNetworkInterface+0x64>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d106      	bne.n	800d588 <FreeRTOS_AddNetworkInterface+0x28>
            {
                /* No other interfaces are set yet, so this is the first in the list. */
                pxNetworkInterfaces = pxInterface;
 800d57a:	4a12      	ldr	r2, [pc, #72]	@ (800d5c4 <FreeRTOS_AddNetworkInterface+0x64>)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6013      	str	r3, [r2, #0]
                pxInterface->pxNext = NULL;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2200      	movs	r2, #0
 800d584:	625a      	str	r2, [r3, #36]	@ 0x24
 800d586:	e016      	b.n	800d5b6 <FreeRTOS_AddNetworkInterface+0x56>
            }
            else
            {
                /* Other interfaces are already defined, so iterate to the end of the
                 * list. */
                pxIterator = pxNetworkInterfaces;
 800d588:	4b0e      	ldr	r3, [pc, #56]	@ (800d5c4 <FreeRTOS_AddNetworkInterface+0x64>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	60fb      	str	r3, [r7, #12]

                for( ; ; )
                {
                    if( pxIterator == pxInterface )
 800d58e:	68fa      	ldr	r2, [r7, #12]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	429a      	cmp	r2, r3
 800d594:	d00e      	beq.n	800d5b4 <FreeRTOS_AddNetworkInterface+0x54>
                    {
                        /* This interface was already added. */
                        break;
                    }

                    if( pxIterator->pxNext == NULL )
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d106      	bne.n	800d5ac <FreeRTOS_AddNetworkInterface+0x4c>
                    {
                        pxIterator->pxNext = pxInterface;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	625a      	str	r2, [r3, #36]	@ 0x24
                        pxInterface->pxNext = NULL;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	625a      	str	r2, [r3, #36]	@ 0x24
                        break;
 800d5aa:	e004      	b.n	800d5b6 <FreeRTOS_AddNetworkInterface+0x56>
                    }

                    pxIterator = pxIterator->pxNext;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5b0:	60fb      	str	r3, [r7, #12]
                    if( pxIterator == pxInterface )
 800d5b2:	e7ec      	b.n	800d58e <FreeRTOS_AddNetworkInterface+0x2e>
                        break;
 800d5b4:	bf00      	nop
                }
            }
        }

        return pxInterface;
 800d5b6:	687b      	ldr	r3, [r7, #4]
    }
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3714      	adds	r7, #20
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr
 800d5c4:	200014a8 	.word	0x200014a8

0800d5c8 <FreeRTOS_FirstNetworkInterface>:
 * @brief Get the first Network Interface, or NULL if none has been added.
 *
 * @return The first interface, or NULL if none has been added
 */
    NetworkInterface_t * FreeRTOS_FirstNetworkInterface( void )
    {
 800d5c8:	b480      	push	{r7}
 800d5ca:	af00      	add	r7, sp, #0
        return pxNetworkInterfaces;
 800d5cc:	4b03      	ldr	r3, [pc, #12]	@ (800d5dc <FreeRTOS_FirstNetworkInterface+0x14>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
    }
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop
 800d5dc:	200014a8 	.word	0x200014a8

0800d5e0 <FreeRTOS_NextNetworkInterface>:
 *
 * @return The interface that comes after 'pxInterface'. NULL when either 'pxInterface'
 *         is NULL, or when 'pxInterface' is the last interface.
 */
    NetworkInterface_t * FreeRTOS_NextNetworkInterface( const NetworkInterface_t * pxInterface )
    {
 800d5e0:	b480      	push	{r7}
 800d5e2:	b085      	sub	sp, #20
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxReturn;

        if( pxInterface != NULL )
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d003      	beq.n	800d5f6 <FreeRTOS_NextNetworkInterface+0x16>
        {
            pxReturn = pxInterface->pxNext;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f2:	60fb      	str	r3, [r7, #12]
 800d5f4:	e001      	b.n	800d5fa <FreeRTOS_NextNetworkInterface+0x1a>
        }
        else
        {
            pxReturn = NULL;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	60fb      	str	r3, [r7, #12]
        }

        return pxReturn;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
    }
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3714      	adds	r7, #20
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr

0800d608 <FreeRTOS_AddEndPoint>:
 *
 * @return The value of the parameter 'pxEndPoint'.
 */
    static NetworkEndPoint_t * FreeRTOS_AddEndPoint( NetworkInterface_t * pxInterface,
                                                     NetworkEndPoint_t * pxEndPoint )
    {
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxIterator = NULL;
 800d612:	2300      	movs	r3, #0
 800d614:	60fb      	str	r3, [r7, #12]

        /* Double link between the NetworkInterface_t that is using the addressing
         * defined by this NetworkEndPoint_t structure. */
        pxEndPoint->pxNetworkInterface = pxInterface;
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	687a      	ldr	r2, [r7, #4]
 800d61a:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

        if( pxInterface->pxEndPoint == NULL )
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6a1b      	ldr	r3, [r3, #32]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d102      	bne.n	800d62c <FreeRTOS_AddEndPoint+0x24>
        {
            /*_RB_ When would pxInterface->pxEndPoint ever not be NULL unless this is called twice? */
            /*_HT_ It may be called twice. */
            pxInterface->pxEndPoint = pxEndPoint;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	683a      	ldr	r2, [r7, #0]
 800d62a:	621a      	str	r2, [r3, #32]
        }

        if( pxNetworkEndPoints == NULL )
 800d62c:	4b33      	ldr	r3, [pc, #204]	@ (800d6fc <FreeRTOS_AddEndPoint+0xf4>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d107      	bne.n	800d644 <FreeRTOS_AddEndPoint+0x3c>
        {
            /* No other end points are defined yet - so this is the first in the
             * list. */
            pxEndPoint->pxNext = NULL;
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	2200      	movs	r2, #0
 800d638:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            pxNetworkEndPoints = pxEndPoint;
 800d63c:	4a2f      	ldr	r2, [pc, #188]	@ (800d6fc <FreeRTOS_AddEndPoint+0xf4>)
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	6013      	str	r3, [r2, #0]
 800d642:	e01a      	b.n	800d67a <FreeRTOS_AddEndPoint+0x72>
        }
        else
        {
            /* Other end points are already defined so iterate to the end of the
             * list. */
            pxIterator = pxNetworkEndPoints;
 800d644:	4b2d      	ldr	r3, [pc, #180]	@ (800d6fc <FreeRTOS_AddEndPoint+0xf4>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	60fb      	str	r3, [r7, #12]

            for( ; ; )
            {
                if( pxIterator == pxEndPoint )
 800d64a:	68fa      	ldr	r2, [r7, #12]
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d012      	beq.n	800d678 <FreeRTOS_AddEndPoint+0x70>
                {
                    /* This end-point has already been added to the list. */
                    break;
                }

                if( pxIterator->pxNext == NULL )
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d108      	bne.n	800d66e <FreeRTOS_AddEndPoint+0x66>
                {
                    pxEndPoint->pxNext = NULL;
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	2200      	movs	r2, #0
 800d660:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    pxIterator->pxNext = pxEndPoint;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	683a      	ldr	r2, [r7, #0]
 800d668:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    break;
 800d66c:	e005      	b.n	800d67a <FreeRTOS_AddEndPoint+0x72>
                }

                pxIterator = pxIterator->pxNext;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d674:	60fb      	str	r3, [r7, #12]
                if( pxIterator == pxEndPoint )
 800d676:	e7e8      	b.n	800d64a <FreeRTOS_AddEndPoint+0x42>
                    break;
 800d678:	bf00      	nop
            }
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d680:	f003 0304 	and.w	r3, r3, #4
 800d684:	b2db      	uxtb	r3, r3
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00c      	beq.n	800d6a4 <FreeRTOS_AddEndPoint+0x9c>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv6: %pip\n",
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800d690:	4619      	mov	r1, r3
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800d698:	461a      	mov	r2, r3
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	3390      	adds	r3, #144	@ 0x90
 800d69e:	4818      	ldr	r0, [pc, #96]	@ (800d700 <FreeRTOS_AddEndPoint+0xf8>)
 800d6a0:	f014 fd52 	bl	8022148 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( void * ) pxEndPoint->ipv6_defaults.xIPAddress.ucBytes ) );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d6aa:	f003 0304 	and.w	r3, r3, #4
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d11e      	bne.n	800d6f2 <FreeRTOS_AddEndPoint+0xea>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv4: %xip\n",
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	69db      	ldr	r3, [r3, #28]
 800d6c8:	061a      	lsls	r2, r3, #24
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	69db      	ldr	r3, [r3, #28]
 800d6ce:	021b      	lsls	r3, r3, #8
 800d6d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d6d4:	431a      	orrs	r2, r3
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	69db      	ldr	r3, [r3, #28]
 800d6da:	0a1b      	lsrs	r3, r3, #8
 800d6dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d6e0:	431a      	orrs	r2, r3
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	69db      	ldr	r3, [r3, #28]
 800d6e6:	0e1b      	lsrs	r3, r3, #24
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	4805      	ldr	r0, [pc, #20]	@ (800d704 <FreeRTOS_AddEndPoint+0xfc>)
 800d6ee:	f014 fd2b 	bl	8022148 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( unsigned ) FreeRTOS_ntohl( pxEndPoint->ipv4_defaults.ulIPAddress ) ) );
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        return pxEndPoint;
 800d6f2:	683b      	ldr	r3, [r7, #0]
    }
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3710      	adds	r7, #16
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	200014a4 	.word	0x200014a4
 800d700:	0802599c 	.word	0x0802599c
 800d704:	080259d0 	.word	0x080259d0

0800d708 <FreeRTOS_FirstEndPoint>:
 *
 * @return The first end-point that is found to the interface, or NULL when the
 *         interface doesn't have any end-point yet.
 */
    NetworkEndPoint_t * FreeRTOS_FirstEndPoint( const NetworkInterface_t * pxInterface )
    {
 800d708:	b480      	push	{r7}
 800d70a:	b085      	sub	sp, #20
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d710:	4b0d      	ldr	r3, [pc, #52]	@ (800d748 <FreeRTOS_FirstEndPoint+0x40>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	60fb      	str	r3, [r7, #12]

        /* Find and return the NetworkEndPoint_t structure that is associated with
         * the pxInterface NetworkInterface_t. *//*_RB_ Could this be made a two way link, so the NetworkEndPoint_t can just be read from the NetworkInterface_t structure?  Looks like there is a pointer in the struct already. */
        while( pxEndPoint != NULL )
 800d716:	e00c      	b.n	800d732 <FreeRTOS_FirstEndPoint+0x2a>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00c      	beq.n	800d738 <FreeRTOS_FirstEndPoint+0x30>
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	429a      	cmp	r2, r3
 800d728:	d006      	beq.n	800d738 <FreeRTOS_FirstEndPoint+0x30>
            {
                break;
            }

            pxEndPoint = pxEndPoint->pxNext;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d730:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d1ef      	bne.n	800d718 <FreeRTOS_FirstEndPoint+0x10>
        }

        return pxEndPoint;
 800d738:	68fb      	ldr	r3, [r7, #12]
    }
 800d73a:	4618      	mov	r0, r3
 800d73c:	3714      	adds	r7, #20
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr
 800d746:	bf00      	nop
 800d748:	200014a4 	.word	0x200014a4

0800d74c <FreeRTOS_NextEndPoint>:
 *
 * @return The end-point that is found, or NULL when there are no more end-points in the list.
 */
    NetworkEndPoint_t * FreeRTOS_NextEndPoint( const NetworkInterface_t * pxInterface,
                                               NetworkEndPoint_t * pxEndPoint )
    {
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = pxEndPoint;
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	60fb      	str	r3, [r7, #12]

        if( pxResult != NULL )
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d015      	beq.n	800d78c <FreeRTOS_NextEndPoint+0x40>
        {
            pxResult = pxResult->pxNext;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d766:	60fb      	str	r3, [r7, #12]

            while( pxResult != NULL )
 800d768:	e00c      	b.n	800d784 <FreeRTOS_NextEndPoint+0x38>
            {
                if( ( pxInterface == NULL ) || ( pxResult->pxNetworkInterface == pxInterface ) )
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d011      	beq.n	800d794 <FreeRTOS_NextEndPoint+0x48>
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d00b      	beq.n	800d794 <FreeRTOS_NextEndPoint+0x48>
                {
                    break;
                }

                pxResult = pxResult->pxNext;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d782:	60fb      	str	r3, [r7, #12]
            while( pxResult != NULL )
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d1ef      	bne.n	800d76a <FreeRTOS_NextEndPoint+0x1e>
 800d78a:	e003      	b.n	800d794 <FreeRTOS_NextEndPoint+0x48>
            }
        }
        else
        {
            pxResult = FreeRTOS_FirstEndPoint( pxInterface );
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f7ff ffbb 	bl	800d708 <FreeRTOS_FirstEndPoint>
 800d792:	60f8      	str	r0, [r7, #12]
        }

        return pxResult;
 800d794:	68fb      	ldr	r3, [r7, #12]
    }
 800d796:	4618      	mov	r0, r3
 800d798:	3710      	adds	r7, #16
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
	...

0800d7a0 <FreeRTOS_FindEndPointOnIP_IPv4>:
 *
 * @return The end-point found or NULL.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv4( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800d7a0:	b480      	push	{r7}
 800d7a2:	b085      	sub	sp, #20
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d7aa:	4b1e      	ldr	r3, [pc, #120]	@ (800d824 <FreeRTOS_FindEndPointOnIP_IPv4+0x84>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocationsIP ) / sizeof( xRoutingStatistics.ulLocationsIP[ 0 ] ) );
 800d7b0:	2308      	movs	r3, #8
 800d7b2:	60bb      	str	r3, [r7, #8]

            xRoutingStatistics.ulOnIp++;
 800d7b4:	4b1c      	ldr	r3, [pc, #112]	@ (800d828 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	4a1b      	ldr	r2, [pc, #108]	@ (800d828 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800d7bc:	6013      	str	r3, [r2, #0]

            if( ulWhere < ulLocationCount )
 800d7be:	683a      	ldr	r2, [r7, #0]
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d223      	bcs.n	800d80e <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
            {
                xRoutingStatistics.ulLocationsIP[ ulWhere ]++;
 800d7c6:	4a18      	ldr	r2, [pc, #96]	@ (800d828 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	3312      	adds	r3, #18
 800d7cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7d0:	1c5a      	adds	r2, r3, #1
 800d7d2:	4915      	ldr	r1, [pc, #84]	@ (800d828 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	3312      	adds	r3, #18
 800d7d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
        #endif /* ( ipconfigHAS_ROUTING_STATISTICS == 1 ) */

        while( pxEndPoint != NULL )
 800d7dc:	e017      	b.n	800d80e <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                #if ( ipconfigUSE_IPv6 != 0 )
                    if( pxEndPoint->bits.bIPv6 == 0U )
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d7e4:	f003 0304 	and.w	r3, r3, #4
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d10b      	bne.n	800d806 <FreeRTOS_FindEndPointOnIP_IPv4+0x66>
                #endif
                {
                    if( ( ulIPAddress == 0U ) ||
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d00f      	beq.n	800d814 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
                    if( ( ulIPAddress == 0U ) ||
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00b      	beq.n	800d814 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == ulIPAddress ) )
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	429a      	cmp	r2, r3
 800d804:	d006      	beq.n	800d814 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        break;
                    }
                }
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            pxEndPoint = pxEndPoint->pxNext;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d80c:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d1e4      	bne.n	800d7de <FreeRTOS_FindEndPointOnIP_IPv4+0x3e>
        }

        ( void ) ulIPAddress;

        return pxEndPoint;
 800d814:	68fb      	ldr	r3, [r7, #12]
    }
 800d816:	4618      	mov	r0, r3
 800d818:	3714      	adds	r7, #20
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop
 800d824:	200014a4 	.word	0x200014a4
 800d828:	200014ac 	.word	0x200014ac

0800d82c <FreeRTOS_FindEndPointOnIP_IPv6>:
 * @param[in] pxIPAddress The IP-address of interest.
 *
 * @return The end-point found or NULL.
 */
        NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv6( const IPv6_Address_t * pxIPAddress )
        {
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
            return FreeRTOS_InterfaceEPInSameSubnet_IPv6( NULL, pxIPAddress );
 800d834:	6879      	ldr	r1, [r7, #4]
 800d836:	2000      	movs	r0, #0
 800d838:	f000 f8b6 	bl	800d9a8 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800d83c:	4603      	mov	r3, r0
        }
 800d83e:	4618      	mov	r0, r3
 800d840:	3708      	adds	r7, #8
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
	...

0800d848 <FreeRTOS_FindEndPointOnMAC>:
 *
 * @return The end-point that has the given MAC-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnMAC( const MACAddress_t * pxMACAddress,
                                                    const NetworkInterface_t * pxInterface )
    {
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d852:	4b17      	ldr	r3, [pc, #92]	@ (800d8b0 <FreeRTOS_FindEndPointOnMAC+0x68>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            xRoutingStatistics.ulOnMAC++;
 800d858:	4b16      	ldr	r3, [pc, #88]	@ (800d8b4 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800d85a:	685b      	ldr	r3, [r3, #4]
 800d85c:	3301      	adds	r3, #1
 800d85e:	4a15      	ldr	r2, [pc, #84]	@ (800d8b4 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800d860:	6053      	str	r3, [r2, #4]
        }
        #endif

        /* If input MAC address is NULL, return NULL. */
        if( pxMACAddress == NULL )
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d119      	bne.n	800d89c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            pxEndPoint = NULL;
 800d868:	2300      	movs	r3, #0
 800d86a:	60fb      	str	r3, [r7, #12]
         * uin64_t variables for direct comparison instead of using memcmp()?  [don't
         * know if there is a quick way of creating a 64-bit number from the 48-byte
         * MAC address without getting junk in the top 2 bytes]. */

        /* Find the end-point with given MAC-address. */
        while( pxEndPoint != NULL )
 800d86c:	e016      	b.n	800d89c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            if( ( pxInterface == NULL ) || ( pxInterface == pxEndPoint->pxNetworkInterface ) )
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d005      	beq.n	800d880 <FreeRTOS_FindEndPointOnMAC+0x38>
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d87a:	683a      	ldr	r2, [r7, #0]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d109      	bne.n	800d894 <FreeRTOS_FindEndPointOnMAC+0x4c>
            {
                if( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 )
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	33e8      	adds	r3, #232	@ 0xe8
 800d884:	6879      	ldr	r1, [r7, #4]
 800d886:	2206      	movs	r2, #6
 800d888:	4618      	mov	r0, r3
 800d88a:	f015 fe0e 	bl	80234aa <memcmp>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d007      	beq.n	800d8a4 <FreeRTOS_FindEndPointOnMAC+0x5c>
                {
                    break;
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d89a:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d1e5      	bne.n	800d86e <FreeRTOS_FindEndPointOnMAC+0x26>
 800d8a2:	e000      	b.n	800d8a6 <FreeRTOS_FindEndPointOnMAC+0x5e>
                    break;
 800d8a4:	bf00      	nop
        }

        return pxEndPoint;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
    }
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3710      	adds	r7, #16
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	200014a4 	.word	0x200014a4
 800d8b4:	200014ac 	.word	0x200014ac

0800d8b8 <FreeRTOS_FindEndPointOnNetMask>:
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnNetMask( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
        /* The 'ulWhere' parameter is only for debugging purposes. */
        return FreeRTOS_InterfaceEndPointOnNetMask( NULL, ulIPAddress, ulWhere );
 800d8c2:	683a      	ldr	r2, [r7, #0]
 800d8c4:	6879      	ldr	r1, [r7, #4]
 800d8c6:	2000      	movs	r0, #0
 800d8c8:	f000 f806 	bl	800d8d8 <FreeRTOS_InterfaceEndPointOnNetMask>
 800d8cc:	4603      	mov	r3, r0
    }
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3708      	adds	r7, #8
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
	...

0800d8d8 <FreeRTOS_InterfaceEndPointOnNetMask>:
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_InterfaceEndPointOnNetMask( const NetworkInterface_t * pxInterface,
                                                             uint32_t ulIPAddress,
                                                             uint32_t ulWhere )
    {
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b086      	sub	sp, #24
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	607a      	str	r2, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d8e4:	4b2d      	ldr	r3, [pc, #180]	@ (800d99c <FreeRTOS_InterfaceEndPointOnNetMask+0xc4>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	617b      	str	r3, [r7, #20]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocations ) / sizeof( xRoutingStatistics.ulLocations[ 0 ] ) );
 800d8ea:	230e      	movs	r3, #14
 800d8ec:	613b      	str	r3, [r7, #16]

            xRoutingStatistics.ulOnNetMask++;
 800d8ee:	4b2c      	ldr	r3, [pc, #176]	@ (800d9a0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d8f0:	689b      	ldr	r3, [r3, #8]
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	4a2a      	ldr	r2, [pc, #168]	@ (800d9a0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d8f6:	6093      	str	r3, [r2, #8]

            if( ulWhere < ulLocationCount )
 800d8f8:	687a      	ldr	r2, [r7, #4]
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d22d      	bcs.n	800d95c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
            {
                xRoutingStatistics.ulLocations[ ulWhere ]++;
 800d900:	4a27      	ldr	r2, [pc, #156]	@ (800d9a0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	3304      	adds	r3, #4
 800d906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d90a:	1c5a      	adds	r2, r3, #1
 800d90c:	4924      	ldr	r1, [pc, #144]	@ (800d9a0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	3304      	adds	r3, #4
 800d912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /*_RB_ Presumably then a broadcast reply could go out on a different end point to that on
         * which the broadcast was received - although that should not be an issue if the nodes are
         * on the same LAN it could be an issue if the nodes are on separate LAN's. */

        while( pxEndPoint != NULL )
 800d916:	e021      	b.n	800d95c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d005      	beq.n	800d92a <FreeRTOS_InterfaceEndPointOnNetMask+0x52>
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d924:	68fa      	ldr	r2, [r7, #12]
 800d926:	429a      	cmp	r2, r3
 800d928:	d114      	bne.n	800d954 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    #if ( ipconfigUSE_IPv6 != 0 )
                        if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d930:	f003 0304 	and.w	r3, r3, #4
 800d934:	b2db      	uxtb	r3, r3
 800d936:	2b00      	cmp	r3, #0
 800d938:	d10c      	bne.n	800d954 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
                    #endif
                    {
                        if( ( ulIPAddress == ~0U ) ||
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d940:	d00f      	beq.n	800d962 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                            ( ( ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) == ( pxEndPoint->ipv4_settings.ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) ) )
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	405a      	eors	r2, r3
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	4013      	ands	r3, r2
                        if( ( ulIPAddress == ~0U ) ||
 800d950:	2b00      	cmp	r3, #0
 800d952:	d006      	beq.n	800d962 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                        }
                    }
                #endif /* if ( ipconfigUSE_IPv4 != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d95a:	617b      	str	r3, [r7, #20]
        while( pxEndPoint != NULL )
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d1da      	bne.n	800d918 <FreeRTOS_InterfaceEndPointOnNetMask+0x40>
        }

        /* This was only for debugging. */
        if( pxEndPoint == NULL )
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d113      	bne.n	800d990 <FreeRTOS_InterfaceEndPointOnNetMask+0xb8>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_FindEndPointOnNetMask[%d]: No match for %xip\n",
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	061a      	lsls	r2, r3, #24
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	021b      	lsls	r3, r3, #8
 800d970:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d974:	431a      	orrs	r2, r3
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	0a1b      	lsrs	r3, r3, #8
 800d97a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d97e:	431a      	orrs	r2, r3
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	0e1b      	lsrs	r3, r3, #24
 800d984:	4313      	orrs	r3, r2
 800d986:	461a      	mov	r2, r3
 800d988:	6879      	ldr	r1, [r7, #4]
 800d98a:	4806      	ldr	r0, [pc, #24]	@ (800d9a4 <FreeRTOS_InterfaceEndPointOnNetMask+0xcc>)
 800d98c:	f014 fbdc 	bl	8022148 <lUDPLoggingPrintf>
                                     ( unsigned ) ulWhere, ( unsigned ) FreeRTOS_ntohl( ulIPAddress ) ) );
        }

        return pxEndPoint;
 800d990:	697b      	ldr	r3, [r7, #20]
    }
 800d992:	4618      	mov	r0, r3
 800d994:	3718      	adds	r7, #24
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
 800d99a:	bf00      	nop
 800d99c:	200014a4 	.word	0x200014a4
 800d9a0:	200014ac 	.word	0x200014ac
 800d9a4:	08025a04 	.word	0x08025a04

0800d9a8 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>:
 * @param[in] pxIPAddress The IPv6-address for which an end-point is looked-up.
 * @return An end-point that is in the same subnet as the given IP-address.
 */
        NetworkEndPoint_t * FreeRTOS_InterfaceEPInSameSubnet_IPv6( const NetworkInterface_t * pxInterface,
                                                                   const IPv6_Address_t * pxIPAddress )
        {
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d9b2:	4b17      	ldr	r3, [pc, #92]	@ (800da10 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x68>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	60fb      	str	r3, [r7, #12]

            /* Find the best fitting end-point to reach a given IP-address. */

            while( pxEndPoint != NULL )
 800d9b8:	e020      	b.n	800d9fc <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x54>
            {
                if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d005      	beq.n	800d9cc <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x24>
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d9c6:	687a      	ldr	r2, [r7, #4]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d113      	bne.n	800d9f4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                {
                    if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d9d2:	f003 0304 	and.w	r3, r3, #4
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00b      	beq.n	800d9f4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                    {
                        if( xCompareIPv6_Address( &( pxEndPoint->ipv6_settings.xIPAddress ), pxIPAddress, pxEndPoint->ipv6_settings.uxPrefixLength ) == 0 )
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	6839      	ldr	r1, [r7, #0]
 800d9ea:	f7fd fc0b 	bl	800b204 <xCompareIPv6_Address>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d007      	beq.n	800da04 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5c>
                            break;
                        }
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d9fa:	60fb      	str	r3, [r7, #12]
            while( pxEndPoint != NULL )
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d1db      	bne.n	800d9ba <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x12>
 800da02:	e000      	b.n	800da06 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5e>
                            break;
 800da04:	bf00      	nop
            }

            return pxEndPoint;
 800da06:	68fb      	ldr	r3, [r7, #12]
        }
 800da08:	4618      	mov	r0, r3
 800da0a:	3710      	adds	r7, #16
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	200014a4 	.word	0x200014a4

0800da14 <pxEasyFit>:
    NetworkEndPoint_t * pxEasyFit( const NetworkInterface_t * pxNetworkInterface,
                                   const uint16_t usFrameType,
                                   const IP_Address_t * pxIPAddressFrom,
                                   const IP_Address_t * pxIPAddressTo,
                                   const MACAddress_t * pxMACAddress )
    {
 800da14:	b5b0      	push	{r4, r5, r7, lr}
 800da16:	b0b0      	sub	sp, #192	@ 0xc0
 800da18:	af04      	add	r7, sp, #16
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	607a      	str	r2, [r7, #4]
 800da1e:	603b      	str	r3, [r7, #0]
 800da20:	460b      	mov	r3, r1
 800da22:	817b      	strh	r3, [r7, #10]
        NetworkEndPoint_t * pxEndPoint;
        NetworkEndPoint_t * pxReturn = NULL;
 800da24:	2300      	movs	r3, #0
 800da26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        /* endpoints found for IP-type, IP-address, and MAC-address. */
        NetworkEndPoint_t * pxFound[ rMATCH_COUNT ] = { NULL, NULL, NULL, NULL };
 800da2a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800da2e:	2200      	movs	r2, #0
 800da30:	601a      	str	r2, [r3, #0]
 800da32:	605a      	str	r2, [r3, #4]
 800da34:	609a      	str	r2, [r3, #8]
 800da36:	60da      	str	r2, [r3, #12]
        BaseType_t xCount[ rMATCH_COUNT ] = { 0, 0, 0, 0 };
 800da38:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800da3c:	2200      	movs	r2, #0
 800da3e:	601a      	str	r2, [r3, #0]
 800da40:	605a      	str	r2, [r3, #4]
 800da42:	609a      	str	r2, [r3, #8]
 800da44:	60da      	str	r2, [r3, #12]
        BaseType_t xIndex;
        BaseType_t xIsIPv6 = ( usFrameType == ipIPv6_FRAME_TYPE ) ? pdTRUE : pdFALSE;
 800da46:	897b      	ldrh	r3, [r7, #10]
 800da48:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d101      	bne.n	800da54 <pxEasyFit+0x40>
 800da50:	2301      	movs	r3, #1
 800da52:	e000      	b.n	800da56 <pxEasyFit+0x42>
 800da54:	2300      	movs	r3, #0
 800da56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        BaseType_t xGatewayTarget = pdFALSE;
 800da5a:	2300      	movs	r3, #0
 800da5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        BaseType_t xTargetGlobal = pdFALSE;
 800da60:	2300      	movs	r3, #0
 800da62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        ( void ) pxIPAddressFrom;
        ( void ) xGatewayTarget;
        ( void ) xTargetGlobal;

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 800da66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d123      	bne.n	800dab6 <pxEasyFit+0xa2>
                    0xfe, 0x80, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01
                };
                xGatewayTarget = ( memcmp( ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, 16 ) == 0 ) ? pdTRUE : pdFALSE;
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	2210      	movs	r2, #16
 800da72:	4619      	mov	r1, r3
 800da74:	4888      	ldr	r0, [pc, #544]	@ (800dc98 <pxEasyFit+0x284>)
 800da76:	f015 fd18 	bl	80234aa <memcmp>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d101      	bne.n	800da84 <pxEasyFit+0x70>
 800da80:	2301      	movs	r3, #1
 800da82:	e000      	b.n	800da86 <pxEasyFit+0x72>
 800da84:	2300      	movs	r3, #0
 800da86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                if( xGatewayTarget == pdTRUE )
 800da8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da8e:	2b01      	cmp	r3, #1
 800da90:	d105      	bne.n	800da9e <pxEasyFit+0x8a>
                {
                    FreeRTOS_debug_printf( ( " GW address %pip to %pip\n",
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	683a      	ldr	r2, [r7, #0]
 800da96:	4619      	mov	r1, r3
 800da98:	4880      	ldr	r0, [pc, #512]	@ (800dc9c <pxEasyFit+0x288>)
 800da9a:	f014 fb55 	bl	8022148 <lUDPLoggingPrintf>
                                             ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
                                             ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes ) );
                }

                xTargetGlobal = ( xIPv6_GetIPType( &( pxIPAddressTo->xIP_IPv6 ) ) == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f000 fa15 	bl	800ded0 <xIPv6_GetIPType>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d101      	bne.n	800dab0 <pxEasyFit+0x9c>
 800daac:	2301      	movs	r3, #1
 800daae:	e000      	b.n	800dab2 <pxEasyFit+0x9e>
 800dab0:	2300      	movs	r3, #0
 800dab2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkInterface );
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f7ff fe26 	bl	800d708 <FreeRTOS_FirstEndPoint>
 800dabc:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800dac0:	e07d      	b.n	800dbbe <pxEasyFit+0x1aa>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
        {
            BaseType_t xSameMACAddress = ( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ? pdTRUE : pdFALSE;
 800dac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dac6:	33e8      	adds	r3, #232	@ 0xe8
 800dac8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800dacc:	2206      	movs	r2, #6
 800dace:	4618      	mov	r0, r3
 800dad0:	f015 fceb 	bl	80234aa <memcmp>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d101      	bne.n	800dade <pxEasyFit+0xca>
 800dada:	2301      	movs	r3, #1
 800dadc:	e000      	b.n	800dae0 <pxEasyFit+0xcc>
 800dade:	2300      	movs	r3, #0
 800dae0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            if( xIsIPv6 == ( BaseType_t ) pxEndPoint->bits.bIPv6 )
 800dae4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dae8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800daec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	461a      	mov	r2, r3
 800daf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800daf8:	4293      	cmp	r3, r2
 800dafa:	d159      	bne.n	800dbb0 <pxEasyFit+0x19c>
            {
                pxFound[ rMATCH_IP_TYPE ] = pxEndPoint;
 800dafc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db00:	67fb      	str	r3, [r7, #124]	@ 0x7c
                xCount[ rMATCH_IP_TYPE ]++;
 800db02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db04:	3301      	adds	r3, #1
 800db06:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Case default is impossible to reach because no endpoints for disabled IP type. */
                switch( xIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800db08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d134      	bne.n	800db7a <pxEasyFit+0x166>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ( BaseType_t ) pdTRUE:
                           {
                               IPv6_Type_t xEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800db10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db14:	3338      	adds	r3, #56	@ 0x38
 800db16:	4618      	mov	r0, r3
 800db18:	f000 f9da 	bl	800ded0 <xIPv6_GetIPType>
 800db1c:	4603      	mov	r3, r0
 800db1e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                               if( xEndpointType != eIPv6_Unknown )
 800db22:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800db26:	2b05      	cmp	r3, #5
 800db28:	d035      	beq.n	800db96 <pxEasyFit+0x182>
                               {
                                   BaseType_t xEndpointGlobal = ( xEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800db2a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d101      	bne.n	800db36 <pxEasyFit+0x122>
 800db32:	2301      	movs	r3, #1
 800db34:	e000      	b.n	800db38 <pxEasyFit+0x124>
 800db36:	2300      	movs	r3, #0
 800db38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                                   if( ( memcmp( pxEndPoint->ipv6_settings.xIPAddress.ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 ) )
 800db3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db40:	3338      	adds	r3, #56	@ 0x38
 800db42:	6839      	ldr	r1, [r7, #0]
 800db44:	2210      	movs	r2, #16
 800db46:	4618      	mov	r0, r3
 800db48:	f015 fcaf 	bl	80234aa <memcmp>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d106      	bne.n	800db60 <pxEasyFit+0x14c>
                                   {
                                       pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800db52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db56:	673b      	str	r3, [r7, #112]	@ 0x70
                                       xCount[ rMATCH_IP_ADDR ]++;
 800db58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800db5a:	3301      	adds	r3, #1
 800db5c:	663b      	str	r3, [r7, #96]	@ 0x60
                               else
                               {
                                   /* do nothing, coverity happy */
                               }
                           }
                           break;
 800db5e:	e01a      	b.n	800db96 <pxEasyFit+0x182>
                                   else if( xTargetGlobal == xEndpointGlobal )
 800db60:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800db64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800db68:	429a      	cmp	r2, r3
 800db6a:	d114      	bne.n	800db96 <pxEasyFit+0x182>
                                       pxFound[ rMATCH_IPv6_TYPE ] = pxEndPoint;
 800db6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db70:	677b      	str	r3, [r7, #116]	@ 0x74
                                       xCount[ rMATCH_IPv6_TYPE ]++;
 800db72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db74:	3301      	adds	r3, #1
 800db76:	667b      	str	r3, [r7, #100]	@ 0x64
                           break;
 800db78:	e00d      	b.n	800db96 <pxEasyFit+0x182>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ( BaseType_t ) pdFALSE:
                    default:
                        #if ( ipconfigUSE_IPv4 != 0 )
                            if( pxEndPoint->ipv4_settings.ulIPAddress == pxIPAddressTo->ulIP_IPv4 )
 800db7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	429a      	cmp	r2, r3
 800db86:	d108      	bne.n	800db9a <pxEasyFit+0x186>
                            {
                                pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800db88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db8c:	673b      	str	r3, [r7, #112]	@ 0x70
                                xCount[ rMATCH_IP_ADDR ]++;
 800db8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800db90:	3301      	adds	r3, #1
 800db92:	663b      	str	r3, [r7, #96]	@ 0x60
                            {
                                /* do nothing, coverity happy */
                            }
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        break;
 800db94:	e001      	b.n	800db9a <pxEasyFit+0x186>
                           break;
 800db96:	bf00      	nop
 800db98:	e000      	b.n	800db9c <pxEasyFit+0x188>
                        break;
 800db9a:	bf00      	nop
                }

                if( xSameMACAddress == pdTRUE )
 800db9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d105      	bne.n	800dbb0 <pxEasyFit+0x19c>
                {
                    xCount[ rMATCH_MAC_ADDR ]++;
 800dba4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dba6:	3301      	adds	r3, #1
 800dba8:	66bb      	str	r3, [r7, #104]	@ 0x68
                    pxFound[ rMATCH_MAC_ADDR ] = pxEndPoint;
 800dbaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dbae:	67bb      	str	r3, [r7, #120]	@ 0x78
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
 800dbb0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800dbb4:	68f8      	ldr	r0, [r7, #12]
 800dbb6:	f7ff fdc9 	bl	800d74c <FreeRTOS_NextEndPoint>
 800dbba:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
             pxEndPoint != NULL;
 800dbbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	f47f af7d 	bne.w	800dac2 <pxEasyFit+0xae>
                }
            }
        }

        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800dbc8:	2300      	movs	r3, #0
 800dbca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dbce:	e017      	b.n	800dc00 <pxEasyFit+0x1ec>
        {
            if( xCount[ xIndex ] >= 1 )
 800dbd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	33b0      	adds	r3, #176	@ 0xb0
 800dbd8:	443b      	add	r3, r7
 800dbda:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	dd09      	ble.n	800dbf6 <pxEasyFit+0x1e2>
            {
                pxReturn = pxFound[ xIndex ];
 800dbe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dbe6:	009b      	lsls	r3, r3, #2
 800dbe8:	33b0      	adds	r3, #176	@ 0xb0
 800dbea:	443b      	add	r3, r7
 800dbec:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800dbf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                break;
 800dbf4:	e008      	b.n	800dc08 <pxEasyFit+0x1f4>
        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800dbf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dc00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dc04:	2b03      	cmp	r3, #3
 800dc06:	dde3      	ble.n	800dbd0 <pxEasyFit+0x1bc>
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( pxReturn == NULL )
 800dc08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d13c      	bne.n	800dc8a <pxEasyFit+0x276>
            {
                char pcBufferFrom[ 40 ];
                char pcBufferTo[ 40 ];
                BaseType_t xFamily = ( usFrameType == ipIPv6_FRAME_TYPE ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET4;
 800dc10:	897b      	ldrh	r3, [r7, #10]
 800dc12:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d101      	bne.n	800dc1e <pxEasyFit+0x20a>
 800dc1a:	230a      	movs	r3, #10
 800dc1c:	e000      	b.n	800dc20 <pxEasyFit+0x20c>
 800dc1e:	2302      	movs	r3, #2
 800dc20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                const char * xRetNtopTo;
                const char * xRetNtopFrom;
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
                                                 ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes,
 800dc24:	6839      	ldr	r1, [r7, #0]
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
 800dc26:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800dc2a:	2328      	movs	r3, #40	@ 0x28
 800dc2c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800dc30:	f001 fc70 	bl	800f514 <FreeRTOS_inet_ntop>
 800dc34:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
                                                 pcBufferTo,
                                                 sizeof( pcBufferTo ) );
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
                                                   ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
 800dc38:	6879      	ldr	r1, [r7, #4]
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
 800dc3a:	f107 0210 	add.w	r2, r7, #16
 800dc3e:	2328      	movs	r3, #40	@ 0x28
 800dc40:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800dc44:	f001 fc66 	bl	800f514 <FreeRTOS_inet_ntop>
 800dc48:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
                                                   pcBufferFrom,
                                                   sizeof( pcBufferFrom ) );

                FreeRTOS_debug_printf( ( "EasyFit[%x]: %d %d %d ( %s ->%s ) BAD\n",
 800dc4c:	8979      	ldrh	r1, [r7, #10]
 800dc4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dc50:	461c      	mov	r4, r3
 800dc52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc54:	461d      	mov	r5, r3
 800dc56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d002      	beq.n	800dc68 <pxEasyFit+0x254>
 800dc62:	f107 0310 	add.w	r3, r7, #16
 800dc66:	e000      	b.n	800dc6a <pxEasyFit+0x256>
 800dc68:	4b0d      	ldr	r3, [pc, #52]	@ (800dca0 <pxEasyFit+0x28c>)
 800dc6a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800dc6e:	2a00      	cmp	r2, #0
 800dc70:	d002      	beq.n	800dc78 <pxEasyFit+0x264>
 800dc72:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800dc76:	e000      	b.n	800dc7a <pxEasyFit+0x266>
 800dc78:	4a09      	ldr	r2, [pc, #36]	@ (800dca0 <pxEasyFit+0x28c>)
 800dc7a:	9202      	str	r2, [sp, #8]
 800dc7c:	9301      	str	r3, [sp, #4]
 800dc7e:	9000      	str	r0, [sp, #0]
 800dc80:	462b      	mov	r3, r5
 800dc82:	4622      	mov	r2, r4
 800dc84:	4807      	ldr	r0, [pc, #28]	@ (800dca4 <pxEasyFit+0x290>)
 800dc86:	f014 fa5f 	bl	8022148 <lUDPLoggingPrintf>
                                         ( xRetNtopFrom == NULL ) ? "INVALID" : pcBufferFrom,
                                         ( xRetNtopTo == NULL ) ? "INVALID" : pcBufferTo ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return pxReturn;
 800dc8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
    }
 800dc8e:	4618      	mov	r0, r3
 800dc90:	37b0      	adds	r7, #176	@ 0xb0
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bdb0      	pop	{r4, r5, r7, pc}
 800dc96:	bf00      	nop
 800dc98:	08027858 	.word	0x08027858
 800dc9c:	08025aa0 	.word	0x08025aa0
 800dca0:	08025abc 	.word	0x08025abc
 800dca4:	08025ac4 	.word	0x08025ac4

0800dca8 <FreeRTOS_MatchingEndpoint>:
 *
 * @return The end-point that should handle the incoming Ethernet packet.
 */
    NetworkEndPoint_t * FreeRTOS_MatchingEndpoint( const NetworkInterface_t * pxNetworkInterface,
                                                   const uint8_t * pucEthernetBuffer )
    {
 800dca8:	b590      	push	{r4, r7, lr}
 800dcaa:	b097      	sub	sp, #92	@ 0x5c
 800dcac:	af02      	add	r7, sp, #8
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = NULL;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolPacket_t * pxPacket = ( ( const ProtocolPacket_t * ) pucEthernetBuffer );
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	647b      	str	r3, [r7, #68]	@ 0x44

        #if ( ipconfigUSE_IPv6 != 0 )
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	643b      	str	r3, [r7, #64]	@ 0x40
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        configASSERT( pucEthernetBuffer != NULL );
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d104      	bne.n	800dcce <FreeRTOS_MatchingEndpoint+0x26>
 800dcc4:	f44f 7164 	mov.w	r1, #912	@ 0x390
 800dcc8:	485e      	ldr	r0, [pc, #376]	@ (800de44 <FreeRTOS_MatchingEndpoint+0x19c>)
 800dcca:	f7f3 fe45 	bl	8001958 <vAssertCalled>
        #ifndef _lint
        {
            /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            uintptr_t uxAddress = ( uintptr_t ) pucEthernetBuffer;
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxAddress += 2U;
 800dcd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcd4:	3302      	adds	r3, #2
 800dcd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            configASSERT( ( uxAddress % 4U ) == 0U );
 800dcd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcda:	f003 0303 	and.w	r3, r3, #3
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d004      	beq.n	800dcec <FreeRTOS_MatchingEndpoint+0x44>
 800dce2:	f240 319b 	movw	r1, #923	@ 0x39b
 800dce6:	4857      	ldr	r0, [pc, #348]	@ (800de44 <FreeRTOS_MatchingEndpoint+0x19c>)
 800dce8:	f7f3 fe36 	bl	8001958 <vAssertCalled>
         */

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            /* Some stats while developing. */
            xRoutingStatistics.ulMatching++;
 800dcec:	4b56      	ldr	r3, [pc, #344]	@ (800de48 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	4a55      	ldr	r2, [pc, #340]	@ (800de48 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800dcf4:	60d3      	str	r3, [r2, #12]
        }
        #endif
        {
            uint16_t usFrameType = pxPacket->xUDPPacket.xEthernetHeader.usFrameType;
 800dcf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dcf8:	7b1a      	ldrb	r2, [r3, #12]
 800dcfa:	7b5b      	ldrb	r3, [r3, #13]
 800dcfc:	021b      	lsls	r3, r3, #8
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	877b      	strh	r3, [r7, #58]	@ 0x3a
            IP_Address_t xIPAddressFrom;
            IP_Address_t xIPAddressTo;
            MACAddress_t xMACAddress;
            BaseType_t xDoProcessPacket = pdFALSE;
 800dd02:	2300      	movs	r3, #0
 800dd04:	64bb      	str	r3, [r7, #72]	@ 0x48

            ( void ) memset( xIPAddressFrom.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800dd06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd0a:	2210      	movs	r2, #16
 800dd0c:	2100      	movs	r1, #0
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f014 fd43 	bl	802279a <memset>
            ( void ) memset( xIPAddressTo.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800dd14:	f107 0314 	add.w	r3, r7, #20
 800dd18:	2210      	movs	r2, #16
 800dd1a:	2100      	movs	r1, #0
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f014 fd3c 	bl	802279a <memset>

            switch( usFrameType )
 800dd22:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800dd24:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d009      	beq.n	800dd40 <FreeRTOS_MatchingEndpoint+0x98>
 800dd2c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800dd30:	4293      	cmp	r3, r2
 800dd32:	dc6a      	bgt.n	800de0a <FreeRTOS_MatchingEndpoint+0x162>
 800dd34:	2b08      	cmp	r3, #8
 800dd36:	d05d      	beq.n	800ddf4 <FreeRTOS_MatchingEndpoint+0x14c>
 800dd38:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800dd3c:	d015      	beq.n	800dd6a <FreeRTOS_MatchingEndpoint+0xc2>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES == 1 )
                        /* Custom frame types, match by MAC address only. */
                        xDoProcessPacket = pdTRUE;
                    #endif

                    break;
 800dd3e:	e064      	b.n	800de0a <FreeRTOS_MatchingEndpoint+0x162>
                        ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800dd40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd42:	3316      	adds	r3, #22
 800dd44:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800dd48:	6818      	ldr	r0, [r3, #0]
 800dd4a:	6859      	ldr	r1, [r3, #4]
 800dd4c:	689a      	ldr	r2, [r3, #8]
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800dd52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd54:	3326      	adds	r3, #38	@ 0x26
 800dd56:	f107 0414 	add.w	r4, r7, #20
 800dd5a:	6818      	ldr	r0, [r3, #0]
 800dd5c:	6859      	ldr	r1, [r3, #4]
 800dd5e:	689a      	ldr	r2, [r3, #8]
 800dd60:	68db      	ldr	r3, [r3, #12]
 800dd62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        xDoProcessPacket = pdTRUE;
 800dd64:	2301      	movs	r3, #1
 800dd66:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800dd68:	e050      	b.n	800de0c <FreeRTOS_MatchingEndpoint+0x164>
                        const ARPPacket_t * pxARPFrame = ( const ARPPacket_t * ) pucEthernetBuffer;
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	637b      	str	r3, [r7, #52]	@ 0x34
                        if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REQUEST )
 800dd6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd70:	8a9b      	ldrh	r3, [r3, #20]
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd78:	d108      	bne.n	800dd8c <FreeRTOS_MatchingEndpoint+0xe4>
                            ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800dd7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd7c:	331c      	adds	r3, #28
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	627b      	str	r3, [r7, #36]	@ 0x24
                            xIPAddressTo.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800dd82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd84:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800dd88:	617b      	str	r3, [r7, #20]
 800dd8a:	e00d      	b.n	800dda8 <FreeRTOS_MatchingEndpoint+0x100>
                        else if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REPLY )
 800dd8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd8e:	8a9b      	ldrh	r3, [r3, #20]
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd96:	d107      	bne.n	800dda8 <FreeRTOS_MatchingEndpoint+0x100>
                            ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800dd98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd9a:	331c      	adds	r3, #28
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	617b      	str	r3, [r7, #20]
                            xIPAddressFrom.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800dda0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dda2:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800dda6:	627b      	str	r3, [r7, #36]	@ 0x24
                        FreeRTOS_debug_printf( ( "pxEasyFit: ARP %xip -> %xip\n", ( unsigned ) FreeRTOS_ntohl( xIPAddressFrom.ulIP_IPv4 ), ( unsigned ) FreeRTOS_ntohl( xIPAddressTo.ulIP_IPv4 ) ) );
 800dda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddaa:	061a      	lsls	r2, r3, #24
 800ddac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddae:	021b      	lsls	r3, r3, #8
 800ddb0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ddb4:	431a      	orrs	r2, r3
 800ddb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb8:	0a1b      	lsrs	r3, r3, #8
 800ddba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ddbe:	431a      	orrs	r2, r3
 800ddc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc2:	0e1b      	lsrs	r3, r3, #24
 800ddc4:	ea42 0103 	orr.w	r1, r2, r3
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	061a      	lsls	r2, r3, #24
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	021b      	lsls	r3, r3, #8
 800ddd0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ddd4:	431a      	orrs	r2, r3
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	0a1b      	lsrs	r3, r3, #8
 800ddda:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ddde:	431a      	orrs	r2, r3
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	0e1b      	lsrs	r3, r3, #24
 800dde4:	4313      	orrs	r3, r2
 800dde6:	461a      	mov	r2, r3
 800dde8:	4818      	ldr	r0, [pc, #96]	@ (800de4c <FreeRTOS_MatchingEndpoint+0x1a4>)
 800ddea:	f014 f9ad 	bl	8022148 <lUDPLoggingPrintf>
                    xDoProcessPacket = pdTRUE;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800ddf2:	e00b      	b.n	800de0c <FreeRTOS_MatchingEndpoint+0x164>
                        xIPAddressFrom.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulSourceIPAddress;
 800ddf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddf6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ddfa:	627b      	str	r3, [r7, #36]	@ 0x24
                        xIPAddressTo.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulDestinationIPAddress;
 800ddfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddfe:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800de02:	617b      	str	r3, [r7, #20]
                        xDoProcessPacket = pdTRUE;
 800de04:	2301      	movs	r3, #1
 800de06:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800de08:	e000      	b.n	800de0c <FreeRTOS_MatchingEndpoint+0x164>
                    break;
 800de0a:	bf00      	nop
            }

            if( xDoProcessPacket == pdTRUE )
 800de0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d113      	bne.n	800de3a <FreeRTOS_MatchingEndpoint+0x192>
            {
                ( void ) memcpy( xMACAddress.ucBytes, pxPacket->xUDPPacket.xEthernetHeader.xDestinationAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800de12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800de14:	f107 030c 	add.w	r3, r7, #12
 800de18:	6810      	ldr	r0, [r2, #0]
 800de1a:	6018      	str	r0, [r3, #0]
 800de1c:	8892      	ldrh	r2, [r2, #4]
 800de1e:	809a      	strh	r2, [r3, #4]
                pxEndPoint = pxEasyFit( pxNetworkInterface,
 800de20:	f107 0014 	add.w	r0, r7, #20
 800de24:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800de28:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 800de2a:	f107 030c 	add.w	r3, r7, #12
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	4603      	mov	r3, r0
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f7ff fdee 	bl	800da14 <pxEasyFit>
 800de38:	64f8      	str	r0, [r7, #76]	@ 0x4c
                                        &xIPAddressFrom,
                                        &xIPAddressTo,
                                        &xMACAddress );
            }
        }
        return pxEndPoint;
 800de3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800de3c:	4618      	mov	r0, r3
 800de3e:	3754      	adds	r7, #84	@ 0x54
 800de40:	46bd      	mov	sp, r7
 800de42:	bd90      	pop	{r4, r7, pc}
 800de44:	08025aec 	.word	0x08025aec
 800de48:	200014ac 	.word	0x200014ac
 800de4c:	08025b1c 	.word	0x08025b1c

0800de50 <FreeRTOS_FindGateWay>:
 * @param[in] xIPType The type of Gateway to look for ( ipTYPE_IPv4 or ipTYPE_IPv6 ).
 *
 * @return The end-point that will lead to the gateway, or NULL when no gateway was found.
 */
    NetworkEndPoint_t * FreeRTOS_FindGateWay( BaseType_t xIPType )
    {
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800de58:	4b1b      	ldr	r3, [pc, #108]	@ (800dec8 <FreeRTOS_FindGateWay+0x78>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	60fb      	str	r3, [r7, #12]

        while( pxEndPoint != NULL )
 800de5e:	e028      	b.n	800deb2 <FreeRTOS_FindGateWay+0x62>
                if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U ) /* access to ipv4_settings is checked. */
                {
                    break;
                }
            #else
                if( ( xIPType == ( BaseType_t ) ipTYPE_IPv6 ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2b60      	cmp	r3, #96	@ 0x60
 800de64:	d112      	bne.n	800de8c <FreeRTOS_FindGateWay+0x3c>
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800de6c:	f003 0304 	and.w	r3, r3, #4
 800de70:	b2db      	uxtb	r3, r3
 800de72:	2b00      	cmp	r3, #0
 800de74:	d00a      	beq.n	800de8c <FreeRTOS_FindGateWay+0x3c>
                {
                    /* Check if the IP-address is non-zero. */
                    if( memcmp( FreeRTOS_in6addr_any.ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) != 0 )
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	335c      	adds	r3, #92	@ 0x5c
 800de7a:	2210      	movs	r2, #16
 800de7c:	4619      	mov	r1, r3
 800de7e:	4813      	ldr	r0, [pc, #76]	@ (800decc <FreeRTOS_FindGateWay+0x7c>)
 800de80:	f015 fb13 	bl	80234aa <memcmp>
 800de84:	4603      	mov	r3, r0
 800de86:	2b00      	cmp	r3, #0
 800de88:	d00f      	beq.n	800deaa <FreeRTOS_FindGateWay+0x5a>
                    {
                        break;
 800de8a:	e017      	b.n	800debc <FreeRTOS_FindGateWay+0x6c>
                    }
                }

                #if ( ipconfigUSE_IPv4 != 0 )
                    else
                    if( ( xIPType == ( BaseType_t ) ipTYPE_IPv4 ) && ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) )
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2b40      	cmp	r3, #64	@ 0x40
 800de90:	d10b      	bne.n	800deaa <FreeRTOS_FindGateWay+0x5a>
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800de98:	f003 0304 	and.w	r3, r3, #4
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d103      	bne.n	800deaa <FreeRTOS_FindGateWay+0x5a>
                    {
                        if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U )
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	689b      	ldr	r3, [r3, #8]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d107      	bne.n	800deba <FreeRTOS_FindGateWay+0x6a>
                else
                {
                    /* This end-point is not the right IP-type. */
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            pxEndPoint = pxEndPoint->pxNext;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800deb0:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d1d3      	bne.n	800de60 <FreeRTOS_FindGateWay+0x10>
 800deb8:	e000      	b.n	800debc <FreeRTOS_FindGateWay+0x6c>
                            break;
 800deba:	bf00      	nop
        }

        return pxEndPoint;
 800debc:	68fb      	ldr	r3, [r7, #12]
    }
 800debe:	4618      	mov	r0, r3
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop
 800dec8:	200014a4 	.word	0x200014a4
 800decc:	08027810 	.word	0x08027810

0800ded0 <xIPv6_GetIPType>:
 * @param[in] pxAddress The IPv6 address whose type needs to be returned.
 * @returns The IP type of the given address.
 */
#if ( ipconfigUSE_IPv6 != 0 )
    IPv6_Type_t xIPv6_GetIPType( const IPv6_Address_t * pxAddress )
    {
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b086      	sub	sp, #24
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
        IPv6_Type_t eResult = eIPv6_Unknown;
 800ded8:	2305      	movs	r3, #5
 800deda:	75fb      	strb	r3, [r7, #23]
            { eIPv6_SiteLocal, 0xFFC0U, 0xFEC0U }, /* 1111 1110 11 */
            { eIPv6_Multicast, 0xFF00U, 0xFF00U }, /* 1111 1111 */
            { eIPv6_Loopback,  0xFFFFU, 0x0000U }, /* 0000 0000 ::1 */
        };

        if( pxAddress != NULL )
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d046      	beq.n	800df70 <xIPv6_GetIPType+0xa0>
        {
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800dee2:	2300      	movs	r3, #0
 800dee4:	613b      	str	r3, [r7, #16]
 800dee6:	e040      	b.n	800df6a <xIPv6_GetIPType+0x9a>
            {
                uint16_t usAddress =
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	021b      	lsls	r3, r3, #8
 800deee:	b21a      	sxth	r2, r3
                                   ( ( uint16_t ) pxAddress->ucBytes[ 1 ] ) );
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	785b      	ldrb	r3, [r3, #1]
 800def4:	b21b      	sxth	r3, r3
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800def6:	4313      	orrs	r3, r2
 800def8:	b21b      	sxth	r3, r3
                uint16_t usAddress =
 800defa:	81fb      	strh	r3, [r7, #14]

                if( xIPCouples[ xIndex ].eType == eIPv6_Loopback )
 800defc:	491f      	ldr	r1, [pc, #124]	@ (800df7c <xIPv6_GetIPType+0xac>)
 800defe:	693a      	ldr	r2, [r7, #16]
 800df00:	4613      	mov	r3, r2
 800df02:	005b      	lsls	r3, r3, #1
 800df04:	4413      	add	r3, r2
 800df06:	005b      	lsls	r3, r3, #1
 800df08:	440b      	add	r3, r1
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	2b04      	cmp	r3, #4
 800df0e:	d108      	bne.n	800df22 <xIPv6_GetIPType+0x52>
                {
                    if( xIsIPv6Loopback( pxAddress ) != pdFALSE )
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f7fd f929 	bl	800b168 <xIsIPv6Loopback>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d002      	beq.n	800df22 <xIPv6_GetIPType+0x52>
                    {
                        eResult = eIPv6_Loopback;
 800df1c:	2304      	movs	r3, #4
 800df1e:	75fb      	strb	r3, [r7, #23]
                        break;
 800df20:	e026      	b.n	800df70 <xIPv6_GetIPType+0xa0>
                    }
                }

                if( ( usAddress & xIPCouples[ xIndex ].usMask ) == xIPCouples[ xIndex ].usExpected )
 800df22:	4916      	ldr	r1, [pc, #88]	@ (800df7c <xIPv6_GetIPType+0xac>)
 800df24:	693a      	ldr	r2, [r7, #16]
 800df26:	4613      	mov	r3, r2
 800df28:	005b      	lsls	r3, r3, #1
 800df2a:	4413      	add	r3, r2
 800df2c:	005b      	lsls	r3, r3, #1
 800df2e:	440b      	add	r3, r1
 800df30:	3302      	adds	r3, #2
 800df32:	881a      	ldrh	r2, [r3, #0]
 800df34:	89fb      	ldrh	r3, [r7, #14]
 800df36:	4013      	ands	r3, r2
 800df38:	b299      	uxth	r1, r3
 800df3a:	4810      	ldr	r0, [pc, #64]	@ (800df7c <xIPv6_GetIPType+0xac>)
 800df3c:	693a      	ldr	r2, [r7, #16]
 800df3e:	4613      	mov	r3, r2
 800df40:	005b      	lsls	r3, r3, #1
 800df42:	4413      	add	r3, r2
 800df44:	005b      	lsls	r3, r3, #1
 800df46:	4403      	add	r3, r0
 800df48:	3304      	adds	r3, #4
 800df4a:	881b      	ldrh	r3, [r3, #0]
 800df4c:	4299      	cmp	r1, r3
 800df4e:	d109      	bne.n	800df64 <xIPv6_GetIPType+0x94>
                {
                    eResult = xIPCouples[ xIndex ].eType;
 800df50:	490a      	ldr	r1, [pc, #40]	@ (800df7c <xIPv6_GetIPType+0xac>)
 800df52:	693a      	ldr	r2, [r7, #16]
 800df54:	4613      	mov	r3, r2
 800df56:	005b      	lsls	r3, r3, #1
 800df58:	4413      	add	r3, r2
 800df5a:	005b      	lsls	r3, r3, #1
 800df5c:	440b      	add	r3, r1
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	75fb      	strb	r3, [r7, #23]
                    break;
 800df62:	e005      	b.n	800df70 <xIPv6_GetIPType+0xa0>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	3301      	adds	r3, #1
 800df68:	613b      	str	r3, [r7, #16]
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	2b04      	cmp	r3, #4
 800df6e:	ddbb      	ble.n	800dee8 <xIPv6_GetIPType+0x18>
                }
            }
        }

        return eResult;
 800df70:	7dfb      	ldrb	r3, [r7, #23]
    }
 800df72:	4618      	mov	r0, r3
 800df74:	3718      	adds	r7, #24
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	08027868 	.word	0x08027868

0800df80 <pcEndpointName>:
 *          The string will be "NULL" if the end point pointer is NULL.
 */
    const char * pcEndpointName( const NetworkEndPoint_t * pxEndPoint,
                                 char * pcBuffer,
                                 size_t uxSize )
    {
 800df80:	b580      	push	{r7, lr}
 800df82:	b084      	sub	sp, #16
 800df84:	af00      	add	r7, sp, #0
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	607a      	str	r2, [r7, #4]
        if( pxEndPoint == NULL )
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d105      	bne.n	800df9e <pcEndpointName+0x1e>
        {
            /* MISRA Ref 21.6.1 [snprintf and logging] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
            /* coverity[misra_c_2012_rule_21_6_violation] */
            ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800df92:	4a16      	ldr	r2, [pc, #88]	@ (800dfec <pcEndpointName+0x6c>)
 800df94:	6879      	ldr	r1, [r7, #4]
 800df96:	68b8      	ldr	r0, [r7, #8]
 800df98:	f015 f902 	bl	80231a0 <snprintf>
 800df9c:	e020      	b.n	800dfe0 <pcEndpointName+0x60>
        }
        else
        {
            switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800dfa4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d002      	beq.n	800dfb4 <pcEndpointName+0x34>
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	d007      	beq.n	800dfc2 <pcEndpointName+0x42>
 800dfb2:	e00f      	b.n	800dfd4 <pcEndpointName+0x54>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
                                                     ( const void * ) &( pxEndPoint->ipv4_settings.ulIPAddress ),
 800dfb4:	68f9      	ldr	r1, [r7, #12]
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	2002      	movs	r0, #2
 800dfbc:	f001 faaa 	bl	800f514 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800dfc0:	e00e      	b.n	800dfe0 <pcEndpointName+0x60>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
                                                     pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	68ba      	ldr	r2, [r7, #8]
 800dfcc:	200a      	movs	r0, #10
 800dfce:	f001 faa1 	bl	800f514 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800dfd2:	e005      	b.n	800dfe0 <pcEndpointName+0x60>
                default:
                    /* MISRA 16.4 Compliance */
                    /* MISRA Ref 21.6.1 [snprintf and logging] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
                    /* coverity[misra_c_2012_rule_21_6_violation] */
                    ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800dfd4:	4a05      	ldr	r2, [pc, #20]	@ (800dfec <pcEndpointName+0x6c>)
 800dfd6:	6879      	ldr	r1, [r7, #4]
 800dfd8:	68b8      	ldr	r0, [r7, #8]
 800dfda:	f015 f8e1 	bl	80231a0 <snprintf>
                    break;
 800dfde:	bf00      	nop
            }
        }

        return pcBuffer;
 800dfe0:	68bb      	ldr	r3, [r7, #8]
    }
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3710      	adds	r7, #16
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
 800dfea:	bf00      	nop
 800dfec:	08025b3c 	.word	0x08025b3c

0800dff0 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	60b9      	str	r1, [r7, #8]
 800dffa:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( xSocketValid( pxSocket ) == pdFALSE )
 800dffc:	68f8      	ldr	r0, [r7, #12]
 800dffe:	f002 fb21 	bl	8010644 <xSocketValid>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d102      	bne.n	800e00e <prvValidSocket+0x1e>
    {
        xReturn = pdFALSE;
 800e008:	2300      	movs	r3, #0
 800e00a:	617b      	str	r3, [r7, #20]
 800e00c:	e015      	b.n	800e03a <prvValidSocket+0x4a>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d006      	beq.n	800e022 <prvValidSocket+0x32>
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	69db      	ldr	r3, [r3, #28]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d102      	bne.n	800e022 <prvValidSocket+0x32>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800e01c:	2300      	movs	r3, #0
 800e01e:	617b      	str	r3, [r7, #20]
 800e020:	e00b      	b.n	800e03a <prvValidSocket+0x4a>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d002      	beq.n	800e036 <prvValidSocket+0x46>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800e030:	2300      	movs	r3, #0
 800e032:	617b      	str	r3, [r7, #20]
 800e034:	e001      	b.n	800e03a <prvValidSocket+0x4a>
    }
    else
    {
        xReturn = pdTRUE;
 800e036:	2301      	movs	r3, #1
 800e038:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800e03a:	697b      	ldr	r3, [r7, #20]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3718      	adds	r7, #24
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800e044:	b580      	push	{r7, lr}
 800e046:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800e048:	4803      	ldr	r0, [pc, #12]	@ (800e058 <vNetworkSocketsInit+0x14>)
 800e04a:	f7f5 fa45 	bl	80034d8 <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800e04e:	4803      	ldr	r0, [pc, #12]	@ (800e05c <vNetworkSocketsInit+0x18>)
 800e050:	f7f5 fa42 	bl	80034d8 <vListInitialise>
    }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800e054:	bf00      	nop
 800e056:	bd80      	pop	{r7, pc}
 800e058:	20001570 	.word	0x20001570
 800e05c:	20001584 	.word	0x20001584

0800e060 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b086      	sub	sp, #24
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
 800e06c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800e06e:	2301      	movs	r3, #1
 800e070:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800e072:	2300      	movs	r3, #0
 800e074:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800e076:	f7fb ff97 	bl	8009fa8 <xIPIsNetworkTaskReady>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d102      	bne.n	800e086 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800e080:	2300      	movs	r3, #0
 800e082:	617b      	str	r3, [r7, #20]
 800e084:	e05e      	b.n	800e144 <prvDetermineSocketSize+0xe4>

            configASSERT( xDomain == FREERTOS_AF_INET6 );
        }
        #else /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */
        {
            if( ( xDomain != FREERTOS_AF_INET ) && ( xDomain != FREERTOS_AF_INET6 ) )
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2b02      	cmp	r3, #2
 800e08a:	d004      	beq.n	800e096 <prvDetermineSocketSize+0x36>
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2b0a      	cmp	r3, #10
 800e090:	d001      	beq.n	800e096 <prvDetermineSocketSize+0x36>
            {
                xReturn = pdFAIL;
 800e092:	2300      	movs	r3, #0
 800e094:	617b      	str	r3, [r7, #20]
            }

            configASSERT( ( xDomain == FREERTOS_AF_INET ) || ( xDomain == FREERTOS_AF_INET6 ) );
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2b02      	cmp	r3, #2
 800e09a:	d002      	beq.n	800e0a2 <prvDetermineSocketSize+0x42>
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2b0a      	cmp	r3, #10
 800e0a0:	d101      	bne.n	800e0a6 <prvDetermineSocketSize+0x46>
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	e000      	b.n	800e0a8 <prvDetermineSocketSize+0x48>
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d104      	bne.n	800e0b6 <prvDetermineSocketSize+0x56>
 800e0ac:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800e0b0:	4827      	ldr	r0, [pc, #156]	@ (800e150 <prvDetermineSocketSize+0xf0>)
 800e0b2:	f7f3 fc51 	bl	8001958 <vAssertCalled>
        }
        #endif /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800e0b6:	4b27      	ldr	r3, [pc, #156]	@ (800e154 <prvDetermineSocketSize+0xf4>)
 800e0b8:	689b      	ldr	r3, [r3, #8]
 800e0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0be:	d004      	beq.n	800e0ca <prvDetermineSocketSize+0x6a>
 800e0c0:	f240 11f9 	movw	r1, #505	@ 0x1f9
 800e0c4:	4822      	ldr	r0, [pc, #136]	@ (800e150 <prvDetermineSocketSize+0xf0>)
 800e0c6:	f7f3 fc47 	bl	8001958 <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
        {
            /* Check if the TCP socket-list has been initialised. */
            configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800e0ca:	4b23      	ldr	r3, [pc, #140]	@ (800e158 <prvDetermineSocketSize+0xf8>)
 800e0cc:	689b      	ldr	r3, [r3, #8]
 800e0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0d2:	d004      	beq.n	800e0de <prvDetermineSocketSize+0x7e>
 800e0d4:	f240 11fd 	movw	r1, #509	@ 0x1fd
 800e0d8:	481d      	ldr	r0, [pc, #116]	@ (800e150 <prvDetermineSocketSize+0xf0>)
 800e0da:	f7f3 fc3d 	bl	8001958 <vAssertCalled>
        }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2b11      	cmp	r3, #17
 800e0e2:	d110      	bne.n	800e106 <prvDetermineSocketSize+0xa6>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	2b02      	cmp	r3, #2
 800e0e8:	d009      	beq.n	800e0fe <prvDetermineSocketSize+0x9e>
            {
                xReturn = pdFAIL;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d004      	beq.n	800e0fe <prvDetermineSocketSize+0x9e>
 800e0f4:	f240 2106 	movw	r1, #518	@ 0x206
 800e0f8:	4815      	ldr	r0, [pc, #84]	@ (800e150 <prvDetermineSocketSize+0xf0>)
 800e0fa:	f7f3 fc2d 	bl	8001958 <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	2270      	movs	r2, #112	@ 0x70
 800e102:	601a      	str	r2, [r3, #0]
 800e104:	e01e      	b.n	800e144 <prvDetermineSocketSize+0xe4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2b06      	cmp	r3, #6
 800e10a:	d111      	bne.n	800e130 <prvDetermineSocketSize+0xd0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	2b01      	cmp	r3, #1
 800e110:	d009      	beq.n	800e126 <prvDetermineSocketSize+0xc6>
                {
                    xReturn = pdFAIL;
 800e112:	2300      	movs	r3, #0
 800e114:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	2b01      	cmp	r3, #1
 800e11a:	d004      	beq.n	800e126 <prvDetermineSocketSize+0xc6>
 800e11c:	f240 2113 	movw	r1, #531	@ 0x213
 800e120:	480b      	ldr	r0, [pc, #44]	@ (800e150 <prvDetermineSocketSize+0xf0>)
 800e122:	f7f3 fc19 	bl	8001958 <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e12c:	601a      	str	r2, [r3, #0]
 800e12e:	e009      	b.n	800e144 <prvDetermineSocketSize+0xe4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800e130:	2300      	movs	r3, #0
 800e132:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	2b01      	cmp	r3, #1
 800e138:	d004      	beq.n	800e144 <prvDetermineSocketSize+0xe4>
 800e13a:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800e13e:	4804      	ldr	r0, [pc, #16]	@ (800e150 <prvDetermineSocketSize+0xf0>)
 800e140:	f7f3 fc0a 	bl	8001958 <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800e144:	697b      	ldr	r3, [r7, #20]
}
 800e146:	4618      	mov	r0, r3
 800e148:	3718      	adds	r7, #24
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	bf00      	nop
 800e150:	08025b44 	.word	0x08025b44
 800e154:	20001570 	.word	0x20001570
 800e158:	20001584 	.word	0x20001584

0800e15c <prvInitialiseTCPFields>:
 * @param[in] uxSocketSize The calculated size of the socket, only used to
 *                          gather memory usage statistics.
 */
    static void prvInitialiseTCPFields( FreeRTOS_Socket_t * pxSocket,
                                        size_t uxSocketSize )
    {
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
        ( void ) uxSocketSize;
        /* Lint wants at least a comment, in case the macro is empty. */
        iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
        /* StreamSize is expressed in number of bytes */
        /* Round up buffer sizes to nearest multiple of MSS */
        pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800e16c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxSocket->bits.bIsIPv6 != 0U )
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	7a1b      	ldrb	r3, [r3, #8]
 800e174:	f003 0301 	and.w	r3, r3, #1
 800e178:	b2db      	uxtb	r3, r3
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d00a      	beq.n	800e194 <prvInitialiseTCPFields+0x38>
            {
                uint16_t usDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 800e17e:	2314      	movs	r3, #20
 800e180:	81fb      	strh	r3, [r7, #14]

                /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
                 * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
                pxSocket->u.xTCP.usMSS = ( uint16_t ) ( pxSocket->u.xTCP.usMSS - usDifference );
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800e188:	89fb      	ldrh	r3, [r7, #14]
 800e18a:	1ad3      	subs	r3, r2, r3
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
            }
        #endif /* ipconfigUSE_IPv6 != 0 */

        pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e19a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800e19e:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800e1a2:	f640 3068 	movw	r0, #2920	@ 0xb68
 800e1a6:	f7fc fc85 	bl	800aab4 <FreeRTOS_round_up>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        /* Use half of the buffer size of the TCP windows */
        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e1b8:	08db      	lsrs	r3, r3, #3
 800e1ba:	4a10      	ldr	r2, [pc, #64]	@ (800e1fc <prvInitialiseTCPFields+0xa0>)
 800e1bc:	fba2 2303 	umull	r2, r3, r2, r3
 800e1c0:	099b      	lsrs	r3, r3, #6
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	2001      	movs	r0, #1
 800e1c6:	f7fc fc35 	bl	800aa34 <FreeRTOS_max_size_t>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e1d8:	08db      	lsrs	r3, r3, #3
 800e1da:	4a08      	ldr	r2, [pc, #32]	@ (800e1fc <prvInitialiseTCPFields+0xa0>)
 800e1dc:	fba2 2303 	umull	r2, r3, r2, r3
 800e1e0:	099b      	lsrs	r3, r3, #6
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	2001      	movs	r0, #1
 800e1e6:	f7fc fc25 	bl	800aa34 <FreeRTOS_max_size_t>
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        #endif

        /* The above values are just defaults, and can be overridden by
         * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
         * socket is connected and data is exchanged. */
    }
 800e1f2:	bf00      	nop
 800e1f4:	3710      	adds	r7, #16
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
 800e1fa:	bf00      	nop
 800e1fc:	2ce33e6d 	.word	0x2ce33e6d

0800e200 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b08a      	sub	sp, #40	@ 0x28
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800e20c:	2301      	movs	r3, #1
 800e20e:	617b      	str	r3, [r7, #20]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;
    BaseType_t xProtocolCpy = xProtocol;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	623b      	str	r3, [r7, #32]

    configASSERT( ( xDomain == FREERTOS_AF_INET6 ) || ( xDomain == FREERTOS_AF_INET ) );
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2b0a      	cmp	r3, #10
 800e218:	d002      	beq.n	800e220 <FreeRTOS_socket+0x20>
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2b02      	cmp	r3, #2
 800e21e:	d101      	bne.n	800e224 <FreeRTOS_socket+0x24>
 800e220:	2301      	movs	r3, #1
 800e222:	e000      	b.n	800e226 <FreeRTOS_socket+0x26>
 800e224:	2300      	movs	r3, #0
 800e226:	2b00      	cmp	r3, #0
 800e228:	d104      	bne.n	800e234 <FreeRTOS_socket+0x34>
 800e22a:	f240 2171 	movw	r1, #625	@ 0x271
 800e22e:	4845      	ldr	r0, [pc, #276]	@ (800e344 <FreeRTOS_socket+0x144>)
 800e230:	f7f3 fb92 	bl	8001958 <vAssertCalled>
         * to passing 0 as defined by POSIX, indicates to the socket layer that it
         * should pick a sensible default protocol based off the given socket type.
         * If we can't, prvDetermineSocketSize will catch it as an invalid
         * type/protocol combo.
         */
        if( xProtocol == FREERTOS_SOCK_DEPENDENT_PROTO )
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d10c      	bne.n	800e254 <FreeRTOS_socket+0x54>
        {
            switch( xType )
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d005      	beq.n	800e24c <FreeRTOS_socket+0x4c>
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	2b02      	cmp	r3, #2
 800e244:	d105      	bne.n	800e252 <FreeRTOS_socket+0x52>
            {
                case FREERTOS_SOCK_DGRAM:
                    xProtocolCpy = FREERTOS_IPPROTO_UDP;
 800e246:	2311      	movs	r3, #17
 800e248:	623b      	str	r3, [r7, #32]
                    break;
 800e24a:	e003      	b.n	800e254 <FreeRTOS_socket+0x54>

                case FREERTOS_SOCK_STREAM:
                    xProtocolCpy = FREERTOS_IPPROTO_TCP;
 800e24c:	2306      	movs	r3, #6
 800e24e:	623b      	str	r3, [r7, #32]
                    break;
 800e250:	e000      	b.n	800e254 <FreeRTOS_socket+0x54>
                default:

                    /* incorrect xType. this will be caught by
                     * prvDetermineSocketSize.
                     */
                    break;
 800e252:	bf00      	nop
            }
        }

        if( prvDetermineSocketSize( xDomain, xType, xProtocolCpy, &uxSocketSize ) == pdFAIL )
 800e254:	f107 0314 	add.w	r3, r7, #20
 800e258:	6a3a      	ldr	r2, [r7, #32]
 800e25a:	68b9      	ldr	r1, [r7, #8]
 800e25c:	68f8      	ldr	r0, [r7, #12]
 800e25e:	f7ff feff 	bl	800e060 <prvDetermineSocketSize>
 800e262:	4603      	mov	r3, r0
 800e264:	2b00      	cmp	r3, #0
 800e266:	d103      	bne.n	800e270 <FreeRTOS_socket+0x70>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e268:	f04f 33ff 	mov.w	r3, #4294967295
 800e26c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800e26e:	e063      	b.n	800e338 <FreeRTOS_socket+0x138>
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxSocket = ( ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize ) );
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	4618      	mov	r0, r3
 800e274:	f7f8 f986 	bl	8006584 <pvPortMalloc>
 800e278:	61f8      	str	r0, [r7, #28]

        if( pxSocket == NULL )
 800e27a:	69fb      	ldr	r3, [r7, #28]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d103      	bne.n	800e288 <FreeRTOS_socket+0x88>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e280:	f04f 33ff 	mov.w	r3, #4294967295
 800e284:	627b      	str	r3, [r7, #36]	@ 0x24
            iptraceFAILED_TO_CREATE_SOCKET();
            break;
 800e286:	e057      	b.n	800e338 <FreeRTOS_socket+0x138>
        }

        xEventGroup = xEventGroupCreate();
 800e288:	f7f4 ff51 	bl	800312e <xEventGroupCreate>
 800e28c:	61b8      	str	r0, [r7, #24]

        if( xEventGroup == NULL )
 800e28e:	69bb      	ldr	r3, [r7, #24]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d106      	bne.n	800e2a2 <FreeRTOS_socket+0xa2>
        {
            vPortFreeSocket( pxSocket );
 800e294:	69f8      	ldr	r0, [r7, #28]
 800e296:	f7f8 fa49 	bl	800672c <vPortFree>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e29a:	f04f 33ff 	mov.w	r3, #4294967295
 800e29e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2a0:	e04a      	b.n	800e338 <FreeRTOS_socket+0x138>
            iptraceFAILED_TO_CREATE_EVENT_GROUP();
        }
        else
        {
            /* Clear the entire space to avoid nulling individual entries. */
            ( void ) memset( pxSocket, 0, uxSocketSize );
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	2100      	movs	r1, #0
 800e2a8:	69f8      	ldr	r0, [r7, #28]
 800e2aa:	f014 fa76 	bl	802279a <memset>

            pxSocket->xEventGroup = xEventGroup;
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	69ba      	ldr	r2, [r7, #24]
 800e2b2:	605a      	str	r2, [r3, #4]

            switch( xDomain ) /* LCOV_EXCL_BR_LINE Exclude this because domain is checked at the begin of this function. */
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2b02      	cmp	r3, #2
 800e2b8:	d008      	beq.n	800e2cc <FreeRTOS_socket+0xcc>
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2b0a      	cmp	r3, #10
 800e2be:	d10b      	bne.n	800e2d8 <FreeRTOS_socket+0xd8>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800e2c0:	69fa      	ldr	r2, [r7, #28]
 800e2c2:	7a13      	ldrb	r3, [r2, #8]
 800e2c4:	f043 0301 	orr.w	r3, r3, #1
 800e2c8:	7213      	strb	r3, [r2, #8]
                        break;
 800e2ca:	e009      	b.n	800e2e0 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET:
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800e2cc:	69fa      	ldr	r2, [r7, #28]
 800e2ce:	7a13      	ldrb	r3, [r2, #8]
 800e2d0:	f36f 0300 	bfc	r3, #0, #1
 800e2d4:	7213      	strb	r3, [r2, #8]
                        break;
 800e2d6:	e003      	b.n	800e2e0 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default: /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
                    FreeRTOS_debug_printf( ( "FreeRTOS_socket: Undefined xDomain \n" ) );
 800e2d8:	481b      	ldr	r0, [pc, #108]	@ (800e348 <FreeRTOS_socket+0x148>)
 800e2da:	f013 ff35 	bl	8022148 <lUDPLoggingPrintf>

                    /* MISRA 16.4 Compliance */
                    break; /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
 800e2de:	bf00      	nop
            }

            /* Initialise the socket's members.  The semaphore will be created
             * if the socket is bound to an address, for now the pointer to the
             * semaphore is just set to NULL to show it has not been created. */
            if( xProtocolCpy == FREERTOS_IPPROTO_UDP )
 800e2e0:	6a3b      	ldr	r3, [r7, #32]
 800e2e2:	2b11      	cmp	r3, #17
 800e2e4:	d105      	bne.n	800e2f2 <FreeRTOS_socket+0xf2>
            {
                iptraceMEM_STATS_CREATE( tcpSOCKET_UDP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );

                vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	3354      	adds	r3, #84	@ 0x54
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7f5 f8f4 	bl	80034d8 <vListInitialise>
 800e2f0:	e007      	b.n	800e302 <FreeRTOS_socket+0x102>
                }
                #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
            }

            #if ( ipconfigUSE_TCP == 1 )
                else if( xProtocolCpy == FREERTOS_IPPROTO_TCP ) /* LCOV_EXCL_BR_LINE Exclude else case because protocol is checked in prvDetermineSocketSize */
 800e2f2:	6a3b      	ldr	r3, [r7, #32]
 800e2f4:	2b06      	cmp	r3, #6
 800e2f6:	d104      	bne.n	800e302 <FreeRTOS_socket+0x102>
                {
                    prvInitialiseTCPFields( pxSocket, uxSocketSize );
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	69f8      	ldr	r0, [r7, #28]
 800e2fe:	f7ff ff2d 	bl	800e15c <prvInitialiseTCPFields>
                {
                    /* MISRA wants to see an unconditional else clause. */
                }
            #endif /* ipconfigUSE_TCP == 1 */

            vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	330c      	adds	r3, #12
 800e306:	4618      	mov	r0, r3
 800e308:	f7f5 f906 	bl	8003518 <vListInitialiseItem>
            listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800e30c:	69fb      	ldr	r3, [r7, #28]
 800e30e:	69fa      	ldr	r2, [r7, #28]
 800e310:	619a      	str	r2, [r3, #24]

            pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800e312:	69fb      	ldr	r3, [r7, #28]
 800e314:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e318:	621a      	str	r2, [r3, #32]
            pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800e31a:	69fb      	ldr	r3, [r7, #28]
 800e31c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e320:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800e322:	69fb      	ldr	r3, [r7, #28]
 800e324:	2202      	movs	r2, #2
 800e326:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            pxSocket->ucProtocol = ( uint8_t ) xProtocolCpy; /* protocol: UDP or TCP */
 800e32a:	6a3b      	ldr	r3, [r7, #32]
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

            xReturn = pxSocket;
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 800e338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3728      	adds	r7, #40	@ 0x28
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	08025b44 	.word	0x08025b44
 800e348:	08025b74 	.word	0x08025b74

0800e34c <prvMakeSureSocketIsBound>:
 * @param[in] pxSocket The socket that must be bound to a port number.
 * @return Returns pdTRUE if the socket was already bound, or if the
 *         socket has been bound successfully.
 */
static BaseType_t prvMakeSureSocketIsBound( FreeRTOS_Socket_t * pxSocket )
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b084      	sub	sp, #16
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
    /* Check if this is a valid UDP socket, does not have to be bound yet. */
    BaseType_t xReturn = prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdFALSE );
 800e354:	2200      	movs	r2, #0
 800e356:	2111      	movs	r1, #17
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f7ff fe49 	bl	800dff0 <prvValidSocket>
 800e35e:	60f8      	str	r0, [r7, #12]

    if( ( xReturn == pdTRUE ) && ( !socketSOCKET_IS_BOUND( pxSocket ) ) )
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2b01      	cmp	r3, #1
 800e364:	d10d      	bne.n	800e382 <prvMakeSureSocketIsBound+0x36>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	69db      	ldr	r3, [r3, #28]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d109      	bne.n	800e382 <prvMakeSureSocketIsBound+0x36>
    {
        /* The socket is valid but it is not yet bound. */
        if( FreeRTOS_bind( pxSocket, NULL, 0U ) != 0 )
 800e36e:	2200      	movs	r2, #0
 800e370:	2100      	movs	r1, #0
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 f934 	bl	800e5e0 <FreeRTOS_bind>
 800e378:	4603      	mov	r3, r0
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d001      	beq.n	800e382 <prvMakeSureSocketIsBound+0x36>
        {
            /* The socket was not yet bound, and binding it has failed. */
            xReturn = pdFALSE;
 800e37e:	2300      	movs	r3, #0
 800e380:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800e382:	68fb      	ldr	r3, [r7, #12]
}
 800e384:	4618      	mov	r0, r3
 800e386:	3710      	adds	r7, #16
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <prvSendUDPPacket>:
                                 size_t uxTotalDataLength,
                                 BaseType_t xFlags,
                                 const struct freertos_sockaddr * pxDestinationAddress,
                                 TickType_t xTicksToWait,
                                 size_t uxPayloadOffset )
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b088      	sub	sp, #32
 800e390:	af00      	add	r7, sp, #0
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	60b9      	str	r1, [r7, #8]
 800e396:	607a      	str	r2, [r7, #4]
 800e398:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e39a:	2300      	movs	r3, #0
 800e39c:	61fb      	str	r3, [r7, #28]
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800e39e:	2304      	movs	r3, #4
 800e3a0:	753b      	strb	r3, [r7, #20]
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	61bb      	str	r3, [r7, #24]

    switch( pxDestinationAddress->sin_family ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800e3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a8:	785b      	ldrb	r3, [r3, #1]
 800e3aa:	2b02      	cmp	r3, #2
 800e3ac:	d006      	beq.n	800e3bc <prvSendUDPPacket+0x30>
 800e3ae:	2b0a      	cmp	r3, #10
 800e3b0:	d109      	bne.n	800e3c6 <prvSendUDPPacket+0x3a>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                ( void ) xSend_UDP_Update_IPv6( pxNetworkBuffer, pxDestinationAddress );
 800e3b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e3b4:	68b8      	ldr	r0, [r7, #8]
 800e3b6:	f7fd f903 	bl	800b5c0 <xSend_UDP_Update_IPv6>
                break;
 800e3ba:	e005      	b.n	800e3c8 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                ( void ) xSend_UDP_Update_IPv4( pxNetworkBuffer, pxDestinationAddress );
 800e3bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e3be:	68b8      	ldr	r0, [r7, #8]
 800e3c0:	f7fc fd68 	bl	800ae94 <xSend_UDP_Update_IPv4>
                break;
 800e3c4:	e000      	b.n	800e3c8 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:   /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
            /* MISRA 16.4 Compliance */
            break; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800e3c6:	bf00      	nop
    }

    pxNetworkBuffer->xDataLength = uxTotalDataLength + uxPayloadOffset;
 800e3c8:	687a      	ldr	r2, [r7, #4]
 800e3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3cc:	441a      	add	r2, r3
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	629a      	str	r2, [r3, #40]	@ 0x28
    pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800e3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3d4:	885a      	ldrh	r2, [r3, #2]
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	869a      	strh	r2, [r3, #52]	@ 0x34
    pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	68db      	ldr	r3, [r3, #12]
 800e3de:	b29a      	uxth	r2, r3
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* The socket options are passed to the IP layer in the
     * space that will eventually get used by the Ethernet header. */
    pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3e8:	3306      	adds	r3, #6
 800e3ea:	68fa      	ldr	r2, [r7, #12]
 800e3ec:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800e3f0:	701a      	strb	r2, [r3, #0]

    /* Tell the networking task that the packet needs sending. */
    xStackTxEvent.pvData = pxNetworkBuffer;
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	61bb      	str	r3, [r7, #24]

    /* Ask the IP-task to send this packet */
    if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800e3f6:	f107 0314 	add.w	r3, r7, #20
 800e3fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7fb fa37 	bl	8009870 <xSendEventStructToIPTask>
 800e402:	4603      	mov	r3, r0
 800e404:	2b01      	cmp	r3, #1
 800e406:	d10b      	bne.n	800e420 <prvSendUDPPacket+0x94>
    {
        /* The packet was successfully sent to the IP task. */
        lReturn = ( int32_t ) uxTotalDataLength;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e410:	2b00      	cmp	r3, #0
 800e412:	d00d      	beq.n	800e430 <prvSendUDPPacket+0xa4>
            {
                pxSocket->u.xUDP.pxHandleSent( ( FreeRTOS_Socket_t * ) pxSocket, uxTotalDataLength );
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e418:	6879      	ldr	r1, [r7, #4]
 800e41a:	68f8      	ldr	r0, [r7, #12]
 800e41c:	4798      	blx	r3
 800e41e:	e007      	b.n	800e430 <prvSendUDPPacket+0xa4>
    }
    else
    {
        /* If the buffer was allocated in this function, release
         * it. */
        if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	f003 0301 	and.w	r3, r3, #1
 800e426:	2b00      	cmp	r3, #0
 800e428:	d102      	bne.n	800e430 <prvSendUDPPacket+0xa4>
        {
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e42a:	68b8      	ldr	r0, [r7, #8]
 800e42c:	f008 ffe4 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
        }

        iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
    }

    return lReturn;
 800e430:	69fb      	ldr	r3, [r7, #28]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3720      	adds	r7, #32
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <prvSendTo_ActualSend>:
                                     const void * pvBuffer,
                                     size_t uxTotalDataLength,
                                     BaseType_t xFlags,
                                     const struct freertos_sockaddr * pxDestinationAddress,
                                     size_t uxPayloadOffset )
{
 800e43a:	b580      	push	{r7, lr}
 800e43c:	b08e      	sub	sp, #56	@ 0x38
 800e43e:	af04      	add	r7, sp, #16
 800e440:	60f8      	str	r0, [r7, #12]
 800e442:	60b9      	str	r1, [r7, #8]
 800e444:	607a      	str	r2, [r7, #4]
 800e446:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e448:	2300      	movs	r3, #0
 800e44a:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xTicksToWait = pxSocket->xSendBlockTime;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e450:	61bb      	str	r3, [r7, #24]
    TimeOut_t xTimeOut;
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	f003 0310 	and.w	r3, r3, #16
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d104      	bne.n	800e466 <prvSendTo_ActualSend+0x2c>
        ( xIsCallingFromIPTask() != pdFALSE ) )
 800e45c:	f7fc f94a 	bl	800a6f4 <xIsCallingFromIPTask>
 800e460:	4603      	mov	r3, r0
    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800e462:	2b00      	cmp	r3, #0
 800e464:	d001      	beq.n	800e46a <prvSendTo_ActualSend+0x30>
    {
        /* The caller wants a non-blocking operation. When called by the IP-task,
         * the operation should always be non-blocking. */
        xTicksToWait = ( TickType_t ) 0U;
 800e466:	2300      	movs	r3, #0
 800e468:	61bb      	str	r3, [r7, #24]
    }

    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	f003 0301 	and.w	r3, r3, #1
 800e470:	2b00      	cmp	r3, #0
 800e472:	d128      	bne.n	800e4c6 <prvSendTo_ActualSend+0x8c>
    {
        /* Zero copy is not set, so obtain a network buffer into
         * which the payload will be copied. */
        vTaskSetTimeOutState( &xTimeOut );
 800e474:	f107 0310 	add.w	r3, r7, #16
 800e478:	4618      	mov	r0, r3
 800e47a:	f7f6 fdbd 	bl	8004ff8 <vTaskSetTimeOutState>

        /* Block until a buffer becomes available, or until a
         * timeout has been reached */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800e47e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	4413      	add	r3, r2
 800e484:	69ba      	ldr	r2, [r7, #24]
 800e486:	4611      	mov	r1, r2
 800e488:	4618      	mov	r0, r3
 800e48a:	f008 ff4d 	bl	8017328 <pxGetNetworkBufferWithDescriptor>
 800e48e:	6238      	str	r0, [r7, #32]

        if( pxNetworkBuffer != NULL )
 800e490:	6a3b      	ldr	r3, [r7, #32]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d01b      	beq.n	800e4ce <prvSendTo_ActualSend+0x94>
        {
            void * pvCopyDest = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ] );
 800e496:	6a3b      	ldr	r3, [r7, #32]
 800e498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e49a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e49c:	4413      	add	r3, r2
 800e49e:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	68b9      	ldr	r1, [r7, #8]
 800e4a4:	69f8      	ldr	r0, [r7, #28]
 800e4a6:	f014 f86b 	bl	8022580 <memcpy>

            if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800e4aa:	f107 0218 	add.w	r2, r7, #24
 800e4ae:	f107 0310 	add.w	r3, r7, #16
 800e4b2:	4611      	mov	r1, r2
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7f6 fdd7 	bl	8005068 <xTaskCheckForTimeOut>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d106      	bne.n	800e4ce <prvSendTo_ActualSend+0x94>
            {
                /* The entire block time has been used up. */
                xTicksToWait = ( TickType_t ) 0;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	61bb      	str	r3, [r7, #24]
 800e4c4:	e003      	b.n	800e4ce <prvSendTo_ActualSend+0x94>
    else
    {
        /* When zero copy is used, pvBuffer is a pointer to the
         * payload of a buffer that has already been obtained from the
         * stack.  Obtain the network buffer pointer from the buffer. */
        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800e4c6:	68b8      	ldr	r0, [r7, #8]
 800e4c8:	f7fc f8cc 	bl	800a664 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800e4cc:	6238      	str	r0, [r7, #32]
    }

    if( pxNetworkBuffer != NULL )
 800e4ce:	6a3b      	ldr	r3, [r7, #32]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d010      	beq.n	800e4f6 <prvSendTo_ActualSend+0xbc>
    {
        pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e4d8:	6a3b      	ldr	r3, [r7, #32]
 800e4da:	631a      	str	r2, [r3, #48]	@ 0x30
        lReturn = prvSendUDPPacket( pxSocket,
 800e4dc:	69bb      	ldr	r3, [r7, #24]
 800e4de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4e0:	9202      	str	r2, [sp, #8]
 800e4e2:	9301      	str	r3, [sp, #4]
 800e4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4e6:	9300      	str	r3, [sp, #0]
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	6a39      	ldr	r1, [r7, #32]
 800e4ee:	68f8      	ldr	r0, [r7, #12]
 800e4f0:	f7ff ff4c 	bl	800e38c <prvSendUDPPacket>
 800e4f4:	6278      	str	r0, [r7, #36]	@ 0x24
         * number of transmitted bytes, so the calling function knows
         * how  much data was actually sent. */
        iptraceNO_BUFFER_FOR_SENDTO();
    }

    return lReturn;
 800e4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3728      	adds	r7, #40	@ 0x28
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b090      	sub	sp, #64	@ 0x40
 800e504:	af02      	add	r7, sp, #8
 800e506:	60f8      	str	r0, [r7, #12]
 800e508:	60b9      	str	r1, [r7, #8]
 800e50a:	607a      	str	r2, [r7, #4]
 800e50c:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e50e:	2300      	movs	r3, #0
 800e510:	637b      	str	r3, [r7, #52]	@ 0x34
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxMaxPayloadLength = 0;
 800e516:	2300      	movs	r3, #0
 800e518:	633b      	str	r3, [r7, #48]	@ 0x30
    size_t uxPayloadOffset = 0;
 800e51a:	2300      	movs	r3, #0
 800e51c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempDestinationAddress;

        if( ( pxDestinationAddress != NULL ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET ) )
 800e51e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e520:	2b00      	cmp	r3, #0
 800e522:	d013      	beq.n	800e54c <FreeRTOS_sendto+0x4c>
 800e524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e526:	785b      	ldrb	r3, [r3, #1]
 800e528:	2b0a      	cmp	r3, #10
 800e52a:	d00f      	beq.n	800e54c <FreeRTOS_sendto+0x4c>
 800e52c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e52e:	785b      	ldrb	r3, [r3, #1]
 800e530:	2b02      	cmp	r3, #2
 800e532:	d00b      	beq.n	800e54c <FreeRTOS_sendto+0x4c>
        {
            ( void ) memcpy( &xTempDestinationAddress, pxDestinationAddress, sizeof( struct freertos_sockaddr ) );
 800e534:	f107 0310 	add.w	r3, r7, #16
 800e538:	2218      	movs	r2, #24
 800e53a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e53c:	4618      	mov	r0, r3
 800e53e:	f014 f81f 	bl	8022580 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempDestinationAddress.sin_family = FREERTOS_AF_INET;
 800e542:	2302      	movs	r3, #2
 800e544:	747b      	strb	r3, [r7, #17]
            pxDestinationAddress = &xTempDestinationAddress;
 800e546:	f107 0310 	add.w	r3, r7, #16
 800e54a:	643b      	str	r3, [r7, #64]	@ 0x40

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pxDestinationAddress != NULL );
 800e54c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d104      	bne.n	800e55c <FreeRTOS_sendto+0x5c>
 800e552:	f240 6143 	movw	r1, #1603	@ 0x643
 800e556:	4820      	ldr	r0, [pc, #128]	@ (800e5d8 <FreeRTOS_sendto+0xd8>)
 800e558:	f7f3 f9fe 	bl	8001958 <vAssertCalled>
    configASSERT( pvBuffer != NULL );
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d104      	bne.n	800e56c <FreeRTOS_sendto+0x6c>
 800e562:	f240 6144 	movw	r1, #1604	@ 0x644
 800e566:	481c      	ldr	r0, [pc, #112]	@ (800e5d8 <FreeRTOS_sendto+0xd8>)
 800e568:	f7f3 f9f6 	bl	8001958 <vAssertCalled>

    switch( pxDestinationAddress->sin_family )
 800e56c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e56e:	785b      	ldrb	r3, [r3, #1]
 800e570:	2b02      	cmp	r3, #2
 800e572:	d007      	beq.n	800e584 <FreeRTOS_sendto+0x84>
 800e574:	2b0a      	cmp	r3, #10
 800e576:	d10b      	bne.n	800e590 <FreeRTOS_sendto+0x90>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER );
 800e578:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 800e57c:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER;
 800e57e:	233e      	movs	r3, #62	@ 0x3e
 800e580:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800e582:	e00c      	b.n	800e59e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800e584:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800e588:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER;
 800e58a:	232a      	movs	r3, #42	@ 0x2a
 800e58c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800e58e:	e006      	b.n	800e59e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            FreeRTOS_debug_printf( ( "FreeRTOS_sendto: Undefined sin_family \n" ) );
 800e590:	4812      	ldr	r0, [pc, #72]	@ (800e5dc <FreeRTOS_sendto+0xdc>)
 800e592:	f013 fdd9 	bl	8022148 <lUDPLoggingPrintf>
            lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e596:	f06f 0315 	mvn.w	r3, #21
 800e59a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e59c:	bf00      	nop
    }

    if( lReturn == 0 )
 800e59e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d114      	bne.n	800e5ce <FreeRTOS_sendto+0xce>
    {
        if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d810      	bhi.n	800e5ce <FreeRTOS_sendto+0xce>
        {
            /* If the socket is not already bound to an address, bind it now.
             * Passing NULL as the address parameter tells FreeRTOS_bind() to select
             * the address to bind to. */
            if( prvMakeSureSocketIsBound( pxSocket ) == pdTRUE )
 800e5ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e5ae:	f7ff fecd 	bl	800e34c <prvMakeSureSocketIsBound>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d10a      	bne.n	800e5ce <FreeRTOS_sendto+0xce>
            {
                lReturn = prvSendTo_ActualSend( pxSocket, pvBuffer, uxTotalDataLength, xFlags, pxDestinationAddress, uxPayloadOffset );
 800e5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ba:	9301      	str	r3, [sp, #4]
 800e5bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5be:	9300      	str	r3, [sp, #0]
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	68b9      	ldr	r1, [r7, #8]
 800e5c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e5c8:	f7ff ff37 	bl	800e43a <prvSendTo_ActualSend>
 800e5cc:	6378      	str	r0, [r7, #52]	@ 0x34
            /* The data is longer than the available buffer space. */
            iptraceSENDTO_DATA_TOO_LONG();
        }
    }

    return lReturn;
 800e5ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3738      	adds	r7, #56	@ 0x38
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	08025b44 	.word	0x08025b44
 800e5dc:	08025bf8 	.word	0x08025bf8

0800e5e0 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b090      	sub	sp, #64	@ 0x40
 800e5e4:	af02      	add	r7, sp, #8
 800e5e6:	60f8      	str	r0, [r7, #12]
 800e5e8:	60b9      	str	r1, [r7, #8]
 800e5ea:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	633b      	str	r3, [r7, #48]	@ 0x30
    BaseType_t xReturn = 0;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	637b      	str	r3, [r7, #52]	@ 0x34

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempAddress;

        if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d013      	beq.n	800e622 <FreeRTOS_bind+0x42>
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	785b      	ldrb	r3, [r3, #1]
 800e5fe:	2b0a      	cmp	r3, #10
 800e600:	d00f      	beq.n	800e622 <FreeRTOS_bind+0x42>
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	785b      	ldrb	r3, [r3, #1]
 800e606:	2b02      	cmp	r3, #2
 800e608:	d00b      	beq.n	800e622 <FreeRTOS_bind+0x42>
        {
            ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800e60a:	f107 0310 	add.w	r3, r7, #16
 800e60e:	2218      	movs	r2, #24
 800e610:	68b9      	ldr	r1, [r7, #8]
 800e612:	4618      	mov	r0, r3
 800e614:	f013 ffb4 	bl	8022580 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempAddress.sin_family = FREERTOS_AF_INET;
 800e618:	2302      	movs	r3, #2
 800e61a:	747b      	strb	r3, [r7, #17]
            pxAddress = &xTempAddress;
 800e61c:	f107 0310 	add.w	r3, r7, #16
 800e620:	60bb      	str	r3, [r7, #8]
        }
    #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800e622:	f7fc f867 	bl	800a6f4 <xIsCallingFromIPTask>
 800e626:	4603      	mov	r3, r0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d004      	beq.n	800e636 <FreeRTOS_bind+0x56>
 800e62c:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 800e630:	484b      	ldr	r0, [pc, #300]	@ (800e760 <FreeRTOS_bind+0x180>)
 800e632:	f7f3 f991 	bl	8001958 <vAssertCalled>

    if( xSocketValid( pxSocket ) == pdFALSE )
 800e636:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e638:	f002 f804 	bl	8010644 <xSocketValid>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d103      	bne.n	800e64a <FreeRTOS_bind+0x6a>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e642:	f06f 0315 	mvn.w	r3, #21
 800e646:	637b      	str	r3, [r7, #52]	@ 0x34
 800e648:	e084      	b.n	800e754 <FreeRTOS_bind+0x174>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800e64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e64c:	69db      	ldr	r3, [r3, #28]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d009      	beq.n	800e666 <FreeRTOS_bind+0x86>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 800e652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e654:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e656:	4619      	mov	r1, r3
 800e658:	4842      	ldr	r0, [pc, #264]	@ (800e764 <FreeRTOS_bind+0x184>)
 800e65a:	f013 fd75 	bl	8022148 <lUDPLoggingPrintf>
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e65e:	f06f 0315 	mvn.w	r3, #21
 800e662:	637b      	str	r3, [r7, #52]	@ 0x34
 800e664:	e076      	b.n	800e754 <FreeRTOS_bind+0x174>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800e666:	2309      	movs	r3, #9
 800e668:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        xBindEvent.pvData = xSocket;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxAddress != NULL )
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d042      	beq.n	800e6fc <FreeRTOS_bind+0x11c>
        {
            switch( pxAddress->sin_family )
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	785b      	ldrb	r3, [r3, #1]
 800e67a:	2b02      	cmp	r3, #2
 800e67c:	d010      	beq.n	800e6a0 <FreeRTOS_bind+0xc0>
 800e67e:	2b0a      	cmp	r3, #10
 800e680:	d129      	bne.n	800e6d6 <FreeRTOS_bind+0xf6>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800e682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e684:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	3308      	adds	r3, #8
 800e68c:	2210      	movs	r2, #16
 800e68e:	4619      	mov	r1, r3
 800e690:	f013 ff76 	bl	8022580 <memcpy>
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800e694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e696:	7a13      	ldrb	r3, [r2, #8]
 800e698:	f043 0301 	orr.w	r3, r3, #1
 800e69c:	7213      	strb	r3, [r2, #8]
                        break;
 800e69e:	e01e      	b.n	800e6de <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                        pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	689b      	ldr	r3, [r3, #8]
 800e6a4:	061a      	lsls	r2, r3, #24
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	689b      	ldr	r3, [r3, #8]
 800e6aa:	021b      	lsls	r3, r3, #8
 800e6ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e6b0:	431a      	orrs	r2, r3
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	689b      	ldr	r3, [r3, #8]
 800e6b6:	0a1b      	lsrs	r3, r3, #8
 800e6b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e6bc:	431a      	orrs	r2, r3
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	689b      	ldr	r3, [r3, #8]
 800e6c2:	0e1b      	lsrs	r3, r3, #24
 800e6c4:	431a      	orrs	r2, r3
 800e6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6c8:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800e6ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6cc:	7a13      	ldrb	r3, [r2, #8]
 800e6ce:	f36f 0300 	bfc	r3, #0, #1
 800e6d2:	7213      	strb	r3, [r2, #8]
                        break;
 800e6d4:	e003      	b.n	800e6de <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    FreeRTOS_debug_printf( ( "FreeRTOS_bind: Undefined sin_family \n" ) );
 800e6d6:	4824      	ldr	r0, [pc, #144]	@ (800e768 <FreeRTOS_bind+0x188>)
 800e6d8:	f013 fd36 	bl	8022148 <lUDPLoggingPrintf>
                    break;
 800e6dc:	bf00      	nop
            }

            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	885b      	ldrh	r3, [r3, #2]
 800e6e2:	021b      	lsls	r3, r3, #8
 800e6e4:	b21a      	sxth	r2, r3
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	885b      	ldrh	r3, [r3, #2]
 800e6ea:	0a1b      	lsrs	r3, r3, #8
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	b21b      	sxth	r3, r3
 800e6f0:	4313      	orrs	r3, r2
 800e6f2:	b21b      	sxth	r3, r3
 800e6f4:	b29a      	uxth	r2, r3
 800e6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f8:	871a      	strh	r2, [r3, #56]	@ 0x38
 800e6fa:	e009      	b.n	800e710 <FreeRTOS_bind+0x130>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800e6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6fe:	2200      	movs	r2, #0
 800e700:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800e702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e704:	3328      	adds	r3, #40	@ 0x28
 800e706:	2210      	movs	r2, #16
 800e708:	2100      	movs	r1, #0
 800e70a:	4618      	mov	r0, r3
 800e70c:	f014 f845 	bl	802279a <memset>
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800e710:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e714:	f04f 31ff 	mov.w	r1, #4294967295
 800e718:	4618      	mov	r0, r3
 800e71a:	f7fb f8a9 	bl	8009870 <xSendEventStructToIPTask>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d106      	bne.n	800e732 <FreeRTOS_bind+0x152>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 800e724:	4811      	ldr	r0, [pc, #68]	@ (800e76c <FreeRTOS_bind+0x18c>)
 800e726:	f013 fd0f 	bl	8022148 <lUDPLoggingPrintf>
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800e72a:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800e72e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e730:	e010      	b.n	800e754 <FreeRTOS_bind+0x174>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800e732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e734:	6858      	ldr	r0, [r3, #4]
 800e736:	f04f 33ff 	mov.w	r3, #4294967295
 800e73a:	9300      	str	r3, [sp, #0]
 800e73c:	2300      	movs	r3, #0
 800e73e:	2201      	movs	r2, #1
 800e740:	2110      	movs	r1, #16
 800e742:	f7f4 fd0b 	bl	800315c <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800e746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e748:	69db      	ldr	r3, [r3, #28]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d102      	bne.n	800e754 <FreeRTOS_bind+0x174>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e74e:	f06f 0315 	mvn.w	r3, #21
 800e752:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }
    }

    return xReturn;
 800e754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e756:	4618      	mov	r0, r3
 800e758:	3738      	adds	r7, #56	@ 0x38
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	08025b44 	.word	0x08025b44
 800e764:	08025c20 	.word	0x08025c20
 800e768:	08025c4c 	.word	0x08025c4c
 800e76c:	08025c74 	.word	0x08025c74

0800e770 <prvSocketBindAdd>:
 */
static BaseType_t prvSocketBindAdd( FreeRTOS_Socket_t * pxSocket,
                                    const struct freertos_sockaddr * pxAddress,
                                    List_t * pxSocketList,
                                    BaseType_t xInternal )
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b086      	sub	sp, #24
 800e774:	af00      	add	r7, sp, #0
 800e776:	60f8      	str	r0, [r7, #12]
 800e778:	60b9      	str	r1, [r7, #8]
 800e77a:	607a      	str	r2, [r7, #4]
 800e77c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0;
 800e77e:	2300      	movs	r3, #0
 800e780:	617b      	str	r3, [r7, #20]

    /* Check to ensure the port is not already in use.  If the bind is
     * called internally, a port MAY be used by more than one socket. */
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d004      	beq.n	800e792 <prvSocketBindAdd+0x22>
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e78e:	2b06      	cmp	r3, #6
 800e790:	d024      	beq.n	800e7dc <prvSocketBindAdd+0x6c>
        ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	885b      	ldrh	r3, [r3, #2]
 800e796:	4619      	mov	r1, r3
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 fdf1 	bl	800f380 <pxListFindListItemWithValue>
 800e79e:	4603      	mov	r3, r0
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d01b      	beq.n	800e7dc <prvSocketBindAdd+0x6c>
    {
        FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e7aa:	2b06      	cmp	r3, #6
 800e7ac:	d101      	bne.n	800e7b2 <prvSocketBindAdd+0x42>
 800e7ae:	493e      	ldr	r1, [pc, #248]	@ (800e8a8 <prvSocketBindAdd+0x138>)
 800e7b0:	e000      	b.n	800e7b4 <prvSocketBindAdd+0x44>
 800e7b2:	493e      	ldr	r1, [pc, #248]	@ (800e8ac <prvSocketBindAdd+0x13c>)
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	885b      	ldrh	r3, [r3, #2]
 800e7b8:	021b      	lsls	r3, r3, #8
 800e7ba:	b21a      	sxth	r2, r3
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	885b      	ldrh	r3, [r3, #2]
 800e7c0:	0a1b      	lsrs	r3, r3, #8
 800e7c2:	b29b      	uxth	r3, r3
 800e7c4:	b21b      	sxth	r3, r3
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	b21b      	sxth	r3, r3
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	461a      	mov	r2, r3
 800e7ce:	4838      	ldr	r0, [pc, #224]	@ (800e8b0 <prvSocketBindAdd+0x140>)
 800e7d0:	f013 fcba 	bl	8022148 <lUDPLoggingPrintf>
                                 ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                 FreeRTOS_ntohs( pxAddress->sin_port ) ) );
        xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800e7d4:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800e7d8:	617b      	str	r3, [r7, #20]
 800e7da:	e060      	b.n	800e89e <prvSocketBindAdd+0x12e>
    }
    else
    {
        /* Allocate the port number to the socket.
         * This macro will set 'xBoundSocketListItem->xItemValue' */
        socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	885b      	ldrh	r3, [r3, #2]
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	60da      	str	r2, [r3, #12]

        /* And also store it in a socket field 'usLocalPort' in host-byte-order,
         * mostly used for logging and debugging purposes */
        pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	885b      	ldrh	r3, [r3, #2]
 800e7ea:	021b      	lsls	r3, r3, #8
 800e7ec:	b21a      	sxth	r2, r3
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	885b      	ldrh	r3, [r3, #2]
 800e7f2:	0a1b      	lsrs	r3, r3, #8
 800e7f4:	b29b      	uxth	r3, r3
 800e7f6:	b21b      	sxth	r3, r3
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	b21b      	sxth	r3, r3
 800e7fc:	b29a      	uxth	r2, r3
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	871a      	strh	r2, [r3, #56]	@ 0x38

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	785b      	ldrb	r3, [r3, #1]
 800e806:	2b0a      	cmp	r3, #10
 800e808:	d109      	bne.n	800e81e <prvSocketBindAdd+0xae>
            {
                ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	3308      	adds	r3, #8
 800e814:	2210      	movs	r2, #16
 800e816:	4619      	mov	r1, r3
 800e818:	f013 feb2 	bl	8022580 <memcpy>
 800e81c:	e00c      	b.n	800e838 <prvSocketBindAdd+0xc8>
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                if( pxAddress->sin_address.ulIP_IPv4 != FREERTOS_INADDR_ANY )
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	689b      	ldr	r3, [r3, #8]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d008      	beq.n	800e838 <prvSocketBindAdd+0xc8>
                {
                    pxSocket->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( pxAddress->sin_address.ulIP_IPv4, 7 );
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	689b      	ldr	r3, [r3, #8]
 800e82a:	2107      	movs	r1, #7
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7fe ffb7 	bl	800d7a0 <FreeRTOS_FindEndPointOnIP_IPv4>
 800e832:	4602      	mov	r2, r0
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	64da      	str	r2, [r3, #76]	@ 0x4c
                /* Place holder, do nothing, MISRA compliance */
            }
        }

        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxSocket->pxEndPoint != NULL )
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d019      	beq.n	800e874 <prvSocketBindAdd+0x104>
            {
                pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxSocket->pxEndPoint->ipv4_settings.ulIPAddress );
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	061a      	lsls	r2, r3, #24
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	021b      	lsls	r3, r3, #8
 800e850:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e854:	431a      	orrs	r2, r3
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	0a1b      	lsrs	r3, r3, #8
 800e85e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e862:	431a      	orrs	r2, r3
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	0e1b      	lsrs	r3, r3, #24
 800e86c:	431a      	orrs	r2, r3
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	629a      	str	r2, [r3, #40]	@ 0x28
 800e872:	e00a      	b.n	800e88a <prvSocketBindAdd+0x11a>
            }
            else
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	785b      	ldrb	r3, [r3, #1]
 800e878:	2b0a      	cmp	r3, #10
 800e87a:	d006      	beq.n	800e88a <prvSocketBindAdd+0x11a>
                /* Socket address was set, do nothing for IPv6. */
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	3328      	adds	r3, #40	@ 0x28
 800e880:	2210      	movs	r2, #16
 800e882:	2100      	movs	r1, #0
 800e884:	4618      	mov	r0, r3
 800e886:	f013 ff88 	bl	802279a <memset>
            /* If the network driver can iterate through 'xBoundUDPSocketsList',
             * by calling xPortHasUDPSocket() then the IP-task must temporarily
             * suspend the scheduler to keep the list in a consistent state. */
            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                vTaskSuspendAll();
 800e88a:	f7f5 fef9 	bl	8004680 <vTaskSuspendAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

            /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
            vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	330c      	adds	r3, #12
 800e892:	4619      	mov	r1, r3
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f7f4 fe4c 	bl	8003532 <vListInsertEnd>

            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                ( void ) xTaskResumeAll();
 800e89a:	f7f5 feff 	bl	800469c <xTaskResumeAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
        }
    }

    return xReturn;
 800e89e:	697b      	ldr	r3, [r7, #20]
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3718      	adds	r7, #24
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	08025c98 	.word	0x08025c98
 800e8ac:	08025c9c 	.word	0x08025c9c
 800e8b0:	08025ca0 	.word	0x08025ca0

0800e8b4 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b08e      	sub	sp, #56	@ 0x38
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	60b9      	str	r1, [r7, #8]
 800e8be:	607a      	str	r2, [r7, #4]
 800e8c0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	637b      	str	r3, [r7, #52]	@ 0x34
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    configASSERT( xSocketValid( pxSocket ) == pdTRUE );
 800e8ca:	68f8      	ldr	r0, [r7, #12]
 800e8cc:	f001 feba 	bl	8010644 <xSocketValid>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d004      	beq.n	800e8e0 <vSocketBind+0x2c>
 800e8d6:	f240 716f 	movw	r1, #1903	@ 0x76f
 800e8da:	4828      	ldr	r0, [pc, #160]	@ (800e97c <vSocketBind+0xc8>)
 800e8dc:	f7f3 f83c 	bl	8001958 <vAssertCalled>

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e8e6:	2b06      	cmp	r3, #6
 800e8e8:	d102      	bne.n	800e8f0 <vSocketBind+0x3c>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800e8ea:	4b25      	ldr	r3, [pc, #148]	@ (800e980 <vSocketBind+0xcc>)
 800e8ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800e8ee:	e001      	b.n	800e8f4 <vSocketBind+0x40>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800e8f0:	4b24      	ldr	r3, [pc, #144]	@ (800e984 <vSocketBind+0xd0>)
 800e8f2:	633b      	str	r3, [r7, #48]	@ 0x30
        /* pxAddress will be NULL if sendto() was called on a socket without the
         * socket being bound to an address. In this case, automatically allocate
         * an address to the socket.  There is a small chance that the allocated
         * port will already be in use - if that is the case, then the check below
         * [pxListFindListItemWithValue()] will result in an error being returned. */
        if( pxAddress == NULL )
 800e8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d115      	bne.n	800e926 <vSocketBind+0x72>
        {
            pxAddress = &xAddress;
 800e8fa:	f107 0314 	add.w	r3, r7, #20
 800e8fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Clear the address: */
            ( void ) memset( pxAddress, 0, sizeof( struct freertos_sockaddr ) );
 800e900:	2218      	movs	r2, #24
 800e902:	2100      	movs	r1, #0
 800e904:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e906:	f013 ff48 	bl	802279a <memset>

            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	7a1b      	ldrb	r3, [r3, #8]
 800e90e:	f003 0301 	and.w	r3, r3, #1
 800e912:	b2db      	uxtb	r3, r3
 800e914:	2b00      	cmp	r3, #0
 800e916:	d003      	beq.n	800e920 <vSocketBind+0x6c>
            {
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800e918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e91a:	220a      	movs	r2, #10
 800e91c:	705a      	strb	r2, [r3, #1]
 800e91e:	e002      	b.n	800e926 <vSocketBind+0x72>
            }
            else
            {
                pxAddress->sin_family = FREERTOS_AF_INET;
 800e920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e922:	2202      	movs	r2, #2
 800e924:	705a      	strb	r2, [r3, #1]
    }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800e926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d104      	bne.n	800e936 <vSocketBind+0x82>
 800e92c:	f240 719b 	movw	r1, #1947	@ 0x79b
 800e930:	4812      	ldr	r0, [pc, #72]	@ (800e97c <vSocketBind+0xc8>)
 800e932:	f7f3 f811 	bl	8001958 <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800e936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e938:	885b      	ldrh	r3, [r3, #2]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d111      	bne.n	800e962 <vSocketBind+0xae>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e944:	4618      	mov	r0, r3
 800e946:	f000 fcc3 	bl	800f2d0 <prvGetPrivatePortNumber>
 800e94a:	4603      	mov	r3, r0
 800e94c:	461a      	mov	r2, r3
 800e94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e950:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800e952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e954:	885b      	ldrh	r3, [r3, #2]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d103      	bne.n	800e962 <vSocketBind+0xae>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800e95a:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800e95e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800e960:	e006      	b.n	800e970 <vSocketBind+0xbc>

            /* If vSocketBind() is called from the API FreeRTOS_bind() it has been
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            xReturn = prvSocketBindAdd( pxSocket, pxAddress, pxSocketList, xInternal );
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e968:	68f8      	ldr	r0, [r7, #12]
 800e96a:	f7ff ff01 	bl	800e770 <prvSocketBindAdd>
 800e96e:	6378      	str	r0, [r7, #52]	@ 0x34
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800e970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800e972:	4618      	mov	r0, r3
 800e974:	3738      	adds	r7, #56	@ 0x38
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	08025b44 	.word	0x08025b44
 800e980:	20001584 	.word	0x20001584
 800e984:	20001570 	.word	0x20001570

0800e988 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b086      	sub	sp, #24
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    #if ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	613b      	str	r3, [r7, #16]
    #endif /* ipconfigUSE_CALLBACKS == 1 */
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800e994:	230a      	movs	r3, #10
 800e996:	723b      	strb	r3, [r7, #8]
    xCloseEvent.pvData = xSocket;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	60fb      	str	r3, [r7, #12]

    if( xSocketValid( xSocket ) == pdFALSE )
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f001 fe51 	bl	8010644 <xSocketValid>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d102      	bne.n	800e9ae <FreeRTOS_closesocket+0x26>
    {
        xResult = 0;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	617b      	str	r3, [r7, #20]
 800e9ac:	e02f      	b.n	800ea0e <FreeRTOS_closesocket+0x86>
    else
    {
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            #if ( ipconfigUSE_TCP == 1 )
                if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e9b4:	2b06      	cmp	r3, #6
 800e9b6:	d10c      	bne.n	800e9d2 <FreeRTOS_closesocket+0x4a>
                {
                    /* Make sure that IP-task won't call the user callback's anymore */
                    pxSocket->u.xTCP.pxHandleConnected = NULL;
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                    pxSocket->u.xTCP.pxHandleReceive = NULL;
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                    pxSocket->u.xTCP.pxHandleSent = NULL;
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800e9d0:	e00a      	b.n	800e9e8 <FreeRTOS_closesocket+0x60>
                }
                else
            #endif /* ipconfigUSE_TCP == 1 */

            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e9d8:	2b11      	cmp	r3, #17
 800e9da:	d105      	bne.n	800e9e8 <FreeRTOS_closesocket+0x60>
            {
                /* Clear the two UDP handlers. */
                pxSocket->u.xUDP.pxHandleReceive = NULL;
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	669a      	str	r2, [r3, #104]	@ 0x68
                pxSocket->u.xUDP.pxHandleSent = NULL;
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* The timeout value below is only used if this function is called from
         * a user task. If this function is called by the IP-task, it may fail
         * to close the socket when the event queue is full.
         * This should only happen in case of a user call-back. */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800e9e8:	f107 0308 	add.w	r3, r7, #8
 800e9ec:	f04f 31ff 	mov.w	r1, #4294967295
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7fa ff3d 	bl	8009870 <xSendEventStructToIPTask>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d106      	bne.n	800ea0a <FreeRTOS_closesocket+0x82>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 800e9fc:	4806      	ldr	r0, [pc, #24]	@ (800ea18 <FreeRTOS_closesocket+0x90>)
 800e9fe:	f013 fba3 	bl	8022148 <lUDPLoggingPrintf>
            xResult = -1;
 800ea02:	f04f 33ff 	mov.w	r3, #4294967295
 800ea06:	617b      	str	r3, [r7, #20]
 800ea08:	e001      	b.n	800ea0e <FreeRTOS_closesocket+0x86>
        }
        else
        {
            xResult = 1;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800ea0e:	697b      	ldr	r3, [r7, #20]
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3718      	adds	r7, #24
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	08025cc4 	.word	0x08025cc4

0800ea1c <vSocketClose>:
 */
/* MISRA Ref 17.2.1 [Sockets and limited recursion] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
/* coverity[misra_c_2012_rule_17_2_violation] */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800ea1c:	b590      	push	{r4, r7, lr}
 800ea1e:	b085      	sub	sp, #20
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* For TCP: clean up a little more. */
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ea2a:	2b06      	cmp	r3, #6
 800ea2c:	d129      	bne.n	800ea82 <vSocketClose+0x66>
        {
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d005      	beq.n	800ea44 <vSocketClose+0x28>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f008 fcda 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Free the resources which were claimed by the tcpWin member */
                vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f006 fee6 	bl	801581c <vTCPWindowDestroy>
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* Free the input and output streams */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d005      	beq.n	800ea66 <vSocketClose+0x4a>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7f7 fe63 	bl	800672c <vPortFree>
            }

            if( pxSocket->u.xTCP.txStream != NULL )
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d005      	beq.n	800ea7c <vSocketClose+0x60>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7f7 fe58 	bl	800672c <vPortFree>
            }

            /* In case this is a child socket, make sure the child-count of the
             * parent socket is decreased. */
            prvTCPSetSocketCount( pxSocket );
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f000 f8bd 	bl	800ebfc <prvTCPSetSocketCount>
    }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	69db      	ldr	r3, [r3, #28]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d008      	beq.n	800ea9c <vSocketClose+0x80>
        /* If the network driver can iterate through 'xBoundUDPSocketsList',
         * by calling xPortHasUDPSocket(), then the IP-task must temporarily
         * suspend the scheduler to keep the list in a consistent state. */
        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            vTaskSuspendAll();
 800ea8a:	f7f5 fdf9 	bl	8004680 <vTaskSuspendAll>
        }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	330c      	adds	r3, #12
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7f4 fdaa 	bl	80035ec <uxListRemove>

        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            ( void ) xTaskResumeAll();
 800ea98:	f7f5 fe00 	bl	800469c <xTaskResumeAll>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eaa2:	2b11      	cmp	r3, #17
 800eaa4:	d10f      	bne.n	800eac6 <vSocketClose+0xaa>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800eaa6:	e00a      	b.n	800eabe <vSocketClose+0xa2>
        {
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eaac:	68db      	ldr	r3, [r3, #12]
 800eaae:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7f4 fd9a 	bl	80035ec <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800eab8:	68f8      	ldr	r0, [r7, #12]
 800eaba:	f008 fc9d 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d1f0      	bne.n	800eaa8 <vSocketClose+0x8c>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d004      	beq.n	800ead8 <vSocketClose+0xbc>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7f4 fca8 	bl	8003428 <vEventGroupDelete>
    }

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eade:	2b06      	cmp	r3, #6
 800eae0:	d10c      	bne.n	800eafc <vSocketClose+0xe0>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%s]: buffers %lu socks %lu\n",
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f000 f816 	bl	800eb14 <prvSocketProps>
 800eae8:	4604      	mov	r4, r0
 800eaea:	f008 fcd7 	bl	801749c <uxGetNumberOfFreeNetworkBuffers>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	4b06      	ldr	r3, [pc, #24]	@ (800eb0c <vSocketClose+0xf0>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	4621      	mov	r1, r4
 800eaf6:	4806      	ldr	r0, [pc, #24]	@ (800eb10 <vSocketClose+0xf4>)
 800eaf8:	f013 fb26 	bl	8022148 <lUDPLoggingPrintf>
    }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f7f7 fe15 	bl	800672c <vPortFree>

    return NULL;
 800eb02:	2300      	movs	r3, #0
} /* Tested */
 800eb04:	4618      	mov	r0, r3
 800eb06:	3714      	adds	r7, #20
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd90      	pop	{r4, r7, pc}
 800eb0c:	20001584 	.word	0x20001584
 800eb10:	08025ce4 	.word	0x08025ce4

0800eb14 <prvSocketProps>:
/*-----------------------------------------------------------*/

#if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
    const char * prvSocketProps( FreeRTOS_Socket_t * pxSocket )
    {
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b086      	sub	sp, #24
 800eb18:	af04      	add	r7, sp, #16
 800eb1a:	6078      	str	r0, [r7, #4]
        /* For debugging purposes only: show some properties of a socket:
         * IP-addresses and port numbers. */
        #if ipconfigUSE_TCP == 1
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eb22:	2b06      	cmp	r3, #6
 800eb24:	d132      	bne.n	800eb8c <prvSocketProps+0x78>
            {
                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	7a1b      	ldrb	r3, [r3, #8]
 800eb2a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800eb2e:	b2db      	uxtb	r3, r3
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d002      	beq.n	800eb3a <prvSocketProps+0x26>
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	d014      	beq.n	800eb62 <prvSocketProps+0x4e>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800eb38:	e050      	b.n	800ebdc <prvSocketProps+0xc8>
                                               ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
                                               pxSocket->usLocalPort,
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800eb42:	4618      	mov	r0, r3
                                               ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800eb48:	687a      	ldr	r2, [r7, #4]
 800eb4a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800eb4e:	9202      	str	r2, [sp, #8]
 800eb50:	9301      	str	r3, [sp, #4]
 800eb52:	9000      	str	r0, [sp, #0]
 800eb54:	460b      	mov	r3, r1
 800eb56:	4a24      	ldr	r2, [pc, #144]	@ (800ebe8 <prvSocketProps+0xd4>)
 800eb58:	215c      	movs	r1, #92	@ 0x5c
 800eb5a:	4824      	ldr	r0, [pc, #144]	@ (800ebec <prvSocketProps+0xd8>)
 800eb5c:	f014 fb20 	bl	80231a0 <snprintf>
                            break;
 800eb60:	e03c      	b.n	800ebdc <prvSocketProps+0xc8>
                                               ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f103 0128 	add.w	r1, r3, #40	@ 0x28
                                               pxSocket->usLocalPort,
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800eb6c:	4618      	mov	r0, r3
                                               ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	3354      	adds	r3, #84	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800eb78:	9202      	str	r2, [sp, #8]
 800eb7a:	9301      	str	r3, [sp, #4]
 800eb7c:	9000      	str	r0, [sp, #0]
 800eb7e:	460b      	mov	r3, r1
 800eb80:	4a1b      	ldr	r2, [pc, #108]	@ (800ebf0 <prvSocketProps+0xdc>)
 800eb82:	215c      	movs	r1, #92	@ 0x5c
 800eb84:	4819      	ldr	r0, [pc, #100]	@ (800ebec <prvSocketProps+0xd8>)
 800eb86:	f014 fb0b 	bl	80231a0 <snprintf>
                            break;
 800eb8a:	e027      	b.n	800ebdc <prvSocketProps+0xc8>
                }
            }
            else
        #endif /* if ipconfigUSE_TCP == 1 */

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eb92:	2b11      	cmp	r3, #17
 800eb94:	d122      	bne.n	800ebdc <prvSocketProps+0xc8>
        {
            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	7a1b      	ldrb	r3, [r3, #8]
 800eb9a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d002      	beq.n	800ebaa <prvSocketProps+0x96>
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	d00c      	beq.n	800ebc2 <prvSocketProps+0xae>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800eba8:	e018      	b.n	800ebdc <prvSocketProps+0xc8>
                                           ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                                           pxSocket->usLocalPort );
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800ebb2:	9300      	str	r3, [sp, #0]
 800ebb4:	4613      	mov	r3, r2
 800ebb6:	4a0f      	ldr	r2, [pc, #60]	@ (800ebf4 <prvSocketProps+0xe0>)
 800ebb8:	215c      	movs	r1, #92	@ 0x5c
 800ebba:	480c      	ldr	r0, [pc, #48]	@ (800ebec <prvSocketProps+0xd8>)
 800ebbc:	f014 faf0 	bl	80231a0 <snprintf>
                        break;
 800ebc0:	e00c      	b.n	800ebdc <prvSocketProps+0xc8>
                                           ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
                                           pxSocket->usLocalPort );
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800ebcc:	9300      	str	r3, [sp, #0]
 800ebce:	4613      	mov	r3, r2
 800ebd0:	4a09      	ldr	r2, [pc, #36]	@ (800ebf8 <prvSocketProps+0xe4>)
 800ebd2:	215c      	movs	r1, #92	@ 0x5c
 800ebd4:	4805      	ldr	r0, [pc, #20]	@ (800ebec <prvSocketProps+0xd8>)
 800ebd6:	f014 fae3 	bl	80231a0 <snprintf>
                        break;
 800ebda:	bf00      	nop
        else
        {
            /* Protocol not handled. */
        }

        return pucSocketProps;
 800ebdc:	4b03      	ldr	r3, [pc, #12]	@ (800ebec <prvSocketProps+0xd8>)
    }
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3708      	adds	r7, #8
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	08025d18 	.word	0x08025d18
 800ebec:	20001514 	.word	0x20001514
 800ebf0:	08025d38 	.word	0x08025d38
 800ebf4:	08025d58 	.word	0x08025d58
 800ebf8:	08025d68 	.word	0x08025d68

0800ebfc <prvTCPSetSocketCount>:
    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b088      	sub	sp, #32
 800ec00:	af02      	add	r7, sp, #8
 800ec02:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800ec04:	4b3c      	ldr	r3, [pc, #240]	@ (800ecf8 <prvTCPSetSocketCount+0xfc>)
 800ec06:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ec0c:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.eTCPState == eTCP_LISTEN )
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d12b      	bne.n	800ec70 <prvTCPSetSocketCount+0x74>
        {
            pxIterator = listGET_NEXT( pxEnd );
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800ec1e:	e022      	b.n	800ec66 <prvTCPSetSocketCount+0x6a>
            {
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	60bb      	str	r3, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	d017      	beq.n	800ec66 <prvTCPSetSocketCount+0x6a>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800ec3a:	89fa      	ldrh	r2, [r7, #14]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d112      	bne.n	800ec66 <prvTCPSetSocketCount+0x6a>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ec46:	f003 0304 	and.w	r3, r3, #4
 800ec4a:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d107      	bne.n	800ec60 <prvTCPSetSocketCount+0x64>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ec56:	f003 0302 	and.w	r3, r3, #2
 800ec5a:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d002      	beq.n	800ec66 <prvTCPSetSocketCount+0x6a>
                {
                    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
                    /* coverity[misra_c_2012_rule_17_2_violation] */
                    /* coverity[recursive_step] */
                    ( void ) vSocketClose( pxOtherSocket );
 800ec60:	68b8      	ldr	r0, [r7, #8]
 800ec62:	f7ff fedb 	bl	800ea1c <vSocketClose>
            while( pxIterator != pxEnd )
 800ec66:	697a      	ldr	r2, [r7, #20]
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d1d8      	bne.n	800ec20 <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 800ec6e:	e03e      	b.n	800ecee <prvTCPSetSocketCount+0xf2>
            for( pxIterator = listGET_NEXT( pxEnd );
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	617b      	str	r3, [r7, #20]
 800ec76:	e036      	b.n	800ece6 <prvTCPSetSocketCount+0xea>
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	68db      	ldr	r3, [r3, #12]
 800ec7c:	60bb      	str	r3, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d12b      	bne.n	800ece0 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800ec8c:	89fa      	ldrh	r2, [r7, #14]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d126      	bne.n	800ece0 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d021      	beq.n	800ece0 <prvTCPSetSocketCount+0xe4>
                    pxOtherSocket->u.xTCP.usChildCount--;
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800eca2:	3b01      	subs	r3, #1
 800eca4:	b29a      	uxth	r2, r3
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                    FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800ecb8:	461a      	mov	r2, r3
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d101      	bne.n	800ecd0 <prvTCPSetSocketCount+0xd4>
 800eccc:	4b0b      	ldr	r3, [pc, #44]	@ (800ecfc <prvTCPSetSocketCount+0x100>)
 800ecce:	e000      	b.n	800ecd2 <prvTCPSetSocketCount+0xd6>
 800ecd0:	4b0b      	ldr	r3, [pc, #44]	@ (800ed00 <prvTCPSetSocketCount+0x104>)
 800ecd2:	9300      	str	r3, [sp, #0]
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	480b      	ldr	r0, [pc, #44]	@ (800ed04 <prvTCPSetSocketCount+0x108>)
 800ecd8:	f013 fa36 	bl	8022148 <lUDPLoggingPrintf>
                    break;
 800ecdc:	bf00      	nop
    }
 800ecde:	e006      	b.n	800ecee <prvTCPSetSocketCount+0xf2>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800ece6:	697a      	ldr	r2, [r7, #20]
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	429a      	cmp	r2, r3
 800ecec:	d1c4      	bne.n	800ec78 <prvTCPSetSocketCount+0x7c>
    }
 800ecee:	bf00      	nop
 800ecf0:	3718      	adds	r7, #24
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	2000158c 	.word	0x2000158c
 800ecfc:	08025d78 	.word	0x08025d78
 800ed00:	08025d7c 	.word	0x08025d7c
 800ed04:	08025d80 	.word	0x08025d80

0800ed08 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b086      	sub	sp, #24
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ed1a:	2b06      	cmp	r3, #6
 800ed1c:	d00d      	beq.n	800ed3a <prvSockopt_so_buffer+0x32>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	2b04      	cmp	r3, #4
 800ed22:	d101      	bne.n	800ed28 <prvSockopt_so_buffer+0x20>
 800ed24:	4b23      	ldr	r3, [pc, #140]	@ (800edb4 <prvSockopt_so_buffer+0xac>)
 800ed26:	e000      	b.n	800ed2a <prvSockopt_so_buffer+0x22>
 800ed28:	4b23      	ldr	r3, [pc, #140]	@ (800edb8 <prvSockopt_so_buffer+0xb0>)
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	4823      	ldr	r0, [pc, #140]	@ (800edbc <prvSockopt_so_buffer+0xb4>)
 800ed2e:	f013 fa0b 	bl	8022148 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ed32:	f06f 0315 	mvn.w	r3, #21
 800ed36:	617b      	str	r3, [r7, #20]
 800ed38:	e036      	b.n	800eda8 <prvSockopt_so_buffer+0xa0>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	2b04      	cmp	r3, #4
 800ed3e:	d104      	bne.n	800ed4a <prvSockopt_so_buffer+0x42>
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d107      	bne.n	800ed5a <prvSockopt_so_buffer+0x52>
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	2b05      	cmp	r3, #5
 800ed4e:	d112      	bne.n	800ed76 <prvSockopt_so_buffer+0x6e>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d00d      	beq.n	800ed76 <prvSockopt_so_buffer+0x6e>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	2b04      	cmp	r3, #4
 800ed5e:	d101      	bne.n	800ed64 <prvSockopt_so_buffer+0x5c>
 800ed60:	4b14      	ldr	r3, [pc, #80]	@ (800edb4 <prvSockopt_so_buffer+0xac>)
 800ed62:	e000      	b.n	800ed66 <prvSockopt_so_buffer+0x5e>
 800ed64:	4b14      	ldr	r3, [pc, #80]	@ (800edb8 <prvSockopt_so_buffer+0xb0>)
 800ed66:	4619      	mov	r1, r3
 800ed68:	4815      	ldr	r0, [pc, #84]	@ (800edc0 <prvSockopt_so_buffer+0xb8>)
 800ed6a:	f013 f9ed 	bl	8022148 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ed6e:	f06f 0315 	mvn.w	r3, #21
 800ed72:	617b      	str	r3, [r7, #20]
 800ed74:	e018      	b.n	800eda8 <prvSockopt_so_buffer+0xa0>
        }
        else
        {
            ulNewValue = *( ( const uint32_t * ) pvOptionValue );
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	2b04      	cmp	r3, #4
 800ed80:	d10c      	bne.n	800ed9c <prvSockopt_so_buffer+0x94>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ed88:	4619      	mov	r1, r3
 800ed8a:	6938      	ldr	r0, [r7, #16]
 800ed8c:	f7fb fe92 	bl	800aab4 <FreeRTOS_round_up>
 800ed90:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	693a      	ldr	r2, [r7, #16]
 800ed96:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800ed9a:	e003      	b.n	800eda4 <prvSockopt_so_buffer+0x9c>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	693a      	ldr	r2, [r7, #16]
 800eda0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            }

            xReturn = 0;
 800eda4:	2300      	movs	r3, #0
 800eda6:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800eda8:	697b      	ldr	r3, [r7, #20]
    }
 800edaa:	4618      	mov	r0, r3
 800edac:	3718      	adds	r7, #24
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	08025dac 	.word	0x08025dac
 800edb8:	08025db0 	.word	0x08025db0
 800edbc:	08025db4 	.word	0x08025db4
 800edc0:	08025dd8 	.word	0x08025dd8

0800edc4 <prvSetOptionCallback>:
 *         value is returned.
 */
    BaseType_t prvSetOptionCallback( FreeRTOS_Socket_t * pxSocket,
                                     int32_t lOptionName,
                                     const void * pvOptionValue )
    {
 800edc4:	b480      	push	{r7}
 800edc6:	b087      	sub	sp, #28
 800edc8:	af00      	add	r7, sp, #0
 800edca:	60f8      	str	r0, [r7, #12]
 800edcc:	60b9      	str	r1, [r7, #8]
 800edce:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = 0;
 800edd0:	2300      	movs	r3, #0
 800edd2:	617b      	str	r3, [r7, #20]

        #if ( ipconfigUSE_TCP == 1 )
        {
            UBaseType_t uxProtocol;

            if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	2b09      	cmp	r3, #9
 800edd8:	d002      	beq.n	800ede0 <prvSetOptionCallback+0x1c>
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	2b0a      	cmp	r3, #10
 800edde:	d102      	bne.n	800ede6 <prvSetOptionCallback+0x22>
                ( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
 800ede0:	2311      	movs	r3, #17
 800ede2:	613b      	str	r3, [r7, #16]
 800ede4:	e001      	b.n	800edea <prvSetOptionCallback+0x26>
            }
            else
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
 800ede6:	2306      	movs	r3, #6
 800ede8:	613b      	str	r3, [r7, #16]
            }

            if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	b2db      	uxtb	r3, r3
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d002      	beq.n	800edfe <prvSetOptionCallback+0x3a>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800edf8:	f06f 0315 	mvn.w	r3, #21
 800edfc:	617b      	str	r3, [r7, #20]
            /* No need to check if the socket has the right
             * protocol, because only UDP sockets can be created. */
        }
        #endif /* ipconfigUSE_TCP */

        if( xReturn == 0 )
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d131      	bne.n	800ee68 <prvSetOptionCallback+0xa4>
        {
            switch( lOptionName ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	3b06      	subs	r3, #6
 800ee08:	2b04      	cmp	r3, #4
 800ee0a:	d829      	bhi.n	800ee60 <prvSetOptionCallback+0x9c>
 800ee0c:	a201      	add	r2, pc, #4	@ (adr r2, 800ee14 <prvSetOptionCallback+0x50>)
 800ee0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee12:	bf00      	nop
 800ee14:	0800ee29 	.word	0x0800ee29
 800ee18:	0800ee35 	.word	0x0800ee35
 800ee1c:	0800ee41 	.word	0x0800ee41
 800ee20:	0800ee4d 	.word	0x0800ee4d
 800ee24:	0800ee57 	.word	0x0800ee57
            {
                #if ipconfigUSE_TCP == 1
                    case FREERTOS_SO_TCP_CONN_HANDLER:
                        pxSocket->u.xTCP.pxHandleConnected = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPConnected;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681a      	ldr	r2, [r3, #0]
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                        break;
 800ee32:	e019      	b.n	800ee68 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_RECV_HANDLER:
                        pxSocket->u.xTCP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPReceive;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	685a      	ldr	r2, [r3, #4]
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                        break;
 800ee3e:	e013      	b.n	800ee68 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_SENT_HANDLER:
                        pxSocket->u.xTCP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPSent;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	689a      	ldr	r2, [r3, #8]
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                        break;
 800ee4a:	e00d      	b.n	800ee68 <prvSetOptionCallback+0xa4>
                #endif /* ipconfigUSE_TCP */
                case FREERTOS_SO_UDP_RECV_HANDLER:
                    pxSocket->u.xUDP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPReceive;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	68da      	ldr	r2, [r3, #12]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	669a      	str	r2, [r3, #104]	@ 0x68
                    break;
 800ee54:	e008      	b.n	800ee68 <prvSetOptionCallback+0xa4>

                case FREERTOS_SO_UDP_SENT_HANDLER:
                    pxSocket->u.xUDP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPSent;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	691a      	ldr	r2, [r3, #16]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	66da      	str	r2, [r3, #108]	@ 0x6c
                    break;
 800ee5e:	e003      	b.n	800ee68 <prvSetOptionCallback+0xa4>

                default:                                /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
                    xReturn = -pdFREERTOS_ERRNO_EINVAL; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800ee60:	f06f 0315 	mvn.w	r3, #21
 800ee64:	617b      	str	r3, [r7, #20]
                    break;                              /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800ee66:	bf00      	nop
            }
        }

        return xReturn;
 800ee68:	697b      	ldr	r3, [r7, #20]
    }
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	371c      	adds	r7, #28
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee74:	4770      	bx	lr
 800ee76:	bf00      	nop

0800ee78 <prvSetOptionTCPWindows>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionTCPWindows( FreeRTOS_Socket_t * pxSocket,
                                              const void * pvOptionValue )
    {
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b086      	sub	sp, #24
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ee82:	f06f 0315 	mvn.w	r3, #21
 800ee86:	617b      	str	r3, [r7, #20]
        const WinProperties_t * pxProps;

        do
        {
            IPTCPSocket_t * pxTCP = &( pxSocket->u.xTCP );
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	3354      	adds	r3, #84	@ 0x54
 800ee8c:	613b      	str	r3, [r7, #16]

            if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ee94:	2b06      	cmp	r3, #6
 800ee96:	d003      	beq.n	800eea0 <prvSetOptionTCPWindows+0x28>
            {
                FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
 800ee98:	4825      	ldr	r0, [pc, #148]	@ (800ef30 <prvSetOptionTCPWindows+0xb8>)
 800ee9a:	f013 f955 	bl	8022148 <lUDPLoggingPrintf>
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800ee9e:	e042      	b.n	800ef26 <prvSetOptionTCPWindows+0xae>
            }

            pxProps = ( const WinProperties_t * ) pvOptionValue;
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	60fb      	str	r3, [r7, #12]

            /* Validity of txStream will be checked by the function below. */
            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	461a      	mov	r2, r3
 800eea8:	2104      	movs	r1, #4
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f7ff ff2c 	bl	800ed08 <prvSockopt_so_buffer>
 800eeb0:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d133      	bne.n	800ef20 <prvSetOptionTCPWindows+0xa8>
            {
                break; /* will return an error. */
            }

            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	3308      	adds	r3, #8
 800eebc:	461a      	mov	r2, r3
 800eebe:	2105      	movs	r1, #5
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f7ff ff21 	bl	800ed08 <prvSockopt_so_buffer>
 800eec6:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d12a      	bne.n	800ef24 <prvSetOptionTCPWindows+0xac>
                break; /* will return an error. */
            }

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                pxTCP->uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	68db      	ldr	r3, [r3, #12]
 800eed2:	461a      	mov	r2, r3
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                pxTCP->uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	461a      	mov	r2, r3
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            }
            #endif

            /* In case the socket has already initialised its tcpWin,
             * adapt the window size parameters */
            if( pxTCP->xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800eeec:	f003 0301 	and.w	r3, r3, #1
 800eef0:	b2db      	uxtb	r3, r3
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d017      	beq.n	800ef26 <prvSetOptionTCPWindows+0xae>
            {
                pxTCP->xTCPWindow.xSize.ulRxWindowLength = ( uint32_t ) ( pxTCP->uxRxWinSize * pxTCP->usMSS );
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800eefc:	693a      	ldr	r2, [r7, #16]
 800eefe:	8bd2      	ldrh	r2, [r2, #30]
 800ef00:	fb03 f202 	mul.w	r2, r3, r2
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                pxTCP->xTCPWindow.xSize.ulTxWindowLength = ( uint32_t ) ( pxTCP->uxTxWinSize * pxTCP->usMSS );
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ef10:	693a      	ldr	r2, [r7, #16]
 800ef12:	8bd2      	ldrh	r2, [r2, #30]
 800ef14:	fb03 f202 	mul.w	r2, r3, r2
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800ef1e:	e002      	b.n	800ef26 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800ef20:	bf00      	nop
 800ef22:	e000      	b.n	800ef26 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800ef24:	bf00      	nop
            }
        }
        while( ipFALSE_BOOL );

        return xReturn;
 800ef26:	697b      	ldr	r3, [r7, #20]
    }
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3718      	adds	r7, #24
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	08025e00 	.word	0x08025e00

0800ef34 <prvSetOptionLowHighWater>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionLowHighWater( FreeRTOS_Socket_t * pxSocket,
                                                const void * pvOptionValue )
    {
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ef3e:	f06f 0315 	mvn.w	r3, #21
 800ef42:	60fb      	str	r3, [r7, #12]
        const LowHighWater_t * pxLowHighWater = ( const LowHighWater_t * ) pvOptionValue;
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	60bb      	str	r3, [r7, #8]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ef4e:	2b06      	cmp	r3, #6
 800ef50:	d003      	beq.n	800ef5a <prvSetOptionLowHighWater+0x26>
        {
            /* It is not allowed to access 'pxSocket->u.xTCP'. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
 800ef52:	4813      	ldr	r0, [pc, #76]	@ (800efa0 <prvSetOptionLowHighWater+0x6c>)
 800ef54:	f013 f8f8 	bl	8022148 <lUDPLoggingPrintf>
 800ef58:	e01c      	b.n	800ef94 <prvSetOptionLowHighWater+0x60>
        }
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	681a      	ldr	r2, [r3, #0]
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	685b      	ldr	r3, [r3, #4]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d206      	bcs.n	800ef74 <prvSetOptionLowHighWater+0x40>
                 ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	685a      	ldr	r2, [r3, #4]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d903      	bls.n	800ef7c <prvSetOptionLowHighWater+0x48>
        {
            /* Impossible values. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
 800ef74:	480b      	ldr	r0, [pc, #44]	@ (800efa4 <prvSetOptionLowHighWater+0x70>)
 800ef76:	f013 f8e7 	bl	8022148 <lUDPLoggingPrintf>
 800ef7a:	e00b      	b.n	800ef94 <prvSetOptionLowHighWater+0x60>
        }
        else
        {
            /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
            pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	681a      	ldr	r2, [r3, #0]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
            pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	685a      	ldr	r2, [r3, #4]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            xReturn = 0;
 800ef90:	2300      	movs	r3, #0
 800ef92:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800ef94:	68fb      	ldr	r3, [r7, #12]
    }
 800ef96:	4618      	mov	r0, r3
 800ef98:	3710      	adds	r7, #16
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}
 800ef9e:	bf00      	nop
 800efa0:	08025e24 	.word	0x08025e24
 800efa4:	08025e58 	.word	0x08025e58

0800efa8 <prvSetOptionSetFullSize>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionSetFullSize( FreeRTOS_Socket_t * pxSocket,
                                               const void * pvOptionValue )
    {
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800efb2:	f06f 0315 	mvn.w	r3, #21
 800efb6:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800efbe:	2b06      	cmp	r3, #6
 800efc0:	d126      	bne.n	800f010 <prvSetOptionSetFullSize+0x68>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d007      	beq.n	800efda <prvSetOptionSetFullSize+0x32>
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800efca:	687a      	ldr	r2, [r7, #4]
 800efcc:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800efd0:	f043 0302 	orr.w	r3, r3, #2
 800efd4:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
 800efd8:	e006      	b.n	800efe8 <prvSetOptionSetFullSize+0x40>
            }
            else
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800efda:	687a      	ldr	r2, [r7, #4]
 800efdc:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800efe0:	f36f 0341 	bfc	r3, #1, #1
 800efe4:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
            }

            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800efee:	2b04      	cmp	r3, #4
 800eff0:	d90c      	bls.n	800f00c <prvSetOptionSetFullSize+0x64>
                ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f001 faba 	bl	801056c <FreeRTOS_tx_size>
 800eff8:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800effa:	2b00      	cmp	r3, #0
 800effc:	d006      	beq.n	800f00c <prvSetOptionSetFullSize+0x64>
            {
                /* There might be some data in the TX-stream, less than full-size,
                 * which equals a MSS.  Wake-up the IP-task to check this. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2201      	movs	r2, #1
 800f002:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f006:	2006      	movs	r0, #6
 800f008:	f7fa fc1c 	bl	8009844 <xSendEventToIPTask>
            }

            xReturn = 0;
 800f00c:	2300      	movs	r3, #0
 800f00e:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f010:	68fb      	ldr	r3, [r7, #12]
    }
 800f012:	4618      	mov	r0, r3
 800f014:	3710      	adds	r7, #16
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <prvSetOptionStopRX>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionStopRX( FreeRTOS_Socket_t * pxSocket,
                                          const void * pvOptionValue )
    {
 800f01a:	b580      	push	{r7, lr}
 800f01c:	b084      	sub	sp, #16
 800f01e:	af00      	add	r7, sp, #0
 800f020:	6078      	str	r0, [r7, #4]
 800f022:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f024:	f06f 0315 	mvn.w	r3, #21
 800f028:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f030:	2b06      	cmp	r3, #6
 800f032:	d122      	bne.n	800f07a <prvSetOptionStopRX+0x60>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d007      	beq.n	800f04c <prvSetOptionStopRX+0x32>
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800f042:	f043 0304 	orr.w	r3, r3, #4
 800f046:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 800f04a:	e006      	b.n	800f05a <prvSetOptionStopRX+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800f052:	f36f 0382 	bfc	r3, #2, #1
 800f056:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }

            pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800f05a:	687a      	ldr	r2, [r7, #4]
 800f05c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f060:	f043 0301 	orr.w	r3, r3, #1
 800f064:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2201      	movs	r2, #1
 800f06c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f070:	2006      	movs	r0, #6
 800f072:	f7fa fbe7 	bl	8009844 <xSendEventToIPTask>
            xReturn = 0;
 800f076:	2300      	movs	r3, #0
 800f078:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f07a:	68fb      	ldr	r3, [r7, #12]
    }
 800f07c:	4618      	mov	r0, r3
 800f07e:	3710      	adds	r7, #16
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}

0800f084 <prvSetOptionTimeout>:
 *            otherwise handle the option `FREERTOS_SO_RCVTIMEO`.
 */
static void prvSetOptionTimeout( FreeRTOS_Socket_t * pxSocket,
                                 const void * pvOptionValue,
                                 BaseType_t xForSend )
{
 800f084:	b480      	push	{r7}
 800f086:	b087      	sub	sp, #28
 800f088:	af00      	add	r7, sp, #0
 800f08a:	60f8      	str	r0, [r7, #12]
 800f08c:	60b9      	str	r1, [r7, #8]
 800f08e:	607a      	str	r2, [r7, #4]
    TickType_t xBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	617b      	str	r3, [r7, #20]

    if( xForSend == pdTRUE )
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d110      	bne.n	800f0be <prvSetOptionTimeout+0x3a>
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f0a2:	2b11      	cmp	r3, #17
 800f0a4:	d107      	bne.n	800f0b6 <prvSetOptionTimeout+0x32>
        {
            /* The send time out is capped for the reason stated in the
             * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
             * in FreeRTOSIPConfig.h (assuming an official configuration file
             * is being used. */
            if( xBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d902      	bls.n	800f0b6 <prvSetOptionTimeout+0x32>
            {
                xBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800f0b0:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f0b4:	617b      	str	r3, [r7, #20]
            /* For TCP socket, it isn't necessary to limit the blocking time
             * because  the FreeRTOS_send() function does not wait for a network
             * buffer to become available. */
        }

        pxSocket->xSendBlockTime = xBlockTime;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	697a      	ldr	r2, [r7, #20]
 800f0ba:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    else
    {
        pxSocket->xReceiveBlockTime = xBlockTime;
    }
}
 800f0bc:	e002      	b.n	800f0c4 <prvSetOptionTimeout+0x40>
        pxSocket->xReceiveBlockTime = xBlockTime;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	697a      	ldr	r2, [r7, #20]
 800f0c2:	621a      	str	r2, [r3, #32]
}
 800f0c4:	bf00      	nop
 800f0c6:	371c      	adds	r7, #28
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr

0800f0d0 <prvSetOptionReuseListenSocket>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionReuseListenSocket( FreeRTOS_Socket_t * pxSocket,
                                                     const void * pvOptionValue )
    {
 800f0d0:	b480      	push	{r7}
 800f0d2:	b085      	sub	sp, #20
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f0da:	f06f 0315 	mvn.w	r3, #21
 800f0de:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f0e6:	2b06      	cmp	r3, #6
 800f0e8:	d114      	bne.n	800f114 <prvSetOptionReuseListenSocket+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d007      	beq.n	800f102 <prvSetOptionReuseListenSocket+0x32>
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800f0f2:	687a      	ldr	r2, [r7, #4]
 800f0f4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f0f8:	f043 0308 	orr.w	r3, r3, #8
 800f0fc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800f100:	e006      	b.n	800f110 <prvSetOptionReuseListenSocket+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f108:	f36f 03c3 	bfc	r3, #3, #1
 800f10c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800f110:	2300      	movs	r3, #0
 800f112:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f114:	68fb      	ldr	r3, [r7, #12]
    }
 800f116:	4618      	mov	r0, r3
 800f118:	3714      	adds	r7, #20
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr

0800f122 <prvSetOptionCloseAfterSend>:
 * @param[in] pvOptionValue A pointer to a binary value of size
 *            BaseType_t.
 */
    static BaseType_t prvSetOptionCloseAfterSend( FreeRTOS_Socket_t * pxSocket,
                                                  const void * pvOptionValue )
    {
 800f122:	b480      	push	{r7}
 800f124:	b085      	sub	sp, #20
 800f126:	af00      	add	r7, sp, #0
 800f128:	6078      	str	r0, [r7, #4]
 800f12a:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f12c:	f06f 0315 	mvn.w	r3, #21
 800f130:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f138:	2b06      	cmp	r3, #6
 800f13a:	d114      	bne.n	800f166 <prvSetOptionCloseAfterSend+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d007      	beq.n	800f154 <prvSetOptionCloseAfterSend+0x32>
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800f144:	687a      	ldr	r2, [r7, #4]
 800f146:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f14a:	f043 0310 	orr.w	r3, r3, #16
 800f14e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800f152:	e006      	b.n	800f162 <prvSetOptionCloseAfterSend+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800f154:	687a      	ldr	r2, [r7, #4]
 800f156:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f15a:	f36f 1304 	bfc	r3, #4, #1
 800f15e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800f162:	2300      	movs	r3, #0
 800f164:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f166:	68fb      	ldr	r3, [r7, #12]
    }
 800f168:	4618      	mov	r0, r3
 800f16a:	3714      	adds	r7, #20
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b086      	sub	sp, #24
 800f178:	af00      	add	r7, sp, #0
 800f17a:	60f8      	str	r0, [r7, #12]
 800f17c:	60b9      	str	r1, [r7, #8]
 800f17e:	607a      	str	r2, [r7, #4]
 800f180:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f182:	f06f 0315 	mvn.w	r3, #21
 800f186:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	613b      	str	r3, [r7, #16]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( xSocketValid( pxSocket ) == pdTRUE )
 800f18c:	6938      	ldr	r0, [r7, #16]
 800f18e:	f001 fa59 	bl	8010644 <xSocketValid>
 800f192:	4603      	mov	r3, r0
 800f194:	2b01      	cmp	r3, #1
 800f196:	f040 8093 	bne.w	800f2c0 <FreeRTOS_setsockopt+0x14c>
    {
        switch( lOptionName )
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2b12      	cmp	r3, #18
 800f19e:	f200 808b 	bhi.w	800f2b8 <FreeRTOS_setsockopt+0x144>
 800f1a2:	a201      	add	r2, pc, #4	@ (adr r2, 800f1a8 <FreeRTOS_setsockopt+0x34>)
 800f1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a8:	0800f1f5 	.word	0x0800f1f5
 800f1ac:	0800f205 	.word	0x0800f205
 800f1b0:	0800f215 	.word	0x0800f215
 800f1b4:	0800f255 	.word	0x0800f255
 800f1b8:	0800f26f 	.word	0x0800f26f
 800f1bc:	0800f26f 	.word	0x0800f26f
 800f1c0:	0800f247 	.word	0x0800f247
 800f1c4:	0800f247 	.word	0x0800f247
 800f1c8:	0800f247 	.word	0x0800f247
 800f1cc:	0800f247 	.word	0x0800f247
 800f1d0:	0800f247 	.word	0x0800f247
 800f1d4:	0800f289 	.word	0x0800f289
 800f1d8:	0800f295 	.word	0x0800f295
 800f1dc:	0800f27d 	.word	0x0800f27d
 800f1e0:	0800f2a1 	.word	0x0800f2a1
 800f1e4:	0800f2ad 	.word	0x0800f2ad
 800f1e8:	0800f2b9 	.word	0x0800f2b9
 800f1ec:	0800f2b9 	.word	0x0800f2b9
 800f1f0:	0800f263 	.word	0x0800f263
        {
            case FREERTOS_SO_RCVTIMEO:
                /* Receive time out. */
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdFALSE );
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	6839      	ldr	r1, [r7, #0]
 800f1f8:	6938      	ldr	r0, [r7, #16]
 800f1fa:	f7ff ff43 	bl	800f084 <prvSetOptionTimeout>
                xReturn = 0;
 800f1fe:	2300      	movs	r3, #0
 800f200:	617b      	str	r3, [r7, #20]
                break;
 800f202:	e060      	b.n	800f2c6 <FreeRTOS_setsockopt+0x152>

            case FREERTOS_SO_SNDTIMEO:
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdTRUE );
 800f204:	2201      	movs	r2, #1
 800f206:	6839      	ldr	r1, [r7, #0]
 800f208:	6938      	ldr	r0, [r7, #16]
 800f20a:	f7ff ff3b 	bl	800f084 <prvSetOptionTimeout>
                xReturn = 0;
 800f20e:	2300      	movs	r3, #0
 800f210:	617b      	str	r3, [r7, #20]
                break;
 800f212:	e058      	b.n	800f2c6 <FreeRTOS_setsockopt+0x152>
            case FREERTOS_SO_UDPCKSUM_OUT:

                /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
                 * is anything else than NULL, the checksum generation will be turned on. */

                if( pvOptionValue == NULL )
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d109      	bne.n	800f22e <FreeRTOS_setsockopt+0xba>
                {
                    pxSocket->ucSocketOptions &= ( ( uint8_t ) ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) );
 800f21a:	693b      	ldr	r3, [r7, #16]
 800f21c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f220:	f023 0302 	bic.w	r3, r3, #2
 800f224:	b2da      	uxtb	r2, r3
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800f22c:	e008      	b.n	800f240 <FreeRTOS_setsockopt+0xcc>
                }
                else
                {
                    pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f234:	f043 0302 	orr.w	r3, r3, #2
 800f238:	b2da      	uxtb	r2, r3
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                }

                xReturn = 0;
 800f240:	2300      	movs	r3, #0
 800f242:	617b      	str	r3, [r7, #20]
                break;
 800f244:	e03f      	b.n	800f2c6 <FreeRTOS_setsockopt+0x152>
                        case FREERTOS_SO_TCP_RECV_HANDLER: /* Install a callback for receiving TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        case FREERTOS_SO_TCP_SENT_HANDLER: /* Install a callback for sending TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    #endif /* ipconfigUSE_TCP */
                    case FREERTOS_SO_UDP_RECV_HANDLER:     /* Install a callback for receiving UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    case FREERTOS_SO_UDP_SENT_HANDLER:     /* Install a callback for sending UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        xReturn = prvSetOptionCallback( pxSocket, lOptionName, pvOptionValue );
 800f246:	683a      	ldr	r2, [r7, #0]
 800f248:	6879      	ldr	r1, [r7, #4]
 800f24a:	6938      	ldr	r0, [r7, #16]
 800f24c:	f7ff fdba 	bl	800edc4 <prvSetOptionCallback>
 800f250:	6178      	str	r0, [r7, #20]
                        break;
 800f252:	e038      	b.n	800f2c6 <FreeRTOS_setsockopt+0x152>
                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )

                    /* Each socket has a semaphore on which the using task normally
                     * sleeps. */
                    case FREERTOS_SO_SET_SEMAPHORE:
                        pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	681a      	ldr	r2, [r3, #0]
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	63da      	str	r2, [r3, #60]	@ 0x3c
                        xReturn = 0;
 800f25c:	2300      	movs	r3, #0
 800f25e:	617b      	str	r3, [r7, #20]
                        break;
 800f260:	e031      	b.n	800f2c6 <FreeRTOS_setsockopt+0x152>
                        break;
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                #if ( ipconfigUSE_TCP != 0 )
                    case FREERTOS_SO_SET_LOW_HIGH_WATER:
                        xReturn = prvSetOptionLowHighWater( pxSocket, pvOptionValue );
 800f262:	6839      	ldr	r1, [r7, #0]
 800f264:	6938      	ldr	r0, [r7, #16]
 800f266:	f7ff fe65 	bl	800ef34 <prvSetOptionLowHighWater>
 800f26a:	6178      	str	r0, [r7, #20]
                        break;
 800f26c:	e02b      	b.n	800f2c6 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                    case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                        xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800f26e:	683a      	ldr	r2, [r7, #0]
 800f270:	6879      	ldr	r1, [r7, #4]
 800f272:	6938      	ldr	r0, [r7, #16]
 800f274:	f7ff fd48 	bl	800ed08 <prvSockopt_so_buffer>
 800f278:	6178      	str	r0, [r7, #20]
                        break;
 800f27a:	e024      	b.n	800f2c6 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                        xReturn = prvSetOptionTCPWindows( pxSocket, pvOptionValue );
 800f27c:	6839      	ldr	r1, [r7, #0]
 800f27e:	6938      	ldr	r0, [r7, #16]
 800f280:	f7ff fdfa 	bl	800ee78 <prvSetOptionTCPWindows>
 800f284:	6178      	str	r0, [r7, #20]
                        break;
 800f286:	e01e      	b.n	800f2c6 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                        xReturn = prvSetOptionReuseListenSocket( pxSocket, pvOptionValue );
 800f288:	6839      	ldr	r1, [r7, #0]
 800f28a:	6938      	ldr	r0, [r7, #16]
 800f28c:	f7ff ff20 	bl	800f0d0 <prvSetOptionReuseListenSocket>
 800f290:	6178      	str	r0, [r7, #20]
                        break;
 800f292:	e018      	b.n	800f2c6 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                        xReturn = prvSetOptionCloseAfterSend( pxSocket, pvOptionValue );
 800f294:	6839      	ldr	r1, [r7, #0]
 800f296:	6938      	ldr	r0, [r7, #16]
 800f298:	f7ff ff43 	bl	800f122 <prvSetOptionCloseAfterSend>
 800f29c:	6178      	str	r0, [r7, #20]
                        break;
 800f29e:	e012      	b.n	800f2c6 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                        xReturn = prvSetOptionSetFullSize( pxSocket, pvOptionValue );
 800f2a0:	6839      	ldr	r1, [r7, #0]
 800f2a2:	6938      	ldr	r0, [r7, #16]
 800f2a4:	f7ff fe80 	bl	800efa8 <prvSetOptionSetFullSize>
 800f2a8:	6178      	str	r0, [r7, #20]
                        break;
 800f2aa:	e00c      	b.n	800f2c6 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                        xReturn = prvSetOptionStopRX( pxSocket, pvOptionValue );
 800f2ac:	6839      	ldr	r1, [r7, #0]
 800f2ae:	6938      	ldr	r0, [r7, #16]
 800f2b0:	f7ff feb3 	bl	800f01a <prvSetOptionStopRX>
 800f2b4:	6178      	str	r0, [r7, #20]
                        break;
 800f2b6:	e006      	b.n	800f2c6 <FreeRTOS_setsockopt+0x152>
                #endif /* ipconfigUSE_TCP == 1 */

            default:
                /* No other options are handled. */
                xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800f2b8:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800f2bc:	617b      	str	r3, [r7, #20]
                break;
 800f2be:	e002      	b.n	800f2c6 <FreeRTOS_setsockopt+0x152>
        }
    }
    else
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f2c0:	f06f 0315 	mvn.w	r3, #21
 800f2c4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800f2c6:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3718      	adds	r7, #24
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b086      	sub	sp, #24
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800f2d8:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800f2dc:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800f2de:	89fb      	ldrh	r3, [r7, #14]
 800f2e0:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2b06      	cmp	r3, #6
 800f2ee:	d102      	bne.n	800f2f6 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800f2f0:	4b21      	ldr	r3, [pc, #132]	@ (800f378 <prvGetPrivatePortNumber+0xa8>)
 800f2f2:	613b      	str	r3, [r7, #16]
 800f2f4:	e001      	b.n	800f2fa <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800f2f6:	4b21      	ldr	r3, [pc, #132]	@ (800f37c <prvGetPrivatePortNumber+0xac>)
 800f2f8:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800f2fa:	f107 0308 	add.w	r3, r7, #8
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7f2 fbf4 	bl	8001aec <xApplicationGetRandomNumber>
 800f304:	4603      	mov	r3, r0
 800f306:	2b00      	cmp	r3, #0
 800f308:	d030      	beq.n	800f36c <prvGetPrivatePortNumber+0x9c>
            break;
        }

        /* Map the random to a candidate port. */
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
                                  ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount ) );
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	b29b      	uxth	r3, r3
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800f30e:	89fa      	ldrh	r2, [r7, #14]
 800f310:	fbb3 f1f2 	udiv	r1, r3, r2
 800f314:	fb01 f202 	mul.w	r2, r1, r2
 800f318:	1a9b      	subs	r3, r3, r2
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f320:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800f322:	8abb      	ldrh	r3, [r7, #20]
 800f324:	021b      	lsls	r3, r3, #8
 800f326:	b21a      	sxth	r2, r3
 800f328:	8abb      	ldrh	r3, [r7, #20]
 800f32a:	0a1b      	lsrs	r3, r3, #8
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	b21b      	sxth	r3, r3
 800f330:	4313      	orrs	r3, r2
 800f332:	b21b      	sxth	r3, r3
 800f334:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800f336:	4619      	mov	r1, r3
 800f338:	6938      	ldr	r0, [r7, #16]
 800f33a:	f000 f821 	bl	800f380 <pxListFindListItemWithValue>
 800f33e:	4603      	mov	r3, r0
 800f340:	2b00      	cmp	r3, #0
 800f342:	d10a      	bne.n	800f35a <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800f344:	8abb      	ldrh	r3, [r7, #20]
 800f346:	021b      	lsls	r3, r3, #8
 800f348:	b21a      	sxth	r2, r3
 800f34a:	8abb      	ldrh	r3, [r7, #20]
 800f34c:	0a1b      	lsrs	r3, r3, #8
 800f34e:	b29b      	uxth	r3, r3
 800f350:	b21b      	sxth	r3, r3
 800f352:	4313      	orrs	r3, r2
 800f354:	b21b      	sxth	r3, r3
 800f356:	82bb      	strh	r3, [r7, #20]
            break;
 800f358:	e009      	b.n	800f36e <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800f35a:	2300      	movs	r3, #0
 800f35c:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800f35e:	8afb      	ldrh	r3, [r7, #22]
 800f360:	3b01      	subs	r3, #1
 800f362:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800f364:	8afb      	ldrh	r3, [r7, #22]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d1c7      	bne.n	800f2fa <prvGetPrivatePortNumber+0x2a>
 800f36a:	e000      	b.n	800f36e <prvGetPrivatePortNumber+0x9e>
            break;
 800f36c:	bf00      	nop

    return usResult;
 800f36e:	8abb      	ldrh	r3, [r7, #20]
}
 800f370:	4618      	mov	r0, r3
 800f372:	3718      	adds	r7, #24
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}
 800f378:	20001584 	.word	0x20001584
 800f37c:	20001570 	.word	0x20001570

0800f380 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b086      	sub	sp, #24
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800f38a:	2300      	movs	r3, #0
 800f38c:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800f38e:	f7fa fe0b 	bl	8009fa8 <xIPIsNetworkTaskReady>
 800f392:	4603      	mov	r3, r0
 800f394:	2b00      	cmp	r3, #0
 800f396:	d018      	beq.n	800f3ca <pxListFindListItemWithValue+0x4a>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d015      	beq.n	800f3ca <pxListFindListItemWithValue+0x4a>
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxList->xListEnd ) );
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	3308      	adds	r3, #8
 800f3a2:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	685b      	ldr	r3, [r3, #4]
 800f3a8:	613b      	str	r3, [r7, #16]
 800f3aa:	e00a      	b.n	800f3c2 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	683a      	ldr	r2, [r7, #0]
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d102      	bne.n	800f3bc <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	617b      	str	r3, [r7, #20]
                break;
 800f3ba:	e006      	b.n	800f3ca <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800f3c2:	693a      	ldr	r2, [r7, #16]
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d1f0      	bne.n	800f3ac <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800f3ca:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3718      	adds	r7, #24
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800f3dc:	2300      	movs	r3, #0
 800f3de:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800f3e0:	6879      	ldr	r1, [r7, #4]
 800f3e2:	480b      	ldr	r0, [pc, #44]	@ (800f410 <pxUDPSocketLookup+0x3c>)
 800f3e4:	f7ff ffcc 	bl	800f380 <pxListFindListItemWithValue>
 800f3e8:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d00a      	beq.n	800f406 <pxUDPSocketLookup+0x32>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem ) );
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	68db      	ldr	r3, [r3, #12]
 800f3f4:	60fb      	str	r3, [r7, #12]
        configASSERT( pxSocket != NULL );
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d104      	bne.n	800f406 <pxUDPSocketLookup+0x32>
 800f3fc:	f640 4111 	movw	r1, #3089	@ 0xc11
 800f400:	4804      	ldr	r0, [pc, #16]	@ (800f414 <pxUDPSocketLookup+0x40>)
 800f402:	f7f2 faa9 	bl	8001958 <vAssertCalled>
    }

    return pxSocket;
 800f406:	68fb      	ldr	r3, [r7, #12]
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3710      	adds	r7, #16
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	20001570 	.word	0x20001570
 800f414:	08025b44 	.word	0x08025b44

0800f418 <FreeRTOS_inet_ntoa>:
 * @return The pointer returned will be same as pcBuffer and will have the address
 *         stored in the location.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800f418:	b480      	push	{r7}
 800f41a:	b08b      	sub	sp, #44	@ 0x2c
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800f422:	2300      	movs	r3, #0
 800f424:	623b      	str	r3, [r7, #32]
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800f426:	1d3b      	adds	r3, r7, #4
 800f428:	617b      	str	r3, [r7, #20]
    const char * pcResult = pcBuffer;
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	613b      	str	r3, [r7, #16]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800f42e:	2300      	movs	r3, #0
 800f430:	627b      	str	r3, [r7, #36]	@ 0x24
 800f432:	e062      	b.n	800f4fa <FreeRTOS_inet_ntoa+0xe2>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800f434:	697a      	ldr	r2, [r7, #20]
 800f436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f438:	4413      	add	r3, r2
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	77fb      	strb	r3, [r7, #31]
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800f43e:	2302      	movs	r3, #2
 800f440:	61bb      	str	r3, [r7, #24]

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800f442:	7ffa      	ldrb	r2, [r7, #31]
 800f444:	4b32      	ldr	r3, [pc, #200]	@ (800f510 <FreeRTOS_inet_ntoa+0xf8>)
 800f446:	fba3 1302 	umull	r1, r3, r3, r2
 800f44a:	08d9      	lsrs	r1, r3, #3
 800f44c:	460b      	mov	r3, r1
 800f44e:	009b      	lsls	r3, r3, #2
 800f450:	440b      	add	r3, r1
 800f452:	005b      	lsls	r3, r3, #1
 800f454:	1ad3      	subs	r3, r2, r3
 800f456:	b2d9      	uxtb	r1, r3
 800f458:	f107 020c 	add.w	r2, r7, #12
 800f45c:	69bb      	ldr	r3, [r7, #24]
 800f45e:	4413      	add	r3, r2
 800f460:	460a      	mov	r2, r1
 800f462:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800f464:	7ffb      	ldrb	r3, [r7, #31]
 800f466:	4a2a      	ldr	r2, [pc, #168]	@ (800f510 <FreeRTOS_inet_ntoa+0xf8>)
 800f468:	fba2 2303 	umull	r2, r3, r2, r3
 800f46c:	08db      	lsrs	r3, r3, #3
 800f46e:	77fb      	strb	r3, [r7, #31]

            if( uxSource == 1U )
 800f470:	69bb      	ldr	r3, [r7, #24]
 800f472:	2b01      	cmp	r3, #1
 800f474:	d003      	beq.n	800f47e <FreeRTOS_inet_ntoa+0x66>
            {
                break;
            }

            uxSource--;
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	3b01      	subs	r3, #1
 800f47a:	61bb      	str	r3, [r7, #24]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800f47c:	e7e1      	b.n	800f442 <FreeRTOS_inet_ntoa+0x2a>
                break;
 800f47e:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800f480:	7ffb      	ldrb	r3, [r7, #31]
 800f482:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800f484:	2300      	movs	r3, #0
 800f486:	61bb      	str	r3, [r7, #24]
 800f488:	e009      	b.n	800f49e <FreeRTOS_inet_ntoa+0x86>
        {
            if( pucDigits[ uxSource ] != 0U )
 800f48a:	f107 020c 	add.w	r2, r7, #12
 800f48e:	69bb      	ldr	r3, [r7, #24]
 800f490:	4413      	add	r3, r2
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d106      	bne.n	800f4a6 <FreeRTOS_inet_ntoa+0x8e>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	3301      	adds	r3, #1
 800f49c:	61bb      	str	r3, [r7, #24]
 800f49e:	69bb      	ldr	r3, [r7, #24]
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	d9f2      	bls.n	800f48a <FreeRTOS_inet_ntoa+0x72>
 800f4a4:	e012      	b.n	800f4cc <FreeRTOS_inet_ntoa+0xb4>
            {
                break;
 800f4a6:	bf00      	nop
            }
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800f4a8:	e010      	b.n	800f4cc <FreeRTOS_inet_ntoa+0xb4>
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800f4aa:	f107 020c 	add.w	r2, r7, #12
 800f4ae:	69bb      	ldr	r3, [r7, #24]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	781a      	ldrb	r2, [r3, #0]
 800f4b4:	6839      	ldr	r1, [r7, #0]
 800f4b6:	6a3b      	ldr	r3, [r7, #32]
 800f4b8:	440b      	add	r3, r1
 800f4ba:	3230      	adds	r2, #48	@ 0x30
 800f4bc:	b2d2      	uxtb	r2, r2
 800f4be:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800f4c0:	6a3b      	ldr	r3, [r7, #32]
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	623b      	str	r3, [r7, #32]
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	3301      	adds	r3, #1
 800f4ca:	61bb      	str	r3, [r7, #24]
 800f4cc:	69bb      	ldr	r3, [r7, #24]
 800f4ce:	2b02      	cmp	r3, #2
 800f4d0:	d9eb      	bls.n	800f4aa <FreeRTOS_inet_ntoa+0x92>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800f4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4d4:	2b02      	cmp	r3, #2
 800f4d6:	d805      	bhi.n	800f4e4 <FreeRTOS_inet_ntoa+0xcc>
        {
            pcBuffer[ uxIndex ] = '.';
 800f4d8:	683a      	ldr	r2, [r7, #0]
 800f4da:	6a3b      	ldr	r3, [r7, #32]
 800f4dc:	4413      	add	r3, r2
 800f4de:	222e      	movs	r2, #46	@ 0x2e
 800f4e0:	701a      	strb	r2, [r3, #0]
 800f4e2:	e004      	b.n	800f4ee <FreeRTOS_inet_ntoa+0xd6>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800f4e4:	683a      	ldr	r2, [r7, #0]
 800f4e6:	6a3b      	ldr	r3, [r7, #32]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800f4ee:	6a3b      	ldr	r3, [r7, #32]
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	623b      	str	r3, [r7, #32]
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800f4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4f6:	3301      	adds	r3, #1
 800f4f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4fc:	2b03      	cmp	r3, #3
 800f4fe:	d999      	bls.n	800f434 <FreeRTOS_inet_ntoa+0x1c>
    }

    return pcResult;
 800f500:	693b      	ldr	r3, [r7, #16]
}
 800f502:	4618      	mov	r0, r3
 800f504:	372c      	adds	r7, #44	@ 0x2c
 800f506:	46bd      	mov	sp, r7
 800f508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50c:	4770      	bx	lr
 800f50e:	bf00      	nop
 800f510:	cccccccd 	.word	0xcccccccd

0800f514 <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b086      	sub	sp, #24
 800f518:	af00      	add	r7, sp, #0
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	607a      	str	r2, [r7, #4]
 800f520:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2b02      	cmp	r3, #2
 800f526:	d003      	beq.n	800f530 <FreeRTOS_inet_ntop+0x1c>
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	2b0a      	cmp	r3, #10
 800f52c:	d007      	beq.n	800f53e <FreeRTOS_inet_ntop+0x2a>
 800f52e:	e00d      	b.n	800f54c <FreeRTOS_inet_ntop+0x38>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800f530:	683a      	ldr	r2, [r7, #0]
 800f532:	6879      	ldr	r1, [r7, #4]
 800f534:	68b8      	ldr	r0, [r7, #8]
 800f536:	f7fb fc8d 	bl	800ae54 <FreeRTOS_inet_ntop4>
 800f53a:	6178      	str	r0, [r7, #20]
                break;
 800f53c:	e009      	b.n	800f552 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                pcResult = FreeRTOS_inet_ntop6( pvSource, pcDestination, uxSize );
 800f53e:	683a      	ldr	r2, [r7, #0]
 800f540:	6879      	ldr	r1, [r7, #4]
 800f542:	68b8      	ldr	r0, [r7, #8]
 800f544:	f7fc f9c1 	bl	800b8ca <FreeRTOS_inet_ntop6>
 800f548:	6178      	str	r0, [r7, #20]
                break;
 800f54a:	e002      	b.n	800f552 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800f54c:	2300      	movs	r3, #0
 800f54e:	617b      	str	r3, [r7, #20]
            break;
 800f550:	bf00      	nop
    }

    return pcResult;
 800f552:	697b      	ldr	r3, [r7, #20]
}
 800f554:	4618      	mov	r0, r3
 800f556:	3718      	adds	r7, #24
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <FreeRTOS_GetLocalAddress>:
 *
 * @return Size of the freertos_sockaddr structure.
 */
size_t FreeRTOS_GetLocalAddress( ConstSocket_t xSocket,
                                 struct freertos_sockaddr * pxAddress )
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b084      	sub	sp, #16
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6039      	str	r1, [r7, #0]
    const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	60fb      	str	r3, [r7, #12]

    switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	7a1b      	ldrb	r3, [r3, #8]
 800f56e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f572:	b2db      	uxtb	r3, r3
 800f574:	2b00      	cmp	r3, #0
 800f576:	d002      	beq.n	800f57e <FreeRTOS_GetLocalAddress+0x22>
 800f578:	2b01      	cmp	r3, #1
 800f57a:	d02a      	beq.n	800f5d2 <FreeRTOS_GetLocalAddress+0x76>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* MISRA 16.4 Compliance */
            break;
 800f57c:	e044      	b.n	800f608 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET;
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	2202      	movs	r2, #2
 800f582:	705a      	strb	r2, [r3, #1]
                pxAddress->sin_len = ( uint8_t ) sizeof( *pxAddress );
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	2218      	movs	r2, #24
 800f588:	701a      	strb	r2, [r3, #0]
                pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f58e:	061a      	lsls	r2, r3, #24
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f594:	021b      	lsls	r3, r3, #8
 800f596:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f59a:	431a      	orrs	r2, r3
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5a0:	0a1b      	lsrs	r3, r3, #8
 800f5a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f5a6:	431a      	orrs	r2, r3
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5ac:	0e1b      	lsrs	r3, r3, #24
 800f5ae:	431a      	orrs	r2, r3
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	609a      	str	r2, [r3, #8]
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f5b8:	021b      	lsls	r3, r3, #8
 800f5ba:	b21a      	sxth	r2, r3
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f5c0:	0a1b      	lsrs	r3, r3, #8
 800f5c2:	b29b      	uxth	r3, r3
 800f5c4:	b21b      	sxth	r3, r3
 800f5c6:	4313      	orrs	r3, r2
 800f5c8:	b21b      	sxth	r3, r3
 800f5ca:	b29a      	uxth	r2, r3
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	805a      	strh	r2, [r3, #2]
                break;
 800f5d0:	e01a      	b.n	800f608 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	220a      	movs	r2, #10
 800f5d6:	705a      	strb	r2, [r3, #1]
                ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxAddress->sin_address.xIP_IPv6.ucBytes ) );
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	f103 0008 	add.w	r0, r3, #8
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	3328      	adds	r3, #40	@ 0x28
 800f5e2:	2210      	movs	r2, #16
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	f012 ffcb 	bl	8022580 <memcpy>
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f5ee:	021b      	lsls	r3, r3, #8
 800f5f0:	b21a      	sxth	r2, r3
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f5f6:	0a1b      	lsrs	r3, r3, #8
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	b21b      	sxth	r3, r3
 800f5fc:	4313      	orrs	r3, r2
 800f5fe:	b21b      	sxth	r3, r3
 800f600:	b29a      	uxth	r2, r3
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	805a      	strh	r2, [r3, #2]
                break;
 800f606:	bf00      	nop
    }

    return sizeof( *pxAddress );
 800f608:	2318      	movs	r3, #24
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	3710      	adds	r7, #16
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}

0800f612 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800f612:	b580      	push	{r7, lr}
 800f614:	b084      	sub	sp, #16
 800f616:	af00      	add	r7, sp, #0
 800f618:	6078      	str	r0, [r7, #4]
/* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 * event or transition */
    #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
    {
        if( pxSocket->pxUserSemaphore != NULL )
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d006      	beq.n	800f630 <vSocketWakeUpUser+0x1e>
        {
            ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f626:	2300      	movs	r3, #0
 800f628:	2200      	movs	r2, #0
 800f62a:	2100      	movs	r1, #0
 800f62c:	f7f4 f958 	bl	80038e0 <xQueueGenericSend>
    }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
    {
        if( pxSocket->pxSocketSet != NULL )
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f634:	2b00      	cmp	r3, #0
 800f636:	d015      	beq.n	800f664 <vSocketWakeUpUser+0x52>
        {
            EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	0a1b      	lsrs	r3, r3, #8
 800f63e:	f003 030f 	and.w	r3, r3, #15
 800f642:	60fb      	str	r3, [r7, #12]

            if( xSelectBits != 0U )
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d00c      	beq.n	800f664 <vSocketWakeUpUser+0x52>
            {
                pxSocket->xSocketBits |= xSelectBits;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	431a      	orrs	r2, r3
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	649a      	str	r2, [r3, #72]	@ 0x48
                ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	68f9      	ldr	r1, [r7, #12]
 800f65e:	4618      	mov	r0, r3
 800f660:	f7f3 fe62 	bl	8003328 <xEventGroupSetBits>
            }
        }

        pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	601a      	str	r2, [r3, #0]
    }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d00b      	beq.n	800f690 <vSocketWakeUpUser+0x7e>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d007      	beq.n	800f690 <vSocketWakeUpUser+0x7e>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	685a      	ldr	r2, [r3, #4]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	4619      	mov	r1, r3
 800f68a:	4610      	mov	r0, r2
 800f68c:	f7f3 fe4c 	bl	8003328 <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0U;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2200      	movs	r2, #0
 800f694:	601a      	str	r2, [r3, #0]
}
 800f696:	bf00      	nop
 800f698:	3710      	adds	r7, #16
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}

0800f69e <bMayConnect>:
 * @param[in] pxSocket The socket trying to connect.
 *
 * @return It may return: -EINPROGRESS, -EAGAIN, or 0 for OK.
 */
    static BaseType_t bMayConnect( FreeRTOS_Socket_t const * pxSocket )
    {
 800f69e:	b480      	push	{r7}
 800f6a0:	b085      	sub	sp, #20
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
        BaseType_t xResult;

        eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f6ac:	72fb      	strb	r3, [r7, #11]

        switch( eState )
 800f6ae:	7afb      	ldrb	r3, [r7, #11]
 800f6b0:	2b08      	cmp	r3, #8
 800f6b2:	d006      	beq.n	800f6c2 <bMayConnect+0x24>
 800f6b4:	2b08      	cmp	r3, #8
 800f6b6:	dc0b      	bgt.n	800f6d0 <bMayConnect+0x32>
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d002      	beq.n	800f6c2 <bMayConnect+0x24>
 800f6bc:	2b02      	cmp	r3, #2
 800f6be:	d003      	beq.n	800f6c8 <bMayConnect+0x2a>
 800f6c0:	e006      	b.n	800f6d0 <bMayConnect+0x32>
        {
            case eCLOSED:
            case eCLOSE_WAIT:
                xResult = 0;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	60fb      	str	r3, [r7, #12]
                break;
 800f6c6:	e007      	b.n	800f6d8 <bMayConnect+0x3a>

            case eCONNECT_SYN:
                xResult = -pdFREERTOS_ERRNO_EINPROGRESS;
 800f6c8:	f06f 0376 	mvn.w	r3, #118	@ 0x76
 800f6cc:	60fb      	str	r3, [r7, #12]
                break;
 800f6ce:	e003      	b.n	800f6d8 <bMayConnect+0x3a>
            case eFIN_WAIT_2:
            case eCLOSING:
            case eLAST_ACK:
            case eTIME_WAIT:
            default:
                xResult = -pdFREERTOS_ERRNO_EAGAIN;
 800f6d0:	f06f 030a 	mvn.w	r3, #10
 800f6d4:	60fb      	str	r3, [r7, #12]
                break;
 800f6d6:	bf00      	nop
        }

        return xResult;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
    }
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3714      	adds	r7, #20
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr
	...

0800f6e8 <prvTCPConnectStart>:
 *
 * @return 0 on successful checks or a negative error code.
 */
    static BaseType_t prvTCPConnectStart( FreeRTOS_Socket_t * pxSocket,
                                          struct freertos_sockaddr const * pxAddress )
    {
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b084      	sub	sp, #16
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = 0;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	60fb      	str	r3, [r7, #12]

        if( pxAddress == NULL )
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d103      	bne.n	800f704 <prvTCPConnectStart+0x1c>
        {
            /* NULL address passed to the function. Invalid value. */
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800f6fc:	f06f 0315 	mvn.w	r3, #21
 800f700:	60fb      	str	r3, [r7, #12]
 800f702:	e01f      	b.n	800f744 <prvTCPConnectStart+0x5c>
        }
        else if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdFALSE )
 800f704:	2200      	movs	r2, #0
 800f706:	2106      	movs	r1, #6
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f7fe fc71 	bl	800dff0 <prvValidSocket>
 800f70e:	4603      	mov	r3, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	d103      	bne.n	800f71c <prvTCPConnectStart+0x34>
        {
            /* Not a valid socket or wrong type */
            xResult = -pdFREERTOS_ERRNO_EBADF;
 800f714:	f06f 0308 	mvn.w	r3, #8
 800f718:	60fb      	str	r3, [r7, #12]
 800f71a:	e013      	b.n	800f744 <prvTCPConnectStart+0x5c>
        }
        else if( FreeRTOS_issocketconnected( pxSocket ) > 0 )
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f000 ff49 	bl	80105b4 <FreeRTOS_issocketconnected>
 800f722:	4603      	mov	r3, r0
 800f724:	2b00      	cmp	r3, #0
 800f726:	dd03      	ble.n	800f730 <prvTCPConnectStart+0x48>
        {
            /* The socket is already connected. */
            xResult = -pdFREERTOS_ERRNO_EISCONN;
 800f728:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800f72c:	60fb      	str	r3, [r7, #12]
 800f72e:	e009      	b.n	800f744 <prvTCPConnectStart+0x5c>
        }
        else if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	69db      	ldr	r3, [r3, #28]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d105      	bne.n	800f744 <prvTCPConnectStart+0x5c>
        {
            /* Bind the socket to the port that the client task will send from.
             * Non-standard, so the error returned is that returned by bind(). */
            xResult = FreeRTOS_bind( pxSocket, NULL, 0U );
 800f738:	2200      	movs	r2, #0
 800f73a:	2100      	movs	r1, #0
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f7fe ff4f 	bl	800e5e0 <FreeRTOS_bind>
 800f742:	60f8      	str	r0, [r7, #12]
        else
        {
            /* The socket is valid, not yet connected, and already bound to a port number. */
        }

        if( xResult == 0 )
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	2b00      	cmp	r3, #0
 800f748:	f040 80a6 	bne.w	800f898 <prvTCPConnectStart+0x1b0>
        {
            /* Check if it makes any sense to wait for a connect event, this condition
             * might change while sleeping, so it must be checked within each loop */
            xResult = bMayConnect( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f7ff ffa6 	bl	800f69e <bMayConnect>
 800f752:	60f8      	str	r0, [r7, #12]

            /* Start the connect procedure, kernel will start working on it */
            if( xResult == 0 )
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	2b00      	cmp	r3, #0
 800f758:	f040 809e 	bne.w	800f898 <prvTCPConnectStart+0x1b0>
            {
                pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE;
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f762:	f36f 03c3 	bfc	r3, #3, #1
 800f766:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.ucRepCount = 0U;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2200      	movs	r2, #0
 800f76e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                switch( pxAddress->sin_family )
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	785b      	ldrb	r3, [r3, #1]
 800f776:	2b02      	cmp	r3, #2
 800f778:	d027      	beq.n	800f7ca <prvTCPConnectStart+0xe2>
 800f77a:	2b0a      	cmp	r3, #10
 800f77c:	d168      	bne.n	800f850 <prvTCPConnectStart+0x168>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case FREERTOS_AF_INET6:
                            pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800f77e:	687a      	ldr	r2, [r7, #4]
 800f780:	7a13      	ldrb	r3, [r2, #8]
 800f782:	f043 0301 	orr.w	r3, r3, #1
 800f786:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %pip port %u\n",
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f78c:	4618      	mov	r0, r3
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	f103 0108 	add.w	r1, r3, #8
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	885b      	ldrh	r3, [r3, #2]
 800f798:	021b      	lsls	r3, r3, #8
 800f79a:	b21a      	sxth	r2, r3
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	885b      	ldrh	r3, [r3, #2]
 800f7a0:	0a1b      	lsrs	r3, r3, #8
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	b21b      	sxth	r3, r3
 800f7a6:	4313      	orrs	r3, r2
 800f7a8:	b21b      	sxth	r3, r3
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	460a      	mov	r2, r1
 800f7ae:	4601      	mov	r1, r0
 800f7b0:	483c      	ldr	r0, [pc, #240]	@ (800f8a4 <prvTCPConnectStart+0x1bc>)
 800f7b2:	f012 fcc9 	bl	8022148 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( void * ) pxAddress->sin_address.xIP_IPv6.ucBytes,
                                               FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            ( void ) memcpy( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	3308      	adds	r3, #8
 800f7c0:	2210      	movs	r2, #16
 800f7c2:	4619      	mov	r1, r3
 800f7c4:	f012 fedc 	bl	8022580 <memcpy>
                            break;
 800f7c8:	e046      	b.n	800f858 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case FREERTOS_AF_INET4:
                            pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800f7ca:	687a      	ldr	r2, [r7, #4]
 800f7cc:	7a13      	ldrb	r3, [r2, #8]
 800f7ce:	f36f 0300 	bfc	r3, #0, #1
 800f7d2:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %xip:%u\n",
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f7d8:	4618      	mov	r0, r3
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	689b      	ldr	r3, [r3, #8]
 800f7de:	061a      	lsls	r2, r3, #24
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	689b      	ldr	r3, [r3, #8]
 800f7e4:	021b      	lsls	r3, r3, #8
 800f7e6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f7ea:	431a      	orrs	r2, r3
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	689b      	ldr	r3, [r3, #8]
 800f7f0:	0a1b      	lsrs	r3, r3, #8
 800f7f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f7f6:	431a      	orrs	r2, r3
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	689b      	ldr	r3, [r3, #8]
 800f7fc:	0e1b      	lsrs	r3, r3, #24
 800f7fe:	ea42 0103 	orr.w	r1, r2, r3
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	885b      	ldrh	r3, [r3, #2]
 800f806:	021b      	lsls	r3, r3, #8
 800f808:	b21a      	sxth	r2, r3
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	885b      	ldrh	r3, [r3, #2]
 800f80e:	0a1b      	lsrs	r3, r3, #8
 800f810:	b29b      	uxth	r3, r3
 800f812:	b21b      	sxth	r3, r3
 800f814:	4313      	orrs	r3, r2
 800f816:	b21b      	sxth	r3, r3
 800f818:	b29b      	uxth	r3, r3
 800f81a:	460a      	mov	r2, r1
 800f81c:	4601      	mov	r1, r0
 800f81e:	4822      	ldr	r0, [pc, #136]	@ (800f8a8 <prvTCPConnectStart+0x1c0>)
 800f820:	f012 fc92 	bl	8022148 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( unsigned int ) FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 ), FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	061a      	lsls	r2, r3, #24
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	689b      	ldr	r3, [r3, #8]
 800f82e:	021b      	lsls	r3, r3, #8
 800f830:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f834:	431a      	orrs	r2, r3
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	689b      	ldr	r3, [r3, #8]
 800f83a:	0a1b      	lsrs	r3, r3, #8
 800f83c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f840:	431a      	orrs	r2, r3
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	689b      	ldr	r3, [r3, #8]
 800f846:	0e1b      	lsrs	r3, r3, #24
 800f848:	431a      	orrs	r2, r3
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	655a      	str	r2, [r3, #84]	@ 0x54
                            break;
 800f84e:	e003      	b.n	800f858 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        FreeRTOS_debug_printf( ( "FreeRTOS_connect: Undefined sin_family \n" ) );
 800f850:	4816      	ldr	r0, [pc, #88]	@ (800f8ac <prvTCPConnectStart+0x1c4>)
 800f852:	f012 fc79 	bl	8022148 <lUDPLoggingPrintf>
                        break;
 800f856:	bf00      	nop
                }

                /* Port on remote machine. */
                pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	885b      	ldrh	r3, [r3, #2]
 800f85c:	021b      	lsls	r3, r3, #8
 800f85e:	b21a      	sxth	r2, r3
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	885b      	ldrh	r3, [r3, #2]
 800f864:	0a1b      	lsrs	r3, r3, #8
 800f866:	b29b      	uxth	r3, r3
 800f868:	b21b      	sxth	r3, r3
 800f86a:	4313      	orrs	r3, r2
 800f86c:	b21b      	sxth	r3, r3
 800f86e:	b29a      	uxth	r2, r3
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

                /* (client) internal state: socket wants to send a connect. */
                vTCPStateChange( pxSocket, eCONNECT_SYN );
 800f876:	2102      	movs	r1, #2
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f001 fc59 	bl	8011130 <vTCPStateChange>

                /* To start an active connect. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2201      	movs	r2, #1
 800f882:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
 800f886:	2006      	movs	r0, #6
 800f888:	f7f9 ffdc 	bl	8009844 <xSendEventToIPTask>
 800f88c:	4603      	mov	r3, r0
 800f88e:	2b01      	cmp	r3, #1
 800f890:	d002      	beq.n	800f898 <prvTCPConnectStart+0x1b0>
                {
                    xResult = -pdFREERTOS_ERRNO_ECANCELED;
 800f892:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800f896:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xResult;
 800f898:	68fb      	ldr	r3, [r7, #12]
    }
 800f89a:	4618      	mov	r0, r3
 800f89c:	3710      	adds	r7, #16
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}
 800f8a2:	bf00      	nop
 800f8a4:	08025e84 	.word	0x08025e84
 800f8a8:	08025eac 	.word	0x08025eac
 800f8ac:	08025ed0 	.word	0x08025ed0

0800f8b0 <FreeRTOS_connect>:
 *         error code is returned.
 */
    BaseType_t FreeRTOS_connect( Socket_t xClientSocket,
                                 const struct freertos_sockaddr * pxAddress,
                                 socklen_t xAddressLength )
    {
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b094      	sub	sp, #80	@ 0x50
 800f8b4:	af02      	add	r7, sp, #8
 800f8b6:	60f8      	str	r0, [r7, #12]
 800f8b8:	60b9      	str	r1, [r7, #8]
 800f8ba:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xClientSocket;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xResult = -pdFREERTOS_ERRNO_EINVAL;
 800f8c4:	f06f 0315 	mvn.w	r3, #21
 800f8c8:	643b      	str	r3, [r7, #64]	@ 0x40
        TimeOut_t xTimeOut;

        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
            struct freertos_sockaddr xTempAddress;

            if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d013      	beq.n	800f8f8 <FreeRTOS_connect+0x48>
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	785b      	ldrb	r3, [r3, #1]
 800f8d4:	2b0a      	cmp	r3, #10
 800f8d6:	d00f      	beq.n	800f8f8 <FreeRTOS_connect+0x48>
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	785b      	ldrb	r3, [r3, #1]
 800f8dc:	2b02      	cmp	r3, #2
 800f8de:	d00b      	beq.n	800f8f8 <FreeRTOS_connect+0x48>
            {
                ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800f8e0:	f107 0314 	add.w	r3, r7, #20
 800f8e4:	2218      	movs	r2, #24
 800f8e6:	68b9      	ldr	r1, [r7, #8]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f012 fe49 	bl	8022580 <memcpy>

                /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
                 *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
                xTempAddress.sin_family = FREERTOS_AF_INET;
 800f8ee:	2302      	movs	r3, #2
 800f8f0:	757b      	strb	r3, [r7, #21]
                pxAddress = &xTempAddress;
 800f8f2:	f107 0314 	add.w	r3, r7, #20
 800f8f6:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

        ( void ) xAddressLength;

        xResult = prvTCPConnectStart( pxSocket, pxAddress );
 800f8f8:	68b9      	ldr	r1, [r7, #8]
 800f8fa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f8fc:	f7ff fef4 	bl	800f6e8 <prvTCPConnectStart>
 800f900:	6438      	str	r0, [r7, #64]	@ 0x40

        if( xResult == 0 )
 800f902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f904:	2b00      	cmp	r3, #0
 800f906:	d146      	bne.n	800f996 <FreeRTOS_connect+0xe6>
            /* And wait for the result */
            for( ; ; )
            {
                EventBits_t uxEvents;

                if( xTimed == pdFALSE )
 800f908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d110      	bne.n	800f930 <FreeRTOS_connect+0x80>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800f90e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f910:	6a1b      	ldr	r3, [r3, #32]
 800f912:	637b      	str	r3, [r7, #52]	@ 0x34

                    if( xRemainingTime == ( TickType_t ) 0 )
 800f914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f916:	2b00      	cmp	r3, #0
 800f918:	d103      	bne.n	800f922 <FreeRTOS_connect+0x72>
                    {
                        /* Not yet connected, correct state, non-blocking. */
                        xResult = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800f91a:	f06f 030a 	mvn.w	r3, #10
 800f91e:	643b      	str	r3, [r7, #64]	@ 0x40
                        break;
 800f920:	e039      	b.n	800f996 <FreeRTOS_connect+0xe6>
                    }

                    /* Don't get here a second time. */
                    xTimed = pdTRUE;
 800f922:	2301      	movs	r3, #1
 800f924:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800f926:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7f5 fb64 	bl	8004ff8 <vTaskSetTimeOutState>
                }

                /* Did it get connected while sleeping ? */
                xResult = FreeRTOS_issocketconnected( pxSocket );
 800f930:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f932:	f000 fe3f 	bl	80105b4 <FreeRTOS_issocketconnected>
 800f936:	6438      	str	r0, [r7, #64]	@ 0x40

                /* Returns positive when connected, negative means an error */
                if( xResult < 0 )
 800f938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	db2a      	blt.n	800f994 <FreeRTOS_connect+0xe4>
                {
                    /* Return the error */
                    break;
                }

                if( xResult > 0 )
 800f93e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f940:	2b00      	cmp	r3, #0
 800f942:	dd02      	ble.n	800f94a <FreeRTOS_connect+0x9a>
                {
                    /* Socket now connected, return a zero */
                    xResult = 0;
 800f944:	2300      	movs	r3, #0
 800f946:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800f948:	e025      	b.n	800f996 <FreeRTOS_connect+0xe6>
                }

                /* Is it allowed to sleep more? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800f94a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f94e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f952:	4611      	mov	r1, r2
 800f954:	4618      	mov	r0, r3
 800f956:	f7f5 fb87 	bl	8005068 <xTaskCheckForTimeOut>
 800f95a:	4603      	mov	r3, r0
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d003      	beq.n	800f968 <FreeRTOS_connect+0xb8>
                {
                    xResult = -pdFREERTOS_ERRNO_ETIMEDOUT;
 800f960:	f06f 0373 	mvn.w	r3, #115	@ 0x73
 800f964:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800f966:	e016      	b.n	800f996 <FreeRTOS_connect+0xe6>
                }

                /* Go sleeping until we get any down-stream event */
                uxEvents = xEventGroupWaitBits( pxSocket->xEventGroup,
 800f968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f96a:	6858      	ldr	r0, [r3, #4]
 800f96c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f96e:	9300      	str	r3, [sp, #0]
 800f970:	2300      	movs	r3, #0
 800f972:	2201      	movs	r2, #1
 800f974:	2128      	movs	r1, #40	@ 0x28
 800f976:	f7f3 fbf1 	bl	800315c <xEventGroupWaitBits>
 800f97a:	63b8      	str	r0, [r7, #56]	@ 0x38
                                                ( EventBits_t ) eSOCKET_CONNECT | ( EventBits_t ) eSOCKET_CLOSED,
                                                pdTRUE /*xClearOnExit*/,
                                                pdFALSE /*xWaitAllBits*/,
                                                xRemainingTime );

                if( ( uxEvents & ( EventBits_t ) eSOCKET_CLOSED ) != 0U )
 800f97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f97e:	f003 0320 	and.w	r3, r3, #32
 800f982:	2b00      	cmp	r3, #0
 800f984:	d0c0      	beq.n	800f908 <FreeRTOS_connect+0x58>
                {
                    xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800f986:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f98a:	643b      	str	r3, [r7, #64]	@ 0x40
                    FreeRTOS_debug_printf( ( "FreeRTOS_connect() stopped due to an error\n" ) );
 800f98c:	4804      	ldr	r0, [pc, #16]	@ (800f9a0 <FreeRTOS_connect+0xf0>)
 800f98e:	f012 fbdb 	bl	8022148 <lUDPLoggingPrintf>
                    break;
 800f992:	e000      	b.n	800f996 <FreeRTOS_connect+0xe6>
                    break;
 800f994:	bf00      	nop
                }
            }
        }

        return xResult;
 800f996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    }
 800f998:	4618      	mov	r0, r3
 800f99a:	3748      	adds	r7, #72	@ 0x48
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	08025efc 	.word	0x08025efc

0800f9a4 <prvRecvData>:
 */
    static BaseType_t prvRecvData( FreeRTOS_Socket_t * pxSocket,
                                   void * pvBuffer,
                                   size_t uxBufferLength,
                                   BaseType_t xFlags )
    {
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b08a      	sub	sp, #40	@ 0x28
 800f9a8:	af02      	add	r7, sp, #8
 800f9aa:	60f8      	str	r0, [r7, #12]
 800f9ac:	60b9      	str	r1, [r7, #8]
 800f9ae:	607a      	str	r2, [r7, #4]
 800f9b0:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;

        if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) == 0U )
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	f003 0301 	and.w	r3, r3, #1
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d13b      	bne.n	800fa34 <prvRecvData+0x90>
        {
            BaseType_t xIsPeek = ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_PEEK ) != 0U ) ? 1L : 0L;
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	089b      	lsrs	r3, r3, #2
 800f9c0:	f003 0301 	and.w	r3, r3, #1
 800f9c4:	61bb      	str	r3, [r7, #24]

            xByteCount = ( BaseType_t )
                         uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800f9cc:	69bb      	ldr	r3, [r7, #24]
 800f9ce:	9300      	str	r3, [sp, #0]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	68ba      	ldr	r2, [r7, #8]
 800f9d4:	2100      	movs	r1, #0
 800f9d6:	f001 fa04 	bl	8010de2 <uxStreamBufferGet>
 800f9da:	4603      	mov	r3, r0
            xByteCount = ( BaseType_t )
 800f9dc:	61fb      	str	r3, [r7, #28]
                                            0U,
                                            ( uint8_t * ) pvBuffer,
                                            ( size_t ) uxBufferLength,
                                            xIsPeek );

            if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f9e4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d02b      	beq.n	800fa46 <prvRecvData+0xa2>
            {
                /* We had reached the low-water mark, now see if the flag
                 * can be cleared */
                size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f001 f8c5 	bl	8010b84 <uxStreamBufferFrontSpace>
 800f9fa:	6178      	str	r0, [r7, #20]

                if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa02:	697a      	ldr	r2, [r7, #20]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d31e      	bcc.n	800fa46 <prvRecvData+0xa2>
                {
                    pxSocket->u.xTCP.bits.bLowWater = pdFALSE_UNSIGNED;
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800fa0e:	f36f 13c7 	bfc	r3, #7, #1
 800fa12:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                    pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800fa16:	68fa      	ldr	r2, [r7, #12]
 800fa18:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800fa1c:	f043 0301 	orr.w	r3, r3, #1
 800fa20:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2201      	movs	r2, #1
 800fa28:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800fa2c:	2006      	movs	r0, #6
 800fa2e:	f7f9 ff09 	bl	8009844 <xSendEventToIPTask>
 800fa32:	e008      	b.n	800fa46 <prvRecvData+0xa2>
            }
        }
        else
        {
            /* Zero-copy reception of data: pvBuffer is a pointer to a pointer. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, ( uint8_t ** ) pvBuffer );
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fa3a:	68b9      	ldr	r1, [r7, #8]
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f001 f930 	bl	8010ca2 <uxStreamBufferGetPtr>
 800fa42:	4603      	mov	r3, r0
 800fa44:	61fb      	str	r3, [r7, #28]
        }

        return xByteCount;
 800fa46:	69fb      	ldr	r3, [r7, #28]
    }
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3720      	adds	r7, #32
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <prvRecvWait>:
 *            is checked in this function.
 */
    static BaseType_t prvRecvWait( const FreeRTOS_Socket_t * pxSocket,
                                   EventBits_t * pxEventBits,
                                   BaseType_t xFlags )
    {
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b08e      	sub	sp, #56	@ 0x38
 800fa54:	af02      	add	r7, sp, #8
 800fa56:	60f8      	str	r0, [r7, #12]
 800fa58:	60b9      	str	r1, [r7, #8]
 800fa5a:	607a      	str	r2, [r7, #4]
        BaseType_t xByteCount = 0;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800fa60:	2300      	movs	r3, #0
 800fa62:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800fa64:	2300      	movs	r3, #0
 800fa66:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxSocket->u.xTCP.rxStream != NULL )
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d05f      	beq.n	800fb32 <prvRecvWait+0xe2>
        {
            xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f001 f894 	bl	8010ba6 <uxStreamBufferGetSize>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        while( xByteCount == 0 )
 800fa82:	e056      	b.n	800fb32 <prvRecvWait+0xe2>
        {
            eIPTCPState_t eType = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fa8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( ( eType == eCLOSED ) ||
 800fa8e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d007      	beq.n	800faa6 <prvRecvWait+0x56>
 800fa96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fa9a:	2b08      	cmp	r3, #8
 800fa9c:	d003      	beq.n	800faa6 <prvRecvWait+0x56>
                ( eType == eCLOSE_WAIT ) || /* (server + client) waiting for a connection termination request from the local user. */
 800fa9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800faa2:	2b09      	cmp	r3, #9
 800faa4:	d10e      	bne.n	800fac4 <prvRecvWait+0x74>
                ( eType == eCLOSING ) )     /* (server + client) waiting for a connection termination request acknowledgement from the remote TCP. */
            {
                /* Return -ENOTCONN, unless there was a malloc failure. */
                xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 800faa6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800faaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800fab2:	f003 0308 	and.w	r3, r3, #8
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d03e      	beq.n	800fb3a <prvRecvWait+0xea>
                {
                    /* The no-memory error has priority above the non-connected error.
                     * Both are fatal and will lead to closing the socket. */
                    xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
 800fabc:	f06f 030b 	mvn.w	r3, #11
 800fac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                break;
 800fac2:	e03a      	b.n	800fb3a <prvRecvWait+0xea>
            }

            if( xTimed == pdFALSE )
 800fac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d111      	bne.n	800faee <prvRecvWait+0x9e>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	6a1b      	ldr	r3, [r3, #32]
 800face:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0U )
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d033      	beq.n	800fb3e <prvRecvWait+0xee>
                    }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f003 0310 	and.w	r3, r3, #16
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d130      	bne.n	800fb42 <prvRecvWait+0xf2>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800fae0:	2301      	movs	r3, #1
 800fae2:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800fae4:	f107 0314 	add.w	r3, r7, #20
 800fae8:	4618      	mov	r0, r3
 800faea:	f7f5 fa85 	bl	8004ff8 <vTaskSetTimeOutState>
            }

            /* Has the timeout been reached? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800faee:	f107 021c 	add.w	r2, r7, #28
 800faf2:	f107 0314 	add.w	r3, r7, #20
 800faf6:	4611      	mov	r1, r2
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7f5 fab5 	bl	8005068 <xTaskCheckForTimeOut>
 800fafe:	4603      	mov	r3, r0
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d120      	bne.n	800fb46 <prvRecvWait+0xf6>
            {
                break;
            }

            /* Block until there is a down-stream event. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	6858      	ldr	r0, [r3, #4]
 800fb08:	69fb      	ldr	r3, [r7, #28]
 800fb0a:	9300      	str	r3, [sp, #0]
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	2201      	movs	r2, #1
 800fb10:	2161      	movs	r1, #97	@ 0x61
 800fb12:	f7f3 fb23 	bl	800315c <xEventGroupWaitBits>
 800fb16:	6278      	str	r0, [r7, #36]	@ 0x24
            {
                ( void ) xEventBits;
            }
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( pxSocket->u.xTCP.rxStream != NULL )
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d007      	beq.n	800fb32 <prvRecvWait+0xe2>
            {
                xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f001 f83c 	bl	8010ba6 <uxStreamBufferGetSize>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xByteCount == 0 )
 800fb32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d0a5      	beq.n	800fa84 <prvRecvWait+0x34>
 800fb38:	e006      	b.n	800fb48 <prvRecvWait+0xf8>
                break;
 800fb3a:	bf00      	nop
 800fb3c:	e004      	b.n	800fb48 <prvRecvWait+0xf8>
                    break;
 800fb3e:	bf00      	nop
 800fb40:	e002      	b.n	800fb48 <prvRecvWait+0xf8>
                    break;
 800fb42:	bf00      	nop
 800fb44:	e000      	b.n	800fb48 <prvRecvWait+0xf8>
                break;
 800fb46:	bf00      	nop
            }
        } /* while( xByteCount == 0 ) */

        *( pxEventBits ) = xEventBits;
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb4c:	601a      	str	r2, [r3, #0]

        return xByteCount;
 800fb4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800fb50:	4618      	mov	r0, r3
 800fb52:	3730      	adds	r7, #48	@ 0x30
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <FreeRTOS_recv>:
 */
    BaseType_t FreeRTOS_recv( Socket_t xSocket,
                              void * pvBuffer,
                              size_t uxBufferLength,
                              BaseType_t xFlags )
    {
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b088      	sub	sp, #32
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	60f8      	str	r0, [r7, #12]
 800fb60:	60b9      	str	r1, [r7, #8]
 800fb62:	607a      	str	r2, [r7, #4]
 800fb64:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount = 0;
 800fb66:	2300      	movs	r3, #0
 800fb68:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	61bb      	str	r3, [r7, #24]
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	617b      	str	r3, [r7, #20]

        /* Check if the socket is valid, has type TCP and if it is bound to a
         * port. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800fb72:	2201      	movs	r2, #1
 800fb74:	2106      	movs	r1, #6
 800fb76:	69b8      	ldr	r0, [r7, #24]
 800fb78:	f7fe fa3a 	bl	800dff0 <prvValidSocket>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d103      	bne.n	800fb8a <FreeRTOS_recv+0x32>
        {
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800fb82:	f06f 0315 	mvn.w	r3, #21
 800fb86:	61fb      	str	r3, [r7, #28]
 800fb88:	e01d      	b.n	800fbc6 <FreeRTOS_recv+0x6e>
        }
        else if( ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) != 0U ) &&
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	f003 0301 	and.w	r3, r3, #1
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d006      	beq.n	800fba2 <FreeRTOS_recv+0x4a>
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d103      	bne.n	800fba2 <FreeRTOS_recv+0x4a>
                 ( pvBuffer == NULL ) )
        {
            /* In zero-copy mode, pvBuffer is a pointer to a pointer ( not NULL ). */
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800fb9a:	f06f 0315 	mvn.w	r3, #21
 800fb9e:	61fb      	str	r3, [r7, #28]
 800fba0:	e011      	b.n	800fbc6 <FreeRTOS_recv+0x6e>
        }
        else
        {
            /* The function parameters have been checked, now wait for incoming data. */
            xByteCount = prvRecvWait( pxSocket, &( xEventBits ), xFlags );
 800fba2:	f107 0314 	add.w	r3, r7, #20
 800fba6:	683a      	ldr	r2, [r7, #0]
 800fba8:	4619      	mov	r1, r3
 800fbaa:	69b8      	ldr	r0, [r7, #24]
 800fbac:	f7ff ff50 	bl	800fa50 <prvRecvWait>
 800fbb0:	61f8      	str	r0, [r7, #28]
                    xByteCount = -pdFREERTOS_ERRNO_EINTR;
                }
                else
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( xByteCount > 0 )
 800fbb2:	69fb      	ldr	r3, [r7, #28]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	dd06      	ble.n	800fbc6 <FreeRTOS_recv+0x6e>
            {
                /* Get the actual data from the buffer, or in case of zero-copy,
                 * let *pvBuffer point to the RX-stream of the socket. */
                xByteCount = prvRecvData( pxSocket, pvBuffer, uxBufferLength, xFlags );
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	687a      	ldr	r2, [r7, #4]
 800fbbc:	68b9      	ldr	r1, [r7, #8]
 800fbbe:	69b8      	ldr	r0, [r7, #24]
 800fbc0:	f7ff fef0 	bl	800f9a4 <prvRecvData>
 800fbc4:	61f8      	str	r0, [r7, #28]
            }
        } /* prvValidSocket() */

        return xByteCount;
 800fbc6:	69fb      	ldr	r3, [r7, #28]
    }
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3720      	adds	r7, #32
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <prvTCPSendCheck>:
 *
 * @return 0: representing OK, else a negative error code will be returned.
 */
    static int32_t prvTCPSendCheck( FreeRTOS_Socket_t * pxSocket,
                                    size_t uxDataLength )
    {
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	6039      	str	r1, [r7, #0]
        int32_t xResult = 1;
 800fbda:	2301      	movs	r3, #1
 800fbdc:	60fb      	str	r3, [r7, #12]

        /* Is this a socket of type TCP and is it already bound to a port number ? */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800fbde:	2201      	movs	r2, #1
 800fbe0:	2106      	movs	r1, #6
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f7fe fa04 	bl	800dff0 <prvValidSocket>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d103      	bne.n	800fbf6 <prvTCPSendCheck+0x26>
        {
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800fbee:	f06f 0315 	mvn.w	r3, #21
 800fbf2:	60fb      	str	r3, [r7, #12]
 800fbf4:	e040      	b.n	800fc78 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800fbfc:	f003 0308 	and.w	r3, r3, #8
 800fc00:	b2db      	uxtb	r3, r3
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d003      	beq.n	800fc0e <prvTCPSendCheck+0x3e>
        {
            xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800fc06:	f06f 030b 	mvn.w	r3, #11
 800fc0a:	60fb      	str	r3, [r7, #12]
 800fc0c:	e034      	b.n	800fc78 <prvTCPSendCheck+0xa8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d009      	beq.n	800fc2c <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800fc1e:	2b08      	cmp	r3, #8
 800fc20:	d004      	beq.n	800fc2c <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSING ) )
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800fc28:	2b09      	cmp	r3, #9
 800fc2a:	d103      	bne.n	800fc34 <prvTCPSendCheck+0x64>
        {
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800fc2c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800fc30:	60fb      	str	r3, [r7, #12]
 800fc32:	e021      	b.n	800fc78 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800fc3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc3e:	b2db      	uxtb	r3, r3
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d002      	beq.n	800fc4a <prvTCPSendCheck+0x7a>
        {
            /* This TCP connection is closing already, the FIN flag has been sent.
             * Maybe it is still delivering or receiving data.
             * Return OK in order not to get closed/deleted too quickly */
            xResult = 0;
 800fc44:	2300      	movs	r3, #0
 800fc46:	60fb      	str	r3, [r7, #12]
 800fc48:	e016      	b.n	800fc78 <prvTCPSendCheck+0xa8>
        }
        else if( uxDataLength == 0U )
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d102      	bne.n	800fc56 <prvTCPSendCheck+0x86>
        {
            /* send() is being called to send zero bytes */
            xResult = 0;
 800fc50:	2300      	movs	r3, #0
 800fc52:	60fb      	str	r3, [r7, #12]
 800fc54:	e010      	b.n	800fc78 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.txStream == NULL )
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d10b      	bne.n	800fc78 <prvTCPSendCheck+0xa8>
        {
            /* Create the outgoing stream only when it is needed */
            ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800fc60:	2100      	movs	r1, #0
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f000 fac6 	bl	80101f4 <prvTCPCreateStream>

            if( pxSocket->u.xTCP.txStream == NULL )
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d102      	bne.n	800fc78 <prvTCPSendCheck+0xa8>
            {
                xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800fc72:	f06f 030b 	mvn.w	r3, #11
 800fc76:	60fb      	str	r3, [r7, #12]
        else
        {
            /* Nothing. */
        }

        return xResult;
 800fc78:	68fb      	ldr	r3, [r7, #12]
    }
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3710      	adds	r7, #16
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <FreeRTOS_get_tx_head>:
 * @return Head of the circular transmit buffer if all checks pass. Or else, NULL
 *         is returned.
 */
    uint8_t * FreeRTOS_get_tx_head( Socket_t xSocket,
                                    BaseType_t * pxLength )
    {
 800fc82:	b580      	push	{r7, lr}
 800fc84:	b088      	sub	sp, #32
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	6078      	str	r0, [r7, #4]
 800fc8a:	6039      	str	r1, [r7, #0]
        uint8_t * pucReturn = NULL;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	617b      	str	r3, [r7, #20]
        StreamBuffer_t * pxBuffer = NULL;
 800fc94:	2300      	movs	r3, #0
 800fc96:	61bb      	str	r3, [r7, #24]

        *pxLength = 0;
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	601a      	str	r2, [r3, #0]

        /* Confirm that this is a TCP socket before dereferencing structure
         * member pointers. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdTRUE )
 800fc9e:	2200      	movs	r2, #0
 800fca0:	2106      	movs	r1, #6
 800fca2:	6978      	ldr	r0, [r7, #20]
 800fca4:	f7fe f9a4 	bl	800dff0 <prvValidSocket>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	2b01      	cmp	r3, #1
 800fcac:	d135      	bne.n	800fd1a <FreeRTOS_get_tx_head+0x98>
        {
            pxBuffer = pxSocket->u.xTCP.txStream;
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fcb4:	61bb      	str	r3, [r7, #24]

            /* If the TX buffer hasn't been created yet,
             * and if no malloc error has occurred on this socket yet. */
            if( ( pxBuffer == NULL ) &&
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d10f      	bne.n	800fcdc <FreeRTOS_get_tx_head+0x5a>
                ( pxSocket->u.xTCP.bits.bMallocError == pdFALSE_UNSIGNED ) )
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800fcc2:	f003 0308 	and.w	r3, r3, #8
 800fcc6:	b2db      	uxtb	r3, r3
            if( ( pxBuffer == NULL ) &&
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d107      	bne.n	800fcdc <FreeRTOS_get_tx_head+0x5a>
            {
                /* Create the outgoing stream only when it is needed */
                ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800fccc:	2100      	movs	r1, #0
 800fcce:	6978      	ldr	r0, [r7, #20]
 800fcd0:	f000 fa90 	bl	80101f4 <prvTCPCreateStream>
                pxBuffer = pxSocket->u.xTCP.txStream;
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fcda:	61bb      	str	r3, [r7, #24]
            }

            if( pxBuffer != NULL )
 800fcdc:	69bb      	ldr	r3, [r7, #24]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d01b      	beq.n	800fd1a <FreeRTOS_get_tx_head+0x98>
            {
                size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800fce2:	69b8      	ldr	r0, [r7, #24]
 800fce4:	f000 ff3d 	bl	8010b62 <uxStreamBufferGetSpace>
 800fce8:	6138      	str	r0, [r7, #16]
                size_t uxRemain = pxBuffer->LENGTH - pxBuffer->uxHead;
 800fcea:	69bb      	ldr	r3, [r7, #24]
 800fcec:	691a      	ldr	r2, [r3, #16]
 800fcee:	69bb      	ldr	r3, [r7, #24]
 800fcf0:	689b      	ldr	r3, [r3, #8]
 800fcf2:	1ad3      	subs	r3, r2, r3
 800fcf4:	60fb      	str	r3, [r7, #12]

                if( uxRemain <= uxSpace )
 800fcf6:	68fa      	ldr	r2, [r7, #12]
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d803      	bhi.n	800fd06 <FreeRTOS_get_tx_head+0x84>
                {
                    *pxLength = ( BaseType_t ) uxRemain;
 800fcfe:	68fa      	ldr	r2, [r7, #12]
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	601a      	str	r2, [r3, #0]
 800fd04:	e002      	b.n	800fd0c <FreeRTOS_get_tx_head+0x8a>
                }
                else
                {
                    *pxLength = ( BaseType_t ) uxSpace;
 800fd06:	693a      	ldr	r2, [r7, #16]
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	601a      	str	r2, [r3, #0]
                }

                pucReturn = &( pxBuffer->ucArray[ pxBuffer->uxHead ] );
 800fd0c:	69bb      	ldr	r3, [r7, #24]
 800fd0e:	689b      	ldr	r3, [r3, #8]
 800fd10:	3310      	adds	r3, #16
 800fd12:	69ba      	ldr	r2, [r7, #24]
 800fd14:	4413      	add	r3, r2
 800fd16:	3304      	adds	r3, #4
 800fd18:	61fb      	str	r3, [r7, #28]
            }
        }

        return pucReturn;
 800fd1a:	69fb      	ldr	r3, [r7, #28]
    }
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	3720      	adds	r7, #32
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}

0800fd24 <prvTCPSendLoop>:
 */
    static BaseType_t prvTCPSendLoop( FreeRTOS_Socket_t * pxSocket,
                                      const void * pvBuffer,
                                      size_t uxDataLength,
                                      BaseType_t xFlags )
    {
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b090      	sub	sp, #64	@ 0x40
 800fd28:	af02      	add	r7, sp, #8
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	607a      	str	r2, [r7, #4]
 800fd30:	603b      	str	r3, [r7, #0]
        /* The number of bytes sent. */
        BaseType_t xBytesSent = 0;
 800fd32:	2300      	movs	r3, #0
 800fd34:	637b      	str	r3, [r7, #52]	@ 0x34
        /* xBytesLeft is the number of bytes that still must be sent. */
        BaseType_t xBytesLeft = ( BaseType_t ) uxDataLength;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	633b      	str	r3, [r7, #48]	@ 0x30
        /* xByteCount is number of bytes that can be sent now. */
        BaseType_t xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fd40:	4618      	mov	r0, r3
 800fd42:	f000 ff0e 	bl	8010b62 <uxStreamBufferGetSpace>
 800fd46:	4603      	mov	r3, r0
 800fd48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        const uint8_t * pucSource = ( const uint8_t * ) pvBuffer;
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	627b      	str	r3, [r7, #36]	@ 0x24

        /* While there are still bytes to be sent. */
        while( xBytesLeft > 0 )
 800fd52:	e08f      	b.n	800fe74 <prvTCPSendLoop+0x150>
        {
            /* If txStream has space. */
            if( xByteCount > 0 )
 800fd54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	dd4b      	ble.n	800fdf2 <prvTCPSendLoop+0xce>
            {
                BaseType_t xCloseAfterSend = pdFALSE;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	623b      	str	r3, [r7, #32]

                /* Don't send more than necessary. */
                if( xByteCount > xBytesLeft )
 800fd5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fd60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd62:	429a      	cmp	r2, r3
 800fd64:	dd01      	ble.n	800fd6a <prvTCPSendLoop+0x46>
                {
                    xByteCount = xBytesLeft;
 800fd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd68:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) &&
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fd70:	f003 0310 	and.w	r3, r3, #16
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d00e      	beq.n	800fd98 <prvTCPSendLoop+0x74>
 800fd7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d10a      	bne.n	800fd98 <prvTCPSendLoop+0x74>
                    ( xByteCount == xBytesLeft ) )
                {
                    xCloseAfterSend = pdTRUE;
 800fd82:	2301      	movs	r3, #1
 800fd84:	623b      	str	r3, [r7, #32]

                    /* Now suspend the scheduler: sending the last data and
                     * setting bCloseRequested must be done together */
                    vTaskSuspendAll();
 800fd86:	f7f4 fc7b 	bl	8004680 <vTaskSuspendAll>
                    pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE_UNSIGNED;
 800fd8a:	68fa      	ldr	r2, [r7, #12]
 800fd8c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800fd90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd94:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                     * expected.  The use of 'bCloseAfterSend' is not mandatory, it
                     * is just a faster way of transferring files (e.g. when using
                     * FTP). */
                }

                xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0U, pucSource, ( size_t ) xByteCount );
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800fd9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fda0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fda2:	2100      	movs	r1, #0
 800fda4:	f000 ff9d 	bl	8010ce2 <uxStreamBufferAdd>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( xCloseAfterSend == pdTRUE )
 800fdac:	6a3b      	ldr	r3, [r7, #32]
 800fdae:	2b01      	cmp	r3, #1
 800fdb0:	d101      	bne.n	800fdb6 <prvTCPSendLoop+0x92>
                {
                    /* Now when the IP-task transmits the data, it will also
                     * see that bCloseRequested is true and include the FIN
                     * flag to start closure of the connection. */
                    ( void ) xTaskResumeAll();
 800fdb2:	f7f4 fc73 	bl	800469c <xTaskResumeAll>
                }

                /* Send a message to the IP-task so it can work on this
                * socket.  Data is sent, let the IP-task work on it. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2201      	movs	r2, #1
 800fdba:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xIsCallingFromIPTask() == pdFALSE )
 800fdbe:	f7fa fc99 	bl	800a6f4 <xIsCallingFromIPTask>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d102      	bne.n	800fdce <prvTCPSendLoop+0xaa>
                {
                    /* Only send a TCP timer event when not called from the
                     * IP-task. */
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800fdc8:	2006      	movs	r0, #6
 800fdca:	f7f9 fd3b 	bl	8009844 <xSendEventToIPTask>
                }

                xBytesLeft -= xByteCount;
 800fdce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdd2:	1ad3      	subs	r3, r2, r3
 800fdd4:	633b      	str	r3, [r7, #48]	@ 0x30
                xBytesSent += xByteCount;
 800fdd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdda:	4413      	add	r3, r2
 800fddc:	637b      	str	r3, [r7, #52]	@ 0x34

                if( ( xBytesLeft == 0 ) || ( pvBuffer == NULL ) )
 800fdde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d053      	beq.n	800fe8c <prvTCPSendLoop+0x168>
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d050      	beq.n	800fe8c <prvTCPSendLoop+0x168>
                    break;
                }

                /* As there are still bytes left to be sent, increase the
                 * data pointer. */
                pucSource = &( pucSource[ xByteCount ] );
 800fdea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdee:	4413      	add	r3, r2
 800fdf0:	627b      	str	r3, [r7, #36]	@ 0x24
            } /* if( xByteCount > 0 ) */

            /* Not all bytes have been sent. In case the socket is marked as
             * blocking sleep for a while. */
            if( xTimed == pdFALSE )
 800fdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d119      	bne.n	800fe2c <prvTCPSendLoop+0x108>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xSendBlockTime;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdfc:	61fb      	str	r3, [r7, #28]

                if( xIsCallingFromIPTask() != pdFALSE )
 800fdfe:	f7fa fc79 	bl	800a6f4 <xIsCallingFromIPTask>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d001      	beq.n	800fe0c <prvTCPSendLoop+0xe8>
                {
                    /* If this send function is called from within a
                     * call-back handler it may not block, otherwise
                     * chances would be big to get a deadlock: the IP-task
                     * waiting for itself. */
                    xRemainingTime = ( TickType_t ) 0U;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	61fb      	str	r3, [r7, #28]
                }

                if( xRemainingTime == ( TickType_t ) 0U )
 800fe0c:	69fb      	ldr	r3, [r7, #28]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d035      	beq.n	800fe7e <prvTCPSendLoop+0x15a>
                {
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	f003 0310 	and.w	r3, r3, #16
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d132      	bne.n	800fe82 <prvTCPSendLoop+0x15e>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800fe20:	f107 0314 	add.w	r3, r7, #20
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7f5 f8e7 	bl	8004ff8 <vTaskSetTimeOutState>
 800fe2a:	e00a      	b.n	800fe42 <prvTCPSendLoop+0x11e>
            }
            else
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800fe2c:	f107 021c 	add.w	r2, r7, #28
 800fe30:	f107 0314 	add.w	r3, r7, #20
 800fe34:	4611      	mov	r1, r2
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7f5 f916 	bl	8005068 <xTaskCheckForTimeOut>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d121      	bne.n	800fe86 <prvTCPSendLoop+0x162>
                    break;
                }
            }

            /* Go sleeping until a SEND or a CLOSE event is received. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_SEND | ( EventBits_t ) eSOCKET_CLOSED,
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	6858      	ldr	r0, [r3, #4]
 800fe46:	69fb      	ldr	r3, [r7, #28]
 800fe48:	9300      	str	r3, [sp, #0]
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	2201      	movs	r2, #1
 800fe4e:	2122      	movs	r1, #34	@ 0x22
 800fe50:	f7f3 f984 	bl	800315c <xEventGroupWaitBits>
                                          pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

            xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800fe54:	6879      	ldr	r1, [r7, #4]
 800fe56:	68f8      	ldr	r0, [r7, #12]
 800fe58:	f7ff feba 	bl	800fbd0 <prvTCPSendCheck>
 800fe5c:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( xByteCount < 0 )
 800fe5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	db12      	blt.n	800fe8a <prvTCPSendLoop+0x166>
                /* In a meanwhile, the connection has dropped, stop iterating. */
                break;
            }

            /* See if in a meanwhile there is space in the TX-stream. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f000 fe79 	bl	8010b62 <uxStreamBufferGetSpace>
 800fe70:	4603      	mov	r3, r0
 800fe72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xBytesLeft > 0 )
 800fe74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	f73f af6c 	bgt.w	800fd54 <prvTCPSendLoop+0x30>
 800fe7c:	e006      	b.n	800fe8c <prvTCPSendLoop+0x168>
                    break;
 800fe7e:	bf00      	nop
 800fe80:	e004      	b.n	800fe8c <prvTCPSendLoop+0x168>
                    break;
 800fe82:	bf00      	nop
 800fe84:	e002      	b.n	800fe8c <prvTCPSendLoop+0x168>
                    break;
 800fe86:	bf00      	nop
 800fe88:	e000      	b.n	800fe8c <prvTCPSendLoop+0x168>
                break;
 800fe8a:	bf00      	nop
        } /* while( xBytesLeft > 0 ) */

        return xBytesSent;
 800fe8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3738      	adds	r7, #56	@ 0x38
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
	...

0800fe98 <FreeRTOS_send>:
 */
    BaseType_t FreeRTOS_send( Socket_t xSocket,
                              const void * pvBuffer,
                              size_t uxDataLength,
                              BaseType_t xFlags )
    {
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b086      	sub	sp, #24
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	60f8      	str	r0, [r7, #12]
 800fea0:	60b9      	str	r1, [r7, #8]
 800fea2:	607a      	str	r2, [r7, #4]
 800fea4:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	613b      	str	r3, [r7, #16]

        xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800feaa:	6879      	ldr	r1, [r7, #4]
 800feac:	6938      	ldr	r0, [r7, #16]
 800feae:	f7ff fe8f 	bl	800fbd0 <prvTCPSendCheck>
 800feb2:	6178      	str	r0, [r7, #20]

        if( xByteCount > 0 )
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	dd24      	ble.n	800ff04 <FreeRTOS_send+0x6c>
        {
            /* prvTCPSendLoop() will try to send as many bytes as possible,
             * returning number of bytes that have been queued for transmission.. */
            xByteCount = prvTCPSendLoop( pxSocket, pvBuffer, uxDataLength, xFlags );
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	687a      	ldr	r2, [r7, #4]
 800febe:	68b9      	ldr	r1, [r7, #8]
 800fec0:	6938      	ldr	r0, [r7, #16]
 800fec2:	f7ff ff2f 	bl	800fd24 <prvTCPSendLoop>
 800fec6:	6178      	str	r0, [r7, #20]

            if( xByteCount == 0 )
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d11a      	bne.n	800ff04 <FreeRTOS_send+0x6c>
            {
                if( pxSocket->u.xTCP.eTCPState > eESTABLISHED )
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fed4:	2b05      	cmp	r3, #5
 800fed6:	d903      	bls.n	800fee0 <FreeRTOS_send+0x48>
                {
                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOTCONN;
 800fed8:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800fedc:	617b      	str	r3, [r7, #20]
 800fede:	e011      	b.n	800ff04 <FreeRTOS_send+0x6c>
                }
                else
                {
                    if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fee4:	2b17      	cmp	r3, #23
 800fee6:	d00a      	beq.n	800fefe <FreeRTOS_send+0x66>
                    {
                        FreeRTOS_debug_printf( ( "FreeRTOS_send: %u -> %xip:%d: no space\n",
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800feec:	4619      	mov	r1, r3
 800feee:	693b      	ldr	r3, [r7, #16]
 800fef0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fef8:	4805      	ldr	r0, [pc, #20]	@ (800ff10 <FreeRTOS_send+0x78>)
 800fefa:	f012 f925 	bl	8022148 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                 pxSocket->u.xTCP.usRemotePort ) );
                    }

                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 800fefe:	f06f 031b 	mvn.w	r3, #27
 800ff02:	617b      	str	r3, [r7, #20]
                }
            }
        }

        return xByteCount;
 800ff04:	697b      	ldr	r3, [r7, #20]
    }
 800ff06:	4618      	mov	r0, r3
 800ff08:	3718      	adds	r7, #24
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	08025f54 	.word	0x08025f54

0800ff14 <FreeRTOS_listen>:
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b084      	sub	sp, #16
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800ff26:	2201      	movs	r2, #1
 800ff28:	2106      	movs	r1, #6
 800ff2a:	68b8      	ldr	r0, [r7, #8]
 800ff2c:	f7fe f860 	bl	800dff0 <prvValidSocket>
 800ff30:	4603      	mov	r3, r0
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d103      	bne.n	800ff3e <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800ff36:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800ff3a:	60fb      	str	r3, [r7, #12]
 800ff3c:	e056      	b.n	800ffec <FreeRTOS_listen+0xd8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState != eCLOSED ) && ( pxSocket->u.xTCP.eTCPState != eCLOSE_WAIT ) )
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d008      	beq.n	800ff5a <FreeRTOS_listen+0x46>
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ff4e:	2b08      	cmp	r3, #8
 800ff50:	d003      	beq.n	800ff5a <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800ff52:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800ff56:	60fb      	str	r3, [r7, #12]
 800ff58:	e048      	b.n	800ffec <FreeRTOS_listen+0xd8>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 800ff5a:	6839      	ldr	r1, [r7, #0]
 800ff5c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800ff60:	f7fa fd78 	bl	800aa54 <FreeRTOS_min_int32>
 800ff64:	4603      	mov	r3, r0
 800ff66:	b29a      	uxth	r2, r3
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ff74:	f003 0308 	and.w	r3, r3, #8
 800ff78:	b2db      	uxtb	r3, r3
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d032      	beq.n	800ffe4 <FreeRTOS_listen+0xd0>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d005      	beq.n	800ff94 <FreeRTOS_listen+0x80>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f000 fe2b 	bl	8010bea <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d005      	beq.n	800ffaa <FreeRTOS_listen+0x96>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f000 fe20 	bl	8010bea <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	33aa      	adds	r3, #170	@ 0xaa
 800ffae:	225a      	movs	r2, #90	@ 0x5a
 800ffb0:	2100      	movs	r1, #0
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f012 fbf1 	bl	802279a <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800ffbe:	22c0      	movs	r2, #192	@ 0xc0
 800ffc0:	2100      	movs	r1, #0
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f012 fbe9 	bl	802279a <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	3368      	adds	r3, #104	@ 0x68
 800ffcc:	2204      	movs	r2, #4
 800ffce:	2100      	movs	r1, #0
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f012 fbe2 	bl	802279a <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 800ffd6:	68ba      	ldr	r2, [r7, #8]
 800ffd8:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800ffdc:	f043 0308 	orr.w	r3, r3, #8
 800ffe0:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 800ffe4:	2101      	movs	r1, #1
 800ffe6:	68b8      	ldr	r0, [r7, #8]
 800ffe8:	f001 f8a2 	bl	8011130 <vTCPStateChange>
        }

        return xResult;
 800ffec:	68fb      	ldr	r3, [r7, #12]
    }
 800ffee:	4618      	mov	r0, r3
 800fff0:	3710      	adds	r7, #16
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}

0800fff6 <FreeRTOS_shutdown>:
 *
 * @return 0 on successful shutdown or else a negative error code.
 */
    BaseType_t FreeRTOS_shutdown( Socket_t xSocket,
                                  BaseType_t xHow )
    {
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b084      	sub	sp, #16
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	6078      	str	r0, [r7, #4]
 800fffe:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	60bb      	str	r3, [r7, #8]
        BaseType_t xResult;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 8010004:	2201      	movs	r2, #1
 8010006:	2106      	movs	r1, #6
 8010008:	68b8      	ldr	r0, [r7, #8]
 801000a:	f7fd fff1 	bl	800dff0 <prvValidSocket>
 801000e:	4603      	mov	r3, r0
 8010010:	2b00      	cmp	r3, #0
 8010012:	d103      	bne.n	801001c <FreeRTOS_shutdown+0x26>
        {
            /*_RB_ Is this comment correct?  The socket is not of a type that
             * supports the listen() operation. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 8010014:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 8010018:	60fb      	str	r3, [r7, #12]
 801001a:	e018      	b.n	801004e <FreeRTOS_shutdown+0x58>
        }
        else if( pxSocket->u.xTCP.eTCPState != eESTABLISHED )
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010022:	2b05      	cmp	r3, #5
 8010024:	d003      	beq.n	801002e <FreeRTOS_shutdown+0x38>
        {
            /* The socket is not connected. */
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 8010026:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 801002a:	60fb      	str	r3, [r7, #12]
 801002c:	e00f      	b.n	801004e <FreeRTOS_shutdown+0x58>
        }
        else
        {
            pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 801002e:	68ba      	ldr	r2, [r7, #8]
 8010030:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010034:	f043 0320 	orr.w	r3, r3, #32
 8010038:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            /* Let the IP-task perform the shutdown of the connection. */
            pxSocket->u.xTCP.usTimeout = 1U;
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	2201      	movs	r2, #1
 8010040:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8010044:	2006      	movs	r0, #6
 8010046:	f7f9 fbfd 	bl	8009844 <xSendEventToIPTask>
            xResult = 0;
 801004a:	2300      	movs	r3, #0
 801004c:	60fb      	str	r3, [r7, #12]
        }

        ( void ) xHow;

        return xResult;
 801004e:	68fb      	ldr	r3, [r7, #12]
    }
 8010050:	4618      	mov	r0, r3
 8010052:	3710      	adds	r7, #16
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}

08010058 <xTCPTimerCheck>:
 * @param[in] xWillSleep Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 8010058:	b580      	push	{r7, lr}
 801005a:	b08a      	sub	sp, #40	@ 0x28
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 8010060:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010064:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 8010066:	f7f4 fc1d 	bl	80048a4 <xTaskGetTickCount>
 801006a:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 801006c:	4b32      	ldr	r3, [pc, #200]	@ (8010138 <xTCPTimerCheck+0xe0>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	69ba      	ldr	r2, [r7, #24]
 8010072:	1ad3      	subs	r3, r2, r3
 8010074:	623b      	str	r3, [r7, #32]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010076:	4b31      	ldr	r3, [pc, #196]	@ (801013c <xTCPTimerCheck+0xe4>)
 8010078:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 801007a:	4b31      	ldr	r3, [pc, #196]	@ (8010140 <xTCPTimerCheck+0xe8>)
 801007c:	68db      	ldr	r3, [r3, #12]
 801007e:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 8010080:	4a2d      	ldr	r2, [pc, #180]	@ (8010138 <xTCPTimerCheck+0xe0>)
 8010082:	69bb      	ldr	r3, [r7, #24]
 8010084:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 8010086:	6a3b      	ldr	r3, [r7, #32]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d14b      	bne.n	8010124 <xTCPTimerCheck+0xcc>
        {
            xDelta = 1U;
 801008c:	2301      	movs	r3, #1
 801008e:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 8010090:	e048      	b.n	8010124 <xTCPTimerCheck+0xcc>
        {
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010092:	69fb      	ldr	r3, [r7, #28]
 8010094:	68db      	ldr	r3, [r3, #12]
 8010096:	613b      	str	r3, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 8010098:	69fb      	ldr	r3, [r7, #28]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d03a      	beq.n	801011e <xTCPTimerCheck+0xc6>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80100ae:	461a      	mov	r2, r3
 80100b0:	6a3b      	ldr	r3, [r7, #32]
 80100b2:	4293      	cmp	r3, r2
 80100b4:	d20a      	bcs.n	80100cc <xTCPTimerCheck+0x74>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 80100bc:	6a3b      	ldr	r3, [r7, #32]
 80100be:	b29b      	uxth	r3, r3
 80100c0:	1ad3      	subs	r3, r2, r3
 80100c2:	b29a      	uxth	r2, r3
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 80100ca:	e00a      	b.n	80100e2 <xTCPTimerCheck+0x8a>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 80100cc:	693b      	ldr	r3, [r7, #16]
 80100ce:	2200      	movs	r2, #0
 80100d0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                xRc = xTCPSocketCheck( pxSocket );
 80100d4:	6938      	ldr	r0, [r7, #16]
 80100d6:	f000 ff33 	bl	8010f40 <xTCPSocketCheck>
 80100da:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	db1f      	blt.n	8010122 <xTCPTimerCheck+0xca>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 80100e2:	693b      	ldr	r3, [r7, #16]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d008      	beq.n	80100fc <xTCPTimerCheck+0xa4>
            {
                if( xWillSleep != pdFALSE )
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d003      	beq.n	80100f8 <xTCPTimerCheck+0xa0>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 80100f0:	6938      	ldr	r0, [r7, #16]
 80100f2:	f7ff fa8e 	bl	800f612 <vSocketWakeUpUser>
 80100f6:	e001      	b.n	80100fc <xTCPTimerCheck+0xa4>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 80100f8:	2300      	movs	r3, #0
 80100fa:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8010102:	2b00      	cmp	r3, #0
 8010104:	d00e      	beq.n	8010124 <xTCPTimerCheck+0xcc>
 8010106:	693b      	ldr	r3, [r7, #16]
 8010108:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801010c:	461a      	mov	r2, r3
 801010e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010110:	4293      	cmp	r3, r2
 8010112:	d907      	bls.n	8010124 <xTCPTimerCheck+0xcc>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801011a:	627b      	str	r3, [r7, #36]	@ 0x24
 801011c:	e002      	b.n	8010124 <xTCPTimerCheck+0xcc>
                continue;
 801011e:	bf00      	nop
 8010120:	e000      	b.n	8010124 <xTCPTimerCheck+0xcc>
                    continue;
 8010122:	bf00      	nop
        while( pxIterator != pxEnd )
 8010124:	69fa      	ldr	r2, [r7, #28]
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	429a      	cmp	r2, r3
 801012a:	d1b2      	bne.n	8010092 <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 801012c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801012e:	4618      	mov	r0, r3
 8010130:	3728      	adds	r7, #40	@ 0x28
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
 8010136:	bf00      	nop
 8010138:	20001598 	.word	0x20001598
 801013c:	2000158c 	.word	0x2000158c
 8010140:	20001584 	.word	0x20001584

08010144 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           IPv46_Address_t xRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 8010144:	b082      	sub	sp, #8
 8010146:	b580      	push	{r7, lr}
 8010148:	b088      	sub	sp, #32
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]
 801014e:	6039      	str	r1, [r7, #0]
 8010150:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8010154:	e881 000c 	stmia.w	r1, {r2, r3}
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 8010158:	2300      	movs	r3, #0
 801015a:	61bb      	str	r3, [r7, #24]
 801015c:	2300      	movs	r3, #0
 801015e:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010160:	4b23      	ldr	r3, [pc, #140]	@ (80101f0 <pxTCPSocketLookup+0xac>)
 8010162:	613b      	str	r3, [r7, #16]

        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	685b      	ldr	r3, [r3, #4]
 8010168:	61fb      	str	r3, [r7, #28]
 801016a:	e02e      	b.n	80101ca <pxTCPSocketLookup+0x86>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801016c:	69fb      	ldr	r3, [r7, #28]
 801016e:	68db      	ldr	r3, [r3, #12]
 8010170:	60fb      	str	r3, [r7, #12]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	b29b      	uxth	r3, r3
 801017a:	429a      	cmp	r2, r3
 801017c:	d122      	bne.n	80101c4 <pxTCPSocketLookup+0x80>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010184:	2b01      	cmp	r3, #1
 8010186:	d102      	bne.n	801018e <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	617b      	str	r3, [r7, #20]
 801018c:	e01a      	b.n	80101c4 <pxTCPSocketLookup+0x80>
                }
                else if( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort )
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010196:	b29b      	uxth	r3, r3
 8010198:	429a      	cmp	r2, r3
 801019a:	d113      	bne.n	80101c4 <pxTCPSocketLookup+0x80>
                {
                    if( xRemoteIP.xIs_IPv6 != pdFALSE )
 801019c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d006      	beq.n	80101b0 <pxTCPSocketLookup+0x6c>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            pxResult = pxTCPSocketLookup_IPv6( pxSocket, &xRemoteIP );
 80101a2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80101a6:	68f8      	ldr	r0, [r7, #12]
 80101a8:	f7fb f9d4 	bl	800b554 <pxTCPSocketLookup_IPv6>
 80101ac:	61b8      	str	r0, [r7, #24]
 80101ae:	e006      	b.n	80101be <pxTCPSocketLookup+0x7a>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
                    }
                    else
                    {
                        if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == xRemoteIP.xIPAddress.ulIP_IPv4 )
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80101b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d101      	bne.n	80101be <pxTCPSocketLookup+0x7a>
                        {
                            /* For sockets not in listening mode, find a match with
                             * xLocalPort, ulRemoteIP AND xRemotePort. */
                            pxResult = pxSocket;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	61bb      	str	r3, [r7, #24]
                        }
                    }

                    if( pxResult != NULL )
 80101be:	69bb      	ldr	r3, [r7, #24]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d107      	bne.n	80101d4 <pxTCPSocketLookup+0x90>
             pxIterator = listGET_NEXT( pxIterator ) )
 80101c4:	69fb      	ldr	r3, [r7, #28]
 80101c6:	685b      	ldr	r3, [r3, #4]
 80101c8:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEnd;
 80101ca:	69fa      	ldr	r2, [r7, #28]
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d1cc      	bne.n	801016c <pxTCPSocketLookup+0x28>
 80101d2:	e000      	b.n	80101d6 <pxTCPSocketLookup+0x92>
                    {
                        break;
 80101d4:	bf00      	nop
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 80101d6:	69bb      	ldr	r3, [r7, #24]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d101      	bne.n	80101e0 <pxTCPSocketLookup+0x9c>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	61bb      	str	r3, [r7, #24]
        }

        return pxResult;
 80101e0:	69bb      	ldr	r3, [r7, #24]
    }
 80101e2:	4618      	mov	r0, r3
 80101e4:	3720      	adds	r7, #32
 80101e6:	46bd      	mov	sp, r7
 80101e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80101ec:	b002      	add	sp, #8
 80101ee:	4770      	bx	lr
 80101f0:	2000158c 	.word	0x2000158c

080101f4 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b088      	sub	sp, #32
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
 80101fc:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d048      	beq.n	8010296 <prvTCPCreateStream+0xa2>
        {
            size_t uxLittlePerc = sock20_PERCENT;
 8010204:	2314      	movs	r3, #20
 8010206:	61bb      	str	r3, [r7, #24]
            size_t uxEnoughPerc = sock80_PERCENT;
 8010208:	2350      	movs	r3, #80	@ 0x50
 801020a:	617b      	str	r3, [r7, #20]
            size_t uxSegmentCount = pxSocket->u.xTCP.uxRxStreamSize / pxSocket->u.xTCP.usMSS;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010212:	687a      	ldr	r2, [r7, #4]
 8010214:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 8010218:	fbb3 f3f2 	udiv	r3, r3, r2
 801021c:	613b      	str	r3, [r7, #16]
                { 50U, 100U }, /* 2 segments. */
                { 34U, 100U }, /* 3 segments. */
                { 25U, 100U }, /* 4 segments. */
            };

            if( ( uxSegmentCount > 0U ) &&
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d00f      	beq.n	8010244 <prvTCPCreateStream+0x50>
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	2b04      	cmp	r3, #4
 8010228:	d80c      	bhi.n	8010244 <prvTCPCreateStream+0x50>
                ( uxSegmentCount <= ARRAY_USIZE( xPercTable ) ) )
            {
                uxLittlePerc = xPercTable[ uxSegmentCount - 1U ].uxPercLittle;
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	3b01      	subs	r3, #1
 801022e:	4a40      	ldr	r2, [pc, #256]	@ (8010330 <prvTCPCreateStream+0x13c>)
 8010230:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010234:	61bb      	str	r3, [r7, #24]
                uxEnoughPerc = xPercTable[ uxSegmentCount - 1U ].uxPercEnough;
 8010236:	693b      	ldr	r3, [r7, #16]
 8010238:	3b01      	subs	r3, #1
 801023a:	4a3d      	ldr	r2, [pc, #244]	@ (8010330 <prvTCPCreateStream+0x13c>)
 801023c:	00db      	lsls	r3, r3, #3
 801023e:	4413      	add	r3, r2
 8010240:	685b      	ldr	r3, [r3, #4]
 8010242:	617b      	str	r3, [r7, #20]
            }

            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801024a:	61fb      	str	r3, [r7, #28]

            if( pxSocket->u.xTCP.uxLittleSpace == 0U )
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010252:	2b00      	cmp	r3, #0
 8010254:	d10c      	bne.n	8010270 <prvTCPCreateStream+0x7c>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( uxLittlePerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801025c:	69ba      	ldr	r2, [r7, #24]
 801025e:	fb02 f303 	mul.w	r3, r2, r3
 8010262:	4a34      	ldr	r2, [pc, #208]	@ (8010334 <prvTCPCreateStream+0x140>)
 8010264:	fba2 2303 	umull	r2, r3, r2, r3
 8010268:	095a      	lsrs	r2, r3, #5
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0U )
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010276:	2b00      	cmp	r3, #0
 8010278:	d111      	bne.n	801029e <prvTCPCreateStream+0xaa>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( uxEnoughPerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010280:	697a      	ldr	r2, [r7, #20]
 8010282:	fb02 f303 	mul.w	r3, r2, r3
 8010286:	4a2b      	ldr	r2, [pc, #172]	@ (8010334 <prvTCPCreateStream+0x140>)
 8010288:	fba2 2303 	umull	r2, r3, r2, r3
 801028c:	095a      	lsrs	r2, r3, #5
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8010294:	e003      	b.n	801029e <prvTCPCreateStream+0xaa>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801029c:	61fb      	str	r3, [r7, #28]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 801029e:	69fb      	ldr	r3, [r7, #28]
 80102a0:	3304      	adds	r3, #4
 80102a2:	61fb      	str	r3, [r7, #28]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	f023 0303 	bic.w	r3, r3, #3
 80102aa:	61fb      	str	r3, [r7, #28]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 80102ac:	69fb      	ldr	r3, [r7, #28]
 80102ae:	3314      	adds	r3, #20
 80102b0:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxBuffer = ( ( StreamBuffer_t * ) pvPortMallocLarge( uxSize ) );
 80102b2:	68f8      	ldr	r0, [r7, #12]
 80102b4:	f7f6 f966 	bl	8006584 <pvPortMalloc>
 80102b8:	60b8      	str	r0, [r7, #8]

        if( pxBuffer == NULL )
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d10e      	bne.n	80102de <prvTCPCreateStream+0xea>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 80102c0:	481d      	ldr	r0, [pc, #116]	@ (8010338 <prvTCPCreateStream+0x144>)
 80102c2:	f011 ff41 	bl	8022148 <lUDPLoggingPrintf>
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 80102c6:	687a      	ldr	r2, [r7, #4]
 80102c8:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80102cc:	f043 0308 	orr.w	r3, r3, #8
 80102d0:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80102d4:	2108      	movs	r1, #8
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f000 ff2a 	bl	8011130 <vTCPStateChange>
 80102dc:	e022      	b.n	8010324 <prvTCPCreateStream+0x130>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 80102de:	2214      	movs	r2, #20
 80102e0:	2100      	movs	r1, #0
 80102e2:	68b8      	ldr	r0, [r7, #8]
 80102e4:	f012 fa59 	bl	802279a <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	69fa      	ldr	r2, [r7, #28]
 80102ec:	611a      	str	r2, [r3, #16]

            if( xTCPWindowLoggingLevel != 0 )
 80102ee:	4b13      	ldr	r3, [pc, #76]	@ (801033c <prvTCPCreateStream+0x148>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d00a      	beq.n	801030c <prvTCPCreateStream+0x118>
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', ( unsigned ) uxLength, ( unsigned ) uxSize ) );
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d001      	beq.n	8010300 <prvTCPCreateStream+0x10c>
 80102fc:	2152      	movs	r1, #82	@ 0x52
 80102fe:	e000      	b.n	8010302 <prvTCPCreateStream+0x10e>
 8010300:	2154      	movs	r1, #84	@ 0x54
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	69fa      	ldr	r2, [r7, #28]
 8010306:	480e      	ldr	r0, [pc, #56]	@ (8010340 <prvTCPCreateStream+0x14c>)
 8010308:	f011 ff1e 	bl	8022148 <lUDPLoggingPrintf>
            }

            if( xIsInputStream != 0 )
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d004      	beq.n	801031c <prvTCPCreateStream+0x128>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	68ba      	ldr	r2, [r7, #8]
 8010316:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 801031a:	e003      	b.n	8010324 <prvTCPCreateStream+0x130>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	68ba      	ldr	r2, [r7, #8]
 8010320:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            }
        }

        return pxBuffer;
 8010324:	68bb      	ldr	r3, [r7, #8]
    }
 8010326:	4618      	mov	r0, r3
 8010328:	3720      	adds	r7, #32
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}
 801032e:	bf00      	nop
 8010330:	08027888 	.word	0x08027888
 8010334:	51eb851f 	.word	0x51eb851f
 8010338:	08025f7c 	.word	0x08025f7c
 801033c:	200015c8 	.word	0x200015c8
 8010340:	08025fa0 	.word	0x08025fa0

08010344 <vTCPAddRxdata_Callback>:
 * @param[in] ulByteCount The number of bytes that were received.
 */
    static void vTCPAddRxdata_Callback( FreeRTOS_Socket_t * pxSocket,
                                        const uint8_t * pcData,
                                        uint32_t ulByteCount )
    {
 8010344:	b580      	push	{r7, lr}
 8010346:	b08a      	sub	sp, #40	@ 0x28
 8010348:	af02      	add	r7, sp, #8
 801034a:	60f8      	str	r0, [r7, #12]
 801034c:	60b9      	str	r1, [r7, #8]
 801034e:	607a      	str	r2, [r7, #4]
        const uint8_t * pucBuffer = pcData;
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	61fb      	str	r3, [r7, #28]

        /* The socket owner has installed an OnReceive handler. Pass the
         * Rx data, without copying from the rxStream, to the user. */
        for( ; ; )
        {
            uint8_t * ucReadPtr = NULL;
 8010354:	2300      	movs	r3, #0
 8010356:	617b      	str	r3, [r7, #20]
            uint32_t ulCount;

            if( pucBuffer != NULL )
 8010358:	69fb      	ldr	r3, [r7, #28]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d006      	beq.n	801036c <vTCPAddRxdata_Callback+0x28>
            {
                ucReadPtr = ( uint8_t * ) pucBuffer;
 801035e:	69fb      	ldr	r3, [r7, #28]
 8010360:	617b      	str	r3, [r7, #20]
                ulCount = ulByteCount;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	61bb      	str	r3, [r7, #24]
                pucBuffer = NULL;
 8010366:	2300      	movs	r3, #0
 8010368:	61fb      	str	r3, [r7, #28]
 801036a:	e009      	b.n	8010380 <vTCPAddRxdata_Callback+0x3c>
            }
            else
            {
                ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, &( ucReadPtr ) );
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010372:	f107 0214 	add.w	r2, r7, #20
 8010376:	4611      	mov	r1, r2
 8010378:	4618      	mov	r0, r3
 801037a:	f000 fc92 	bl	8010ca2 <uxStreamBufferGetPtr>
 801037e:	61b8      	str	r0, [r7, #24]
            }

            if( ulCount == 0U )
 8010380:	69bb      	ldr	r3, [r7, #24]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d011      	beq.n	80103aa <vTCPAddRxdata_Callback+0x66>
                break;
            }

            /* For advanced users only: here a pointer to the RX-stream of a socket
             * is passed to an application hook. */
            ( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801038c:	6979      	ldr	r1, [r7, #20]
 801038e:	69ba      	ldr	r2, [r7, #24]
 8010390:	68f8      	ldr	r0, [r7, #12]
 8010392:	4798      	blx	r3
            /* Forward the tail in the RX stream. */
            ( void ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0U, NULL, ( size_t ) ulCount, pdFALSE );
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 801039a:	2300      	movs	r3, #0
 801039c:	9300      	str	r3, [sp, #0]
 801039e:	69bb      	ldr	r3, [r7, #24]
 80103a0:	2200      	movs	r2, #0
 80103a2:	2100      	movs	r1, #0
 80103a4:	f000 fd1d 	bl	8010de2 <uxStreamBufferGet>
        {
 80103a8:	e7d4      	b.n	8010354 <vTCPAddRxdata_Callback+0x10>
        }
    }
 80103aa:	bf00      	nop
 80103ac:	3720      	adds	r7, #32
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}

080103b2 <vTCPAddRxdata_Stored>:
 *        RX-stream. When the space is dropped below a threshold, it may set the
 *        bit field 'bLowWater'. Also the socket's events bits for READ will be set.
 * @param[in] pxSocket the socket that has received new data.
 */
    static void vTCPAddRxdata_Stored( FreeRTOS_Socket_t * pxSocket )
    {
 80103b2:	b580      	push	{r7, lr}
 80103b4:	b084      	sub	sp, #16
 80103b6:	af00      	add	r7, sp, #0
 80103b8:	6078      	str	r0, [r7, #4]
        /* See if running out of space. */
        if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80103c0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d121      	bne.n	801040e <vTCPAddRxdata_Stored+0x5c>
        {
            size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80103d0:	4618      	mov	r0, r3
 80103d2:	f000 fbd7 	bl	8010b84 <uxStreamBufferFrontSpace>
 80103d6:	60f8      	str	r0, [r7, #12]

            if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80103de:	68fa      	ldr	r2, [r7, #12]
 80103e0:	429a      	cmp	r2, r3
 80103e2:	d814      	bhi.n	801040e <vTCPAddRxdata_Stored+0x5c>
            {
                pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80103ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80103ee:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80103f2:	687a      	ldr	r2, [r7, #4]
 80103f4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80103f8:	f043 0301 	orr.w	r3, r3, #1
 80103fc:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* bLowWater was reached, send the changed window size. */
                pxSocket->u.xTCP.usTimeout = 1U;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2201      	movs	r2, #1
 8010404:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8010408:	2006      	movs	r0, #6
 801040a:	f7f9 fa1b 	bl	8009844 <xSendEventToIPTask>
            }
        }

        /* New incoming data is available, wake up the user.   User's
         * semaphores will be set just before the IP-task goes asleep. */
        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f043 0201 	orr.w	r2, r3, #1
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	601a      	str	r2, [r3, #0]

        #if ipconfigSUPPORT_SELECT_FUNCTION == 1
        {
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801041e:	f003 0301 	and.w	r3, r3, #1
 8010422:	2b00      	cmp	r3, #0
 8010424:	d005      	beq.n	8010432 <vTCPAddRxdata_Stored+0x80>
            {
                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	601a      	str	r2, [r3, #0]
            }
        }
        #endif
    }
 8010432:	bf00      	nop
 8010434:	3710      	adds	r7, #16
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
	...

0801043c <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 801043c:	b5b0      	push	{r4, r5, r7, lr}
 801043e:	b08c      	sub	sp, #48	@ 0x30
 8010440:	af04      	add	r7, sp, #16
 8010442:	60f8      	str	r0, [r7, #12]
 8010444:	60b9      	str	r1, [r7, #8]
 8010446:	607a      	str	r2, [r7, #4]
 8010448:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010450:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 8010452:	2300      	movs	r3, #0
 8010454:	61bb      	str	r3, [r7, #24]

        #if ( ipconfigUSE_CALLBACKS == 1 )
            BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801045c:	2b00      	cmp	r3, #0
 801045e:	d001      	beq.n	8010464 <lTCPAddRxdata+0x28>
 8010460:	2301      	movs	r3, #1
 8010462:	e000      	b.n	8010466 <lTCPAddRxdata+0x2a>
 8010464:	2300      	movs	r3, #0
 8010466:	613b      	str	r3, [r7, #16]
            const uint8_t * pucBuffer = NULL;
 8010468:	2300      	movs	r3, #0
 801046a:	617b      	str	r3, [r7, #20]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 801046c:	69fb      	ldr	r3, [r7, #28]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d10a      	bne.n	8010488 <lTCPAddRxdata+0x4c>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 8010472:	2101      	movs	r1, #1
 8010474:	68f8      	ldr	r0, [r7, #12]
 8010476:	f7ff febd 	bl	80101f4 <prvTCPCreateStream>
 801047a:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 801047c:	69fb      	ldr	r3, [r7, #28]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d102      	bne.n	8010488 <lTCPAddRxdata+0x4c>
            {
                xResult = -1;
 8010482:	f04f 33ff 	mov.w	r3, #4294967295
 8010486:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 8010488:	69bb      	ldr	r3, [r7, #24]
 801048a:	2b00      	cmp	r3, #0
 801048c:	db41      	blt.n	8010512 <lTCPAddRxdata+0xd6>
        {
            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0U ) && ( pcData != NULL ) )
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d00f      	beq.n	80104b4 <lTCPAddRxdata+0x78>
 8010494:	69f8      	ldr	r0, [r7, #28]
 8010496:	f000 fb86 	bl	8010ba6 <uxStreamBufferGetSize>
 801049a:	4603      	mov	r3, r0
 801049c:	2b00      	cmp	r3, #0
 801049e:	d109      	bne.n	80104b4 <lTCPAddRxdata+0x78>
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d106      	bne.n	80104b4 <lTCPAddRxdata+0x78>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d003      	beq.n	80104b4 <lTCPAddRxdata+0x78>
                {
                    /* Data can be passed directly to the user because there is
                     * no data in the RX-stream, it the new data must be stored
                     * at offset zero, and a buffer 'pcData' is provided.
                     */
                    pucBuffer = pcData;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	617b      	str	r3, [r7, #20]

                    /* Zero-copy for call-back: no need to add the bytes to the
                     * stream, only the pointer will be advanced by uxStreamBufferAdd(). */
                    pcData = NULL;
 80104b0:	2300      	movs	r3, #0
 80104b2:	607b      	str	r3, [r7, #4]
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	687a      	ldr	r2, [r7, #4]
 80104b8:	68b9      	ldr	r1, [r7, #8]
 80104ba:	69f8      	ldr	r0, [r7, #28]
 80104bc:	f000 fc11 	bl	8010ce2 <uxStreamBufferAdd>
 80104c0:	4603      	mov	r3, r0
 80104c2:	61bb      	str	r3, [r7, #24]

            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            {
                if( xResult != ( int32_t ) ulByteCount )
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	69ba      	ldr	r2, [r7, #24]
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d013      	beq.n	80104f4 <lTCPAddRxdata+0xb8>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	681c      	ldr	r4, [r3, #0]
 80104d0:	69fb      	ldr	r3, [r7, #28]
 80104d2:	689d      	ldr	r5, [r3, #8]
 80104d4:	69f8      	ldr	r0, [r7, #28]
 80104d6:	f000 fb55 	bl	8010b84 <uxStreamBufferFrontSpace>
 80104da:	4602      	mov	r2, r0
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	68db      	ldr	r3, [r3, #12]
 80104e0:	9303      	str	r3, [sp, #12]
 80104e2:	9202      	str	r2, [sp, #8]
 80104e4:	9501      	str	r5, [sp, #4]
 80104e6:	9400      	str	r4, [sp, #0]
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	69ba      	ldr	r2, [r7, #24]
 80104ec:	68b9      	ldr	r1, [r7, #8]
 80104ee:	480b      	ldr	r0, [pc, #44]	@ (801051c <lTCPAddRxdata+0xe0>)
 80104f0:	f011 fe2a 	bl	8022148 <lUDPLoggingPrintf>
                                             ( unsigned int ) pxStream->uxFront ) );
                }
            }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d10b      	bne.n	8010512 <lTCPAddRxdata+0xd6>
            {
                /* Data is being added to rxStream at the head (offs = 0) */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                    if( bHasHandler != pdFALSE )
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d005      	beq.n	801050c <lTCPAddRxdata+0xd0>
                    {
                        vTCPAddRxdata_Callback( pxSocket, pucBuffer, ulByteCount );
 8010500:	683a      	ldr	r2, [r7, #0]
 8010502:	6979      	ldr	r1, [r7, #20]
 8010504:	68f8      	ldr	r0, [r7, #12]
 8010506:	f7ff ff1d 	bl	8010344 <vTCPAddRxdata_Callback>
 801050a:	e002      	b.n	8010512 <lTCPAddRxdata+0xd6>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    vTCPAddRxdata_Stored( pxSocket );
 801050c:	68f8      	ldr	r0, [r7, #12]
 801050e:	f7ff ff50 	bl	80103b2 <vTCPAddRxdata_Stored>
                }
            }
        }

        return xResult;
 8010512:	69bb      	ldr	r3, [r7, #24]
    }
 8010514:	4618      	mov	r0, r3
 8010516:	3720      	adds	r7, #32
 8010518:	46bd      	mov	sp, r7
 801051a:	bdb0      	pop	{r4, r5, r7, pc}
 801051c:	08025fdc 	.word	0x08025fdc

08010520 <FreeRTOS_tx_space>:
 * @param[in] xSocket the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 8010520:	b580      	push	{r7, lr}
 8010522:	b084      	sub	sp, #16
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010532:	2b06      	cmp	r3, #6
 8010534:	d003      	beq.n	801053e <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010536:	f06f 0315 	mvn.w	r3, #21
 801053a:	60fb      	str	r3, [r7, #12]
 801053c:	e011      	b.n	8010562 <FreeRTOS_tx_space+0x42>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010544:	2b00      	cmp	r3, #0
 8010546:	d008      	beq.n	801055a <FreeRTOS_tx_space+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801054e:	4618      	mov	r0, r3
 8010550:	f000 fb07 	bl	8010b62 <uxStreamBufferGetSpace>
 8010554:	4603      	mov	r3, r0
 8010556:	60fb      	str	r3, [r7, #12]
 8010558:	e003      	b.n	8010562 <FreeRTOS_tx_space+0x42>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010560:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8010562:	68fb      	ldr	r3, [r7, #12]
    }
 8010564:	4618      	mov	r0, r3
 8010566:	3710      	adds	r7, #16
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}

0801056c <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 801056c:	b580      	push	{r7, lr}
 801056e:	b084      	sub	sp, #16
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 801057e:	2b06      	cmp	r3, #6
 8010580:	d003      	beq.n	801058a <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010582:	f06f 0315 	mvn.w	r3, #21
 8010586:	60fb      	str	r3, [r7, #12]
 8010588:	e00f      	b.n	80105aa <FreeRTOS_tx_size+0x3e>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010590:	2b00      	cmp	r3, #0
 8010592:	d008      	beq.n	80105a6 <FreeRTOS_tx_size+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801059a:	4618      	mov	r0, r3
 801059c:	f000 fb03 	bl	8010ba6 <uxStreamBufferGetSize>
 80105a0:	4603      	mov	r3, r0
 80105a2:	60fb      	str	r3, [r7, #12]
 80105a4:	e001      	b.n	80105aa <FreeRTOS_tx_size+0x3e>
            }
            else
            {
                xReturn = 0;
 80105a6:	2300      	movs	r3, #0
 80105a8:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 80105aa:	68fb      	ldr	r3, [r7, #12]
    }
 80105ac:	4618      	mov	r0, r3
 80105ae:	3710      	adds	r7, #16
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <FreeRTOS_issocketconnected>:
 * @param[in] xSocket The socket being checked.
 *
 * @return pdTRUE if TCP socket is connected.
 */
    BaseType_t FreeRTOS_issocketconnected( ConstSocket_t xSocket )
    {
 80105b4:	b480      	push	{r7}
 80105b6:	b085      	sub	sp, #20
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80105c0:	2300      	movs	r3, #0
 80105c2:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80105ca:	2b06      	cmp	r3, #6
 80105cc:	d003      	beq.n	80105d6 <FreeRTOS_issocketconnected+0x22>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 80105ce:	f06f 0315 	mvn.w	r3, #21
 80105d2:	60fb      	str	r3, [r7, #12]
 80105d4:	e00b      	b.n	80105ee <FreeRTOS_issocketconnected+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80105dc:	2b04      	cmp	r3, #4
 80105de:	d906      	bls.n	80105ee <FreeRTOS_issocketconnected+0x3a>
            {
                if( pxSocket->u.xTCP.eTCPState < eCLOSE_WAIT )
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80105e6:	2b07      	cmp	r3, #7
 80105e8:	d801      	bhi.n	80105ee <FreeRTOS_issocketconnected+0x3a>
                {
                    xReturn = pdTRUE;
 80105ea:	2301      	movs	r3, #1
 80105ec:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xReturn;
 80105ee:	68fb      	ldr	r3, [r7, #12]
    }
 80105f0:	4618      	mov	r0, r3
 80105f2:	3714      	adds	r7, #20
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr

080105fc <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 801060e:	2b06      	cmp	r3, #6
 8010610:	d003      	beq.n	801061a <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010612:	f06f 0315 	mvn.w	r3, #21
 8010616:	60fb      	str	r3, [r7, #12]
 8010618:	e00f      	b.n	801063a <FreeRTOS_rx_size+0x3e>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010620:	2b00      	cmp	r3, #0
 8010622:	d008      	beq.n	8010636 <FreeRTOS_rx_size+0x3a>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801062a:	4618      	mov	r0, r3
 801062c:	f000 fabb 	bl	8010ba6 <uxStreamBufferGetSize>
 8010630:	4603      	mov	r3, r0
 8010632:	60fb      	str	r3, [r7, #12]
 8010634:	e001      	b.n	801063a <FreeRTOS_rx_size+0x3e>
        }
        else
        {
            xReturn = 0;
 8010636:	2300      	movs	r3, #0
 8010638:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 801063a:	68fb      	ldr	r3, [r7, #12]
    }
 801063c:	4618      	mov	r0, r3
 801063e:	3710      	adds	r7, #16
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <xSocketValid>:
 * @param[in] xSocket The socket to be checked.
 * @return pdTRUE if the socket is valid, else pdFALSE.
 *
 */
BaseType_t xSocketValid( const ConstSocket_t xSocket )
{
 8010644:	b480      	push	{r7}
 8010646:	b085      	sub	sp, #20
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturnValue = pdFALSE;
 801064c:	2300      	movs	r3, #0
 801064e:	60fb      	str	r3, [r7, #12]
     */

    /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
    /* coverity[misra_c_2012_rule_11_4_violation] */
    if( ( xSocket != FREERTOS_INVALID_SOCKET ) && ( xSocket != NULL ) )
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010656:	d004      	beq.n	8010662 <xSocketValid+0x1e>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d001      	beq.n	8010662 <xSocketValid+0x1e>
    {
        xReturnValue = pdTRUE;
 801065e:	2301      	movs	r3, #1
 8010660:	60fb      	str	r3, [r7, #12]
    }

    return xReturnValue;
 8010662:	68fb      	ldr	r3, [r7, #12]
}
 8010664:	4618      	mov	r0, r3
 8010666:	3714      	adds	r7, #20
 8010668:	46bd      	mov	sp, r7
 801066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066e:	4770      	bx	lr

08010670 <vTCPNetStat_TCPSocket>:
 * @brief A helper function of vTCPNetStat(), see below.
 *
 * @param[in] pxSocket The socket that needs logging.
 */
    static void vTCPNetStat_TCPSocket( const FreeRTOS_Socket_t * pxSocket )
    {
 8010670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010674:	b09c      	sub	sp, #112	@ 0x70
 8010676:	af08      	add	r7, sp, #32
 8010678:	6078      	str	r0, [r7, #4]
        char pcRemoteIp[ 40 ];
        int xIPWidth = 32;
 801067a:	2320      	movs	r3, #32
 801067c:	64bb      	str	r3, [r7, #72]	@ 0x48

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 801067e:	f7f4 f911 	bl	80048a4 <xTaskGetTickCount>
 8010682:	4602      	mov	r2, r0
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801068a:	1ad3      	subs	r3, r2, r3
 801068c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        #else
            TickType_t age = 0U;
        #endif

        char ucChildText[ 16 ] = "";
 801068e:	2300      	movs	r3, #0
 8010690:	60fb      	str	r3, [r7, #12]
 8010692:	f107 0310 	add.w	r3, r7, #16
 8010696:	2200      	movs	r2, #0
 8010698:	601a      	str	r2, [r3, #0]
 801069a:	605a      	str	r2, [r3, #4]
 801069c:	609a      	str	r2, [r3, #8]

        if( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eTCP_LISTEN )
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80106a4:	2b01      	cmp	r3, #1
 80106a6:	d11f      	bne.n	80106e8 <vTCPNetStat_TCPSocket+0x78>
        {
            /* Using function "snprintf". */
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                 pxSocket->u.xTCP.usChildCount,
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 80106ae:	461a      	mov	r2, r3
                                                 pxSocket->u.xTCP.usBacklog );
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 80106b6:	f107 000c 	add.w	r0, r7, #12
 80106ba:	9300      	str	r3, [sp, #0]
 80106bc:	4613      	mov	r3, r2
 80106be:	4a3b      	ldr	r2, [pc, #236]	@ (80107ac <vTCPNetStat_TCPSocket+0x13c>)
 80106c0:	2110      	movs	r1, #16
 80106c2:	f012 fd6d 	bl	80231a0 <snprintf>
 80106c6:	6478      	str	r0, [r7, #68]	@ 0x44
            ( void ) copied_len;
            /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
            configASSERT( copied_len >= 0 );                                /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 80106c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	da04      	bge.n	80106d8 <vTCPNetStat_TCPSocket+0x68>
 80106ce:	f241 61df 	movw	r1, #5855	@ 0x16df
 80106d2:	4837      	ldr	r0, [pc, #220]	@ (80107b0 <vTCPNetStat_TCPSocket+0x140>)
 80106d4:	f7f1 f940 	bl	8001958 <vAssertCalled>
            configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) ); /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 80106d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106da:	2b0f      	cmp	r3, #15
 80106dc:	dd04      	ble.n	80106e8 <vTCPNetStat_TCPSocket+0x78>
 80106de:	f44f 51b7 	mov.w	r1, #5856	@ 0x16e0
 80106e2:	4833      	ldr	r0, [pc, #204]	@ (80107b0 <vTCPNetStat_TCPSocket+0x140>)
 80106e4:	f7f1 f938 	bl	8001958 <vAssertCalled>
        }

        if( age > 999999U )
 80106e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106ea:	4a32      	ldr	r2, [pc, #200]	@ (80107b4 <vTCPNetStat_TCPSocket+0x144>)
 80106ec:	4293      	cmp	r3, r2
 80106ee:	d901      	bls.n	80106f4 <vTCPNetStat_TCPSocket+0x84>
        {
            age = 999999U;
 80106f0:	4b30      	ldr	r3, [pc, #192]	@ (80107b4 <vTCPNetStat_TCPSocket+0x144>)
 80106f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	7a1b      	ldrb	r3, [r3, #8]
 80106f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80106fc:	b2db      	uxtb	r3, r3
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d002      	beq.n	8010708 <vTCPNetStat_TCPSocket+0x98>
 8010702:	2b01      	cmp	r3, #1
 8010704:	d009      	beq.n	801071a <vTCPNetStat_TCPSocket+0xaa>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* MISRA 16.4 Compliance */
                break;
 8010706:	e011      	b.n	801072c <vTCPNetStat_TCPSocket+0xbc>
                    ( void ) snprintf( pcRemoteIp, sizeof( pcRemoteIp ), "%xip", ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801070c:	f107 001c 	add.w	r0, r7, #28
 8010710:	4a29      	ldr	r2, [pc, #164]	@ (80107b8 <vTCPNetStat_TCPSocket+0x148>)
 8010712:	2128      	movs	r1, #40	@ 0x28
 8010714:	f012 fd44 	bl	80231a0 <snprintf>
                    break;
 8010718:	e008      	b.n	801072c <vTCPNetStat_TCPSocket+0xbc>
                                       "%pip", ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes );
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	3354      	adds	r3, #84	@ 0x54
                    ( void ) snprintf( pcRemoteIp,
 801071e:	f107 001c 	add.w	r0, r7, #28
 8010722:	4a26      	ldr	r2, [pc, #152]	@ (80107bc <vTCPNetStat_TCPSocket+0x14c>)
 8010724:	2128      	movs	r1, #40	@ 0x28
 8010726:	f012 fd3b 	bl	80231a0 <snprintf>
                    break;
 801072a:	bf00      	nop
        }

        FreeRTOS_printf( ( "TCP %5d %-*s:%5d %d/%d %-13.13s %6u %6u%s\n",
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010730:	4698      	mov	r8, r3
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010738:	461c      	mov	r4, r3
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010740:	2b00      	cmp	r3, #0
 8010742:	bf14      	ite	ne
 8010744:	2301      	movne	r3, #1
 8010746:	2300      	moveq	r3, #0
 8010748:	b2db      	uxtb	r3, r3
 801074a:	461d      	mov	r5, r3
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010752:	2b00      	cmp	r3, #0
 8010754:	bf14      	ite	ne
 8010756:	2301      	movne	r3, #1
 8010758:	2300      	moveq	r3, #0
 801075a:	b2db      	uxtb	r3, r3
 801075c:	461e      	mov	r6, r3
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010764:	4618      	mov	r0, r3
 8010766:	f002 fbf5 	bl	8012f54 <FreeRTOS_GetTCPStateName>
 801076a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801076c:	4a11      	ldr	r2, [pc, #68]	@ (80107b4 <vTCPNetStat_TCPSocket+0x144>)
 801076e:	4293      	cmp	r3, r2
 8010770:	bf28      	it	cs
 8010772:	4613      	movcs	r3, r2
 8010774:	687a      	ldr	r2, [r7, #4]
 8010776:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
 801077a:	603a      	str	r2, [r7, #0]
 801077c:	f107 011c 	add.w	r1, r7, #28
 8010780:	f107 020c 	add.w	r2, r7, #12
 8010784:	9206      	str	r2, [sp, #24]
 8010786:	683a      	ldr	r2, [r7, #0]
 8010788:	9205      	str	r2, [sp, #20]
 801078a:	9304      	str	r3, [sp, #16]
 801078c:	9003      	str	r0, [sp, #12]
 801078e:	9602      	str	r6, [sp, #8]
 8010790:	9501      	str	r5, [sp, #4]
 8010792:	9400      	str	r4, [sp, #0]
 8010794:	460b      	mov	r3, r1
 8010796:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010798:	4641      	mov	r1, r8
 801079a:	4809      	ldr	r0, [pc, #36]	@ (80107c0 <vTCPNetStat_TCPSocket+0x150>)
 801079c:	f011 fcd4 	bl	8022148 <lUDPLoggingPrintf>
                           ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                           FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.eTCPState ),
                           ( unsigned ) ( ( age > 999999U ) ? 999999U : age ), /* Format 'age' for printing */
                           pxSocket->u.xTCP.usTimeout,
                           ucChildText ) );
    }
 80107a0:	bf00      	nop
 80107a2:	3750      	adds	r7, #80	@ 0x50
 80107a4:	46bd      	mov	sp, r7
 80107a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107aa:	bf00      	nop
 80107ac:	08026024 	.word	0x08026024
 80107b0:	08025b44 	.word	0x08025b44
 80107b4:	000f423f 	.word	0x000f423f
 80107b8:	0802602c 	.word	0x0802602c
 80107bc:	08026034 	.word	0x08026034
 80107c0:	0802603c 	.word	0x0802603c

080107c4 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b08a      	sub	sp, #40	@ 0x28
 80107c8:	af02      	add	r7, sp, #8
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 80107ca:	2300      	movs	r3, #0
 80107cc:	61bb      	str	r3, [r7, #24]
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 80107ce:	f006 fe59 	bl	8017484 <uxGetMinimumFreeNetworkBuffers>
 80107d2:	6178      	str	r0, [r7, #20]
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 80107d4:	f006 fe62 	bl	801749c <uxGetNumberOfFreeNetworkBuffers>
 80107d8:	6138      	str	r0, [r7, #16]

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 80107da:	4b26      	ldr	r3, [pc, #152]	@ (8010874 <vTCPNetStat+0xb0>)
 80107dc:	689b      	ldr	r3, [r3, #8]
 80107de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107e2:	d003      	beq.n	80107ec <vTCPNetStat+0x28>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 80107e4:	4824      	ldr	r0, [pc, #144]	@ (8010878 <vTCPNetStat+0xb4>)
 80107e6:	f011 fcaf 	bl	8022148 <lUDPLoggingPrintf>
                               ( int ) count,
                               ( unsigned ) uxMinimum,
                               ( unsigned ) uxCurrent,
                               ( unsigned ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 80107ea:	e03f      	b.n	801086c <vTCPNetStat+0xa8>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 80107ec:	4b23      	ldr	r3, [pc, #140]	@ (801087c <vTCPNetStat+0xb8>)
 80107ee:	60fb      	str	r3, [r7, #12]
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 80107f0:	4b23      	ldr	r3, [pc, #140]	@ (8010880 <vTCPNetStat+0xbc>)
 80107f2:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 80107f4:	4823      	ldr	r0, [pc, #140]	@ (8010884 <vTCPNetStat+0xc0>)
 80107f6:	f011 fca7 	bl	8022148 <lUDPLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80107fa:	4b1e      	ldr	r3, [pc, #120]	@ (8010874 <vTCPNetStat+0xb0>)
 80107fc:	68db      	ldr	r3, [r3, #12]
 80107fe:	61fb      	str	r3, [r7, #28]
 8010800:	e00b      	b.n	801081a <vTCPNetStat+0x56>
                const FreeRTOS_Socket_t * pxSocket = ( ( const FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010802:	69fb      	ldr	r3, [r7, #28]
 8010804:	68db      	ldr	r3, [r3, #12]
 8010806:	607b      	str	r3, [r7, #4]
                vTCPNetStat_TCPSocket( pxSocket );
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f7ff ff31 	bl	8010670 <vTCPNetStat_TCPSocket>
                count++;
 801080e:	69bb      	ldr	r3, [r7, #24]
 8010810:	3301      	adds	r3, #1
 8010812:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 8010814:	69fb      	ldr	r3, [r7, #28]
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndTCP;
 801081a:	69fa      	ldr	r2, [r7, #28]
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	429a      	cmp	r2, r3
 8010820:	d1ef      	bne.n	8010802 <vTCPNetStat+0x3e>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 8010822:	4b19      	ldr	r3, [pc, #100]	@ (8010888 <vTCPNetStat+0xc4>)
 8010824:	68db      	ldr	r3, [r3, #12]
 8010826:	61fb      	str	r3, [r7, #28]
 8010828:	e014      	b.n	8010854 <vTCPNetStat+0x90>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 801082a:	69fb      	ldr	r3, [r7, #28]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	b29b      	uxth	r3, r3
 8010830:	021b      	lsls	r3, r3, #8
 8010832:	b29a      	uxth	r2, r3
 8010834:	69fb      	ldr	r3, [r7, #28]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	0a1b      	lsrs	r3, r3, #8
 801083a:	b29b      	uxth	r3, r3
 801083c:	4313      	orrs	r3, r2
 801083e:	b29b      	uxth	r3, r3
 8010840:	4619      	mov	r1, r3
 8010842:	4812      	ldr	r0, [pc, #72]	@ (801088c <vTCPNetStat+0xc8>)
 8010844:	f011 fc80 	bl	8022148 <lUDPLoggingPrintf>
                count++;
 8010848:	69bb      	ldr	r3, [r7, #24]
 801084a:	3301      	adds	r3, #1
 801084c:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 801084e:	69fb      	ldr	r3, [r7, #28]
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndUDP;
 8010854:	69fa      	ldr	r2, [r7, #28]
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	429a      	cmp	r2, r3
 801085a:	d1e6      	bne.n	801082a <vTCPNetStat+0x66>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %d sockets %u < %u < %u buffers free\n",
 801085c:	2340      	movs	r3, #64	@ 0x40
 801085e:	9300      	str	r3, [sp, #0]
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	697a      	ldr	r2, [r7, #20]
 8010864:	69b9      	ldr	r1, [r7, #24]
 8010866:	480a      	ldr	r0, [pc, #40]	@ (8010890 <vTCPNetStat+0xcc>)
 8010868:	f011 fc6e 	bl	8022148 <lUDPLoggingPrintf>
    }
 801086c:	bf00      	nop
 801086e:	3720      	adds	r7, #32
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	20001584 	.word	0x20001584
 8010878:	08026068 	.word	0x08026068
 801087c:	2000158c 	.word	0x2000158c
 8010880:	20001578 	.word	0x20001578
 8010884:	08026084 	.word	0x08026084
 8010888:	20001570 	.word	0x20001570
 801088c:	080260cc 	.word	0x080260cc
 8010890:	080260dc 	.word	0x080260dc

08010894 <vSocketSelectTCP>:
 *
 * @param[in] pxSocket The socket which needs to be checked.
 * @return An event mask of events that are active for this socket.
 */
        static EventBits_t vSocketSelectTCP( FreeRTOS_Socket_t * pxSocket )
        {
 8010894:	b580      	push	{r7, lr}
 8010896:	b086      	sub	sp, #24
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
            /* Check if the TCP socket has already been accepted by
             * the owner.  If not, it is useless to return it from a
             * select(). */
            BaseType_t bAccepted = pdFALSE;
 801089c:	2300      	movs	r3, #0
 801089e:	617b      	str	r3, [r7, #20]
            EventBits_t xSocketBits = 0U;
 80108a0:	2300      	movs	r3, #0
 80108a2:	613b      	str	r3, [r7, #16]

            if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80108aa:	f003 0304 	and.w	r3, r3, #4
 80108ae:	b2db      	uxtb	r3, r3
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d109      	bne.n	80108c8 <vSocketSelectTCP+0x34>
            {
                if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80108ba:	f003 0302 	and.w	r3, r3, #2
 80108be:	b2db      	uxtb	r3, r3
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d101      	bne.n	80108c8 <vSocketSelectTCP+0x34>
                {
                    bAccepted = pdTRUE;
 80108c4:	2301      	movs	r3, #1
 80108c6:	617b      	str	r3, [r7, #20]
                }
            }

            /* Is the set owner interested in READ events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108cc:	f003 0301 	and.w	r3, r3, #1
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d038      	beq.n	8010946 <vSocketSelectTCP+0xb2>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80108da:	2b01      	cmp	r3, #1
 80108dc:	d111      	bne.n	8010902 <vSocketSelectTCP+0x6e>
                {
                    if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d02f      	beq.n	8010946 <vSocketSelectTCP+0xb2>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80108ea:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80108ee:	f003 0302 	and.w	r3, r3, #2
 80108f2:	b2db      	uxtb	r3, r3
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d026      	beq.n	8010946 <vSocketSelectTCP+0xb2>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	f043 0301 	orr.w	r3, r3, #1
 80108fe:	613b      	str	r3, [r7, #16]
 8010900:	e021      	b.n	8010946 <vSocketSelectTCP+0xb2>
                    }
                }
                else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010908:	f003 0308 	and.w	r3, r3, #8
 801090c:	b2db      	uxtb	r3, r3
 801090e:	2b00      	cmp	r3, #0
 8010910:	d00c      	beq.n	801092c <vSocketSelectTCP+0x98>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010918:	f003 0302 	and.w	r3, r3, #2
 801091c:	b2db      	uxtb	r3, r3
 801091e:	2b00      	cmp	r3, #0
 8010920:	d004      	beq.n	801092c <vSocketSelectTCP+0x98>
                {
                    /* This socket has the re-use flag. After connecting it turns into
                     * a connected socket. Set the READ event, so that accept() will be called. */
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	f043 0301 	orr.w	r3, r3, #1
 8010928:	613b      	str	r3, [r7, #16]
 801092a:	e00c      	b.n	8010946 <vSocketSelectTCP+0xb2>
                }
                else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d009      	beq.n	8010946 <vSocketSelectTCP+0xb2>
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f7ff fe62 	bl	80105fc <FreeRTOS_rx_size>
 8010938:	4603      	mov	r3, r0
 801093a:	2b00      	cmp	r3, #0
 801093c:	dd03      	ble.n	8010946 <vSocketSelectTCP+0xb2>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	f043 0301 	orr.w	r3, r3, #1
 8010944:	613b      	str	r3, [r7, #16]
                    /* Nothing. */
                }
            }

            /* Is the set owner interested in EXCEPTION events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801094a:	f003 0304 	and.w	r3, r3, #4
 801094e:	2b00      	cmp	r3, #0
 8010950:	d00d      	beq.n	801096e <vSocketSelectTCP+0xda>
            {
                if( ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.eTCPState == eCLOSED ) )
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010958:	2b08      	cmp	r3, #8
 801095a:	d004      	beq.n	8010966 <vSocketSelectTCP+0xd2>
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010962:	2b00      	cmp	r3, #0
 8010964:	d103      	bne.n	801096e <vSocketSelectTCP+0xda>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	f043 0304 	orr.w	r3, r3, #4
 801096c:	613b      	str	r3, [r7, #16]
                }
            }

            /* Is the set owner interested in WRITE events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010972:	f003 0302 	and.w	r3, r3, #2
 8010976:	2b00      	cmp	r3, #0
 8010978:	d034      	beq.n	80109e4 <vSocketSelectTCP+0x150>
            {
                BaseType_t bMatch = pdFALSE;
 801097a:	2300      	movs	r3, #0
 801097c:	60fb      	str	r3, [r7, #12]

                if( bAccepted != 0 )
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d007      	beq.n	8010994 <vSocketSelectTCP+0x100>
                {
                    if( FreeRTOS_tx_space( pxSocket ) > 0 )
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f7ff fdcb 	bl	8010520 <FreeRTOS_tx_space>
 801098a:	4603      	mov	r3, r0
 801098c:	2b00      	cmp	r3, #0
 801098e:	dd01      	ble.n	8010994 <vSocketSelectTCP+0x100>
                    {
                        bMatch = pdTRUE;
 8010990:	2301      	movs	r3, #1
 8010992:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch == pdFALSE )
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d11d      	bne.n	80109d6 <vSocketSelectTCP+0x142>
                {
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80109a0:	f003 0308 	and.w	r3, r3, #8
 80109a4:	b2db      	uxtb	r3, r3
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d015      	beq.n	80109d6 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 80109b0:	2b04      	cmp	r3, #4
 80109b2:	d910      	bls.n	80109d6 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80109ba:	f003 0310 	and.w	r3, r3, #16
 80109be:	b2db      	uxtb	r3, r3
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d108      	bne.n	80109d6 <vSocketSelectTCP+0x142>
                    {
                        pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 80109c4:	687a      	ldr	r2, [r7, #4]
 80109c6:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80109ca:	f043 0310 	orr.w	r3, r3, #16
 80109ce:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        bMatch = pdTRUE;
 80109d2:	2301      	movs	r3, #1
 80109d4:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch != pdFALSE )
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d003      	beq.n	80109e4 <vSocketSelectTCP+0x150>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	f043 0302 	orr.w	r3, r3, #2
 80109e2:	613b      	str	r3, [r7, #16]
                }
            }

            return xSocketBits;
 80109e4:	693b      	ldr	r3, [r7, #16]
        }
 80109e6:	4618      	mov	r0, r3
 80109e8:	3718      	adds	r7, #24
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
	...

080109f0 <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet The socket-set which is to be waited on for change.
 */
    void vSocketSelect( const SocketSelect_t * pxSocketSet )
    {
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b08a      	sub	sp, #40	@ 0x28
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 80109f8:	2301      	movs	r3, #1
 80109fa:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 80109fc:	2300      	movs	r3, #0
 80109fe:	61fb      	str	r3, [r7, #28]

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 8010a00:	2300      	movs	r3, #0
 8010a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a04:	e043      	b.n	8010a8e <vSocketSelect+0x9e>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 8010a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d102      	bne.n	8010a12 <vSocketSelect+0x22>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxEnd = ( ( const ListItem_t * ) &( xBoundUDPSocketsList.xListEnd ) );
 8010a0c:	4b34      	ldr	r3, [pc, #208]	@ (8010ae0 <vSocketSelect+0xf0>)
 8010a0e:	617b      	str	r3, [r7, #20]
 8010a10:	e001      	b.n	8010a16 <vSocketSelect+0x26>
                else
                {
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010a12:	4b34      	ldr	r3, [pc, #208]	@ (8010ae4 <vSocketSelect+0xf4>)
 8010a14:	617b      	str	r3, [r7, #20]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	685b      	ldr	r3, [r3, #4]
 8010a1a:	61bb      	str	r3, [r7, #24]
 8010a1c:	e030      	b.n	8010a80 <vSocketSelect+0x90>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010a1e:	69bb      	ldr	r3, [r7, #24]
 8010a20:	68db      	ldr	r3, [r3, #12]
 8010a22:	60bb      	str	r3, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a28:	687a      	ldr	r2, [r7, #4]
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d124      	bne.n	8010a78 <vSocketSelect+0x88>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	623b      	str	r3, [r7, #32]

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010a38:	2b06      	cmp	r3, #6
 8010a3a:	d107      	bne.n	8010a4c <vSocketSelect+0x5c>
                    {
                        xSocketBits |= vSocketSelectTCP( pxSocket );
 8010a3c:	68b8      	ldr	r0, [r7, #8]
 8010a3e:	f7ff ff29 	bl	8010894 <vSocketSelectTCP>
 8010a42:	4602      	mov	r2, r0
 8010a44:	6a3b      	ldr	r3, [r7, #32]
 8010a46:	4313      	orrs	r3, r2
 8010a48:	623b      	str	r3, [r7, #32]
 8010a4a:	e00d      	b.n	8010a68 <vSocketSelect+0x78>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a50:	f003 0301 	and.w	r3, r3, #1
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d007      	beq.n	8010a68 <vSocketSelect+0x78>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d003      	beq.n	8010a68 <vSocketSelect+0x78>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010a60:	6a3b      	ldr	r3, [r7, #32]
 8010a62:	f043 0301 	orr.w	r3, r3, #1
 8010a66:	623b      	str	r3, [r7, #32]
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	6a3a      	ldr	r2, [r7, #32]
 8010a6c:	649a      	str	r2, [r3, #72]	@ 0x48

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 8010a6e:	69fa      	ldr	r2, [r7, #28]
 8010a70:	6a3b      	ldr	r3, [r7, #32]
 8010a72:	4313      	orrs	r3, r2
 8010a74:	61fb      	str	r3, [r7, #28]
 8010a76:	e000      	b.n	8010a7a <vSocketSelect+0x8a>
                    continue;
 8010a78:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 8010a7a:	69bb      	ldr	r3, [r7, #24]
 8010a7c:	685b      	ldr	r3, [r3, #4]
 8010a7e:	61bb      	str	r3, [r7, #24]
                 pxIterator != pxEnd;
 8010a80:	69ba      	ldr	r2, [r7, #24]
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d1ca      	bne.n	8010a1e <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 8010a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a8a:	3301      	adds	r3, #1
 8010a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	429a      	cmp	r2, r3
 8010a94:	ddb7      	ble.n	8010a06 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	2100      	movs	r1, #0
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7f2 fc15 	bl	80032cc <xEventGroupClearBits>
 8010aa2:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 8010aa4:	69fb      	ldr	r3, [r7, #28]
 8010aa6:	43da      	mvns	r2, r3
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	4013      	ands	r3, r2
 8010aac:	f003 030f 	and.w	r3, r3, #15
 8010ab0:	60fb      	str	r3, [r7, #12]
             * and cleared in FreeRTOS_select(). */
            xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d005      	beq.n	8010ac4 <vSocketSelect+0xd4>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	68f9      	ldr	r1, [r7, #12]
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7f2 fc04 	bl	80032cc <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681a      	ldr	r2, [r3, #0]
 8010ac8:	69fb      	ldr	r3, [r7, #28]
 8010aca:	f043 0310 	orr.w	r3, r3, #16
 8010ace:	4619      	mov	r1, r3
 8010ad0:	4610      	mov	r0, r2
 8010ad2:	f7f2 fc29 	bl	8003328 <xEventGroupSetBits>
    }
 8010ad6:	bf00      	nop
 8010ad8:	3728      	adds	r7, #40	@ 0x28
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}
 8010ade:	bf00      	nop
 8010ae0:	20001578 	.word	0x20001578
 8010ae4:	2000158c 	.word	0x2000158c

08010ae8 <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * const pxBuffer,
                            size_t uxLower,
                            size_t uxUpper )
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b087      	sub	sp, #28
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	60f8      	str	r0, [r7, #12]
 8010af0:	60b9      	str	r1, [r7, #8]
 8010af2:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	691b      	ldr	r3, [r3, #16]
 8010af8:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower - 1U;
 8010afa:	693a      	ldr	r2, [r7, #16]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	441a      	add	r2, r3
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	1ad3      	subs	r3, r2, r3
 8010b04:	3b01      	subs	r3, #1
 8010b06:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 8010b08:	697a      	ldr	r2, [r7, #20]
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d303      	bcc.n	8010b18 <uxStreamBufferSpace+0x30>
    {
        uxCount -= uxLength;
 8010b10:	697a      	ldr	r2, [r7, #20]
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	1ad3      	subs	r3, r2, r3
 8010b16:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 8010b18:	697b      	ldr	r3, [r7, #20]
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	371c      	adds	r7, #28
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b24:	4770      	bx	lr

08010b26 <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * const pxBuffer,
                               size_t uxLower,
                               size_t uxUpper )
{
 8010b26:	b480      	push	{r7}
 8010b28:	b087      	sub	sp, #28
 8010b2a:	af00      	add	r7, sp, #0
 8010b2c:	60f8      	str	r0, [r7, #12]
 8010b2e:	60b9      	str	r1, [r7, #8]
 8010b30:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	691b      	ldr	r3, [r3, #16]
 8010b36:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower;
 8010b38:	693a      	ldr	r2, [r7, #16]
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	441a      	add	r2, r3
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	1ad3      	subs	r3, r2, r3
 8010b42:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 8010b44:	697a      	ldr	r2, [r7, #20]
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d303      	bcc.n	8010b54 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= uxLength;
 8010b4c:	697a      	ldr	r2, [r7, #20]
 8010b4e:	693b      	ldr	r3, [r7, #16]
 8010b50:	1ad3      	subs	r3, r2, r3
 8010b52:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 8010b54:	697b      	ldr	r3, [r7, #20]
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	371c      	adds	r7, #28
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b60:	4770      	bx	lr

08010b62 <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * const pxBuffer )
{
 8010b62:	b580      	push	{r7, lr}
 8010b64:	b082      	sub	sp, #8
 8010b66:	af00      	add	r7, sp, #0
 8010b68:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxHead, pxBuffer->uxTail );
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	6899      	ldr	r1, [r3, #8]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	461a      	mov	r2, r3
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f7ff ffb7 	bl	8010ae8 <uxStreamBufferSpace>
 8010b7a:	4603      	mov	r3, r0
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3708      	adds	r7, #8
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}

08010b84 <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * const pxBuffer )
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b082      	sub	sp, #8
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxFront, pxBuffer->uxTail );
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	68d9      	ldr	r1, [r3, #12]
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	461a      	mov	r2, r3
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f7ff ffa6 	bl	8010ae8 <uxStreamBufferSpace>
 8010b9c:	4603      	mov	r3, r0
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3708      	adds	r7, #8
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}

08010ba6 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * const pxBuffer )
{
 8010ba6:	b580      	push	{r7, lr}
 8010ba8:	b082      	sub	sp, #8
 8010baa:	af00      	add	r7, sp, #0
 8010bac:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxTail, pxBuffer->uxHead );
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6819      	ldr	r1, [r3, #0]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	689b      	ldr	r3, [r3, #8]
 8010bb6:	461a      	mov	r2, r3
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f7ff ffb4 	bl	8010b26 <uxStreamBufferDistance>
 8010bbe:	4603      	mov	r3, r0
}
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	3708      	adds	r7, #8
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}

08010bc8 <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * const pxBuffer )
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b082      	sub	sp, #8
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxMid, pxBuffer->uxHead );
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6859      	ldr	r1, [r3, #4]
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	689b      	ldr	r3, [r3, #8]
 8010bd8:	461a      	mov	r2, r3
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f7ff ffa3 	bl	8010b26 <uxStreamBufferDistance>
 8010be0:	4603      	mov	r3, r0
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3708      	adds	r7, #8
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}

08010bea <vStreamBufferClear>:
/**
 * @brief Clear the stream buffer.
 * @param[in] pxBuffer The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * const pxBuffer )
{
 8010bea:	b480      	push	{r7}
 8010bec:	b083      	sub	sp, #12
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2200      	movs	r2, #0
 8010c02:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2200      	movs	r2, #0
 8010c08:	605a      	str	r2, [r3, #4]
}
 8010c0a:	bf00      	nop
 8010c0c:	370c      	adds	r7, #12
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c14:	4770      	bx	lr

08010c16 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer The circular stream buffer.
 * @param[in] uxCount The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * const pxBuffer,
                           const size_t uxCount )
{
 8010c16:	b580      	push	{r7, lr}
 8010c18:	b086      	sub	sp, #24
 8010c1a:	af00      	add	r7, sp, #0
 8010c1c:	6078      	str	r0, [r7, #4]
 8010c1e:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    const size_t uxLength = pxBuffer->LENGTH;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	691b      	ldr	r3, [r3, #16]
 8010c24:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f7ff ffce 	bl	8010bc8 <uxStreamBufferMidSpace>
 8010c2c:	60b8      	str	r0, [r7, #8]
    size_t uxMid = pxBuffer->uxMid;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	685b      	ldr	r3, [r3, #4]
 8010c32:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 8010c38:	693a      	ldr	r2, [r7, #16]
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d901      	bls.n	8010c44 <vStreamBufferMoveMid+0x2e>
    {
        uxMoveCount = uxSize;
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 8010c44:	697a      	ldr	r2, [r7, #20]
 8010c46:	693b      	ldr	r3, [r7, #16]
 8010c48:	4413      	add	r3, r2
 8010c4a:	617b      	str	r3, [r7, #20]

    if( uxMid >= uxLength )
 8010c4c:	697a      	ldr	r2, [r7, #20]
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d303      	bcc.n	8010c5c <vStreamBufferMoveMid+0x46>
    {
        uxMid -= uxLength;
 8010c54:	697a      	ldr	r2, [r7, #20]
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	1ad3      	subs	r3, r2, r3
 8010c5a:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	697a      	ldr	r2, [r7, #20]
 8010c60:	605a      	str	r2, [r3, #4]
}
 8010c62:	bf00      	nop
 8010c64:	3718      	adds	r7, #24
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bd80      	pop	{r7, pc}

08010c6a <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * const pxBuffer,
                                       size_t uxLeft,
                                       size_t uxRight )
{
 8010c6a:	b480      	push	{r7}
 8010c6c:	b087      	sub	sp, #28
 8010c6e:	af00      	add	r7, sp, #0
 8010c70:	60f8      	str	r0, [r7, #12]
 8010c72:	60b9      	str	r1, [r7, #8]
 8010c74:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8010c76:	2300      	movs	r3, #0
 8010c78:	617b      	str	r3, [r7, #20]
    const size_t uxTail = pxBuffer->uxTail;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	613b      	str	r3, [r7, #16]

    if( ( uxLeft - uxTail ) <= ( uxRight - uxTail ) )
 8010c80:	68ba      	ldr	r2, [r7, #8]
 8010c82:	693b      	ldr	r3, [r7, #16]
 8010c84:	1ad2      	subs	r2, r2, r3
 8010c86:	6879      	ldr	r1, [r7, #4]
 8010c88:	693b      	ldr	r3, [r7, #16]
 8010c8a:	1acb      	subs	r3, r1, r3
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d801      	bhi.n	8010c94 <xStreamBufferLessThenEqual+0x2a>
    {
        xReturn = pdTRUE;
 8010c90:	2301      	movs	r3, #1
 8010c92:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8010c94:	697b      	ldr	r3, [r7, #20]
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	371c      	adds	r7, #28
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca0:	4770      	bx	lr

08010ca2 <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * const pxBuffer,
                             uint8_t ** const ppucData )
{
 8010ca2:	b580      	push	{r7, lr}
 8010ca4:	b084      	sub	sp, #16
 8010ca6:	af00      	add	r7, sp, #0
 8010ca8:	6078      	str	r0, [r7, #4]
 8010caa:	6039      	str	r1, [r7, #0]
    const size_t uxNextTail = pxBuffer->uxTail;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f7ff ff77 	bl	8010ba6 <uxStreamBufferGetSize>
 8010cb8:	60b8      	str	r0, [r7, #8]

    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
    /* coverity[misra_c_2012_rule_18_4_violation] */
    *ppucData = pxBuffer->ucArray + uxNextTail;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f103 0214 	add.w	r2, r3, #20
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	441a      	add	r2, r3
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_size_t( uxSize, pxBuffer->LENGTH - uxNextTail );
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	691a      	ldr	r2, [r3, #16]
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	1ad3      	subs	r3, r2, r3
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	68b8      	ldr	r0, [r7, #8]
 8010cd4:	f7f9 fede 	bl	800aa94 <FreeRTOS_min_size_t>
 8010cd8:	4603      	mov	r3, r0
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3710      	adds	r7, #16
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}

08010ce2 <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          const uint8_t * const pucData,
                          size_t uxByteCount )
{
 8010ce2:	b580      	push	{r7, lr}
 8010ce4:	b08a      	sub	sp, #40	@ 0x28
 8010ce6:	af00      	add	r7, sp, #0
 8010ce8:	60f8      	str	r0, [r7, #12]
 8010cea:	60b9      	str	r1, [r7, #8]
 8010cec:	607a      	str	r2, [r7, #4]
 8010cee:	603b      	str	r3, [r7, #0]
    size_t uxCount;
    size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 8010cf0:	68f8      	ldr	r0, [r7, #12]
 8010cf2:	f7ff ff36 	bl	8010b62 <uxStreamBufferGetSpace>
 8010cf6:	6278      	str	r0, [r7, #36]	@ 0x24

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 8010cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d904      	bls.n	8010d0a <uxStreamBufferAdd+0x28>
    {
        uxSpace -= uxOffset;
 8010d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	1ad3      	subs	r3, r2, r3
 8010d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d08:	e001      	b.n	8010d0e <uxStreamBufferAdd+0x2c>
    }
    else
    {
        uxSpace = 0U;
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_size_t( uxSpace, uxByteCount );
 8010d0e:	6839      	ldr	r1, [r7, #0]
 8010d10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010d12:	f7f9 febf 	bl	800aa94 <FreeRTOS_min_size_t>
 8010d16:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8010d18:	69fb      	ldr	r3, [r7, #28]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d05c      	beq.n	8010dd8 <uxStreamBufferAdd+0xf6>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	691b      	ldr	r3, [r3, #16]
 8010d22:	61bb      	str	r3, [r7, #24]
        size_t uxNextHead = pxBuffer->uxHead;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	689b      	ldr	r3, [r3, #8]
 8010d28:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d00b      	beq.n	8010d48 <uxStreamBufferAdd+0x66>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 8010d30:	6a3a      	ldr	r2, [r7, #32]
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	4413      	add	r3, r2
 8010d36:	623b      	str	r3, [r7, #32]

            if( uxNextHead >= uxLength )
 8010d38:	6a3a      	ldr	r2, [r7, #32]
 8010d3a:	69bb      	ldr	r3, [r7, #24]
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	d303      	bcc.n	8010d48 <uxStreamBufferAdd+0x66>
            {
                uxNextHead -= uxLength;
 8010d40:	6a3a      	ldr	r2, [r7, #32]
 8010d42:	69bb      	ldr	r3, [r7, #24]
 8010d44:	1ad3      	subs	r3, r2, r3
 8010d46:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d021      	beq.n	8010d92 <uxStreamBufferAdd+0xb0>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextHead, uxCount );
 8010d4e:	69ba      	ldr	r2, [r7, #24]
 8010d50:	6a3b      	ldr	r3, [r7, #32]
 8010d52:	1ad3      	subs	r3, r2, r3
 8010d54:	69f9      	ldr	r1, [r7, #28]
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7f9 fe9c 	bl	800aa94 <FreeRTOS_min_size_t>
 8010d5c:	6178      	str	r0, [r7, #20]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 8010d5e:	6a3b      	ldr	r3, [r7, #32]
 8010d60:	3310      	adds	r3, #16
 8010d62:	68fa      	ldr	r2, [r7, #12]
 8010d64:	4413      	add	r3, r2
 8010d66:	3304      	adds	r3, #4
 8010d68:	697a      	ldr	r2, [r7, #20]
 8010d6a:	6879      	ldr	r1, [r7, #4]
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f011 fc07 	bl	8022580 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 8010d72:	69fa      	ldr	r2, [r7, #28]
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	429a      	cmp	r2, r3
 8010d78:	d90b      	bls.n	8010d92 <uxStreamBufferAdd+0xb0>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	f103 0014 	add.w	r0, r3, #20
 8010d80:	687a      	ldr	r2, [r7, #4]
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	18d1      	adds	r1, r2, r3
 8010d86:	69fa      	ldr	r2, [r7, #28]
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	1ad3      	subs	r3, r2, r3
 8010d8c:	461a      	mov	r2, r3
 8010d8e:	f011 fbf7 	bl	8022580 <memcpy>
            }
        }

        /* The below update to the stream buffer members must happen
         * atomically. */
        vTaskSuspendAll();
 8010d92:	f7f3 fc75 	bl	8004680 <vTaskSuspendAll>
        {
            if( uxOffset == 0U )
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d10e      	bne.n	8010dba <uxStreamBufferAdd+0xd8>
            {
                /* ( uxOffset == 0 ) means: write at uxHead position */
                uxNextHead += uxCount;
 8010d9c:	6a3a      	ldr	r2, [r7, #32]
 8010d9e:	69fb      	ldr	r3, [r7, #28]
 8010da0:	4413      	add	r3, r2
 8010da2:	623b      	str	r3, [r7, #32]

                if( uxNextHead >= uxLength )
 8010da4:	6a3a      	ldr	r2, [r7, #32]
 8010da6:	69bb      	ldr	r3, [r7, #24]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d303      	bcc.n	8010db4 <uxStreamBufferAdd+0xd2>
                {
                    uxNextHead -= uxLength;
 8010dac:	6a3a      	ldr	r2, [r7, #32]
 8010dae:	69bb      	ldr	r3, [r7, #24]
 8010db0:	1ad3      	subs	r3, r2, r3
 8010db2:	623b      	str	r3, [r7, #32]
                }

                pxBuffer->uxHead = uxNextHead;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	6a3a      	ldr	r2, [r7, #32]
 8010db8:	609a      	str	r2, [r3, #8]
            }

            if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	68db      	ldr	r3, [r3, #12]
 8010dbe:	6a3a      	ldr	r2, [r7, #32]
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	68f8      	ldr	r0, [r7, #12]
 8010dc4:	f7ff ff51 	bl	8010c6a <xStreamBufferLessThenEqual>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d002      	beq.n	8010dd4 <uxStreamBufferAdd+0xf2>
            {
                /* Advance the front pointer */
                pxBuffer->uxFront = uxNextHead;
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	6a3a      	ldr	r2, [r7, #32]
 8010dd2:	60da      	str	r2, [r3, #12]
            }
        }
        ( void ) xTaskResumeAll();
 8010dd4:	f7f3 fc62 	bl	800469c <xTaskResumeAll>
    }

    return uxCount;
 8010dd8:	69fb      	ldr	r3, [r7, #28]
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3728      	adds	r7, #40	@ 0x28
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}

08010de2 <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          uint8_t * const pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 8010de2:	b580      	push	{r7, lr}
 8010de4:	b08a      	sub	sp, #40	@ 0x28
 8010de6:	af00      	add	r7, sp, #0
 8010de8:	60f8      	str	r0, [r7, #12]
 8010dea:	60b9      	str	r1, [r7, #8]
 8010dec:	607a      	str	r2, [r7, #4]
 8010dee:	603b      	str	r3, [r7, #0]
    size_t uxCount;

    /* How much data is available? */
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 8010df0:	68f8      	ldr	r0, [r7, #12]
 8010df2:	f7ff fed8 	bl	8010ba6 <uxStreamBufferGetSize>
 8010df6:	6278      	str	r0, [r7, #36]	@ 0x24

    if( uxSize > uxOffset )
 8010df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	d904      	bls.n	8010e0a <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 8010e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	1ad3      	subs	r3, r2, r3
 8010e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e08:	e001      	b.n	8010e0e <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_size_t( uxSize, uxMaxCount );
 8010e0e:	6839      	ldr	r1, [r7, #0]
 8010e10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010e12:	f7f9 fe3f 	bl	800aa94 <FreeRTOS_min_size_t>
 8010e16:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8010e18:	69fb      	ldr	r3, [r7, #28]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d04e      	beq.n	8010ebc <uxStreamBufferGet+0xda>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	691b      	ldr	r3, [r3, #16]
 8010e22:	61bb      	str	r3, [r7, #24]
        size_t uxNextTail = pxBuffer->uxTail;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d00b      	beq.n	8010e48 <uxStreamBufferGet+0x66>
        {
            uxNextTail += uxOffset;
 8010e30:	6a3a      	ldr	r2, [r7, #32]
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	4413      	add	r3, r2
 8010e36:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 8010e38:	6a3a      	ldr	r2, [r7, #32]
 8010e3a:	69bb      	ldr	r3, [r7, #24]
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d303      	bcc.n	8010e48 <uxStreamBufferGet+0x66>
            {
                uxNextTail -= uxLength;
 8010e40:	6a3a      	ldr	r2, [r7, #32]
 8010e42:	69bb      	ldr	r3, [r7, #24]
 8010e44:	1ad3      	subs	r3, r2, r3
 8010e46:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d021      	beq.n	8010e92 <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextTail, uxCount );
 8010e4e:	69ba      	ldr	r2, [r7, #24]
 8010e50:	6a3b      	ldr	r3, [r7, #32]
 8010e52:	1ad3      	subs	r3, r2, r3
 8010e54:	69f9      	ldr	r1, [r7, #28]
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7f9 fe1c 	bl	800aa94 <FreeRTOS_min_size_t>
 8010e5c:	6178      	str	r0, [r7, #20]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 8010e5e:	6a3b      	ldr	r3, [r7, #32]
 8010e60:	3310      	adds	r3, #16
 8010e62:	68fa      	ldr	r2, [r7, #12]
 8010e64:	4413      	add	r3, r2
 8010e66:	3304      	adds	r3, #4
 8010e68:	697a      	ldr	r2, [r7, #20]
 8010e6a:	4619      	mov	r1, r3
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f011 fb87 	bl	8022580 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 8010e72:	69fa      	ldr	r2, [r7, #28]
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d90b      	bls.n	8010e92 <uxStreamBufferGet+0xb0>
            {
                /* ...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 8010e7a:	687a      	ldr	r2, [r7, #4]
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	18d0      	adds	r0, r2, r3
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	f103 0114 	add.w	r1, r3, #20
 8010e86:	69fa      	ldr	r2, [r7, #28]
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	1ad3      	subs	r3, r2, r3
 8010e8c:	461a      	mov	r2, r3
 8010e8e:	f011 fb77 	bl	8022580 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0U ) )
 8010e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d111      	bne.n	8010ebc <uxStreamBufferGet+0xda>
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d10e      	bne.n	8010ebc <uxStreamBufferGet+0xda>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 8010e9e:	6a3a      	ldr	r2, [r7, #32]
 8010ea0:	69fb      	ldr	r3, [r7, #28]
 8010ea2:	4413      	add	r3, r2
 8010ea4:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 8010ea6:	6a3a      	ldr	r2, [r7, #32]
 8010ea8:	69bb      	ldr	r3, [r7, #24]
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	d303      	bcc.n	8010eb6 <uxStreamBufferGet+0xd4>
            {
                uxNextTail -= uxLength;
 8010eae:	6a3a      	ldr	r2, [r7, #32]
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	1ad3      	subs	r3, r2, r3
 8010eb4:	623b      	str	r3, [r7, #32]
            }

            pxBuffer->uxTail = uxNextTail;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	6a3a      	ldr	r2, [r7, #32]
 8010eba:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 8010ebc:	69fb      	ldr	r3, [r7, #28]
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3728      	adds	r7, #40	@ 0x28
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}
	...

08010ec8 <vSocketCloseNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b082      	sub	sp, #8
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
        if( ( xSocketToClose != NULL ) && ( xSocketToClose != pxSocket ) )
 8010ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8010efc <vSocketCloseNextTime+0x34>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d009      	beq.n	8010eec <vSocketCloseNextTime+0x24>
 8010ed8:	4b08      	ldr	r3, [pc, #32]	@ (8010efc <vSocketCloseNextTime+0x34>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	687a      	ldr	r2, [r7, #4]
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d004      	beq.n	8010eec <vSocketCloseNextTime+0x24>
        {
            ( void ) vSocketClose( xSocketToClose );
 8010ee2:	4b06      	ldr	r3, [pc, #24]	@ (8010efc <vSocketCloseNextTime+0x34>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7fd fd98 	bl	800ea1c <vSocketClose>
        }

        xSocketToClose = pxSocket;
 8010eec:	4a03      	ldr	r2, [pc, #12]	@ (8010efc <vSocketCloseNextTime+0x34>)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6013      	str	r3, [r2, #0]
    }
 8010ef2:	bf00      	nop
 8010ef4:	3708      	adds	r7, #8
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}
 8010efa:	bf00      	nop
 8010efc:	2000159c 	.word	0x2000159c

08010f00 <vSocketListenNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketListenNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
        if( ( xSocketToListen != NULL ) && ( xSocketToListen != pxSocket ) )
 8010f08:	4b0c      	ldr	r3, [pc, #48]	@ (8010f3c <vSocketListenNextTime+0x3c>)
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d00e      	beq.n	8010f2e <vSocketListenNextTime+0x2e>
 8010f10:	4b0a      	ldr	r3, [pc, #40]	@ (8010f3c <vSocketListenNextTime+0x3c>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	687a      	ldr	r2, [r7, #4]
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d009      	beq.n	8010f2e <vSocketListenNextTime+0x2e>
        {
            ( void ) FreeRTOS_listen( ( Socket_t ) xSocketToListen, ( BaseType_t ) ( xSocketToListen->u.xTCP.usBacklog ) );
 8010f1a:	4b08      	ldr	r3, [pc, #32]	@ (8010f3c <vSocketListenNextTime+0x3c>)
 8010f1c:	681a      	ldr	r2, [r3, #0]
 8010f1e:	4b07      	ldr	r3, [pc, #28]	@ (8010f3c <vSocketListenNextTime+0x3c>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8010f26:	4619      	mov	r1, r3
 8010f28:	4610      	mov	r0, r2
 8010f2a:	f7fe fff3 	bl	800ff14 <FreeRTOS_listen>
        }

        xSocketToListen = pxSocket;
 8010f2e:	4a03      	ldr	r2, [pc, #12]	@ (8010f3c <vSocketListenNextTime+0x3c>)
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6013      	str	r3, [r2, #0]
    }
 8010f34:	bf00      	nop
 8010f36:	3708      	adds	r7, #8
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}
 8010f3c:	200015a0 	.word	0x200015a0

08010f40 <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 8010f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f44:	b086      	sub	sp, #24
 8010f46:	af02      	add	r7, sp, #8
 8010f48:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010f58:	2b04      	cmp	r3, #4
 8010f5a:	d907      	bls.n	8010f6c <xTCPSocketCheck+0x2c>
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d002      	beq.n	8010f6c <xTCPSocketCheck+0x2c>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f003 f834 	bl	8013fd4 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d05f      	beq.n	8011036 <xTCPSocketCheck+0xf6>
            {
                /* The first task of this regular socket check is to send-out delayed
                 * ACK's. */
                if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010f7c:	f003 0320 	and.w	r3, r3, #32
 8010f80:	b2db      	uxtb	r3, r3
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d148      	bne.n	8011018 <xTCPSocketCheck+0xd8>
                {
                    /* Earlier data was received but not yet acknowledged.  This
                     * function is called when the TCP timer for the socket expires, the
                     * ACK may be sent now. */
                    if( pxSocket->u.xTCP.eTCPState != eCLOSED )
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d03b      	beq.n	8011008 <xTCPSocketCheck+0xc8>
                    {
                        if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 8010f90:	4b37      	ldr	r3, [pc, #220]	@ (8011070 <xTCPSocketCheck+0x130>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	2b01      	cmp	r3, #1
 8010f96:	dd25      	ble.n	8010fe4 <xTCPSocketCheck+0xa4>
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010f9c:	2b17      	cmp	r3, #23
 8010f9e:	d021      	beq.n	8010fe4 <xTCPSocketCheck+0xa4>
                        {
                            FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u)\n",
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010fa4:	461e      	mov	r6, r3
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010fac:	4698      	mov	r8, r3
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8010fba:	1ad5      	subs	r5, r2, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8010fc8:	1ad4      	subs	r4, r2, r3
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f7f9 f81e 	bl	800a00c <uxIPHeaderSizeSocket>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	3314      	adds	r3, #20
 8010fd4:	9301      	str	r3, [sp, #4]
 8010fd6:	9400      	str	r4, [sp, #0]
 8010fd8:	462b      	mov	r3, r5
 8010fda:	4642      	mov	r2, r8
 8010fdc:	4631      	mov	r1, r6
 8010fde:	4825      	ldr	r0, [pc, #148]	@ (8011074 <xTCPSocketCheck+0x134>)
 8010fe0:	f011 f8b2 	bl	8022148 <lUDPLoggingPrintf>
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) );
                        }

                        prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ( uint32_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ), ipconfigZERO_COPY_TX_DRIVER );
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f7f9 f80e 	bl	800a00c <uxIPHeaderSizeSocket>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	f103 0214 	add.w	r2, r3, #20
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	4621      	mov	r1, r4
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f002 fac8 	bl	8013590 <prvTCPReturnPacket>

                        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                        {
                            /* The ownership has been passed to the SEND routine,
                             * clear the pointer to it. */
                            pxSocket->u.xTCP.pxAckMessage = NULL;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2200      	movs	r2, #0
 8011004:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                        #endif /* ipconfigZERO_COPY_TX_DRIVER */
                    }

                    if( prvTCPNextTimeout( pxSocket ) > 1U )
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f000 faa1 	bl	8011550 <prvTCPNextTimeout>
 801100e:	4603      	mov	r3, r0
 8011010:	2b01      	cmp	r3, #1
 8011012:	d901      	bls.n	8011018 <xTCPSocketCheck+0xd8>
                    {
                        /* Tell the code below that this function is ready. */
                        xReady = pdTRUE;
 8011014:	2301      	movs	r3, #1
 8011016:	60bb      	str	r3, [r7, #8]
                    /* The user wants to perform an active shutdown(), skip sending
                     * the delayed ACK.  The function prvTCPSendPacket() will send the
                     * FIN along with the ACK's. */
                }

                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801101e:	2b00      	cmp	r3, #0
 8011020:	d009      	beq.n	8011036 <xTCPSocketCheck+0xf6>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011028:	4618      	mov	r0, r3
 801102a:	f006 f9e5 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
                    pxSocket->u.xTCP.pxAckMessage = NULL;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2200      	movs	r2, #0
 8011032:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }
            }
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d113      	bne.n	8011064 <xTCPSocketCheck+0x124>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011042:	2b04      	cmp	r3, #4
 8011044:	d804      	bhi.n	8011050 <xTCPSocketCheck+0x110>
                ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) )
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 801104c:	2b02      	cmp	r3, #2
 801104e:	d102      	bne.n	8011056 <xTCPSocketCheck+0x116>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f002 f9ff 	bl	8013454 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f000 fa7a 	bl	8011550 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                /* In all (non-connected) states in which keep-alive messages can not be sent
                 * the anti-hang protocol will close sockets that are 'hanging'. */
                xResult = prvTCPStatusAgeCheck( pxSocket );
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f001 f973 	bl	8012348 <prvTCPStatusAgeCheck>
 8011062:	60f8      	str	r0, [r7, #12]
            }
            #endif
        }

        return xResult;
 8011064:	68fb      	ldr	r3, [r7, #12]
    }
 8011066:	4618      	mov	r0, r3
 8011068:	3710      	adds	r7, #16
 801106a:	46bd      	mov	sp, r7
 801106c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011070:	200015c8 	.word	0x200015c8
 8011074:	08026114 	.word	0x08026114

08011078 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    void prvTCPTouchSocket( struct xSOCKET * pxSocket )
    {
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
        {
            pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 8011080:	f7f3 fc10 	bl	80048a4 <xTaskGetTickCount>
 8011084:	4602      	mov	r2, r0
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
        {
            pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 801108c:	687a      	ldr	r2, [r7, #4]
 801108e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8011092:	f36f 0382 	bfc	r3, #2, #1
 8011096:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 801109a:	687a      	ldr	r2, [r7, #4]
 801109c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80110a0:	f36f 0341 	bfc	r3, #1, #1
 80110a4:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.ucKeepRepCount = 0U;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2200      	movs	r2, #0
 80110ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 80110b0:	f7f3 fbf8 	bl	80048a4 <xTaskGetTickCount>
 80110b4:	4602      	mov	r2, r0
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        }
        #endif

        ( void ) pxSocket;
    }
 80110bc:	bf00      	nop
 80110be:	3708      	adds	r7, #8
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}

080110c4 <vTCPRemoveTCPChild>:
    /*-----------------------------------------------------------*/

    static BaseType_t vTCPRemoveTCPChild( const FreeRTOS_Socket_t * pxChildSocket )
    {
 80110c4:	b480      	push	{r7}
 80110c6:	b087      	sub	sp, #28
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80110cc:	2300      	movs	r3, #0
 80110ce:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 80110d0:	4b15      	ldr	r3, [pc, #84]	@ (8011128 <vTCPRemoveTCPChild+0x64>)
 80110d2:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80110d4:	4b15      	ldr	r3, [pc, #84]	@ (801112c <vTCPRemoveTCPChild+0x68>)
 80110d6:	68db      	ldr	r3, [r3, #12]
 80110d8:	613b      	str	r3, [r7, #16]

        while( pxIterator != pxEnd )
 80110da:	e01a      	b.n	8011112 <vTCPRemoveTCPChild+0x4e>
        {
            FreeRTOS_Socket_t * pxSocket;
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	68db      	ldr	r3, [r3, #12]
 80110e0:	60bb      	str	r3, [r7, #8]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	685b      	ldr	r3, [r3, #4]
 80110e6:	613b      	str	r3, [r7, #16]

            if( ( pxSocket != pxChildSocket ) && ( pxSocket->usLocalPort == pxChildSocket->usLocalPort ) )
 80110e8:	68ba      	ldr	r2, [r7, #8]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d010      	beq.n	8011112 <vTCPRemoveTCPChild+0x4e>
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d10a      	bne.n	8011112 <vTCPRemoveTCPChild+0x4e>
            {
                if( pxSocket->u.xTCP.pxPeerSocket == pxChildSocket ) /**< for server socket: child, for child socket: parent */
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011100:	687a      	ldr	r2, [r7, #4]
 8011102:	429a      	cmp	r2, r3
 8011104:	d105      	bne.n	8011112 <vTCPRemoveTCPChild+0x4e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	2200      	movs	r2, #0
 801110a:	67da      	str	r2, [r3, #124]	@ 0x7c
                    xReturn = pdTRUE;
 801110c:	2301      	movs	r3, #1
 801110e:	617b      	str	r3, [r7, #20]
                    break;
 8011110:	e003      	b.n	801111a <vTCPRemoveTCPChild+0x56>
        while( pxIterator != pxEnd )
 8011112:	693a      	ldr	r2, [r7, #16]
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	429a      	cmp	r2, r3
 8011118:	d1e0      	bne.n	80110dc <vTCPRemoveTCPChild+0x18>
                }
            }
        }

        return xReturn;
 801111a:	697b      	ldr	r3, [r7, #20]
    }
 801111c:	4618      	mov	r0, r3
 801111e:	371c      	adds	r7, #28
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr
 8011128:	2000158c 	.word	0x2000158c
 801112c:	20001584 	.word	0x20001584

08011130 <vTCPStateChange>:
 * @param[in] pxSocket The socket whose state we are trying to change.
 * @param[in] eTCPState The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 8011130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011132:	b097      	sub	sp, #92	@ 0x5c
 8011134:	af02      	add	r7, sp, #8
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	460b      	mov	r3, r1
 801113a:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = pxSocket;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        BaseType_t bBefore = tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.eTCPState ); /* Was it connected ? */
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011146:	2b04      	cmp	r3, #4
 8011148:	d906      	bls.n	8011158 <vTCPStateChange+0x28>
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011150:	2b08      	cmp	r3, #8
 8011152:	d001      	beq.n	8011158 <vTCPStateChange+0x28>
 8011154:	2301      	movs	r3, #1
 8011156:	e000      	b.n	801115a <vTCPStateChange+0x2a>
 8011158:	2300      	movs	r3, #0
 801115a:	64bb      	str	r3, [r7, #72]	@ 0x48
        BaseType_t bAfter = tcpNOW_CONNECTED( ( BaseType_t ) eTCPState );                   /* Is it connected now ? */
 801115c:	78fb      	ldrb	r3, [r7, #3]
 801115e:	2b04      	cmp	r3, #4
 8011160:	d904      	bls.n	801116c <vTCPStateChange+0x3c>
 8011162:	78fb      	ldrb	r3, [r7, #3]
 8011164:	2b08      	cmp	r3, #8
 8011166:	d001      	beq.n	801116c <vTCPStateChange+0x3c>
 8011168:	2301      	movs	r3, #1
 801116a:	e000      	b.n	801116e <vTCPStateChange+0x3e>
 801116c:	2300      	movs	r3, #0
 801116e:	63bb      	str	r3, [r7, #56]	@ 0x38

        eIPTCPState_t xPreviousState = pxSocket->u.xTCP.eTCPState;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011176:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
 801117a:	2300      	movs	r3, #0
 801117c:	647b      	str	r3, [r7, #68]	@ 0x44
        #endif

        if( ( ( xPreviousState == eCONNECT_SYN ) ||
 801117e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011182:	2b02      	cmp	r3, #2
 8011184:	d007      	beq.n	8011196 <vTCPStateChange+0x66>
 8011186:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801118a:	2b03      	cmp	r3, #3
 801118c:	d003      	beq.n	8011196 <vTCPStateChange+0x66>
              ( xPreviousState == eSYN_FIRST ) ||
 801118e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011192:	2b04      	cmp	r3, #4
 8011194:	d114      	bne.n	80111c0 <vTCPStateChange+0x90>
              ( xPreviousState == eSYN_RECEIVED ) ) &&
 8011196:	78fb      	ldrb	r3, [r7, #3]
 8011198:	2b08      	cmp	r3, #8
 801119a:	d111      	bne.n	80111c0 <vTCPStateChange+0x90>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            /* A socket was in the connecting phase but something
             * went wrong and it should be closed. */
            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                FreeRTOS_debug_printf( ( "Move from %s to %s\n",
 801119c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80111a0:	4618      	mov	r0, r3
 80111a2:	f001 fed7 	bl	8012f54 <FreeRTOS_GetTCPStateName>
 80111a6:	4604      	mov	r4, r0
 80111a8:	78fb      	ldrb	r3, [r7, #3]
 80111aa:	4618      	mov	r0, r3
 80111ac:	f001 fed2 	bl	8012f54 <FreeRTOS_GetTCPStateName>
 80111b0:	4603      	mov	r3, r0
 80111b2:	461a      	mov	r2, r3
 80111b4:	4621      	mov	r1, r4
 80111b6:	4875      	ldr	r0, [pc, #468]	@ (801138c <vTCPStateChange+0x25c>)
 80111b8:	f010 ffc6 	bl	8022148 <lUDPLoggingPrintf>
            #endif

            /* Set the flag to show that it was connected before and that the
             * status has changed now. This will cause the control flow to go
             * in the below if condition.*/
            bBefore = pdTRUE;
 80111bc:	2301      	movs	r3, #1
 80111be:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 80111c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80111c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111c4:	429a      	cmp	r2, r3
 80111c6:	f000 809f 	beq.w	8011308 <vTCPStateChange+0x1d8>
        {
            /* if bPassQueued is true, this socket is an orphan until it gets connected. */
            if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80111d0:	f003 0304 	and.w	r3, r3, #4
 80111d4:	b2db      	uxtb	r3, r3
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d012      	beq.n	8011200 <vTCPStateChange+0xd0>
            {
                /* Find it's parent if the reuse bit is not set. */
                if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80111e0:	f003 0308 	and.w	r3, r3, #8
 80111e4:	b2db      	uxtb	r3, r3
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d10a      	bne.n	8011200 <vTCPStateChange+0xd0>
                {
                    xParent = pxSocket->u.xTCP.pxPeerSocket;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80111ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    configASSERT( xParent != NULL );
 80111f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d104      	bne.n	8011200 <vTCPStateChange+0xd0>
 80111f6:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 80111fa:	4865      	ldr	r0, [pc, #404]	@ (8011390 <vTCPStateChange+0x260>)
 80111fc:	f7f0 fbac 	bl	8001958 <vAssertCalled>
                }
            }

            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 8011200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011202:	2b00      	cmp	r3, #0
 8011204:	d057      	beq.n	80112b6 <vTCPStateChange+0x186>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801120c:	f003 0304 	and.w	r3, r3, #4
 8011210:	b2db      	uxtb	r3, r3
 8011212:	2b00      	cmp	r3, #0
 8011214:	d03c      	beq.n	8011290 <vTCPStateChange+0x160>
                {
                    if( xParent != NULL )
 8011216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011218:	2b00      	cmp	r3, #0
 801121a:	d027      	beq.n	801126c <vTCPStateChange+0x13c>
                        /* The child socket has got connected.  See if the parent
                         * ( the listening socket ) should be signalled, or if a
                         * call-back must be made, in which case 'xConnected' will
                         * be set to the parent socket. */

                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 801121c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801121e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011220:	2b00      	cmp	r3, #0
 8011222:	d102      	bne.n	801122a <vTCPStateChange+0xfa>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 8011224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011226:	687a      	ldr	r2, [r7, #4]
 8011228:	67da      	str	r2, [r3, #124]	@ 0x7c
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 801122a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	f043 0204 	orr.w	r2, r3, #4
 8011232:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011234:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            /* Library support FreeRTOS_select().  Receiving a new
                             * connection is being translated as a READ event. */
                            if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 8011236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801123a:	f003 0301 	and.w	r3, r3, #1
 801123e:	2b00      	cmp	r3, #0
 8011240:	d005      	beq.n	801124e <vTCPStateChange+0x11e>
                            {
                                xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 8011242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801124a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801124c:	601a      	str	r2, [r3, #0]
                        }
                        #endif

                        #if ( ipconfigUSE_CALLBACKS == 1 )
                        {
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 801124e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011250:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011254:	2b00      	cmp	r3, #0
 8011256:	d009      	beq.n	801126c <vTCPStateChange+0x13c>
                                ( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 8011258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801125a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801125e:	f003 0308 	and.w	r3, r3, #8
 8011262:	b2db      	uxtb	r3, r3
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 8011264:	2b00      	cmp	r3, #0
 8011266:	d101      	bne.n	801126c <vTCPStateChange+0x13c>
                            {
                                /* The listening socket does not become connected itself, in stead
                                 * a child socket is created.
                                 * Postpone a call the OnConnect event until the end of this function. */
                                xConnected = xParent;
 8011268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801126a:	647b      	str	r3, [r7, #68]	@ 0x44
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2200      	movs	r2, #0
 8011270:	67da      	str	r2, [r3, #124]	@ 0x7c
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8011272:	687a      	ldr	r2, [r7, #4]
 8011274:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011278:	f36f 0382 	bfc	r3, #2, #1
 801127c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 8011280:	687a      	ldr	r2, [r7, #4]
 8011282:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011286:	f043 0302 	orr.w	r3, r3, #2
 801128a:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 801128e:	e024      	b.n	80112da <vTCPStateChange+0x1aa>
                else
                {
                    /* An active connect() has succeeded. In this case there is no
                     * ( listening ) parent socket. Signal the now connected socket. */

                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	f043 0208 	orr.w	r2, r3, #8
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112a0:	f003 0302 	and.w	r3, r3, #2
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d018      	beq.n	80112da <vTCPStateChange+0x1aa>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	601a      	str	r2, [r3, #0]
 80112b4:	e011      	b.n	80112da <vTCPStateChange+0x1aa>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting the event bits. */
                xParent->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 80112b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	f043 0220 	orr.w	r2, r3, #32
 80112be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112c0:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( xParent->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 80112c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112c6:	f003 0304 	and.w	r3, r3, #4
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d005      	beq.n	80112da <vTCPStateChange+0x1aa>
                    {
                        xParent->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 80112ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80112d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112d8:	601a      	str	r2, [r3, #0]
                #endif
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d004      	beq.n	80112ee <vTCPStateChange+0x1be>
 80112e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d101      	bne.n	80112ee <vTCPStateChange+0x1be>
                {
                    /* The 'connected' state has changed, call the user handler. */
                    xConnected = pxSocket;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == 0 )
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80112f4:	4618      	mov	r0, r3
 80112f6:	f000 ffff 	bl	80122f8 <prvTCPSocketIsActive>
 80112fa:	4603      	mov	r3, r0
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d103      	bne.n	8011308 <vTCPStateChange+0x1d8>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2200      	movs	r2, #0
 8011304:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.eTCPState = eTCPState;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	78fa      	ldrb	r2, [r7, #3]
 801130c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

        if( ( eTCPState == eCLOSED ) ||
 8011310:	78fb      	ldrb	r3, [r7, #3]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d003      	beq.n	801131e <vTCPStateChange+0x1ee>
 8011316:	78fb      	ldrb	r3, [r7, #3]
 8011318:	2b08      	cmp	r3, #8
 801131a:	f040 8084 	bne.w	8011426 <vTCPStateChange+0x2f6>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            BaseType_t xMustClear = pdFALSE;
 801131e:	2300      	movs	r3, #0
 8011320:	643b      	str	r3, [r7, #64]	@ 0x40
            BaseType_t xHasCleared = pdFALSE;
 8011322:	2300      	movs	r3, #0
 8011324:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( ( xParent == pxSocket ) && ( pxSocket->u.xTCP.pxPeerSocket != NULL ) )
 8011326:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	429a      	cmp	r2, r3
 801132c:	d106      	bne.n	801133c <vTCPStateChange+0x20c>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011332:	2b00      	cmp	r3, #0
 8011334:	d002      	beq.n	801133c <vTCPStateChange+0x20c>
            {
                xParent = pxSocket->u.xTCP.pxPeerSocket;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801133a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 801133c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801133e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011340:	2b00      	cmp	r3, #0
 8011342:	d006      	beq.n	8011352 <vTCPStateChange+0x222>
                ( xParent->u.xTCP.pxPeerSocket == pxSocket ) )
 8011344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011346:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8011348:	687a      	ldr	r2, [r7, #4]
 801134a:	429a      	cmp	r2, r3
 801134c:	d101      	bne.n	8011352 <vTCPStateChange+0x222>
            {
                xMustClear = pdTRUE;
 801134e:	2301      	movs	r3, #1
 8011350:	643b      	str	r3, [r7, #64]	@ 0x40
                ( void ) xMustClear;
            }

            /* Socket goes to status eCLOSED because of a RST.
             * When nobody owns the socket yet, delete it. */
            FreeRTOS_printf( ( "vTCPStateChange: Closing (Queued %d, Accept %d Reuse %d)\n",
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011358:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801135c:	b2db      	uxtb	r3, r3
 801135e:	4619      	mov	r1, r3
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011366:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801136a:	b2db      	uxtb	r3, r3
 801136c:	461a      	mov	r2, r3
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011374:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011378:	b2db      	uxtb	r3, r3
 801137a:	4806      	ldr	r0, [pc, #24]	@ (8011394 <vTCPStateChange+0x264>)
 801137c:	f010 fee4 	bl	8022148 <lUDPLoggingPrintf>
                               pxSocket->u.xTCP.bits.bPassQueued,
                               pxSocket->u.xTCP.bits.bPassAccept,
                               pxSocket->u.xTCP.bits.bReuseSocket ) );
            FreeRTOS_printf( ( "vTCPStateChange: me %p parent %p peer %p clear %d\n",
 8011380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011382:	2b00      	cmp	r3, #0
 8011384:	d008      	beq.n	8011398 <vTCPStateChange+0x268>
 8011386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011388:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801138a:	e006      	b.n	801139a <vTCPStateChange+0x26a>
 801138c:	08026140 	.word	0x08026140
 8011390:	08026154 	.word	0x08026154
 8011394:	08026184 	.word	0x08026184
 8011398:	2300      	movs	r3, #0
 801139a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801139c:	9200      	str	r2, [sp, #0]
 801139e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80113a0:	6879      	ldr	r1, [r7, #4]
 80113a2:	4865      	ldr	r0, [pc, #404]	@ (8011538 <vTCPStateChange+0x408>)
 80113a4:	f010 fed0 	bl	8022148 <lUDPLoggingPrintf>
                               ( void * ) pxSocket,
                               ( void * ) xParent,
                               xParent ? ( void * ) xParent->u.xTCP.pxPeerSocket : NULL,
                               ( int ) xMustClear ) );

            vTaskSuspendAll();
 80113a8:	f7f3 f96a 	bl	8004680 <vTaskSuspendAll>
            {
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80113b2:	f003 0304 	and.w	r3, r3, #4
 80113b6:	b2db      	uxtb	r3, r3
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d107      	bne.n	80113cc <vTCPStateChange+0x29c>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80113c2:	f003 0302 	and.w	r3, r3, #2
 80113c6:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d026      	beq.n	801141a <vTCPStateChange+0x2ea>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80113d2:	f003 0308 	and.w	r3, r3, #8
 80113d6:	b2db      	uxtb	r3, r3
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d11e      	bne.n	801141a <vTCPStateChange+0x2ea>
                    {
                        xHasCleared = vTCPRemoveTCPChild( pxSocket );
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f7ff fe71 	bl	80110c4 <vTCPRemoveTCPChild>
 80113e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
                        ( void ) xHasCleared;

                        pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80113ea:	f36f 0382 	bfc	r3, #2, #1
 80113ee:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        pxSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 80113f2:	687a      	ldr	r2, [r7, #4]
 80113f4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80113f8:	f36f 0341 	bfc	r3, #1, #1
 80113fc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 8011400:	f7f9 f978 	bl	800a6f4 <xIsCallingFromIPTask>
 8011404:	4603      	mov	r3, r0
 8011406:	2b00      	cmp	r3, #0
 8011408:	d104      	bne.n	8011414 <vTCPStateChange+0x2e4>
 801140a:	f44f 7101 	mov.w	r1, #516	@ 0x204
 801140e:	484b      	ldr	r0, [pc, #300]	@ (801153c <vTCPStateChange+0x40c>)
 8011410:	f7f0 faa2 	bl	8001958 <vAssertCalled>
                        vSocketCloseNextTime( pxSocket );
 8011414:	6878      	ldr	r0, [r7, #4]
 8011416:	f7ff fd57 	bl	8010ec8 <vSocketCloseNextTime>
                    }
                }
            }
            ( void ) xTaskResumeAll();
 801141a:	f7f3 f93f 	bl	800469c <xTaskResumeAll>
            FreeRTOS_printf( ( "vTCPStateChange: xHasCleared = %d\n",
 801141e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011420:	4847      	ldr	r0, [pc, #284]	@ (8011540 <vTCPStateChange+0x410>)
 8011422:	f010 fe91 	bl	8022148 <lUDPLoggingPrintf>
                               ( int ) xHasCleared ) );
        }

        if( ( eTCPState == eCLOSE_WAIT ) && ( pxSocket->u.xTCP.bits.bReuseSocket == pdTRUE_UNSIGNED ) )
 8011426:	78fb      	ldrb	r3, [r7, #3]
 8011428:	2b08      	cmp	r3, #8
 801142a:	d11b      	bne.n	8011464 <vTCPStateChange+0x334>
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011432:	f003 0308 	and.w	r3, r3, #8
 8011436:	b2db      	uxtb	r3, r3
 8011438:	2b00      	cmp	r3, #0
 801143a:	d013      	beq.n	8011464 <vTCPStateChange+0x334>
        {
            switch( xPreviousState )
 801143c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011440:	3b03      	subs	r3, #3
 8011442:	2b01      	cmp	r3, #1
 8011444:	d80d      	bhi.n	8011462 <vTCPStateChange+0x332>
            {
                case eSYN_FIRST:    /* 3 (server) Just created, must ACK the SYN request */
                case eSYN_RECEIVED: /* 4 (server) waiting for a confirming connection request */
                    FreeRTOS_debug_printf( ( "Restoring a reuse socket port %u\n", pxSocket->usLocalPort ) );
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801144a:	4619      	mov	r1, r3
 801144c:	483d      	ldr	r0, [pc, #244]	@ (8011544 <vTCPStateChange+0x414>)
 801144e:	f010 fe7b 	bl	8022148 <lUDPLoggingPrintf>

                    /* Go back into listening mode. Set the TCP status to 'eCLOSED',
                     * otherwise FreeRTOS_listen() will refuse the action. */
                    pxSocket->u.xTCP.eTCPState = eCLOSED;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2200      	movs	r2, #0
 8011456:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

                    /* vSocketListenNextTime() makes sure that FreeRTOS_listen() will be called
                     * before the IP-task handles any new message. */
                    vSocketListenNextTime( pxSocket );
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f7ff fd50 	bl	8010f00 <vSocketListenNextTime>
                    break;
 8011460:	e000      	b.n	8011464 <vTCPStateChange+0x334>

                default:
                    /* Nothing to do. */
                    break;
 8011462:	bf00      	nop
            }
        }

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f7ff fe07 	bl	8011078 <prvTCPTouchSocket>

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 801146a:	4b37      	ldr	r3, [pc, #220]	@ (8011548 <vTCPStateChange+0x418>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	2b00      	cmp	r3, #0
 8011470:	db4f      	blt.n	8011512 <vTCPStateChange+0x3e2>
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011476:	2b17      	cmp	r3, #23
 8011478:	d04b      	beq.n	8011512 <vTCPStateChange+0x3e2>
            {
                char pcBuffer[ 40 ];

                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	7a1b      	ldrb	r3, [r3, #8]
 801147e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8011482:	b2db      	uxtb	r3, r3
 8011484:	2b00      	cmp	r3, #0
 8011486:	d002      	beq.n	801148e <vTCPStateChange+0x35e>
 8011488:	2b01      	cmp	r3, #1
 801148a:	d01d      	beq.n	80114c8 <vTCPStateChange+0x398>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:   /* LCOV_EXCL_LINE */
                        /* MISRA 16.4 Compliance */
                        break; /* LCOV_EXCL_LINE */
 801148c:	e026      	b.n	80114dc <vTCPStateChange+0x3ac>
                               uint32_t ulIPAddress = FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011492:	061a      	lsls	r2, r3, #24
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011498:	021b      	lsls	r3, r3, #8
 801149a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801149e:	431a      	orrs	r2, r3
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80114a4:	0a1b      	lsrs	r3, r3, #8
 80114a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80114aa:	431a      	orrs	r2, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80114b0:	0e1b      	lsrs	r3, r3, #24
 80114b2:	4313      	orrs	r3, r2
 80114b4:	633b      	str	r3, [r7, #48]	@ 0x30
                               FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 80114b6:	f107 0208 	add.w	r2, r7, #8
 80114ba:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80114be:	2328      	movs	r3, #40	@ 0x28
 80114c0:	2002      	movs	r0, #2
 80114c2:	f7fe f827 	bl	800f514 <FreeRTOS_inet_ntop>
                           break;
 80114c6:	e009      	b.n	80114dc <vTCPStateChange+0x3ac>
                                                pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                            FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 80114ce:	f107 0208 	add.w	r2, r7, #8
 80114d2:	2328      	movs	r3, #40	@ 0x28
 80114d4:	200a      	movs	r0, #10
 80114d6:	f7fe f81d 	bl	800f514 <FreeRTOS_inet_ntop>
                            break;
 80114da:	bf00      	nop
                }

                FreeRTOS_debug_printf( ( "Socket %u -> [%s]:%u State %s->%s\n",
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80114e0:	461d      	mov	r5, r3
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80114e8:	461e      	mov	r6, r3
 80114ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80114ee:	4618      	mov	r0, r3
 80114f0:	f001 fd30 	bl	8012f54 <FreeRTOS_GetTCPStateName>
 80114f4:	4604      	mov	r4, r0
 80114f6:	78fb      	ldrb	r3, [r7, #3]
 80114f8:	4618      	mov	r0, r3
 80114fa:	f001 fd2b 	bl	8012f54 <FreeRTOS_GetTCPStateName>
 80114fe:	4603      	mov	r3, r0
 8011500:	f107 0208 	add.w	r2, r7, #8
 8011504:	9301      	str	r3, [sp, #4]
 8011506:	9400      	str	r4, [sp, #0]
 8011508:	4633      	mov	r3, r6
 801150a:	4629      	mov	r1, r5
 801150c:	480f      	ldr	r0, [pc, #60]	@ (801154c <vTCPStateChange+0x41c>)
 801150e:	f010 fe1b 	bl	8022148 <lUDPLoggingPrintf>
        }
        #endif /* ipconfigHAS_DEBUG_PRINTF */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( xConnected != NULL )
 8011512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011514:	2b00      	cmp	r3, #0
 8011516:	d005      	beq.n	8011524 <vTCPStateChange+0x3f4>
            {
                /* The 'connected' state has changed, call the OnConnect handler of the parent. */
                xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 8011518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801151a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 801151e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011520:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011522:	4798      	blx	r3
            }
        }
        #endif

        if( xParent != NULL )
 8011524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011526:	2b00      	cmp	r3, #0
 8011528:	d002      	beq.n	8011530 <vTCPStateChange+0x400>
        {
            vSocketWakeUpUser( xParent );
 801152a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801152c:	f7fe f871 	bl	800f612 <vSocketWakeUpUser>
        }
    }
 8011530:	bf00      	nop
 8011532:	3754      	adds	r7, #84	@ 0x54
 8011534:	46bd      	mov	sp, r7
 8011536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011538:	080261c0 	.word	0x080261c0
 801153c:	08026154 	.word	0x08026154
 8011540:	080261f4 	.word	0x080261f4
 8011544:	08026218 	.word	0x08026218
 8011548:	200015c8 	.word	0x200015c8
 801154c:	0802623c 	.word	0x0802623c

08011550 <prvTCPNextTimeout>:
 * @param[in] pxSocket The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    TickType_t prvTCPNextTimeout( struct xSOCKET * pxSocket )
    {
 8011550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011554:	b098      	sub	sp, #96	@ 0x60
 8011556:	af02      	add	r7, sp, #8
 8011558:	64f8      	str	r0, [r7, #76]	@ 0x4c
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 801155a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801155e:	653b      	str	r3, [r7, #80]	@ 0x50

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011562:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011566:	2b02      	cmp	r3, #2
 8011568:	f040 80cc 	bne.w	8011704 <prvTCPNextTimeout+0x1b4>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 801156c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801156e:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011572:	f003 0308 	and.w	r3, r3, #8
 8011576:	b2db      	uxtb	r3, r3
 8011578:	2b00      	cmp	r3, #0
 801157a:	d01a      	beq.n	80115b2 <prvTCPNextTimeout+0x62>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 801157c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801157e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011582:	2b02      	cmp	r3, #2
 8011584:	d811      	bhi.n	80115aa <prvTCPNextTimeout+0x5a>
                {
                    if( pxSocket->u.xTCP.ucRepCount == 0U )
 8011586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011588:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801158c:	2b00      	cmp	r3, #0
 801158e:	d102      	bne.n	8011596 <prvTCPNextTimeout+0x46>
                    {
                        ulDelayMs = 0U;
 8011590:	2300      	movs	r3, #0
 8011592:	653b      	str	r3, [r7, #80]	@ 0x50
 8011594:	e010      	b.n	80115b8 <prvTCPNextTimeout+0x68>
                    }
                    else
                    {
                        ulDelayMs = ( ( uint32_t ) 3000U ) << ( pxSocket->u.xTCP.ucRepCount - 1U );
 8011596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011598:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801159c:	3b01      	subs	r3, #1
 801159e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80115a2:	fa02 f303 	lsl.w	r3, r2, r3
 80115a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80115a8:	e006      	b.n	80115b8 <prvTCPNextTimeout+0x68>
                    }
                }
                else
                {
                    ulDelayMs = 11000U;
 80115aa:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 80115ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80115b0:	e002      	b.n	80115b8 <prvTCPNextTimeout+0x68>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500U;
 80115b2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80115b6:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            FreeRTOS_debug_printf( ( "Connect[%xip:%u]: next timeout %u: %u ms\n",
 80115b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115ba:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80115bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115be:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80115c2:	4618      	mov	r0, r3
 80115c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115c6:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80115ca:	461a      	mov	r2, r3
 80115cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115ce:	9300      	str	r3, [sp, #0]
 80115d0:	4613      	mov	r3, r2
 80115d2:	4602      	mov	r2, r0
 80115d4:	48a4      	ldr	r0, [pc, #656]	@ (8011868 <prvTCPNextTimeout+0x318>)
 80115d6:	f010 fdb7 	bl	8022148 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ( unsigned ) ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 80115da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115dc:	2200      	movs	r2, #0
 80115de:	643b      	str	r3, [r7, #64]	@ 0x40
 80115e0:	647a      	str	r2, [r7, #68]	@ 0x44
 80115e2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80115e6:	4622      	mov	r2, r4
 80115e8:	462b      	mov	r3, r5
 80115ea:	f04f 0000 	mov.w	r0, #0
 80115ee:	f04f 0100 	mov.w	r1, #0
 80115f2:	0159      	lsls	r1, r3, #5
 80115f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80115f8:	0150      	lsls	r0, r2, #5
 80115fa:	4602      	mov	r2, r0
 80115fc:	460b      	mov	r3, r1
 80115fe:	4621      	mov	r1, r4
 8011600:	1a51      	subs	r1, r2, r1
 8011602:	6239      	str	r1, [r7, #32]
 8011604:	4629      	mov	r1, r5
 8011606:	eb63 0301 	sbc.w	r3, r3, r1
 801160a:	627b      	str	r3, [r7, #36]	@ 0x24
 801160c:	f04f 0200 	mov.w	r2, #0
 8011610:	f04f 0300 	mov.w	r3, #0
 8011614:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8011618:	4649      	mov	r1, r9
 801161a:	008b      	lsls	r3, r1, #2
 801161c:	4641      	mov	r1, r8
 801161e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011622:	4641      	mov	r1, r8
 8011624:	008a      	lsls	r2, r1, #2
 8011626:	4610      	mov	r0, r2
 8011628:	4619      	mov	r1, r3
 801162a:	4603      	mov	r3, r0
 801162c:	4622      	mov	r2, r4
 801162e:	189b      	adds	r3, r3, r2
 8011630:	61bb      	str	r3, [r7, #24]
 8011632:	462b      	mov	r3, r5
 8011634:	460a      	mov	r2, r1
 8011636:	eb42 0303 	adc.w	r3, r2, r3
 801163a:	61fb      	str	r3, [r7, #28]
 801163c:	f04f 0200 	mov.w	r2, #0
 8011640:	f04f 0300 	mov.w	r3, #0
 8011644:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011648:	4629      	mov	r1, r5
 801164a:	00cb      	lsls	r3, r1, #3
 801164c:	4621      	mov	r1, r4
 801164e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011652:	4621      	mov	r1, r4
 8011654:	00ca      	lsls	r2, r1, #3
 8011656:	4610      	mov	r0, r2
 8011658:	4619      	mov	r1, r3
 801165a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801165e:	f04f 0300 	mov.w	r3, #0
 8011662:	f7ee fea5 	bl	80003b0 <__aeabi_uldivmod>
 8011666:	4602      	mov	r2, r0
 8011668:	460b      	mov	r3, r1
 801166a:	4613      	mov	r3, r2
 801166c:	2b00      	cmp	r3, #0
 801166e:	d044      	beq.n	80116fa <prvTCPNextTimeout+0x1aa>
 8011670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011672:	2200      	movs	r2, #0
 8011674:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011676:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011678:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 801167c:	4622      	mov	r2, r4
 801167e:	462b      	mov	r3, r5
 8011680:	f04f 0000 	mov.w	r0, #0
 8011684:	f04f 0100 	mov.w	r1, #0
 8011688:	0159      	lsls	r1, r3, #5
 801168a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801168e:	0150      	lsls	r0, r2, #5
 8011690:	4602      	mov	r2, r0
 8011692:	460b      	mov	r3, r1
 8011694:	4621      	mov	r1, r4
 8011696:	ebb2 0a01 	subs.w	sl, r2, r1
 801169a:	4629      	mov	r1, r5
 801169c:	eb63 0b01 	sbc.w	fp, r3, r1
 80116a0:	f04f 0200 	mov.w	r2, #0
 80116a4:	f04f 0300 	mov.w	r3, #0
 80116a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80116ac:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 80116b0:	ea4f 028a 	mov.w	r2, sl, lsl #2
 80116b4:	4692      	mov	sl, r2
 80116b6:	469b      	mov	fp, r3
 80116b8:	4623      	mov	r3, r4
 80116ba:	eb1a 0303 	adds.w	r3, sl, r3
 80116be:	613b      	str	r3, [r7, #16]
 80116c0:	462b      	mov	r3, r5
 80116c2:	eb4b 0303 	adc.w	r3, fp, r3
 80116c6:	617b      	str	r3, [r7, #20]
 80116c8:	f04f 0200 	mov.w	r2, #0
 80116cc:	f04f 0300 	mov.w	r3, #0
 80116d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80116d4:	4629      	mov	r1, r5
 80116d6:	00cb      	lsls	r3, r1, #3
 80116d8:	4621      	mov	r1, r4
 80116da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80116de:	4621      	mov	r1, r4
 80116e0:	00ca      	lsls	r2, r1, #3
 80116e2:	4610      	mov	r0, r2
 80116e4:	4619      	mov	r1, r3
 80116e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80116ea:	f04f 0300 	mov.w	r3, #0
 80116ee:	f7ee fe5f 	bl	80003b0 <__aeabi_uldivmod>
 80116f2:	4602      	mov	r2, r0
 80116f4:	460b      	mov	r3, r1
 80116f6:	b292      	uxth	r2, r2
 80116f8:	e000      	b.n	80116fc <prvTCPNextTimeout+0x1ac>
 80116fa:	2201      	movs	r2, #1
 80116fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116fe:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8011702:	e0a8      	b.n	8011856 <prvTCPNextTimeout+0x306>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 8011704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011706:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801170a:	2b00      	cmp	r3, #0
 801170c:	f040 80a3 	bne.w	8011856 <prvTCPNextTimeout+0x306>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 8011710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011712:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8011716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011718:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 801171c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011720:	461a      	mov	r2, r3
 8011722:	f004 fcbd 	bl	80160a0 <xTCPWindowTxHasData>
 8011726:	6578      	str	r0, [r7, #84]	@ 0x54

            if( ulDelayMs == 0U )
 8011728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801172a:	2b00      	cmp	r3, #0
 801172c:	d108      	bne.n	8011740 <prvTCPNextTimeout+0x1f0>
            {
                if( xResult != ( BaseType_t ) 0 )
 801172e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011730:	2b00      	cmp	r3, #0
 8011732:	d002      	beq.n	801173a <prvTCPNextTimeout+0x1ea>
                {
                    ulDelayMs = 1U;
 8011734:	2301      	movs	r3, #1
 8011736:	653b      	str	r3, [r7, #80]	@ 0x50
 8011738:	e002      	b.n	8011740 <prvTCPNextTimeout+0x1f0>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 801173a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801173e:	653b      	str	r3, [r7, #80]	@ 0x50
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs ); /* LCOV_EXCL_BR_LINE ulDelayMs will not be smaller than 1 */
 8011740:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011742:	2200      	movs	r2, #0
 8011744:	633b      	str	r3, [r7, #48]	@ 0x30
 8011746:	637a      	str	r2, [r7, #52]	@ 0x34
 8011748:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 801174c:	4652      	mov	r2, sl
 801174e:	465b      	mov	r3, fp
 8011750:	f04f 0000 	mov.w	r0, #0
 8011754:	f04f 0100 	mov.w	r1, #0
 8011758:	0159      	lsls	r1, r3, #5
 801175a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801175e:	0150      	lsls	r0, r2, #5
 8011760:	4602      	mov	r2, r0
 8011762:	460b      	mov	r3, r1
 8011764:	4651      	mov	r1, sl
 8011766:	ebb2 0801 	subs.w	r8, r2, r1
 801176a:	4659      	mov	r1, fp
 801176c:	eb63 0901 	sbc.w	r9, r3, r1
 8011770:	f04f 0200 	mov.w	r2, #0
 8011774:	f04f 0300 	mov.w	r3, #0
 8011778:	ea4f 0389 	mov.w	r3, r9, lsl #2
 801177c:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8011780:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8011784:	4690      	mov	r8, r2
 8011786:	4699      	mov	r9, r3
 8011788:	4653      	mov	r3, sl
 801178a:	eb18 0303 	adds.w	r3, r8, r3
 801178e:	60bb      	str	r3, [r7, #8]
 8011790:	465b      	mov	r3, fp
 8011792:	eb49 0303 	adc.w	r3, r9, r3
 8011796:	60fb      	str	r3, [r7, #12]
 8011798:	f04f 0200 	mov.w	r2, #0
 801179c:	f04f 0300 	mov.w	r3, #0
 80117a0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80117a4:	4649      	mov	r1, r9
 80117a6:	00cb      	lsls	r3, r1, #3
 80117a8:	4641      	mov	r1, r8
 80117aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80117ae:	4641      	mov	r1, r8
 80117b0:	00ca      	lsls	r2, r1, #3
 80117b2:	4610      	mov	r0, r2
 80117b4:	4619      	mov	r1, r3
 80117b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80117ba:	f04f 0300 	mov.w	r3, #0
 80117be:	f7ee fdf7 	bl	80003b0 <__aeabi_uldivmod>
 80117c2:	4602      	mov	r2, r0
 80117c4:	460b      	mov	r3, r1
 80117c6:	4613      	mov	r3, r2
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d040      	beq.n	801184e <prvTCPNextTimeout+0x2fe>
 80117cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117ce:	2200      	movs	r2, #0
 80117d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80117d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80117d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80117d8:	4642      	mov	r2, r8
 80117da:	464b      	mov	r3, r9
 80117dc:	f04f 0000 	mov.w	r0, #0
 80117e0:	f04f 0100 	mov.w	r1, #0
 80117e4:	0159      	lsls	r1, r3, #5
 80117e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80117ea:	0150      	lsls	r0, r2, #5
 80117ec:	4602      	mov	r2, r0
 80117ee:	460b      	mov	r3, r1
 80117f0:	4641      	mov	r1, r8
 80117f2:	1a54      	subs	r4, r2, r1
 80117f4:	4649      	mov	r1, r9
 80117f6:	eb63 0501 	sbc.w	r5, r3, r1
 80117fa:	f04f 0200 	mov.w	r2, #0
 80117fe:	f04f 0300 	mov.w	r3, #0
 8011802:	00ab      	lsls	r3, r5, #2
 8011804:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8011808:	00a2      	lsls	r2, r4, #2
 801180a:	4614      	mov	r4, r2
 801180c:	461d      	mov	r5, r3
 801180e:	4643      	mov	r3, r8
 8011810:	18e3      	adds	r3, r4, r3
 8011812:	603b      	str	r3, [r7, #0]
 8011814:	464b      	mov	r3, r9
 8011816:	eb45 0303 	adc.w	r3, r5, r3
 801181a:	607b      	str	r3, [r7, #4]
 801181c:	f04f 0200 	mov.w	r2, #0
 8011820:	f04f 0300 	mov.w	r3, #0
 8011824:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011828:	4629      	mov	r1, r5
 801182a:	00cb      	lsls	r3, r1, #3
 801182c:	4621      	mov	r1, r4
 801182e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011832:	4621      	mov	r1, r4
 8011834:	00ca      	lsls	r2, r1, #3
 8011836:	4610      	mov	r0, r2
 8011838:	4619      	mov	r1, r3
 801183a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801183e:	f04f 0300 	mov.w	r3, #0
 8011842:	f7ee fdb5 	bl	80003b0 <__aeabi_uldivmod>
 8011846:	4602      	mov	r2, r0
 8011848:	460b      	mov	r3, r1
 801184a:	b292      	uxth	r2, r2
 801184c:	e000      	b.n	8011850 <prvTCPNextTimeout+0x300>
 801184e:	2201      	movs	r2, #1
 8011850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011852:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8011856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011858:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
    }
 801185c:	4618      	mov	r0, r3
 801185e:	3758      	adds	r7, #88	@ 0x58
 8011860:	46bd      	mov	sp, r7
 8011862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011866:	bf00      	nop
 8011868:	08026260 	.word	0x08026260

0801186c <xGetSourceAddrFromBuffer>:
 * @param[in] pucEthernetBuffer The Ethernet buffer from which the source address will be retrieved.
 *
 * @return IPv46_Address_t struct containing the source IP address.
 */
    static IPv46_Address_t xGetSourceAddrFromBuffer( const uint8_t * const pucEthernetBuffer )
    {
 801186c:	b4b0      	push	{r4, r5, r7}
 801186e:	b08b      	sub	sp, #44	@ 0x2c
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
 8011874:	6039      	str	r1, [r7, #0]

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 801187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801187c:	899b      	ldrh	r3, [r3, #12]
 801187e:	b29b      	uxth	r3, r3
 8011880:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8011884:	4293      	cmp	r3, r2
 8011886:	d10e      	bne.n	80118a6 <xGetSourceAddrFromBuffer+0x3a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_IPv6_t * const pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	330e      	adds	r3, #14
 801188c:	61fb      	str	r3, [r7, #28]
            xSourceAddr.xIs_IPv6 = pdTRUE;
 801188e:	2301      	movs	r3, #1
 8011890:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( xSourceAddr.xIPAddress.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, sizeof( IPv6_Address_t ) );
 8011892:	69fb      	ldr	r3, [r7, #28]
 8011894:	3308      	adds	r3, #8
 8011896:	f107 0408 	add.w	r4, r7, #8
 801189a:	6818      	ldr	r0, [r3, #0]
 801189c:	6859      	ldr	r1, [r3, #4]
 801189e:	689a      	ldr	r2, [r3, #8]
 80118a0:	68db      	ldr	r3, [r3, #12]
 80118a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118a4:	e018      	b.n	80118d8 <xGetSourceAddrFromBuffer+0x6c>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_t * const pxIPHeader = ( ( const IPHeader_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	330e      	adds	r3, #14
 80118aa:	623b      	str	r3, [r7, #32]
            xSourceAddr.xIs_IPv6 = pdFALSE;
 80118ac:	2300      	movs	r3, #0
 80118ae:	61bb      	str	r3, [r7, #24]
            xSourceAddr.xIPAddress.ulIP_IPv4 = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 80118b0:	6a3b      	ldr	r3, [r7, #32]
 80118b2:	68db      	ldr	r3, [r3, #12]
 80118b4:	061a      	lsls	r2, r3, #24
 80118b6:	6a3b      	ldr	r3, [r7, #32]
 80118b8:	68db      	ldr	r3, [r3, #12]
 80118ba:	021b      	lsls	r3, r3, #8
 80118bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80118c0:	431a      	orrs	r2, r3
 80118c2:	6a3b      	ldr	r3, [r7, #32]
 80118c4:	68db      	ldr	r3, [r3, #12]
 80118c6:	0a1b      	lsrs	r3, r3, #8
 80118c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80118cc:	431a      	orrs	r2, r3
 80118ce:	6a3b      	ldr	r3, [r7, #32]
 80118d0:	68db      	ldr	r3, [r3, #12]
 80118d2:	0e1b      	lsrs	r3, r3, #24
 80118d4:	4313      	orrs	r3, r2
 80118d6:	60bb      	str	r3, [r7, #8]
        }

        return xSourceAddr;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	461d      	mov	r5, r3
 80118dc:	f107 0408 	add.w	r4, r7, #8
 80118e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80118e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80118e4:	6823      	ldr	r3, [r4, #0]
 80118e6:	602b      	str	r3, [r5, #0]
    }
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	372c      	adds	r7, #44	@ 0x2c
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bcb0      	pop	{r4, r5, r7}
 80118f0:	4770      	bx	lr
	...

080118f4 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 80118f4:	b5b0      	push	{r4, r5, r7, lr}
 80118f6:	b096      	sub	sp, #88	@ 0x58
 80118f8:	af04      	add	r7, sp, #16
 80118fa:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdPASS;
 80118fc:	2301      	movs	r3, #1
 80118fe:	647b      	str	r3, [r7, #68]	@ 0x44
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer;
        size_t uxIPHeaderOffset;

        configASSERT( pxDescriptor != NULL );
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d104      	bne.n	8011910 <xProcessReceivedTCPPacket+0x1c>
 8011906:	f240 21f7 	movw	r1, #759	@ 0x2f7
 801190a:	4898      	ldr	r0, [pc, #608]	@ (8011b6c <xProcessReceivedTCPPacket+0x278>)
 801190c:	f7f0 f824 	bl	8001958 <vAssertCalled>
        configASSERT( pxDescriptor->pucEthernetBuffer != NULL );
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011914:	2b00      	cmp	r3, #0
 8011916:	d104      	bne.n	8011922 <xProcessReceivedTCPPacket+0x2e>
 8011918:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 801191c:	4893      	ldr	r0, [pc, #588]	@ (8011b6c <xProcessReceivedTCPPacket+0x278>)
 801191e:	f7f0 f81b 	bl	8001958 <vAssertCalled>

        pxNetworkBuffer = pxDescriptor;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	61fb      	str	r3, [r7, #28]
        uxIPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8011926:	69fb      	ldr	r3, [r7, #28]
 8011928:	4618      	mov	r0, r3
 801192a:	f7f8 fb55 	bl	8009fd8 <uxIPHeaderSizePacket>
 801192e:	4603      	mov	r3, r0
 8011930:	330e      	adds	r3, #14
 8011932:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( uxIPHeaderOffset + ipSIZE_OF_TCP_HEADER ) )
 8011934:	69fb      	ldr	r3, [r7, #28]
 8011936:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801193a:	3314      	adds	r3, #20
 801193c:	429a      	cmp	r2, r3
 801193e:	d202      	bcs.n	8011946 <xProcessReceivedTCPPacket+0x52>
        {
            xResult = pdFAIL;
 8011940:	2300      	movs	r3, #0
 8011942:	647b      	str	r3, [r7, #68]	@ 0x44
 8011944:	e191      	b.n	8011c6a <xProcessReceivedTCPPacket+0x376>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
                                                &( pxNetworkBuffer->pucEthernetBuffer[ uxIPHeaderOffset ] ) );
 8011946:	69fb      	ldr	r3, [r7, #28]
 8011948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
 801194a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801194c:	4413      	add	r3, r2
 801194e:	63bb      	str	r3, [r7, #56]	@ 0x38

            const uint16_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011952:	7b5b      	ldrb	r3, [r3, #13]
 8011954:	86fb      	strh	r3, [r7, #54]	@ 0x36
            const uint16_t usLocalPort = FreeRTOS_htons( pxTCPHeader->usDestinationPort );
 8011956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011958:	885b      	ldrh	r3, [r3, #2]
 801195a:	b29b      	uxth	r3, r3
 801195c:	021b      	lsls	r3, r3, #8
 801195e:	b21a      	sxth	r2, r3
 8011960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011962:	885b      	ldrh	r3, [r3, #2]
 8011964:	b29b      	uxth	r3, r3
 8011966:	0a1b      	lsrs	r3, r3, #8
 8011968:	b29b      	uxth	r3, r3
 801196a:	b21b      	sxth	r3, r3
 801196c:	4313      	orrs	r3, r2
 801196e:	b21b      	sxth	r3, r3
 8011970:	86bb      	strh	r3, [r7, #52]	@ 0x34
            const uint16_t usRemotePort = FreeRTOS_htons( pxTCPHeader->usSourcePort );
 8011972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011974:	881b      	ldrh	r3, [r3, #0]
 8011976:	b29b      	uxth	r3, r3
 8011978:	021b      	lsls	r3, r3, #8
 801197a:	b21a      	sxth	r2, r3
 801197c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801197e:	881b      	ldrh	r3, [r3, #0]
 8011980:	b29b      	uxth	r3, r3
 8011982:	0a1b      	lsrs	r3, r3, #8
 8011984:	b29b      	uxth	r3, r3
 8011986:	b21b      	sxth	r3, r3
 8011988:	4313      	orrs	r3, r2
 801198a:	b21b      	sxth	r3, r3
 801198c:	867b      	strh	r3, [r7, #50]	@ 0x32
            const IPv46_Address_t xRemoteIP = xGetSourceAddrFromBuffer( pxNetworkBuffer->pucEthernetBuffer );
 801198e:	69fb      	ldr	r3, [r7, #28]
 8011990:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011992:	f107 0308 	add.w	r3, r7, #8
 8011996:	4611      	mov	r1, r2
 8011998:	4618      	mov	r0, r3
 801199a:	f7ff ff67 	bl	801186c <xGetSourceAddrFromBuffer>

            /* Find the destination socket, and if not found: return a socket listening to
             * the destination PORT. */
            FreeRTOS_Socket_t * pxSocket = pxTCPSocketLookup( 0U, usLocalPort, xRemoteIP, usRemotePort );
 801199e:	8ebd      	ldrh	r5, [r7, #52]	@ 0x34
 80119a0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80119a2:	9303      	str	r3, [sp, #12]
 80119a4:	466c      	mov	r4, sp
 80119a6:	f107 0310 	add.w	r3, r7, #16
 80119aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80119ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80119b2:	f107 0308 	add.w	r3, r7, #8
 80119b6:	cb0c      	ldmia	r3, {r2, r3}
 80119b8:	4629      	mov	r1, r5
 80119ba:	2000      	movs	r0, #0
 80119bc:	f7fe fbc2 	bl	8010144 <pxTCPSocketLookup>
 80119c0:	6438      	str	r0, [r7, #64]	@ 0x40

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == pdFALSE ) )
 80119c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d008      	beq.n	80119da <xProcessReceivedTCPPacket+0xe6>
 80119c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119ca:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80119ce:	4618      	mov	r0, r3
 80119d0:	f000 fc92 	bl	80122f8 <prvTCPSocketIsActive>
 80119d4:	4603      	mov	r3, r0
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d116      	bne.n	8011a08 <xProcessReceivedTCPPacket+0x114>
                /* A TCP messages is received but either there is no socket with the
                 * given port number or the there is a socket, but it is in one of these
                 * non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
                 * eTIME_WAIT. */

                FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%d)\n", usLocalPort, usRemotePort ) );
 80119da:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80119dc:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80119de:	4619      	mov	r1, r3
 80119e0:	4863      	ldr	r0, [pc, #396]	@ (8011b70 <xProcessReceivedTCPPacket+0x27c>)
 80119e2:	f010 fbb1 	bl	8022148 <lUDPLoggingPrintf>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 80119e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80119e8:	f003 031f 	and.w	r3, r3, #31
 80119ec:	2b10      	cmp	r3, #16
 80119ee:	d008      	beq.n	8011a02 <xProcessReceivedTCPPacket+0x10e>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 80119f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80119f2:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d103      	bne.n	8011a02 <xProcessReceivedTCPPacket+0x10e>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80119fa:	69fb      	ldr	r3, [r7, #28]
 80119fc:	4618      	mov	r0, r3
 80119fe:	f002 fd0b 	bl	8014418 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 8011a02:	2300      	movs	r3, #0
 8011a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a06:	e0d6      	b.n	8011bb6 <xProcessReceivedTCPPacket+0x2c2>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 8011a08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 8011a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a12:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011a16:	2b01      	cmp	r3, #1
 8011a18:	d127      	bne.n	8011a6a <xProcessReceivedTCPPacket+0x176>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 8011a1a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011a1c:	f003 031f 	and.w	r3, r3, #31
 8011a20:	2b02      	cmp	r3, #2
 8011a22:	d015      	beq.n	8011a50 <xProcessReceivedTCPPacket+0x15c>
                        /* What happens: maybe after a reboot, a client doesn't know the
                         * connection had gone.  Send a RST in order to get a new connect
                         * request. */
                        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                        {
                            FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %u to port %u\n",
 8011a24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011a26:	4618      	mov	r0, r3
 8011a28:	f003 fbbe 	bl	80151a8 <prvTCPFlagMeaning>
 8011a2c:	4601      	mov	r1, r0
 8011a2e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8011a30:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011a32:	4850      	ldr	r0, [pc, #320]	@ (8011b74 <xProcessReceivedTCPPacket+0x280>)
 8011a34:	f010 fb88 	bl	8022148 <lUDPLoggingPrintf>
                                                     prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), usRemotePort, usLocalPort ) );
                        }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 8011a38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011a3a:	f003 0304 	and.w	r3, r3, #4
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d103      	bne.n	8011a4a <xProcessReceivedTCPPacket+0x156>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 8011a42:	69fb      	ldr	r3, [r7, #28]
 8011a44:	4618      	mov	r0, r3
 8011a46:	f002 fce7 	bl	8014418 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a4e:	e0b2      	b.n	8011bb6 <xProcessReceivedTCPPacket+0x2c2>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 8011a50:	69fb      	ldr	r3, [r7, #28]
 8011a52:	4619      	mov	r1, r3
 8011a54:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011a56:	f001 f999 	bl	8012d8c <prvHandleListen>
 8011a5a:	6438      	str	r0, [r7, #64]	@ 0x40

                        if( pxSocket == NULL )
 8011a5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	f040 80a9 	bne.w	8011bb6 <xProcessReceivedTCPPacket+0x2c2>
                        {
                            xResult = pdFAIL;
 8011a64:	2300      	movs	r3, #0
 8011a66:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a68:	e0a5      	b.n	8011bb6 <xProcessReceivedTCPPacket+0x2c2>
                } /* if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 8011a6a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011a6c:	f003 0304 	and.w	r3, r3, #4
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d068      	beq.n	8011b46 <xProcessReceivedTCPPacket+0x252>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %u for %u\n", usRemotePort, usLocalPort ) );
 8011a74:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011a76:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8011a78:	4619      	mov	r1, r3
 8011a7a:	483f      	ldr	r0, [pc, #252]	@ (8011b78 <xProcessReceivedTCPPacket+0x284>)
 8011a7c:	f010 fb64 	bl	8022148 <lUDPLoggingPrintf>

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011a80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a82:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011a86:	2b02      	cmp	r3, #2
 8011a88:	d11f      	bne.n	8011aca <xProcessReceivedTCPPacket+0x1d6>
                        {
                            const uint32_t ulAckNumber = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8011a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a8c:	689b      	ldr	r3, [r3, #8]
 8011a8e:	061a      	lsls	r2, r3, #24
 8011a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a92:	689b      	ldr	r3, [r3, #8]
 8011a94:	021b      	lsls	r3, r3, #8
 8011a96:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011a9a:	431a      	orrs	r2, r3
 8011a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a9e:	689b      	ldr	r3, [r3, #8]
 8011aa0:	0a1b      	lsrs	r3, r3, #8
 8011aa2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011aa6:	431a      	orrs	r2, r3
 8011aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aaa:	689b      	ldr	r3, [r3, #8]
 8011aac:	0e1b      	lsrs	r3, r3, #24
 8011aae:	4313      	orrs	r3, r2
 8011ab0:	627b      	str	r3, [r7, #36]	@ 0x24

                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1U ) )
 8011ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ab4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8011ab8:	3301      	adds	r3, #1
 8011aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d13f      	bne.n	8011b40 <xProcessReceivedTCPPacket+0x24c>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 8011ac0:	2100      	movs	r1, #0
 8011ac2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011ac4:	f7ff fb34 	bl	8011130 <vTCPStateChange>
 8011ac8:	e03a      	b.n	8011b40 <xProcessReceivedTCPPacket+0x24c>
                            }
                        }
                        else
                        {
                            const uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8011aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011acc:	685b      	ldr	r3, [r3, #4]
 8011ace:	061a      	lsls	r2, r3, #24
 8011ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ad2:	685b      	ldr	r3, [r3, #4]
 8011ad4:	021b      	lsls	r3, r3, #8
 8011ad6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011ada:	431a      	orrs	r2, r3
 8011adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	0a1b      	lsrs	r3, r3, #8
 8011ae2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011ae6:	431a      	orrs	r2, r3
 8011ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aea:	685b      	ldr	r3, [r3, #4]
 8011aec:	0e1b      	lsrs	r3, r3, #24
 8011aee:	4313      	orrs	r3, r2
 8011af0:	62bb      	str	r3, [r7, #40]	@ 0x28

                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 8011af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011af4:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8011af8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d104      	bne.n	8011b08 <xProcessReceivedTCPPacket+0x214>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 8011afe:	2100      	movs	r1, #0
 8011b00:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011b02:	f7ff fb15 	bl	8011130 <vTCPStateChange>
 8011b06:	e01b      	b.n	8011b40 <xProcessReceivedTCPPacket+0x24c>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8011b08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b0a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8011b0e:	4619      	mov	r1, r3
 8011b10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b12:	f003 fc82 	bl	801541a <xSequenceGreaterThan>
 8011b16:	4603      	mov	r3, r0
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d011      	beq.n	8011b40 <xProcessReceivedTCPPacket+0x24c>
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8011b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b1e:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
                                                          pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) != pdFALSE ) )
 8011b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b24:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8011b28:	4413      	add	r3, r2
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b2e:	f003 fc5e 	bl	80153ee <xSequenceLessThan>
 8011b32:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d003      	beq.n	8011b40 <xProcessReceivedTCPPacket+0x24c>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 8011b38:	69fb      	ldr	r3, [r7, #28]
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f002 fc5f 	bl	80143fe <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 8011b40:	2300      	movs	r3, #0
 8011b42:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b44:	e037      	b.n	8011bb6 <xProcessReceivedTCPPacket+0x2c2>
                    }
                    /* Check whether there is a pure SYN amongst the TCP flags while the connection is established. */
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) )
 8011b46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011b48:	f003 031f 	and.w	r3, r3, #31
 8011b4c:	2b02      	cmp	r3, #2
 8011b4e:	d117      	bne.n	8011b80 <xProcessReceivedTCPPacket+0x28c>
 8011b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b52:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011b56:	2b04      	cmp	r3, #4
 8011b58:	d912      	bls.n	8011b80 <xProcessReceivedTCPPacket+0x28c>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %u\n", usRemotePort ) );
 8011b5a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011b5c:	4619      	mov	r1, r3
 8011b5e:	4807      	ldr	r0, [pc, #28]	@ (8011b7c <xProcessReceivedTCPPacket+0x288>)
 8011b60:	f010 faf2 	bl	8022148 <lUDPLoggingPrintf>

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 8011b64:	2300      	movs	r3, #0
 8011b66:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b68:	e025      	b.n	8011bb6 <xProcessReceivedTCPPacket+0x2c2>
 8011b6a:	bf00      	nop
 8011b6c:	08026154 	.word	0x08026154
 8011b70:	0802628c 	.word	0x0802628c
 8011b74:	080262b4 	.word	0x080262b4
 8011b78:	080262ec 	.word	0x080262ec
 8011b7c:	08026310 	.word	0x08026310
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 8011b80:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011b82:	f7f8 fa43 	bl	800a00c <uxIPHeaderSizeSocket>
 8011b86:	4603      	mov	r3, r0
 8011b88:	330e      	adds	r3, #14
 8011b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8011b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b8e:	33a0      	adds	r3, #160	@ 0xa0
 8011b90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011b92:	4413      	add	r3, r2
 8011b94:	f103 000a 	add.w	r0, r3, #10
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 8011b98:	69fb      	ldr	r3, [r7, #28]
 8011b9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b9e:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8011ba0:	2214      	movs	r2, #20
 8011ba2:	4619      	mov	r1, r3
 8011ba4:	f010 fcec 	bl	8022580 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 8011ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011baa:	330d      	adds	r3, #13
 8011bac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011bae:	4413      	add	r3, r2
 8011bb0:	2210      	movs	r2, #16
 8011bb2:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                    }
                }
            }

            if( xResult != pdFAIL )
 8011bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d056      	beq.n	8011c6a <xProcessReceivedTCPPacket+0x376>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL ); /* LCOV_EXCL_LINE ,this branch will not be hit*/
 8011bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d104      	bne.n	8011bcc <xProcessReceivedTCPPacket+0x2d8>
 8011bc2:	f240 319e 	movw	r1, #926	@ 0x39e
 8011bc6:	482b      	ldr	r0, [pc, #172]	@ (8011c74 <xProcessReceivedTCPPacket+0x380>)
 8011bc8:	f7ef fec6 	bl	8001958 <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 8011bcc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011bce:	f7ff fa53 	bl	8011078 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxTCPHeader->ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 8011bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bd4:	7b1b      	ldrb	r3, [r3, #12]
 8011bd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011bda:	2b50      	cmp	r3, #80	@ 0x50
 8011bdc:	d905      	bls.n	8011bea <xProcessReceivedTCPPacket+0x2f6>
                {
                    xResult = prvCheckOptions( pxSocket, pxNetworkBuffer );
 8011bde:	69fb      	ldr	r3, [r7, #28]
 8011be0:	4619      	mov	r1, r3
 8011be2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011be4:	f000 f894 	bl	8011d10 <prvCheckOptions>
 8011be8:	6478      	str	r0, [r7, #68]	@ 0x44
                }

                if( xResult != pdFAIL )
 8011bea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d03c      	beq.n	8011c6a <xProcessReceivedTCPPacket+0x376>
                {
                    usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8011bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bf2:	89db      	ldrh	r3, [r3, #14]
 8011bf4:	b29b      	uxth	r3, r3
 8011bf6:	021b      	lsls	r3, r3, #8
 8011bf8:	b21a      	sxth	r2, r3
 8011bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bfc:	89db      	ldrh	r3, [r3, #14]
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	0a1b      	lsrs	r3, r3, #8
 8011c02:	b29b      	uxth	r3, r3
 8011c04:	b21b      	sxth	r3, r3
 8011c06:	4313      	orrs	r3, r2
 8011c08:	b21b      	sxth	r3, r3
 8011c0a:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8011c0c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c10:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8011c14:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011c16:	f003 0302 	and.w	r3, r3, #2
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d10a      	bne.n	8011c34 <xProcessReceivedTCPPacket+0x340>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8011c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c20:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8011c24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011c26:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8011c2a:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 8011c2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c30:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    }
                    #endif /* ipconfigUSE_TCP_WIN */

                    /* In prvTCPHandleState() the incoming messages will be handled
                     * depending on the current state of the connection. */
                    if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 8011c34:	f107 031c 	add.w	r3, r7, #28
 8011c38:	4619      	mov	r1, r3
 8011c3a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011c3c:	f000 ff78 	bl	8012b30 <prvTCPHandleState>
 8011c40:	4603      	mov	r3, r0
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	dd05      	ble.n	8011c52 <xProcessReceivedTCPPacket+0x35e>
                    {
                        /* prvTCPHandleState() has sent a message, see if there are more to
                         * be transmitted. */
                        #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8011c46:	f107 031c 	add.w	r3, r7, #28
 8011c4a:	4619      	mov	r1, r3
 8011c4c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011c4e:	f001 fc6f 	bl	8013530 <prvTCPSendRepeated>
                        }
                        #endif /* ipconfigUSE_TCP_WIN */
                    }

                    if( pxNetworkBuffer != NULL )
 8011c52:	69fb      	ldr	r3, [r7, #28]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d005      	beq.n	8011c64 <xProcessReceivedTCPPacket+0x370>
                    {
                        /* We must check if the buffer is unequal to NULL, because the
                         * socket might keep a reference to it in case a delayed ACK must be
                         * sent. */
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8011c58:	69fb      	ldr	r3, [r7, #28]
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f005 fbcc 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
                        #ifndef _lint
                            /* Clear pointers that are freed. */
                            pxNetworkBuffer = NULL;
 8011c60:	2300      	movs	r3, #0
 8011c62:	61fb      	str	r3, [r7, #28]
                        #endif
                    }

                    /* And finally, calculate when this socket wants to be woken up. */
                    ( void ) prvTCPNextTimeout( pxSocket );
 8011c64:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011c66:	f7ff fc73 	bl	8011550 <prvTCPNextTimeout>
                }
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 8011c6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3748      	adds	r7, #72	@ 0x48
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bdb0      	pop	{r4, r5, r7, pc}
 8011c74:	08026154 	.word	0x08026154

08011c78 <xTCPCheckNewClient>:
 * @param[in] pxSocket The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b088      	sub	sp, #32
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011c84:	021b      	lsls	r3, r3, #8
 8011c86:	b21a      	sxth	r2, r3
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011c8c:	0a1b      	lsrs	r3, r3, #8
 8011c8e:	b29b      	uxth	r3, r3
 8011c90:	b21b      	sxth	r3, r3
 8011c92:	4313      	orrs	r3, r2
 8011c94:	b21b      	sxth	r3, r3
 8011c96:	b29b      	uxth	r3, r3
 8011c98:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEndTCP = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8011c9e:	4b19      	ldr	r3, [pc, #100]	@ (8011d04 <xTCPCheckNewClient+0x8c>)
 8011ca0:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8011ca2:	4b19      	ldr	r3, [pc, #100]	@ (8011d08 <xTCPCheckNewClient+0x90>)
 8011ca4:	68db      	ldr	r3, [r3, #12]
 8011ca6:	61fb      	str	r3, [r7, #28]
 8011ca8:	e023      	b.n	8011cf2 <xTCPCheckNewClient+0x7a>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 8011caa:	69fb      	ldr	r3, [r7, #28]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	697a      	ldr	r2, [r7, #20]
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d11b      	bne.n	8011cec <xTCPCheckNewClient+0x74>
            {
                pxFound = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	68db      	ldr	r3, [r3, #12]
 8011cb8:	60fb      	str	r3, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8011cc0:	2b06      	cmp	r3, #6
 8011cc2:	d113      	bne.n	8011cec <xTCPCheckNewClient+0x74>
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011cca:	f003 0302 	and.w	r3, r3, #2
 8011cce:	b2db      	uxtb	r3, r3
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d00b      	beq.n	8011cec <xTCPCheckNewClient+0x74>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	68fa      	ldr	r2, [r7, #12]
 8011cd8:	67da      	str	r2, [r3, #124]	@ 0x7c
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011cde:	4619      	mov	r1, r3
 8011ce0:	480a      	ldr	r0, [pc, #40]	@ (8011d0c <xTCPCheckNewClient+0x94>)
 8011ce2:	f010 fa31 	bl	8022148 <lUDPLoggingPrintf>
                    xResult = pdTRUE;
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	61bb      	str	r3, [r7, #24]
                    break;
 8011cea:	e006      	b.n	8011cfa <xTCPCheckNewClient+0x82>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8011cec:	69fb      	ldr	r3, [r7, #28]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 8011cf2:	69fa      	ldr	r2, [r7, #28]
 8011cf4:	693b      	ldr	r3, [r7, #16]
 8011cf6:	429a      	cmp	r2, r3
 8011cf8:	d1d7      	bne.n	8011caa <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 8011cfa:	69bb      	ldr	r3, [r7, #24]
    }
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	3720      	adds	r7, #32
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}
 8011d04:	2000158c 	.word	0x2000158c
 8011d08:	20001584 	.word	0x20001584
 8011d0c:	08026330 	.word	0x08026330

08011d10 <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    BaseType_t prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b08c      	sub	sp, #48	@ 0x30
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
 8011d18:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8011d1a:	6838      	ldr	r0, [r7, #0]
 8011d1c:	f7f8 f95c 	bl	8009fd8 <uxIPHeaderSizePacket>
 8011d20:	4603      	mov	r3, r0
 8011d22:	330e      	adds	r3, #14
 8011d24:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011d2a:	69fb      	ldr	r3, [r7, #28]
 8011d2c:	4413      	add	r3, r2
 8011d2e:	61bb      	str	r3, [r7, #24]
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        BaseType_t xReturn = pdPASS;
 8011d30:	2301      	movs	r3, #1
 8011d32:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ipSIZE_OF_TCP_HEADER;
 8011d34:	69fb      	ldr	r3, [r7, #28]
 8011d36:	3314      	adds	r3, #20
 8011d38:	617b      	str	r3, [r7, #20]
        size_t uxOptionsLength;
        int32_t lResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8011d3a:	69bb      	ldr	r3, [r7, #24]
 8011d3c:	613b      	str	r3, [r7, #16]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	3314      	adds	r3, #20
 8011d42:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 8011d44:	693b      	ldr	r3, [r7, #16]
 8011d46:	7b1b      	ldrb	r3, [r3, #12]
 8011d48:	2b50      	cmp	r3, #80	@ 0x50
 8011d4a:	d93f      	bls.n	8011dcc <prvCheckOptions+0xbc>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( uint8_t ) ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 8011d4c:	693b      	ldr	r3, [r7, #16]
 8011d4e:	7b1b      	ldrb	r3, [r3, #12]
 8011d50:	091b      	lsrs	r3, r3, #4
 8011d52:	b2db      	uxtb	r3, r3
 8011d54:	3b05      	subs	r3, #5
 8011d56:	b2db      	uxtb	r3, r3
 8011d58:	009b      	lsls	r3, r3, #2
 8011d5a:	73fb      	strb	r3, [r7, #15]
            uxOptionsLength = ( size_t ) ucLength;
 8011d5c:	7bfb      	ldrb	r3, [r7, #15]
 8011d5e:	623b      	str	r3, [r7, #32]

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d64:	697a      	ldr	r2, [r7, #20]
 8011d66:	429a      	cmp	r2, r3
 8011d68:	d230      	bcs.n	8011dcc <prvCheckOptions+0xbc>
            {
                /* Validate options size calculation. */
                if( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) )
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011d6e:	697b      	ldr	r3, [r7, #20]
 8011d70:	1ad3      	subs	r3, r2, r3
 8011d72:	6a3a      	ldr	r2, [r7, #32]
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d829      	bhi.n	8011dcc <prvCheckOptions+0xbc>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 8011d78:	693b      	ldr	r3, [r7, #16]
 8011d7a:	7b5b      	ldrb	r3, [r3, #13]
 8011d7c:	f003 0302 	and.w	r3, r3, #2
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d002      	beq.n	8011d8a <prvCheckOptions+0x7a>
                    {
                        xHasSYNFlag = pdTRUE;
 8011d84:	2301      	movs	r3, #1
 8011d86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011d88:	e001      	b.n	8011d8e <prvCheckOptions+0x7e>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 8011d8e:	6a3b      	ldr	r3, [r7, #32]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d018      	beq.n	8011dc6 <prvCheckOptions+0xb6>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        lResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 8011d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d96:	687a      	ldr	r2, [r7, #4]
 8011d98:	6a39      	ldr	r1, [r7, #32]
 8011d9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011d9c:	f000 f81c 	bl	8011dd8 <prvSingleStepTCPHeaderOptions>
 8011da0:	60b8      	str	r0, [r7, #8]

                        if( lResult < 0 )
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	da02      	bge.n	8011dae <prvCheckOptions+0x9e>
                        {
                            xReturn = pdFAIL;
 8011da8:	2300      	movs	r3, #0
 8011daa:	627b      	str	r3, [r7, #36]	@ 0x24
                            break;
 8011dac:	e00e      	b.n	8011dcc <prvCheckOptions+0xbc>
                        }

                        if( lResult == 0 )
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d00a      	beq.n	8011dca <prvCheckOptions+0xba>
                        {
                            break;
                        }

                        uxOptionsLength -= ( size_t ) lResult;
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	6a3a      	ldr	r2, [r7, #32]
 8011db8:	1ad3      	subs	r3, r2, r3
 8011dba:	623b      	str	r3, [r7, #32]
                        pucPtr = &( pucPtr[ lResult ] );
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011dc0:	4413      	add	r3, r2
 8011dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 8011dc4:	e7e3      	b.n	8011d8e <prvCheckOptions+0x7e>
                            break;
 8011dc6:	bf00      	nop
 8011dc8:	e000      	b.n	8011dcc <prvCheckOptions+0xbc>
                            break;
 8011dca:	bf00      	nop
                    }
                }
            }
        }

        return xReturn;
 8011dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3730      	adds	r7, #48	@ 0x30
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}
	...

08011dd8 <prvSingleStepTCPHeaderOptions>:
 */
    static int32_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b08a      	sub	sp, #40	@ 0x28
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	60f8      	str	r0, [r7, #12]
 8011de0:	60b9      	str	r1, [r7, #8]
 8011de2:	607a      	str	r2, [r7, #4]
 8011de4:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	617b      	str	r3, [r7, #20]
        uint8_t ucLen;
        int32_t lIndex = 0;
 8011dea:	2300      	movs	r3, #0
 8011dec:	61fb      	str	r3, [r7, #28]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011df4:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8011df6:	2300      	movs	r3, #0
 8011df8:	61bb      	str	r3, [r7, #24]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	781b      	ldrb	r3, [r3, #0]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d102      	bne.n	8011e08 <prvSingleStepTCPHeaderOptions+0x30>
        {
            /* End of options. */
            lIndex = 0;
 8011e02:	2300      	movs	r3, #0
 8011e04:	61fb      	str	r3, [r7, #28]
 8011e06:	e0da      	b.n	8011fbe <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	781b      	ldrb	r3, [r3, #0]
 8011e0c:	2b01      	cmp	r3, #1
 8011e0e:	d102      	bne.n	8011e16 <prvSingleStepTCPHeaderOptions+0x3e>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            lIndex = 1;
 8011e10:	2301      	movs	r3, #1
 8011e12:	61fb      	str	r3, [r7, #28]
 8011e14:	e0d3      	b.n	8011fbe <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( uxRemainingOptionsBytes < 2U )
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	2b01      	cmp	r3, #1
 8011e1a:	d803      	bhi.n	8011e24 <prvSingleStepTCPHeaderOptions+0x4c>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            lIndex = -1;
 8011e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e20:	61fb      	str	r3, [r7, #28]
 8011e22:	e0cc      	b.n	8011fbe <prvSingleStepTCPHeaderOptions+0x1e6>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	781b      	ldrb	r3, [r3, #0]
 8011e28:	2b03      	cmp	r3, #3
 8011e2a:	d11e      	bne.n	8011e6a <prvSingleStepTCPHeaderOptions+0x92>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	2b02      	cmp	r3, #2
 8011e30:	d904      	bls.n	8011e3c <prvSingleStepTCPHeaderOptions+0x64>
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	3301      	adds	r3, #1
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	2b03      	cmp	r3, #3
 8011e3a:	d003      	beq.n	8011e44 <prvSingleStepTCPHeaderOptions+0x6c>
                {
                    lIndex = -1;
 8011e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e40:	61fb      	str	r3, [r7, #28]
 8011e42:	e0bc      	b.n	8011fbe <prvSingleStepTCPHeaderOptions+0x1e6>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d00c      	beq.n	8011e64 <prvSingleStepTCPHeaderOptions+0x8c>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	3302      	adds	r3, #2
 8011e4e:	781a      	ldrb	r2, [r3, #0]
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 8011e56:	687a      	ldr	r2, [r7, #4]
 8011e58:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8011e5c:	f043 0310 	orr.w	r3, r3, #16
 8011e60:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_WSOPT_LEN;
 8011e64:	2303      	movs	r3, #3
 8011e66:	61fb      	str	r3, [r7, #28]
 8011e68:	e0a9      	b.n	8011fbe <prvSingleStepTCPHeaderOptions+0x1e6>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	781b      	ldrb	r3, [r3, #0]
 8011e6e:	2b02      	cmp	r3, #2
 8011e70:	d16d      	bne.n	8011f4e <prvSingleStepTCPHeaderOptions+0x176>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 8011e72:	697b      	ldr	r3, [r7, #20]
 8011e74:	2b03      	cmp	r3, #3
 8011e76:	d904      	bls.n	8011e82 <prvSingleStepTCPHeaderOptions+0xaa>
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	3301      	adds	r3, #1
 8011e7c:	781b      	ldrb	r3, [r3, #0]
 8011e7e:	2b04      	cmp	r3, #4
 8011e80:	d003      	beq.n	8011e8a <prvSingleStepTCPHeaderOptions+0xb2>
            {
                lIndex = -1;
 8011e82:	f04f 33ff 	mov.w	r3, #4294967295
 8011e86:	61fb      	str	r3, [r7, #28]
 8011e88:	e099      	b.n	8011fbe <prvSingleStepTCPHeaderOptions+0x1e6>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	3302      	adds	r3, #2
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7f8 fe4f 	bl	800ab32 <usChar2u16>
 8011e94:	4603      	mov	r3, r0
 8011e96:	627b      	str	r3, [r7, #36]	@ 0x24

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8011e9e:	461a      	mov	r2, r3
 8011ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ea2:	4293      	cmp	r3, r2
 8011ea4:	d010      	beq.n	8011ec8 <prvSingleStepTCPHeaderOptions+0xf0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 8011ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d105      	bne.n	8011eb8 <prvSingleStepTCPHeaderOptions+0xe0>
                    {
                        lIndex = -1;
 8011eac:	f04f 33ff 	mov.w	r3, #4294967295
 8011eb0:	61fb      	str	r3, [r7, #28]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	61bb      	str	r3, [r7, #24]
 8011eb6:	e007      	b.n	8011ec8 <prvSingleStepTCPHeaderOptions+0xf0>
                    }
                    else
                    {
                        FreeRTOS_debug_printf( ( "MSS change %u -> %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8011ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ec0:	4619      	mov	r1, r3
 8011ec2:	4841      	ldr	r0, [pc, #260]	@ (8011fc8 <prvSingleStepTCPHeaderOptions+0x1f0>)
 8011ec4:	f010 f940 	bl	8022148 <lUDPLoggingPrintf>
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 8011ec8:	69bb      	ldr	r3, [r7, #24]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d177      	bne.n	8011fbe <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Restrict the minimum value of segment length to the ( Minimum IP MTU (576) - IP header(20) - TCP Header(20) ).
                     * See "RFC 791 section 3.1 Total Length" for more details. */
                    if( uxNewMSS < tcpMINIMUM_SEGMENT_LENGTH )
 8011ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ed0:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011ed4:	d202      	bcs.n	8011edc <prvSingleStepTCPHeaderOptions+0x104>
                    {
                        uxNewMSS = tcpMINIMUM_SEGMENT_LENGTH;
 8011ed6:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8011eda:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	d22e      	bcs.n	8011f48 <prvSingleStepTCPHeaderOptions+0x170>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 8011eea:	687a      	ldr	r2, [r7, #4]
 8011eec:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011ef0:	f043 0301 	orr.w	r3, r3, #1
 8011ef4:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                        if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8011efe:	461a      	mov	r2, r3
 8011f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f02:	4293      	cmp	r3, r2
 8011f04:	d207      	bcs.n	8011f16 <prvSingleStepTCPHeaderOptions+0x13e>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8011f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f0e:	4619      	mov	r1, r3
 8011f10:	482e      	ldr	r0, [pc, #184]	@ (8011fcc <prvSingleStepTCPHeaderOptions+0x1f4>)
 8011f12:	f010 f919 	bl	8022148 <lUDPLoggingPrintf>
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 8011f16:	693b      	ldr	r3, [r7, #16]
 8011f18:	685a      	ldr	r2, [r3, #4]
 8011f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f22:	fb03 f202 	mul.w	r2, r3, r2
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 8011f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f2c:	b29a      	uxth	r2, r3
 8011f2e:	693b      	ldr	r3, [r7, #16]
 8011f30:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 8011f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 8011f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f40:	b29a      	uxth	r2, r3
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_MSS_LEN;
 8011f48:	2304      	movs	r3, #4
 8011f4a:	61fb      	str	r3, [r7, #28]
 8011f4c:	e037      	b.n	8011fbe <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	3301      	adds	r3, #1
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lIndex = 0;
 8011f58:	2300      	movs	r3, #0
 8011f5a:	61fb      	str	r3, [r7, #28]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 8011f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011f60:	2b01      	cmp	r3, #1
 8011f62:	d904      	bls.n	8011f6e <prvSingleStepTCPHeaderOptions+0x196>
 8011f64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011f68:	697a      	ldr	r2, [r7, #20]
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	d203      	bcs.n	8011f76 <prvSingleStepTCPHeaderOptions+0x19e>
            {
                /* If the length field is too small or too big, the options are
                 * malformed, don't process them further.
                 */
                lIndex = -1;
 8011f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f72:	61fb      	str	r3, [r7, #28]
 8011f74:	e023      	b.n	8011fbe <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Selective ACK: the peer has received a packet but it is missing
                     * earlier packets. At least this packet does not need retransmission
                     * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                     */
                    if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	2b05      	cmp	r3, #5
 8011f7c:	d11a      	bne.n	8011fb4 <prvSingleStepTCPHeaderOptions+0x1dc>
                    {
                        ucLen = ( uint8_t ) ( ucLen - 2U );
 8011f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011f82:	3b02      	subs	r3, #2
 8011f84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        lIndex += 2;
 8011f88:	69fb      	ldr	r3, [r7, #28]
 8011f8a:	3302      	adds	r3, #2
 8011f8c:	61fb      	str	r3, [r7, #28]

                        while( ucLen >= ( uint8_t ) 8U )
 8011f8e:	e00d      	b.n	8011fac <prvSingleStepTCPHeaderOptions+0x1d4>
                        {
                            prvReadSackOption( pucPtr, ( size_t ) lIndex, pxSocket );
 8011f90:	69fb      	ldr	r3, [r7, #28]
 8011f92:	687a      	ldr	r2, [r7, #4]
 8011f94:	4619      	mov	r1, r3
 8011f96:	68f8      	ldr	r0, [r7, #12]
 8011f98:	f000 f81a 	bl	8011fd0 <prvReadSackOption>
                            lIndex += 8;
 8011f9c:	69fb      	ldr	r3, [r7, #28]
 8011f9e:	3308      	adds	r3, #8
 8011fa0:	61fb      	str	r3, [r7, #28]
                            ucLen = ( uint8_t ) ( ucLen - 8U );
 8011fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011fa6:	3b08      	subs	r3, #8
 8011fa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        while( ucLen >= ( uint8_t ) 8U )
 8011fac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011fb0:	2b07      	cmp	r3, #7
 8011fb2:	d8ed      	bhi.n	8011f90 <prvSingleStepTCPHeaderOptions+0x1b8>
                        /* ucLen should be 0 by now. */
                    }
                }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                lIndex += ( int32_t ) ucLen;
 8011fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011fb8:	69fa      	ldr	r2, [r7, #28]
 8011fba:	4413      	add	r3, r2
 8011fbc:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return lIndex;
 8011fbe:	69fb      	ldr	r3, [r7, #28]
    }
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	3728      	adds	r7, #40	@ 0x28
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}
 8011fc8:	0802635c 	.word	0x0802635c
 8011fcc:	08026374 	.word	0x08026374

08011fd0 <prvReadSackOption>:
 * @param[in] pxSocket Socket handling the TCP connection.
 */
        static void prvReadSackOption( const uint8_t * const pucPtr,
                                       size_t uxIndex,
                                       FreeRTOS_Socket_t * const pxSocket )
        {
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b08a      	sub	sp, #40	@ 0x28
 8011fd4:	af02      	add	r7, sp, #8
 8011fd6:	60f8      	str	r0, [r7, #12]
 8011fd8:	60b9      	str	r1, [r7, #8]
 8011fda:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 8011fdc:	68fa      	ldr	r2, [r7, #12]
 8011fde:	68bb      	ldr	r3, [r7, #8]
 8011fe0:	4413      	add	r3, r2
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7f8 fd8a 	bl	800aafc <ulChar2u32>
 8011fe8:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	3304      	adds	r3, #4
 8011fee:	68fa      	ldr	r2, [r7, #12]
 8011ff0:	4413      	add	r3, r2
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7f8 fd82 	bl	800aafc <ulChar2u32>
 8011ff8:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012000:	69ba      	ldr	r2, [r7, #24]
 8012002:	69f9      	ldr	r1, [r7, #28]
 8012004:	4618      	mov	r0, r3
 8012006:	f004 fba3 	bl	8016750 <ulTCPWindowTxSack>
 801200a:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012012:	2b00      	cmp	r3, #0
 8012014:	d029      	beq.n	801206a <prvReadSackOption+0x9a>
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d026      	beq.n	801206a <prvReadSackOption+0x9a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8012022:	2300      	movs	r3, #0
 8012024:	9300      	str	r3, [sp, #0]
 8012026:	697b      	ldr	r3, [r7, #20]
 8012028:	2200      	movs	r2, #0
 801202a:	2100      	movs	r1, #0
 801202c:	f7fe fed9 	bl	8010de2 <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	f043 0202 	orr.w	r2, r3, #2
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                {
                    if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012040:	f003 0302 	and.w	r3, r3, #2
 8012044:	2b00      	cmp	r3, #0
 8012046:	d005      	beq.n	8012054 <prvReadSackOption+0x84>
                    {
                        /* The field 'xEventBits' is used to store regular socket events
                         * (at most 8), as well as 'select events', which will be left-shifted.
                         */
                        pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	601a      	str	r2, [r3, #0]

                /* In case the socket owner has installed an OnSent handler,
                 * call it now. */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                {
                    if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801205a:	2b00      	cmp	r3, #0
 801205c:	d005      	beq.n	801206a <prvReadSackOption+0x9a>
                    {
                        pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012064:	6979      	ldr	r1, [r7, #20]
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	4798      	blx	r3
                    }
                }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 801206a:	bf00      	nop
 801206c:	3720      	adds	r7, #32
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}

08012072 <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint8_t ** ppucRecvData )
    {
 8012072:	b590      	push	{r4, r7, lr}
 8012074:	b08f      	sub	sp, #60	@ 0x3c
 8012076:	af00      	add	r7, sp, #0
 8012078:	6078      	str	r0, [r7, #4]
 801207a:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f7f7 ffa9 	bl	8009fd8 <uxIPHeaderSizePacket>
 8012086:	4603      	mov	r3, r0
 8012088:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801208a:	4423      	add	r3, r4
 801208c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 801208e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012090:	62bb      	str	r3, [r7, #40]	@ 0x28
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */

        const size_t xIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	f7f7 ffa0 	bl	8009fd8 <uxIPHeaderSizePacket>
 8012098:	6278      	str	r0, [r7, #36]	@ 0x24
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 801209a:	2300      	movs	r3, #0
 801209c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 80120a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120a2:	7b1b      	ldrb	r3, [r3, #12]
 80120a4:	089b      	lsrs	r3, r3, #2
 80120a6:	b2db      	uxtb	r3, r3
 80120a8:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80120ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 80120b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80120b4:	61fb      	str	r3, [r7, #28]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80120ba:	69f9      	ldr	r1, [r7, #28]
 80120bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120be:	440b      	add	r3, r1
 80120c0:	330e      	adds	r3, #14
 80120c2:	441a      	add	r2, r3
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ( int32_t ) pxNetworkBuffer->xDataLength;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120cc:	633b      	str	r3, [r7, #48]	@ 0x30
        lReceiveLength -= ( int32_t ) ipSIZE_OF_ETH_HEADER;
 80120ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120d0:	3b0e      	subs	r3, #14
 80120d2:	633b      	str	r3, [r7, #48]	@ 0x30

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        switch( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer )->usFrameType )
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120d8:	899b      	ldrh	r3, [r3, #12]
 80120da:	b29b      	uxth	r3, r3
 80120dc:	2b08      	cmp	r3, #8
 80120de:	d004      	beq.n	80120ea <prvCheckRxData+0x78>
 80120e0:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80120e4:	4293      	cmp	r3, r2
 80120e6:	d015      	beq.n	8012114 <prvCheckRxData+0xa2>
 80120e8:	e02c      	b.n	8012144 <prvCheckRxData+0xd2>
                case ipIPv4_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120ee:	330e      	adds	r3, #14
 80120f0:	613b      	str	r3, [r7, #16]

                       usLength = FreeRTOS_htons( pxIPHeader->usLength );
 80120f2:	693b      	ldr	r3, [r7, #16]
 80120f4:	885b      	ldrh	r3, [r3, #2]
 80120f6:	b29b      	uxth	r3, r3
 80120f8:	021b      	lsls	r3, r3, #8
 80120fa:	b21a      	sxth	r2, r3
 80120fc:	693b      	ldr	r3, [r7, #16]
 80120fe:	885b      	ldrh	r3, [r3, #2]
 8012100:	b29b      	uxth	r3, r3
 8012102:	0a1b      	lsrs	r3, r3, #8
 8012104:	b29b      	uxth	r3, r3
 8012106:	b21b      	sxth	r3, r3
 8012108:	4313      	orrs	r3, r2
 801210a:	b21b      	sxth	r3, r3
 801210c:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 801210e:	8afb      	ldrh	r3, [r7, #22]
 8012110:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 8012112:	e01a      	b.n	801214a <prvCheckRxData+0xd8>
                case ipIPv6_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_IPv6_t * pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012118:	330e      	adds	r3, #14
 801211a:	61bb      	str	r3, [r7, #24]

                       /* For Coverity: conversion and cast in 2 steps. */
                       usLength = FreeRTOS_htons( pxIPHeader->usPayloadLength );
 801211c:	69bb      	ldr	r3, [r7, #24]
 801211e:	889b      	ldrh	r3, [r3, #4]
 8012120:	b29b      	uxth	r3, r3
 8012122:	021b      	lsls	r3, r3, #8
 8012124:	b21a      	sxth	r2, r3
 8012126:	69bb      	ldr	r3, [r7, #24]
 8012128:	889b      	ldrh	r3, [r3, #4]
 801212a:	b29b      	uxth	r3, r3
 801212c:	0a1b      	lsrs	r3, r3, #8
 801212e:	b29b      	uxth	r3, r3
 8012130:	b21b      	sxth	r3, r3
 8012132:	4313      	orrs	r3, r2
 8012134:	b21b      	sxth	r3, r3
 8012136:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 8012138:	8afb      	ldrh	r3, [r7, #22]
 801213a:	637b      	str	r3, [r7, #52]	@ 0x34
                       /* Add the length of the TCP-header, because that was not included in 'usPayloadLength'. */
                       lLength += ( int32_t ) sizeof( IPHeader_IPv6_t );
 801213c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801213e:	3328      	adds	r3, #40	@ 0x28
 8012140:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 8012142:	e002      	b.n	801214a <prvCheckRxData+0xd8>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                lLength = 0;
 8012144:	2300      	movs	r3, #0
 8012146:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 8012148:	bf00      	nop
        }

        if( lReceiveLength > lLength )
 801214a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801214c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801214e:	429a      	cmp	r2, r3
 8012150:	dd01      	ble.n	8012156 <prvCheckRxData+0xe4>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 8012152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012154:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 8012156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012158:	69fb      	ldr	r3, [r7, #28]
 801215a:	4413      	add	r3, r2
 801215c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801215e:	429a      	cmp	r2, r3
 8012160:	dd06      	ble.n	8012170 <prvCheckRxData+0xfe>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 8012162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012164:	69fb      	ldr	r3, [r7, #28]
 8012166:	4413      	add	r3, r2
 8012168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801216a:	1ad3      	subs	r3, r2, r3
 801216c:	633b      	str	r3, [r7, #48]	@ 0x30
 801216e:	e001      	b.n	8012174 <prvCheckRxData+0x102>
        }
        else
        {
            lReceiveLength = 0;
 8012170:	2300      	movs	r3, #0
 8012172:	633b      	str	r3, [r7, #48]	@ 0x30
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 8012174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012176:	7b5b      	ldrb	r3, [r3, #13]
 8012178:	f003 0320 	and.w	r3, r3, #32
 801217c:	2b00      	cmp	r3, #0
 801217e:	d01c      	beq.n	80121ba <prvCheckRxData+0x148>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 8012180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012182:	8a5b      	ldrh	r3, [r3, #18]
 8012184:	b29b      	uxth	r3, r3
 8012186:	021b      	lsls	r3, r3, #8
 8012188:	b21a      	sxth	r2, r3
 801218a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801218c:	8a5b      	ldrh	r3, [r3, #18]
 801218e:	b29b      	uxth	r3, r3
 8012190:	0a1b      	lsrs	r3, r3, #8
 8012192:	b29b      	uxth	r3, r3
 8012194:	b21b      	sxth	r3, r3
 8012196:	4313      	orrs	r3, r2
 8012198:	b21b      	sxth	r3, r3
 801219a:	b29b      	uxth	r3, r3
 801219c:	60fb      	str	r3, [r7, #12]

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            *ppucRecvData += lUrgentLength;
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	681a      	ldr	r2, [r3, #0]
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	441a      	add	r2, r3
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 80121aa:	68f9      	ldr	r1, [r7, #12]
 80121ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80121ae:	f7f8 fc51 	bl	800aa54 <FreeRTOS_min_int32>
 80121b2:	4602      	mov	r2, r0
 80121b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121b6:	1a9b      	subs	r3, r3, r2
 80121b8:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        return ( BaseType_t ) lReceiveLength;
 80121ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
 80121bc:	4618      	mov	r0, r3
 80121be:	373c      	adds	r7, #60	@ 0x3c
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd90      	pop	{r4, r7, pc}

080121c4 <prvStoreRxData>:
 */
    BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                               const uint8_t * pucRecvData,
                               NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint32_t ulReceiveLength )
    {
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b092      	sub	sp, #72	@ 0x48
 80121c8:	af02      	add	r7, sp, #8
 80121ca:	60f8      	str	r0, [r7, #12]
 80121cc:	60b9      	str	r1, [r7, #8]
 80121ce:	607a      	str	r2, [r7, #4]
 80121d0:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        size_t uxIPOffset = uxIPHeaderSizePacket( pxNetworkBuffer );
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f7f7 ff00 	bl	8009fd8 <uxIPHeaderSizePacket>
 80121d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPOffset ] ) );
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80121de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121e0:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 80121e2:	4413      	add	r3, r2
 80121e4:	62bb      	str	r3, [r7, #40]	@ 0x28
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80121e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121e8:	627b      	str	r3, [r7, #36]	@ 0x24
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80121f0:	623b      	str	r3, [r7, #32]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 80121f2:	2300      	movs	r3, #0
 80121f4:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t ulRxLength = ulReceiveLength;
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t * pucRxBuffer = &( pucRecvData[ 0 ] );
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	633b      	str	r3, [r7, #48]	@ 0x30

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 80121fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012200:	685b      	ldr	r3, [r3, #4]
 8012202:	061a      	lsls	r2, r3, #24
 8012204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012206:	685b      	ldr	r3, [r3, #4]
 8012208:	021b      	lsls	r3, r3, #8
 801220a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801220e:	431a      	orrs	r2, r3
 8012210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	0a1b      	lsrs	r3, r3, #8
 8012216:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801221a:	431a      	orrs	r2, r3
 801221c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801221e:	685b      	ldr	r3, [r3, #4]
 8012220:	0e1b      	lsrs	r3, r3, #24
 8012222:	4313      	orrs	r3, r2
 8012224:	61fb      	str	r3, [r7, #28]

        if( ( ulRxLength > 0U ) && ( pxSocket->u.xTCP.eTCPState >= eSYN_RECEIVED ) )
 8012226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012228:	2b00      	cmp	r3, #0
 801222a:	d057      	beq.n	80122dc <prvStoreRxData+0x118>
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012232:	2b03      	cmp	r3, #3
 8012234:	d952      	bls.n	80122dc <prvStoreRxData+0x118>
        {
            uint32_t ulSkipCount = 0;
 8012236:	2300      	movs	r3, #0
 8012238:	613b      	str	r3, [r7, #16]
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012240:	2b00      	cmp	r3, #0
 8012242:	d007      	beq.n	8012254 <prvStoreRxData+0x90>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801224a:	4618      	mov	r0, r3
 801224c:	f7fe fc89 	bl	8010b62 <uxStreamBufferGetSpace>
 8012250:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8012252:	e003      	b.n	801225c <prvStoreRxData+0x98>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801225a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulRxLength, ulSpace, &( ulSkipCount ) );
 801225c:	f107 0310 	add.w	r3, r7, #16
 8012260:	9300      	str	r3, [sp, #0]
 8012262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012264:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012266:	69f9      	ldr	r1, [r7, #28]
 8012268:	6a38      	ldr	r0, [r7, #32]
 801226a:	f003 fd45 	bl	8015cf8 <lTCPWindowRxCheck>
 801226e:	61b8      	str	r0, [r7, #24]

            if( lOffset >= 0 )
 8012270:	69bb      	ldr	r3, [r7, #24]
 8012272:	2b00      	cmp	r3, #0
 8012274:	db20      	blt.n	80122b8 <prvStoreRxData+0xf4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                if( ulSkipCount != 0U )
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d007      	beq.n	801228c <prvStoreRxData+0xc8>
                {
                    /* A packet was received that starts before 'ulCurrentSequenceNumber',
                     * and that ends after it.  The first 'ulSkipCount' bytes shall be
                     * skipped. */
                    ulRxLength -= ulSkipCount;
 801227c:	693b      	ldr	r3, [r7, #16]
 801227e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012280:	1ad3      	subs	r3, r2, r3
 8012282:	637b      	str	r3, [r7, #52]	@ 0x34
                    pucRxBuffer = &( pucRecvData[ ulSkipCount ] );
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	68ba      	ldr	r2, [r7, #8]
 8012288:	4413      	add	r3, r2
 801228a:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRxBuffer, ulRxLength );
 801228c:	69b9      	ldr	r1, [r7, #24]
 801228e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012292:	68f8      	ldr	r0, [r7, #12]
 8012294:	f7fe f8d2 	bl	801043c <lTCPAddRxdata>
 8012298:	6178      	str	r0, [r7, #20]

                if( lStored != ( int32_t ) ulRxLength )
 801229a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801229c:	697a      	ldr	r2, [r7, #20]
 801229e:	429a      	cmp	r2, r3
 80122a0:	d00a      	beq.n	80122b8 <prvStoreRxData+0xf4>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %d / %u bytes? ?\n", ( int ) lStored, ( unsigned ) ulRxLength ) );
 80122a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80122a4:	6979      	ldr	r1, [r7, #20]
 80122a6:	4813      	ldr	r0, [pc, #76]	@ (80122f4 <prvStoreRxData+0x130>)
 80122a8:	f00f ff4e 	bl	8022148 <lUDPLoggingPrintf>

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f002 f8b3 	bl	8014418 <prvTCPSendReset>
                    xResult = -1;
 80122b2:	f04f 33ff 	mov.w	r3, #4294967295
 80122b6:	63bb      	str	r3, [r7, #56]	@ 0x38
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                /* Now lTCPAddRxdata() will move the rxHead pointer forward
                 * so data becomes available to the user immediately
                 * In case the low-water mark is reached, bLowWater will be set. */
                if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0U ) )
 80122b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d113      	bne.n	80122e6 <prvStoreRxData+0x122>
 80122be:	6a3b      	ldr	r3, [r7, #32]
 80122c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d00f      	beq.n	80122e6 <prvStoreRxData+0x122>
                {
                    ( void ) lTCPAddRxdata( pxSocket, 0U, NULL, pxTCPWindow->ulUserDataLength );
 80122c6:	6a3b      	ldr	r3, [r7, #32]
 80122c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122ca:	2200      	movs	r2, #0
 80122cc:	2100      	movs	r1, #0
 80122ce:	68f8      	ldr	r0, [r7, #12]
 80122d0:	f7fe f8b4 	bl	801043c <lTCPAddRxdata>
                    pxTCPWindow->ulUserDataLength = 0;
 80122d4:	6a3b      	ldr	r3, [r7, #32]
 80122d6:	2200      	movs	r2, #0
 80122d8:	631a      	str	r2, [r3, #48]	@ 0x30
        {
 80122da:	e004      	b.n	80122e6 <prvStoreRxData+0x122>
            }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 80122dc:	6a3b      	ldr	r3, [r7, #32]
 80122de:	2200      	movs	r2, #0
 80122e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80122e4:	e000      	b.n	80122e8 <prvStoreRxData+0x124>
        {
 80122e6:	bf00      	nop
        }

        return xResult;
 80122e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 80122ea:	4618      	mov	r0, r3
 80122ec:	3740      	adds	r7, #64	@ 0x40
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}
 80122f2:	bf00      	nop
 80122f4:	0802638c 	.word	0x0802638c

080122f8 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    BaseType_t prvTCPSocketIsActive( eIPTCPState_t eStatus )
    {
 80122f8:	b480      	push	{r7}
 80122fa:	b085      	sub	sp, #20
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	4603      	mov	r3, r0
 8012300:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( eStatus )
 8012302:	79fb      	ldrb	r3, [r7, #7]
 8012304:	2b0b      	cmp	r3, #11
 8012306:	bf8c      	ite	hi
 8012308:	2201      	movhi	r2, #1
 801230a:	2200      	movls	r2, #0
 801230c:	b2d2      	uxtb	r2, r2
 801230e:	2a00      	cmp	r2, #0
 8012310:	d10f      	bne.n	8012332 <prvTCPSocketIsActive+0x3a>
 8012312:	f640 3281 	movw	r2, #2945	@ 0xb81
 8012316:	fa22 f303 	lsr.w	r3, r2, r3
 801231a:	f003 0301 	and.w	r3, r3, #1
 801231e:	2b00      	cmp	r3, #0
 8012320:	bf14      	ite	ne
 8012322:	2301      	movne	r3, #1
 8012324:	2300      	moveq	r3, #0
 8012326:	b2db      	uxtb	r3, r3
 8012328:	2b00      	cmp	r3, #0
 801232a:	d002      	beq.n	8012332 <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 801232c:	2300      	movs	r3, #0
 801232e:	60fb      	str	r3, [r7, #12]
                break;
 8012330:	e002      	b.n	8012338 <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 8012332:	2301      	movs	r3, #1
 8012334:	60fb      	str	r3, [r7, #12]
                break;
 8012336:	bf00      	nop
        }

        return xResult;
 8012338:	68fb      	ldr	r3, [r7, #12]
    }
 801233a:	4618      	mov	r0, r3
 801233c:	3714      	adds	r7, #20
 801233e:	46bd      	mov	sp, r7
 8012340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012344:	4770      	bx	lr
	...

08012348 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 8012348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801234a:	b089      	sub	sp, #36	@ 0x24
 801234c:	af02      	add	r7, sp, #8
 801234e:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;

            eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012356:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 8012358:	7cfb      	ldrb	r3, [r7, #19]
 801235a:	2b08      	cmp	r3, #8
 801235c:	d00b      	beq.n	8012376 <prvTCPStatusAgeCheck+0x2e>
 801235e:	2b08      	cmp	r3, #8
 8012360:	dc0c      	bgt.n	801237c <prvTCPStatusAgeCheck+0x34>
 8012362:	2b01      	cmp	r3, #1
 8012364:	dc02      	bgt.n	801236c <prvTCPStatusAgeCheck+0x24>
 8012366:	2b00      	cmp	r3, #0
 8012368:	da05      	bge.n	8012376 <prvTCPStatusAgeCheck+0x2e>
 801236a:	e007      	b.n	801237c <prvTCPStatusAgeCheck+0x34>
 801236c:	2b05      	cmp	r3, #5
 801236e:	d105      	bne.n	801237c <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 8012370:	2300      	movs	r3, #0
 8012372:	617b      	str	r3, [r7, #20]
                    break;
 8012374:	e005      	b.n	8012382 <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 8012376:	2300      	movs	r3, #0
 8012378:	617b      	str	r3, [r7, #20]
                    break;
 801237a:	e002      	b.n	8012382 <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 801237c:	2301      	movs	r3, #1
 801237e:	617b      	str	r3, [r7, #20]
                    break;
 8012380:	bf00      	nop
            }

            if( xResult != pdFALSE )
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d032      	beq.n	80123ee <prvTCPStatusAgeCheck+0xa6>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 8012388:	f7f2 fa8c 	bl	80048a4 <xTaskGetTickCount>
 801238c:	4602      	mov	r2, r0
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012394:	1ad3      	subs	r3, r2, r3
 8012396:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	f247 5230 	movw	r2, #30000	@ 0x7530
 801239e:	4293      	cmp	r3, r2
 80123a0:	d925      	bls.n	80123ee <prvTCPStatusAgeCheck+0xa6>
                {
                    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                    {
                        FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %xip:%u status %s\n",
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80123a6:	461d      	mov	r5, r3
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80123b2:	461e      	mov	r6, r3
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80123ba:	4618      	mov	r0, r3
 80123bc:	f000 fdca 	bl	8012f54 <FreeRTOS_GetTCPStateName>
 80123c0:	4603      	mov	r3, r0
 80123c2:	9300      	str	r3, [sp, #0]
 80123c4:	4633      	mov	r3, r6
 80123c6:	4622      	mov	r2, r4
 80123c8:	4629      	mov	r1, r5
 80123ca:	480b      	ldr	r0, [pc, #44]	@ (80123f8 <prvTCPStatusAgeCheck+0xb0>)
 80123cc:	f00f febc 	bl	8022148 <lUDPLoggingPrintf>
                                                 FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.eTCPState ) ) );
                    }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80123d0:	2108      	movs	r1, #8
 80123d2:	6878      	ldr	r0, [r7, #4]
 80123d4:	f7fe feac 	bl	8011130 <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80123de:	f003 0304 	and.w	r3, r3, #4
 80123e2:	b2db      	uxtb	r3, r3
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d002      	beq.n	80123ee <prvTCPStatusAgeCheck+0xa6>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 80123e8:	f04f 33ff 	mov.w	r3, #4294967295
 80123ec:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 80123ee:	697b      	ldr	r3, [r7, #20]
        }
 80123f0:	4618      	mov	r0, r3
 80123f2:	371c      	adds	r7, #28
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123f8:	080263b4 	.word	0x080263b4

080123fc <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80123fc:	b5b0      	push	{r4, r5, r7, lr}
 80123fe:	b08a      	sub	sp, #40	@ 0x28
 8012400:	af02      	add	r7, sp, #8
 8012402:	6078      	str	r0, [r7, #4]
 8012404:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801240a:	6838      	ldr	r0, [r7, #0]
 801240c:	f7f7 fde4 	bl	8009fd8 <uxIPHeaderSizePacket>
 8012410:	4603      	mov	r3, r0
 8012412:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012414:	4423      	add	r3, r4
 8012416:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8012418:	69bb      	ldr	r3, [r7, #24]
 801241a:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 801241c:	2300      	movs	r3, #0
 801241e:	74fb      	strb	r3, [r7, #19]
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	7b5b      	ldrb	r3, [r3, #13]
 8012424:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801242c:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 801242e:	2300      	movs	r3, #0
 8012430:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8012432:	697b      	ldr	r3, [r7, #20]
 8012434:	689b      	ldr	r3, [r3, #8]
 8012436:	061a      	lsls	r2, r3, #24
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	689b      	ldr	r3, [r3, #8]
 801243c:	021b      	lsls	r3, r3, #8
 801243e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012442:	431a      	orrs	r2, r3
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	689b      	ldr	r3, [r3, #8]
 8012448:	0a1b      	lsrs	r3, r3, #8
 801244a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801244e:	431a      	orrs	r2, r3
 8012450:	697b      	ldr	r3, [r7, #20]
 8012452:	689b      	ldr	r3, [r3, #8]
 8012454:	0e1b      	lsrs	r3, r3, #24
 8012456:	4313      	orrs	r3, r2
 8012458:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 801245a:	7cbb      	ldrb	r3, [r7, #18]
 801245c:	f003 0301 	and.w	r3, r3, #1
 8012460:	2b00      	cmp	r3, #0
 8012462:	d004      	beq.n	801246e <prvTCPHandleFin+0x72>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	695b      	ldr	r3, [r3, #20]
 8012468:	1c5a      	adds	r2, r3, #1
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012478:	b2db      	uxtb	r3, r3
 801247a:	2b00      	cmp	r3, #0
 801247c:	d10b      	bne.n	8012496 <prvTCPHandleFin+0x9a>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	6a1a      	ldr	r2, [r3, #32]
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8012486:	687a      	ldr	r2, [r7, #4]
 8012488:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801248c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012490:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8012494:	e00c      	b.n	80124b0 <prvTCPHandleFin+0xb4>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1U ) )
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801249a:	3301      	adds	r3, #1
 801249c:	68ba      	ldr	r2, [r7, #8]
 801249e:	429a      	cmp	r2, r3
 80124a0:	d106      	bne.n	80124b0 <prvTCPHandleFin+0xb4>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 80124a2:	687a      	ldr	r2, [r7, #4]
 80124a4:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80124a8:	f043 0301 	orr.w	r3, r3, #1
 80124ac:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80124b6:	f003 0301 	and.w	r3, r3, #1
 80124ba:	b2db      	uxtb	r3, r3
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d10b      	bne.n	80124d8 <prvTCPHandleFin+0xdc>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 80124c8:	697b      	ldr	r3, [r7, #20]
 80124ca:	2211      	movs	r2, #17
 80124cc:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 80124ce:	210a      	movs	r1, #10
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f7fe fe2d 	bl	8011130 <vTCPStateChange>
 80124d6:	e023      	b.n	8012520 <prvTCPHandleFin+0x124>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124dc:	1c5a      	adds	r2, r3, #1
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80124e8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80124ec:	b2db      	uxtb	r3, r3
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d103      	bne.n	80124fa <prvTCPHandleFin+0xfe>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	2200      	movs	r2, #0
 80124f6:	735a      	strb	r2, [r3, #13]
 80124f8:	e012      	b.n	8012520 <prvTCPHandleFin+0x124>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012500:	f003 0302 	and.w	r3, r3, #2
 8012504:	b2db      	uxtb	r3, r3
 8012506:	2b00      	cmp	r3, #0
 8012508:	d103      	bne.n	8012512 <prvTCPHandleFin+0x116>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	2210      	movs	r2, #16
 801250e:	735a      	strb	r2, [r3, #13]
 8012510:	e002      	b.n	8012518 <prvTCPHandleFin+0x11c>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 8012512:	697b      	ldr	r3, [r7, #20]
 8012514:	2200      	movs	r2, #0
 8012516:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012518:	2108      	movs	r1, #8
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f7fe fe08 	bl	8011130 <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	6a1a      	ldr	r2, [r3, #32]
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 8012528:	697b      	ldr	r3, [r7, #20]
 801252a:	7b5b      	ldrb	r3, [r3, #13]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d00d      	beq.n	801254c <prvTCPHandleFin+0x150>
        {
            ucIntermediateResult = ( uint8_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f7f7 fd6b 	bl	800a00c <uxIPHeaderSizeSocket>
 8012536:	4603      	mov	r3, r0
 8012538:	b2da      	uxtb	r2, r3
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012540:	4413      	add	r3, r2
 8012542:	b2db      	uxtb	r3, r3
 8012544:	3314      	adds	r3, #20
 8012546:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 8012548:	7cfb      	ldrb	r3, [r7, #19]
 801254a:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012552:	3314      	adds	r3, #20
 8012554:	b2db      	uxtb	r3, r3
 8012556:	009b      	lsls	r3, r3, #2
 8012558:	b2da      	uxtb	r2, r3
 801255a:	697b      	ldr	r3, [r7, #20]
 801255c:	731a      	strb	r2, [r3, #12]

        if( xTCPWindowLoggingLevel != 0 )
 801255e:	4b14      	ldr	r3, [pc, #80]	@ (80125b0 <prvTCPHandleFin+0x1b4>)
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d01f      	beq.n	80125a6 <prvTCPHandleFin+0x1aa>
        {
            FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %u, cur/nxt %u/%u) ourSeqNr %u | Rx %u\n",
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	69db      	ldr	r3, [r3, #28]
 801256a:	68ba      	ldr	r2, [r7, #8]
 801256c:	1ad0      	subs	r0, r2, r3
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	6a1a      	ldr	r2, [r3, #32]
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	69db      	ldr	r3, [r3, #28]
 8012576:	1ad4      	subs	r4, r2, r3
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	69db      	ldr	r3, [r3, #28]
 8012580:	1ad5      	subs	r5, r2, r3
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	69db      	ldr	r3, [r3, #28]
 801258a:	1ad3      	subs	r3, r2, r3
 801258c:	68fa      	ldr	r2, [r7, #12]
 801258e:	6911      	ldr	r1, [r2, #16]
 8012590:	68fa      	ldr	r2, [r7, #12]
 8012592:	68d2      	ldr	r2, [r2, #12]
 8012594:	1a8a      	subs	r2, r1, r2
 8012596:	9201      	str	r2, [sp, #4]
 8012598:	9300      	str	r3, [sp, #0]
 801259a:	462b      	mov	r3, r5
 801259c:	4622      	mov	r2, r4
 801259e:	4601      	mov	r1, r0
 80125a0:	4804      	ldr	r0, [pc, #16]	@ (80125b4 <prvTCPHandleFin+0x1b8>)
 80125a2:	f00f fdd1 	bl	8022148 <lUDPLoggingPrintf>
                                     ( unsigned ) ( pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );
        }

        return xSendLength;
 80125a6:	69fb      	ldr	r3, [r7, #28]
    }
 80125a8:	4618      	mov	r0, r3
 80125aa:	3720      	adds	r7, #32
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bdb0      	pop	{r4, r5, r7, pc}
 80125b0:	200015c8 	.word	0x200015c8
 80125b4:	080263ec 	.word	0x080263ec

080125b8 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 80125b8:	b590      	push	{r4, r7, lr}
 80125ba:	b09b      	sub	sp, #108	@ 0x6c
 80125bc:	af02      	add	r7, sp, #8
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	60b9      	str	r1, [r7, #8]
 80125c2:	607a      	str	r2, [r7, #4]
 80125c4:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80125ca:	68f8      	ldr	r0, [r7, #12]
 80125cc:	f7f7 fd1e 	bl	800a00c <uxIPHeaderSizeSocket>
 80125d0:	4603      	mov	r3, r0
 80125d2:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80125d4:	4423      	add	r3, r4
 80125d6:	657b      	str	r3, [r7, #84]	@ 0x54
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80125d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80125da:	653b      	str	r3, [r7, #80]	@ 0x50
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80125e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80125e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80125e6:	7b5b      	ldrb	r3, [r3, #13]
 80125e8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 80125ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80125ee:	685b      	ldr	r3, [r3, #4]
 80125f0:	061a      	lsls	r2, r3, #24
 80125f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80125f4:	685b      	ldr	r3, [r3, #4]
 80125f6:	021b      	lsls	r3, r3, #8
 80125f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80125fc:	431a      	orrs	r2, r3
 80125fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012600:	685b      	ldr	r3, [r3, #4]
 8012602:	0a1b      	lsrs	r3, r3, #8
 8012604:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012608:	431a      	orrs	r2, r3
 801260a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801260c:	685b      	ldr	r3, [r3, #4]
 801260e:	0e1b      	lsrs	r3, r3, #24
 8012610:	4313      	orrs	r3, r2
 8012612:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xSendLength = 0;
 8012614:	2300      	movs	r3, #0
 8012616:	65fb      	str	r3, [r7, #92]	@ 0x5c
        UBaseType_t uxIntermediateResult = 0U;
 8012618:	2300      	movs	r3, #0
 801261a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 801261c:	2310      	movs	r3, #16
 801261e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 8012622:	2317      	movs	r3, #23
 8012624:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801262e:	2b02      	cmp	r3, #2
 8012630:	d105      	bne.n	801263e <prvHandleSynReceived+0x86>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 8012632:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8012636:	f043 0302 	orr.w	r3, r3, #2
 801263a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 801263e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8012642:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012646:	4013      	ands	r3, r2
 8012648:	b2db      	uxtb	r3, r3
 801264a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 801264e:	429a      	cmp	r2, r3
 8012650:	d044      	beq.n	80126dc <prvHandleSynReceived+0x124>
        {
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012658:	2b04      	cmp	r3, #4
 801265a:	d101      	bne.n	8012660 <prvHandleSynReceived+0xa8>
 801265c:	4977      	ldr	r1, [pc, #476]	@ (801283c <prvHandleSynReceived+0x284>)
 801265e:	e000      	b.n	8012662 <prvHandleSynReceived+0xaa>
 8012660:	4977      	ldr	r1, [pc, #476]	@ (8012840 <prvHandleSynReceived+0x288>)
 8012662:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8012666:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 801266a:	4876      	ldr	r0, [pc, #472]	@ (8012844 <prvHandleSynReceived+0x28c>)
 801266c:	f00f fd6c 	bl	8022148 <lUDPLoggingPrintf>
                                     ( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012670:	2108      	movs	r1, #8
 8012672:	68f8      	ldr	r0, [r7, #12]
 8012674:	f7fe fd5c 	bl	8011130 <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 8012678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801267a:	689b      	ldr	r3, [r3, #8]
 801267c:	061a      	lsls	r2, r3, #24
 801267e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012680:	689b      	ldr	r3, [r3, #8]
 8012682:	021b      	lsls	r3, r3, #8
 8012684:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012688:	431a      	orrs	r2, r3
 801268a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801268c:	689b      	ldr	r3, [r3, #8]
 801268e:	0a1b      	lsrs	r3, r3, #8
 8012690:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012694:	431a      	orrs	r2, r3
 8012696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012698:	689b      	ldr	r3, [r3, #8]
 801269a:	0e1b      	lsrs	r3, r3, #24
 801269c:	431a      	orrs	r2, r3
 801269e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80126a0:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 80126a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80126a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80126a6:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 80126a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80126aa:	7b5b      	ldrb	r3, [r3, #13]
 80126ac:	f043 0304 	orr.w	r3, r3, #4
 80126b0:	b2da      	uxtb	r2, r3
 80126b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80126b4:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80126b6:	68f8      	ldr	r0, [r7, #12]
 80126b8:	f7f7 fca8 	bl	800a00c <uxIPHeaderSizeSocket>
 80126bc:	4602      	mov	r2, r0
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	4413      	add	r3, r2
 80126c2:	3314      	adds	r3, #20
 80126c4:	643b      	str	r3, [r7, #64]	@ 0x40
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 80126c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80126c8:	65fb      	str	r3, [r7, #92]	@ 0x5c

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	b2db      	uxtb	r3, r3
 80126ce:	3314      	adds	r3, #20
 80126d0:	b2db      	uxtb	r3, r3
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	b2da      	uxtb	r2, r3
 80126d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80126d8:	731a      	strb	r2, [r3, #12]
 80126da:	e0aa      	b.n	8012832 <prvHandleSynReceived+0x27a>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80126e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80126e4:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80126ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80126ee:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80126f8:	2b02      	cmp	r3, #2
 80126fa:	d12e      	bne.n	801275a <prvHandleSynReceived+0x1a2>

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
                                                      &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80126fc:	68f8      	ldr	r0, [r7, #12]
 80126fe:	f7f7 fc85 	bl	800a00c <uxIPHeaderSizeSocket>
 8012702:	4603      	mov	r3, r0
 8012704:	330e      	adds	r3, #14
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
 8012706:	33a0      	adds	r3, #160	@ 0xa0
 8012708:	68fa      	ldr	r2, [r7, #12]
 801270a:	4413      	add	r3, r2
 801270c:	330a      	adds	r3, #10
 801270e:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8012710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012712:	2210      	movs	r2, #16
 8012714:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8012716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012718:	2210      	movs	r2, #16
 801271a:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 801272e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012730:	f003 f8ec 	bl	801590c <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8012734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012736:	1c5a      	adds	r2, r3, #1
 8012738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801273a:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 801273c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801273e:	1c5a      	adds	r2, r3, #1
 8012740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012742:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 8012744:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012746:	6a1b      	ldr	r3, [r3, #32]
 8012748:	1c5a      	adds	r2, r3, #1
 801274a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801274c:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 801274e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012752:	1c5a      	adds	r2, r3, #1
 8012754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012756:	635a      	str	r2, [r3, #52]	@ 0x34
 8012758:	e005      	b.n	8012766 <prvHandleSynReceived+0x1ae>
            }
            else if( ulReceiveLength == 0U )
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d102      	bne.n	8012766 <prvHandleSynReceived+0x1ae>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8012760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012762:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012764:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8012766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012768:	69db      	ldr	r3, [r3, #28]
 801276a:	1c5a      	adds	r2, r3, #1
 801276c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801276e:	62da      	str	r2, [r3, #44]	@ 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                char pcBuffer[ 40 ]; /* Space to print an IP-address. */
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	7a1b      	ldrb	r3, [r3, #8]
 8012774:	f003 0301 	and.w	r3, r3, #1
 8012778:	b2db      	uxtb	r3, r3
 801277a:	2b00      	cmp	r3, #0
 801277c:	d001      	beq.n	8012782 <prvHandleSynReceived+0x1ca>
 801277e:	200a      	movs	r0, #10
 8012780:	e000      	b.n	8012784 <prvHandleSynReceived+0x1cc>
 8012782:	2002      	movs	r0, #2
                                             ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 801278a:	f107 0210 	add.w	r2, r7, #16
 801278e:	2328      	movs	r3, #40	@ 0x28
 8012790:	f7fc fec0 	bl	800f514 <FreeRTOS_inet_ntop>
                                             pcBuffer,
                                             sizeof( pcBuffer ) );
                FreeRTOS_debug_printf( ( "TCP: %s %u => %s port %u set ESTAB (scaling %u)\n",
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801279a:	2b02      	cmp	r3, #2
 801279c:	d101      	bne.n	80127a2 <prvHandleSynReceived+0x1ea>
 801279e:	492a      	ldr	r1, [pc, #168]	@ (8012848 <prvHandleSynReceived+0x290>)
 80127a0:	e000      	b.n	80127a4 <prvHandleSynReceived+0x1ec>
 80127a2:	492a      	ldr	r1, [pc, #168]	@ (801284c <prvHandleSynReceived+0x294>)
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80127a8:	461c      	mov	r4, r3
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80127b0:	461a      	mov	r2, r3
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80127b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80127bc:	b2db      	uxtb	r3, r3
 80127be:	4618      	mov	r0, r3
 80127c0:	f107 0310 	add.w	r3, r7, #16
 80127c4:	9001      	str	r0, [sp, #4]
 80127c6:	9200      	str	r2, [sp, #0]
 80127c8:	4622      	mov	r2, r4
 80127ca:	4821      	ldr	r0, [pc, #132]	@ (8012850 <prvHandleSynReceived+0x298>)
 80127cc:	f00f fcbc 	bl	8022148 <lUDPLoggingPrintf>
                                         pxSocket->u.xTCP.usRemotePort,
                                         ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
            }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0U ) )
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80127d6:	2b02      	cmp	r3, #2
 80127d8:	d002      	beq.n	80127e0 <prvHandleSynReceived+0x228>
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d014      	beq.n	801280a <prvHandleSynReceived+0x252>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 80127e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127e2:	2210      	movs	r2, #16
 80127e4:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80127e6:	68f8      	ldr	r0, [r7, #12]
 80127e8:	f7f7 fc10 	bl	800a00c <uxIPHeaderSizeSocket>
 80127ec:	4602      	mov	r2, r0
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	4413      	add	r3, r2
 80127f2:	3314      	adds	r3, #20
 80127f4:	643b      	str	r3, [r7, #64]	@ 0x40
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 80127f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	b2db      	uxtb	r3, r3
 80127fe:	3314      	adds	r3, #20
 8012800:	b2db      	uxtb	r3, r3
 8012802:	009b      	lsls	r3, r3, #2
 8012804:	b2da      	uxtb	r2, r3
 8012806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012808:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012810:	f003 0310 	and.w	r3, r3, #16
 8012814:	b2db      	uxtb	r3, r3
 8012816:	2b00      	cmp	r3, #0
 8012818:	d107      	bne.n	801282a <prvHandleSynReceived+0x272>
                {
                    /* The other party did not send a scaling factor.
                     * A shifting factor in this side must be canceled. */
                    pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	2200      	movs	r2, #0
 801281e:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
                    pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	2200      	movs	r2, #0
 8012826:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 801282a:	2105      	movs	r1, #5
 801282c:	68f8      	ldr	r0, [r7, #12]
 801282e:	f7fe fc7f 	bl	8011130 <vTCPStateChange>
        }

        return xSendLength;
 8012832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    }
 8012834:	4618      	mov	r0, r3
 8012836:	3764      	adds	r7, #100	@ 0x64
 8012838:	46bd      	mov	sp, r7
 801283a:	bd90      	pop	{r4, r7, pc}
 801283c:	0802642c 	.word	0x0802642c
 8012840:	0802643c 	.word	0x0802643c
 8012844:	0802644c 	.word	0x0802644c
 8012848:	08026470 	.word	0x08026470
 801284c:	08026478 	.word	0x08026478
 8012850:	08026480 	.word	0x08026480

08012854 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8012854:	b590      	push	{r4, r7, lr}
 8012856:	b097      	sub	sp, #92	@ 0x5c
 8012858:	af02      	add	r7, sp, #8
 801285a:	60f8      	str	r0, [r7, #12]
 801285c:	60b9      	str	r1, [r7, #8]
 801285e:	607a      	str	r2, [r7, #4]
 8012860:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012862:	68bb      	ldr	r3, [r7, #8]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012868:	68f8      	ldr	r0, [r7, #12]
 801286a:	f7f7 fbcf 	bl	800a00c <uxIPHeaderSizeSocket>
 801286e:	4603      	mov	r3, r0
 8012870:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012872:	4423      	add	r3, r4
 8012874:	647b      	str	r3, [r7, #68]	@ 0x44
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8012876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012878:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012884:	7b5b      	ldrb	r3, [r3, #13]
 8012886:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 801288a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801288c:	685b      	ldr	r3, [r3, #4]
 801288e:	061a      	lsls	r2, r3, #24
 8012890:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012892:	685b      	ldr	r3, [r3, #4]
 8012894:	021b      	lsls	r3, r3, #8
 8012896:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801289a:	431a      	orrs	r2, r3
 801289c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801289e:	685b      	ldr	r3, [r3, #4]
 80128a0:	0a1b      	lsrs	r3, r3, #8
 80128a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80128a6:	431a      	orrs	r2, r3
 80128a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80128aa:	685b      	ldr	r3, [r3, #4]
 80128ac:	0e1b      	lsrs	r3, r3, #24
 80128ae:	4313      	orrs	r3, r2
 80128b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80128b2:	2300      	movs	r3, #0
 80128b4:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 80128b6:	2300      	movs	r3, #0
 80128b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80128ba:	2300      	movs	r3, #0
 80128bc:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 80128be:	2300      	movs	r3, #0
 80128c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 80128c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80128c4:	89db      	ldrh	r3, [r3, #14]
 80128c6:	b29b      	uxth	r3, r3
 80128c8:	021b      	lsls	r3, r3, #8
 80128ca:	b21a      	sxth	r2, r3
 80128cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80128ce:	89db      	ldrh	r3, [r3, #14]
 80128d0:	b29b      	uxth	r3, r3
 80128d2:	0a1b      	lsrs	r3, r3, #8
 80128d4:	b29b      	uxth	r3, r3
 80128d6:	b21b      	sxth	r3, r3
 80128d8:	4313      	orrs	r3, r2
 80128da:	b21b      	sxth	r3, r3
 80128dc:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 80128de:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ulWindowSize =
                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80128ec:	68fa      	ldr	r2, [r7, #12]
 80128ee:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 80128f2:	fa03 f202 	lsl.w	r2, r3, r2
            pxSocket->u.xTCP.ulWindowSize =
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) == 0U )
 80128fc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8012900:	f003 0310 	and.w	r3, r3, #16
 8012904:	2b00      	cmp	r3, #0
 8012906:	f000 8106 	beq.w	8012b16 <prvHandleEstablished+0x2c2>
             * be dropped
             */
        }
        else
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 801290a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801290c:	689b      	ldr	r3, [r3, #8]
 801290e:	061a      	lsls	r2, r3, #24
 8012910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012912:	689b      	ldr	r3, [r3, #8]
 8012914:	021b      	lsls	r3, r3, #8
 8012916:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801291a:	431a      	orrs	r2, r3
 801291c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801291e:	689b      	ldr	r3, [r3, #8]
 8012920:	0a1b      	lsrs	r3, r3, #8
 8012922:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012926:	431a      	orrs	r2, r3
 8012928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801292a:	689b      	ldr	r3, [r3, #8]
 801292c:	0e1b      	lsrs	r3, r3, #24
 801292e:	4313      	orrs	r3, r2
 8012930:	4619      	mov	r1, r3
 8012932:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012934:	f003 feee 	bl	8016714 <ulTCPWindowTxAck>
 8012938:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012940:	2b00      	cmp	r3, #0
 8012942:	d02c      	beq.n	801299e <prvHandleEstablished+0x14a>
 8012944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012946:	2b00      	cmp	r3, #0
 8012948:	d029      	beq.n	801299e <prvHandleEstablished+0x14a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8012950:	2300      	movs	r3, #0
 8012952:	9300      	str	r3, [sp, #0]
 8012954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012956:	2200      	movs	r2, #0
 8012958:	2100      	movs	r1, #0
 801295a:	f7fe fa42 	bl	8010de2 <uxStreamBufferGet>
 801295e:	4603      	mov	r3, r0
 8012960:	2b00      	cmp	r3, #0
 8012962:	d01c      	beq.n	801299e <prvHandleEstablished+0x14a>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	f043 0202 	orr.w	r2, r3, #2
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012974:	f003 0302 	and.w	r3, r3, #2
 8012978:	2b00      	cmp	r3, #0
 801297a:	d005      	beq.n	8012988 <prvHandleEstablished+0x134>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	601a      	str	r2, [r3, #0]

                    /* In case the socket owner has installed an OnSent handler,
                     * call it now. */
                    #if ( ipconfigUSE_CALLBACKS == 1 )
                    {
                        if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801298e:	2b00      	cmp	r3, #0
 8012990:	d005      	beq.n	801299e <prvHandleEstablished+0x14a>
                        {
                            pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012998:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801299a:	68f8      	ldr	r0, [r7, #12]
 801299c:	4798      	blx	r3
                }
            }

            /* If this socket has a stream for transmission, add the data to the
             * outgoing segment(s). */
            if( pxSocket->u.xTCP.txStream != NULL )
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d002      	beq.n	80129ae <prvHandleEstablished+0x15a>
            {
                prvTCPAddTxData( pxSocket );
 80129a8:	68f8      	ldr	r0, [r7, #12]
 80129aa:	f001 fb13 	bl	8013fd4 <prvTCPAddTxData>
            }

            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80129ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80129b0:	6a1a      	ldr	r2, [r3, #32]
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80129be:	f003 0320 	and.w	r3, r3, #32
 80129c2:	b2db      	uxtb	r3, r3
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d105      	bne.n	80129d4 <prvHandleEstablished+0x180>
 80129c8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80129cc:	f003 0301 	and.w	r3, r3, #1
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d06b      	beq.n	8012aac <prvHandleEstablished+0x258>
            {
                /* Peer is requesting to stop, see if we're really finished. */
                xMayClose = pdTRUE;
 80129d4:	2301      	movs	r3, #1
 80129d6:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Checks are only necessary if we haven't sent a FIN yet. */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80129de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80129e2:	b2db      	uxtb	r3, r3
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d13a      	bne.n	8012a5e <prvHandleEstablished+0x20a>
                {
                    /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                    bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 80129e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80129ea:	f002 fe87 	bl	80156fc <xTCPWindowRxEmpty>
 80129ee:	6238      	str	r0, [r7, #32]
                    bTxDone = xTCPWindowTxDone( pxTCPWindow );
 80129f0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80129f2:	f003 fafd 	bl	8015ff0 <xTCPWindowTxDone>
 80129f6:	61f8      	str	r0, [r7, #28]

                    if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 80129f8:	6a3b      	ldr	r3, [r7, #32]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d002      	beq.n	8012a04 <prvHandleEstablished+0x1b0>
 80129fe:	69fb      	ldr	r3, [r7, #28]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d10f      	bne.n	8012a24 <prvHandleEstablished+0x1d0>
                    {
                        /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                        FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %d tx done %d\n",
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012a08:	4619      	mov	r1, r3
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012a10:	461a      	mov	r2, r3
 8012a12:	69fb      	ldr	r3, [r7, #28]
 8012a14:	9300      	str	r3, [sp, #0]
 8012a16:	6a3b      	ldr	r3, [r7, #32]
 8012a18:	4841      	ldr	r0, [pc, #260]	@ (8012b20 <prvHandleEstablished+0x2cc>)
 8012a1a:	f00f fb95 	bl	8022148 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.usRemotePort,
                                                 ( int ) bRxComplete,
                                                 ( int ) bTxDone ) );
                        xMayClose = pdFALSE;
 8012a1e:	2300      	movs	r3, #0
 8012a20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012a22:	e01c      	b.n	8012a5e <prvHandleEstablished+0x20a>
                    }
                    else
                    {
                        ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8012a24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	441a      	add	r2, r3
 8012a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a2c:	691b      	ldr	r3, [r3, #16]
 8012a2e:	1ad3      	subs	r3, r2, r3
 8012a30:	633b      	str	r3, [r7, #48]	@ 0x30
                        lDistance = ( int32_t ) ulIntermediateResult;
 8012a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a34:	61bb      	str	r3, [r7, #24]

                        if( lDistance > 1 )
 8012a36:	69bb      	ldr	r3, [r7, #24]
 8012a38:	2b01      	cmp	r3, #1
 8012a3a:	dd10      	ble.n	8012a5e <prvHandleEstablished+0x20a>
                        {
                            FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %d (cur %u high %u)\n",
 8012a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a3e:	691a      	ldr	r2, [r3, #16]
 8012a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a42:	68db      	ldr	r3, [r3, #12]
 8012a44:	1ad1      	subs	r1, r2, r3
 8012a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a48:	699a      	ldr	r2, [r3, #24]
 8012a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a4c:	68db      	ldr	r3, [r3, #12]
 8012a4e:	1ad3      	subs	r3, r2, r3
 8012a50:	460a      	mov	r2, r1
 8012a52:	69b9      	ldr	r1, [r7, #24]
 8012a54:	4833      	ldr	r0, [pc, #204]	@ (8012b24 <prvHandleEstablished+0x2d0>)
 8012a56:	f00f fb77 	bl	8022148 <lUDPLoggingPrintf>
                                                     ( int ) lDistance,
                                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );

                            xMayClose = pdFALSE;
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
                        }
                    }
                }

                if( xTCPWindowLoggingLevel > 0 )
 8012a5e:	4b32      	ldr	r3, [pc, #200]	@ (8012b28 <prvHandleEstablished+0x2d4>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	dd11      	ble.n	8012a8a <prvHandleEstablished+0x236>
                {
                    FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %d (Rx %u Len %d, Tx %u)\n",
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8012a6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012a6e:	1ad1      	subs	r1, r2, r3
 8012a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a72:	6a1a      	ldr	r2, [r3, #32]
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8012a7a:	1ad3      	subs	r3, r2, r3
 8012a7c:	9300      	str	r3, [sp, #0]
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	460a      	mov	r2, r1
 8012a82:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8012a84:	4829      	ldr	r0, [pc, #164]	@ (8012b2c <prvHandleEstablished+0x2d8>)
 8012a86:	f00f fb5f 	bl	8022148 <lUDPLoggingPrintf>
                                             ( unsigned ) ( ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulReceiveLength,
                                             ( unsigned ) ( pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) ) );
                }

                if( xMayClose != pdFALSE )
 8012a8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d00d      	beq.n	8012aac <prvHandleEstablished+0x258>
                {
                    pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 8012a90:	68fa      	ldr	r2, [r7, #12]
 8012a92:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012a96:	f043 0320 	orr.w	r3, r3, #32
 8012a9a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	68f8      	ldr	r0, [r7, #12]
 8012aa6:	f7ff fca9 	bl	80123fc <prvTCPHandleFin>
 8012aaa:	64f8      	str	r0, [r7, #76]	@ 0x4c
                }
            }

            if( xMayClose == pdFALSE )
 8012aac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d131      	bne.n	8012b16 <prvHandleEstablished+0x2c2>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012ab4:	2210      	movs	r2, #16
 8012ab6:	735a      	strb	r2, [r3, #13]

                if( ulReceiveLength != 0U )
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d01d      	beq.n	8012afa <prvHandleEstablished+0x2a6>
                {
                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012abe:	68f8      	ldr	r0, [r7, #12]
 8012ac0:	f7f7 faa4 	bl	800a00c <uxIPHeaderSizeSocket>
 8012ac4:	4602      	mov	r2, r0
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	4413      	add	r3, r2
 8012aca:	3314      	adds	r3, #20
 8012acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	b2db      	uxtb	r3, r3
 8012ad6:	3314      	adds	r3, #20
 8012ad8:	b2db      	uxtb	r3, r3
 8012ada:	009b      	lsls	r3, r3, #2
 8012adc:	b2da      	uxtb	r2, r3
 8012ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012ae0:	731a      	strb	r2, [r3, #12]

                    if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d003      	beq.n	8012afa <prvHandleEstablished+0x2a6>
                    {
                        pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8012af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012af4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012af8:	621a      	str	r2, [r3, #32]

                /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
                 * can not send-out both TCP options and also a full packet. Sending
                 * options (SACK) is always more urgent than sending data, which can be
                 * sent later. */
                if( uxOptionsLength == 0U )
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d10a      	bne.n	8012b16 <prvHandleEstablished+0x2c2>
                {
                    /* prvTCPPrepareSend might allocate a bigger network buffer, if
                     * necessary. */
                    lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8012b00:	683a      	ldr	r2, [r7, #0]
 8012b02:	68b9      	ldr	r1, [r7, #8]
 8012b04:	68f8      	ldr	r0, [r7, #12]
 8012b06:	f001 f8a1 	bl	8013c4c <prvTCPPrepareSend>
 8012b0a:	6178      	str	r0, [r7, #20]

                    if( lSendResult > 0 )
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	dd01      	ble.n	8012b16 <prvHandleEstablished+0x2c2>
                    {
                        xSendLength = ( BaseType_t ) lSendResult;
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    }
                }
            }
        }

        return xSendLength;
 8012b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8012b18:	4618      	mov	r0, r3
 8012b1a:	3754      	adds	r7, #84	@ 0x54
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd90      	pop	{r4, r7, pc}
 8012b20:	080264b4 	.word	0x080264b4
 8012b24:	080264e0 	.word	0x080264e0
 8012b28:	200015c8 	.word	0x200015c8
 8012b2c:	08026514 	.word	0x08026514

08012b30 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                  NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8012b30:	b590      	push	{r4, r7, lr}
 8012b32:	b08f      	sub	sp, #60	@ 0x3c
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
 8012b38:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 8012b3a:	683b      	ldr	r3, [r7, #0]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7f7 fa47 	bl	8009fd8 <uxIPHeaderSizePacket>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012b4e:	4423      	add	r3, r4
 8012b50:	633b      	str	r3, [r7, #48]	@ 0x30
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8012b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xSendLength = 0;
 8012b56:	2300      	movs	r3, #0
 8012b58:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8012b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b5c:	685b      	ldr	r3, [r3, #4]
 8012b5e:	061a      	lsls	r2, r3, #24
 8012b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b62:	685b      	ldr	r3, [r3, #4]
 8012b64:	021b      	lsls	r3, r3, #8
 8012b66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012b6a:	431a      	orrs	r2, r3
 8012b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b6e:	685b      	ldr	r3, [r3, #4]
 8012b70:	0a1b      	lsrs	r3, r3, #8
 8012b72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012b76:	431a      	orrs	r2, r3
 8012b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b7a:	685b      	ldr	r3, [r3, #4]
 8012b7c:	0e1b      	lsrs	r3, r3, #24
 8012b7e:	4313      	orrs	r3, r2
 8012b80:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 8012b82:	2300      	movs	r3, #0
 8012b84:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b88:	7b5b      	ldrb	r3, [r3, #13]
 8012b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012b94:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxIntermediateResult = 0;
 8012b96:	2300      	movs	r3, #0
 8012b98:	61bb      	str	r3, [r7, #24]
        uint32_t ulSum;

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	f107 0208 	add.w	r2, r7, #8
 8012ba2:	4611      	mov	r1, r2
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f7ff fa64 	bl	8012072 <prvCheckRxData>
 8012baa:	4603      	mov	r3, r0
 8012bac:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012bb4:	2b04      	cmp	r3, #4
 8012bb6:	d90c      	bls.n	8012bd2 <prvTCPHandleState+0xa2>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1U ) )
 8012bb8:	69fb      	ldr	r3, [r7, #28]
 8012bba:	691a      	ldr	r2, [r3, #16]
 8012bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bbe:	3301      	adds	r3, #1
 8012bc0:	429a      	cmp	r2, r3
 8012bc2:	d106      	bne.n	8012bd2 <prvTCPHandleState+0xa2>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8012bc4:	687a      	ldr	r2, [r7, #4]
 8012bc6:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012bca:	f043 0301 	orr.w	r3, r3, #1
 8012bce:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        ulSum = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber;
 8012bd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012bd4:	697b      	ldr	r3, [r7, #20]
 8012bd6:	441a      	add	r2, r3
 8012bd8:	69fb      	ldr	r3, [r7, #28]
 8012bda:	699b      	ldr	r3, [r3, #24]
 8012bdc:	1ad3      	subs	r3, r2, r3
 8012bde:	613b      	str	r3, [r7, #16]

        if( ( ( int32_t ) ulSum ) > 0 )
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	dd04      	ble.n	8012bf0 <prvTCPHandleState+0xc0>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8012be6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	441a      	add	r2, r3
 8012bec:	69fb      	ldr	r3, [r7, #28]
 8012bee:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 8012bf0:	68b9      	ldr	r1, [r7, #8]
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	681a      	ldr	r2, [r3, #0]
 8012bf6:	697b      	ldr	r3, [r7, #20]
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f7ff fae3 	bl	80121c4 <prvStoreRxData>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	da03      	bge.n	8012c0c <prvTCPHandleState+0xdc>
        {
            xSendLength = -1;
 8012c04:	f04f 33ff 	mov.w	r3, #4294967295
 8012c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8012c0a:	e0ae      	b.n	8012d6a <prvTCPHandleState+0x23a>
        }
        else
        {
            eIPTCPState_t eState;

            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 8012c0c:	683b      	ldr	r3, [r7, #0]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	4619      	mov	r1, r3
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f001 fa0c 	bl	8014030 <prvSetOptions>
 8012c18:	6278      	str	r0, [r7, #36]	@ 0x24

            if( ( pxSocket->u.xTCP.eTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012c20:	2b04      	cmp	r3, #4
 8012c22:	d10c      	bne.n	8012c3e <prvTCPHandleState+0x10e>
 8012c24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012c28:	f003 031f 	and.w	r3, r3, #31
 8012c2c:	2b02      	cmp	r3, #2
 8012c2e:	d106      	bne.n	8012c3e <prvTCPHandleState+0x10e>
            {
                FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 8012c30:	4855      	ldr	r0, [pc, #340]	@ (8012d88 <prvTCPHandleState+0x258>)
 8012c32:	f00f fa89 	bl	8022148 <lUDPLoggingPrintf>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 8012c36:	2103      	movs	r1, #3
 8012c38:	6878      	ldr	r0, [r7, #4]
 8012c3a:	f7fe fa79 	bl	8011130 <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 8012c3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012c42:	f003 0301 	and.w	r3, r3, #1
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d022      	beq.n	8012c90 <prvTCPHandleState+0x160>
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012c50:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012c54:	b2db      	uxtb	r3, r3
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d11a      	bne.n	8012c90 <prvTCPHandleState+0x160>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8012c5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	441a      	add	r2, r3
 8012c60:	69fb      	ldr	r3, [r7, #28]
 8012c62:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c6e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c7c:	b2db      	uxtb	r3, r3
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d106      	bne.n	8012c90 <prvTCPHandleState+0x160>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 8012c82:	687a      	ldr	r2, [r7, #4]
 8012c84:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8012c88:	f043 0302 	orr.w	r3, r3, #2
 8012c8c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                }
            }

            eState = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012c96:	73fb      	strb	r3, [r7, #15]

            switch( eState )
 8012c98:	7bfb      	ldrb	r3, [r7, #15]
 8012c9a:	2b0b      	cmp	r3, #11
 8012c9c:	d864      	bhi.n	8012d68 <prvTCPHandleState+0x238>
 8012c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8012ca4 <prvTCPHandleState+0x174>)
 8012ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ca4:	08012d69 	.word	0x08012d69
 8012ca8:	08012d69 	.word	0x08012d69
 8012cac:	08012d37 	.word	0x08012d37
 8012cb0:	08012cd5 	.word	0x08012cd5
 8012cb4:	08012d37 	.word	0x08012d37
 8012cb8:	08012d49 	.word	0x08012d49
 8012cbc:	08012d59 	.word	0x08012d59
 8012cc0:	08012d59 	.word	0x08012d59
 8012cc4:	08012d69 	.word	0x08012d69
 8012cc8:	08012d69 	.word	0x08012d69
 8012ccc:	08012d59 	.word	0x08012d59
 8012cd0:	08012d69 	.word	0x08012d69
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 8012cd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f000 fe4e 	bl	8013978 <prvSetSynAckOptions>
 8012cdc:	6278      	str	r0, [r7, #36]	@ 0x24
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 8012cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ce0:	2212      	movs	r2, #18
 8012ce2:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f7f7 f991 	bl	800a00c <uxIPHeaderSizeSocket>
 8012cea:	4602      	mov	r2, r0
 8012cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cee:	4413      	add	r3, r2
 8012cf0:	3314      	adds	r3, #20
 8012cf2:	61bb      	str	r3, [r7, #24]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012cf4:	69bb      	ldr	r3, [r7, #24]
 8012cf6:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cfa:	b2db      	uxtb	r3, r3
 8012cfc:	3314      	adds	r3, #20
 8012cfe:	b2db      	uxtb	r3, r3
 8012d00:	009b      	lsls	r3, r3, #2
 8012d02:	b2da      	uxtb	r2, r3
 8012d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d06:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 8012d08:	2104      	movs	r1, #4
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f7fe fa10 	bl	8011130 <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8012d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d12:	1c5a      	adds	r2, r3, #1
 8012d14:	69fb      	ldr	r3, [r7, #28]
 8012d16:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8012d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d1a:	1c5a      	adds	r2, r3, #1
 8012d1c:	69fb      	ldr	r3, [r7, #28]
 8012d1e:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8012d20:	69fb      	ldr	r3, [r7, #28]
 8012d22:	69db      	ldr	r3, [r3, #28]
 8012d24:	1c5a      	adds	r2, r3, #1
 8012d26:	69fb      	ldr	r3, [r7, #28]
 8012d28:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U; /* because we send a TCP_SYN. */
 8012d2a:	69fb      	ldr	r3, [r7, #28]
 8012d2c:	69db      	ldr	r3, [r3, #28]
 8012d2e:	1c5a      	adds	r2, r3, #1
 8012d30:	69fb      	ldr	r3, [r7, #28]
 8012d32:	621a      	str	r2, [r3, #32]
                    break;
 8012d34:	e019      	b.n	8012d6a <prvTCPHandleState+0x23a>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	6819      	ldr	r1, [r3, #0]
 8012d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d3c:	697a      	ldr	r2, [r7, #20]
 8012d3e:	6878      	ldr	r0, [r7, #4]
 8012d40:	f7ff fc3a 	bl	80125b8 <prvHandleSynReceived>
 8012d44:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8012d46:	e010      	b.n	8012d6a <prvTCPHandleState+0x23a>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 8012d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d4a:	697a      	ldr	r2, [r7, #20]
 8012d4c:	6839      	ldr	r1, [r7, #0]
 8012d4e:	6878      	ldr	r0, [r7, #4]
 8012d50:	f7ff fd80 	bl	8012854 <prvHandleEstablished>
 8012d54:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8012d56:	e008      	b.n	8012d6a <prvTCPHandleState+0x23a>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f7ff fb4c 	bl	80123fc <prvTCPHandleFin>
 8012d64:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8012d66:	e000      	b.n	8012d6a <prvTCPHandleState+0x23a>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 8012d68:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 8012d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	dd06      	ble.n	8012d7e <prvTCPHandleState+0x24e>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 8012d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d72:	697a      	ldr	r2, [r7, #20]
 8012d74:	6839      	ldr	r1, [r7, #0]
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f001 fa1a 	bl	80141b0 <prvSendData>
 8012d7c:	6378      	str	r0, [r7, #52]	@ 0x34
        }

        return xSendLength;
 8012d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8012d80:	4618      	mov	r0, r3
 8012d82:	373c      	adds	r7, #60	@ 0x3c
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd90      	pop	{r4, r7, pc}
 8012d88:	0802654c 	.word	0x0802654c

08012d8c <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b084      	sub	sp, #16
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
 8012d94:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxNewSocket = NULL;
 8012d96:	2300      	movs	r3, #0
 8012d98:	60fb      	str	r3, [r7, #12]

        switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8012d9a:	6838      	ldr	r0, [r7, #0]
 8012d9c:	f7f7 f91c 	bl	8009fd8 <uxIPHeaderSizePacket>
 8012da0:	4603      	mov	r3, r0
 8012da2:	2b14      	cmp	r3, #20
 8012da4:	d002      	beq.n	8012dac <prvHandleListen+0x20>
 8012da6:	2b28      	cmp	r3, #40	@ 0x28
 8012da8:	d006      	beq.n	8012db8 <prvHandleListen+0x2c>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break;
 8012daa:	e00b      	b.n	8012dc4 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV4( pxSocket, pxNetworkBuffer );
 8012dac:	6839      	ldr	r1, [r7, #0]
 8012dae:	6878      	ldr	r0, [r7, #4]
 8012db0:	f000 f8ee 	bl	8012f90 <prvHandleListen_IPV4>
 8012db4:	60f8      	str	r0, [r7, #12]
                    break;
 8012db6:	e005      	b.n	8012dc4 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV6( pxSocket, pxNetworkBuffer );
 8012db8:	6839      	ldr	r1, [r7, #0]
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f000 fa10 	bl	80131e0 <prvHandleListen_IPV6>
 8012dc0:	60f8      	str	r0, [r7, #12]
                    break;
 8012dc2:	bf00      	nop
        }

        return pxNewSocket;
 8012dc4:	68fb      	ldr	r3, [r7, #12]
    }
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3710      	adds	r7, #16
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
	...

08012dd0 <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                 FreeRTOS_Socket_t * pxSocket )
    {
 8012dd0:	b590      	push	{r4, r7, lr}
 8012dd2:	b08f      	sub	sp, #60	@ 0x3c
 8012dd4:	af04      	add	r7, sp, #16
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	6a1a      	ldr	r2, [r3, #32]
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	621a      	str	r2, [r3, #32]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	625a      	str	r2, [r3, #36]	@ 0x24
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

        #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
        {
            pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	63da      	str	r2, [r3, #60]	@ 0x3c
        #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            /* In case call-backs are used, copy them from parent to child. */
            pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            /* Child socket of listening sockets will inherit the Socket Set
             * Otherwise the owner has no chance of including it into the set. */
            if( pxSocket->pxSocketSet != NULL )
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d009      	beq.n	8012e86 <prvTCPSocketCopy+0xb6>
            {
                pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	641a      	str	r2, [r3, #64]	@ 0x40
                pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e7e:	f043 0205 	orr.w	r2, r3, #5
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        ( void ) FreeRTOS_GetLocalAddress( pxSocket, &xAddress );
 8012e86:	f107 030c 	add.w	r3, r7, #12
 8012e8a:	4619      	mov	r1, r3
 8012e8c:	6838      	ldr	r0, [r7, #0]
 8012e8e:	f7fc fb65 	bl	800f55c <FreeRTOS_GetLocalAddress>
             * orphan temporarily.  Once this socket is really connected, the owner of
             * the server socket will be notified. */

            /* When bPassQueued is true, the socket is an orphan until it gets
             * connected. */
            pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8012e92:	687a      	ldr	r2, [r7, #4]
 8012e94:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8012e98:	f043 0304 	orr.w	r3, r3, #4
 8012e9c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	683a      	ldr	r2, [r7, #0]
 8012ea4:	67da      	str	r2, [r3, #124]	@ 0x7c
                pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
            }
        }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012eac:	3301      	adds	r3, #1
 8012eae:	b29a      	uxth	r2, r3
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

        if( pxSocket->u.xTCP.pxPeerSocket == NULL )
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d102      	bne.n	8012ec4 <prvTCPSocketCopy+0xf4>
        {
            pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	687a      	ldr	r2, [r7, #4]
 8012ec2:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s me: %p parent: %p peer: %p\n",
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012ec8:	4619      	mov	r1, r3
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012ed8:	461c      	mov	r4, r3
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012ee0:	2b01      	cmp	r3, #1
 8012ee2:	d101      	bne.n	8012ee8 <prvTCPSocketCopy+0x118>
 8012ee4:	4a17      	ldr	r2, [pc, #92]	@ (8012f44 <prvTCPSocketCopy+0x174>)
 8012ee6:	e000      	b.n	8012eea <prvTCPSocketCopy+0x11a>
 8012ee8:	4a17      	ldr	r2, [pc, #92]	@ (8012f48 <prvTCPSocketCopy+0x178>)
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d002      	beq.n	8012ef6 <prvTCPSocketCopy+0x126>
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012ef4:	e000      	b.n	8012ef8 <prvTCPSocketCopy+0x128>
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	9303      	str	r3, [sp, #12]
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	9302      	str	r3, [sp, #8]
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	9301      	str	r3, [sp, #4]
 8012f02:	9200      	str	r2, [sp, #0]
 8012f04:	4623      	mov	r3, r4
 8012f06:	4602      	mov	r2, r0
 8012f08:	4810      	ldr	r0, [pc, #64]	@ (8012f4c <prvTCPSocketCopy+0x17c>)
 8012f0a:	f00f f91d 	bl	8022148 <lUDPLoggingPrintf>
                                 ( void * ) pxNewSocket,
                                 ( void * ) pxSocket,
                                 pxSocket ? ( void * ) pxSocket->u.xTCP.pxPeerSocket : NULL ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 8012f0e:	f107 010c 	add.w	r1, r7, #12
 8012f12:	2301      	movs	r3, #1
 8012f14:	2218      	movs	r2, #24
 8012f16:	6878      	ldr	r0, [r7, #4]
 8012f18:	f7fb fccc 	bl	800e8b4 <vSocketBind>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d008      	beq.n	8012f34 <prvTCPSocketCopy+0x164>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 8012f22:	480b      	ldr	r0, [pc, #44]	@ (8012f50 <prvTCPSocketCopy+0x180>)
 8012f24:	f00f f910 	bl	8022148 <lUDPLoggingPrintf>
            ( void ) vSocketClose( pxNewSocket );
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f7fb fd77 	bl	800ea1c <vSocketClose>
            xResult = pdFALSE;
 8012f2e:	2300      	movs	r3, #0
 8012f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f32:	e001      	b.n	8012f38 <prvTCPSocketCopy+0x168>
        }
        else
        {
            xResult = pdTRUE;
 8012f34:	2301      	movs	r3, #1
 8012f36:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return xResult;
 8012f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	372c      	adds	r7, #44	@ 0x2c
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd90      	pop	{r4, r7, pc}
 8012f42:	bf00      	nop
 8012f44:	0802658c 	.word	0x0802658c
 8012f48:	08026590 	.word	0x08026590
 8012f4c:	08026594 	.word	0x08026594
 8012f50:	080265d8 	.word	0x080265d8

08012f54 <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 8012f54:	b480      	push	{r7}
 8012f56:	b085      	sub	sp, #20
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	db02      	blt.n	8012f6c <FreeRTOS_GetTCPStateName+0x18>
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2b0c      	cmp	r3, #12
 8012f6a:	dd04      	ble.n	8012f76 <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 8012f6c:	230d      	movs	r3, #13
 8012f6e:	60fb      	str	r3, [r7, #12]
                xIndex--;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	3b01      	subs	r3, #1
 8012f74:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 8012f76:	4a05      	ldr	r2, [pc, #20]	@ (8012f8c <FreeRTOS_GetTCPStateName+0x38>)
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3714      	adds	r7, #20
 8012f82:	46bd      	mov	sp, r7
 8012f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f88:	4770      	bx	lr
 8012f8a:	bf00      	nop
 8012f8c:	080278a8 	.word	0x080278a8

08012f90 <prvHandleListen_IPV4>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV4( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8012f90:	b590      	push	{r4, r7, lr}
 8012f92:	b08f      	sub	sp, #60	@ 0x3c
 8012f94:	af02      	add	r7, sp, #8
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	6039      	str	r1, [r7, #0]
    /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

    const TCPPacket_t * pxTCPPacket = NULL;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0U;
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    const NetworkEndPoint_t * pxEndpoint = NULL;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	623b      	str	r3, [r7, #32]
    BaseType_t xIsNewSocket = pdFALSE;
 8012faa:	2300      	movs	r3, #0
 8012fac:	61fb      	str	r3, [r7, #28]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d008      	beq.n	8012fc6 <prvHandleListen_IPV4+0x36>
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d005      	beq.n	8012fc6 <prvHandleListen_IPV4+0x36>
    {
        /* Initialize pointers if inputs are valid. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fc4:	623b      	str	r3, [r7, #32]
    }

    /* Silently discard a SYN packet which was not specifically sent for this node. */
    if( ( pxEndpoint != NULL ) && ( pxTCPPacket->xIPHeader.ulDestinationIPAddress == pxEndpoint->ipv4_settings.ulIPAddress ) )
 8012fc6:	6a3b      	ldr	r3, [r7, #32]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d015      	beq.n	8012ff8 <prvHandleListen_IPV4+0x68>
 8012fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fce:	f8d3 201e 	ldr.w	r2, [r3, #30]
 8012fd2:	6a3b      	ldr	r3, [r7, #32]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d10e      	bne.n	8012ff8 <prvHandleListen_IPV4+0x68>
    {
        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 8012fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fdc:	f8d3 001e 	ldr.w	r0, [r3, #30]
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 8012fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fe6:	f8d3 201a 	ldr.w	r2, [r3, #26]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 8012fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fec:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012fee:	b29b      	uxth	r3, r3
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 8012ff0:	f7ee fcd2 	bl	8001998 <ulApplicationGetNextSequenceNumber>
 8012ff4:	6278      	str	r0, [r7, #36]	@ 0x24
 8012ff6:	e001      	b.n	8012ffc <prvHandleListen_IPV4+0x6c>
    }
    else
    {
        /* Set the sequence number to 0 to avoid further processing. */
        ulInitialSequenceNumber = 0U;
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( ulInitialSequenceNumber != 0U )
 8012ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d059      	beq.n	80130b6 <prvHandleListen_IPV4+0x126>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013008:	f003 0308 	and.w	r3, r3, #8
 801300c:	b2db      	uxtb	r3, r3
 801300e:	2b00      	cmp	r3, #0
 8013010:	d00c      	beq.n	801302c <prvHandleListen_IPV4+0x9c>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8013016:	687a      	ldr	r2, [r7, #4]
 8013018:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801301c:	f043 0304 	orr.w	r3, r3, #4
 8013020:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	687a      	ldr	r2, [r7, #4]
 8013028:	67da      	str	r2, [r3, #124]	@ 0x7c
 801302a:	e044      	b.n	80130b6 <prvHandleListen_IPV4+0x126>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 801302c:	2300      	movs	r3, #0
 801302e:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 801303c:	429a      	cmp	r2, r3
 801303e:	d31b      	bcc.n	8013078 <prvHandleListen_IPV4+0xe8>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013044:	4619      	mov	r1, r3
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801304c:	461a      	mov	r2, r3
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8013054:	4618      	mov	r0, r3
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801305c:	2b01      	cmp	r3, #1
 801305e:	d101      	bne.n	8013064 <prvHandleListen_IPV4+0xd4>
 8013060:	4b5b      	ldr	r3, [pc, #364]	@ (80131d0 <prvHandleListen_IPV4+0x240>)
 8013062:	e000      	b.n	8013066 <prvHandleListen_IPV4+0xd6>
 8013064:	4b5b      	ldr	r3, [pc, #364]	@ (80131d4 <prvHandleListen_IPV4+0x244>)
 8013066:	9300      	str	r3, [sp, #0]
 8013068:	4603      	mov	r3, r0
 801306a:	485b      	ldr	r0, [pc, #364]	@ (80131d8 <prvHandleListen_IPV4+0x248>)
 801306c:	f00f f86c 	bl	8022148 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 8013070:	6838      	ldr	r0, [r7, #0]
 8013072:	f001 f9d1 	bl	8014418 <prvTCPSendReset>
 8013076:	e01e      	b.n	80130b6 <prvHandleListen_IPV4+0x126>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8013078:	2206      	movs	r2, #6
 801307a:	2101      	movs	r1, #1
 801307c:	2002      	movs	r0, #2
 801307e:	f7fb f8bf 	bl	800e200 <FreeRTOS_socket>
 8013082:	6178      	str	r0, [r7, #20]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d003      	beq.n	8013092 <prvHandleListen_IPV4+0x102>
 801308a:	697b      	ldr	r3, [r7, #20]
 801308c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013090:	d106      	bne.n	80130a0 <prvHandleListen_IPV4+0x110>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 8013092:	4852      	ldr	r0, [pc, #328]	@ (80131dc <prvHandleListen_IPV4+0x24c>)
 8013094:	f00f f858 	bl	8022148 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8013098:	6838      	ldr	r0, [r7, #0]
 801309a:	f001 f9bd 	bl	8014418 <prvTCPSendReset>
 801309e:	e00a      	b.n	80130b6 <prvHandleListen_IPV4+0x126>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 80130a0:	6879      	ldr	r1, [r7, #4]
 80130a2:	6978      	ldr	r0, [r7, #20]
 80130a4:	f7ff fe94 	bl	8012dd0 <prvTCPSocketCopy>
 80130a8:	4603      	mov	r3, r0
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d003      	beq.n	80130b6 <prvHandleListen_IPV4+0x126>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 80130b2:	2301      	movs	r3, #1
 80130b4:	61fb      	str	r3, [r7, #28]
                }
            }
        }
    }

    if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 80130b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f000 8083 	beq.w	80131c4 <prvHandleListen_IPV4+0x234>
 80130be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d07f      	beq.n	80131c4 <prvHandleListen_IPV4+0x234>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 80130c4:	683b      	ldr	r3, [r7, #0]
 80130c6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80130c8:	6838      	ldr	r0, [r7, #0]
 80130ca:	f7f6 ff85 	bl	8009fd8 <uxIPHeaderSizePacket>
 80130ce:	4603      	mov	r3, r0
 80130d0:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 80130d2:	4423      	add	r3, r4
 80130d4:	613b      	str	r3, [r7, #16]

            /* The endpoint in network buffer must be valid in this condition. */
            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80130da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130dc:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 80130de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80130e0:	7a13      	ldrb	r3, [r2, #8]
 80130e2:	f36f 0300 	bfc	r3, #0, #1
 80130e6:	7213      	strb	r3, [r2, #8]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 80130e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130ea:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80130ec:	b29b      	uxth	r3, r3
 80130ee:	021b      	lsls	r3, r3, #8
 80130f0:	b21a      	sxth	r2, r3
 80130f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130f4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80130f6:	b29b      	uxth	r3, r3
 80130f8:	0a1b      	lsrs	r3, r3, #8
 80130fa:	b29b      	uxth	r3, r3
 80130fc:	b21b      	sxth	r3, r3
 80130fe:	4313      	orrs	r3, r2
 8013100:	b21b      	sxth	r3, r3
 8013102:	b29a      	uxth	r2, r3
 8013104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013106:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            pxReturn->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 801310a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801310c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8013110:	061a      	lsls	r2, r3, #24
 8013112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013114:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8013118:	021b      	lsls	r3, r3, #8
 801311a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801311e:	431a      	orrs	r2, r3
 8013120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013122:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8013126:	0a1b      	lsrs	r3, r3, #8
 8013128:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801312c:	431a      	orrs	r2, r3
 801312e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013130:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8013134:	0e1b      	lsrs	r3, r3, #24
 8013136:	431a      	orrs	r2, r3
 8013138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801313a:	655a      	str	r2, [r3, #84]	@ 0x54
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801313c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801313e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013140:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8013144:	693b      	ldr	r3, [r7, #16]
 8013146:	685b      	ldr	r3, [r3, #4]
 8013148:	061a      	lsls	r2, r3, #24
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	685b      	ldr	r3, [r3, #4]
 801314e:	021b      	lsls	r3, r3, #8
 8013150:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013154:	431a      	orrs	r2, r3
 8013156:	693b      	ldr	r3, [r7, #16]
 8013158:	685b      	ldr	r3, [r3, #4]
 801315a:	0a1b      	lsrs	r3, r3, #8
 801315c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013160:	431a      	orrs	r2, r3
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	0e1b      	lsrs	r3, r3, #24
 8013168:	431a      	orrs	r2, r3
 801316a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801316c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 8013170:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013172:	f002 f877 	bl	8015264 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 8013176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013178:	f000 fb66 	bl	8013848 <prvTCPCreateWindow>
 801317c:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	2b01      	cmp	r3, #1
 8013182:	d008      	beq.n	8013196 <prvHandleListen_IPV4+0x206>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 8013184:	69fb      	ldr	r3, [r7, #28]
 8013186:	2b01      	cmp	r3, #1
 8013188:	d102      	bne.n	8013190 <prvHandleListen_IPV4+0x200>
                {
                    ( void ) vSocketClose( pxReturn );
 801318a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801318c:	f7fb fc46 	bl	800ea1c <vSocketClose>
                }

                pxReturn = NULL;
 8013190:	2300      	movs	r3, #0
 8013192:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 8013194:	e016      	b.n	80131c4 <prvHandleListen_IPV4+0x234>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 8013196:	2103      	movs	r1, #3
 8013198:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801319a:	f7fd ffc9 	bl	8011130 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131a2:	2b5a      	cmp	r3, #90	@ 0x5a
 80131a4:	d902      	bls.n	80131ac <prvHandleListen_IPV4+0x21c>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 80131a6:	235a      	movs	r3, #90	@ 0x5a
 80131a8:	61bb      	str	r3, [r7, #24]
 80131aa:	e002      	b.n	80131b2 <prvHandleListen_IPV4+0x222>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131b0:	61bb      	str	r3, [r7, #24]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80131b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131b4:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80131bc:	69ba      	ldr	r2, [r7, #24]
 80131be:	4619      	mov	r1, r3
 80131c0:	f00f f9de 	bl	8022580 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 80131c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80131c6:	4618      	mov	r0, r3
 80131c8:	3734      	adds	r7, #52	@ 0x34
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd90      	pop	{r4, r7, pc}
 80131ce:	bf00      	nop
 80131d0:	08026680 	.word	0x08026680
 80131d4:	08026684 	.word	0x08026684
 80131d8:	08026688 	.word	0x08026688
 80131dc:	080266b8 	.word	0x080266b8

080131e0 <prvHandleListen_IPV6>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV6( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 80131e0:	b590      	push	{r4, r7, lr}
 80131e2:	b08f      	sub	sp, #60	@ 0x3c
 80131e4:	af02      	add	r7, sp, #8
 80131e6:	6078      	str	r0, [r7, #4]
 80131e8:	6039      	str	r1, [r7, #0]
    const TCPPacket_IPv6_t * pxTCPPacket = NULL;
 80131ea:	2300      	movs	r3, #0
 80131ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 80131ee:	2300      	movs	r3, #0
 80131f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0;
 80131f2:	2300      	movs	r3, #0
 80131f4:	60bb      	str	r3, [r7, #8]
    BaseType_t xHasSequence = pdFALSE;
 80131f6:	2300      	movs	r3, #0
 80131f8:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xIsNewSocket = pdFALSE;
 80131fa:	2300      	movs	r3, #0
 80131fc:	623b      	str	r3, [r7, #32]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d024      	beq.n	801324e <prvHandleListen_IPV6+0x6e>
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d021      	beq.n	801324e <prvHandleListen_IPV6+0x6e>
        /* Map the ethernet buffer onto a TCPPacket_IPv6_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801320a:	683b      	ldr	r3, [r7, #0]
 801320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801320e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013214:	2b00      	cmp	r3, #0
 8013216:	d103      	bne.n	8013220 <prvHandleListen_IPV6+0x40>
 8013218:	215d      	movs	r1, #93	@ 0x5d
 801321a:	487b      	ldr	r0, [pc, #492]	@ (8013408 <prvHandleListen_IPV6+0x228>)
 801321c:	f7ee fb9c 	bl	8001958 <vAssertCalled>

        /* Silently discard a SYN packet which was not specifically sent for this node. */
        if( memcmp( pxTCPPacket->xIPHeader.xDestinationAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 8013220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013222:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801322a:	3338      	adds	r3, #56	@ 0x38
 801322c:	2210      	movs	r2, #16
 801322e:	4619      	mov	r1, r3
 8013230:	f010 f93b 	bl	80234aa <memcmp>
 8013234:	4603      	mov	r3, r0
 8013236:	2b00      	cmp	r3, #0
 8013238:	d109      	bne.n	801324e <prvHandleListen_IPV6+0x6e>
        {
            /* Assume that a new Initial Sequence Number will be required. Request
             * it now in order to fail out if necessary. */
            if( xApplicationGetRandomNumber( &ulInitialSequenceNumber ) == pdPASS )
 801323a:	f107 0308 	add.w	r3, r7, #8
 801323e:	4618      	mov	r0, r3
 8013240:	f7ee fc54 	bl	8001aec <xApplicationGetRandomNumber>
 8013244:	4603      	mov	r3, r0
 8013246:	2b01      	cmp	r3, #1
 8013248:	d101      	bne.n	801324e <prvHandleListen_IPV6+0x6e>
            {
                xHasSequence = pdTRUE;
 801324a:	2301      	movs	r3, #1
 801324c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( xHasSequence != pdFALSE )
 801324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013250:	2b00      	cmp	r3, #0
 8013252:	d059      	beq.n	8013308 <prvHandleListen_IPV6+0x128>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801325a:	f003 0308 	and.w	r3, r3, #8
 801325e:	b2db      	uxtb	r3, r3
 8013260:	2b00      	cmp	r3, #0
 8013262:	d00c      	beq.n	801327e <prvHandleListen_IPV6+0x9e>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8013268:	687a      	ldr	r2, [r7, #4]
 801326a:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801326e:	f043 0304 	orr.w	r3, r3, #4
 8013272:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	687a      	ldr	r2, [r7, #4]
 801327a:	67da      	str	r2, [r3, #124]	@ 0x7c
 801327c:	e044      	b.n	8013308 <prvHandleListen_IPV6+0x128>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 801327e:	2300      	movs	r3, #0
 8013280:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 801328e:	429a      	cmp	r2, r3
 8013290:	d31b      	bcc.n	80132ca <prvHandleListen_IPV6+0xea>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013296:	4619      	mov	r1, r3
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801329e:	461a      	mov	r2, r3
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80132a6:	4618      	mov	r0, r3
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80132ae:	2b01      	cmp	r3, #1
 80132b0:	d101      	bne.n	80132b6 <prvHandleListen_IPV6+0xd6>
 80132b2:	4b56      	ldr	r3, [pc, #344]	@ (801340c <prvHandleListen_IPV6+0x22c>)
 80132b4:	e000      	b.n	80132b8 <prvHandleListen_IPV6+0xd8>
 80132b6:	4b56      	ldr	r3, [pc, #344]	@ (8013410 <prvHandleListen_IPV6+0x230>)
 80132b8:	9300      	str	r3, [sp, #0]
 80132ba:	4603      	mov	r3, r0
 80132bc:	4855      	ldr	r0, [pc, #340]	@ (8013414 <prvHandleListen_IPV6+0x234>)
 80132be:	f00e ff43 	bl	8022148 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 80132c2:	6838      	ldr	r0, [r7, #0]
 80132c4:	f001 f8a8 	bl	8014418 <prvTCPSendReset>
 80132c8:	e01e      	b.n	8013308 <prvHandleListen_IPV6+0x128>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET6, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 80132ca:	2206      	movs	r2, #6
 80132cc:	2101      	movs	r1, #1
 80132ce:	200a      	movs	r0, #10
 80132d0:	f7fa ff96 	bl	800e200 <FreeRTOS_socket>
 80132d4:	61b8      	str	r0, [r7, #24]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 80132d6:	69bb      	ldr	r3, [r7, #24]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d003      	beq.n	80132e4 <prvHandleListen_IPV6+0x104>
 80132dc:	69bb      	ldr	r3, [r7, #24]
 80132de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132e2:	d106      	bne.n	80132f2 <prvHandleListen_IPV6+0x112>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 80132e4:	484c      	ldr	r0, [pc, #304]	@ (8013418 <prvHandleListen_IPV6+0x238>)
 80132e6:	f00e ff2f 	bl	8022148 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80132ea:	6838      	ldr	r0, [r7, #0]
 80132ec:	f001 f894 	bl	8014418 <prvTCPSendReset>
 80132f0:	e00a      	b.n	8013308 <prvHandleListen_IPV6+0x128>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 80132f2:	6879      	ldr	r1, [r7, #4]
 80132f4:	69b8      	ldr	r0, [r7, #24]
 80132f6:	f7ff fd6b 	bl	8012dd0 <prvTCPSocketCopy>
 80132fa:	4603      	mov	r3, r0
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d003      	beq.n	8013308 <prvHandleListen_IPV6+0x128>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 8013300:	69bb      	ldr	r3, [r7, #24]
 8013302:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8013304:	2301      	movs	r3, #1
 8013306:	623b      	str	r3, [r7, #32]
                }
            }
        }
    }

    if( ( xHasSequence != pdFALSE ) && ( pxReturn != NULL ) )
 8013308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801330a:	2b00      	cmp	r3, #0
 801330c:	d076      	beq.n	80133fc <prvHandleListen_IPV6+0x21c>
 801330e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013310:	2b00      	cmp	r3, #0
 8013312:	d073      	beq.n	80133fc <prvHandleListen_IPV6+0x21c>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013318:	6838      	ldr	r0, [r7, #0]
 801331a:	f7f6 fe5d 	bl	8009fd8 <uxIPHeaderSizePacket>
 801331e:	4603      	mov	r3, r0
 8013320:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8013322:	4423      	add	r3, r4
 8013324:	617b      	str	r3, [r7, #20]

            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801332a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801332c:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 801332e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013330:	7a13      	ldrb	r3, [r2, #8]
 8013332:	f043 0301 	orr.w	r3, r3, #1
 8013336:	7213      	strb	r3, [r2, #8]

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801333c:	330e      	adds	r3, #14
 801333e:	613b      	str	r3, [r7, #16]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usSourcePort );
 8013340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013342:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8013344:	b29b      	uxth	r3, r3
 8013346:	021b      	lsls	r3, r3, #8
 8013348:	b21a      	sxth	r2, r3
 801334a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801334c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801334e:	b29b      	uxth	r3, r3
 8013350:	0a1b      	lsrs	r3, r3, #8
 8013352:	b29b      	uxth	r3, r3
 8013354:	b21b      	sxth	r3, r3
 8013356:	4313      	orrs	r3, r2
 8013358:	b21b      	sxth	r3, r3
 801335a:	b29a      	uxth	r2, r3
 801335c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801335e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            ( void ) memcpy( pxReturn->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013364:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	3308      	adds	r3, #8
 801336c:	2210      	movs	r2, #16
 801336e:	4619      	mov	r1, r3
 8013370:	f00f f906 	bl	8022580 <memcpy>
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8013374:	68ba      	ldr	r2, [r7, #8]
 8013376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013378:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	685b      	ldr	r3, [r3, #4]
 8013380:	061a      	lsls	r2, r3, #24
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	685b      	ldr	r3, [r3, #4]
 8013386:	021b      	lsls	r3, r3, #8
 8013388:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801338c:	431a      	orrs	r2, r3
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	685b      	ldr	r3, [r3, #4]
 8013392:	0a1b      	lsrs	r3, r3, #8
 8013394:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013398:	431a      	orrs	r2, r3
 801339a:	697b      	ldr	r3, [r7, #20]
 801339c:	685b      	ldr	r3, [r3, #4]
 801339e:	0e1b      	lsrs	r3, r3, #24
 80133a0:	431a      	orrs	r2, r3
 80133a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133a4:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 80133a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80133aa:	f001 ff5b 	bl	8015264 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 80133ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80133b0:	f000 fa4a 	bl	8013848 <prvTCPCreateWindow>
 80133b4:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	2b01      	cmp	r3, #1
 80133ba:	d008      	beq.n	80133ce <prvHandleListen_IPV6+0x1ee>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 80133bc:	6a3b      	ldr	r3, [r7, #32]
 80133be:	2b01      	cmp	r3, #1
 80133c0:	d102      	bne.n	80133c8 <prvHandleListen_IPV6+0x1e8>
                {
                    ( void ) vSocketClose( pxReturn );
 80133c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80133c4:	f7fb fb2a 	bl	800ea1c <vSocketClose>
                }

                pxReturn = NULL;
 80133c8:	2300      	movs	r3, #0
 80133ca:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 80133cc:	e016      	b.n	80133fc <prvHandleListen_IPV6+0x21c>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 80133ce:	2103      	movs	r1, #3
 80133d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80133d2:	f7fd fead 	bl	8011130 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133da:	2b5a      	cmp	r3, #90	@ 0x5a
 80133dc:	d902      	bls.n	80133e4 <prvHandleListen_IPV6+0x204>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 80133de:	235a      	movs	r3, #90	@ 0x5a
 80133e0:	61fb      	str	r3, [r7, #28]
 80133e2:	e002      	b.n	80133ea <prvHandleListen_IPV6+0x20a>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133e8:	61fb      	str	r3, [r7, #28]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80133ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133ec:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80133f4:	69fa      	ldr	r2, [r7, #28]
 80133f6:	4619      	mov	r1, r3
 80133f8:	f00f f8c2 	bl	8022580 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 80133fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3734      	adds	r7, #52	@ 0x34
 8013402:	46bd      	mov	sp, r7
 8013404:	bd90      	pop	{r4, r7, pc}
 8013406:	bf00      	nop
 8013408:	080266d8 	.word	0x080266d8
 801340c:	08026718 	.word	0x08026718
 8013410:	0802671c 	.word	0x0802671c
 8013414:	08026720 	.word	0x08026720
 8013418:	08026750 	.word	0x08026750

0801341c <prvTCPMakeSurePrepared>:
 *         call prvTCPPrepareConnect() to continue the preparation.
 * @param[in] pxSocket The socket that wants to connect.
 * @return Returns pdTRUE if the connection is prepared, i.e. the MAC-
 *         address of the peer is already known. */
    static BaseType_t prvTCPMakeSurePrepared( FreeRTOS_Socket_t * pxSocket )
    {
 801341c:	b580      	push	{r7, lr}
 801341e:	b084      	sub	sp, #16
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8013424:	2301      	movs	r3, #1
 8013426:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.bits.bConnPrepared == pdFALSE_UNSIGNED )
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801342e:	f003 0308 	and.w	r3, r3, #8
 8013432:	b2db      	uxtb	r3, r3
 8013434:	2b00      	cmp	r3, #0
 8013436:	d107      	bne.n	8013448 <prvTCPMakeSurePrepared+0x2c>
        {
            if( prvTCPPrepareConnect( pxSocket ) != pdTRUE )
 8013438:	6878      	ldr	r0, [r7, #4]
 801343a:	f000 fa51 	bl	80138e0 <prvTCPPrepareConnect>
 801343e:	4603      	mov	r3, r0
 8013440:	2b01      	cmp	r3, #1
 8013442:	d001      	beq.n	8013448 <prvTCPMakeSurePrepared+0x2c>
            {
                /* The preparation of a connection ( ARP resolution ) is not yet ready. */
                xReturn = pdFALSE;
 8013444:	2300      	movs	r3, #0
 8013446:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8013448:	68fb      	ldr	r3, [r7, #12]
    }
 801344a:	4618      	mov	r0, r3
 801344c:	3710      	adds	r7, #16
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}
	...

08013454 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 8013454:	b580      	push	{r7, lr}
 8013456:	b088      	sub	sp, #32
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 801345c:	2300      	movs	r3, #0
 801345e:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 8013460:	2300      	movs	r3, #0
 8013462:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.eTCPState != eCONNECT_SYN )
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801346a:	2b02      	cmp	r3, #2
 801346c:	d010      	beq.n	8013490 <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 801346e:	2300      	movs	r3, #0
 8013470:	60fb      	str	r3, [r7, #12]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8013472:	f107 030c 	add.w	r3, r7, #12
 8013476:	4619      	mov	r1, r3
 8013478:	6878      	ldr	r0, [r7, #4]
 801347a:	f000 f859 	bl	8013530 <prvTCPSendRepeated>
 801347e:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d04d      	beq.n	8013522 <prvTCPSendPacket+0xce>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	4618      	mov	r0, r3
 801348a:	f003 ffb5 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
 801348e:	e048      	b.n	8013522 <prvTCPSendPacket+0xce>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013496:	2b02      	cmp	r3, #2
 8013498:	d90d      	bls.n	80134b6 <prvTCPSendPacket+0x62>
            {
                /* The connection is in the SYN status. The packet will be repeated
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %xip:%u\n",
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80134a4:	461a      	mov	r2, r3
 80134a6:	4821      	ldr	r0, [pc, #132]	@ (801352c <prvTCPSendPacket+0xd8>)
 80134a8:	f00e fe4e 	bl	8022148 <lUDPLoggingPrintf>
                                         ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80134ac:	2108      	movs	r1, #8
 80134ae:	6878      	ldr	r0, [r7, #4]
 80134b0:	f7fd fe3e 	bl	8011130 <vTCPStateChange>
 80134b4:	e035      	b.n	8013522 <prvTCPSendPacket+0xce>
            }
            else if( prvTCPMakeSurePrepared( pxSocket ) == pdTRUE )
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f7ff ffb0 	bl	801341c <prvTCPMakeSurePrepared>
 80134bc:	4603      	mov	r3, r0
 80134be:	2b01      	cmp	r3, #1
 80134c0:	d12f      	bne.n	8013522 <prvTCPSendPacket+0xce>
                 * the Ethernet address of the peer or the gateway is found. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80134c2:	6878      	ldr	r0, [r7, #4]
 80134c4:	f7f6 fda2 	bl	800a00c <uxIPHeaderSizeSocket>
 80134c8:	4603      	mov	r3, r0
 80134ca:	330e      	adds	r3, #14
 80134cc:	33a0      	adds	r3, #160	@ 0xa0
 80134ce:	687a      	ldr	r2, [r7, #4]
 80134d0:	4413      	add	r3, r2
 80134d2:	330a      	adds	r3, #10
 80134d4:	617b      	str	r3, [r7, #20]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 80134d6:	697b      	ldr	r3, [r7, #20]
 80134d8:	4619      	mov	r1, r3
 80134da:	6878      	ldr	r0, [r7, #4]
 80134dc:	f000 fa4c 	bl	8013978 <prvSetSynAckOptions>
 80134e0:	6138      	str	r0, [r7, #16]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f7f6 fd92 	bl	800a00c <uxIPHeaderSizeSocket>
 80134e8:	4602      	mov	r2, r0
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	4413      	add	r3, r2
 80134ee:	3314      	adds	r3, #20
 80134f0:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 80134f2:	69bb      	ldr	r3, [r7, #24]
 80134f4:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80134f6:	693b      	ldr	r3, [r7, #16]
 80134f8:	b2db      	uxtb	r3, r3
 80134fa:	3314      	adds	r3, #20
 80134fc:	b2db      	uxtb	r3, r3
 80134fe:	009b      	lsls	r3, r3, #2
 8013500:	b2da      	uxtb	r2, r3
 8013502:	697b      	ldr	r3, [r7, #20]
 8013504:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801350c:	3301      	adds	r3, #1
 801350e:	b2da      	uxtb	r2, r3
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8013516:	69fa      	ldr	r2, [r7, #28]
 8013518:	2300      	movs	r3, #0
 801351a:	2100      	movs	r1, #0
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f000 f837 	bl	8013590 <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8013522:	69fb      	ldr	r3, [r7, #28]
    }
 8013524:	4618      	mov	r0, r3
 8013526:	3720      	adds	r7, #32
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}
 801352c:	08026770 	.word	0x08026770

08013530 <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8013530:	b580      	push	{r7, lr}
 8013532:	b086      	sub	sp, #24
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
 8013538:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 801353a:	2300      	movs	r3, #0
 801353c:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 801353e:	2300      	movs	r3, #0
 8013540:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8013542:	2300      	movs	r3, #0
 8013544:	617b      	str	r3, [r7, #20]
 8013546:	e019      	b.n	801357c <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8013548:	68fa      	ldr	r2, [r7, #12]
 801354a:	6839      	ldr	r1, [r7, #0]
 801354c:	6878      	ldr	r0, [r7, #4]
 801354e:	f000 fb7d 	bl	8013c4c <prvTCPPrepareSend>
 8013552:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 8013554:	68bb      	ldr	r3, [r7, #8]
 8013556:	2b00      	cmp	r3, #0
 8013558:	dd14      	ble.n	8013584 <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	6819      	ldr	r1, [r3, #0]
 801355e:	68ba      	ldr	r2, [r7, #8]
 8013560:	2301      	movs	r3, #1
 8013562:	6878      	ldr	r0, [r7, #4]
 8013564:	f000 f814 	bl	8013590 <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                *ppxNetworkBuffer = NULL;
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	2200      	movs	r2, #0
 801356c:	601a      	str	r2, [r3, #0]
            }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 801356e:	693a      	ldr	r2, [r7, #16]
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	4413      	add	r3, r2
 8013574:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8013576:	697b      	ldr	r3, [r7, #20]
 8013578:	3301      	adds	r3, #1
 801357a:	617b      	str	r3, [r7, #20]
 801357c:	697b      	ldr	r3, [r7, #20]
 801357e:	2b07      	cmp	r3, #7
 8013580:	d9e2      	bls.n	8013548 <prvTCPSendRepeated+0x18>
 8013582:	e000      	b.n	8013586 <prvTCPSendRepeated+0x56>
                break;
 8013584:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8013586:	693b      	ldr	r3, [r7, #16]
    }
 8013588:	4618      	mov	r0, r3
 801358a:	3718      	adds	r7, #24
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}

08013590 <prvTCPReturnPacket>:
 */
    void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                             NetworkBufferDescriptor_t * pxDescriptor,
                             uint32_t ulLen,
                             BaseType_t xReleaseAfterSend )
    {
 8013590:	b580      	push	{r7, lr}
 8013592:	b086      	sub	sp, #24
 8013594:	af00      	add	r7, sp, #0
 8013596:	60f8      	str	r0, [r7, #12]
 8013598:	60b9      	str	r1, [r7, #8]
 801359a:	607a      	str	r2, [r7, #4]
 801359c:	603b      	str	r3, [r7, #0]
        const NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	613b      	str	r3, [r7, #16]
        BaseType_t xIsIPv6 = pdFALSE;
 80135a2:	2300      	movs	r3, #0
 80135a4:	617b      	str	r3, [r7, #20]

        if( pxNetworkBuffer != NULL )
 80135a6:	693b      	ldr	r3, [r7, #16]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d008      	beq.n	80135be <prvTCPReturnPacket+0x2e>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizePacket( pxNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER )
 80135ac:	6938      	ldr	r0, [r7, #16]
 80135ae:	f7f6 fd13 	bl	8009fd8 <uxIPHeaderSizePacket>
 80135b2:	4603      	mov	r3, r0
 80135b4:	2b28      	cmp	r3, #40	@ 0x28
 80135b6:	d113      	bne.n	80135e0 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 80135b8:	2301      	movs	r3, #1
 80135ba:	617b      	str	r3, [r7, #20]
 80135bc:	e010      	b.n	80135e0 <prvTCPReturnPacket+0x50>
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else if( pxSocket != NULL )
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d008      	beq.n	80135d6 <prvTCPReturnPacket+0x46>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizeSocket( pxSocket ) == ipSIZE_OF_IPv6_HEADER )
 80135c4:	68f8      	ldr	r0, [r7, #12]
 80135c6:	f7f6 fd21 	bl	800a00c <uxIPHeaderSizeSocket>
 80135ca:	4603      	mov	r3, r0
 80135cc:	2b28      	cmp	r3, #40	@ 0x28
 80135ce:	d107      	bne.n	80135e0 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 80135d0:	2301      	movs	r3, #1
 80135d2:	617b      	str	r3, [r7, #20]
 80135d4:	e004      	b.n	80135e0 <prvTCPReturnPacket+0x50>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else
        {
            /* prvTCPReturnPacket_IPVx() needs either a network buffer, or a socket. */
            configASSERT( pdFALSE );
 80135d6:	f240 1119 	movw	r1, #281	@ 0x119
 80135da:	480c      	ldr	r0, [pc, #48]	@ (801360c <prvTCPReturnPacket+0x7c>)
 80135dc:	f7ee f9bc 	bl	8001958 <vAssertCalled>
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	2b01      	cmp	r3, #1
 80135e4:	d105      	bne.n	80135f2 <prvTCPReturnPacket+0x62>
            {
                prvTCPReturnPacket_IPV6( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	687a      	ldr	r2, [r7, #4]
 80135ea:	68b9      	ldr	r1, [r7, #8]
 80135ec:	68f8      	ldr	r0, [r7, #12]
 80135ee:	f001 fa61 	bl	8014ab4 <prvTCPReturnPacket_IPV6>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            if( xIsIPv6 == pdFALSE )
 80135f2:	697b      	ldr	r3, [r7, #20]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d105      	bne.n	8013604 <prvTCPReturnPacket+0x74>
            {
                prvTCPReturnPacket_IPV4( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	687a      	ldr	r2, [r7, #4]
 80135fc:	68b9      	ldr	r1, [r7, #8]
 80135fe:	68f8      	ldr	r0, [r7, #12]
 8013600:	f000 ff18 	bl	8014434 <prvTCPReturnPacket_IPV4>
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
    }
 8013604:	bf00      	nop
 8013606:	3718      	adds	r7, #24
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}
 801360c:	0802678c 	.word	0x0802678c

08013610 <prvTCPReturn_CheckTCPWindow>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_CheckTCPWindow( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      size_t uxIPHeaderSize )
    {
 8013610:	b580      	push	{r7, lr}
 8013612:	b08a      	sub	sp, #40	@ 0x28
 8013614:	af00      	add	r7, sp, #0
 8013616:	60f8      	str	r0, [r7, #12]
 8013618:	60b9      	str	r1, [r7, #8]
 801361a:	607a      	str	r2, [r7, #4]
        /* Calculate the space in the RX buffer in order to advertise the
         * size of this socket's reception window. */
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013622:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801362c:	4413      	add	r3, r2
 801362e:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.rxStream != NULL )
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013636:	2b00      	cmp	r3, #0
 8013638:	d007      	beq.n	801364a <prvTCPReturn_CheckTCPWindow+0x3a>
        {
            /* An RX stream was created already, see how much space is
             * available. */
            ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013640:	4618      	mov	r0, r3
 8013642:	f7fd fa9f 	bl	8010b84 <uxStreamBufferFrontSpace>
 8013646:	6278      	str	r0, [r7, #36]	@ 0x24
 8013648:	e003      	b.n	8013652 <prvTCPReturn_CheckTCPWindow+0x42>
        }
        else
        {
            /* No RX stream has been created, the full stream size is
             * available. */
            ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013650:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Take the minimum of the RX buffer space and the RX window size. */
        ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 8013652:	69bb      	ldr	r3, [r7, #24]
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013658:	4618      	mov	r0, r3
 801365a:	f7f7 fa0b 	bl	800aa74 <FreeRTOS_min_uint32>
 801365e:	6238      	str	r0, [r7, #32]

        if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013666:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801366a:	b2db      	uxtb	r3, r3
 801366c:	2b00      	cmp	r3, #0
 801366e:	d107      	bne.n	8013680 <prvTCPReturn_CheckTCPWindow+0x70>
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8013676:	f003 0304 	and.w	r3, r3, #4
 801367a:	b2db      	uxtb	r3, r3
 801367c:	2b00      	cmp	r3, #0
 801367e:	d001      	beq.n	8013684 <prvTCPReturn_CheckTCPWindow+0x74>
        {
            /* The low-water mark was reached, meaning there was little
             * space left.  The socket will wait until the application has read
             * or flushed the incoming data, and 'zero-window' will be
             * advertised. */
            ulSpace = 0U;
 8013680:	2300      	movs	r3, #0
 8013682:	623b      	str	r3, [r7, #32]
        }

        /* If possible, advertise an RX window size of at least 1 MSS, otherwise
         * the peer might start 'zero window probing', i.e. sending small packets
         * (1, 2, 4, 8... bytes). */
        if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801368a:	461a      	mov	r2, r3
 801368c:	6a3b      	ldr	r3, [r7, #32]
 801368e:	4293      	cmp	r3, r2
 8013690:	d20a      	bcs.n	80136a8 <prvTCPReturn_CheckTCPWindow+0x98>
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013698:	461a      	mov	r2, r3
 801369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801369c:	4293      	cmp	r3, r2
 801369e:	d303      	bcc.n	80136a8 <prvTCPReturn_CheckTCPWindow+0x98>
        {
            ulSpace = pxSocket->u.xTCP.usMSS;
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80136a6:	623b      	str	r3, [r7, #32]
        }

        /* Avoid overflow of the 16-bit win field. */
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80136ae:	461a      	mov	r2, r3
 80136b0:	6a3b      	ldr	r3, [r7, #32]
 80136b2:	40d3      	lsrs	r3, r2
 80136b4:	61fb      	str	r3, [r7, #28]
        {
            ulWinSize = ulSpace;
        }
        #endif

        if( ulWinSize > 0xfffcU )
 80136b6:	69fb      	ldr	r3, [r7, #28]
 80136b8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80136bc:	4293      	cmp	r3, r2
 80136be:	d902      	bls.n	80136c6 <prvTCPReturn_CheckTCPWindow+0xb6>
        {
            ulWinSize = 0xfffcU;
 80136c0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80136c4:	61fb      	str	r3, [r7, #28]
        }

        pxProtocolHeaders->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 80136c6:	69fb      	ldr	r3, [r7, #28]
 80136c8:	b29b      	uxth	r3, r3
 80136ca:	021b      	lsls	r3, r3, #8
 80136cc:	b21a      	sxth	r2, r3
 80136ce:	69fb      	ldr	r3, [r7, #28]
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	0a1b      	lsrs	r3, r3, #8
 80136d4:	b29b      	uxth	r3, r3
 80136d6:	b21b      	sxth	r3, r3
 80136d8:	4313      	orrs	r3, r2
 80136da:	b21b      	sxth	r3, r3
 80136dc:	b29a      	uxth	r2, r3
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	81da      	strh	r2, [r3, #14]

        /* The new window size has been advertised, switch off the flag. */
        pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 80136e2:	68fa      	ldr	r2, [r7, #12]
 80136e4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80136e8:	f36f 0300 	bfc	r3, #0, #1
 80136ec:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Later on, when deciding to delay an ACK, a precise estimate is needed
         * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
         * highest sequence number minus 1 that the socket will accept. */
        pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 80136f0:	69bb      	ldr	r3, [r7, #24]
 80136f2:	691a      	ldr	r2, [r3, #16]
 80136f4:	6a3b      	ldr	r3, [r7, #32]
 80136f6:	441a      	add	r2, r3
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
 80136fc:	bf00      	nop
 80136fe:	3728      	adds	r7, #40	@ 0x28
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}

08013704 <prvTCPReturn_SetSequenceNumber>:
 */
    void prvTCPReturn_SetSequenceNumber( FreeRTOS_Socket_t * pxSocket,
                                         const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                         size_t uxIPHeaderSize,
                                         uint32_t ulLen )
    {
 8013704:	b580      	push	{r7, lr}
 8013706:	b088      	sub	sp, #32
 8013708:	af00      	add	r7, sp, #0
 801370a:	60f8      	str	r0, [r7, #12]
 801370c:	60b9      	str	r1, [r7, #8]
 801370e:	607a      	str	r2, [r7, #4]
 8013710:	603b      	str	r3, [r7, #0]
        ProtocolHeaders_t * pxProtocolHeaders;
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013718:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013722:	4413      	add	r3, r2
 8013724:	61bb      	str	r3, [r7, #24]
        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801372c:	f003 0302 	and.w	r3, r3, #2
 8013730:	b2db      	uxtb	r3, r3
 8013732:	2b00      	cmp	r3, #0
 8013734:	d029      	beq.n	801378a <prvTCPReturn_SetSequenceNumber+0x86>
            {
                /* Sending a keep-alive packet, send the current sequence number
                 * minus 1, which will be recognised as a keep-alive packet and
                 * responded to by acknowledging the last byte. */
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8013736:	68fa      	ldr	r2, [r7, #12]
 8013738:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801373c:	f36f 0341 	bfc	r3, #1, #1
 8013740:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 8013744:	68fa      	ldr	r2, [r7, #12]
 8013746:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801374a:	f043 0304 	orr.w	r3, r3, #4
 801374e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1U;
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013758:	1e5a      	subs	r2, r3, #1
 801375a:	69bb      	ldr	r3, [r7, #24]
 801375c:	605a      	str	r2, [r3, #4]
                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 801375e:	69bb      	ldr	r3, [r7, #24]
 8013760:	685b      	ldr	r3, [r3, #4]
 8013762:	061a      	lsls	r2, r3, #24
 8013764:	69bb      	ldr	r3, [r7, #24]
 8013766:	685b      	ldr	r3, [r3, #4]
 8013768:	021b      	lsls	r3, r3, #8
 801376a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801376e:	431a      	orrs	r2, r3
 8013770:	69bb      	ldr	r3, [r7, #24]
 8013772:	685b      	ldr	r3, [r3, #4]
 8013774:	0a1b      	lsrs	r3, r3, #8
 8013776:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801377a:	431a      	orrs	r2, r3
 801377c:	69bb      	ldr	r3, [r7, #24]
 801377e:	685b      	ldr	r3, [r3, #4]
 8013780:	0e1b      	lsrs	r3, r3, #24
 8013782:	431a      	orrs	r2, r3
 8013784:	69bb      	ldr	r3, [r7, #24]
 8013786:	605a      	str	r2, [r3, #4]
 8013788:	e043      	b.n	8013812 <prvTCPReturn_SetSequenceNumber+0x10e>
            }
            else
        #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
        {
            pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013790:	061a      	lsls	r2, r3, #24
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013798:	021b      	lsls	r3, r3, #8
 801379a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801379e:	431a      	orrs	r2, r3
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80137a6:	0a1b      	lsrs	r3, r3, #8
 80137a8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80137ac:	431a      	orrs	r2, r3
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80137b4:	0e1b      	lsrs	r3, r3, #24
 80137b6:	431a      	orrs	r2, r3
 80137b8:	69bb      	ldr	r3, [r7, #24]
 80137ba:	605a      	str	r2, [r3, #4]

            if( ( pxProtocolHeaders->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 80137bc:	69bb      	ldr	r3, [r7, #24]
 80137be:	7b5b      	ldrb	r3, [r3, #13]
 80137c0:	f003 0301 	and.w	r3, r3, #1
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d024      	beq.n	8013812 <prvTCPReturn_SetSequenceNumber+0x10e>
            {
                /* Suppress FIN in case this packet carries earlier data to be
                 * retransmitted. */
                uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + uxIPHeaderSizeSocket( pxSocket ) ) );
 80137c8:	68f8      	ldr	r0, [r7, #12]
 80137ca:	f7f6 fc1f 	bl	800a00c <uxIPHeaderSizeSocket>
 80137ce:	4602      	mov	r2, r0
 80137d0:	683b      	ldr	r3, [r7, #0]
 80137d2:	1a9b      	subs	r3, r3, r2
 80137d4:	3b14      	subs	r3, #20
 80137d6:	617b      	str	r3, [r7, #20]

                if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 80137d8:	69fb      	ldr	r3, [r7, #28]
 80137da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	441a      	add	r2, r3
 80137e0:	69fb      	ldr	r3, [r7, #28]
 80137e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137e4:	429a      	cmp	r2, r3
 80137e6:	d014      	beq.n	8013812 <prvTCPReturn_SetSequenceNumber+0x10e>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 80137e8:	69bb      	ldr	r3, [r7, #24]
 80137ea:	7b5b      	ldrb	r3, [r3, #13]
 80137ec:	f023 0301 	bic.w	r3, r3, #1
 80137f0:	b2da      	uxtb	r2, r3
 80137f2:	69bb      	ldr	r3, [r7, #24]
 80137f4:	735a      	strb	r2, [r3, #13]
                    FreeRTOS_debug_printf( ( "Suppress FIN for %u + %u < %u\n",
 80137f6:	69fb      	ldr	r3, [r7, #28]
 80137f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137fa:	69fb      	ldr	r3, [r7, #28]
 80137fc:	69db      	ldr	r3, [r3, #28]
 80137fe:	1ad1      	subs	r1, r2, r3
 8013800:	69fb      	ldr	r3, [r7, #28]
 8013802:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013804:	69fb      	ldr	r3, [r7, #28]
 8013806:	69db      	ldr	r3, [r3, #28]
 8013808:	1ad3      	subs	r3, r2, r3
 801380a:	697a      	ldr	r2, [r7, #20]
 801380c:	480d      	ldr	r0, [pc, #52]	@ (8013844 <prvTCPReturn_SetSequenceNumber+0x140>)
 801380e:	f00e fc9b 	bl	8022148 <lUDPLoggingPrintf>
                }
            }
        }

        /* Tell which sequence number is expected next time */
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 8013812:	69fb      	ldr	r3, [r7, #28]
 8013814:	691b      	ldr	r3, [r3, #16]
 8013816:	061a      	lsls	r2, r3, #24
 8013818:	69fb      	ldr	r3, [r7, #28]
 801381a:	691b      	ldr	r3, [r3, #16]
 801381c:	021b      	lsls	r3, r3, #8
 801381e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013822:	431a      	orrs	r2, r3
 8013824:	69fb      	ldr	r3, [r7, #28]
 8013826:	691b      	ldr	r3, [r3, #16]
 8013828:	0a1b      	lsrs	r3, r3, #8
 801382a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801382e:	431a      	orrs	r2, r3
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	691b      	ldr	r3, [r3, #16]
 8013834:	0e1b      	lsrs	r3, r3, #24
 8013836:	431a      	orrs	r2, r3
 8013838:	69bb      	ldr	r3, [r7, #24]
 801383a:	609a      	str	r2, [r3, #8]
    }
 801383c:	bf00      	nop
 801383e:	3720      	adds	r7, #32
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}
 8013844:	080267c8 	.word	0x080267c8

08013848 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    BaseType_t prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 8013848:	b5b0      	push	{r4, r5, r7, lr}
 801384a:	b088      	sub	sp, #32
 801384c:	af02      	add	r7, sp, #8
 801384e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        uint32_t ulRxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxRxWinSize;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8013856:	617b      	str	r3, [r7, #20]
        uint32_t ulTxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxTxWinSize;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801385e:	613b      	str	r3, [r7, #16]

        if( xTCPWindowLoggingLevel != 0 )
 8013860:	4b1d      	ldr	r3, [pc, #116]	@ (80138d8 <prvTCPCreateWindow+0x90>)
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d014      	beq.n	8013892 <prvTCPCreateWindow+0x4a>
        {
            FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801386e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013872:	fb02 f103 	mul.w	r1, r2, r3
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013888:	9300      	str	r3, [sp, #0]
 801388a:	4603      	mov	r3, r0
 801388c:	4813      	ldr	r0, [pc, #76]	@ (80138dc <prvTCPCreateWindow+0x94>)
 801388e:	f00e fc5b 	bl	8022148 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        xReturn = xTCPWindowCreate(
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8013898:	697b      	ldr	r3, [r7, #20]
 801389a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801389e:	fb02 f103 	mul.w	r1, r2, r3
 80138a2:	693b      	ldr	r3, [r7, #16]
 80138a4:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80138a8:	fb02 f403 	mul.w	r4, r2, r3
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	f8d3 5130 	ldr.w	r5, [r3, #304]	@ 0x130
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
            &pxSocket->u.xTCP.xTCPWindow,
            ulRxWindowSize * ipconfigTCP_MSS,
            ulTxWindowSize * ipconfigTCP_MSS,
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 80138b8:	687a      	ldr	r2, [r7, #4]
 80138ba:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
        xReturn = xTCPWindowCreate(
 80138be:	9201      	str	r2, [sp, #4]
 80138c0:	9300      	str	r3, [sp, #0]
 80138c2:	462b      	mov	r3, r5
 80138c4:	4622      	mov	r2, r4
 80138c6:	f001 ffd7 	bl	8015878 <xTCPWindowCreate>
 80138ca:	60f8      	str	r0, [r7, #12]

        return xReturn;
 80138cc:	68fb      	ldr	r3, [r7, #12]
    }
 80138ce:	4618      	mov	r0, r3
 80138d0:	3718      	adds	r7, #24
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bdb0      	pop	{r4, r5, r7, pc}
 80138d6:	bf00      	nop
 80138d8:	200015c8 	.word	0x200015c8
 80138dc:	080267e8 	.word	0x080267e8

080138e0 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b084      	sub	sp, #16
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 80138e8:	2301      	movs	r3, #1
 80138ea:	60fb      	str	r3, [r7, #12]

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	7a1b      	ldrb	r3, [r3, #8]
 80138f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80138f4:	b2db      	uxtb	r3, r3
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d002      	beq.n	8013900 <prvTCPPrepareConnect+0x20>
 80138fa:	2b01      	cmp	r3, #1
 80138fc:	d005      	beq.n	801390a <prvTCPPrepareConnect+0x2a>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 80138fe:	e009      	b.n	8013914 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV4( pxSocket );
 8013900:	6878      	ldr	r0, [r7, #4]
 8013902:	f000 ff69 	bl	80147d8 <prvTCPPrepareConnect_IPV4>
 8013906:	60f8      	str	r0, [r7, #12]
                    break;
 8013908:	e004      	b.n	8013914 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV6( pxSocket );
 801390a:	6878      	ldr	r0, [r7, #4]
 801390c:	f001 fab4 	bl	8014e78 <prvTCPPrepareConnect_IPV6>
 8013910:	60f8      	str	r0, [r7, #12]
                    break;
 8013912:	bf00      	nop
        }

        return xReturn;
 8013914:	68fb      	ldr	r3, [r7, #12]
    }
 8013916:	4618      	mov	r0, r3
 8013918:	3710      	adds	r7, #16
 801391a:	46bd      	mov	sp, r7
 801391c:	bd80      	pop	{r7, pc}
	...

08013920 <prvWinScaleFactor>:
 * @param[in] pxSocket The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 8013920:	b580      	push	{r7, lr}
 8013922:	b084      	sub	sp, #16
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801392e:	687a      	ldr	r2, [r7, #4]
 8013930:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 8013934:	fb02 f303 	mul.w	r3, r2, r3
 8013938:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 801393a:	2300      	movs	r3, #0
 801393c:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffU )
 801393e:	e005      	b.n	801394c <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	085b      	lsrs	r3, r3, #1
 8013944:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 8013946:	7afb      	ldrb	r3, [r7, #11]
 8013948:	3301      	adds	r3, #1
 801394a:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffU )
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013952:	d2f5      	bcs.n	8013940 <prvWinScaleFactor+0x20>
            }

            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013960:	461a      	mov	r2, r3
 8013962:	7afb      	ldrb	r3, [r7, #11]
 8013964:	4803      	ldr	r0, [pc, #12]	@ (8013974 <prvWinScaleFactor+0x54>)
 8013966:	f00e fbef 	bl	8022148 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 801396a:	7afb      	ldrb	r3, [r7, #11]
        }
 801396c:	4618      	mov	r0, r3
 801396e:	3710      	adds	r7, #16
 8013970:	46bd      	mov	sp, r7
 8013972:	bd80      	pop	{r7, pc}
 8013974:	08026820 	.word	0x08026820

08013978 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                     TCPHeader_t * pxTCPHeader )
    {
 8013978:	b580      	push	{r7, lr}
 801397a:	b084      	sub	sp, #16
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
 8013980:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013988:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 801398a:	683b      	ldr	r3, [r7, #0]
 801398c:	2202      	movs	r2, #2
 801398e:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 8013990:	683b      	ldr	r3, [r7, #0]
 8013992:	2204      	movs	r2, #4
 8013994:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 8013996:	89fb      	ldrh	r3, [r7, #14]
 8013998:	0a1b      	lsrs	r3, r3, #8
 801399a:	b29b      	uxth	r3, r3
 801399c:	b2da      	uxtb	r2, r3
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 80139a2:	89fb      	ldrh	r3, [r7, #14]
 80139a4:	b2da      	uxtb	r2, r3
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	f7ff ffb8 	bl	8013920 <prvWinScaleFactor>
 80139b0:	4603      	mov	r3, r0
 80139b2:	461a      	mov	r2, r3
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

            pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 80139ba:	683b      	ldr	r3, [r7, #0]
 80139bc:	2201      	movs	r2, #1
 80139be:	761a      	strb	r2, [r3, #24]
            pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 80139c0:	683b      	ldr	r3, [r7, #0]
 80139c2:	2203      	movs	r2, #3
 80139c4:	765a      	strb	r2, [r3, #25]
            pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	2203      	movs	r2, #3
 80139ca:	769a      	strb	r2, [r3, #26]
            pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 80139d2:	683b      	ldr	r3, [r7, #0]
 80139d4:	76da      	strb	r2, [r3, #27]
            uxOptionsLength = 8U;
 80139d6:	2308      	movs	r3, #8
 80139d8:	60bb      	str	r3, [r7, #8]
        }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 80139da:	683a      	ldr	r2, [r7, #0]
 80139dc:	68bb      	ldr	r3, [r7, #8]
 80139de:	4413      	add	r3, r2
 80139e0:	3314      	adds	r3, #20
 80139e2:	2201      	movs	r2, #1
 80139e4:	701a      	strb	r2, [r3, #0]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 80139e6:	68bb      	ldr	r3, [r7, #8]
 80139e8:	3301      	adds	r3, #1
 80139ea:	683a      	ldr	r2, [r7, #0]
 80139ec:	4413      	add	r3, r2
 80139ee:	2201      	movs	r2, #1
 80139f0:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	3302      	adds	r3, #2
 80139f6:	683a      	ldr	r2, [r7, #0]
 80139f8:	4413      	add	r3, r2
 80139fa:	2204      	movs	r2, #4
 80139fc:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 80139fe:	68bb      	ldr	r3, [r7, #8]
 8013a00:	3303      	adds	r3, #3
 8013a02:	683a      	ldr	r2, [r7, #0]
 8013a04:	4413      	add	r3, r2
 8013a06:	2202      	movs	r2, #2
 8013a08:	751a      	strb	r2, [r3, #20]
            uxOptionsLength += 4U;
 8013a0a:	68bb      	ldr	r3, [r7, #8]
 8013a0c:	3304      	adds	r3, #4
 8013a0e:	60bb      	str	r3, [r7, #8]
        }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 8013a10:	68bb      	ldr	r3, [r7, #8]
    }
 8013a12:	4618      	mov	r0, r3
 8013a14:	3710      	adds	r7, #16
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}
	...

08013a1c <prvTCPBufferResize>:
 */
    NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                    NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                    int32_t lDataLen,
                                                    UBaseType_t uxOptionsLength )
    {
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b088      	sub	sp, #32
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	60f8      	str	r0, [r7, #12]
 8013a24:	60b9      	str	r1, [r7, #8]
 8013a26:	607a      	str	r2, [r7, #4]
 8013a28:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 8013a2a:	4b38      	ldr	r3, [pc, #224]	@ (8013b0c <prvTCPBufferResize+0xf0>)
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d00b      	beq.n	8013a4a <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 8013a32:	f240 53f2 	movw	r3, #1522	@ 0x5f2
 8013a36:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 8013a38:	68bb      	ldr	r3, [r7, #8]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d102      	bne.n	8013a44 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 8013a3e:	2301      	movs	r3, #1
 8013a40:	617b      	str	r3, [r7, #20]
 8013a42:	e020      	b.n	8013a86 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 8013a44:	2300      	movs	r3, #0
 8013a46:	617b      	str	r3, [r7, #20]
 8013a48:	e01d      	b.n	8013a86 <prvTCPBufferResize+0x6a>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8013a4a:	68f8      	ldr	r0, [r7, #12]
 8013a4c:	f7f6 fade 	bl	800a00c <uxIPHeaderSizeSocket>
 8013a50:	4602      	mov	r2, r0
 8013a52:	683b      	ldr	r3, [r7, #0]
 8013a54:	4413      	add	r3, r2
 8013a56:	3322      	adds	r3, #34	@ 0x22
 8013a58:	61bb      	str	r3, [r7, #24]
            uxNeeded += ( size_t ) lDataLen;
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	69ba      	ldr	r2, [r7, #24]
 8013a5e:	4413      	add	r3, r2
 8013a60:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 8013a62:	69bb      	ldr	r3, [r7, #24]
 8013a64:	2b59      	cmp	r3, #89	@ 0x59
 8013a66:	d801      	bhi.n	8013a6c <prvTCPBufferResize+0x50>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8013a68:	235a      	movs	r3, #90	@ 0x5a
 8013a6a:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d004      	beq.n	8013a7c <prvTCPBufferResize+0x60>
 8013a72:	68bb      	ldr	r3, [r7, #8]
 8013a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a76:	69ba      	ldr	r2, [r7, #24]
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	d902      	bls.n	8013a82 <prvTCPBufferResize+0x66>
            {
                xResize = pdTRUE;
 8013a7c:	2301      	movs	r3, #1
 8013a7e:	617b      	str	r3, [r7, #20]
 8013a80:	e001      	b.n	8013a86 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 8013a82:	2300      	movs	r3, #0
 8013a84:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 8013a86:	697b      	ldr	r3, [r7, #20]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d023      	beq.n	8013ad4 <prvTCPBufferResize+0xb8>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 8013a8c:	2100      	movs	r1, #0
 8013a8e:	69b8      	ldr	r0, [r7, #24]
 8013a90:	f003 fc4a 	bl	8017328 <pxGetNetworkBufferWithDescriptor>
 8013a94:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 8013a96:	69fb      	ldr	r3, [r7, #28]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d031      	beq.n	8013b00 <prvTCPBufferResize+0xe4>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 8013a9c:	69fb      	ldr	r3, [r7, #28]
 8013a9e:	69ba      	ldr	r2, [r7, #24]
 8013aa0:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d00c      	beq.n	8013ac2 <prvTCPBufferResize+0xa6>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8013aa8:	69fb      	ldr	r3, [r7, #28]
 8013aaa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ab4:	461a      	mov	r2, r3
 8013ab6:	f00e fd63 	bl	8022580 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8013aba:	68b8      	ldr	r0, [r7, #8]
 8013abc:	f003 fc9c 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
 8013ac0:	e01e      	b.n	8013b00 <prvTCPBufferResize+0xe4>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8013ac2:	69fb      	ldr	r3, [r7, #28]
 8013ac4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	33aa      	adds	r3, #170	@ 0xaa
 8013aca:	225a      	movs	r2, #90	@ 0x5a
 8013acc:	4619      	mov	r1, r3
 8013ace:	f00e fd57 	bl	8022580 <memcpy>
 8013ad2:	e015      	b.n	8013b00 <prvTCPBufferResize+0xe4>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* LCOV_EXCL_BR_LINE this branch will not be covered, since it would never be NULL. to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 8013ad4:	68bb      	ldr	r3, [r7, #8]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d104      	bne.n	8013ae4 <prvTCPBufferResize+0xc8>
 8013ada:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8013ade:	480c      	ldr	r0, [pc, #48]	@ (8013b10 <prvTCPBufferResize+0xf4>)
 8013ae0:	f7ed ff3a 	bl	8001958 <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 8013ae8:	68f8      	ldr	r0, [r7, #12]
 8013aea:	f7f6 fa8f 	bl	800a00c <uxIPHeaderSizeSocket>
 8013aee:	4602      	mov	r2, r0
 8013af0:	683b      	ldr	r3, [r7, #0]
 8013af2:	441a      	add	r2, r3
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	4413      	add	r3, r2
 8013af8:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        return pxReturn;
 8013b00:	69fb      	ldr	r3, [r7, #28]
    }
 8013b02:	4618      	mov	r0, r3
 8013b04:	3720      	adds	r7, #32
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}
 8013b0a:	bf00      	nop
 8013b0c:	080278f4 	.word	0x080278f4
 8013b10:	0802678c 	.word	0x0802678c

08013b14 <prvTCPReturn_SetEndPoint>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_SetEndPoint( const FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t * pxNetworkBuffer,
                                   size_t uxIPHeaderSize )
    {
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b086      	sub	sp, #24
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	60f8      	str	r0, [r7, #12]
 8013b1c:	60b9      	str	r1, [r7, #8]
 8013b1e:	607a      	str	r2, [r7, #4]
        #if ( ipconfigUSE_IPv4 != 0 )
            const IPHeader_t * pxIPHeader = NULL;
 8013b20:	2300      	movs	r3, #0
 8013b22:	617b      	str	r3, [r7, #20]
        #endif
        #if ( ipconfigUSE_IPv6 != 0 )
            const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 8013b24:	2300      	movs	r3, #0
 8013b26:	613b      	str	r3, [r7, #16]
        #endif

        if( ( pxSocket != NULL ) && ( pxSocket->pxEndPoint != NULL ) )
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d008      	beq.n	8013b40 <prvTCPReturn_SetEndPoint+0x2c>
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d004      	beq.n	8013b40 <prvTCPReturn_SetEndPoint+0x2c>
        {
            pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	631a      	str	r2, [r3, #48]	@ 0x30
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
            }
        }
    }
 8013b3e:	e078      	b.n	8013c32 <prvTCPReturn_SetEndPoint+0x11e>
            FreeRTOS_printf( ( "prvTCPReturnPacket: No pxEndPoint yet?\n" ) );
 8013b40:	483e      	ldr	r0, [pc, #248]	@ (8013c3c <prvTCPReturn_SetEndPoint+0x128>)
 8013b42:	f00e fb01 	bl	8022148 <lUDPLoggingPrintf>
            switch( uxIPHeaderSize )
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	2b14      	cmp	r3, #20
 8013b4a:	d003      	beq.n	8013b54 <prvTCPReturn_SetEndPoint+0x40>
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	2b28      	cmp	r3, #40	@ 0x28
 8013b50:	d03d      	beq.n	8013bce <prvTCPReturn_SetEndPoint+0xba>
 8013b52:	e056      	b.n	8013c02 <prvTCPReturn_SetEndPoint+0xee>
                        pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b58:	330e      	adds	r3, #14
 8013b5a:	617b      	str	r3, [r7, #20]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPHeader->ulDestinationIPAddress, 8 );
 8013b5c:	697b      	ldr	r3, [r7, #20]
 8013b5e:	691b      	ldr	r3, [r3, #16]
 8013b60:	2108      	movs	r1, #8
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7f9 fea8 	bl	800d8b8 <FreeRTOS_FindEndPointOnNetMask>
 8013b68:	4602      	mov	r2, r0
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8013b6e:	68bb      	ldr	r3, [r7, #8]
 8013b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d149      	bne.n	8013c0a <prvTCPReturn_SetEndPoint+0xf6>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %xip => %xip\n",
 8013b76:	697b      	ldr	r3, [r7, #20]
 8013b78:	68db      	ldr	r3, [r3, #12]
 8013b7a:	061a      	lsls	r2, r3, #24
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	68db      	ldr	r3, [r3, #12]
 8013b80:	021b      	lsls	r3, r3, #8
 8013b82:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013b86:	431a      	orrs	r2, r3
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	68db      	ldr	r3, [r3, #12]
 8013b8c:	0a1b      	lsrs	r3, r3, #8
 8013b8e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013b92:	431a      	orrs	r2, r3
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	68db      	ldr	r3, [r3, #12]
 8013b98:	0e1b      	lsrs	r3, r3, #24
 8013b9a:	ea42 0103 	orr.w	r1, r2, r3
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	691b      	ldr	r3, [r3, #16]
 8013ba2:	061a      	lsls	r2, r3, #24
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	691b      	ldr	r3, [r3, #16]
 8013ba8:	021b      	lsls	r3, r3, #8
 8013baa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013bae:	431a      	orrs	r2, r3
 8013bb0:	697b      	ldr	r3, [r7, #20]
 8013bb2:	691b      	ldr	r3, [r3, #16]
 8013bb4:	0a1b      	lsrs	r3, r3, #8
 8013bb6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013bba:	431a      	orrs	r2, r3
 8013bbc:	697b      	ldr	r3, [r7, #20]
 8013bbe:	691b      	ldr	r3, [r3, #16]
 8013bc0:	0e1b      	lsrs	r3, r3, #24
 8013bc2:	4313      	orrs	r3, r2
 8013bc4:	461a      	mov	r2, r3
 8013bc6:	481e      	ldr	r0, [pc, #120]	@ (8013c40 <prvTCPReturn_SetEndPoint+0x12c>)
 8013bc8:	f00e fabe 	bl	8022148 <lUDPLoggingPrintf>
                        break;
 8013bcc:	e01d      	b.n	8013c0a <prvTCPReturn_SetEndPoint+0xf6>
                        pxIPHeader_IPv6 = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8013bce:	68bb      	ldr	r3, [r7, #8]
 8013bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bd2:	330e      	adds	r3, #14
 8013bd4:	613b      	str	r3, [r7, #16]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( &( pxIPHeader_IPv6->xDestinationAddress ) );
 8013bd6:	693b      	ldr	r3, [r7, #16]
 8013bd8:	3318      	adds	r3, #24
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f7f9 fe26 	bl	800d82c <FreeRTOS_FindEndPointOnIP_IPv6>
 8013be0:	4602      	mov	r2, r0
 8013be2:	68bb      	ldr	r3, [r7, #8]
 8013be4:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d10f      	bne.n	8013c0e <prvTCPReturn_SetEndPoint+0xfa>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %pip => %pip\n",
 8013bee:	693b      	ldr	r3, [r7, #16]
 8013bf0:	f103 0108 	add.w	r1, r3, #8
 8013bf4:	693b      	ldr	r3, [r7, #16]
 8013bf6:	3318      	adds	r3, #24
 8013bf8:	461a      	mov	r2, r3
 8013bfa:	4812      	ldr	r0, [pc, #72]	@ (8013c44 <prvTCPReturn_SetEndPoint+0x130>)
 8013bfc:	f00e faa4 	bl	8022148 <lUDPLoggingPrintf>
                        break;
 8013c00:	e005      	b.n	8013c0e <prvTCPReturn_SetEndPoint+0xfa>
                    pxNetworkBuffer->pxEndPoint = NULL;
 8013c02:	68bb      	ldr	r3, [r7, #8]
 8013c04:	2200      	movs	r2, #0
 8013c06:	631a      	str	r2, [r3, #48]	@ 0x30
                    break;
 8013c08:	e002      	b.n	8013c10 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 8013c0a:	bf00      	nop
 8013c0c:	e000      	b.n	8013c10 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 8013c0e:	bf00      	nop
            if( pxNetworkBuffer->pxEndPoint != NULL )
 8013c10:	68bb      	ldr	r3, [r7, #8]
 8013c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d00c      	beq.n	8013c32 <prvTCPReturn_SetEndPoint+0x11e>
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c1c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8013c20:	4619      	mov	r1, r3
 8013c22:	68bb      	ldr	r3, [r7, #8]
 8013c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c26:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 8013c2a:	461a      	mov	r2, r3
 8013c2c:	4806      	ldr	r0, [pc, #24]	@ (8013c48 <prvTCPReturn_SetEndPoint+0x134>)
 8013c2e:	f00e fa8b 	bl	8022148 <lUDPLoggingPrintf>
    }
 8013c32:	bf00      	nop
 8013c34:	3718      	adds	r7, #24
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}
 8013c3a:	bf00      	nop
 8013c3c:	08026854 	.word	0x08026854
 8013c40:	0802687c 	.word	0x0802687c
 8013c44:	080268b0 	.word	0x080268b0
 8013c48:	080268e4 	.word	0x080268e4

08013c4c <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                               NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                               UBaseType_t uxOptionsLength )
    {
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b096      	sub	sp, #88	@ 0x58
 8013c50:	af02      	add	r7, sp, #8
 8013c52:	60f8      	str	r0, [r7, #12]
 8013c54:	60b9      	str	r1, [r7, #8]
 8013c56:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 8013c58:	2300      	movs	r3, #0
 8013c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d004      	beq.n	8013c6e <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013c6c:	e002      	b.n	8013c74 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	33aa      	adds	r3, #170	@ 0xaa
 8013c72:	64bb      	str	r3, [r7, #72]	@ 0x48
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8013c74:	68f8      	ldr	r0, [r7, #12]
 8013c76:	f7f6 f9c9 	bl	800a00c <uxIPHeaderSizeSocket>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	330e      	adds	r3, #14
 8013c7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013c80:	4413      	add	r3, r2
 8013c82:	647b      	str	r3, [r7, #68]	@ 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
        lDataLen = 0;
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        lStreamPos = 0;
 8013c90:	2300      	movs	r3, #0
 8013c92:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 8013c94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c96:	7b5b      	ldrb	r3, [r3, #13]
 8013c98:	f043 0310 	orr.w	r3, r3, #16
 8013c9c:	b2da      	uxtb	r2, r3
 8013c9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ca0:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	f000 80a5 	beq.w	8013df8 <prvTCPPrepareSend+0x1ac>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013cb4:	2b01      	cmp	r3, #1
 8013cb6:	d90a      	bls.n	8013cce <prvTCPPrepareSend+0x82>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8013cbe:	f107 0210 	add.w	r2, r7, #16
 8013cc2:	4619      	mov	r1, r3
 8013cc4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013cc6:	f002 fb13 	bl	80162f0 <ulTCPWindowTxGet>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( lDataLen > 0 )
 8013cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	f340 8091 	ble.w	8013df8 <prvTCPPrepareSend+0x1ac>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	6819      	ldr	r1, [r3, #0]
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013cde:	68f8      	ldr	r0, [r7, #12]
 8013ce0:	f7ff fe9c 	bl	8013a1c <prvTCPBufferResize>
 8013ce4:	6378      	str	r0, [r7, #52]	@ 0x34

                if( pxNewBuffer != NULL )
 8013ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	f000 8082 	beq.w	8013df2 <prvTCPPrepareSend+0x1a6>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 8013cee:	68bb      	ldr	r3, [r7, #8]
 8013cf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013cf2:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 8013cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
                     * access to the fields. */

                    /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8013cfa:	68f8      	ldr	r0, [r7, #12]
 8013cfc:	f7f6 f986 	bl	800a00c <uxIPHeaderSizeSocket>
 8013d00:	4603      	mov	r3, r0
 8013d02:	330e      	adds	r3, #14
 8013d04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013d06:	4413      	add	r3, r2
 8013d08:	647b      	str	r3, [r7, #68]	@ 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 8013d0a:	68f8      	ldr	r0, [r7, #12]
 8013d0c:	f7f6 f97e 	bl	800a00c <uxIPHeaderSizeSocket>
 8013d10:	4602      	mov	r2, r0
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	4413      	add	r3, r2
 8013d16:	3322      	adds	r3, #34	@ 0x22
 8013d18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013d1a:	4413      	add	r3, r2
 8013d1c:	633b      	str	r3, [r7, #48]	@ 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	693a      	ldr	r2, [r7, #16]
 8013d2e:	4619      	mov	r1, r3
 8013d30:	f7fc fef9 	bl	8010b26 <uxStreamBufferDistance>
 8013d34:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8013d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d3e:	2201      	movs	r2, #1
 8013d40:	9200      	str	r2, [sp, #0]
 8013d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013d44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013d46:	f7fd f84c 	bl	8010de2 <uxStreamBufferGet>
 8013d4a:	62b8      	str	r0, [r7, #40]	@ 0x28

                    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    {
                        if( ulDataGot != ( uint32_t ) lDataLen )
 8013d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d007      	beq.n	8013d64 <prvTCPPrepareSend+0x118>
                        {
                            FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 8013d54:	6939      	ldr	r1, [r7, #16]
 8013d56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d58:	9300      	str	r3, [sp, #0]
 8013d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013d5e:	4898      	ldr	r0, [pc, #608]	@ (8013fc0 <prvTCPPrepareSend+0x374>)
 8013d60:	f00e f9f2 	bl	8022148 <lUDPLoggingPrintf>
                    }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d6e:	b2db      	uxtb	r3, r3
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d041      	beq.n	8013df8 <prvTCPPrepareSend+0x1ac>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8013d7a:	693b      	ldr	r3, [r7, #16]
 8013d7c:	4619      	mov	r1, r3
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013d84:	689b      	ldr	r3, [r3, #8]
 8013d86:	461a      	mov	r2, r3
 8013d88:	f7fc fecd 	bl	8010b26 <uxStreamBufferDistance>
 8013d8c:	6278      	str	r0, [r7, #36]	@ 0x24

                        if( ulDistance == ulDataGot )
 8013d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d92:	429a      	cmp	r2, r3
 8013d94:	d130      	bne.n	8013df8 <prvTCPPrepareSend+0x1ac>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                /* the order of volatile accesses is undefined
                                 *  so such workaround */
                                size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013d9c:	689b      	ldr	r3, [r3, #8]
 8013d9e:	623b      	str	r3, [r7, #32]
                                size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013da6:	685b      	ldr	r3, [r3, #4]
 8013da8:	61fb      	str	r3, [r7, #28]
                                size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	61bb      	str	r3, [r7, #24]

                                FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 8013db4:	6a3b      	ldr	r3, [r7, #32]
 8013db6:	9301      	str	r3, [sp, #4]
 8013db8:	69fb      	ldr	r3, [r7, #28]
 8013dba:	9300      	str	r3, [sp, #0]
 8013dbc:	69bb      	ldr	r3, [r7, #24]
 8013dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013dc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013dc2:	4880      	ldr	r0, [pc, #512]	@ (8013fc4 <prvTCPPrepareSend+0x378>)
 8013dc4:	f00e f9c0 	bl	8022148 <lUDPLoggingPrintf>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8013dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013dca:	7b5b      	ldrb	r3, [r3, #13]
 8013dcc:	f043 0301 	orr.w	r3, r3, #1
 8013dd0:	b2da      	uxtb	r2, r3
 8013dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013dd4:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8013dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ddc:	441a      	add	r2, r3
 8013dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013de0:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8013de2:	68fa      	ldr	r2, [r7, #12]
 8013de4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013dec:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8013df0:	e002      	b.n	8013df8 <prvTCPPrepareSend+0x1ac>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 8013df2:	f04f 33ff 	mov.w	r3, #4294967295
 8013df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) )
 8013df8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	f2c0 8099 	blt.w	8013f32 <prvTCPPrepareSend+0x2e6>
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013e06:	2b05      	cmp	r3, #5
 8013e08:	f040 8093 	bne.w	8013f32 <prvTCPPrepareSend+0x2e6>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013e12:	f003 0320 	and.w	r3, r3, #32
 8013e16:	b2db      	uxtb	r3, r3
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d029      	beq.n	8013e70 <prvTCPPrepareSend+0x224>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 8013e1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013e1e:	f002 f8e7 	bl	8015ff0 <xTCPWindowTxDone>
 8013e22:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d023      	beq.n	8013e70 <prvTCPPrepareSend+0x224>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 8013e28:	68fa      	ldr	r2, [r7, #12]
 8013e2a:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8013e2e:	f36f 1345 	bfc	r3, #5, #1
 8013e32:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8013e36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e38:	7b5b      	ldrb	r3, [r3, #13]
 8013e3a:	f043 0301 	orr.w	r3, r3, #1
 8013e3e:	b2da      	uxtb	r2, r3
 8013e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e42:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8013e44:	68fa      	ldr	r2, [r7, #12]
 8013e46:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e4e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8013e52:	68fa      	ldr	r2, [r7, #12]
 8013e54:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013e58:	f043 0301 	orr.w	r3, r3, #1
 8013e5c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8013e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e62:	6a1a      	ldr	r2, [r3, #32]
 8013e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e66:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 8013e68:	2106      	movs	r1, #6
 8013e6a:	68f8      	ldr	r0, [r7, #12]
 8013e6c:	f7fd f960 	bl	8011130 <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
            {
                if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013e76:	2b03      	cmp	r3, #3
 8013e78:	d90f      	bls.n	8013e9a <prvTCPPrepareSend+0x24e>
                {
                    FreeRTOS_debug_printf( ( "keep-alive: giving up %xip:%u\n",
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013e84:	461a      	mov	r2, r3
 8013e86:	4850      	ldr	r0, [pc, #320]	@ (8013fc8 <prvTCPPrepareSend+0x37c>)
 8013e88:	f00e f95e 	bl	8022148 <lUDPLoggingPrintf>
                                             ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                             pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8013e8c:	2108      	movs	r1, #8
 8013e8e:	68f8      	ldr	r0, [r7, #12]
 8013e90:	f7fd f94e 	bl	8011130 <vTCPStateChange>
                    lDataLen = -1;
 8013e94:	f04f 33ff 	mov.w	r3, #4294967295
 8013e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 8013e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d148      	bne.n	8013f32 <prvTCPPrepareSend+0x2e6>
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013ea6:	f003 0301 	and.w	r3, r3, #1
 8013eaa:	b2db      	uxtb	r3, r3
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d140      	bne.n	8013f32 <prvTCPPrepareSend+0x2e6>
                {
                    /* If there is no data to be sent, and no window-update message,
                     * we might want to send a keep-alive message. */
                    TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8013eb0:	f7f0 fcf8 	bl	80048a4 <xTaskGetTickCount>
 8013eb4:	4602      	mov	r2, r0
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013ebc:	1ad3      	subs	r3, r2, r3
 8013ebe:	617b      	str	r3, [r7, #20]
                    TickType_t xMax;
                    xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 8013ec0:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8013ec4:	643b      	str	r3, [r7, #64]	@ 0x40

                    if( pxSocket->u.xTCP.ucKeepRepCount != 0U )
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d002      	beq.n	8013ed6 <prvTCPPrepareSend+0x28a>
                    {
                        xMax = 3U * configTICK_RATE_HZ;
 8013ed0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8013ed4:	643b      	str	r3, [r7, #64]	@ 0x40
                    }

                    if( xAge > xMax )
 8013ed6:	697a      	ldr	r2, [r7, #20]
 8013ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d929      	bls.n	8013f32 <prvTCPPrepareSend+0x2e6>
                    {
                        pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8013ede:	f7f0 fce1 	bl	80048a4 <xTaskGetTickCount>
 8013ee2:	4602      	mov	r2, r0
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        if( xTCPWindowLoggingLevel != 0 )
 8013eea:	4b38      	ldr	r3, [pc, #224]	@ (8013fcc <prvTCPPrepareSend+0x380>)
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d00b      	beq.n	8013f0a <prvTCPPrepareSend+0x2be>
                        {
                            FreeRTOS_debug_printf( ( "keep-alive: %xip:%u count %u\n",
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013efc:	461a      	mov	r2, r3
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013f04:	4832      	ldr	r0, [pc, #200]	@ (8013fd0 <prvTCPPrepareSend+0x384>)
 8013f06:	f00e f91f 	bl	8022148 <lUDPLoggingPrintf>
                                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                     pxSocket->u.xTCP.usRemotePort,
                                                     pxSocket->u.xTCP.ucKeepRepCount ) );
                        }

                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 8013f0a:	68fa      	ldr	r2, [r7, #12]
 8013f0c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013f10:	f043 0302 	orr.w	r3, r3, #2
 8013f14:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8013f1e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                        pxSocket->u.xTCP.ucKeepRepCount++;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013f28:	3301      	adds	r3, #1
 8013f2a:	b2da      	uxtb	r2, r3
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                }
            }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 8013f32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	db3e      	blt.n	8013fb6 <prvTCPPrepareSend+0x36a>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 8013f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	dc0f      	bgt.n	8013f5e <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013f44:	f003 0301 	and.w	r3, r3, #1
 8013f48:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d107      	bne.n	8013f5e <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013f54:	f003 0302 	and.w	r3, r3, #2
 8013f58:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d02b      	beq.n	8013fb6 <prvTCPPrepareSend+0x36a>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 8013f5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f60:	7b5b      	ldrb	r3, [r3, #13]
 8013f62:	f023 0308 	bic.w	r3, r3, #8
 8013f66:	b2da      	uxtb	r2, r3
 8013f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f6a:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	b2db      	uxtb	r3, r3
 8013f70:	3314      	adds	r3, #20
 8013f72:	b2db      	uxtb	r3, r3
 8013f74:	009b      	lsls	r3, r3, #2
 8013f76:	b2da      	uxtb	r2, r3
 8013f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f7a:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 8013f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f7e:	7b5b      	ldrb	r3, [r3, #13]
 8013f80:	f043 0310 	orr.w	r3, r3, #16
 8013f84:	b2da      	uxtb	r2, r3
 8013f86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f88:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 8013f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d006      	beq.n	8013f9e <prvTCPPrepareSend+0x352>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 8013f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f92:	7b5b      	ldrb	r3, [r3, #13]
 8013f94:	f043 0308 	orr.w	r3, r3, #8
 8013f98:	b2da      	uxtb	r2, r3
 8013f9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f9c:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8013f9e:	68f8      	ldr	r0, [r7, #12]
 8013fa0:	f7f6 f834 	bl	800a00c <uxIPHeaderSizeSocket>
 8013fa4:	4602      	mov	r2, r0
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	4413      	add	r3, r2
 8013faa:	3314      	adds	r3, #20
 8013fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
                lDataLen += ( int32_t ) uxIntermediateResult;
 8013fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013fb2:	4413      	add	r3, r2
 8013fb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

        return lDataLen;
 8013fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8013fb8:	4618      	mov	r0, r3
 8013fba:	3750      	adds	r7, #80	@ 0x50
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	bd80      	pop	{r7, pc}
 8013fc0:	08026918 	.word	0x08026918
 8013fc4:	0802694c 	.word	0x0802694c
 8013fc8:	08026974 	.word	0x08026974
 8013fcc:	200015c8 	.word	0x200015c8
 8013fd0:	08026994 	.word	0x08026994

08013fd4 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket The socket owning the connection.
 */
    void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b084      	sub	sp, #16
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f7fc fdf0 	bl	8010bc8 <uxStreamBufferMidSpace>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	dd1a      	ble.n	8014028 <prvTCPAddTxData+0x54>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8013ff8:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014000:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8014002:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801400a:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 801400c:	f001 ff5c 	bl	8015ec8 <lTCPWindowTxAdd>
 8014010:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	2b00      	cmp	r3, #0
 8014016:	dd07      	ble.n	8014028 <prvTCPAddTxData+0x54>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801401e:	68ba      	ldr	r2, [r7, #8]
 8014020:	4611      	mov	r1, r2
 8014022:	4618      	mov	r0, r3
 8014024:	f7fc fdf7 	bl	8010c16 <vStreamBufferMoveMid>
            }
        }
    }
 8014028:	bf00      	nop
 801402a:	3710      	adds	r7, #16
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}

08014030 <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                               const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8014030:	b590      	push	{r4, r7, lr}
 8014032:	b08b      	sub	sp, #44	@ 0x2c
 8014034:	af02      	add	r7, sp, #8
 8014036:	6078      	str	r0, [r7, #4]
 8014038:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801403e:	6838      	ldr	r0, [r7, #0]
 8014040:	f7f5 ffca 	bl	8009fd8 <uxIPHeaderSizePacket>
 8014044:	4603      	mov	r3, r0
 8014046:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8014048:	4423      	add	r3, r4
 801404a:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 801404c:	69bb      	ldr	r3, [r7, #24]
 801404e:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8014056:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 8014058:	693b      	ldr	r3, [r7, #16]
 801405a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801405e:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 8014060:	69fb      	ldr	r3, [r7, #28]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d05c      	beq.n	8014120 <prvSetOptions+0xf0>
            {
                /* TCP options must be sent because a packet which is out-of-order
                 * was received. */
                if( xTCPWindowLoggingLevel >= 0 )
 8014066:	4b4f      	ldr	r3, [pc, #316]	@ (80141a4 <prvSetOptions+0x174>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	2b00      	cmp	r3, #0
 801406c:	db44      	blt.n	80140f8 <prvSetOptions+0xc8>
                {
                    FreeRTOS_debug_printf( ( "SACK[%u,%u]: optlen %u sending %u - %u\n",
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014072:	4618      	mov	r0, r3
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801407a:	461c      	mov	r4, r3
 801407c:	693b      	ldr	r3, [r7, #16]
 801407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014082:	061a      	lsls	r2, r3, #24
 8014084:	693b      	ldr	r3, [r7, #16]
 8014086:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801408a:	021b      	lsls	r3, r3, #8
 801408c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014090:	431a      	orrs	r2, r3
 8014092:	693b      	ldr	r3, [r7, #16]
 8014094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014098:	0a1b      	lsrs	r3, r3, #8
 801409a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801409e:	431a      	orrs	r2, r3
 80140a0:	693b      	ldr	r3, [r7, #16]
 80140a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80140a6:	0e1b      	lsrs	r3, r3, #24
 80140a8:	431a      	orrs	r2, r3
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80140b0:	1ad3      	subs	r3, r2, r3
 80140b2:	693a      	ldr	r2, [r7, #16]
 80140b4:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80140b8:	0611      	lsls	r1, r2, #24
 80140ba:	693a      	ldr	r2, [r7, #16]
 80140bc:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80140c0:	0212      	lsls	r2, r2, #8
 80140c2:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 80140c6:	4311      	orrs	r1, r2
 80140c8:	693a      	ldr	r2, [r7, #16]
 80140ca:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80140ce:	0a12      	lsrs	r2, r2, #8
 80140d0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80140d4:	4311      	orrs	r1, r2
 80140d6:	693a      	ldr	r2, [r7, #16]
 80140d8:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80140dc:	0e12      	lsrs	r2, r2, #24
 80140de:	4311      	orrs	r1, r2
 80140e0:	687a      	ldr	r2, [r7, #4]
 80140e2:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 80140e6:	1a8a      	subs	r2, r1, r2
 80140e8:	9201      	str	r2, [sp, #4]
 80140ea:	9300      	str	r3, [sp, #0]
 80140ec:	69fb      	ldr	r3, [r7, #28]
 80140ee:	4622      	mov	r2, r4
 80140f0:	4601      	mov	r1, r0
 80140f2:	482d      	ldr	r0, [pc, #180]	@ (80141a8 <prvSetOptions+0x178>)
 80140f4:	f00e f828 	bl	8022148 <lUDPLoggingPrintf>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 80140f8:	693b      	ldr	r3, [r7, #16]
 80140fa:	3380      	adds	r3, #128	@ 0x80
 80140fc:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 80140fe:	697b      	ldr	r3, [r7, #20]
 8014100:	3314      	adds	r3, #20
 8014102:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 8014104:	69fa      	ldr	r2, [r7, #28]
 8014106:	68f9      	ldr	r1, [r7, #12]
 8014108:	68b8      	ldr	r0, [r7, #8]
 801410a:	f00e fa39 	bl	8022580 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801410e:	69fb      	ldr	r3, [r7, #28]
 8014110:	b2db      	uxtb	r3, r3
 8014112:	3314      	adds	r3, #20
 8014114:	b2db      	uxtb	r3, r3
 8014116:	009b      	lsls	r3, r3, #2
 8014118:	b2da      	uxtb	r2, r3
 801411a:	697b      	ldr	r3, [r7, #20]
 801411c:	731a      	strb	r2, [r3, #12]
 801411e:	e03c      	b.n	801419a <prvSetOptions+0x16a>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8014126:	2b04      	cmp	r3, #4
 8014128:	d937      	bls.n	801419a <prvSetOptions+0x16a>
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8014130:	f003 0301 	and.w	r3, r3, #1
 8014134:	b2db      	uxtb	r3, r3
 8014136:	2b00      	cmp	r3, #0
 8014138:	d02f      	beq.n	801419a <prvSetOptions+0x16a>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 801413a:	687a      	ldr	r2, [r7, #4]
 801413c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8014140:	f36f 0300 	bfc	r3, #0, #1
 8014144:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            if( xTCPWindowLoggingLevel >= 0 )
 8014148:	4b16      	ldr	r3, [pc, #88]	@ (80141a4 <prvSetOptions+0x174>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	2b00      	cmp	r3, #0
 801414e:	db06      	blt.n	801415e <prvSetOptions+0x12e>
            {
                FreeRTOS_debug_printf( ( "MSS: sending %u\n", pxSocket->u.xTCP.usMSS ) );
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8014156:	4619      	mov	r1, r3
 8014158:	4814      	ldr	r0, [pc, #80]	@ (80141ac <prvSetOptions+0x17c>)
 801415a:	f00d fff5 	bl	8022148 <lUDPLoggingPrintf>
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 801415e:	697b      	ldr	r3, [r7, #20]
 8014160:	2202      	movs	r2, #2
 8014162:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 8014164:	697b      	ldr	r3, [r7, #20]
 8014166:	2204      	movs	r2, #4
 8014168:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8014170:	0a1b      	lsrs	r3, r3, #8
 8014172:	b29b      	uxth	r3, r3
 8014174:	b2da      	uxtb	r2, r3
 8014176:	697b      	ldr	r3, [r7, #20]
 8014178:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8014180:	b2da      	uxtb	r2, r3
 8014182:	697b      	ldr	r3, [r7, #20]
 8014184:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 8014186:	2304      	movs	r3, #4
 8014188:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801418a:	69fb      	ldr	r3, [r7, #28]
 801418c:	b2db      	uxtb	r3, r3
 801418e:	3314      	adds	r3, #20
 8014190:	b2db      	uxtb	r3, r3
 8014192:	009b      	lsls	r3, r3, #2
 8014194:	b2da      	uxtb	r2, r3
 8014196:	697b      	ldr	r3, [r7, #20]
 8014198:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 801419a:	69fb      	ldr	r3, [r7, #28]
    }
 801419c:	4618      	mov	r0, r3
 801419e:	3724      	adds	r7, #36	@ 0x24
 80141a0:	46bd      	mov	sp, r7
 80141a2:	bd90      	pop	{r4, r7, pc}
 80141a4:	200015c8 	.word	0x200015c8
 80141a8:	080269b4 	.word	0x080269b4
 80141ac:	080269dc 	.word	0x080269dc

080141b0 <prvSendData>:
 */
    BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                            uint32_t ulReceiveLength,
                            BaseType_t xByteCount )
    {
 80141b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141b2:	b093      	sub	sp, #76	@ 0x4c
 80141b4:	af04      	add	r7, sp, #16
 80141b6:	60f8      	str	r0, [r7, #12]
 80141b8:	60b9      	str	r1, [r7, #8]
 80141ba:	607a      	str	r2, [r7, #4]
 80141bc:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 80141be:	68bb      	ldr	r3, [r7, #8]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80141c4:	68bb      	ldr	r3, [r7, #8]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7f5 ff05 	bl	8009fd8 <uxIPHeaderSizePacket>
 80141ce:	4603      	mov	r3, r0
 80141d0:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80141d2:	4423      	add	r3, r4
 80141d4:	633b      	str	r3, [r7, #48]	@ 0x30
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80141d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80141e0:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulRxBufferSpace;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* Two steps to please MISRA. */
            size_t uxSize = uxIPHeaderSizePacket( *ppxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER;
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	4618      	mov	r0, r3
 80141ec:	f7f5 fef4 	bl	8009fd8 <uxIPHeaderSizePacket>
 80141f0:	4603      	mov	r3, r0
 80141f2:	3314      	adds	r3, #20
 80141f4:	627b      	str	r3, [r7, #36]	@ 0x24
            BaseType_t xSizeWithoutData = ( BaseType_t ) uxSize;
 80141f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141f8:	623b      	str	r3, [r7, #32]
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80141fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014200:	691b      	ldr	r3, [r3, #16]
 8014202:	1ad3      	subs	r3, r2, r3
 8014204:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 8014206:	69fb      	ldr	r3, [r7, #28]
 8014208:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
        {
            /* An ACK may be delayed if the peer has space for at least 2 x MSS. */
            lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8014210:	005b      	lsls	r3, r3, #1
 8014212:	617b      	str	r3, [r7, #20]

            /* In case we're receiving data continuously, we might postpone sending
             * an ACK to gain performance. */
            /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
            if( ( ulReceiveLength > 0U ) &&                               /* Data was sent to this socket. */
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d079      	beq.n	801430e <prvSendData+0x15e>
 801421a:	69ba      	ldr	r2, [r7, #24]
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	429a      	cmp	r2, r3
 8014220:	db75      	blt.n	801430e <prvSendData+0x15e>
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8014228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801422c:	b2db      	uxtb	r3, r3
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
 801422e:	2b00      	cmp	r3, #0
 8014230:	d16d      	bne.n	801430e <prvSendData+0x15e>
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8014232:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014234:	6a3b      	ldr	r3, [r7, #32]
 8014236:	429a      	cmp	r2, r3
 8014238:	d169      	bne.n	801430e <prvSendData+0x15e>
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
 8014240:	2b05      	cmp	r3, #5
 8014242:	d164      	bne.n	801430e <prvSendData+0x15e>
                ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )          /* There are no other flags than an ACK. */
 8014244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014246:	7b5b      	ldrb	r3, [r3, #13]
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8014248:	2b10      	cmp	r3, #16
 801424a:	d160      	bne.n	801430e <prvSendData+0x15e>
            {
                uint32_t ulCurMSS = ( uint32_t ) pxSocket->u.xTCP.usMSS;
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8014252:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 801425a:	68bb      	ldr	r3, [r7, #8]
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	429a      	cmp	r2, r3
 8014260:	d00f      	beq.n	8014282 <prvSendData+0xd2>
                {
                    /* There was still a delayed in queue, delete it. */
                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014268:	2b00      	cmp	r3, #0
 801426a:	d005      	beq.n	8014278 <prvSendData+0xc8>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014272:	4618      	mov	r0, r3
 8014274:	f003 f8c0 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 8014278:	68bb      	ldr	r3, [r7, #8]
 801427a:	681a      	ldr	r2, [r3, #0]
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }

                if( ulReceiveLength < ulCurMSS ) /* Received a small message. */
 8014282:	687a      	ldr	r2, [r7, #4]
 8014284:	693b      	ldr	r3, [r7, #16]
 8014286:	429a      	cmp	r2, r3
 8014288:	d204      	bcs.n	8014294 <prvSendData+0xe4>
                {
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	2202      	movs	r2, #2
 801428e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8014292:	e00c      	b.n	80142ae <prvSendData+0xfe>
                else
                {
                    /* Normally a delayed ACK should wait 200 ms for a next incoming
                     * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                     * for full-size message. */
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	2214      	movs	r2, #20
 8014298:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                    if( pxSocket->u.xTCP.usTimeout < 1U ) /* LCOV_EXCL_BR_LINE, the second branch will never be hit */
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d103      	bne.n	80142ae <prvSendData+0xfe>
                    {
                        pxSocket->u.xTCP.usTimeout = 1U;  /* LCOV_EXCL_LINE, this line will not be reached */
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	2201      	movs	r2, #1
 80142aa:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    }
                }

                if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 80142ae:	4b3d      	ldr	r3, [pc, #244]	@ (80143a4 <prvSendData+0x1f4>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	2b01      	cmp	r3, #1
 80142b4:	dd25      	ble.n	8014302 <prvSendData+0x152>
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80142ba:	2b17      	cmp	r3, #23
 80142bc:	d021      	beq.n	8014302 <prvSendData+0x152>
                {
                    FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u) tmout %u d %d\n",
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80142c2:	461d      	mov	r5, r3
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80142ca:	461e      	mov	r6, r3
 80142cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142ce:	691a      	ldr	r2, [r3, #16]
 80142d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142d2:	68db      	ldr	r3, [r3, #12]
 80142d4:	1ad0      	subs	r0, r2, r3
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80142dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142de:	69db      	ldr	r3, [r3, #28]
 80142e0:	1ad3      	subs	r3, r2, r3
 80142e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80142e4:	68f9      	ldr	r1, [r7, #12]
 80142e6:	f8b1 1070 	ldrh.w	r1, [r1, #112]	@ 0x70
 80142ea:	460c      	mov	r4, r1
 80142ec:	69b9      	ldr	r1, [r7, #24]
 80142ee:	9103      	str	r1, [sp, #12]
 80142f0:	9402      	str	r4, [sp, #8]
 80142f2:	9201      	str	r2, [sp, #4]
 80142f4:	9300      	str	r3, [sp, #0]
 80142f6:	4603      	mov	r3, r0
 80142f8:	4632      	mov	r2, r6
 80142fa:	4629      	mov	r1, r5
 80142fc:	482a      	ldr	r0, [pc, #168]	@ (80143a8 <prvSendData+0x1f8>)
 80142fe:	f00d ff23 	bl	8022148 <lUDPLoggingPrintf>
                                             ( unsigned ) xSendLength,
                                             pxSocket->u.xTCP.usTimeout,
                                             ( int ) lRxSpace ) );
                }

                *ppxNetworkBuffer = NULL;
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	2200      	movs	r2, #0
 8014306:	601a      	str	r2, [r3, #0]
                xSendLength = 0;
 8014308:	2300      	movs	r3, #0
 801430a:	637b      	str	r3, [r7, #52]	@ 0x34
            {
 801430c:	e015      	b.n	801433a <prvSendData+0x18a>
            }
            else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014314:	2b00      	cmp	r3, #0
 8014316:	d010      	beq.n	801433a <prvSendData+0x18a>
            {
                /* As an ACK is not being delayed, remove any earlier delayed ACK
                 * message. */
                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	429a      	cmp	r2, r3
 8014324:	d005      	beq.n	8014332 <prvSendData+0x182>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801432c:	4618      	mov	r0, r3
 801432e:	f003 f863 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
                }

                pxSocket->u.xTCP.pxAckMessage = NULL;
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	2200      	movs	r2, #0
 8014336:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            ( void ) pxTCPHeader;
            ( void ) lRxSpace;
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 801433a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801433c:	2b00      	cmp	r3, #0
 801433e:	d02b      	beq.n	8014398 <prvSendData+0x1e8>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8014340:	4b18      	ldr	r3, [pc, #96]	@ (80143a4 <prvSendData+0x1f4>)
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	2b01      	cmp	r3, #1
 8014346:	dd1d      	ble.n	8014384 <prvSendData+0x1d4>
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801434c:	2b17      	cmp	r3, #23
 801434e:	d019      	beq.n	8014384 <prvSendData+0x1d4>
            {
                FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %u SEQ %u (len %u)\n",
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014354:	4618      	mov	r0, r3
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801435c:	461c      	mov	r4, r3
 801435e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014360:	691a      	ldr	r2, [r3, #16]
 8014362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014364:	68db      	ldr	r3, [r3, #12]
 8014366:	1ad1      	subs	r1, r2, r3
 8014368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801436a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801436c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801436e:	69db      	ldr	r3, [r3, #28]
 8014370:	1ad3      	subs	r3, r2, r3
 8014372:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014374:	9201      	str	r2, [sp, #4]
 8014376:	9300      	str	r3, [sp, #0]
 8014378:	460b      	mov	r3, r1
 801437a:	4622      	mov	r2, r4
 801437c:	4601      	mov	r1, r0
 801437e:	480b      	ldr	r0, [pc, #44]	@ (80143ac <prvSendData+0x1fc>)
 8014380:	f00d fee2 	bl	8022148 <lUDPLoggingPrintf>
                                         ( unsigned ) xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	6819      	ldr	r1, [r3, #0]
 8014388:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801438a:	2301      	movs	r3, #1
 801438c:	68f8      	ldr	r0, [r7, #12]
 801438e:	f7ff f8ff 	bl	8013590 <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                /* The driver has taken ownership of the Network Buffer. */
                *ppxNetworkBuffer = NULL;
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	2200      	movs	r2, #0
 8014396:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        return xSendLength;
 8014398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 801439a:	4618      	mov	r0, r3
 801439c:	373c      	adds	r7, #60	@ 0x3c
 801439e:	46bd      	mov	sp, r7
 80143a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143a2:	bf00      	nop
 80143a4:	200015c8 	.word	0x200015c8
 80143a8:	080269f0 	.word	0x080269f0
 80143ac:	08026a28 	.word	0x08026a28

080143b0 <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                              uint8_t ucTCPFlags )
    {
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b084      	sub	sp, #16
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	460b      	mov	r3, r1
 80143ba:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdTRUE;
 80143bc:	2301      	movs	r3, #1
 80143be:	60fb      	str	r3, [r7, #12]
            /* Configured to ignore unknown packets just suppress a compiler warning. */
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
        {
            switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	f7f5 fe09 	bl	8009fd8 <uxIPHeaderSizePacket>
 80143c6:	4603      	mov	r3, r0
 80143c8:	2b14      	cmp	r3, #20
 80143ca:	d002      	beq.n	80143d2 <prvTCPSendSpecialPacketHelper+0x22>
 80143cc:	2b28      	cmp	r3, #40	@ 0x28
 80143ce:	d007      	beq.n	80143e0 <prvTCPSendSpecialPacketHelper+0x30>
 80143d0:	e00d      	b.n	80143ee <prvTCPSendSpecialPacketHelper+0x3e>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipSIZE_OF_IPv4_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV4( pxNetworkBuffer, ucTCPFlags );
 80143d2:	78fb      	ldrb	r3, [r7, #3]
 80143d4:	4619      	mov	r1, r3
 80143d6:	6878      	ldr	r0, [r7, #4]
 80143d8:	f000 fb18 	bl	8014a0c <prvTCPSendSpecialPktHelper_IPV4>
 80143dc:	60f8      	str	r0, [r7, #12]
                        break;
 80143de:	e009      	b.n	80143f4 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case ipSIZE_OF_IPv6_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV6( pxNetworkBuffer, ucTCPFlags );
 80143e0:	78fb      	ldrb	r3, [r7, #3]
 80143e2:	4619      	mov	r1, r3
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f000 fe8b 	bl	8015100 <prvTCPSendSpecialPktHelper_IPV6>
 80143ea:	60f8      	str	r0, [r7, #12]
                        break;
 80143ec:	e002      	b.n	80143f4 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    xReturn = pdFAIL;
 80143ee:	2300      	movs	r3, #0
 80143f0:	60fb      	str	r3, [r7, #12]
                    break;
 80143f2:	bf00      	nop
            }
        }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return xReturn;
 80143f4:	68fb      	ldr	r3, [r7, #12]
    }
 80143f6:	4618      	mov	r0, r3
 80143f8:	3710      	adds	r7, #16
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}

080143fe <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80143fe:	b580      	push	{r7, lr}
 8014400:	b082      	sub	sp, #8
 8014402:	af00      	add	r7, sp, #0
 8014404:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 8014406:	2110      	movs	r1, #16
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	f7ff ffd1 	bl	80143b0 <prvTCPSendSpecialPacketHelper>
 801440e:	4603      	mov	r3, r0
    }
 8014410:	4618      	mov	r0, r3
 8014412:	3708      	adds	r7, #8
 8014414:	46bd      	mov	sp, r7
 8014416:	bd80      	pop	{r7, pc}

08014418 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8014418:	b580      	push	{r7, lr}
 801441a:	b082      	sub	sp, #8
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 8014420:	2114      	movs	r1, #20
 8014422:	6878      	ldr	r0, [r7, #4]
 8014424:	f7ff ffc4 	bl	80143b0 <prvTCPSendSpecialPacketHelper>
 8014428:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 801442a:	4618      	mov	r0, r3
 801442c:	3708      	adds	r7, #8
 801442e:	46bd      	mov	sp, r7
 8014430:	bd80      	pop	{r7, pc}
	...

08014434 <prvTCPReturnPacket_IPV4>:
 */
void prvTCPReturnPacket_IPV4( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b0a6      	sub	sp, #152	@ 0x98
 8014438:	af00      	add	r7, sp, #0
 801443a:	60f8      	str	r0, [r7, #12]
 801443c:	60b9      	str	r1, [r7, #8]
 801443e:	607a      	str	r2, [r7, #4]
 8014440:	603b      	str	r3, [r7, #0]
    TCPPacket_t * pxTCPPacket = NULL;
 8014442:	2300      	movs	r3, #0
 8014444:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014448:	2300      	movs	r3, #0
 801444a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPHeader_t * pxIPHeader = NULL;
 801444e:	2300      	movs	r3, #0
 8014450:	67fb      	str	r3, [r7, #124]	@ 0x7c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8014452:	683b      	ldr	r3, [r7, #0]
 8014454:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    EthernetHeader_t * pxEthernetHeader = NULL;
 8014458:	2300      	movs	r3, #0
 801445a:	67bb      	str	r3, [r7, #120]	@ 0x78
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 801445c:	68bb      	ldr	r3, [r7, #8]
 801445e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8014462:	2300      	movs	r3, #0
 8014464:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    void * pvCopyDest = NULL;
 8014468:	2300      	movs	r3, #0
 801446a:	677b      	str	r3, [r7, #116]	@ 0x74
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv4_HEADER;
 801446c:	2314      	movs	r3, #20
 801446e:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t ulDestinationIPAddress;
    eARPLookupResult_t eResult;
    NetworkEndPoint_t * pxEndPoint = NULL;
 8014470:	2300      	movs	r3, #0
 8014472:	617b      	str	r3, [r7, #20]

    do
    {
        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8014474:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014478:	2b00      	cmp	r3, #0
 801447a:	d117      	bne.n	80144ac <prvTCPReturnPacket_IPV4+0x78>
        {
            pxNetworkBuffer = &xTempBuffer;
 801447c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014480:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8014484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014488:	2238      	movs	r2, #56	@ 0x38
 801448a:	2100      	movs	r1, #0
 801448c:	4618      	mov	r0, r3
 801448e:	f00e f984 	bl	802279a <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8014498:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801449c:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 801449e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144a2:	225a      	movs	r2, #90	@ 0x5a
 80144a4:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 80144a6:	2300      	movs	r3, #0
 80144a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 80144ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d114      	bne.n	80144de <prvTCPReturnPacket_IPV4+0xaa>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 80144b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144ba:	4619      	mov	r1, r3
 80144bc:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80144c0:	f7f6 f83c 	bl	800a53c <pxDuplicateNetworkBufferWithDescriptor>
 80144c4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

                if( pxNetworkBuffer != NULL )
 80144c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d003      	beq.n	80144d8 <prvTCPReturnPacket_IPV4+0xa4>
                {
                    xDoRelease = pdTRUE;
 80144d0:	2301      	movs	r3, #1
 80144d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80144d6:	e002      	b.n	80144de <prvTCPReturnPacket_IPV4+0xaa>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 80144d8:	48bc      	ldr	r0, [pc, #752]	@ (80147cc <prvTCPReturnPacket_IPV4+0x398>)
 80144da:	f00d fe35 	bl	8022148 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 80144de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	f000 8166 	beq.w	80147b4 <prvTCPReturnPacket_IPV4+0x380>
            NetworkInterface_t * pxInterface;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80144e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144ee:	330e      	adds	r3, #14
 80144f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 80144f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 80144fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014500:	67bb      	str	r3, [r7, #120]	@ 0x78
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 8014502:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014506:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014508:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801450a:	330e      	adds	r3, #14
 801450c:	4413      	add	r3, r2
 801450e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8014512:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014518:	2b00      	cmp	r3, #0
 801451a:	d10b      	bne.n	8014534 <prvTCPReturnPacket_IPV4+0x100>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 801451c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801451e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014522:	68f8      	ldr	r0, [r7, #12]
 8014524:	f7ff faf6 	bl	8013b14 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8014528:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801452c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801452e:	2b00      	cmp	r3, #0
 8014530:	f000 813d 	beq.w	80147ae <prvTCPReturnPacket_IPV4+0x37a>
                    break;
                }
            }

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d028      	beq.n	801458c <prvTCPReturnPacket_IPV4+0x158>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 801453a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801453c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014540:	68f8      	ldr	r0, [r7, #12]
 8014542:	f7ff f865 	bl	8013610 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801454a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801454e:	68f8      	ldr	r0, [r7, #12]
 8014550:	f7ff f8d8 	bl	8013704 <prvTCPReturn_SetSequenceNumber>
                pxIPHeader->ulDestinationIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014558:	061a      	lsls	r2, r3, #24
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801455e:	021b      	lsls	r3, r3, #8
 8014560:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014564:	431a      	orrs	r2, r3
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801456a:	0a1b      	lsrs	r3, r3, #8
 801456c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014570:	431a      	orrs	r2, r3
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014576:	0e1b      	lsrs	r3, r3, #24
 8014578:	431a      	orrs	r2, r3
 801457a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801457c:	611a      	str	r2, [r3, #16]
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 801457e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014584:	681a      	ldr	r2, [r3, #0]
 8014586:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014588:	60da      	str	r2, [r3, #12]
 801458a:	e017      	b.n	80145bc <prvTCPReturnPacket_IPV4+0x188>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 801458c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014590:	685b      	ldr	r3, [r3, #4]
 8014592:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014594:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014598:	689a      	ldr	r2, [r3, #8]
 801459a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801459e:	605a      	str	r2, [r3, #4]
 80145a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80145a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80145a6:	609a      	str	r2, [r3, #8]
                vFlip_32( pxIPHeader->ulDestinationIPAddress, pxIPHeader->ulSourceIPAddress );
 80145a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80145aa:	691b      	ldr	r3, [r3, #16]
 80145ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80145ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80145b0:	68da      	ldr	r2, [r3, #12]
 80145b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80145b4:	611a      	str	r2, [r3, #16]
 80145b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80145b8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80145ba:	60da      	str	r2, [r3, #12]
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 80145bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80145be:	2280      	movs	r2, #128	@ 0x80
 80145c0:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	b29b      	uxth	r3, r3
 80145c6:	021b      	lsls	r3, r3, #8
 80145c8:	b29a      	uxth	r2, r3
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	0a1b      	lsrs	r3, r3, #8
 80145ce:	b29b      	uxth	r3, r3
 80145d0:	4313      	orrs	r3, r2
 80145d2:	b29a      	uxth	r2, r3
 80145d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80145d6:	805a      	strh	r2, [r3, #2]

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 80145d8:	4b7d      	ldr	r3, [pc, #500]	@ (80147d0 <prvTCPReturnPacket_IPV4+0x39c>)
 80145da:	881b      	ldrh	r3, [r3, #0]
 80145dc:	021b      	lsls	r3, r3, #8
 80145de:	b21a      	sxth	r2, r3
 80145e0:	4b7b      	ldr	r3, [pc, #492]	@ (80147d0 <prvTCPReturnPacket_IPV4+0x39c>)
 80145e2:	881b      	ldrh	r3, [r3, #0]
 80145e4:	0a1b      	lsrs	r3, r3, #8
 80145e6:	b29b      	uxth	r3, r3
 80145e8:	b21b      	sxth	r3, r3
 80145ea:	4313      	orrs	r3, r2
 80145ec:	b21b      	sxth	r3, r3
 80145ee:	b29a      	uxth	r2, r3
 80145f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80145f2:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 80145f4:	4b76      	ldr	r3, [pc, #472]	@ (80147d0 <prvTCPReturnPacket_IPV4+0x39c>)
 80145f6:	881b      	ldrh	r3, [r3, #0]
 80145f8:	3301      	adds	r3, #1
 80145fa:	b29a      	uxth	r2, r3
 80145fc:	4b74      	ldr	r3, [pc, #464]	@ (80147d0 <prvTCPReturnPacket_IPV4+0x39c>)
 80145fe:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8014600:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014602:	2200      	movs	r2, #0
 8014604:	719a      	strb	r2, [r3, #6]
 8014606:	2200      	movs	r2, #0
 8014608:	71da      	strb	r2, [r3, #7]
                /* calculate the TCP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 801460a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801460e:	781a      	ldrb	r2, [r3, #0]
 8014610:	785b      	ldrb	r3, [r3, #1]
 8014612:	021b      	lsls	r3, r3, #8
 8014614:	4313      	orrs	r3, r2
 8014616:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 801461a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801461e:	885b      	ldrh	r3, [r3, #2]
 8014620:	b29a      	uxth	r2, r3
 8014622:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014626:	801a      	strh	r2, [r3, #0]
 8014628:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801462c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8014630:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8014632:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014636:	687a      	ldr	r2, [r7, #4]
 8014638:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 801463a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801463e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014640:	f103 020e 	add.w	r2, r3, #14
 8014644:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014648:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            pvCopySource = &pxEthernetHeader->xSourceAddress;
 801464a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801464c:	3306      	adds	r3, #6
 801464e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 8014652:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014654:	691b      	ldr	r3, [r3, #16]
 8014656:	61bb      	str	r3, [r7, #24]

            eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &pxEndPoint );
 8014658:	f107 0214 	add.w	r2, r7, #20
 801465c:	f107 011c 	add.w	r1, r7, #28
 8014660:	f107 0318 	add.w	r3, r7, #24
 8014664:	4618      	mov	r0, r3
 8014666:	f7f2 fe9d 	bl	80073a4 <eARPGetCacheEntry>
 801466a:	4603      	mov	r3, r0
 801466c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

            if( eResult == eARPCacheHit )
 8014670:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8014674:	2b01      	cmp	r3, #1
 8014676:	d108      	bne.n	801468a <prvTCPReturnPacket_IPV4+0x256>
            {
                pvCopySource = &xMACAddress;
 8014678:	f107 031c 	add.w	r3, r7, #28
 801467c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8014680:	697a      	ldr	r2, [r7, #20]
 8014682:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014686:	631a      	str	r2, [r3, #48]	@ 0x30
 8014688:	e003      	b.n	8014692 <prvTCPReturnPacket_IPV4+0x25e>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 801468a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801468c:	3306      	adds	r3, #6
 801468e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            }

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8014692:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014698:	2b00      	cmp	r3, #0
 801469a:	f000 808a 	beq.w	80147b2 <prvTCPReturnPacket_IPV4+0x37e>
            {
                break;
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 801469e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80146a0:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 80146a2:	2206      	movs	r2, #6
 80146a4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80146a8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80146aa:	f00d ff69 	bl	8022580 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 80146ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80146b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80146b4:	33e8      	adds	r3, #232	@ 0xe8
 80146b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 80146ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80146bc:	3306      	adds	r3, #6
 80146be:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80146c0:	2206      	movs	r2, #6
 80146c2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80146c6:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80146c8:	f00d ff5a 	bl	8022580 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80146cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80146d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146d2:	2b3b      	cmp	r3, #59	@ 0x3b
 80146d4:	d81a      	bhi.n	801470c <prvTCPReturnPacket_IPV4+0x2d8>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80146d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80146da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80146e0:	e00c      	b.n	80146fc <prvTCPReturnPacket_IPV4+0x2c8>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80146e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80146e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80146e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80146ec:	4413      	add	r3, r2
 80146ee:	2200      	movs	r2, #0
 80146f0:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80146f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80146f6:	3301      	adds	r3, #1
 80146f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80146fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014700:	2b3b      	cmp	r3, #59	@ 0x3b
 8014702:	ddee      	ble.n	80146e2 <prvTCPReturnPacket_IPV4+0x2ae>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8014704:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014708:	223c      	movs	r2, #60	@ 0x3c
 801470a:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 801470c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014712:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014716:	2b00      	cmp	r3, #0
 8014718:	d104      	bne.n	8014724 <prvTCPReturnPacket_IPV4+0x2f0>
 801471a:	f240 111d 	movw	r1, #285	@ 0x11d
 801471e:	482d      	ldr	r0, [pc, #180]	@ (80147d4 <prvTCPReturnPacket_IPV4+0x3a0>)
 8014720:	f7ed f91a 	bl	8001958 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8014724:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801472a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801472e:	68db      	ldr	r3, [r3, #12]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d104      	bne.n	801473e <prvTCPReturnPacket_IPV4+0x30a>
 8014734:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8014738:	4826      	ldr	r0, [pc, #152]	@ (80147d4 <prvTCPReturnPacket_IPV4+0x3a0>)
 801473a:	f7ed f90d 	bl	8001958 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 801473e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014744:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014748:	663b      	str	r3, [r7, #96]	@ 0x60
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 801474a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801474c:	68db      	ldr	r3, [r3, #12]
 801474e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8014752:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014756:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8014758:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 801475a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801475e:	2b00      	cmp	r3, #0
 8014760:	d121      	bne.n	80147a6 <prvTCPReturnPacket_IPV4+0x372>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8014762:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014766:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801476a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801476e:	021b      	lsls	r3, r3, #8
 8014770:	4313      	orrs	r3, r2
 8014772:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8014776:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801477a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801477c:	b29a      	uxth	r2, r3
 801477e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014782:	845a      	strh	r2, [r3, #34]	@ 0x22
 8014784:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014788:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 801478c:	849a      	strh	r2, [r3, #36]	@ 0x24

                pxIPHeader->ulSourceIPAddress = pxIPHeader->ulDestinationIPAddress;
 801478e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014790:	691a      	ldr	r2, [r3, #16]
 8014792:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014794:	60da      	str	r2, [r3, #12]

                ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8014796:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014798:	3306      	adds	r3, #6
 801479a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801479c:	2206      	movs	r2, #6
 801479e:	4618      	mov	r0, r3
 80147a0:	f00d feee 	bl	8022580 <memcpy>
 80147a4:	e006      	b.n	80147b4 <prvTCPReturnPacket_IPV4+0x380>
            }
            else
            {
                xDoRelease = pdFALSE;
 80147a6:	2300      	movs	r3, #0
 80147a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80147ac:	e002      	b.n	80147b4 <prvTCPReturnPacket_IPV4+0x380>
                    break;
 80147ae:	bf00      	nop
 80147b0:	e000      	b.n	80147b4 <prvTCPReturnPacket_IPV4+0x380>
                break;
 80147b2:	bf00      	nop
                /* The buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );

    if( xDoRelease == pdTRUE )
 80147b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80147b8:	2b01      	cmp	r3, #1
 80147ba:	d103      	bne.n	80147c4 <prvTCPReturnPacket_IPV4+0x390>
    {
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80147bc:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80147c0:	f002 fe1a 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
    }
}
 80147c4:	bf00      	nop
 80147c6:	3798      	adds	r7, #152	@ 0x98
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}
 80147cc:	08026a54 	.word	0x08026a54
 80147d0:	20001120 	.word	0x20001120
 80147d4:	08026a7c 	.word	0x08026a7c

080147d8 <prvTCPPrepareConnect_IPV4>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 80147d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147da:	b093      	sub	sp, #76	@ 0x4c
 80147dc:	af06      	add	r7, sp, #24
 80147de:	6078      	str	r0, [r7, #4]
    TCPPacket_t * pxTCPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 80147e0:	2301      	movs	r3, #1
 80147e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t ulInitialSequenceNumber = 0;
 80147e4:	2300      	movs	r3, #0
 80147e6:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 80147e8:	f107 030c 	add.w	r3, r7, #12
 80147ec:	2206      	movs	r2, #6
 80147ee:	2100      	movs	r1, #0
 80147f0:	4618      	mov	r0, r3
 80147f2:	f00d ffd2 	bl	802279a <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80147fa:	061a      	lsls	r2, r3, #24
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014800:	021b      	lsls	r3, r3, #8
 8014802:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014806:	431a      	orrs	r2, r3
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801480c:	0a1b      	lsrs	r3, r3, #8
 801480e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014812:	431a      	orrs	r2, r3
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014818:	0e1b      	lsrs	r3, r3, #24
 801481a:	4313      	orrs	r3, r2
 801481c:	617b      	str	r3, [r7, #20]
    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ), &( pxSocket->pxEndPoint ) );
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8014824:	f107 010c 	add.w	r1, r7, #12
 8014828:	f107 0314 	add.w	r3, r7, #20
 801482c:	4618      	mov	r0, r3
 801482e:	f7f2 fdb9 	bl	80073a4 <eARPGetCacheEntry>
 8014832:	4603      	mov	r3, r0
 8014834:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch( eReturned )
 8014838:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801483c:	2b01      	cmp	r3, #1
 801483e:	d037      	beq.n	80148b0 <prvTCPPrepareConnect_IPV4+0xd8>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8014846:	3301      	adds	r3, #1
 8014848:	b2da      	uxtb	r2, r3
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_debug_printf( ( "ARP for %xip (using %xip): rc=%d %02x-%02x-%02x-%02x-%02x-%02x\n",
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8014854:	697b      	ldr	r3, [r7, #20]
 8014856:	061a      	lsls	r2, r3, #24
 8014858:	697b      	ldr	r3, [r7, #20]
 801485a:	021b      	lsls	r3, r3, #8
 801485c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014860:	431a      	orrs	r2, r3
 8014862:	697b      	ldr	r3, [r7, #20]
 8014864:	0a1b      	lsrs	r3, r3, #8
 8014866:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801486a:	431a      	orrs	r2, r3
 801486c:	697b      	ldr	r3, [r7, #20]
 801486e:	0e1b      	lsrs	r3, r3, #24
 8014870:	431a      	orrs	r2, r3
 8014872:	f897 e027 	ldrb.w	lr, [r7, #39]	@ 0x27
 8014876:	7b38      	ldrb	r0, [r7, #12]
 8014878:	7b7c      	ldrb	r4, [r7, #13]
 801487a:	7bbd      	ldrb	r5, [r7, #14]
 801487c:	7bfe      	ldrb	r6, [r7, #15]
 801487e:	f897 c010 	ldrb.w	ip, [r7, #16]
 8014882:	f8c7 c000 	str.w	ip, [r7]
 8014886:	f897 c011 	ldrb.w	ip, [r7, #17]
 801488a:	4663      	mov	r3, ip
 801488c:	9305      	str	r3, [sp, #20]
 801488e:	683b      	ldr	r3, [r7, #0]
 8014890:	9304      	str	r3, [sp, #16]
 8014892:	9603      	str	r6, [sp, #12]
 8014894:	9502      	str	r5, [sp, #8]
 8014896:	9401      	str	r4, [sp, #4]
 8014898:	9000      	str	r0, [sp, #0]
 801489a:	4673      	mov	r3, lr
 801489c:	485a      	ldr	r0, [pc, #360]	@ (8014a08 <prvTCPPrepareConnect_IPV4+0x230>)
 801489e:	f00d fc53 	bl	8022148 <lUDPLoggingPrintf>
                                     xEthAddress.ucBytes[ 3 ],
                                     xEthAddress.ucBytes[ 4 ],
                                     xEthAddress.ucBytes[ 5 ] ) );

            /* And issue a (new) ARP request */
            FreeRTOS_OutputARPRequest( ulRemoteIP );
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	4618      	mov	r0, r3
 80148a6:	f7f2 ffd1 	bl	800784c <FreeRTOS_OutputARPRequest>
            xReturn = pdFALSE;
 80148aa:	2300      	movs	r3, #0
 80148ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80148ae:	e000      	b.n	80148b2 <prvTCPPrepareConnect_IPV4+0xda>
            break;            /* We can now prepare the SYN packet. */
 80148b0:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 80148b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d010      	beq.n	80148da <prvTCPPrepareConnect_IPV4+0x102>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80148ca:	f7ed f865 	bl	8001998 <ulApplicationGetNextSequenceNumber>
 80148ce:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 80148d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d101      	bne.n	80148da <prvTCPPrepareConnect_IPV4+0x102>
        {
            xReturn = pdFALSE;
 80148d6:	2300      	movs	r3, #0
 80148d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if( xReturn != pdFALSE )
 80148da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148dc:	2b00      	cmp	r3, #0
 80148de:	f000 808d 	beq.w	80149fc <prvTCPPrepareConnect_IPV4+0x224>
         * the buffer onto the TCPPacket_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	33aa      	adds	r3, #170	@ 0xaa
 80148e6:	623b      	str	r3, [r7, #32]
        pxIPHeader = &pxTCPPacket->xIPHeader;
 80148e8:	6a3b      	ldr	r3, [r7, #32]
 80148ea:	330e      	adds	r3, #14
 80148ec:	61fb      	str	r3, [r7, #28]

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2200      	movs	r2, #0
 80148f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 80148f6:	687a      	ldr	r2, [r7, #4]
 80148f8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80148fc:	f043 0308 	orr.w	r3, r3, #8
 8014900:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	33aa      	adds	r3, #170	@ 0xaa
 8014908:	225a      	movs	r2, #90	@ 0x5a
 801490a:	2100      	movs	r1, #0
 801490c:	4618      	mov	r0, r3
 801490e:	f00d ff44 	bl	802279a <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8014912:	6a3b      	ldr	r3, [r7, #32]
 8014914:	3306      	adds	r3, #6
 8014916:	461a      	mov	r2, r3
 8014918:	f107 030c 	add.w	r3, r7, #12
 801491c:	6818      	ldr	r0, [r3, #0]
 801491e:	6010      	str	r0, [r2, #0]
 8014920:	889b      	ldrh	r3, [r3, #4]
 8014922:	8093      	strh	r3, [r2, #4]

        /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
        pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8014924:	6a3b      	ldr	r3, [r7, #32]
 8014926:	2200      	movs	r2, #0
 8014928:	f042 0208 	orr.w	r2, r2, #8
 801492c:	731a      	strb	r2, [r3, #12]
 801492e:	2200      	movs	r2, #0
 8014930:	735a      	strb	r2, [r3, #13]

        pxIPHeader->ucVersionHeaderLength = 0x45U;
 8014932:	69fb      	ldr	r3, [r7, #28]
 8014934:	2245      	movs	r2, #69	@ 0x45
 8014936:	701a      	strb	r2, [r3, #0]
        usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 8014938:	2338      	movs	r3, #56	@ 0x38
 801493a:	837b      	strh	r3, [r7, #26]
        pxIPHeader->usLength = FreeRTOS_htons( usLength );
 801493c:	8b7b      	ldrh	r3, [r7, #26]
 801493e:	021b      	lsls	r3, r3, #8
 8014940:	b21a      	sxth	r2, r3
 8014942:	8b7b      	ldrh	r3, [r7, #26]
 8014944:	0a1b      	lsrs	r3, r3, #8
 8014946:	b29b      	uxth	r3, r3
 8014948:	b21b      	sxth	r3, r3
 801494a:	4313      	orrs	r3, r2
 801494c:	b21b      	sxth	r3, r3
 801494e:	b29a      	uxth	r2, r3
 8014950:	69fb      	ldr	r3, [r7, #28]
 8014952:	805a      	strh	r2, [r3, #2]
        pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8014954:	69fb      	ldr	r3, [r7, #28]
 8014956:	2280      	movs	r2, #128	@ 0x80
 8014958:	721a      	strb	r2, [r3, #8]

        pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 801495a:	69fb      	ldr	r3, [r7, #28]
 801495c:	2206      	movs	r2, #6
 801495e:	725a      	strb	r2, [r3, #9]

        /* Addresses and ports will be stored swapped because prvTCPReturnPacket
         * will swap them back while replying. */
        pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014964:	061a      	lsls	r2, r3, #24
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801496a:	021b      	lsls	r3, r3, #8
 801496c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014970:	431a      	orrs	r2, r3
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014976:	0a1b      	lsrs	r3, r3, #8
 8014978:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801497c:	431a      	orrs	r2, r3
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014982:	0e1b      	lsrs	r3, r3, #24
 8014984:	431a      	orrs	r2, r3
 8014986:	69fb      	ldr	r3, [r7, #28]
 8014988:	60da      	str	r2, [r3, #12]

        pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014990:	021b      	lsls	r3, r3, #8
 8014992:	b21a      	sxth	r2, r3
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801499a:	0a1b      	lsrs	r3, r3, #8
 801499c:	b29b      	uxth	r3, r3
 801499e:	b21b      	sxth	r3, r3
 80149a0:	4313      	orrs	r3, r2
 80149a2:	b21b      	sxth	r3, r3
 80149a4:	b29a      	uxth	r2, r3
 80149a6:	6a3b      	ldr	r3, [r7, #32]
 80149a8:	845a      	strh	r2, [r3, #34]	@ 0x22
        pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80149ae:	021b      	lsls	r3, r3, #8
 80149b0:	b21a      	sxth	r2, r3
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80149b6:	0a1b      	lsrs	r3, r3, #8
 80149b8:	b29b      	uxth	r3, r3
 80149ba:	b21b      	sxth	r3, r3
 80149bc:	4313      	orrs	r3, r2
 80149be:	b21b      	sxth	r3, r3
 80149c0:	b29a      	uxth	r2, r3
 80149c2:	6a3b      	ldr	r3, [r7, #32]
 80149c4:	849a      	strh	r2, [r3, #36]	@ 0x24

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	2200      	movs	r2, #0
 80149ca:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80149d2:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 80149d6:	6a3b      	ldr	r3, [r7, #32]
 80149d8:	2250      	movs	r2, #80	@ 0x50
 80149da:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        /* Only set the SYN flag. */
        pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 80149de:	6a3b      	ldr	r3, [r7, #32]
 80149e0:	2202      	movs	r2, #2
 80149e2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 80149e6:	6878      	ldr	r0, [r7, #4]
 80149e8:	f000 fc3c 	bl	8015264 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f7fe ff2b 	bl	8013848 <prvTCPCreateWindow>
 80149f2:	4603      	mov	r3, r0
 80149f4:	2b01      	cmp	r3, #1
 80149f6:	d001      	beq.n	80149fc <prvTCPPrepareConnect_IPV4+0x224>
        {
            xReturn = pdFALSE;
 80149f8:	2300      	movs	r3, #0
 80149fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return xReturn;
 80149fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80149fe:	4618      	mov	r0, r3
 8014a00:	3734      	adds	r7, #52	@ 0x34
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a06:	bf00      	nop
 8014a08:	08026abc 	.word	0x08026abc

08014a0c <prvTCPSendSpecialPktHelper_IPV4>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b086      	sub	sp, #24
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	460b      	mov	r3, r1
 8014a16:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_t * pxTCPPacket = ( ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a1c:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 8014a1e:	2328      	movs	r3, #40	@ 0x28
 8014a20:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8014a22:	697b      	ldr	r3, [r7, #20]
 8014a24:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014a28:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 8014a2a:	697b      	ldr	r3, [r7, #20]
 8014a2c:	78fa      	ldrb	r2, [r7, #3]
 8014a2e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8014a32:	697b      	ldr	r3, [r7, #20]
 8014a34:	2250      	movs	r2, #80	@ 0x50
 8014a36:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 8014a3a:	7bfb      	ldrb	r3, [r7, #15]
 8014a3c:	f003 0302 	and.w	r3, r3, #2
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d02c      	beq.n	8014a9e <prvTCPSendSpecialPktHelper_IPV4+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8014a44:	697b      	ldr	r3, [r7, #20]
 8014a46:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8014a4a:	061a      	lsls	r2, r3, #24
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8014a52:	021b      	lsls	r3, r3, #8
 8014a54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014a58:	431a      	orrs	r2, r3
 8014a5a:	697b      	ldr	r3, [r7, #20]
 8014a5c:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8014a60:	0a1b      	lsrs	r3, r3, #8
 8014a62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014a66:	431a      	orrs	r2, r3
 8014a68:	697b      	ldr	r3, [r7, #20]
 8014a6a:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8014a6e:	0e1b      	lsrs	r3, r3, #24
 8014a70:	4313      	orrs	r3, r2
 8014a72:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 8014a74:	68bb      	ldr	r3, [r7, #8]
 8014a76:	3301      	adds	r3, #1
 8014a78:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	061a      	lsls	r2, r3, #24
 8014a7e:	68bb      	ldr	r3, [r7, #8]
 8014a80:	021b      	lsls	r3, r3, #8
 8014a82:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014a86:	431a      	orrs	r2, r3
 8014a88:	68bb      	ldr	r3, [r7, #8]
 8014a8a:	0a1b      	lsrs	r3, r3, #8
 8014a8c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014a90:	431a      	orrs	r2, r3
 8014a92:	68bb      	ldr	r3, [r7, #8]
 8014a94:	0e1b      	lsrs	r3, r3, #24
 8014a96:	431a      	orrs	r2, r3
 8014a98:	697b      	ldr	r3, [r7, #20]
 8014a9a:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	693a      	ldr	r2, [r7, #16]
 8014aa2:	6879      	ldr	r1, [r7, #4]
 8014aa4:	2000      	movs	r0, #0
 8014aa6:	f7fe fd73 	bl	8013590 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 8014aaa:	2300      	movs	r3, #0
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	3718      	adds	r7, #24
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}

08014ab4 <prvTCPReturnPacket_IPV6>:
 */
void prvTCPReturnPacket_IPV6( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8014ab4:	b5b0      	push	{r4, r5, r7, lr}
 8014ab6:	b0aa      	sub	sp, #168	@ 0xa8
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	60f8      	str	r0, [r7, #12]
 8014abc:	60b9      	str	r1, [r7, #8]
 8014abe:	607a      	str	r2, [r7, #4]
 8014ac0:	603b      	str	r3, [r7, #0]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014ac8:	2300      	movs	r3, #0
 8014aca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    IPHeader_IPv6_t * pxIPHeader = NULL;
 8014ace:	2300      	movs	r3, #0
 8014ad0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8014ad4:	683b      	ldr	r3, [r7, #0]
 8014ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    EthernetHeader_t * pxEthernetHeader = NULL;
 8014ada:	2300      	movs	r3, #0
 8014adc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8014ae0:	68bb      	ldr	r3, [r7, #8]
 8014ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    void * pvCopyDest = NULL;
 8014aec:	2300      	movs	r3, #0
 8014aee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv6_HEADER;
 8014af2:	2328      	movs	r3, #40	@ 0x28
 8014af4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPv6_Address_t xDestinationIPAddress;

    do
    {
        /* Use do/while to be able to break out of the flow */
        if( ( pxNetworkBuffer == NULL ) && ( pxSocket == NULL ) )
 8014af8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d103      	bne.n	8014b08 <prvTCPReturnPacket_IPV6+0x54>
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	f000 81ae 	beq.w	8014e64 <prvTCPReturnPacket_IPV6+0x3b0>
            break;
        }

        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8014b08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d117      	bne.n	8014b40 <prvTCPReturnPacket_IPV6+0x8c>
        {
            pxNetworkBuffer = &xTempBuffer;
 8014b10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8014b14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8014b18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8014b1c:	2238      	movs	r2, #56	@ 0x38
 8014b1e:	2100      	movs	r1, #0
 8014b20:	4618      	mov	r0, r3
 8014b22:	f00d fe3a 	bl	802279a <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8014b2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014b30:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014b36:	225a      	movs	r2, #90	@ 0x5a
 8014b38:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 8014b40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d114      	bne.n	8014b72 <prvTCPReturnPacket_IPV6+0xbe>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8014b48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b4e:	4619      	mov	r1, r3
 8014b50:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8014b54:	f7f5 fcf2 	bl	800a53c <pxDuplicateNetworkBufferWithDescriptor>
 8014b58:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

                if( pxNetworkBuffer != NULL )
 8014b5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d003      	beq.n	8014b6c <prvTCPReturnPacket_IPV6+0xb8>
                {
                    xDoRelease = pdTRUE;
 8014b64:	2301      	movs	r3, #1
 8014b66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8014b6a:	e002      	b.n	8014b72 <prvTCPReturnPacket_IPV6+0xbe>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8014b6c:	48c0      	ldr	r0, [pc, #768]	@ (8014e70 <prvTCPReturnPacket_IPV6+0x3bc>)
 8014b6e:	f00d faeb 	bl	8022148 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 8014b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	f000 8175 	beq.w	8014e66 <prvTCPReturnPacket_IPV6+0x3b2>
        #endif
        {
            eARPLookupResult_t eResult;
            NetworkInterface_t * pxInterface;

            configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8014b7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d103      	bne.n	8014b8e <prvTCPReturnPacket_IPV6+0xda>
 8014b86:	219d      	movs	r1, #157	@ 0x9d
 8014b88:	48ba      	ldr	r0, [pc, #744]	@ (8014e74 <prvTCPReturnPacket_IPV6+0x3c0>)
 8014b8a:	f7ec fee5 	bl	8001958 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8014b8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b94:	330e      	adds	r3, #14
 8014b96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8014b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ba0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8014ba4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014ba8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 8014bac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014bb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014bb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014bb6:	330e      	adds	r3, #14
 8014bb8:	4413      	add	r3, r2
 8014bba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8014bbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d117      	bne.n	8014bf8 <prvTCPReturnPacket_IPV6+0x144>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8014bc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014bcc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014bd0:	68f8      	ldr	r0, [r7, #12]
 8014bd2:	f7fe ff9f 	bl	8013b14 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8014bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d10b      	bne.n	8014bf8 <prvTCPReturnPacket_IPV6+0x144>
                {
                    if( xDoRelease != pdFALSE )
 8014be0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d003      	beq.n	8014bf0 <prvTCPReturnPacket_IPV6+0x13c>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8014be8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8014bec:	f002 fc04 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxNetworkBuffer = NULL;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8014bf6:	e136      	b.n	8014e66 <prvTCPReturnPacket_IPV6+0x3b2>
                }
            }

            /* Fill the packet, swapping from- and to-addresses. */
            if( pxSocket != NULL )
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d025      	beq.n	8014c4a <prvTCPReturnPacket_IPV6+0x196>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8014bfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014c02:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014c06:	68f8      	ldr	r0, [r7, #12]
 8014c08:	f7fe fd02 	bl	8013610 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014c12:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014c16:	68f8      	ldr	r0, [r7, #12]
 8014c18:	f7fe fd74 	bl	8013704 <prvTCPReturn_SetSequenceNumber>
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014c20:	f103 0018 	add.w	r0, r3, #24
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	3354      	adds	r3, #84	@ 0x54
 8014c28:	2210      	movs	r2, #16
 8014c2a:	4619      	mov	r1, r3
 8014c2c:	f00d fca8 	bl	8022580 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014c34:	f103 0008 	add.w	r0, r3, #8
 8014c38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c3e:	3338      	adds	r3, #56	@ 0x38
 8014c40:	2210      	movs	r2, #16
 8014c42:	4619      	mov	r1, r3
 8014c44:	f00d fc9c 	bl	8022580 <memcpy>
 8014c48:	e02d      	b.n	8014ca6 <prvTCPReturnPacket_IPV6+0x1f2>
            {
                IPv6_Address_t xTempAddress;

                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 8014c4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014c4e:	685b      	ldr	r3, [r3, #4]
 8014c50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014c52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014c56:	689a      	ldr	r2, [r3, #8]
 8014c58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014c5c:	605a      	str	r2, [r3, #4]
 8014c5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014c62:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8014c64:	609a      	str	r2, [r3, #8]
                ( void ) memcpy( xTempAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014c6a:	3318      	adds	r3, #24
 8014c6c:	f107 0410 	add.w	r4, r7, #16
 8014c70:	6818      	ldr	r0, [r3, #0]
 8014c72:	6859      	ldr	r1, [r3, #4]
 8014c74:	689a      	ldr	r2, [r3, #8]
 8014c76:	68db      	ldr	r3, [r3, #12]
 8014c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014c7e:	f103 0018 	add.w	r0, r3, #24
 8014c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014c86:	3308      	adds	r3, #8
 8014c88:	2210      	movs	r2, #16
 8014c8a:	4619      	mov	r1, r3
 8014c8c:	f00d fc78 	bl	8022580 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, xTempAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014c94:	3308      	adds	r3, #8
 8014c96:	461d      	mov	r5, r3
 8014c98:	f107 0410 	add.w	r4, r7, #16
 8014c9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c9e:	6028      	str	r0, [r5, #0]
 8014ca0:	6069      	str	r1, [r5, #4]
 8014ca2:	60aa      	str	r2, [r5, #8]
 8014ca4:	60eb      	str	r3, [r5, #12]
            }

            /* In IPv6, the "payload length" does not include the size of the IP-header */
            pxIPHeader->usPayloadLength = FreeRTOS_htons( ulLen - sizeof( IPHeader_IPv6_t ) );
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	b29b      	uxth	r3, r3
 8014caa:	3b28      	subs	r3, #40	@ 0x28
 8014cac:	b29b      	uxth	r3, r3
 8014cae:	021b      	lsls	r3, r3, #8
 8014cb0:	b29a      	uxth	r2, r3
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	3b28      	subs	r3, #40	@ 0x28
 8014cb6:	0a1b      	lsrs	r3, r3, #8
 8014cb8:	b29b      	uxth	r3, r3
 8014cba:	4313      	orrs	r3, r2
 8014cbc:	b29a      	uxth	r2, r3
 8014cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014cc2:	809a      	strh	r2, [r3, #4]
                uint32_t ulTotalLength = ulLen + ipSIZE_OF_ETH_HEADER;
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxNetworkBuffer->pucEthernetBuffer, ulTotalLength, pdTRUE );
            }
            #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8014cc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014cc8:	781a      	ldrb	r2, [r3, #0]
 8014cca:	785b      	ldrb	r3, [r3, #1]
 8014ccc:	021b      	lsls	r3, r3, #8
 8014cce:	4313      	orrs	r3, r2
 8014cd0:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8014cd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014cd8:	885b      	ldrh	r3, [r3, #2]
 8014cda:	b29a      	uxth	r2, r3
 8014cdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014ce0:	801a      	strh	r2, [r3, #0]
 8014ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014ce6:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8014cea:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8014cec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014cf0:	687a      	ldr	r2, [r7, #4]
 8014cf2:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8014cf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014cfa:	f103 020e 	add.w	r2, r3, #14
 8014cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014d02:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            ( void ) memcpy( xDestinationIPAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014d04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014d08:	3318      	adds	r3, #24
 8014d0a:	f107 0420 	add.w	r4, r7, #32
 8014d0e:	6818      	ldr	r0, [r3, #0]
 8014d10:	6859      	ldr	r1, [r3, #4]
 8014d12:	689a      	ldr	r2, [r3, #8]
 8014d14:	68db      	ldr	r3, [r3, #12]
 8014d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}

            eResult = eNDGetCacheEntry( &xDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8014d18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014d1c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014d20:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8014d24:	f107 0320 	add.w	r3, r7, #32
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7f6 ffa7 	bl	800bc7c <eNDGetCacheEntry>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

            if( eResult == eARPCacheHit )
 8014d34:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8014d38:	2b01      	cmp	r3, #1
 8014d3a:	d104      	bne.n	8014d46 <prvTCPReturnPacket_IPV6+0x292>
            {
                pvCopySource = &xMACAddress;
 8014d3c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8014d40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014d44:	e004      	b.n	8014d50 <prvTCPReturnPacket_IPV6+0x29c>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8014d46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014d4a:	3306      	adds	r3, #6
 8014d4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8014d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014d54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8014d58:	2206      	movs	r2, #6
 8014d5a:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8014d5e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8014d62:	f00d fc0d 	bl	8022580 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8014d66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d6c:	33e8      	adds	r3, #232	@ 0xe8
 8014d6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8014d72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014d76:	3306      	adds	r3, #6
 8014d78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8014d7c:	2206      	movs	r2, #6
 8014d7e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8014d82:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8014d86:	f00d fbfb 	bl	8022580 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8014d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d90:	2b3b      	cmp	r3, #59	@ 0x3b
 8014d92:	d81a      	bhi.n	8014dca <prvTCPReturnPacket_IPV6+0x316>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014d94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014d9e:	e00c      	b.n	8014dba <prvTCPReturnPacket_IPV6+0x306>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8014da0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014da4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014da6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014daa:	4413      	add	r3, r2
 8014dac:	2200      	movs	r2, #0
 8014dae:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014db4:	3301      	adds	r3, #1
 8014db6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014dba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014dbe:	2b3b      	cmp	r3, #59	@ 0x3b
 8014dc0:	ddee      	ble.n	8014da0 <prvTCPReturnPacket_IPV6+0x2ec>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8014dc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014dc6:	223c      	movs	r2, #60	@ 0x3c
 8014dc8:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 8014dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014dd0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d104      	bne.n	8014de2 <prvTCPReturnPacket_IPV6+0x32e>
 8014dd8:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8014ddc:	4825      	ldr	r0, [pc, #148]	@ (8014e74 <prvTCPReturnPacket_IPV6+0x3c0>)
 8014dde:	f7ec fdbb 	bl	8001958 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8014de2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014de8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014dec:	68db      	ldr	r3, [r3, #12]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d104      	bne.n	8014dfc <prvTCPReturnPacket_IPV6+0x348>
 8014df2:	f240 1119 	movw	r1, #281	@ 0x119
 8014df6:	481f      	ldr	r0, [pc, #124]	@ (8014e74 <prvTCPReturnPacket_IPV6+0x3c0>)
 8014df8:	f7ec fdae 	bl	8001958 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8014dfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014e02:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014e06:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8014e08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014e0a:	68db      	ldr	r3, [r3, #12]
 8014e0c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8014e10:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014e14:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8014e16:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8014e18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d122      	bne.n	8014e66 <prvTCPReturnPacket_IPV6+0x3b2>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8014e20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014e24:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 8014e28:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8014e2c:	021b      	lsls	r3, r3, #8
 8014e2e:	4313      	orrs	r3, r2
 8014e30:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8014e34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014e38:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014e3a:	b29a      	uxth	r2, r3
 8014e3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014e40:	86da      	strh	r2, [r3, #54]	@ 0x36
 8014e42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014e46:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8014e4a:	871a      	strh	r2, [r3, #56]	@ 0x38

                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014e50:	f103 0008 	add.w	r0, r3, #8
 8014e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014e58:	3318      	adds	r3, #24
 8014e5a:	2210      	movs	r2, #16
 8014e5c:	4619      	mov	r1, r3
 8014e5e:	f00d fb8f 	bl	8022580 <memcpy>
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );
}
 8014e62:	e000      	b.n	8014e66 <prvTCPReturnPacket_IPV6+0x3b2>
            break;
 8014e64:	bf00      	nop
}
 8014e66:	bf00      	nop
 8014e68:	37a8      	adds	r7, #168	@ 0xa8
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8014e6e:	bf00      	nop
 8014e70:	08026afc 	.word	0x08026afc
 8014e74:	08026b24 	.word	0x08026b24

08014e78 <prvTCPPrepareConnect_IPV6>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8014e78:	b590      	push	{r4, r7, lr}
 8014e7a:	b093      	sub	sp, #76	@ 0x4c
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8014e80:	2300      	movs	r3, #0
 8014e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
    IPHeader_IPv6_t * pxIPHeader = NULL;
 8014e84:	2300      	movs	r3, #0
 8014e86:	63bb      	str	r3, [r7, #56]	@ 0x38
    eARPLookupResult_t eReturned;
    IP_Address_t xRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8014e88:	2301      	movs	r3, #1
 8014e8a:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t ulInitialSequenceNumber = 0;
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	643b      	str	r3, [r7, #64]	@ 0x40
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014e90:	2300      	movs	r3, #0
 8014e92:	637b      	str	r3, [r7, #52]	@ 0x34
    NetworkEndPoint_t * pxEndPoint = NULL;
 8014e94:	2300      	movs	r3, #0
 8014e96:	60fb      	str	r3, [r7, #12]

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8014e98:	f107 0310 	add.w	r3, r7, #16
 8014e9c:	2206      	movs	r2, #6
 8014e9e:	2100      	movs	r1, #0
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f00d fc7a 	bl	802279a <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ( void ) memset( xRemoteIP.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 8014ea6:	f107 0318 	add.w	r3, r7, #24
 8014eaa:	2210      	movs	r2, #16
 8014eac:	2100      	movs	r1, #0
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f00d fc73 	bl	802279a <memset>
    ( void ) memcpy( xRemoteIP.xIP_IPv6.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	3354      	adds	r3, #84	@ 0x54
 8014eb8:	f107 0418 	add.w	r4, r7, #24
 8014ebc:	6818      	ldr	r0, [r3, #0]
 8014ebe:	6859      	ldr	r1, [r3, #4]
 8014ec0:	689a      	ldr	r2, [r3, #8]
 8014ec2:	68db      	ldr	r3, [r3, #12]
 8014ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    eReturned = eNDGetCacheEntry( &( xRemoteIP.xIP_IPv6 ), &( xEthAddress ), &( pxEndPoint ) );
 8014ec6:	f107 020c 	add.w	r2, r7, #12
 8014eca:	f107 0110 	add.w	r1, r7, #16
 8014ece:	f107 0318 	add.w	r3, r7, #24
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	f7f6 fed2 	bl	800bc7c <eNDGetCacheEntry>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    FreeRTOS_printf( ( "eNDGetCacheEntry: %d with end-point %p\n", eReturned, ( void * ) pxEndPoint ) );
 8014ede:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014ee2:	68fa      	ldr	r2, [r7, #12]
 8014ee4:	4619      	mov	r1, r3
 8014ee6:	4881      	ldr	r0, [pc, #516]	@ (80150ec <prvTCPPrepareConnect_IPV6+0x274>)
 8014ee8:	f00d f92e 	bl	8022148 <lUDPLoggingPrintf>

    if( pxEndPoint != NULL )
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d002      	beq.n	8014ef8 <prvTCPPrepareConnect_IPV6+0x80>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 8014ef2:	68fa      	ldr	r2, [r7, #12]
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                          &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8014ef8:	6878      	ldr	r0, [r7, #4]
 8014efa:	f7f5 f887 	bl	800a00c <uxIPHeaderSizeSocket>
 8014efe:	4603      	mov	r3, r0
 8014f00:	330e      	adds	r3, #14
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8014f02:	33a0      	adds	r3, #160	@ 0xa0
 8014f04:	687a      	ldr	r2, [r7, #4]
 8014f06:	4413      	add	r3, r2
 8014f08:	330a      	adds	r3, #10
 8014f0a:	637b      	str	r3, [r7, #52]	@ 0x34

    switch( eReturned )
 8014f0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014f10:	2b01      	cmp	r3, #1
 8014f12:	d02c      	beq.n	8014f6e <prvTCPPrepareConnect_IPV6+0xf6>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	b2da      	uxtb	r2, r3
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_printf( ( "Looking up %pip with%s end-point\n", ( void * ) xRemoteIP.xIP_IPv6.ucBytes, ( pxEndPoint != NULL ) ? "" : "out" ) );
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d001      	beq.n	8014f2e <prvTCPPrepareConnect_IPV6+0xb6>
 8014f2a:	4a71      	ldr	r2, [pc, #452]	@ (80150f0 <prvTCPPrepareConnect_IPV6+0x278>)
 8014f2c:	e000      	b.n	8014f30 <prvTCPPrepareConnect_IPV6+0xb8>
 8014f2e:	4a71      	ldr	r2, [pc, #452]	@ (80150f4 <prvTCPPrepareConnect_IPV6+0x27c>)
 8014f30:	f107 0318 	add.w	r3, r7, #24
 8014f34:	4619      	mov	r1, r3
 8014f36:	4870      	ldr	r0, [pc, #448]	@ (80150f8 <prvTCPPrepareConnect_IPV6+0x280>)
 8014f38:	f00d f906 	bl	8022148 <lUDPLoggingPrintf>

            if( pxEndPoint != NULL )
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d012      	beq.n	8014f68 <prvTCPPrepareConnect_IPV6+0xf0>
            {
                size_t uxNeededSize;
                NetworkBufferDescriptor_t * pxNetworkBuffer;

                uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 8014f42:	2356      	movs	r3, #86	@ 0x56
 8014f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 8014f46:	2100      	movs	r1, #0
 8014f48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f4a:	f002 f9ed 	bl	8017328 <pxGetNetworkBufferWithDescriptor>
 8014f4e:	62b8      	str	r0, [r7, #40]	@ 0x28

                if( pxNetworkBuffer != NULL )
 8014f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d008      	beq.n	8014f68 <prvTCPPrepareConnect_IPV6+0xf0>
                {
                    pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8014f56:	68fa      	ldr	r2, [r7, #12]
 8014f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f5a:	631a      	str	r2, [r3, #48]	@ 0x30
                    vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xRemoteIP.xIP_IPv6 ) );
 8014f5c:	f107 0318 	add.w	r3, r7, #24
 8014f60:	4619      	mov	r1, r3
 8014f62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014f64:	f7f7 f8f6 	bl	800c154 <vNDSendNeighbourSolicitation>
                }
            }

            xReturn = pdFALSE;
 8014f68:	2300      	movs	r3, #0
 8014f6a:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 8014f6c:	e000      	b.n	8014f70 <prvTCPPrepareConnect_IPV6+0xf8>
            break;            /* We can now prepare the SYN packet. */
 8014f6e:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8014f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d010      	beq.n	8014f98 <prvTCPPrepareConnect_IPV6+0x120>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014f88:	f7ec fd06 	bl	8001998 <ulApplicationGetNextSequenceNumber>
 8014f8c:	6438      	str	r0, [r7, #64]	@ 0x40
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8014f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d101      	bne.n	8014f98 <prvTCPPrepareConnect_IPV6+0x120>
        {
            xReturn = pdFALSE;
 8014f94:	2300      	movs	r3, #0
 8014f96:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    if( xReturn != pdFALSE )
 8014f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d05d      	beq.n	801505a <prvTCPPrepareConnect_IPV6+0x1e2>
         * the buffer onto the TCPPacket_IPv6_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	33aa      	adds	r3, #170	@ 0xaa
 8014fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxIPHeader = &( pxTCPPacket->xIPHeader );
 8014fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014fa6:	330e      	adds	r3, #14
 8014fa8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	2200      	movs	r2, #0
 8014fae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8014fb2:	687a      	ldr	r2, [r7, #4]
 8014fb4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014fb8:	f043 0308 	orr.w	r3, r3, #8
 8014fbc:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	33aa      	adds	r3, #170	@ 0xaa
 8014fc4:	225a      	movs	r2, #90	@ 0x5a
 8014fc6:	2100      	movs	r1, #0
 8014fc8:	4618      	mov	r0, r3
 8014fca:	f00d fbe6 	bl	802279a <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &( pxTCPPacket->xEthernetHeader.xSourceAddress ) ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8014fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014fd0:	3306      	adds	r3, #6
 8014fd2:	461a      	mov	r2, r3
 8014fd4:	f107 0310 	add.w	r3, r7, #16
 8014fd8:	6818      	ldr	r0, [r3, #0]
 8014fda:	6010      	str	r0, [r2, #0]
 8014fdc:	889b      	ldrh	r3, [r3, #4]
 8014fde:	8093      	strh	r3, [r2, #4]

        if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	7a1b      	ldrb	r3, [r3, #8]
 8014fe4:	f003 0301 	and.w	r3, r3, #1
 8014fe8:	b2db      	uxtb	r3, r3
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d035      	beq.n	801505a <prvTCPPrepareConnect_IPV6+0x1e2>
        {
            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 8014fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	f062 0279 	orn	r2, r2, #121	@ 0x79
 8014ff6:	731a      	strb	r2, [r3, #12]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	f062 0222 	orn	r2, r2, #34	@ 0x22
 8014ffe:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionTrafficClass = ( uint8_t ) 0x60U;
 8015000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015002:	2260      	movs	r2, #96	@ 0x60
 8015004:	701a      	strb	r2, [r3, #0]
            pxIPHeader->ucTrafficClassFlow = ( uint8_t ) 0x00;
 8015006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015008:	2200      	movs	r2, #0
 801500a:	705a      	strb	r2, [r3, #1]
            pxIPHeader->usFlowLabel = ( uint16_t ) 0x0000U;
 801500c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801500e:	2200      	movs	r2, #0
 8015010:	709a      	strb	r2, [r3, #2]
 8015012:	2200      	movs	r2, #0
 8015014:	70da      	strb	r2, [r3, #3]
            pxIPHeader->usPayloadLength = FreeRTOS_htons( sizeof( TCPHeader_t ) );
 8015016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015018:	2200      	movs	r2, #0
 801501a:	711a      	strb	r2, [r3, #4]
 801501c:	2200      	movs	r2, #0
 801501e:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 8015022:	715a      	strb	r2, [r3, #5]
            pxIPHeader->ucNextHeader = ( uint8_t ) ipPROTOCOL_TCP;
 8015024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015026:	2206      	movs	r2, #6
 8015028:	719a      	strb	r2, [r3, #6]
            pxIPHeader->ucHopLimit = 128;
 801502a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801502c:	2280      	movs	r2, #128	@ 0x80
 801502e:	71da      	strb	r2, [r3, #7]
            /* The Source and Destination addresses will be swapped later. */
            ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xSourceAddress.ucBytes ) );
 8015030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015032:	f103 0008 	add.w	r0, r3, #8
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	3354      	adds	r3, #84	@ 0x54
 801503a:	2210      	movs	r2, #16
 801503c:	4619      	mov	r1, r3
 801503e:	f00d fa9f 	bl	8022580 <memcpy>
            ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xDestinationAddress.ucBytes ) );
 8015042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015044:	f103 0018 	add.w	r0, r3, #24
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	3328      	adds	r3, #40	@ 0x28
 801504c:	2210      	movs	r2, #16
 801504e:	4619      	mov	r1, r3
 8015050:	f00d fa96 	bl	8022580 <memcpy>
            pxEndPoint = pxSocket->pxEndPoint;
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015058:	60fb      	str	r3, [r7, #12]
        }
    }

    if( pxEndPoint != NULL )
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d03a      	beq.n	80150d6 <prvTCPPrepareConnect_IPV6+0x25e>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 8015060:	68fa      	ldr	r2, [r7, #12]
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	64da      	str	r2, [r3, #76]	@ 0x4c

        pxProtocolHeaders->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801506c:	021b      	lsls	r3, r3, #8
 801506e:	b21a      	sxth	r2, r3
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015076:	0a1b      	lsrs	r3, r3, #8
 8015078:	b29b      	uxth	r3, r3
 801507a:	b21b      	sxth	r3, r3
 801507c:	4313      	orrs	r3, r2
 801507e:	b21b      	sxth	r3, r3
 8015080:	b29a      	uxth	r2, r3
 8015082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015084:	801a      	strh	r2, [r3, #0]
        pxProtocolHeaders->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801508a:	021b      	lsls	r3, r3, #8
 801508c:	b21a      	sxth	r2, r3
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8015092:	0a1b      	lsrs	r3, r3, #8
 8015094:	b29b      	uxth	r3, r3
 8015096:	b21b      	sxth	r3, r3
 8015098:	4313      	orrs	r3, r2
 801509a:	b21b      	sxth	r3, r3
 801509c:	b29a      	uxth	r2, r3
 801509e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80150a0:	805a      	strh	r2, [r3, #2]

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2200      	movs	r2, #0
 80150a6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80150ae:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxProtocolHeaders->xTCPHeader.ucTCPOffset = 0x50U;
 80150b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80150b4:	2250      	movs	r2, #80	@ 0x50
 80150b6:	731a      	strb	r2, [r3, #12]

        /* Only set the SYN flag. */
        pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 80150b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80150ba:	2202      	movs	r2, #2
 80150bc:	735a      	strb	r2, [r3, #13]

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 80150be:	6878      	ldr	r0, [r7, #4]
 80150c0:	f000 f8d0 	bl	8015264 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f7fe fbbf 	bl	8013848 <prvTCPCreateWindow>
 80150ca:	4603      	mov	r3, r0
 80150cc:	2b01      	cmp	r3, #1
 80150ce:	d007      	beq.n	80150e0 <prvTCPPrepareConnect_IPV6+0x268>
        {
            xReturn = pdFAIL;
 80150d0:	2300      	movs	r3, #0
 80150d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80150d4:	e004      	b.n	80150e0 <prvTCPPrepareConnect_IPV6+0x268>
        }
    }
    else
    {
        FreeRTOS_printf( ( "prvTCPPrepareConnect: No pxEndPoint yet?\n" ) );
 80150d6:	4809      	ldr	r0, [pc, #36]	@ (80150fc <prvTCPPrepareConnect_IPV6+0x284>)
 80150d8:	f00d f836 	bl	8022148 <lUDPLoggingPrintf>
        xReturn = pdFAIL;
 80150dc:	2300      	movs	r3, #0
 80150de:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    return xReturn;
 80150e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80150e2:	4618      	mov	r0, r3
 80150e4:	374c      	adds	r7, #76	@ 0x4c
 80150e6:	46bd      	mov	sp, r7
 80150e8:	bd90      	pop	{r4, r7, pc}
 80150ea:	bf00      	nop
 80150ec:	08026b64 	.word	0x08026b64
 80150f0:	08026b8c 	.word	0x08026b8c
 80150f4:	08026b90 	.word	0x08026b90
 80150f8:	08026b94 	.word	0x08026b94
 80150fc:	08026bb8 	.word	0x08026bb8

08015100 <prvTCPSendSpecialPktHelper_IPV6>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b086      	sub	sp, #24
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
 8015108:	460b      	mov	r3, r1
 801510a:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_IPv6_t * pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015110:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 8015112:	233c      	movs	r3, #60	@ 0x3c
 8015114:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8015116:	697b      	ldr	r3, [r7, #20]
 8015118:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801511c:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 801511e:	697b      	ldr	r3, [r7, #20]
 8015120:	78fa      	ldrb	r2, [r7, #3]
 8015122:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8015126:	697b      	ldr	r3, [r7, #20]
 8015128:	2250      	movs	r2, #80	@ 0x50
 801512a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 801512e:	7bfb      	ldrb	r3, [r7, #15]
 8015130:	f003 0302 	and.w	r3, r3, #2
 8015134:	2b00      	cmp	r3, #0
 8015136:	d02c      	beq.n	8015192 <prvTCPSendSpecialPktHelper_IPV6+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8015138:	697b      	ldr	r3, [r7, #20]
 801513a:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 801513e:	061a      	lsls	r2, r3, #24
 8015140:	697b      	ldr	r3, [r7, #20]
 8015142:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8015146:	021b      	lsls	r3, r3, #8
 8015148:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801514c:	431a      	orrs	r2, r3
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8015154:	0a1b      	lsrs	r3, r3, #8
 8015156:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801515a:	431a      	orrs	r2, r3
 801515c:	697b      	ldr	r3, [r7, #20]
 801515e:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8015162:	0e1b      	lsrs	r3, r3, #24
 8015164:	4313      	orrs	r3, r2
 8015166:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 8015168:	68bb      	ldr	r3, [r7, #8]
 801516a:	3301      	adds	r3, #1
 801516c:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 801516e:	68bb      	ldr	r3, [r7, #8]
 8015170:	061a      	lsls	r2, r3, #24
 8015172:	68bb      	ldr	r3, [r7, #8]
 8015174:	021b      	lsls	r3, r3, #8
 8015176:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801517a:	431a      	orrs	r2, r3
 801517c:	68bb      	ldr	r3, [r7, #8]
 801517e:	0a1b      	lsrs	r3, r3, #8
 8015180:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015184:	431a      	orrs	r2, r3
 8015186:	68bb      	ldr	r3, [r7, #8]
 8015188:	0e1b      	lsrs	r3, r3, #24
 801518a:	431a      	orrs	r2, r3
 801518c:	697b      	ldr	r3, [r7, #20]
 801518e:	f8c3 203a 	str.w	r2, [r3, #58]	@ 0x3a
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8015192:	2300      	movs	r3, #0
 8015194:	693a      	ldr	r2, [r7, #16]
 8015196:	6879      	ldr	r1, [r7, #4]
 8015198:	2000      	movs	r0, #0
 801519a:	f7fe f9f9 	bl	8013590 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 801519e:	2300      	movs	r3, #0
}
 80151a0:	4618      	mov	r0, r3
 80151a2:	3718      	adds	r7, #24
 80151a4:	46bd      	mov	sp, r7
 80151a6:	bd80      	pop	{r7, pc}

080151a8 <prvTCPFlagMeaning>:
 * @param[in] xFlags The TCP flags.
 *
 * @return The string containing the flags.
 */
        const char * prvTCPFlagMeaning( UBaseType_t xFlags )
        {
 80151a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151aa:	b08d      	sub	sp, #52	@ 0x34
 80151ac:	af08      	add	r7, sp, #32
 80151ae:	6078      	str	r0, [r7, #4]
            size_t uxFlags = ( size_t ) xFlags;
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	60fb      	str	r3, [r7, #12]

            ( void ) snprintf( retString,
                               sizeof( retString ), "%c%c%c%c%c%c%c%c",
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_FIN ) != 0 ) ? 'F' : '.',   /* 0x0001: No more data from sender */
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	f003 0301 	and.w	r3, r3, #1
            ( void ) snprintf( retString,
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d002      	beq.n	80151c4 <prvTCPFlagMeaning+0x1c>
 80151be:	f04f 0c46 	mov.w	ip, #70	@ 0x46
 80151c2:	e001      	b.n	80151c8 <prvTCPFlagMeaning+0x20>
 80151c4:	f04f 0c2e 	mov.w	ip, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_SYN ) != 0 ) ? 'S' : '.',   /* 0x0002: Synchronize sequence numbers */
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	f003 0302 	and.w	r3, r3, #2
            ( void ) snprintf( retString,
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d001      	beq.n	80151d6 <prvTCPFlagMeaning+0x2e>
 80151d2:	2353      	movs	r3, #83	@ 0x53
 80151d4:	e000      	b.n	80151d8 <prvTCPFlagMeaning+0x30>
 80151d6:	232e      	movs	r3, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_RST ) != 0 ) ? 'R' : '.',   /* 0x0004: Reset the connection */
 80151d8:	68fa      	ldr	r2, [r7, #12]
 80151da:	f002 0204 	and.w	r2, r2, #4
            ( void ) snprintf( retString,
 80151de:	2a00      	cmp	r2, #0
 80151e0:	d001      	beq.n	80151e6 <prvTCPFlagMeaning+0x3e>
 80151e2:	2252      	movs	r2, #82	@ 0x52
 80151e4:	e000      	b.n	80151e8 <prvTCPFlagMeaning+0x40>
 80151e6:	222e      	movs	r2, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 ) ? 'P' : '.',   /* 0x0008: Push function: please push buffered data to the recv application */
 80151e8:	68f9      	ldr	r1, [r7, #12]
 80151ea:	f001 0108 	and.w	r1, r1, #8
            ( void ) snprintf( retString,
 80151ee:	2900      	cmp	r1, #0
 80151f0:	d001      	beq.n	80151f6 <prvTCPFlagMeaning+0x4e>
 80151f2:	2150      	movs	r1, #80	@ 0x50
 80151f4:	e000      	b.n	80151f8 <prvTCPFlagMeaning+0x50>
 80151f6:	212e      	movs	r1, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ACK ) != 0 ) ? 'A' : '.',   /* 0x0010: Acknowledgment field is significant */
 80151f8:	68f8      	ldr	r0, [r7, #12]
 80151fa:	f000 0010 	and.w	r0, r0, #16
            ( void ) snprintf( retString,
 80151fe:	2800      	cmp	r0, #0
 8015200:	d001      	beq.n	8015206 <prvTCPFlagMeaning+0x5e>
 8015202:	2041      	movs	r0, #65	@ 0x41
 8015204:	e000      	b.n	8015208 <prvTCPFlagMeaning+0x60>
 8015206:	202e      	movs	r0, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_URG ) != 0 ) ? 'U' : '.',   /* 0x0020: Urgent pointer field is significant */
 8015208:	68fc      	ldr	r4, [r7, #12]
 801520a:	f004 0420 	and.w	r4, r4, #32
            ( void ) snprintf( retString,
 801520e:	2c00      	cmp	r4, #0
 8015210:	d001      	beq.n	8015216 <prvTCPFlagMeaning+0x6e>
 8015212:	2455      	movs	r4, #85	@ 0x55
 8015214:	e000      	b.n	8015218 <prvTCPFlagMeaning+0x70>
 8015216:	242e      	movs	r4, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 ) ? 'E' : '.',   /* 0x0040: ECN-Echo */
 8015218:	68fd      	ldr	r5, [r7, #12]
 801521a:	f005 0540 	and.w	r5, r5, #64	@ 0x40
            ( void ) snprintf( retString,
 801521e:	2d00      	cmp	r5, #0
 8015220:	d001      	beq.n	8015226 <prvTCPFlagMeaning+0x7e>
 8015222:	2545      	movs	r5, #69	@ 0x45
 8015224:	e000      	b.n	8015228 <prvTCPFlagMeaning+0x80>
 8015226:	252e      	movs	r5, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_CWR ) != 0 ) ? 'C' : '.' ); /* 0x0080: Congestion Window Reduced */
 8015228:	68fe      	ldr	r6, [r7, #12]
 801522a:	f006 0680 	and.w	r6, r6, #128	@ 0x80
            ( void ) snprintf( retString,
 801522e:	2e00      	cmp	r6, #0
 8015230:	d001      	beq.n	8015236 <prvTCPFlagMeaning+0x8e>
 8015232:	2643      	movs	r6, #67	@ 0x43
 8015234:	e000      	b.n	8015238 <prvTCPFlagMeaning+0x90>
 8015236:	262e      	movs	r6, #46	@ 0x2e
 8015238:	9606      	str	r6, [sp, #24]
 801523a:	9505      	str	r5, [sp, #20]
 801523c:	9404      	str	r4, [sp, #16]
 801523e:	9003      	str	r0, [sp, #12]
 8015240:	9102      	str	r1, [sp, #8]
 8015242:	9201      	str	r2, [sp, #4]
 8015244:	9300      	str	r3, [sp, #0]
 8015246:	4663      	mov	r3, ip
 8015248:	4a04      	ldr	r2, [pc, #16]	@ (801525c <prvTCPFlagMeaning+0xb4>)
 801524a:	210a      	movs	r1, #10
 801524c:	4804      	ldr	r0, [pc, #16]	@ (8015260 <prvTCPFlagMeaning+0xb8>)
 801524e:	f00d ffa7 	bl	80231a0 <snprintf>
            return retString;
 8015252:	4b03      	ldr	r3, [pc, #12]	@ (8015260 <prvTCPFlagMeaning+0xb8>)
        }
 8015254:	4618      	mov	r0, r3
 8015256:	3714      	adds	r7, #20
 8015258:	46bd      	mov	sp, r7
 801525a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801525c:	08026be4 	.word	0x08026be4
 8015260:	200015a4 	.word	0x200015a4

08015264 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
    void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 8015264:	b580      	push	{r7, lr}
 8015266:	b082      	sub	sp, #8
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	7a1b      	ldrb	r3, [r3, #8]
 8015270:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015274:	b2db      	uxtb	r3, r3
 8015276:	2b00      	cmp	r3, #0
 8015278:	d002      	beq.n	8015280 <prvSocketSetMSS+0x1c>
 801527a:	2b01      	cmp	r3, #1
 801527c:	d004      	beq.n	8015288 <prvSocketSetMSS+0x24>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default: /* LCOV_EXCL_LINE */
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 801527e:	e007      	b.n	8015290 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV4( pxSocket );
 8015280:	6878      	ldr	r0, [r7, #4]
 8015282:	f000 f809 	bl	8015298 <prvSocketSetMSS_IPV4>
                    break;
 8015286:	e003      	b.n	8015290 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV6( pxSocket );
 8015288:	6878      	ldr	r0, [r7, #4]
 801528a:	f000 f84b 	bl	8015324 <prvSocketSetMSS_IPV6>
                    break;
 801528e:	bf00      	nop
        }
    }
 8015290:	bf00      	nop
 8015292:	3708      	adds	r7, #8
 8015294:	46bd      	mov	sp, r7
 8015296:	bd80      	pop	{r7, pc}

08015298 <prvSocketSetMSS_IPV4>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8015298:	b580      	push	{r7, lr}
 801529a:	b084      	sub	sp, #16
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 80152a0:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80152a4:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxSocket->pxEndPoint;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80152aa:	60bb      	str	r3, [r7, #8]

    if( pxEndPoint != NULL )
 80152ac:	68bb      	ldr	r3, [r7, #8]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d023      	beq.n	80152fa <prvSocketSetMSS_IPV4+0x62>
    {
        /* Do not allow MSS smaller than tcpMINIMUM_SEGMENT_LENGTH. */
        #if ( ipconfigTCP_MSS >= tcpMINIMUM_SEGMENT_LENGTH )
        {
            ulMSS = ipconfigTCP_MSS;
 80152b2:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80152b6:	60fb      	str	r3, [r7, #12]
            ulMSS = tcpMINIMUM_SEGMENT_LENGTH;
        }
        #endif

        /* Check if the remote IP-address belongs to the same netmask. */
        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 ) ^ pxEndPoint->ipv4_settings.ulIPAddress ) & pxEndPoint->ipv4_settings.ulNetMask ) != 0U )
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80152bc:	061a      	lsls	r2, r3, #24
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80152c2:	021b      	lsls	r3, r3, #8
 80152c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80152c8:	431a      	orrs	r2, r3
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80152ce:	0a1b      	lsrs	r3, r3, #8
 80152d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80152d4:	431a      	orrs	r2, r3
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80152da:	0e1b      	lsrs	r3, r3, #24
 80152dc:	431a      	orrs	r2, r3
 80152de:	68bb      	ldr	r3, [r7, #8]
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	405a      	eors	r2, r3
 80152e4:	68bb      	ldr	r3, [r7, #8]
 80152e6:	685b      	ldr	r3, [r3, #4]
 80152e8:	4013      	ands	r3, r2
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d005      	beq.n	80152fa <prvSocketSetMSS_IPV4+0x62>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 80152ee:	68f9      	ldr	r1, [r7, #12]
 80152f0:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 80152f4:	f7f5 fbbe 	bl	800aa74 <FreeRTOS_min_uint32>
 80152f8:	60f8      	str	r0, [r7, #12]
        }
    }

    FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %xip port %u\n", ( unsigned ) ulMSS, ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort ) );
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015304:	68f9      	ldr	r1, [r7, #12]
 8015306:	4806      	ldr	r0, [pc, #24]	@ (8015320 <prvSocketSetMSS_IPV4+0x88>)
 8015308:	f00c ff1e 	bl	8022148 <lUDPLoggingPrintf>

    pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	b29a      	uxth	r2, r3
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8015316:	bf00      	nop
 8015318:	3710      	adds	r7, #16
 801531a:	46bd      	mov	sp, r7
 801531c:	bd80      	pop	{r7, pc}
 801531e:	bf00      	nop
 8015320:	08026bf8 	.word	0x08026bf8

08015324 <prvSocketSetMSS_IPV6>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b090      	sub	sp, #64	@ 0x40
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 801532c:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8015330:	63fb      	str	r3, [r7, #60]	@ 0x3c

    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        char cIPv6Address[ 40 ];
    #endif

    const NetworkEndPoint_t * pxEndPoint = NULL;
 8015332:	2300      	movs	r3, #0
 8015334:	63bb      	str	r3, [r7, #56]	@ 0x38

    do
    {
        if( pxSocket == NULL )
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d103      	bne.n	8015344 <prvSocketSetMSS_IPV6+0x20>
        {
            /* If NULL socket handler, skip all following steps. */
            FreeRTOS_debug_printf( ( "prvSocketSetMSS_IPV6: NULL socket handler\n" ) );
 801533c:	481f      	ldr	r0, [pc, #124]	@ (80153bc <prvSocketSetMSS_IPV6+0x98>)
 801533e:	f00c ff03 	bl	8022148 <lUDPLoggingPrintf>

            break;
 8015342:	e036      	b.n	80153b2 <prvSocketSetMSS_IPV6+0x8e>
        }

        pxEndPoint = pxSocket->pxEndPoint;
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015348:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( pxEndPoint != NULL )
 801534a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801534c:	2b00      	cmp	r3, #0
 801534e:	d018      	beq.n	8015382 <prvSocketSetMSS_IPV6+0x5e>
        {
            IPv6_Type_t eType;

            /* Compared to IPv4, an IPv6 header is 20 bytes longer.
             * It must be subtracted from the MSS. */
            size_t uxDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 8015350:	2314      	movs	r3, #20
 8015352:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
             * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
            ulMSS = ( uint32_t ) ( ipconfigTCP_MSS - uxDifference );
 8015354:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015356:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 801535a:	1a9b      	subs	r3, r3, r2
 801535c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            eType = xIPv6_GetIPType( &( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6 ) );
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	3354      	adds	r3, #84	@ 0x54
 8015362:	4618      	mov	r0, r3
 8015364:	f7f8 fdb4 	bl	800ded0 <xIPv6_GetIPType>
 8015368:	4603      	mov	r3, r0
 801536a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if( eType == eIPv6_Global )
 801536e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015372:	2b00      	cmp	r3, #0
 8015374:	d105      	bne.n	8015382 <prvSocketSetMSS_IPV6+0x5e>
            {
                /* The packet will travel through Internet, make the MSS
                 * smaller. */
                ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8015376:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015378:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 801537c:	f7f5 fb7a 	bl	800aa74 <FreeRTOS_min_uint32>
 8015380:	63f8      	str	r0, [r7, #60]	@ 0x3c
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, cIPv6Address, sizeof( cIPv6Address ) );
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8015388:	f107 0208 	add.w	r2, r7, #8
 801538c:	2328      	movs	r3, #40	@ 0x28
 801538e:	200a      	movs	r0, #10
 8015390:	f7fa f8c0 	bl	800f514 <FreeRTOS_inet_ntop>
            FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %s ip port %u\n", ( unsigned ) ulMSS, cIPv6Address, pxSocket->u.xTCP.usRemotePort ) );
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801539a:	f107 0208 	add.w	r2, r7, #8
 801539e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80153a0:	4807      	ldr	r0, [pc, #28]	@ (80153c0 <prvSocketSetMSS_IPV6+0x9c>)
 80153a2:	f00c fed1 	bl	8022148 <lUDPLoggingPrintf>
        }
        #endif

        pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 80153a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80153a8:	b29a      	uxth	r2, r3
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    } while( ipFALSE_BOOL );
}
 80153b0:	bf00      	nop
 80153b2:	bf00      	nop
 80153b4:	3740      	adds	r7, #64	@ 0x40
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd80      	pop	{r7, pc}
 80153ba:	bf00      	nop
 80153bc:	08026c24 	.word	0x08026c24
 80153c0:	08026c50 	.word	0x08026c50

080153c4 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 80153c4:	b480      	push	{r7}
 80153c6:	b085      	sub	sp, #20
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
 80153cc:	6039      	str	r1, [r7, #0]
            BaseType_t xResult = pdFALSE;
 80153ce:	2300      	movs	r3, #0
 80153d0:	60fb      	str	r3, [r7, #12]

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000U ) == 0U )
 80153d2:	683a      	ldr	r2, [r7, #0]
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	1ad3      	subs	r3, r2, r3
 80153d8:	2b00      	cmp	r3, #0
 80153da:	db01      	blt.n	80153e0 <xSequenceLessThanOrEqual+0x1c>
            {
                xResult = pdTRUE;
 80153dc:	2301      	movs	r3, #1
 80153de:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 80153e0:	68fb      	ldr	r3, [r7, #12]
        }
 80153e2:	4618      	mov	r0, r3
 80153e4:	3714      	adds	r7, #20
 80153e6:	46bd      	mov	sp, r7
 80153e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ec:	4770      	bx	lr

080153ee <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 80153ee:	b480      	push	{r7}
 80153f0:	b085      	sub	sp, #20
 80153f2:	af00      	add	r7, sp, #0
 80153f4:	6078      	str	r0, [r7, #4]
 80153f6:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 80153f8:	2300      	movs	r3, #0
 80153fa:	60fb      	str	r3, [r7, #12]

        /* Test if a < b */
        if( ( ( b - ( a + 1U ) ) & 0x80000000U ) == 0U )
 80153fc:	683a      	ldr	r2, [r7, #0]
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	1ad3      	subs	r3, r2, r3
 8015402:	3b01      	subs	r3, #1
 8015404:	2b00      	cmp	r3, #0
 8015406:	db01      	blt.n	801540c <xSequenceLessThan+0x1e>
        {
            xResult = pdTRUE;
 8015408:	2301      	movs	r3, #1
 801540a:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 801540c:	68fb      	ldr	r3, [r7, #12]
    }
 801540e:	4618      	mov	r0, r3
 8015410:	3714      	adds	r7, #20
 8015412:	46bd      	mov	sp, r7
 8015414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015418:	4770      	bx	lr

0801541a <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 801541a:	b480      	push	{r7}
 801541c:	b085      	sub	sp, #20
 801541e:	af00      	add	r7, sp, #0
 8015420:	6078      	str	r0, [r7, #4]
 8015422:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8015424:	2300      	movs	r3, #0
 8015426:	60fb      	str	r3, [r7, #12]

        /* Test if a > b */
        if( ( ( a - ( b + 1U ) ) & 0x80000000U ) == 0U )
 8015428:	687a      	ldr	r2, [r7, #4]
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	1ad3      	subs	r3, r2, r3
 801542e:	3b01      	subs	r3, #1
 8015430:	2b00      	cmp	r3, #0
 8015432:	db01      	blt.n	8015438 <xSequenceGreaterThan+0x1e>
        {
            xResult = pdTRUE;
 8015434:	2301      	movs	r3, #1
 8015436:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8015438:	68fb      	ldr	r3, [r7, #12]
    }
 801543a:	4618      	mov	r0, r3
 801543c:	3714      	adds	r7, #20
 801543e:	46bd      	mov	sp, r7
 8015440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015444:	4770      	bx	lr

08015446 <xSequenceGreaterThanOrEqual>:
 *
 * @return pdTRUE if a>=b, else pdFALSE.
 */
    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 8015446:	b480      	push	{r7}
 8015448:	b085      	sub	sp, #20
 801544a:	af00      	add	r7, sp, #0
 801544c:	6078      	str	r0, [r7, #4]
 801544e:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8015450:	2300      	movs	r3, #0
 8015452:	60fb      	str	r3, [r7, #12]

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000U ) == 0U )
 8015454:	687a      	ldr	r2, [r7, #4]
 8015456:	683b      	ldr	r3, [r7, #0]
 8015458:	1ad3      	subs	r3, r2, r3
 801545a:	2b00      	cmp	r3, #0
 801545c:	db01      	blt.n	8015462 <xSequenceGreaterThanOrEqual+0x1c>
        {
            xResult = pdTRUE;
 801545e:	2301      	movs	r3, #1
 8015460:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8015462:	68fb      	ldr	r3, [r7, #12]
    }
 8015464:	4618      	mov	r0, r3
 8015466:	3714      	adds	r7, #20
 8015468:	46bd      	mov	sp, r7
 801546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546e:	4770      	bx	lr

08015470 <vListInsertFifo>:
 * @param[in] pxList The list in which the item is to inserted.
 * @param[in] pxNewListItem The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 8015470:	b580      	push	{r7, lr}
 8015472:	b082      	sub	sp, #8
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
 8015478:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	3308      	adds	r3, #8
 801547e:	461a      	mov	r2, r3
 8015480:	6839      	ldr	r1, [r7, #0]
 8015482:	6878      	ldr	r0, [r7, #4]
 8015484:	f000 f822 	bl	80154cc <vListInsertGeneric>
        }
 8015488:	bf00      	nop
 801548a:	3708      	adds	r7, #8
 801548c:	46bd      	mov	sp, r7
 801548e:	bd80      	pop	{r7, pc}

08015490 <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 8015490:	b580      	push	{r7, lr}
 8015492:	b082      	sub	sp, #8
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
        pxTimer->uxBorn = xTaskGetTickCount();
 8015498:	f7ef fa04 	bl	80048a4 <xTaskGetTickCount>
 801549c:	4602      	mov	r2, r0
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	601a      	str	r2, [r3, #0]
    }
 80154a2:	bf00      	nop
 80154a4:	3708      	adds	r7, #8
 80154a6:	46bd      	mov	sp, r7
 80154a8:	bd80      	pop	{r7, pc}

080154aa <ulTimerGetAge>:
 * @param[in] pxTimer The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 80154aa:	b580      	push	{r7, lr}
 80154ac:	b084      	sub	sp, #16
 80154ae:	af00      	add	r7, sp, #0
 80154b0:	6078      	str	r0, [r7, #4]
        TickType_t uxNow = xTaskGetTickCount();
 80154b2:	f7ef f9f7 	bl	80048a4 <xTaskGetTickCount>
 80154b6:	60f8      	str	r0, [r7, #12]
        TickType_t uxDiff = uxNow - pxTimer->uxBorn;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	68fa      	ldr	r2, [r7, #12]
 80154be:	1ad3      	subs	r3, r2, r3
 80154c0:	60bb      	str	r3, [r7, #8]

        return ( uint32_t ) ( uxDiff * portTICK_PERIOD_MS );
 80154c2:	68bb      	ldr	r3, [r7, #8]
    }
 80154c4:	4618      	mov	r0, r3
 80154c6:	3710      	adds	r7, #16
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}

080154cc <vListInsertGeneric>:
 */
    #if ( ipconfigUSE_TCP_WIN == 1 )
        static void vListInsertGeneric( List_t * const pxList,
                                        ListItem_t * const pxNewListItem,
                                        MiniListItem_t * pxWhere )
        {
 80154cc:	b480      	push	{r7}
 80154ce:	b085      	sub	sp, #20
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	60f8      	str	r0, [r7, #12]
 80154d4:	60b9      	str	r1, [r7, #8]
 80154d6:	607a      	str	r2, [r7, #4]
             * returned by listGET_HEAD_ENTRY() */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewListItem->pxNext = ( ( ListItem_t * ) pxWhere );
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	687a      	ldr	r2, [r7, #4]
 80154dc:	605a      	str	r2, [r3, #4]

            pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	689a      	ldr	r2, [r3, #8]
 80154e2:	68bb      	ldr	r3, [r7, #8]
 80154e4:	609a      	str	r2, [r3, #8]
            pxWhere->pxPrevious->pxNext = pxNewListItem;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	689b      	ldr	r3, [r3, #8]
 80154ea:	68ba      	ldr	r2, [r7, #8]
 80154ec:	605a      	str	r2, [r3, #4]
            pxWhere->pxPrevious = pxNewListItem;
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	68ba      	ldr	r2, [r7, #8]
 80154f2:	609a      	str	r2, [r3, #8]

            /* Remember which list the item is in. */
            listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 80154f4:	68bb      	ldr	r3, [r7, #8]
 80154f6:	68fa      	ldr	r2, [r7, #12]
 80154f8:	611a      	str	r2, [r3, #16]

            ( pxList->uxNumberOfItems )++;
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	1c5a      	adds	r2, r3, #1
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	601a      	str	r2, [r3, #0]
        }
 8015504:	bf00      	nop
 8015506:	3714      	adds	r7, #20
 8015508:	46bd      	mov	sp, r7
 801550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550e:	4770      	bx	lr

08015510 <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 8015510:	b580      	push	{r7, lr}
 8015512:	b082      	sub	sp, #8
 8015514:	af00      	add	r7, sp, #0
            BaseType_t xIndex;
            BaseType_t xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 8015516:	4827      	ldr	r0, [pc, #156]	@ (80155b4 <prvCreateSectors+0xa4>)
 8015518:	f7ed ffde 	bl	80034d8 <vListInitialise>
            xTCPSegments = ( ( TCPSegment_t * ) pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 801551c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8015520:	f7f1 f830 	bl	8006584 <pvPortMalloc>
 8015524:	4603      	mov	r3, r0
 8015526:	4a24      	ldr	r2, [pc, #144]	@ (80155b8 <prvCreateSectors+0xa8>)
 8015528:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 801552a:	4b23      	ldr	r3, [pc, #140]	@ (80155b8 <prvCreateSectors+0xa8>)
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d107      	bne.n	8015542 <prvCreateSectors+0x32>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 8015532:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8015536:	4821      	ldr	r0, [pc, #132]	@ (80155bc <prvCreateSectors+0xac>)
 8015538:	f00c fe06 	bl	8022148 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) ) );

                xReturn = pdFAIL;
 801553c:	2300      	movs	r3, #0
 801553e:	603b      	str	r3, [r7, #0]
 8015540:	e032      	b.n	80155a8 <prvCreateSectors+0x98>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 8015542:	4b1d      	ldr	r3, [pc, #116]	@ (80155b8 <prvCreateSectors+0xa8>)
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801554a:	2100      	movs	r1, #0
 801554c:	4618      	mov	r0, r3
 801554e:	f00d f924 	bl	802279a <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8015552:	2300      	movs	r3, #0
 8015554:	607b      	str	r3, [r7, #4]
 8015556:	e022      	b.n	801559e <prvCreateSectors+0x8e>
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xSegmentItem ) );
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xQueueItem ) );
                    }
                    #endif

                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8015558:	4b17      	ldr	r3, [pc, #92]	@ (80155b8 <prvCreateSectors+0xa8>)
 801555a:	6819      	ldr	r1, [r3, #0]
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	019a      	lsls	r2, r3, #6
 8015560:	4b15      	ldr	r3, [pc, #84]	@ (80155b8 <prvCreateSectors+0xa8>)
 8015562:	6818      	ldr	r0, [r3, #0]
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	019b      	lsls	r3, r3, #6
 8015568:	4403      	add	r3, r0
 801556a:	440a      	add	r2, r1
 801556c:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 801556e:	4b12      	ldr	r3, [pc, #72]	@ (80155b8 <prvCreateSectors+0xa8>)
 8015570:	6819      	ldr	r1, [r3, #0]
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	019a      	lsls	r2, r3, #6
 8015576:	4b10      	ldr	r3, [pc, #64]	@ (80155b8 <prvCreateSectors+0xa8>)
 8015578:	6818      	ldr	r0, [r3, #0]
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	019b      	lsls	r3, r3, #6
 801557e:	4403      	add	r3, r0
 8015580:	440a      	add	r2, r1
 8015582:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 8015584:	4b0c      	ldr	r3, [pc, #48]	@ (80155b8 <prvCreateSectors+0xa8>)
 8015586:	681a      	ldr	r2, [r3, #0]
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	019b      	lsls	r3, r3, #6
 801558c:	4413      	add	r3, r2
 801558e:	332c      	adds	r3, #44	@ 0x2c
 8015590:	4619      	mov	r1, r3
 8015592:	4808      	ldr	r0, [pc, #32]	@ (80155b4 <prvCreateSectors+0xa4>)
 8015594:	f7ff ff6c 	bl	8015470 <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	3301      	adds	r3, #1
 801559c:	607b      	str	r3, [r7, #4]
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80155a2:	ddd9      	ble.n	8015558 <prvCreateSectors+0x48>
                }

                xReturn = pdPASS;
 80155a4:	2301      	movs	r3, #1
 80155a6:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 80155a8:	683b      	ldr	r3, [r7, #0]
        }
 80155aa:	4618      	mov	r0, r3
 80155ac:	3708      	adds	r7, #8
 80155ae:	46bd      	mov	sp, r7
 80155b0:	bd80      	pop	{r7, pc}
 80155b2:	bf00      	nop
 80155b4:	200015b4 	.word	0x200015b4
 80155b8:	200015b0 	.word	0x200015b0
 80155bc:	08026c80 	.word	0x08026c80

080155c0 <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 80155c0:	b480      	push	{r7}
 80155c2:	b087      	sub	sp, #28
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
 80155c8:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 80155ca:	2300      	movs	r3, #0
 80155cc:	613b      	str	r3, [r7, #16]
             * segments. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	33ac      	adds	r3, #172	@ 0xac
 80155d2:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	685b      	ldr	r3, [r3, #4]
 80155d8:	617b      	str	r3, [r7, #20]
 80155da:	e00d      	b.n	80155f8 <xTCPWindowRxFind+0x38>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80155dc:	697b      	ldr	r3, [r7, #20]
 80155de:	68db      	ldr	r3, [r3, #12]
 80155e0:	60bb      	str	r3, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 80155e2:	68bb      	ldr	r3, [r7, #8]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	683a      	ldr	r2, [r7, #0]
 80155e8:	429a      	cmp	r2, r3
 80155ea:	d102      	bne.n	80155f2 <xTCPWindowRxFind+0x32>
                {
                    pxReturn = pxSegment;
 80155ec:	68bb      	ldr	r3, [r7, #8]
 80155ee:	613b      	str	r3, [r7, #16]
                    break;
 80155f0:	e006      	b.n	8015600 <xTCPWindowRxFind+0x40>
                 pxIterator = listGET_NEXT( pxIterator ) )
 80155f2:	697b      	ldr	r3, [r7, #20]
 80155f4:	685b      	ldr	r3, [r3, #4]
 80155f6:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 80155f8:	697a      	ldr	r2, [r7, #20]
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	429a      	cmp	r2, r3
 80155fe:	d1ed      	bne.n	80155dc <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 8015600:	693b      	ldr	r3, [r7, #16]
        }
 8015602:	4618      	mov	r0, r3
 8015604:	371c      	adds	r7, #28
 8015606:	46bd      	mov	sp, r7
 8015608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560c:	4770      	bx	lr
	...

08015610 <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 8015610:	b580      	push	{r7, lr}
 8015612:	b088      	sub	sp, #32
 8015614:	af00      	add	r7, sp, #0
 8015616:	60f8      	str	r0, [r7, #12]
 8015618:	60b9      	str	r1, [r7, #8]
 801561a:	607a      	str	r2, [r7, #4]
 801561c:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 801561e:	4b33      	ldr	r3, [pc, #204]	@ (80156ec <xTCPWindowNew+0xdc>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d10c      	bne.n	8015640 <xTCPWindowNew+0x30>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 8015626:	683b      	ldr	r3, [r7, #0]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d001      	beq.n	8015630 <xTCPWindowNew+0x20>
 801562c:	2352      	movs	r3, #82	@ 0x52
 801562e:	e000      	b.n	8015632 <xTCPWindowNew+0x22>
 8015630:	2354      	movs	r3, #84	@ 0x54
 8015632:	4619      	mov	r1, r3
 8015634:	482e      	ldr	r0, [pc, #184]	@ (80156f0 <xTCPWindowNew+0xe0>)
 8015636:	f00c fd87 	bl	8022148 <lUDPLoggingPrintf>
                pxSegment = NULL;
 801563a:	2300      	movs	r3, #0
 801563c:	61fb      	str	r3, [r7, #28]
 801563e:	e04f      	b.n	80156e0 <xTCPWindowNew+0xd0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 8015640:	4b2a      	ldr	r3, [pc, #168]	@ (80156ec <xTCPWindowNew+0xdc>)
 8015642:	68db      	ldr	r3, [r3, #12]
 8015644:	61bb      	str	r3, [r7, #24]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8015646:	69bb      	ldr	r3, [r7, #24]
 8015648:	68db      	ldr	r3, [r3, #12]
 801564a:	61fb      	str	r3, [r7, #28]

                configASSERT( pxItem != NULL );
 801564c:	69bb      	ldr	r3, [r7, #24]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d104      	bne.n	801565c <xTCPWindowNew+0x4c>
 8015652:	f240 2125 	movw	r1, #549	@ 0x225
 8015656:	4827      	ldr	r0, [pc, #156]	@ (80156f4 <xTCPWindowNew+0xe4>)
 8015658:	f7ec f97e 	bl	8001958 <vAssertCalled>
                configASSERT( pxSegment != NULL );
 801565c:	69fb      	ldr	r3, [r7, #28]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d104      	bne.n	801566c <xTCPWindowNew+0x5c>
 8015662:	f240 2126 	movw	r1, #550	@ 0x226
 8015666:	4823      	ldr	r0, [pc, #140]	@ (80156f4 <xTCPWindowNew+0xe4>)
 8015668:	f7ec f976 	bl	8001958 <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 801566c:	69b8      	ldr	r0, [r7, #24]
 801566e:	f7ed ffbd 	bl	80035ec <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 8015672:	683b      	ldr	r3, [r7, #0]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d006      	beq.n	8015686 <xTCPWindowNew+0x76>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	33a4      	adds	r3, #164	@ 0xa4
 801567c:	69b9      	ldr	r1, [r7, #24]
 801567e:	4618      	mov	r0, r3
 8015680:	f7ff fef6 	bl	8015470 <vListInsertFifo>
 8015684:	e005      	b.n	8015692 <xTCPWindowNew+0x82>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	3390      	adds	r3, #144	@ 0x90
 801568a:	69b9      	ldr	r1, [r7, #24]
 801568c:	4618      	mov	r0, r3
 801568e:	f7ff feef 	bl	8015470 <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 8015692:	69fb      	ldr	r3, [r7, #28]
 8015694:	3310      	adds	r3, #16
 8015696:	4618      	mov	r0, r3
 8015698:	f7ff fefa 	bl	8015490 <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 801569c:	69fb      	ldr	r3, [r7, #28]
 801569e:	2200      	movs	r2, #0
 80156a0:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d001      	beq.n	80156ac <xTCPWindowNew+0x9c>
 80156a8:	2101      	movs	r1, #1
 80156aa:	e000      	b.n	80156ae <xTCPWindowNew+0x9e>
 80156ac:	2100      	movs	r1, #0
 80156ae:	69fa      	ldr	r2, [r7, #28]
 80156b0:	7d93      	ldrb	r3, [r2, #22]
 80156b2:	f361 0382 	bfi	r3, r1, #2, #1
 80156b6:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 80156b8:	69fb      	ldr	r3, [r7, #28]
 80156ba:	687a      	ldr	r2, [r7, #4]
 80156bc:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 80156be:	69fb      	ldr	r3, [r7, #28]
 80156c0:	687a      	ldr	r2, [r7, #4]
 80156c2:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 80156c4:	69fb      	ldr	r3, [r7, #28]
 80156c6:	68ba      	ldr	r2, [r7, #8]
 80156c8:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                    UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 80156ca:	4b08      	ldr	r3, [pc, #32]	@ (80156ec <xTCPWindowNew+0xdc>)
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	617b      	str	r3, [r7, #20]

                    if( xLowestLength > xLength )
 80156d0:	4b09      	ldr	r3, [pc, #36]	@ (80156f8 <xTCPWindowNew+0xe8>)
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	697a      	ldr	r2, [r7, #20]
 80156d6:	429a      	cmp	r2, r3
 80156d8:	d202      	bcs.n	80156e0 <xTCPWindowNew+0xd0>
                    {
                        xLowestLength = xLength;
 80156da:	4a07      	ldr	r2, [pc, #28]	@ (80156f8 <xTCPWindowNew+0xe8>)
 80156dc:	697b      	ldr	r3, [r7, #20]
 80156de:	6013      	str	r3, [r2, #0]
                    }
                }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 80156e0:	69fb      	ldr	r3, [r7, #28]
        }
 80156e2:	4618      	mov	r0, r3
 80156e4:	3720      	adds	r7, #32
 80156e6:	46bd      	mov	sp, r7
 80156e8:	bd80      	pop	{r7, pc}
 80156ea:	bf00      	nop
 80156ec:	200015b4 	.word	0x200015b4
 80156f0:	08026ca4 	.word	0x08026ca4
 80156f4:	08026cd4 	.word	0x08026cd4
 80156f8:	2000001c 	.word	0x2000001c

080156fc <xTCPWindowRxEmpty>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b084      	sub	sp, #16
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801570a:	2b00      	cmp	r3, #0
 801570c:	d002      	beq.n	8015714 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 801570e:	2300      	movs	r3, #0
 8015710:	60fb      	str	r3, [r7, #12]
 8015712:	e01e      	b.n	8015752 <xTCPWindowRxEmpty+0x56>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber + 1U, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	691b      	ldr	r3, [r3, #16]
 8015718:	1c5a      	adds	r2, r3, #1
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	699b      	ldr	r3, [r3, #24]
 801571e:	4619      	mov	r1, r3
 8015720:	4610      	mov	r0, r2
 8015722:	f7ff fe90 	bl	8015446 <xSequenceGreaterThanOrEqual>
 8015726:	4603      	mov	r3, r0
 8015728:	2b00      	cmp	r3, #0
 801572a:	d002      	beq.n	8015732 <xTCPWindowRxEmpty+0x36>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 801572c:	2301      	movs	r3, #1
 801572e:	60fb      	str	r3, [r7, #12]
 8015730:	e00f      	b.n	8015752 <xTCPWindowRxEmpty+0x56>
            }
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %u highest %u (empty)\n",
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	691a      	ldr	r2, [r3, #16]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	68db      	ldr	r3, [r3, #12]
 801573a:	1ad1      	subs	r1, r2, r3
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	699a      	ldr	r2, [r3, #24]
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	68db      	ldr	r3, [r3, #12]
 8015744:	1ad3      	subs	r3, r2, r3
 8015746:	461a      	mov	r2, r3
 8015748:	4804      	ldr	r0, [pc, #16]	@ (801575c <xTCPWindowRxEmpty+0x60>)
 801574a:	f00c fcfd 	bl	8022148 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 801574e:	2300      	movs	r3, #0
 8015750:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 8015752:	68fb      	ldr	r3, [r7, #12]
        }
 8015754:	4618      	mov	r0, r3
 8015756:	3710      	adds	r7, #16
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}
 801575c:	08026d04 	.word	0x08026d04

08015760 <xTCPWindowGetHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 8015760:	b580      	push	{r7, lr}
 8015762:	b084      	sub	sp, #16
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d102      	bne.n	8015776 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 8015770:	2300      	movs	r3, #0
 8015772:	60fb      	str	r3, [r7, #12]
 8015774:	e008      	b.n	8015788 <xTCPWindowGetHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	68db      	ldr	r3, [r3, #12]
 801577a:	60bb      	str	r3, [r7, #8]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 801577c:	68bb      	ldr	r3, [r7, #8]
 801577e:	68db      	ldr	r3, [r3, #12]
 8015780:	60fb      	str	r3, [r7, #12]

                ( void ) uxListRemove( pxItem );
 8015782:	68b8      	ldr	r0, [r7, #8]
 8015784:	f7ed ff32 	bl	80035ec <uxListRemove>
            }

            return pxSegment;
 8015788:	68fb      	ldr	r3, [r7, #12]
        }
 801578a:	4618      	mov	r0, r3
 801578c:	3710      	adds	r7, #16
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}

08015792 <xTCPWindowPeekHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 8015792:	b480      	push	{r7}
 8015794:	b085      	sub	sp, #20
 8015796:	af00      	add	r7, sp, #0
 8015798:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d102      	bne.n	80157a8 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 80157a2:	2300      	movs	r3, #0
 80157a4:	60fb      	str	r3, [r7, #12]
 80157a6:	e005      	b.n	80157b4 <xTCPWindowPeekHead+0x22>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	68db      	ldr	r3, [r3, #12]
 80157ac:	60bb      	str	r3, [r7, #8]
                pxReturn = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	68db      	ldr	r3, [r3, #12]
 80157b2:	60fb      	str	r3, [r7, #12]
            }

            return pxReturn;
 80157b4:	68fb      	ldr	r3, [r7, #12]
        }
 80157b6:	4618      	mov	r0, r3
 80157b8:	3714      	adds	r7, #20
 80157ba:	46bd      	mov	sp, r7
 80157bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c0:	4770      	bx	lr
	...

080157c4 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b082      	sub	sp, #8
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d004      	beq.n	80157de <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	3318      	adds	r3, #24
 80157d8:	4618      	mov	r0, r3
 80157da:	f7ed ff07 	bl	80035ec <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0U;
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	2200      	movs	r2, #0
 80157e2:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	2200      	movs	r2, #0
 80157e8:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0U;
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	2200      	movs	r2, #0
 80157ee:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d004      	beq.n	8015802 <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	332c      	adds	r3, #44	@ 0x2c
 80157fc:	4618      	mov	r0, r3
 80157fe:	f7ed fef5 	bl	80035ec <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	332c      	adds	r3, #44	@ 0x2c
 8015806:	4619      	mov	r1, r3
 8015808:	4803      	ldr	r0, [pc, #12]	@ (8015818 <vTCPWindowFree+0x54>)
 801580a:	f7ff fe31 	bl	8015470 <vListInsertFifo>
        }
 801580e:	bf00      	nop
 8015810:	3708      	adds	r7, #8
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}
 8015816:	bf00      	nop
 8015818:	200015b4 	.word	0x200015b4

0801581c <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 801581c:	b580      	push	{r7, lr}
 801581e:	b086      	sub	sp, #24
 8015820:	af00      	add	r7, sp, #0
 8015822:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 8015824:	2300      	movs	r3, #0
 8015826:	613b      	str	r3, [r7, #16]
 8015828:	e01d      	b.n	8015866 <vTCPWindowDestroy+0x4a>
            {
                if( xRound != 0 )
 801582a:	693b      	ldr	r3, [r7, #16]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d003      	beq.n	8015838 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	33a4      	adds	r3, #164	@ 0xa4
 8015834:	617b      	str	r3, [r7, #20]
 8015836:	e002      	b.n	801583e <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	3390      	adds	r3, #144	@ 0x90
 801583c:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 801583e:	697b      	ldr	r3, [r7, #20]
 8015840:	689b      	ldr	r3, [r3, #8]
 8015842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015846:	d10b      	bne.n	8015860 <vTCPWindowDestroy+0x44>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8015848:	e006      	b.n	8015858 <vTCPWindowDestroy+0x3c>
                    {
                        pxSegment = ( ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 801584a:	697b      	ldr	r3, [r7, #20]
 801584c:	68db      	ldr	r3, [r3, #12]
 801584e:	68db      	ldr	r3, [r3, #12]
 8015850:	60fb      	str	r3, [r7, #12]
                        vTCPWindowFree( pxSegment );
 8015852:	68f8      	ldr	r0, [r7, #12]
 8015854:	f7ff ffb6 	bl	80157c4 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8015858:	697b      	ldr	r3, [r7, #20]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d1f4      	bne.n	801584a <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 8015860:	693b      	ldr	r3, [r7, #16]
 8015862:	3301      	adds	r3, #1
 8015864:	613b      	str	r3, [r7, #16]
 8015866:	693b      	ldr	r3, [r7, #16]
 8015868:	2b01      	cmp	r3, #1
 801586a:	ddde      	ble.n	801582a <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 801586c:	bf00      	nop
 801586e:	bf00      	nop
 8015870:	3718      	adds	r7, #24
 8015872:	46bd      	mov	sp, r7
 8015874:	bd80      	pop	{r7, pc}
	...

08015878 <xTCPWindowCreate>:
                                 uint32_t ulRxWindowLength,
                                 uint32_t ulTxWindowLength,
                                 uint32_t ulAckNumber,
                                 uint32_t ulSequenceNumber,
                                 uint32_t ulMSS )
    {
 8015878:	b580      	push	{r7, lr}
 801587a:	b086      	sub	sp, #24
 801587c:	af00      	add	r7, sp, #0
 801587e:	60f8      	str	r0, [r7, #12]
 8015880:	60b9      	str	r1, [r7, #8]
 8015882:	607a      	str	r2, [r7, #4]
 8015884:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdPASS;
 8015886:	2301      	movs	r3, #1
 8015888:	617b      	str	r3, [r7, #20]

        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( xTCPSegments == NULL )
 801588a:	4b1d      	ldr	r3, [pc, #116]	@ (8015900 <xTCPWindowCreate+0x88>)
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d102      	bne.n	8015898 <xTCPWindowCreate+0x20>
            {
                xReturn = prvCreateSectors();
 8015892:	f7ff fe3d 	bl	8015510 <prvCreateSectors>
 8015896:	6178      	str	r0, [r7, #20]
            }

            vListInitialise( &( pxWindow->xTxSegments ) );
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	3390      	adds	r3, #144	@ 0x90
 801589c:	4618      	mov	r0, r3
 801589e:	f7ed fe1b 	bl	80034d8 <vListInitialise>
            vListInitialise( &( pxWindow->xRxSegments ) );
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	33a4      	adds	r3, #164	@ 0xa4
 80158a6:	4618      	mov	r0, r3
 80158a8:	f7ed fe16 	bl	80034d8 <vListInitialise>

            vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	3340      	adds	r3, #64	@ 0x40
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7ed fe11 	bl	80034d8 <vListInitialise>
            vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	3354      	adds	r3, #84	@ 0x54
 80158ba:	4618      	mov	r0, r3
 80158bc:	f7ed fe0c 	bl	80034d8 <vListInitialise>
            vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	3368      	adds	r3, #104	@ 0x68
 80158c4:	4618      	mov	r0, r3
 80158c6:	f7ed fe07 	bl	80034d8 <vListInitialise>
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        if( xTCPWindowLoggingLevel != 0 )
 80158ca:	4b0e      	ldr	r3, [pc, #56]	@ (8015904 <xTCPWindowCreate+0x8c>)
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d004      	beq.n	80158dc <xTCPWindowCreate+0x64>
        {
            FreeRTOS_debug_printf( ( "xTCPWindowCreate: for WinLen = Rx/Tx: %u/%u\n",
 80158d2:	687a      	ldr	r2, [r7, #4]
 80158d4:	68b9      	ldr	r1, [r7, #8]
 80158d6:	480c      	ldr	r0, [pc, #48]	@ (8015908 <xTCPWindowCreate+0x90>)
 80158d8:	f00c fc36 	bl	8022148 <lUDPLoggingPrintf>
                                     ( unsigned ) ulRxWindowLength, ( unsigned ) ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	68ba      	ldr	r2, [r7, #8]
 80158e0:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	687a      	ldr	r2, [r7, #4]
 80158e6:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 80158e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158ea:	6a3a      	ldr	r2, [r7, #32]
 80158ec:	6839      	ldr	r1, [r7, #0]
 80158ee:	68f8      	ldr	r0, [r7, #12]
 80158f0:	f000 f80c 	bl	801590c <vTCPWindowInit>

        return xReturn;
 80158f4:	697b      	ldr	r3, [r7, #20]
    }
 80158f6:	4618      	mov	r0, r3
 80158f8:	3718      	adds	r7, #24
 80158fa:	46bd      	mov	sp, r7
 80158fc:	bd80      	pop	{r7, pc}
 80158fe:	bf00      	nop
 8015900:	200015b0 	.word	0x200015b0
 8015904:	200015c8 	.word	0x200015c8
 8015908:	08026d34 	.word	0x08026d34

0801590c <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 801590c:	b480      	push	{r7}
 801590e:	b087      	sub	sp, #28
 8015910:	af00      	add	r7, sp, #0
 8015912:	60f8      	str	r0, [r7, #12]
 8015914:	60b9      	str	r1, [r7, #8]
 8015916:	607a      	str	r2, [r7, #4]
 8015918:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 801591a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801591e:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0U;
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	2200      	movs	r2, #0
 8015924:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 8015926:	68fa      	ldr	r2, [r7, #12]
 8015928:	7813      	ldrb	r3, [r2, #0]
 801592a:	f043 0301 	orr.w	r3, r3, #1
 801592e:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0U )
 8015930:	683b      	ldr	r3, [r7, #0]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d024      	beq.n	8015980 <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 801593c:	2b00      	cmp	r3, #0
 801593e:	d004      	beq.n	801594a <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	b29a      	uxth	r2, r3
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015950:	461a      	mov	r2, r3
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	4293      	cmp	r3, r2
 8015956:	d304      	bcc.n	8015962 <vTCPWindowInit+0x56>
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 801595e:	2b00      	cmp	r3, #0
 8015960:	d10e      	bne.n	8015980 <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	685a      	ldr	r2, [r3, #4]
 8015966:	683b      	ldr	r3, [r7, #0]
 8015968:	fbb2 f3f3 	udiv	r3, r2, r3
 801596c:	683a      	ldr	r2, [r7, #0]
 801596e:	fb03 f202 	mul.w	r2, r3, r2
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 8015976:	683b      	ldr	r3, [r7, #0]
 8015978:	b29a      	uxth	r2, r3
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
            pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	697a      	ldr	r2, [r7, #20]
 8015984:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	68ba      	ldr	r2, [r7, #8]
 801598a:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	68ba      	ldr	r2, [r7, #8]
 8015990:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	68ba      	ldr	r2, [r7, #8]
 8015996:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	687a      	ldr	r2, [r7, #4]
 801599c:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	687a      	ldr	r2, [r7, #4]
 80159a2:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	687a      	ldr	r2, [r7, #4]
 80159a8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	687a      	ldr	r2, [r7, #4]
 80159ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	687a      	ldr	r2, [r7, #4]
 80159b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 80159b6:	bf00      	nop
 80159b8:	371c      	adds	r7, #28
 80159ba:	46bd      	mov	sp, r7
 80159bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c0:	4770      	bx	lr
	...

080159c4 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 80159c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159c6:	b08f      	sub	sp, #60	@ 0x3c
 80159c8:	af04      	add	r7, sp, #16
 80159ca:	60f8      	str	r0, [r7, #12]
 80159cc:	60b9      	str	r1, [r7, #8]
 80159ce:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 80159d0:	2300      	movs	r3, #0
 80159d2:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 80159d4:	68ba      	ldr	r2, [r7, #8]
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	4413      	add	r3, r2
 80159da:	61fb      	str	r3, [r7, #28]

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	33ac      	adds	r3, #172	@ 0xac
 80159e0:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 80159e2:	69bb      	ldr	r3, [r7, #24]
 80159e4:	685b      	ldr	r3, [r3, #4]
 80159e6:	623b      	str	r3, [r7, #32]
 80159e8:	e027      	b.n	8015a3a <xTCPWindowRxConfirm+0x76>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80159ea:	6a3b      	ldr	r3, [r7, #32]
 80159ec:	68db      	ldr	r3, [r3, #12]
 80159ee:	617b      	str	r3, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 80159f0:	697b      	ldr	r3, [r7, #20]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	68b9      	ldr	r1, [r7, #8]
 80159f6:	4618      	mov	r0, r3
 80159f8:	f7ff fd25 	bl	8015446 <xSequenceGreaterThanOrEqual>
 80159fc:	4603      	mov	r3, r0
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d018      	beq.n	8015a34 <xTCPWindowRxConfirm+0x70>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 8015a02:	697b      	ldr	r3, [r7, #20]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	69f9      	ldr	r1, [r7, #28]
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f7ff fcf0 	bl	80153ee <xSequenceLessThan>
 8015a0e:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d00f      	beq.n	8015a34 <xTCPWindowRxConfirm+0x70>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 8015a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d00a      	beq.n	8015a30 <xTCPWindowRxConfirm+0x6c>
 8015a1a:	697b      	ldr	r3, [r7, #20]
 8015a1c:	681a      	ldr	r2, [r3, #0]
 8015a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	4619      	mov	r1, r3
 8015a24:	4610      	mov	r0, r2
 8015a26:	f7ff fce2 	bl	80153ee <xSequenceLessThan>
 8015a2a:	4603      	mov	r3, r0
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d001      	beq.n	8015a34 <xTCPWindowRxConfirm+0x70>
                    {
                        pxBest = pxSegment;
 8015a30:	697b      	ldr	r3, [r7, #20]
 8015a32:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 8015a34:	6a3b      	ldr	r3, [r7, #32]
 8015a36:	685b      	ldr	r3, [r3, #4]
 8015a38:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 8015a3a:	6a3a      	ldr	r2, [r7, #32]
 8015a3c:	69bb      	ldr	r3, [r7, #24]
 8015a3e:	429a      	cmp	r2, r3
 8015a40:	d1d3      	bne.n	80159ea <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 8015a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d030      	beq.n	8015aaa <xTCPWindowRxConfirm+0xe6>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 8015a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a4a:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 8015a4c:	68ba      	ldr	r2, [r7, #8]
 8015a4e:	429a      	cmp	r2, r3
 8015a50:	d104      	bne.n	8015a5c <xTCPWindowRxConfirm+0x98>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 8015a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a54:	689a      	ldr	r2, [r3, #8]
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	429a      	cmp	r2, r3
 8015a5a:	d026      	beq.n	8015aaa <xTCPWindowRxConfirm+0xe6>
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %u (+%u=%u) found %u (+%d=%u)\n",
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015a62:	461e      	mov	r6, r3
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	68db      	ldr	r3, [r3, #12]
 8015a68:	68ba      	ldr	r2, [r7, #8]
 8015a6a:	1ad5      	subs	r5, r2, r3
 8015a6c:	68ba      	ldr	r2, [r7, #8]
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	441a      	add	r2, r3
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	68db      	ldr	r3, [r3, #12]
 8015a76:	1ad3      	subs	r3, r2, r3
 8015a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a7a:	6811      	ldr	r1, [r2, #0]
 8015a7c:	68fa      	ldr	r2, [r7, #12]
 8015a7e:	68d2      	ldr	r2, [r2, #12]
 8015a80:	1a8a      	subs	r2, r1, r2
 8015a82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015a84:	6889      	ldr	r1, [r1, #8]
 8015a86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015a88:	6800      	ldr	r0, [r0, #0]
 8015a8a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8015a8c:	68a4      	ldr	r4, [r4, #8]
 8015a8e:	4404      	add	r4, r0
 8015a90:	68f8      	ldr	r0, [r7, #12]
 8015a92:	68c0      	ldr	r0, [r0, #12]
 8015a94:	1a20      	subs	r0, r4, r0
 8015a96:	9003      	str	r0, [sp, #12]
 8015a98:	9102      	str	r1, [sp, #8]
 8015a9a:	9201      	str	r2, [sp, #4]
 8015a9c:	9300      	str	r3, [sp, #0]
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	462a      	mov	r2, r5
 8015aa2:	4631      	mov	r1, r6
 8015aa4:	4803      	ldr	r0, [pc, #12]	@ (8015ab4 <xTCPWindowRxConfirm+0xf0>)
 8015aa6:	f00c fb4f 	bl	8022148 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) pxBest->lDataLength,
                                         ( unsigned ) ( pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            return pxBest;
 8015aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8015aac:	4618      	mov	r0, r3
 8015aae:	372c      	adds	r7, #44	@ 0x2c
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ab4:	08026d64 	.word	0x08026d64

08015ab8 <prvTCPWindowRx_ExpectedRX>:
 * @param[in] pxWindow The TCP sliding window data of the socket.
 * @param[in] ulLength The number of bytes that can be added.
 */
        static void prvTCPWindowRx_ExpectedRX( TCPWindow_t * pxWindow,
                                               uint32_t ulLength )
        {
 8015ab8:	b5b0      	push	{r4, r5, r7, lr}
 8015aba:	b08a      	sub	sp, #40	@ 0x28
 8015abc:	af04      	add	r7, sp, #16
 8015abe:	6078      	str	r0, [r7, #4]
 8015ac0:	6039      	str	r1, [r7, #0]
            uint32_t ulSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	691b      	ldr	r3, [r3, #16]
 8015ac6:	613b      	str	r3, [r7, #16]
            uint32_t ulCurrentSequenceNumber = ulSequenceNumber + ulLength;
 8015ac8:	693a      	ldr	r2, [r7, #16]
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	4413      	add	r3, r2
 8015ace:	617b      	str	r3, [r7, #20]

            if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d04e      	beq.n	8015b78 <prvTCPWindowRx_ExpectedRX+0xc0>
            {
                uint32_t ulSavedSequenceNumber = ulCurrentSequenceNumber;
 8015ada:	697b      	ldr	r3, [r7, #20]
 8015adc:	60fb      	str	r3, [r7, #12]
                 * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                 * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                 * clean them out. */
                do
                {
                    pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 8015ade:	683a      	ldr	r2, [r7, #0]
 8015ae0:	6939      	ldr	r1, [r7, #16]
 8015ae2:	6878      	ldr	r0, [r7, #4]
 8015ae4:	f7ff ff6e 	bl	80159c4 <xTCPWindowRxConfirm>
 8015ae8:	60b8      	str	r0, [r7, #8]

                    if( pxFound != NULL )
 8015aea:	68bb      	ldr	r3, [r7, #8]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d002      	beq.n	8015af6 <prvTCPWindowRx_ExpectedRX+0x3e>
                    {
                        /* Remove it because it will be passed to user directly. */
                        vTCPWindowFree( pxFound );
 8015af0:	68b8      	ldr	r0, [r7, #8]
 8015af2:	f7ff fe67 	bl	80157c4 <vTCPWindowFree>
                    }
                } while( pxFound != NULL );
 8015af6:	68bb      	ldr	r3, [r7, #8]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d1f0      	bne.n	8015ade <prvTCPWindowRx_ExpectedRX+0x26>

                /*  Check for following segments that are already in the
                 * queue and increment ulCurrentSequenceNumber. */
                for( ; ; )
                {
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8015afc:	6979      	ldr	r1, [r7, #20]
 8015afe:	6878      	ldr	r0, [r7, #4]
 8015b00:	f7ff fd5e 	bl	80155c0 <xTCPWindowRxFind>
 8015b04:	60b8      	str	r0, [r7, #8]

                    if( pxFound == NULL )
 8015b06:	68bb      	ldr	r3, [r7, #8]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d009      	beq.n	8015b20 <prvTCPWindowRx_ExpectedRX+0x68>
                    {
                        break;
                    }

                    ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 8015b0c:	68bb      	ldr	r3, [r7, #8]
 8015b0e:	689b      	ldr	r3, [r3, #8]
 8015b10:	461a      	mov	r2, r3
 8015b12:	697b      	ldr	r3, [r7, #20]
 8015b14:	4413      	add	r3, r2
 8015b16:	617b      	str	r3, [r7, #20]

                    /* As all packet below this one have been passed to the
                     * user it can be discarded. */
                    vTCPWindowFree( pxFound );
 8015b18:	68b8      	ldr	r0, [r7, #8]
 8015b1a:	f7ff fe53 	bl	80157c4 <vTCPWindowFree>
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8015b1e:	e7ed      	b.n	8015afc <prvTCPWindowRx_ExpectedRX+0x44>
                        break;
 8015b20:	bf00      	nop
                }

                if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 8015b22:	68fa      	ldr	r2, [r7, #12]
 8015b24:	697b      	ldr	r3, [r7, #20]
 8015b26:	429a      	cmp	r2, r3
 8015b28:	d026      	beq.n	8015b78 <prvTCPWindowRx_ExpectedRX+0xc0>
                {
                    /*  After the current data-package, there is more data
                     * to be popped. */
                    pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 8015b2a:	697a      	ldr	r2, [r7, #20]
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	1ad2      	subs	r2, r2, r3
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	631a      	str	r2, [r3, #48]	@ 0x30

                    if( xTCPWindowLoggingLevel >= 1 )
 8015b34:	4b14      	ldr	r3, [pc, #80]	@ (8015b88 <prvTCPWindowRx_ExpectedRX+0xd0>)
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	dd1d      	ble.n	8015b78 <prvTCPWindowRx_ExpectedRX+0xc0>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: retran %u (Found %u bytes at %u cnt %d)\n",
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015b42:	461c      	mov	r4, r3
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015b4a:	461d      	mov	r5, r3
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	68db      	ldr	r3, [r3, #12]
 8015b50:	693a      	ldr	r2, [r7, #16]
 8015b52:	1ad0      	subs	r0, r2, r3
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015b58:	687a      	ldr	r2, [r7, #4]
 8015b5a:	68d2      	ldr	r2, [r2, #12]
 8015b5c:	68f9      	ldr	r1, [r7, #12]
 8015b5e:	1a8a      	subs	r2, r1, r2
 8015b60:	6879      	ldr	r1, [r7, #4]
 8015b62:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
 8015b66:	9102      	str	r1, [sp, #8]
 8015b68:	9201      	str	r2, [sp, #4]
 8015b6a:	9300      	str	r3, [sp, #0]
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	462a      	mov	r2, r5
 8015b70:	4621      	mov	r1, r4
 8015b72:	4806      	ldr	r0, [pc, #24]	@ (8015b8c <prvTCPWindowRx_ExpectedRX+0xd4>)
 8015b74:	f00c fae8 	bl	8022148 <lUDPLoggingPrintf>
                                                 ( int ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }
                }
            }

            pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	697a      	ldr	r2, [r7, #20]
 8015b7c:	611a      	str	r2, [r3, #16]
        }
 8015b7e:	bf00      	nop
 8015b80:	3718      	adds	r7, #24
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bdb0      	pop	{r4, r5, r7, pc}
 8015b86:	bf00      	nop
 8015b88:	200015c8 	.word	0x200015c8
 8015b8c:	08026da4 	.word	0x08026da4

08015b90 <prvTCPWindowRx_UnexpectedRX>:
 *         offset ( from the head ) at which the data can be placed.
 */
        static int32_t prvTCPWindowRx_UnexpectedRX( TCPWindow_t * pxWindow,
                                                    uint32_t ulSequenceNumber,
                                                    uint32_t ulLength )
        {
 8015b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b92:	b08f      	sub	sp, #60	@ 0x3c
 8015b94:	af04      	add	r7, sp, #16
 8015b96:	60f8      	str	r0, [r7, #12]
 8015b98:	60b9      	str	r1, [r7, #8]
 8015b9a:	607a      	str	r2, [r7, #4]
            int32_t lReturn = -1;
 8015b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8015ba0:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t ulLast = ulSequenceNumber + ulLength;
 8015ba2:	68ba      	ldr	r2, [r7, #8]
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	4413      	add	r3, r2
 8015ba8:	623b      	str	r3, [r7, #32]
            uint32_t ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	691b      	ldr	r3, [r3, #16]
 8015bae:	61fb      	str	r3, [r7, #28]
             * This is useful because subsequent packets will be SACK'd with
             * single one message
             */
            for( ; ; )
            {
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8015bb0:	6a39      	ldr	r1, [r7, #32]
 8015bb2:	68f8      	ldr	r0, [r7, #12]
 8015bb4:	f7ff fd04 	bl	80155c0 <xTCPWindowRxFind>
 8015bb8:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 8015bba:	69bb      	ldr	r3, [r7, #24]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d006      	beq.n	8015bce <prvTCPWindowRx_UnexpectedRX+0x3e>
                {
                    break;
                }

                ulLast += ( uint32_t ) pxFound->lDataLength;
 8015bc0:	69bb      	ldr	r3, [r7, #24]
 8015bc2:	689b      	ldr	r3, [r3, #8]
 8015bc4:	461a      	mov	r2, r3
 8015bc6:	6a3b      	ldr	r3, [r7, #32]
 8015bc8:	4413      	add	r3, r2
 8015bca:	623b      	str	r3, [r7, #32]
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8015bcc:	e7f0      	b.n	8015bb0 <prvTCPWindowRx_UnexpectedRX+0x20>
                    break;
 8015bce:	bf00      	nop
            }

            if( xTCPWindowLoggingLevel >= 1 )
 8015bd0:	4b45      	ldr	r3, [pc, #276]	@ (8015ce8 <prvTCPWindowRx_UnexpectedRX+0x158>)
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	dd20      	ble.n	8015c1a <prvTCPWindowRx_UnexpectedRX+0x8a>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015bde:	461d      	mov	r5, r3
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015be6:	461e      	mov	r6, r3
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	68db      	ldr	r3, [r3, #12]
 8015bec:	68ba      	ldr	r2, [r7, #8]
 8015bee:	1ad0      	subs	r0, r2, r3
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	68db      	ldr	r3, [r3, #12]
 8015bf4:	69fa      	ldr	r2, [r7, #28]
 8015bf6:	1ad3      	subs	r3, r2, r3
 8015bf8:	68b9      	ldr	r1, [r7, #8]
 8015bfa:	69fa      	ldr	r2, [r7, #28]
 8015bfc:	1a8a      	subs	r2, r1, r2
 8015bfe:	4614      	mov	r4, r2
 8015c00:	68fa      	ldr	r2, [r7, #12]
 8015c02:	68d2      	ldr	r2, [r2, #12]
 8015c04:	6a39      	ldr	r1, [r7, #32]
 8015c06:	1a8a      	subs	r2, r1, r2
 8015c08:	9202      	str	r2, [sp, #8]
 8015c0a:	9401      	str	r4, [sp, #4]
 8015c0c:	9300      	str	r3, [sp, #0]
 8015c0e:	4603      	mov	r3, r0
 8015c10:	4632      	mov	r2, r6
 8015c12:	4629      	mov	r1, r5
 8015c14:	4835      	ldr	r0, [pc, #212]	@ (8015cec <prvTCPWindowRx_UnexpectedRX+0x15c>)
 8015c16:	f00c fa97 	bl	8022148 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            /* Now prepare the SACK message.
             * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
            pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	4a34      	ldr	r2, [pc, #208]	@ (8015cf0 <prvTCPWindowRx_UnexpectedRX+0x160>)
 8015c1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* First sequence number that we received. */
            pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 8015c22:	68bb      	ldr	r3, [r7, #8]
 8015c24:	061a      	lsls	r2, r3, #24
 8015c26:	68bb      	ldr	r3, [r7, #8]
 8015c28:	021b      	lsls	r3, r3, #8
 8015c2a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015c2e:	431a      	orrs	r2, r3
 8015c30:	68bb      	ldr	r3, [r7, #8]
 8015c32:	0a1b      	lsrs	r3, r3, #8
 8015c34:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015c38:	431a      	orrs	r2, r3
 8015c3a:	68bb      	ldr	r3, [r7, #8]
 8015c3c:	0e1b      	lsrs	r3, r3, #24
 8015c3e:	431a      	orrs	r2, r3
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Last + 1 */
            pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 8015c46:	6a3b      	ldr	r3, [r7, #32]
 8015c48:	061a      	lsls	r2, r3, #24
 8015c4a:	6a3b      	ldr	r3, [r7, #32]
 8015c4c:	021b      	lsls	r3, r3, #8
 8015c4e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015c52:	431a      	orrs	r2, r3
 8015c54:	6a3b      	ldr	r3, [r7, #32]
 8015c56:	0a1b      	lsrs	r3, r3, #8
 8015c58:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015c5c:	431a      	orrs	r2, r3
 8015c5e:	6a3b      	ldr	r3, [r7, #32]
 8015c60:	0e1b      	lsrs	r3, r3, #24
 8015c62:	431a      	orrs	r2, r3
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* Which make 12 (3*4) option bytes. */
            pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	220c      	movs	r2, #12
 8015c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 8015c72:	68b9      	ldr	r1, [r7, #8]
 8015c74:	68f8      	ldr	r0, [r7, #12]
 8015c76:	f7ff fca3 	bl	80155c0 <xTCPWindowRxFind>
 8015c7a:	61b8      	str	r0, [r7, #24]

            if( pxFound != NULL )
 8015c7c:	69bb      	ldr	r3, [r7, #24]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d12d      	bne.n	8015cde <prvTCPWindowRx_UnexpectedRX+0x14e>
                 * again. */
                /* A negative value will be returned to indicate than error. */
            }
            else
            {
                pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 8015c82:	687a      	ldr	r2, [r7, #4]
 8015c84:	2301      	movs	r3, #1
 8015c86:	68b9      	ldr	r1, [r7, #8]
 8015c88:	68f8      	ldr	r0, [r7, #12]
 8015c8a:	f7ff fcc1 	bl	8015610 <xTCPWindowNew>
 8015c8e:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 8015c90:	69bb      	ldr	r3, [r7, #24]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d104      	bne.n	8015ca0 <prvTCPWindowRx_UnexpectedRX+0x110>
                {
                    /* Can not send a SACK, because the segment cannot be
                     * stored. */
                    pxWindow->ucOptionLength = 0U;
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	2200      	movs	r2, #0
 8015c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8015c9e:	e01e      	b.n	8015cde <prvTCPWindowRx_UnexpectedRX+0x14e>
                }
                else
                {
                    uint32_t ulIntermediateResult;

                    if( xTCPWindowLoggingLevel != 0 )
 8015ca0:	4b11      	ldr	r3, [pc, #68]	@ (8015ce8 <prvTCPWindowRx_UnexpectedRX+0x158>)
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d014      	beq.n	8015cd2 <prvTCPWindowRx_UnexpectedRX+0x142>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %u (cnt %u)\n",
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015cae:	4619      	mov	r1, r3
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	68db      	ldr	r3, [r3, #12]
 8015cbc:	68ba      	ldr	r2, [r7, #8]
 8015cbe:	1ad2      	subs	r2, r2, r3
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015cc6:	9300      	str	r3, [sp, #0]
 8015cc8:	4613      	mov	r3, r2
 8015cca:	4602      	mov	r2, r0
 8015ccc:	4809      	ldr	r0, [pc, #36]	@ (8015cf4 <prvTCPWindowRx_UnexpectedRX+0x164>)
 8015cce:	f00c fa3b 	bl	8022148 <lUDPLoggingPrintf>
                                                 ( unsigned ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }

                    /* Return a positive value.  The packet may be accepted
                    * and stored but an earlier packet is still missing. */
                    ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 8015cd2:	68ba      	ldr	r2, [r7, #8]
 8015cd4:	69fb      	ldr	r3, [r7, #28]
 8015cd6:	1ad3      	subs	r3, r2, r3
 8015cd8:	617b      	str	r3, [r7, #20]
                    lReturn = ( int32_t ) ulIntermediateResult;
 8015cda:	697b      	ldr	r3, [r7, #20]
 8015cdc:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            return lReturn;
 8015cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	372c      	adds	r7, #44	@ 0x2c
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ce8:	200015c8 	.word	0x200015c8
 8015cec:	08026de8 	.word	0x08026de8
 8015cf0:	0a050101 	.word	0x0a050101
 8015cf4:	08026e28 	.word	0x08026e28

08015cf8 <lTCPWindowRxCheck>:
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace,
                                   uint32_t * pulSkipCount )
        {
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b08c      	sub	sp, #48	@ 0x30
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	60f8      	str	r0, [r7, #12]
 8015d00:	60b9      	str	r1, [r7, #8]
 8015d02:	607a      	str	r2, [r7, #4]
 8015d04:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber;
            uint32_t ulIntermediateResult;
            int32_t lReturn = -1;
 8015d06:	f04f 33ff 	mov.w	r3, #4294967295
 8015d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t lStartDistance;
            int32_t lLastDistance;
            uint32_t ulLast;
            uint32_t ulRxSequenceNumber = ulSequenceNumber;
 8015d0c:	68bb      	ldr	r3, [r7, #8]
 8015d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t ulRxLength = ulLength;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Only in an exceptional case, where a packet starts before
             * ulCurrentSequenceNumber, and ends after it, the skip-count
             * will be set. See below. */

            *( pulSkipCount ) = 0U;
 8015d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d16:	2200      	movs	r2, #0
 8015d18:	601a      	str	r2, [r3, #0]

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	691b      	ldr	r3, [r3, #16]
 8015d1e:	623b      	str	r3, [r7, #32]

            ulLast = ulRxSequenceNumber + ulRxLength;
 8015d20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d24:	4413      	add	r3, r2
 8015d26:	61fb      	str	r3, [r7, #28]
            ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 8015d28:	69fa      	ldr	r2, [r7, #28]
 8015d2a:	6a3b      	ldr	r3, [r7, #32]
 8015d2c:	1ad3      	subs	r3, r2, r3
 8015d2e:	61bb      	str	r3, [r7, #24]
            /* The cast from unsigned long to signed long is on purpose. */
            lLastDistance = ( int32_t ) ulIntermediateResult;
 8015d30:	69bb      	ldr	r3, [r7, #24]
 8015d32:	617b      	str	r3, [r7, #20]

            ulIntermediateResult = ulRxSequenceNumber - ulCurrentSequenceNumber;
 8015d34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d36:	6a3b      	ldr	r3, [r7, #32]
 8015d38:	1ad3      	subs	r3, r2, r3
 8015d3a:	61bb      	str	r3, [r7, #24]
            lStartDistance = ( int32_t ) ulIntermediateResult;
 8015d3c:	69bb      	ldr	r3, [r7, #24]
 8015d3e:	613b      	str	r3, [r7, #16]

            if( ( lStartDistance < 0 ) && ( lLastDistance > 0 ) )
 8015d40:	693b      	ldr	r3, [r7, #16]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	da18      	bge.n	8015d78 <lTCPWindowRxCheck+0x80>
 8015d46:	697b      	ldr	r3, [r7, #20]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	dd15      	ble.n	8015d78 <lTCPWindowRxCheck+0x80>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Received +%u bytes for %u, only using %d\n",
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	68db      	ldr	r3, [r3, #12]
 8015d50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d52:	1ad2      	subs	r2, r2, r3
 8015d54:	697b      	ldr	r3, [r7, #20]
 8015d56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015d58:	4824      	ldr	r0, [pc, #144]	@ (8015dec <lTCPWindowRxCheck+0xf4>)
 8015d5a:	f00c f9f5 	bl	8022148 <lUDPLoggingPrintf>
                                         ( unsigned ) ulRxLength,
                                         ( unsigned ) ( ulRxSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) lLastDistance ) );
                /* Increase the sequence number, decrease the length. */
                ulRxSequenceNumber += ( uint32_t ) ( -lStartDistance );
 8015d5e:	693b      	ldr	r3, [r7, #16]
 8015d60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d62:	1ad3      	subs	r3, r2, r3
 8015d64:	62bb      	str	r3, [r7, #40]	@ 0x28
                ulRxLength += ( uint32_t ) lStartDistance;
 8015d66:	693b      	ldr	r3, [r7, #16]
 8015d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015d6a:	4413      	add	r3, r2
 8015d6c:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Tell the caller that the first 'pulSkipCount' bytes don't
                 * need to be stored. */
                *( pulSkipCount ) = ( uint32_t ) ( -lStartDistance );
 8015d6e:	693b      	ldr	r3, [r7, #16]
 8015d70:	425b      	negs	r3, r3
 8015d72:	461a      	mov	r2, r3
 8015d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d76:	601a      	str	r2, [r3, #0]
            }

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0U;
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	2200      	movs	r2, #0
 8015d84:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulRxSequenceNumber )
 8015d86:	6a3a      	ldr	r2, [r7, #32]
 8015d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d8a:	429a      	cmp	r2, r3
 8015d8c:	d110      	bne.n	8015db0 <lTCPWindowRxCheck+0xb8>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulRxLength > ulSpace )
 8015d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015d90:	683b      	ldr	r3, [r7, #0]
 8015d92:	429a      	cmp	r2, r3
 8015d94:	d905      	bls.n	8015da2 <lTCPWindowRxCheck+0xaa>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %u bytes, due to lack of space (%u)\n", ( unsigned ) ulRxLength, ( unsigned ) ulSpace ) );
 8015d96:	683a      	ldr	r2, [r7, #0]
 8015d98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015d9a:	4815      	ldr	r0, [pc, #84]	@ (8015df0 <lTCPWindowRxCheck+0xf8>)
 8015d9c:	f00c f9d4 	bl	8022148 <lUDPLoggingPrintf>
 8015da0:	e01f      	b.n	8015de2 <lTCPWindowRxCheck+0xea>
                }
                else
                {
                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    prvTCPWindowRx_ExpectedRX( pxWindow, ulRxLength );
 8015da2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015da4:	68f8      	ldr	r0, [r7, #12]
 8015da6:	f7ff fe87 	bl	8015ab8 <prvTCPWindowRx_ExpectedRX>
                    lReturn = 0;
 8015daa:	2300      	movs	r3, #0
 8015dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015dae:	e018      	b.n	8015de2 <lTCPWindowRxCheck+0xea>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulRxSequenceNumber + 1U ) )
 8015db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015db2:	3301      	adds	r3, #1
 8015db4:	6a3a      	ldr	r2, [r7, #32]
 8015db6:	429a      	cmp	r2, r3
 8015db8:	d013      	beq.n	8015de2 <lTCPWindowRxCheck+0xea>
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */

                if( lLastDistance <= 0 )
 8015dba:	697b      	ldr	r3, [r7, #20]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	dd10      	ble.n	8015de2 <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier packet has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                }
                else if( lLastDistance > ( int32_t ) ulSpace )
 8015dc0:	683b      	ldr	r3, [r7, #0]
 8015dc2:	697a      	ldr	r2, [r7, #20]
 8015dc4:	429a      	cmp	r2, r3
 8015dc6:	dd06      	ble.n	8015dd6 <lTCPWindowRxCheck+0xde>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %d+%u bytes, due to lack of space (%u)\n",
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015dcc:	6979      	ldr	r1, [r7, #20]
 8015dce:	4809      	ldr	r0, [pc, #36]	@ (8015df4 <lTCPWindowRxCheck+0xfc>)
 8015dd0:	f00c f9ba 	bl	8022148 <lUDPLoggingPrintf>
 8015dd4:	e005      	b.n	8015de2 <lTCPWindowRxCheck+0xea>
                                             ( unsigned ) ulRxLength,
                                             ( unsigned ) ulSpace ) );
                }
                else
                {
                    lReturn = prvTCPWindowRx_UnexpectedRX( pxWindow, ulRxSequenceNumber, ulRxLength );
 8015dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015dd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015dda:	68f8      	ldr	r0, [r7, #12]
 8015ddc:	f7ff fed8 	bl	8015b90 <prvTCPWindowRx_UnexpectedRX>
 8015de0:	62f8      	str	r0, [r7, #44]	@ 0x2c
                }
            }

            return lReturn;
 8015de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8015de4:	4618      	mov	r0, r3
 8015de6:	3730      	adds	r7, #48	@ 0x30
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}
 8015dec:	08026e58 	.word	0x08026e58
 8015df0:	08026e98 	.word	0x08026e98
 8015df4:	08026ed8 	.word	0x08026ed8

08015df8 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 8015df8:	b480      	push	{r7}
 8015dfa:	b087      	sub	sp, #28
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	60f8      	str	r0, [r7, #12]
 8015e00:	60b9      	str	r1, [r7, #8]
 8015e02:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 8015e04:	68fa      	ldr	r2, [r7, #12]
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	4413      	add	r3, r2
 8015e0a:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 8015e0c:	697a      	ldr	r2, [r7, #20]
 8015e0e:	68bb      	ldr	r3, [r7, #8]
 8015e10:	429a      	cmp	r2, r3
 8015e12:	db03      	blt.n	8015e1c <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 8015e14:	697a      	ldr	r2, [r7, #20]
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	1ad3      	subs	r3, r2, r3
 8015e1a:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 8015e1c:	697b      	ldr	r3, [r7, #20]
        }
 8015e1e:	4618      	mov	r0, r3
 8015e20:	371c      	adds	r7, #28
 8015e22:	46bd      	mov	sp, r7
 8015e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e28:	4770      	bx	lr
	...

08015e2c <prvTCPWindowTxAdd_FrontSegment>:
 * @return lToWrite: the number of bytes added to the segment.
 */
        static int32_t prvTCPWindowTxAdd_FrontSegment( TCPWindow_t * pxWindow,
                                                       TCPSegment_t * pxSegment,
                                                       int32_t lBytesLeft )
        {
 8015e2c:	b580      	push	{r7, lr}
 8015e2e:	b088      	sub	sp, #32
 8015e30:	af02      	add	r7, sp, #8
 8015e32:	60f8      	str	r0, [r7, #12]
 8015e34:	60b9      	str	r1, [r7, #8]
 8015e36:	607a      	str	r2, [r7, #4]
            int32_t lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 8015e38:	68bb      	ldr	r3, [r7, #8]
 8015e3a:	685a      	ldr	r2, [r3, #4]
 8015e3c:	68bb      	ldr	r3, [r7, #8]
 8015e3e:	689b      	ldr	r3, [r3, #8]
 8015e40:	1ad3      	subs	r3, r2, r3
 8015e42:	4619      	mov	r1, r3
 8015e44:	6878      	ldr	r0, [r7, #4]
 8015e46:	f7f4 fe05 	bl	800aa54 <FreeRTOS_min_int32>
 8015e4a:	6178      	str	r0, [r7, #20]

            pxSegment->lDataLength += lToWrite;
 8015e4c:	68bb      	ldr	r3, [r7, #8]
 8015e4e:	689a      	ldr	r2, [r3, #8]
 8015e50:	697b      	ldr	r3, [r7, #20]
 8015e52:	441a      	add	r2, r3
 8015e54:	68bb      	ldr	r3, [r7, #8]
 8015e56:	609a      	str	r2, [r3, #8]

            if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 8015e58:	68bb      	ldr	r3, [r7, #8]
 8015e5a:	689a      	ldr	r2, [r3, #8]
 8015e5c:	68bb      	ldr	r3, [r7, #8]
 8015e5e:	685b      	ldr	r3, [r3, #4]
 8015e60:	429a      	cmp	r2, r3
 8015e62:	db02      	blt.n	8015e6a <prvTCPWindowTxAdd_FrontSegment+0x3e>
            {
                /* This segment is full, don't add more bytes. */
                pxWindow->pxHeadSegment = NULL;
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	2200      	movs	r2, #0
 8015e68:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            /* ulNextTxSequenceNumber is the sequence number of the next byte to
             * be stored for transmission. */
            pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015e6e:	697b      	ldr	r3, [r7, #20]
 8015e70:	441a      	add	r2, r3
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Some detailed logging, for those who're interested. */
            if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 8015e76:	4b12      	ldr	r3, [pc, #72]	@ (8015ec0 <prvTCPWindowTxAdd_FrontSegment+0x94>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	2b01      	cmp	r3, #1
 8015e7c:	dd1a      	ble.n	8015eb4 <prvTCPWindowTxAdd_FrontSegment+0x88>
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015e84:	2b17      	cmp	r3, #23
 8015e86:	d015      	beq.n	8015eb4 <prvTCPWindowTxAdd_FrontSegment+0x88>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4d bytes for seqNr %u len %4d (nxt %u) pos %d\n",
 8015e88:	68bb      	ldr	r3, [r7, #8]
 8015e8a:	681a      	ldr	r2, [r3, #0]
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	69db      	ldr	r3, [r3, #28]
 8015e90:	1ad1      	subs	r1, r2, r3
 8015e92:	68bb      	ldr	r3, [r7, #8]
 8015e94:	6898      	ldr	r0, [r3, #8]
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	69db      	ldr	r3, [r3, #28]
 8015e9e:	1ad3      	subs	r3, r2, r3
 8015ea0:	68ba      	ldr	r2, [r7, #8]
 8015ea2:	68d2      	ldr	r2, [r2, #12]
 8015ea4:	9201      	str	r2, [sp, #4]
 8015ea6:	9300      	str	r3, [sp, #0]
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	460a      	mov	r2, r1
 8015eac:	6879      	ldr	r1, [r7, #4]
 8015eae:	4805      	ldr	r0, [pc, #20]	@ (8015ec4 <prvTCPWindowTxAdd_FrontSegment+0x98>)
 8015eb0:	f00c f94a 	bl	8022148 <lUDPLoggingPrintf>
                                         ( int ) pxSegment->lDataLength,
                                         ( unsigned ) ( pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( int ) pxSegment->lStreamPos ) );
            }

            return lToWrite;
 8015eb4:	697b      	ldr	r3, [r7, #20]
        }
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	3718      	adds	r7, #24
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	bd80      	pop	{r7, pc}
 8015ebe:	bf00      	nop
 8015ec0:	200015c8 	.word	0x200015c8
 8015ec4:	08026f1c 	.word	0x08026f1c

08015ec8 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 8015ec8:	b580      	push	{r7, lr}
 8015eca:	b08a      	sub	sp, #40	@ 0x28
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	60f8      	str	r0, [r7, #12]
 8015ed0:	60b9      	str	r1, [r7, #8]
 8015ed2:	607a      	str	r2, [r7, #4]
 8015ed4:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength;
 8015ed6:	68bb      	ldr	r3, [r7, #8]
 8015ed8:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lToWrite;
            int32_t lDone = 0;
 8015eda:	2300      	movs	r3, #0
 8015edc:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015ee6:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( ( pxSegment != NULL ) &&
 8015ee8:	69bb      	ldr	r3, [r7, #24]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d073      	beq.n	8015fd6 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8015eee:	69bb      	ldr	r3, [r7, #24]
 8015ef0:	689a      	ldr	r2, [r3, #8]
 8015ef2:	69bb      	ldr	r3, [r7, #24]
 8015ef4:	685b      	ldr	r3, [r3, #4]
            if( ( pxSegment != NULL ) &&
 8015ef6:	429a      	cmp	r2, r3
 8015ef8:	da6d      	bge.n	8015fd6 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8015efa:	69bb      	ldr	r3, [r7, #24]
 8015efc:	7d9b      	ldrb	r3, [r3, #22]
 8015efe:	f003 0301 	and.w	r3, r3, #1
 8015f02:	b2db      	uxtb	r3, r3
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d166      	bne.n	8015fd6 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength != 0 ) )
 8015f08:	69bb      	ldr	r3, [r7, #24]
 8015f0a:	689b      	ldr	r3, [r3, #8]
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d062      	beq.n	8015fd6 <lTCPWindowTxAdd+0x10e>
            {
                lToWrite = prvTCPWindowTxAdd_FrontSegment( pxWindow, pxSegment, lBytesLeft );
 8015f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015f12:	69b9      	ldr	r1, [r7, #24]
 8015f14:	68f8      	ldr	r0, [r7, #12]
 8015f16:	f7ff ff89 	bl	8015e2c <prvTCPWindowTxAdd_FrontSegment>
 8015f1a:	6178      	str	r0, [r7, #20]
                lBytesLeft -= lToWrite;
 8015f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015f1e:	697b      	ldr	r3, [r7, #20]
 8015f20:	1ad3      	subs	r3, r2, r3
 8015f22:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Increased the return value. */
                lDone += lToWrite;
 8015f24:	6a3a      	ldr	r2, [r7, #32]
 8015f26:	697b      	ldr	r3, [r7, #20]
 8015f28:	4413      	add	r3, r2
 8015f2a:	623b      	str	r3, [r7, #32]

                /* Calculate the next position in the circular data buffer, knowing
                 * its maximum length 'lMax'. */
                lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8015f2c:	697a      	ldr	r2, [r7, #20]
 8015f2e:	6839      	ldr	r1, [r7, #0]
 8015f30:	69f8      	ldr	r0, [r7, #28]
 8015f32:	f7ff ff61 	bl	8015df8 <lTCPIncrementTxPosition>
 8015f36:	61f8      	str	r0, [r7, #28]
            }

            while( lBytesLeft > 0 )
 8015f38:	e04d      	b.n	8015fd6 <lTCPWindowTxAdd+0x10e>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015f44:	461a      	mov	r2, r3
 8015f46:	2300      	movs	r3, #0
 8015f48:	68f8      	ldr	r0, [r7, #12]
 8015f4a:	f7ff fb61 	bl	8015610 <xTCPWindowNew>
 8015f4e:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 8015f50:	69bb      	ldr	r3, [r7, #24]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d037      	beq.n	8015fc6 <lTCPWindowTxAdd+0xfe>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 8015f56:	69bb      	ldr	r3, [r7, #24]
 8015f58:	685b      	ldr	r3, [r3, #4]
 8015f5a:	4619      	mov	r1, r3
 8015f5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015f5e:	f7f4 fd79 	bl	800aa54 <FreeRTOS_min_int32>
 8015f62:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 8015f64:	69bb      	ldr	r3, [r7, #24]
 8015f66:	697a      	ldr	r2, [r7, #20]
 8015f68:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 8015f6a:	69bb      	ldr	r3, [r7, #24]
 8015f6c:	69fa      	ldr	r2, [r7, #28]
 8015f6e:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 8015f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015f72:	697b      	ldr	r3, [r7, #20]
 8015f74:	1ad3      	subs	r3, r2, r3
 8015f76:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8015f78:	697a      	ldr	r2, [r7, #20]
 8015f7a:	6839      	ldr	r1, [r7, #0]
 8015f7c:	69f8      	ldr	r0, [r7, #28]
 8015f7e:	f7ff ff3b 	bl	8015df8 <lTCPIncrementTxPosition>
 8015f82:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015f88:	697b      	ldr	r3, [r7, #20]
 8015f8a:	441a      	add	r2, r3
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 8015f90:	6a3a      	ldr	r2, [r7, #32]
 8015f92:	697b      	ldr	r3, [r7, #20]
 8015f94:	4413      	add	r3, r2
 8015f96:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8015f9e:	69bb      	ldr	r3, [r7, #24]
 8015fa0:	3318      	adds	r3, #24
 8015fa2:	4619      	mov	r1, r3
 8015fa4:	4610      	mov	r0, r2
 8015fa6:	f7ff fa63 	bl	8015470 <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 8015faa:	69bb      	ldr	r3, [r7, #24]
 8015fac:	689a      	ldr	r2, [r3, #8]
 8015fae:	69bb      	ldr	r3, [r7, #24]
 8015fb0:	685b      	ldr	r3, [r3, #4]
 8015fb2:	429a      	cmp	r2, r3
 8015fb4:	da03      	bge.n	8015fbe <lTCPWindowTxAdd+0xf6>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	69ba      	ldr	r2, [r7, #24]
 8015fba:	67da      	str	r2, [r3, #124]	@ 0x7c
 8015fbc:	e00b      	b.n	8015fd6 <lTCPWindowTxAdd+0x10e>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	2200      	movs	r2, #0
 8015fc2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8015fc4:	e007      	b.n	8015fd6 <lTCPWindowTxAdd+0x10e>
                }
                else
                {
                    /* A sever situation: running out of segments for transmission.
                     * No more data can be sent at the moment. */
                    if( lDone != 0 )
 8015fc6:	6a3b      	ldr	r3, [r7, #32]
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d008      	beq.n	8015fde <lTCPWindowTxAdd+0x116>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %d bytes)\n", ( int ) lBytesLeft ) );
 8015fcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015fce:	4807      	ldr	r0, [pc, #28]	@ (8015fec <lTCPWindowTxAdd+0x124>)
 8015fd0:	f00c f8ba 	bl	8022148 <lUDPLoggingPrintf>
                    }

                    break;
 8015fd4:	e003      	b.n	8015fde <lTCPWindowTxAdd+0x116>
            while( lBytesLeft > 0 )
 8015fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	dcae      	bgt.n	8015f3a <lTCPWindowTxAdd+0x72>
 8015fdc:	e000      	b.n	8015fe0 <lTCPWindowTxAdd+0x118>
                    break;
 8015fde:	bf00      	nop
                }
            }

            return lDone;
 8015fe0:	6a3b      	ldr	r3, [r7, #32]
        }
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	3728      	adds	r7, #40	@ 0x28
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	bd80      	pop	{r7, pc}
 8015fea:	bf00      	nop
 8015fec:	08026f64 	.word	0x08026f64

08015ff0 <xTCPWindowTxDone>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 8015ff0:	b480      	push	{r7}
 8015ff2:	b083      	sub	sp, #12
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d101      	bne.n	8016006 <xTCPWindowTxDone+0x16>
 8016002:	2301      	movs	r3, #1
 8016004:	e000      	b.n	8016008 <xTCPWindowTxDone+0x18>
 8016006:	2300      	movs	r3, #0
        }
 8016008:	4618      	mov	r0, r3
 801600a:	370c      	adds	r7, #12
 801600c:	46bd      	mov	sp, r7
 801600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016012:	4770      	bx	lr

08016014 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 8016014:	b580      	push	{r7, lr}
 8016016:	b086      	sub	sp, #24
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
 801601c:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	3354      	adds	r3, #84	@ 0x54
 8016022:	4618      	mov	r0, r3
 8016024:	f7ff fbb5 	bl	8015792 <xTCPWindowPeekHead>
 8016028:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d102      	bne.n	8016036 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 8016030:	2300      	movs	r3, #0
 8016032:	613b      	str	r3, [r7, #16]
 8016034:	e02f      	b.n	8016096 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	6a1b      	ldr	r3, [r3, #32]
 801603e:	429a      	cmp	r2, r3
 8016040:	d306      	bcc.n	8016050 <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	6a1b      	ldr	r3, [r3, #32]
 801604a:	1ad3      	subs	r3, r2, r3
 801604c:	617b      	str	r3, [r7, #20]
 801604e:	e001      	b.n	8016054 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0U;
 8016050:	2300      	movs	r3, #0
 8016052:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 8016054:	6979      	ldr	r1, [r7, #20]
 8016056:	6838      	ldr	r0, [r7, #0]
 8016058:	f7f4 fd0c 	bl	800aa74 <FreeRTOS_min_uint32>
 801605c:	4602      	mov	r2, r0
 801605e:	683b      	ldr	r3, [r7, #0]
 8016060:	1a9b      	subs	r3, r3, r2
 8016062:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	689b      	ldr	r3, [r3, #8]
 8016068:	461a      	mov	r2, r3
 801606a:	68bb      	ldr	r3, [r7, #8]
 801606c:	4293      	cmp	r3, r2
 801606e:	d302      	bcc.n	8016076 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 8016070:	2301      	movs	r3, #1
 8016072:	613b      	str	r3, [r7, #16]
 8016074:	e001      	b.n	801607a <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 8016076:	2300      	movs	r3, #0
 8016078:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0U ) &&
 801607a:	697b      	ldr	r3, [r7, #20]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d00a      	beq.n	8016096 <prvTCPWindowTxHasSpace+0x82>
                    ( pxWindow->xSize.ulTxWindowLength <
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	689a      	ldr	r2, [r3, #8]
                      ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	689b      	ldr	r3, [r3, #8]
 8016088:	4619      	mov	r1, r3
 801608a:	697b      	ldr	r3, [r7, #20]
 801608c:	440b      	add	r3, r1
                if( ( ulTxOutstanding != 0U ) &&
 801608e:	429a      	cmp	r2, r3
 8016090:	d201      	bcs.n	8016096 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 8016092:	2300      	movs	r3, #0
 8016094:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 8016096:	693b      	ldr	r3, [r7, #16]
        }
 8016098:	4618      	mov	r0, r3
 801609a:	3718      	adds	r7, #24
 801609c:	46bd      	mov	sp, r7
 801609e:	bd80      	pop	{r7, pc}

080160a0 <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b08a      	sub	sp, #40	@ 0x28
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	60f8      	str	r0, [r7, #12]
 80160a8:	60b9      	str	r1, [r7, #8]
 80160aa:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	2200      	movs	r2, #0
 80160b0:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d002      	beq.n	80160c0 <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 80160ba:	2301      	movs	r3, #1
 80160bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80160be:	e050      	b.n	8016162 <xTCPWindowTxHasData+0xc2>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	3368      	adds	r3, #104	@ 0x68
 80160c4:	4618      	mov	r0, r3
 80160c6:	f7ff fb64 	bl	8015792 <xTCPWindowPeekHead>
 80160ca:	6238      	str	r0, [r7, #32]

                if( pxSegment != NULL )
 80160cc:	6a3b      	ldr	r3, [r7, #32]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d01f      	beq.n	8016112 <xTCPWindowTxHasData+0x72>
                {
                    uint32_t ulSRTT = ( uint32_t ) pxWindow->lSRTT;
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160d6:	61fb      	str	r3, [r7, #28]

                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 80160d8:	6a3b      	ldr	r3, [r7, #32]
 80160da:	3310      	adds	r3, #16
 80160dc:	4618      	mov	r0, r3
 80160de:	f7ff f9e4 	bl	80154aa <ulTimerGetAge>
 80160e2:	61b8      	str	r0, [r7, #24]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * ulSRTT' ms for an ACK. A second time it will wait '2 * ulSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( ( uint32_t ) 1U << pxSegment->u.bits.ucTransmitCount );
 80160e4:	6a3b      	ldr	r3, [r7, #32]
 80160e6:	7d1b      	ldrb	r3, [r3, #20]
 80160e8:	461a      	mov	r2, r3
 80160ea:	2301      	movs	r3, #1
 80160ec:	4093      	lsls	r3, r2
 80160ee:	617b      	str	r3, [r7, #20]
                    ulMaxAge *= ulSRTT;
 80160f0:	697b      	ldr	r3, [r7, #20]
 80160f2:	69fa      	ldr	r2, [r7, #28]
 80160f4:	fb02 f303 	mul.w	r3, r2, r3
 80160f8:	617b      	str	r3, [r7, #20]

                    if( ulMaxAge > ulAge )
 80160fa:	697a      	ldr	r2, [r7, #20]
 80160fc:	69bb      	ldr	r3, [r7, #24]
 80160fe:	429a      	cmp	r2, r3
 8016100:	d904      	bls.n	801610c <xTCPWindowTxHasData+0x6c>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 8016102:	697a      	ldr	r2, [r7, #20]
 8016104:	69bb      	ldr	r3, [r7, #24]
 8016106:	1ad2      	subs	r2, r2, r3
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 801610c:	2301      	movs	r3, #1
 801610e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016110:	e027      	b.n	8016162 <xTCPWindowTxHasData+0xc2>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	3354      	adds	r3, #84	@ 0x54
 8016116:	4618      	mov	r0, r3
 8016118:	f7ff fb3b 	bl	8015792 <xTCPWindowPeekHead>
 801611c:	6238      	str	r0, [r7, #32]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 801611e:	6a3b      	ldr	r3, [r7, #32]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d102      	bne.n	801612a <xTCPWindowTxHasData+0x8a>
                    {
                        xReturn = pdFALSE;
 8016124:	2300      	movs	r3, #0
 8016126:	627b      	str	r3, [r7, #36]	@ 0x24
 8016128:	e01b      	b.n	8016162 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 801612a:	68b9      	ldr	r1, [r7, #8]
 801612c:	68f8      	ldr	r0, [r7, #12]
 801612e:	f7ff ff71 	bl	8016014 <prvTCPWindowTxHasSpace>
 8016132:	4603      	mov	r3, r0
 8016134:	2b00      	cmp	r3, #0
 8016136:	d102      	bne.n	801613e <xTCPWindowTxHasData+0x9e>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 8016138:	2300      	movs	r3, #0
 801613a:	627b      	str	r3, [r7, #36]	@ 0x24
 801613c:	e011      	b.n	8016162 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	781b      	ldrb	r3, [r3, #0]
 8016142:	f003 0302 	and.w	r3, r3, #2
 8016146:	b2db      	uxtb	r3, r3
 8016148:	2b00      	cmp	r3, #0
 801614a:	d008      	beq.n	801615e <xTCPWindowTxHasData+0xbe>
                             ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 801614c:	6a3b      	ldr	r3, [r7, #32]
 801614e:	689a      	ldr	r2, [r3, #8]
 8016150:	6a3b      	ldr	r3, [r7, #32]
 8016152:	685b      	ldr	r3, [r3, #4]
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8016154:	429a      	cmp	r2, r3
 8016156:	da02      	bge.n	801615e <xTCPWindowTxHasData+0xbe>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 8016158:	2300      	movs	r3, #0
 801615a:	627b      	str	r3, [r7, #36]	@ 0x24
 801615c:	e001      	b.n	8016162 <xTCPWindowTxHasData+0xc2>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 801615e:	2301      	movs	r3, #1
 8016160:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }
            }

            return xReturn;
 8016162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8016164:	4618      	mov	r0, r3
 8016166:	3728      	adds	r7, #40	@ 0x28
 8016168:	46bd      	mov	sp, r7
 801616a:	bd80      	pop	{r7, pc}

0801616c <pxTCPWindowTx_GetWaitQueue>:
 *        the normal TX queue of unsent data.  Message in the waiting queue will
 *        be sent when their timer has expired.
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        static TCPSegment_t * pxTCPWindowTx_GetWaitQueue( const TCPWindow_t * pxWindow )
        {
 801616c:	b590      	push	{r4, r7, lr}
 801616e:	b087      	sub	sp, #28
 8016170:	af02      	add	r7, sp, #8
 8016172:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	3368      	adds	r3, #104	@ 0x68
 8016178:	4618      	mov	r0, r3
 801617a:	f7ff fb0a 	bl	8015792 <xTCPWindowPeekHead>
 801617e:	60f8      	str	r0, [r7, #12]

            if( pxSegment != NULL )
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d043      	beq.n	801620e <pxTCPWindowTx_GetWaitQueue+0xa2>
            {
                /* Do check the timing. */
                uint32_t ulMaxTime;

                ulMaxTime = ( ( uint32_t ) 1U ) << pxSegment->u.bits.ucTransmitCount;
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	7d1b      	ldrb	r3, [r3, #20]
 801618a:	461a      	mov	r2, r3
 801618c:	2301      	movs	r3, #1
 801618e:	4093      	lsls	r3, r2
 8016190:	60bb      	str	r3, [r7, #8]
                ulMaxTime *= ( uint32_t ) pxWindow->lSRTT;
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016196:	461a      	mov	r2, r3
 8016198:	68bb      	ldr	r3, [r7, #8]
 801619a:	fb02 f303 	mul.w	r3, r2, r3
 801619e:	60bb      	str	r3, [r7, #8]

                if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	3310      	adds	r3, #16
 80161a4:	4618      	mov	r0, r3
 80161a6:	f7ff f980 	bl	80154aa <ulTimerGetAge>
 80161aa:	4602      	mov	r2, r0
 80161ac:	68bb      	ldr	r3, [r7, #8]
 80161ae:	4293      	cmp	r3, r2
 80161b0:	d22b      	bcs.n	801620a <pxTCPWindowTx_GetWaitQueue+0x9e>
                {
                    /* A normal (non-fast) retransmission.  Move it from the
                     * head of the waiting queue. */
                    pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	3368      	adds	r3, #104	@ 0x68
 80161b6:	4618      	mov	r0, r3
 80161b8:	f7ff fad2 	bl	8015760 <xTCPWindowGetHead>
 80161bc:	60f8      	str	r0, [r7, #12]
                    pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	2200      	movs	r2, #0
 80161c2:	755a      	strb	r2, [r3, #21]

                    /* Some detailed logging. */
                    if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 80161c4:	4b14      	ldr	r3, [pc, #80]	@ (8016218 <pxTCPWindowTx_GetWaitQueue+0xac>)
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d020      	beq.n	801620e <pxTCPWindowTx_GetWaitQueue+0xa2>
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80161d2:	2b17      	cmp	r3, #23
 80161d4:	d01b      	beq.n	801620e <pxTCPWindowTx_GetWaitQueue+0xa2>
                    {
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %d bytes for sequence number %u (0x%X)\n",
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80161dc:	4618      	mov	r0, r3
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80161e4:	461c      	mov	r4, r3
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	6899      	ldr	r1, [r3, #8]
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	681a      	ldr	r2, [r3, #0]
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	69db      	ldr	r3, [r3, #28]
 80161f2:	1ad3      	subs	r3, r2, r3
 80161f4:	68fa      	ldr	r2, [r7, #12]
 80161f6:	6812      	ldr	r2, [r2, #0]
 80161f8:	9201      	str	r2, [sp, #4]
 80161fa:	9300      	str	r3, [sp, #0]
 80161fc:	460b      	mov	r3, r1
 80161fe:	4622      	mov	r2, r4
 8016200:	4601      	mov	r1, r0
 8016202:	4806      	ldr	r0, [pc, #24]	@ (801621c <pxTCPWindowTx_GetWaitQueue+0xb0>)
 8016204:	f00b ffa0 	bl	8022148 <lUDPLoggingPrintf>
 8016208:	e001      	b.n	801620e <pxTCPWindowTx_GetWaitQueue+0xa2>
                                                 ( unsigned ) pxSegment->ulSequenceNumber ) );
                    }
                }
                else
                {
                    pxSegment = NULL;
 801620a:	2300      	movs	r3, #0
 801620c:	60fb      	str	r3, [r7, #12]
                }
            }

            return pxSegment;
 801620e:	68fb      	ldr	r3, [r7, #12]
        }
 8016210:	4618      	mov	r0, r3
 8016212:	3714      	adds	r7, #20
 8016214:	46bd      	mov	sp, r7
 8016216:	bd90      	pop	{r4, r7, pc}
 8016218:	200015c8 	.word	0x200015c8
 801621c:	08026fa0 	.word	0x08026fa0

08016220 <pxTCPWindowTx_GetTXQueue>:
 *                          reception window.
 * @return Either a segment that has to be sent, or NULL.
 */
        static TCPSegment_t * pxTCPWindowTx_GetTXQueue( TCPWindow_t * pxWindow,
                                                        uint32_t ulWindowSize )
        {
 8016220:	b590      	push	{r4, r7, lr}
 8016222:	b087      	sub	sp, #28
 8016224:	af02      	add	r7, sp, #8
 8016226:	6078      	str	r0, [r7, #4]
 8016228:	6039      	str	r1, [r7, #0]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	3354      	adds	r3, #84	@ 0x54
 801622e:	4618      	mov	r0, r3
 8016230:	f7ff faaf 	bl	8015792 <xTCPWindowPeekHead>
 8016234:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d04f      	beq.n	80162dc <pxTCPWindowTx_GetTXQueue+0xbc>
            {
                /* No segments queued. */
            }
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	781b      	ldrb	r3, [r3, #0]
 8016240:	f003 0302 	and.w	r3, r3, #2
 8016244:	b2db      	uxtb	r3, r3
 8016246:	2b00      	cmp	r3, #0
 8016248:	d008      	beq.n	801625c <pxTCPWindowTx_GetTXQueue+0x3c>
                     ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	689a      	ldr	r2, [r3, #8]
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	685b      	ldr	r3, [r3, #4]
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8016252:	429a      	cmp	r2, r3
 8016254:	da02      	bge.n	801625c <pxTCPWindowTx_GetTXQueue+0x3c>
            {
                /* A segment has been queued but the driver waits until it
                 * has a full size of MSS. */
                pxSegment = NULL;
 8016256:	2300      	movs	r3, #0
 8016258:	60fb      	str	r3, [r7, #12]
 801625a:	e03f      	b.n	80162dc <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 801625c:	6839      	ldr	r1, [r7, #0]
 801625e:	6878      	ldr	r0, [r7, #4]
 8016260:	f7ff fed8 	bl	8016014 <prvTCPWindowTxHasSpace>
 8016264:	4603      	mov	r3, r0
 8016266:	2b00      	cmp	r3, #0
 8016268:	d102      	bne.n	8016270 <pxTCPWindowTx_GetTXQueue+0x50>
            {
                /* Peer has no more space at this moment. */
                pxSegment = NULL;
 801626a:	2300      	movs	r3, #0
 801626c:	60fb      	str	r3, [r7, #12]
 801626e:	e035      	b.n	80162dc <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else
            {
                /* pxSegment was just obtained with a peek function,
                 * now remove it from of the Tx queue. */
                pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	3354      	adds	r3, #84	@ 0x54
 8016274:	4618      	mov	r0, r3
 8016276:	f7ff fa73 	bl	8015760 <xTCPWindowGetHead>
 801627a:	60f8      	str	r0, [r7, #12]

                /* Don't let pxHeadSegment point to this segment any more,
                 * so no more data will be added. */
                if( pxWindow->pxHeadSegment == pxSegment )
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016280:	68fa      	ldr	r2, [r7, #12]
 8016282:	429a      	cmp	r2, r3
 8016284:	d102      	bne.n	801628c <pxTCPWindowTx_GetTXQueue+0x6c>
                {
                    pxWindow->pxHeadSegment = NULL;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2200      	movs	r2, #0
 801628a:	67da      	str	r2, [r3, #124]	@ 0x7c
                }

                /* pxWindow->tx.highest registers the highest sequence
                 * number in our transmission window. */
                pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	68fa      	ldr	r2, [r7, #12]
 8016292:	6892      	ldr	r2, [r2, #8]
 8016294:	441a      	add	r2, r3
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	629a      	str	r2, [r3, #40]	@ 0x28

                /* ...and more detailed logging */
                if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 801629a:	4b13      	ldr	r3, [pc, #76]	@ (80162e8 <pxTCPWindowTx_GetTXQueue+0xc8>)
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	2b01      	cmp	r3, #1
 80162a0:	dd1c      	ble.n	80162dc <pxTCPWindowTx_GetTXQueue+0xbc>
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80162a8:	2b17      	cmp	r3, #23
 80162aa:	d017      	beq.n	80162dc <pxTCPWindowTx_GetTXQueue+0xbc>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %d bytes for sequence number %u (ws %u)\n",
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80162b2:	4618      	mov	r0, r3
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80162ba:	461c      	mov	r4, r3
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	6899      	ldr	r1, [r3, #8]
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	681a      	ldr	r2, [r3, #0]
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	69db      	ldr	r3, [r3, #28]
 80162c8:	1ad3      	subs	r3, r2, r3
 80162ca:	683a      	ldr	r2, [r7, #0]
 80162cc:	9201      	str	r2, [sp, #4]
 80162ce:	9300      	str	r3, [sp, #0]
 80162d0:	460b      	mov	r3, r1
 80162d2:	4622      	mov	r2, r4
 80162d4:	4601      	mov	r1, r0
 80162d6:	4805      	ldr	r0, [pc, #20]	@ (80162ec <pxTCPWindowTx_GetTXQueue+0xcc>)
 80162d8:	f00b ff36 	bl	8022148 <lUDPLoggingPrintf>
                                             ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulWindowSize ) );
                }
            }

            return pxSegment;
 80162dc:	68fb      	ldr	r3, [r7, #12]
        }
 80162de:	4618      	mov	r0, r3
 80162e0:	3714      	adds	r7, #20
 80162e2:	46bd      	mov	sp, r7
 80162e4:	bd90      	pop	{r4, r7, pc}
 80162e6:	bf00      	nop
 80162e8:	200015c8 	.word	0x200015c8
 80162ec:	08026fec 	.word	0x08026fec

080162f0 <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 80162f0:	b590      	push	{r4, r7, lr}
 80162f2:	b08b      	sub	sp, #44	@ 0x2c
 80162f4:	af02      	add	r7, sp, #8
 80162f6:	60f8      	str	r0, [r7, #12]
 80162f8:	60b9      	str	r1, [r7, #8]
 80162fa:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulReturn = 0U;
 80162fc:	2300      	movs	r3, #0
 80162fe:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	3340      	adds	r3, #64	@ 0x40
 8016304:	4618      	mov	r0, r3
 8016306:	f7ff fa2b 	bl	8015760 <xTCPWindowGetHead>
 801630a:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment != NULL )
 8016314:	69fb      	ldr	r3, [r7, #28]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d01c      	beq.n	8016354 <ulTCPWindowTxGet+0x64>
            {
                /* There is a priority segment. It doesn't need any checking for
                 * space or timeouts. */
                if( xTCPWindowLoggingLevel != 0 )
 801631a:	4b41      	ldr	r3, [pc, #260]	@ (8016420 <ulTCPWindowTxGet+0x130>)
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d024      	beq.n	801636c <ulTCPWindowTxGet+0x7c>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %d bytes for sequence number %u (ws %u)\n",
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016328:	4618      	mov	r0, r3
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016330:	461c      	mov	r4, r3
 8016332:	69fb      	ldr	r3, [r7, #28]
 8016334:	6899      	ldr	r1, [r3, #8]
 8016336:	69fb      	ldr	r3, [r7, #28]
 8016338:	681a      	ldr	r2, [r3, #0]
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	69db      	ldr	r3, [r3, #28]
 801633e:	1ad3      	subs	r3, r2, r3
 8016340:	68ba      	ldr	r2, [r7, #8]
 8016342:	9201      	str	r2, [sp, #4]
 8016344:	9300      	str	r3, [sp, #0]
 8016346:	460b      	mov	r3, r1
 8016348:	4622      	mov	r2, r4
 801634a:	4601      	mov	r1, r0
 801634c:	4835      	ldr	r0, [pc, #212]	@ (8016424 <ulTCPWindowTxGet+0x134>)
 801634e:	f00b fefb 	bl	8022148 <lUDPLoggingPrintf>
 8016352:	e00b      	b.n	801636c <ulTCPWindowTxGet+0x7c>
            else
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = pxTCPWindowTx_GetWaitQueue( pxWindow );
 8016354:	68f8      	ldr	r0, [r7, #12]
 8016356:	f7ff ff09 	bl	801616c <pxTCPWindowTx_GetWaitQueue>
 801635a:	61f8      	str	r0, [r7, #28]

                if( pxSegment == NULL )
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d104      	bne.n	801636c <ulTCPWindowTxGet+0x7c>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = pxTCPWindowTx_GetTXQueue( pxWindow, ulWindowSize );
 8016362:	68b9      	ldr	r1, [r7, #8]
 8016364:	68f8      	ldr	r0, [r7, #12]
 8016366:	f7ff ff5b 	bl	8016220 <pxTCPWindowTx_GetTXQueue>
 801636a:	61f8      	str	r0, [r7, #28]
                }
            }

            /* See if it has already been determined to return 0. */
            if( pxSegment != NULL )
 801636c:	69fb      	ldr	r3, [r7, #28]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d051      	beq.n	8016416 <ulTCPWindowTxGet+0x126>
            {
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 8016372:	69fb      	ldr	r3, [r7, #28]
 8016374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016376:	2b00      	cmp	r3, #0
 8016378:	d004      	beq.n	8016384 <ulTCPWindowTxGet+0x94>
 801637a:	f240 7136 	movw	r1, #1846	@ 0x736
 801637e:	482a      	ldr	r0, [pc, #168]	@ (8016428 <ulTCPWindowTxGet+0x138>)
 8016380:	f7eb faea 	bl	8001958 <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801638a:	69fb      	ldr	r3, [r7, #28]
 801638c:	3318      	adds	r3, #24
 801638e:	4619      	mov	r1, r3
 8016390:	4610      	mov	r0, r2
 8016392:	f7ff f86d 	bl	8015470 <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8016396:	69fa      	ldr	r2, [r7, #28]
 8016398:	7d93      	ldrb	r3, [r2, #22]
 801639a:	f043 0301 	orr.w	r3, r3, #1
 801639e:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 80163a0:	69fb      	ldr	r3, [r7, #28]
 80163a2:	7d1b      	ldrb	r3, [r3, #20]
 80163a4:	3301      	adds	r3, #1
 80163a6:	b2da      	uxtb	r2, r3
 80163a8:	69fb      	ldr	r3, [r7, #28]
 80163aa:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 80163ac:	69fb      	ldr	r3, [r7, #28]
 80163ae:	7d1b      	ldrb	r3, [r3, #20]
 80163b0:	2b04      	cmp	r3, #4
 80163b2:	d120      	bne.n	80163f6 <ulTCPWindowTxGet+0x106>
                    ( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) ) )
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	689a      	ldr	r2, [r3, #8]
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80163be:	005b      	lsls	r3, r3, #1
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 80163c0:	429a      	cmp	r2, r3
 80163c2:	d918      	bls.n	80163f6 <ulTCPWindowTxGet+0x106>
                {
                    uint16_t usMSS2 = ( uint16_t ) ( pxWindow->usMSS * 2U );
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80163ca:	005b      	lsls	r3, r3, #1
 80163cc:	82fb      	strh	r3, [r7, #22]
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %u]: Change Tx window: %u -> %u\n",
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80163d4:	4619      	mov	r1, r3
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80163dc:	4618      	mov	r0, r3
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	689a      	ldr	r2, [r3, #8]
 80163e2:	8afb      	ldrh	r3, [r7, #22]
 80163e4:	9300      	str	r3, [sp, #0]
 80163e6:	4613      	mov	r3, r2
 80163e8:	4602      	mov	r2, r0
 80163ea:	4810      	ldr	r0, [pc, #64]	@ (801642c <ulTCPWindowTxGet+0x13c>)
 80163ec:	f00b feac 	bl	8022148 <lUDPLoggingPrintf>
                                             pxWindow->usPeerPortNumber,
                                             pxWindow->usOurPortNumber,
                                             ( unsigned ) pxWindow->xSize.ulTxWindowLength,
                                             usMSS2 ) );
                    pxWindow->xSize.ulTxWindowLength = usMSS2;
 80163f0:	8afa      	ldrh	r2, [r7, #22]
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	609a      	str	r2, [r3, #8]
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 80163f6:	69fb      	ldr	r3, [r7, #28]
 80163f8:	3310      	adds	r3, #16
 80163fa:	4618      	mov	r0, r3
 80163fc:	f7ff f848 	bl	8015490 <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8016400:	69fb      	ldr	r3, [r7, #28]
 8016402:	681a      	ldr	r2, [r3, #0]
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 8016408:	69fb      	ldr	r3, [r7, #28]
 801640a:	68da      	ldr	r2, [r3, #12]
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8016410:	69fb      	ldr	r3, [r7, #28]
 8016412:	689b      	ldr	r3, [r3, #8]
 8016414:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 8016416:	69bb      	ldr	r3, [r7, #24]
        }
 8016418:	4618      	mov	r0, r3
 801641a:	3724      	adds	r7, #36	@ 0x24
 801641c:	46bd      	mov	sp, r7
 801641e:	bd90      	pop	{r4, r7, pc}
 8016420:	200015c8 	.word	0x200015c8
 8016424:	08027038 	.word	0x08027038
 8016428:	08026cd4 	.word	0x08026cd4
 801642c:	08027084 	.word	0x08027084

08016430 <prvTCPWindowTxCheckAck_CalcSRTT>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 * @param[in] pxSegment The segment that was just acknowledged.
 */
        static void prvTCPWindowTxCheckAck_CalcSRTT( TCPWindow_t * pxWindow,
                                                     const TCPSegment_t * pxSegment )
        {
 8016430:	b580      	push	{r7, lr}
 8016432:	b084      	sub	sp, #16
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
 8016438:	6039      	str	r1, [r7, #0]
            int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 801643a:	683b      	ldr	r3, [r7, #0]
 801643c:	3310      	adds	r3, #16
 801643e:	4618      	mov	r0, r3
 8016440:	f7ff f833 	bl	80154aa <ulTimerGetAge>
 8016444:	4603      	mov	r3, r0
 8016446:	60fb      	str	r3, [r7, #12]

            if( pxWindow->lSRTT >= mS )
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801644c:	68fa      	ldr	r2, [r7, #12]
 801644e:	429a      	cmp	r2, r3
 8016450:	dc0e      	bgt.n	8016470 <prvTCPWindowTxCheckAck_CalcSRTT+0x40>
            {
                /* RTT becomes smaller: adapt slowly. */
                pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016456:	4613      	mov	r3, r2
 8016458:	00db      	lsls	r3, r3, #3
 801645a:	1a9a      	subs	r2, r3, r2
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	4413      	add	r3, r2
 8016460:	2b00      	cmp	r3, #0
 8016462:	da00      	bge.n	8016466 <prvTCPWindowTxCheckAck_CalcSRTT+0x36>
 8016464:	3307      	adds	r3, #7
 8016466:	10db      	asrs	r3, r3, #3
 8016468:	461a      	mov	r2, r3
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	639a      	str	r2, [r3, #56]	@ 0x38
 801646e:	e00d      	b.n	801648c <prvTCPWindowTxCheckAck_CalcSRTT+0x5c>
            }
            else
            {
                /* RTT becomes larger: adapt quicker */
                pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016474:	4613      	mov	r3, r2
 8016476:	005b      	lsls	r3, r3, #1
 8016478:	441a      	add	r2, r3
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	4413      	add	r3, r2
 801647e:	2b00      	cmp	r3, #0
 8016480:	da00      	bge.n	8016484 <prvTCPWindowTxCheckAck_CalcSRTT+0x54>
 8016482:	3303      	adds	r3, #3
 8016484:	109b      	asrs	r3, r3, #2
 8016486:	461a      	mov	r2, r3
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* Cap to the minimum of 50ms. */
            if( pxWindow->lSRTT < winSRTT_CAP_mS )
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016490:	2b31      	cmp	r3, #49	@ 0x31
 8016492:	dc02      	bgt.n	801649a <prvTCPWindowTxCheckAck_CalcSRTT+0x6a>
            {
                pxWindow->lSRTT = winSRTT_CAP_mS;
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	2232      	movs	r2, #50	@ 0x32
 8016498:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }
 801649a:	bf00      	nop
 801649c:	3710      	adds	r7, #16
 801649e:	46bd      	mov	sp, r7
 80164a0:	bd80      	pop	{r7, pc}
	...

080164a4 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 80164a4:	b5b0      	push	{r4, r5, r7, lr}
 80164a6:	b090      	sub	sp, #64	@ 0x40
 80164a8:	af04      	add	r7, sp, #16
 80164aa:	60f8      	str	r0, [r7, #12]
 80164ac:	60b9      	str	r1, [r7, #8]
 80164ae:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 80164b0:	2300      	movs	r3, #0
 80164b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst;
 80164b4:	68bb      	ldr	r3, [r7, #8]
 80164b6:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xTxSegments.xListEnd ) );
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	3398      	adds	r3, #152	@ 0x98
 80164bc:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 80164be:	69fb      	ldr	r3, [r7, #28]
 80164c0:	685b      	ldr	r3, [r3, #4]
 80164c2:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 80164c4:	e0a6      	b.n	8016614 <prvTCPWindowTxCheckAck+0x170>
            {
                xDoUnlink = pdFALSE;
 80164c6:	2300      	movs	r3, #0
 80164c8:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80164ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164cc:	68db      	ldr	r3, [r3, #12]
 80164ce:	61bb      	str	r3, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 80164d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164d2:	685b      	ldr	r3, [r3, #4]
 80164d4:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 80164d6:	69bb      	ldr	r3, [r7, #24]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	4619      	mov	r1, r3
 80164dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80164de:	f7fe ff9c 	bl	801541a <xSequenceGreaterThan>
 80164e2:	4603      	mov	r3, r0
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	f040 8094 	bne.w	8016612 <prvTCPWindowTxCheckAck+0x16e>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 80164ea:	69bb      	ldr	r3, [r7, #24]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80164f0:	429a      	cmp	r2, r3
 80164f2:	f040 809c 	bne.w	801662e <prvTCPWindowTxCheckAck+0x18a>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 80164f6:	69bb      	ldr	r3, [r7, #24]
 80164f8:	689b      	ldr	r3, [r3, #8]
 80164fa:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 80164fc:	69bb      	ldr	r3, [r7, #24]
 80164fe:	7d9b      	ldrb	r3, [r3, #22]
 8016500:	f003 0302 	and.w	r3, r3, #2
 8016504:	b2db      	uxtb	r3, r3
 8016506:	2b00      	cmp	r3, #0
 8016508:	d144      	bne.n	8016594 <prvTCPWindowTxCheckAck+0xf0>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 801650a:	69bb      	ldr	r3, [r7, #24]
 801650c:	681a      	ldr	r2, [r3, #0]
 801650e:	697b      	ldr	r3, [r7, #20]
 8016510:	4413      	add	r3, r2
 8016512:	6879      	ldr	r1, [r7, #4]
 8016514:	4618      	mov	r0, r3
 8016516:	f7fe ff80 	bl	801541a <xSequenceGreaterThan>
 801651a:	4603      	mov	r3, r0
 801651c:	2b00      	cmp	r3, #0
 801651e:	d023      	beq.n	8016568 <prvTCPWindowTxCheckAck+0xc4>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8016520:	69bb      	ldr	r3, [r7, #24]
 8016522:	681a      	ldr	r2, [r3, #0]
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	69db      	ldr	r3, [r3, #28]
 8016528:	1ad3      	subs	r3, r2, r3
 801652a:	613b      	str	r3, [r7, #16]
                            FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %u - %u Partial sequence number %u - %u\n",
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016532:	461c      	mov	r4, r3
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801653a:	461d      	mov	r5, r3
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	69db      	ldr	r3, [r3, #28]
 8016540:	693a      	ldr	r2, [r7, #16]
 8016542:	1ad0      	subs	r0, r2, r3
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	69db      	ldr	r3, [r3, #28]
 8016548:	687a      	ldr	r2, [r7, #4]
 801654a:	1ad3      	subs	r3, r2, r3
 801654c:	6939      	ldr	r1, [r7, #16]
 801654e:	697a      	ldr	r2, [r7, #20]
 8016550:	440a      	add	r2, r1
 8016552:	9202      	str	r2, [sp, #8]
 8016554:	693a      	ldr	r2, [r7, #16]
 8016556:	9201      	str	r2, [sp, #4]
 8016558:	9300      	str	r3, [sp, #0]
 801655a:	4603      	mov	r3, r0
 801655c:	462a      	mov	r2, r5
 801655e:	4621      	mov	r1, r4
 8016560:	4836      	ldr	r0, [pc, #216]	@ (801663c <prvTCPWindowTxCheckAck+0x198>)
 8016562:	f00b fdf1 	bl	8022148 <lUDPLoggingPrintf>
                                                     ( unsigned ) ulFirstSeq,
                                                     ( unsigned ) ( ulFirstSeq + ulDataLength ) ) );
                        }
                        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                        break;
 8016566:	e063      	b.n	8016630 <prvTCPWindowTxCheckAck+0x18c>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 8016568:	69ba      	ldr	r2, [r7, #24]
 801656a:	7d93      	ldrb	r3, [r2, #22]
 801656c:	f043 0302 	orr.w	r3, r3, #2
 8016570:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8016572:	69bb      	ldr	r3, [r7, #24]
 8016574:	7d1b      	ldrb	r3, [r3, #20]
 8016576:	2b01      	cmp	r3, #1
 8016578:	d10a      	bne.n	8016590 <prvTCPWindowTxCheckAck+0xec>
                        ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 801657a:	69bb      	ldr	r3, [r7, #24]
 801657c:	681a      	ldr	r2, [r3, #0]
 801657e:	697b      	ldr	r3, [r7, #20]
 8016580:	4413      	add	r3, r2
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8016582:	687a      	ldr	r2, [r7, #4]
 8016584:	429a      	cmp	r2, r3
 8016586:	d103      	bne.n	8016590 <prvTCPWindowTxCheckAck+0xec>
                    {
                        prvTCPWindowTxCheckAck_CalcSRTT( pxWindow, pxSegment );
 8016588:	69b9      	ldr	r1, [r7, #24]
 801658a:	68f8      	ldr	r0, [r7, #12]
 801658c:	f7ff ff50 	bl	8016430 <prvTCPWindowTxCheckAck_CalcSRTT>
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 8016590:	2301      	movs	r3, #1
 8016592:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	6a1b      	ldr	r3, [r3, #32]
 8016598:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801659a:	429a      	cmp	r2, r3
 801659c:	d128      	bne.n	80165f0 <prvTCPWindowTxCheckAck+0x14c>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 801659e:	4b28      	ldr	r3, [pc, #160]	@ (8016640 <prvTCPWindowTxCheckAck+0x19c>)
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	2b01      	cmp	r3, #1
 80165a4:	dd15      	ble.n	80165d2 <prvTCPWindowTxCheckAck+0x12e>
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80165ac:	2b17      	cmp	r3, #23
 80165ae:	d010      	beq.n	80165d2 <prvTCPWindowTxCheckAck+0x12e>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %u - %u Ready sequence number %u\n",
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	69db      	ldr	r3, [r3, #28]
 80165b4:	68ba      	ldr	r2, [r7, #8]
 80165b6:	1ad1      	subs	r1, r2, r3
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	69db      	ldr	r3, [r3, #28]
 80165bc:	687a      	ldr	r2, [r7, #4]
 80165be:	1ad0      	subs	r0, r2, r3
 80165c0:	69bb      	ldr	r3, [r7, #24]
 80165c2:	681a      	ldr	r2, [r3, #0]
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	69db      	ldr	r3, [r3, #28]
 80165c8:	1ad3      	subs	r3, r2, r3
 80165ca:	4602      	mov	r2, r0
 80165cc:	481d      	ldr	r0, [pc, #116]	@ (8016644 <prvTCPWindowTxCheckAck+0x1a0>)
 80165ce:	f00b fdbb 	bl	8022148 <lUDPLoggingPrintf>
                                                 ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	6a1a      	ldr	r2, [r3, #32]
 80165d6:	697b      	ldr	r3, [r7, #20]
 80165d8:	441a      	add	r2, r3
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 80165de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80165e0:	697b      	ldr	r3, [r7, #20]
 80165e2:	4413      	add	r3, r2
 80165e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 80165e6:	69b8      	ldr	r0, [r7, #24]
 80165e8:	f7ff f8ec 	bl	80157c4 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 80165ec:	2300      	movs	r3, #0
 80165ee:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 80165f0:	6a3b      	ldr	r3, [r7, #32]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d008      	beq.n	8016608 <prvTCPWindowTxCheckAck+0x164>
 80165f6:	69bb      	ldr	r3, [r7, #24]
 80165f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d004      	beq.n	8016608 <prvTCPWindowTxCheckAck+0x164>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 80165fe:	69bb      	ldr	r3, [r7, #24]
 8016600:	3318      	adds	r3, #24
 8016602:	4618      	mov	r0, r3
 8016604:	f7ec fff2 	bl	80035ec <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 8016608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801660a:	697b      	ldr	r3, [r7, #20]
 801660c:	4413      	add	r3, r2
 801660e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016610:	e000      	b.n	8016614 <prvTCPWindowTxCheckAck+0x170>
                    continue;
 8016612:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8016614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016616:	69fb      	ldr	r3, [r7, #28]
 8016618:	429a      	cmp	r2, r3
 801661a:	d009      	beq.n	8016630 <prvTCPWindowTxCheckAck+0x18c>
 801661c:	6879      	ldr	r1, [r7, #4]
 801661e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016620:	f7fe fee5 	bl	80153ee <xSequenceLessThan>
 8016624:	4603      	mov	r3, r0
 8016626:	2b00      	cmp	r3, #0
 8016628:	f47f af4d 	bne.w	80164c6 <prvTCPWindowTxCheckAck+0x22>
 801662c:	e000      	b.n	8016630 <prvTCPWindowTxCheckAck+0x18c>
                    break;
 801662e:	bf00      	nop
            }

            return ulBytesConfirmed;
 8016630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8016632:	4618      	mov	r0, r3
 8016634:	3730      	adds	r7, #48	@ 0x30
 8016636:	46bd      	mov	sp, r7
 8016638:	bdb0      	pop	{r4, r5, r7, pc}
 801663a:	bf00      	nop
 801663c:	080270bc 	.word	0x080270bc
 8016640:	200015c8 	.word	0x200015c8
 8016644:	08027104 	.word	0x08027104

08016648 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 8016648:	b580      	push	{r7, lr}
 801664a:	b086      	sub	sp, #24
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
 8016650:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0U;
 8016652:	2300      	movs	r3, #0
 8016654:	613b      	str	r3, [r7, #16]
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xWaitQueue.xListEnd ) );
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	3370      	adds	r3, #112	@ 0x70
 801665a:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	685b      	ldr	r3, [r3, #4]
 8016660:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 8016662:	e049      	b.n	80166f8 <prvTCPWindowFastRetransmit+0xb0>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8016664:	697b      	ldr	r3, [r7, #20]
 8016666:	68db      	ldr	r3, [r3, #12]
 8016668:	60bb      	str	r3, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 801666a:	697b      	ldr	r3, [r7, #20]
 801666c:	685b      	ldr	r3, [r3, #4]
 801666e:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	7d9b      	ldrb	r3, [r3, #22]
 8016674:	f003 0302 	and.w	r3, r3, #2
 8016678:	b2db      	uxtb	r3, r3
 801667a:	2b00      	cmp	r3, #0
 801667c:	d13c      	bne.n	80166f8 <prvTCPWindowFastRetransmit+0xb0>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 801667e:	68bb      	ldr	r3, [r7, #8]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	6839      	ldr	r1, [r7, #0]
 8016684:	4618      	mov	r0, r3
 8016686:	f7fe feb2 	bl	80153ee <xSequenceLessThan>
 801668a:	4603      	mov	r3, r0
 801668c:	2b00      	cmp	r3, #0
 801668e:	d033      	beq.n	80166f8 <prvTCPWindowFastRetransmit+0xb0>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 8016690:	68bb      	ldr	r3, [r7, #8]
 8016692:	7d5b      	ldrb	r3, [r3, #21]
 8016694:	3301      	adds	r3, #1
 8016696:	b2da      	uxtb	r2, r3
 8016698:	68bb      	ldr	r3, [r7, #8]
 801669a:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 801669c:	68bb      	ldr	r3, [r7, #8]
 801669e:	7d5b      	ldrb	r3, [r3, #21]
 80166a0:	2b03      	cmp	r3, #3
 80166a2:	d129      	bne.n	80166f8 <prvTCPWindowFastRetransmit+0xb0>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 80166a4:	68bb      	ldr	r3, [r7, #8]
 80166a6:	2200      	movs	r2, #0
 80166a8:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 80166aa:	4b18      	ldr	r3, [pc, #96]	@ (801670c <prvTCPWindowFastRetransmit+0xc4>)
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	db11      	blt.n	80166d6 <prvTCPWindowFastRetransmit+0x8e>
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80166b8:	2b17      	cmp	r3, #23
 80166ba:	d00c      	beq.n	80166d6 <prvTCPWindowFastRetransmit+0x8e>
                            {
                                FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %u < %u\n",
 80166bc:	68bb      	ldr	r3, [r7, #8]
 80166be:	681a      	ldr	r2, [r3, #0]
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	69db      	ldr	r3, [r3, #28]
 80166c4:	1ad1      	subs	r1, r2, r3
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	69db      	ldr	r3, [r3, #28]
 80166ca:	683a      	ldr	r2, [r7, #0]
 80166cc:	1ad3      	subs	r3, r2, r3
 80166ce:	461a      	mov	r2, r3
 80166d0:	480f      	ldr	r0, [pc, #60]	@ (8016710 <prvTCPWindowFastRetransmit+0xc8>)
 80166d2:	f00b fd39 	bl	8022148 <lUDPLoggingPrintf>
                                                         ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ) ) );
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 80166d6:	68bb      	ldr	r3, [r7, #8]
 80166d8:	3318      	adds	r3, #24
 80166da:	4618      	mov	r0, r3
 80166dc:	f7ec ff86 	bl	80035ec <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80166e6:	68bb      	ldr	r3, [r7, #8]
 80166e8:	3318      	adds	r3, #24
 80166ea:	4619      	mov	r1, r3
 80166ec:	4610      	mov	r0, r2
 80166ee:	f7fe febf 	bl	8015470 <vListInsertFifo>
                            ulCount++;
 80166f2:	693b      	ldr	r3, [r7, #16]
 80166f4:	3301      	adds	r3, #1
 80166f6:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 80166f8:	697a      	ldr	r2, [r7, #20]
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	429a      	cmp	r2, r3
 80166fe:	d1b1      	bne.n	8016664 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 8016700:	693b      	ldr	r3, [r7, #16]
        }
 8016702:	4618      	mov	r0, r3
 8016704:	3718      	adds	r7, #24
 8016706:	46bd      	mov	sp, r7
 8016708:	bd80      	pop	{r7, pc}
 801670a:	bf00      	nop
 801670c:	200015c8 	.word	0x200015c8
 8016710:	08027140 	.word	0x08027140

08016714 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 8016714:	b580      	push	{r7, lr}
 8016716:	b084      	sub	sp, #16
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
 801671c:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence;
            uint32_t ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	6a1b      	ldr	r3, [r3, #32]
 8016722:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8016724:	68b9      	ldr	r1, [r7, #8]
 8016726:	6838      	ldr	r0, [r7, #0]
 8016728:	f7fe fe4c 	bl	80153c4 <xSequenceLessThanOrEqual>
 801672c:	4603      	mov	r3, r0
 801672e:	2b00      	cmp	r3, #0
 8016730:	d002      	beq.n	8016738 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0U;
 8016732:	2300      	movs	r3, #0
 8016734:	60fb      	str	r3, [r7, #12]
 8016736:	e005      	b.n	8016744 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8016738:	683a      	ldr	r2, [r7, #0]
 801673a:	68b9      	ldr	r1, [r7, #8]
 801673c:	6878      	ldr	r0, [r7, #4]
 801673e:	f7ff feb1 	bl	80164a4 <prvTCPWindowTxCheckAck>
 8016742:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 8016744:	68fb      	ldr	r3, [r7, #12]
        }
 8016746:	4618      	mov	r0, r3
 8016748:	3710      	adds	r7, #16
 801674a:	46bd      	mov	sp, r7
 801674c:	bd80      	pop	{r7, pc}
	...

08016750 <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 8016750:	b5b0      	push	{r4, r5, r7, lr}
 8016752:	b088      	sub	sp, #32
 8016754:	af02      	add	r7, sp, #8
 8016756:	60f8      	str	r0, [r7, #12]
 8016758:	60b9      	str	r1, [r7, #8]
 801675a:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	6a1b      	ldr	r3, [r3, #32]
 8016760:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8016762:	687a      	ldr	r2, [r7, #4]
 8016764:	68b9      	ldr	r1, [r7, #8]
 8016766:	68f8      	ldr	r0, [r7, #12]
 8016768:	f7ff fe9c 	bl	80164a4 <prvTCPWindowTxCheckAck>
 801676c:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 801676e:	68b9      	ldr	r1, [r7, #8]
 8016770:	68f8      	ldr	r0, [r7, #12]
 8016772:	f7ff ff69 	bl	8016648 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8016776:	4b16      	ldr	r3, [pc, #88]	@ (80167d0 <ulTCPWindowTxSack+0x80>)
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	2b00      	cmp	r3, #0
 801677c:	dd23      	ble.n	80167c6 <ulTCPWindowTxSack+0x76>
 801677e:	6979      	ldr	r1, [r7, #20]
 8016780:	68b8      	ldr	r0, [r7, #8]
 8016782:	f7fe fe4a 	bl	801541a <xSequenceGreaterThan>
 8016786:	4603      	mov	r3, r0
 8016788:	2b00      	cmp	r3, #0
 801678a:	d01c      	beq.n	80167c6 <ulTCPWindowTxSack+0x76>
            {
                FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %u to %u (ack = %u)\n",
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016792:	461c      	mov	r4, r3
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801679a:	461d      	mov	r5, r3
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	69db      	ldr	r3, [r3, #28]
 80167a0:	68ba      	ldr	r2, [r7, #8]
 80167a2:	1ad0      	subs	r0, r2, r3
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	69db      	ldr	r3, [r3, #28]
 80167a8:	687a      	ldr	r2, [r7, #4]
 80167aa:	1ad3      	subs	r3, r2, r3
 80167ac:	68fa      	ldr	r2, [r7, #12]
 80167ae:	6a11      	ldr	r1, [r2, #32]
 80167b0:	68fa      	ldr	r2, [r7, #12]
 80167b2:	69d2      	ldr	r2, [r2, #28]
 80167b4:	1a8a      	subs	r2, r1, r2
 80167b6:	9201      	str	r2, [sp, #4]
 80167b8:	9300      	str	r3, [sp, #0]
 80167ba:	4603      	mov	r3, r0
 80167bc:	462a      	mov	r2, r5
 80167be:	4621      	mov	r1, r4
 80167c0:	4804      	ldr	r0, [pc, #16]	@ (80167d4 <ulTCPWindowTxSack+0x84>)
 80167c2:	f00b fcc1 	bl	8022148 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
            }

            return ulAckCount;
 80167c6:	693b      	ldr	r3, [r7, #16]
        }
 80167c8:	4618      	mov	r0, r3
 80167ca:	3718      	adds	r7, #24
 80167cc:	46bd      	mov	sp, r7
 80167ce:	bdb0      	pop	{r4, r5, r7, pc}
 80167d0:	200015c8 	.word	0x200015c8
 80167d4:	08027180 	.word	0x08027180

080167d8 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b084      	sub	sp, #16
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
    const UDPPacket_t * pxUDPPacket;

    if( pxNetworkBuffer != NULL )
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d014      	beq.n	8016810 <vProcessGeneratedUDPPacket+0x38>
        /* Map the UDP packet onto the start of the frame. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80167ea:	60fb      	str	r3, [r7, #12]

        switch( pxUDPPacket->xEthernetHeader.usFrameType )
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	899b      	ldrh	r3, [r3, #12]
 80167f0:	b29b      	uxth	r3, r3
 80167f2:	2b08      	cmp	r3, #8
 80167f4:	d004      	beq.n	8016800 <vProcessGeneratedUDPPacket+0x28>
 80167f6:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80167fa:	4293      	cmp	r3, r2
 80167fc:	d004      	beq.n	8016808 <vProcessGeneratedUDPPacket+0x30>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
                    break;
            #endif
            default:
                /* do nothing, coverity happy */
                break;
 80167fe:	e007      	b.n	8016810 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv4( pxNetworkBuffer );
 8016800:	6878      	ldr	r0, [r7, #4]
 8016802:	f000 f845 	bl	8016890 <vProcessGeneratedUDPPacket_IPv4>
                    break;
 8016806:	e003      	b.n	8016810 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
 8016808:	6878      	ldr	r0, [r7, #4]
 801680a:	f000 fae3 	bl	8016dd4 <vProcessGeneratedUDPPacket_IPv6>
                    break;
 801680e:	bf00      	nop
        }
    }
}
 8016810:	bf00      	nop
 8016812:	3710      	adds	r7, #16
 8016814:	46bd      	mov	sp, r7
 8016816:	bd80      	pop	{r7, pc}

08016818 <xProcessReceivedUDPPacket>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort,
                                      BaseType_t * pxIsWaitingForARPResolution )
{
 8016818:	b580      	push	{r7, lr}
 801681a:	b086      	sub	sp, #24
 801681c:	af00      	add	r7, sp, #0
 801681e:	60f8      	str	r0, [r7, #12]
 8016820:	460b      	mov	r3, r1
 8016822:	607a      	str	r2, [r7, #4]
 8016824:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdFAIL;
 8016826:	2300      	movs	r3, #0
 8016828:	617b      	str	r3, [r7, #20]
    const UDPPacket_t * pxUDPPacket;

    configASSERT( pxNetworkBuffer != NULL );
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d103      	bne.n	8016838 <xProcessReceivedUDPPacket+0x20>
 8016830:	2178      	movs	r1, #120	@ 0x78
 8016832:	4816      	ldr	r0, [pc, #88]	@ (801688c <xProcessReceivedUDPPacket+0x74>)
 8016834:	f7eb f890 	bl	8001958 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801683c:	2b00      	cmp	r3, #0
 801683e:	d103      	bne.n	8016848 <xProcessReceivedUDPPacket+0x30>
 8016840:	2179      	movs	r1, #121	@ 0x79
 8016842:	4812      	ldr	r0, [pc, #72]	@ (801688c <xProcessReceivedUDPPacket+0x74>)
 8016844:	f7eb f888 	bl	8001958 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( const UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801684c:	613b      	str	r3, [r7, #16]

    switch( pxUDPPacket->xEthernetHeader.usFrameType )
 801684e:	693b      	ldr	r3, [r7, #16]
 8016850:	899b      	ldrh	r3, [r3, #12]
 8016852:	b29b      	uxth	r3, r3
 8016854:	2b08      	cmp	r3, #8
 8016856:	d004      	beq.n	8016862 <xProcessReceivedUDPPacket+0x4a>
 8016858:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 801685c:	4293      	cmp	r3, r2
 801685e:	d008      	beq.n	8016872 <xProcessReceivedUDPPacket+0x5a>
                                                          usPort, pxIsWaitingForARPResolution );
                break;
        #endif
        default:
            /* do nothing, coverity happy */
            break;
 8016860:	e00f      	b.n	8016882 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv4( pxNetworkBuffer,
 8016862:	897b      	ldrh	r3, [r7, #10]
 8016864:	687a      	ldr	r2, [r7, #4]
 8016866:	4619      	mov	r1, r3
 8016868:	68f8      	ldr	r0, [r7, #12]
 801686a:	f000 f92f 	bl	8016acc <xProcessReceivedUDPPacket_IPv4>
 801686e:	6178      	str	r0, [r7, #20]
                break;
 8016870:	e007      	b.n	8016882 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv6( pxNetworkBuffer,
 8016872:	897b      	ldrh	r3, [r7, #10]
 8016874:	687a      	ldr	r2, [r7, #4]
 8016876:	4619      	mov	r1, r3
 8016878:	68f8      	ldr	r0, [r7, #12]
 801687a:	f000 fbdd 	bl	8017038 <xProcessReceivedUDPPacket_IPv6>
 801687e:	6178      	str	r0, [r7, #20]
                break;
 8016880:	bf00      	nop
    }

    return xReturn;
 8016882:	697b      	ldr	r3, [r7, #20]
}
 8016884:	4618      	mov	r0, r3
 8016886:	3718      	adds	r7, #24
 8016888:	46bd      	mov	sp, r7
 801688a:	bd80      	pop	{r7, pc}
 801688c:	080271b4 	.word	0x080271b4

08016890 <vProcessGeneratedUDPPacket_IPv4>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv4( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b08e      	sub	sp, #56	@ 0x38
 8016894:	af00      	add	r7, sp, #0
 8016896:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	695b      	ldr	r3, [r3, #20]
 801689c:	60fb      	str	r3, [r7, #12]
    NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80168a2:	60bb      	str	r3, [r7, #8]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168a8:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d104      	bne.n	80168bc <vProcessGeneratedUDPPacket_IPv4+0x2c>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80168b6:	3b2a      	subs	r3, #42	@ 0x2a
 80168b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80168ba:	e003      	b.n	80168c4 <vProcessGeneratedUDPPacket_IPv4+0x34>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80168c0:	3b2a      	subs	r3, #42	@ 0x2a
 80168c2:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ), &( pxEndPoint ) );
 80168c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80168c6:	f107 0208 	add.w	r2, r7, #8
 80168ca:	f107 030c 	add.w	r3, r7, #12
 80168ce:	4618      	mov	r0, r3
 80168d0:	f7f0 fd68 	bl	80073a4 <eARPGetCacheEntry>
 80168d4:	4603      	mov	r3, r0
 80168d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( pxNetworkBuffer->pxEndPoint == NULL )
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d102      	bne.n	80168e8 <vProcessGeneratedUDPPacket_IPv4+0x58>
    {
        pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80168e2:	68ba      	ldr	r2, [r7, #8]
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    if( eReturned != eCantSendPacket )
 80168e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80168ec:	2b02      	cmp	r3, #2
 80168ee:	f000 80a0 	beq.w	8016a32 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
    {
        if( eReturned == eARPCacheHit )
 80168f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80168f6:	2b01      	cmp	r3, #1
 80168f8:	d176      	bne.n	80169e8 <vProcessGeneratedUDPPacket_IPv4+0x158>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 80168fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168fc:	330e      	adds	r3, #14
 80168fe:	627b      	str	r3, [r7, #36]	@ 0x24

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016904:	2b00      	cmp	r3, #0
 8016906:	d025      	beq.n	8016954 <vProcessGeneratedUDPPacket_IPv4+0xc4>
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8016908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801690a:	3322      	adds	r3, #34	@ 0x22
 801690c:	623b      	str	r3, [r7, #32]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8016912:	6a3b      	ldr	r3, [r7, #32]
 8016914:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 801691a:	6a3b      	ldr	r3, [r7, #32]
 801691c:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 801691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016920:	b29b      	uxth	r3, r3
 8016922:	3308      	adds	r3, #8
 8016924:	b29a      	uxth	r2, r3
 8016926:	6a3b      	ldr	r3, [r7, #32]
 8016928:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 801692a:	6a3b      	ldr	r3, [r7, #32]
 801692c:	889b      	ldrh	r3, [r3, #4]
 801692e:	b29b      	uxth	r3, r3
 8016930:	021b      	lsls	r3, r3, #8
 8016932:	b21a      	sxth	r2, r3
 8016934:	6a3b      	ldr	r3, [r7, #32]
 8016936:	889b      	ldrh	r3, [r3, #4]
 8016938:	b29b      	uxth	r3, r3
 801693a:	0a1b      	lsrs	r3, r3, #8
 801693c:	b29b      	uxth	r3, r3
 801693e:	b21b      	sxth	r3, r3
 8016940:	4313      	orrs	r3, r2
 8016942:	b21b      	sxth	r3, r3
 8016944:	b29a      	uxth	r2, r3
 8016946:	6a3b      	ldr	r3, [r7, #32]
 8016948:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 801694a:	6a3b      	ldr	r3, [r7, #32]
 801694c:	2200      	movs	r2, #0
 801694e:	719a      	strb	r2, [r3, #6]
 8016950:	2200      	movs	r2, #0
 8016952:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = ucDefaultPartUDPPacketHeader;
 8016954:	4b5b      	ldr	r3, [pc, #364]	@ (8016ac4 <vProcessGeneratedUDPPacket_IPv4+0x234>)
 8016956:	61fb      	str	r3, [r7, #28]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801695c:	3306      	adds	r3, #6
 801695e:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ucDefaultPartUDPPacketHeader ) );
 8016960:	2218      	movs	r2, #24
 8016962:	69f9      	ldr	r1, [r7, #28]
 8016964:	69b8      	ldr	r0, [r7, #24]
 8016966:	f00b fe0b 	bl	8022580 <memcpy>

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801696e:	2b00      	cmp	r3, #0
 8016970:	d109      	bne.n	8016986 <vProcessGeneratedUDPPacket_IPv4+0xf6>
                {
                    pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 8016972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016974:	2201      	movs	r2, #1
 8016976:	725a      	strb	r2, [r3, #9]
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 8016978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801697a:	b29b      	uxth	r3, r3
 801697c:	331c      	adds	r3, #28
 801697e:	b29a      	uxth	r2, r3
 8016980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016982:	805a      	strh	r2, [r3, #2]
 8016984:	e005      	b.n	8016992 <vProcessGeneratedUDPPacket_IPv4+0x102>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 8016986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016988:	b29b      	uxth	r3, r3
 801698a:	331c      	adds	r3, #28
 801698c:	b29a      	uxth	r2, r3
 801698e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016990:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8016992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016994:	885b      	ldrh	r3, [r3, #2]
 8016996:	b29b      	uxth	r3, r3
 8016998:	021b      	lsls	r3, r3, #8
 801699a:	b21a      	sxth	r2, r3
 801699c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801699e:	885b      	ldrh	r3, [r3, #2]
 80169a0:	b29b      	uxth	r3, r3
 80169a2:	0a1b      	lsrs	r3, r3, #8
 80169a4:	b29b      	uxth	r3, r3
 80169a6:	b21b      	sxth	r3, r3
 80169a8:	4313      	orrs	r3, r2
 80169aa:	b21b      	sxth	r3, r3
 80169ac:	b29a      	uxth	r2, r3
 80169ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169b0:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	695a      	ldr	r2, [r3, #20]
 80169b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169b8:	611a      	str	r2, [r3, #16]

            if( pxNetworkBuffer->pxEndPoint != NULL )
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d004      	beq.n	80169cc <vProcessGeneratedUDPPacket_IPv4+0x13c>
            {
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80169c6:	681a      	ldr	r2, [r3, #0]
 80169c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169ca:	60da      	str	r2, [r3, #12]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 80169cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169ce:	2200      	movs	r2, #0
 80169d0:	719a      	strb	r2, [r3, #6]
 80169d2:	2200      	movs	r2, #0
 80169d4:	71da      	strb	r2, [r3, #7]

            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* LLMNR messages are typically used on a LAN and they're
                 * not supposed to cross routers */
                if( pxNetworkBuffer->xIPAddress.ulIP_IPv4 == ipLLMNR_IP_ADDR )
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	695b      	ldr	r3, [r3, #20]
 80169da:	4a3b      	ldr	r2, [pc, #236]	@ (8016ac8 <vProcessGeneratedUDPPacket_IPv4+0x238>)
 80169dc:	4293      	cmp	r3, r2
 80169de:	d128      	bne.n	8016a32 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                {
                    pxIPHeader->ucTimeToLive = 0x01;
 80169e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169e2:	2201      	movs	r2, #1
 80169e4:	721a      	strb	r2, [r3, #8]
 80169e6:	e024      	b.n	8016a32 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                    pxUDPPacket->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 80169e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d11d      	bne.n	8016a2c <vProcessGeneratedUDPPacket_IPv4+0x19c>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress, NULL );
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	2200      	movs	r2, #0
 80169f4:	4619      	mov	r1, r3
 80169f6:	2000      	movs	r0, #0
 80169f8:	f7f0 fbc0 	bl	800717c <vARPRefreshCacheEntry>
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* 'ulIPAddress' might have become the address of the Gateway.
             * Find the route again. */

            pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxNetworkBuffer->xIPAddress.ulIP_IPv4, 11 );
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	695b      	ldr	r3, [r3, #20]
 8016a00:	210b      	movs	r1, #11
 8016a02:	4618      	mov	r0, r3
 8016a04:	f7f6 ff58 	bl	800d8b8 <FreeRTOS_FindEndPointOnNetMask>
 8016a08:	4602      	mov	r2, r0
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	631a      	str	r2, [r3, #48]	@ 0x30

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d103      	bne.n	8016a1e <vProcessGeneratedUDPPacket_IPv4+0x18e>
            {
                eReturned = eCantSendPacket;
 8016a16:	2302      	movs	r3, #2
 8016a18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8016a1c:	e009      	b.n	8016a32 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
            }
            else
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 8016a1e:	68fa      	ldr	r2, [r7, #12]
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	615a      	str	r2, [r3, #20]
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f7f0 ff25 	bl	8007874 <vARPGenerateRequestPacket>
 8016a2a:	e002      	b.n	8016a32 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 8016a2c:	2302      	movs	r3, #2
 8016a2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( eReturned != eCantSendPacket )
 8016a32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016a36:	2b02      	cmp	r3, #2
 8016a38:	d03d      	beq.n	8016ab6 <vProcessGeneratedUDPPacket_IPv4+0x226>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d035      	beq.n	8016aae <vProcessGeneratedUDPPacket_IPv4+0x21e>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016a46:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016a4a:	617b      	str	r3, [r7, #20]
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            EthernetHeader_t * pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a50:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8016a52:	693b      	ldr	r3, [r7, #16]
 8016a54:	1d98      	adds	r0, r3, #6
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016a5a:	33e8      	adds	r3, #232	@ 0xe8
 8016a5c:	2206      	movs	r2, #6
 8016a5e:	4619      	mov	r1, r3
 8016a60:	f00b fd8e 	bl	8022580 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016a68:	2b3b      	cmp	r3, #59	@ 0x3b
 8016a6a:	d812      	bhi.n	8016a92 <vProcessGeneratedUDPPacket_IPv4+0x202>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016a72:	e008      	b.n	8016a86 <vProcessGeneratedUDPPacket_IPv4+0x1f6>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a7a:	4413      	add	r3, r2
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8016a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a82:	3301      	adds	r3, #1
 8016a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a88:	2b3b      	cmp	r3, #59	@ 0x3b
 8016a8a:	ddf3      	ble.n	8016a74 <vProcessGeneratedUDPPacket_IPv4+0x1e4>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	223c      	movs	r2, #60	@ 0x3c
 8016a90:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            if( ( pxInterface != NULL ) && ( pxInterface->pfOutput != NULL ) )
 8016a92:	697b      	ldr	r3, [r7, #20]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d011      	beq.n	8016abc <vProcessGeneratedUDPPacket_IPv4+0x22c>
 8016a98:	697b      	ldr	r3, [r7, #20]
 8016a9a:	68db      	ldr	r3, [r3, #12]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d00d      	beq.n	8016abc <vProcessGeneratedUDPPacket_IPv4+0x22c>
            {
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8016aa0:	697b      	ldr	r3, [r7, #20]
 8016aa2:	68db      	ldr	r3, [r3, #12]
 8016aa4:	2201      	movs	r2, #1
 8016aa6:	6879      	ldr	r1, [r7, #4]
 8016aa8:	6978      	ldr	r0, [r7, #20]
 8016aaa:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 8016aac:	e006      	b.n	8016abc <vProcessGeneratedUDPPacket_IPv4+0x22c>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016aae:	6878      	ldr	r0, [r7, #4]
 8016ab0:	f000 fca2 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
}
 8016ab4:	e002      	b.n	8016abc <vProcessGeneratedUDPPacket_IPv4+0x22c>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016ab6:	6878      	ldr	r0, [r7, #4]
 8016ab8:	f000 fc9e 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
}
 8016abc:	bf00      	nop
 8016abe:	3738      	adds	r7, #56	@ 0x38
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	bd80      	pop	{r7, pc}
 8016ac4:	080278dc 	.word	0x080278dc
 8016ac8:	fc0000e0 	.word	0xfc0000e0

08016acc <xProcessReceivedUDPPacket_IPv4>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8016acc:	b590      	push	{r4, r7, lr}
 8016ace:	b099      	sub	sp, #100	@ 0x64
 8016ad0:	af02      	add	r7, sp, #8
 8016ad2:	60f8      	str	r0, [r7, #12]
 8016ad4:	460b      	mov	r3, r1
 8016ad6:	607a      	str	r2, [r7, #4]
 8016ad8:	817b      	strh	r3, [r7, #10]
    BaseType_t xReturn = pdPASS;
 8016ada:	2301      	movs	r3, #1
 8016adc:	657b      	str	r3, [r7, #84]	@ 0x54
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_t * pxUDPPacket;
    const NetworkEndPoint_t * pxEndpoint;

    configASSERT( pxNetworkBuffer != NULL );
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d104      	bne.n	8016aee <xProcessReceivedUDPPacket_IPv4+0x22>
 8016ae4:	f240 116f 	movw	r1, #367	@ 0x16f
 8016ae8:	4872      	ldr	r0, [pc, #456]	@ (8016cb4 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 8016aea:	f7ea ff35 	bl	8001958 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d104      	bne.n	8016b00 <xProcessReceivedUDPPacket_IPv4+0x34>
 8016af6:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8016afa:	486e      	ldr	r0, [pc, #440]	@ (8016cb4 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 8016afc:	f7ea ff2c 	bl	8001958 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b04:	653b      	str	r3, [r7, #80]	@ 0x50
    pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 8016b0c:	897b      	ldrh	r3, [r7, #10]
 8016b0e:	4618      	mov	r0, r3
 8016b10:	f7f8 fc60 	bl	800f3d4 <pxUDPSocketLookup>
 8016b14:	64b8      	str	r0, [r7, #72]	@ 0x48

    *pxIsWaitingForARPResolution = pdFALSE;
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	2200      	movs	r2, #0
 8016b1a:	601a      	str	r2, [r3, #0]

    do
    {
        if( pxSocket != NULL )
 8016b1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	f000 8085 	beq.w	8016c2e <xProcessReceivedUDPPacket_IPv4+0x162>
        {
            if( ( pxEndpoint != NULL ) && ( pxEndpoint->ipv4_settings.ulIPAddress != 0U ) )
 8016b24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d018      	beq.n	8016b5c <xProcessReceivedUDPPacket_IPv4+0x90>
 8016b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d014      	beq.n	8016b5c <xProcessReceivedUDPPacket_IPv4+0x90>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8016b32:	68f8      	ldr	r0, [r7, #12]
 8016b34:	f7f0 fa0c 	bl	8006f50 <xCheckRequiresARPResolution>
 8016b38:	4603      	mov	r3, r0
 8016b3a:	2b01      	cmp	r3, #1
 8016b3c:	d105      	bne.n	8016b4a <xProcessReceivedUDPPacket_IPv4+0x7e>
                {
                    /* Mark this packet as waiting for ARP resolution. */
                    *pxIsWaitingForARPResolution = pdTRUE;
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	2201      	movs	r2, #1
 8016b42:	601a      	str	r2, [r3, #0]

                    /* Return a fail to show that the frame will not be processed right now. */
                    xReturn = pdFAIL;
 8016b44:	2300      	movs	r3, #0
 8016b46:	657b      	str	r3, [r7, #84]	@ 0x54
                    break;
 8016b48:	e0ae      	b.n	8016ca8 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                }
                else
                {
                    /* Update the age of this cache entry since a packet was received. */
                    vARPRefreshCacheEntryAge( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 8016b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016b4c:	1d9a      	adds	r2, r3, #6
 8016b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016b50:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8016b54:	4619      	mov	r1, r3
 8016b56:	4610      	mov	r0, r2
 8016b58:	f7f0 fada 	bl	8007110 <vARPRefreshCacheEntryAge>
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 8016b5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016b5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d02f      	beq.n	8016bc4 <xProcessReceivedUDPPacket_IPv4+0xf8>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b68:	332a      	adds	r3, #42	@ 0x2a
 8016b6a:	647b      	str	r3, [r7, #68]	@ 0x44
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 8016b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016b6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016b70:	643b      	str	r3, [r7, #64]	@ 0x40

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016b76:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    xSourceAddress.sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	695b      	ldr	r3, [r3, #20]
 8016b7c:	633b      	str	r3, [r7, #48]	@ 0x30
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 8016b7e:	2302      	movs	r3, #2
 8016b80:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 8016b84:	2318      	movs	r3, #24
 8016b86:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    destinationAddress.sin_port = usPort;
 8016b8a:	897b      	ldrh	r3, [r7, #10]
 8016b8c:	827b      	strh	r3, [r7, #18]
                    destinationAddress.sin_address.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 8016b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016b90:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8016b94:	61bb      	str	r3, [r7, #24]
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 8016b96:	2302      	movs	r3, #2
 8016b98:	747b      	strb	r3, [r7, #17]
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8016b9a:	2318      	movs	r3, #24
 8016b9c:	743b      	strb	r3, [r7, #16]

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
                                  ( void * ) pcData,
                                  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ba2:	f1a3 022a 	sub.w	r2, r3, #42	@ 0x2a
                    if( xHandler( ( Socket_t ) pxSocket,
 8016ba6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8016baa:	f107 0310 	add.w	r3, r7, #16
 8016bae:	9300      	str	r3, [sp, #0]
 8016bb0:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8016bb2:	460b      	mov	r3, r1
 8016bb4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016bb6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8016bb8:	47a0      	blx	r4
 8016bba:	4603      	mov	r3, r0
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d001      	beq.n	8016bc4 <xProcessReceivedUDPPacket_IPv4+0xf8>
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	657b      	str	r3, [r7, #84]	@ 0x54
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 8016bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016bc6:	2b01      	cmp	r3, #1
 8016bc8:	d16e      	bne.n	8016ca8 <xProcessReceivedUDPPacket_IPv4+0x1dc>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 8016bca:	f7ed fd59 	bl	8004680 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 8016bce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016bd0:	3354      	adds	r3, #84	@ 0x54
 8016bd2:	68fa      	ldr	r2, [r7, #12]
 8016bd4:	4611      	mov	r1, r2
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	f7ec fcab 	bl	8003532 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 8016bdc:	f7ed fd5e 	bl	800469c <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 8016be0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016be2:	685b      	ldr	r3, [r3, #4]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d005      	beq.n	8016bf4 <xProcessReceivedUDPPacket_IPv4+0x128>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8016be8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016bea:	685b      	ldr	r3, [r3, #4]
 8016bec:	2101      	movs	r1, #1
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f7ec fb9a 	bl	8003328 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8016bf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d00c      	beq.n	8016c16 <xProcessReceivedUDPPacket_IPv4+0x14a>
 8016bfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c00:	f003 0301 	and.w	r3, r3, #1
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d006      	beq.n	8016c16 <xProcessReceivedUDPPacket_IPv4+0x14a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8016c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	2101      	movs	r1, #1
 8016c10:	4618      	mov	r0, r3
 8016c12:	f7ec fb89 	bl	8003328 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8016c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d044      	beq.n	8016ca8 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 8016c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016c20:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016c22:	2300      	movs	r3, #0
 8016c24:	2200      	movs	r2, #0
 8016c26:	2100      	movs	r1, #0
 8016c28:	f7ec fe5a 	bl	80038e0 <xQueueGenericSend>
 8016c2c:	e03c      	b.n	8016ca8 <xProcessReceivedUDPPacket_IPv4+0x1dc>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 8016c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016c30:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8016c32:	b29b      	uxth	r3, r3
 8016c34:	021b      	lsls	r3, r3, #8
 8016c36:	b21a      	sxth	r2, r3
 8016c38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016c3a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8016c3c:	b29b      	uxth	r3, r3
 8016c3e:	0a1b      	lsrs	r3, r3, #8
 8016c40:	b29b      	uxth	r3, r3
 8016c42:	b21b      	sxth	r3, r3
 8016c44:	4313      	orrs	r3, r2
 8016c46:	b21b      	sxth	r3, r3
 8016c48:	2b35      	cmp	r3, #53	@ 0x35
 8016c4a:	d10f      	bne.n	8016c6c <xProcessReceivedUDPPacket_IPv4+0x1a0>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8016c4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016c4e:	1d98      	adds	r0, r3, #6
 8016c50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016c52:	f8d3 101a 	ldr.w	r1, [r3, #26]
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016c5a:	461a      	mov	r2, r3
 8016c5c:	f7f0 fa8e 	bl	800717c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016c60:	68f8      	ldr	r0, [r7, #12]
 8016c62:	f7f0 ff20 	bl	8007aa6 <ulDNSHandlePacket>
 8016c66:	4603      	mov	r3, r0
 8016c68:	657b      	str	r3, [r7, #84]	@ 0x54
 8016c6a:	e01d      	b.n	8016ca8 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8016c6c:	897b      	ldrh	r3, [r7, #10]
 8016c6e:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8016c72:	4293      	cmp	r3, r2
 8016c74:	d006      	beq.n	8016c84 <xProcessReceivedUDPPacket_IPv4+0x1b8>
                    ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 8016c76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016c78:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8016c7a:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8016c7c:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8016c80:	4293      	cmp	r3, r2
 8016c82:	d10f      	bne.n	8016ca4 <xProcessReceivedUDPPacket_IPv4+0x1d8>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8016c84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016c86:	1d98      	adds	r0, r3, #6
 8016c88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016c8a:	f8d3 101a 	ldr.w	r1, [r3, #26]
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016c92:	461a      	mov	r2, r3
 8016c94:	f7f0 fa72 	bl	800717c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016c98:	68f8      	ldr	r0, [r7, #12]
 8016c9a:	f7f0 ff04 	bl	8007aa6 <ulDNSHandlePacket>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	657b      	str	r3, [r7, #84]	@ 0x54
 8016ca2:	e001      	b.n	8016ca8 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	657b      	str	r3, [r7, #84]	@ 0x54
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8016ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	375c      	adds	r7, #92	@ 0x5c
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd90      	pop	{r4, r7, pc}
 8016cb2:	bf00      	nop
 8016cb4:	080271e4 	.word	0x080271e4

08016cb8 <pxGetEndpoint>:
 * @returns Pointer to the first end point of the given IP type from the
 *          list of end points.
 */
static NetworkEndPoint_t * pxGetEndpoint( BaseType_t xIPType,
                                          BaseType_t xIsGlobal )
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b086      	sub	sp, #24
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
 8016cc0:	6039      	str	r1, [r7, #0]
    NetworkEndPoint_t * pxEndPoint;

    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8016cc2:	2000      	movs	r0, #0
 8016cc4:	f7f6 fd20 	bl	800d708 <FreeRTOS_FirstEndPoint>
 8016cc8:	6178      	str	r0, [r7, #20]
 8016cca:	e021      	b.n	8016d10 <pxGetEndpoint+0x58>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
    {
        if( xIPType == ( BaseType_t ) ipTYPE_IPv6 )
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	2b60      	cmp	r3, #96	@ 0x60
 8016cd0:	d119      	bne.n	8016d06 <pxGetEndpoint+0x4e>
        {
            if( pxEndPoint->bits.bIPv6 != 0U )
 8016cd2:	697b      	ldr	r3, [r7, #20]
 8016cd4:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8016cd8:	f003 0304 	and.w	r3, r3, #4
 8016cdc:	b2db      	uxtb	r3, r3
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d011      	beq.n	8016d06 <pxGetEndpoint+0x4e>
            {
                IPv6_Type_t eEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 8016ce2:	697b      	ldr	r3, [r7, #20]
 8016ce4:	3338      	adds	r3, #56	@ 0x38
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	f7f7 f8f2 	bl	800ded0 <xIPv6_GetIPType>
 8016cec:	4603      	mov	r3, r0
 8016cee:	74fb      	strb	r3, [r7, #19]
                BaseType_t xEndpointGlobal = ( eEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 8016cf0:	7cfb      	ldrb	r3, [r7, #19]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d101      	bne.n	8016cfa <pxGetEndpoint+0x42>
 8016cf6:	2301      	movs	r3, #1
 8016cf8:	e000      	b.n	8016cfc <pxGetEndpoint+0x44>
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	60fb      	str	r3, [r7, #12]

                if( xEndpointGlobal == xIsGlobal )
 8016cfe:	68fa      	ldr	r2, [r7, #12]
 8016d00:	683b      	ldr	r3, [r7, #0]
 8016d02:	429a      	cmp	r2, r3
 8016d04:	d008      	beq.n	8016d18 <pxGetEndpoint+0x60>
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8016d06:	6979      	ldr	r1, [r7, #20]
 8016d08:	2000      	movs	r0, #0
 8016d0a:	f7f6 fd1f 	bl	800d74c <FreeRTOS_NextEndPoint>
 8016d0e:	6178      	str	r0, [r7, #20]
         pxEndPoint != NULL;
 8016d10:	697b      	ldr	r3, [r7, #20]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d1da      	bne.n	8016ccc <pxGetEndpoint+0x14>
 8016d16:	e000      	b.n	8016d1a <pxGetEndpoint+0x62>
                {
                    break;
 8016d18:	bf00      	nop
                }
            }
        }
    }

    return pxEndPoint;
 8016d1a:	697b      	ldr	r3, [r7, #20]
}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	3718      	adds	r7, #24
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd80      	pop	{r7, pc}

08016d24 <prvStartLookup>:
 * @param[out] pxLostBuffer  The pointee will be set to true in case the network packet got released
 *                            ( the ownership was taken ).
 */
static eARPLookupResult_t prvStartLookup( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                          BaseType_t * pxLostBuffer )
{
 8016d24:	b580      	push	{r7, lr}
 8016d26:	b084      	sub	sp, #16
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	6078      	str	r0, [r7, #4]
 8016d2c:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturned = eARPCacheMiss;
 8016d2e:	2300      	movs	r3, #0
 8016d30:	73fb      	strb	r3, [r7, #15]

    FreeRTOS_printf( ( "Looking up %pip with%s end-point\n",
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	f103 0114 	add.w	r1, r3, #20
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d001      	beq.n	8016d44 <prvStartLookup+0x20>
 8016d40:	4b1e      	ldr	r3, [pc, #120]	@ (8016dbc <prvStartLookup+0x98>)
 8016d42:	e000      	b.n	8016d46 <prvStartLookup+0x22>
 8016d44:	4b1e      	ldr	r3, [pc, #120]	@ (8016dc0 <prvStartLookup+0x9c>)
 8016d46:	461a      	mov	r2, r3
 8016d48:	481e      	ldr	r0, [pc, #120]	@ (8016dc4 <prvStartLookup+0xa0>)
 8016d4a:	f00b f9fd 	bl	8022148 <lUDPLoggingPrintf>
                       ( void * ) pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes,
                       ( pxNetworkBuffer->pxEndPoint != NULL ) ? "" : "out" ) );

    if( pxNetworkBuffer->pxEndPoint == NULL )
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d11f      	bne.n	8016d96 <prvStartLookup+0x72>
    {
        IPv6_Type_t eTargetType = xIPv6_GetIPType( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	3314      	adds	r3, #20
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	f7f7 f8b8 	bl	800ded0 <xIPv6_GetIPType>
 8016d60:	4603      	mov	r3, r0
 8016d62:	73bb      	strb	r3, [r7, #14]
        BaseType_t xIsGlobal = ( eTargetType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 8016d64:	7bbb      	ldrb	r3, [r7, #14]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d101      	bne.n	8016d6e <prvStartLookup+0x4a>
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	e000      	b.n	8016d70 <prvStartLookup+0x4c>
 8016d6e:	2300      	movs	r3, #0
 8016d70:	60bb      	str	r3, [r7, #8]
        pxNetworkBuffer->pxEndPoint = pxGetEndpoint( ( BaseType_t ) ipTYPE_IPv6, xIsGlobal );
 8016d72:	68b9      	ldr	r1, [r7, #8]
 8016d74:	2060      	movs	r0, #96	@ 0x60
 8016d76:	f7ff ff9f 	bl	8016cb8 <pxGetEndpoint>
 8016d7a:	4602      	mov	r2, r0
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	631a      	str	r2, [r3, #48]	@ 0x30
        FreeRTOS_printf( ( "prvStartLookup: Got an end-point: %s\n", pxNetworkBuffer->pxEndPoint ? "yes" : "no" ) );
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d001      	beq.n	8016d8c <prvStartLookup+0x68>
 8016d88:	4b0f      	ldr	r3, [pc, #60]	@ (8016dc8 <prvStartLookup+0xa4>)
 8016d8a:	e000      	b.n	8016d8e <prvStartLookup+0x6a>
 8016d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8016dcc <prvStartLookup+0xa8>)
 8016d8e:	4619      	mov	r1, r3
 8016d90:	480f      	ldr	r0, [pc, #60]	@ (8016dd0 <prvStartLookup+0xac>)
 8016d92:	f00b f9d9 	bl	8022148 <lUDPLoggingPrintf>
    }

    if( pxNetworkBuffer->pxEndPoint != NULL )
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d008      	beq.n	8016db0 <prvStartLookup+0x8c>
    {
        vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	3314      	adds	r3, #20
 8016da2:	4619      	mov	r1, r3
 8016da4:	6878      	ldr	r0, [r7, #4]
 8016da6:	f7f5 f9d5 	bl	800c154 <vNDSendNeighbourSolicitation>

        /* pxNetworkBuffer has been sent and released.
         * Make sure it won't be used again.. */
        *pxLostBuffer = pdTRUE;
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	2201      	movs	r2, #1
 8016dae:	601a      	str	r2, [r3, #0]
    }

    return eReturned;
 8016db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016db2:	4618      	mov	r0, r3
 8016db4:	3710      	adds	r7, #16
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}
 8016dba:	bf00      	nop
 8016dbc:	08027218 	.word	0x08027218
 8016dc0:	0802721c 	.word	0x0802721c
 8016dc4:	08027220 	.word	0x08027220
 8016dc8:	08027244 	.word	0x08027244
 8016dcc:	08027248 	.word	0x08027248
 8016dd0:	0802724c 	.word	0x0802724c

08016dd4 <vProcessGeneratedUDPPacket_IPv6>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016dd4:	b590      	push	{r4, r7, lr}
 8016dd6:	b093      	sub	sp, #76	@ 0x4c
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	6078      	str	r0, [r7, #4]
    UDPPacket_IPv6_t * pxUDPPacket_IPv6;
    IPHeader_IPv6_t * pxIPHeader_IPv6;
    eARPLookupResult_t eReturned;
    size_t uxPayloadSize;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    NetworkInterface_t * pxInterface = NULL;
 8016ddc:	2300      	movs	r3, #0
 8016dde:	63bb      	str	r3, [r7, #56]	@ 0x38
    EthernetHeader_t * pxEthernetHeader = NULL;
 8016de0:	2300      	movs	r3, #0
 8016de2:	637b      	str	r3, [r7, #52]	@ 0x34
    BaseType_t xLostBuffer = pdFALSE;
 8016de4:	2300      	movs	r3, #0
 8016de6:	623b      	str	r3, [r7, #32]
    NetworkEndPoint_t * pxEndPoint = NULL;
 8016de8:	2300      	movs	r3, #0
 8016dea:	61fb      	str	r3, [r7, #28]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016df0:	633b      	str	r3, [r7, #48]	@ 0x30
    pxIPHeader_IPv6 = &( pxUDPPacket_IPv6->xIPHeader );
 8016df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016df4:	330e      	adds	r3, #14
 8016df6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Remember the original address. It might get replaced with
     * the address of the gateway. */
    ( void ) memcpy( xIPv6Address.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, sizeof( xIPv6Address.ucBytes ) );
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	3314      	adds	r3, #20
 8016dfc:	f107 040c 	add.w	r4, r7, #12
 8016e00:	6818      	ldr	r0, [r3, #0]
 8016e02:	6859      	ldr	r1, [r3, #4]
 8016e04:	689a      	ldr	r2, [r3, #8]
 8016e06:	68db      	ldr	r3, [r3, #12]
 8016e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d107      	bne.n	8016e22 <vProcessGeneratedUDPPacket_IPv6+0x4e>
        {
            size_t uxHeadersSize = sizeof( EthernetHeader_t ) + sizeof( IPHeader_IPv6_t ) + sizeof( ICMPHeader_t );
 8016e12:	233e      	movs	r3, #62	@ 0x3e
 8016e14:	62bb      	str	r3, [r7, #40]	@ 0x28
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxHeadersSize;
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e1c:	1ad3      	subs	r3, r2, r3
 8016e1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8016e20:	e003      	b.n	8016e2a <vProcessGeneratedUDPPacket_IPv6+0x56>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_IPv6_t );
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e26:	3b3e      	subs	r3, #62	@ 0x3e
 8016e28:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Look in the IPv6 MAC-address cache for the target IP-address. */
    eReturned = eNDGetCacheEntry( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ), &( pxUDPPacket_IPv6->xEthernetHeader.xDestinationAddress ),
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	3314      	adds	r3, #20
 8016e2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016e30:	f107 021c 	add.w	r2, r7, #28
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7f4 ff21 	bl	800bc7c <eNDGetCacheEntry>
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                  &( pxEndPoint ) );

    if( eReturned != eCantSendPacket )
 8016e40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016e44:	2b02      	cmp	r3, #2
 8016e46:	f000 80b1 	beq.w	8016fac <vProcessGeneratedUDPPacket_IPv6+0x1d8>
    {
        if( eReturned == eARPCacheHit )
 8016e4a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016e4e:	2b01      	cmp	r3, #1
 8016e50:	f040 8095 	bne.w	8016f7e <vProcessGeneratedUDPPacket_IPv6+0x1aa>
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8016e54:	69fa      	ldr	r2, [r7, #28]
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d109      	bne.n	8016e76 <vProcessGeneratedUDPPacket_IPv6+0xa2>
                {
                    pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 8016e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e64:	2260      	movs	r2, #96	@ 0x60
 8016e66:	701a      	strb	r2, [r3, #0]
                    pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 8016e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e6a:	223a      	movs	r2, #58	@ 0x3a
 8016e6c:	719a      	strb	r2, [r3, #6]
                    pxIPHeader_IPv6->ucHopLimit = 128;
 8016e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e70:	2280      	movs	r2, #128	@ 0x80
 8016e72:	71da      	strb	r2, [r3, #7]
 8016e74:	e05e      	b.n	8016f34 <vProcessGeneratedUDPPacket_IPv6+0x160>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader = NULL;
 8016e76:	2300      	movs	r3, #0
 8016e78:	627b      	str	r3, [r7, #36]	@ 0x24

                pxUDPHeader = &( pxUDPPacket_IPv6->xUDPHeader );
 8016e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e7c:	3336      	adds	r3, #54	@ 0x36
 8016e7e:	627b      	str	r3, [r7, #36]	@ 0x24

                pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 8016e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e82:	2260      	movs	r2, #96	@ 0x60
 8016e84:	701a      	strb	r2, [r3, #0]
                pxIPHeader_IPv6->ucTrafficClassFlow = 0;
 8016e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e88:	2200      	movs	r2, #0
 8016e8a:	705a      	strb	r2, [r3, #1]
                pxIPHeader_IPv6->usFlowLabel = 0;
 8016e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e8e:	2200      	movs	r2, #0
 8016e90:	709a      	strb	r2, [r3, #2]
 8016e92:	2200      	movs	r2, #0
 8016e94:	70da      	strb	r2, [r3, #3]
                pxIPHeader_IPv6->ucHopLimit = 255;
 8016e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e98:	22ff      	movs	r2, #255	@ 0xff
 8016e9a:	71da      	strb	r2, [r3, #7]
                pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) );
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ea0:	b29b      	uxth	r3, r3
 8016ea2:	3b36      	subs	r3, #54	@ 0x36
 8016ea4:	b29a      	uxth	r2, r3
 8016ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ea8:	809a      	strh	r2, [r3, #4]

                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 8016eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016eac:	2211      	movs	r2, #17
 8016eae:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - sizeof( IPPacket_IPv6_t ) );
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016eb4:	b29b      	uxth	r3, r3
 8016eb6:	3b36      	subs	r3, #54	@ 0x36
 8016eb8:	b29a      	uxth	r2, r3
 8016eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ebc:	809a      	strh	r2, [r3, #4]
                /* The total transmit size adds on the Ethernet header. */
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( pxIPHeader_IPv6->usPayloadLength );
 8016ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ec0:	889b      	ldrh	r3, [r3, #4]
 8016ec2:	b29b      	uxth	r3, r3
 8016ec4:	021b      	lsls	r3, r3, #8
 8016ec6:	b21a      	sxth	r2, r3
 8016ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016eca:	889b      	ldrh	r3, [r3, #4]
 8016ecc:	b29b      	uxth	r3, r3
 8016ece:	0a1b      	lsrs	r3, r3, #8
 8016ed0:	b29b      	uxth	r3, r3
 8016ed2:	b21b      	sxth	r3, r3
 8016ed4:	4313      	orrs	r3, r2
 8016ed6:	b21b      	sxth	r3, r3
 8016ed8:	b29a      	uxth	r2, r3
 8016eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016edc:	809a      	strh	r2, [r3, #4]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8016ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ee4:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8016eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eec:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8016eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ef0:	889b      	ldrh	r3, [r3, #4]
 8016ef2:	b29b      	uxth	r3, r3
 8016ef4:	021b      	lsls	r3, r3, #8
 8016ef6:	b21a      	sxth	r2, r3
 8016ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016efa:	889b      	ldrh	r3, [r3, #4]
 8016efc:	b29b      	uxth	r3, r3
 8016efe:	0a1b      	lsrs	r3, r3, #8
 8016f00:	b29b      	uxth	r3, r3
 8016f02:	b21b      	sxth	r3, r3
 8016f04:	4313      	orrs	r3, r2
 8016f06:	b21b      	sxth	r3, r3
 8016f08:	b29a      	uxth	r2, r3
 8016f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f0c:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 8016f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f10:	2200      	movs	r2, #0
 8016f12:	719a      	strb	r2, [r3, #6]
 8016f14:	2200      	movs	r2, #0
 8016f16:	71da      	strb	r2, [r3, #7]

                if( pxNetworkBuffer->pxEndPoint != NULL )
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d009      	beq.n	8016f34 <vProcessGeneratedUDPPacket_IPv6+0x160>
                {
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 8016f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f22:	f103 0008 	add.w	r0, r3, #8
                                     pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016f2a:	3338      	adds	r3, #56	@ 0x38
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 8016f2c:	2210      	movs	r2, #16
 8016f2e:	4619      	mov	r1, r3
 8016f30:	f00b fb26 	bl	8022580 <memcpy>
                ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
            }
            #endif

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d10e      	bne.n	8016f5a <vProcessGeneratedUDPPacket_IPv6+0x186>
                {
                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( ICMPEcho_IPv6_t ) + uxPayloadSize );
 8016f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f3e:	b29b      	uxth	r3, r3
 8016f40:	3308      	adds	r3, #8
 8016f42:	b29b      	uxth	r3, r3
 8016f44:	021b      	lsls	r3, r3, #8
 8016f46:	b29a      	uxth	r2, r3
 8016f48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f4a:	3308      	adds	r3, #8
 8016f4c:	0a1b      	lsrs	r3, r3, #8
 8016f4e:	b29b      	uxth	r3, r3
 8016f50:	4313      	orrs	r3, r2
 8016f52:	b29a      	uxth	r2, r3
 8016f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f56:	809a      	strh	r2, [r3, #4]
 8016f58:	e028      	b.n	8016fac <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 8016f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f5c:	2211      	movs	r2, #17
 8016f5e:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( UDPHeader_t ) + uxPayloadSize );
 8016f60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f62:	b29b      	uxth	r3, r3
 8016f64:	3308      	adds	r3, #8
 8016f66:	b29b      	uxth	r3, r3
 8016f68:	021b      	lsls	r3, r3, #8
 8016f6a:	b29a      	uxth	r2, r3
 8016f6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f6e:	3308      	adds	r3, #8
 8016f70:	0a1b      	lsrs	r3, r3, #8
 8016f72:	b29b      	uxth	r3, r3
 8016f74:	4313      	orrs	r3, r2
 8016f76:	b29a      	uxth	r2, r3
 8016f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f7a:	809a      	strh	r2, [r3, #4]
 8016f7c:	e016      	b.n	8016fac <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                    pxUDPPacket_IPv6->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 8016f7e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d10f      	bne.n	8016fa6 <vProcessGeneratedUDPPacket_IPv6+0x1d2>
        {
            if( pxEndPoint != NULL )
 8016f86:	69fb      	ldr	r3, [r7, #28]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d002      	beq.n	8016f92 <vProcessGeneratedUDPPacket_IPv6+0x1be>
            {
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8016f8c:	69fa      	ldr	r2, [r7, #28]
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            eReturned = prvStartLookup( pxNetworkBuffer, &( xLostBuffer ) );
 8016f92:	f107 0320 	add.w	r3, r7, #32
 8016f96:	4619      	mov	r1, r3
 8016f98:	6878      	ldr	r0, [r7, #4]
 8016f9a:	f7ff fec3 	bl	8016d24 <prvStartLookup>
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8016fa4:	e002      	b.n	8016fac <vProcessGeneratedUDPPacket_IPv6+0x1d8>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 8016fa6:	2302      	movs	r3, #2
 8016fa8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( xLostBuffer == pdTRUE )
 8016fac:	6a3b      	ldr	r3, [r7, #32]
 8016fae:	2b01      	cmp	r3, #1
 8016fb0:	d03d      	beq.n	801702e <vProcessGeneratedUDPPacket_IPv6+0x25a>
    {
        /* An ND solicitation or ARP request has been sent. */
    }
    else if( eReturned != eCantSendPacket )
 8016fb2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016fb6:	2b02      	cmp	r3, #2
 8016fb8:	d036      	beq.n	8017028 <vProcessGeneratedUDPPacket_IPv6+0x254>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d02e      	beq.n	8017020 <vProcessGeneratedUDPPacket_IPv6+0x24c>
        {
            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016fc6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016fca:	63bb      	str	r3, [r7, #56]	@ 0x38
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fd0:	637b      	str	r3, [r7, #52]	@ 0x34
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 8016fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016fd4:	1d98      	adds	r0, r3, #6
                             pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes,
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016fda:	33e8      	adds	r3, #232	@ 0xe8
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 8016fdc:	2206      	movs	r2, #6
 8016fde:	4619      	mov	r1, r3
 8016fe0:	f00b face 	bl	8022580 <memcpy>
                             ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016fe8:	2b3b      	cmp	r3, #59	@ 0x3b
 8016fea:	d812      	bhi.n	8017012 <vProcessGeneratedUDPPacket_IPv6+0x23e>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016ff2:	e008      	b.n	8017006 <vProcessGeneratedUDPPacket_IPv6+0x232>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016ffa:	4413      	add	r3, r2
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8017000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017002:	3301      	adds	r3, #1
 8017004:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017008:	2b3b      	cmp	r3, #59	@ 0x3b
 801700a:	ddf3      	ble.n	8016ff4 <vProcessGeneratedUDPPacket_IPv6+0x220>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	223c      	movs	r2, #60	@ 0x3c
 8017010:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8017012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017014:	68db      	ldr	r3, [r3, #12]
 8017016:	2201      	movs	r2, #1
 8017018:	6879      	ldr	r1, [r7, #4]
 801701a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801701c:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 801701e:	e006      	b.n	801702e <vProcessGeneratedUDPPacket_IPv6+0x25a>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8017020:	6878      	ldr	r0, [r7, #4]
 8017022:	f000 f9e9 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
}
 8017026:	e002      	b.n	801702e <vProcessGeneratedUDPPacket_IPv6+0x25a>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8017028:	6878      	ldr	r0, [r7, #4]
 801702a:	f000 f9e5 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
}
 801702e:	bf00      	nop
 8017030:	374c      	adds	r7, #76	@ 0x4c
 8017032:	46bd      	mov	sp, r7
 8017034:	bd90      	pop	{r4, r7, pc}
	...

08017038 <xProcessReceivedUDPPacket_IPv6>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8017038:	b590      	push	{r4, r7, lr}
 801703a:	b09b      	sub	sp, #108	@ 0x6c
 801703c:	af02      	add	r7, sp, #8
 801703e:	60f8      	str	r0, [r7, #12]
 8017040:	460b      	mov	r3, r1
 8017042:	607a      	str	r2, [r7, #4]
 8017044:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdPASS;
 8017046:	2301      	movs	r3, #1
 8017048:	65fb      	str	r3, [r7, #92]	@ 0x5c
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_IPv6_t * pxUDPPacket_IPv6;

    configASSERT( pxNetworkBuffer != NULL );
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d104      	bne.n	801705a <xProcessReceivedUDPPacket_IPv6+0x22>
 8017050:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8017054:	4874      	ldr	r0, [pc, #464]	@ (8017228 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8017056:	f7ea fc7f 	bl	8001958 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801705e:	2b00      	cmp	r3, #0
 8017060:	d104      	bne.n	801706c <xProcessReceivedUDPPacket_IPv6+0x34>
 8017062:	f240 1187 	movw	r1, #391	@ 0x187
 8017066:	4870      	ldr	r0, [pc, #448]	@ (8017228 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8017068:	f7ea fc76 	bl	8001958 <vAssertCalled>
     * handling them, no use to fill the cache with those IP addresses. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017070:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 8017072:	897b      	ldrh	r3, [r7, #10]
 8017074:	4618      	mov	r0, r3
 8017076:	f7f8 f9ad 	bl	800f3d4 <pxUDPSocketLookup>
 801707a:	6578      	str	r0, [r7, #84]	@ 0x54

    *pxIsWaitingForARPResolution = pdFALSE;
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	2200      	movs	r2, #0
 8017080:	601a      	str	r2, [r3, #0]

    do
    {
        /* UDPv6 doesn't allow zero-checksum, refer to RFC2460 - section 8.1.
         * Some platforms (such as Zynq) pass the packet to upper layer for flexibility to allow zero-checksum. */
        if( pxUDPPacket_IPv6->xUDPHeader.usChecksum == 0U )
 8017082:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017084:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8017086:	b29b      	uxth	r3, r3
 8017088:	2b00      	cmp	r3, #0
 801708a:	d109      	bne.n	80170a0 <xProcessReceivedUDPPacket_IPv6+0x68>
        {
            FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket_IPv6: Drop packets with checksum %d\n",
 801708c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801708e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8017090:	b29b      	uxth	r3, r3
 8017092:	4619      	mov	r1, r3
 8017094:	4865      	ldr	r0, [pc, #404]	@ (801722c <xProcessReceivedUDPPacket_IPv6+0x1f4>)
 8017096:	f00b f857 	bl	8022148 <lUDPLoggingPrintf>
                                     pxUDPPacket_IPv6->xUDPHeader.usChecksum ) );

            xReturn = pdFAIL;
 801709a:	2300      	movs	r3, #0
 801709c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801709e:	e0bd      	b.n	801721c <xProcessReceivedUDPPacket_IPv6+0x1e4>
        }

        if( pxSocket != NULL )
 80170a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	f000 8091 	beq.w	80171ca <xProcessReceivedUDPPacket_IPv6+0x192>
        {
            if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 80170a8:	68f8      	ldr	r0, [r7, #12]
 80170aa:	f7ef ff51 	bl	8006f50 <xCheckRequiresARPResolution>
 80170ae:	4603      	mov	r3, r0
 80170b0:	2b01      	cmp	r3, #1
 80170b2:	d105      	bne.n	80170c0 <xProcessReceivedUDPPacket_IPv6+0x88>
            {
                /* Mark this packet as waiting for ARP resolution. */
                *pxIsWaitingForARPResolution = pdTRUE;
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	2201      	movs	r2, #1
 80170b8:	601a      	str	r2, [r3, #0]

                /* Return a fail to show that the frame will not be processed right now. */
                xReturn = pdFAIL;
 80170ba:	2300      	movs	r3, #0
 80170bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                break;
 80170be:	e0ad      	b.n	801721c <xProcessReceivedUDPPacket_IPv6+0x1e4>
            }

            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 80170c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80170c2:	1d98      	adds	r0, r3, #6
 80170c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80170c6:	f103 0116 	add.w	r1, r3, #22
                                  pxNetworkBuffer->pxEndPoint );
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 80170ce:	461a      	mov	r2, r3
 80170d0:	f7f4 fe82 	bl	800bdd8 <vNDRefreshCacheEntry>

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                size_t uxIPLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 80170d4:	68f8      	ldr	r0, [r7, #12]
 80170d6:	f7f2 ff7f 	bl	8009fd8 <uxIPHeaderSizePacket>
 80170da:	6538      	str	r0, [r7, #80]	@ 0x50
                size_t uxPayloadSize;

                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 80170dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80170de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d03d      	beq.n	8017160 <xProcessReceivedUDPPacket_IPv6+0x128>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    /* The application hook needs to know the from- and to-addresses. */

                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPLength + ipSIZE_OF_UDP_HEADER ] );
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80170e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80170ea:	3316      	adds	r3, #22
 80170ec:	4413      	add	r3, r2
 80170ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 80170f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80170f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80170f4:	64bb      	str	r3, [r7, #72]	@ 0x48

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80170fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    destinationAddress.sin_port = usPort;
 80170fc:	897b      	ldrh	r3, [r7, #10]
 80170fe:	82fb      	strh	r3, [r7, #22]
                    ( void ) memcpy( xSourceAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8017100:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017102:	3316      	adds	r3, #22
 8017104:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8017108:	6818      	ldr	r0, [r3, #0]
 801710a:	6859      	ldr	r1, [r3, #4]
 801710c:	689a      	ldr	r2, [r3, #8]
 801710e:	68db      	ldr	r3, [r3, #12]
 8017110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    ( void ) memcpy( destinationAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8017112:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017114:	3326      	adds	r3, #38	@ 0x26
 8017116:	f107 041c 	add.w	r4, r7, #28
 801711a:	6818      	ldr	r0, [r3, #0]
 801711c:	6859      	ldr	r1, [r3, #4]
 801711e:	689a      	ldr	r2, [r3, #8]
 8017120:	68db      	ldr	r3, [r3, #12]
 8017122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 8017124:	230a      	movs	r3, #10
 8017126:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 801712a:	230a      	movs	r3, #10
 801712c:	757b      	strb	r3, [r7, #21]
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 801712e:	2318      	movs	r3, #24
 8017130:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8017134:	2318      	movs	r3, #24
 8017136:	753b      	strb	r3, [r7, #20]
                    uxPayloadSize = pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER + ( size_t ) ipSIZE_OF_IPv6_HEADER );
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801713c:	3b3e      	subs	r3, #62	@ 0x3e
 801713e:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
 8017140:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8017144:	f107 0314 	add.w	r3, r7, #20
 8017148:	9300      	str	r3, [sp, #0]
 801714a:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 801714c:	4613      	mov	r3, r2
 801714e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017150:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8017152:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017154:	47a0      	blx	r4
 8017156:	4603      	mov	r3, r0
 8017158:	2b00      	cmp	r3, #0
 801715a:	d001      	beq.n	8017160 <xProcessReceivedUDPPacket_IPv6+0x128>
                                  ( void * ) pcData,
                                  uxPayloadSize,
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 801715c:	2300      	movs	r3, #0
 801715e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 8017160:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017162:	2b01      	cmp	r3, #1
 8017164:	d15a      	bne.n	801721c <xProcessReceivedUDPPacket_IPv6+0x1e4>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 8017166:	f7ed fa8b 	bl	8004680 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 801716a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801716c:	3354      	adds	r3, #84	@ 0x54
 801716e:	68fa      	ldr	r2, [r7, #12]
 8017170:	4611      	mov	r1, r2
 8017172:	4618      	mov	r0, r3
 8017174:	f7ec f9dd 	bl	8003532 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 8017178:	f7ed fa90 	bl	800469c <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 801717c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801717e:	685b      	ldr	r3, [r3, #4]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d005      	beq.n	8017190 <xProcessReceivedUDPPacket_IPv6+0x158>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8017184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017186:	685b      	ldr	r3, [r3, #4]
 8017188:	2101      	movs	r1, #1
 801718a:	4618      	mov	r0, r3
 801718c:	f7ec f8cc 	bl	8003328 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8017190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017194:	2b00      	cmp	r3, #0
 8017196:	d00c      	beq.n	80171b2 <xProcessReceivedUDPPacket_IPv6+0x17a>
 8017198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801719a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801719c:	f003 0301 	and.w	r3, r3, #1
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d006      	beq.n	80171b2 <xProcessReceivedUDPPacket_IPv6+0x17a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 80171a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80171a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	2101      	movs	r1, #1
 80171ac:	4618      	mov	r0, r3
 80171ae:	f7ec f8bb 	bl	8003328 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 80171b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80171b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d030      	beq.n	801721c <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 80171ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80171bc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80171be:	2300      	movs	r3, #0
 80171c0:	2200      	movs	r2, #0
 80171c2:	2100      	movs	r1, #0
 80171c4:	f7ec fb8c 	bl	80038e0 <xQueueGenericSend>
 80171c8:	e028      	b.n	801721c <xProcessReceivedUDPPacket_IPv6+0x1e4>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket_IPv6->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 80171ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80171cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80171ce:	b29b      	uxth	r3, r3
 80171d0:	021b      	lsls	r3, r3, #8
 80171d2:	b21a      	sxth	r2, r3
 80171d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80171d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80171d8:	b29b      	uxth	r3, r3
 80171da:	0a1b      	lsrs	r3, r3, #8
 80171dc:	b29b      	uxth	r3, r3
 80171de:	b21b      	sxth	r3, r3
 80171e0:	4313      	orrs	r3, r2
 80171e2:	b21b      	sxth	r3, r3
 80171e4:	2b35      	cmp	r3, #53	@ 0x35
 80171e6:	d105      	bne.n	80171f4 <xProcessReceivedUDPPacket_IPv6+0x1bc>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80171e8:	68f8      	ldr	r0, [r7, #12]
 80171ea:	f7f0 fc5c 	bl	8007aa6 <ulDNSHandlePacket>
 80171ee:	4603      	mov	r3, r0
 80171f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80171f2:	e013      	b.n	801721c <xProcessReceivedUDPPacket_IPv6+0x1e4>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 80171f4:	897b      	ldrh	r3, [r7, #10]
 80171f6:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 80171fa:	4293      	cmp	r3, r2
 80171fc:	d006      	beq.n	801720c <xProcessReceivedUDPPacket_IPv6+0x1d4>
                    ( pxUDPPacket_IPv6->xUDPHeader.usSourcePort == FreeRTOS_htons( ipLLMNR_PORT ) ) )
 80171fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017202:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8017204:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8017208:	4293      	cmp	r3, r2
 801720a:	d105      	bne.n	8017218 <xProcessReceivedUDPPacket_IPv6+0x1e0>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 801720c:	68f8      	ldr	r0, [r7, #12]
 801720e:	f7f0 fc4a 	bl	8007aa6 <ulDNSHandlePacket>
 8017212:	4603      	mov	r3, r0
 8017214:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017216:	e001      	b.n	801721c <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8017218:	2300      	movs	r3, #0
 801721a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 801721c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 801721e:	4618      	mov	r0, r3
 8017220:	3764      	adds	r7, #100	@ 0x64
 8017222:	46bd      	mov	sp, r7
 8017224:	bd90      	pop	{r4, r7, pc}
 8017226:	bf00      	nop
 8017228:	08027274 	.word	0x08027274
 801722c:	080272a8 	.word	0x080272a8

08017230 <bIsValidNetworkDescriptor>:
    }
    /*-----------------------------------------------------------*/

#else /* if ( ipconfigTCP_IP_SANITY != 0 ) */
    static UBaseType_t bIsValidNetworkDescriptor( const NetworkBufferDescriptor_t * pxDesc )
    {
 8017230:	b480      	push	{r7}
 8017232:	b083      	sub	sp, #12
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
        ( void ) pxDesc;
        return ( UBaseType_t ) pdTRUE;
 8017238:	2301      	movs	r3, #1
    }
 801723a:	4618      	mov	r0, r3
 801723c:	370c      	adds	r7, #12
 801723e:	46bd      	mov	sp, r7
 8017240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017244:	4770      	bx	lr

08017246 <prvShowWarnings>:
    /*-----------------------------------------------------------*/

    static void prvShowWarnings( void )
    {
 8017246:	b480      	push	{r7}
 8017248:	af00      	add	r7, sp, #0
    }
 801724a:	bf00      	nop
 801724c:	46bd      	mov	sp, r7
 801724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017252:	4770      	bx	lr

08017254 <xNetworkBuffersInitialise>:
    /*-----------------------------------------------------------*/

#endif /* ipconfigTCP_IP_SANITY */

BaseType_t xNetworkBuffersInitialise( void )
{
 8017254:	b580      	push	{r7, lr}
 8017256:	b082      	sub	sp, #8
 8017258:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 801725a:	4b2e      	ldr	r3, [pc, #184]	@ (8017314 <xNetworkBuffersInitialise+0xc0>)
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d149      	bne.n	80172f6 <xNetworkBuffersInitialise+0xa2>
                ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS,
                &xNetworkBufferSemaphoreBuffer );
        }
        #else
        {
            xNetworkBufferSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 8017262:	2140      	movs	r1, #64	@ 0x40
 8017264:	2040      	movs	r0, #64	@ 0x40
 8017266:	f7ec fb11 	bl	800388c <xQueueCreateCountingSemaphore>
 801726a:	4603      	mov	r3, r0
 801726c:	4a29      	ldr	r2, [pc, #164]	@ (8017314 <xNetworkBuffersInitialise+0xc0>)
 801726e:	6013      	str	r3, [r2, #0]
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 8017270:	4b28      	ldr	r3, [pc, #160]	@ (8017314 <xNetworkBuffersInitialise+0xc0>)
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d103      	bne.n	8017280 <xNetworkBuffersInitialise+0x2c>
 8017278:	21c3      	movs	r1, #195	@ 0xc3
 801727a:	4827      	ldr	r0, [pc, #156]	@ (8017318 <xNetworkBuffersInitialise+0xc4>)
 801727c:	f7ea fb6c 	bl	8001958 <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 8017280:	4b24      	ldr	r3, [pc, #144]	@ (8017314 <xNetworkBuffersInitialise+0xc0>)
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d036      	beq.n	80172f6 <xNetworkBuffersInitialise+0xa2>
        {
            vListInitialise( &xFreeBuffersList );
 8017288:	4824      	ldr	r0, [pc, #144]	@ (801731c <xNetworkBuffersInitialise+0xc8>)
 801728a:	f7ec f925 	bl	80034d8 <vListInitialise>

            /* Initialise all the network buffers.  The buffer storage comes
             * from the network interface, and different hardware has different
             * requirements. */
            vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 801728e:	4824      	ldr	r0, [pc, #144]	@ (8017320 <xNetworkBuffersInitialise+0xcc>)
 8017290:	f001 fa24 	bl	80186dc <vNetworkInterfaceAllocateRAMToBuffers>

            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8017294:	2300      	movs	r3, #0
 8017296:	603b      	str	r3, [r7, #0]
 8017298:	e027      	b.n	80172ea <xNetworkBuffersInitialise+0x96>
            {
                /* Initialise and set the owner of the buffer list items. */
                vListInitialiseItem( &( xNetworkBuffers[ x ].xBufferListItem ) );
 801729a:	683a      	ldr	r2, [r7, #0]
 801729c:	4613      	mov	r3, r2
 801729e:	00db      	lsls	r3, r3, #3
 80172a0:	1a9b      	subs	r3, r3, r2
 80172a2:	00db      	lsls	r3, r3, #3
 80172a4:	4a1e      	ldr	r2, [pc, #120]	@ (8017320 <xNetworkBuffersInitialise+0xcc>)
 80172a6:	4413      	add	r3, r2
 80172a8:	4618      	mov	r0, r3
 80172aa:	f7ec f935 	bl	8003518 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBuffers[ x ].xBufferListItem ), &xNetworkBuffers[ x ] );
 80172ae:	683a      	ldr	r2, [r7, #0]
 80172b0:	4613      	mov	r3, r2
 80172b2:	00db      	lsls	r3, r3, #3
 80172b4:	1a9b      	subs	r3, r3, r2
 80172b6:	00db      	lsls	r3, r3, #3
 80172b8:	4a19      	ldr	r2, [pc, #100]	@ (8017320 <xNetworkBuffersInitialise+0xcc>)
 80172ba:	1899      	adds	r1, r3, r2
 80172bc:	4818      	ldr	r0, [pc, #96]	@ (8017320 <xNetworkBuffersInitialise+0xcc>)
 80172be:	683a      	ldr	r2, [r7, #0]
 80172c0:	4613      	mov	r3, r2
 80172c2:	00db      	lsls	r3, r3, #3
 80172c4:	1a9b      	subs	r3, r3, r2
 80172c6:	00db      	lsls	r3, r3, #3
 80172c8:	4403      	add	r3, r0
 80172ca:	330c      	adds	r3, #12
 80172cc:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 80172ce:	683a      	ldr	r2, [r7, #0]
 80172d0:	4613      	mov	r3, r2
 80172d2:	00db      	lsls	r3, r3, #3
 80172d4:	1a9b      	subs	r3, r3, r2
 80172d6:	00db      	lsls	r3, r3, #3
 80172d8:	4a11      	ldr	r2, [pc, #68]	@ (8017320 <xNetworkBuffersInitialise+0xcc>)
 80172da:	4413      	add	r3, r2
 80172dc:	4619      	mov	r1, r3
 80172de:	480f      	ldr	r0, [pc, #60]	@ (801731c <xNetworkBuffersInitialise+0xc8>)
 80172e0:	f7ec f94b 	bl	800357a <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80172e4:	683b      	ldr	r3, [r7, #0]
 80172e6:	3301      	adds	r3, #1
 80172e8:	603b      	str	r3, [r7, #0]
 80172ea:	683b      	ldr	r3, [r7, #0]
 80172ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80172ee:	d9d4      	bls.n	801729a <xNetworkBuffersInitialise+0x46>
            }

            uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 80172f0:	4b0c      	ldr	r3, [pc, #48]	@ (8017324 <xNetworkBuffersInitialise+0xd0>)
 80172f2:	2240      	movs	r2, #64	@ 0x40
 80172f4:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 80172f6:	4b07      	ldr	r3, [pc, #28]	@ (8017314 <xNetworkBuffersInitialise+0xc0>)
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d102      	bne.n	8017304 <xNetworkBuffersInitialise+0xb0>
    {
        xReturn = pdFAIL;
 80172fe:	2300      	movs	r3, #0
 8017300:	607b      	str	r3, [r7, #4]
 8017302:	e001      	b.n	8017308 <xNetworkBuffersInitialise+0xb4>
    }
    else
    {
        xReturn = pdPASS;
 8017304:	2301      	movs	r3, #1
 8017306:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 8017308:	687b      	ldr	r3, [r7, #4]
}
 801730a:	4618      	mov	r0, r3
 801730c:	3708      	adds	r7, #8
 801730e:	46bd      	mov	sp, r7
 8017310:	bd80      	pop	{r7, pc}
 8017312:	bf00      	nop
 8017314:	200023e4 	.word	0x200023e4
 8017318:	080272e8 	.word	0x080272e8
 801731c:	200015cc 	.word	0x200015cc
 8017320:	200015e4 	.word	0x200015e4
 8017324:	200015e0 	.word	0x200015e0

08017328 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 8017328:	b580      	push	{r7, lr}
 801732a:	b086      	sub	sp, #24
 801732c:	af00      	add	r7, sp, #0
 801732e:	6078      	str	r0, [r7, #4]
 8017330:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 8017332:	2300      	movs	r3, #0
 8017334:	617b      	str	r3, [r7, #20]
    BaseType_t xInvalid = pdFALSE;
 8017336:	2300      	movs	r3, #0
 8017338:	613b      	str	r3, [r7, #16]

    /* The current implementation only has a single size memory block, so
     * the requested size parameter is not used (yet). */
    ( void ) xRequestedSizeBytes;

    if( xNetworkBufferSemaphore != NULL )
 801733a:	4b2a      	ldr	r3, [pc, #168]	@ (80173e4 <pxGetNetworkBufferWithDescriptor+0xbc>)
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d04b      	beq.n	80173da <pxGetNetworkBufferWithDescriptor+0xb2>
    {
        /* If there is a semaphore available, there is a network buffer
         * available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8017342:	4b28      	ldr	r3, [pc, #160]	@ (80173e4 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	6839      	ldr	r1, [r7, #0]
 8017348:	4618      	mov	r0, r3
 801734a:	f7ec fc81 	bl	8003c50 <xQueueSemaphoreTake>
 801734e:	4603      	mov	r3, r0
 8017350:	2b01      	cmp	r3, #1
 8017352:	d13d      	bne.n	80173d0 <pxGetNetworkBufferWithDescriptor+0xa8>
        {
            /* Protect the structure as it is accessed from tasks and
             * interrupts. */
            ipconfigBUFFER_ALLOC_LOCK();
 8017354:	f7ef f814 	bl	8006380 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8017358:	4b23      	ldr	r3, [pc, #140]	@ (80173e8 <pxGetNetworkBufferWithDescriptor+0xc0>)
 801735a:	68db      	ldr	r3, [r3, #12]
 801735c:	68db      	ldr	r3, [r3, #12]
 801735e:	617b      	str	r3, [r7, #20]

                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8017360:	6978      	ldr	r0, [r7, #20]
 8017362:	f7ff ff65 	bl	8017230 <bIsValidNetworkDescriptor>
 8017366:	4603      	mov	r3, r0
 8017368:	2b00      	cmp	r3, #0
 801736a:	d009      	beq.n	8017380 <pxGetNetworkBufferWithDescriptor+0x58>
                    listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxReturn->xBufferListItem ) ) )
 801736c:	697b      	ldr	r3, [r7, #20]
 801736e:	691b      	ldr	r3, [r3, #16]
                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8017370:	4a1d      	ldr	r2, [pc, #116]	@ (80173e8 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8017372:	4293      	cmp	r3, r2
 8017374:	d104      	bne.n	8017380 <pxGetNetworkBufferWithDescriptor+0x58>
                {
                    ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 8017376:	697b      	ldr	r3, [r7, #20]
 8017378:	4618      	mov	r0, r3
 801737a:	f7ec f937 	bl	80035ec <uxListRemove>
 801737e:	e001      	b.n	8017384 <pxGetNetworkBufferWithDescriptor+0x5c>
                }
                else
                {
                    xInvalid = pdTRUE;
 8017380:	2301      	movs	r3, #1
 8017382:	613b      	str	r3, [r7, #16]
                }
            }
            ipconfigBUFFER_ALLOC_UNLOCK();
 8017384:	f7ef f828 	bl	80063d8 <vPortExitCritical>

            if( xInvalid == pdTRUE )
 8017388:	693b      	ldr	r3, [r7, #16]
 801738a:	2b01      	cmp	r3, #1
 801738c:	d10b      	bne.n	80173a6 <pxGetNetworkBufferWithDescriptor+0x7e>
                 * above says this can be called from an interrupt too) */

                /* _HT_ The function shall not be called from an ISR. Comment
                 * was indeed misleading. Hopefully clear now?
                 * So the printf()is OK here. */
                FreeRTOS_debug_printf( ( "pxGetNetworkBufferWithDescriptor: INVALID BUFFER: %p (valid %lu)\n",
 801738e:	6978      	ldr	r0, [r7, #20]
 8017390:	f7ff ff4e 	bl	8017230 <bIsValidNetworkDescriptor>
 8017394:	4603      	mov	r3, r0
 8017396:	461a      	mov	r2, r3
 8017398:	6979      	ldr	r1, [r7, #20]
 801739a:	4814      	ldr	r0, [pc, #80]	@ (80173ec <pxGetNetworkBufferWithDescriptor+0xc4>)
 801739c:	f00a fed4 	bl	8022148 <lUDPLoggingPrintf>
                                         pxReturn, bIsValidNetworkDescriptor( pxReturn ) ) );
                pxReturn = NULL;
 80173a0:	2300      	movs	r3, #0
 80173a2:	617b      	str	r3, [r7, #20]
 80173a4:	e019      	b.n	80173da <pxGetNetworkBufferWithDescriptor+0xb2>
            }
            else
            {
                /* Reading UBaseType_t, no critical section needed. */
                uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 80173a6:	4b10      	ldr	r3, [pc, #64]	@ (80173e8 <pxGetNetworkBufferWithDescriptor+0xc0>)
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	60fb      	str	r3, [r7, #12]

                /* For stats, latch the lowest number of network buffers since
                 * booting. */
                if( uxMinimumFreeNetworkBuffers > uxCount )
 80173ac:	4b10      	ldr	r3, [pc, #64]	@ (80173f0 <pxGetNetworkBufferWithDescriptor+0xc8>)
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	68fa      	ldr	r2, [r7, #12]
 80173b2:	429a      	cmp	r2, r3
 80173b4:	d202      	bcs.n	80173bc <pxGetNetworkBufferWithDescriptor+0x94>
                {
                    uxMinimumFreeNetworkBuffers = uxCount;
 80173b6:	4a0e      	ldr	r2, [pc, #56]	@ (80173f0 <pxGetNetworkBufferWithDescriptor+0xc8>)
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	6013      	str	r3, [r2, #0]
                }

                pxReturn->xDataLength = xRequestedSizeBytes;
 80173bc:	697b      	ldr	r3, [r7, #20]
 80173be:	687a      	ldr	r2, [r7, #4]
 80173c0:	629a      	str	r2, [r3, #40]	@ 0x28
                pxReturn->pxInterface = NULL;
 80173c2:	697b      	ldr	r3, [r7, #20]
 80173c4:	2200      	movs	r2, #0
 80173c6:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReturn->pxEndPoint = NULL;
 80173c8:	697b      	ldr	r3, [r7, #20]
 80173ca:	2200      	movs	r2, #0
 80173cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80173ce:	e004      	b.n	80173da <pxGetNetworkBufferWithDescriptor+0xb2>
            iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
        }
        else
        {
            /* lint wants to see at least a comment. */
            iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
 80173d0:	f240 113b 	movw	r1, #315	@ 0x13b
 80173d4:	4807      	ldr	r0, [pc, #28]	@ (80173f4 <pxGetNetworkBufferWithDescriptor+0xcc>)
 80173d6:	f7ea fabf 	bl	8001958 <vAssertCalled>
        }
    }

    return pxReturn;
 80173da:	697b      	ldr	r3, [r7, #20]
}
 80173dc:	4618      	mov	r0, r3
 80173de:	3718      	adds	r7, #24
 80173e0:	46bd      	mov	sp, r7
 80173e2:	bd80      	pop	{r7, pc}
 80173e4:	200023e4 	.word	0x200023e4
 80173e8:	200015cc 	.word	0x200015cc
 80173ec:	08027334 	.word	0x08027334
 80173f0:	200015e0 	.word	0x200015e0
 80173f4:	080272e8 	.word	0x080272e8

080173f8 <vReleaseNetworkBufferAndDescriptor>:
    return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b084      	sub	sp, #16
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
    BaseType_t xListItemAlreadyInFreeList;

    if( bIsValidNetworkDescriptor( pxNetworkBuffer ) == pdFALSE_UNSIGNED )
 8017400:	6878      	ldr	r0, [r7, #4]
 8017402:	f7ff ff15 	bl	8017230 <bIsValidNetworkDescriptor>
 8017406:	4603      	mov	r3, r0
 8017408:	2b00      	cmp	r3, #0
 801740a:	d104      	bne.n	8017416 <vReleaseNetworkBufferAndDescriptor+0x1e>
    {
        FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: Invalid buffer %p\n", pxNetworkBuffer ) );
 801740c:	6879      	ldr	r1, [r7, #4]
 801740e:	4819      	ldr	r0, [pc, #100]	@ (8017474 <vReleaseNetworkBufferAndDescriptor+0x7c>)
 8017410:	f00a fe9a 	bl	8022148 <lUDPLoggingPrintf>
            prvShowWarnings();
        }

        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 8017414:	e029      	b.n	801746a <vReleaseNetworkBufferAndDescriptor+0x72>
        ipconfigBUFFER_ALLOC_LOCK();
 8017416:	f7ee ffb3 	bl	8006380 <vPortEnterCritical>
                xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	691b      	ldr	r3, [r3, #16]
 801741e:	4a16      	ldr	r2, [pc, #88]	@ (8017478 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8017420:	4293      	cmp	r3, r2
 8017422:	d101      	bne.n	8017428 <vReleaseNetworkBufferAndDescriptor+0x30>
 8017424:	2301      	movs	r3, #1
 8017426:	e000      	b.n	801742a <vReleaseNetworkBufferAndDescriptor+0x32>
 8017428:	2300      	movs	r3, #0
 801742a:	60fb      	str	r3, [r7, #12]
                if( xListItemAlreadyInFreeList == pdFALSE )
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d104      	bne.n	801743c <vReleaseNetworkBufferAndDescriptor+0x44>
                    vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	4619      	mov	r1, r3
 8017436:	4810      	ldr	r0, [pc, #64]	@ (8017478 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8017438:	f7ec f87b 	bl	8003532 <vListInsertEnd>
        ipconfigBUFFER_ALLOC_UNLOCK();
 801743c:	f7ee ffcc 	bl	80063d8 <vPortExitCritical>
        if( xListItemAlreadyInFreeList )
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d008      	beq.n	8017458 <vReleaseNetworkBufferAndDescriptor+0x60>
            FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 8017446:	f000 f829 	bl	801749c <uxGetNumberOfFreeNetworkBuffers>
 801744a:	4603      	mov	r3, r0
 801744c:	461a      	mov	r2, r3
 801744e:	6879      	ldr	r1, [r7, #4]
 8017450:	480a      	ldr	r0, [pc, #40]	@ (801747c <vReleaseNetworkBufferAndDescriptor+0x84>)
 8017452:	f00a fe79 	bl	8022148 <lUDPLoggingPrintf>
}
 8017456:	e008      	b.n	801746a <vReleaseNetworkBufferAndDescriptor+0x72>
            ( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 8017458:	4b09      	ldr	r3, [pc, #36]	@ (8017480 <vReleaseNetworkBufferAndDescriptor+0x88>)
 801745a:	6818      	ldr	r0, [r3, #0]
 801745c:	2300      	movs	r3, #0
 801745e:	2200      	movs	r2, #0
 8017460:	2100      	movs	r1, #0
 8017462:	f7ec fa3d 	bl	80038e0 <xQueueGenericSend>
            prvShowWarnings();
 8017466:	f7ff feee 	bl	8017246 <prvShowWarnings>
}
 801746a:	bf00      	nop
 801746c:	3710      	adds	r7, #16
 801746e:	46bd      	mov	sp, r7
 8017470:	bd80      	pop	{r7, pc}
 8017472:	bf00      	nop
 8017474:	08027378 	.word	0x08027378
 8017478:	200015cc 	.word	0x200015cc
 801747c:	080273b0 	.word	0x080273b0
 8017480:	200023e4 	.word	0x200023e4

08017484 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8017484:	b480      	push	{r7}
 8017486:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 8017488:	4b03      	ldr	r3, [pc, #12]	@ (8017498 <uxGetMinimumFreeNetworkBuffers+0x14>)
 801748a:	681b      	ldr	r3, [r3, #0]
}
 801748c:	4618      	mov	r0, r3
 801748e:	46bd      	mov	sp, r7
 8017490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017494:	4770      	bx	lr
 8017496:	bf00      	nop
 8017498:	200015e0 	.word	0x200015e0

0801749c <uxGetNumberOfFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 801749c:	b480      	push	{r7}
 801749e:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 80174a0:	4b03      	ldr	r3, [pc, #12]	@ (80174b0 <uxGetNumberOfFreeNetworkBuffers+0x14>)
 80174a2:	681b      	ldr	r3, [r3, #0]
}
 80174a4:	4618      	mov	r0, r3
 80174a6:	46bd      	mov	sp, r7
 80174a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ac:	4770      	bx	lr
 80174ae:	bf00      	nop
 80174b0:	200015cc 	.word	0x200015cc

080174b4 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 80174b4:	b480      	push	{r7}
 80174b6:	b085      	sub	sp, #20
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 80174bc:	2300      	movs	r3, #0
 80174be:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	4a11      	ldr	r2, [pc, #68]	@ (8017508 <xHas_1F_PHYSPCS+0x54>)
 80174c4:	4293      	cmp	r3, r2
 80174c6:	d016      	beq.n	80174f6 <xHas_1F_PHYSPCS+0x42>
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	4a0f      	ldr	r2, [pc, #60]	@ (8017508 <xHas_1F_PHYSPCS+0x54>)
 80174cc:	4293      	cmp	r3, r2
 80174ce:	d80f      	bhi.n	80174f0 <xHas_1F_PHYSPCS+0x3c>
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	4a0e      	ldr	r2, [pc, #56]	@ (801750c <xHas_1F_PHYSPCS+0x58>)
 80174d4:	4293      	cmp	r3, r2
 80174d6:	d00e      	beq.n	80174f6 <xHas_1F_PHYSPCS+0x42>
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	4a0c      	ldr	r2, [pc, #48]	@ (801750c <xHas_1F_PHYSPCS+0x58>)
 80174dc:	4293      	cmp	r3, r2
 80174de:	d807      	bhi.n	80174f0 <xHas_1F_PHYSPCS+0x3c>
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	4a0b      	ldr	r2, [pc, #44]	@ (8017510 <xHas_1F_PHYSPCS+0x5c>)
 80174e4:	4293      	cmp	r3, r2
 80174e6:	d006      	beq.n	80174f6 <xHas_1F_PHYSPCS+0x42>
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	4a0a      	ldr	r2, [pc, #40]	@ (8017514 <xHas_1F_PHYSPCS+0x60>)
 80174ec:	4293      	cmp	r3, r2
 80174ee:	d002      	beq.n	80174f6 <xHas_1F_PHYSPCS+0x42>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 80174f0:	2301      	movs	r3, #1
 80174f2:	60fb      	str	r3, [r7, #12]
            break;
 80174f4:	e000      	b.n	80174f8 <xHas_1F_PHYSPCS+0x44>
        case PHY_ID_DP83848I:
        case PHY_ID_DP83TC811S:
        case PHY_ID_TM4C129X:
        case PHY_ID_MV88E6071:
            /* Has no 0x1F register "PHY Special Control Status". */
            break;
 80174f6:	bf00      	nop
    }

    return xResult;
 80174f8:	68fb      	ldr	r3, [r7, #12]
}
 80174fa:	4618      	mov	r0, r3
 80174fc:	3714      	adds	r7, #20
 80174fe:	46bd      	mov	sp, r7
 8017500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017504:	4770      	bx	lr
 8017506:	bf00      	nop
 8017508:	ff000710 	.word	0xff000710
 801750c:	2000a250 	.word	0x2000a250
 8017510:	20005c90 	.word	0x20005c90
 8017514:	2000a221 	.word	0x2000a221

08017518 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 8017518:	b480      	push	{r7}
 801751a:	b085      	sub	sp, #20
 801751c:	af00      	add	r7, sp, #0
 801751e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8017520:	2300      	movs	r3, #0
 8017522:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	4a0d      	ldr	r2, [pc, #52]	@ (801755c <xHas_19_PHYCR+0x44>)
 8017528:	4293      	cmp	r3, r2
 801752a:	d00b      	beq.n	8017544 <xHas_19_PHYCR+0x2c>
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	4a0b      	ldr	r2, [pc, #44]	@ (801755c <xHas_19_PHYCR+0x44>)
 8017530:	4293      	cmp	r3, r2
 8017532:	d80a      	bhi.n	801754a <xHas_19_PHYCR+0x32>
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	4a0a      	ldr	r2, [pc, #40]	@ (8017560 <xHas_19_PHYCR+0x48>)
 8017538:	4293      	cmp	r3, r2
 801753a:	d003      	beq.n	8017544 <xHas_19_PHYCR+0x2c>
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	4a09      	ldr	r2, [pc, #36]	@ (8017564 <xHas_19_PHYCR+0x4c>)
 8017540:	4293      	cmp	r3, r2
 8017542:	d102      	bne.n	801754a <xHas_19_PHYCR+0x32>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
        case PHY_ID_TM4C129X:
            xResult = pdTRUE;
 8017544:	2301      	movs	r3, #1
 8017546:	60fb      	str	r3, [r7, #12]
            break;
 8017548:	e000      	b.n	801754c <xHas_19_PHYCR+0x34>

        case PHY_ID_MV88E6071: /* Marvell 88E6071 */
        default:
            /* Most PHY's do not have a 19_PHYCR */
            break;
 801754a:	bf00      	nop
    }

    return xResult;
 801754c:	68fb      	ldr	r3, [r7, #12]
}
 801754e:	4618      	mov	r0, r3
 8017550:	3714      	adds	r7, #20
 8017552:	46bd      	mov	sp, r7
 8017554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017558:	4770      	bx	lr
 801755a:	bf00      	nop
 801755c:	2000a221 	.word	0x2000a221
 8017560:	0007c130 	.word	0x0007c130
 8017564:	20005c90 	.word	0x20005c90

08017568 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 8017568:	b580      	push	{r7, lr}
 801756a:	b084      	sub	sp, #16
 801756c:	af00      	add	r7, sp, #0
 801756e:	60f8      	str	r0, [r7, #12]
 8017570:	60b9      	str	r1, [r7, #8]
 8017572:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8017574:	2240      	movs	r2, #64	@ 0x40
 8017576:	2100      	movs	r1, #0
 8017578:	68f8      	ldr	r0, [r7, #12]
 801757a:	f00b f90e 	bl	802279a <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	68ba      	ldr	r2, [r7, #8]
 8017582:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	687a      	ldr	r2, [r7, #4]
 8017588:	605a      	str	r2, [r3, #4]
}
 801758a:	bf00      	nop
 801758c:	3710      	adds	r7, #16
 801758e:	46bd      	mov	sp, r7
 8017590:	bd80      	pop	{r7, pc}
	...

08017594 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8017594:	b580      	push	{r7, lr}
 8017596:	b086      	sub	sp, #24
 8017598:	af00      	add	r7, sp, #0
 801759a:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	2200      	movs	r2, #0
 80175a0:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 80175a2:	2300      	movs	r3, #0
 80175a4:	617b      	str	r3, [r7, #20]
 80175a6:	e03a      	b.n	801761e <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0U;
 80175a8:	2300      	movs	r3, #0
 80175aa:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	681b      	ldr	r3, [r3, #0]
 80175b0:	f107 020c 	add.w	r2, r7, #12
 80175b4:	2103      	movs	r1, #3
 80175b6:	6978      	ldr	r0, [r7, #20]
 80175b8:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80175c0:	4293      	cmp	r3, r2
 80175c2:	d029      	beq.n	8017618 <xPhyDiscover+0x84>
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d026      	beq.n	8017618 <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	f107 0208 	add.w	r2, r7, #8
 80175d2:	2102      	movs	r1, #2
 80175d4:	6978      	ldr	r0, [r7, #20]
 80175d6:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0U );
 80175d8:	68bb      	ldr	r3, [r7, #8]
 80175da:	041a      	lsls	r2, r3, #16
 80175dc:	68f9      	ldr	r1, [r7, #12]
 80175de:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80175e2:	400b      	ands	r3, r1
 80175e4:	4313      	orrs	r3, r2
 80175e6:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = ( uint8_t ) xPhyAddress;
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80175ec:	697a      	ldr	r2, [r7, #20]
 80175ee:	b2d1      	uxtb	r1, r2
 80175f0:	687a      	ldr	r2, [r7, #4]
 80175f2:	4413      	add	r3, r2
 80175f4:	460a      	mov	r2, r1
 80175f6:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	3202      	adds	r2, #2
 8017600:	6939      	ldr	r1, [r7, #16]
 8017602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801760a:	1c5a      	adds	r2, r3, #1
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017614:	2b04      	cmp	r3, #4
 8017616:	d005      	beq.n	8017624 <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8017618:	697b      	ldr	r3, [r7, #20]
 801761a:	3301      	adds	r3, #1
 801761c:	617b      	str	r3, [r7, #20]
 801761e:	697b      	ldr	r3, [r7, #20]
 8017620:	2b1f      	cmp	r3, #31
 8017622:	ddc1      	ble.n	80175a8 <xPhyDiscover+0x14>
                break;
            }
        }
    }

    if( pxPhyObject->xPortCount > 0 )
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017628:	2b00      	cmp	r3, #0
 801762a:	dd05      	ble.n	8017638 <xPhyDiscover+0xa4>
    {
        FreeRTOS_printf( ( "PHY ID %X\n", ( unsigned int ) pxPhyObject->ulPhyIDs[ 0 ] ) );
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	689b      	ldr	r3, [r3, #8]
 8017630:	4619      	mov	r1, r3
 8017632:	4804      	ldr	r0, [pc, #16]	@ (8017644 <xPhyDiscover+0xb0>)
 8017634:	f00a fd88 	bl	8022148 <lUDPLoggingPrintf>
    }

    return pxPhyObject->xPortCount;
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 801763c:	4618      	mov	r0, r3
 801763e:	3718      	adds	r7, #24
 8017640:	46bd      	mov	sp, r7
 8017642:	bd80      	pop	{r7, pc}
 8017644:	080273f4 	.word	0x080273f4

08017648 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8017648:	b580      	push	{r7, lr}
 801764a:	b08c      	sub	sp, #48	@ 0x30
 801764c:	af00      	add	r7, sp, #0
 801764e:	6078      	str	r0, [r7, #4]
 8017650:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0U;
 8017652:	2300      	movs	r3, #0
 8017654:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017656:	2300      	movs	r3, #0
 8017658:	62bb      	str	r3, [r7, #40]	@ 0x28
 801765a:	e017      	b.n	801768c <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801765c:	687a      	ldr	r2, [r7, #4]
 801765e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017660:	4413      	add	r3, r2
 8017662:	3318      	adds	r3, #24
 8017664:	781b      	ldrb	r3, [r3, #0]
 8017666:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	f107 0218 	add.w	r2, r7, #24
 8017670:	2100      	movs	r1, #0
 8017672:	69f8      	ldr	r0, [r7, #28]
 8017674:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	685b      	ldr	r3, [r3, #4]
 801767a:	69ba      	ldr	r2, [r7, #24]
 801767c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8017680:	2100      	movs	r1, #0
 8017682:	69f8      	ldr	r0, [r7, #28]
 8017684:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017688:	3301      	adds	r3, #1
 801768a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017690:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017692:	429a      	cmp	r2, r3
 8017694:	dbe2      	blt.n	801765c <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8017696:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801769a:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 801769c:	f107 030c 	add.w	r3, r7, #12
 80176a0:	4618      	mov	r0, r3
 80176a2:	f7ed fca9 	bl	8004ff8 <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80176a6:	2300      	movs	r3, #0
 80176a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80176aa:	e01f      	b.n	80176ec <xPhyReset+0xa4>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80176ac:	687a      	ldr	r2, [r7, #4]
 80176ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176b0:	4413      	add	r3, r2
 80176b2:	3318      	adds	r3, #24
 80176b4:	781b      	ldrb	r3, [r3, #0]
 80176b6:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	f107 0218 	add.w	r2, r7, #24
 80176c0:	2100      	movs	r1, #0
 80176c2:	6a38      	ldr	r0, [r7, #32]
 80176c4:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 80176c6:	69bb      	ldr	r3, [r7, #24]
 80176c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d10a      	bne.n	80176e6 <xPhyReset+0x9e>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
 80176d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80176d2:	482d      	ldr	r0, [pc, #180]	@ (8017788 <xPhyReset+0x140>)
 80176d4:	f00a fd38 	bl	8022148 <lUDPLoggingPrintf>
                ulDoneMask |= ( 1U << xPhyIndex );
 80176d8:	2201      	movs	r2, #1
 80176da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176dc:	fa02 f303 	lsl.w	r3, r2, r3
 80176e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80176e2:	4313      	orrs	r3, r2
 80176e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80176e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176e8:	3301      	adds	r3, #1
 80176ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80176f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80176f2:	429a      	cmp	r2, r3
 80176f4:	dbda      	blt.n	80176ac <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 80176f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80176f8:	683b      	ldr	r3, [r7, #0]
 80176fa:	429a      	cmp	r2, r3
 80176fc:	d013      	beq.n	8017726 <xPhyReset+0xde>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 80176fe:	f107 0214 	add.w	r2, r7, #20
 8017702:	f107 030c 	add.w	r3, r7, #12
 8017706:	4611      	mov	r1, r2
 8017708:	4618      	mov	r0, r3
 801770a:	f7ed fcad 	bl	8005068 <xTaskCheckForTimeOut>
 801770e:	4603      	mov	r3, r0
 8017710:	2b00      	cmp	r3, #0
 8017712:	d004      	beq.n	801771e <xPhyReset+0xd6>
        {
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8017714:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017716:	481d      	ldr	r0, [pc, #116]	@ (801778c <xPhyReset+0x144>)
 8017718:	f00a fd16 	bl	8022148 <lUDPLoggingPrintf>
            break;
 801771c:	e004      	b.n	8017728 <xPhyReset+0xe0>
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 801771e:	2032      	movs	r0, #50	@ 0x32
 8017720:	f7ec fef6 	bl	8004510 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017724:	e7bf      	b.n	80176a6 <xPhyReset+0x5e>
            break;
 8017726:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017728:	2300      	movs	r3, #0
 801772a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801772c:	e01e      	b.n	801776c <xPhyReset+0x124>
    {
        if( ( ulDoneMask & ( 1U << xPhyIndex ) ) == 0U )
 801772e:	2201      	movs	r2, #1
 8017730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017732:	409a      	lsls	r2, r3
 8017734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017736:	4013      	ands	r3, r2
 8017738:	2b00      	cmp	r3, #0
 801773a:	d114      	bne.n	8017766 <xPhyReset+0x11e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801773c:	687a      	ldr	r2, [r7, #4]
 801773e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017740:	4413      	add	r3, r2
 8017742:	3318      	adds	r3, #24
 8017744:	781b      	ldrb	r3, [r3, #0]
 8017746:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	f107 0218 	add.w	r2, r7, #24
 8017750:	2100      	movs	r1, #0
 8017752:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017754:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	685b      	ldr	r3, [r3, #4]
 801775a:	69ba      	ldr	r2, [r7, #24]
 801775c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8017760:	2100      	movs	r1, #0
 8017762:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017764:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017768:	3301      	adds	r3, #1
 801776a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017770:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017772:	429a      	cmp	r2, r3
 8017774:	dbdb      	blt.n	801772e <xPhyReset+0xe6>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017776:	2032      	movs	r0, #50	@ 0x32
 8017778:	f7ec feca 	bl	8004510 <vTaskDelay>

    return ulDoneMask;
 801777c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801777e:	4618      	mov	r0, r3
 8017780:	3730      	adds	r7, #48	@ 0x30
 8017782:	46bd      	mov	sp, r7
 8017784:	bd80      	pop	{r7, pc}
 8017786:	bf00      	nop
 8017788:	08027400 	.word	0x08027400
 801778c:	08027424 	.word	0x08027424

08017790 <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8017790:	b580      	push	{r7, lr}
 8017792:	b088      	sub	sp, #32
 8017794:	af00      	add	r7, sp, #0
 8017796:	6078      	str	r0, [r7, #4]
 8017798:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801779e:	2b00      	cmp	r3, #0
 80177a0:	dc05      	bgt.n	80177ae <xPhyConfigure+0x1e>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 80177a2:	487c      	ldr	r0, [pc, #496]	@ (8017994 <xPhyConfigure+0x204>)
 80177a4:	f00a fcd0 	bl	8022148 <lUDPLoggingPrintf>
        return -1;
 80177a8:	f04f 33ff 	mov.w	r3, #4294967295
 80177ac:	e0ed      	b.n	801798a <xPhyConfigure+0x1fa>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 80177ae:	683b      	ldr	r3, [r7, #0]
 80177b0:	781b      	ldrb	r3, [r3, #0]
 80177b2:	2b03      	cmp	r3, #3
 80177b4:	d107      	bne.n	80177c6 <xPhyConfigure+0x36>
 80177b6:	683b      	ldr	r3, [r7, #0]
 80177b8:	789b      	ldrb	r3, [r3, #2]
 80177ba:	2b03      	cmp	r3, #3
 80177bc:	d103      	bne.n	80177c6 <xPhyConfigure+0x36>
    {
        ulAdvertise = phyADVERTISE_ALL;
 80177be:	f240 13e1 	movw	r3, #481	@ 0x1e1
 80177c2:	61fb      	str	r3, [r7, #28]
 80177c4:	e044      	b.n	8017850 <xPhyConfigure+0xc0>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 80177c6:	2301      	movs	r3, #1
 80177c8:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	781b      	ldrb	r3, [r3, #0]
 80177ce:	2b03      	cmp	r3, #3
 80177d0:	d10d      	bne.n	80177ee <xPhyConfigure+0x5e>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 80177d2:	683b      	ldr	r3, [r7, #0]
 80177d4:	789b      	ldrb	r3, [r3, #2]
 80177d6:	2b02      	cmp	r3, #2
 80177d8:	d104      	bne.n	80177e4 <xPhyConfigure+0x54>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 80177da:	69fb      	ldr	r3, [r7, #28]
 80177dc:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80177e0:	61fb      	str	r3, [r7, #28]
 80177e2:	e035      	b.n	8017850 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 80177e4:	69fb      	ldr	r3, [r7, #28]
 80177e6:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80177ea:	61fb      	str	r3, [r7, #28]
 80177ec:	e030      	b.n	8017850 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 80177ee:	683b      	ldr	r3, [r7, #0]
 80177f0:	789b      	ldrb	r3, [r3, #2]
 80177f2:	2b03      	cmp	r3, #3
 80177f4:	d10d      	bne.n	8017812 <xPhyConfigure+0x82>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 80177f6:	683b      	ldr	r3, [r7, #0]
 80177f8:	781b      	ldrb	r3, [r3, #0]
 80177fa:	2b01      	cmp	r3, #1
 80177fc:	d104      	bne.n	8017808 <xPhyConfigure+0x78>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 80177fe:	69fb      	ldr	r3, [r7, #28]
 8017800:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8017804:	61fb      	str	r3, [r7, #28]
 8017806:	e023      	b.n	8017850 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8017808:	69fb      	ldr	r3, [r7, #28]
 801780a:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 801780e:	61fb      	str	r3, [r7, #28]
 8017810:	e01e      	b.n	8017850 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 8017812:	683b      	ldr	r3, [r7, #0]
 8017814:	781b      	ldrb	r3, [r3, #0]
 8017816:	2b02      	cmp	r3, #2
 8017818:	d10d      	bne.n	8017836 <xPhyConfigure+0xa6>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 801781a:	683b      	ldr	r3, [r7, #0]
 801781c:	789b      	ldrb	r3, [r3, #2]
 801781e:	2b02      	cmp	r3, #2
 8017820:	d104      	bne.n	801782c <xPhyConfigure+0x9c>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 8017822:	69fb      	ldr	r3, [r7, #28]
 8017824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017828:	61fb      	str	r3, [r7, #28]
 801782a:	e011      	b.n	8017850 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 801782c:	69fb      	ldr	r3, [r7, #28]
 801782e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017832:	61fb      	str	r3, [r7, #28]
 8017834:	e00c      	b.n	8017850 <xPhyConfigure+0xc0>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017836:	683b      	ldr	r3, [r7, #0]
 8017838:	789b      	ldrb	r3, [r3, #2]
 801783a:	2b02      	cmp	r3, #2
 801783c:	d104      	bne.n	8017848 <xPhyConfigure+0xb8>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 801783e:	69fb      	ldr	r3, [r7, #28]
 8017840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017844:	61fb      	str	r3, [r7, #28]
 8017846:	e003      	b.n	8017850 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 8017848:	69fb      	ldr	r3, [r7, #28]
 801784a:	f043 0320 	orr.w	r3, r3, #32
 801784e:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017854:	2201      	movs	r2, #1
 8017856:	fa02 f303 	lsl.w	r3, r2, r3
 801785a:	3b01      	subs	r3, #1
 801785c:	4619      	mov	r1, r3
 801785e:	6878      	ldr	r0, [r7, #4]
 8017860:	f7ff fef2 	bl	8017648 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017864:	2300      	movs	r3, #0
 8017866:	61bb      	str	r3, [r7, #24]
 8017868:	e080      	b.n	801796c <xPhyConfigure+0x1dc>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801786a:	687a      	ldr	r2, [r7, #4]
 801786c:	69bb      	ldr	r3, [r7, #24]
 801786e:	4413      	add	r3, r2
 8017870:	3318      	adds	r3, #24
 8017872:	781b      	ldrb	r3, [r3, #0]
 8017874:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	69ba      	ldr	r2, [r7, #24]
 801787a:	3202      	adds	r2, #2
 801787c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017880:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	685b      	ldr	r3, [r3, #4]
 8017886:	69fa      	ldr	r2, [r7, #28]
 8017888:	2104      	movs	r1, #4
 801788a:	6978      	ldr	r0, [r7, #20]
 801788c:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	f107 020c 	add.w	r2, r7, #12
 8017896:	2100      	movs	r1, #0
 8017898:	6978      	ldr	r0, [r7, #20]
 801789a:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 80178a2:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80178aa:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 80178ac:	683b      	ldr	r3, [r7, #0]
 80178ae:	781b      	ldrb	r3, [r3, #0]
 80178b0:	2b02      	cmp	r3, #2
 80178b2:	d003      	beq.n	80178bc <xPhyConfigure+0x12c>
 80178b4:	683b      	ldr	r3, [r7, #0]
 80178b6:	781b      	ldrb	r3, [r3, #0]
 80178b8:	2b03      	cmp	r3, #3
 80178ba:	d104      	bne.n	80178c6 <xPhyConfigure+0x136>
        {
            ulConfig |= phyBMCR_SPEED_100;
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80178c2:	60fb      	str	r3, [r7, #12]
 80178c4:	e007      	b.n	80178d6 <xPhyConfigure+0x146>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 80178c6:	683b      	ldr	r3, [r7, #0]
 80178c8:	781b      	ldrb	r3, [r3, #0]
 80178ca:	2b01      	cmp	r3, #1
 80178cc:	d103      	bne.n	80178d6 <xPhyConfigure+0x146>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80178d4:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 80178d6:	683b      	ldr	r3, [r7, #0]
 80178d8:	789b      	ldrb	r3, [r3, #2]
 80178da:	2b02      	cmp	r3, #2
 80178dc:	d003      	beq.n	80178e6 <xPhyConfigure+0x156>
 80178de:	683b      	ldr	r3, [r7, #0]
 80178e0:	789b      	ldrb	r3, [r3, #2]
 80178e2:	2b03      	cmp	r3, #3
 80178e4:	d104      	bne.n	80178f0 <xPhyConfigure+0x160>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80178ec:	60fb      	str	r3, [r7, #12]
 80178ee:	e007      	b.n	8017900 <xPhyConfigure+0x170>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 80178f0:	683b      	ldr	r3, [r7, #0]
 80178f2:	789b      	ldrb	r3, [r3, #2]
 80178f4:	2b01      	cmp	r3, #1
 80178f6:	d103      	bne.n	8017900 <xPhyConfigure+0x170>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80178fe:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 8017900:	6938      	ldr	r0, [r7, #16]
 8017902:	f7ff fe09 	bl	8017518 <xHas_19_PHYCR>
 8017906:	4603      	mov	r3, r0
 8017908:	2b00      	cmp	r3, #0
 801790a:	d026      	beq.n	801795a <xPhyConfigure+0x1ca>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	f107 0208 	add.w	r2, r7, #8
 8017914:	2119      	movs	r1, #25
 8017916:	6978      	ldr	r0, [r7, #20]
 8017918:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 801791a:	68bb      	ldr	r3, [r7, #8]
 801791c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8017920:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8017922:	683b      	ldr	r3, [r7, #0]
 8017924:	785b      	ldrb	r3, [r3, #1]
 8017926:	2b03      	cmp	r3, #3
 8017928:	d104      	bne.n	8017934 <xPhyConfigure+0x1a4>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 801792a:	68bb      	ldr	r3, [r7, #8]
 801792c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8017930:	60bb      	str	r3, [r7, #8]
 8017932:	e00c      	b.n	801794e <xPhyConfigure+0x1be>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8017934:	683b      	ldr	r3, [r7, #0]
 8017936:	785b      	ldrb	r3, [r3, #1]
 8017938:	2b02      	cmp	r3, #2
 801793a:	d104      	bne.n	8017946 <xPhyConfigure+0x1b6>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 801793c:	68bb      	ldr	r3, [r7, #8]
 801793e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017942:	60bb      	str	r3, [r7, #8]
 8017944:	e003      	b.n	801794e <xPhyConfigure+0x1be>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 8017946:	68bb      	ldr	r3, [r7, #8]
 8017948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801794c:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	685b      	ldr	r3, [r3, #4]
 8017952:	68ba      	ldr	r2, [r7, #8]
 8017954:	2119      	movs	r1, #25
 8017956:	6978      	ldr	r0, [r7, #20]
 8017958:	4798      	blx	r3
        }

        FreeRTOS_printf( ( "+TCP: advertise: %04X config %04X\n", ( unsigned int ) ulAdvertise, ( unsigned int ) ulConfig ) );
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	461a      	mov	r2, r3
 801795e:	69f9      	ldr	r1, [r7, #28]
 8017960:	480d      	ldr	r0, [pc, #52]	@ (8017998 <xPhyConfigure+0x208>)
 8017962:	f00a fbf1 	bl	8022148 <lUDPLoggingPrintf>
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017966:	69bb      	ldr	r3, [r7, #24]
 8017968:	3301      	adds	r3, #1
 801796a:	61bb      	str	r3, [r7, #24]
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017970:	69ba      	ldr	r2, [r7, #24]
 8017972:	429a      	cmp	r2, r3
 8017974:	f6ff af79 	blt.w	801786a <xPhyConfigure+0xda>
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	69fa      	ldr	r2, [r7, #28]
 8017986:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8017988:	2300      	movs	r3, #0
}
 801798a:	4618      	mov	r0, r3
 801798c:	3720      	adds	r7, #32
 801798e:	46bd      	mov	sp, r7
 8017990:	bd80      	pop	{r7, pc}
 8017992:	bf00      	nop
 8017994:	08027458 	.word	0x08027458
 8017998:	0802747c 	.word	0x0802747c

0801799c <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 801799c:	b590      	push	{r4, r7, lr}
 801799e:	b095      	sub	sp, #84	@ 0x54
 80179a0:	af02      	add	r7, sp, #8
 80179a2:	6078      	str	r0, [r7, #4]
 80179a4:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 80179a6:	683b      	ldr	r3, [r7, #0]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d101      	bne.n	80179b0 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 80179ac:	2300      	movs	r3, #0
 80179ae:	e18d      	b.n	8017ccc <xPhyStartAutoNegotiation+0x330>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 80179b0:	2300      	movs	r3, #0
 80179b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80179b4:	e020      	b.n	80179f8 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 80179b6:	683a      	ldr	r2, [r7, #0]
 80179b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80179ba:	fa22 f303 	lsr.w	r3, r2, r3
 80179be:	f003 0301 	and.w	r3, r3, #1
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d015      	beq.n	80179f2 <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80179c6:	687a      	ldr	r2, [r7, #4]
 80179c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80179ca:	4413      	add	r3, r2
 80179cc:	3318      	adds	r3, #24
 80179ce:	781b      	ldrb	r3, [r3, #0]
 80179d0:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	685b      	ldr	r3, [r3, #4]
 80179d6:	687a      	ldr	r2, [r7, #4]
 80179d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80179da:	2104      	movs	r1, #4
 80179dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80179de:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	685b      	ldr	r3, [r3, #4]
 80179e4:	687a      	ldr	r2, [r7, #4]
 80179e6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80179e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80179ec:	2100      	movs	r1, #0
 80179ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80179f0:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 80179f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80179f4:	3301      	adds	r3, #1
 80179f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80179fc:	461a      	mov	r2, r3
 80179fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017a00:	4293      	cmp	r3, r2
 8017a02:	d3d8      	bcc.n	80179b6 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8017a04:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8017a08:	623b      	str	r3, [r7, #32]
    vTaskSetTimeOutState( &xTimer );
 8017a0a:	f107 0318 	add.w	r3, r7, #24
 8017a0e:	4618      	mov	r0, r3
 8017a10:	f7ed faf2 	bl	8004ff8 <vTaskSetTimeOutState>
    ulDoneMask = 0;
 8017a14:	2300      	movs	r3, #0
 8017a16:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 8017a18:	2301      	movs	r3, #1
 8017a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8017a20:	e025      	b.n	8017a6e <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 8017a22:	683a      	ldr	r2, [r7, #0]
 8017a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a26:	4013      	ands	r3, r2
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d01a      	beq.n	8017a62 <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 8017a2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a30:	4013      	ands	r3, r2
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d115      	bne.n	8017a62 <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017a36:	687a      	ldr	r2, [r7, #4]
 8017a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017a3a:	4413      	add	r3, r2
 8017a3c:	3318      	adds	r3, #24
 8017a3e:	781b      	ldrb	r3, [r3, #0]
 8017a40:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8017a4a:	2101      	movs	r1, #1
 8017a4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017a4e:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 8017a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a52:	f003 0320 	and.w	r3, r3, #32
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d003      	beq.n	8017a62 <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 8017a5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a5e:	4313      	orrs	r3, r2
 8017a60:	643b      	str	r3, [r7, #64]	@ 0x40
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017a62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017a64:	3301      	adds	r3, #1
 8017a66:	647b      	str	r3, [r7, #68]	@ 0x44
 8017a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a6a:	005b      	lsls	r3, r3, #1
 8017a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a72:	461a      	mov	r2, r3
 8017a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017a76:	4293      	cmp	r3, r2
 8017a78:	d3d3      	bcc.n	8017a22 <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 8017a7a:	683a      	ldr	r2, [r7, #0]
 8017a7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017a7e:	429a      	cmp	r2, r3
 8017a80:	d013      	beq.n	8017aaa <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8017a82:	f107 0220 	add.w	r2, r7, #32
 8017a86:	f107 0318 	add.w	r3, r7, #24
 8017a8a:	4611      	mov	r1, r2
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f7ed faeb 	bl	8005068 <xTaskCheckForTimeOut>
 8017a92:	4603      	mov	r3, r0
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d004      	beq.n	8017aa2 <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMSR_AN_COMPLETE timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8017a98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017a9a:	488e      	ldr	r0, [pc, #568]	@ (8017cd4 <xPhyStartAutoNegotiation+0x338>)
 8017a9c:	f00a fb54 	bl	8022148 <lUDPLoggingPrintf>
            break;
 8017aa0:	e004      	b.n	8017aac <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017aa2:	2032      	movs	r0, #50	@ 0x32
 8017aa4:	f7ec fd34 	bl	8004510 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 8017aa8:	e7b6      	b.n	8017a18 <xPhyStartAutoNegotiation+0x7c>
            break;
 8017aaa:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 8017aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	f000 810b 	beq.w	8017cca <xPhyStartAutoNegotiation+0x32e>
    {
        ulBitMask = ( uint32_t ) 1U;
 8017ab4:	2301      	movs	r3, #1
 8017ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017abc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017abe:	43db      	mvns	r3, r3
 8017ac0:	401a      	ands	r2, r3
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8017aca:	e0f7      	b.n	8017cbc <xPhyStartAutoNegotiation+0x320>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017acc:	687a      	ldr	r2, [r7, #4]
 8017ace:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017ad0:	4413      	add	r3, r2
 8017ad2:	3318      	adds	r3, #24
 8017ad4:	781b      	ldrb	r3, [r3, #0]
 8017ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017adc:	3202      	adds	r2, #2
 8017ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ae2:	637b      	str	r3, [r7, #52]	@ 0x34

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8017ae4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017ae8:	4013      	ands	r3, r2
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	f000 80df 	beq.w	8017cae <xPhyStartAutoNegotiation+0x312>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	685b      	ldr	r3, [r3, #4]
 8017af4:	687a      	ldr	r2, [r7, #4]
 8017af6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8017af8:	2100      	movs	r1, #0
 8017afa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017afc:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8017b06:	2101      	movs	r1, #1
 8017b08:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017b0a:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0U )
 8017b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b0e:	f003 0304 	and.w	r3, r3, #4
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d005      	beq.n	8017b22 <xPhyStartAutoNegotiation+0x186>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b1c:	431a      	orrs	r2, r3
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8017b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b24:	4a6c      	ldr	r2, [pc, #432]	@ (8017cd8 <xPhyStartAutoNegotiation+0x33c>)
 8017b26:	4293      	cmp	r3, r2
 8017b28:	d130      	bne.n	8017b8c <xPhyStartAutoNegotiation+0x1f0>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	f107 0214 	add.w	r2, r7, #20
 8017b32:	211e      	movs	r1, #30
 8017b34:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017b36:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 8017b38:	697b      	ldr	r3, [r7, #20]
 8017b3a:	f003 0307 	and.w	r3, r3, #7
 8017b3e:	3b01      	subs	r3, #1
 8017b40:	2b05      	cmp	r3, #5
 8017b42:	d814      	bhi.n	8017b6e <xPhyStartAutoNegotiation+0x1d2>
 8017b44:	a201      	add	r2, pc, #4	@ (adr r2, 8017b4c <xPhyStartAutoNegotiation+0x1b0>)
 8017b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b4a:	bf00      	nop
 8017b4c:	08017b65 	.word	0x08017b65
 8017b50:	08017b6f 	.word	0x08017b6f
 8017b54:	08017b6f 	.word	0x08017b6f
 8017b58:	08017b6f 	.word	0x08017b6f
 8017b5c:	08017b65 	.word	0x08017b65
 8017b60:	08017b6f 	.word	0x08017b6f
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8017b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b66:	f043 0302 	orr.w	r3, r3, #2
 8017b6a:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8017b6c:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 8017b6e:	697b      	ldr	r3, [r7, #20]
 8017b70:	f003 0307 	and.w	r3, r3, #7
 8017b74:	2b02      	cmp	r3, #2
 8017b76:	d801      	bhi.n	8017b7c <xPhyStartAutoNegotiation+0x1e0>
 8017b78:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 8017b7a:	e05b      	b.n	8017c34 <xPhyStartAutoNegotiation+0x298>
 8017b7c:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 8017b7e:	2b01      	cmp	r3, #1
 8017b80:	d858      	bhi.n	8017c34 <xPhyStartAutoNegotiation+0x298>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8017b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b84:	f043 0304 	orr.w	r3, r3, #4
 8017b88:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8017b8a:	e053      	b.n	8017c34 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( ulPhyID == PHY_ID_KSZ8795 )
 8017b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b8e:	4a53      	ldr	r2, [pc, #332]	@ (8017cdc <xPhyStartAutoNegotiation+0x340>)
 8017b90:	4293      	cmp	r3, r2
 8017b92:	d126      	bne.n	8017be2 <xPhyStartAutoNegotiation+0x246>
                 *     010 = 10BASE-T half-duplex
                 *     101 = 10BASE-T full-duplex
                 *     011 = 100BASE-TX half-duplex
                 *     110 = 100BASE-TX full-duplex
                 */
                uint32_t ulControlStatus = 0u;
 8017b94:	2300      	movs	r3, #0
 8017b96:	613b      	str	r3, [r7, #16]
                uint32_t ulPortOperationMode = 0u;
 8017b98:	2300      	movs	r3, #0
 8017b9a:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	f107 0210 	add.w	r2, r7, #16
 8017ba4:	211f      	movs	r1, #31
 8017ba6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017ba8:	4798      	blx	r3
                ulPortOperationMode = ( ulControlStatus >> 8u ) & 0x07u;
 8017baa:	693b      	ldr	r3, [r7, #16]
 8017bac:	0a1b      	lsrs	r3, r3, #8
 8017bae:	f003 0307 	and.w	r3, r3, #7
 8017bb2:	633b      	str	r3, [r7, #48]	@ 0x30

                ulRegValue = 0;
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Detect 10baseT operation */
                if( ( 0x02u == ulPortOperationMode ) || ( 0x05u == ulPortOperationMode ) )
 8017bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bba:	2b02      	cmp	r3, #2
 8017bbc:	d002      	beq.n	8017bc4 <xPhyStartAutoNegotiation+0x228>
 8017bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bc0:	2b05      	cmp	r3, #5
 8017bc2:	d103      	bne.n	8017bcc <xPhyStartAutoNegotiation+0x230>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8017bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bc6:	f043 0302 	orr.w	r3, r3, #2
 8017bca:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Detect full duplex operation */
                if( ( 0x05u == ulPortOperationMode ) || ( 0x06u == ulPortOperationMode ) )
 8017bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bce:	2b05      	cmp	r3, #5
 8017bd0:	d002      	beq.n	8017bd8 <xPhyStartAutoNegotiation+0x23c>
 8017bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bd4:	2b06      	cmp	r3, #6
 8017bd6:	d12d      	bne.n	8017c34 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8017bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bda:	f043 0304 	orr.w	r3, r3, #4
 8017bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8017be0:	e028      	b.n	8017c34 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 8017be2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8017be4:	f7ff fc66 	bl	80174b4 <xHas_1F_PHYSPCS>
 8017be8:	4603      	mov	r3, r0
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d01b      	beq.n	8017c26 <xPhyStartAutoNegotiation+0x28a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	f107 020c 	add.w	r2, r7, #12
 8017bf6:	211f      	movs	r1, #31
 8017bf8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017bfa:	4798      	blx	r3
                ulRegValue = 0;
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	627b      	str	r3, [r7, #36]	@ 0x24

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	f003 0310 	and.w	r3, r3, #16
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d003      	beq.n	8017c12 <xPhyStartAutoNegotiation+0x276>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8017c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c0c:	f043 0304 	orr.w	r3, r3, #4
 8017c10:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	f003 030c 	and.w	r3, r3, #12
 8017c18:	2b04      	cmp	r3, #4
 8017c1a:	d10b      	bne.n	8017c34 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8017c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c1e:	f043 0302 	orr.w	r3, r3, #2
 8017c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8017c24:	e006      	b.n	8017c34 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8017c2e:	2110      	movs	r1, #16
 8017c30:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017c32:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08x: %s duplex %u mbit %s status\n",
 8017c34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c38:	f003 0304 	and.w	r3, r3, #4
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d001      	beq.n	8017c44 <xPhyStartAutoNegotiation+0x2a8>
 8017c40:	4827      	ldr	r0, [pc, #156]	@ (8017ce0 <xPhyStartAutoNegotiation+0x344>)
 8017c42:	e000      	b.n	8017c46 <xPhyStartAutoNegotiation+0x2aa>
 8017c44:	4827      	ldr	r0, [pc, #156]	@ (8017ce4 <xPhyStartAutoNegotiation+0x348>)
 8017c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c48:	f003 0302 	and.w	r3, r3, #2
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d001      	beq.n	8017c54 <xPhyStartAutoNegotiation+0x2b8>
 8017c50:	240a      	movs	r4, #10
 8017c52:	e000      	b.n	8017c56 <xPhyStartAutoNegotiation+0x2ba>
 8017c54:	2464      	movs	r4, #100	@ 0x64
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017c5c:	4013      	ands	r3, r2
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d001      	beq.n	8017c66 <xPhyStartAutoNegotiation+0x2ca>
 8017c62:	4b21      	ldr	r3, [pc, #132]	@ (8017ce8 <xPhyStartAutoNegotiation+0x34c>)
 8017c64:	e000      	b.n	8017c68 <xPhyStartAutoNegotiation+0x2cc>
 8017c66:	4b21      	ldr	r3, [pc, #132]	@ (8017cec <xPhyStartAutoNegotiation+0x350>)
 8017c68:	9300      	str	r3, [sp, #0]
 8017c6a:	4623      	mov	r3, r4
 8017c6c:	4602      	mov	r2, r0
 8017c6e:	4820      	ldr	r0, [pc, #128]	@ (8017cf0 <xPhyStartAutoNegotiation+0x354>)
 8017c70:	f00a fa6a 	bl	8022148 <lUDPLoggingPrintf>
                               ( unsigned int ) ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) != 0U ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 8017c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c76:	f003 0304 	and.w	r3, r3, #4
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d004      	beq.n	8017c88 <xPhyStartAutoNegotiation+0x2ec>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	2202      	movs	r2, #2
 8017c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8017c86:	e003      	b.n	8017c90 <xPhyStartAutoNegotiation+0x2f4>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	2201      	movs	r2, #1
 8017c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 8017c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c92:	f003 0302 	and.w	r3, r3, #2
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d004      	beq.n	8017ca4 <xPhyStartAutoNegotiation+0x308>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	2201      	movs	r2, #1
 8017c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8017ca2:	e005      	b.n	8017cb0 <xPhyStartAutoNegotiation+0x314>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	2202      	movs	r2, #2
 8017ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8017cac:	e000      	b.n	8017cb0 <xPhyStartAutoNegotiation+0x314>
                continue;
 8017cae:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cb2:	3301      	adds	r3, #1
 8017cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8017cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017cb8:	005b      	lsls	r3, r3, #1
 8017cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017cc0:	461a      	mov	r2, r3
 8017cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cc4:	4293      	cmp	r3, r2
 8017cc6:	f4ff af01 	bcc.w	8017acc <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 8017cca:	2300      	movs	r3, #0
}
 8017ccc:	4618      	mov	r0, r3
 8017cce:	374c      	adds	r7, #76	@ 0x4c
 8017cd0:	46bd      	mov	sp, r7
 8017cd2:	bd90      	pop	{r4, r7, pc}
 8017cd4:	080274a0 	.word	0x080274a0
 8017cd8:	00221560 	.word	0x00221560
 8017cdc:	00221550 	.word	0x00221550
 8017ce0:	080274ec 	.word	0x080274ec
 8017ce4:	080274f4 	.word	0x080274f4
 8017ce8:	080274fc 	.word	0x080274fc
 8017cec:	08027504 	.word	0x08027504
 8017cf0:	08027508 	.word	0x08027508

08017cf4 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b088      	sub	sp, #32
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	6078      	str	r0, [r7, #4]
 8017cfc:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 8017cfe:	2301      	movs	r3, #1
 8017d00:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 8017d02:	2300      	movs	r3, #0
 8017d04:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 8017d06:	683b      	ldr	r3, [r7, #0]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	dd2b      	ble.n	8017d64 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	331c      	adds	r3, #28
 8017d10:	4618      	mov	r0, r3
 8017d12:	f7ed f971 	bl	8004ff8 <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8017d1c:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017d1e:	2300      	movs	r3, #0
 8017d20:	61bb      	str	r3, [r7, #24]
 8017d22:	e019      	b.n	8017d58 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017d28:	69fb      	ldr	r3, [r7, #28]
 8017d2a:	4013      	ands	r3, r2
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d10d      	bne.n	8017d4c <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017d34:	69fb      	ldr	r3, [r7, #28]
 8017d36:	431a      	orrs	r2, r3
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017d40:	4619      	mov	r1, r3
 8017d42:	4842      	ldr	r0, [pc, #264]	@ (8017e4c <xPhyCheckLinkStatus+0x158>)
 8017d44:	f00a fa00 	bl	8022148 <lUDPLoggingPrintf>
                xNeedCheck = pdTRUE;
 8017d48:	2301      	movs	r3, #1
 8017d4a:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017d4c:	69bb      	ldr	r3, [r7, #24]
 8017d4e:	3301      	adds	r3, #1
 8017d50:	61bb      	str	r3, [r7, #24]
 8017d52:	69fb      	ldr	r3, [r7, #28]
 8017d54:	005b      	lsls	r3, r3, #1
 8017d56:	61fb      	str	r3, [r7, #28]
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d5c:	69ba      	ldr	r2, [r7, #24]
 8017d5e:	429a      	cmp	r2, r3
 8017d60:	dbe0      	blt.n	8017d24 <xPhyCheckLinkStatus+0x30>
 8017d62:	e06e      	b.n	8017e42 <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	f103 021c 	add.w	r2, r3, #28
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	3324      	adds	r3, #36	@ 0x24
 8017d6e:	4619      	mov	r1, r3
 8017d70:	4610      	mov	r0, r2
 8017d72:	f7ed f979 	bl	8005068 <xTaskCheckForTimeOut>
 8017d76:	4603      	mov	r3, r0
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d062      	beq.n	8017e42 <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	61bb      	str	r3, [r7, #24]
 8017d80:	e045      	b.n	8017e0e <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017d82:	687a      	ldr	r2, [r7, #4]
 8017d84:	69bb      	ldr	r3, [r7, #24]
 8017d86:	4413      	add	r3, r2
 8017d88:	3318      	adds	r3, #24
 8017d8a:	781b      	ldrb	r3, [r3, #0]
 8017d8c:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	f107 020c 	add.w	r2, r7, #12
 8017d96:	2101      	movs	r1, #1
 8017d98:	6938      	ldr	r0, [r7, #16]
 8017d9a:	4798      	blx	r3
 8017d9c:	4603      	mov	r3, r0
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d12f      	bne.n	8017e02 <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017da6:	69fb      	ldr	r3, [r7, #28]
 8017da8:	4013      	ands	r3, r2
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	bf14      	ite	ne
 8017dae:	2301      	movne	r3, #1
 8017db0:	2300      	moveq	r3, #0
 8017db2:	b2da      	uxtb	r2, r3
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	f003 0304 	and.w	r3, r3, #4
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	bf14      	ite	ne
 8017dbe:	2301      	movne	r3, #1
 8017dc0:	2300      	moveq	r3, #0
 8017dc2:	b2db      	uxtb	r3, r3
 8017dc4:	4053      	eors	r3, r2
 8017dc6:	b2db      	uxtb	r3, r3
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d01a      	beq.n	8017e02 <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	f003 0304 	and.w	r3, r3, #4
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d006      	beq.n	8017de4 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017dda:	69fb      	ldr	r3, [r7, #28]
 8017ddc:	431a      	orrs	r2, r3
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	635a      	str	r2, [r3, #52]	@ 0x34
 8017de2:	e006      	b.n	8017df2 <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017de8:	69fb      	ldr	r3, [r7, #28]
 8017dea:	43db      	mvns	r3, r3
 8017dec:	401a      	ands	r2, r3
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017df6:	4619      	mov	r1, r3
 8017df8:	4814      	ldr	r0, [pc, #80]	@ (8017e4c <xPhyCheckLinkStatus+0x158>)
 8017dfa:	f00a f9a5 	bl	8022148 <lUDPLoggingPrintf>
                    xNeedCheck = pdTRUE;
 8017dfe:	2301      	movs	r3, #1
 8017e00:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017e02:	69bb      	ldr	r3, [r7, #24]
 8017e04:	3301      	adds	r3, #1
 8017e06:	61bb      	str	r3, [r7, #24]
 8017e08:	69fb      	ldr	r3, [r7, #28]
 8017e0a:	005b      	lsls	r3, r3, #1
 8017e0c:	61fb      	str	r3, [r7, #28]
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e12:	69ba      	ldr	r2, [r7, #24]
 8017e14:	429a      	cmp	r2, r3
 8017e16:	dbb4      	blt.n	8017d82 <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	331c      	adds	r3, #28
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	f7ed f8eb 	bl	8004ff8 <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017e26:	69fb      	ldr	r3, [r7, #28]
 8017e28:	085b      	lsrs	r3, r3, #1
 8017e2a:	4013      	ands	r3, r2
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d004      	beq.n	8017e3a <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8017e36:	625a      	str	r2, [r3, #36]	@ 0x24
 8017e38:	e003      	b.n	8017e42 <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017e40:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 8017e42:	697b      	ldr	r3, [r7, #20]
}
 8017e44:	4618      	mov	r0, r3
 8017e46:	3720      	adds	r7, #32
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	bd80      	pop	{r7, pc}
 8017e4c:	0802753c 	.word	0x0802753c

08017e50 <prvRevBits32>:
};
/*-----------------------------------------------------------*/

/* Reverse the bits of a 32 bit unsigned integer */
static uint32_t prvRevBits32( uint32_t ulValue )
{
 8017e50:	b480      	push	{r7}
 8017e52:	b085      	sub	sp, #20
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	6078      	str	r0, [r7, #4]
    uint32_t ulRev32;
    int iIndex;

    ulRev32 = 0;
 8017e58:	2300      	movs	r3, #0
 8017e5a:	60fb      	str	r3, [r7, #12]

    for( iIndex = 0; iIndex < 32; iIndex++ )
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	60bb      	str	r3, [r7, #8]
 8017e60:	e013      	b.n	8017e8a <prvRevBits32+0x3a>
    {
        if( ulValue & ( 1 << iIndex ) )
 8017e62:	2201      	movs	r2, #1
 8017e64:	68bb      	ldr	r3, [r7, #8]
 8017e66:	fa02 f303 	lsl.w	r3, r2, r3
 8017e6a:	461a      	mov	r2, r3
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	4013      	ands	r3, r2
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d007      	beq.n	8017e84 <prvRevBits32+0x34>
        {
            {
                ulRev32 |= 1 << ( 31 - iIndex );
 8017e74:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8017e78:	68bb      	ldr	r3, [r7, #8]
 8017e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8017e7e:	68fa      	ldr	r2, [r7, #12]
 8017e80:	4313      	orrs	r3, r2
 8017e82:	60fb      	str	r3, [r7, #12]
    for( iIndex = 0; iIndex < 32; iIndex++ )
 8017e84:	68bb      	ldr	r3, [r7, #8]
 8017e86:	3301      	adds	r3, #1
 8017e88:	60bb      	str	r3, [r7, #8]
 8017e8a:	68bb      	ldr	r3, [r7, #8]
 8017e8c:	2b1f      	cmp	r3, #31
 8017e8e:	dde8      	ble.n	8017e62 <prvRevBits32+0x12>
            }
        }
    }

    return ulRev32;
 8017e90:	68fb      	ldr	r3, [r7, #12]
}
 8017e92:	4618      	mov	r0, r3
 8017e94:	3714      	adds	r7, #20
 8017e96:	46bd      	mov	sp, r7
 8017e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e9c:	4770      	bx	lr
	...

08017ea0 <prvComputeCRC32_MAC>:

/* Compute the CRC32 of the given MAC address as per IEEE 802.3 CRC32 */
static uint32_t prvComputeCRC32_MAC( const uint8_t * pucMAC )
{
 8017ea0:	b590      	push	{r4, r7, lr}
 8017ea2:	b087      	sub	sp, #28
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	6078      	str	r0, [r7, #4]
    int iiIndex, ijIndex;
    uint32_t ulCRC32 = 0xFFFFFFFF;
 8017ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8017eac:	60fb      	str	r3, [r7, #12]

    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 8017eae:	2300      	movs	r3, #0
 8017eb0:	613b      	str	r3, [r7, #16]
 8017eb2:	e024      	b.n	8017efe <prvComputeCRC32_MAC+0x5e>
    {
        ulCRC32 = ulCRC32 ^ ( uint32_t ) pucMAC[ ijIndex ];
 8017eb4:	693b      	ldr	r3, [r7, #16]
 8017eb6:	687a      	ldr	r2, [r7, #4]
 8017eb8:	4413      	add	r3, r2
 8017eba:	781b      	ldrb	r3, [r3, #0]
 8017ebc:	461a      	mov	r2, r3
 8017ebe:	68fb      	ldr	r3, [r7, #12]
 8017ec0:	4053      	eors	r3, r2
 8017ec2:	60fb      	str	r3, [r7, #12]

        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	617b      	str	r3, [r7, #20]
 8017ec8:	e013      	b.n	8017ef2 <prvComputeCRC32_MAC+0x52>
        {
            if( ulCRC32 & 1 )
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	f003 0301 	and.w	r3, r3, #1
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d008      	beq.n	8017ee6 <prvComputeCRC32_MAC+0x46>
            {
                ulCRC32 = ( ulCRC32 >> 1 ) ^ prvRevBits32( 0x04C11DB7 ); /* IEEE 802.3 CRC32 polynomial - 0x04C11DB7 */
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	085c      	lsrs	r4, r3, #1
 8017ed8:	480e      	ldr	r0, [pc, #56]	@ (8017f14 <prvComputeCRC32_MAC+0x74>)
 8017eda:	f7ff ffb9 	bl	8017e50 <prvRevBits32>
 8017ede:	4603      	mov	r3, r0
 8017ee0:	4063      	eors	r3, r4
 8017ee2:	60fb      	str	r3, [r7, #12]
 8017ee4:	e002      	b.n	8017eec <prvComputeCRC32_MAC+0x4c>
            }
            else
            {
                ulCRC32 = ( ulCRC32 >> 1 );
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	085b      	lsrs	r3, r3, #1
 8017eea:	60fb      	str	r3, [r7, #12]
        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 8017eec:	697b      	ldr	r3, [r7, #20]
 8017eee:	3301      	adds	r3, #1
 8017ef0:	617b      	str	r3, [r7, #20]
 8017ef2:	697b      	ldr	r3, [r7, #20]
 8017ef4:	2b07      	cmp	r3, #7
 8017ef6:	dde8      	ble.n	8017eca <prvComputeCRC32_MAC+0x2a>
    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 8017ef8:	693b      	ldr	r3, [r7, #16]
 8017efa:	3301      	adds	r3, #1
 8017efc:	613b      	str	r3, [r7, #16]
 8017efe:	693b      	ldr	r3, [r7, #16]
 8017f00:	2b05      	cmp	r3, #5
 8017f02:	ddd7      	ble.n	8017eb4 <prvComputeCRC32_MAC+0x14>
            }
        }
    }

    ulCRC32 = ~( ulCRC32 );
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	43db      	mvns	r3, r3
 8017f08:	60fb      	str	r3, [r7, #12]
    return ulCRC32;
 8017f0a:	68fb      	ldr	r3, [r7, #12]
}
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	371c      	adds	r7, #28
 8017f10:	46bd      	mov	sp, r7
 8017f12:	bd90      	pop	{r4, r7, pc}
 8017f14:	04c11db7 	.word	0x04c11db7

08017f18 <prvComputeEthernet_MACHash>:

/* Compute the hash value of a given MAC address to index the bits in the Hash Table
 * Registers (ETH_MACHT0R and ETH_MACHT1R) */
static uint32_t prvComputeEthernet_MACHash( const uint8_t * pucMAC )
{
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	b084      	sub	sp, #16
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	6078      	str	r0, [r7, #4]
    uint32_t ulCRC32;
    uint32_t ulHash;

    /*  Calculate the 32-bit CRC for the MAC */
    ulCRC32 = prvComputeCRC32_MAC( pucMAC );
 8017f20:	6878      	ldr	r0, [r7, #4]
 8017f22:	f7ff ffbd 	bl	8017ea0 <prvComputeCRC32_MAC>
 8017f26:	60f8      	str	r0, [r7, #12]

    /* Perform bitwise reversal on the CRC32 */
    ulHash = prvRevBits32( ulCRC32 );
 8017f28:	68f8      	ldr	r0, [r7, #12]
 8017f2a:	f7ff ff91 	bl	8017e50 <prvRevBits32>
 8017f2e:	60b8      	str	r0, [r7, #8]

    /* Take the upper 6 bits of the above result */
    return( ulHash >> 26 );
 8017f30:	68bb      	ldr	r3, [r7, #8]
 8017f32:	0e9b      	lsrs	r3, r3, #26
}
 8017f34:	4618      	mov	r0, r3
 8017f36:	3710      	adds	r7, #16
 8017f38:	46bd      	mov	sp, r7
 8017f3a:	bd80      	pop	{r7, pc}

08017f3c <prvSetMAC_HashFilter>:

/* Update the Hash Table Registers
 * (ETH_MACHT0R and ETH_MACHT1R) with hash value of the given MAC address */
static void prvSetMAC_HashFilter( ETH_HandleTypeDef * pxEthHandle,
                                  const uint8_t * pucMAC )
{
 8017f3c:	b580      	push	{r7, lr}
 8017f3e:	b084      	sub	sp, #16
 8017f40:	af00      	add	r7, sp, #0
 8017f42:	6078      	str	r0, [r7, #4]
 8017f44:	6039      	str	r1, [r7, #0]
    uint32_t ulHash;

    /* Compute the hash */
    ulHash = prvComputeEthernet_MACHash( pucMAC );
 8017f46:	6838      	ldr	r0, [r7, #0]
 8017f48:	f7ff ffe6 	bl	8017f18 <prvComputeEthernet_MACHash>
 8017f4c:	60f8      	str	r0, [r7, #12]

    /* Use the upper (MACHT1R) or lower (MACHT0R) Hash Table Registers
     * to set the required bit based on the ulHash */
    if( ulHash < 32 )
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	2b1f      	cmp	r3, #31
 8017f52:	d80c      	bhi.n	8017f6e <prvSetMAC_HashFilter+0x32>
    {
        pxEthHandle->Instance->MACHT0R |= ( 1 << ulHash );
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	691a      	ldr	r2, [r3, #16]
 8017f5a:	2101      	movs	r1, #1
 8017f5c:	68fb      	ldr	r3, [r7, #12]
 8017f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8017f62:	4619      	mov	r1, r3
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	430a      	orrs	r2, r1
 8017f6a:	611a      	str	r2, [r3, #16]
    }
    else
    {
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
    }
}
 8017f6c:	e00d      	b.n	8017f8a <prvSetMAC_HashFilter+0x4e>
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	695a      	ldr	r2, [r3, #20]
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	f003 031f 	and.w	r3, r3, #31
 8017f7a:	2101      	movs	r1, #1
 8017f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8017f80:	4619      	mov	r1, r3
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	430a      	orrs	r2, r1
 8017f88:	615a      	str	r2, [r3, #20]
}
 8017f8a:	bf00      	nop
 8017f8c:	3710      	adds	r7, #16
 8017f8e:	46bd      	mov	sp, r7
 8017f90:	bd80      	pop	{r7, pc}

08017f92 <pucGetRXBuffer>:
/*******************************************************************************
*                      Network Interface API Functions
*******************************************************************************/

static uint8_t * pucGetRXBuffer( size_t uxSize )
{
 8017f92:	b580      	push	{r7, lr}
 8017f94:	b086      	sub	sp, #24
 8017f96:	af00      	add	r7, sp, #0
 8017f98:	6078      	str	r0, [r7, #4]
    TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 10U );
 8017f9a:	230a      	movs	r3, #10
 8017f9c:	613b      	str	r3, [r7, #16]
    NetworkBufferDescriptor_t * pxBufferDescriptor;
    uint8_t * pucReturn = NULL;
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	617b      	str	r3, [r7, #20]

    pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxSize, uxBlockTimeTicks );
 8017fa2:	6939      	ldr	r1, [r7, #16]
 8017fa4:	6878      	ldr	r0, [r7, #4]
 8017fa6:	f7ff f9bf 	bl	8017328 <pxGetNetworkBufferWithDescriptor>
 8017faa:	60f8      	str	r0, [r7, #12]

    if( pxBufferDescriptor != NULL )
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d002      	beq.n	8017fb8 <pucGetRXBuffer+0x26>
    {
        pucReturn = pxBufferDescriptor->pucEthernetBuffer;
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fb6:	617b      	str	r3, [r7, #20]
    }

    return pucReturn;
 8017fb8:	697b      	ldr	r3, [r7, #20]
}
 8017fba:	4618      	mov	r0, r3
 8017fbc:	3718      	adds	r7, #24
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd80      	pop	{r7, pc}
	...

08017fc4 <xSTM32H_NetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceInitialise( NetworkInterface_t * pxInterface )
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b08e      	sub	sp, #56	@ 0x38
 8017fc8:	af02      	add	r7, sp, #8
 8017fca:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8017fcc:	2300      	movs	r3, #0
 8017fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NetworkEndPoint_t * pxEndPoint;
    HAL_StatusTypeDef xHalEthInitStatus;
    size_t uxIndex = 0;
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	627b      	str	r3, [r7, #36]	@ 0x24

    if( xMacInitStatus == eMACInit )
 8017fd4:	4b8d      	ldr	r3, [pc, #564]	@ (801820c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017fd6:	781b      	ldrb	r3, [r3, #0]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	f040 8104 	bne.w	80181e6 <xSTM32H_NetworkInterfaceInitialise+0x222>
    {
        pxMyInterface = pxInterface;
 8017fde:	4a8c      	ldr	r2, [pc, #560]	@ (8018210 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	6013      	str	r3, [r2, #0]

        pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8017fe4:	6878      	ldr	r0, [r7, #4]
 8017fe6:	f7f5 fb8f 	bl	800d708 <FreeRTOS_FirstEndPoint>
 8017fea:	62b8      	str	r0, [r7, #40]	@ 0x28
        configASSERT( pxEndPoint != NULL );
 8017fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d104      	bne.n	8017ffc <xSTM32H_NetworkInterfaceInitialise+0x38>
 8017ff2:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8017ff6:	4887      	ldr	r0, [pc, #540]	@ (8018214 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017ff8:	f7e9 fcae 	bl	8001958 <vAssertCalled>
        /*
         * Initialize ETH Handler
         * It assumes that Ethernet GPIO and clock configuration
         * are already done in the ETH_MspInit()
         */
        xEthHandle.Instance = ETH;
 8017ffc:	4b86      	ldr	r3, [pc, #536]	@ (8018218 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017ffe:	4a87      	ldr	r2, [pc, #540]	@ (801821c <xSTM32H_NetworkInterfaceInitialise+0x258>)
 8018000:	601a      	str	r2, [r3, #0]
        xEthHandle.Init.MACAddr = ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes;
 8018002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018004:	33e8      	adds	r3, #232	@ 0xe8
 8018006:	4a84      	ldr	r2, [pc, #528]	@ (8018218 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018008:	6053      	str	r3, [r2, #4]
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 801800a:	4b83      	ldr	r3, [pc, #524]	@ (8018218 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801800c:	2201      	movs	r2, #1
 801800e:	721a      	strb	r2, [r3, #8]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 8018010:	4b81      	ldr	r3, [pc, #516]	@ (8018218 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018012:	4a83      	ldr	r2, [pc, #524]	@ (8018220 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8018014:	60da      	str	r2, [r3, #12]
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 8018016:	4b80      	ldr	r3, [pc, #512]	@ (8018218 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018018:	4a82      	ldr	r2, [pc, #520]	@ (8018224 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 801801a:	611a      	str	r2, [r3, #16]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 801801c:	4b7e      	ldr	r3, [pc, #504]	@ (8018218 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801801e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8018022:	615a      	str	r2, [r3, #20]

        /* Make sure that all unused fields are cleared. */
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8018024:	2260      	movs	r2, #96	@ 0x60
 8018026:	2100      	movs	r1, #0
 8018028:	487d      	ldr	r0, [pc, #500]	@ (8018220 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 801802a:	f00a fbb6 	bl	802279a <memset>
        memset( &( DMARxDscrTab ), '\0', sizeof( DMARxDscrTab ) );
 801802e:	2260      	movs	r2, #96	@ 0x60
 8018030:	2100      	movs	r1, #0
 8018032:	487c      	ldr	r0, [pc, #496]	@ (8018224 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8018034:	f00a fbb1 	bl	802279a <memset>

        xHalEthInitStatus = HAL_ETH_Init( &( xEthHandle ) );
 8018038:	4877      	ldr	r0, [pc, #476]	@ (8018218 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801803a:	f000 fc71 	bl	8018920 <HAL_ETH_Init>
 801803e:	4603      	mov	r3, r0
 8018040:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        if( xHalEthInitStatus == HAL_OK )
 8018044:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018048:	2b00      	cmp	r3, #0
 801804a:	f040 80c9 	bne.w	80181e0 <xSTM32H_NetworkInterfaceInitialise+0x21c>
        {
            /* Update MAC filter settings */
            xEthHandle.Instance->MACPFR |= ENABLE_HASH_FILTER_SETTINGS;
 801804e:	4b72      	ldr	r3, [pc, #456]	@ (8018218 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	6899      	ldr	r1, [r3, #8]
 8018054:	4b70      	ldr	r3, [pc, #448]	@ (8018218 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018056:	681a      	ldr	r2, [r3, #0]
 8018058:	f240 4316 	movw	r3, #1046	@ 0x416
 801805c:	430b      	orrs	r3, r1
 801805e:	6093      	str	r3, [r2, #8]

            /* Configuration for HAL_ETH_Transmit(_IT). */
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 8018060:	2234      	movs	r2, #52	@ 0x34
 8018062:	2100      	movs	r1, #0
 8018064:	4870      	ldr	r0, [pc, #448]	@ (8018228 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8018066:	f00a fb98 	bl	802279a <memset>
            xTxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD;
 801806a:	4b6f      	ldr	r3, [pc, #444]	@ (8018228 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 801806c:	2220      	movs	r2, #32
 801806e:	601a      	str	r2, [r3, #0]

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
            {
                /*xTxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC; */
                xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 8018070:	4b6d      	ldr	r3, [pc, #436]	@ (8018228 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	f043 0301 	orr.w	r3, r3, #1
 8018078:	4a6b      	ldr	r2, [pc, #428]	@ (8018228 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 801807a:	6013      	str	r3, [r2, #0]
                xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 801807c:	4b6a      	ldr	r3, [pc, #424]	@ (8018228 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 801807e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8018082:	615a      	str	r2, [r3, #20]
            #else
            {
                xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
            }
            #endif
            xTxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8018084:	4b68      	ldr	r3, [pc, #416]	@ (8018228 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8018086:	2200      	movs	r2, #0
 8018088:	611a      	str	r2, [r3, #16]

            /* This counting semaphore will count the number of free TX DMA descriptors. */
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 801808a:	2104      	movs	r1, #4
 801808c:	2004      	movs	r0, #4
 801808e:	f7eb fbfd 	bl	800388c <xQueueCreateCountingSemaphore>
 8018092:	4603      	mov	r3, r0
 8018094:	4a65      	ldr	r2, [pc, #404]	@ (801822c <xSTM32H_NetworkInterfaceInitialise+0x268>)
 8018096:	6013      	str	r3, [r2, #0]
            configASSERT( xTXDescriptorSemaphore );
 8018098:	4b64      	ldr	r3, [pc, #400]	@ (801822c <xSTM32H_NetworkInterfaceInitialise+0x268>)
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	2b00      	cmp	r3, #0
 801809e:	d104      	bne.n	80180aa <xSTM32H_NetworkInterfaceInitialise+0xe6>
 80180a0:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80180a4:	485b      	ldr	r0, [pc, #364]	@ (8018214 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80180a6:	f7e9 fc57 	bl	8001958 <vAssertCalled>

            xTransmissionMutex = xSemaphoreCreateMutex();
 80180aa:	2001      	movs	r0, #1
 80180ac:	f7eb fbd5 	bl	800385a <xQueueCreateMutex>
 80180b0:	4603      	mov	r3, r0
 80180b2:	4a5f      	ldr	r2, [pc, #380]	@ (8018230 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 80180b4:	6013      	str	r3, [r2, #0]
            configASSERT( xTransmissionMutex );
 80180b6:	4b5e      	ldr	r3, [pc, #376]	@ (8018230 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d104      	bne.n	80180c8 <xSTM32H_NetworkInterfaceInitialise+0x104>
 80180be:	f240 117f 	movw	r1, #383	@ 0x17f
 80180c2:	4854      	ldr	r0, [pc, #336]	@ (8018214 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80180c4:	f7e9 fc48 	bl	8001958 <vAssertCalled>

            /* Assign Rx memory buffers to a DMA Rx descriptor */
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 80180c8:	2300      	movs	r3, #0
 80180ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80180cc:	e015      	b.n	80180fa <xSTM32H_NetworkInterfaceInitialise+0x136>
            {
                uint8_t * pucBuffer;

                #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
                {
                    pucBuffer = pucGetRXBuffer( ETH_RX_BUF_SIZE );
 80180ce:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 80180d2:	f7ff ff5e 	bl	8017f92 <pucGetRXBuffer>
 80180d6:	61f8      	str	r0, [r7, #28]
                    configASSERT( pucBuffer != NULL );
 80180d8:	69fb      	ldr	r3, [r7, #28]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d104      	bne.n	80180e8 <xSTM32H_NetworkInterfaceInitialise+0x124>
 80180de:	f240 1189 	movw	r1, #393	@ 0x189
 80180e2:	484c      	ldr	r0, [pc, #304]	@ (8018214 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80180e4:	f7e9 fc38 	bl	8001958 <vAssertCalled>
                {
                    pucBuffer = Rx_Buff[ uxIndex ];
                }
                #endif

                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 80180e8:	2300      	movs	r3, #0
 80180ea:	69fa      	ldr	r2, [r7, #28]
 80180ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80180ee:	484a      	ldr	r0, [pc, #296]	@ (8018218 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80180f0:	f000 fd02 	bl	8018af8 <HAL_ETH_DescAssignMemory>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 80180f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180f6:	3301      	adds	r3, #1
 80180f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80180fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180fc:	2b03      	cmp	r3, #3
 80180fe:	d9e6      	bls.n	80180ce <xSTM32H_NetworkInterfaceInitialise+0x10a>
            }
            #endif
            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* Program the LLMNR address. */
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddress.ucBytes );
 8018100:	494c      	ldr	r1, [pc, #304]	@ (8018234 <xSTM32H_NetworkInterfaceInitialise+0x270>)
 8018102:	4845      	ldr	r0, [pc, #276]	@ (8018218 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018104:	f7ff ff1a 	bl	8017f3c <prvSetMAC_HashFilter>
            }
            #endif
            #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
            {
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddressIPv6.ucBytes );
 8018108:	494b      	ldr	r1, [pc, #300]	@ (8018238 <xSTM32H_NetworkInterfaceInitialise+0x274>)
 801810a:	4843      	ldr	r0, [pc, #268]	@ (8018218 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801810c:	f7ff ff16 	bl	8017f3c <prvSetMAC_HashFilter>
            }
            #endif

            {
                /* The EMAC address of the first end-point has been registered in HAL_ETH_Init(). */
                for( ;
 8018110:	e03a      	b.n	8018188 <xSTM32H_NetworkInterfaceInitialise+0x1c4>
                     pxEndPoint != NULL;
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
                {
                    switch( pxEndPoint->bits.bIPv6 )
 8018112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018114:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8018118:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801811c:	b2db      	uxtb	r3, r3
 801811e:	2b00      	cmp	r3, #0
 8018120:	d002      	beq.n	8018128 <xSTM32H_NetworkInterfaceInitialise+0x164>
 8018122:	2b01      	cmp	r3, #1
 8018124:	d00d      	beq.n	8018142 <xSTM32H_NetworkInterfaceInitialise+0x17e>
                               break;
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default:
                            /* MISRA 16.4 Compliance */
                            break;
 8018126:	e028      	b.n	801817a <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                if( xEthHandle.Init.MACAddr != ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes )
 8018128:	4b3b      	ldr	r3, [pc, #236]	@ (8018218 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801812a:	685a      	ldr	r2, [r3, #4]
 801812c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801812e:	33e8      	adds	r3, #232	@ 0xe8
 8018130:	429a      	cmp	r2, r3
 8018132:	d021      	beq.n	8018178 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                    prvSetMAC_HashFilter( &xEthHandle, pxEndPoint->xMACAddress.ucBytes );
 8018134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018136:	33e8      	adds	r3, #232	@ 0xe8
 8018138:	4619      	mov	r1, r3
 801813a:	4837      	ldr	r0, [pc, #220]	@ (8018218 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801813c:	f7ff fefe 	bl	8017f3c <prvSetMAC_HashFilter>
                                break;
 8018140:	e01a      	b.n	8018178 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                   uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0xff, 0, 0, 0 };
 8018142:	4a3e      	ldr	r2, [pc, #248]	@ (801823c <xSTM32H_NetworkInterfaceInitialise+0x278>)
 8018144:	f107 0314 	add.w	r3, r7, #20
 8018148:	e892 0003 	ldmia.w	r2, {r0, r1}
 801814c:	6018      	str	r0, [r3, #0]
 801814e:	3304      	adds	r3, #4
 8018150:	8019      	strh	r1, [r3, #0]
                                   ucMACAddress[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 8018152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018154:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018158:	75fb      	strb	r3, [r7, #23]
                                   ucMACAddress[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 801815a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801815c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8018160:	763b      	strb	r3, [r7, #24]
                                   ucMACAddress[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 8018162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018164:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8018168:	767b      	strb	r3, [r7, #25]
                                   prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 801816a:	f107 0314 	add.w	r3, r7, #20
 801816e:	4619      	mov	r1, r3
 8018170:	4829      	ldr	r0, [pc, #164]	@ (8018218 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018172:	f7ff fee3 	bl	8017f3c <prvSetMAC_HashFilter>
                               break;
 8018176:	e000      	b.n	801817a <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                break;
 8018178:	bf00      	nop
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
 801817a:	4b25      	ldr	r3, [pc, #148]	@ (8018210 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018180:	4618      	mov	r0, r3
 8018182:	f7f5 fae3 	bl	800d74c <FreeRTOS_NextEndPoint>
 8018186:	62b8      	str	r0, [r7, #40]	@ 0x28
                     pxEndPoint != NULL;
 8018188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801818a:	2b00      	cmp	r3, #0
 801818c:	d1c1      	bne.n	8018112 <xSTM32H_NetworkInterfaceInitialise+0x14e>
            }

            #if ( ipconfigUSE_IPv6 != 0 )
            {
                /* Allow traffic destined to IPv6 all nodes multicast MAC 33:33:00:00:00:01 */
                const uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0, 0, 0, 0x01 };
 801818e:	4a2c      	ldr	r2, [pc, #176]	@ (8018240 <xSTM32H_NetworkInterfaceInitialise+0x27c>)
 8018190:	f107 030c 	add.w	r3, r7, #12
 8018194:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018198:	6018      	str	r0, [r3, #0]
 801819a:	3304      	adds	r3, #4
 801819c:	8019      	strh	r1, [r3, #0]
                prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 801819e:	f107 030c 	add.w	r3, r7, #12
 80181a2:	4619      	mov	r1, r3
 80181a4:	481c      	ldr	r0, [pc, #112]	@ (8018218 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80181a6:	f7ff fec9 	bl	8017f3c <prvSetMAC_HashFilter>
            }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Initialize the MACB and set all PHY properties */
            prvMACBProbePhy();
 80181aa:	f000 f911 	bl	80183d0 <prvMACBProbePhy>

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 80181ae:	2001      	movs	r0, #1
 80181b0:	f000 f926 	bl	8018400 <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             *  possible priority to ensure the interrupt handler can return directly
             *  to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             *  notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &( xEMACTaskHandle ) ) == pdPASS )
 80181b4:	4b23      	ldr	r3, [pc, #140]	@ (8018244 <xSTM32H_NetworkInterfaceInitialise+0x280>)
 80181b6:	9301      	str	r3, [sp, #4]
 80181b8:	2305      	movs	r3, #5
 80181ba:	9300      	str	r3, [sp, #0]
 80181bc:	2300      	movs	r3, #0
 80181be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80181c2:	4921      	ldr	r1, [pc, #132]	@ (8018248 <xSTM32H_NetworkInterfaceInitialise+0x284>)
 80181c4:	4821      	ldr	r0, [pc, #132]	@ (801824c <xSTM32H_NetworkInterfaceInitialise+0x288>)
 80181c6:	f7ec f863 	bl	8004290 <xTaskCreate>
 80181ca:	4603      	mov	r3, r0
 80181cc:	2b01      	cmp	r3, #1
 80181ce:	d103      	bne.n	80181d8 <xSTM32H_NetworkInterfaceInitialise+0x214>
            {
                /* The task was created successfully. */
                xMacInitStatus = eMACPass;
 80181d0:	4b0e      	ldr	r3, [pc, #56]	@ (801820c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80181d2:	2201      	movs	r2, #1
 80181d4:	701a      	strb	r2, [r3, #0]
 80181d6:	e006      	b.n	80181e6 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 80181d8:	4b0c      	ldr	r3, [pc, #48]	@ (801820c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80181da:	2202      	movs	r2, #2
 80181dc:	701a      	strb	r2, [r3, #0]
 80181de:	e002      	b.n	80181e6 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
        }
        else
        {
            /* HAL_ETH_Init() returned an error, the driver gets into a fatal error sate. */
            xMacInitStatus = eMACFailed;
 80181e0:	4b0a      	ldr	r3, [pc, #40]	@ (801820c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80181e2:	2202      	movs	r2, #2
 80181e4:	701a      	strb	r2, [r3, #0]
        }
    } /* ( xMacInitStatus == eMACInit ) */

    if( xMacInitStatus == eMACPass )
 80181e6:	4b09      	ldr	r3, [pc, #36]	@ (801820c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80181e8:	781b      	ldrb	r3, [r3, #0]
 80181ea:	2b01      	cmp	r3, #1
 80181ec:	d108      	bne.n	8018200 <xSTM32H_NetworkInterfaceInitialise+0x23c>
    {
        if( xPhyObject.ulLinkStatusMask != 0U )
 80181ee:	4b18      	ldr	r3, [pc, #96]	@ (8018250 <xSTM32H_NetworkInterfaceInitialise+0x28c>)
 80181f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d004      	beq.n	8018200 <xSTM32H_NetworkInterfaceInitialise+0x23c>
        {
            xResult = pdPASS;
 80181f6:	2301      	movs	r3, #1
 80181f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 80181fa:	4816      	ldr	r0, [pc, #88]	@ (8018254 <xSTM32H_NetworkInterfaceInitialise+0x290>)
 80181fc:	f009 ffa4 	bl	8022148 <lUDPLoggingPrintf>
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
        }
    }

    return xResult;
 8018200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8018202:	4618      	mov	r0, r3
 8018204:	3730      	adds	r7, #48	@ 0x30
 8018206:	46bd      	mov	sp, r7
 8018208:	bd80      	pop	{r7, pc}
 801820a:	bf00      	nop
 801820c:	200023ec 	.word	0x200023ec
 8018210:	200024a0 	.word	0x200024a0
 8018214:	08027564 	.word	0x08027564
 8018218:	200023f8 	.word	0x200023f8
 801821c:	40028000 	.word	0x40028000
 8018220:	24040060 	.word	0x24040060
 8018224:	24040000 	.word	0x24040000
 8018228:	2000246c 	.word	0x2000246c
 801822c:	200023f0 	.word	0x200023f0
 8018230:	200023f4 	.word	0x200023f4
 8018234:	080277f8 	.word	0x080277f8
 8018238:	08027800 	.word	0x08027800
 801823c:	080275dc 	.word	0x080275dc
 8018240:	080275e4 	.word	0x080275e4
 8018244:	200024a4 	.word	0x200024a4
 8018248:	080275b8 	.word	0x080275b8
 801824c:	080187b5 	.word	0x080187b5
 8018250:	200024a8 	.word	0x200024a8
 8018254:	080275c4 	.word	0x080275c4

08018258 <xSTM32H_GetPhyLinkStatus>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_GetPhyLinkStatus( NetworkInterface_t * pxInterface )
{
 8018258:	b480      	push	{r7}
 801825a:	b085      	sub	sp, #20
 801825c:	af00      	add	r7, sp, #0
 801825e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( xPhyObject.ulLinkStatusMask != 0U )
 8018260:	4b07      	ldr	r3, [pc, #28]	@ (8018280 <xSTM32H_GetPhyLinkStatus+0x28>)
 8018262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018264:	2b00      	cmp	r3, #0
 8018266:	d002      	beq.n	801826e <xSTM32H_GetPhyLinkStatus+0x16>
    {
        xReturn = pdPASS;
 8018268:	2301      	movs	r3, #1
 801826a:	60fb      	str	r3, [r7, #12]
 801826c:	e001      	b.n	8018272 <xSTM32H_GetPhyLinkStatus+0x1a>
    }
    else
    {
        xReturn = pdFAIL;
 801826e:	2300      	movs	r3, #0
 8018270:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8018272:	68fb      	ldr	r3, [r7, #12]
}
 8018274:	4618      	mov	r0, r3
 8018276:	3714      	adds	r7, #20
 8018278:	46bd      	mov	sp, r7
 801827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801827e:	4770      	bx	lr
 8018280:	200024a8 	.word	0x200024a8

08018284 <pxSTM32H_FillInterfaceDescriptor>:
#endif
/*-----------------------------------------------------------*/

NetworkInterface_t * pxSTM32H_FillInterfaceDescriptor( BaseType_t xEMACIndex,
                                                       NetworkInterface_t * pxInterface )
{
 8018284:	b580      	push	{r7, lr}
 8018286:	b082      	sub	sp, #8
 8018288:	af00      	add	r7, sp, #0
 801828a:	6078      	str	r0, [r7, #4]
 801828c:	6039      	str	r1, [r7, #0]

/* This function pxSTM32Hxx_FillInterfaceDescriptor() adds a network-interface.
 * Make sure that the object pointed to by 'pxInterface'
 * is declared static or global, and that it will remain to exist. */

    snprintf( pcName, sizeof( pcName ), "eth%u", ( unsigned ) xEMACIndex );
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	4a10      	ldr	r2, [pc, #64]	@ (80182d4 <pxSTM32H_FillInterfaceDescriptor+0x50>)
 8018292:	2111      	movs	r1, #17
 8018294:	4810      	ldr	r0, [pc, #64]	@ (80182d8 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8018296:	f00a ff83 	bl	80231a0 <snprintf>

    memset( pxInterface, '\0', sizeof( *pxInterface ) );
 801829a:	2228      	movs	r2, #40	@ 0x28
 801829c:	2100      	movs	r1, #0
 801829e:	6838      	ldr	r0, [r7, #0]
 80182a0:	f00a fa7b 	bl	802279a <memset>
    pxInterface->pcName = pcName;                    /* Just for logging, debugging. */
 80182a4:	683b      	ldr	r3, [r7, #0]
 80182a6:	4a0c      	ldr	r2, [pc, #48]	@ (80182d8 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 80182a8:	601a      	str	r2, [r3, #0]
    pxInterface->pvArgument = ( void * ) xEMACIndex; /* Has only meaning for the driver functions. */
 80182aa:	687a      	ldr	r2, [r7, #4]
 80182ac:	683b      	ldr	r3, [r7, #0]
 80182ae:	605a      	str	r2, [r3, #4]
    pxInterface->pfInitialise = xSTM32H_NetworkInterfaceInitialise;
 80182b0:	683b      	ldr	r3, [r7, #0]
 80182b2:	4a0a      	ldr	r2, [pc, #40]	@ (80182dc <pxSTM32H_FillInterfaceDescriptor+0x58>)
 80182b4:	609a      	str	r2, [r3, #8]
    pxInterface->pfOutput = xSTM32H_NetworkInterfaceOutput;
 80182b6:	683b      	ldr	r3, [r7, #0]
 80182b8:	4a09      	ldr	r2, [pc, #36]	@ (80182e0 <pxSTM32H_FillInterfaceDescriptor+0x5c>)
 80182ba:	60da      	str	r2, [r3, #12]
    pxInterface->pfGetPhyLinkStatus = xSTM32H_GetPhyLinkStatus;
 80182bc:	683b      	ldr	r3, [r7, #0]
 80182be:	4a09      	ldr	r2, [pc, #36]	@ (80182e4 <pxSTM32H_FillInterfaceDescriptor+0x60>)
 80182c0:	611a      	str	r2, [r3, #16]

    FreeRTOS_AddNetworkInterface( pxInterface );
 80182c2:	6838      	ldr	r0, [r7, #0]
 80182c4:	f7f5 f94c 	bl	800d560 <FreeRTOS_AddNetworkInterface>

    return pxInterface;
 80182c8:	683b      	ldr	r3, [r7, #0]
}
 80182ca:	4618      	mov	r0, r3
 80182cc:	3708      	adds	r7, #8
 80182ce:	46bd      	mov	sp, r7
 80182d0:	bd80      	pop	{r7, pc}
 80182d2:	bf00      	nop
 80182d4:	080275ec 	.word	0x080275ec
 80182d8:	200024e8 	.word	0x200024e8
 80182dc:	08017fc5 	.word	0x08017fc5
 80182e0:	080182e9 	.word	0x080182e9
 80182e4:	08018259 	.word	0x08018259

080182e8 <xSTM32H_NetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceOutput( NetworkInterface_t * pxInterface,
                                                  NetworkBufferDescriptor_t * const pxBuffer,
                                                  BaseType_t xReleaseAfterSend )
{
 80182e8:	b580      	push	{r7, lr}
 80182ea:	b08a      	sub	sp, #40	@ 0x28
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	60f8      	str	r0, [r7, #12]
 80182f0:	60b9      	str	r1, [r7, #8]
 80182f2:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFAIL;
 80182f4:	2300      	movs	r3, #0
 80182f6:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 100U );
 80182f8:	2364      	movs	r3, #100	@ 0x64
 80182fa:	623b      	str	r3, [r7, #32]
    uint8_t * pucTXBuffer;

    if( xSTM32H_GetPhyLinkStatus( pxInterface ) == pdPASS )
 80182fc:	68f8      	ldr	r0, [r7, #12]
 80182fe:	f7ff ffab 	bl	8018258 <xSTM32H_GetPhyLinkStatus>
 8018302:	4603      	mov	r3, r0
 8018304:	2b01      	cmp	r3, #1
 8018306:	d14c      	bne.n	80183a2 <xSTM32H_NetworkInterfaceOutput+0xba>
    {
        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            /* Zero-copy method, pass the buffer. */
            pucTXBuffer = pxBuffer->pucEthernetBuffer;
 8018308:	68bb      	ldr	r3, [r7, #8]
 801830a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801830c:	61fb      	str	r3, [r7, #28]

            /* As the buffer is passed to the driver, it must exist.
             * The library takes care of this. */
            configASSERT( xReleaseAfterSend != pdFALSE );
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	2b00      	cmp	r3, #0
 8018312:	d104      	bne.n	801831e <xSTM32H_NetworkInterfaceOutput+0x36>
 8018314:	f44f 7114 	mov.w	r1, #592	@ 0x250
 8018318:	4827      	ldr	r0, [pc, #156]	@ (80183b8 <xSTM32H_NetworkInterfaceOutput+0xd0>)
 801831a:	f7e9 fb1d 	bl	8001958 <vAssertCalled>
            pucTXBuffer = Tx_Buff[ xEthHandle.TxDescList.CurTxDesc ];
            /* The copy method, left here for educational purposes. */
            configASSERT( pxBuffer->xDataLength <= sizeof( Tx_Buff[ 0 ] ) );
        #endif

        ETH_BufferTypeDef xTransmitBuffer =
 801831e:	69fb      	ldr	r3, [r7, #28]
 8018320:	613b      	str	r3, [r7, #16]
        {
            .buffer = pucTXBuffer,
            .len    = pxBuffer->xDataLength,
 8018322:	68bb      	ldr	r3, [r7, #8]
 8018324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        ETH_BufferTypeDef xTransmitBuffer =
 8018326:	617b      	str	r3, [r7, #20]
 8018328:	2300      	movs	r3, #0
 801832a:	61bb      	str	r3, [r7, #24]
            .next   = NULL /* FreeRTOS+TCP does not use linked buffers. */
        };
        /* This is the total length, which is equal to the buffer. */
        xTxConfig.Length = pxBuffer->xDataLength;
 801832c:	68bb      	ldr	r3, [r7, #8]
 801832e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018330:	4a22      	ldr	r2, [pc, #136]	@ (80183bc <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8018332:	6053      	str	r3, [r2, #4]
        xTxConfig.TxBuffer = &( xTransmitBuffer );
 8018334:	4a21      	ldr	r2, [pc, #132]	@ (80183bc <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8018336:	f107 0310 	add.w	r3, r7, #16
 801833a:	6093      	str	r3, [r2, #8]

        /* This counting semaphore counts the number of free TX DMA descriptors. */
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 801833c:	4b20      	ldr	r3, [pc, #128]	@ (80183c0 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	6a39      	ldr	r1, [r7, #32]
 8018342:	4618      	mov	r0, r3
 8018344:	f7eb fc84 	bl	8003c50 <xQueueSemaphoreTake>
 8018348:	4603      	mov	r3, r0
 801834a:	2b01      	cmp	r3, #1
 801834c:	d003      	beq.n	8018356 <xSTM32H_NetworkInterfaceOutput+0x6e>
        {
            /* If the logging routine is using the network, the following message
             * may cause a new error message. */
            FreeRTOS_printf( ( "emacps_send_message: Time-out waiting for TX buffer\n" ) );
 801834e:	481d      	ldr	r0, [pc, #116]	@ (80183c4 <xSTM32H_NetworkInterfaceOutput+0xdc>)
 8018350:	f009 fefa 	bl	8022148 <lUDPLoggingPrintf>
 8018354:	e025      	b.n	80183a2 <xSTM32H_NetworkInterfaceOutput+0xba>
  __ASM volatile ("dsb 0xF":::"memory");
 8018356:	f3bf 8f4f 	dsb	sy
}
 801835a:	bf00      	nop
            /* Memory barrier: Make sure that the data written to the packet buffer got written. */
            __DSB();

            /* Get exclusive access to the TX process.
             * Both the IP-task and the EMAC task will work on the TX process. */
            if( xSemaphoreTake( xTransmissionMutex, xBlockTimeTicks ) != pdFAIL )
 801835c:	4b1a      	ldr	r3, [pc, #104]	@ (80183c8 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	6a39      	ldr	r1, [r7, #32]
 8018362:	4618      	mov	r0, r3
 8018364:	f7eb fc74 	bl	8003c50 <xQueueSemaphoreTake>
 8018368:	4603      	mov	r3, r0
 801836a:	2b00      	cmp	r3, #0
 801836c:	d019      	beq.n	80183a2 <xSTM32H_NetworkInterfaceOutput+0xba>
            {
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* Do not release the buffer. */
                    xReleaseAfterSend = pdFALSE;
 801836e:	2300      	movs	r3, #0
 8018370:	607b      	str	r3, [r7, #4]
                     * to the physical memory. */
                    __DSB();
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 8018372:	4912      	ldr	r1, [pc, #72]	@ (80183bc <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8018374:	4815      	ldr	r0, [pc, #84]	@ (80183cc <xSTM32H_NetworkInterfaceOutput+0xe4>)
 8018376:	f000 fcef 	bl	8018d58 <HAL_ETH_Transmit_IT>
 801837a:	4603      	mov	r3, r0
 801837c:	2b00      	cmp	r3, #0
 801837e:	d102      	bne.n	8018386 <xSTM32H_NetworkInterfaceOutput+0x9e>
                {
                    xResult = pdPASS;
 8018380:	2301      	movs	r3, #1
 8018382:	627b      	str	r3, [r7, #36]	@ 0x24
 8018384:	e006      	b.n	8018394 <xSTM32H_NetworkInterfaceOutput+0xac>
                }
                else
                {
                    /* As the transmission packet was not queued,
                     * the counting semaphore should be given. */
                    xSemaphoreGive( xTXDescriptorSemaphore );
 8018386:	4b0e      	ldr	r3, [pc, #56]	@ (80183c0 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 8018388:	6818      	ldr	r0, [r3, #0]
 801838a:	2300      	movs	r3, #0
 801838c:	2200      	movs	r2, #0
 801838e:	2100      	movs	r1, #0
 8018390:	f7eb faa6 	bl	80038e0 <xQueueGenericSend>
                }

                /* And release the mutex. */
                xSemaphoreGive( xTransmissionMutex );
 8018394:	4b0c      	ldr	r3, [pc, #48]	@ (80183c8 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 8018396:	6818      	ldr	r0, [r3, #0]
 8018398:	2300      	movs	r3, #0
 801839a:	2200      	movs	r2, #0
 801839c:	2100      	movs	r1, #0
 801839e:	f7eb fa9f 	bl	80038e0 <xQueueGenericSend>
            /* Call the standard trace macro to log the send event. */
            iptraceNETWORK_INTERFACE_TRANSMIT();
        }
    }

    if( xReleaseAfterSend != pdFALSE )
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d002      	beq.n	80183ae <xSTM32H_NetworkInterfaceOutput+0xc6>
    {
        vReleaseNetworkBufferAndDescriptor( pxBuffer );
 80183a8:	68b8      	ldr	r0, [r7, #8]
 80183aa:	f7ff f825 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
    }

    return xResult;
 80183ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80183b0:	4618      	mov	r0, r3
 80183b2:	3728      	adds	r7, #40	@ 0x28
 80183b4:	46bd      	mov	sp, r7
 80183b6:	bd80      	pop	{r7, pc}
 80183b8:	08027564 	.word	0x08027564
 80183bc:	2000246c 	.word	0x2000246c
 80183c0:	200023f0 	.word	0x200023f0
 80183c4:	080275f4 	.word	0x080275f4
 80183c8:	200023f4 	.word	0x200023f4
 80183cc:	200023f8 	.word	0x200023f8

080183d0 <prvMACBProbePhy>:
/*******************************************************************************
*                      Network Interface Static Functions
*******************************************************************************/

static void prvMACBProbePhy( void )
{
 80183d0:	b580      	push	{r7, lr}
 80183d2:	af00      	add	r7, sp, #0
    /* Bind the write and read access functions. */
    vPhyInitialise( &( xPhyObject ),
 80183d4:	4a06      	ldr	r2, [pc, #24]	@ (80183f0 <prvMACBProbePhy+0x20>)
 80183d6:	4907      	ldr	r1, [pc, #28]	@ (80183f4 <prvMACBProbePhy+0x24>)
 80183d8:	4807      	ldr	r0, [pc, #28]	@ (80183f8 <prvMACBProbePhy+0x28>)
 80183da:	f7ff f8c5 	bl	8017568 <vPhyInitialise>
                    ( xApplicationPhyReadHook_t ) ETH_PHY_IO_ReadReg,
                    ( xApplicationPhyWriteHook_t ) ETH_PHY_IO_WriteReg );
    /* Poll the bus for all connected PHY's. */
    xPhyDiscover( &( xPhyObject ) );
 80183de:	4806      	ldr	r0, [pc, #24]	@ (80183f8 <prvMACBProbePhy+0x28>)
 80183e0:	f7ff f8d8 	bl	8017594 <xPhyDiscover>
    /* Configure them using the properties provided. */
    xPhyConfigure( &( xPhyObject ), &( xPHYProperties ) );
 80183e4:	4905      	ldr	r1, [pc, #20]	@ (80183fc <prvMACBProbePhy+0x2c>)
 80183e6:	4804      	ldr	r0, [pc, #16]	@ (80183f8 <prvMACBProbePhy+0x28>)
 80183e8:	f7ff f9d2 	bl	8017790 <xPhyConfigure>
}
 80183ec:	bf00      	nop
 80183ee:	bd80      	pop	{r7, pc}
 80183f0:	080185f1 	.word	0x080185f1
 80183f4:	080185b9 	.word	0x080185b9
 80183f8:	200024a8 	.word	0x200024a8
 80183fc:	080278f8 	.word	0x080278f8

08018400 <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 8018400:	b580      	push	{r7, lr}
 8018402:	b09e      	sub	sp, #120	@ 0x78
 8018404:	af00      	add	r7, sp, #0
 8018406:	6078      	str	r0, [r7, #4]
    ETH_MACConfigTypeDef MACConf;
    uint32_t speed = 0, duplex = 0;
 8018408:	2300      	movs	r3, #0
 801840a:	677b      	str	r3, [r7, #116]	@ 0x74
 801840c:	2300      	movs	r3, #0
 801840e:	673b      	str	r3, [r7, #112]	@ 0x70

    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 8018410:	4b25      	ldr	r3, [pc, #148]	@ (80184a8 <prvEthernetUpdateConfig+0xa8>)
 8018412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018414:	687a      	ldr	r2, [r7, #4]
 8018416:	4619      	mov	r1, r3
 8018418:	4824      	ldr	r0, [pc, #144]	@ (80184ac <prvEthernetUpdateConfig+0xac>)
 801841a:	f009 fe95 	bl	8022148 <lUDPLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	2b00      	cmp	r3, #0
 8018422:	d103      	bne.n	801842c <prvEthernetUpdateConfig+0x2c>
 8018424:	4b20      	ldr	r3, [pc, #128]	@ (80184a8 <prvEthernetUpdateConfig+0xa8>)
 8018426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018428:	2b00      	cmp	r3, #0
 801842a:	d035      	beq.n	8018498 <prvEthernetUpdateConfig+0x98>
    {
        /* Restart the auto-negotiation. */
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &( xPhyObject ) ) );
 801842c:	4b1e      	ldr	r3, [pc, #120]	@ (80184a8 <prvEthernetUpdateConfig+0xa8>)
 801842e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018430:	2201      	movs	r2, #1
 8018432:	fa02 f303 	lsl.w	r3, r2, r3
 8018436:	3b01      	subs	r3, #1
 8018438:	4619      	mov	r1, r3
 801843a:	481b      	ldr	r0, [pc, #108]	@ (80184a8 <prvEthernetUpdateConfig+0xa8>)
 801843c:	f7ff faae 	bl	801799c <xPhyStartAutoNegotiation>

        /* Configure the MAC with the Duplex Mode fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8018440:	4b19      	ldr	r3, [pc, #100]	@ (80184a8 <prvEthernetUpdateConfig+0xa8>)
 8018442:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8018446:	2b02      	cmp	r3, #2
 8018448:	d103      	bne.n	8018452 <prvEthernetUpdateConfig+0x52>
        {
            duplex = ETH_FULLDUPLEX_MODE;
 801844a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801844e:	673b      	str	r3, [r7, #112]	@ 0x70
 8018450:	e001      	b.n	8018456 <prvEthernetUpdateConfig+0x56>
        }
        else
        {
            duplex = ETH_HALFDUPLEX_MODE;
 8018452:	2300      	movs	r3, #0
 8018454:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        /* Configure the MAC with the speed fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8018456:	4b14      	ldr	r3, [pc, #80]	@ (80184a8 <prvEthernetUpdateConfig+0xa8>)
 8018458:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801845c:	2b01      	cmp	r3, #1
 801845e:	d102      	bne.n	8018466 <prvEthernetUpdateConfig+0x66>
        {
            speed = ETH_SPEED_10M;
 8018460:	2300      	movs	r3, #0
 8018462:	677b      	str	r3, [r7, #116]	@ 0x74
 8018464:	e002      	b.n	801846c <prvEthernetUpdateConfig+0x6c>
        }
        else
        {
            speed = ETH_SPEED_100M;
 8018466:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801846a:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        /* Get MAC and configure it */
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 801846c:	f107 030c 	add.w	r3, r7, #12
 8018470:	4619      	mov	r1, r3
 8018472:	480f      	ldr	r0, [pc, #60]	@ (80184b0 <prvEthernetUpdateConfig+0xb0>)
 8018474:	f000 ffcc 	bl	8019410 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8018478:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801847a:	627b      	str	r3, [r7, #36]	@ 0x24
        MACConf.Speed = speed;
 801847c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801847e:	623b      	str	r3, [r7, #32]
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 8018480:	f107 030c 	add.w	r3, r7, #12
 8018484:	4619      	mov	r1, r3
 8018486:	480a      	ldr	r0, [pc, #40]	@ (80184b0 <prvEthernetUpdateConfig+0xb0>)
 8018488:	f001 f996 	bl	80197b8 <HAL_ETH_SetMACConfig>
        #if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 )
        {
            MACConf.ChecksumOffload = ENABLE;
 801848c:	2301      	movs	r3, #1
 801848e:	743b      	strb	r3, [r7, #16]
            MACConf.ChecksumOffload = DISABLE;
        }
        #endif /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 ) */

        /* Restart MAC interface */
        HAL_ETH_Start_IT( &( xEthHandle ) );
 8018490:	4807      	ldr	r0, [pc, #28]	@ (80184b0 <prvEthernetUpdateConfig+0xb0>)
 8018492:	f000 fb64 	bl	8018b5e <HAL_ETH_Start_IT>
 8018496:	e003      	b.n	80184a0 <prvEthernetUpdateConfig+0xa0>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 8018498:	4805      	ldr	r0, [pc, #20]	@ (80184b0 <prvEthernetUpdateConfig+0xb0>)
 801849a:	f000 fbe5 	bl	8018c68 <HAL_ETH_Stop_IT>
    }
}
 801849e:	bf00      	nop
 80184a0:	bf00      	nop
 80184a2:	3778      	adds	r7, #120	@ 0x78
 80184a4:	46bd      	mov	sp, r7
 80184a6:	bd80      	pop	{r7, pc}
 80184a8:	200024a8 	.word	0x200024a8
 80184ac:	0802762c 	.word	0x0802762c
 80184b0:	200023f8 	.word	0x200023f8

080184b4 <prvNetworkInterfaceInput>:
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b08c      	sub	sp, #48	@ 0x30
 80184b8:	af00      	add	r7, sp, #0
    BaseType_t xReturn = 0;
 80184ba:	2300      	movs	r3, #0
 80184bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* For as long as a packet is immediately available. */
    for( ; ; )
    {
        NetworkBufferDescriptor_t * pxBufferDescriptor;
        NetworkBufferDescriptor_t * pxReceivedBuffer = NULL;
 80184be:	2300      	movs	r3, #0
 80184c0:	62bb      	str	r3, [r7, #40]	@ 0x28
        ETH_BufferTypeDef data_buffer;
        size_t uxDataLength;
        size_t uxLength;

        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 80184c2:	f107 0308 	add.w	r3, r7, #8
 80184c6:	4619      	mov	r1, r3
 80184c8:	4838      	ldr	r0, [pc, #224]	@ (80185ac <prvNetworkInterfaceInput+0xf8>)
 80184ca:	f000 fd19 	bl	8018f00 <HAL_ETH_GetRxData>
 80184ce:	61f8      	str	r0, [r7, #28]

        if( uxDataLength == 0U )
 80184d0:	69fb      	ldr	r3, [r7, #28]
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d101      	bne.n	80184da <prvNetworkInterfaceInput+0x26>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
            }
        }
    }

    return xReturn;
 80184d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184d8:	e064      	b.n	80185a4 <prvNetworkInterfaceInput+0xf0>
        xReturn++;
 80184da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184dc:	3301      	adds	r3, #1
 80184de:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uxLength = ETH_RX_BUF_SIZE;
 80184e0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80184e4:	61bb      	str	r3, [r7, #24]
            if( data_buffer.buffer != NULL )
 80184e6:	68bb      	ldr	r3, [r7, #8]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d004      	beq.n	80184f6 <prvNetworkInterfaceInput+0x42>
                pxReceivedBuffer = pxPacketBuffer_to_NetworkBuffer( data_buffer.buffer );
 80184ec:	68bb      	ldr	r3, [r7, #8]
 80184ee:	4618      	mov	r0, r3
 80184f0:	f7f2 f8ab 	bl	800a64a <pxPacketBuffer_to_NetworkBuffer>
 80184f4:	62b8      	str	r0, [r7, #40]	@ 0x28
            if( pxReceivedBuffer == NULL )
 80184f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d102      	bne.n	8018502 <prvNetworkInterfaceInput+0x4e>
                FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 80184fc:	482c      	ldr	r0, [pc, #176]	@ (80185b0 <prvNetworkInterfaceInput+0xfc>)
 80184fe:	f009 fe23 	bl	8022148 <lUDPLoggingPrintf>
        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 8018502:	2100      	movs	r1, #0
 8018504:	69b8      	ldr	r0, [r7, #24]
 8018506:	f7fe ff0f 	bl	8017328 <pxGetNetworkBufferWithDescriptor>
 801850a:	6178      	str	r0, [r7, #20]
            if( pxBufferDescriptor == NULL )
 801850c:	697b      	ldr	r3, [r7, #20]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d102      	bne.n	8018518 <prvNetworkInterfaceInput+0x64>
                pxReceivedBuffer = NULL;
 8018512:	2300      	movs	r3, #0
 8018514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018516:	e005      	b.n	8018524 <prvNetworkInterfaceInput+0x70>
            else if( pxReceivedBuffer != NULL )
 8018518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801851a:	2b00      	cmp	r3, #0
 801851c:	d002      	beq.n	8018524 <prvNetworkInterfaceInput+0x70>
                pxReceivedBuffer->xDataLength = uxDataLength;
 801851e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018520:	69fa      	ldr	r2, [r7, #28]
 8018522:	629a      	str	r2, [r3, #40]	@ 0x28
            uint8_t * pucBuffer = NULL;
 8018524:	2300      	movs	r3, #0
 8018526:	627b      	str	r3, [r7, #36]	@ 0x24
            if( pxBufferDescriptor != NULL )
 8018528:	697b      	ldr	r3, [r7, #20]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d002      	beq.n	8018534 <prvNetworkInterfaceInput+0x80>
                pucBuffer = pxBufferDescriptor->pucEthernetBuffer;
 801852e:	697b      	ldr	r3, [r7, #20]
 8018530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018532:	627b      	str	r3, [r7, #36]	@ 0x24
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 8018534:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018536:	481d      	ldr	r0, [pc, #116]	@ (80185ac <prvNetworkInterfaceInput+0xf8>)
 8018538:	f000 fd2a 	bl	8018f90 <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 801853c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801853e:	2b00      	cmp	r3, #0
 8018540:	d0bd      	beq.n	80184be <prvNetworkInterfaceInput+0xa>
            BaseType_t xDoRelease = pdFALSE;
 8018542:	2300      	movs	r3, #0
 8018544:	623b      	str	r3, [r7, #32]
            if( eConsiderFrameForProcessing( pxReceivedBuffer->pucEthernetBuffer ) != eProcessBuffer )
 8018546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801854a:	4618      	mov	r0, r3
 801854c:	f7f1 f9e4 	bl	8009918 <eConsiderFrameForProcessing>
 8018550:	4603      	mov	r3, r0
 8018552:	2b01      	cmp	r3, #1
 8018554:	d002      	beq.n	801855c <prvNetworkInterfaceInput+0xa8>
                xDoRelease = pdTRUE;
 8018556:	2301      	movs	r3, #1
 8018558:	623b      	str	r3, [r7, #32]
 801855a:	e01c      	b.n	8018596 <prvNetworkInterfaceInput+0xe2>
                IPStackEvent_t xRxEvent =
 801855c:	2301      	movs	r3, #1
 801855e:	703b      	strb	r3, [r7, #0]
 8018560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018562:	607b      	str	r3, [r7, #4]
                pxReceivedBuffer->pxInterface = pxMyInterface;
 8018564:	4b13      	ldr	r3, [pc, #76]	@ (80185b4 <prvNetworkInterfaceInput+0x100>)
 8018566:	681a      	ldr	r2, [r3, #0]
 8018568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801856a:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReceivedBuffer->pxEndPoint = FreeRTOS_MatchingEndpoint( pxMyInterface, pxReceivedBuffer->pucEthernetBuffer );
 801856c:	4b11      	ldr	r3, [pc, #68]	@ (80185b4 <prvNetworkInterfaceInput+0x100>)
 801856e:	681a      	ldr	r2, [r3, #0]
 8018570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018574:	4619      	mov	r1, r3
 8018576:	4610      	mov	r0, r2
 8018578:	f7f5 fb96 	bl	800dca8 <FreeRTOS_MatchingEndpoint>
 801857c:	4602      	mov	r2, r0
 801857e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018580:	631a      	str	r2, [r3, #48]	@ 0x30
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 8018582:	463b      	mov	r3, r7
 8018584:	2100      	movs	r1, #0
 8018586:	4618      	mov	r0, r3
 8018588:	f7f1 f972 	bl	8009870 <xSendEventStructToIPTask>
 801858c:	4603      	mov	r3, r0
 801858e:	2b00      	cmp	r3, #0
 8018590:	d101      	bne.n	8018596 <prvNetworkInterfaceInput+0xe2>
                    xDoRelease = pdTRUE;
 8018592:	2301      	movs	r3, #1
 8018594:	623b      	str	r3, [r7, #32]
            if( xDoRelease != pdFALSE )
 8018596:	6a3b      	ldr	r3, [r7, #32]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d090      	beq.n	80184be <prvNetworkInterfaceInput+0xa>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
 801859c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801859e:	f7fe ff2b 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
    {
 80185a2:	e78c      	b.n	80184be <prvNetworkInterfaceInput+0xa>
}
 80185a4:	4618      	mov	r0, r3
 80185a6:	3730      	adds	r7, #48	@ 0x30
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bd80      	pop	{r7, pc}
 80185ac:	200023f8 	.word	0x200023f8
 80185b0:	08027660 	.word	0x08027660
 80185b4:	200024a0 	.word	0x200024a0

080185b8 <ETH_PHY_IO_ReadReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_ReadReg( uint32_t ulDevAddr,
                                   uint32_t ulRegAddr,
                                   uint32_t * pulRegVal )
{
 80185b8:	b580      	push	{r7, lr}
 80185ba:	b086      	sub	sp, #24
 80185bc:	af00      	add	r7, sp, #0
 80185be:	60f8      	str	r0, [r7, #12]
 80185c0:	60b9      	str	r1, [r7, #8]
 80185c2:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 80185c4:	f04f 33ff 	mov.w	r3, #4294967295
 80185c8:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	68ba      	ldr	r2, [r7, #8]
 80185ce:	68f9      	ldr	r1, [r7, #12]
 80185d0:	4806      	ldr	r0, [pc, #24]	@ (80185ec <ETH_PHY_IO_ReadReg+0x34>)
 80185d2:	f000 fe75 	bl	80192c0 <HAL_ETH_ReadPHYRegister>
 80185d6:	4603      	mov	r3, r0
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d101      	bne.n	80185e0 <ETH_PHY_IO_ReadReg+0x28>
    {
        iResult = 0;
 80185dc:	2300      	movs	r3, #0
 80185de:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 80185e0:	697b      	ldr	r3, [r7, #20]
}
 80185e2:	4618      	mov	r0, r3
 80185e4:	3718      	adds	r7, #24
 80185e6:	46bd      	mov	sp, r7
 80185e8:	bd80      	pop	{r7, pc}
 80185ea:	bf00      	nop
 80185ec:	200023f8 	.word	0x200023f8

080185f0 <ETH_PHY_IO_WriteReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_WriteReg( uint32_t ulDevAddr,
                                    uint32_t ulRegAddr,
                                    uint32_t pulRegVal )
{
 80185f0:	b580      	push	{r7, lr}
 80185f2:	b086      	sub	sp, #24
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	60f8      	str	r0, [r7, #12]
 80185f8:	60b9      	str	r1, [r7, #8]
 80185fa:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 80185fc:	f04f 33ff 	mov.w	r3, #4294967295
 8018600:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	68ba      	ldr	r2, [r7, #8]
 8018606:	68f9      	ldr	r1, [r7, #12]
 8018608:	4806      	ldr	r0, [pc, #24]	@ (8018624 <ETH_PHY_IO_WriteReg+0x34>)
 801860a:	f000 fead 	bl	8019368 <HAL_ETH_WritePHYRegister>
 801860e:	4603      	mov	r3, r0
 8018610:	2b00      	cmp	r3, #0
 8018612:	d101      	bne.n	8018618 <ETH_PHY_IO_WriteReg+0x28>
    {
        iResult = 0;
 8018614:	2300      	movs	r3, #0
 8018616:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8018618:	697b      	ldr	r3, [r7, #20]
}
 801861a:	4618      	mov	r0, r3
 801861c:	3718      	adds	r7, #24
 801861e:	46bd      	mov	sp, r7
 8018620:	bd80      	pop	{r7, pc}
 8018622:	bf00      	nop
 8018624:	200023f8 	.word	0x200023f8

08018628 <ETH_IRQHandler>:
/*******************************************************************************
*                   Ethernet Handling Functions
*******************************************************************************/

void ETH_IRQHandler( void )
{
 8018628:	b580      	push	{r7, lr}
 801862a:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &( xEthHandle ) );
 801862c:	4802      	ldr	r0, [pc, #8]	@ (8018638 <ETH_IRQHandler+0x10>)
 801862e:	f000 fd27 	bl	8019080 <HAL_ETH_IRQHandler>
}
 8018632:	bf00      	nop
 8018634:	bd80      	pop	{r7, pc}
 8018636:	bf00      	nop
 8018638:	200023f8 	.word	0x200023f8

0801863c <prvSetFlagsAndNotify>:
/*-----------------------------------------------------------*/

static void prvSetFlagsAndNotify( uint32_t ulFlags )
{
 801863c:	b580      	push	{r7, lr}
 801863e:	b084      	sub	sp, #16
 8018640:	af00      	add	r7, sp, #0
 8018642:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8018644:	2300      	movs	r3, #0
 8018646:	60fb      	str	r3, [r7, #12]

    /* Ethernet RX-Complete callback function, elsewhere declared as weak.
     * No critical section needed, this function is called from an ISR. */
    ulISREvents |= ulFlags;
 8018648:	4b10      	ldr	r3, [pc, #64]	@ (801868c <prvSetFlagsAndNotify+0x50>)
 801864a:	681a      	ldr	r2, [r3, #0]
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	4313      	orrs	r3, r2
 8018650:	4a0e      	ldr	r2, [pc, #56]	@ (801868c <prvSetFlagsAndNotify+0x50>)
 8018652:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 8018654:	4b0e      	ldr	r3, [pc, #56]	@ (8018690 <prvSetFlagsAndNotify+0x54>)
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d012      	beq.n	8018682 <prvSetFlagsAndNotify+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 801865c:	4b0c      	ldr	r3, [pc, #48]	@ (8018690 <prvSetFlagsAndNotify+0x54>)
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	f107 020c 	add.w	r2, r7, #12
 8018664:	2100      	movs	r1, #0
 8018666:	4618      	mov	r0, r3
 8018668:	f7ed fbd2 	bl	8005e10 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801866c:	68fb      	ldr	r3, [r7, #12]
 801866e:	2b00      	cmp	r3, #0
 8018670:	d007      	beq.n	8018682 <prvSetFlagsAndNotify+0x46>
 8018672:	4b08      	ldr	r3, [pc, #32]	@ (8018694 <prvSetFlagsAndNotify+0x58>)
 8018674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018678:	601a      	str	r2, [r3, #0]
 801867a:	f3bf 8f4f 	dsb	sy
 801867e:	f3bf 8f6f 	isb	sy
    }
}
 8018682:	bf00      	nop
 8018684:	3710      	adds	r7, #16
 8018686:	46bd      	mov	sp, r7
 8018688:	bd80      	pop	{r7, pc}
 801868a:	bf00      	nop
 801868c:	200023e8 	.word	0x200023e8
 8018690:	200024a4 	.word	0x200024a4
 8018694:	e000ed04 	.word	0xe000ed04

08018698 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 8018698:	b580      	push	{r7, lr}
 801869a:	b082      	sub	sp, #8
 801869c:	af00      	add	r7, sp, #0
 801869e:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_TX_EVENT );
 80186a0:	2002      	movs	r0, #2
 80186a2:	f7ff ffcb 	bl	801863c <prvSetFlagsAndNotify>
}
 80186a6:	bf00      	nop
 80186a8:	3708      	adds	r7, #8
 80186aa:	46bd      	mov	sp, r7
 80186ac:	bd80      	pop	{r7, pc}

080186ae <HAL_ETH_RxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 80186ae:	b580      	push	{r7, lr}
 80186b0:	b082      	sub	sp, #8
 80186b2:	af00      	add	r7, sp, #0
 80186b4:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_RX_EVENT );
 80186b6:	2001      	movs	r0, #1
 80186b8:	f7ff ffc0 	bl	801863c <prvSetFlagsAndNotify>
}
 80186bc:	bf00      	nop
 80186be:	3708      	adds	r7, #8
 80186c0:	46bd      	mov	sp, r7
 80186c2:	bd80      	pop	{r7, pc}

080186c4 <HAL_ETH_DMAErrorCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_DMAErrorCallback( ETH_HandleTypeDef * heth )
{
 80186c4:	b580      	push	{r7, lr}
 80186c6:	b082      	sub	sp, #8
 80186c8:	af00      	add	r7, sp, #0
 80186ca:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_ERR_EVENT );
 80186cc:	2004      	movs	r0, #4
 80186ce:	f7ff ffb5 	bl	801863c <prvSetFlagsAndNotify>
}
 80186d2:	bf00      	nop
 80186d4:	3708      	adds	r7, #8
 80186d6:	46bd      	mov	sp, r7
 80186d8:	bd80      	pop	{r7, pc}
	...

080186dc <vNetworkInterfaceAllocateRAMToBuffers>:
    __attribute__( ( section( ".ethernet_data" ) ) )
#endif /* ( ipconfigZERO_COPY_RX_DRIVER != 0 || ipconfigZERO_COPY_TX_DRIVER != 0 ) */
__attribute__( ( aligned( 32 ) ) );

void vNetworkInterfaceAllocateRAMToBuffers( NetworkBufferDescriptor_t pxNetworkBuffers[ ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ] )
{
 80186dc:	b480      	push	{r7}
 80186de:	b085      	sub	sp, #20
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	6078      	str	r0, [r7, #4]
    uint8_t * ucRAMBuffer = ucNetworkPackets;
 80186e4:	4b15      	ldr	r3, [pc, #84]	@ (801873c <vNetworkInterfaceAllocateRAMToBuffers+0x60>)
 80186e6:	60fb      	str	r3, [r7, #12]
    uint32_t ul;

    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 80186e8:	2300      	movs	r3, #0
 80186ea:	60bb      	str	r3, [r7, #8]
 80186ec:	e01c      	b.n	8018728 <vNetworkInterfaceAllocateRAMToBuffers+0x4c>
    {
        pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 80186ee:	68ba      	ldr	r2, [r7, #8]
 80186f0:	4613      	mov	r3, r2
 80186f2:	00db      	lsls	r3, r3, #3
 80186f4:	1a9b      	subs	r3, r3, r2
 80186f6:	00db      	lsls	r3, r3, #3
 80186f8:	461a      	mov	r2, r3
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	4413      	add	r3, r2
 80186fe:	68fa      	ldr	r2, [r7, #12]
 8018700:	320a      	adds	r2, #10
 8018702:	625a      	str	r2, [r3, #36]	@ 0x24
        *( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 8018704:	68ba      	ldr	r2, [r7, #8]
 8018706:	4613      	mov	r3, r2
 8018708:	00db      	lsls	r3, r3, #3
 801870a:	1a9b      	subs	r3, r3, r2
 801870c:	00db      	lsls	r3, r3, #3
 801870e:	461a      	mov	r2, r3
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	4413      	add	r3, r2
 8018714:	461a      	mov	r2, r3
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	601a      	str	r2, [r3, #0]
        ucRAMBuffer += ETH_RX_BUF_SIZE;
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8018720:	60fb      	str	r3, [r7, #12]
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8018722:	68bb      	ldr	r3, [r7, #8]
 8018724:	3301      	adds	r3, #1
 8018726:	60bb      	str	r3, [r7, #8]
 8018728:	68bb      	ldr	r3, [r7, #8]
 801872a:	2b3f      	cmp	r3, #63	@ 0x3f
 801872c:	d9df      	bls.n	80186ee <vNetworkInterfaceAllocateRAMToBuffers+0x12>
    }
}
 801872e:	bf00      	nop
 8018730:	bf00      	nop
 8018732:	3714      	adds	r7, #20
 8018734:	46bd      	mov	sp, r7
 8018736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801873a:	4770      	bx	lr
 801873c:	240400c0 	.word	0x240400c0

08018740 <vClearOptionBit>:
/*-----------------------------------------------------------*/

static void vClearOptionBit( volatile uint32_t * pulValue,
                             uint32_t ulValue )
{
 8018740:	b580      	push	{r7, lr}
 8018742:	b082      	sub	sp, #8
 8018744:	af00      	add	r7, sp, #0
 8018746:	6078      	str	r0, [r7, #4]
 8018748:	6039      	str	r1, [r7, #0]
    portENTER_CRITICAL();
 801874a:	f7ed fe19 	bl	8006380 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	681a      	ldr	r2, [r3, #0]
 8018752:	683b      	ldr	r3, [r7, #0]
 8018754:	43db      	mvns	r3, r3
 8018756:	401a      	ands	r2, r3
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	601a      	str	r2, [r3, #0]
    portEXIT_CRITICAL();
 801875c:	f7ed fe3c 	bl	80063d8 <vPortExitCritical>
}
 8018760:	bf00      	nop
 8018762:	3708      	adds	r7, #8
 8018764:	46bd      	mov	sp, r7
 8018766:	bd80      	pop	{r7, pc}

08018768 <uxGetOwnCount>:
/*-----------------------------------------------------------*/

#if ( ipconfigHAS_PRINTF != 0 )
    static size_t uxGetOwnCount( ETH_HandleTypeDef * heth )
    {
 8018768:	b480      	push	{r7}
 801876a:	b087      	sub	sp, #28
 801876c:	af00      	add	r7, sp, #0
 801876e:	6078      	str	r0, [r7, #4]
        BaseType_t xIndex;
        BaseType_t xCount = 0;
 8018770:	2300      	movs	r3, #0
 8018772:	613b      	str	r3, [r7, #16]
        ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	3330      	adds	r3, #48	@ 0x30
 8018778:	60fb      	str	r3, [r7, #12]

        /* Count the number of RX descriptors that are owned by DMA. */
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 801877a:	2300      	movs	r3, #0
 801877c:	617b      	str	r3, [r7, #20]
 801877e:	e00e      	b.n	801879e <uxGetOwnCount+0x36>
        {
            __IO const ETH_DMADescTypeDef * dmarxdesc =
                ( __IO const ETH_DMADescTypeDef * )dmarxdesclist->RxDesc[ xIndex ];
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	697a      	ldr	r2, [r7, #20]
 8018784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            __IO const ETH_DMADescTypeDef * dmarxdesc =
 8018788:	60bb      	str	r3, [r7, #8]

            if( ( dmarxdesc->DESC3 & ETH_DMARXNDESCWBF_OWN ) != 0U )
 801878a:	68bb      	ldr	r3, [r7, #8]
 801878c:	68db      	ldr	r3, [r3, #12]
 801878e:	2b00      	cmp	r3, #0
 8018790:	da02      	bge.n	8018798 <uxGetOwnCount+0x30>
            {
                xCount++;
 8018792:	693b      	ldr	r3, [r7, #16]
 8018794:	3301      	adds	r3, #1
 8018796:	613b      	str	r3, [r7, #16]
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8018798:	697b      	ldr	r3, [r7, #20]
 801879a:	3301      	adds	r3, #1
 801879c:	617b      	str	r3, [r7, #20]
 801879e:	697b      	ldr	r3, [r7, #20]
 80187a0:	2b03      	cmp	r3, #3
 80187a2:	d9ed      	bls.n	8018780 <uxGetOwnCount+0x18>
            }
        }

        return xCount;
 80187a4:	693b      	ldr	r3, [r7, #16]
    }
 80187a6:	4618      	mov	r0, r3
 80187a8:	371c      	adds	r7, #28
 80187aa:	46bd      	mov	sp, r7
 80187ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187b0:	4770      	bx	lr
	...

080187b4 <prvEMACHandlerTask>:
#endif /* if ( ipconfigHAS_PRINTF != 0 ) */
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b088      	sub	sp, #32
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	6078      	str	r0, [r7, #4]
/* When sending a packet, all descriptors in the transmission channel may
 * be occupied.  In stat case, the program will wait (block) for the counting
 * semaphore. */
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100U );
 80187bc:	2364      	movs	r3, #100	@ 0x64
 80187be:	613b      	str	r3, [r7, #16]

    #if ( ipconfigHAS_PRINTF != 0 )
        size_t uxTXDescriptorsUsed = 0U;
 80187c0:	2300      	movs	r3, #0
 80187c2:	61fb      	str	r3, [r7, #28]
        size_t uxRXDescriptorsUsed = ETH_RX_DESC_CNT;
 80187c4:	2304      	movs	r3, #4
 80187c6:	61bb      	str	r3, [r7, #24]

    ( void ) pvParameters;

    for( ; ; )
    {
        BaseType_t xResult = 0;
 80187c8:	2300      	movs	r3, #0
 80187ca:	617b      	str	r3, [r7, #20]
            size_t uxOwnCount;

            /* Call a function that monitors resources: the amount of free network
             * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
             * for more detailed comments. */
            vPrintResourceStats();
 80187cc:	f7f2 f8d6 	bl	800a97c <vPrintResourceStats>

            /* Some more statistics: number of free descriptors. */
            uxUsed = ETH_TX_DESC_CNT - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 80187d0:	4b43      	ldr	r3, [pc, #268]	@ (80188e0 <prvEMACHandlerTask+0x12c>)
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	4618      	mov	r0, r3
 80187d6:	f7eb fb29 	bl	8003e2c <uxQueueMessagesWaiting>
 80187da:	4603      	mov	r3, r0
 80187dc:	f1c3 0304 	rsb	r3, r3, #4
 80187e0:	60fb      	str	r3, [r7, #12]

            if( uxTXDescriptorsUsed < uxUsed )
 80187e2:	69fa      	ldr	r2, [r7, #28]
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	429a      	cmp	r2, r3
 80187e8:	d206      	bcs.n	80187f8 <prvEMACHandlerTask+0x44>
            {
                uxTXDescriptorsUsed = uxUsed;
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "TX descriptors %u/%u\n",
 80187ee:	2204      	movs	r2, #4
 80187f0:	69f9      	ldr	r1, [r7, #28]
 80187f2:	483c      	ldr	r0, [pc, #240]	@ (80188e4 <prvEMACHandlerTask+0x130>)
 80187f4:	f009 fca8 	bl	8022148 <lUDPLoggingPrintf>
                                   uxTXDescriptorsUsed,
                                   ETH_TX_DESC_CNT ) );
            }

            uxOwnCount = uxGetOwnCount( &( xEthHandle ) );
 80187f8:	483b      	ldr	r0, [pc, #236]	@ (80188e8 <prvEMACHandlerTask+0x134>)
 80187fa:	f7ff ffb5 	bl	8018768 <uxGetOwnCount>
 80187fe:	60b8      	str	r0, [r7, #8]

            if( uxRXDescriptorsUsed > uxOwnCount )
 8018800:	69ba      	ldr	r2, [r7, #24]
 8018802:	68bb      	ldr	r3, [r7, #8]
 8018804:	429a      	cmp	r2, r3
 8018806:	d906      	bls.n	8018816 <prvEMACHandlerTask+0x62>
            {
                uxRXDescriptorsUsed = uxOwnCount;
 8018808:	68bb      	ldr	r3, [r7, #8]
 801880a:	61bb      	str	r3, [r7, #24]
                FreeRTOS_printf( ( "RX descriptors %u/%u\n",
 801880c:	2204      	movs	r2, #4
 801880e:	69b9      	ldr	r1, [r7, #24]
 8018810:	4836      	ldr	r0, [pc, #216]	@ (80188ec <prvEMACHandlerTask+0x138>)
 8018812:	f009 fc99 	bl	8022148 <lUDPLoggingPrintf>
                                   ETH_RX_DESC_CNT ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 8018816:	693a      	ldr	r2, [r7, #16]
 8018818:	2100      	movs	r1, #0
 801881a:	2000      	movs	r0, #0
 801881c:	f7ec ff88 	bl	8005730 <ulTaskGenericNotifyTake>

        /* Wait for the Ethernet MAC interrupt to indicate that another packet
         * has been received. */
        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0U )
 8018820:	4b33      	ldr	r3, [pc, #204]	@ (80188f0 <prvEMACHandlerTask+0x13c>)
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	f003 0301 	and.w	r3, r3, #1
 8018828:	2b00      	cmp	r3, #0
 801882a:	d006      	beq.n	801883a <prvEMACHandlerTask+0x86>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_RX_EVENT );
 801882c:	2101      	movs	r1, #1
 801882e:	4830      	ldr	r0, [pc, #192]	@ (80188f0 <prvEMACHandlerTask+0x13c>)
 8018830:	f7ff ff86 	bl	8018740 <vClearOptionBit>
            xResult = prvNetworkInterfaceInput();
 8018834:	f7ff fe3e 	bl	80184b4 <prvNetworkInterfaceInput>
 8018838:	6178      	str	r0, [r7, #20]
        /* When a packet has been transmitted, the descriptor must be
         * prepared for a next transmission.
         * When using zero-copy, the network buffer must be released
         * ( i.e. returned to the pool of network buffers ). */

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0U )
 801883a:	4b2d      	ldr	r3, [pc, #180]	@ (80188f0 <prvEMACHandlerTask+0x13c>)
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	f003 0302 	and.w	r3, r3, #2
 8018842:	2b00      	cmp	r3, #0
 8018844:	d017      	beq.n	8018876 <prvEMACHandlerTask+0xc2>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_TX_EVENT );
 8018846:	2102      	movs	r1, #2
 8018848:	4829      	ldr	r0, [pc, #164]	@ (80188f0 <prvEMACHandlerTask+0x13c>)
 801884a:	f7ff ff79 	bl	8018740 <vClearOptionBit>

            if( xSemaphoreTake( xTransmissionMutex, 10000U ) != pdFAIL )
 801884e:	4b29      	ldr	r3, [pc, #164]	@ (80188f4 <prvEMACHandlerTask+0x140>)
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	f242 7110 	movw	r1, #10000	@ 0x2710
 8018856:	4618      	mov	r0, r3
 8018858:	f7eb f9fa 	bl	8003c50 <xQueueSemaphoreTake>
 801885c:	4603      	mov	r3, r0
 801885e:	2b00      	cmp	r3, #0
 8018860:	d009      	beq.n	8018876 <prvEMACHandlerTask+0xc2>
            {
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8018862:	4821      	ldr	r0, [pc, #132]	@ (80188e8 <prvEMACHandlerTask+0x134>)
 8018864:	f001 fb04 	bl	8019e70 <ETH_Clear_Tx_Descriptors>
                xSemaphoreGive( xTransmissionMutex );
 8018868:	4b22      	ldr	r3, [pc, #136]	@ (80188f4 <prvEMACHandlerTask+0x140>)
 801886a:	6818      	ldr	r0, [r3, #0]
 801886c:	2300      	movs	r3, #0
 801886e:	2200      	movs	r2, #0
 8018870:	2100      	movs	r1, #0
 8018872:	f7eb f835 	bl	80038e0 <xQueueGenericSend>
            }
        }

        /* Some error has occurred, possibly an overflow or an underflow. */
        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0U )
 8018876:	4b1e      	ldr	r3, [pc, #120]	@ (80188f0 <prvEMACHandlerTask+0x13c>)
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	f003 0304 	and.w	r3, r3, #4
 801887e:	2b00      	cmp	r3, #0
 8018880:	d00f      	beq.n	80188a2 <prvEMACHandlerTask+0xee>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_ERR_EVENT );
 8018882:	2104      	movs	r1, #4
 8018884:	481a      	ldr	r0, [pc, #104]	@ (80188f0 <prvEMACHandlerTask+0x13c>)
 8018886:	f7ff ff5b 	bl	8018740 <vClearOptionBit>

            xEthHandle.gState = HAL_ETH_STATE_READY;
 801888a:	4b17      	ldr	r3, [pc, #92]	@ (80188e8 <prvEMACHandlerTask+0x134>)
 801888c:	2210      	movs	r2, #16
 801888e:	659a      	str	r2, [r3, #88]	@ 0x58
            /* Enable all interrupts */
            HAL_ETH_Start_IT( &( xEthHandle ) );
 8018890:	4815      	ldr	r0, [pc, #84]	@ (80188e8 <prvEMACHandlerTask+0x134>)
 8018892:	f000 f964 	bl	8018b5e <HAL_ETH_Start_IT>
            xResult += prvNetworkInterfaceInput();
 8018896:	f7ff fe0d 	bl	80184b4 <prvNetworkInterfaceInput>
 801889a:	4602      	mov	r2, r0
 801889c:	697b      	ldr	r3, [r7, #20]
 801889e:	4413      	add	r3, r2
 80188a0:	617b      	str	r3, [r7, #20]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != pdFALSE )
 80188a2:	6979      	ldr	r1, [r7, #20]
 80188a4:	4814      	ldr	r0, [pc, #80]	@ (80188f8 <prvEMACHandlerTask+0x144>)
 80188a6:	f7ff fa25 	bl	8017cf4 <xPhyCheckLinkStatus>
 80188aa:	4603      	mov	r3, r0
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d08b      	beq.n	80187c8 <prvEMACHandlerTask+0x14>
        {
            /*
             * The function xPhyCheckLinkStatus() returns pdTRUE if the
             * Link Status has changes since it was called the last time.
             */
            if( xSTM32H_GetPhyLinkStatus( pxMyInterface ) == pdFALSE )
 80188b0:	4b12      	ldr	r3, [pc, #72]	@ (80188fc <prvEMACHandlerTask+0x148>)
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	4618      	mov	r0, r3
 80188b6:	f7ff fccf 	bl	8018258 <xSTM32H_GetPhyLinkStatus>
 80188ba:	4603      	mov	r3, r0
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d10b      	bne.n	80188d8 <prvEMACHandlerTask+0x124>
            {
                /* Stop the DMA transfer. */
                HAL_ETH_Stop_IT( &( xEthHandle ) );
 80188c0:	4809      	ldr	r0, [pc, #36]	@ (80188e8 <prvEMACHandlerTask+0x134>)
 80188c2:	f000 f9d1 	bl	8018c68 <HAL_ETH_Stop_IT>
                /* Clear the Transmit buffers. */
                memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 80188c6:	2260      	movs	r2, #96	@ 0x60
 80188c8:	2100      	movs	r1, #0
 80188ca:	480d      	ldr	r0, [pc, #52]	@ (8018900 <prvEMACHandlerTask+0x14c>)
 80188cc:	f009 ff65 	bl	802279a <memset>
                /* Since the link is down, clear the descriptors. */
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 80188d0:	4805      	ldr	r0, [pc, #20]	@ (80188e8 <prvEMACHandlerTask+0x134>)
 80188d2:	f001 facd 	bl	8019e70 <ETH_Clear_Tx_Descriptors>
 80188d6:	e777      	b.n	80187c8 <prvEMACHandlerTask+0x14>
            }
            else
            {
                /* Something has changed to a Link Status, need re-check. */
                prvEthernetUpdateConfig( pdFALSE );
 80188d8:	2000      	movs	r0, #0
 80188da:	f7ff fd91 	bl	8018400 <prvEthernetUpdateConfig>
    {
 80188de:	e773      	b.n	80187c8 <prvEMACHandlerTask+0x14>
 80188e0:	200023f0 	.word	0x200023f0
 80188e4:	08027684 	.word	0x08027684
 80188e8:	200023f8 	.word	0x200023f8
 80188ec:	0802769c 	.word	0x0802769c
 80188f0:	200023e8 	.word	0x200023e8
 80188f4:	200023f4 	.word	0x200023f4
 80188f8:	200024a8 	.word	0x200024a8
 80188fc:	200024a0 	.word	0x200024a0
 8018900:	24040060 	.word	0x24040060

08018904 <set_error_state>:
 */
#ifdef HAL_ETH_MODULE_ENABLED

    static void set_error_state( ETH_HandleTypeDef * heth,
                                 uint32_t ulState )
    {
 8018904:	b480      	push	{r7}
 8018906:	b083      	sub	sp, #12
 8018908:	af00      	add	r7, sp, #0
 801890a:	6078      	str	r0, [r7, #4]
 801890c:	6039      	str	r1, [r7, #0]
        heth->gState = ulState;
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	683a      	ldr	r2, [r7, #0]
 8018912:	659a      	str	r2, [r3, #88]	@ 0x58
    }
 8018914:	bf00      	nop
 8018916:	370c      	adds	r7, #12
 8018918:	46bd      	mov	sp, r7
 801891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801891e:	4770      	bx	lr

08018920 <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 8018920:	b580      	push	{r7, lr}
 8018922:	b084      	sub	sp, #16
 8018924:	af00      	add	r7, sp, #0
 8018926:	6078      	str	r0, [r7, #4]
            uint32_t tickstart;

            if( heth == NULL )
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	2b00      	cmp	r3, #0
 801892c:	d101      	bne.n	8018932 <HAL_ETH_Init+0x12>
            {
                return HAL_ERROR;
 801892e:	2301      	movs	r3, #1
 8018930:	e0d4      	b.n	8018adc <HAL_ETH_Init+0x1bc>
                    /* Init the low level hardware */
                    heth->MspInitCallback( heth );
                }
            #else /* if ( USE_HAL_ETH_REGISTER_CALLBACKS == 1 ) */
                /* Check the ETH peripheral state */
                if( heth->gState == HAL_ETH_STATE_RESET )
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018936:	2b00      	cmp	r3, #0
 8018938:	d102      	bne.n	8018940 <HAL_ETH_Init+0x20>
                {
                    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                    HAL_ETH_MspInit( heth );
 801893a:	6878      	ldr	r0, [r7, #4]
 801893c:	f7e9 fc02 	bl	8002144 <HAL_ETH_MspInit>
                }
            #endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

            heth->gState = HAL_ETH_STATE_BUSY;
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	2223      	movs	r2, #35	@ 0x23
 8018944:	659a      	str	r2, [r3, #88]	@ 0x58

            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8018946:	4b67      	ldr	r3, [pc, #412]	@ (8018ae4 <HAL_ETH_Init+0x1c4>)
 8018948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801894c:	4a65      	ldr	r2, [pc, #404]	@ (8018ae4 <HAL_ETH_Init+0x1c4>)
 801894e:	f043 0302 	orr.w	r3, r3, #2
 8018952:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8018956:	4b63      	ldr	r3, [pc, #396]	@ (8018ae4 <HAL_ETH_Init+0x1c4>)
 8018958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801895c:	f003 0302 	and.w	r3, r3, #2
 8018960:	60bb      	str	r3, [r7, #8]
 8018962:	68bb      	ldr	r3, [r7, #8]

            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	7a1b      	ldrb	r3, [r3, #8]
 8018968:	2b00      	cmp	r3, #0
 801896a:	d103      	bne.n	8018974 <HAL_ETH_Init+0x54>
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_MII );
 801896c:	2000      	movs	r0, #0
 801896e:	f001 fc17 	bl	801a1a0 <HAL_SYSCFG_ETHInterfaceSelect>
 8018972:	e003      	b.n	801897c <HAL_ETH_Init+0x5c>
            }
            else
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 8018974:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8018978:	f001 fc12 	bl	801a1a0 <HAL_SYSCFG_ETHInterfaceSelect>
            }

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	687a      	ldr	r2, [r7, #4]
 8018988:	6812      	ldr	r2, [r2, #0]
 801898a:	f043 0301 	orr.w	r3, r3, #1
 801898e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018992:	6013      	str	r3, [r2, #0]

            /* Get tick */
            tickstart = HAL_GetTick();
 8018994:	f001 fbc8 	bl	801a128 <HAL_GetTick>
 8018998:	60f8      	str	r0, [r7, #12]

            /* Wait for software reset */
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 801899a:	e010      	b.n	80189be <HAL_ETH_Init+0x9e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 801899c:	f001 fbc4 	bl	801a128 <HAL_GetTick>
 80189a0:	4602      	mov	r2, r0
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	1ad3      	subs	r3, r2, r3
 80189a6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80189aa:	d908      	bls.n	80189be <HAL_ETH_Init+0x9e>
                {
                    /* Set Error Code */
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	2204      	movs	r2, #4
 80189b0:	661a      	str	r2, [r3, #96]	@ 0x60
                    /* Set State as Error */
                    set_error_state( heth, HAL_ETH_STATE_ERROR );
 80189b2:	21e0      	movs	r1, #224	@ 0xe0
 80189b4:	6878      	ldr	r0, [r7, #4]
 80189b6:	f7ff ffa5 	bl	8018904 <set_error_state>
                    /* Return Error */
                    return HAL_ERROR;
 80189ba:	2301      	movs	r3, #1
 80189bc:	e08e      	b.n	8018adc <HAL_ETH_Init+0x1bc>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	f003 0301 	and.w	r3, r3, #1
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d1e5      	bne.n	801899c <HAL_ETH_Init+0x7c>
                }
            }

            /*------------------ MDIO CSR Clock Range Configuration --------------------*/
            ETH_MAC_MDIO_ClkConfig( heth );
 80189d0:	6878      	ldr	r0, [r7, #4]
 80189d2:	f001 f94b 	bl	8019c6c <ETH_MAC_MDIO_ClkConfig>

            /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 80189d6:	f004 ff49 	bl	801d86c <HAL_RCC_GetHCLKFreq>
 80189da:	4603      	mov	r3, r0
 80189dc:	4a42      	ldr	r2, [pc, #264]	@ (8018ae8 <HAL_ETH_Init+0x1c8>)
 80189de:	fba2 2303 	umull	r2, r3, r2, r3
 80189e2:	0c9a      	lsrs	r2, r3, #18
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	3a01      	subs	r2, #1
 80189ea:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

            /*------------------ MAC, MTL and DMA default Configuration ----------------*/
            ETH_MACDMAConfig( heth );
 80189ee:	6878      	ldr	r0, [r7, #4]
 80189f0:	f001 f89e 	bl	8019b30 <ETH_MACDMAConfig>

            /* SET DSL to 64 bit */
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80189fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8018a00:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8018a04:	687a      	ldr	r2, [r7, #4]
 8018a06:	6812      	ldr	r2, [r2, #0]
 8018a08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8018a0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018a10:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /* Set Receive Buffers Length (must be a multiple of 4) */
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	695b      	ldr	r3, [r3, #20]
 8018a18:	f003 0303 	and.w	r3, r3, #3
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d008      	beq.n	8018a32 <HAL_ETH_Init+0x112>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	2201      	movs	r2, #1
 8018a24:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Set State as Error */
                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018a26:	21e0      	movs	r1, #224	@ 0xe0
 8018a28:	6878      	ldr	r0, [r7, #4]
 8018a2a:	f7ff ff6b 	bl	8018904 <set_error_state>
                /* Return Error */
                return HAL_ERROR;
 8018a2e:	2301      	movs	r3, #1
 8018a30:	e054      	b.n	8018adc <HAL_ETH_Init+0x1bc>
            }
            else
            {
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018a3a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8018a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8018aec <HAL_ETH_Init+0x1cc>)
 8018a40:	4013      	ands	r3, r2
 8018a42:	687a      	ldr	r2, [r7, #4]
 8018a44:	6952      	ldr	r2, [r2, #20]
 8018a46:	0051      	lsls	r1, r2, #1
 8018a48:	687a      	ldr	r2, [r7, #4]
 8018a4a:	6812      	ldr	r2, [r2, #0]
 8018a4c:	430b      	orrs	r3, r1
 8018a4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018a52:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
            }

            /*------------------ DMA Tx Descriptors Configuration ----------------------*/
            ETH_DMATxDescListInit( heth );
 8018a56:	6878      	ldr	r0, [r7, #4]
 8018a58:	f001 f960 	bl	8019d1c <ETH_DMATxDescListInit>

            /*------------------ DMA Rx Descriptors Configuration ----------------------*/
            ETH_DMARxDescListInit( heth );
 8018a5c:	6878      	ldr	r0, [r7, #4]
 8018a5e:	f001 f9a9 	bl	8019db4 <ETH_DMARxDescListInit>

            /*--------------------- ETHERNET MAC Address Configuration ------------------*/
            /* Set MAC addr bits 32 to 47 */
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	685b      	ldr	r3, [r3, #4]
 8018a66:	3305      	adds	r3, #5
 8018a68:	781b      	ldrb	r3, [r3, #0]
 8018a6a:	021a      	lsls	r2, r3, #8
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	685b      	ldr	r3, [r3, #4]
 8018a70:	3304      	adds	r3, #4
 8018a72:	781b      	ldrb	r3, [r3, #0]
 8018a74:	4619      	mov	r1, r3
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	430a      	orrs	r2, r1
 8018a7c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
            /* Set MAC addr bits 0 to 31 */
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	685b      	ldr	r3, [r3, #4]
 8018a84:	3303      	adds	r3, #3
 8018a86:	781b      	ldrb	r3, [r3, #0]
 8018a88:	061a      	lsls	r2, r3, #24
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	685b      	ldr	r3, [r3, #4]
 8018a8e:	3302      	adds	r3, #2
 8018a90:	781b      	ldrb	r3, [r3, #0]
 8018a92:	041b      	lsls	r3, r3, #16
 8018a94:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	685b      	ldr	r3, [r3, #4]
 8018a9a:	3301      	adds	r3, #1
 8018a9c:	781b      	ldrb	r3, [r3, #0]
 8018a9e:	021b      	lsls	r3, r3, #8
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018aa0:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	685b      	ldr	r3, [r3, #4]
 8018aa6:	781b      	ldrb	r3, [r3, #0]
 8018aa8:	4619      	mov	r1, r3
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	681b      	ldr	r3, [r3, #0]
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8018aae:	430a      	orrs	r2, r1
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018ab0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	2200      	movs	r2, #0
 8018ab8:	661a      	str	r2, [r3, #96]	@ 0x60
            heth->gState = HAL_ETH_STATE_READY;
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	2210      	movs	r2, #16
 8018abe:	659a      	str	r2, [r3, #88]	@ 0x58
            heth->RxState = HAL_ETH_STATE_READY;
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	2210      	movs	r2, #16
 8018ac4:	65da      	str	r2, [r3, #92]	@ 0x5c
             * Disable the interrupts that are related to the MMC counters.
             * These interrupts are enabled by default. The interrupt can
             * only be acknowledged by reading the corresponding counter.
             */

            heth->Instance->MMCRIMR =
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	4a09      	ldr	r2, [pc, #36]	@ (8018af0 <HAL_ETH_Init+0x1d0>)
 8018acc:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
                ETH_MMCRIMR_RXLPIUSCIM |  /* RXLPIUSC */
                ETH_MMCRIMR_RXUCGPIM |    /* RXUCASTG */
                ETH_MMCRIMR_RXALGNERPIM | /* RXALGNERR */
                ETH_MMCRIMR_RXCRCERPIM;   /* RXCRCERR */

            heth->Instance->MMCTIMR =
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	4a07      	ldr	r2, [pc, #28]	@ (8018af4 <HAL_ETH_Init+0x1d4>)
 8018ad6:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
                ETH_MMCTIMR_TXLPIUSCIM | /* TXLPIUSC */
                ETH_MMCTIMR_TXGPKTIM |   /* TXPKTG */
                ETH_MMCTIMR_TXMCOLGPIM | /* TXMULTCOLG */
                ETH_MMCTIMR_TXSCOLGPIM;  /* TXSNGLCOLG */

            return HAL_OK;
 8018ada:	2300      	movs	r3, #0
        }
 8018adc:	4618      	mov	r0, r3
 8018ade:	3710      	adds	r7, #16
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	bd80      	pop	{r7, pc}
 8018ae4:	58024400 	.word	0x58024400
 8018ae8:	431bde83 	.word	0x431bde83
 8018aec:	ffff8001 	.word	0xffff8001
 8018af0:	0c020060 	.word	0x0c020060
 8018af4:	0c20c000 	.word	0x0c20c000

08018af8 <HAL_ETH_DescAssignMemory>:
 */
        HAL_StatusTypeDef HAL_ETH_DescAssignMemory( ETH_HandleTypeDef * heth,
                                                    uint32_t Index,
                                                    uint8_t * pBuffer1,
                                                    uint8_t * pBuffer2 )
        {
 8018af8:	b480      	push	{r7}
 8018afa:	b087      	sub	sp, #28
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	60f8      	str	r0, [r7, #12]
 8018b00:	60b9      	str	r1, [r7, #8]
 8018b02:	607a      	str	r2, [r7, #4]
 8018b04:	603b      	str	r3, [r7, #0]
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	68ba      	ldr	r2, [r7, #8]
 8018b0a:	320c      	adds	r2, #12
 8018b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b10:	617b      	str	r3, [r7, #20]

            if( ( pBuffer1 == NULL ) || ( Index >= ( uint32_t ) ETH_RX_DESC_CNT ) )
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d002      	beq.n	8018b1e <HAL_ETH_DescAssignMemory+0x26>
 8018b18:	68bb      	ldr	r3, [r7, #8]
 8018b1a:	2b03      	cmp	r3, #3
 8018b1c:	d904      	bls.n	8018b28 <HAL_ETH_DescAssignMemory+0x30>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	2201      	movs	r2, #1
 8018b22:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Return Error */
                return HAL_ERROR;
 8018b24:	2301      	movs	r3, #1
 8018b26:	e014      	b.n	8018b52 <HAL_ETH_DescAssignMemory+0x5a>
            }

            /* write buffer address to RDES0 */
            WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pBuffer1 );
 8018b28:	687a      	ldr	r2, [r7, #4]
 8018b2a:	697b      	ldr	r3, [r7, #20]
 8018b2c:	601a      	str	r2, [r3, #0]
            /* store buffer address */
            WRITE_REG( dmarxdesc->BackupAddr0, ( uint32_t ) pBuffer1 );
 8018b2e:	687a      	ldr	r2, [r7, #4]
 8018b30:	697b      	ldr	r3, [r7, #20]
 8018b32:	611a      	str	r2, [r3, #16]
            /* set buffer address valid bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 8018b34:	697b      	ldr	r3, [r7, #20]
 8018b36:	68db      	ldr	r3, [r3, #12]
 8018b38:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8018b3c:	697b      	ldr	r3, [r7, #20]
 8018b3e:	60da      	str	r2, [r3, #12]
/*		/ * set buffer 2 address valid bit to RDES3 * / */
/*		SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V); */
/*	} */

            /* set OWN bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 8018b40:	697b      	ldr	r3, [r7, #20]
 8018b42:	68db      	ldr	r3, [r3, #12]
 8018b44:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8018b48:	697b      	ldr	r3, [r7, #20]
 8018b4a:	60da      	str	r2, [r3, #12]
            ( void ) dmarxdesc->DESC3;
 8018b4c:	697b      	ldr	r3, [r7, #20]
 8018b4e:	68db      	ldr	r3, [r3, #12]

            return HAL_OK;
 8018b50:	2300      	movs	r3, #0
        }
 8018b52:	4618      	mov	r0, r3
 8018b54:	371c      	adds	r7, #28
 8018b56:	46bd      	mov	sp, r7
 8018b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b5c:	4770      	bx	lr

08018b5e <HAL_ETH_Start_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start_IT( ETH_HandleTypeDef * heth )
        {
 8018b5e:	b480      	push	{r7}
 8018b60:	b085      	sub	sp, #20
 8018b62:	af00      	add	r7, sp, #0
 8018b64:	6078      	str	r0, [r7, #4]
            uint32_t desc_index;

            if( heth->gState == HAL_ETH_STATE_READY )
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018b6a:	2b10      	cmp	r3, #16
 8018b6c:	d175      	bne.n	8018c5a <HAL_ETH_Start_IT+0xfc>
            {
                heth->gState = HAL_ETH_STATE_BUSY;
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	2223      	movs	r2, #35	@ 0x23
 8018b72:	659a      	str	r2, [r3, #88]	@ 0x58

                /* Set IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8018b74:	2300      	movs	r3, #0
 8018b76:	60fb      	str	r3, [r7, #12]
 8018b78:	e00e      	b.n	8018b98 <HAL_ETH_Start_IT+0x3a>
                {
                    ETH_DMADescTypeDef * dma_rx_desc;

                    dma_rx_desc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ desc_index ];
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	68fa      	ldr	r2, [r7, #12]
 8018b7e:	320c      	adds	r2, #12
 8018b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b84:	60bb      	str	r3, [r7, #8]
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 8018b86:	68bb      	ldr	r3, [r7, #8]
 8018b88:	68db      	ldr	r3, [r3, #12]
 8018b8a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8018b8e:	68bb      	ldr	r3, [r7, #8]
 8018b90:	60da      	str	r2, [r3, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	3301      	adds	r3, #1
 8018b96:	60fb      	str	r3, [r7, #12]
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	2b03      	cmp	r3, #3
 8018b9c:	d9ed      	bls.n	8018b7a <HAL_ETH_Start_IT+0x1c>
                }

                /* save IT mode to ETH Handle */
                heth->RxDescList.ItMode = 1U;
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	2201      	movs	r2, #1
 8018ba2:	651a      	str	r2, [r3, #80]	@ 0x50

                /* Enable the MAC transmission */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	681a      	ldr	r2, [r3, #0]
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	f042 0202 	orr.w	r2, r2, #2
 8018bb2:	601a      	str	r2, [r3, #0]

                /* Enable the MAC reception */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	681a      	ldr	r2, [r3, #0]
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	f042 0201 	orr.w	r2, r2, #1
 8018bc2:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	f042 0201 	orr.w	r2, r2, #1
 8018bd4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Enable the DMA transmission */
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018be0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8018be4:	687a      	ldr	r2, [r7, #4]
 8018be6:	6812      	ldr	r2, [r2, #0]
 8018be8:	f043 0301 	orr.w	r3, r3, #1
 8018bec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018bf0:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Enable the DMA reception */
                SET_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018bfc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8018c00:	687a      	ldr	r2, [r7, #4]
 8018c02:	6812      	ldr	r2, [r2, #0]
 8018c04:	f043 0301 	orr.w	r3, r3, #1
 8018c08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018c0c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Clear Tx and Rx process stopped flags */
                heth->Instance->DMACSR |= ( ETH_DMACSR_TPS | ETH_DMACSR_RPS );
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018c18:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018c1c:	687a      	ldr	r2, [r7, #4]
 8018c1e:	6812      	ldr	r2, [r2, #0]
 8018c20:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8018c24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018c28:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                /* Enable ETH DMA interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_ENABLE_IT( heth,
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018c34:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	681a      	ldr	r2, [r3, #0]
 8018c3c:	f24d 0341 	movw	r3, #53313	@ 0xd041
 8018c40:	430b      	orrs	r3, r1
 8018c42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018c46:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                         ETH_DMACIER_RIE |  /* Receive Interrupt Enable */
                                         ETH_DMACIER_TIE |  /* Transmit Interrupt Enable */
                                         ETH_DMACIER_FBEE | /* Fatal Bus Error Enable */
                                         ETH_DMACIER_AIE ); /* Abnormal Interrupt Summary Enable */

                heth->gState = HAL_ETH_STATE_READY;
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	2210      	movs	r2, #16
 8018c4e:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	2222      	movs	r2, #34	@ 0x22
 8018c54:	65da      	str	r2, [r3, #92]	@ 0x5c

                return HAL_OK;
 8018c56:	2300      	movs	r3, #0
 8018c58:	e000      	b.n	8018c5c <HAL_ETH_Start_IT+0xfe>
            }
            else
            {
                return HAL_ERROR;
 8018c5a:	2301      	movs	r3, #1
            }
        }
 8018c5c:	4618      	mov	r0, r3
 8018c5e:	3714      	adds	r7, #20
 8018c60:	46bd      	mov	sp, r7
 8018c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c66:	4770      	bx	lr

08018c68 <HAL_ETH_Stop_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop_IT( ETH_HandleTypeDef * heth )
        {
 8018c68:	b480      	push	{r7}
 8018c6a:	b085      	sub	sp, #20
 8018c6c:	af00      	add	r7, sp, #0
 8018c6e:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t descindex;

            if( heth->gState != HAL_ETH_STATE_RESET )
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d066      	beq.n	8018d46 <HAL_ETH_Stop_IT+0xde>
            {
                /* Set the ETH peripheral state to BUSY */
                heth->gState = HAL_ETH_STATE_BUSY;
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	2223      	movs	r2, #35	@ 0x23
 8018c7c:	659a      	str	r2, [r3, #88]	@ 0x58
                /* Disable interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018c86:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	681a      	ldr	r2, [r3, #0]
 8018c8e:	4b31      	ldr	r3, [pc, #196]	@ (8018d54 <HAL_ETH_Stop_IT+0xec>)
 8018c90:	400b      	ands	r3, r1
 8018c92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018c96:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                                  ETH_DMACIER_FBEE | ETH_DMACIER_AIE ) );

                /* Disable the DMA transmission */
                CLEAR_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018ca2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8018ca6:	687a      	ldr	r2, [r7, #4]
 8018ca8:	6812      	ldr	r2, [r2, #0]
 8018caa:	f023 0301 	bic.w	r3, r3, #1
 8018cae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018cb2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Disable the DMA reception */
                CLEAR_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018cbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8018cc2:	687a      	ldr	r2, [r7, #4]
 8018cc4:	6812      	ldr	r2, [r2, #0]
 8018cc6:	f023 0301 	bic.w	r3, r3, #1
 8018cca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018cce:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Disable the MAC reception */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	681a      	ldr	r2, [r3, #0]
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	f022 0201 	bic.w	r2, r2, #1
 8018ce0:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	f042 0201 	orr.w	r2, r2, #1
 8018cf2:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Disable the MAC transmission */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	681a      	ldr	r2, [r3, #0]
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	f022 0202 	bic.w	r2, r2, #2
 8018d04:	601a      	str	r2, [r3, #0]

                /* Clear IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8018d06:	2300      	movs	r3, #0
 8018d08:	60fb      	str	r3, [r7, #12]
 8018d0a:	e00e      	b.n	8018d2a <HAL_ETH_Stop_IT+0xc2>
                {
                    dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ descindex ];
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	68fa      	ldr	r2, [r7, #12]
 8018d10:	320c      	adds	r2, #12
 8018d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d16:	60bb      	str	r3, [r7, #8]
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 8018d18:	68bb      	ldr	r3, [r7, #8]
 8018d1a:	68db      	ldr	r3, [r3, #12]
 8018d1c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8018d20:	68bb      	ldr	r3, [r7, #8]
 8018d22:	60da      	str	r2, [r3, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	3301      	adds	r3, #1
 8018d28:	60fb      	str	r3, [r7, #12]
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	2b03      	cmp	r3, #3
 8018d2e:	d9ed      	bls.n	8018d0c <HAL_ETH_Stop_IT+0xa4>
                }

                heth->RxDescList.ItMode = 0U;
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	2200      	movs	r2, #0
 8018d34:	651a      	str	r2, [r3, #80]	@ 0x50

                heth->gState = HAL_ETH_STATE_READY;
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	2210      	movs	r2, #16
 8018d3a:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_READY;
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	2210      	movs	r2, #16
 8018d40:	65da      	str	r2, [r3, #92]	@ 0x5c

                /* Return function status */
                return HAL_OK;
 8018d42:	2300      	movs	r3, #0
 8018d44:	e000      	b.n	8018d48 <HAL_ETH_Stop_IT+0xe0>
            }
            else
            {
                return HAL_ERROR;
 8018d46:	2301      	movs	r3, #1
            }
        }
 8018d48:	4618      	mov	r0, r3
 8018d4a:	3714      	adds	r7, #20
 8018d4c:	46bd      	mov	sp, r7
 8018d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d52:	4770      	bx	lr
 8018d54:	ffff2fbe 	.word	0xffff2fbe

08018d58 <HAL_ETH_Transmit_IT>:
 * @param  pTxConfig: Hold the configuration of packet to be transmitted
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Transmit_IT( ETH_HandleTypeDef * heth,
                                               ETH_TxPacketConfig * pTxConfig )
        {
 8018d58:	b580      	push	{r7, lr}
 8018d5a:	b082      	sub	sp, #8
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	6078      	str	r0, [r7, #4]
 8018d60:	6039      	str	r1, [r7, #0]
            if( pTxConfig == NULL )
 8018d62:	683b      	ldr	r3, [r7, #0]
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d107      	bne.n	8018d78 <HAL_ETH_Transmit_IT+0x20>
            {
                heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018d6c:	f043 0201 	orr.w	r2, r3, #1
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	661a      	str	r2, [r3, #96]	@ 0x60
                return HAL_ERROR;
 8018d74:	2301      	movs	r3, #1
 8018d76:	e039      	b.n	8018dec <HAL_ETH_Transmit_IT+0x94>
            }

            if( heth->gState == HAL_ETH_STATE_READY )
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018d7c:	2b10      	cmp	r3, #16
 8018d7e:	d134      	bne.n	8018dea <HAL_ETH_Transmit_IT+0x92>
            {
                /* Config DMA Tx descriptor by Tx Packet info */
                if( ETH_Prepare_Tx_Descriptors( heth, pTxConfig, 1 ) != HAL_ETH_ERROR_NONE )
 8018d80:	2201      	movs	r2, #1
 8018d82:	6839      	ldr	r1, [r7, #0]
 8018d84:	6878      	ldr	r0, [r7, #4]
 8018d86:	f001 f8c1 	bl	8019f0c <ETH_Prepare_Tx_Descriptors>
 8018d8a:	4603      	mov	r3, r0
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d007      	beq.n	8018da0 <HAL_ETH_Transmit_IT+0x48>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018d94:	f043 0202 	orr.w	r2, r3, #2
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	661a      	str	r2, [r3, #96]	@ 0x60
                    return HAL_ERROR;
 8018d9c:	2301      	movs	r3, #1
 8018d9e:	e025      	b.n	8018dec <HAL_ETH_Transmit_IT+0x94>
                }

                /* Incr current tx desc index */
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018da4:	1c5a      	adds	r2, r3, #1
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	629a      	str	r2, [r3, #40]	@ 0x28
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018dae:	2b03      	cmp	r3, #3
 8018db0:	d904      	bls.n	8018dbc <HAL_ETH_Transmit_IT+0x64>
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018db6:	1f1a      	subs	r2, r3, #4
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	629a      	str	r2, [r3, #40]	@ 0x28
                 * DMACTDTPR: "Channel Tx descriptor tail pointer register (ETH_DMACTXDTPR)
                 * The hardware tries to transmit all packets referenced by the
                 * descriptors between the head and the tail pointer registers.
                 */

                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	681a      	ldr	r2, [r3, #0]
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	3106      	adds	r1, #6
 8018dc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018dcc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018dd0:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  __ASM volatile ("dsb 0xF":::"memory");
 8018dd4:	f3bf 8f4f 	dsb	sy
}
 8018dd8:	bf00      	nop
                /* Memory barrier. */
                __DSB();
                /* Read-back the value just written. */
                ( void ) heth->Instance->DMACTDTPR;
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018de2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120

                return HAL_OK;
 8018de6:	2300      	movs	r3, #0
 8018de8:	e000      	b.n	8018dec <HAL_ETH_Transmit_IT+0x94>
            }
            else
            {
                return HAL_ERROR;
 8018dea:	2301      	movs	r3, #1
            }
        }
 8018dec:	4618      	mov	r0, r3
 8018dee:	3708      	adds	r7, #8
 8018df0:	46bd      	mov	sp, r7
 8018df2:	bd80      	pop	{r7, pc}

08018df4 <HAL_ETH_IsRxDataAvailable>:
 *         the configuration information for ETHERNET module
 * @retval  1: A Packet is received
 *          0: no Packet received
 */
        uint8_t HAL_ETH_IsRxDataAvailable( ETH_HandleTypeDef * heth )
        {
 8018df4:	b580      	push	{r7, lr}
 8018df6:	b08a      	sub	sp, #40	@ 0x28
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	6078      	str	r0, [r7, #4]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	3330      	adds	r3, #48	@ 0x30
 8018e00:	61bb      	str	r3, [r7, #24]
            uint32_t desc_index = dmarxdesclist->CurRxDesc;
 8018e02:	69bb      	ldr	r3, [r7, #24]
 8018e04:	691b      	ldr	r3, [r3, #16]
 8018e06:	627b      	str	r3, [r7, #36]	@ 0x24
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018e08:	69bb      	ldr	r3, [r7, #24]
 8018e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018e10:	617b      	str	r3, [r7, #20]
            uint32_t desc_scan_count = 0;
 8018e12:	2300      	movs	r3, #0
 8018e14:	623b      	str	r3, [r7, #32]
            uint32_t app_desc_count = 0;       /* Number of descriptors in received packet. */
 8018e16:	2300      	movs	r3, #0
 8018e18:	613b      	str	r3, [r7, #16]
            uint32_t first_app_desc_index = 0; /* Index of the first descriptor of received packet.. */
 8018e1a:	2300      	movs	r3, #0
 8018e1c:	61fb      	str	r3, [r7, #28]

            /* Check if descriptor is not owned by DMA */
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 8018e1e:	e055      	b.n	8018ecc <HAL_ETH_IsRxDataAvailable+0xd8>
                   ( desc_scan_count < ( uint32_t ) ETH_RX_DESC_CNT ) )
            {
                uint32_t ulDesc3 = dmarxdesc->DESC3;
 8018e20:	697b      	ldr	r3, [r7, #20]
 8018e22:	68db      	ldr	r3, [r3, #12]
 8018e24:	60fb      	str	r3, [r7, #12]
                desc_scan_count++;
 8018e26:	6a3b      	ldr	r3, [r7, #32]
 8018e28:	3301      	adds	r3, #1
 8018e2a:	623b      	str	r3, [r7, #32]

                /* FreeRTOS+TCP only handles packets that fit in 1 descriptor. */
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 8018e2c:	68fb      	ldr	r3, [r7, #12]
 8018e2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d006      	beq.n	8018e44 <HAL_ETH_IsRxDataAvailable+0x50>
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d001      	beq.n	8018e44 <HAL_ETH_IsRxDataAvailable+0x50>
 8018e40:	2301      	movs	r3, #1
 8018e42:	e000      	b.n	8018e46 <HAL_ETH_IsRxDataAvailable+0x52>
 8018e44:	2300      	movs	r3, #0
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d104      	bne.n	8018e54 <HAL_ETH_IsRxDataAvailable+0x60>
 8018e4a:	f240 4195 	movw	r1, #1173	@ 0x495
 8018e4e:	482b      	ldr	r0, [pc, #172]	@ (8018efc <HAL_ETH_IsRxDataAvailable+0x108>)
 8018e50:	f7e8 fd82 	bl	8001958 <vAssertCalled>

                /* Check if last descriptor */
                if( READ_BIT( ulDesc3, ETH_DMARXNDESCWBF_LD ) != ( uint32_t ) RESET )
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d036      	beq.n	8018ecc <HAL_ETH_IsRxDataAvailable+0xd8>
                {
                    /* Increment the number of descriptors to be passed to the application */
                    app_desc_count += 1U;
 8018e5e:	693b      	ldr	r3, [r7, #16]
 8018e60:	3301      	adds	r3, #1
 8018e62:	613b      	str	r3, [r7, #16]

                    if( app_desc_count == 1U )
 8018e64:	693b      	ldr	r3, [r7, #16]
 8018e66:	2b01      	cmp	r3, #1
 8018e68:	d101      	bne.n	8018e6e <HAL_ETH_IsRxDataAvailable+0x7a>
                    {
                        first_app_desc_index = desc_index;
 8018e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e6c:	61fb      	str	r3, [r7, #28]
                    }

                    /* Increment current rx descriptor index */
                    INCR_RX_DESC_INDEX( desc_index, 1U );
 8018e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e70:	3301      	adds	r3, #1
 8018e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8018e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e76:	2b03      	cmp	r3, #3
 8018e78:	d902      	bls.n	8018e80 <HAL_ETH_IsRxDataAvailable+0x8c>
 8018e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e7c:	3b04      	subs	r3, #4
 8018e7e:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* Check for Context descriptor */
                    /* Get current descriptor address */
                    dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018e80:	69bb      	ldr	r3, [r7, #24]
 8018e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018e88:	617b      	str	r3, [r7, #20]

                    if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET )
 8018e8a:	697b      	ldr	r3, [r7, #20]
 8018e8c:	68db      	ldr	r3, [r3, #12]
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	db11      	blt.n	8018eb6 <HAL_ETH_IsRxDataAvailable+0xc2>
                    {
                        /* If IEEE 1588 timestamp feature is enabled, the DMA stores the timestamp
                        * (if available). The DMA writes the context descriptor after the last
                        * descriptor for the current packet (in the next available descriptor). */
                        if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_CTXT ) != ( uint32_t ) RESET )
 8018e92:	697b      	ldr	r3, [r7, #20]
 8018e94:	68db      	ldr	r3, [r3, #12]
 8018e96:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d00b      	beq.n	8018eb6 <HAL_ETH_IsRxDataAvailable+0xc2>
                        {
                            /* Increment the number of descriptors to be passed to the application */
                            dmarxdesclist->AppContextDesc = 1;
 8018e9e:	69bb      	ldr	r3, [r7, #24]
 8018ea0:	2201      	movs	r2, #1
 8018ea2:	61da      	str	r2, [r3, #28]
                            /* Increment current rx descriptor index */
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 8018ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ea6:	3301      	adds	r3, #1
 8018ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8018eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018eac:	2b03      	cmp	r3, #3
 8018eae:	d902      	bls.n	8018eb6 <HAL_ETH_IsRxDataAvailable+0xc2>
 8018eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018eb2:	3b04      	subs	r3, #4
 8018eb4:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                    }

                    /* Fill information to Rx descriptors list */
                    dmarxdesclist->CurRxDesc = desc_index;
 8018eb6:	69bb      	ldr	r3, [r7, #24]
 8018eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018eba:	611a      	str	r2, [r3, #16]
                    dmarxdesclist->FirstAppDesc = first_app_desc_index;
 8018ebc:	69bb      	ldr	r3, [r7, #24]
 8018ebe:	69fa      	ldr	r2, [r7, #28]
 8018ec0:	615a      	str	r2, [r3, #20]
                    dmarxdesclist->AppDescNbr = app_desc_count;
 8018ec2:	69bb      	ldr	r3, [r7, #24]
 8018ec4:	693a      	ldr	r2, [r7, #16]
 8018ec6:	619a      	str	r2, [r3, #24]

                    /* Return function status */
                    return 1;
 8018ec8:	2301      	movs	r3, #1
 8018eca:	e012      	b.n	8018ef2 <HAL_ETH_IsRxDataAvailable+0xfe>
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 8018ecc:	697b      	ldr	r3, [r7, #20]
 8018ece:	68db      	ldr	r3, [r3, #12]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	db02      	blt.n	8018eda <HAL_ETH_IsRxDataAvailable+0xe6>
 8018ed4:	6a3b      	ldr	r3, [r7, #32]
 8018ed6:	2b03      	cmp	r3, #3
 8018ed8:	d9a2      	bls.n	8018e20 <HAL_ETH_IsRxDataAvailable+0x2c>
/*			/ * Get current descriptor address * / */
/*			dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[desc_index]; */
/*		} */
            } /* while ( OWN == 0 ) */

            configASSERT( app_desc_count == 0 );
 8018eda:	693b      	ldr	r3, [r7, #16]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d004      	beq.n	8018eea <HAL_ETH_IsRxDataAvailable+0xf6>
 8018ee0:	f240 41db 	movw	r1, #1243	@ 0x4db
 8018ee4:	4805      	ldr	r0, [pc, #20]	@ (8018efc <HAL_ETH_IsRxDataAvailable+0x108>)
 8018ee6:	f7e8 fd37 	bl	8001958 <vAssertCalled>
/*		/ * Set the Tail pointer address to the last rx descriptor hold by the app * / */
/*		WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc); */
/*	} */

            /* Fill information to Rx descriptors list: No received Packet */
            dmarxdesclist->AppDescNbr = 0U;
 8018eea:	69bb      	ldr	r3, [r7, #24]
 8018eec:	2200      	movs	r2, #0
 8018eee:	619a      	str	r2, [r3, #24]

            return 0;
 8018ef0:	2300      	movs	r3, #0
        }
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	3728      	adds	r7, #40	@ 0x28
 8018ef6:	46bd      	mov	sp, r7
 8018ef8:	bd80      	pop	{r7, pc}
 8018efa:	bf00      	nop
 8018efc:	080276b4 	.word	0x080276b4

08018f00 <HAL_ETH_GetRxData>:
 * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
 * @retval HAL status
 */
        size_t HAL_ETH_GetRxData( ETH_HandleTypeDef * heth,
                                  ETH_BufferTypeDef * RxBuffer )
        {
 8018f00:	b580      	push	{r7, lr}
 8018f02:	b086      	sub	sp, #24
 8018f04:	af00      	add	r7, sp, #0
 8018f06:	6078      	str	r0, [r7, #4]
 8018f08:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &( heth->RxDescList );
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	3330      	adds	r3, #48	@ 0x30
 8018f0e:	617b      	str	r3, [r7, #20]
            uint32_t desc_index;
            uint32_t packet_length;
            __IO const ETH_DMADescTypeDef * dma_rx_desc;

            configASSERT( RxBuffer != NULL );
 8018f10:	683b      	ldr	r3, [r7, #0]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d104      	bne.n	8018f20 <HAL_ETH_GetRxData+0x20>
 8018f16:	f240 511f 	movw	r1, #1311	@ 0x51f
 8018f1a:	481c      	ldr	r0, [pc, #112]	@ (8018f8c <HAL_ETH_GetRxData+0x8c>)
 8018f1c:	f7e8 fd1c 	bl	8001958 <vAssertCalled>

            if( HAL_ETH_IsRxDataAvailable( heth ) == 0U )
 8018f20:	6878      	ldr	r0, [r7, #4]
 8018f22:	f7ff ff67 	bl	8018df4 <HAL_ETH_IsRxDataAvailable>
 8018f26:	4603      	mov	r3, r0
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d101      	bne.n	8018f30 <HAL_ETH_GetRxData+0x30>
            {
                /* No data to be transferred to the application */
                return 0U;
 8018f2c:	2300      	movs	r3, #0
 8018f2e:	e028      	b.n	8018f82 <HAL_ETH_GetRxData+0x82>
            }

            desc_index = dmarxdesclist->FirstAppDesc;
 8018f30:	697b      	ldr	r3, [r7, #20]
 8018f32:	695b      	ldr	r3, [r3, #20]
 8018f34:	613b      	str	r3, [r7, #16]
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018f36:	697b      	ldr	r3, [r7, #20]
 8018f38:	693a      	ldr	r2, [r7, #16]
 8018f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018f3e:	60fb      	str	r3, [r7, #12]

            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 8018f40:	697b      	ldr	r3, [r7, #20]
 8018f42:	699b      	ldr	r3, [r3, #24]
 8018f44:	2b01      	cmp	r3, #1
 8018f46:	d004      	beq.n	8018f52 <HAL_ETH_GetRxData+0x52>
 8018f48:	f240 512a 	movw	r1, #1322	@ 0x52a
 8018f4c:	480f      	ldr	r0, [pc, #60]	@ (8018f8c <HAL_ETH_GetRxData+0x8c>)
 8018f4e:	f7e8 fd03 	bl	8001958 <vAssertCalled>

            /* last descriptor data length */
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	68db      	ldr	r3, [r3, #12]
 8018f56:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018f5a:	60bb      	str	r3, [r7, #8]

            RxBuffer->buffer = ( uint8_t * ) dma_rx_desc->BackupAddr0;
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	691b      	ldr	r3, [r3, #16]
 8018f60:	461a      	mov	r2, r3
 8018f62:	683b      	ldr	r3, [r7, #0]
 8018f64:	601a      	str	r2, [r3, #0]
            RxBuffer->len = packet_length;
 8018f66:	683b      	ldr	r3, [r7, #0]
 8018f68:	68ba      	ldr	r2, [r7, #8]
 8018f6a:	605a      	str	r2, [r3, #4]

            /* data is in only one buffer */
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	695b      	ldr	r3, [r3, #20]
 8018f70:	68ba      	ldr	r2, [r7, #8]
 8018f72:	429a      	cmp	r2, r3
 8018f74:	d904      	bls.n	8018f80 <HAL_ETH_GetRxData+0x80>
 8018f76:	f240 5133 	movw	r1, #1331	@ 0x533
 8018f7a:	4804      	ldr	r0, [pc, #16]	@ (8018f8c <HAL_ETH_GetRxData+0x8c>)
 8018f7c:	f7e8 fcec 	bl	8001958 <vAssertCalled>

            return packet_length;
 8018f80:	68bb      	ldr	r3, [r7, #8]
        }
 8018f82:	4618      	mov	r0, r3
 8018f84:	3718      	adds	r7, #24
 8018f86:	46bd      	mov	sp, r7
 8018f88:	bd80      	pop	{r7, pc}
 8018f8a:	bf00      	nop
 8018f8c:	080276b4 	.word	0x080276b4

08018f90 <HAL_ETH_BuildRxDescriptors>:
 *         the configuration information for ETHERNET module
 * @retval HAL status.
 */
        HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors( ETH_HandleTypeDef * heth,
                                                      uint8_t * pucNewBuffer )
        {
 8018f90:	b480      	push	{r7}
 8018f92:	b08b      	sub	sp, #44	@ 0x2c
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	6078      	str	r0, [r7, #4]
 8018f98:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	3330      	adds	r3, #48	@ 0x30
 8018f9e:	60fb      	str	r3, [r7, #12]
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	695b      	ldr	r3, [r3, #20]
 8018fa4:	627b      	str	r3, [r7, #36]	@ 0x24
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018fae:	623b      	str	r3, [r7, #32]
            uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	699b      	ldr	r3, [r3, #24]
 8018fb4:	61fb      	str	r3, [r7, #28]
            uint32_t descscan;

            if( dmarxdesclist->AppDescNbr == 0U )
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	699b      	ldr	r3, [r3, #24]
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d101      	bne.n	8018fc2 <HAL_ETH_BuildRxDescriptors+0x32>
            {
                /* No Rx descriptors to build */
                return HAL_ERROR;
 8018fbe:	2301      	movs	r3, #1
 8018fc0:	e057      	b.n	8019072 <HAL_ETH_BuildRxDescriptors+0xe2>
            }

            if( dmarxdesclist->AppContextDesc != 0U )
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	69db      	ldr	r3, [r3, #28]
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	d002      	beq.n	8018fd0 <HAL_ETH_BuildRxDescriptors+0x40>
            {
                /* A context descriptor is available */
                totalappdescnbr += 1U;
 8018fca:	69fb      	ldr	r3, [r7, #28]
 8018fcc:	3301      	adds	r3, #1
 8018fce:	61fb      	str	r3, [r7, #28]
            }

            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8018fd0:	2300      	movs	r3, #0
 8018fd2:	61bb      	str	r3, [r7, #24]
            {
                uint32_t DESC3;
                uint8_t * pucBuffer;

                if( pucNewBuffer != NULL )
 8018fd4:	683b      	ldr	r3, [r7, #0]
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d005      	beq.n	8018fe6 <HAL_ETH_BuildRxDescriptors+0x56>
                {
                    /* Earlier zero-copy RX only: buffer was passed to the application. */
                    pucBuffer = pucNewBuffer;
 8018fda:	683b      	ldr	r3, [r7, #0]
 8018fdc:	613b      	str	r3, [r7, #16]
                    dmarxdesc->BackupAddr0 = ( uint32_t ) pucNewBuffer;
 8018fde:	683a      	ldr	r2, [r7, #0]
 8018fe0:	6a3b      	ldr	r3, [r7, #32]
 8018fe2:	611a      	str	r2, [r3, #16]
 8018fe4:	e002      	b.n	8018fec <HAL_ETH_BuildRxDescriptors+0x5c>
                }
                else
                {
                    /* Keep on using the same buffer as before. */
                    pucBuffer = ( uint8_t * ) dmarxdesc->BackupAddr0;
 8018fe6:	6a3b      	ldr	r3, [r7, #32]
 8018fe8:	691b      	ldr	r3, [r3, #16]
 8018fea:	613b      	str	r3, [r7, #16]
                }

                WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pucBuffer );
 8018fec:	693a      	ldr	r2, [r7, #16]
 8018fee:	6a3b      	ldr	r3, [r7, #32]
 8018ff0:	601a      	str	r2, [r3, #0]
                /* Buffer 1 Address Valid */

                DESC3 = READ_REG( dmarxdesc->DESC3 );
 8018ff2:	6a3b      	ldr	r3, [r7, #32]
 8018ff4:	68db      	ldr	r3, [r3, #12]
 8018ff6:	617b      	str	r3, [r7, #20]
                WRITE_REG( DESC3, ETH_DMARXNDESCRF_BUF1V );
 8018ff8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8018ffc:	617b      	str	r3, [r7, #20]
/*		} */

                /* Should be the last change. */
/*		SET_BIT(DESC3, ETH_DMARXNDESCRF_OWN); */

                if( dmarxdesclist->ItMode != 0U )
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	6a1b      	ldr	r3, [r3, #32]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d003      	beq.n	801900e <HAL_ETH_BuildRxDescriptors+0x7e>
                {
                    /* Interrupt Enabled on Completion */
                    SET_BIT( DESC3, ETH_DMARXNDESCRF_IOC );
 8019006:	697b      	ldr	r3, [r7, #20]
 8019008:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801900c:	617b      	str	r3, [r7, #20]
                }

                /* Now all is ready.. */
                SET_BIT( DESC3, ETH_DMARXNDESCRF_OWN );
 801900e:	697b      	ldr	r3, [r7, #20]
 8019010:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8019014:	617b      	str	r3, [r7, #20]

                WRITE_REG( dmarxdesc->DESC3, DESC3 );
 8019016:	6a3b      	ldr	r3, [r7, #32]
 8019018:	697a      	ldr	r2, [r7, #20]
 801901a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801901c:	f3bf 8f4f 	dsb	sy
}
 8019020:	bf00      	nop

                __DSB();

                /* And read it back. */
                ( void ) dmarxdesc->DESC3;
 8019022:	6a3b      	ldr	r3, [r7, #32]
 8019024:	68db      	ldr	r3, [r3, #12]

                if( descscan >= ( totalappdescnbr - 1U ) )
 8019026:	69fb      	ldr	r3, [r7, #28]
 8019028:	3b01      	subs	r3, #1
 801902a:	69ba      	ldr	r2, [r7, #24]
 801902c:	429a      	cmp	r2, r3
 801902e:	d211      	bcs.n	8019054 <HAL_ETH_BuildRxDescriptors+0xc4>
                {
                    break;
                }

                /* Increment rx descriptor index */
                INCR_RX_DESC_INDEX( desc_index, 1U );
 8019030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019032:	3301      	adds	r3, #1
 8019034:	627b      	str	r3, [r7, #36]	@ 0x24
 8019036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019038:	2b03      	cmp	r3, #3
 801903a:	d902      	bls.n	8019042 <HAL_ETH_BuildRxDescriptors+0xb2>
 801903c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801903e:	3b04      	subs	r3, #4
 8019040:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Get descriptor address */
                dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801904a:	623b      	str	r3, [r7, #32]
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 801904c:	69bb      	ldr	r3, [r7, #24]
 801904e:	3301      	adds	r3, #1
 8019050:	61bb      	str	r3, [r7, #24]
            {
 8019052:	e7bf      	b.n	8018fd4 <HAL_ETH_BuildRxDescriptors+0x44>
                    break;
 8019054:	bf00      	nop
            }

            /* Set the Tail pointer address to the last rx descriptor hold by the app */
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	681a      	ldr	r2, [r3, #0]
 801905a:	6a3b      	ldr	r3, [r7, #32]
 801905c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019060:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

            /* reset the Application desc number */
            dmarxdesclist->AppDescNbr = 0;
 8019064:	68fb      	ldr	r3, [r7, #12]
 8019066:	2200      	movs	r2, #0
 8019068:	619a      	str	r2, [r3, #24]

            /*  reset the application context descriptor */
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	2200      	movs	r2, #0
 801906e:	64da      	str	r2, [r3, #76]	@ 0x4c

            return HAL_OK;
 8019070:	2300      	movs	r3, #0
        }
 8019072:	4618      	mov	r0, r3
 8019074:	372c      	adds	r7, #44	@ 0x2c
 8019076:	46bd      	mov	sp, r7
 8019078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801907c:	4770      	bx	lr
	...

08019080 <HAL_ETH_IRQHandler>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 8019080:	b580      	push	{r7, lr}
 8019082:	b082      	sub	sp, #8
 8019084:	af00      	add	r7, sp, #0
 8019086:	6078      	str	r0, [r7, #4]
            /* ETH interrupt. See heth->DMACSR for details.
             */

            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019090:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019098:	2b40      	cmp	r3, #64	@ 0x40
 801909a:	d115      	bne.n	80190c8 <HAL_ETH_IRQHandler+0x48>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80190a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80190a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80190ac:	2b40      	cmp	r3, #64	@ 0x40
 80190ae:	d10b      	bne.n	80190c8 <HAL_ETH_IRQHandler+0x48>
                        heth->RxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Receive complete callback */
                        HAL_ETH_RxCpltCallback( heth );
 80190b0:	6878      	ldr	r0, [r7, #4]
 80190b2:	f7ff fafc 	bl	80186ae <HAL_ETH_RxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Rx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80190be:	461a      	mov	r2, r3
 80190c0:	f248 0340 	movw	r3, #32832	@ 0x8040
 80190c4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* Packet transmitted */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80190d0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80190d4:	f003 0301 	and.w	r3, r3, #1
 80190d8:	2b01      	cmp	r3, #1
 80190da:	d115      	bne.n	8019108 <HAL_ETH_IRQHandler+0x88>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80190e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80190e8:	f003 0301 	and.w	r3, r3, #1
 80190ec:	2b01      	cmp	r3, #1
 80190ee:	d10b      	bne.n	8019108 <HAL_ETH_IRQHandler+0x88>
                        heth->TxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Transfer complete callback */
                        HAL_ETH_TxCpltCallback( heth );
 80190f0:	6878      	ldr	r0, [r7, #4]
 80190f2:	f7ff fad1 	bl	8018698 <HAL_ETH_TxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Tx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80190fe:	461a      	mov	r2, r3
 8019100:	f248 0301 	movw	r3, #32769	@ 0x8001
 8019104:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* ETH DMA Error */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019110:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019114:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019118:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801911c:	d14f      	bne.n	80191be <HAL_ETH_IRQHandler+0x13e>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019126:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801912a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801912e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8019132:	d144      	bne.n	80191be <HAL_ETH_IRQHandler+0x13e>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019138:	f043 0208 	orr.w	r2, r3, #8
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	661a      	str	r2, [r3, #96]	@ 0x60

                    /* if fatal bus error occurred */
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019148:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801914c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8019150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019154:	d11d      	bne.n	8019192 <HAL_ETH_IRQHandler+0x112>
                    {
                        /* Get DMA error code  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801915e:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8019162:	f241 1302 	movw	r3, #4354	@ 0x1102
 8019166:	4013      	ands	r3, r2
 8019168:	687a      	ldr	r2, [r7, #4]
 801916a:	6653      	str	r3, [r2, #100]	@ 0x64

                        /* Disable all interrupts */
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019174:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8019178:	687a      	ldr	r2, [r7, #4]
 801917a:	6812      	ldr	r2, [r2, #0]
 801917c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8019180:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019184:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

                        /* Set HAL state to ERROR */
                        set_error_state( heth, HAL_ETH_STATE_ERROR );
 8019188:	21e0      	movs	r1, #224	@ 0xe0
 801918a:	6878      	ldr	r0, [r7, #4]
 801918c:	f7ff fbba 	bl	8018904 <set_error_state>
 8019190:	e012      	b.n	80191b8 <HAL_ETH_IRQHandler+0x138>
                    }
                    else
                    {
                        /* Get DMA error status  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801919a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801919e:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	665a      	str	r2, [r3, #100]	@ 0x64
                                                                                 ETH_DMACSR_RBU | ETH_DMACSR_AIS ) );

                        /* Clear the interrupt summary flag */
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80191ae:	461a      	mov	r2, r3
 80191b0:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 80191b4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                        heth->DMAErrorCallback( heth );
                    }
                    #else
                    {
                        /* Ethernet DMA Error callback */
                        HAL_ETH_DMAErrorCallback( heth );
 80191b8:	6878      	ldr	r0, [r7, #4]
 80191ba:	f7ff fa83 	bl	80186c4 <HAL_ETH_DMAErrorCallback>
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
                }
            }

            /* ETH MAC Error IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80191c6:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80191ca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80191ce:	d10f      	bne.n	80191f0 <HAL_ETH_IRQHandler+0x170>
            {
                /* Get MAC Rx Tx status and clear Status register pending bit */
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	669a      	str	r2, [r3, #104]	@ 0x68

                set_error_state( heth, HAL_ETH_STATE_ERROR );
 80191dc:	21e0      	movs	r1, #224	@ 0xe0
 80191de:	6878      	ldr	r0, [r7, #4]
 80191e0:	f7ff fb90 	bl	8018904 <set_error_state>
                    heth->DMAErrorCallback( heth );
                }
                #else
                {
                    /* Ethernet MAC Error callback */
                    HAL_ETH_MACErrorCallback( heth );
 80191e4:	6878      	ldr	r0, [r7, #4]
 80191e6:	f000 f843 	bl	8019270 <HAL_ETH_MACErrorCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	2200      	movs	r2, #0
 80191ee:	669a      	str	r2, [r3, #104]	@ 0x68
            }

            /* ETH PMT IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80191f8:	f003 0310 	and.w	r3, r3, #16
 80191fc:	2b10      	cmp	r3, #16
 80191fe:	d10d      	bne.n	801921c <HAL_ETH_IRQHandler+0x19c>
            {
                /* Get MAC Wake-up source and clear the status register pending bit */
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8019208:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	66da      	str	r2, [r3, #108]	@ 0x6c
                    heth->PMTCallback( heth );
                }
                #else
                {
                    /* Ethernet PMT callback */
                    HAL_ETH_PMTCallback( heth );
 8019210:	6878      	ldr	r0, [r7, #4]
 8019212:	f000 f837 	bl	8019284 <HAL_ETH_PMTCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	2200      	movs	r2, #0
 801921a:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            /* ETH EEE IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019224:	f003 0320 	and.w	r3, r3, #32
 8019228:	2b20      	cmp	r3, #32
 801922a:	d10d      	bne.n	8019248 <HAL_ETH_IRQHandler+0x1c8>
            {
                /* Get MAC LPI interrupt source and clear the status register pending bit */
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8019234:	f003 020f 	and.w	r2, r3, #15
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	671a      	str	r2, [r3, #112]	@ 0x70
                    heth->EEECallback( heth );
                }
                #else
                {
                    /* Ethernet EEE callback */
                    HAL_ETH_EEECallback( heth );
 801923c:	6878      	ldr	r0, [r7, #4]
 801923e:	f000 f82b 	bl	8019298 <HAL_ETH_EEECallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	2200      	movs	r2, #0
 8019246:	671a      	str	r2, [r3, #112]	@ 0x70
                        #endif
                    }
                }
            #else /* #if defined(DUAL_CORE) */
                /* check ETH WAKEUP exti flag */
                if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 8019248:	4b08      	ldr	r3, [pc, #32]	@ (801926c <HAL_ETH_IRQHandler+0x1ec>)
 801924a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801924c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019250:	2b00      	cmp	r3, #0
 8019252:	d006      	beq.n	8019262 <HAL_ETH_IRQHandler+0x1e2>
                {
                    /* Clear ETH WAKEUP Exti pending bit */
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 8019254:	4b05      	ldr	r3, [pc, #20]	@ (801926c <HAL_ETH_IRQHandler+0x1ec>)
 8019256:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 801925a:	629a      	str	r2, [r3, #40]	@ 0x28
                        heth->WakeUpCallback( heth );
                    }
                    #else
                    {
                        /* ETH WAKEUP callback */
                        HAL_ETH_WakeUpCallback( heth );
 801925c:	6878      	ldr	r0, [r7, #4]
 801925e:	f000 f825 	bl	80192ac <HAL_ETH_WakeUpCallback>
                    }
                    #endif
                }
            #endif /* #if defined(DUAL_CORE) */
        }
 8019262:	bf00      	nop
 8019264:	3708      	adds	r7, #8
 8019266:	46bd      	mov	sp, r7
 8019268:	bd80      	pop	{r7, pc}
 801926a:	bf00      	nop
 801926c:	58000080 	.word	0x58000080

08019270 <HAL_ETH_MACErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
        {
 8019270:	b480      	push	{r7}
 8019272:	b083      	sub	sp, #12
 8019274:	af00      	add	r7, sp, #0
 8019276:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_MACErrorCallback could be implemented in the user file
             */
        }
 8019278:	bf00      	nop
 801927a:	370c      	adds	r7, #12
 801927c:	46bd      	mov	sp, r7
 801927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019282:	4770      	bx	lr

08019284 <HAL_ETH_PMTCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
        {
 8019284:	b480      	push	{r7}
 8019286:	b083      	sub	sp, #12
 8019288:	af00      	add	r7, sp, #0
 801928a:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_PMTCallback could be implemented in the user file
             */
        }
 801928c:	bf00      	nop
 801928e:	370c      	adds	r7, #12
 8019290:	46bd      	mov	sp, r7
 8019292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019296:	4770      	bx	lr

08019298 <HAL_ETH_EEECallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
        {
 8019298:	b480      	push	{r7}
 801929a:	b083      	sub	sp, #12
 801929c:	af00      	add	r7, sp, #0
 801929e:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_EEECallback could be implemented in the user file
             */
        }
 80192a0:	bf00      	nop
 80192a2:	370c      	adds	r7, #12
 80192a4:	46bd      	mov	sp, r7
 80192a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192aa:	4770      	bx	lr

080192ac <HAL_ETH_WakeUpCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
        {
 80192ac:	b480      	push	{r7}
 80192ae:	b083      	sub	sp, #12
 80192b0:	af00      	add	r7, sp, #0
 80192b2:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             *        the HAL_ETH_WakeUpCallback could be implemented in the user file
             */
        }
 80192b4:	bf00      	nop
 80192b6:	370c      	adds	r7, #12
 80192b8:	46bd      	mov	sp, r7
 80192ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192be:	4770      	bx	lr

080192c0 <HAL_ETH_ReadPHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint32_t PHYAddr,
                                                   uint32_t PHYReg,
                                                   uint32_t * pRegValue )
        {
 80192c0:	b580      	push	{r7, lr}
 80192c2:	b086      	sub	sp, #24
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	60f8      	str	r0, [r7, #12]
 80192c8:	60b9      	str	r1, [r7, #8]
 80192ca:	607a      	str	r2, [r7, #4]
 80192cc:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80192d6:	f003 0301 	and.w	r3, r3, #1
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d001      	beq.n	80192e2 <HAL_ETH_ReadPHYRegister+0x22>
            {
                return HAL_ERROR;
 80192de:	2301      	movs	r3, #1
 80192e0:	e03e      	b.n	8019360 <HAL_ETH_ReadPHYRegister+0xa0>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80192ea:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the read mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 80192ec:	697b      	ldr	r3, [r7, #20]
 80192ee:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80192f2:	68bb      	ldr	r3, [r7, #8]
 80192f4:	055b      	lsls	r3, r3, #21
 80192f6:	4313      	orrs	r3, r2
 80192f8:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 80192fa:	697b      	ldr	r3, [r7, #20]
 80192fc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	041b      	lsls	r3, r3, #16
 8019304:	4313      	orrs	r3, r2
 8019306:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD );
 8019308:	697b      	ldr	r3, [r7, #20]
 801930a:	f043 030c 	orr.w	r3, r3, #12
 801930e:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8019310:	697b      	ldr	r3, [r7, #20]
 8019312:	f043 0301 	orr.w	r3, r3, #1
 8019316:	617b      	str	r3, [r7, #20]

            /* Write the result value into the MDII Address register */
            WRITE_REG( heth->Instance->MACMDIOAR, tmpreg );
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	697a      	ldr	r2, [r7, #20]
 801931e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

            tickstart = HAL_GetTick();
 8019322:	f000 ff01 	bl	801a128 <HAL_GetTick>
 8019326:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8019328:	e009      	b.n	801933e <HAL_ETH_ReadPHYRegister+0x7e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 801932a:	f000 fefd 	bl	801a128 <HAL_GetTick>
 801932e:	4602      	mov	r2, r0
 8019330:	693b      	ldr	r3, [r7, #16]
 8019332:	1ad3      	subs	r3, r2, r3
 8019334:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019338:	d901      	bls.n	801933e <HAL_ETH_ReadPHYRegister+0x7e>
                {
                    return HAL_ERROR;
 801933a:	2301      	movs	r3, #1
 801933c:	e010      	b.n	8019360 <HAL_ETH_ReadPHYRegister+0xa0>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019346:	f003 0301 	and.w	r3, r3, #1
 801934a:	2b00      	cmp	r3, #0
 801934c:	d1ed      	bne.n	801932a <HAL_ETH_ReadPHYRegister+0x6a>
                }
            }

            /* Get MACMIIDR value */
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	681b      	ldr	r3, [r3, #0]
 8019352:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019356:	b29b      	uxth	r3, r3
 8019358:	461a      	mov	r2, r3
 801935a:	683b      	ldr	r3, [r7, #0]
 801935c:	601a      	str	r2, [r3, #0]

            return HAL_OK;
 801935e:	2300      	movs	r3, #0
        }
 8019360:	4618      	mov	r0, r3
 8019362:	3718      	adds	r7, #24
 8019364:	46bd      	mov	sp, r7
 8019366:	bd80      	pop	{r7, pc}

08019368 <HAL_ETH_WritePHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint32_t PHYAddr,
                                                    uint32_t PHYReg,
                                                    uint32_t RegValue )
        {
 8019368:	b580      	push	{r7, lr}
 801936a:	b086      	sub	sp, #24
 801936c:	af00      	add	r7, sp, #0
 801936e:	60f8      	str	r0, [r7, #12]
 8019370:	60b9      	str	r1, [r7, #8]
 8019372:	607a      	str	r2, [r7, #4]
 8019374:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801937e:	f003 0301 	and.w	r3, r3, #1
 8019382:	2b00      	cmp	r3, #0
 8019384:	d001      	beq.n	801938a <HAL_ETH_WritePHYRegister+0x22>
            {
                return HAL_ERROR;
 8019386:	2301      	movs	r3, #1
 8019388:	e03c      	b.n	8019404 <HAL_ETH_WritePHYRegister+0x9c>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 801938a:	68fb      	ldr	r3, [r7, #12]
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019392:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the write mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8019394:	697b      	ldr	r3, [r7, #20]
 8019396:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 801939a:	68bb      	ldr	r3, [r7, #8]
 801939c:	055b      	lsls	r3, r3, #21
 801939e:	4313      	orrs	r3, r2
 80193a0:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 80193a2:	697b      	ldr	r3, [r7, #20]
 80193a4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	041b      	lsls	r3, r3, #16
 80193ac:	4313      	orrs	r3, r2
 80193ae:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR );
 80193b0:	697b      	ldr	r3, [r7, #20]
 80193b2:	f023 030c 	bic.w	r3, r3, #12
 80193b6:	f043 0304 	orr.w	r3, r3, #4
 80193ba:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 80193bc:	697b      	ldr	r3, [r7, #20]
 80193be:	f043 0301 	orr.w	r3, r3, #1
 80193c2:	617b      	str	r3, [r7, #20]


            /* Give the value to the MII data register */
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 80193c4:	683b      	ldr	r3, [r7, #0]
 80193c6:	b29a      	uxth	r2, r3
 80193c8:	4b10      	ldr	r3, [pc, #64]	@ (801940c <HAL_ETH_WritePHYRegister+0xa4>)
 80193ca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

            /* Write the result value into the MII Address register */
            WRITE_REG( ETH->MACMDIOAR, tmpreg );
 80193ce:	4a0f      	ldr	r2, [pc, #60]	@ (801940c <HAL_ETH_WritePHYRegister+0xa4>)
 80193d0:	697b      	ldr	r3, [r7, #20]
 80193d2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

            tickstart = HAL_GetTick();
 80193d6:	f000 fea7 	bl	801a128 <HAL_GetTick>
 80193da:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 80193dc:	e009      	b.n	80193f2 <HAL_ETH_WritePHYRegister+0x8a>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 80193de:	f000 fea3 	bl	801a128 <HAL_GetTick>
 80193e2:	4602      	mov	r2, r0
 80193e4:	693b      	ldr	r3, [r7, #16]
 80193e6:	1ad3      	subs	r3, r2, r3
 80193e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80193ec:	d901      	bls.n	80193f2 <HAL_ETH_WritePHYRegister+0x8a>
                {
                    return HAL_ERROR;
 80193ee:	2301      	movs	r3, #1
 80193f0:	e008      	b.n	8019404 <HAL_ETH_WritePHYRegister+0x9c>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80193fa:	f003 0301 	and.w	r3, r3, #1
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d1ed      	bne.n	80193de <HAL_ETH_WritePHYRegister+0x76>
                }
            }

            return HAL_OK;
 8019402:	2300      	movs	r3, #0
        }
 8019404:	4618      	mov	r0, r3
 8019406:	3718      	adds	r7, #24
 8019408:	46bd      	mov	sp, r7
 801940a:	bd80      	pop	{r7, pc}
 801940c:	40028000 	.word	0x40028000

08019410 <HAL_ETH_GetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL Status
 */
        HAL_StatusTypeDef HAL_ETH_GetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8019410:	b480      	push	{r7}
 8019412:	b083      	sub	sp, #12
 8019414:	af00      	add	r7, sp, #0
 8019416:	6078      	str	r0, [r7, #4]
 8019418:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 801941a:	683b      	ldr	r3, [r7, #0]
 801941c:	2b00      	cmp	r3, #0
 801941e:	d101      	bne.n	8019424 <HAL_ETH_GetMACConfig+0x14>
            {
                return HAL_ERROR;
 8019420:	2301      	movs	r3, #1
 8019422:	e1c3      	b.n	80197ac <HAL_ETH_GetMACConfig+0x39c>
            }

            /* Get MAC parameters */
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	f003 020c 	and.w	r2, r3, #12
 801942e:	683b      	ldr	r3, [r7, #0]
 8019430:	62da      	str	r2, [r3, #44]	@ 0x2c
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	f003 0310 	and.w	r3, r3, #16
 801943c:	2b00      	cmp	r3, #0
 801943e:	bf14      	ite	ne
 8019440:	2301      	movne	r3, #1
 8019442:	2300      	moveq	r3, #0
 8019444:	b2db      	uxtb	r3, r3
 8019446:	461a      	mov	r2, r3
 8019448:	683b      	ldr	r3, [r7, #0]
 801944a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8019458:	683b      	ldr	r3, [r7, #0]
 801945a:	625a      	str	r2, [r3, #36]	@ 0x24
            macconf->RetryTransmission = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DR ) >> 8 ) == 0U ) ? ENABLE : DISABLE;
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019466:	2b00      	cmp	r3, #0
 8019468:	bf0c      	ite	eq
 801946a:	2301      	moveq	r3, #1
 801946c:	2300      	movne	r3, #0
 801946e:	b2db      	uxtb	r3, r3
 8019470:	461a      	mov	r2, r3
 8019472:	683b      	ldr	r3, [r7, #0]
 8019474:	f883 2020 	strb.w	r2, [r3, #32]
            macconf->CarrierSenseDuringTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DCRS ) >> 9 ) > 0U ) ? ENABLE : DISABLE;
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8019482:	2b00      	cmp	r3, #0
 8019484:	bf14      	ite	ne
 8019486:	2301      	movne	r3, #1
 8019488:	2300      	moveq	r3, #0
 801948a:	b2db      	uxtb	r3, r3
 801948c:	461a      	mov	r2, r3
 801948e:	683b      	ldr	r3, [r7, #0]
 8019490:	77da      	strb	r2, [r3, #31]
            macconf->ReceiveOwn = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DO ) >> 10 ) == 0U ) ? ENABLE : DISABLE;
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801949c:	2b00      	cmp	r3, #0
 801949e:	bf0c      	ite	eq
 80194a0:	2301      	moveq	r3, #1
 80194a2:	2300      	movne	r3, #0
 80194a4:	b2db      	uxtb	r3, r3
 80194a6:	461a      	mov	r2, r3
 80194a8:	683b      	ldr	r3, [r7, #0]
 80194aa:	779a      	strb	r2, [r3, #30]
            macconf->CarrierSenseBeforeTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ECRSFD ) >> 11 ) > 0U ) ? ENABLE : DISABLE;
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	bf14      	ite	ne
 80194ba:	2301      	movne	r3, #1
 80194bc:	2300      	moveq	r3, #0
 80194be:	b2db      	uxtb	r3, r3
 80194c0:	461a      	mov	r2, r3
 80194c2:	683b      	ldr	r3, [r7, #0]
 80194c4:	775a      	strb	r2, [r3, #29]
            macconf->LoopbackMode = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_LM ) >> 12 ) > 0U ) ? ENABLE : DISABLE;
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	bf14      	ite	ne
 80194d4:	2301      	movne	r3, #1
 80194d6:	2300      	moveq	r3, #0
 80194d8:	b2db      	uxtb	r3, r3
 80194da:	461a      	mov	r2, r3
 80194dc:	683b      	ldr	r3, [r7, #0]
 80194de:	771a      	strb	r2, [r3, #28]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80194ea:	683b      	ldr	r3, [r7, #0]
 80194ec:	619a      	str	r2, [r3, #24]
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80194f8:	683b      	ldr	r3, [r7, #0]
 80194fa:	615a      	str	r2, [r3, #20]
            macconf->JumboPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JE ) >> 16 ) > 0U ) ? ENABLE : DISABLE;
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019506:	2b00      	cmp	r3, #0
 8019508:	bf14      	ite	ne
 801950a:	2301      	movne	r3, #1
 801950c:	2300      	moveq	r3, #0
 801950e:	b2db      	uxtb	r3, r3
 8019510:	461a      	mov	r2, r3
 8019512:	683b      	ldr	r3, [r7, #0]
 8019514:	749a      	strb	r2, [r3, #18]
            macconf->Jabber = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JD ) >> 17 ) == 0U ) ? ENABLE : DISABLE;
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019520:	2b00      	cmp	r3, #0
 8019522:	bf0c      	ite	eq
 8019524:	2301      	moveq	r3, #1
 8019526:	2300      	movne	r3, #0
 8019528:	b2db      	uxtb	r3, r3
 801952a:	461a      	mov	r2, r3
 801952c:	683b      	ldr	r3, [r7, #0]
 801952e:	745a      	strb	r2, [r3, #17]
            macconf->Watchdog = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_WD ) >> 19 ) == 0U ) ? ENABLE : DISABLE;
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801953a:	2b00      	cmp	r3, #0
 801953c:	bf0c      	ite	eq
 801953e:	2301      	moveq	r3, #1
 8019540:	2300      	movne	r3, #0
 8019542:	b2db      	uxtb	r3, r3
 8019544:	461a      	mov	r2, r3
 8019546:	683b      	ldr	r3, [r7, #0]
 8019548:	741a      	strb	r2, [r3, #16]
            macconf->AutomaticPadCRCStrip = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ACS ) >> 20 ) > 0U ) ? ENABLE : DISABLE;
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8019554:	2b00      	cmp	r3, #0
 8019556:	bf14      	ite	ne
 8019558:	2301      	movne	r3, #1
 801955a:	2300      	moveq	r3, #0
 801955c:	b2db      	uxtb	r3, r3
 801955e:	461a      	mov	r2, r3
 8019560:	683b      	ldr	r3, [r7, #0]
 8019562:	73da      	strb	r2, [r3, #15]
            macconf->CRCStripTypePacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_CST ) >> 21 ) > 0U ) ? ENABLE : DISABLE;
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801956e:	2b00      	cmp	r3, #0
 8019570:	bf14      	ite	ne
 8019572:	2301      	movne	r3, #1
 8019574:	2300      	moveq	r3, #0
 8019576:	b2db      	uxtb	r3, r3
 8019578:	461a      	mov	r2, r3
 801957a:	683b      	ldr	r3, [r7, #0]
 801957c:	739a      	strb	r2, [r3, #14]
            macconf->Support2KPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_S2KP ) >> 22 ) > 0U ) ? ENABLE : DISABLE;
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019588:	2b00      	cmp	r3, #0
 801958a:	bf14      	ite	ne
 801958c:	2301      	movne	r3, #1
 801958e:	2300      	moveq	r3, #0
 8019590:	b2db      	uxtb	r3, r3
 8019592:	461a      	mov	r2, r3
 8019594:	683b      	ldr	r3, [r7, #0]
 8019596:	735a      	strb	r2, [r3, #13]
            macconf->GiantPacketSizeLimitControl = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_GPSLCE ) >> 23 ) > 0U ) ? ENABLE : DISABLE;
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	bf14      	ite	ne
 80195a6:	2301      	movne	r3, #1
 80195a8:	2300      	moveq	r3, #0
 80195aa:	b2db      	uxtb	r3, r3
 80195ac:	461a      	mov	r2, r3
 80195ae:	683b      	ldr	r3, [r7, #0]
 80195b0:	731a      	strb	r2, [r3, #12]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80195bc:	683b      	ldr	r3, [r7, #0]
 80195be:	609a      	str	r2, [r3, #8]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	bf14      	ite	ne
 80195ce:	2301      	movne	r3, #1
 80195d0:	2300      	moveq	r3, #0
 80195d2:	b2db      	uxtb	r3, r3
 80195d4:	461a      	mov	r2, r3
 80195d6:	683b      	ldr	r3, [r7, #0]
 80195d8:	711a      	strb	r2, [r3, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80195e4:	683b      	ldr	r3, [r7, #0]
 80195e6:	601a      	str	r2, [r3, #0]

            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	685b      	ldr	r3, [r3, #4]
 80195ee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80195f2:	683b      	ldr	r3, [r7, #0]
 80195f4:	635a      	str	r2, [r3, #52]	@ 0x34
            macconf->CRCCheckingRxPackets = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_DCRCC ) >> 16 ) == 0U ) ? ENABLE : DISABLE;
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	685b      	ldr	r3, [r3, #4]
 80195fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019600:	2b00      	cmp	r3, #0
 8019602:	bf0c      	ite	eq
 8019604:	2301      	moveq	r3, #1
 8019606:	2300      	movne	r3, #0
 8019608:	b2db      	uxtb	r3, r3
 801960a:	461a      	mov	r2, r3
 801960c:	683b      	ldr	r3, [r7, #0]
 801960e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            macconf->SlowProtocolDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_SPEN ) >> 17 ) > 0U ) ? ENABLE : DISABLE;
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	685b      	ldr	r3, [r3, #4]
 8019618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801961c:	2b00      	cmp	r3, #0
 801961e:	bf14      	ite	ne
 8019620:	2301      	movne	r3, #1
 8019622:	2300      	moveq	r3, #0
 8019624:	b2db      	uxtb	r3, r3
 8019626:	461a      	mov	r2, r3
 8019628:	683b      	ldr	r3, [r7, #0]
 801962a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            macconf->UnicastSlowProtocolPacketDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_USP ) >> 18 ) > 0U ) ? ENABLE : DISABLE;
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	685b      	ldr	r3, [r3, #4]
 8019634:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8019638:	2b00      	cmp	r3, #0
 801963a:	bf14      	ite	ne
 801963c:	2301      	movne	r3, #1
 801963e:	2300      	moveq	r3, #0
 8019640:	b2db      	uxtb	r3, r3
 8019642:	461a      	mov	r2, r3
 8019644:	683b      	ldr	r3, [r7, #0]
 8019646:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            macconf->ExtendedInterPacketGap = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPGEN ) >> 24 ) > 0U ) ? ENABLE : DISABLE;
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	685b      	ldr	r3, [r3, #4]
 8019650:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8019654:	2b00      	cmp	r3, #0
 8019656:	bf14      	ite	ne
 8019658:	2301      	movne	r3, #1
 801965a:	2300      	moveq	r3, #0
 801965c:	b2db      	uxtb	r3, r3
 801965e:	461a      	mov	r2, r3
 8019660:	683b      	ldr	r3, [r7, #0]
 8019662:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	685b      	ldr	r3, [r3, #4]
 801966c:	0e5b      	lsrs	r3, r3, #25
 801966e:	f003 021f 	and.w	r2, r3, #31
 8019672:	683b      	ldr	r3, [r7, #0]
 8019674:	63da      	str	r2, [r3, #60]	@ 0x3c


            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	68db      	ldr	r3, [r3, #12]
 801967c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019680:	2b00      	cmp	r3, #0
 8019682:	bf14      	ite	ne
 8019684:	2301      	movne	r3, #1
 8019686:	2300      	moveq	r3, #0
 8019688:	b2db      	uxtb	r3, r3
 801968a:	461a      	mov	r2, r3
 801968c:	683b      	ldr	r3, [r7, #0]
 801968e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	68db      	ldr	r3, [r3, #12]
 8019698:	f003 020f 	and.w	r2, r3, #15
 801969c:	683b      	ldr	r3, [r7, #0]
 801969e:	645a      	str	r2, [r3, #68]	@ 0x44

            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80196a6:	f003 0302 	and.w	r3, r3, #2
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	bf14      	ite	ne
 80196ae:	2301      	movne	r3, #1
 80196b0:	2300      	moveq	r3, #0
 80196b2:	b2db      	uxtb	r3, r3
 80196b4:	461a      	mov	r2, r3
 80196b6:	683b      	ldr	r3, [r7, #0]
 80196b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            macconf->ZeroQuantaPause = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ ) >> 7 ) == 0U ) ? ENABLE : DISABLE;
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80196c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	bf0c      	ite	eq
 80196ca:	2301      	moveq	r3, #1
 80196cc:	2300      	movne	r3, #0
 80196ce:	b2db      	uxtb	r3, r3
 80196d0:	461a      	mov	r2, r3
 80196d2:	683b      	ldr	r3, [r7, #0]
 80196d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80196de:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80196e2:	683b      	ldr	r3, [r7, #0]
 80196e4:	651a      	str	r2, [r3, #80]	@ 0x50
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	681b      	ldr	r3, [r3, #0]
 80196ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80196ec:	0c1b      	lsrs	r3, r3, #16
 80196ee:	b29a      	uxth	r2, r3
 80196f0:	683b      	ldr	r3, [r7, #0]
 80196f2:	649a      	str	r2, [r3, #72]	@ 0x48


            macconf->ReceiveFlowControl = ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_RFE ) > 0U ) ? ENABLE : DISABLE;
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80196fc:	f003 0301 	and.w	r3, r3, #1
 8019700:	2b00      	cmp	r3, #0
 8019702:	bf14      	ite	ne
 8019704:	2301      	movne	r3, #1
 8019706:	2300      	moveq	r3, #0
 8019708:	b2db      	uxtb	r3, r3
 801970a:	461a      	mov	r2, r3
 801970c:	683b      	ldr	r3, [r7, #0]
 801970e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
            macconf->UnicastPausePacketDetect = ( ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_UP ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801971a:	f003 0302 	and.w	r3, r3, #2
 801971e:	2b00      	cmp	r3, #0
 8019720:	bf14      	ite	ne
 8019722:	2301      	movne	r3, #1
 8019724:	2300      	moveq	r3, #0
 8019726:	b2db      	uxtb	r3, r3
 8019728:	461a      	mov	r2, r3
 801972a:	683b      	ldr	r3, [r7, #0]
 801972c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8019738:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 801973c:	683b      	ldr	r3, [r7, #0]
 801973e:	659a      	str	r2, [r3, #88]	@ 0x58

            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019748:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 801974c:	683b      	ldr	r3, [r7, #0]
 801974e:	65da      	str	r2, [r3, #92]	@ 0x5c
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019758:	f003 0308 	and.w	r3, r3, #8
 801975c:	2b00      	cmp	r3, #0
 801975e:	bf14      	ite	ne
 8019760:	2301      	movne	r3, #1
 8019762:	2300      	moveq	r3, #0
 8019764:	b2db      	uxtb	r3, r3
 8019766:	461a      	mov	r2, r3
 8019768:	683b      	ldr	r3, [r7, #0]
 801976a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
            macconf->ForwardRxErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019776:	f003 0310 	and.w	r3, r3, #16
 801977a:	2b00      	cmp	r3, #0
 801977c:	bf14      	ite	ne
 801977e:	2301      	movne	r3, #1
 8019780:	2300      	moveq	r3, #0
 8019782:	b2db      	uxtb	r3, r3
 8019784:	461a      	mov	r2, r3
 8019786:	683b      	ldr	r3, [r7, #0]
 8019788:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
            macconf->DropTCPIPChecksumErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF ) >> 6 ) == 0U ) ? ENABLE : DISABLE;
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019798:	2b00      	cmp	r3, #0
 801979a:	bf0c      	ite	eq
 801979c:	2301      	moveq	r3, #1
 801979e:	2300      	movne	r3, #0
 80197a0:	b2db      	uxtb	r3, r3
 80197a2:	461a      	mov	r2, r3
 80197a4:	683b      	ldr	r3, [r7, #0]
 80197a6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            return HAL_OK;
 80197aa:	2300      	movs	r3, #0
        }
 80197ac:	4618      	mov	r0, r3
 80197ae:	370c      	adds	r7, #12
 80197b0:	46bd      	mov	sp, r7
 80197b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197b6:	4770      	bx	lr

080197b8 <HAL_ETH_SetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 80197b8:	b580      	push	{r7, lr}
 80197ba:	b082      	sub	sp, #8
 80197bc:	af00      	add	r7, sp, #0
 80197be:	6078      	str	r0, [r7, #4]
 80197c0:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 80197c2:	683b      	ldr	r3, [r7, #0]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d101      	bne.n	80197cc <HAL_ETH_SetMACConfig+0x14>
            {
                return HAL_ERROR;
 80197c8:	2301      	movs	r3, #1
 80197ca:	e00a      	b.n	80197e2 <HAL_ETH_SetMACConfig+0x2a>
            }

            if( heth->RxState == HAL_ETH_STATE_READY )
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80197d0:	2b10      	cmp	r3, #16
 80197d2:	d105      	bne.n	80197e0 <HAL_ETH_SetMACConfig+0x28>
            {
                ETH_SetMACConfig( heth, macconf );
 80197d4:	6839      	ldr	r1, [r7, #0]
 80197d6:	6878      	ldr	r0, [r7, #4]
 80197d8:	f000 f808 	bl	80197ec <ETH_SetMACConfig>

                return HAL_OK;
 80197dc:	2300      	movs	r3, #0
 80197de:	e000      	b.n	80197e2 <HAL_ETH_SetMACConfig+0x2a>
            }
            else
            {
                return HAL_ERROR;
 80197e0:	2301      	movs	r3, #1
            }
        }
 80197e2:	4618      	mov	r0, r3
 80197e4:	3708      	adds	r7, #8
 80197e6:	46bd      	mov	sp, r7
 80197e8:	bd80      	pop	{r7, pc}
	...

080197ec <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 80197ec:	b480      	push	{r7}
 80197ee:	b085      	sub	sp, #20
 80197f0:	af00      	add	r7, sp, #0
 80197f2:	6078      	str	r0, [r7, #4]
 80197f4:	6039      	str	r1, [r7, #0]
            uint32_t macregval;

            /*------------------------ MACCR Configuration --------------------*/
            macregval = ( macconf->InterPacketGapVal |
 80197f6:	683b      	ldr	r3, [r7, #0]
 80197f8:	689a      	ldr	r2, [r3, #8]
                          macconf->SourceAddrControl |
 80197fa:	683b      	ldr	r3, [r7, #0]
 80197fc:	681b      	ldr	r3, [r3, #0]
            macregval = ( macconf->InterPacketGapVal |
 80197fe:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8019800:	683b      	ldr	r3, [r7, #0]
 8019802:	791b      	ldrb	r3, [r3, #4]
 8019804:	06db      	lsls	r3, r3, #27
                          macconf->SourceAddrControl |
 8019806:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8019808:	683b      	ldr	r3, [r7, #0]
 801980a:	7b1b      	ldrb	r3, [r3, #12]
 801980c:	05db      	lsls	r3, r3, #23
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 801980e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8019810:	683b      	ldr	r3, [r7, #0]
 8019812:	7b5b      	ldrb	r3, [r3, #13]
 8019814:	059b      	lsls	r3, r3, #22
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8019816:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8019818:	683b      	ldr	r3, [r7, #0]
 801981a:	7b9b      	ldrb	r3, [r3, #14]
 801981c:	055b      	lsls	r3, r3, #21
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 801981e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8019820:	683b      	ldr	r3, [r7, #0]
 8019822:	7bdb      	ldrb	r3, [r3, #15]
 8019824:	051b      	lsls	r3, r3, #20
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8019826:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8019828:	683a      	ldr	r2, [r7, #0]
 801982a:	7c12      	ldrb	r2, [r2, #16]
 801982c:	2a00      	cmp	r2, #0
 801982e:	d102      	bne.n	8019836 <ETH_SetMACConfig+0x4a>
 8019830:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8019834:	e000      	b.n	8019838 <ETH_SetMACConfig+0x4c>
 8019836:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8019838:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 801983a:	683a      	ldr	r2, [r7, #0]
 801983c:	7c52      	ldrb	r2, [r2, #17]
 801983e:	2a00      	cmp	r2, #0
 8019840:	d102      	bne.n	8019848 <ETH_SetMACConfig+0x5c>
 8019842:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8019846:	e000      	b.n	801984a <ETH_SetMACConfig+0x5e>
 8019848:	2200      	movs	r2, #0
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 801984a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 801984c:	683b      	ldr	r3, [r7, #0]
 801984e:	7c9b      	ldrb	r3, [r3, #18]
 8019850:	041b      	lsls	r3, r3, #16
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8019852:	431a      	orrs	r2, r3
                          macconf->Speed |
 8019854:	683b      	ldr	r3, [r7, #0]
 8019856:	695b      	ldr	r3, [r3, #20]
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8019858:	431a      	orrs	r2, r3
                          macconf->DuplexMode |
 801985a:	683b      	ldr	r3, [r7, #0]
 801985c:	699b      	ldr	r3, [r3, #24]
                          macconf->Speed |
 801985e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8019860:	683b      	ldr	r3, [r7, #0]
 8019862:	7f1b      	ldrb	r3, [r3, #28]
 8019864:	031b      	lsls	r3, r3, #12
                          macconf->DuplexMode |
 8019866:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8019868:	683b      	ldr	r3, [r7, #0]
 801986a:	7f5b      	ldrb	r3, [r3, #29]
 801986c:	02db      	lsls	r3, r3, #11
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 801986e:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8019870:	683a      	ldr	r2, [r7, #0]
 8019872:	7f92      	ldrb	r2, [r2, #30]
 8019874:	2a00      	cmp	r2, #0
 8019876:	d102      	bne.n	801987e <ETH_SetMACConfig+0x92>
 8019878:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801987c:	e000      	b.n	8019880 <ETH_SetMACConfig+0x94>
 801987e:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8019880:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8019882:	683b      	ldr	r3, [r7, #0]
 8019884:	7fdb      	ldrb	r3, [r3, #31]
 8019886:	025b      	lsls	r3, r3, #9
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8019888:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 801988a:	683a      	ldr	r2, [r7, #0]
 801988c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8019890:	2a00      	cmp	r2, #0
 8019892:	d102      	bne.n	801989a <ETH_SetMACConfig+0xae>
 8019894:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019898:	e000      	b.n	801989c <ETH_SetMACConfig+0xb0>
 801989a:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 801989c:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 801989e:	683b      	ldr	r3, [r7, #0]
 80198a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 80198a2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 80198a4:	683b      	ldr	r3, [r7, #0]
 80198a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80198aa:	011b      	lsls	r3, r3, #4
                          macconf->BackOffLimit |
 80198ac:	431a      	orrs	r2, r3
                          macconf->PreambleLength );
 80198ae:	683b      	ldr	r3, [r7, #0]
 80198b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            macregval = ( macconf->InterPacketGapVal |
 80198b2:	4313      	orrs	r3, r2
 80198b4:	60fb      	str	r3, [r7, #12]

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	681a      	ldr	r2, [r3, #0]
 80198bc:	4b56      	ldr	r3, [pc, #344]	@ (8019a18 <ETH_SetMACConfig+0x22c>)
 80198be:	4013      	ands	r3, r2
 80198c0:	687a      	ldr	r2, [r7, #4]
 80198c2:	6812      	ldr	r2, [r2, #0]
 80198c4:	68f9      	ldr	r1, [r7, #12]
 80198c6:	430b      	orrs	r3, r1
 80198c8:	6013      	str	r3, [r2, #0]

            /*------------------------ MACECR Configuration --------------------*/
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 80198ca:	683b      	ldr	r3, [r7, #0]
 80198cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80198ce:	065a      	lsls	r2, r3, #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 80198d0:	683b      	ldr	r3, [r7, #0]
 80198d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80198d6:	061b      	lsls	r3, r3, #24
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 80198d8:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 80198da:	683b      	ldr	r3, [r7, #0]
 80198dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80198e0:	049b      	lsls	r3, r3, #18
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 80198e2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 80198e4:	683b      	ldr	r3, [r7, #0]
 80198e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80198ea:	045b      	lsls	r3, r3, #17
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 80198ec:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 80198ee:	683a      	ldr	r2, [r7, #0]
 80198f0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80198f4:	2a00      	cmp	r2, #0
 80198f6:	d102      	bne.n	80198fe <ETH_SetMACConfig+0x112>
 80198f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80198fc:	e000      	b.n	8019900 <ETH_SetMACConfig+0x114>
 80198fe:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8019900:	431a      	orrs	r2, r3
                          macconf->GiantPacketSizeLimit );
 8019902:	683b      	ldr	r3, [r7, #0]
 8019904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019906:	4313      	orrs	r3, r2
 8019908:	60fb      	str	r3, [r7, #12]

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	685a      	ldr	r2, [r3, #4]
 8019910:	4b42      	ldr	r3, [pc, #264]	@ (8019a1c <ETH_SetMACConfig+0x230>)
 8019912:	4013      	ands	r3, r2
 8019914:	687a      	ldr	r2, [r7, #4]
 8019916:	6812      	ldr	r2, [r2, #0]
 8019918:	68f9      	ldr	r1, [r7, #12]
 801991a:	430b      	orrs	r3, r1
 801991c:	6053      	str	r3, [r2, #4]

            /*------------------------ MACWTR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 801991e:	683b      	ldr	r3, [r7, #0]
 8019920:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8019924:	021a      	lsls	r2, r3, #8
                          macconf->WatchdogTimeout );
 8019926:	683b      	ldr	r3, [r7, #0]
 8019928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 801992a:	4313      	orrs	r3, r2
 801992c:	60fb      	str	r3, [r7, #12]

            /* Write to MACWTR */
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	68da      	ldr	r2, [r3, #12]
 8019934:	4b3a      	ldr	r3, [pc, #232]	@ (8019a20 <ETH_SetMACConfig+0x234>)
 8019936:	4013      	ands	r3, r2
 8019938:	687a      	ldr	r2, [r7, #4]
 801993a:	6812      	ldr	r2, [r2, #0]
 801993c:	68f9      	ldr	r1, [r7, #12]
 801993e:	430b      	orrs	r3, r1
 8019940:	60d3      	str	r3, [r2, #12]

            /*------------------------ MACTFCR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019942:	683b      	ldr	r3, [r7, #0]
 8019944:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8019948:	005a      	lsls	r2, r3, #1
                          macconf->PauseLowThreshold |
 801994a:	683b      	ldr	r3, [r7, #0]
 801994c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 801994e:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 8019950:	683a      	ldr	r2, [r7, #0]
 8019952:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8019956:	2a00      	cmp	r2, #0
 8019958:	d101      	bne.n	801995e <ETH_SetMACConfig+0x172>
 801995a:	2280      	movs	r2, #128	@ 0x80
 801995c:	e000      	b.n	8019960 <ETH_SetMACConfig+0x174>
 801995e:	2200      	movs	r2, #0
                          macconf->PauseLowThreshold |
 8019960:	431a      	orrs	r2, r3
                          ( macconf->PauseTime << 16 ) );
 8019962:	683b      	ldr	r3, [r7, #0]
 8019964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019966:	041b      	lsls	r3, r3, #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019968:	4313      	orrs	r3, r2
 801996a:	60fb      	str	r3, [r7, #12]

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019972:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8019976:	4013      	ands	r3, r2
 8019978:	687a      	ldr	r2, [r7, #4]
 801997a:	6812      	ldr	r2, [r2, #0]
 801997c:	68f9      	ldr	r1, [r7, #12]
 801997e:	430b      	orrs	r3, r1
 8019980:	6713      	str	r3, [r2, #112]	@ 0x70

            /*------------------------ MACRFCR Configuration --------------------*/
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8019982:	683b      	ldr	r3, [r7, #0]
 8019984:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019988:	461a      	mov	r2, r3
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 801998a:	683b      	ldr	r3, [r7, #0]
 801998c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8019990:	005b      	lsls	r3, r3, #1
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8019992:	4313      	orrs	r3, r2
 8019994:	60fb      	str	r3, [r7, #12]

            /* Write to MACRFCR */
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	681b      	ldr	r3, [r3, #0]
 801999a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801999e:	f023 0103 	bic.w	r1, r3, #3
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	68fa      	ldr	r2, [r7, #12]
 80199a8:	430a      	orrs	r2, r1
 80199aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

            /*------------------------ MTLTQOMR Configuration --------------------*/
            /* Write to MTLTQOMR */
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80199b6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80199ba:	683b      	ldr	r3, [r7, #0]
 80199bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	430a      	orrs	r2, r1
 80199c4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

            /*------------------------ MTLRQOMR Configuration --------------------*/
            macregval = ( macconf->ReceiveQueueMode |
 80199c8:	683b      	ldr	r3, [r7, #0]
 80199ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 80199cc:	683a      	ldr	r2, [r7, #0]
 80199ce:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80199d2:	2a00      	cmp	r2, #0
 80199d4:	d101      	bne.n	80199da <ETH_SetMACConfig+0x1ee>
 80199d6:	2240      	movs	r2, #64	@ 0x40
 80199d8:	e000      	b.n	80199dc <ETH_SetMACConfig+0x1f0>
 80199da:	2200      	movs	r2, #0
            macregval = ( macconf->ReceiveQueueMode |
 80199dc:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 80199de:	683b      	ldr	r3, [r7, #0]
 80199e0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80199e4:	011b      	lsls	r3, r3, #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 80199e6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 80199e8:	683b      	ldr	r3, [r7, #0]
 80199ea:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80199ee:	00db      	lsls	r3, r3, #3
            macregval = ( macconf->ReceiveQueueMode |
 80199f0:	4313      	orrs	r3, r2
 80199f2:	60fb      	str	r3, [r7, #12]

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80199fc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	68fa      	ldr	r2, [r7, #12]
 8019a06:	430a      	orrs	r2, r1
 8019a08:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
        }
 8019a0c:	bf00      	nop
 8019a0e:	3714      	adds	r7, #20
 8019a10:	46bd      	mov	sp, r7
 8019a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a16:	4770      	bx	lr
 8019a18:	00048083 	.word	0x00048083
 8019a1c:	c0f88000 	.word	0xc0f88000
 8019a20:	fffffef0 	.word	0xfffffef0

08019a24 <ETH_SetDMAConfig>:

        static void ETH_SetDMAConfig( ETH_HandleTypeDef * heth,
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
 8019a24:	b480      	push	{r7}
 8019a26:	b085      	sub	sp, #20
 8019a28:	af00      	add	r7, sp, #0
 8019a2a:	6078      	str	r0, [r7, #4]
 8019a2c:	6039      	str	r1, [r7, #0]
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019a36:	681a      	ldr	r2, [r3, #0]
 8019a38:	4b38      	ldr	r3, [pc, #224]	@ (8019b1c <ETH_SetDMAConfig+0xf8>)
 8019a3a:	4013      	ands	r3, r2
 8019a3c:	683a      	ldr	r2, [r7, #0]
 8019a3e:	6811      	ldr	r1, [r2, #0]
 8019a40:	687a      	ldr	r2, [r7, #4]
 8019a42:	6812      	ldr	r2, [r2, #0]
 8019a44:	430b      	orrs	r3, r1
 8019a46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019a4a:	6013      	str	r3, [r2, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 8019a4c:	683b      	ldr	r3, [r7, #0]
 8019a4e:	791b      	ldrb	r3, [r3, #4]
 8019a50:	031a      	lsls	r2, r3, #12
                          dmaconf->BurstMode |
 8019a52:	683b      	ldr	r3, [r7, #0]
 8019a54:	689b      	ldr	r3, [r3, #8]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 8019a56:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 8019a58:	683b      	ldr	r3, [r7, #0]
 8019a5a:	7b1b      	ldrb	r3, [r3, #12]
 8019a5c:	03db      	lsls	r3, r3, #15
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 8019a5e:	4313      	orrs	r3, r2
 8019a60:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019a6a:	685a      	ldr	r2, [r3, #4]
 8019a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8019b20 <ETH_SetDMAConfig+0xfc>)
 8019a6e:	4013      	ands	r3, r2
 8019a70:	687a      	ldr	r2, [r7, #4]
 8019a72:	6812      	ldr	r2, [r2, #0]
 8019a74:	68f9      	ldr	r1, [r7, #12]
 8019a76:	430b      	orrs	r3, r1
 8019a78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019a7c:	6053      	str	r3, [r2, #4]

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 8019a7e:	683b      	ldr	r3, [r7, #0]
 8019a80:	7b5b      	ldrb	r3, [r3, #13]
 8019a82:	041a      	lsls	r2, r3, #16
                          dmaconf->MaximumSegmentSize );
 8019a84:	683b      	ldr	r3, [r7, #0]
 8019a86:	6a1b      	ldr	r3, [r3, #32]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 8019a88:	4313      	orrs	r3, r2
 8019a8a:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	681b      	ldr	r3, [r3, #0]
 8019a90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019a94:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8019a98:	4b22      	ldr	r3, [pc, #136]	@ (8019b24 <ETH_SetDMAConfig+0x100>)
 8019a9a:	4013      	ands	r3, r2
 8019a9c:	687a      	ldr	r2, [r7, #4]
 8019a9e:	6812      	ldr	r2, [r2, #0]
 8019aa0:	68f9      	ldr	r1, [r7, #12]
 8019aa2:	430b      	orrs	r3, r1
 8019aa4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019aa8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
 8019aac:	683b      	ldr	r3, [r7, #0]
 8019aae:	691a      	ldr	r2, [r3, #16]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 8019ab0:	683b      	ldr	r3, [r7, #0]
 8019ab2:	7d1b      	ldrb	r3, [r3, #20]
 8019ab4:	011b      	lsls	r3, r3, #4
            dmaregval = ( dmaconf->TxDMABurstLength |
 8019ab6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 8019ab8:	683b      	ldr	r3, [r7, #0]
 8019aba:	7f5b      	ldrb	r3, [r3, #29]
 8019abc:	031b      	lsls	r3, r3, #12
            dmaregval = ( dmaconf->TxDMABurstLength |
 8019abe:	4313      	orrs	r3, r2
 8019ac0:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019aca:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8019ace:	4b16      	ldr	r3, [pc, #88]	@ (8019b28 <ETH_SetDMAConfig+0x104>)
 8019ad0:	4013      	ands	r3, r2
 8019ad2:	687a      	ldr	r2, [r7, #4]
 8019ad4:	6812      	ldr	r2, [r2, #0]
 8019ad6:	68f9      	ldr	r1, [r7, #12]
 8019ad8:	430b      	orrs	r3, r1
 8019ada:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019ade:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8019ae2:	683b      	ldr	r3, [r7, #0]
 8019ae4:	7f1b      	ldrb	r3, [r3, #28]
 8019ae6:	07da      	lsls	r2, r3, #31
                          dmaconf->RxDMABurstLength );
 8019ae8:	683b      	ldr	r3, [r7, #0]
 8019aea:	699b      	ldr	r3, [r3, #24]
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8019aec:	4313      	orrs	r3, r2
 8019aee:	60fb      	str	r3, [r7, #12]

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	681b      	ldr	r3, [r3, #0]
 8019af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019af8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8019afc:	4b0b      	ldr	r3, [pc, #44]	@ (8019b2c <ETH_SetDMAConfig+0x108>)
 8019afe:	4013      	ands	r3, r2
 8019b00:	687a      	ldr	r2, [r7, #4]
 8019b02:	6812      	ldr	r2, [r2, #0]
 8019b04:	68f9      	ldr	r1, [r7, #12]
 8019b06:	430b      	orrs	r3, r1
 8019b08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019b0c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        }
 8019b10:	bf00      	nop
 8019b12:	3714      	adds	r7, #20
 8019b14:	46bd      	mov	sp, r7
 8019b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b1a:	4770      	bx	lr
 8019b1c:	ffff87fd 	.word	0xffff87fd
 8019b20:	ffff2ffe 	.word	0xffff2ffe
 8019b24:	fffec000 	.word	0xfffec000
 8019b28:	ffc0efef 	.word	0xffc0efef
 8019b2c:	7fc0ffff 	.word	0x7fc0ffff

08019b30 <ETH_MACDMAConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth )
        {
 8019b30:	b580      	push	{r7, lr}
 8019b32:	b0a4      	sub	sp, #144	@ 0x90
 8019b34:	af00      	add	r7, sp, #0
 8019b36:	6078      	str	r0, [r7, #4]
            ETH_MACConfigTypeDef macDefaultConf;
            ETH_DMAConfigTypeDef dmaDefaultConf;

            /*--------------- ETHERNET MAC registers default Configuration --------------*/
            macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8019b38:	2301      	movs	r3, #1
 8019b3a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8019b3e:	2300      	movs	r3, #0
 8019b40:	653b      	str	r3, [r7, #80]	@ 0x50
            macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8019b42:	2300      	movs	r3, #0
 8019b44:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
            macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8019b48:	2300      	movs	r3, #0
 8019b4a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            macDefaultConf.ChecksumOffload = ENABLE;
 8019b4e:	2301      	movs	r3, #1
 8019b50:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8019b54:	2301      	movs	r3, #1
 8019b56:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            macDefaultConf.CRCStripTypePacket = ENABLE;
 8019b5a:	2301      	movs	r3, #1
 8019b5c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            macDefaultConf.DeferralCheck = DISABLE;
 8019b60:	2300      	movs	r3, #0
 8019b62:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8019b66:	2301      	movs	r3, #1
 8019b68:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8019b6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8019b70:	647b      	str	r3, [r7, #68]	@ 0x44
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8019b72:	2300      	movs	r3, #0
 8019b74:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8019b78:	2300      	movs	r3, #0
 8019b7a:	66bb      	str	r3, [r7, #104]	@ 0x68
            macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8019b7c:	2300      	movs	r3, #0
 8019b7e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8019b82:	2300      	movs	r3, #0
 8019b84:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 8019b88:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8019b8c:	663b      	str	r3, [r7, #96]	@ 0x60
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8019b8e:	2300      	movs	r3, #0
 8019b90:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8019b94:	2300      	movs	r3, #0
 8019b96:	637b      	str	r3, [r7, #52]	@ 0x34
            macDefaultConf.Jabber = ENABLE;
 8019b98:	2301      	movs	r3, #1
 8019b9a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            macDefaultConf.JumboPacket = DISABLE;
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            macDefaultConf.LoopbackMode = DISABLE;
 8019ba4:	2300      	movs	r3, #0
 8019ba6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8019baa:	2300      	movs	r3, #0
 8019bac:	67fb      	str	r3, [r7, #124]	@ 0x7c
            macDefaultConf.PauseTime = 0x0;
 8019bae:	2300      	movs	r3, #0
 8019bb0:	677b      	str	r3, [r7, #116]	@ 0x74
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8019bb2:	2300      	movs	r3, #0
 8019bb4:	65bb      	str	r3, [r7, #88]	@ 0x58
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
            macDefaultConf.ReceiveFlowControl = DISABLE;
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
            macDefaultConf.ReceiveOwn = ENABLE;
 8019bc2:	2301      	movs	r3, #1
 8019bc4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8019bc8:	2320      	movs	r3, #32
 8019bca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            macDefaultConf.RetryTransmission = ENABLE;
 8019bce:	2301      	movs	r3, #1
 8019bd0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            macDefaultConf.SlowProtocolDetect = DISABLE;
 8019bd4:	2300      	movs	r3, #0
 8019bd6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8019bda:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8019bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 8019be0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8019be4:	643b      	str	r3, [r7, #64]	@ 0x40
            macDefaultConf.Support2KPacket = DISABLE;
 8019be6:	2300      	movs	r3, #0
 8019be8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8019bec:	2302      	movs	r3, #2
 8019bee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            macDefaultConf.TransmitFlowControl = DISABLE;
 8019bf2:	2300      	movs	r3, #0
 8019bf4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8019bf8:	2300      	movs	r3, #0
 8019bfa:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8019bfe:	2300      	movs	r3, #0
 8019c00:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
            macDefaultConf.Watchdog = ENABLE;
 8019c04:	2301      	movs	r3, #1
 8019c06:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	673b      	str	r3, [r7, #112]	@ 0x70
            macDefaultConf.ZeroQuantaPause = ENABLE;
 8019c0e:	2301      	movs	r3, #1
 8019c10:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

            /* MAC default configuration */
            ETH_SetMACConfig( heth, &macDefaultConf );
 8019c14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019c18:	4619      	mov	r1, r3
 8019c1a:	6878      	ldr	r0, [r7, #4]
 8019c1c:	f7ff fde6 	bl	80197ec <ETH_SetMACConfig>

            /*--------------- ETHERNET DMA registers default Configuration --------------*/
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8019c20:	2301      	movs	r3, #1
 8019c22:	733b      	strb	r3, [r7, #12]
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8019c24:	2301      	movs	r3, #1
 8019c26:	613b      	str	r3, [r7, #16]
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8019c28:	2300      	movs	r3, #0
 8019c2a:	60bb      	str	r3, [r7, #8]
            dmaDefaultConf.FlushRxPacket = DISABLE;
 8019c2c:	2300      	movs	r3, #0
 8019c2e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            dmaDefaultConf.PBLx8Mode = DISABLE;
 8019c32:	2300      	movs	r3, #0
 8019c34:	757b      	strb	r3, [r7, #21]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8019c36:	2300      	movs	r3, #0
 8019c38:	753b      	strb	r3, [r7, #20]
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8019c3a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8019c3e:	623b      	str	r3, [r7, #32]
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 8019c40:	2300      	movs	r3, #0
 8019c42:	773b      	strb	r3, [r7, #28]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8019c44:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8019c48:	61bb      	str	r3, [r7, #24]
            dmaDefaultConf.TCPSegmentation = DISABLE;
 8019c4a:	2300      	movs	r3, #0
 8019c4c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            dmaDefaultConf.MaximumSegmentSize = 536;
 8019c50:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8019c54:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* DMA default configuration */
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 8019c56:	f107 0308 	add.w	r3, r7, #8
 8019c5a:	4619      	mov	r1, r3
 8019c5c:	6878      	ldr	r0, [r7, #4]
 8019c5e:	f7ff fee1 	bl	8019a24 <ETH_SetDMAConfig>
        }
 8019c62:	bf00      	nop
 8019c64:	3790      	adds	r7, #144	@ 0x90
 8019c66:	46bd      	mov	sp, r7
 8019c68:	bd80      	pop	{r7, pc}
	...

08019c6c <ETH_MAC_MDIO_ClkConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MAC_MDIO_ClkConfig( ETH_HandleTypeDef * heth )
        {
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b084      	sub	sp, #16
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg, hclk;

            /* Get the ETHERNET MACMDIOAR value */
            tmpreg = ( heth->Instance )->MACMDIOAR;
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019c7c:	60fb      	str	r3, [r7, #12]

            /* Clear CSR Clock Range bits */
            tmpreg &= ~ETH_MACMDIOAR_CR;
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8019c84:	60fb      	str	r3, [r7, #12]

            /* Get hclk frequency value */
            hclk = HAL_RCC_GetHCLKFreq();
 8019c86:	f003 fdf1 	bl	801d86c <HAL_RCC_GetHCLKFreq>
 8019c8a:	60b8      	str	r0, [r7, #8]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 8019c8c:	68bb      	ldr	r3, [r7, #8]
 8019c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8019d08 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8019c90:	4293      	cmp	r3, r2
 8019c92:	d908      	bls.n	8019ca6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8019c94:	68bb      	ldr	r3, [r7, #8]
 8019c96:	4a1d      	ldr	r2, [pc, #116]	@ (8019d0c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8019c98:	4293      	cmp	r3, r2
 8019c9a:	d804      	bhi.n	8019ca6 <ETH_MAC_MDIO_ClkConfig+0x3a>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8019ca2:	60fb      	str	r3, [r7, #12]
 8019ca4:	e027      	b.n	8019cf6 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 8019ca6:	68bb      	ldr	r3, [r7, #8]
 8019ca8:	4a18      	ldr	r2, [pc, #96]	@ (8019d0c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8019caa:	4293      	cmp	r3, r2
 8019cac:	d908      	bls.n	8019cc0 <ETH_MAC_MDIO_ClkConfig+0x54>
 8019cae:	68bb      	ldr	r3, [r7, #8]
 8019cb0:	4a17      	ldr	r2, [pc, #92]	@ (8019d10 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8019cb2:	4293      	cmp	r3, r2
 8019cb4:	d204      	bcs.n	8019cc0 <ETH_MAC_MDIO_ClkConfig+0x54>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8019cbc:	60fb      	str	r3, [r7, #12]
 8019cbe:	e01a      	b.n	8019cf6 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 8019cc0:	68bb      	ldr	r3, [r7, #8]
 8019cc2:	4a13      	ldr	r2, [pc, #76]	@ (8019d10 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8019cc4:	4293      	cmp	r3, r2
 8019cc6:	d303      	bcc.n	8019cd0 <ETH_MAC_MDIO_ClkConfig+0x64>
 8019cc8:	68bb      	ldr	r3, [r7, #8]
 8019cca:	4a12      	ldr	r2, [pc, #72]	@ (8019d14 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8019ccc:	4293      	cmp	r3, r2
 8019cce:	d911      	bls.n	8019cf4 <ETH_MAC_MDIO_ClkConfig+0x88>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
            }
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 8019cd0:	68bb      	ldr	r3, [r7, #8]
 8019cd2:	4a10      	ldr	r2, [pc, #64]	@ (8019d14 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8019cd4:	4293      	cmp	r3, r2
 8019cd6:	d908      	bls.n	8019cea <ETH_MAC_MDIO_ClkConfig+0x7e>
 8019cd8:	68bb      	ldr	r3, [r7, #8]
 8019cda:	4a0f      	ldr	r2, [pc, #60]	@ (8019d18 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8019cdc:	4293      	cmp	r3, r2
 8019cde:	d804      	bhi.n	8019cea <ETH_MAC_MDIO_ClkConfig+0x7e>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019ce6:	60fb      	str	r3, [r7, #12]
 8019ce8:	e005      	b.n	8019cf6 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else /* (hclk >= 150000000)&&(hclk <= 200000000) */
            {
                /* CSR Clock Range between 150-200 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8019cf0:	60fb      	str	r3, [r7, #12]
 8019cf2:	e000      	b.n	8019cf6 <ETH_MAC_MDIO_ClkConfig+0x8a>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
 8019cf4:	bf00      	nop
            }

            /* Configure the CSR Clock Range */
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	68fa      	ldr	r2, [r7, #12]
 8019cfc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        }
 8019d00:	bf00      	nop
 8019d02:	3710      	adds	r7, #16
 8019d04:	46bd      	mov	sp, r7
 8019d06:	bd80      	pop	{r7, pc}
 8019d08:	01312cff 	.word	0x01312cff
 8019d0c:	02160ebf 	.word	0x02160ebf
 8019d10:	03938700 	.word	0x03938700
 8019d14:	05f5e0ff 	.word	0x05f5e0ff
 8019d18:	08f0d17f 	.word	0x08f0d17f

08019d1c <ETH_DMATxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATxDescListInit( ETH_HandleTypeDef * heth )
        {
 8019d1c:	b480      	push	{r7}
 8019d1e:	b085      	sub	sp, #20
 8019d20:	af00      	add	r7, sp, #0
 8019d22:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmatxdesc;
            uint32_t i;

            /* Fill each DMATxDesc descriptor with the right values */
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8019d24:	2300      	movs	r3, #0
 8019d26:	60fb      	str	r3, [r7, #12]
 8019d28:	e01d      	b.n	8019d66 <ETH_DMATxDescListInit+0x4a>
            {
                dmatxdesc = heth->Init.TxDesc + i;
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	68d9      	ldr	r1, [r3, #12]
 8019d2e:	68fa      	ldr	r2, [r7, #12]
 8019d30:	4613      	mov	r3, r2
 8019d32:	005b      	lsls	r3, r3, #1
 8019d34:	4413      	add	r3, r2
 8019d36:	00db      	lsls	r3, r3, #3
 8019d38:	440b      	add	r3, r1
 8019d3a:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 8019d3c:	68bb      	ldr	r3, [r7, #8]
 8019d3e:	2200      	movs	r2, #0
 8019d40:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 8019d42:	68bb      	ldr	r3, [r7, #8]
 8019d44:	2200      	movs	r2, #0
 8019d46:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 8019d48:	68bb      	ldr	r3, [r7, #8]
 8019d4a:	2200      	movs	r2, #0
 8019d4c:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 8019d4e:	68bb      	ldr	r3, [r7, #8]
 8019d50:	2200      	movs	r2, #0
 8019d52:	60da      	str	r2, [r3, #12]

                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 8019d54:	68b9      	ldr	r1, [r7, #8]
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	68fa      	ldr	r2, [r7, #12]
 8019d5a:	3206      	adds	r2, #6
 8019d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8019d60:	68fb      	ldr	r3, [r7, #12]
 8019d62:	3301      	adds	r3, #1
 8019d64:	60fb      	str	r3, [r7, #12]
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	2b03      	cmp	r3, #3
 8019d6a:	d9de      	bls.n	8019d2a <ETH_DMATxDescListInit+0xe>
            }

            heth->TxDescList.CurTxDesc = 0;
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	2200      	movs	r2, #0
 8019d70:	629a      	str	r2, [r3, #40]	@ 0x28
            heth->TxDescList.TailTxDesc = 0;
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	2200      	movs	r2, #0
 8019d76:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set Transmit Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	681b      	ldr	r3, [r3, #0]
 8019d7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019d80:	461a      	mov	r2, r3
 8019d82:	2303      	movs	r3, #3
 8019d84:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

            /* Set Transmit Descriptor List Address */
            /* Channel Tx descriptor list address register (ETH_DMACTXDLAR)). */
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	68da      	ldr	r2, [r3, #12]
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019d94:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

            /* Set Transmit Descriptor Tail pointer */
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	68da      	ldr	r2, [r3, #12]
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019da4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        }
 8019da8:	bf00      	nop
 8019daa:	3714      	adds	r7, #20
 8019dac:	46bd      	mov	sp, r7
 8019dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019db2:	4770      	bx	lr

08019db4 <ETH_DMARxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMARxDescListInit( ETH_HandleTypeDef * heth )
        {
 8019db4:	b480      	push	{r7}
 8019db6:	b085      	sub	sp, #20
 8019db8:	af00      	add	r7, sp, #0
 8019dba:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t i;

            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 8019dbc:	2300      	movs	r3, #0
 8019dbe:	60fb      	str	r3, [r7, #12]
 8019dc0:	e023      	b.n	8019e0a <ETH_DMARxDescListInit+0x56>
            {
                dmarxdesc = heth->Init.RxDesc + i;
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	6919      	ldr	r1, [r3, #16]
 8019dc6:	68fa      	ldr	r2, [r7, #12]
 8019dc8:	4613      	mov	r3, r2
 8019dca:	005b      	lsls	r3, r3, #1
 8019dcc:	4413      	add	r3, r2
 8019dce:	00db      	lsls	r3, r3, #3
 8019dd0:	440b      	add	r3, r1
 8019dd2:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 8019dd4:	68bb      	ldr	r3, [r7, #8]
 8019dd6:	2200      	movs	r2, #0
 8019dd8:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 8019dda:	68bb      	ldr	r3, [r7, #8]
 8019ddc:	2200      	movs	r2, #0
 8019dde:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 8019de0:	68bb      	ldr	r3, [r7, #8]
 8019de2:	2200      	movs	r2, #0
 8019de4:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 8019de6:	68bb      	ldr	r3, [r7, #8]
 8019de8:	2200      	movs	r2, #0
 8019dea:	60da      	str	r2, [r3, #12]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 8019dec:	68bb      	ldr	r3, [r7, #8]
 8019dee:	2200      	movs	r2, #0
 8019df0:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 8019df2:	68bb      	ldr	r3, [r7, #8]
 8019df4:	2200      	movs	r2, #0
 8019df6:	615a      	str	r2, [r3, #20]

                /* Set Rx descritors addresses */
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 8019df8:	68b9      	ldr	r1, [r7, #8]
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	68fa      	ldr	r2, [r7, #12]
 8019dfe:	320c      	adds	r2, #12
 8019e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	3301      	adds	r3, #1
 8019e08:	60fb      	str	r3, [r7, #12]
 8019e0a:	68fb      	ldr	r3, [r7, #12]
 8019e0c:	2b03      	cmp	r3, #3
 8019e0e:	d9d8      	bls.n	8019dc2 <ETH_DMARxDescListInit+0xe>
            }

            WRITE_REG( heth->RxDescList.CurRxDesc, 0 );
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	2200      	movs	r2, #0
 8019e14:	641a      	str	r2, [r3, #64]	@ 0x40
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	2200      	movs	r2, #0
 8019e1a:	645a      	str	r2, [r3, #68]	@ 0x44
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	2200      	movs	r2, #0
 8019e20:	649a      	str	r2, [r3, #72]	@ 0x48
            WRITE_REG( heth->RxDescList.ItMode, 0 );
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	2200      	movs	r2, #0
 8019e26:	651a      	str	r2, [r3, #80]	@ 0x50
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	2200      	movs	r2, #0
 8019e2c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Set Receive Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019e36:	461a      	mov	r2, r3
 8019e38:	2303      	movs	r3, #3
 8019e3a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

            /* Set Receive Descriptor List Address */
            /* Channel Rx descriptor list address register (ETH_DMACRXDLAR)). */
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	691a      	ldr	r2, [r3, #16]
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019e4a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

            /* Set Receive Descriptor Tail pointer Address */
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	691b      	ldr	r3, [r3, #16]
 8019e52:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019e5e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        }
 8019e62:	bf00      	nop
 8019e64:	3714      	adds	r7, #20
 8019e66:	46bd      	mov	sp, r7
 8019e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e6c:	4770      	bx	lr
	...

08019e70 <ETH_Clear_Tx_Descriptors>:

        void ETH_Clear_Tx_Descriptors( ETH_HandleTypeDef * heth )
        {
 8019e70:	b580      	push	{r7, lr}
 8019e72:	b086      	sub	sp, #24
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	6078      	str	r0, [r7, #4]
            uint32_t ulTailTxDesc = heth->TxDescList.TailTxDesc;
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e7c:	617b      	str	r3, [r7, #20]

            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 8019e7e:	e032      	b.n	8019ee6 <ETH_Clear_Tx_Descriptors+0x76>
            {
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	697a      	ldr	r2, [r7, #20]
 8019e84:	3206      	adds	r2, #6
 8019e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019e8a:	613b      	str	r3, [r7, #16]

                if( ( xDMATxDescriptor->DESC3 & ETH_DMATXNDESCRF_OWN ) != 0 )
 8019e8c:	693b      	ldr	r3, [r7, #16]
 8019e8e:	68db      	ldr	r3, [r3, #12]
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	db31      	blt.n	8019ef8 <ETH_Clear_Tx_Descriptors+0x88>
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    NetworkBufferDescriptor_t * pxNetworkBuffer;
                    uint8_t * ucPayLoad;

                    ucPayLoad = ( uint8_t * ) xDMATxDescriptor->DESC0;
 8019e94:	693b      	ldr	r3, [r7, #16]
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	60fb      	str	r3, [r7, #12]

                    if( ucPayLoad == NULL )
 8019e9a:	68fb      	ldr	r3, [r7, #12]
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d02d      	beq.n	8019efc <ETH_Clear_Tx_Descriptors+0x8c>
                    {
                        /* No buffer is assigned or DMA still OWNs this descriptor. */
                        break;
                    }

                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 8019ea0:	68f8      	ldr	r0, [r7, #12]
 8019ea2:	f7f0 fbd2 	bl	800a64a <pxPacketBuffer_to_NetworkBuffer>
 8019ea6:	60b8      	str	r0, [r7, #8]

                    if( pxNetworkBuffer != NULL )
 8019ea8:	68bb      	ldr	r3, [r7, #8]
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d002      	beq.n	8019eb4 <ETH_Clear_Tx_Descriptors+0x44>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8019eae:	68b8      	ldr	r0, [r7, #8]
 8019eb0:	f7fd faa2 	bl	80173f8 <vReleaseNetworkBufferAndDescriptor>
                    }
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 8019eb4:	693b      	ldr	r3, [r7, #16]
 8019eb6:	2200      	movs	r2, #0
 8019eb8:	601a      	str	r2, [r3, #0]

                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 8019eba:	697b      	ldr	r3, [r7, #20]
 8019ebc:	3301      	adds	r3, #1
 8019ebe:	617b      	str	r3, [r7, #20]
 8019ec0:	697b      	ldr	r3, [r7, #20]
 8019ec2:	2b03      	cmp	r3, #3
 8019ec4:	d902      	bls.n	8019ecc <ETH_Clear_Tx_Descriptors+0x5c>
 8019ec6:	697b      	ldr	r3, [r7, #20]
 8019ec8:	3b04      	subs	r3, #4
 8019eca:	617b      	str	r3, [r7, #20]
                heth->TxDescList.TailTxDesc = ulTailTxDesc;
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	697a      	ldr	r2, [r7, #20]
 8019ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("dsb 0xF":::"memory");
 8019ed2:	f3bf 8f4f 	dsb	sy
}
 8019ed6:	bf00      	nop

                __DSB();

                xSemaphoreGive( xTXDescriptorSemaphore );
 8019ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8019f08 <ETH_Clear_Tx_Descriptors+0x98>)
 8019eda:	6818      	ldr	r0, [r3, #0]
 8019edc:	2300      	movs	r3, #0
 8019ede:	2200      	movs	r2, #0
 8019ee0:	2100      	movs	r1, #0
 8019ee2:	f7e9 fcfd 	bl	80038e0 <xQueueGenericSend>
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 8019ee6:	4b08      	ldr	r3, [pc, #32]	@ (8019f08 <ETH_Clear_Tx_Descriptors+0x98>)
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	4618      	mov	r0, r3
 8019eec:	f7e9 ff9e 	bl	8003e2c <uxQueueMessagesWaiting>
 8019ef0:	4603      	mov	r3, r0
 8019ef2:	2b04      	cmp	r3, #4
 8019ef4:	d1c4      	bne.n	8019e80 <ETH_Clear_Tx_Descriptors+0x10>
            }
        }
 8019ef6:	e002      	b.n	8019efe <ETH_Clear_Tx_Descriptors+0x8e>
                    break;
 8019ef8:	bf00      	nop
 8019efa:	e000      	b.n	8019efe <ETH_Clear_Tx_Descriptors+0x8e>
                        break;
 8019efc:	bf00      	nop
        }
 8019efe:	bf00      	nop
 8019f00:	3718      	adds	r7, #24
 8019f02:	46bd      	mov	sp, r7
 8019f04:	bd80      	pop	{r7, pc}
 8019f06:	bf00      	nop
 8019f08:	200023f0 	.word	0x200023f0

08019f0c <ETH_Prepare_Tx_Descriptors>:
 * @retval Status
 */
        static uint32_t ETH_Prepare_Tx_Descriptors( ETH_HandleTypeDef * heth,
                                                    ETH_TxPacketConfig * pTxConfig,
                                                    uint32_t ItMode )
        {
 8019f0c:	b480      	push	{r7}
 8019f0e:	b08b      	sub	sp, #44	@ 0x2c
 8019f10:	af00      	add	r7, sp, #0
 8019f12:	60f8      	str	r0, [r7, #12]
 8019f14:	60b9      	str	r1, [r7, #8]
 8019f16:	607a      	str	r2, [r7, #4]
            ETH_TxDescListTypeDef * dmatxdesclist = &heth->TxDescList;
 8019f18:	68fb      	ldr	r3, [r7, #12]
 8019f1a:	3318      	adds	r3, #24
 8019f1c:	623b      	str	r3, [r7, #32]
            uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8019f1e:	6a3b      	ldr	r3, [r7, #32]
 8019f20:	691b      	ldr	r3, [r3, #16]
 8019f22:	61fb      	str	r3, [r7, #28]
            uint32_t DESC3;
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 8019f24:	6a3b      	ldr	r3, [r7, #32]
 8019f26:	69fa      	ldr	r2, [r7, #28]
 8019f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019f2c:	61bb      	str	r3, [r7, #24]
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;
 8019f2e:	68bb      	ldr	r3, [r7, #8]
 8019f30:	689b      	ldr	r3, [r3, #8]
 8019f32:	617b      	str	r3, [r7, #20]

            /* FreeRTOS+TCP doesn't support linked buffers. */
            txbuffer->next = NULL;
 8019f34:	697b      	ldr	r3, [r7, #20]
 8019f36:	2200      	movs	r2, #0
 8019f38:	609a      	str	r2, [r3, #8]
            DESC3 = READ_REG( dmatxdesc->DESC3 );
 8019f3a:	69bb      	ldr	r3, [r7, #24]
 8019f3c:	68db      	ldr	r3, [r3, #12]
 8019f3e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Current TX Descriptor Owned by DMA: cannot be used by the application  */
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 8019f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	da01      	bge.n	8019f4a <ETH_Prepare_Tx_Descriptors+0x3e>
            {
                /* Should not get here because TX descriptors are protected by a counting semaphore. */
                return HAL_ETH_ERROR_BUSY;
 8019f46:	2302      	movs	r3, #2
 8019f48:	e05c      	b.n	801a004 <ETH_Prepare_Tx_Descriptors+0xf8>
            /***************************************************************************/
            /*****************    Normal descriptors configuration     *****************/
            /***************************************************************************/

            /* Set header or buffer 1 address */
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 8019f4a:	697b      	ldr	r3, [r7, #20]
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	461a      	mov	r2, r3
 8019f50:	69bb      	ldr	r3, [r7, #24]
 8019f52:	601a      	str	r2, [r3, #0]
            /* Set header or buffer 1 Length */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 8019f54:	69bb      	ldr	r3, [r7, #24]
 8019f56:	689a      	ldr	r2, [r3, #8]
 8019f58:	4b2d      	ldr	r3, [pc, #180]	@ (801a010 <ETH_Prepare_Tx_Descriptors+0x104>)
 8019f5a:	4013      	ands	r3, r2
 8019f5c:	697a      	ldr	r2, [r7, #20]
 8019f5e:	6852      	ldr	r2, [r2, #4]
 8019f60:	431a      	orrs	r2, r3
 8019f62:	69bb      	ldr	r3, [r7, #24]
 8019f64:	609a      	str	r2, [r3, #8]

            WRITE_REG( dmatxdesc->DESC1, 0x0 );
 8019f66:	69bb      	ldr	r3, [r7, #24]
 8019f68:	2200      	movs	r2, #0
 8019f6a:	605a      	str	r2, [r3, #4]
            /* Set buffer 2 Length to zero */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 8019f6c:	69bb      	ldr	r3, [r7, #24]
 8019f6e:	689a      	ldr	r2, [r3, #8]
 8019f70:	4b28      	ldr	r3, [pc, #160]	@ (801a014 <ETH_Prepare_Tx_Descriptors+0x108>)
 8019f72:	4013      	ands	r3, r2
 8019f74:	69ba      	ldr	r2, [r7, #24]
 8019f76:	6093      	str	r3, [r2, #8]

            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 8019f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019f7a:	4b27      	ldr	r3, [pc, #156]	@ (801a018 <ETH_Prepare_Tx_Descriptors+0x10c>)
 8019f7c:	4013      	ands	r3, r2
 8019f7e:	68ba      	ldr	r2, [r7, #8]
 8019f80:	6852      	ldr	r2, [r2, #4]
 8019f82:	4313      	orrs	r3, r2
 8019f84:	627b      	str	r3, [r7, #36]	@ 0x24

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM ) != 0U )
 8019f86:	68bb      	ldr	r3, [r7, #8]
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	f003 0301 	and.w	r3, r3, #1
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d006      	beq.n	8019fa0 <ETH_Prepare_Tx_Descriptors+0x94>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl );
 8019f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8019f98:	68bb      	ldr	r3, [r7, #8]
 8019f9a:	695b      	ldr	r3, [r3, #20]
 8019f9c:	4313      	orrs	r3, r2
 8019f9e:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD ) != 0U )
 8019fa0:	68bb      	ldr	r3, [r7, #8]
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	f003 0320 	and.w	r3, r3, #32
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d006      	beq.n	8019fba <ETH_Prepare_Tx_Descriptors+0xae>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl );
 8019fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8019fb2:	68bb      	ldr	r3, [r7, #8]
 8019fb4:	691b      	ldr	r3, [r3, #16]
 8019fb6:	4313      	orrs	r3, r2
 8019fb8:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Mark it as First and the last Descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_FD | ETH_DMATXNDESCRF_LD );
 8019fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fbc:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8019fc0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark it as NORMAL descriptor */
            CLEAR_BIT( DESC3, ETH_DMATXNDESCRF_CTXT );
 8019fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fc4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8019fc8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* set OWN bit of FIRST descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );
 8019fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fcc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8019fd0:	627b      	str	r3, [r7, #36]	@ 0x24

            if( ItMode != ( ( uint32_t ) RESET ) )
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d006      	beq.n	8019fe6 <ETH_Prepare_Tx_Descriptors+0xda>
            {
                /* Set Interrupt on competition bit */
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8019fd8:	69bb      	ldr	r3, [r7, #24]
 8019fda:	689b      	ldr	r3, [r3, #8]
 8019fdc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8019fe0:	69bb      	ldr	r3, [r7, #24]
 8019fe2:	609a      	str	r2, [r3, #8]
 8019fe4:	e005      	b.n	8019ff2 <ETH_Prepare_Tx_Descriptors+0xe6>
            }
            else
            {
                /* Clear Interrupt on competition bit */
                CLEAR_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8019fe6:	69bb      	ldr	r3, [r7, #24]
 8019fe8:	689b      	ldr	r3, [r3, #8]
 8019fea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8019fee:	69bb      	ldr	r3, [r7, #24]
 8019ff0:	609a      	str	r2, [r3, #8]
            }

            WRITE_REG( dmatxdesc->DESC3, DESC3 );
 8019ff2:	69bb      	ldr	r3, [r7, #24]
 8019ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019ff6:	60da      	str	r2, [r3, #12]

            /* Read back the value. */
            if( READ_REG( dmatxdesc->DESC3 ) )
 8019ff8:	69bb      	ldr	r3, [r7, #24]
 8019ffa:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8019ffc:	f3bf 8f4f 	dsb	sy
}
 801a000:	bf00      	nop
            }

            __DSB();

            /* Return function status */
            return HAL_ETH_ERROR_NONE;
 801a002:	2300      	movs	r3, #0
        }
 801a004:	4618      	mov	r0, r3
 801a006:	372c      	adds	r7, #44	@ 0x2c
 801a008:	46bd      	mov	sp, r7
 801a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a00e:	4770      	bx	lr
 801a010:	ffffc000 	.word	0xffffc000
 801a014:	c000ffff 	.word	0xc000ffff
 801a018:	ffff8000 	.word	0xffff8000

0801a01c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801a01c:	b580      	push	{r7, lr}
 801a01e:	b082      	sub	sp, #8
 801a020:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801a022:	2003      	movs	r0, #3
 801a024:	f000 f9a0 	bl	801a368 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801a028:	f003 faa6 	bl	801d578 <HAL_RCC_GetSysClockFreq>
 801a02c:	4602      	mov	r2, r0
 801a02e:	4b15      	ldr	r3, [pc, #84]	@ (801a084 <HAL_Init+0x68>)
 801a030:	699b      	ldr	r3, [r3, #24]
 801a032:	0a1b      	lsrs	r3, r3, #8
 801a034:	f003 030f 	and.w	r3, r3, #15
 801a038:	4913      	ldr	r1, [pc, #76]	@ (801a088 <HAL_Init+0x6c>)
 801a03a:	5ccb      	ldrb	r3, [r1, r3]
 801a03c:	f003 031f 	and.w	r3, r3, #31
 801a040:	fa22 f303 	lsr.w	r3, r2, r3
 801a044:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801a046:	4b0f      	ldr	r3, [pc, #60]	@ (801a084 <HAL_Init+0x68>)
 801a048:	699b      	ldr	r3, [r3, #24]
 801a04a:	f003 030f 	and.w	r3, r3, #15
 801a04e:	4a0e      	ldr	r2, [pc, #56]	@ (801a088 <HAL_Init+0x6c>)
 801a050:	5cd3      	ldrb	r3, [r2, r3]
 801a052:	f003 031f 	and.w	r3, r3, #31
 801a056:	687a      	ldr	r2, [r7, #4]
 801a058:	fa22 f303 	lsr.w	r3, r2, r3
 801a05c:	4a0b      	ldr	r2, [pc, #44]	@ (801a08c <HAL_Init+0x70>)
 801a05e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801a060:	4a0b      	ldr	r2, [pc, #44]	@ (801a090 <HAL_Init+0x74>)
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801a066:	200f      	movs	r0, #15
 801a068:	f000 f814 	bl	801a094 <HAL_InitTick>
 801a06c:	4603      	mov	r3, r0
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d001      	beq.n	801a076 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801a072:	2301      	movs	r3, #1
 801a074:	e002      	b.n	801a07c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801a076:	f7e8 f84b 	bl	8002110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801a07a:	2300      	movs	r3, #0
}
 801a07c:	4618      	mov	r0, r3
 801a07e:	3708      	adds	r7, #8
 801a080:	46bd      	mov	sp, r7
 801a082:	bd80      	pop	{r7, pc}
 801a084:	58024400 	.word	0x58024400
 801a088:	080277c0 	.word	0x080277c0
 801a08c:	20000004 	.word	0x20000004
 801a090:	20000000 	.word	0x20000000

0801a094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801a094:	b580      	push	{r7, lr}
 801a096:	b082      	sub	sp, #8
 801a098:	af00      	add	r7, sp, #0
 801a09a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 801a09c:	4b15      	ldr	r3, [pc, #84]	@ (801a0f4 <HAL_InitTick+0x60>)
 801a09e:	781b      	ldrb	r3, [r3, #0]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d101      	bne.n	801a0a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 801a0a4:	2301      	movs	r3, #1
 801a0a6:	e021      	b.n	801a0ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 801a0a8:	4b13      	ldr	r3, [pc, #76]	@ (801a0f8 <HAL_InitTick+0x64>)
 801a0aa:	681a      	ldr	r2, [r3, #0]
 801a0ac:	4b11      	ldr	r3, [pc, #68]	@ (801a0f4 <HAL_InitTick+0x60>)
 801a0ae:	781b      	ldrb	r3, [r3, #0]
 801a0b0:	4619      	mov	r1, r3
 801a0b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801a0b6:	fbb3 f3f1 	udiv	r3, r3, r1
 801a0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 801a0be:	4618      	mov	r0, r3
 801a0c0:	f000 f985 	bl	801a3ce <HAL_SYSTICK_Config>
 801a0c4:	4603      	mov	r3, r0
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d001      	beq.n	801a0ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801a0ca:	2301      	movs	r3, #1
 801a0cc:	e00e      	b.n	801a0ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	2b0f      	cmp	r3, #15
 801a0d2:	d80a      	bhi.n	801a0ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801a0d4:	2200      	movs	r2, #0
 801a0d6:	6879      	ldr	r1, [r7, #4]
 801a0d8:	f04f 30ff 	mov.w	r0, #4294967295
 801a0dc:	f000 f94f 	bl	801a37e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801a0e0:	4a06      	ldr	r2, [pc, #24]	@ (801a0fc <HAL_InitTick+0x68>)
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801a0e6:	2300      	movs	r3, #0
 801a0e8:	e000      	b.n	801a0ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 801a0ea:	2301      	movs	r3, #1
}
 801a0ec:	4618      	mov	r0, r3
 801a0ee:	3708      	adds	r7, #8
 801a0f0:	46bd      	mov	sp, r7
 801a0f2:	bd80      	pop	{r7, pc}
 801a0f4:	20000024 	.word	0x20000024
 801a0f8:	20000000 	.word	0x20000000
 801a0fc:	20000020 	.word	0x20000020

0801a100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801a100:	b480      	push	{r7}
 801a102:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801a104:	4b06      	ldr	r3, [pc, #24]	@ (801a120 <HAL_IncTick+0x20>)
 801a106:	781b      	ldrb	r3, [r3, #0]
 801a108:	461a      	mov	r2, r3
 801a10a:	4b06      	ldr	r3, [pc, #24]	@ (801a124 <HAL_IncTick+0x24>)
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	4413      	add	r3, r2
 801a110:	4a04      	ldr	r2, [pc, #16]	@ (801a124 <HAL_IncTick+0x24>)
 801a112:	6013      	str	r3, [r2, #0]
}
 801a114:	bf00      	nop
 801a116:	46bd      	mov	sp, r7
 801a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a11c:	4770      	bx	lr
 801a11e:	bf00      	nop
 801a120:	20000024 	.word	0x20000024
 801a124:	200024fc 	.word	0x200024fc

0801a128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801a128:	b480      	push	{r7}
 801a12a:	af00      	add	r7, sp, #0
  return uwTick;
 801a12c:	4b03      	ldr	r3, [pc, #12]	@ (801a13c <HAL_GetTick+0x14>)
 801a12e:	681b      	ldr	r3, [r3, #0]
}
 801a130:	4618      	mov	r0, r3
 801a132:	46bd      	mov	sp, r7
 801a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a138:	4770      	bx	lr
 801a13a:	bf00      	nop
 801a13c:	200024fc 	.word	0x200024fc

0801a140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801a140:	b580      	push	{r7, lr}
 801a142:	b084      	sub	sp, #16
 801a144:	af00      	add	r7, sp, #0
 801a146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801a148:	f7ff ffee 	bl	801a128 <HAL_GetTick>
 801a14c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801a152:	68fb      	ldr	r3, [r7, #12]
 801a154:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a158:	d005      	beq.n	801a166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801a15a:	4b0a      	ldr	r3, [pc, #40]	@ (801a184 <HAL_Delay+0x44>)
 801a15c:	781b      	ldrb	r3, [r3, #0]
 801a15e:	461a      	mov	r2, r3
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	4413      	add	r3, r2
 801a164:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801a166:	bf00      	nop
 801a168:	f7ff ffde 	bl	801a128 <HAL_GetTick>
 801a16c:	4602      	mov	r2, r0
 801a16e:	68bb      	ldr	r3, [r7, #8]
 801a170:	1ad3      	subs	r3, r2, r3
 801a172:	68fa      	ldr	r2, [r7, #12]
 801a174:	429a      	cmp	r2, r3
 801a176:	d8f7      	bhi.n	801a168 <HAL_Delay+0x28>
  {
  }
}
 801a178:	bf00      	nop
 801a17a:	bf00      	nop
 801a17c:	3710      	adds	r7, #16
 801a17e:	46bd      	mov	sp, r7
 801a180:	bd80      	pop	{r7, pc}
 801a182:	bf00      	nop
 801a184:	20000024 	.word	0x20000024

0801a188 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 801a188:	b480      	push	{r7}
 801a18a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 801a18c:	4b03      	ldr	r3, [pc, #12]	@ (801a19c <HAL_GetREVID+0x14>)
 801a18e:	681b      	ldr	r3, [r3, #0]
 801a190:	0c1b      	lsrs	r3, r3, #16
}
 801a192:	4618      	mov	r0, r3
 801a194:	46bd      	mov	sp, r7
 801a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a19a:	4770      	bx	lr
 801a19c:	5c001000 	.word	0x5c001000

0801a1a0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 801a1a0:	b480      	push	{r7}
 801a1a2:	b083      	sub	sp, #12
 801a1a4:	af00      	add	r7, sp, #0
 801a1a6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 801a1a8:	4b06      	ldr	r3, [pc, #24]	@ (801a1c4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801a1aa:	685b      	ldr	r3, [r3, #4]
 801a1ac:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 801a1b0:	4904      	ldr	r1, [pc, #16]	@ (801a1c4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	4313      	orrs	r3, r2
 801a1b6:	604b      	str	r3, [r1, #4]
}
 801a1b8:	bf00      	nop
 801a1ba:	370c      	adds	r7, #12
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1c2:	4770      	bx	lr
 801a1c4:	58000400 	.word	0x58000400

0801a1c8 <__NVIC_SetPriorityGrouping>:
{
 801a1c8:	b480      	push	{r7}
 801a1ca:	b085      	sub	sp, #20
 801a1cc:	af00      	add	r7, sp, #0
 801a1ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	f003 0307 	and.w	r3, r3, #7
 801a1d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801a1d8:	4b0b      	ldr	r3, [pc, #44]	@ (801a208 <__NVIC_SetPriorityGrouping+0x40>)
 801a1da:	68db      	ldr	r3, [r3, #12]
 801a1dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801a1de:	68ba      	ldr	r2, [r7, #8]
 801a1e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801a1e4:	4013      	ands	r3, r2
 801a1e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801a1e8:	68fb      	ldr	r3, [r7, #12]
 801a1ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801a1ec:	68bb      	ldr	r3, [r7, #8]
 801a1ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801a1f0:	4b06      	ldr	r3, [pc, #24]	@ (801a20c <__NVIC_SetPriorityGrouping+0x44>)
 801a1f2:	4313      	orrs	r3, r2
 801a1f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801a1f6:	4a04      	ldr	r2, [pc, #16]	@ (801a208 <__NVIC_SetPriorityGrouping+0x40>)
 801a1f8:	68bb      	ldr	r3, [r7, #8]
 801a1fa:	60d3      	str	r3, [r2, #12]
}
 801a1fc:	bf00      	nop
 801a1fe:	3714      	adds	r7, #20
 801a200:	46bd      	mov	sp, r7
 801a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a206:	4770      	bx	lr
 801a208:	e000ed00 	.word	0xe000ed00
 801a20c:	05fa0000 	.word	0x05fa0000

0801a210 <__NVIC_GetPriorityGrouping>:
{
 801a210:	b480      	push	{r7}
 801a212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801a214:	4b04      	ldr	r3, [pc, #16]	@ (801a228 <__NVIC_GetPriorityGrouping+0x18>)
 801a216:	68db      	ldr	r3, [r3, #12]
 801a218:	0a1b      	lsrs	r3, r3, #8
 801a21a:	f003 0307 	and.w	r3, r3, #7
}
 801a21e:	4618      	mov	r0, r3
 801a220:	46bd      	mov	sp, r7
 801a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a226:	4770      	bx	lr
 801a228:	e000ed00 	.word	0xe000ed00

0801a22c <__NVIC_EnableIRQ>:
{
 801a22c:	b480      	push	{r7}
 801a22e:	b083      	sub	sp, #12
 801a230:	af00      	add	r7, sp, #0
 801a232:	4603      	mov	r3, r0
 801a234:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	db0b      	blt.n	801a256 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a23e:	88fb      	ldrh	r3, [r7, #6]
 801a240:	f003 021f 	and.w	r2, r3, #31
 801a244:	4907      	ldr	r1, [pc, #28]	@ (801a264 <__NVIC_EnableIRQ+0x38>)
 801a246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a24a:	095b      	lsrs	r3, r3, #5
 801a24c:	2001      	movs	r0, #1
 801a24e:	fa00 f202 	lsl.w	r2, r0, r2
 801a252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801a256:	bf00      	nop
 801a258:	370c      	adds	r7, #12
 801a25a:	46bd      	mov	sp, r7
 801a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a260:	4770      	bx	lr
 801a262:	bf00      	nop
 801a264:	e000e100 	.word	0xe000e100

0801a268 <__NVIC_SetPriority>:
{
 801a268:	b480      	push	{r7}
 801a26a:	b083      	sub	sp, #12
 801a26c:	af00      	add	r7, sp, #0
 801a26e:	4603      	mov	r3, r0
 801a270:	6039      	str	r1, [r7, #0]
 801a272:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a274:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a278:	2b00      	cmp	r3, #0
 801a27a:	db0a      	blt.n	801a292 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a27c:	683b      	ldr	r3, [r7, #0]
 801a27e:	b2da      	uxtb	r2, r3
 801a280:	490c      	ldr	r1, [pc, #48]	@ (801a2b4 <__NVIC_SetPriority+0x4c>)
 801a282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a286:	0112      	lsls	r2, r2, #4
 801a288:	b2d2      	uxtb	r2, r2
 801a28a:	440b      	add	r3, r1
 801a28c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801a290:	e00a      	b.n	801a2a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a292:	683b      	ldr	r3, [r7, #0]
 801a294:	b2da      	uxtb	r2, r3
 801a296:	4908      	ldr	r1, [pc, #32]	@ (801a2b8 <__NVIC_SetPriority+0x50>)
 801a298:	88fb      	ldrh	r3, [r7, #6]
 801a29a:	f003 030f 	and.w	r3, r3, #15
 801a29e:	3b04      	subs	r3, #4
 801a2a0:	0112      	lsls	r2, r2, #4
 801a2a2:	b2d2      	uxtb	r2, r2
 801a2a4:	440b      	add	r3, r1
 801a2a6:	761a      	strb	r2, [r3, #24]
}
 801a2a8:	bf00      	nop
 801a2aa:	370c      	adds	r7, #12
 801a2ac:	46bd      	mov	sp, r7
 801a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2b2:	4770      	bx	lr
 801a2b4:	e000e100 	.word	0xe000e100
 801a2b8:	e000ed00 	.word	0xe000ed00

0801a2bc <NVIC_EncodePriority>:
{
 801a2bc:	b480      	push	{r7}
 801a2be:	b089      	sub	sp, #36	@ 0x24
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	60f8      	str	r0, [r7, #12]
 801a2c4:	60b9      	str	r1, [r7, #8]
 801a2c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	f003 0307 	and.w	r3, r3, #7
 801a2ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801a2d0:	69fb      	ldr	r3, [r7, #28]
 801a2d2:	f1c3 0307 	rsb	r3, r3, #7
 801a2d6:	2b04      	cmp	r3, #4
 801a2d8:	bf28      	it	cs
 801a2da:	2304      	movcs	r3, #4
 801a2dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801a2de:	69fb      	ldr	r3, [r7, #28]
 801a2e0:	3304      	adds	r3, #4
 801a2e2:	2b06      	cmp	r3, #6
 801a2e4:	d902      	bls.n	801a2ec <NVIC_EncodePriority+0x30>
 801a2e6:	69fb      	ldr	r3, [r7, #28]
 801a2e8:	3b03      	subs	r3, #3
 801a2ea:	e000      	b.n	801a2ee <NVIC_EncodePriority+0x32>
 801a2ec:	2300      	movs	r3, #0
 801a2ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a2f0:	f04f 32ff 	mov.w	r2, #4294967295
 801a2f4:	69bb      	ldr	r3, [r7, #24]
 801a2f6:	fa02 f303 	lsl.w	r3, r2, r3
 801a2fa:	43da      	mvns	r2, r3
 801a2fc:	68bb      	ldr	r3, [r7, #8]
 801a2fe:	401a      	ands	r2, r3
 801a300:	697b      	ldr	r3, [r7, #20]
 801a302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801a304:	f04f 31ff 	mov.w	r1, #4294967295
 801a308:	697b      	ldr	r3, [r7, #20]
 801a30a:	fa01 f303 	lsl.w	r3, r1, r3
 801a30e:	43d9      	mvns	r1, r3
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a314:	4313      	orrs	r3, r2
}
 801a316:	4618      	mov	r0, r3
 801a318:	3724      	adds	r7, #36	@ 0x24
 801a31a:	46bd      	mov	sp, r7
 801a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a320:	4770      	bx	lr
	...

0801a324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801a324:	b580      	push	{r7, lr}
 801a326:	b082      	sub	sp, #8
 801a328:	af00      	add	r7, sp, #0
 801a32a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	3b01      	subs	r3, #1
 801a330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a334:	d301      	bcc.n	801a33a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801a336:	2301      	movs	r3, #1
 801a338:	e00f      	b.n	801a35a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801a33a:	4a0a      	ldr	r2, [pc, #40]	@ (801a364 <SysTick_Config+0x40>)
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	3b01      	subs	r3, #1
 801a340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801a342:	210f      	movs	r1, #15
 801a344:	f04f 30ff 	mov.w	r0, #4294967295
 801a348:	f7ff ff8e 	bl	801a268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801a34c:	4b05      	ldr	r3, [pc, #20]	@ (801a364 <SysTick_Config+0x40>)
 801a34e:	2200      	movs	r2, #0
 801a350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801a352:	4b04      	ldr	r3, [pc, #16]	@ (801a364 <SysTick_Config+0x40>)
 801a354:	2207      	movs	r2, #7
 801a356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801a358:	2300      	movs	r3, #0
}
 801a35a:	4618      	mov	r0, r3
 801a35c:	3708      	adds	r7, #8
 801a35e:	46bd      	mov	sp, r7
 801a360:	bd80      	pop	{r7, pc}
 801a362:	bf00      	nop
 801a364:	e000e010 	.word	0xe000e010

0801a368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801a368:	b580      	push	{r7, lr}
 801a36a:	b082      	sub	sp, #8
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801a370:	6878      	ldr	r0, [r7, #4]
 801a372:	f7ff ff29 	bl	801a1c8 <__NVIC_SetPriorityGrouping>
}
 801a376:	bf00      	nop
 801a378:	3708      	adds	r7, #8
 801a37a:	46bd      	mov	sp, r7
 801a37c:	bd80      	pop	{r7, pc}

0801a37e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801a37e:	b580      	push	{r7, lr}
 801a380:	b086      	sub	sp, #24
 801a382:	af00      	add	r7, sp, #0
 801a384:	4603      	mov	r3, r0
 801a386:	60b9      	str	r1, [r7, #8]
 801a388:	607a      	str	r2, [r7, #4]
 801a38a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801a38c:	f7ff ff40 	bl	801a210 <__NVIC_GetPriorityGrouping>
 801a390:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801a392:	687a      	ldr	r2, [r7, #4]
 801a394:	68b9      	ldr	r1, [r7, #8]
 801a396:	6978      	ldr	r0, [r7, #20]
 801a398:	f7ff ff90 	bl	801a2bc <NVIC_EncodePriority>
 801a39c:	4602      	mov	r2, r0
 801a39e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a3a2:	4611      	mov	r1, r2
 801a3a4:	4618      	mov	r0, r3
 801a3a6:	f7ff ff5f 	bl	801a268 <__NVIC_SetPriority>
}
 801a3aa:	bf00      	nop
 801a3ac:	3718      	adds	r7, #24
 801a3ae:	46bd      	mov	sp, r7
 801a3b0:	bd80      	pop	{r7, pc}

0801a3b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801a3b2:	b580      	push	{r7, lr}
 801a3b4:	b082      	sub	sp, #8
 801a3b6:	af00      	add	r7, sp, #0
 801a3b8:	4603      	mov	r3, r0
 801a3ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801a3bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a3c0:	4618      	mov	r0, r3
 801a3c2:	f7ff ff33 	bl	801a22c <__NVIC_EnableIRQ>
}
 801a3c6:	bf00      	nop
 801a3c8:	3708      	adds	r7, #8
 801a3ca:	46bd      	mov	sp, r7
 801a3cc:	bd80      	pop	{r7, pc}

0801a3ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801a3ce:	b580      	push	{r7, lr}
 801a3d0:	b082      	sub	sp, #8
 801a3d2:	af00      	add	r7, sp, #0
 801a3d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801a3d6:	6878      	ldr	r0, [r7, #4]
 801a3d8:	f7ff ffa4 	bl	801a324 <SysTick_Config>
 801a3dc:	4603      	mov	r3, r0
}
 801a3de:	4618      	mov	r0, r3
 801a3e0:	3708      	adds	r7, #8
 801a3e2:	46bd      	mov	sp, r7
 801a3e4:	bd80      	pop	{r7, pc}
	...

0801a3e8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 801a3e8:	b480      	push	{r7}
 801a3ea:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 801a3ec:	f3bf 8f5f 	dmb	sy
}
 801a3f0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801a3f2:	4b07      	ldr	r3, [pc, #28]	@ (801a410 <HAL_MPU_Disable+0x28>)
 801a3f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a3f6:	4a06      	ldr	r2, [pc, #24]	@ (801a410 <HAL_MPU_Disable+0x28>)
 801a3f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a3fc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801a3fe:	4b05      	ldr	r3, [pc, #20]	@ (801a414 <HAL_MPU_Disable+0x2c>)
 801a400:	2200      	movs	r2, #0
 801a402:	605a      	str	r2, [r3, #4]
}
 801a404:	bf00      	nop
 801a406:	46bd      	mov	sp, r7
 801a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a40c:	4770      	bx	lr
 801a40e:	bf00      	nop
 801a410:	e000ed00 	.word	0xe000ed00
 801a414:	e000ed90 	.word	0xe000ed90

0801a418 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801a418:	b480      	push	{r7}
 801a41a:	b083      	sub	sp, #12
 801a41c:	af00      	add	r7, sp, #0
 801a41e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801a420:	4a0b      	ldr	r2, [pc, #44]	@ (801a450 <HAL_MPU_Enable+0x38>)
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	f043 0301 	orr.w	r3, r3, #1
 801a428:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801a42a:	4b0a      	ldr	r3, [pc, #40]	@ (801a454 <HAL_MPU_Enable+0x3c>)
 801a42c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a42e:	4a09      	ldr	r2, [pc, #36]	@ (801a454 <HAL_MPU_Enable+0x3c>)
 801a430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801a434:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801a436:	f3bf 8f4f 	dsb	sy
}
 801a43a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801a43c:	f3bf 8f6f 	isb	sy
}
 801a440:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801a442:	bf00      	nop
 801a444:	370c      	adds	r7, #12
 801a446:	46bd      	mov	sp, r7
 801a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a44c:	4770      	bx	lr
 801a44e:	bf00      	nop
 801a450:	e000ed90 	.word	0xe000ed90
 801a454:	e000ed00 	.word	0xe000ed00

0801a458 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 801a458:	b480      	push	{r7}
 801a45a:	b083      	sub	sp, #12
 801a45c:	af00      	add	r7, sp, #0
 801a45e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	785a      	ldrb	r2, [r3, #1]
 801a464:	4b1b      	ldr	r3, [pc, #108]	@ (801a4d4 <HAL_MPU_ConfigRegion+0x7c>)
 801a466:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 801a468:	4b1a      	ldr	r3, [pc, #104]	@ (801a4d4 <HAL_MPU_ConfigRegion+0x7c>)
 801a46a:	691b      	ldr	r3, [r3, #16]
 801a46c:	4a19      	ldr	r2, [pc, #100]	@ (801a4d4 <HAL_MPU_ConfigRegion+0x7c>)
 801a46e:	f023 0301 	bic.w	r3, r3, #1
 801a472:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 801a474:	4a17      	ldr	r2, [pc, #92]	@ (801a4d4 <HAL_MPU_ConfigRegion+0x7c>)
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	685b      	ldr	r3, [r3, #4]
 801a47a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	7b1b      	ldrb	r3, [r3, #12]
 801a480:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	7adb      	ldrb	r3, [r3, #11]
 801a486:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a488:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	7a9b      	ldrb	r3, [r3, #10]
 801a48e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801a490:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	7b5b      	ldrb	r3, [r3, #13]
 801a496:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801a498:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	7b9b      	ldrb	r3, [r3, #14]
 801a49e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801a4a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	7bdb      	ldrb	r3, [r3, #15]
 801a4a6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801a4a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	7a5b      	ldrb	r3, [r3, #9]
 801a4ae:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801a4b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	7a1b      	ldrb	r3, [r3, #8]
 801a4b6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801a4b8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801a4ba:	687a      	ldr	r2, [r7, #4]
 801a4bc:	7812      	ldrb	r2, [r2, #0]
 801a4be:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a4c0:	4a04      	ldr	r2, [pc, #16]	@ (801a4d4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801a4c2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a4c4:	6113      	str	r3, [r2, #16]
}
 801a4c6:	bf00      	nop
 801a4c8:	370c      	adds	r7, #12
 801a4ca:	46bd      	mov	sp, r7
 801a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4d0:	4770      	bx	lr
 801a4d2:	bf00      	nop
 801a4d4:	e000ed90 	.word	0xe000ed90

0801a4d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801a4d8:	b580      	push	{r7, lr}
 801a4da:	b086      	sub	sp, #24
 801a4dc:	af00      	add	r7, sp, #0
 801a4de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 801a4e0:	f7ff fe22 	bl	801a128 <HAL_GetTick>
 801a4e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	d101      	bne.n	801a4f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 801a4ec:	2301      	movs	r3, #1
 801a4ee:	e316      	b.n	801ab1e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	4a66      	ldr	r2, [pc, #408]	@ (801a690 <HAL_DMA_Init+0x1b8>)
 801a4f6:	4293      	cmp	r3, r2
 801a4f8:	d04a      	beq.n	801a590 <HAL_DMA_Init+0xb8>
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	4a65      	ldr	r2, [pc, #404]	@ (801a694 <HAL_DMA_Init+0x1bc>)
 801a500:	4293      	cmp	r3, r2
 801a502:	d045      	beq.n	801a590 <HAL_DMA_Init+0xb8>
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	681b      	ldr	r3, [r3, #0]
 801a508:	4a63      	ldr	r2, [pc, #396]	@ (801a698 <HAL_DMA_Init+0x1c0>)
 801a50a:	4293      	cmp	r3, r2
 801a50c:	d040      	beq.n	801a590 <HAL_DMA_Init+0xb8>
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	4a62      	ldr	r2, [pc, #392]	@ (801a69c <HAL_DMA_Init+0x1c4>)
 801a514:	4293      	cmp	r3, r2
 801a516:	d03b      	beq.n	801a590 <HAL_DMA_Init+0xb8>
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	4a60      	ldr	r2, [pc, #384]	@ (801a6a0 <HAL_DMA_Init+0x1c8>)
 801a51e:	4293      	cmp	r3, r2
 801a520:	d036      	beq.n	801a590 <HAL_DMA_Init+0xb8>
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	4a5f      	ldr	r2, [pc, #380]	@ (801a6a4 <HAL_DMA_Init+0x1cc>)
 801a528:	4293      	cmp	r3, r2
 801a52a:	d031      	beq.n	801a590 <HAL_DMA_Init+0xb8>
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	4a5d      	ldr	r2, [pc, #372]	@ (801a6a8 <HAL_DMA_Init+0x1d0>)
 801a532:	4293      	cmp	r3, r2
 801a534:	d02c      	beq.n	801a590 <HAL_DMA_Init+0xb8>
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	4a5c      	ldr	r2, [pc, #368]	@ (801a6ac <HAL_DMA_Init+0x1d4>)
 801a53c:	4293      	cmp	r3, r2
 801a53e:	d027      	beq.n	801a590 <HAL_DMA_Init+0xb8>
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	4a5a      	ldr	r2, [pc, #360]	@ (801a6b0 <HAL_DMA_Init+0x1d8>)
 801a546:	4293      	cmp	r3, r2
 801a548:	d022      	beq.n	801a590 <HAL_DMA_Init+0xb8>
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	4a59      	ldr	r2, [pc, #356]	@ (801a6b4 <HAL_DMA_Init+0x1dc>)
 801a550:	4293      	cmp	r3, r2
 801a552:	d01d      	beq.n	801a590 <HAL_DMA_Init+0xb8>
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	4a57      	ldr	r2, [pc, #348]	@ (801a6b8 <HAL_DMA_Init+0x1e0>)
 801a55a:	4293      	cmp	r3, r2
 801a55c:	d018      	beq.n	801a590 <HAL_DMA_Init+0xb8>
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	4a56      	ldr	r2, [pc, #344]	@ (801a6bc <HAL_DMA_Init+0x1e4>)
 801a564:	4293      	cmp	r3, r2
 801a566:	d013      	beq.n	801a590 <HAL_DMA_Init+0xb8>
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	4a54      	ldr	r2, [pc, #336]	@ (801a6c0 <HAL_DMA_Init+0x1e8>)
 801a56e:	4293      	cmp	r3, r2
 801a570:	d00e      	beq.n	801a590 <HAL_DMA_Init+0xb8>
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	4a53      	ldr	r2, [pc, #332]	@ (801a6c4 <HAL_DMA_Init+0x1ec>)
 801a578:	4293      	cmp	r3, r2
 801a57a:	d009      	beq.n	801a590 <HAL_DMA_Init+0xb8>
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	4a51      	ldr	r2, [pc, #324]	@ (801a6c8 <HAL_DMA_Init+0x1f0>)
 801a582:	4293      	cmp	r3, r2
 801a584:	d004      	beq.n	801a590 <HAL_DMA_Init+0xb8>
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	4a50      	ldr	r2, [pc, #320]	@ (801a6cc <HAL_DMA_Init+0x1f4>)
 801a58c:	4293      	cmp	r3, r2
 801a58e:	d101      	bne.n	801a594 <HAL_DMA_Init+0xbc>
 801a590:	2301      	movs	r3, #1
 801a592:	e000      	b.n	801a596 <HAL_DMA_Init+0xbe>
 801a594:	2300      	movs	r3, #0
 801a596:	2b00      	cmp	r3, #0
 801a598:	f000 813b 	beq.w	801a812 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	2202      	movs	r2, #2
 801a5a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	2200      	movs	r2, #0
 801a5a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	4a37      	ldr	r2, [pc, #220]	@ (801a690 <HAL_DMA_Init+0x1b8>)
 801a5b2:	4293      	cmp	r3, r2
 801a5b4:	d04a      	beq.n	801a64c <HAL_DMA_Init+0x174>
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	4a36      	ldr	r2, [pc, #216]	@ (801a694 <HAL_DMA_Init+0x1bc>)
 801a5bc:	4293      	cmp	r3, r2
 801a5be:	d045      	beq.n	801a64c <HAL_DMA_Init+0x174>
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	4a34      	ldr	r2, [pc, #208]	@ (801a698 <HAL_DMA_Init+0x1c0>)
 801a5c6:	4293      	cmp	r3, r2
 801a5c8:	d040      	beq.n	801a64c <HAL_DMA_Init+0x174>
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	681b      	ldr	r3, [r3, #0]
 801a5ce:	4a33      	ldr	r2, [pc, #204]	@ (801a69c <HAL_DMA_Init+0x1c4>)
 801a5d0:	4293      	cmp	r3, r2
 801a5d2:	d03b      	beq.n	801a64c <HAL_DMA_Init+0x174>
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	4a31      	ldr	r2, [pc, #196]	@ (801a6a0 <HAL_DMA_Init+0x1c8>)
 801a5da:	4293      	cmp	r3, r2
 801a5dc:	d036      	beq.n	801a64c <HAL_DMA_Init+0x174>
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	681b      	ldr	r3, [r3, #0]
 801a5e2:	4a30      	ldr	r2, [pc, #192]	@ (801a6a4 <HAL_DMA_Init+0x1cc>)
 801a5e4:	4293      	cmp	r3, r2
 801a5e6:	d031      	beq.n	801a64c <HAL_DMA_Init+0x174>
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	4a2e      	ldr	r2, [pc, #184]	@ (801a6a8 <HAL_DMA_Init+0x1d0>)
 801a5ee:	4293      	cmp	r3, r2
 801a5f0:	d02c      	beq.n	801a64c <HAL_DMA_Init+0x174>
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	4a2d      	ldr	r2, [pc, #180]	@ (801a6ac <HAL_DMA_Init+0x1d4>)
 801a5f8:	4293      	cmp	r3, r2
 801a5fa:	d027      	beq.n	801a64c <HAL_DMA_Init+0x174>
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	4a2b      	ldr	r2, [pc, #172]	@ (801a6b0 <HAL_DMA_Init+0x1d8>)
 801a602:	4293      	cmp	r3, r2
 801a604:	d022      	beq.n	801a64c <HAL_DMA_Init+0x174>
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	4a2a      	ldr	r2, [pc, #168]	@ (801a6b4 <HAL_DMA_Init+0x1dc>)
 801a60c:	4293      	cmp	r3, r2
 801a60e:	d01d      	beq.n	801a64c <HAL_DMA_Init+0x174>
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	4a28      	ldr	r2, [pc, #160]	@ (801a6b8 <HAL_DMA_Init+0x1e0>)
 801a616:	4293      	cmp	r3, r2
 801a618:	d018      	beq.n	801a64c <HAL_DMA_Init+0x174>
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	4a27      	ldr	r2, [pc, #156]	@ (801a6bc <HAL_DMA_Init+0x1e4>)
 801a620:	4293      	cmp	r3, r2
 801a622:	d013      	beq.n	801a64c <HAL_DMA_Init+0x174>
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	4a25      	ldr	r2, [pc, #148]	@ (801a6c0 <HAL_DMA_Init+0x1e8>)
 801a62a:	4293      	cmp	r3, r2
 801a62c:	d00e      	beq.n	801a64c <HAL_DMA_Init+0x174>
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	4a24      	ldr	r2, [pc, #144]	@ (801a6c4 <HAL_DMA_Init+0x1ec>)
 801a634:	4293      	cmp	r3, r2
 801a636:	d009      	beq.n	801a64c <HAL_DMA_Init+0x174>
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	4a22      	ldr	r2, [pc, #136]	@ (801a6c8 <HAL_DMA_Init+0x1f0>)
 801a63e:	4293      	cmp	r3, r2
 801a640:	d004      	beq.n	801a64c <HAL_DMA_Init+0x174>
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	4a21      	ldr	r2, [pc, #132]	@ (801a6cc <HAL_DMA_Init+0x1f4>)
 801a648:	4293      	cmp	r3, r2
 801a64a:	d108      	bne.n	801a65e <HAL_DMA_Init+0x186>
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	681a      	ldr	r2, [r3, #0]
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	f022 0201 	bic.w	r2, r2, #1
 801a65a:	601a      	str	r2, [r3, #0]
 801a65c:	e007      	b.n	801a66e <HAL_DMA_Init+0x196>
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	681b      	ldr	r3, [r3, #0]
 801a662:	681a      	ldr	r2, [r3, #0]
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	f022 0201 	bic.w	r2, r2, #1
 801a66c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801a66e:	e02f      	b.n	801a6d0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801a670:	f7ff fd5a 	bl	801a128 <HAL_GetTick>
 801a674:	4602      	mov	r2, r0
 801a676:	693b      	ldr	r3, [r7, #16]
 801a678:	1ad3      	subs	r3, r2, r3
 801a67a:	2b05      	cmp	r3, #5
 801a67c:	d928      	bls.n	801a6d0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	2220      	movs	r2, #32
 801a682:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	2203      	movs	r2, #3
 801a688:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 801a68c:	2301      	movs	r3, #1
 801a68e:	e246      	b.n	801ab1e <HAL_DMA_Init+0x646>
 801a690:	40020010 	.word	0x40020010
 801a694:	40020028 	.word	0x40020028
 801a698:	40020040 	.word	0x40020040
 801a69c:	40020058 	.word	0x40020058
 801a6a0:	40020070 	.word	0x40020070
 801a6a4:	40020088 	.word	0x40020088
 801a6a8:	400200a0 	.word	0x400200a0
 801a6ac:	400200b8 	.word	0x400200b8
 801a6b0:	40020410 	.word	0x40020410
 801a6b4:	40020428 	.word	0x40020428
 801a6b8:	40020440 	.word	0x40020440
 801a6bc:	40020458 	.word	0x40020458
 801a6c0:	40020470 	.word	0x40020470
 801a6c4:	40020488 	.word	0x40020488
 801a6c8:	400204a0 	.word	0x400204a0
 801a6cc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	681b      	ldr	r3, [r3, #0]
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	f003 0301 	and.w	r3, r3, #1
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d1c8      	bne.n	801a670 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	681b      	ldr	r3, [r3, #0]
 801a6e2:	681b      	ldr	r3, [r3, #0]
 801a6e4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801a6e6:	697a      	ldr	r2, [r7, #20]
 801a6e8:	4b83      	ldr	r3, [pc, #524]	@ (801a8f8 <HAL_DMA_Init+0x420>)
 801a6ea:	4013      	ands	r3, r2
 801a6ec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801a6f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	691b      	ldr	r3, [r3, #16]
 801a6fc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a702:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	699b      	ldr	r3, [r3, #24]
 801a708:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a70e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	6a1b      	ldr	r3, [r3, #32]
 801a714:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801a716:	697a      	ldr	r2, [r7, #20]
 801a718:	4313      	orrs	r3, r2
 801a71a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a720:	2b04      	cmp	r3, #4
 801a722:	d107      	bne.n	801a734 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a72c:	4313      	orrs	r3, r2
 801a72e:	697a      	ldr	r2, [r7, #20]
 801a730:	4313      	orrs	r3, r2
 801a732:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 801a734:	4b71      	ldr	r3, [pc, #452]	@ (801a8fc <HAL_DMA_Init+0x424>)
 801a736:	681a      	ldr	r2, [r3, #0]
 801a738:	4b71      	ldr	r3, [pc, #452]	@ (801a900 <HAL_DMA_Init+0x428>)
 801a73a:	4013      	ands	r3, r2
 801a73c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801a740:	d328      	bcc.n	801a794 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	685b      	ldr	r3, [r3, #4]
 801a746:	2b28      	cmp	r3, #40	@ 0x28
 801a748:	d903      	bls.n	801a752 <HAL_DMA_Init+0x27a>
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	685b      	ldr	r3, [r3, #4]
 801a74e:	2b2e      	cmp	r3, #46	@ 0x2e
 801a750:	d917      	bls.n	801a782 <HAL_DMA_Init+0x2aa>
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	685b      	ldr	r3, [r3, #4]
 801a756:	2b3e      	cmp	r3, #62	@ 0x3e
 801a758:	d903      	bls.n	801a762 <HAL_DMA_Init+0x28a>
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	685b      	ldr	r3, [r3, #4]
 801a75e:	2b42      	cmp	r3, #66	@ 0x42
 801a760:	d90f      	bls.n	801a782 <HAL_DMA_Init+0x2aa>
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	685b      	ldr	r3, [r3, #4]
 801a766:	2b46      	cmp	r3, #70	@ 0x46
 801a768:	d903      	bls.n	801a772 <HAL_DMA_Init+0x29a>
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	685b      	ldr	r3, [r3, #4]
 801a76e:	2b48      	cmp	r3, #72	@ 0x48
 801a770:	d907      	bls.n	801a782 <HAL_DMA_Init+0x2aa>
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	685b      	ldr	r3, [r3, #4]
 801a776:	2b4e      	cmp	r3, #78	@ 0x4e
 801a778:	d905      	bls.n	801a786 <HAL_DMA_Init+0x2ae>
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	685b      	ldr	r3, [r3, #4]
 801a77e:	2b52      	cmp	r3, #82	@ 0x52
 801a780:	d801      	bhi.n	801a786 <HAL_DMA_Init+0x2ae>
 801a782:	2301      	movs	r3, #1
 801a784:	e000      	b.n	801a788 <HAL_DMA_Init+0x2b0>
 801a786:	2300      	movs	r3, #0
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d003      	beq.n	801a794 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 801a78c:	697b      	ldr	r3, [r7, #20]
 801a78e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a792:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	697a      	ldr	r2, [r7, #20]
 801a79a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	695b      	ldr	r3, [r3, #20]
 801a7a2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801a7a4:	697b      	ldr	r3, [r7, #20]
 801a7a6:	f023 0307 	bic.w	r3, r3, #7
 801a7aa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a7b0:	697a      	ldr	r2, [r7, #20]
 801a7b2:	4313      	orrs	r3, r2
 801a7b4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a7ba:	2b04      	cmp	r3, #4
 801a7bc:	d117      	bne.n	801a7ee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a7c2:	697a      	ldr	r2, [r7, #20]
 801a7c4:	4313      	orrs	r3, r2
 801a7c6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d00e      	beq.n	801a7ee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801a7d0:	6878      	ldr	r0, [r7, #4]
 801a7d2:	f001 fbff 	bl	801bfd4 <DMA_CheckFifoParam>
 801a7d6:	4603      	mov	r3, r0
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d008      	beq.n	801a7ee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	2240      	movs	r2, #64	@ 0x40
 801a7e0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	2201      	movs	r2, #1
 801a7e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 801a7ea:	2301      	movs	r3, #1
 801a7ec:	e197      	b.n	801ab1e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	697a      	ldr	r2, [r7, #20]
 801a7f4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801a7f6:	6878      	ldr	r0, [r7, #4]
 801a7f8:	f001 fb3a 	bl	801be70 <DMA_CalcBaseAndBitshift>
 801a7fc:	4603      	mov	r3, r0
 801a7fe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a804:	f003 031f 	and.w	r3, r3, #31
 801a808:	223f      	movs	r2, #63	@ 0x3f
 801a80a:	409a      	lsls	r2, r3
 801a80c:	68bb      	ldr	r3, [r7, #8]
 801a80e:	609a      	str	r2, [r3, #8]
 801a810:	e0cd      	b.n	801a9ae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	4a3b      	ldr	r2, [pc, #236]	@ (801a904 <HAL_DMA_Init+0x42c>)
 801a818:	4293      	cmp	r3, r2
 801a81a:	d022      	beq.n	801a862 <HAL_DMA_Init+0x38a>
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	4a39      	ldr	r2, [pc, #228]	@ (801a908 <HAL_DMA_Init+0x430>)
 801a822:	4293      	cmp	r3, r2
 801a824:	d01d      	beq.n	801a862 <HAL_DMA_Init+0x38a>
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	4a38      	ldr	r2, [pc, #224]	@ (801a90c <HAL_DMA_Init+0x434>)
 801a82c:	4293      	cmp	r3, r2
 801a82e:	d018      	beq.n	801a862 <HAL_DMA_Init+0x38a>
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	4a36      	ldr	r2, [pc, #216]	@ (801a910 <HAL_DMA_Init+0x438>)
 801a836:	4293      	cmp	r3, r2
 801a838:	d013      	beq.n	801a862 <HAL_DMA_Init+0x38a>
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	4a35      	ldr	r2, [pc, #212]	@ (801a914 <HAL_DMA_Init+0x43c>)
 801a840:	4293      	cmp	r3, r2
 801a842:	d00e      	beq.n	801a862 <HAL_DMA_Init+0x38a>
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	4a33      	ldr	r2, [pc, #204]	@ (801a918 <HAL_DMA_Init+0x440>)
 801a84a:	4293      	cmp	r3, r2
 801a84c:	d009      	beq.n	801a862 <HAL_DMA_Init+0x38a>
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	4a32      	ldr	r2, [pc, #200]	@ (801a91c <HAL_DMA_Init+0x444>)
 801a854:	4293      	cmp	r3, r2
 801a856:	d004      	beq.n	801a862 <HAL_DMA_Init+0x38a>
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	4a30      	ldr	r2, [pc, #192]	@ (801a920 <HAL_DMA_Init+0x448>)
 801a85e:	4293      	cmp	r3, r2
 801a860:	d101      	bne.n	801a866 <HAL_DMA_Init+0x38e>
 801a862:	2301      	movs	r3, #1
 801a864:	e000      	b.n	801a868 <HAL_DMA_Init+0x390>
 801a866:	2300      	movs	r3, #0
 801a868:	2b00      	cmp	r3, #0
 801a86a:	f000 8097 	beq.w	801a99c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	4a24      	ldr	r2, [pc, #144]	@ (801a904 <HAL_DMA_Init+0x42c>)
 801a874:	4293      	cmp	r3, r2
 801a876:	d021      	beq.n	801a8bc <HAL_DMA_Init+0x3e4>
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	4a22      	ldr	r2, [pc, #136]	@ (801a908 <HAL_DMA_Init+0x430>)
 801a87e:	4293      	cmp	r3, r2
 801a880:	d01c      	beq.n	801a8bc <HAL_DMA_Init+0x3e4>
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	4a21      	ldr	r2, [pc, #132]	@ (801a90c <HAL_DMA_Init+0x434>)
 801a888:	4293      	cmp	r3, r2
 801a88a:	d017      	beq.n	801a8bc <HAL_DMA_Init+0x3e4>
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	4a1f      	ldr	r2, [pc, #124]	@ (801a910 <HAL_DMA_Init+0x438>)
 801a892:	4293      	cmp	r3, r2
 801a894:	d012      	beq.n	801a8bc <HAL_DMA_Init+0x3e4>
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	4a1e      	ldr	r2, [pc, #120]	@ (801a914 <HAL_DMA_Init+0x43c>)
 801a89c:	4293      	cmp	r3, r2
 801a89e:	d00d      	beq.n	801a8bc <HAL_DMA_Init+0x3e4>
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	4a1c      	ldr	r2, [pc, #112]	@ (801a918 <HAL_DMA_Init+0x440>)
 801a8a6:	4293      	cmp	r3, r2
 801a8a8:	d008      	beq.n	801a8bc <HAL_DMA_Init+0x3e4>
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	4a1b      	ldr	r2, [pc, #108]	@ (801a91c <HAL_DMA_Init+0x444>)
 801a8b0:	4293      	cmp	r3, r2
 801a8b2:	d003      	beq.n	801a8bc <HAL_DMA_Init+0x3e4>
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	4a19      	ldr	r2, [pc, #100]	@ (801a920 <HAL_DMA_Init+0x448>)
 801a8ba:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	2202      	movs	r2, #2
 801a8c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	2200      	movs	r2, #0
 801a8c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 801a8d4:	697a      	ldr	r2, [r7, #20]
 801a8d6:	4b13      	ldr	r3, [pc, #76]	@ (801a924 <HAL_DMA_Init+0x44c>)
 801a8d8:	4013      	ands	r3, r2
 801a8da:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	689b      	ldr	r3, [r3, #8]
 801a8e0:	2b40      	cmp	r3, #64	@ 0x40
 801a8e2:	d021      	beq.n	801a928 <HAL_DMA_Init+0x450>
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	689b      	ldr	r3, [r3, #8]
 801a8e8:	2b80      	cmp	r3, #128	@ 0x80
 801a8ea:	d102      	bne.n	801a8f2 <HAL_DMA_Init+0x41a>
 801a8ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801a8f0:	e01b      	b.n	801a92a <HAL_DMA_Init+0x452>
 801a8f2:	2300      	movs	r3, #0
 801a8f4:	e019      	b.n	801a92a <HAL_DMA_Init+0x452>
 801a8f6:	bf00      	nop
 801a8f8:	fe10803f 	.word	0xfe10803f
 801a8fc:	5c001000 	.word	0x5c001000
 801a900:	ffff0000 	.word	0xffff0000
 801a904:	58025408 	.word	0x58025408
 801a908:	5802541c 	.word	0x5802541c
 801a90c:	58025430 	.word	0x58025430
 801a910:	58025444 	.word	0x58025444
 801a914:	58025458 	.word	0x58025458
 801a918:	5802546c 	.word	0x5802546c
 801a91c:	58025480 	.word	0x58025480
 801a920:	58025494 	.word	0x58025494
 801a924:	fffe000f 	.word	0xfffe000f
 801a928:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801a92a:	687a      	ldr	r2, [r7, #4]
 801a92c:	68d2      	ldr	r2, [r2, #12]
 801a92e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a930:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	691b      	ldr	r3, [r3, #16]
 801a936:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801a938:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	695b      	ldr	r3, [r3, #20]
 801a93e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801a940:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	699b      	ldr	r3, [r3, #24]
 801a946:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801a948:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	69db      	ldr	r3, [r3, #28]
 801a94e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801a950:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	6a1b      	ldr	r3, [r3, #32]
 801a956:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801a958:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a95a:	697a      	ldr	r2, [r7, #20]
 801a95c:	4313      	orrs	r3, r2
 801a95e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	697a      	ldr	r2, [r7, #20]
 801a966:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	461a      	mov	r2, r3
 801a96e:	4b6e      	ldr	r3, [pc, #440]	@ (801ab28 <HAL_DMA_Init+0x650>)
 801a970:	4413      	add	r3, r2
 801a972:	4a6e      	ldr	r2, [pc, #440]	@ (801ab2c <HAL_DMA_Init+0x654>)
 801a974:	fba2 2303 	umull	r2, r3, r2, r3
 801a978:	091b      	lsrs	r3, r3, #4
 801a97a:	009a      	lsls	r2, r3, #2
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801a980:	6878      	ldr	r0, [r7, #4]
 801a982:	f001 fa75 	bl	801be70 <DMA_CalcBaseAndBitshift>
 801a986:	4603      	mov	r3, r0
 801a988:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a98e:	f003 031f 	and.w	r3, r3, #31
 801a992:	2201      	movs	r2, #1
 801a994:	409a      	lsls	r2, r3
 801a996:	68fb      	ldr	r3, [r7, #12]
 801a998:	605a      	str	r2, [r3, #4]
 801a99a:	e008      	b.n	801a9ae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	2240      	movs	r2, #64	@ 0x40
 801a9a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	2203      	movs	r2, #3
 801a9a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 801a9aa:	2301      	movs	r3, #1
 801a9ac:	e0b7      	b.n	801ab1e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	4a5f      	ldr	r2, [pc, #380]	@ (801ab30 <HAL_DMA_Init+0x658>)
 801a9b4:	4293      	cmp	r3, r2
 801a9b6:	d072      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	4a5d      	ldr	r2, [pc, #372]	@ (801ab34 <HAL_DMA_Init+0x65c>)
 801a9be:	4293      	cmp	r3, r2
 801a9c0:	d06d      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	4a5c      	ldr	r2, [pc, #368]	@ (801ab38 <HAL_DMA_Init+0x660>)
 801a9c8:	4293      	cmp	r3, r2
 801a9ca:	d068      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	4a5a      	ldr	r2, [pc, #360]	@ (801ab3c <HAL_DMA_Init+0x664>)
 801a9d2:	4293      	cmp	r3, r2
 801a9d4:	d063      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	681b      	ldr	r3, [r3, #0]
 801a9da:	4a59      	ldr	r2, [pc, #356]	@ (801ab40 <HAL_DMA_Init+0x668>)
 801a9dc:	4293      	cmp	r3, r2
 801a9de:	d05e      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	4a57      	ldr	r2, [pc, #348]	@ (801ab44 <HAL_DMA_Init+0x66c>)
 801a9e6:	4293      	cmp	r3, r2
 801a9e8:	d059      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	4a56      	ldr	r2, [pc, #344]	@ (801ab48 <HAL_DMA_Init+0x670>)
 801a9f0:	4293      	cmp	r3, r2
 801a9f2:	d054      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	4a54      	ldr	r2, [pc, #336]	@ (801ab4c <HAL_DMA_Init+0x674>)
 801a9fa:	4293      	cmp	r3, r2
 801a9fc:	d04f      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	4a53      	ldr	r2, [pc, #332]	@ (801ab50 <HAL_DMA_Init+0x678>)
 801aa04:	4293      	cmp	r3, r2
 801aa06:	d04a      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	681b      	ldr	r3, [r3, #0]
 801aa0c:	4a51      	ldr	r2, [pc, #324]	@ (801ab54 <HAL_DMA_Init+0x67c>)
 801aa0e:	4293      	cmp	r3, r2
 801aa10:	d045      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	681b      	ldr	r3, [r3, #0]
 801aa16:	4a50      	ldr	r2, [pc, #320]	@ (801ab58 <HAL_DMA_Init+0x680>)
 801aa18:	4293      	cmp	r3, r2
 801aa1a:	d040      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	4a4e      	ldr	r2, [pc, #312]	@ (801ab5c <HAL_DMA_Init+0x684>)
 801aa22:	4293      	cmp	r3, r2
 801aa24:	d03b      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	4a4d      	ldr	r2, [pc, #308]	@ (801ab60 <HAL_DMA_Init+0x688>)
 801aa2c:	4293      	cmp	r3, r2
 801aa2e:	d036      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	4a4b      	ldr	r2, [pc, #300]	@ (801ab64 <HAL_DMA_Init+0x68c>)
 801aa36:	4293      	cmp	r3, r2
 801aa38:	d031      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	4a4a      	ldr	r2, [pc, #296]	@ (801ab68 <HAL_DMA_Init+0x690>)
 801aa40:	4293      	cmp	r3, r2
 801aa42:	d02c      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	4a48      	ldr	r2, [pc, #288]	@ (801ab6c <HAL_DMA_Init+0x694>)
 801aa4a:	4293      	cmp	r3, r2
 801aa4c:	d027      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	4a47      	ldr	r2, [pc, #284]	@ (801ab70 <HAL_DMA_Init+0x698>)
 801aa54:	4293      	cmp	r3, r2
 801aa56:	d022      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	681b      	ldr	r3, [r3, #0]
 801aa5c:	4a45      	ldr	r2, [pc, #276]	@ (801ab74 <HAL_DMA_Init+0x69c>)
 801aa5e:	4293      	cmp	r3, r2
 801aa60:	d01d      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	681b      	ldr	r3, [r3, #0]
 801aa66:	4a44      	ldr	r2, [pc, #272]	@ (801ab78 <HAL_DMA_Init+0x6a0>)
 801aa68:	4293      	cmp	r3, r2
 801aa6a:	d018      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	4a42      	ldr	r2, [pc, #264]	@ (801ab7c <HAL_DMA_Init+0x6a4>)
 801aa72:	4293      	cmp	r3, r2
 801aa74:	d013      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	4a41      	ldr	r2, [pc, #260]	@ (801ab80 <HAL_DMA_Init+0x6a8>)
 801aa7c:	4293      	cmp	r3, r2
 801aa7e:	d00e      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	4a3f      	ldr	r2, [pc, #252]	@ (801ab84 <HAL_DMA_Init+0x6ac>)
 801aa86:	4293      	cmp	r3, r2
 801aa88:	d009      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	4a3e      	ldr	r2, [pc, #248]	@ (801ab88 <HAL_DMA_Init+0x6b0>)
 801aa90:	4293      	cmp	r3, r2
 801aa92:	d004      	beq.n	801aa9e <HAL_DMA_Init+0x5c6>
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	681b      	ldr	r3, [r3, #0]
 801aa98:	4a3c      	ldr	r2, [pc, #240]	@ (801ab8c <HAL_DMA_Init+0x6b4>)
 801aa9a:	4293      	cmp	r3, r2
 801aa9c:	d101      	bne.n	801aaa2 <HAL_DMA_Init+0x5ca>
 801aa9e:	2301      	movs	r3, #1
 801aaa0:	e000      	b.n	801aaa4 <HAL_DMA_Init+0x5cc>
 801aaa2:	2300      	movs	r3, #0
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d032      	beq.n	801ab0e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801aaa8:	6878      	ldr	r0, [r7, #4]
 801aaaa:	f001 fb0f 	bl	801c0cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	689b      	ldr	r3, [r3, #8]
 801aab2:	2b80      	cmp	r3, #128	@ 0x80
 801aab4:	d102      	bne.n	801aabc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	2200      	movs	r2, #0
 801aaba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	685a      	ldr	r2, [r3, #4]
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801aac4:	b2d2      	uxtb	r2, r2
 801aac6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801aacc:	687a      	ldr	r2, [r7, #4]
 801aace:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801aad0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	685b      	ldr	r3, [r3, #4]
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d010      	beq.n	801aafc <HAL_DMA_Init+0x624>
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	685b      	ldr	r3, [r3, #4]
 801aade:	2b08      	cmp	r3, #8
 801aae0:	d80c      	bhi.n	801aafc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801aae2:	6878      	ldr	r0, [r7, #4]
 801aae4:	f001 fb8c 	bl	801c200 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aaec:	2200      	movs	r2, #0
 801aaee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aaf4:	687a      	ldr	r2, [r7, #4]
 801aaf6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801aaf8:	605a      	str	r2, [r3, #4]
 801aafa:	e008      	b.n	801ab0e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	2200      	movs	r2, #0
 801ab00:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	2200      	movs	r2, #0
 801ab06:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	2200      	movs	r2, #0
 801ab0c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	2200      	movs	r2, #0
 801ab12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	2201      	movs	r2, #1
 801ab18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801ab1c:	2300      	movs	r3, #0
}
 801ab1e:	4618      	mov	r0, r3
 801ab20:	3718      	adds	r7, #24
 801ab22:	46bd      	mov	sp, r7
 801ab24:	bd80      	pop	{r7, pc}
 801ab26:	bf00      	nop
 801ab28:	a7fdabf8 	.word	0xa7fdabf8
 801ab2c:	cccccccd 	.word	0xcccccccd
 801ab30:	40020010 	.word	0x40020010
 801ab34:	40020028 	.word	0x40020028
 801ab38:	40020040 	.word	0x40020040
 801ab3c:	40020058 	.word	0x40020058
 801ab40:	40020070 	.word	0x40020070
 801ab44:	40020088 	.word	0x40020088
 801ab48:	400200a0 	.word	0x400200a0
 801ab4c:	400200b8 	.word	0x400200b8
 801ab50:	40020410 	.word	0x40020410
 801ab54:	40020428 	.word	0x40020428
 801ab58:	40020440 	.word	0x40020440
 801ab5c:	40020458 	.word	0x40020458
 801ab60:	40020470 	.word	0x40020470
 801ab64:	40020488 	.word	0x40020488
 801ab68:	400204a0 	.word	0x400204a0
 801ab6c:	400204b8 	.word	0x400204b8
 801ab70:	58025408 	.word	0x58025408
 801ab74:	5802541c 	.word	0x5802541c
 801ab78:	58025430 	.word	0x58025430
 801ab7c:	58025444 	.word	0x58025444
 801ab80:	58025458 	.word	0x58025458
 801ab84:	5802546c 	.word	0x5802546c
 801ab88:	58025480 	.word	0x58025480
 801ab8c:	58025494 	.word	0x58025494

0801ab90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801ab90:	b580      	push	{r7, lr}
 801ab92:	b084      	sub	sp, #16
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d101      	bne.n	801aba2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801ab9e:	2301      	movs	r3, #1
 801aba0:	e237      	b.n	801b012 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801aba8:	b2db      	uxtb	r3, r3
 801abaa:	2b02      	cmp	r3, #2
 801abac:	d004      	beq.n	801abb8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	2280      	movs	r2, #128	@ 0x80
 801abb2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801abb4:	2301      	movs	r3, #1
 801abb6:	e22c      	b.n	801b012 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	4a5c      	ldr	r2, [pc, #368]	@ (801ad30 <HAL_DMA_Abort_IT+0x1a0>)
 801abbe:	4293      	cmp	r3, r2
 801abc0:	d04a      	beq.n	801ac58 <HAL_DMA_Abort_IT+0xc8>
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	4a5b      	ldr	r2, [pc, #364]	@ (801ad34 <HAL_DMA_Abort_IT+0x1a4>)
 801abc8:	4293      	cmp	r3, r2
 801abca:	d045      	beq.n	801ac58 <HAL_DMA_Abort_IT+0xc8>
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	4a59      	ldr	r2, [pc, #356]	@ (801ad38 <HAL_DMA_Abort_IT+0x1a8>)
 801abd2:	4293      	cmp	r3, r2
 801abd4:	d040      	beq.n	801ac58 <HAL_DMA_Abort_IT+0xc8>
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	4a58      	ldr	r2, [pc, #352]	@ (801ad3c <HAL_DMA_Abort_IT+0x1ac>)
 801abdc:	4293      	cmp	r3, r2
 801abde:	d03b      	beq.n	801ac58 <HAL_DMA_Abort_IT+0xc8>
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	4a56      	ldr	r2, [pc, #344]	@ (801ad40 <HAL_DMA_Abort_IT+0x1b0>)
 801abe6:	4293      	cmp	r3, r2
 801abe8:	d036      	beq.n	801ac58 <HAL_DMA_Abort_IT+0xc8>
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	4a55      	ldr	r2, [pc, #340]	@ (801ad44 <HAL_DMA_Abort_IT+0x1b4>)
 801abf0:	4293      	cmp	r3, r2
 801abf2:	d031      	beq.n	801ac58 <HAL_DMA_Abort_IT+0xc8>
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	4a53      	ldr	r2, [pc, #332]	@ (801ad48 <HAL_DMA_Abort_IT+0x1b8>)
 801abfa:	4293      	cmp	r3, r2
 801abfc:	d02c      	beq.n	801ac58 <HAL_DMA_Abort_IT+0xc8>
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	4a52      	ldr	r2, [pc, #328]	@ (801ad4c <HAL_DMA_Abort_IT+0x1bc>)
 801ac04:	4293      	cmp	r3, r2
 801ac06:	d027      	beq.n	801ac58 <HAL_DMA_Abort_IT+0xc8>
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	4a50      	ldr	r2, [pc, #320]	@ (801ad50 <HAL_DMA_Abort_IT+0x1c0>)
 801ac0e:	4293      	cmp	r3, r2
 801ac10:	d022      	beq.n	801ac58 <HAL_DMA_Abort_IT+0xc8>
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	4a4f      	ldr	r2, [pc, #316]	@ (801ad54 <HAL_DMA_Abort_IT+0x1c4>)
 801ac18:	4293      	cmp	r3, r2
 801ac1a:	d01d      	beq.n	801ac58 <HAL_DMA_Abort_IT+0xc8>
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	4a4d      	ldr	r2, [pc, #308]	@ (801ad58 <HAL_DMA_Abort_IT+0x1c8>)
 801ac22:	4293      	cmp	r3, r2
 801ac24:	d018      	beq.n	801ac58 <HAL_DMA_Abort_IT+0xc8>
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	4a4c      	ldr	r2, [pc, #304]	@ (801ad5c <HAL_DMA_Abort_IT+0x1cc>)
 801ac2c:	4293      	cmp	r3, r2
 801ac2e:	d013      	beq.n	801ac58 <HAL_DMA_Abort_IT+0xc8>
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	4a4a      	ldr	r2, [pc, #296]	@ (801ad60 <HAL_DMA_Abort_IT+0x1d0>)
 801ac36:	4293      	cmp	r3, r2
 801ac38:	d00e      	beq.n	801ac58 <HAL_DMA_Abort_IT+0xc8>
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	4a49      	ldr	r2, [pc, #292]	@ (801ad64 <HAL_DMA_Abort_IT+0x1d4>)
 801ac40:	4293      	cmp	r3, r2
 801ac42:	d009      	beq.n	801ac58 <HAL_DMA_Abort_IT+0xc8>
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	4a47      	ldr	r2, [pc, #284]	@ (801ad68 <HAL_DMA_Abort_IT+0x1d8>)
 801ac4a:	4293      	cmp	r3, r2
 801ac4c:	d004      	beq.n	801ac58 <HAL_DMA_Abort_IT+0xc8>
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	4a46      	ldr	r2, [pc, #280]	@ (801ad6c <HAL_DMA_Abort_IT+0x1dc>)
 801ac54:	4293      	cmp	r3, r2
 801ac56:	d101      	bne.n	801ac5c <HAL_DMA_Abort_IT+0xcc>
 801ac58:	2301      	movs	r3, #1
 801ac5a:	e000      	b.n	801ac5e <HAL_DMA_Abort_IT+0xce>
 801ac5c:	2300      	movs	r3, #0
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	f000 8086 	beq.w	801ad70 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	2204      	movs	r2, #4
 801ac68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	4a2f      	ldr	r2, [pc, #188]	@ (801ad30 <HAL_DMA_Abort_IT+0x1a0>)
 801ac72:	4293      	cmp	r3, r2
 801ac74:	d04a      	beq.n	801ad0c <HAL_DMA_Abort_IT+0x17c>
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	681b      	ldr	r3, [r3, #0]
 801ac7a:	4a2e      	ldr	r2, [pc, #184]	@ (801ad34 <HAL_DMA_Abort_IT+0x1a4>)
 801ac7c:	4293      	cmp	r3, r2
 801ac7e:	d045      	beq.n	801ad0c <HAL_DMA_Abort_IT+0x17c>
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	4a2c      	ldr	r2, [pc, #176]	@ (801ad38 <HAL_DMA_Abort_IT+0x1a8>)
 801ac86:	4293      	cmp	r3, r2
 801ac88:	d040      	beq.n	801ad0c <HAL_DMA_Abort_IT+0x17c>
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	4a2b      	ldr	r2, [pc, #172]	@ (801ad3c <HAL_DMA_Abort_IT+0x1ac>)
 801ac90:	4293      	cmp	r3, r2
 801ac92:	d03b      	beq.n	801ad0c <HAL_DMA_Abort_IT+0x17c>
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	4a29      	ldr	r2, [pc, #164]	@ (801ad40 <HAL_DMA_Abort_IT+0x1b0>)
 801ac9a:	4293      	cmp	r3, r2
 801ac9c:	d036      	beq.n	801ad0c <HAL_DMA_Abort_IT+0x17c>
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	4a28      	ldr	r2, [pc, #160]	@ (801ad44 <HAL_DMA_Abort_IT+0x1b4>)
 801aca4:	4293      	cmp	r3, r2
 801aca6:	d031      	beq.n	801ad0c <HAL_DMA_Abort_IT+0x17c>
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	4a26      	ldr	r2, [pc, #152]	@ (801ad48 <HAL_DMA_Abort_IT+0x1b8>)
 801acae:	4293      	cmp	r3, r2
 801acb0:	d02c      	beq.n	801ad0c <HAL_DMA_Abort_IT+0x17c>
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	4a25      	ldr	r2, [pc, #148]	@ (801ad4c <HAL_DMA_Abort_IT+0x1bc>)
 801acb8:	4293      	cmp	r3, r2
 801acba:	d027      	beq.n	801ad0c <HAL_DMA_Abort_IT+0x17c>
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	4a23      	ldr	r2, [pc, #140]	@ (801ad50 <HAL_DMA_Abort_IT+0x1c0>)
 801acc2:	4293      	cmp	r3, r2
 801acc4:	d022      	beq.n	801ad0c <HAL_DMA_Abort_IT+0x17c>
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	4a22      	ldr	r2, [pc, #136]	@ (801ad54 <HAL_DMA_Abort_IT+0x1c4>)
 801accc:	4293      	cmp	r3, r2
 801acce:	d01d      	beq.n	801ad0c <HAL_DMA_Abort_IT+0x17c>
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	681b      	ldr	r3, [r3, #0]
 801acd4:	4a20      	ldr	r2, [pc, #128]	@ (801ad58 <HAL_DMA_Abort_IT+0x1c8>)
 801acd6:	4293      	cmp	r3, r2
 801acd8:	d018      	beq.n	801ad0c <HAL_DMA_Abort_IT+0x17c>
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	4a1f      	ldr	r2, [pc, #124]	@ (801ad5c <HAL_DMA_Abort_IT+0x1cc>)
 801ace0:	4293      	cmp	r3, r2
 801ace2:	d013      	beq.n	801ad0c <HAL_DMA_Abort_IT+0x17c>
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	4a1d      	ldr	r2, [pc, #116]	@ (801ad60 <HAL_DMA_Abort_IT+0x1d0>)
 801acea:	4293      	cmp	r3, r2
 801acec:	d00e      	beq.n	801ad0c <HAL_DMA_Abort_IT+0x17c>
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	4a1c      	ldr	r2, [pc, #112]	@ (801ad64 <HAL_DMA_Abort_IT+0x1d4>)
 801acf4:	4293      	cmp	r3, r2
 801acf6:	d009      	beq.n	801ad0c <HAL_DMA_Abort_IT+0x17c>
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	4a1a      	ldr	r2, [pc, #104]	@ (801ad68 <HAL_DMA_Abort_IT+0x1d8>)
 801acfe:	4293      	cmp	r3, r2
 801ad00:	d004      	beq.n	801ad0c <HAL_DMA_Abort_IT+0x17c>
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	4a19      	ldr	r2, [pc, #100]	@ (801ad6c <HAL_DMA_Abort_IT+0x1dc>)
 801ad08:	4293      	cmp	r3, r2
 801ad0a:	d108      	bne.n	801ad1e <HAL_DMA_Abort_IT+0x18e>
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	681a      	ldr	r2, [r3, #0]
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	681b      	ldr	r3, [r3, #0]
 801ad16:	f022 0201 	bic.w	r2, r2, #1
 801ad1a:	601a      	str	r2, [r3, #0]
 801ad1c:	e178      	b.n	801b010 <HAL_DMA_Abort_IT+0x480>
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	681b      	ldr	r3, [r3, #0]
 801ad22:	681a      	ldr	r2, [r3, #0]
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	681b      	ldr	r3, [r3, #0]
 801ad28:	f022 0201 	bic.w	r2, r2, #1
 801ad2c:	601a      	str	r2, [r3, #0]
 801ad2e:	e16f      	b.n	801b010 <HAL_DMA_Abort_IT+0x480>
 801ad30:	40020010 	.word	0x40020010
 801ad34:	40020028 	.word	0x40020028
 801ad38:	40020040 	.word	0x40020040
 801ad3c:	40020058 	.word	0x40020058
 801ad40:	40020070 	.word	0x40020070
 801ad44:	40020088 	.word	0x40020088
 801ad48:	400200a0 	.word	0x400200a0
 801ad4c:	400200b8 	.word	0x400200b8
 801ad50:	40020410 	.word	0x40020410
 801ad54:	40020428 	.word	0x40020428
 801ad58:	40020440 	.word	0x40020440
 801ad5c:	40020458 	.word	0x40020458
 801ad60:	40020470 	.word	0x40020470
 801ad64:	40020488 	.word	0x40020488
 801ad68:	400204a0 	.word	0x400204a0
 801ad6c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	681b      	ldr	r3, [r3, #0]
 801ad74:	681a      	ldr	r2, [r3, #0]
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	f022 020e 	bic.w	r2, r2, #14
 801ad7e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	681b      	ldr	r3, [r3, #0]
 801ad84:	4a6c      	ldr	r2, [pc, #432]	@ (801af38 <HAL_DMA_Abort_IT+0x3a8>)
 801ad86:	4293      	cmp	r3, r2
 801ad88:	d04a      	beq.n	801ae20 <HAL_DMA_Abort_IT+0x290>
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	4a6b      	ldr	r2, [pc, #428]	@ (801af3c <HAL_DMA_Abort_IT+0x3ac>)
 801ad90:	4293      	cmp	r3, r2
 801ad92:	d045      	beq.n	801ae20 <HAL_DMA_Abort_IT+0x290>
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	4a69      	ldr	r2, [pc, #420]	@ (801af40 <HAL_DMA_Abort_IT+0x3b0>)
 801ad9a:	4293      	cmp	r3, r2
 801ad9c:	d040      	beq.n	801ae20 <HAL_DMA_Abort_IT+0x290>
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	4a68      	ldr	r2, [pc, #416]	@ (801af44 <HAL_DMA_Abort_IT+0x3b4>)
 801ada4:	4293      	cmp	r3, r2
 801ada6:	d03b      	beq.n	801ae20 <HAL_DMA_Abort_IT+0x290>
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	4a66      	ldr	r2, [pc, #408]	@ (801af48 <HAL_DMA_Abort_IT+0x3b8>)
 801adae:	4293      	cmp	r3, r2
 801adb0:	d036      	beq.n	801ae20 <HAL_DMA_Abort_IT+0x290>
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	681b      	ldr	r3, [r3, #0]
 801adb6:	4a65      	ldr	r2, [pc, #404]	@ (801af4c <HAL_DMA_Abort_IT+0x3bc>)
 801adb8:	4293      	cmp	r3, r2
 801adba:	d031      	beq.n	801ae20 <HAL_DMA_Abort_IT+0x290>
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	681b      	ldr	r3, [r3, #0]
 801adc0:	4a63      	ldr	r2, [pc, #396]	@ (801af50 <HAL_DMA_Abort_IT+0x3c0>)
 801adc2:	4293      	cmp	r3, r2
 801adc4:	d02c      	beq.n	801ae20 <HAL_DMA_Abort_IT+0x290>
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	681b      	ldr	r3, [r3, #0]
 801adca:	4a62      	ldr	r2, [pc, #392]	@ (801af54 <HAL_DMA_Abort_IT+0x3c4>)
 801adcc:	4293      	cmp	r3, r2
 801adce:	d027      	beq.n	801ae20 <HAL_DMA_Abort_IT+0x290>
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	4a60      	ldr	r2, [pc, #384]	@ (801af58 <HAL_DMA_Abort_IT+0x3c8>)
 801add6:	4293      	cmp	r3, r2
 801add8:	d022      	beq.n	801ae20 <HAL_DMA_Abort_IT+0x290>
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	681b      	ldr	r3, [r3, #0]
 801adde:	4a5f      	ldr	r2, [pc, #380]	@ (801af5c <HAL_DMA_Abort_IT+0x3cc>)
 801ade0:	4293      	cmp	r3, r2
 801ade2:	d01d      	beq.n	801ae20 <HAL_DMA_Abort_IT+0x290>
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	4a5d      	ldr	r2, [pc, #372]	@ (801af60 <HAL_DMA_Abort_IT+0x3d0>)
 801adea:	4293      	cmp	r3, r2
 801adec:	d018      	beq.n	801ae20 <HAL_DMA_Abort_IT+0x290>
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	681b      	ldr	r3, [r3, #0]
 801adf2:	4a5c      	ldr	r2, [pc, #368]	@ (801af64 <HAL_DMA_Abort_IT+0x3d4>)
 801adf4:	4293      	cmp	r3, r2
 801adf6:	d013      	beq.n	801ae20 <HAL_DMA_Abort_IT+0x290>
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	681b      	ldr	r3, [r3, #0]
 801adfc:	4a5a      	ldr	r2, [pc, #360]	@ (801af68 <HAL_DMA_Abort_IT+0x3d8>)
 801adfe:	4293      	cmp	r3, r2
 801ae00:	d00e      	beq.n	801ae20 <HAL_DMA_Abort_IT+0x290>
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	681b      	ldr	r3, [r3, #0]
 801ae06:	4a59      	ldr	r2, [pc, #356]	@ (801af6c <HAL_DMA_Abort_IT+0x3dc>)
 801ae08:	4293      	cmp	r3, r2
 801ae0a:	d009      	beq.n	801ae20 <HAL_DMA_Abort_IT+0x290>
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	4a57      	ldr	r2, [pc, #348]	@ (801af70 <HAL_DMA_Abort_IT+0x3e0>)
 801ae12:	4293      	cmp	r3, r2
 801ae14:	d004      	beq.n	801ae20 <HAL_DMA_Abort_IT+0x290>
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	681b      	ldr	r3, [r3, #0]
 801ae1a:	4a56      	ldr	r2, [pc, #344]	@ (801af74 <HAL_DMA_Abort_IT+0x3e4>)
 801ae1c:	4293      	cmp	r3, r2
 801ae1e:	d108      	bne.n	801ae32 <HAL_DMA_Abort_IT+0x2a2>
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	681b      	ldr	r3, [r3, #0]
 801ae24:	681a      	ldr	r2, [r3, #0]
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	f022 0201 	bic.w	r2, r2, #1
 801ae2e:	601a      	str	r2, [r3, #0]
 801ae30:	e007      	b.n	801ae42 <HAL_DMA_Abort_IT+0x2b2>
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	681b      	ldr	r3, [r3, #0]
 801ae36:	681a      	ldr	r2, [r3, #0]
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	f022 0201 	bic.w	r2, r2, #1
 801ae40:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801ae42:	687b      	ldr	r3, [r7, #4]
 801ae44:	681b      	ldr	r3, [r3, #0]
 801ae46:	4a3c      	ldr	r2, [pc, #240]	@ (801af38 <HAL_DMA_Abort_IT+0x3a8>)
 801ae48:	4293      	cmp	r3, r2
 801ae4a:	d072      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	4a3a      	ldr	r2, [pc, #232]	@ (801af3c <HAL_DMA_Abort_IT+0x3ac>)
 801ae52:	4293      	cmp	r3, r2
 801ae54:	d06d      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	4a39      	ldr	r2, [pc, #228]	@ (801af40 <HAL_DMA_Abort_IT+0x3b0>)
 801ae5c:	4293      	cmp	r3, r2
 801ae5e:	d068      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	4a37      	ldr	r2, [pc, #220]	@ (801af44 <HAL_DMA_Abort_IT+0x3b4>)
 801ae66:	4293      	cmp	r3, r2
 801ae68:	d063      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	4a36      	ldr	r2, [pc, #216]	@ (801af48 <HAL_DMA_Abort_IT+0x3b8>)
 801ae70:	4293      	cmp	r3, r2
 801ae72:	d05e      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	4a34      	ldr	r2, [pc, #208]	@ (801af4c <HAL_DMA_Abort_IT+0x3bc>)
 801ae7a:	4293      	cmp	r3, r2
 801ae7c:	d059      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	681b      	ldr	r3, [r3, #0]
 801ae82:	4a33      	ldr	r2, [pc, #204]	@ (801af50 <HAL_DMA_Abort_IT+0x3c0>)
 801ae84:	4293      	cmp	r3, r2
 801ae86:	d054      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	4a31      	ldr	r2, [pc, #196]	@ (801af54 <HAL_DMA_Abort_IT+0x3c4>)
 801ae8e:	4293      	cmp	r3, r2
 801ae90:	d04f      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	4a30      	ldr	r2, [pc, #192]	@ (801af58 <HAL_DMA_Abort_IT+0x3c8>)
 801ae98:	4293      	cmp	r3, r2
 801ae9a:	d04a      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	4a2e      	ldr	r2, [pc, #184]	@ (801af5c <HAL_DMA_Abort_IT+0x3cc>)
 801aea2:	4293      	cmp	r3, r2
 801aea4:	d045      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	681b      	ldr	r3, [r3, #0]
 801aeaa:	4a2d      	ldr	r2, [pc, #180]	@ (801af60 <HAL_DMA_Abort_IT+0x3d0>)
 801aeac:	4293      	cmp	r3, r2
 801aeae:	d040      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	4a2b      	ldr	r2, [pc, #172]	@ (801af64 <HAL_DMA_Abort_IT+0x3d4>)
 801aeb6:	4293      	cmp	r3, r2
 801aeb8:	d03b      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	4a2a      	ldr	r2, [pc, #168]	@ (801af68 <HAL_DMA_Abort_IT+0x3d8>)
 801aec0:	4293      	cmp	r3, r2
 801aec2:	d036      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	4a28      	ldr	r2, [pc, #160]	@ (801af6c <HAL_DMA_Abort_IT+0x3dc>)
 801aeca:	4293      	cmp	r3, r2
 801aecc:	d031      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	4a27      	ldr	r2, [pc, #156]	@ (801af70 <HAL_DMA_Abort_IT+0x3e0>)
 801aed4:	4293      	cmp	r3, r2
 801aed6:	d02c      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	4a25      	ldr	r2, [pc, #148]	@ (801af74 <HAL_DMA_Abort_IT+0x3e4>)
 801aede:	4293      	cmp	r3, r2
 801aee0:	d027      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	681b      	ldr	r3, [r3, #0]
 801aee6:	4a24      	ldr	r2, [pc, #144]	@ (801af78 <HAL_DMA_Abort_IT+0x3e8>)
 801aee8:	4293      	cmp	r3, r2
 801aeea:	d022      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	4a22      	ldr	r2, [pc, #136]	@ (801af7c <HAL_DMA_Abort_IT+0x3ec>)
 801aef2:	4293      	cmp	r3, r2
 801aef4:	d01d      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	4a21      	ldr	r2, [pc, #132]	@ (801af80 <HAL_DMA_Abort_IT+0x3f0>)
 801aefc:	4293      	cmp	r3, r2
 801aefe:	d018      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	4a1f      	ldr	r2, [pc, #124]	@ (801af84 <HAL_DMA_Abort_IT+0x3f4>)
 801af06:	4293      	cmp	r3, r2
 801af08:	d013      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	4a1e      	ldr	r2, [pc, #120]	@ (801af88 <HAL_DMA_Abort_IT+0x3f8>)
 801af10:	4293      	cmp	r3, r2
 801af12:	d00e      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	4a1c      	ldr	r2, [pc, #112]	@ (801af8c <HAL_DMA_Abort_IT+0x3fc>)
 801af1a:	4293      	cmp	r3, r2
 801af1c:	d009      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	4a1b      	ldr	r2, [pc, #108]	@ (801af90 <HAL_DMA_Abort_IT+0x400>)
 801af24:	4293      	cmp	r3, r2
 801af26:	d004      	beq.n	801af32 <HAL_DMA_Abort_IT+0x3a2>
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	4a19      	ldr	r2, [pc, #100]	@ (801af94 <HAL_DMA_Abort_IT+0x404>)
 801af2e:	4293      	cmp	r3, r2
 801af30:	d132      	bne.n	801af98 <HAL_DMA_Abort_IT+0x408>
 801af32:	2301      	movs	r3, #1
 801af34:	e031      	b.n	801af9a <HAL_DMA_Abort_IT+0x40a>
 801af36:	bf00      	nop
 801af38:	40020010 	.word	0x40020010
 801af3c:	40020028 	.word	0x40020028
 801af40:	40020040 	.word	0x40020040
 801af44:	40020058 	.word	0x40020058
 801af48:	40020070 	.word	0x40020070
 801af4c:	40020088 	.word	0x40020088
 801af50:	400200a0 	.word	0x400200a0
 801af54:	400200b8 	.word	0x400200b8
 801af58:	40020410 	.word	0x40020410
 801af5c:	40020428 	.word	0x40020428
 801af60:	40020440 	.word	0x40020440
 801af64:	40020458 	.word	0x40020458
 801af68:	40020470 	.word	0x40020470
 801af6c:	40020488 	.word	0x40020488
 801af70:	400204a0 	.word	0x400204a0
 801af74:	400204b8 	.word	0x400204b8
 801af78:	58025408 	.word	0x58025408
 801af7c:	5802541c 	.word	0x5802541c
 801af80:	58025430 	.word	0x58025430
 801af84:	58025444 	.word	0x58025444
 801af88:	58025458 	.word	0x58025458
 801af8c:	5802546c 	.word	0x5802546c
 801af90:	58025480 	.word	0x58025480
 801af94:	58025494 	.word	0x58025494
 801af98:	2300      	movs	r3, #0
 801af9a:	2b00      	cmp	r3, #0
 801af9c:	d028      	beq.n	801aff0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801afa2:	681a      	ldr	r2, [r3, #0]
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801afa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801afac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801afb2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801afb8:	f003 031f 	and.w	r3, r3, #31
 801afbc:	2201      	movs	r2, #1
 801afbe:	409a      	lsls	r2, r3
 801afc0:	68fb      	ldr	r3, [r7, #12]
 801afc2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801afc8:	687a      	ldr	r2, [r7, #4]
 801afca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801afcc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d00c      	beq.n	801aff0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801afda:	681a      	ldr	r2, [r3, #0]
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801afe0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801afe4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801afea:	687a      	ldr	r2, [r7, #4]
 801afec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801afee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	2201      	movs	r2, #1
 801aff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	2200      	movs	r2, #0
 801affc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b004:	2b00      	cmp	r3, #0
 801b006:	d003      	beq.n	801b010 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b00c:	6878      	ldr	r0, [r7, #4]
 801b00e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 801b010:	2300      	movs	r3, #0
}
 801b012:	4618      	mov	r0, r3
 801b014:	3710      	adds	r7, #16
 801b016:	46bd      	mov	sp, r7
 801b018:	bd80      	pop	{r7, pc}
 801b01a:	bf00      	nop

0801b01c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801b01c:	b580      	push	{r7, lr}
 801b01e:	b08a      	sub	sp, #40	@ 0x28
 801b020:	af00      	add	r7, sp, #0
 801b022:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 801b024:	2300      	movs	r3, #0
 801b026:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 801b028:	4b67      	ldr	r3, [pc, #412]	@ (801b1c8 <HAL_DMA_IRQHandler+0x1ac>)
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	4a67      	ldr	r2, [pc, #412]	@ (801b1cc <HAL_DMA_IRQHandler+0x1b0>)
 801b02e:	fba2 2303 	umull	r2, r3, r2, r3
 801b032:	0a9b      	lsrs	r3, r3, #10
 801b034:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b03a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b040:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 801b042:	6a3b      	ldr	r3, [r7, #32]
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 801b048:	69fb      	ldr	r3, [r7, #28]
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	4a5f      	ldr	r2, [pc, #380]	@ (801b1d0 <HAL_DMA_IRQHandler+0x1b4>)
 801b054:	4293      	cmp	r3, r2
 801b056:	d04a      	beq.n	801b0ee <HAL_DMA_IRQHandler+0xd2>
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	681b      	ldr	r3, [r3, #0]
 801b05c:	4a5d      	ldr	r2, [pc, #372]	@ (801b1d4 <HAL_DMA_IRQHandler+0x1b8>)
 801b05e:	4293      	cmp	r3, r2
 801b060:	d045      	beq.n	801b0ee <HAL_DMA_IRQHandler+0xd2>
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	4a5c      	ldr	r2, [pc, #368]	@ (801b1d8 <HAL_DMA_IRQHandler+0x1bc>)
 801b068:	4293      	cmp	r3, r2
 801b06a:	d040      	beq.n	801b0ee <HAL_DMA_IRQHandler+0xd2>
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	4a5a      	ldr	r2, [pc, #360]	@ (801b1dc <HAL_DMA_IRQHandler+0x1c0>)
 801b072:	4293      	cmp	r3, r2
 801b074:	d03b      	beq.n	801b0ee <HAL_DMA_IRQHandler+0xd2>
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	681b      	ldr	r3, [r3, #0]
 801b07a:	4a59      	ldr	r2, [pc, #356]	@ (801b1e0 <HAL_DMA_IRQHandler+0x1c4>)
 801b07c:	4293      	cmp	r3, r2
 801b07e:	d036      	beq.n	801b0ee <HAL_DMA_IRQHandler+0xd2>
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	4a57      	ldr	r2, [pc, #348]	@ (801b1e4 <HAL_DMA_IRQHandler+0x1c8>)
 801b086:	4293      	cmp	r3, r2
 801b088:	d031      	beq.n	801b0ee <HAL_DMA_IRQHandler+0xd2>
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	4a56      	ldr	r2, [pc, #344]	@ (801b1e8 <HAL_DMA_IRQHandler+0x1cc>)
 801b090:	4293      	cmp	r3, r2
 801b092:	d02c      	beq.n	801b0ee <HAL_DMA_IRQHandler+0xd2>
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	681b      	ldr	r3, [r3, #0]
 801b098:	4a54      	ldr	r2, [pc, #336]	@ (801b1ec <HAL_DMA_IRQHandler+0x1d0>)
 801b09a:	4293      	cmp	r3, r2
 801b09c:	d027      	beq.n	801b0ee <HAL_DMA_IRQHandler+0xd2>
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	681b      	ldr	r3, [r3, #0]
 801b0a2:	4a53      	ldr	r2, [pc, #332]	@ (801b1f0 <HAL_DMA_IRQHandler+0x1d4>)
 801b0a4:	4293      	cmp	r3, r2
 801b0a6:	d022      	beq.n	801b0ee <HAL_DMA_IRQHandler+0xd2>
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	4a51      	ldr	r2, [pc, #324]	@ (801b1f4 <HAL_DMA_IRQHandler+0x1d8>)
 801b0ae:	4293      	cmp	r3, r2
 801b0b0:	d01d      	beq.n	801b0ee <HAL_DMA_IRQHandler+0xd2>
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	4a50      	ldr	r2, [pc, #320]	@ (801b1f8 <HAL_DMA_IRQHandler+0x1dc>)
 801b0b8:	4293      	cmp	r3, r2
 801b0ba:	d018      	beq.n	801b0ee <HAL_DMA_IRQHandler+0xd2>
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	4a4e      	ldr	r2, [pc, #312]	@ (801b1fc <HAL_DMA_IRQHandler+0x1e0>)
 801b0c2:	4293      	cmp	r3, r2
 801b0c4:	d013      	beq.n	801b0ee <HAL_DMA_IRQHandler+0xd2>
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	4a4d      	ldr	r2, [pc, #308]	@ (801b200 <HAL_DMA_IRQHandler+0x1e4>)
 801b0cc:	4293      	cmp	r3, r2
 801b0ce:	d00e      	beq.n	801b0ee <HAL_DMA_IRQHandler+0xd2>
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	4a4b      	ldr	r2, [pc, #300]	@ (801b204 <HAL_DMA_IRQHandler+0x1e8>)
 801b0d6:	4293      	cmp	r3, r2
 801b0d8:	d009      	beq.n	801b0ee <HAL_DMA_IRQHandler+0xd2>
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	681b      	ldr	r3, [r3, #0]
 801b0de:	4a4a      	ldr	r2, [pc, #296]	@ (801b208 <HAL_DMA_IRQHandler+0x1ec>)
 801b0e0:	4293      	cmp	r3, r2
 801b0e2:	d004      	beq.n	801b0ee <HAL_DMA_IRQHandler+0xd2>
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	681b      	ldr	r3, [r3, #0]
 801b0e8:	4a48      	ldr	r2, [pc, #288]	@ (801b20c <HAL_DMA_IRQHandler+0x1f0>)
 801b0ea:	4293      	cmp	r3, r2
 801b0ec:	d101      	bne.n	801b0f2 <HAL_DMA_IRQHandler+0xd6>
 801b0ee:	2301      	movs	r3, #1
 801b0f0:	e000      	b.n	801b0f4 <HAL_DMA_IRQHandler+0xd8>
 801b0f2:	2300      	movs	r3, #0
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	f000 842b 	beq.w	801b950 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b0fe:	f003 031f 	and.w	r3, r3, #31
 801b102:	2208      	movs	r2, #8
 801b104:	409a      	lsls	r2, r3
 801b106:	69bb      	ldr	r3, [r7, #24]
 801b108:	4013      	ands	r3, r2
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	f000 80a2 	beq.w	801b254 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	4a2e      	ldr	r2, [pc, #184]	@ (801b1d0 <HAL_DMA_IRQHandler+0x1b4>)
 801b116:	4293      	cmp	r3, r2
 801b118:	d04a      	beq.n	801b1b0 <HAL_DMA_IRQHandler+0x194>
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	4a2d      	ldr	r2, [pc, #180]	@ (801b1d4 <HAL_DMA_IRQHandler+0x1b8>)
 801b120:	4293      	cmp	r3, r2
 801b122:	d045      	beq.n	801b1b0 <HAL_DMA_IRQHandler+0x194>
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	4a2b      	ldr	r2, [pc, #172]	@ (801b1d8 <HAL_DMA_IRQHandler+0x1bc>)
 801b12a:	4293      	cmp	r3, r2
 801b12c:	d040      	beq.n	801b1b0 <HAL_DMA_IRQHandler+0x194>
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	681b      	ldr	r3, [r3, #0]
 801b132:	4a2a      	ldr	r2, [pc, #168]	@ (801b1dc <HAL_DMA_IRQHandler+0x1c0>)
 801b134:	4293      	cmp	r3, r2
 801b136:	d03b      	beq.n	801b1b0 <HAL_DMA_IRQHandler+0x194>
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	681b      	ldr	r3, [r3, #0]
 801b13c:	4a28      	ldr	r2, [pc, #160]	@ (801b1e0 <HAL_DMA_IRQHandler+0x1c4>)
 801b13e:	4293      	cmp	r3, r2
 801b140:	d036      	beq.n	801b1b0 <HAL_DMA_IRQHandler+0x194>
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	681b      	ldr	r3, [r3, #0]
 801b146:	4a27      	ldr	r2, [pc, #156]	@ (801b1e4 <HAL_DMA_IRQHandler+0x1c8>)
 801b148:	4293      	cmp	r3, r2
 801b14a:	d031      	beq.n	801b1b0 <HAL_DMA_IRQHandler+0x194>
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	681b      	ldr	r3, [r3, #0]
 801b150:	4a25      	ldr	r2, [pc, #148]	@ (801b1e8 <HAL_DMA_IRQHandler+0x1cc>)
 801b152:	4293      	cmp	r3, r2
 801b154:	d02c      	beq.n	801b1b0 <HAL_DMA_IRQHandler+0x194>
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	4a24      	ldr	r2, [pc, #144]	@ (801b1ec <HAL_DMA_IRQHandler+0x1d0>)
 801b15c:	4293      	cmp	r3, r2
 801b15e:	d027      	beq.n	801b1b0 <HAL_DMA_IRQHandler+0x194>
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	4a22      	ldr	r2, [pc, #136]	@ (801b1f0 <HAL_DMA_IRQHandler+0x1d4>)
 801b166:	4293      	cmp	r3, r2
 801b168:	d022      	beq.n	801b1b0 <HAL_DMA_IRQHandler+0x194>
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	681b      	ldr	r3, [r3, #0]
 801b16e:	4a21      	ldr	r2, [pc, #132]	@ (801b1f4 <HAL_DMA_IRQHandler+0x1d8>)
 801b170:	4293      	cmp	r3, r2
 801b172:	d01d      	beq.n	801b1b0 <HAL_DMA_IRQHandler+0x194>
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	681b      	ldr	r3, [r3, #0]
 801b178:	4a1f      	ldr	r2, [pc, #124]	@ (801b1f8 <HAL_DMA_IRQHandler+0x1dc>)
 801b17a:	4293      	cmp	r3, r2
 801b17c:	d018      	beq.n	801b1b0 <HAL_DMA_IRQHandler+0x194>
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	681b      	ldr	r3, [r3, #0]
 801b182:	4a1e      	ldr	r2, [pc, #120]	@ (801b1fc <HAL_DMA_IRQHandler+0x1e0>)
 801b184:	4293      	cmp	r3, r2
 801b186:	d013      	beq.n	801b1b0 <HAL_DMA_IRQHandler+0x194>
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	4a1c      	ldr	r2, [pc, #112]	@ (801b200 <HAL_DMA_IRQHandler+0x1e4>)
 801b18e:	4293      	cmp	r3, r2
 801b190:	d00e      	beq.n	801b1b0 <HAL_DMA_IRQHandler+0x194>
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	681b      	ldr	r3, [r3, #0]
 801b196:	4a1b      	ldr	r2, [pc, #108]	@ (801b204 <HAL_DMA_IRQHandler+0x1e8>)
 801b198:	4293      	cmp	r3, r2
 801b19a:	d009      	beq.n	801b1b0 <HAL_DMA_IRQHandler+0x194>
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	4a19      	ldr	r2, [pc, #100]	@ (801b208 <HAL_DMA_IRQHandler+0x1ec>)
 801b1a2:	4293      	cmp	r3, r2
 801b1a4:	d004      	beq.n	801b1b0 <HAL_DMA_IRQHandler+0x194>
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	681b      	ldr	r3, [r3, #0]
 801b1aa:	4a18      	ldr	r2, [pc, #96]	@ (801b20c <HAL_DMA_IRQHandler+0x1f0>)
 801b1ac:	4293      	cmp	r3, r2
 801b1ae:	d12f      	bne.n	801b210 <HAL_DMA_IRQHandler+0x1f4>
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	681b      	ldr	r3, [r3, #0]
 801b1b4:	681b      	ldr	r3, [r3, #0]
 801b1b6:	f003 0304 	and.w	r3, r3, #4
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	bf14      	ite	ne
 801b1be:	2301      	movne	r3, #1
 801b1c0:	2300      	moveq	r3, #0
 801b1c2:	b2db      	uxtb	r3, r3
 801b1c4:	e02e      	b.n	801b224 <HAL_DMA_IRQHandler+0x208>
 801b1c6:	bf00      	nop
 801b1c8:	20000000 	.word	0x20000000
 801b1cc:	1b4e81b5 	.word	0x1b4e81b5
 801b1d0:	40020010 	.word	0x40020010
 801b1d4:	40020028 	.word	0x40020028
 801b1d8:	40020040 	.word	0x40020040
 801b1dc:	40020058 	.word	0x40020058
 801b1e0:	40020070 	.word	0x40020070
 801b1e4:	40020088 	.word	0x40020088
 801b1e8:	400200a0 	.word	0x400200a0
 801b1ec:	400200b8 	.word	0x400200b8
 801b1f0:	40020410 	.word	0x40020410
 801b1f4:	40020428 	.word	0x40020428
 801b1f8:	40020440 	.word	0x40020440
 801b1fc:	40020458 	.word	0x40020458
 801b200:	40020470 	.word	0x40020470
 801b204:	40020488 	.word	0x40020488
 801b208:	400204a0 	.word	0x400204a0
 801b20c:	400204b8 	.word	0x400204b8
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	681b      	ldr	r3, [r3, #0]
 801b216:	f003 0308 	and.w	r3, r3, #8
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	bf14      	ite	ne
 801b21e:	2301      	movne	r3, #1
 801b220:	2300      	moveq	r3, #0
 801b222:	b2db      	uxtb	r3, r3
 801b224:	2b00      	cmp	r3, #0
 801b226:	d015      	beq.n	801b254 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	681a      	ldr	r2, [r3, #0]
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	681b      	ldr	r3, [r3, #0]
 801b232:	f022 0204 	bic.w	r2, r2, #4
 801b236:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b23c:	f003 031f 	and.w	r3, r3, #31
 801b240:	2208      	movs	r2, #8
 801b242:	409a      	lsls	r2, r3
 801b244:	6a3b      	ldr	r3, [r7, #32]
 801b246:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b24c:	f043 0201 	orr.w	r2, r3, #1
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b258:	f003 031f 	and.w	r3, r3, #31
 801b25c:	69ba      	ldr	r2, [r7, #24]
 801b25e:	fa22 f303 	lsr.w	r3, r2, r3
 801b262:	f003 0301 	and.w	r3, r3, #1
 801b266:	2b00      	cmp	r3, #0
 801b268:	d06e      	beq.n	801b348 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	4a69      	ldr	r2, [pc, #420]	@ (801b414 <HAL_DMA_IRQHandler+0x3f8>)
 801b270:	4293      	cmp	r3, r2
 801b272:	d04a      	beq.n	801b30a <HAL_DMA_IRQHandler+0x2ee>
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	681b      	ldr	r3, [r3, #0]
 801b278:	4a67      	ldr	r2, [pc, #412]	@ (801b418 <HAL_DMA_IRQHandler+0x3fc>)
 801b27a:	4293      	cmp	r3, r2
 801b27c:	d045      	beq.n	801b30a <HAL_DMA_IRQHandler+0x2ee>
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	4a66      	ldr	r2, [pc, #408]	@ (801b41c <HAL_DMA_IRQHandler+0x400>)
 801b284:	4293      	cmp	r3, r2
 801b286:	d040      	beq.n	801b30a <HAL_DMA_IRQHandler+0x2ee>
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	681b      	ldr	r3, [r3, #0]
 801b28c:	4a64      	ldr	r2, [pc, #400]	@ (801b420 <HAL_DMA_IRQHandler+0x404>)
 801b28e:	4293      	cmp	r3, r2
 801b290:	d03b      	beq.n	801b30a <HAL_DMA_IRQHandler+0x2ee>
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	681b      	ldr	r3, [r3, #0]
 801b296:	4a63      	ldr	r2, [pc, #396]	@ (801b424 <HAL_DMA_IRQHandler+0x408>)
 801b298:	4293      	cmp	r3, r2
 801b29a:	d036      	beq.n	801b30a <HAL_DMA_IRQHandler+0x2ee>
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	4a61      	ldr	r2, [pc, #388]	@ (801b428 <HAL_DMA_IRQHandler+0x40c>)
 801b2a2:	4293      	cmp	r3, r2
 801b2a4:	d031      	beq.n	801b30a <HAL_DMA_IRQHandler+0x2ee>
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	4a60      	ldr	r2, [pc, #384]	@ (801b42c <HAL_DMA_IRQHandler+0x410>)
 801b2ac:	4293      	cmp	r3, r2
 801b2ae:	d02c      	beq.n	801b30a <HAL_DMA_IRQHandler+0x2ee>
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	4a5e      	ldr	r2, [pc, #376]	@ (801b430 <HAL_DMA_IRQHandler+0x414>)
 801b2b6:	4293      	cmp	r3, r2
 801b2b8:	d027      	beq.n	801b30a <HAL_DMA_IRQHandler+0x2ee>
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	4a5d      	ldr	r2, [pc, #372]	@ (801b434 <HAL_DMA_IRQHandler+0x418>)
 801b2c0:	4293      	cmp	r3, r2
 801b2c2:	d022      	beq.n	801b30a <HAL_DMA_IRQHandler+0x2ee>
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	4a5b      	ldr	r2, [pc, #364]	@ (801b438 <HAL_DMA_IRQHandler+0x41c>)
 801b2ca:	4293      	cmp	r3, r2
 801b2cc:	d01d      	beq.n	801b30a <HAL_DMA_IRQHandler+0x2ee>
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	4a5a      	ldr	r2, [pc, #360]	@ (801b43c <HAL_DMA_IRQHandler+0x420>)
 801b2d4:	4293      	cmp	r3, r2
 801b2d6:	d018      	beq.n	801b30a <HAL_DMA_IRQHandler+0x2ee>
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	4a58      	ldr	r2, [pc, #352]	@ (801b440 <HAL_DMA_IRQHandler+0x424>)
 801b2de:	4293      	cmp	r3, r2
 801b2e0:	d013      	beq.n	801b30a <HAL_DMA_IRQHandler+0x2ee>
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	4a57      	ldr	r2, [pc, #348]	@ (801b444 <HAL_DMA_IRQHandler+0x428>)
 801b2e8:	4293      	cmp	r3, r2
 801b2ea:	d00e      	beq.n	801b30a <HAL_DMA_IRQHandler+0x2ee>
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	4a55      	ldr	r2, [pc, #340]	@ (801b448 <HAL_DMA_IRQHandler+0x42c>)
 801b2f2:	4293      	cmp	r3, r2
 801b2f4:	d009      	beq.n	801b30a <HAL_DMA_IRQHandler+0x2ee>
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	4a54      	ldr	r2, [pc, #336]	@ (801b44c <HAL_DMA_IRQHandler+0x430>)
 801b2fc:	4293      	cmp	r3, r2
 801b2fe:	d004      	beq.n	801b30a <HAL_DMA_IRQHandler+0x2ee>
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	4a52      	ldr	r2, [pc, #328]	@ (801b450 <HAL_DMA_IRQHandler+0x434>)
 801b306:	4293      	cmp	r3, r2
 801b308:	d10a      	bne.n	801b320 <HAL_DMA_IRQHandler+0x304>
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	681b      	ldr	r3, [r3, #0]
 801b30e:	695b      	ldr	r3, [r3, #20]
 801b310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b314:	2b00      	cmp	r3, #0
 801b316:	bf14      	ite	ne
 801b318:	2301      	movne	r3, #1
 801b31a:	2300      	moveq	r3, #0
 801b31c:	b2db      	uxtb	r3, r3
 801b31e:	e003      	b.n	801b328 <HAL_DMA_IRQHandler+0x30c>
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	2300      	movs	r3, #0
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d00d      	beq.n	801b348 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b330:	f003 031f 	and.w	r3, r3, #31
 801b334:	2201      	movs	r2, #1
 801b336:	409a      	lsls	r2, r3
 801b338:	6a3b      	ldr	r3, [r7, #32]
 801b33a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b340:	f043 0202 	orr.w	r2, r3, #2
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b34c:	f003 031f 	and.w	r3, r3, #31
 801b350:	2204      	movs	r2, #4
 801b352:	409a      	lsls	r2, r3
 801b354:	69bb      	ldr	r3, [r7, #24]
 801b356:	4013      	ands	r3, r2
 801b358:	2b00      	cmp	r3, #0
 801b35a:	f000 808f 	beq.w	801b47c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	681b      	ldr	r3, [r3, #0]
 801b362:	4a2c      	ldr	r2, [pc, #176]	@ (801b414 <HAL_DMA_IRQHandler+0x3f8>)
 801b364:	4293      	cmp	r3, r2
 801b366:	d04a      	beq.n	801b3fe <HAL_DMA_IRQHandler+0x3e2>
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	4a2a      	ldr	r2, [pc, #168]	@ (801b418 <HAL_DMA_IRQHandler+0x3fc>)
 801b36e:	4293      	cmp	r3, r2
 801b370:	d045      	beq.n	801b3fe <HAL_DMA_IRQHandler+0x3e2>
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	681b      	ldr	r3, [r3, #0]
 801b376:	4a29      	ldr	r2, [pc, #164]	@ (801b41c <HAL_DMA_IRQHandler+0x400>)
 801b378:	4293      	cmp	r3, r2
 801b37a:	d040      	beq.n	801b3fe <HAL_DMA_IRQHandler+0x3e2>
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	4a27      	ldr	r2, [pc, #156]	@ (801b420 <HAL_DMA_IRQHandler+0x404>)
 801b382:	4293      	cmp	r3, r2
 801b384:	d03b      	beq.n	801b3fe <HAL_DMA_IRQHandler+0x3e2>
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	681b      	ldr	r3, [r3, #0]
 801b38a:	4a26      	ldr	r2, [pc, #152]	@ (801b424 <HAL_DMA_IRQHandler+0x408>)
 801b38c:	4293      	cmp	r3, r2
 801b38e:	d036      	beq.n	801b3fe <HAL_DMA_IRQHandler+0x3e2>
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	4a24      	ldr	r2, [pc, #144]	@ (801b428 <HAL_DMA_IRQHandler+0x40c>)
 801b396:	4293      	cmp	r3, r2
 801b398:	d031      	beq.n	801b3fe <HAL_DMA_IRQHandler+0x3e2>
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	681b      	ldr	r3, [r3, #0]
 801b39e:	4a23      	ldr	r2, [pc, #140]	@ (801b42c <HAL_DMA_IRQHandler+0x410>)
 801b3a0:	4293      	cmp	r3, r2
 801b3a2:	d02c      	beq.n	801b3fe <HAL_DMA_IRQHandler+0x3e2>
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	4a21      	ldr	r2, [pc, #132]	@ (801b430 <HAL_DMA_IRQHandler+0x414>)
 801b3aa:	4293      	cmp	r3, r2
 801b3ac:	d027      	beq.n	801b3fe <HAL_DMA_IRQHandler+0x3e2>
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	4a20      	ldr	r2, [pc, #128]	@ (801b434 <HAL_DMA_IRQHandler+0x418>)
 801b3b4:	4293      	cmp	r3, r2
 801b3b6:	d022      	beq.n	801b3fe <HAL_DMA_IRQHandler+0x3e2>
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	4a1e      	ldr	r2, [pc, #120]	@ (801b438 <HAL_DMA_IRQHandler+0x41c>)
 801b3be:	4293      	cmp	r3, r2
 801b3c0:	d01d      	beq.n	801b3fe <HAL_DMA_IRQHandler+0x3e2>
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	681b      	ldr	r3, [r3, #0]
 801b3c6:	4a1d      	ldr	r2, [pc, #116]	@ (801b43c <HAL_DMA_IRQHandler+0x420>)
 801b3c8:	4293      	cmp	r3, r2
 801b3ca:	d018      	beq.n	801b3fe <HAL_DMA_IRQHandler+0x3e2>
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	4a1b      	ldr	r2, [pc, #108]	@ (801b440 <HAL_DMA_IRQHandler+0x424>)
 801b3d2:	4293      	cmp	r3, r2
 801b3d4:	d013      	beq.n	801b3fe <HAL_DMA_IRQHandler+0x3e2>
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	681b      	ldr	r3, [r3, #0]
 801b3da:	4a1a      	ldr	r2, [pc, #104]	@ (801b444 <HAL_DMA_IRQHandler+0x428>)
 801b3dc:	4293      	cmp	r3, r2
 801b3de:	d00e      	beq.n	801b3fe <HAL_DMA_IRQHandler+0x3e2>
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	4a18      	ldr	r2, [pc, #96]	@ (801b448 <HAL_DMA_IRQHandler+0x42c>)
 801b3e6:	4293      	cmp	r3, r2
 801b3e8:	d009      	beq.n	801b3fe <HAL_DMA_IRQHandler+0x3e2>
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	681b      	ldr	r3, [r3, #0]
 801b3ee:	4a17      	ldr	r2, [pc, #92]	@ (801b44c <HAL_DMA_IRQHandler+0x430>)
 801b3f0:	4293      	cmp	r3, r2
 801b3f2:	d004      	beq.n	801b3fe <HAL_DMA_IRQHandler+0x3e2>
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	4a15      	ldr	r2, [pc, #84]	@ (801b450 <HAL_DMA_IRQHandler+0x434>)
 801b3fa:	4293      	cmp	r3, r2
 801b3fc:	d12a      	bne.n	801b454 <HAL_DMA_IRQHandler+0x438>
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	f003 0302 	and.w	r3, r3, #2
 801b408:	2b00      	cmp	r3, #0
 801b40a:	bf14      	ite	ne
 801b40c:	2301      	movne	r3, #1
 801b40e:	2300      	moveq	r3, #0
 801b410:	b2db      	uxtb	r3, r3
 801b412:	e023      	b.n	801b45c <HAL_DMA_IRQHandler+0x440>
 801b414:	40020010 	.word	0x40020010
 801b418:	40020028 	.word	0x40020028
 801b41c:	40020040 	.word	0x40020040
 801b420:	40020058 	.word	0x40020058
 801b424:	40020070 	.word	0x40020070
 801b428:	40020088 	.word	0x40020088
 801b42c:	400200a0 	.word	0x400200a0
 801b430:	400200b8 	.word	0x400200b8
 801b434:	40020410 	.word	0x40020410
 801b438:	40020428 	.word	0x40020428
 801b43c:	40020440 	.word	0x40020440
 801b440:	40020458 	.word	0x40020458
 801b444:	40020470 	.word	0x40020470
 801b448:	40020488 	.word	0x40020488
 801b44c:	400204a0 	.word	0x400204a0
 801b450:	400204b8 	.word	0x400204b8
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	2300      	movs	r3, #0
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	d00d      	beq.n	801b47c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b464:	f003 031f 	and.w	r3, r3, #31
 801b468:	2204      	movs	r2, #4
 801b46a:	409a      	lsls	r2, r3
 801b46c:	6a3b      	ldr	r3, [r7, #32]
 801b46e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b474:	f043 0204 	orr.w	r2, r3, #4
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b480:	f003 031f 	and.w	r3, r3, #31
 801b484:	2210      	movs	r2, #16
 801b486:	409a      	lsls	r2, r3
 801b488:	69bb      	ldr	r3, [r7, #24]
 801b48a:	4013      	ands	r3, r2
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	f000 80a6 	beq.w	801b5de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	4a85      	ldr	r2, [pc, #532]	@ (801b6ac <HAL_DMA_IRQHandler+0x690>)
 801b498:	4293      	cmp	r3, r2
 801b49a:	d04a      	beq.n	801b532 <HAL_DMA_IRQHandler+0x516>
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	4a83      	ldr	r2, [pc, #524]	@ (801b6b0 <HAL_DMA_IRQHandler+0x694>)
 801b4a2:	4293      	cmp	r3, r2
 801b4a4:	d045      	beq.n	801b532 <HAL_DMA_IRQHandler+0x516>
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	681b      	ldr	r3, [r3, #0]
 801b4aa:	4a82      	ldr	r2, [pc, #520]	@ (801b6b4 <HAL_DMA_IRQHandler+0x698>)
 801b4ac:	4293      	cmp	r3, r2
 801b4ae:	d040      	beq.n	801b532 <HAL_DMA_IRQHandler+0x516>
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	4a80      	ldr	r2, [pc, #512]	@ (801b6b8 <HAL_DMA_IRQHandler+0x69c>)
 801b4b6:	4293      	cmp	r3, r2
 801b4b8:	d03b      	beq.n	801b532 <HAL_DMA_IRQHandler+0x516>
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	4a7f      	ldr	r2, [pc, #508]	@ (801b6bc <HAL_DMA_IRQHandler+0x6a0>)
 801b4c0:	4293      	cmp	r3, r2
 801b4c2:	d036      	beq.n	801b532 <HAL_DMA_IRQHandler+0x516>
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	4a7d      	ldr	r2, [pc, #500]	@ (801b6c0 <HAL_DMA_IRQHandler+0x6a4>)
 801b4ca:	4293      	cmp	r3, r2
 801b4cc:	d031      	beq.n	801b532 <HAL_DMA_IRQHandler+0x516>
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	681b      	ldr	r3, [r3, #0]
 801b4d2:	4a7c      	ldr	r2, [pc, #496]	@ (801b6c4 <HAL_DMA_IRQHandler+0x6a8>)
 801b4d4:	4293      	cmp	r3, r2
 801b4d6:	d02c      	beq.n	801b532 <HAL_DMA_IRQHandler+0x516>
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	4a7a      	ldr	r2, [pc, #488]	@ (801b6c8 <HAL_DMA_IRQHandler+0x6ac>)
 801b4de:	4293      	cmp	r3, r2
 801b4e0:	d027      	beq.n	801b532 <HAL_DMA_IRQHandler+0x516>
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	4a79      	ldr	r2, [pc, #484]	@ (801b6cc <HAL_DMA_IRQHandler+0x6b0>)
 801b4e8:	4293      	cmp	r3, r2
 801b4ea:	d022      	beq.n	801b532 <HAL_DMA_IRQHandler+0x516>
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	4a77      	ldr	r2, [pc, #476]	@ (801b6d0 <HAL_DMA_IRQHandler+0x6b4>)
 801b4f2:	4293      	cmp	r3, r2
 801b4f4:	d01d      	beq.n	801b532 <HAL_DMA_IRQHandler+0x516>
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	4a76      	ldr	r2, [pc, #472]	@ (801b6d4 <HAL_DMA_IRQHandler+0x6b8>)
 801b4fc:	4293      	cmp	r3, r2
 801b4fe:	d018      	beq.n	801b532 <HAL_DMA_IRQHandler+0x516>
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	4a74      	ldr	r2, [pc, #464]	@ (801b6d8 <HAL_DMA_IRQHandler+0x6bc>)
 801b506:	4293      	cmp	r3, r2
 801b508:	d013      	beq.n	801b532 <HAL_DMA_IRQHandler+0x516>
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	4a73      	ldr	r2, [pc, #460]	@ (801b6dc <HAL_DMA_IRQHandler+0x6c0>)
 801b510:	4293      	cmp	r3, r2
 801b512:	d00e      	beq.n	801b532 <HAL_DMA_IRQHandler+0x516>
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	4a71      	ldr	r2, [pc, #452]	@ (801b6e0 <HAL_DMA_IRQHandler+0x6c4>)
 801b51a:	4293      	cmp	r3, r2
 801b51c:	d009      	beq.n	801b532 <HAL_DMA_IRQHandler+0x516>
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	4a70      	ldr	r2, [pc, #448]	@ (801b6e4 <HAL_DMA_IRQHandler+0x6c8>)
 801b524:	4293      	cmp	r3, r2
 801b526:	d004      	beq.n	801b532 <HAL_DMA_IRQHandler+0x516>
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	4a6e      	ldr	r2, [pc, #440]	@ (801b6e8 <HAL_DMA_IRQHandler+0x6cc>)
 801b52e:	4293      	cmp	r3, r2
 801b530:	d10a      	bne.n	801b548 <HAL_DMA_IRQHandler+0x52c>
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	681b      	ldr	r3, [r3, #0]
 801b536:	681b      	ldr	r3, [r3, #0]
 801b538:	f003 0308 	and.w	r3, r3, #8
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	bf14      	ite	ne
 801b540:	2301      	movne	r3, #1
 801b542:	2300      	moveq	r3, #0
 801b544:	b2db      	uxtb	r3, r3
 801b546:	e009      	b.n	801b55c <HAL_DMA_IRQHandler+0x540>
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	681b      	ldr	r3, [r3, #0]
 801b54e:	f003 0304 	and.w	r3, r3, #4
 801b552:	2b00      	cmp	r3, #0
 801b554:	bf14      	ite	ne
 801b556:	2301      	movne	r3, #1
 801b558:	2300      	moveq	r3, #0
 801b55a:	b2db      	uxtb	r3, r3
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d03e      	beq.n	801b5de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b564:	f003 031f 	and.w	r3, r3, #31
 801b568:	2210      	movs	r2, #16
 801b56a:	409a      	lsls	r2, r3
 801b56c:	6a3b      	ldr	r3, [r7, #32]
 801b56e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	d018      	beq.n	801b5b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	681b      	ldr	r3, [r3, #0]
 801b582:	681b      	ldr	r3, [r3, #0]
 801b584:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d108      	bne.n	801b59e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b590:	2b00      	cmp	r3, #0
 801b592:	d024      	beq.n	801b5de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b598:	6878      	ldr	r0, [r7, #4]
 801b59a:	4798      	blx	r3
 801b59c:	e01f      	b.n	801b5de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	d01b      	beq.n	801b5de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b5aa:	6878      	ldr	r0, [r7, #4]
 801b5ac:	4798      	blx	r3
 801b5ae:	e016      	b.n	801b5de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	681b      	ldr	r3, [r3, #0]
 801b5b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d107      	bne.n	801b5ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	681b      	ldr	r3, [r3, #0]
 801b5c2:	681a      	ldr	r2, [r3, #0]
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	f022 0208 	bic.w	r2, r2, #8
 801b5cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d003      	beq.n	801b5de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b5da:	6878      	ldr	r0, [r7, #4]
 801b5dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b5e2:	f003 031f 	and.w	r3, r3, #31
 801b5e6:	2220      	movs	r2, #32
 801b5e8:	409a      	lsls	r2, r3
 801b5ea:	69bb      	ldr	r3, [r7, #24]
 801b5ec:	4013      	ands	r3, r2
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	f000 8110 	beq.w	801b814 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	681b      	ldr	r3, [r3, #0]
 801b5f8:	4a2c      	ldr	r2, [pc, #176]	@ (801b6ac <HAL_DMA_IRQHandler+0x690>)
 801b5fa:	4293      	cmp	r3, r2
 801b5fc:	d04a      	beq.n	801b694 <HAL_DMA_IRQHandler+0x678>
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	681b      	ldr	r3, [r3, #0]
 801b602:	4a2b      	ldr	r2, [pc, #172]	@ (801b6b0 <HAL_DMA_IRQHandler+0x694>)
 801b604:	4293      	cmp	r3, r2
 801b606:	d045      	beq.n	801b694 <HAL_DMA_IRQHandler+0x678>
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	681b      	ldr	r3, [r3, #0]
 801b60c:	4a29      	ldr	r2, [pc, #164]	@ (801b6b4 <HAL_DMA_IRQHandler+0x698>)
 801b60e:	4293      	cmp	r3, r2
 801b610:	d040      	beq.n	801b694 <HAL_DMA_IRQHandler+0x678>
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	681b      	ldr	r3, [r3, #0]
 801b616:	4a28      	ldr	r2, [pc, #160]	@ (801b6b8 <HAL_DMA_IRQHandler+0x69c>)
 801b618:	4293      	cmp	r3, r2
 801b61a:	d03b      	beq.n	801b694 <HAL_DMA_IRQHandler+0x678>
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	681b      	ldr	r3, [r3, #0]
 801b620:	4a26      	ldr	r2, [pc, #152]	@ (801b6bc <HAL_DMA_IRQHandler+0x6a0>)
 801b622:	4293      	cmp	r3, r2
 801b624:	d036      	beq.n	801b694 <HAL_DMA_IRQHandler+0x678>
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	681b      	ldr	r3, [r3, #0]
 801b62a:	4a25      	ldr	r2, [pc, #148]	@ (801b6c0 <HAL_DMA_IRQHandler+0x6a4>)
 801b62c:	4293      	cmp	r3, r2
 801b62e:	d031      	beq.n	801b694 <HAL_DMA_IRQHandler+0x678>
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	681b      	ldr	r3, [r3, #0]
 801b634:	4a23      	ldr	r2, [pc, #140]	@ (801b6c4 <HAL_DMA_IRQHandler+0x6a8>)
 801b636:	4293      	cmp	r3, r2
 801b638:	d02c      	beq.n	801b694 <HAL_DMA_IRQHandler+0x678>
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	681b      	ldr	r3, [r3, #0]
 801b63e:	4a22      	ldr	r2, [pc, #136]	@ (801b6c8 <HAL_DMA_IRQHandler+0x6ac>)
 801b640:	4293      	cmp	r3, r2
 801b642:	d027      	beq.n	801b694 <HAL_DMA_IRQHandler+0x678>
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	681b      	ldr	r3, [r3, #0]
 801b648:	4a20      	ldr	r2, [pc, #128]	@ (801b6cc <HAL_DMA_IRQHandler+0x6b0>)
 801b64a:	4293      	cmp	r3, r2
 801b64c:	d022      	beq.n	801b694 <HAL_DMA_IRQHandler+0x678>
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	4a1f      	ldr	r2, [pc, #124]	@ (801b6d0 <HAL_DMA_IRQHandler+0x6b4>)
 801b654:	4293      	cmp	r3, r2
 801b656:	d01d      	beq.n	801b694 <HAL_DMA_IRQHandler+0x678>
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	681b      	ldr	r3, [r3, #0]
 801b65c:	4a1d      	ldr	r2, [pc, #116]	@ (801b6d4 <HAL_DMA_IRQHandler+0x6b8>)
 801b65e:	4293      	cmp	r3, r2
 801b660:	d018      	beq.n	801b694 <HAL_DMA_IRQHandler+0x678>
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	681b      	ldr	r3, [r3, #0]
 801b666:	4a1c      	ldr	r2, [pc, #112]	@ (801b6d8 <HAL_DMA_IRQHandler+0x6bc>)
 801b668:	4293      	cmp	r3, r2
 801b66a:	d013      	beq.n	801b694 <HAL_DMA_IRQHandler+0x678>
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	4a1a      	ldr	r2, [pc, #104]	@ (801b6dc <HAL_DMA_IRQHandler+0x6c0>)
 801b672:	4293      	cmp	r3, r2
 801b674:	d00e      	beq.n	801b694 <HAL_DMA_IRQHandler+0x678>
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	681b      	ldr	r3, [r3, #0]
 801b67a:	4a19      	ldr	r2, [pc, #100]	@ (801b6e0 <HAL_DMA_IRQHandler+0x6c4>)
 801b67c:	4293      	cmp	r3, r2
 801b67e:	d009      	beq.n	801b694 <HAL_DMA_IRQHandler+0x678>
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	4a17      	ldr	r2, [pc, #92]	@ (801b6e4 <HAL_DMA_IRQHandler+0x6c8>)
 801b686:	4293      	cmp	r3, r2
 801b688:	d004      	beq.n	801b694 <HAL_DMA_IRQHandler+0x678>
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	681b      	ldr	r3, [r3, #0]
 801b68e:	4a16      	ldr	r2, [pc, #88]	@ (801b6e8 <HAL_DMA_IRQHandler+0x6cc>)
 801b690:	4293      	cmp	r3, r2
 801b692:	d12b      	bne.n	801b6ec <HAL_DMA_IRQHandler+0x6d0>
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	f003 0310 	and.w	r3, r3, #16
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	bf14      	ite	ne
 801b6a2:	2301      	movne	r3, #1
 801b6a4:	2300      	moveq	r3, #0
 801b6a6:	b2db      	uxtb	r3, r3
 801b6a8:	e02a      	b.n	801b700 <HAL_DMA_IRQHandler+0x6e4>
 801b6aa:	bf00      	nop
 801b6ac:	40020010 	.word	0x40020010
 801b6b0:	40020028 	.word	0x40020028
 801b6b4:	40020040 	.word	0x40020040
 801b6b8:	40020058 	.word	0x40020058
 801b6bc:	40020070 	.word	0x40020070
 801b6c0:	40020088 	.word	0x40020088
 801b6c4:	400200a0 	.word	0x400200a0
 801b6c8:	400200b8 	.word	0x400200b8
 801b6cc:	40020410 	.word	0x40020410
 801b6d0:	40020428 	.word	0x40020428
 801b6d4:	40020440 	.word	0x40020440
 801b6d8:	40020458 	.word	0x40020458
 801b6dc:	40020470 	.word	0x40020470
 801b6e0:	40020488 	.word	0x40020488
 801b6e4:	400204a0 	.word	0x400204a0
 801b6e8:	400204b8 	.word	0x400204b8
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	681b      	ldr	r3, [r3, #0]
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	f003 0302 	and.w	r3, r3, #2
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	bf14      	ite	ne
 801b6fa:	2301      	movne	r3, #1
 801b6fc:	2300      	moveq	r3, #0
 801b6fe:	b2db      	uxtb	r3, r3
 801b700:	2b00      	cmp	r3, #0
 801b702:	f000 8087 	beq.w	801b814 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b70a:	f003 031f 	and.w	r3, r3, #31
 801b70e:	2220      	movs	r2, #32
 801b710:	409a      	lsls	r2, r3
 801b712:	6a3b      	ldr	r3, [r7, #32]
 801b714:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801b71c:	b2db      	uxtb	r3, r3
 801b71e:	2b04      	cmp	r3, #4
 801b720:	d139      	bne.n	801b796 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	681a      	ldr	r2, [r3, #0]
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	f022 0216 	bic.w	r2, r2, #22
 801b730:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	695a      	ldr	r2, [r3, #20]
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801b740:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b746:	2b00      	cmp	r3, #0
 801b748:	d103      	bne.n	801b752 <HAL_DMA_IRQHandler+0x736>
 801b74a:	687b      	ldr	r3, [r7, #4]
 801b74c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b74e:	2b00      	cmp	r3, #0
 801b750:	d007      	beq.n	801b762 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	681a      	ldr	r2, [r3, #0]
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	681b      	ldr	r3, [r3, #0]
 801b75c:	f022 0208 	bic.w	r2, r2, #8
 801b760:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b766:	f003 031f 	and.w	r3, r3, #31
 801b76a:	223f      	movs	r2, #63	@ 0x3f
 801b76c:	409a      	lsls	r2, r3
 801b76e:	6a3b      	ldr	r3, [r7, #32]
 801b770:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	2201      	movs	r2, #1
 801b776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	2200      	movs	r2, #0
 801b77e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b786:	2b00      	cmp	r3, #0
 801b788:	f000 834a 	beq.w	801be20 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b790:	6878      	ldr	r0, [r7, #4]
 801b792:	4798      	blx	r3
          }
          return;
 801b794:	e344      	b.n	801be20 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	681b      	ldr	r3, [r3, #0]
 801b79c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d018      	beq.n	801b7d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	681b      	ldr	r3, [r3, #0]
 801b7a8:	681b      	ldr	r3, [r3, #0]
 801b7aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	d108      	bne.n	801b7c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d02c      	beq.n	801b814 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b7be:	6878      	ldr	r0, [r7, #4]
 801b7c0:	4798      	blx	r3
 801b7c2:	e027      	b.n	801b814 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d023      	beq.n	801b814 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b7d0:	6878      	ldr	r0, [r7, #4]
 801b7d2:	4798      	blx	r3
 801b7d4:	e01e      	b.n	801b814 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	681b      	ldr	r3, [r3, #0]
 801b7da:	681b      	ldr	r3, [r3, #0]
 801b7dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d10f      	bne.n	801b804 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	681a      	ldr	r2, [r3, #0]
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	681b      	ldr	r3, [r3, #0]
 801b7ee:	f022 0210 	bic.w	r2, r2, #16
 801b7f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	2201      	movs	r2, #1
 801b7f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	2200      	movs	r2, #0
 801b800:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d003      	beq.n	801b814 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b810:	6878      	ldr	r0, [r7, #4]
 801b812:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b818:	2b00      	cmp	r3, #0
 801b81a:	f000 8306 	beq.w	801be2a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b822:	f003 0301 	and.w	r3, r3, #1
 801b826:	2b00      	cmp	r3, #0
 801b828:	f000 8088 	beq.w	801b93c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	2204      	movs	r2, #4
 801b830:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	4a7a      	ldr	r2, [pc, #488]	@ (801ba24 <HAL_DMA_IRQHandler+0xa08>)
 801b83a:	4293      	cmp	r3, r2
 801b83c:	d04a      	beq.n	801b8d4 <HAL_DMA_IRQHandler+0x8b8>
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	681b      	ldr	r3, [r3, #0]
 801b842:	4a79      	ldr	r2, [pc, #484]	@ (801ba28 <HAL_DMA_IRQHandler+0xa0c>)
 801b844:	4293      	cmp	r3, r2
 801b846:	d045      	beq.n	801b8d4 <HAL_DMA_IRQHandler+0x8b8>
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	681b      	ldr	r3, [r3, #0]
 801b84c:	4a77      	ldr	r2, [pc, #476]	@ (801ba2c <HAL_DMA_IRQHandler+0xa10>)
 801b84e:	4293      	cmp	r3, r2
 801b850:	d040      	beq.n	801b8d4 <HAL_DMA_IRQHandler+0x8b8>
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	681b      	ldr	r3, [r3, #0]
 801b856:	4a76      	ldr	r2, [pc, #472]	@ (801ba30 <HAL_DMA_IRQHandler+0xa14>)
 801b858:	4293      	cmp	r3, r2
 801b85a:	d03b      	beq.n	801b8d4 <HAL_DMA_IRQHandler+0x8b8>
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	681b      	ldr	r3, [r3, #0]
 801b860:	4a74      	ldr	r2, [pc, #464]	@ (801ba34 <HAL_DMA_IRQHandler+0xa18>)
 801b862:	4293      	cmp	r3, r2
 801b864:	d036      	beq.n	801b8d4 <HAL_DMA_IRQHandler+0x8b8>
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	681b      	ldr	r3, [r3, #0]
 801b86a:	4a73      	ldr	r2, [pc, #460]	@ (801ba38 <HAL_DMA_IRQHandler+0xa1c>)
 801b86c:	4293      	cmp	r3, r2
 801b86e:	d031      	beq.n	801b8d4 <HAL_DMA_IRQHandler+0x8b8>
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	681b      	ldr	r3, [r3, #0]
 801b874:	4a71      	ldr	r2, [pc, #452]	@ (801ba3c <HAL_DMA_IRQHandler+0xa20>)
 801b876:	4293      	cmp	r3, r2
 801b878:	d02c      	beq.n	801b8d4 <HAL_DMA_IRQHandler+0x8b8>
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	681b      	ldr	r3, [r3, #0]
 801b87e:	4a70      	ldr	r2, [pc, #448]	@ (801ba40 <HAL_DMA_IRQHandler+0xa24>)
 801b880:	4293      	cmp	r3, r2
 801b882:	d027      	beq.n	801b8d4 <HAL_DMA_IRQHandler+0x8b8>
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	4a6e      	ldr	r2, [pc, #440]	@ (801ba44 <HAL_DMA_IRQHandler+0xa28>)
 801b88a:	4293      	cmp	r3, r2
 801b88c:	d022      	beq.n	801b8d4 <HAL_DMA_IRQHandler+0x8b8>
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	4a6d      	ldr	r2, [pc, #436]	@ (801ba48 <HAL_DMA_IRQHandler+0xa2c>)
 801b894:	4293      	cmp	r3, r2
 801b896:	d01d      	beq.n	801b8d4 <HAL_DMA_IRQHandler+0x8b8>
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	681b      	ldr	r3, [r3, #0]
 801b89c:	4a6b      	ldr	r2, [pc, #428]	@ (801ba4c <HAL_DMA_IRQHandler+0xa30>)
 801b89e:	4293      	cmp	r3, r2
 801b8a0:	d018      	beq.n	801b8d4 <HAL_DMA_IRQHandler+0x8b8>
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	681b      	ldr	r3, [r3, #0]
 801b8a6:	4a6a      	ldr	r2, [pc, #424]	@ (801ba50 <HAL_DMA_IRQHandler+0xa34>)
 801b8a8:	4293      	cmp	r3, r2
 801b8aa:	d013      	beq.n	801b8d4 <HAL_DMA_IRQHandler+0x8b8>
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	681b      	ldr	r3, [r3, #0]
 801b8b0:	4a68      	ldr	r2, [pc, #416]	@ (801ba54 <HAL_DMA_IRQHandler+0xa38>)
 801b8b2:	4293      	cmp	r3, r2
 801b8b4:	d00e      	beq.n	801b8d4 <HAL_DMA_IRQHandler+0x8b8>
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	681b      	ldr	r3, [r3, #0]
 801b8ba:	4a67      	ldr	r2, [pc, #412]	@ (801ba58 <HAL_DMA_IRQHandler+0xa3c>)
 801b8bc:	4293      	cmp	r3, r2
 801b8be:	d009      	beq.n	801b8d4 <HAL_DMA_IRQHandler+0x8b8>
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	4a65      	ldr	r2, [pc, #404]	@ (801ba5c <HAL_DMA_IRQHandler+0xa40>)
 801b8c6:	4293      	cmp	r3, r2
 801b8c8:	d004      	beq.n	801b8d4 <HAL_DMA_IRQHandler+0x8b8>
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	681b      	ldr	r3, [r3, #0]
 801b8ce:	4a64      	ldr	r2, [pc, #400]	@ (801ba60 <HAL_DMA_IRQHandler+0xa44>)
 801b8d0:	4293      	cmp	r3, r2
 801b8d2:	d108      	bne.n	801b8e6 <HAL_DMA_IRQHandler+0x8ca>
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	681b      	ldr	r3, [r3, #0]
 801b8d8:	681a      	ldr	r2, [r3, #0]
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	681b      	ldr	r3, [r3, #0]
 801b8de:	f022 0201 	bic.w	r2, r2, #1
 801b8e2:	601a      	str	r2, [r3, #0]
 801b8e4:	e007      	b.n	801b8f6 <HAL_DMA_IRQHandler+0x8da>
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	681b      	ldr	r3, [r3, #0]
 801b8ea:	681a      	ldr	r2, [r3, #0]
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	f022 0201 	bic.w	r2, r2, #1
 801b8f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 801b8f6:	68fb      	ldr	r3, [r7, #12]
 801b8f8:	3301      	adds	r3, #1
 801b8fa:	60fb      	str	r3, [r7, #12]
 801b8fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b8fe:	429a      	cmp	r2, r3
 801b900:	d307      	bcc.n	801b912 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	681b      	ldr	r3, [r3, #0]
 801b906:	681b      	ldr	r3, [r3, #0]
 801b908:	f003 0301 	and.w	r3, r3, #1
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d1f2      	bne.n	801b8f6 <HAL_DMA_IRQHandler+0x8da>
 801b910:	e000      	b.n	801b914 <HAL_DMA_IRQHandler+0x8f8>
            break;
 801b912:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	681b      	ldr	r3, [r3, #0]
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	f003 0301 	and.w	r3, r3, #1
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d004      	beq.n	801b92c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	2203      	movs	r2, #3
 801b926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801b92a:	e003      	b.n	801b934 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	2201      	movs	r2, #1
 801b930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	2200      	movs	r2, #0
 801b938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b940:	2b00      	cmp	r3, #0
 801b942:	f000 8272 	beq.w	801be2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b94a:	6878      	ldr	r0, [r7, #4]
 801b94c:	4798      	blx	r3
 801b94e:	e26c      	b.n	801be2a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	4a43      	ldr	r2, [pc, #268]	@ (801ba64 <HAL_DMA_IRQHandler+0xa48>)
 801b956:	4293      	cmp	r3, r2
 801b958:	d022      	beq.n	801b9a0 <HAL_DMA_IRQHandler+0x984>
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	681b      	ldr	r3, [r3, #0]
 801b95e:	4a42      	ldr	r2, [pc, #264]	@ (801ba68 <HAL_DMA_IRQHandler+0xa4c>)
 801b960:	4293      	cmp	r3, r2
 801b962:	d01d      	beq.n	801b9a0 <HAL_DMA_IRQHandler+0x984>
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	681b      	ldr	r3, [r3, #0]
 801b968:	4a40      	ldr	r2, [pc, #256]	@ (801ba6c <HAL_DMA_IRQHandler+0xa50>)
 801b96a:	4293      	cmp	r3, r2
 801b96c:	d018      	beq.n	801b9a0 <HAL_DMA_IRQHandler+0x984>
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	4a3f      	ldr	r2, [pc, #252]	@ (801ba70 <HAL_DMA_IRQHandler+0xa54>)
 801b974:	4293      	cmp	r3, r2
 801b976:	d013      	beq.n	801b9a0 <HAL_DMA_IRQHandler+0x984>
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	4a3d      	ldr	r2, [pc, #244]	@ (801ba74 <HAL_DMA_IRQHandler+0xa58>)
 801b97e:	4293      	cmp	r3, r2
 801b980:	d00e      	beq.n	801b9a0 <HAL_DMA_IRQHandler+0x984>
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	681b      	ldr	r3, [r3, #0]
 801b986:	4a3c      	ldr	r2, [pc, #240]	@ (801ba78 <HAL_DMA_IRQHandler+0xa5c>)
 801b988:	4293      	cmp	r3, r2
 801b98a:	d009      	beq.n	801b9a0 <HAL_DMA_IRQHandler+0x984>
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	681b      	ldr	r3, [r3, #0]
 801b990:	4a3a      	ldr	r2, [pc, #232]	@ (801ba7c <HAL_DMA_IRQHandler+0xa60>)
 801b992:	4293      	cmp	r3, r2
 801b994:	d004      	beq.n	801b9a0 <HAL_DMA_IRQHandler+0x984>
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	4a39      	ldr	r2, [pc, #228]	@ (801ba80 <HAL_DMA_IRQHandler+0xa64>)
 801b99c:	4293      	cmp	r3, r2
 801b99e:	d101      	bne.n	801b9a4 <HAL_DMA_IRQHandler+0x988>
 801b9a0:	2301      	movs	r3, #1
 801b9a2:	e000      	b.n	801b9a6 <HAL_DMA_IRQHandler+0x98a>
 801b9a4:	2300      	movs	r3, #0
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	f000 823f 	beq.w	801be2a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b9b8:	f003 031f 	and.w	r3, r3, #31
 801b9bc:	2204      	movs	r2, #4
 801b9be:	409a      	lsls	r2, r3
 801b9c0:	697b      	ldr	r3, [r7, #20]
 801b9c2:	4013      	ands	r3, r2
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	f000 80cd 	beq.w	801bb64 <HAL_DMA_IRQHandler+0xb48>
 801b9ca:	693b      	ldr	r3, [r7, #16]
 801b9cc:	f003 0304 	and.w	r3, r3, #4
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	f000 80c7 	beq.w	801bb64 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b9da:	f003 031f 	and.w	r3, r3, #31
 801b9de:	2204      	movs	r2, #4
 801b9e0:	409a      	lsls	r2, r3
 801b9e2:	69fb      	ldr	r3, [r7, #28]
 801b9e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b9e6:	693b      	ldr	r3, [r7, #16]
 801b9e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d049      	beq.n	801ba84 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801b9f0:	693b      	ldr	r3, [r7, #16]
 801b9f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d109      	bne.n	801ba0e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	f000 8210 	beq.w	801be24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ba08:	6878      	ldr	r0, [r7, #4]
 801ba0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801ba0c:	e20a      	b.n	801be24 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	f000 8206 	beq.w	801be24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ba1c:	6878      	ldr	r0, [r7, #4]
 801ba1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801ba20:	e200      	b.n	801be24 <HAL_DMA_IRQHandler+0xe08>
 801ba22:	bf00      	nop
 801ba24:	40020010 	.word	0x40020010
 801ba28:	40020028 	.word	0x40020028
 801ba2c:	40020040 	.word	0x40020040
 801ba30:	40020058 	.word	0x40020058
 801ba34:	40020070 	.word	0x40020070
 801ba38:	40020088 	.word	0x40020088
 801ba3c:	400200a0 	.word	0x400200a0
 801ba40:	400200b8 	.word	0x400200b8
 801ba44:	40020410 	.word	0x40020410
 801ba48:	40020428 	.word	0x40020428
 801ba4c:	40020440 	.word	0x40020440
 801ba50:	40020458 	.word	0x40020458
 801ba54:	40020470 	.word	0x40020470
 801ba58:	40020488 	.word	0x40020488
 801ba5c:	400204a0 	.word	0x400204a0
 801ba60:	400204b8 	.word	0x400204b8
 801ba64:	58025408 	.word	0x58025408
 801ba68:	5802541c 	.word	0x5802541c
 801ba6c:	58025430 	.word	0x58025430
 801ba70:	58025444 	.word	0x58025444
 801ba74:	58025458 	.word	0x58025458
 801ba78:	5802546c 	.word	0x5802546c
 801ba7c:	58025480 	.word	0x58025480
 801ba80:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801ba84:	693b      	ldr	r3, [r7, #16]
 801ba86:	f003 0320 	and.w	r3, r3, #32
 801ba8a:	2b00      	cmp	r3, #0
 801ba8c:	d160      	bne.n	801bb50 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	681b      	ldr	r3, [r3, #0]
 801ba92:	4a7f      	ldr	r2, [pc, #508]	@ (801bc90 <HAL_DMA_IRQHandler+0xc74>)
 801ba94:	4293      	cmp	r3, r2
 801ba96:	d04a      	beq.n	801bb2e <HAL_DMA_IRQHandler+0xb12>
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	4a7d      	ldr	r2, [pc, #500]	@ (801bc94 <HAL_DMA_IRQHandler+0xc78>)
 801ba9e:	4293      	cmp	r3, r2
 801baa0:	d045      	beq.n	801bb2e <HAL_DMA_IRQHandler+0xb12>
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	681b      	ldr	r3, [r3, #0]
 801baa6:	4a7c      	ldr	r2, [pc, #496]	@ (801bc98 <HAL_DMA_IRQHandler+0xc7c>)
 801baa8:	4293      	cmp	r3, r2
 801baaa:	d040      	beq.n	801bb2e <HAL_DMA_IRQHandler+0xb12>
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	4a7a      	ldr	r2, [pc, #488]	@ (801bc9c <HAL_DMA_IRQHandler+0xc80>)
 801bab2:	4293      	cmp	r3, r2
 801bab4:	d03b      	beq.n	801bb2e <HAL_DMA_IRQHandler+0xb12>
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	681b      	ldr	r3, [r3, #0]
 801baba:	4a79      	ldr	r2, [pc, #484]	@ (801bca0 <HAL_DMA_IRQHandler+0xc84>)
 801babc:	4293      	cmp	r3, r2
 801babe:	d036      	beq.n	801bb2e <HAL_DMA_IRQHandler+0xb12>
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	681b      	ldr	r3, [r3, #0]
 801bac4:	4a77      	ldr	r2, [pc, #476]	@ (801bca4 <HAL_DMA_IRQHandler+0xc88>)
 801bac6:	4293      	cmp	r3, r2
 801bac8:	d031      	beq.n	801bb2e <HAL_DMA_IRQHandler+0xb12>
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	681b      	ldr	r3, [r3, #0]
 801bace:	4a76      	ldr	r2, [pc, #472]	@ (801bca8 <HAL_DMA_IRQHandler+0xc8c>)
 801bad0:	4293      	cmp	r3, r2
 801bad2:	d02c      	beq.n	801bb2e <HAL_DMA_IRQHandler+0xb12>
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	681b      	ldr	r3, [r3, #0]
 801bad8:	4a74      	ldr	r2, [pc, #464]	@ (801bcac <HAL_DMA_IRQHandler+0xc90>)
 801bada:	4293      	cmp	r3, r2
 801badc:	d027      	beq.n	801bb2e <HAL_DMA_IRQHandler+0xb12>
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	681b      	ldr	r3, [r3, #0]
 801bae2:	4a73      	ldr	r2, [pc, #460]	@ (801bcb0 <HAL_DMA_IRQHandler+0xc94>)
 801bae4:	4293      	cmp	r3, r2
 801bae6:	d022      	beq.n	801bb2e <HAL_DMA_IRQHandler+0xb12>
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	681b      	ldr	r3, [r3, #0]
 801baec:	4a71      	ldr	r2, [pc, #452]	@ (801bcb4 <HAL_DMA_IRQHandler+0xc98>)
 801baee:	4293      	cmp	r3, r2
 801baf0:	d01d      	beq.n	801bb2e <HAL_DMA_IRQHandler+0xb12>
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	4a70      	ldr	r2, [pc, #448]	@ (801bcb8 <HAL_DMA_IRQHandler+0xc9c>)
 801baf8:	4293      	cmp	r3, r2
 801bafa:	d018      	beq.n	801bb2e <HAL_DMA_IRQHandler+0xb12>
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	681b      	ldr	r3, [r3, #0]
 801bb00:	4a6e      	ldr	r2, [pc, #440]	@ (801bcbc <HAL_DMA_IRQHandler+0xca0>)
 801bb02:	4293      	cmp	r3, r2
 801bb04:	d013      	beq.n	801bb2e <HAL_DMA_IRQHandler+0xb12>
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	681b      	ldr	r3, [r3, #0]
 801bb0a:	4a6d      	ldr	r2, [pc, #436]	@ (801bcc0 <HAL_DMA_IRQHandler+0xca4>)
 801bb0c:	4293      	cmp	r3, r2
 801bb0e:	d00e      	beq.n	801bb2e <HAL_DMA_IRQHandler+0xb12>
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	681b      	ldr	r3, [r3, #0]
 801bb14:	4a6b      	ldr	r2, [pc, #428]	@ (801bcc4 <HAL_DMA_IRQHandler+0xca8>)
 801bb16:	4293      	cmp	r3, r2
 801bb18:	d009      	beq.n	801bb2e <HAL_DMA_IRQHandler+0xb12>
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	4a6a      	ldr	r2, [pc, #424]	@ (801bcc8 <HAL_DMA_IRQHandler+0xcac>)
 801bb20:	4293      	cmp	r3, r2
 801bb22:	d004      	beq.n	801bb2e <HAL_DMA_IRQHandler+0xb12>
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	681b      	ldr	r3, [r3, #0]
 801bb28:	4a68      	ldr	r2, [pc, #416]	@ (801bccc <HAL_DMA_IRQHandler+0xcb0>)
 801bb2a:	4293      	cmp	r3, r2
 801bb2c:	d108      	bne.n	801bb40 <HAL_DMA_IRQHandler+0xb24>
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	681b      	ldr	r3, [r3, #0]
 801bb32:	681a      	ldr	r2, [r3, #0]
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	f022 0208 	bic.w	r2, r2, #8
 801bb3c:	601a      	str	r2, [r3, #0]
 801bb3e:	e007      	b.n	801bb50 <HAL_DMA_IRQHandler+0xb34>
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	681a      	ldr	r2, [r3, #0]
 801bb46:	687b      	ldr	r3, [r7, #4]
 801bb48:	681b      	ldr	r3, [r3, #0]
 801bb4a:	f022 0204 	bic.w	r2, r2, #4
 801bb4e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	f000 8165 	beq.w	801be24 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bb5e:	6878      	ldr	r0, [r7, #4]
 801bb60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801bb62:	e15f      	b.n	801be24 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bb68:	f003 031f 	and.w	r3, r3, #31
 801bb6c:	2202      	movs	r2, #2
 801bb6e:	409a      	lsls	r2, r3
 801bb70:	697b      	ldr	r3, [r7, #20]
 801bb72:	4013      	ands	r3, r2
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	f000 80c5 	beq.w	801bd04 <HAL_DMA_IRQHandler+0xce8>
 801bb7a:	693b      	ldr	r3, [r7, #16]
 801bb7c:	f003 0302 	and.w	r3, r3, #2
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	f000 80bf 	beq.w	801bd04 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bb8a:	f003 031f 	and.w	r3, r3, #31
 801bb8e:	2202      	movs	r2, #2
 801bb90:	409a      	lsls	r2, r3
 801bb92:	69fb      	ldr	r3, [r7, #28]
 801bb94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801bb96:	693b      	ldr	r3, [r7, #16]
 801bb98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	d018      	beq.n	801bbd2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801bba0:	693b      	ldr	r3, [r7, #16]
 801bba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d109      	bne.n	801bbbe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	f000 813a 	beq.w	801be28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bbb8:	6878      	ldr	r0, [r7, #4]
 801bbba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801bbbc:	e134      	b.n	801be28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	f000 8130 	beq.w	801be28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bbcc:	6878      	ldr	r0, [r7, #4]
 801bbce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801bbd0:	e12a      	b.n	801be28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801bbd2:	693b      	ldr	r3, [r7, #16]
 801bbd4:	f003 0320 	and.w	r3, r3, #32
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	f040 8089 	bne.w	801bcf0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	681b      	ldr	r3, [r3, #0]
 801bbe2:	4a2b      	ldr	r2, [pc, #172]	@ (801bc90 <HAL_DMA_IRQHandler+0xc74>)
 801bbe4:	4293      	cmp	r3, r2
 801bbe6:	d04a      	beq.n	801bc7e <HAL_DMA_IRQHandler+0xc62>
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	681b      	ldr	r3, [r3, #0]
 801bbec:	4a29      	ldr	r2, [pc, #164]	@ (801bc94 <HAL_DMA_IRQHandler+0xc78>)
 801bbee:	4293      	cmp	r3, r2
 801bbf0:	d045      	beq.n	801bc7e <HAL_DMA_IRQHandler+0xc62>
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	681b      	ldr	r3, [r3, #0]
 801bbf6:	4a28      	ldr	r2, [pc, #160]	@ (801bc98 <HAL_DMA_IRQHandler+0xc7c>)
 801bbf8:	4293      	cmp	r3, r2
 801bbfa:	d040      	beq.n	801bc7e <HAL_DMA_IRQHandler+0xc62>
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	681b      	ldr	r3, [r3, #0]
 801bc00:	4a26      	ldr	r2, [pc, #152]	@ (801bc9c <HAL_DMA_IRQHandler+0xc80>)
 801bc02:	4293      	cmp	r3, r2
 801bc04:	d03b      	beq.n	801bc7e <HAL_DMA_IRQHandler+0xc62>
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	4a25      	ldr	r2, [pc, #148]	@ (801bca0 <HAL_DMA_IRQHandler+0xc84>)
 801bc0c:	4293      	cmp	r3, r2
 801bc0e:	d036      	beq.n	801bc7e <HAL_DMA_IRQHandler+0xc62>
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	4a23      	ldr	r2, [pc, #140]	@ (801bca4 <HAL_DMA_IRQHandler+0xc88>)
 801bc16:	4293      	cmp	r3, r2
 801bc18:	d031      	beq.n	801bc7e <HAL_DMA_IRQHandler+0xc62>
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	4a22      	ldr	r2, [pc, #136]	@ (801bca8 <HAL_DMA_IRQHandler+0xc8c>)
 801bc20:	4293      	cmp	r3, r2
 801bc22:	d02c      	beq.n	801bc7e <HAL_DMA_IRQHandler+0xc62>
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	681b      	ldr	r3, [r3, #0]
 801bc28:	4a20      	ldr	r2, [pc, #128]	@ (801bcac <HAL_DMA_IRQHandler+0xc90>)
 801bc2a:	4293      	cmp	r3, r2
 801bc2c:	d027      	beq.n	801bc7e <HAL_DMA_IRQHandler+0xc62>
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	4a1f      	ldr	r2, [pc, #124]	@ (801bcb0 <HAL_DMA_IRQHandler+0xc94>)
 801bc34:	4293      	cmp	r3, r2
 801bc36:	d022      	beq.n	801bc7e <HAL_DMA_IRQHandler+0xc62>
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	681b      	ldr	r3, [r3, #0]
 801bc3c:	4a1d      	ldr	r2, [pc, #116]	@ (801bcb4 <HAL_DMA_IRQHandler+0xc98>)
 801bc3e:	4293      	cmp	r3, r2
 801bc40:	d01d      	beq.n	801bc7e <HAL_DMA_IRQHandler+0xc62>
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	681b      	ldr	r3, [r3, #0]
 801bc46:	4a1c      	ldr	r2, [pc, #112]	@ (801bcb8 <HAL_DMA_IRQHandler+0xc9c>)
 801bc48:	4293      	cmp	r3, r2
 801bc4a:	d018      	beq.n	801bc7e <HAL_DMA_IRQHandler+0xc62>
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	681b      	ldr	r3, [r3, #0]
 801bc50:	4a1a      	ldr	r2, [pc, #104]	@ (801bcbc <HAL_DMA_IRQHandler+0xca0>)
 801bc52:	4293      	cmp	r3, r2
 801bc54:	d013      	beq.n	801bc7e <HAL_DMA_IRQHandler+0xc62>
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	681b      	ldr	r3, [r3, #0]
 801bc5a:	4a19      	ldr	r2, [pc, #100]	@ (801bcc0 <HAL_DMA_IRQHandler+0xca4>)
 801bc5c:	4293      	cmp	r3, r2
 801bc5e:	d00e      	beq.n	801bc7e <HAL_DMA_IRQHandler+0xc62>
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	681b      	ldr	r3, [r3, #0]
 801bc64:	4a17      	ldr	r2, [pc, #92]	@ (801bcc4 <HAL_DMA_IRQHandler+0xca8>)
 801bc66:	4293      	cmp	r3, r2
 801bc68:	d009      	beq.n	801bc7e <HAL_DMA_IRQHandler+0xc62>
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	4a16      	ldr	r2, [pc, #88]	@ (801bcc8 <HAL_DMA_IRQHandler+0xcac>)
 801bc70:	4293      	cmp	r3, r2
 801bc72:	d004      	beq.n	801bc7e <HAL_DMA_IRQHandler+0xc62>
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	681b      	ldr	r3, [r3, #0]
 801bc78:	4a14      	ldr	r2, [pc, #80]	@ (801bccc <HAL_DMA_IRQHandler+0xcb0>)
 801bc7a:	4293      	cmp	r3, r2
 801bc7c:	d128      	bne.n	801bcd0 <HAL_DMA_IRQHandler+0xcb4>
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	681b      	ldr	r3, [r3, #0]
 801bc82:	681a      	ldr	r2, [r3, #0]
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	681b      	ldr	r3, [r3, #0]
 801bc88:	f022 0214 	bic.w	r2, r2, #20
 801bc8c:	601a      	str	r2, [r3, #0]
 801bc8e:	e027      	b.n	801bce0 <HAL_DMA_IRQHandler+0xcc4>
 801bc90:	40020010 	.word	0x40020010
 801bc94:	40020028 	.word	0x40020028
 801bc98:	40020040 	.word	0x40020040
 801bc9c:	40020058 	.word	0x40020058
 801bca0:	40020070 	.word	0x40020070
 801bca4:	40020088 	.word	0x40020088
 801bca8:	400200a0 	.word	0x400200a0
 801bcac:	400200b8 	.word	0x400200b8
 801bcb0:	40020410 	.word	0x40020410
 801bcb4:	40020428 	.word	0x40020428
 801bcb8:	40020440 	.word	0x40020440
 801bcbc:	40020458 	.word	0x40020458
 801bcc0:	40020470 	.word	0x40020470
 801bcc4:	40020488 	.word	0x40020488
 801bcc8:	400204a0 	.word	0x400204a0
 801bccc:	400204b8 	.word	0x400204b8
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	681b      	ldr	r3, [r3, #0]
 801bcd4:	681a      	ldr	r2, [r3, #0]
 801bcd6:	687b      	ldr	r3, [r7, #4]
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	f022 020a 	bic.w	r2, r2, #10
 801bcde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	2201      	movs	r2, #1
 801bce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	2200      	movs	r2, #0
 801bcec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bcf4:	2b00      	cmp	r3, #0
 801bcf6:	f000 8097 	beq.w	801be28 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bcfe:	6878      	ldr	r0, [r7, #4]
 801bd00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801bd02:	e091      	b.n	801be28 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bd08:	f003 031f 	and.w	r3, r3, #31
 801bd0c:	2208      	movs	r2, #8
 801bd0e:	409a      	lsls	r2, r3
 801bd10:	697b      	ldr	r3, [r7, #20]
 801bd12:	4013      	ands	r3, r2
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	f000 8088 	beq.w	801be2a <HAL_DMA_IRQHandler+0xe0e>
 801bd1a:	693b      	ldr	r3, [r7, #16]
 801bd1c:	f003 0308 	and.w	r3, r3, #8
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	f000 8082 	beq.w	801be2a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	681b      	ldr	r3, [r3, #0]
 801bd2a:	4a41      	ldr	r2, [pc, #260]	@ (801be30 <HAL_DMA_IRQHandler+0xe14>)
 801bd2c:	4293      	cmp	r3, r2
 801bd2e:	d04a      	beq.n	801bdc6 <HAL_DMA_IRQHandler+0xdaa>
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	4a3f      	ldr	r2, [pc, #252]	@ (801be34 <HAL_DMA_IRQHandler+0xe18>)
 801bd36:	4293      	cmp	r3, r2
 801bd38:	d045      	beq.n	801bdc6 <HAL_DMA_IRQHandler+0xdaa>
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	681b      	ldr	r3, [r3, #0]
 801bd3e:	4a3e      	ldr	r2, [pc, #248]	@ (801be38 <HAL_DMA_IRQHandler+0xe1c>)
 801bd40:	4293      	cmp	r3, r2
 801bd42:	d040      	beq.n	801bdc6 <HAL_DMA_IRQHandler+0xdaa>
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	681b      	ldr	r3, [r3, #0]
 801bd48:	4a3c      	ldr	r2, [pc, #240]	@ (801be3c <HAL_DMA_IRQHandler+0xe20>)
 801bd4a:	4293      	cmp	r3, r2
 801bd4c:	d03b      	beq.n	801bdc6 <HAL_DMA_IRQHandler+0xdaa>
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	681b      	ldr	r3, [r3, #0]
 801bd52:	4a3b      	ldr	r2, [pc, #236]	@ (801be40 <HAL_DMA_IRQHandler+0xe24>)
 801bd54:	4293      	cmp	r3, r2
 801bd56:	d036      	beq.n	801bdc6 <HAL_DMA_IRQHandler+0xdaa>
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	4a39      	ldr	r2, [pc, #228]	@ (801be44 <HAL_DMA_IRQHandler+0xe28>)
 801bd5e:	4293      	cmp	r3, r2
 801bd60:	d031      	beq.n	801bdc6 <HAL_DMA_IRQHandler+0xdaa>
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	681b      	ldr	r3, [r3, #0]
 801bd66:	4a38      	ldr	r2, [pc, #224]	@ (801be48 <HAL_DMA_IRQHandler+0xe2c>)
 801bd68:	4293      	cmp	r3, r2
 801bd6a:	d02c      	beq.n	801bdc6 <HAL_DMA_IRQHandler+0xdaa>
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	4a36      	ldr	r2, [pc, #216]	@ (801be4c <HAL_DMA_IRQHandler+0xe30>)
 801bd72:	4293      	cmp	r3, r2
 801bd74:	d027      	beq.n	801bdc6 <HAL_DMA_IRQHandler+0xdaa>
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	681b      	ldr	r3, [r3, #0]
 801bd7a:	4a35      	ldr	r2, [pc, #212]	@ (801be50 <HAL_DMA_IRQHandler+0xe34>)
 801bd7c:	4293      	cmp	r3, r2
 801bd7e:	d022      	beq.n	801bdc6 <HAL_DMA_IRQHandler+0xdaa>
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	4a33      	ldr	r2, [pc, #204]	@ (801be54 <HAL_DMA_IRQHandler+0xe38>)
 801bd86:	4293      	cmp	r3, r2
 801bd88:	d01d      	beq.n	801bdc6 <HAL_DMA_IRQHandler+0xdaa>
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	4a32      	ldr	r2, [pc, #200]	@ (801be58 <HAL_DMA_IRQHandler+0xe3c>)
 801bd90:	4293      	cmp	r3, r2
 801bd92:	d018      	beq.n	801bdc6 <HAL_DMA_IRQHandler+0xdaa>
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	4a30      	ldr	r2, [pc, #192]	@ (801be5c <HAL_DMA_IRQHandler+0xe40>)
 801bd9a:	4293      	cmp	r3, r2
 801bd9c:	d013      	beq.n	801bdc6 <HAL_DMA_IRQHandler+0xdaa>
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	4a2f      	ldr	r2, [pc, #188]	@ (801be60 <HAL_DMA_IRQHandler+0xe44>)
 801bda4:	4293      	cmp	r3, r2
 801bda6:	d00e      	beq.n	801bdc6 <HAL_DMA_IRQHandler+0xdaa>
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	4a2d      	ldr	r2, [pc, #180]	@ (801be64 <HAL_DMA_IRQHandler+0xe48>)
 801bdae:	4293      	cmp	r3, r2
 801bdb0:	d009      	beq.n	801bdc6 <HAL_DMA_IRQHandler+0xdaa>
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	681b      	ldr	r3, [r3, #0]
 801bdb6:	4a2c      	ldr	r2, [pc, #176]	@ (801be68 <HAL_DMA_IRQHandler+0xe4c>)
 801bdb8:	4293      	cmp	r3, r2
 801bdba:	d004      	beq.n	801bdc6 <HAL_DMA_IRQHandler+0xdaa>
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	4a2a      	ldr	r2, [pc, #168]	@ (801be6c <HAL_DMA_IRQHandler+0xe50>)
 801bdc2:	4293      	cmp	r3, r2
 801bdc4:	d108      	bne.n	801bdd8 <HAL_DMA_IRQHandler+0xdbc>
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	681b      	ldr	r3, [r3, #0]
 801bdca:	681a      	ldr	r2, [r3, #0]
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	f022 021c 	bic.w	r2, r2, #28
 801bdd4:	601a      	str	r2, [r3, #0]
 801bdd6:	e007      	b.n	801bde8 <HAL_DMA_IRQHandler+0xdcc>
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	681a      	ldr	r2, [r3, #0]
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	681b      	ldr	r3, [r3, #0]
 801bde2:	f022 020e 	bic.w	r2, r2, #14
 801bde6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bdec:	f003 031f 	and.w	r3, r3, #31
 801bdf0:	2201      	movs	r2, #1
 801bdf2:	409a      	lsls	r2, r3
 801bdf4:	69fb      	ldr	r3, [r7, #28]
 801bdf6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	2201      	movs	r2, #1
 801bdfc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	2201      	movs	r2, #1
 801be02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	2200      	movs	r2, #0
 801be0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801be12:	2b00      	cmp	r3, #0
 801be14:	d009      	beq.n	801be2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801be1a:	6878      	ldr	r0, [r7, #4]
 801be1c:	4798      	blx	r3
 801be1e:	e004      	b.n	801be2a <HAL_DMA_IRQHandler+0xe0e>
          return;
 801be20:	bf00      	nop
 801be22:	e002      	b.n	801be2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801be24:	bf00      	nop
 801be26:	e000      	b.n	801be2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801be28:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801be2a:	3728      	adds	r7, #40	@ 0x28
 801be2c:	46bd      	mov	sp, r7
 801be2e:	bd80      	pop	{r7, pc}
 801be30:	40020010 	.word	0x40020010
 801be34:	40020028 	.word	0x40020028
 801be38:	40020040 	.word	0x40020040
 801be3c:	40020058 	.word	0x40020058
 801be40:	40020070 	.word	0x40020070
 801be44:	40020088 	.word	0x40020088
 801be48:	400200a0 	.word	0x400200a0
 801be4c:	400200b8 	.word	0x400200b8
 801be50:	40020410 	.word	0x40020410
 801be54:	40020428 	.word	0x40020428
 801be58:	40020440 	.word	0x40020440
 801be5c:	40020458 	.word	0x40020458
 801be60:	40020470 	.word	0x40020470
 801be64:	40020488 	.word	0x40020488
 801be68:	400204a0 	.word	0x400204a0
 801be6c:	400204b8 	.word	0x400204b8

0801be70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801be70:	b480      	push	{r7}
 801be72:	b085      	sub	sp, #20
 801be74:	af00      	add	r7, sp, #0
 801be76:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	681b      	ldr	r3, [r3, #0]
 801be7c:	4a42      	ldr	r2, [pc, #264]	@ (801bf88 <DMA_CalcBaseAndBitshift+0x118>)
 801be7e:	4293      	cmp	r3, r2
 801be80:	d04a      	beq.n	801bf18 <DMA_CalcBaseAndBitshift+0xa8>
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	681b      	ldr	r3, [r3, #0]
 801be86:	4a41      	ldr	r2, [pc, #260]	@ (801bf8c <DMA_CalcBaseAndBitshift+0x11c>)
 801be88:	4293      	cmp	r3, r2
 801be8a:	d045      	beq.n	801bf18 <DMA_CalcBaseAndBitshift+0xa8>
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	681b      	ldr	r3, [r3, #0]
 801be90:	4a3f      	ldr	r2, [pc, #252]	@ (801bf90 <DMA_CalcBaseAndBitshift+0x120>)
 801be92:	4293      	cmp	r3, r2
 801be94:	d040      	beq.n	801bf18 <DMA_CalcBaseAndBitshift+0xa8>
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	681b      	ldr	r3, [r3, #0]
 801be9a:	4a3e      	ldr	r2, [pc, #248]	@ (801bf94 <DMA_CalcBaseAndBitshift+0x124>)
 801be9c:	4293      	cmp	r3, r2
 801be9e:	d03b      	beq.n	801bf18 <DMA_CalcBaseAndBitshift+0xa8>
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	4a3c      	ldr	r2, [pc, #240]	@ (801bf98 <DMA_CalcBaseAndBitshift+0x128>)
 801bea6:	4293      	cmp	r3, r2
 801bea8:	d036      	beq.n	801bf18 <DMA_CalcBaseAndBitshift+0xa8>
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	681b      	ldr	r3, [r3, #0]
 801beae:	4a3b      	ldr	r2, [pc, #236]	@ (801bf9c <DMA_CalcBaseAndBitshift+0x12c>)
 801beb0:	4293      	cmp	r3, r2
 801beb2:	d031      	beq.n	801bf18 <DMA_CalcBaseAndBitshift+0xa8>
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	4a39      	ldr	r2, [pc, #228]	@ (801bfa0 <DMA_CalcBaseAndBitshift+0x130>)
 801beba:	4293      	cmp	r3, r2
 801bebc:	d02c      	beq.n	801bf18 <DMA_CalcBaseAndBitshift+0xa8>
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	681b      	ldr	r3, [r3, #0]
 801bec2:	4a38      	ldr	r2, [pc, #224]	@ (801bfa4 <DMA_CalcBaseAndBitshift+0x134>)
 801bec4:	4293      	cmp	r3, r2
 801bec6:	d027      	beq.n	801bf18 <DMA_CalcBaseAndBitshift+0xa8>
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	681b      	ldr	r3, [r3, #0]
 801becc:	4a36      	ldr	r2, [pc, #216]	@ (801bfa8 <DMA_CalcBaseAndBitshift+0x138>)
 801bece:	4293      	cmp	r3, r2
 801bed0:	d022      	beq.n	801bf18 <DMA_CalcBaseAndBitshift+0xa8>
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	4a35      	ldr	r2, [pc, #212]	@ (801bfac <DMA_CalcBaseAndBitshift+0x13c>)
 801bed8:	4293      	cmp	r3, r2
 801beda:	d01d      	beq.n	801bf18 <DMA_CalcBaseAndBitshift+0xa8>
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	681b      	ldr	r3, [r3, #0]
 801bee0:	4a33      	ldr	r2, [pc, #204]	@ (801bfb0 <DMA_CalcBaseAndBitshift+0x140>)
 801bee2:	4293      	cmp	r3, r2
 801bee4:	d018      	beq.n	801bf18 <DMA_CalcBaseAndBitshift+0xa8>
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	681b      	ldr	r3, [r3, #0]
 801beea:	4a32      	ldr	r2, [pc, #200]	@ (801bfb4 <DMA_CalcBaseAndBitshift+0x144>)
 801beec:	4293      	cmp	r3, r2
 801beee:	d013      	beq.n	801bf18 <DMA_CalcBaseAndBitshift+0xa8>
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	681b      	ldr	r3, [r3, #0]
 801bef4:	4a30      	ldr	r2, [pc, #192]	@ (801bfb8 <DMA_CalcBaseAndBitshift+0x148>)
 801bef6:	4293      	cmp	r3, r2
 801bef8:	d00e      	beq.n	801bf18 <DMA_CalcBaseAndBitshift+0xa8>
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	681b      	ldr	r3, [r3, #0]
 801befe:	4a2f      	ldr	r2, [pc, #188]	@ (801bfbc <DMA_CalcBaseAndBitshift+0x14c>)
 801bf00:	4293      	cmp	r3, r2
 801bf02:	d009      	beq.n	801bf18 <DMA_CalcBaseAndBitshift+0xa8>
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	681b      	ldr	r3, [r3, #0]
 801bf08:	4a2d      	ldr	r2, [pc, #180]	@ (801bfc0 <DMA_CalcBaseAndBitshift+0x150>)
 801bf0a:	4293      	cmp	r3, r2
 801bf0c:	d004      	beq.n	801bf18 <DMA_CalcBaseAndBitshift+0xa8>
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	681b      	ldr	r3, [r3, #0]
 801bf12:	4a2c      	ldr	r2, [pc, #176]	@ (801bfc4 <DMA_CalcBaseAndBitshift+0x154>)
 801bf14:	4293      	cmp	r3, r2
 801bf16:	d101      	bne.n	801bf1c <DMA_CalcBaseAndBitshift+0xac>
 801bf18:	2301      	movs	r3, #1
 801bf1a:	e000      	b.n	801bf1e <DMA_CalcBaseAndBitshift+0xae>
 801bf1c:	2300      	movs	r3, #0
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	d024      	beq.n	801bf6c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	b2db      	uxtb	r3, r3
 801bf28:	3b10      	subs	r3, #16
 801bf2a:	4a27      	ldr	r2, [pc, #156]	@ (801bfc8 <DMA_CalcBaseAndBitshift+0x158>)
 801bf2c:	fba2 2303 	umull	r2, r3, r2, r3
 801bf30:	091b      	lsrs	r3, r3, #4
 801bf32:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801bf34:	68fb      	ldr	r3, [r7, #12]
 801bf36:	f003 0307 	and.w	r3, r3, #7
 801bf3a:	4a24      	ldr	r2, [pc, #144]	@ (801bfcc <DMA_CalcBaseAndBitshift+0x15c>)
 801bf3c:	5cd3      	ldrb	r3, [r2, r3]
 801bf3e:	461a      	mov	r2, r3
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801bf44:	68fb      	ldr	r3, [r7, #12]
 801bf46:	2b03      	cmp	r3, #3
 801bf48:	d908      	bls.n	801bf5c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	461a      	mov	r2, r3
 801bf50:	4b1f      	ldr	r3, [pc, #124]	@ (801bfd0 <DMA_CalcBaseAndBitshift+0x160>)
 801bf52:	4013      	ands	r3, r2
 801bf54:	1d1a      	adds	r2, r3, #4
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	659a      	str	r2, [r3, #88]	@ 0x58
 801bf5a:	e00d      	b.n	801bf78 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	681b      	ldr	r3, [r3, #0]
 801bf60:	461a      	mov	r2, r3
 801bf62:	4b1b      	ldr	r3, [pc, #108]	@ (801bfd0 <DMA_CalcBaseAndBitshift+0x160>)
 801bf64:	4013      	ands	r3, r2
 801bf66:	687a      	ldr	r2, [r7, #4]
 801bf68:	6593      	str	r3, [r2, #88]	@ 0x58
 801bf6a:	e005      	b.n	801bf78 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	681b      	ldr	r3, [r3, #0]
 801bf70:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801bf7c:	4618      	mov	r0, r3
 801bf7e:	3714      	adds	r7, #20
 801bf80:	46bd      	mov	sp, r7
 801bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf86:	4770      	bx	lr
 801bf88:	40020010 	.word	0x40020010
 801bf8c:	40020028 	.word	0x40020028
 801bf90:	40020040 	.word	0x40020040
 801bf94:	40020058 	.word	0x40020058
 801bf98:	40020070 	.word	0x40020070
 801bf9c:	40020088 	.word	0x40020088
 801bfa0:	400200a0 	.word	0x400200a0
 801bfa4:	400200b8 	.word	0x400200b8
 801bfa8:	40020410 	.word	0x40020410
 801bfac:	40020428 	.word	0x40020428
 801bfb0:	40020440 	.word	0x40020440
 801bfb4:	40020458 	.word	0x40020458
 801bfb8:	40020470 	.word	0x40020470
 801bfbc:	40020488 	.word	0x40020488
 801bfc0:	400204a0 	.word	0x400204a0
 801bfc4:	400204b8 	.word	0x400204b8
 801bfc8:	aaaaaaab 	.word	0xaaaaaaab
 801bfcc:	080278fc 	.word	0x080278fc
 801bfd0:	fffffc00 	.word	0xfffffc00

0801bfd4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801bfd4:	b480      	push	{r7}
 801bfd6:	b085      	sub	sp, #20
 801bfd8:	af00      	add	r7, sp, #0
 801bfda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801bfdc:	2300      	movs	r3, #0
 801bfde:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	699b      	ldr	r3, [r3, #24]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d120      	bne.n	801c02a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bfec:	2b03      	cmp	r3, #3
 801bfee:	d858      	bhi.n	801c0a2 <DMA_CheckFifoParam+0xce>
 801bff0:	a201      	add	r2, pc, #4	@ (adr r2, 801bff8 <DMA_CheckFifoParam+0x24>)
 801bff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bff6:	bf00      	nop
 801bff8:	0801c009 	.word	0x0801c009
 801bffc:	0801c01b 	.word	0x0801c01b
 801c000:	0801c009 	.word	0x0801c009
 801c004:	0801c0a3 	.word	0x0801c0a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c00c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c010:	2b00      	cmp	r3, #0
 801c012:	d048      	beq.n	801c0a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801c014:	2301      	movs	r3, #1
 801c016:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c018:	e045      	b.n	801c0a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c01e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801c022:	d142      	bne.n	801c0aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801c024:	2301      	movs	r3, #1
 801c026:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c028:	e03f      	b.n	801c0aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	699b      	ldr	r3, [r3, #24]
 801c02e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c032:	d123      	bne.n	801c07c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c038:	2b03      	cmp	r3, #3
 801c03a:	d838      	bhi.n	801c0ae <DMA_CheckFifoParam+0xda>
 801c03c:	a201      	add	r2, pc, #4	@ (adr r2, 801c044 <DMA_CheckFifoParam+0x70>)
 801c03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c042:	bf00      	nop
 801c044:	0801c055 	.word	0x0801c055
 801c048:	0801c05b 	.word	0x0801c05b
 801c04c:	0801c055 	.word	0x0801c055
 801c050:	0801c06d 	.word	0x0801c06d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801c054:	2301      	movs	r3, #1
 801c056:	73fb      	strb	r3, [r7, #15]
        break;
 801c058:	e030      	b.n	801c0bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c05e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c062:	2b00      	cmp	r3, #0
 801c064:	d025      	beq.n	801c0b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801c066:	2301      	movs	r3, #1
 801c068:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c06a:	e022      	b.n	801c0b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c070:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801c074:	d11f      	bne.n	801c0b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801c076:	2301      	movs	r3, #1
 801c078:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c07a:	e01c      	b.n	801c0b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c080:	2b02      	cmp	r3, #2
 801c082:	d902      	bls.n	801c08a <DMA_CheckFifoParam+0xb6>
 801c084:	2b03      	cmp	r3, #3
 801c086:	d003      	beq.n	801c090 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801c088:	e018      	b.n	801c0bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801c08a:	2301      	movs	r3, #1
 801c08c:	73fb      	strb	r3, [r7, #15]
        break;
 801c08e:	e015      	b.n	801c0bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c094:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d00e      	beq.n	801c0ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801c09c:	2301      	movs	r3, #1
 801c09e:	73fb      	strb	r3, [r7, #15]
    break;
 801c0a0:	e00b      	b.n	801c0ba <DMA_CheckFifoParam+0xe6>
        break;
 801c0a2:	bf00      	nop
 801c0a4:	e00a      	b.n	801c0bc <DMA_CheckFifoParam+0xe8>
        break;
 801c0a6:	bf00      	nop
 801c0a8:	e008      	b.n	801c0bc <DMA_CheckFifoParam+0xe8>
        break;
 801c0aa:	bf00      	nop
 801c0ac:	e006      	b.n	801c0bc <DMA_CheckFifoParam+0xe8>
        break;
 801c0ae:	bf00      	nop
 801c0b0:	e004      	b.n	801c0bc <DMA_CheckFifoParam+0xe8>
        break;
 801c0b2:	bf00      	nop
 801c0b4:	e002      	b.n	801c0bc <DMA_CheckFifoParam+0xe8>
        break;
 801c0b6:	bf00      	nop
 801c0b8:	e000      	b.n	801c0bc <DMA_CheckFifoParam+0xe8>
    break;
 801c0ba:	bf00      	nop
    }
  }

  return status;
 801c0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 801c0be:	4618      	mov	r0, r3
 801c0c0:	3714      	adds	r7, #20
 801c0c2:	46bd      	mov	sp, r7
 801c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0c8:	4770      	bx	lr
 801c0ca:	bf00      	nop

0801c0cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801c0cc:	b480      	push	{r7}
 801c0ce:	b085      	sub	sp, #20
 801c0d0:	af00      	add	r7, sp, #0
 801c0d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	681b      	ldr	r3, [r3, #0]
 801c0d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	4a38      	ldr	r2, [pc, #224]	@ (801c1c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801c0e0:	4293      	cmp	r3, r2
 801c0e2:	d022      	beq.n	801c12a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	4a36      	ldr	r2, [pc, #216]	@ (801c1c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801c0ea:	4293      	cmp	r3, r2
 801c0ec:	d01d      	beq.n	801c12a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	681b      	ldr	r3, [r3, #0]
 801c0f2:	4a35      	ldr	r2, [pc, #212]	@ (801c1c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801c0f4:	4293      	cmp	r3, r2
 801c0f6:	d018      	beq.n	801c12a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	4a33      	ldr	r2, [pc, #204]	@ (801c1cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801c0fe:	4293      	cmp	r3, r2
 801c100:	d013      	beq.n	801c12a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	681b      	ldr	r3, [r3, #0]
 801c106:	4a32      	ldr	r2, [pc, #200]	@ (801c1d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801c108:	4293      	cmp	r3, r2
 801c10a:	d00e      	beq.n	801c12a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	681b      	ldr	r3, [r3, #0]
 801c110:	4a30      	ldr	r2, [pc, #192]	@ (801c1d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801c112:	4293      	cmp	r3, r2
 801c114:	d009      	beq.n	801c12a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c116:	687b      	ldr	r3, [r7, #4]
 801c118:	681b      	ldr	r3, [r3, #0]
 801c11a:	4a2f      	ldr	r2, [pc, #188]	@ (801c1d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801c11c:	4293      	cmp	r3, r2
 801c11e:	d004      	beq.n	801c12a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	4a2d      	ldr	r2, [pc, #180]	@ (801c1dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801c126:	4293      	cmp	r3, r2
 801c128:	d101      	bne.n	801c12e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801c12a:	2301      	movs	r3, #1
 801c12c:	e000      	b.n	801c130 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801c12e:	2300      	movs	r3, #0
 801c130:	2b00      	cmp	r3, #0
 801c132:	d01a      	beq.n	801c16a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	681b      	ldr	r3, [r3, #0]
 801c138:	b2db      	uxtb	r3, r3
 801c13a:	3b08      	subs	r3, #8
 801c13c:	4a28      	ldr	r2, [pc, #160]	@ (801c1e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801c13e:	fba2 2303 	umull	r2, r3, r2, r3
 801c142:	091b      	lsrs	r3, r3, #4
 801c144:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801c146:	68fa      	ldr	r2, [r7, #12]
 801c148:	4b26      	ldr	r3, [pc, #152]	@ (801c1e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801c14a:	4413      	add	r3, r2
 801c14c:	009b      	lsls	r3, r3, #2
 801c14e:	461a      	mov	r2, r3
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	4a24      	ldr	r2, [pc, #144]	@ (801c1e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801c158:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801c15a:	68fb      	ldr	r3, [r7, #12]
 801c15c:	f003 031f 	and.w	r3, r3, #31
 801c160:	2201      	movs	r2, #1
 801c162:	409a      	lsls	r2, r3
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801c168:	e024      	b.n	801c1b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	681b      	ldr	r3, [r3, #0]
 801c16e:	b2db      	uxtb	r3, r3
 801c170:	3b10      	subs	r3, #16
 801c172:	4a1e      	ldr	r2, [pc, #120]	@ (801c1ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801c174:	fba2 2303 	umull	r2, r3, r2, r3
 801c178:	091b      	lsrs	r3, r3, #4
 801c17a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801c17c:	68bb      	ldr	r3, [r7, #8]
 801c17e:	4a1c      	ldr	r2, [pc, #112]	@ (801c1f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801c180:	4293      	cmp	r3, r2
 801c182:	d806      	bhi.n	801c192 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801c184:	68bb      	ldr	r3, [r7, #8]
 801c186:	4a1b      	ldr	r2, [pc, #108]	@ (801c1f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801c188:	4293      	cmp	r3, r2
 801c18a:	d902      	bls.n	801c192 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801c18c:	68fb      	ldr	r3, [r7, #12]
 801c18e:	3308      	adds	r3, #8
 801c190:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801c192:	68fa      	ldr	r2, [r7, #12]
 801c194:	4b18      	ldr	r3, [pc, #96]	@ (801c1f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801c196:	4413      	add	r3, r2
 801c198:	009b      	lsls	r3, r3, #2
 801c19a:	461a      	mov	r2, r3
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	4a16      	ldr	r2, [pc, #88]	@ (801c1fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801c1a4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801c1a6:	68fb      	ldr	r3, [r7, #12]
 801c1a8:	f003 031f 	and.w	r3, r3, #31
 801c1ac:	2201      	movs	r2, #1
 801c1ae:	409a      	lsls	r2, r3
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801c1b4:	bf00      	nop
 801c1b6:	3714      	adds	r7, #20
 801c1b8:	46bd      	mov	sp, r7
 801c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1be:	4770      	bx	lr
 801c1c0:	58025408 	.word	0x58025408
 801c1c4:	5802541c 	.word	0x5802541c
 801c1c8:	58025430 	.word	0x58025430
 801c1cc:	58025444 	.word	0x58025444
 801c1d0:	58025458 	.word	0x58025458
 801c1d4:	5802546c 	.word	0x5802546c
 801c1d8:	58025480 	.word	0x58025480
 801c1dc:	58025494 	.word	0x58025494
 801c1e0:	cccccccd 	.word	0xcccccccd
 801c1e4:	16009600 	.word	0x16009600
 801c1e8:	58025880 	.word	0x58025880
 801c1ec:	aaaaaaab 	.word	0xaaaaaaab
 801c1f0:	400204b8 	.word	0x400204b8
 801c1f4:	4002040f 	.word	0x4002040f
 801c1f8:	10008200 	.word	0x10008200
 801c1fc:	40020880 	.word	0x40020880

0801c200 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801c200:	b480      	push	{r7}
 801c202:	b085      	sub	sp, #20
 801c204:	af00      	add	r7, sp, #0
 801c206:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	685b      	ldr	r3, [r3, #4]
 801c20c:	b2db      	uxtb	r3, r3
 801c20e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801c210:	68fb      	ldr	r3, [r7, #12]
 801c212:	2b00      	cmp	r3, #0
 801c214:	d04a      	beq.n	801c2ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801c216:	68fb      	ldr	r3, [r7, #12]
 801c218:	2b08      	cmp	r3, #8
 801c21a:	d847      	bhi.n	801c2ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	681b      	ldr	r3, [r3, #0]
 801c220:	4a25      	ldr	r2, [pc, #148]	@ (801c2b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801c222:	4293      	cmp	r3, r2
 801c224:	d022      	beq.n	801c26c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	4a24      	ldr	r2, [pc, #144]	@ (801c2bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801c22c:	4293      	cmp	r3, r2
 801c22e:	d01d      	beq.n	801c26c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	4a22      	ldr	r2, [pc, #136]	@ (801c2c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801c236:	4293      	cmp	r3, r2
 801c238:	d018      	beq.n	801c26c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	4a21      	ldr	r2, [pc, #132]	@ (801c2c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801c240:	4293      	cmp	r3, r2
 801c242:	d013      	beq.n	801c26c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	681b      	ldr	r3, [r3, #0]
 801c248:	4a1f      	ldr	r2, [pc, #124]	@ (801c2c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801c24a:	4293      	cmp	r3, r2
 801c24c:	d00e      	beq.n	801c26c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	4a1e      	ldr	r2, [pc, #120]	@ (801c2cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801c254:	4293      	cmp	r3, r2
 801c256:	d009      	beq.n	801c26c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	681b      	ldr	r3, [r3, #0]
 801c25c:	4a1c      	ldr	r2, [pc, #112]	@ (801c2d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801c25e:	4293      	cmp	r3, r2
 801c260:	d004      	beq.n	801c26c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	681b      	ldr	r3, [r3, #0]
 801c266:	4a1b      	ldr	r2, [pc, #108]	@ (801c2d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801c268:	4293      	cmp	r3, r2
 801c26a:	d101      	bne.n	801c270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801c26c:	2301      	movs	r3, #1
 801c26e:	e000      	b.n	801c272 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801c270:	2300      	movs	r3, #0
 801c272:	2b00      	cmp	r3, #0
 801c274:	d00a      	beq.n	801c28c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801c276:	68fa      	ldr	r2, [r7, #12]
 801c278:	4b17      	ldr	r3, [pc, #92]	@ (801c2d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801c27a:	4413      	add	r3, r2
 801c27c:	009b      	lsls	r3, r3, #2
 801c27e:	461a      	mov	r2, r3
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	4a15      	ldr	r2, [pc, #84]	@ (801c2dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801c288:	671a      	str	r2, [r3, #112]	@ 0x70
 801c28a:	e009      	b.n	801c2a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801c28c:	68fa      	ldr	r2, [r7, #12]
 801c28e:	4b14      	ldr	r3, [pc, #80]	@ (801c2e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801c290:	4413      	add	r3, r2
 801c292:	009b      	lsls	r3, r3, #2
 801c294:	461a      	mov	r2, r3
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	4a11      	ldr	r2, [pc, #68]	@ (801c2e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801c29e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801c2a0:	68fb      	ldr	r3, [r7, #12]
 801c2a2:	3b01      	subs	r3, #1
 801c2a4:	2201      	movs	r2, #1
 801c2a6:	409a      	lsls	r2, r3
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801c2ac:	bf00      	nop
 801c2ae:	3714      	adds	r7, #20
 801c2b0:	46bd      	mov	sp, r7
 801c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2b6:	4770      	bx	lr
 801c2b8:	58025408 	.word	0x58025408
 801c2bc:	5802541c 	.word	0x5802541c
 801c2c0:	58025430 	.word	0x58025430
 801c2c4:	58025444 	.word	0x58025444
 801c2c8:	58025458 	.word	0x58025458
 801c2cc:	5802546c 	.word	0x5802546c
 801c2d0:	58025480 	.word	0x58025480
 801c2d4:	58025494 	.word	0x58025494
 801c2d8:	1600963f 	.word	0x1600963f
 801c2dc:	58025940 	.word	0x58025940
 801c2e0:	1000823f 	.word	0x1000823f
 801c2e4:	40020940 	.word	0x40020940

0801c2e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c2e8:	b480      	push	{r7}
 801c2ea:	b089      	sub	sp, #36	@ 0x24
 801c2ec:	af00      	add	r7, sp, #0
 801c2ee:	6078      	str	r0, [r7, #4]
 801c2f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801c2f2:	2300      	movs	r3, #0
 801c2f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801c2f6:	4b89      	ldr	r3, [pc, #548]	@ (801c51c <HAL_GPIO_Init+0x234>)
 801c2f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801c2fa:	e194      	b.n	801c626 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801c2fc:	683b      	ldr	r3, [r7, #0]
 801c2fe:	681a      	ldr	r2, [r3, #0]
 801c300:	2101      	movs	r1, #1
 801c302:	69fb      	ldr	r3, [r7, #28]
 801c304:	fa01 f303 	lsl.w	r3, r1, r3
 801c308:	4013      	ands	r3, r2
 801c30a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801c30c:	693b      	ldr	r3, [r7, #16]
 801c30e:	2b00      	cmp	r3, #0
 801c310:	f000 8186 	beq.w	801c620 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801c314:	683b      	ldr	r3, [r7, #0]
 801c316:	685b      	ldr	r3, [r3, #4]
 801c318:	f003 0303 	and.w	r3, r3, #3
 801c31c:	2b01      	cmp	r3, #1
 801c31e:	d005      	beq.n	801c32c <HAL_GPIO_Init+0x44>
 801c320:	683b      	ldr	r3, [r7, #0]
 801c322:	685b      	ldr	r3, [r3, #4]
 801c324:	f003 0303 	and.w	r3, r3, #3
 801c328:	2b02      	cmp	r3, #2
 801c32a:	d130      	bne.n	801c38e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	689b      	ldr	r3, [r3, #8]
 801c330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801c332:	69fb      	ldr	r3, [r7, #28]
 801c334:	005b      	lsls	r3, r3, #1
 801c336:	2203      	movs	r2, #3
 801c338:	fa02 f303 	lsl.w	r3, r2, r3
 801c33c:	43db      	mvns	r3, r3
 801c33e:	69ba      	ldr	r2, [r7, #24]
 801c340:	4013      	ands	r3, r2
 801c342:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801c344:	683b      	ldr	r3, [r7, #0]
 801c346:	68da      	ldr	r2, [r3, #12]
 801c348:	69fb      	ldr	r3, [r7, #28]
 801c34a:	005b      	lsls	r3, r3, #1
 801c34c:	fa02 f303 	lsl.w	r3, r2, r3
 801c350:	69ba      	ldr	r2, [r7, #24]
 801c352:	4313      	orrs	r3, r2
 801c354:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	69ba      	ldr	r2, [r7, #24]
 801c35a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	685b      	ldr	r3, [r3, #4]
 801c360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801c362:	2201      	movs	r2, #1
 801c364:	69fb      	ldr	r3, [r7, #28]
 801c366:	fa02 f303 	lsl.w	r3, r2, r3
 801c36a:	43db      	mvns	r3, r3
 801c36c:	69ba      	ldr	r2, [r7, #24]
 801c36e:	4013      	ands	r3, r2
 801c370:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801c372:	683b      	ldr	r3, [r7, #0]
 801c374:	685b      	ldr	r3, [r3, #4]
 801c376:	091b      	lsrs	r3, r3, #4
 801c378:	f003 0201 	and.w	r2, r3, #1
 801c37c:	69fb      	ldr	r3, [r7, #28]
 801c37e:	fa02 f303 	lsl.w	r3, r2, r3
 801c382:	69ba      	ldr	r2, [r7, #24]
 801c384:	4313      	orrs	r3, r2
 801c386:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	69ba      	ldr	r2, [r7, #24]
 801c38c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801c38e:	683b      	ldr	r3, [r7, #0]
 801c390:	685b      	ldr	r3, [r3, #4]
 801c392:	f003 0303 	and.w	r3, r3, #3
 801c396:	2b03      	cmp	r3, #3
 801c398:	d017      	beq.n	801c3ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801c39a:	687b      	ldr	r3, [r7, #4]
 801c39c:	68db      	ldr	r3, [r3, #12]
 801c39e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801c3a0:	69fb      	ldr	r3, [r7, #28]
 801c3a2:	005b      	lsls	r3, r3, #1
 801c3a4:	2203      	movs	r2, #3
 801c3a6:	fa02 f303 	lsl.w	r3, r2, r3
 801c3aa:	43db      	mvns	r3, r3
 801c3ac:	69ba      	ldr	r2, [r7, #24]
 801c3ae:	4013      	ands	r3, r2
 801c3b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801c3b2:	683b      	ldr	r3, [r7, #0]
 801c3b4:	689a      	ldr	r2, [r3, #8]
 801c3b6:	69fb      	ldr	r3, [r7, #28]
 801c3b8:	005b      	lsls	r3, r3, #1
 801c3ba:	fa02 f303 	lsl.w	r3, r2, r3
 801c3be:	69ba      	ldr	r2, [r7, #24]
 801c3c0:	4313      	orrs	r3, r2
 801c3c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	69ba      	ldr	r2, [r7, #24]
 801c3c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801c3ca:	683b      	ldr	r3, [r7, #0]
 801c3cc:	685b      	ldr	r3, [r3, #4]
 801c3ce:	f003 0303 	and.w	r3, r3, #3
 801c3d2:	2b02      	cmp	r3, #2
 801c3d4:	d123      	bne.n	801c41e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801c3d6:	69fb      	ldr	r3, [r7, #28]
 801c3d8:	08da      	lsrs	r2, r3, #3
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	3208      	adds	r2, #8
 801c3de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c3e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801c3e4:	69fb      	ldr	r3, [r7, #28]
 801c3e6:	f003 0307 	and.w	r3, r3, #7
 801c3ea:	009b      	lsls	r3, r3, #2
 801c3ec:	220f      	movs	r2, #15
 801c3ee:	fa02 f303 	lsl.w	r3, r2, r3
 801c3f2:	43db      	mvns	r3, r3
 801c3f4:	69ba      	ldr	r2, [r7, #24]
 801c3f6:	4013      	ands	r3, r2
 801c3f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801c3fa:	683b      	ldr	r3, [r7, #0]
 801c3fc:	691a      	ldr	r2, [r3, #16]
 801c3fe:	69fb      	ldr	r3, [r7, #28]
 801c400:	f003 0307 	and.w	r3, r3, #7
 801c404:	009b      	lsls	r3, r3, #2
 801c406:	fa02 f303 	lsl.w	r3, r2, r3
 801c40a:	69ba      	ldr	r2, [r7, #24]
 801c40c:	4313      	orrs	r3, r2
 801c40e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801c410:	69fb      	ldr	r3, [r7, #28]
 801c412:	08da      	lsrs	r2, r3, #3
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	3208      	adds	r2, #8
 801c418:	69b9      	ldr	r1, [r7, #24]
 801c41a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801c424:	69fb      	ldr	r3, [r7, #28]
 801c426:	005b      	lsls	r3, r3, #1
 801c428:	2203      	movs	r2, #3
 801c42a:	fa02 f303 	lsl.w	r3, r2, r3
 801c42e:	43db      	mvns	r3, r3
 801c430:	69ba      	ldr	r2, [r7, #24]
 801c432:	4013      	ands	r3, r2
 801c434:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801c436:	683b      	ldr	r3, [r7, #0]
 801c438:	685b      	ldr	r3, [r3, #4]
 801c43a:	f003 0203 	and.w	r2, r3, #3
 801c43e:	69fb      	ldr	r3, [r7, #28]
 801c440:	005b      	lsls	r3, r3, #1
 801c442:	fa02 f303 	lsl.w	r3, r2, r3
 801c446:	69ba      	ldr	r2, [r7, #24]
 801c448:	4313      	orrs	r3, r2
 801c44a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	69ba      	ldr	r2, [r7, #24]
 801c450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801c452:	683b      	ldr	r3, [r7, #0]
 801c454:	685b      	ldr	r3, [r3, #4]
 801c456:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	f000 80e0 	beq.w	801c620 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c460:	4b2f      	ldr	r3, [pc, #188]	@ (801c520 <HAL_GPIO_Init+0x238>)
 801c462:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801c466:	4a2e      	ldr	r2, [pc, #184]	@ (801c520 <HAL_GPIO_Init+0x238>)
 801c468:	f043 0302 	orr.w	r3, r3, #2
 801c46c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801c470:	4b2b      	ldr	r3, [pc, #172]	@ (801c520 <HAL_GPIO_Init+0x238>)
 801c472:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801c476:	f003 0302 	and.w	r3, r3, #2
 801c47a:	60fb      	str	r3, [r7, #12]
 801c47c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801c47e:	4a29      	ldr	r2, [pc, #164]	@ (801c524 <HAL_GPIO_Init+0x23c>)
 801c480:	69fb      	ldr	r3, [r7, #28]
 801c482:	089b      	lsrs	r3, r3, #2
 801c484:	3302      	adds	r3, #2
 801c486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c48a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801c48c:	69fb      	ldr	r3, [r7, #28]
 801c48e:	f003 0303 	and.w	r3, r3, #3
 801c492:	009b      	lsls	r3, r3, #2
 801c494:	220f      	movs	r2, #15
 801c496:	fa02 f303 	lsl.w	r3, r2, r3
 801c49a:	43db      	mvns	r3, r3
 801c49c:	69ba      	ldr	r2, [r7, #24]
 801c49e:	4013      	ands	r3, r2
 801c4a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	4a20      	ldr	r2, [pc, #128]	@ (801c528 <HAL_GPIO_Init+0x240>)
 801c4a6:	4293      	cmp	r3, r2
 801c4a8:	d052      	beq.n	801c550 <HAL_GPIO_Init+0x268>
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	4a1f      	ldr	r2, [pc, #124]	@ (801c52c <HAL_GPIO_Init+0x244>)
 801c4ae:	4293      	cmp	r3, r2
 801c4b0:	d031      	beq.n	801c516 <HAL_GPIO_Init+0x22e>
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	4a1e      	ldr	r2, [pc, #120]	@ (801c530 <HAL_GPIO_Init+0x248>)
 801c4b6:	4293      	cmp	r3, r2
 801c4b8:	d02b      	beq.n	801c512 <HAL_GPIO_Init+0x22a>
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	4a1d      	ldr	r2, [pc, #116]	@ (801c534 <HAL_GPIO_Init+0x24c>)
 801c4be:	4293      	cmp	r3, r2
 801c4c0:	d025      	beq.n	801c50e <HAL_GPIO_Init+0x226>
 801c4c2:	687b      	ldr	r3, [r7, #4]
 801c4c4:	4a1c      	ldr	r2, [pc, #112]	@ (801c538 <HAL_GPIO_Init+0x250>)
 801c4c6:	4293      	cmp	r3, r2
 801c4c8:	d01f      	beq.n	801c50a <HAL_GPIO_Init+0x222>
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	4a1b      	ldr	r2, [pc, #108]	@ (801c53c <HAL_GPIO_Init+0x254>)
 801c4ce:	4293      	cmp	r3, r2
 801c4d0:	d019      	beq.n	801c506 <HAL_GPIO_Init+0x21e>
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	4a1a      	ldr	r2, [pc, #104]	@ (801c540 <HAL_GPIO_Init+0x258>)
 801c4d6:	4293      	cmp	r3, r2
 801c4d8:	d013      	beq.n	801c502 <HAL_GPIO_Init+0x21a>
 801c4da:	687b      	ldr	r3, [r7, #4]
 801c4dc:	4a19      	ldr	r2, [pc, #100]	@ (801c544 <HAL_GPIO_Init+0x25c>)
 801c4de:	4293      	cmp	r3, r2
 801c4e0:	d00d      	beq.n	801c4fe <HAL_GPIO_Init+0x216>
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	4a18      	ldr	r2, [pc, #96]	@ (801c548 <HAL_GPIO_Init+0x260>)
 801c4e6:	4293      	cmp	r3, r2
 801c4e8:	d007      	beq.n	801c4fa <HAL_GPIO_Init+0x212>
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	4a17      	ldr	r2, [pc, #92]	@ (801c54c <HAL_GPIO_Init+0x264>)
 801c4ee:	4293      	cmp	r3, r2
 801c4f0:	d101      	bne.n	801c4f6 <HAL_GPIO_Init+0x20e>
 801c4f2:	2309      	movs	r3, #9
 801c4f4:	e02d      	b.n	801c552 <HAL_GPIO_Init+0x26a>
 801c4f6:	230a      	movs	r3, #10
 801c4f8:	e02b      	b.n	801c552 <HAL_GPIO_Init+0x26a>
 801c4fa:	2308      	movs	r3, #8
 801c4fc:	e029      	b.n	801c552 <HAL_GPIO_Init+0x26a>
 801c4fe:	2307      	movs	r3, #7
 801c500:	e027      	b.n	801c552 <HAL_GPIO_Init+0x26a>
 801c502:	2306      	movs	r3, #6
 801c504:	e025      	b.n	801c552 <HAL_GPIO_Init+0x26a>
 801c506:	2305      	movs	r3, #5
 801c508:	e023      	b.n	801c552 <HAL_GPIO_Init+0x26a>
 801c50a:	2304      	movs	r3, #4
 801c50c:	e021      	b.n	801c552 <HAL_GPIO_Init+0x26a>
 801c50e:	2303      	movs	r3, #3
 801c510:	e01f      	b.n	801c552 <HAL_GPIO_Init+0x26a>
 801c512:	2302      	movs	r3, #2
 801c514:	e01d      	b.n	801c552 <HAL_GPIO_Init+0x26a>
 801c516:	2301      	movs	r3, #1
 801c518:	e01b      	b.n	801c552 <HAL_GPIO_Init+0x26a>
 801c51a:	bf00      	nop
 801c51c:	58000080 	.word	0x58000080
 801c520:	58024400 	.word	0x58024400
 801c524:	58000400 	.word	0x58000400
 801c528:	58020000 	.word	0x58020000
 801c52c:	58020400 	.word	0x58020400
 801c530:	58020800 	.word	0x58020800
 801c534:	58020c00 	.word	0x58020c00
 801c538:	58021000 	.word	0x58021000
 801c53c:	58021400 	.word	0x58021400
 801c540:	58021800 	.word	0x58021800
 801c544:	58021c00 	.word	0x58021c00
 801c548:	58022000 	.word	0x58022000
 801c54c:	58022400 	.word	0x58022400
 801c550:	2300      	movs	r3, #0
 801c552:	69fa      	ldr	r2, [r7, #28]
 801c554:	f002 0203 	and.w	r2, r2, #3
 801c558:	0092      	lsls	r2, r2, #2
 801c55a:	4093      	lsls	r3, r2
 801c55c:	69ba      	ldr	r2, [r7, #24]
 801c55e:	4313      	orrs	r3, r2
 801c560:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801c562:	4938      	ldr	r1, [pc, #224]	@ (801c644 <HAL_GPIO_Init+0x35c>)
 801c564:	69fb      	ldr	r3, [r7, #28]
 801c566:	089b      	lsrs	r3, r3, #2
 801c568:	3302      	adds	r3, #2
 801c56a:	69ba      	ldr	r2, [r7, #24]
 801c56c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801c570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c574:	681b      	ldr	r3, [r3, #0]
 801c576:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c578:	693b      	ldr	r3, [r7, #16]
 801c57a:	43db      	mvns	r3, r3
 801c57c:	69ba      	ldr	r2, [r7, #24]
 801c57e:	4013      	ands	r3, r2
 801c580:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801c582:	683b      	ldr	r3, [r7, #0]
 801c584:	685b      	ldr	r3, [r3, #4]
 801c586:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	d003      	beq.n	801c596 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801c58e:	69ba      	ldr	r2, [r7, #24]
 801c590:	693b      	ldr	r3, [r7, #16]
 801c592:	4313      	orrs	r3, r2
 801c594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801c596:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801c59a:	69bb      	ldr	r3, [r7, #24]
 801c59c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801c59e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c5a2:	685b      	ldr	r3, [r3, #4]
 801c5a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c5a6:	693b      	ldr	r3, [r7, #16]
 801c5a8:	43db      	mvns	r3, r3
 801c5aa:	69ba      	ldr	r2, [r7, #24]
 801c5ac:	4013      	ands	r3, r2
 801c5ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801c5b0:	683b      	ldr	r3, [r7, #0]
 801c5b2:	685b      	ldr	r3, [r3, #4]
 801c5b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d003      	beq.n	801c5c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801c5bc:	69ba      	ldr	r2, [r7, #24]
 801c5be:	693b      	ldr	r3, [r7, #16]
 801c5c0:	4313      	orrs	r3, r2
 801c5c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801c5c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801c5c8:	69bb      	ldr	r3, [r7, #24]
 801c5ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801c5cc:	697b      	ldr	r3, [r7, #20]
 801c5ce:	685b      	ldr	r3, [r3, #4]
 801c5d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c5d2:	693b      	ldr	r3, [r7, #16]
 801c5d4:	43db      	mvns	r3, r3
 801c5d6:	69ba      	ldr	r2, [r7, #24]
 801c5d8:	4013      	ands	r3, r2
 801c5da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801c5dc:	683b      	ldr	r3, [r7, #0]
 801c5de:	685b      	ldr	r3, [r3, #4]
 801c5e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d003      	beq.n	801c5f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801c5e8:	69ba      	ldr	r2, [r7, #24]
 801c5ea:	693b      	ldr	r3, [r7, #16]
 801c5ec:	4313      	orrs	r3, r2
 801c5ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801c5f0:	697b      	ldr	r3, [r7, #20]
 801c5f2:	69ba      	ldr	r2, [r7, #24]
 801c5f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801c5f6:	697b      	ldr	r3, [r7, #20]
 801c5f8:	681b      	ldr	r3, [r3, #0]
 801c5fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c5fc:	693b      	ldr	r3, [r7, #16]
 801c5fe:	43db      	mvns	r3, r3
 801c600:	69ba      	ldr	r2, [r7, #24]
 801c602:	4013      	ands	r3, r2
 801c604:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801c606:	683b      	ldr	r3, [r7, #0]
 801c608:	685b      	ldr	r3, [r3, #4]
 801c60a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c60e:	2b00      	cmp	r3, #0
 801c610:	d003      	beq.n	801c61a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801c612:	69ba      	ldr	r2, [r7, #24]
 801c614:	693b      	ldr	r3, [r7, #16]
 801c616:	4313      	orrs	r3, r2
 801c618:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801c61a:	697b      	ldr	r3, [r7, #20]
 801c61c:	69ba      	ldr	r2, [r7, #24]
 801c61e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801c620:	69fb      	ldr	r3, [r7, #28]
 801c622:	3301      	adds	r3, #1
 801c624:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801c626:	683b      	ldr	r3, [r7, #0]
 801c628:	681a      	ldr	r2, [r3, #0]
 801c62a:	69fb      	ldr	r3, [r7, #28]
 801c62c:	fa22 f303 	lsr.w	r3, r2, r3
 801c630:	2b00      	cmp	r3, #0
 801c632:	f47f ae63 	bne.w	801c2fc <HAL_GPIO_Init+0x14>
  }
}
 801c636:	bf00      	nop
 801c638:	bf00      	nop
 801c63a:	3724      	adds	r7, #36	@ 0x24
 801c63c:	46bd      	mov	sp, r7
 801c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c642:	4770      	bx	lr
 801c644:	58000400 	.word	0x58000400

0801c648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801c648:	b480      	push	{r7}
 801c64a:	b083      	sub	sp, #12
 801c64c:	af00      	add	r7, sp, #0
 801c64e:	6078      	str	r0, [r7, #4]
 801c650:	460b      	mov	r3, r1
 801c652:	807b      	strh	r3, [r7, #2]
 801c654:	4613      	mov	r3, r2
 801c656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801c658:	787b      	ldrb	r3, [r7, #1]
 801c65a:	2b00      	cmp	r3, #0
 801c65c:	d003      	beq.n	801c666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801c65e:	887a      	ldrh	r2, [r7, #2]
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801c664:	e003      	b.n	801c66e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801c666:	887b      	ldrh	r3, [r7, #2]
 801c668:	041a      	lsls	r2, r3, #16
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	619a      	str	r2, [r3, #24]
}
 801c66e:	bf00      	nop
 801c670:	370c      	adds	r7, #12
 801c672:	46bd      	mov	sp, r7
 801c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c678:	4770      	bx	lr
	...

0801c67c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801c67c:	b580      	push	{r7, lr}
 801c67e:	b082      	sub	sp, #8
 801c680:	af00      	add	r7, sp, #0
 801c682:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	2b00      	cmp	r3, #0
 801c688:	d101      	bne.n	801c68e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801c68a:	2301      	movs	r3, #1
 801c68c:	e08b      	b.n	801c7a6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801c694:	b2db      	uxtb	r3, r3
 801c696:	2b00      	cmp	r3, #0
 801c698:	d106      	bne.n	801c6a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	2200      	movs	r2, #0
 801c69e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801c6a2:	6878      	ldr	r0, [r7, #4]
 801c6a4:	f7e5 fe2a 	bl	80022fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	2224      	movs	r2, #36	@ 0x24
 801c6ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	681b      	ldr	r3, [r3, #0]
 801c6b4:	681a      	ldr	r2, [r3, #0]
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	681b      	ldr	r3, [r3, #0]
 801c6ba:	f022 0201 	bic.w	r2, r2, #1
 801c6be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801c6c0:	687b      	ldr	r3, [r7, #4]
 801c6c2:	685a      	ldr	r2, [r3, #4]
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 801c6cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	689a      	ldr	r2, [r3, #8]
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	681b      	ldr	r3, [r3, #0]
 801c6d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801c6dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	68db      	ldr	r3, [r3, #12]
 801c6e2:	2b01      	cmp	r3, #1
 801c6e4:	d107      	bne.n	801c6f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	689a      	ldr	r2, [r3, #8]
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801c6f2:	609a      	str	r2, [r3, #8]
 801c6f4:	e006      	b.n	801c704 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	689a      	ldr	r2, [r3, #8]
 801c6fa:	687b      	ldr	r3, [r7, #4]
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 801c702:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	68db      	ldr	r3, [r3, #12]
 801c708:	2b02      	cmp	r3, #2
 801c70a:	d108      	bne.n	801c71e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801c70c:	687b      	ldr	r3, [r7, #4]
 801c70e:	681b      	ldr	r3, [r3, #0]
 801c710:	685a      	ldr	r2, [r3, #4]
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	681b      	ldr	r3, [r3, #0]
 801c716:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801c71a:	605a      	str	r2, [r3, #4]
 801c71c:	e007      	b.n	801c72e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801c71e:	687b      	ldr	r3, [r7, #4]
 801c720:	681b      	ldr	r3, [r3, #0]
 801c722:	685a      	ldr	r2, [r3, #4]
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	681b      	ldr	r3, [r3, #0]
 801c728:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801c72c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	681b      	ldr	r3, [r3, #0]
 801c732:	6859      	ldr	r1, [r3, #4]
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	681a      	ldr	r2, [r3, #0]
 801c738:	4b1d      	ldr	r3, [pc, #116]	@ (801c7b0 <HAL_I2C_Init+0x134>)
 801c73a:	430b      	orrs	r3, r1
 801c73c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	681b      	ldr	r3, [r3, #0]
 801c742:	68da      	ldr	r2, [r3, #12]
 801c744:	687b      	ldr	r3, [r7, #4]
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801c74c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	691a      	ldr	r2, [r3, #16]
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	695b      	ldr	r3, [r3, #20]
 801c756:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801c75a:	687b      	ldr	r3, [r7, #4]
 801c75c:	699b      	ldr	r3, [r3, #24]
 801c75e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	681b      	ldr	r3, [r3, #0]
 801c764:	430a      	orrs	r2, r1
 801c766:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	69d9      	ldr	r1, [r3, #28]
 801c76c:	687b      	ldr	r3, [r7, #4]
 801c76e:	6a1a      	ldr	r2, [r3, #32]
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	430a      	orrs	r2, r1
 801c776:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	681b      	ldr	r3, [r3, #0]
 801c77c:	681a      	ldr	r2, [r3, #0]
 801c77e:	687b      	ldr	r3, [r7, #4]
 801c780:	681b      	ldr	r3, [r3, #0]
 801c782:	f042 0201 	orr.w	r2, r2, #1
 801c786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	2200      	movs	r2, #0
 801c78c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801c78e:	687b      	ldr	r3, [r7, #4]
 801c790:	2220      	movs	r2, #32
 801c792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801c796:	687b      	ldr	r3, [r7, #4]
 801c798:	2200      	movs	r2, #0
 801c79a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	2200      	movs	r2, #0
 801c7a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 801c7a4:	2300      	movs	r3, #0
}
 801c7a6:	4618      	mov	r0, r3
 801c7a8:	3708      	adds	r7, #8
 801c7aa:	46bd      	mov	sp, r7
 801c7ac:	bd80      	pop	{r7, pc}
 801c7ae:	bf00      	nop
 801c7b0:	02008000 	.word	0x02008000

0801c7b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801c7b4:	b480      	push	{r7}
 801c7b6:	b083      	sub	sp, #12
 801c7b8:	af00      	add	r7, sp, #0
 801c7ba:	6078      	str	r0, [r7, #4]
 801c7bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801c7c4:	b2db      	uxtb	r3, r3
 801c7c6:	2b20      	cmp	r3, #32
 801c7c8:	d138      	bne.n	801c83c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c7ca:	687b      	ldr	r3, [r7, #4]
 801c7cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801c7d0:	2b01      	cmp	r3, #1
 801c7d2:	d101      	bne.n	801c7d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801c7d4:	2302      	movs	r3, #2
 801c7d6:	e032      	b.n	801c83e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801c7d8:	687b      	ldr	r3, [r7, #4]
 801c7da:	2201      	movs	r2, #1
 801c7dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	2224      	movs	r2, #36	@ 0x24
 801c7e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801c7e8:	687b      	ldr	r3, [r7, #4]
 801c7ea:	681b      	ldr	r3, [r3, #0]
 801c7ec:	681a      	ldr	r2, [r3, #0]
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	681b      	ldr	r3, [r3, #0]
 801c7f2:	f022 0201 	bic.w	r2, r2, #1
 801c7f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	681a      	ldr	r2, [r3, #0]
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	681b      	ldr	r3, [r3, #0]
 801c802:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801c806:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	681b      	ldr	r3, [r3, #0]
 801c80c:	6819      	ldr	r1, [r3, #0]
 801c80e:	687b      	ldr	r3, [r7, #4]
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	683a      	ldr	r2, [r7, #0]
 801c814:	430a      	orrs	r2, r1
 801c816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	681b      	ldr	r3, [r3, #0]
 801c81c:	681a      	ldr	r2, [r3, #0]
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	681b      	ldr	r3, [r3, #0]
 801c822:	f042 0201 	orr.w	r2, r2, #1
 801c826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	2220      	movs	r2, #32
 801c82c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c830:	687b      	ldr	r3, [r7, #4]
 801c832:	2200      	movs	r2, #0
 801c834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801c838:	2300      	movs	r3, #0
 801c83a:	e000      	b.n	801c83e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801c83c:	2302      	movs	r3, #2
  }
}
 801c83e:	4618      	mov	r0, r3
 801c840:	370c      	adds	r7, #12
 801c842:	46bd      	mov	sp, r7
 801c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c848:	4770      	bx	lr

0801c84a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801c84a:	b480      	push	{r7}
 801c84c:	b085      	sub	sp, #20
 801c84e:	af00      	add	r7, sp, #0
 801c850:	6078      	str	r0, [r7, #4]
 801c852:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c854:	687b      	ldr	r3, [r7, #4]
 801c856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801c85a:	b2db      	uxtb	r3, r3
 801c85c:	2b20      	cmp	r3, #32
 801c85e:	d139      	bne.n	801c8d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c860:	687b      	ldr	r3, [r7, #4]
 801c862:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801c866:	2b01      	cmp	r3, #1
 801c868:	d101      	bne.n	801c86e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801c86a:	2302      	movs	r3, #2
 801c86c:	e033      	b.n	801c8d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	2201      	movs	r2, #1
 801c872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801c876:	687b      	ldr	r3, [r7, #4]
 801c878:	2224      	movs	r2, #36	@ 0x24
 801c87a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	681b      	ldr	r3, [r3, #0]
 801c882:	681a      	ldr	r2, [r3, #0]
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	681b      	ldr	r3, [r3, #0]
 801c888:	f022 0201 	bic.w	r2, r2, #1
 801c88c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	681b      	ldr	r3, [r3, #0]
 801c892:	681b      	ldr	r3, [r3, #0]
 801c894:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801c896:	68fb      	ldr	r3, [r7, #12]
 801c898:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801c89c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801c89e:	683b      	ldr	r3, [r7, #0]
 801c8a0:	021b      	lsls	r3, r3, #8
 801c8a2:	68fa      	ldr	r2, [r7, #12]
 801c8a4:	4313      	orrs	r3, r2
 801c8a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	681b      	ldr	r3, [r3, #0]
 801c8ac:	68fa      	ldr	r2, [r7, #12]
 801c8ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801c8b0:	687b      	ldr	r3, [r7, #4]
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	681a      	ldr	r2, [r3, #0]
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	681b      	ldr	r3, [r3, #0]
 801c8ba:	f042 0201 	orr.w	r2, r2, #1
 801c8be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	2220      	movs	r2, #32
 801c8c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	2200      	movs	r2, #0
 801c8cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801c8d0:	2300      	movs	r3, #0
 801c8d2:	e000      	b.n	801c8d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801c8d4:	2302      	movs	r3, #2
  }
}
 801c8d6:	4618      	mov	r0, r3
 801c8d8:	3714      	adds	r7, #20
 801c8da:	46bd      	mov	sp, r7
 801c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8e0:	4770      	bx	lr
	...

0801c8e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801c8e4:	b580      	push	{r7, lr}
 801c8e6:	b084      	sub	sp, #16
 801c8e8:	af00      	add	r7, sp, #0
 801c8ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801c8ec:	4b19      	ldr	r3, [pc, #100]	@ (801c954 <HAL_PWREx_ConfigSupply+0x70>)
 801c8ee:	68db      	ldr	r3, [r3, #12]
 801c8f0:	f003 0304 	and.w	r3, r3, #4
 801c8f4:	2b04      	cmp	r3, #4
 801c8f6:	d00a      	beq.n	801c90e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801c8f8:	4b16      	ldr	r3, [pc, #88]	@ (801c954 <HAL_PWREx_ConfigSupply+0x70>)
 801c8fa:	68db      	ldr	r3, [r3, #12]
 801c8fc:	f003 0307 	and.w	r3, r3, #7
 801c900:	687a      	ldr	r2, [r7, #4]
 801c902:	429a      	cmp	r2, r3
 801c904:	d001      	beq.n	801c90a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801c906:	2301      	movs	r3, #1
 801c908:	e01f      	b.n	801c94a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801c90a:	2300      	movs	r3, #0
 801c90c:	e01d      	b.n	801c94a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801c90e:	4b11      	ldr	r3, [pc, #68]	@ (801c954 <HAL_PWREx_ConfigSupply+0x70>)
 801c910:	68db      	ldr	r3, [r3, #12]
 801c912:	f023 0207 	bic.w	r2, r3, #7
 801c916:	490f      	ldr	r1, [pc, #60]	@ (801c954 <HAL_PWREx_ConfigSupply+0x70>)
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	4313      	orrs	r3, r2
 801c91c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801c91e:	f7fd fc03 	bl	801a128 <HAL_GetTick>
 801c922:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c924:	e009      	b.n	801c93a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801c926:	f7fd fbff 	bl	801a128 <HAL_GetTick>
 801c92a:	4602      	mov	r2, r0
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	1ad3      	subs	r3, r2, r3
 801c930:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c934:	d901      	bls.n	801c93a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801c936:	2301      	movs	r3, #1
 801c938:	e007      	b.n	801c94a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c93a:	4b06      	ldr	r3, [pc, #24]	@ (801c954 <HAL_PWREx_ConfigSupply+0x70>)
 801c93c:	685b      	ldr	r3, [r3, #4]
 801c93e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c946:	d1ee      	bne.n	801c926 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801c948:	2300      	movs	r3, #0
}
 801c94a:	4618      	mov	r0, r3
 801c94c:	3710      	adds	r7, #16
 801c94e:	46bd      	mov	sp, r7
 801c950:	bd80      	pop	{r7, pc}
 801c952:	bf00      	nop
 801c954:	58024800 	.word	0x58024800

0801c958 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c958:	b580      	push	{r7, lr}
 801c95a:	b08c      	sub	sp, #48	@ 0x30
 801c95c:	af00      	add	r7, sp, #0
 801c95e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	2b00      	cmp	r3, #0
 801c964:	d102      	bne.n	801c96c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801c966:	2301      	movs	r3, #1
 801c968:	f000 bc48 	b.w	801d1fc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c96c:	687b      	ldr	r3, [r7, #4]
 801c96e:	681b      	ldr	r3, [r3, #0]
 801c970:	f003 0301 	and.w	r3, r3, #1
 801c974:	2b00      	cmp	r3, #0
 801c976:	f000 8088 	beq.w	801ca8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c97a:	4b99      	ldr	r3, [pc, #612]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801c97c:	691b      	ldr	r3, [r3, #16]
 801c97e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c982:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c984:	4b96      	ldr	r3, [pc, #600]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801c986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c988:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801c98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c98c:	2b10      	cmp	r3, #16
 801c98e:	d007      	beq.n	801c9a0 <HAL_RCC_OscConfig+0x48>
 801c990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c992:	2b18      	cmp	r3, #24
 801c994:	d111      	bne.n	801c9ba <HAL_RCC_OscConfig+0x62>
 801c996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c998:	f003 0303 	and.w	r3, r3, #3
 801c99c:	2b02      	cmp	r3, #2
 801c99e:	d10c      	bne.n	801c9ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c9a0:	4b8f      	ldr	r3, [pc, #572]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801c9a2:	681b      	ldr	r3, [r3, #0]
 801c9a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d06d      	beq.n	801ca88 <HAL_RCC_OscConfig+0x130>
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	685b      	ldr	r3, [r3, #4]
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d169      	bne.n	801ca88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801c9b4:	2301      	movs	r3, #1
 801c9b6:	f000 bc21 	b.w	801d1fc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	685b      	ldr	r3, [r3, #4]
 801c9be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c9c2:	d106      	bne.n	801c9d2 <HAL_RCC_OscConfig+0x7a>
 801c9c4:	4b86      	ldr	r3, [pc, #536]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	4a85      	ldr	r2, [pc, #532]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801c9ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c9ce:	6013      	str	r3, [r2, #0]
 801c9d0:	e02e      	b.n	801ca30 <HAL_RCC_OscConfig+0xd8>
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	685b      	ldr	r3, [r3, #4]
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d10c      	bne.n	801c9f4 <HAL_RCC_OscConfig+0x9c>
 801c9da:	4b81      	ldr	r3, [pc, #516]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	4a80      	ldr	r2, [pc, #512]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801c9e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c9e4:	6013      	str	r3, [r2, #0]
 801c9e6:	4b7e      	ldr	r3, [pc, #504]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	4a7d      	ldr	r2, [pc, #500]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801c9ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c9f0:	6013      	str	r3, [r2, #0]
 801c9f2:	e01d      	b.n	801ca30 <HAL_RCC_OscConfig+0xd8>
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	685b      	ldr	r3, [r3, #4]
 801c9f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801c9fc:	d10c      	bne.n	801ca18 <HAL_RCC_OscConfig+0xc0>
 801c9fe:	4b78      	ldr	r3, [pc, #480]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	4a77      	ldr	r2, [pc, #476]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801ca04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801ca08:	6013      	str	r3, [r2, #0]
 801ca0a:	4b75      	ldr	r3, [pc, #468]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801ca0c:	681b      	ldr	r3, [r3, #0]
 801ca0e:	4a74      	ldr	r2, [pc, #464]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801ca10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ca14:	6013      	str	r3, [r2, #0]
 801ca16:	e00b      	b.n	801ca30 <HAL_RCC_OscConfig+0xd8>
 801ca18:	4b71      	ldr	r3, [pc, #452]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801ca1a:	681b      	ldr	r3, [r3, #0]
 801ca1c:	4a70      	ldr	r2, [pc, #448]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801ca1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ca22:	6013      	str	r3, [r2, #0]
 801ca24:	4b6e      	ldr	r3, [pc, #440]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801ca26:	681b      	ldr	r3, [r3, #0]
 801ca28:	4a6d      	ldr	r2, [pc, #436]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801ca2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801ca2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	685b      	ldr	r3, [r3, #4]
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d013      	beq.n	801ca60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ca38:	f7fd fb76 	bl	801a128 <HAL_GetTick>
 801ca3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ca3e:	e008      	b.n	801ca52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801ca40:	f7fd fb72 	bl	801a128 <HAL_GetTick>
 801ca44:	4602      	mov	r2, r0
 801ca46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca48:	1ad3      	subs	r3, r2, r3
 801ca4a:	2b64      	cmp	r3, #100	@ 0x64
 801ca4c:	d901      	bls.n	801ca52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801ca4e:	2303      	movs	r3, #3
 801ca50:	e3d4      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ca52:	4b63      	ldr	r3, [pc, #396]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801ca54:	681b      	ldr	r3, [r3, #0]
 801ca56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	d0f0      	beq.n	801ca40 <HAL_RCC_OscConfig+0xe8>
 801ca5e:	e014      	b.n	801ca8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ca60:	f7fd fb62 	bl	801a128 <HAL_GetTick>
 801ca64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801ca66:	e008      	b.n	801ca7a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801ca68:	f7fd fb5e 	bl	801a128 <HAL_GetTick>
 801ca6c:	4602      	mov	r2, r0
 801ca6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca70:	1ad3      	subs	r3, r2, r3
 801ca72:	2b64      	cmp	r3, #100	@ 0x64
 801ca74:	d901      	bls.n	801ca7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801ca76:	2303      	movs	r3, #3
 801ca78:	e3c0      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801ca7a:	4b59      	ldr	r3, [pc, #356]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d1f0      	bne.n	801ca68 <HAL_RCC_OscConfig+0x110>
 801ca86:	e000      	b.n	801ca8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801ca88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	681b      	ldr	r3, [r3, #0]
 801ca8e:	f003 0302 	and.w	r3, r3, #2
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	f000 80ca 	beq.w	801cc2c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ca98:	4b51      	ldr	r3, [pc, #324]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801ca9a:	691b      	ldr	r3, [r3, #16]
 801ca9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801caa0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801caa2:	4b4f      	ldr	r3, [pc, #316]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801caa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801caa6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801caa8:	6a3b      	ldr	r3, [r7, #32]
 801caaa:	2b00      	cmp	r3, #0
 801caac:	d007      	beq.n	801cabe <HAL_RCC_OscConfig+0x166>
 801caae:	6a3b      	ldr	r3, [r7, #32]
 801cab0:	2b18      	cmp	r3, #24
 801cab2:	d156      	bne.n	801cb62 <HAL_RCC_OscConfig+0x20a>
 801cab4:	69fb      	ldr	r3, [r7, #28]
 801cab6:	f003 0303 	and.w	r3, r3, #3
 801caba:	2b00      	cmp	r3, #0
 801cabc:	d151      	bne.n	801cb62 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801cabe:	4b48      	ldr	r3, [pc, #288]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801cac0:	681b      	ldr	r3, [r3, #0]
 801cac2:	f003 0304 	and.w	r3, r3, #4
 801cac6:	2b00      	cmp	r3, #0
 801cac8:	d005      	beq.n	801cad6 <HAL_RCC_OscConfig+0x17e>
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	68db      	ldr	r3, [r3, #12]
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d101      	bne.n	801cad6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801cad2:	2301      	movs	r3, #1
 801cad4:	e392      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801cad6:	4b42      	ldr	r3, [pc, #264]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801cad8:	681b      	ldr	r3, [r3, #0]
 801cada:	f023 0219 	bic.w	r2, r3, #25
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	68db      	ldr	r3, [r3, #12]
 801cae2:	493f      	ldr	r1, [pc, #252]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801cae4:	4313      	orrs	r3, r2
 801cae6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cae8:	f7fd fb1e 	bl	801a128 <HAL_GetTick>
 801caec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801caee:	e008      	b.n	801cb02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801caf0:	f7fd fb1a 	bl	801a128 <HAL_GetTick>
 801caf4:	4602      	mov	r2, r0
 801caf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801caf8:	1ad3      	subs	r3, r2, r3
 801cafa:	2b02      	cmp	r3, #2
 801cafc:	d901      	bls.n	801cb02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801cafe:	2303      	movs	r3, #3
 801cb00:	e37c      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801cb02:	4b37      	ldr	r3, [pc, #220]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801cb04:	681b      	ldr	r3, [r3, #0]
 801cb06:	f003 0304 	and.w	r3, r3, #4
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d0f0      	beq.n	801caf0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801cb0e:	f7fd fb3b 	bl	801a188 <HAL_GetREVID>
 801cb12:	4603      	mov	r3, r0
 801cb14:	f241 0203 	movw	r2, #4099	@ 0x1003
 801cb18:	4293      	cmp	r3, r2
 801cb1a:	d817      	bhi.n	801cb4c <HAL_RCC_OscConfig+0x1f4>
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	691b      	ldr	r3, [r3, #16]
 801cb20:	2b40      	cmp	r3, #64	@ 0x40
 801cb22:	d108      	bne.n	801cb36 <HAL_RCC_OscConfig+0x1de>
 801cb24:	4b2e      	ldr	r3, [pc, #184]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801cb26:	685b      	ldr	r3, [r3, #4]
 801cb28:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801cb2c:	4a2c      	ldr	r2, [pc, #176]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801cb2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cb32:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801cb34:	e07a      	b.n	801cc2c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801cb36:	4b2a      	ldr	r3, [pc, #168]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801cb38:	685b      	ldr	r3, [r3, #4]
 801cb3a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	691b      	ldr	r3, [r3, #16]
 801cb42:	031b      	lsls	r3, r3, #12
 801cb44:	4926      	ldr	r1, [pc, #152]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801cb46:	4313      	orrs	r3, r2
 801cb48:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801cb4a:	e06f      	b.n	801cc2c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801cb4c:	4b24      	ldr	r3, [pc, #144]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801cb4e:	685b      	ldr	r3, [r3, #4]
 801cb50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	691b      	ldr	r3, [r3, #16]
 801cb58:	061b      	lsls	r3, r3, #24
 801cb5a:	4921      	ldr	r1, [pc, #132]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801cb5c:	4313      	orrs	r3, r2
 801cb5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801cb60:	e064      	b.n	801cc2c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	68db      	ldr	r3, [r3, #12]
 801cb66:	2b00      	cmp	r3, #0
 801cb68:	d047      	beq.n	801cbfa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801cb6a:	4b1d      	ldr	r3, [pc, #116]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	f023 0219 	bic.w	r2, r3, #25
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	68db      	ldr	r3, [r3, #12]
 801cb76:	491a      	ldr	r1, [pc, #104]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801cb78:	4313      	orrs	r3, r2
 801cb7a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cb7c:	f7fd fad4 	bl	801a128 <HAL_GetTick>
 801cb80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801cb82:	e008      	b.n	801cb96 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801cb84:	f7fd fad0 	bl	801a128 <HAL_GetTick>
 801cb88:	4602      	mov	r2, r0
 801cb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb8c:	1ad3      	subs	r3, r2, r3
 801cb8e:	2b02      	cmp	r3, #2
 801cb90:	d901      	bls.n	801cb96 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801cb92:	2303      	movs	r3, #3
 801cb94:	e332      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801cb96:	4b12      	ldr	r3, [pc, #72]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801cb98:	681b      	ldr	r3, [r3, #0]
 801cb9a:	f003 0304 	and.w	r3, r3, #4
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d0f0      	beq.n	801cb84 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801cba2:	f7fd faf1 	bl	801a188 <HAL_GetREVID>
 801cba6:	4603      	mov	r3, r0
 801cba8:	f241 0203 	movw	r2, #4099	@ 0x1003
 801cbac:	4293      	cmp	r3, r2
 801cbae:	d819      	bhi.n	801cbe4 <HAL_RCC_OscConfig+0x28c>
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	691b      	ldr	r3, [r3, #16]
 801cbb4:	2b40      	cmp	r3, #64	@ 0x40
 801cbb6:	d108      	bne.n	801cbca <HAL_RCC_OscConfig+0x272>
 801cbb8:	4b09      	ldr	r3, [pc, #36]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801cbba:	685b      	ldr	r3, [r3, #4]
 801cbbc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801cbc0:	4a07      	ldr	r2, [pc, #28]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801cbc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cbc6:	6053      	str	r3, [r2, #4]
 801cbc8:	e030      	b.n	801cc2c <HAL_RCC_OscConfig+0x2d4>
 801cbca:	4b05      	ldr	r3, [pc, #20]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801cbcc:	685b      	ldr	r3, [r3, #4]
 801cbce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	691b      	ldr	r3, [r3, #16]
 801cbd6:	031b      	lsls	r3, r3, #12
 801cbd8:	4901      	ldr	r1, [pc, #4]	@ (801cbe0 <HAL_RCC_OscConfig+0x288>)
 801cbda:	4313      	orrs	r3, r2
 801cbdc:	604b      	str	r3, [r1, #4]
 801cbde:	e025      	b.n	801cc2c <HAL_RCC_OscConfig+0x2d4>
 801cbe0:	58024400 	.word	0x58024400
 801cbe4:	4b9a      	ldr	r3, [pc, #616]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cbe6:	685b      	ldr	r3, [r3, #4]
 801cbe8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	691b      	ldr	r3, [r3, #16]
 801cbf0:	061b      	lsls	r3, r3, #24
 801cbf2:	4997      	ldr	r1, [pc, #604]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cbf4:	4313      	orrs	r3, r2
 801cbf6:	604b      	str	r3, [r1, #4]
 801cbf8:	e018      	b.n	801cc2c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801cbfa:	4b95      	ldr	r3, [pc, #596]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cbfc:	681b      	ldr	r3, [r3, #0]
 801cbfe:	4a94      	ldr	r2, [pc, #592]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cc00:	f023 0301 	bic.w	r3, r3, #1
 801cc04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cc06:	f7fd fa8f 	bl	801a128 <HAL_GetTick>
 801cc0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801cc0c:	e008      	b.n	801cc20 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801cc0e:	f7fd fa8b 	bl	801a128 <HAL_GetTick>
 801cc12:	4602      	mov	r2, r0
 801cc14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc16:	1ad3      	subs	r3, r2, r3
 801cc18:	2b02      	cmp	r3, #2
 801cc1a:	d901      	bls.n	801cc20 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801cc1c:	2303      	movs	r3, #3
 801cc1e:	e2ed      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801cc20:	4b8b      	ldr	r3, [pc, #556]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	f003 0304 	and.w	r3, r3, #4
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d1f0      	bne.n	801cc0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	f003 0310 	and.w	r3, r3, #16
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	f000 80a9 	beq.w	801cd8c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801cc3a:	4b85      	ldr	r3, [pc, #532]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cc3c:	691b      	ldr	r3, [r3, #16]
 801cc3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801cc42:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801cc44:	4b82      	ldr	r3, [pc, #520]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cc46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cc48:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801cc4a:	69bb      	ldr	r3, [r7, #24]
 801cc4c:	2b08      	cmp	r3, #8
 801cc4e:	d007      	beq.n	801cc60 <HAL_RCC_OscConfig+0x308>
 801cc50:	69bb      	ldr	r3, [r7, #24]
 801cc52:	2b18      	cmp	r3, #24
 801cc54:	d13a      	bne.n	801cccc <HAL_RCC_OscConfig+0x374>
 801cc56:	697b      	ldr	r3, [r7, #20]
 801cc58:	f003 0303 	and.w	r3, r3, #3
 801cc5c:	2b01      	cmp	r3, #1
 801cc5e:	d135      	bne.n	801cccc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801cc60:	4b7b      	ldr	r3, [pc, #492]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cc62:	681b      	ldr	r3, [r3, #0]
 801cc64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d005      	beq.n	801cc78 <HAL_RCC_OscConfig+0x320>
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	69db      	ldr	r3, [r3, #28]
 801cc70:	2b80      	cmp	r3, #128	@ 0x80
 801cc72:	d001      	beq.n	801cc78 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801cc74:	2301      	movs	r3, #1
 801cc76:	e2c1      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801cc78:	f7fd fa86 	bl	801a188 <HAL_GetREVID>
 801cc7c:	4603      	mov	r3, r0
 801cc7e:	f241 0203 	movw	r2, #4099	@ 0x1003
 801cc82:	4293      	cmp	r3, r2
 801cc84:	d817      	bhi.n	801ccb6 <HAL_RCC_OscConfig+0x35e>
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	6a1b      	ldr	r3, [r3, #32]
 801cc8a:	2b20      	cmp	r3, #32
 801cc8c:	d108      	bne.n	801cca0 <HAL_RCC_OscConfig+0x348>
 801cc8e:	4b70      	ldr	r3, [pc, #448]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cc90:	685b      	ldr	r3, [r3, #4]
 801cc92:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801cc96:	4a6e      	ldr	r2, [pc, #440]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cc98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801cc9c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801cc9e:	e075      	b.n	801cd8c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801cca0:	4b6b      	ldr	r3, [pc, #428]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cca2:	685b      	ldr	r3, [r3, #4]
 801cca4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	6a1b      	ldr	r3, [r3, #32]
 801ccac:	069b      	lsls	r3, r3, #26
 801ccae:	4968      	ldr	r1, [pc, #416]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801ccb0:	4313      	orrs	r3, r2
 801ccb2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ccb4:	e06a      	b.n	801cd8c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ccb6:	4b66      	ldr	r3, [pc, #408]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801ccb8:	68db      	ldr	r3, [r3, #12]
 801ccba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	6a1b      	ldr	r3, [r3, #32]
 801ccc2:	061b      	lsls	r3, r3, #24
 801ccc4:	4962      	ldr	r1, [pc, #392]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801ccc6:	4313      	orrs	r3, r2
 801ccc8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ccca:	e05f      	b.n	801cd8c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	69db      	ldr	r3, [r3, #28]
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	d042      	beq.n	801cd5a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801ccd4:	4b5e      	ldr	r3, [pc, #376]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801ccd6:	681b      	ldr	r3, [r3, #0]
 801ccd8:	4a5d      	ldr	r2, [pc, #372]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801ccda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ccde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cce0:	f7fd fa22 	bl	801a128 <HAL_GetTick>
 801cce4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801cce6:	e008      	b.n	801ccfa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801cce8:	f7fd fa1e 	bl	801a128 <HAL_GetTick>
 801ccec:	4602      	mov	r2, r0
 801ccee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccf0:	1ad3      	subs	r3, r2, r3
 801ccf2:	2b02      	cmp	r3, #2
 801ccf4:	d901      	bls.n	801ccfa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801ccf6:	2303      	movs	r3, #3
 801ccf8:	e280      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801ccfa:	4b55      	ldr	r3, [pc, #340]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801ccfc:	681b      	ldr	r3, [r3, #0]
 801ccfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	d0f0      	beq.n	801cce8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801cd06:	f7fd fa3f 	bl	801a188 <HAL_GetREVID>
 801cd0a:	4603      	mov	r3, r0
 801cd0c:	f241 0203 	movw	r2, #4099	@ 0x1003
 801cd10:	4293      	cmp	r3, r2
 801cd12:	d817      	bhi.n	801cd44 <HAL_RCC_OscConfig+0x3ec>
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	6a1b      	ldr	r3, [r3, #32]
 801cd18:	2b20      	cmp	r3, #32
 801cd1a:	d108      	bne.n	801cd2e <HAL_RCC_OscConfig+0x3d6>
 801cd1c:	4b4c      	ldr	r3, [pc, #304]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cd1e:	685b      	ldr	r3, [r3, #4]
 801cd20:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801cd24:	4a4a      	ldr	r2, [pc, #296]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cd26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801cd2a:	6053      	str	r3, [r2, #4]
 801cd2c:	e02e      	b.n	801cd8c <HAL_RCC_OscConfig+0x434>
 801cd2e:	4b48      	ldr	r3, [pc, #288]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cd30:	685b      	ldr	r3, [r3, #4]
 801cd32:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	6a1b      	ldr	r3, [r3, #32]
 801cd3a:	069b      	lsls	r3, r3, #26
 801cd3c:	4944      	ldr	r1, [pc, #272]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cd3e:	4313      	orrs	r3, r2
 801cd40:	604b      	str	r3, [r1, #4]
 801cd42:	e023      	b.n	801cd8c <HAL_RCC_OscConfig+0x434>
 801cd44:	4b42      	ldr	r3, [pc, #264]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cd46:	68db      	ldr	r3, [r3, #12]
 801cd48:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	6a1b      	ldr	r3, [r3, #32]
 801cd50:	061b      	lsls	r3, r3, #24
 801cd52:	493f      	ldr	r1, [pc, #252]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cd54:	4313      	orrs	r3, r2
 801cd56:	60cb      	str	r3, [r1, #12]
 801cd58:	e018      	b.n	801cd8c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801cd5a:	4b3d      	ldr	r3, [pc, #244]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cd5c:	681b      	ldr	r3, [r3, #0]
 801cd5e:	4a3c      	ldr	r2, [pc, #240]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cd60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801cd64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cd66:	f7fd f9df 	bl	801a128 <HAL_GetTick>
 801cd6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801cd6c:	e008      	b.n	801cd80 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801cd6e:	f7fd f9db 	bl	801a128 <HAL_GetTick>
 801cd72:	4602      	mov	r2, r0
 801cd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd76:	1ad3      	subs	r3, r2, r3
 801cd78:	2b02      	cmp	r3, #2
 801cd7a:	d901      	bls.n	801cd80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801cd7c:	2303      	movs	r3, #3
 801cd7e:	e23d      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801cd80:	4b33      	ldr	r3, [pc, #204]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cd82:	681b      	ldr	r3, [r3, #0]
 801cd84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d1f0      	bne.n	801cd6e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801cd8c:	687b      	ldr	r3, [r7, #4]
 801cd8e:	681b      	ldr	r3, [r3, #0]
 801cd90:	f003 0308 	and.w	r3, r3, #8
 801cd94:	2b00      	cmp	r3, #0
 801cd96:	d036      	beq.n	801ce06 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	695b      	ldr	r3, [r3, #20]
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d019      	beq.n	801cdd4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801cda0:	4b2b      	ldr	r3, [pc, #172]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cda2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cda4:	4a2a      	ldr	r2, [pc, #168]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cda6:	f043 0301 	orr.w	r3, r3, #1
 801cdaa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cdac:	f7fd f9bc 	bl	801a128 <HAL_GetTick>
 801cdb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801cdb2:	e008      	b.n	801cdc6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801cdb4:	f7fd f9b8 	bl	801a128 <HAL_GetTick>
 801cdb8:	4602      	mov	r2, r0
 801cdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdbc:	1ad3      	subs	r3, r2, r3
 801cdbe:	2b02      	cmp	r3, #2
 801cdc0:	d901      	bls.n	801cdc6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801cdc2:	2303      	movs	r3, #3
 801cdc4:	e21a      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801cdc6:	4b22      	ldr	r3, [pc, #136]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cdc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cdca:	f003 0302 	and.w	r3, r3, #2
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	d0f0      	beq.n	801cdb4 <HAL_RCC_OscConfig+0x45c>
 801cdd2:	e018      	b.n	801ce06 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801cdd4:	4b1e      	ldr	r3, [pc, #120]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cdd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cdd8:	4a1d      	ldr	r2, [pc, #116]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cdda:	f023 0301 	bic.w	r3, r3, #1
 801cdde:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cde0:	f7fd f9a2 	bl	801a128 <HAL_GetTick>
 801cde4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801cde6:	e008      	b.n	801cdfa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801cde8:	f7fd f99e 	bl	801a128 <HAL_GetTick>
 801cdec:	4602      	mov	r2, r0
 801cdee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdf0:	1ad3      	subs	r3, r2, r3
 801cdf2:	2b02      	cmp	r3, #2
 801cdf4:	d901      	bls.n	801cdfa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801cdf6:	2303      	movs	r3, #3
 801cdf8:	e200      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801cdfa:	4b15      	ldr	r3, [pc, #84]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801cdfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cdfe:	f003 0302 	and.w	r3, r3, #2
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d1f0      	bne.n	801cde8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801ce06:	687b      	ldr	r3, [r7, #4]
 801ce08:	681b      	ldr	r3, [r3, #0]
 801ce0a:	f003 0320 	and.w	r3, r3, #32
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	d039      	beq.n	801ce86 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	699b      	ldr	r3, [r3, #24]
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d01c      	beq.n	801ce54 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801ce1a:	4b0d      	ldr	r3, [pc, #52]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801ce1c:	681b      	ldr	r3, [r3, #0]
 801ce1e:	4a0c      	ldr	r2, [pc, #48]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801ce20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801ce24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801ce26:	f7fd f97f 	bl	801a128 <HAL_GetTick>
 801ce2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801ce2c:	e008      	b.n	801ce40 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ce2e:	f7fd f97b 	bl	801a128 <HAL_GetTick>
 801ce32:	4602      	mov	r2, r0
 801ce34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce36:	1ad3      	subs	r3, r2, r3
 801ce38:	2b02      	cmp	r3, #2
 801ce3a:	d901      	bls.n	801ce40 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801ce3c:	2303      	movs	r3, #3
 801ce3e:	e1dd      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801ce40:	4b03      	ldr	r3, [pc, #12]	@ (801ce50 <HAL_RCC_OscConfig+0x4f8>)
 801ce42:	681b      	ldr	r3, [r3, #0]
 801ce44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	d0f0      	beq.n	801ce2e <HAL_RCC_OscConfig+0x4d6>
 801ce4c:	e01b      	b.n	801ce86 <HAL_RCC_OscConfig+0x52e>
 801ce4e:	bf00      	nop
 801ce50:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801ce54:	4b9b      	ldr	r3, [pc, #620]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801ce56:	681b      	ldr	r3, [r3, #0]
 801ce58:	4a9a      	ldr	r2, [pc, #616]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801ce5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ce5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801ce60:	f7fd f962 	bl	801a128 <HAL_GetTick>
 801ce64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801ce66:	e008      	b.n	801ce7a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ce68:	f7fd f95e 	bl	801a128 <HAL_GetTick>
 801ce6c:	4602      	mov	r2, r0
 801ce6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce70:	1ad3      	subs	r3, r2, r3
 801ce72:	2b02      	cmp	r3, #2
 801ce74:	d901      	bls.n	801ce7a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801ce76:	2303      	movs	r3, #3
 801ce78:	e1c0      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801ce7a:	4b92      	ldr	r3, [pc, #584]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801ce7c:	681b      	ldr	r3, [r3, #0]
 801ce7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	d1f0      	bne.n	801ce68 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	681b      	ldr	r3, [r3, #0]
 801ce8a:	f003 0304 	and.w	r3, r3, #4
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	f000 8081 	beq.w	801cf96 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801ce94:	4b8c      	ldr	r3, [pc, #560]	@ (801d0c8 <HAL_RCC_OscConfig+0x770>)
 801ce96:	681b      	ldr	r3, [r3, #0]
 801ce98:	4a8b      	ldr	r2, [pc, #556]	@ (801d0c8 <HAL_RCC_OscConfig+0x770>)
 801ce9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801ce9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801cea0:	f7fd f942 	bl	801a128 <HAL_GetTick>
 801cea4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801cea6:	e008      	b.n	801ceba <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801cea8:	f7fd f93e 	bl	801a128 <HAL_GetTick>
 801ceac:	4602      	mov	r2, r0
 801ceae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ceb0:	1ad3      	subs	r3, r2, r3
 801ceb2:	2b64      	cmp	r3, #100	@ 0x64
 801ceb4:	d901      	bls.n	801ceba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801ceb6:	2303      	movs	r3, #3
 801ceb8:	e1a0      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801ceba:	4b83      	ldr	r3, [pc, #524]	@ (801d0c8 <HAL_RCC_OscConfig+0x770>)
 801cebc:	681b      	ldr	r3, [r3, #0]
 801cebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d0f0      	beq.n	801cea8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	689b      	ldr	r3, [r3, #8]
 801ceca:	2b01      	cmp	r3, #1
 801cecc:	d106      	bne.n	801cedc <HAL_RCC_OscConfig+0x584>
 801cece:	4b7d      	ldr	r3, [pc, #500]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801ced0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ced2:	4a7c      	ldr	r2, [pc, #496]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801ced4:	f043 0301 	orr.w	r3, r3, #1
 801ced8:	6713      	str	r3, [r2, #112]	@ 0x70
 801ceda:	e02d      	b.n	801cf38 <HAL_RCC_OscConfig+0x5e0>
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	689b      	ldr	r3, [r3, #8]
 801cee0:	2b00      	cmp	r3, #0
 801cee2:	d10c      	bne.n	801cefe <HAL_RCC_OscConfig+0x5a6>
 801cee4:	4b77      	ldr	r3, [pc, #476]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cee8:	4a76      	ldr	r2, [pc, #472]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801ceea:	f023 0301 	bic.w	r3, r3, #1
 801ceee:	6713      	str	r3, [r2, #112]	@ 0x70
 801cef0:	4b74      	ldr	r3, [pc, #464]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cef4:	4a73      	ldr	r2, [pc, #460]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cef6:	f023 0304 	bic.w	r3, r3, #4
 801cefa:	6713      	str	r3, [r2, #112]	@ 0x70
 801cefc:	e01c      	b.n	801cf38 <HAL_RCC_OscConfig+0x5e0>
 801cefe:	687b      	ldr	r3, [r7, #4]
 801cf00:	689b      	ldr	r3, [r3, #8]
 801cf02:	2b05      	cmp	r3, #5
 801cf04:	d10c      	bne.n	801cf20 <HAL_RCC_OscConfig+0x5c8>
 801cf06:	4b6f      	ldr	r3, [pc, #444]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cf08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cf0a:	4a6e      	ldr	r2, [pc, #440]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cf0c:	f043 0304 	orr.w	r3, r3, #4
 801cf10:	6713      	str	r3, [r2, #112]	@ 0x70
 801cf12:	4b6c      	ldr	r3, [pc, #432]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cf14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cf16:	4a6b      	ldr	r2, [pc, #428]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cf18:	f043 0301 	orr.w	r3, r3, #1
 801cf1c:	6713      	str	r3, [r2, #112]	@ 0x70
 801cf1e:	e00b      	b.n	801cf38 <HAL_RCC_OscConfig+0x5e0>
 801cf20:	4b68      	ldr	r3, [pc, #416]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cf22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cf24:	4a67      	ldr	r2, [pc, #412]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cf26:	f023 0301 	bic.w	r3, r3, #1
 801cf2a:	6713      	str	r3, [r2, #112]	@ 0x70
 801cf2c:	4b65      	ldr	r3, [pc, #404]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cf2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cf30:	4a64      	ldr	r2, [pc, #400]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cf32:	f023 0304 	bic.w	r3, r3, #4
 801cf36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	689b      	ldr	r3, [r3, #8]
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	d015      	beq.n	801cf6c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cf40:	f7fd f8f2 	bl	801a128 <HAL_GetTick>
 801cf44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801cf46:	e00a      	b.n	801cf5e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cf48:	f7fd f8ee 	bl	801a128 <HAL_GetTick>
 801cf4c:	4602      	mov	r2, r0
 801cf4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf50:	1ad3      	subs	r3, r2, r3
 801cf52:	f241 3288 	movw	r2, #5000	@ 0x1388
 801cf56:	4293      	cmp	r3, r2
 801cf58:	d901      	bls.n	801cf5e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801cf5a:	2303      	movs	r3, #3
 801cf5c:	e14e      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801cf5e:	4b59      	ldr	r3, [pc, #356]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cf60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cf62:	f003 0302 	and.w	r3, r3, #2
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	d0ee      	beq.n	801cf48 <HAL_RCC_OscConfig+0x5f0>
 801cf6a:	e014      	b.n	801cf96 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cf6c:	f7fd f8dc 	bl	801a128 <HAL_GetTick>
 801cf70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801cf72:	e00a      	b.n	801cf8a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cf74:	f7fd f8d8 	bl	801a128 <HAL_GetTick>
 801cf78:	4602      	mov	r2, r0
 801cf7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf7c:	1ad3      	subs	r3, r2, r3
 801cf7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801cf82:	4293      	cmp	r3, r2
 801cf84:	d901      	bls.n	801cf8a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801cf86:	2303      	movs	r3, #3
 801cf88:	e138      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801cf8a:	4b4e      	ldr	r3, [pc, #312]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cf8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cf8e:	f003 0302 	and.w	r3, r3, #2
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	d1ee      	bne.n	801cf74 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	f000 812d 	beq.w	801d1fa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801cfa0:	4b48      	ldr	r3, [pc, #288]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cfa2:	691b      	ldr	r3, [r3, #16]
 801cfa4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801cfa8:	2b18      	cmp	r3, #24
 801cfaa:	f000 80bd 	beq.w	801d128 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cfb2:	2b02      	cmp	r3, #2
 801cfb4:	f040 809e 	bne.w	801d0f4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801cfb8:	4b42      	ldr	r3, [pc, #264]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cfba:	681b      	ldr	r3, [r3, #0]
 801cfbc:	4a41      	ldr	r2, [pc, #260]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cfbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801cfc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cfc4:	f7fd f8b0 	bl	801a128 <HAL_GetTick>
 801cfc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801cfca:	e008      	b.n	801cfde <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cfcc:	f7fd f8ac 	bl	801a128 <HAL_GetTick>
 801cfd0:	4602      	mov	r2, r0
 801cfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cfd4:	1ad3      	subs	r3, r2, r3
 801cfd6:	2b02      	cmp	r3, #2
 801cfd8:	d901      	bls.n	801cfde <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801cfda:	2303      	movs	r3, #3
 801cfdc:	e10e      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801cfde:	4b39      	ldr	r3, [pc, #228]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cfe0:	681b      	ldr	r3, [r3, #0]
 801cfe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d1f0      	bne.n	801cfcc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801cfea:	4b36      	ldr	r3, [pc, #216]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801cfec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801cfee:	4b37      	ldr	r3, [pc, #220]	@ (801d0cc <HAL_RCC_OscConfig+0x774>)
 801cff0:	4013      	ands	r3, r2
 801cff2:	687a      	ldr	r2, [r7, #4]
 801cff4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801cff6:	687a      	ldr	r2, [r7, #4]
 801cff8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801cffa:	0112      	lsls	r2, r2, #4
 801cffc:	430a      	orrs	r2, r1
 801cffe:	4931      	ldr	r1, [pc, #196]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d000:	4313      	orrs	r3, r2
 801d002:	628b      	str	r3, [r1, #40]	@ 0x28
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d008:	3b01      	subs	r3, #1
 801d00a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d012:	3b01      	subs	r3, #1
 801d014:	025b      	lsls	r3, r3, #9
 801d016:	b29b      	uxth	r3, r3
 801d018:	431a      	orrs	r2, r3
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d01e:	3b01      	subs	r3, #1
 801d020:	041b      	lsls	r3, r3, #16
 801d022:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801d026:	431a      	orrs	r2, r3
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d02c:	3b01      	subs	r3, #1
 801d02e:	061b      	lsls	r3, r3, #24
 801d030:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801d034:	4923      	ldr	r1, [pc, #140]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d036:	4313      	orrs	r3, r2
 801d038:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801d03a:	4b22      	ldr	r3, [pc, #136]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d03e:	4a21      	ldr	r2, [pc, #132]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d040:	f023 0301 	bic.w	r3, r3, #1
 801d044:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801d046:	4b1f      	ldr	r3, [pc, #124]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d048:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d04a:	4b21      	ldr	r3, [pc, #132]	@ (801d0d0 <HAL_RCC_OscConfig+0x778>)
 801d04c:	4013      	ands	r3, r2
 801d04e:	687a      	ldr	r2, [r7, #4]
 801d050:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801d052:	00d2      	lsls	r2, r2, #3
 801d054:	491b      	ldr	r1, [pc, #108]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d056:	4313      	orrs	r3, r2
 801d058:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801d05a:	4b1a      	ldr	r3, [pc, #104]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d05c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d05e:	f023 020c 	bic.w	r2, r3, #12
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d066:	4917      	ldr	r1, [pc, #92]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d068:	4313      	orrs	r3, r2
 801d06a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801d06c:	4b15      	ldr	r3, [pc, #84]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d070:	f023 0202 	bic.w	r2, r3, #2
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d078:	4912      	ldr	r1, [pc, #72]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d07a:	4313      	orrs	r3, r2
 801d07c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801d07e:	4b11      	ldr	r3, [pc, #68]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d082:	4a10      	ldr	r2, [pc, #64]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d088:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d08a:	4b0e      	ldr	r3, [pc, #56]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d08e:	4a0d      	ldr	r2, [pc, #52]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d094:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801d096:	4b0b      	ldr	r3, [pc, #44]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d09a:	4a0a      	ldr	r2, [pc, #40]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d09c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801d0a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801d0a2:	4b08      	ldr	r3, [pc, #32]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d0a6:	4a07      	ldr	r2, [pc, #28]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d0a8:	f043 0301 	orr.w	r3, r3, #1
 801d0ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801d0ae:	4b05      	ldr	r3, [pc, #20]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d0b0:	681b      	ldr	r3, [r3, #0]
 801d0b2:	4a04      	ldr	r2, [pc, #16]	@ (801d0c4 <HAL_RCC_OscConfig+0x76c>)
 801d0b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801d0b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d0ba:	f7fd f835 	bl	801a128 <HAL_GetTick>
 801d0be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d0c0:	e011      	b.n	801d0e6 <HAL_RCC_OscConfig+0x78e>
 801d0c2:	bf00      	nop
 801d0c4:	58024400 	.word	0x58024400
 801d0c8:	58024800 	.word	0x58024800
 801d0cc:	fffffc0c 	.word	0xfffffc0c
 801d0d0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d0d4:	f7fd f828 	bl	801a128 <HAL_GetTick>
 801d0d8:	4602      	mov	r2, r0
 801d0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0dc:	1ad3      	subs	r3, r2, r3
 801d0de:	2b02      	cmp	r3, #2
 801d0e0:	d901      	bls.n	801d0e6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801d0e2:	2303      	movs	r3, #3
 801d0e4:	e08a      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d0e6:	4b47      	ldr	r3, [pc, #284]	@ (801d204 <HAL_RCC_OscConfig+0x8ac>)
 801d0e8:	681b      	ldr	r3, [r3, #0]
 801d0ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d0ee:	2b00      	cmp	r3, #0
 801d0f0:	d0f0      	beq.n	801d0d4 <HAL_RCC_OscConfig+0x77c>
 801d0f2:	e082      	b.n	801d1fa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d0f4:	4b43      	ldr	r3, [pc, #268]	@ (801d204 <HAL_RCC_OscConfig+0x8ac>)
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	4a42      	ldr	r2, [pc, #264]	@ (801d204 <HAL_RCC_OscConfig+0x8ac>)
 801d0fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801d0fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d100:	f7fd f812 	bl	801a128 <HAL_GetTick>
 801d104:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d106:	e008      	b.n	801d11a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d108:	f7fd f80e 	bl	801a128 <HAL_GetTick>
 801d10c:	4602      	mov	r2, r0
 801d10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d110:	1ad3      	subs	r3, r2, r3
 801d112:	2b02      	cmp	r3, #2
 801d114:	d901      	bls.n	801d11a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801d116:	2303      	movs	r3, #3
 801d118:	e070      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d11a:	4b3a      	ldr	r3, [pc, #232]	@ (801d204 <HAL_RCC_OscConfig+0x8ac>)
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d122:	2b00      	cmp	r3, #0
 801d124:	d1f0      	bne.n	801d108 <HAL_RCC_OscConfig+0x7b0>
 801d126:	e068      	b.n	801d1fa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801d128:	4b36      	ldr	r3, [pc, #216]	@ (801d204 <HAL_RCC_OscConfig+0x8ac>)
 801d12a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d12c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801d12e:	4b35      	ldr	r3, [pc, #212]	@ (801d204 <HAL_RCC_OscConfig+0x8ac>)
 801d130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d132:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d138:	2b01      	cmp	r3, #1
 801d13a:	d031      	beq.n	801d1a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d13c:	693b      	ldr	r3, [r7, #16]
 801d13e:	f003 0203 	and.w	r2, r3, #3
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d146:	429a      	cmp	r2, r3
 801d148:	d12a      	bne.n	801d1a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801d14a:	693b      	ldr	r3, [r7, #16]
 801d14c:	091b      	lsrs	r3, r3, #4
 801d14e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d156:	429a      	cmp	r2, r3
 801d158:	d122      	bne.n	801d1a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801d15a:	68fb      	ldr	r3, [r7, #12]
 801d15c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d160:	687b      	ldr	r3, [r7, #4]
 801d162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d164:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801d166:	429a      	cmp	r2, r3
 801d168:	d11a      	bne.n	801d1a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801d16a:	68fb      	ldr	r3, [r7, #12]
 801d16c:	0a5b      	lsrs	r3, r3, #9
 801d16e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d176:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801d178:	429a      	cmp	r2, r3
 801d17a:	d111      	bne.n	801d1a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801d17c:	68fb      	ldr	r3, [r7, #12]
 801d17e:	0c1b      	lsrs	r3, r3, #16
 801d180:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d188:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801d18a:	429a      	cmp	r2, r3
 801d18c:	d108      	bne.n	801d1a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801d18e:	68fb      	ldr	r3, [r7, #12]
 801d190:	0e1b      	lsrs	r3, r3, #24
 801d192:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d196:	687b      	ldr	r3, [r7, #4]
 801d198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d19a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801d19c:	429a      	cmp	r2, r3
 801d19e:	d001      	beq.n	801d1a4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801d1a0:	2301      	movs	r3, #1
 801d1a2:	e02b      	b.n	801d1fc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801d1a4:	4b17      	ldr	r3, [pc, #92]	@ (801d204 <HAL_RCC_OscConfig+0x8ac>)
 801d1a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d1a8:	08db      	lsrs	r3, r3, #3
 801d1aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d1ae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801d1b0:	687b      	ldr	r3, [r7, #4]
 801d1b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d1b4:	693a      	ldr	r2, [r7, #16]
 801d1b6:	429a      	cmp	r2, r3
 801d1b8:	d01f      	beq.n	801d1fa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801d1ba:	4b12      	ldr	r3, [pc, #72]	@ (801d204 <HAL_RCC_OscConfig+0x8ac>)
 801d1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d1be:	4a11      	ldr	r2, [pc, #68]	@ (801d204 <HAL_RCC_OscConfig+0x8ac>)
 801d1c0:	f023 0301 	bic.w	r3, r3, #1
 801d1c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801d1c6:	f7fc ffaf 	bl	801a128 <HAL_GetTick>
 801d1ca:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801d1cc:	bf00      	nop
 801d1ce:	f7fc ffab 	bl	801a128 <HAL_GetTick>
 801d1d2:	4602      	mov	r2, r0
 801d1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d1d6:	4293      	cmp	r3, r2
 801d1d8:	d0f9      	beq.n	801d1ce <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801d1da:	4b0a      	ldr	r3, [pc, #40]	@ (801d204 <HAL_RCC_OscConfig+0x8ac>)
 801d1dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d1de:	4b0a      	ldr	r3, [pc, #40]	@ (801d208 <HAL_RCC_OscConfig+0x8b0>)
 801d1e0:	4013      	ands	r3, r2
 801d1e2:	687a      	ldr	r2, [r7, #4]
 801d1e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801d1e6:	00d2      	lsls	r2, r2, #3
 801d1e8:	4906      	ldr	r1, [pc, #24]	@ (801d204 <HAL_RCC_OscConfig+0x8ac>)
 801d1ea:	4313      	orrs	r3, r2
 801d1ec:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801d1ee:	4b05      	ldr	r3, [pc, #20]	@ (801d204 <HAL_RCC_OscConfig+0x8ac>)
 801d1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d1f2:	4a04      	ldr	r2, [pc, #16]	@ (801d204 <HAL_RCC_OscConfig+0x8ac>)
 801d1f4:	f043 0301 	orr.w	r3, r3, #1
 801d1f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801d1fa:	2300      	movs	r3, #0
}
 801d1fc:	4618      	mov	r0, r3
 801d1fe:	3730      	adds	r7, #48	@ 0x30
 801d200:	46bd      	mov	sp, r7
 801d202:	bd80      	pop	{r7, pc}
 801d204:	58024400 	.word	0x58024400
 801d208:	ffff0007 	.word	0xffff0007

0801d20c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801d20c:	b580      	push	{r7, lr}
 801d20e:	b086      	sub	sp, #24
 801d210:	af00      	add	r7, sp, #0
 801d212:	6078      	str	r0, [r7, #4]
 801d214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801d216:	687b      	ldr	r3, [r7, #4]
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d101      	bne.n	801d220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801d21c:	2301      	movs	r3, #1
 801d21e:	e19c      	b.n	801d55a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801d220:	4b8a      	ldr	r3, [pc, #552]	@ (801d44c <HAL_RCC_ClockConfig+0x240>)
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	f003 030f 	and.w	r3, r3, #15
 801d228:	683a      	ldr	r2, [r7, #0]
 801d22a:	429a      	cmp	r2, r3
 801d22c:	d910      	bls.n	801d250 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d22e:	4b87      	ldr	r3, [pc, #540]	@ (801d44c <HAL_RCC_ClockConfig+0x240>)
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	f023 020f 	bic.w	r2, r3, #15
 801d236:	4985      	ldr	r1, [pc, #532]	@ (801d44c <HAL_RCC_ClockConfig+0x240>)
 801d238:	683b      	ldr	r3, [r7, #0]
 801d23a:	4313      	orrs	r3, r2
 801d23c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d23e:	4b83      	ldr	r3, [pc, #524]	@ (801d44c <HAL_RCC_ClockConfig+0x240>)
 801d240:	681b      	ldr	r3, [r3, #0]
 801d242:	f003 030f 	and.w	r3, r3, #15
 801d246:	683a      	ldr	r2, [r7, #0]
 801d248:	429a      	cmp	r2, r3
 801d24a:	d001      	beq.n	801d250 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801d24c:	2301      	movs	r3, #1
 801d24e:	e184      	b.n	801d55a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	681b      	ldr	r3, [r3, #0]
 801d254:	f003 0304 	and.w	r3, r3, #4
 801d258:	2b00      	cmp	r3, #0
 801d25a:	d010      	beq.n	801d27e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	691a      	ldr	r2, [r3, #16]
 801d260:	4b7b      	ldr	r3, [pc, #492]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d262:	699b      	ldr	r3, [r3, #24]
 801d264:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d268:	429a      	cmp	r2, r3
 801d26a:	d908      	bls.n	801d27e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801d26c:	4b78      	ldr	r3, [pc, #480]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d26e:	699b      	ldr	r3, [r3, #24]
 801d270:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	691b      	ldr	r3, [r3, #16]
 801d278:	4975      	ldr	r1, [pc, #468]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d27a:	4313      	orrs	r3, r2
 801d27c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	f003 0308 	and.w	r3, r3, #8
 801d286:	2b00      	cmp	r3, #0
 801d288:	d010      	beq.n	801d2ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	695a      	ldr	r2, [r3, #20]
 801d28e:	4b70      	ldr	r3, [pc, #448]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d290:	69db      	ldr	r3, [r3, #28]
 801d292:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d296:	429a      	cmp	r2, r3
 801d298:	d908      	bls.n	801d2ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801d29a:	4b6d      	ldr	r3, [pc, #436]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d29c:	69db      	ldr	r3, [r3, #28]
 801d29e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	695b      	ldr	r3, [r3, #20]
 801d2a6:	496a      	ldr	r1, [pc, #424]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d2a8:	4313      	orrs	r3, r2
 801d2aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	681b      	ldr	r3, [r3, #0]
 801d2b0:	f003 0310 	and.w	r3, r3, #16
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	d010      	beq.n	801d2da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801d2b8:	687b      	ldr	r3, [r7, #4]
 801d2ba:	699a      	ldr	r2, [r3, #24]
 801d2bc:	4b64      	ldr	r3, [pc, #400]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d2be:	69db      	ldr	r3, [r3, #28]
 801d2c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801d2c4:	429a      	cmp	r2, r3
 801d2c6:	d908      	bls.n	801d2da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801d2c8:	4b61      	ldr	r3, [pc, #388]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d2ca:	69db      	ldr	r3, [r3, #28]
 801d2cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	699b      	ldr	r3, [r3, #24]
 801d2d4:	495e      	ldr	r1, [pc, #376]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d2d6:	4313      	orrs	r3, r2
 801d2d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801d2da:	687b      	ldr	r3, [r7, #4]
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	f003 0320 	and.w	r3, r3, #32
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	d010      	beq.n	801d308 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801d2e6:	687b      	ldr	r3, [r7, #4]
 801d2e8:	69da      	ldr	r2, [r3, #28]
 801d2ea:	4b59      	ldr	r3, [pc, #356]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d2ec:	6a1b      	ldr	r3, [r3, #32]
 801d2ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d2f2:	429a      	cmp	r2, r3
 801d2f4:	d908      	bls.n	801d308 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801d2f6:	4b56      	ldr	r3, [pc, #344]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d2f8:	6a1b      	ldr	r3, [r3, #32]
 801d2fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	69db      	ldr	r3, [r3, #28]
 801d302:	4953      	ldr	r1, [pc, #332]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d304:	4313      	orrs	r3, r2
 801d306:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	681b      	ldr	r3, [r3, #0]
 801d30c:	f003 0302 	and.w	r3, r3, #2
 801d310:	2b00      	cmp	r3, #0
 801d312:	d010      	beq.n	801d336 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	68da      	ldr	r2, [r3, #12]
 801d318:	4b4d      	ldr	r3, [pc, #308]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d31a:	699b      	ldr	r3, [r3, #24]
 801d31c:	f003 030f 	and.w	r3, r3, #15
 801d320:	429a      	cmp	r2, r3
 801d322:	d908      	bls.n	801d336 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d324:	4b4a      	ldr	r3, [pc, #296]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d326:	699b      	ldr	r3, [r3, #24]
 801d328:	f023 020f 	bic.w	r2, r3, #15
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	68db      	ldr	r3, [r3, #12]
 801d330:	4947      	ldr	r1, [pc, #284]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d332:	4313      	orrs	r3, r2
 801d334:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	681b      	ldr	r3, [r3, #0]
 801d33a:	f003 0301 	and.w	r3, r3, #1
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d055      	beq.n	801d3ee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801d342:	4b43      	ldr	r3, [pc, #268]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d344:	699b      	ldr	r3, [r3, #24]
 801d346:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	689b      	ldr	r3, [r3, #8]
 801d34e:	4940      	ldr	r1, [pc, #256]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d350:	4313      	orrs	r3, r2
 801d352:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d354:	687b      	ldr	r3, [r7, #4]
 801d356:	685b      	ldr	r3, [r3, #4]
 801d358:	2b02      	cmp	r3, #2
 801d35a:	d107      	bne.n	801d36c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801d35c:	4b3c      	ldr	r3, [pc, #240]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d35e:	681b      	ldr	r3, [r3, #0]
 801d360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d364:	2b00      	cmp	r3, #0
 801d366:	d121      	bne.n	801d3ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d368:	2301      	movs	r3, #1
 801d36a:	e0f6      	b.n	801d55a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801d36c:	687b      	ldr	r3, [r7, #4]
 801d36e:	685b      	ldr	r3, [r3, #4]
 801d370:	2b03      	cmp	r3, #3
 801d372:	d107      	bne.n	801d384 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d374:	4b36      	ldr	r3, [pc, #216]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d376:	681b      	ldr	r3, [r3, #0]
 801d378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d37c:	2b00      	cmp	r3, #0
 801d37e:	d115      	bne.n	801d3ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d380:	2301      	movs	r3, #1
 801d382:	e0ea      	b.n	801d55a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	685b      	ldr	r3, [r3, #4]
 801d388:	2b01      	cmp	r3, #1
 801d38a:	d107      	bne.n	801d39c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801d38c:	4b30      	ldr	r3, [pc, #192]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d38e:	681b      	ldr	r3, [r3, #0]
 801d390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d394:	2b00      	cmp	r3, #0
 801d396:	d109      	bne.n	801d3ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d398:	2301      	movs	r3, #1
 801d39a:	e0de      	b.n	801d55a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d39c:	4b2c      	ldr	r3, [pc, #176]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d39e:	681b      	ldr	r3, [r3, #0]
 801d3a0:	f003 0304 	and.w	r3, r3, #4
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d101      	bne.n	801d3ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d3a8:	2301      	movs	r3, #1
 801d3aa:	e0d6      	b.n	801d55a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801d3ac:	4b28      	ldr	r3, [pc, #160]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d3ae:	691b      	ldr	r3, [r3, #16]
 801d3b0:	f023 0207 	bic.w	r2, r3, #7
 801d3b4:	687b      	ldr	r3, [r7, #4]
 801d3b6:	685b      	ldr	r3, [r3, #4]
 801d3b8:	4925      	ldr	r1, [pc, #148]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d3ba:	4313      	orrs	r3, r2
 801d3bc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d3be:	f7fc feb3 	bl	801a128 <HAL_GetTick>
 801d3c2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d3c4:	e00a      	b.n	801d3dc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d3c6:	f7fc feaf 	bl	801a128 <HAL_GetTick>
 801d3ca:	4602      	mov	r2, r0
 801d3cc:	697b      	ldr	r3, [r7, #20]
 801d3ce:	1ad3      	subs	r3, r2, r3
 801d3d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d3d4:	4293      	cmp	r3, r2
 801d3d6:	d901      	bls.n	801d3dc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801d3d8:	2303      	movs	r3, #3
 801d3da:	e0be      	b.n	801d55a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d3dc:	4b1c      	ldr	r3, [pc, #112]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d3de:	691b      	ldr	r3, [r3, #16]
 801d3e0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	685b      	ldr	r3, [r3, #4]
 801d3e8:	00db      	lsls	r3, r3, #3
 801d3ea:	429a      	cmp	r2, r3
 801d3ec:	d1eb      	bne.n	801d3c6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d3ee:	687b      	ldr	r3, [r7, #4]
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	f003 0302 	and.w	r3, r3, #2
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	d010      	beq.n	801d41c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	68da      	ldr	r2, [r3, #12]
 801d3fe:	4b14      	ldr	r3, [pc, #80]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d400:	699b      	ldr	r3, [r3, #24]
 801d402:	f003 030f 	and.w	r3, r3, #15
 801d406:	429a      	cmp	r2, r3
 801d408:	d208      	bcs.n	801d41c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d40a:	4b11      	ldr	r3, [pc, #68]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d40c:	699b      	ldr	r3, [r3, #24]
 801d40e:	f023 020f 	bic.w	r2, r3, #15
 801d412:	687b      	ldr	r3, [r7, #4]
 801d414:	68db      	ldr	r3, [r3, #12]
 801d416:	490e      	ldr	r1, [pc, #56]	@ (801d450 <HAL_RCC_ClockConfig+0x244>)
 801d418:	4313      	orrs	r3, r2
 801d41a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801d41c:	4b0b      	ldr	r3, [pc, #44]	@ (801d44c <HAL_RCC_ClockConfig+0x240>)
 801d41e:	681b      	ldr	r3, [r3, #0]
 801d420:	f003 030f 	and.w	r3, r3, #15
 801d424:	683a      	ldr	r2, [r7, #0]
 801d426:	429a      	cmp	r2, r3
 801d428:	d214      	bcs.n	801d454 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d42a:	4b08      	ldr	r3, [pc, #32]	@ (801d44c <HAL_RCC_ClockConfig+0x240>)
 801d42c:	681b      	ldr	r3, [r3, #0]
 801d42e:	f023 020f 	bic.w	r2, r3, #15
 801d432:	4906      	ldr	r1, [pc, #24]	@ (801d44c <HAL_RCC_ClockConfig+0x240>)
 801d434:	683b      	ldr	r3, [r7, #0]
 801d436:	4313      	orrs	r3, r2
 801d438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d43a:	4b04      	ldr	r3, [pc, #16]	@ (801d44c <HAL_RCC_ClockConfig+0x240>)
 801d43c:	681b      	ldr	r3, [r3, #0]
 801d43e:	f003 030f 	and.w	r3, r3, #15
 801d442:	683a      	ldr	r2, [r7, #0]
 801d444:	429a      	cmp	r2, r3
 801d446:	d005      	beq.n	801d454 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801d448:	2301      	movs	r3, #1
 801d44a:	e086      	b.n	801d55a <HAL_RCC_ClockConfig+0x34e>
 801d44c:	52002000 	.word	0x52002000
 801d450:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	681b      	ldr	r3, [r3, #0]
 801d458:	f003 0304 	and.w	r3, r3, #4
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d010      	beq.n	801d482 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	691a      	ldr	r2, [r3, #16]
 801d464:	4b3f      	ldr	r3, [pc, #252]	@ (801d564 <HAL_RCC_ClockConfig+0x358>)
 801d466:	699b      	ldr	r3, [r3, #24]
 801d468:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d46c:	429a      	cmp	r2, r3
 801d46e:	d208      	bcs.n	801d482 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801d470:	4b3c      	ldr	r3, [pc, #240]	@ (801d564 <HAL_RCC_ClockConfig+0x358>)
 801d472:	699b      	ldr	r3, [r3, #24]
 801d474:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	691b      	ldr	r3, [r3, #16]
 801d47c:	4939      	ldr	r1, [pc, #228]	@ (801d564 <HAL_RCC_ClockConfig+0x358>)
 801d47e:	4313      	orrs	r3, r2
 801d480:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d482:	687b      	ldr	r3, [r7, #4]
 801d484:	681b      	ldr	r3, [r3, #0]
 801d486:	f003 0308 	and.w	r3, r3, #8
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	d010      	beq.n	801d4b0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	695a      	ldr	r2, [r3, #20]
 801d492:	4b34      	ldr	r3, [pc, #208]	@ (801d564 <HAL_RCC_ClockConfig+0x358>)
 801d494:	69db      	ldr	r3, [r3, #28]
 801d496:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d49a:	429a      	cmp	r2, r3
 801d49c:	d208      	bcs.n	801d4b0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801d49e:	4b31      	ldr	r3, [pc, #196]	@ (801d564 <HAL_RCC_ClockConfig+0x358>)
 801d4a0:	69db      	ldr	r3, [r3, #28]
 801d4a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d4a6:	687b      	ldr	r3, [r7, #4]
 801d4a8:	695b      	ldr	r3, [r3, #20]
 801d4aa:	492e      	ldr	r1, [pc, #184]	@ (801d564 <HAL_RCC_ClockConfig+0x358>)
 801d4ac:	4313      	orrs	r3, r2
 801d4ae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	681b      	ldr	r3, [r3, #0]
 801d4b4:	f003 0310 	and.w	r3, r3, #16
 801d4b8:	2b00      	cmp	r3, #0
 801d4ba:	d010      	beq.n	801d4de <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801d4bc:	687b      	ldr	r3, [r7, #4]
 801d4be:	699a      	ldr	r2, [r3, #24]
 801d4c0:	4b28      	ldr	r3, [pc, #160]	@ (801d564 <HAL_RCC_ClockConfig+0x358>)
 801d4c2:	69db      	ldr	r3, [r3, #28]
 801d4c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801d4c8:	429a      	cmp	r2, r3
 801d4ca:	d208      	bcs.n	801d4de <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801d4cc:	4b25      	ldr	r3, [pc, #148]	@ (801d564 <HAL_RCC_ClockConfig+0x358>)
 801d4ce:	69db      	ldr	r3, [r3, #28]
 801d4d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801d4d4:	687b      	ldr	r3, [r7, #4]
 801d4d6:	699b      	ldr	r3, [r3, #24]
 801d4d8:	4922      	ldr	r1, [pc, #136]	@ (801d564 <HAL_RCC_ClockConfig+0x358>)
 801d4da:	4313      	orrs	r3, r2
 801d4dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	681b      	ldr	r3, [r3, #0]
 801d4e2:	f003 0320 	and.w	r3, r3, #32
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	d010      	beq.n	801d50c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	69da      	ldr	r2, [r3, #28]
 801d4ee:	4b1d      	ldr	r3, [pc, #116]	@ (801d564 <HAL_RCC_ClockConfig+0x358>)
 801d4f0:	6a1b      	ldr	r3, [r3, #32]
 801d4f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d4f6:	429a      	cmp	r2, r3
 801d4f8:	d208      	bcs.n	801d50c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801d4fa:	4b1a      	ldr	r3, [pc, #104]	@ (801d564 <HAL_RCC_ClockConfig+0x358>)
 801d4fc:	6a1b      	ldr	r3, [r3, #32]
 801d4fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d502:	687b      	ldr	r3, [r7, #4]
 801d504:	69db      	ldr	r3, [r3, #28]
 801d506:	4917      	ldr	r1, [pc, #92]	@ (801d564 <HAL_RCC_ClockConfig+0x358>)
 801d508:	4313      	orrs	r3, r2
 801d50a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801d50c:	f000 f834 	bl	801d578 <HAL_RCC_GetSysClockFreq>
 801d510:	4602      	mov	r2, r0
 801d512:	4b14      	ldr	r3, [pc, #80]	@ (801d564 <HAL_RCC_ClockConfig+0x358>)
 801d514:	699b      	ldr	r3, [r3, #24]
 801d516:	0a1b      	lsrs	r3, r3, #8
 801d518:	f003 030f 	and.w	r3, r3, #15
 801d51c:	4912      	ldr	r1, [pc, #72]	@ (801d568 <HAL_RCC_ClockConfig+0x35c>)
 801d51e:	5ccb      	ldrb	r3, [r1, r3]
 801d520:	f003 031f 	and.w	r3, r3, #31
 801d524:	fa22 f303 	lsr.w	r3, r2, r3
 801d528:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801d52a:	4b0e      	ldr	r3, [pc, #56]	@ (801d564 <HAL_RCC_ClockConfig+0x358>)
 801d52c:	699b      	ldr	r3, [r3, #24]
 801d52e:	f003 030f 	and.w	r3, r3, #15
 801d532:	4a0d      	ldr	r2, [pc, #52]	@ (801d568 <HAL_RCC_ClockConfig+0x35c>)
 801d534:	5cd3      	ldrb	r3, [r2, r3]
 801d536:	f003 031f 	and.w	r3, r3, #31
 801d53a:	693a      	ldr	r2, [r7, #16]
 801d53c:	fa22 f303 	lsr.w	r3, r2, r3
 801d540:	4a0a      	ldr	r2, [pc, #40]	@ (801d56c <HAL_RCC_ClockConfig+0x360>)
 801d542:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801d544:	4a0a      	ldr	r2, [pc, #40]	@ (801d570 <HAL_RCC_ClockConfig+0x364>)
 801d546:	693b      	ldr	r3, [r7, #16]
 801d548:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801d54a:	4b0a      	ldr	r3, [pc, #40]	@ (801d574 <HAL_RCC_ClockConfig+0x368>)
 801d54c:	681b      	ldr	r3, [r3, #0]
 801d54e:	4618      	mov	r0, r3
 801d550:	f7fc fda0 	bl	801a094 <HAL_InitTick>
 801d554:	4603      	mov	r3, r0
 801d556:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801d558:	7bfb      	ldrb	r3, [r7, #15]
}
 801d55a:	4618      	mov	r0, r3
 801d55c:	3718      	adds	r7, #24
 801d55e:	46bd      	mov	sp, r7
 801d560:	bd80      	pop	{r7, pc}
 801d562:	bf00      	nop
 801d564:	58024400 	.word	0x58024400
 801d568:	080277c0 	.word	0x080277c0
 801d56c:	20000004 	.word	0x20000004
 801d570:	20000000 	.word	0x20000000
 801d574:	20000020 	.word	0x20000020

0801d578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801d578:	b480      	push	{r7}
 801d57a:	b089      	sub	sp, #36	@ 0x24
 801d57c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801d57e:	4bb3      	ldr	r3, [pc, #716]	@ (801d84c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d580:	691b      	ldr	r3, [r3, #16]
 801d582:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d586:	2b18      	cmp	r3, #24
 801d588:	f200 8155 	bhi.w	801d836 <HAL_RCC_GetSysClockFreq+0x2be>
 801d58c:	a201      	add	r2, pc, #4	@ (adr r2, 801d594 <HAL_RCC_GetSysClockFreq+0x1c>)
 801d58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d592:	bf00      	nop
 801d594:	0801d5f9 	.word	0x0801d5f9
 801d598:	0801d837 	.word	0x0801d837
 801d59c:	0801d837 	.word	0x0801d837
 801d5a0:	0801d837 	.word	0x0801d837
 801d5a4:	0801d837 	.word	0x0801d837
 801d5a8:	0801d837 	.word	0x0801d837
 801d5ac:	0801d837 	.word	0x0801d837
 801d5b0:	0801d837 	.word	0x0801d837
 801d5b4:	0801d61f 	.word	0x0801d61f
 801d5b8:	0801d837 	.word	0x0801d837
 801d5bc:	0801d837 	.word	0x0801d837
 801d5c0:	0801d837 	.word	0x0801d837
 801d5c4:	0801d837 	.word	0x0801d837
 801d5c8:	0801d837 	.word	0x0801d837
 801d5cc:	0801d837 	.word	0x0801d837
 801d5d0:	0801d837 	.word	0x0801d837
 801d5d4:	0801d625 	.word	0x0801d625
 801d5d8:	0801d837 	.word	0x0801d837
 801d5dc:	0801d837 	.word	0x0801d837
 801d5e0:	0801d837 	.word	0x0801d837
 801d5e4:	0801d837 	.word	0x0801d837
 801d5e8:	0801d837 	.word	0x0801d837
 801d5ec:	0801d837 	.word	0x0801d837
 801d5f0:	0801d837 	.word	0x0801d837
 801d5f4:	0801d62b 	.word	0x0801d62b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d5f8:	4b94      	ldr	r3, [pc, #592]	@ (801d84c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d5fa:	681b      	ldr	r3, [r3, #0]
 801d5fc:	f003 0320 	and.w	r3, r3, #32
 801d600:	2b00      	cmp	r3, #0
 801d602:	d009      	beq.n	801d618 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d604:	4b91      	ldr	r3, [pc, #580]	@ (801d84c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d606:	681b      	ldr	r3, [r3, #0]
 801d608:	08db      	lsrs	r3, r3, #3
 801d60a:	f003 0303 	and.w	r3, r3, #3
 801d60e:	4a90      	ldr	r2, [pc, #576]	@ (801d850 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d610:	fa22 f303 	lsr.w	r3, r2, r3
 801d614:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801d616:	e111      	b.n	801d83c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801d618:	4b8d      	ldr	r3, [pc, #564]	@ (801d850 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d61a:	61bb      	str	r3, [r7, #24]
      break;
 801d61c:	e10e      	b.n	801d83c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801d61e:	4b8d      	ldr	r3, [pc, #564]	@ (801d854 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801d620:	61bb      	str	r3, [r7, #24]
      break;
 801d622:	e10b      	b.n	801d83c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801d624:	4b8c      	ldr	r3, [pc, #560]	@ (801d858 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801d626:	61bb      	str	r3, [r7, #24]
      break;
 801d628:	e108      	b.n	801d83c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d62a:	4b88      	ldr	r3, [pc, #544]	@ (801d84c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d62c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d62e:	f003 0303 	and.w	r3, r3, #3
 801d632:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801d634:	4b85      	ldr	r3, [pc, #532]	@ (801d84c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d638:	091b      	lsrs	r3, r3, #4
 801d63a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d63e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801d640:	4b82      	ldr	r3, [pc, #520]	@ (801d84c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d644:	f003 0301 	and.w	r3, r3, #1
 801d648:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801d64a:	4b80      	ldr	r3, [pc, #512]	@ (801d84c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d64c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d64e:	08db      	lsrs	r3, r3, #3
 801d650:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d654:	68fa      	ldr	r2, [r7, #12]
 801d656:	fb02 f303 	mul.w	r3, r2, r3
 801d65a:	ee07 3a90 	vmov	s15, r3
 801d65e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d662:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801d666:	693b      	ldr	r3, [r7, #16]
 801d668:	2b00      	cmp	r3, #0
 801d66a:	f000 80e1 	beq.w	801d830 <HAL_RCC_GetSysClockFreq+0x2b8>
 801d66e:	697b      	ldr	r3, [r7, #20]
 801d670:	2b02      	cmp	r3, #2
 801d672:	f000 8083 	beq.w	801d77c <HAL_RCC_GetSysClockFreq+0x204>
 801d676:	697b      	ldr	r3, [r7, #20]
 801d678:	2b02      	cmp	r3, #2
 801d67a:	f200 80a1 	bhi.w	801d7c0 <HAL_RCC_GetSysClockFreq+0x248>
 801d67e:	697b      	ldr	r3, [r7, #20]
 801d680:	2b00      	cmp	r3, #0
 801d682:	d003      	beq.n	801d68c <HAL_RCC_GetSysClockFreq+0x114>
 801d684:	697b      	ldr	r3, [r7, #20]
 801d686:	2b01      	cmp	r3, #1
 801d688:	d056      	beq.n	801d738 <HAL_RCC_GetSysClockFreq+0x1c0>
 801d68a:	e099      	b.n	801d7c0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d68c:	4b6f      	ldr	r3, [pc, #444]	@ (801d84c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d68e:	681b      	ldr	r3, [r3, #0]
 801d690:	f003 0320 	and.w	r3, r3, #32
 801d694:	2b00      	cmp	r3, #0
 801d696:	d02d      	beq.n	801d6f4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d698:	4b6c      	ldr	r3, [pc, #432]	@ (801d84c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d69a:	681b      	ldr	r3, [r3, #0]
 801d69c:	08db      	lsrs	r3, r3, #3
 801d69e:	f003 0303 	and.w	r3, r3, #3
 801d6a2:	4a6b      	ldr	r2, [pc, #428]	@ (801d850 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d6a4:	fa22 f303 	lsr.w	r3, r2, r3
 801d6a8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	ee07 3a90 	vmov	s15, r3
 801d6b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d6b4:	693b      	ldr	r3, [r7, #16]
 801d6b6:	ee07 3a90 	vmov	s15, r3
 801d6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d6be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d6c2:	4b62      	ldr	r3, [pc, #392]	@ (801d84c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d6c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d6c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d6ca:	ee07 3a90 	vmov	s15, r3
 801d6ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d6d2:	ed97 6a02 	vldr	s12, [r7, #8]
 801d6d6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801d85c <HAL_RCC_GetSysClockFreq+0x2e4>
 801d6da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d6de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d6e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d6e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d6ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d6ee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801d6f2:	e087      	b.n	801d804 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d6f4:	693b      	ldr	r3, [r7, #16]
 801d6f6:	ee07 3a90 	vmov	s15, r3
 801d6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d6fe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801d860 <HAL_RCC_GetSysClockFreq+0x2e8>
 801d702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d706:	4b51      	ldr	r3, [pc, #324]	@ (801d84c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d70a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d70e:	ee07 3a90 	vmov	s15, r3
 801d712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d716:	ed97 6a02 	vldr	s12, [r7, #8]
 801d71a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801d85c <HAL_RCC_GetSysClockFreq+0x2e4>
 801d71e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d72a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d72e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d732:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d736:	e065      	b.n	801d804 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d738:	693b      	ldr	r3, [r7, #16]
 801d73a:	ee07 3a90 	vmov	s15, r3
 801d73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d742:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801d864 <HAL_RCC_GetSysClockFreq+0x2ec>
 801d746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d74a:	4b40      	ldr	r3, [pc, #256]	@ (801d84c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d74c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d74e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d752:	ee07 3a90 	vmov	s15, r3
 801d756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d75a:	ed97 6a02 	vldr	s12, [r7, #8]
 801d75e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801d85c <HAL_RCC_GetSysClockFreq+0x2e4>
 801d762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d76a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d76e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d772:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d776:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d77a:	e043      	b.n	801d804 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d77c:	693b      	ldr	r3, [r7, #16]
 801d77e:	ee07 3a90 	vmov	s15, r3
 801d782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d786:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801d868 <HAL_RCC_GetSysClockFreq+0x2f0>
 801d78a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d78e:	4b2f      	ldr	r3, [pc, #188]	@ (801d84c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d796:	ee07 3a90 	vmov	s15, r3
 801d79a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d79e:	ed97 6a02 	vldr	s12, [r7, #8]
 801d7a2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801d85c <HAL_RCC_GetSysClockFreq+0x2e4>
 801d7a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d7aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d7ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d7b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d7b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d7ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d7be:	e021      	b.n	801d804 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d7c0:	693b      	ldr	r3, [r7, #16]
 801d7c2:	ee07 3a90 	vmov	s15, r3
 801d7c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d7ca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801d864 <HAL_RCC_GetSysClockFreq+0x2ec>
 801d7ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d7d2:	4b1e      	ldr	r3, [pc, #120]	@ (801d84c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d7d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d7d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d7da:	ee07 3a90 	vmov	s15, r3
 801d7de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d7e2:	ed97 6a02 	vldr	s12, [r7, #8]
 801d7e6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801d85c <HAL_RCC_GetSysClockFreq+0x2e4>
 801d7ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d7ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d7f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d7f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d7fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d7fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d802:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801d804:	4b11      	ldr	r3, [pc, #68]	@ (801d84c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d808:	0a5b      	lsrs	r3, r3, #9
 801d80a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d80e:	3301      	adds	r3, #1
 801d810:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801d812:	683b      	ldr	r3, [r7, #0]
 801d814:	ee07 3a90 	vmov	s15, r3
 801d818:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801d81c:	edd7 6a07 	vldr	s13, [r7, #28]
 801d820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d828:	ee17 3a90 	vmov	r3, s15
 801d82c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801d82e:	e005      	b.n	801d83c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801d830:	2300      	movs	r3, #0
 801d832:	61bb      	str	r3, [r7, #24]
      break;
 801d834:	e002      	b.n	801d83c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801d836:	4b07      	ldr	r3, [pc, #28]	@ (801d854 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801d838:	61bb      	str	r3, [r7, #24]
      break;
 801d83a:	bf00      	nop
  }

  return sysclockfreq;
 801d83c:	69bb      	ldr	r3, [r7, #24]
}
 801d83e:	4618      	mov	r0, r3
 801d840:	3724      	adds	r7, #36	@ 0x24
 801d842:	46bd      	mov	sp, r7
 801d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d848:	4770      	bx	lr
 801d84a:	bf00      	nop
 801d84c:	58024400 	.word	0x58024400
 801d850:	03d09000 	.word	0x03d09000
 801d854:	003d0900 	.word	0x003d0900
 801d858:	017d7840 	.word	0x017d7840
 801d85c:	46000000 	.word	0x46000000
 801d860:	4c742400 	.word	0x4c742400
 801d864:	4a742400 	.word	0x4a742400
 801d868:	4bbebc20 	.word	0x4bbebc20

0801d86c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801d86c:	b580      	push	{r7, lr}
 801d86e:	b082      	sub	sp, #8
 801d870:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801d872:	f7ff fe81 	bl	801d578 <HAL_RCC_GetSysClockFreq>
 801d876:	4602      	mov	r2, r0
 801d878:	4b10      	ldr	r3, [pc, #64]	@ (801d8bc <HAL_RCC_GetHCLKFreq+0x50>)
 801d87a:	699b      	ldr	r3, [r3, #24]
 801d87c:	0a1b      	lsrs	r3, r3, #8
 801d87e:	f003 030f 	and.w	r3, r3, #15
 801d882:	490f      	ldr	r1, [pc, #60]	@ (801d8c0 <HAL_RCC_GetHCLKFreq+0x54>)
 801d884:	5ccb      	ldrb	r3, [r1, r3]
 801d886:	f003 031f 	and.w	r3, r3, #31
 801d88a:	fa22 f303 	lsr.w	r3, r2, r3
 801d88e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801d890:	4b0a      	ldr	r3, [pc, #40]	@ (801d8bc <HAL_RCC_GetHCLKFreq+0x50>)
 801d892:	699b      	ldr	r3, [r3, #24]
 801d894:	f003 030f 	and.w	r3, r3, #15
 801d898:	4a09      	ldr	r2, [pc, #36]	@ (801d8c0 <HAL_RCC_GetHCLKFreq+0x54>)
 801d89a:	5cd3      	ldrb	r3, [r2, r3]
 801d89c:	f003 031f 	and.w	r3, r3, #31
 801d8a0:	687a      	ldr	r2, [r7, #4]
 801d8a2:	fa22 f303 	lsr.w	r3, r2, r3
 801d8a6:	4a07      	ldr	r2, [pc, #28]	@ (801d8c4 <HAL_RCC_GetHCLKFreq+0x58>)
 801d8a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801d8aa:	4a07      	ldr	r2, [pc, #28]	@ (801d8c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801d8b0:	4b04      	ldr	r3, [pc, #16]	@ (801d8c4 <HAL_RCC_GetHCLKFreq+0x58>)
 801d8b2:	681b      	ldr	r3, [r3, #0]
}
 801d8b4:	4618      	mov	r0, r3
 801d8b6:	3708      	adds	r7, #8
 801d8b8:	46bd      	mov	sp, r7
 801d8ba:	bd80      	pop	{r7, pc}
 801d8bc:	58024400 	.word	0x58024400
 801d8c0:	080277c0 	.word	0x080277c0
 801d8c4:	20000004 	.word	0x20000004
 801d8c8:	20000000 	.word	0x20000000

0801d8cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801d8cc:	b580      	push	{r7, lr}
 801d8ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801d8d0:	f7ff ffcc 	bl	801d86c <HAL_RCC_GetHCLKFreq>
 801d8d4:	4602      	mov	r2, r0
 801d8d6:	4b06      	ldr	r3, [pc, #24]	@ (801d8f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 801d8d8:	69db      	ldr	r3, [r3, #28]
 801d8da:	091b      	lsrs	r3, r3, #4
 801d8dc:	f003 0307 	and.w	r3, r3, #7
 801d8e0:	4904      	ldr	r1, [pc, #16]	@ (801d8f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 801d8e2:	5ccb      	ldrb	r3, [r1, r3]
 801d8e4:	f003 031f 	and.w	r3, r3, #31
 801d8e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801d8ec:	4618      	mov	r0, r3
 801d8ee:	bd80      	pop	{r7, pc}
 801d8f0:	58024400 	.word	0x58024400
 801d8f4:	080277c0 	.word	0x080277c0

0801d8f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801d8f8:	b580      	push	{r7, lr}
 801d8fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801d8fc:	f7ff ffb6 	bl	801d86c <HAL_RCC_GetHCLKFreq>
 801d900:	4602      	mov	r2, r0
 801d902:	4b06      	ldr	r3, [pc, #24]	@ (801d91c <HAL_RCC_GetPCLK2Freq+0x24>)
 801d904:	69db      	ldr	r3, [r3, #28]
 801d906:	0a1b      	lsrs	r3, r3, #8
 801d908:	f003 0307 	and.w	r3, r3, #7
 801d90c:	4904      	ldr	r1, [pc, #16]	@ (801d920 <HAL_RCC_GetPCLK2Freq+0x28>)
 801d90e:	5ccb      	ldrb	r3, [r1, r3]
 801d910:	f003 031f 	and.w	r3, r3, #31
 801d914:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801d918:	4618      	mov	r0, r3
 801d91a:	bd80      	pop	{r7, pc}
 801d91c:	58024400 	.word	0x58024400
 801d920:	080277c0 	.word	0x080277c0

0801d924 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801d924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d928:	b0ca      	sub	sp, #296	@ 0x128
 801d92a:	af00      	add	r7, sp, #0
 801d92c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801d930:	2300      	movs	r3, #0
 801d932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801d936:	2300      	movs	r3, #0
 801d938:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801d93c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d940:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d944:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801d948:	2500      	movs	r5, #0
 801d94a:	ea54 0305 	orrs.w	r3, r4, r5
 801d94e:	d049      	beq.n	801d9e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801d950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d954:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d956:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d95a:	d02f      	beq.n	801d9bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 801d95c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d960:	d828      	bhi.n	801d9b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d962:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d966:	d01a      	beq.n	801d99e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801d968:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d96c:	d822      	bhi.n	801d9b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d96e:	2b00      	cmp	r3, #0
 801d970:	d003      	beq.n	801d97a <HAL_RCCEx_PeriphCLKConfig+0x56>
 801d972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801d976:	d007      	beq.n	801d988 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801d978:	e01c      	b.n	801d9b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d97a:	4bb8      	ldr	r3, [pc, #736]	@ (801dc5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d97e:	4ab7      	ldr	r2, [pc, #732]	@ (801dc5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d984:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d986:	e01a      	b.n	801d9be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d98c:	3308      	adds	r3, #8
 801d98e:	2102      	movs	r1, #2
 801d990:	4618      	mov	r0, r3
 801d992:	f001 fc8f 	bl	801f2b4 <RCCEx_PLL2_Config>
 801d996:	4603      	mov	r3, r0
 801d998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d99c:	e00f      	b.n	801d9be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9a2:	3328      	adds	r3, #40	@ 0x28
 801d9a4:	2102      	movs	r1, #2
 801d9a6:	4618      	mov	r0, r3
 801d9a8:	f001 fd36 	bl	801f418 <RCCEx_PLL3_Config>
 801d9ac:	4603      	mov	r3, r0
 801d9ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d9b2:	e004      	b.n	801d9be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d9b4:	2301      	movs	r3, #1
 801d9b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d9ba:	e000      	b.n	801d9be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801d9bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d9be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d9c2:	2b00      	cmp	r3, #0
 801d9c4:	d10a      	bne.n	801d9dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801d9c6:	4ba5      	ldr	r3, [pc, #660]	@ (801dc5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d9c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d9ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801d9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d9d4:	4aa1      	ldr	r2, [pc, #644]	@ (801dc5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d9d6:	430b      	orrs	r3, r1
 801d9d8:	6513      	str	r3, [r2, #80]	@ 0x50
 801d9da:	e003      	b.n	801d9e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d9dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d9e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801d9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9ec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801d9f0:	f04f 0900 	mov.w	r9, #0
 801d9f4:	ea58 0309 	orrs.w	r3, r8, r9
 801d9f8:	d047      	beq.n	801da8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801d9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801da00:	2b04      	cmp	r3, #4
 801da02:	d82a      	bhi.n	801da5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 801da04:	a201      	add	r2, pc, #4	@ (adr r2, 801da0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801da06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801da0a:	bf00      	nop
 801da0c:	0801da21 	.word	0x0801da21
 801da10:	0801da2f 	.word	0x0801da2f
 801da14:	0801da45 	.word	0x0801da45
 801da18:	0801da63 	.word	0x0801da63
 801da1c:	0801da63 	.word	0x0801da63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801da20:	4b8e      	ldr	r3, [pc, #568]	@ (801dc5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801da22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da24:	4a8d      	ldr	r2, [pc, #564]	@ (801dc5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801da26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801da2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801da2c:	e01a      	b.n	801da64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801da2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da32:	3308      	adds	r3, #8
 801da34:	2100      	movs	r1, #0
 801da36:	4618      	mov	r0, r3
 801da38:	f001 fc3c 	bl	801f2b4 <RCCEx_PLL2_Config>
 801da3c:	4603      	mov	r3, r0
 801da3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801da42:	e00f      	b.n	801da64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801da44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da48:	3328      	adds	r3, #40	@ 0x28
 801da4a:	2100      	movs	r1, #0
 801da4c:	4618      	mov	r0, r3
 801da4e:	f001 fce3 	bl	801f418 <RCCEx_PLL3_Config>
 801da52:	4603      	mov	r3, r0
 801da54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801da58:	e004      	b.n	801da64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801da5a:	2301      	movs	r3, #1
 801da5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801da60:	e000      	b.n	801da64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801da62:	bf00      	nop
    }

    if (ret == HAL_OK)
 801da64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da68:	2b00      	cmp	r3, #0
 801da6a:	d10a      	bne.n	801da82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801da6c:	4b7b      	ldr	r3, [pc, #492]	@ (801dc5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801da6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801da70:	f023 0107 	bic.w	r1, r3, #7
 801da74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801da7a:	4a78      	ldr	r2, [pc, #480]	@ (801dc5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801da7c:	430b      	orrs	r3, r1
 801da7e:	6513      	str	r3, [r2, #80]	@ 0x50
 801da80:	e003      	b.n	801da8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801da82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801da8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da92:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801da96:	f04f 0b00 	mov.w	fp, #0
 801da9a:	ea5a 030b 	orrs.w	r3, sl, fp
 801da9e:	d04c      	beq.n	801db3a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801daa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801daa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801daa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801daaa:	d030      	beq.n	801db0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801daac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801dab0:	d829      	bhi.n	801db06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801dab2:	2bc0      	cmp	r3, #192	@ 0xc0
 801dab4:	d02d      	beq.n	801db12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801dab6:	2bc0      	cmp	r3, #192	@ 0xc0
 801dab8:	d825      	bhi.n	801db06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801daba:	2b80      	cmp	r3, #128	@ 0x80
 801dabc:	d018      	beq.n	801daf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801dabe:	2b80      	cmp	r3, #128	@ 0x80
 801dac0:	d821      	bhi.n	801db06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	d002      	beq.n	801dacc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801dac6:	2b40      	cmp	r3, #64	@ 0x40
 801dac8:	d007      	beq.n	801dada <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801daca:	e01c      	b.n	801db06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dacc:	4b63      	ldr	r3, [pc, #396]	@ (801dc5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dad0:	4a62      	ldr	r2, [pc, #392]	@ (801dc5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dad2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801dad6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801dad8:	e01c      	b.n	801db14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dade:	3308      	adds	r3, #8
 801dae0:	2100      	movs	r1, #0
 801dae2:	4618      	mov	r0, r3
 801dae4:	f001 fbe6 	bl	801f2b4 <RCCEx_PLL2_Config>
 801dae8:	4603      	mov	r3, r0
 801daea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801daee:	e011      	b.n	801db14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801daf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801daf4:	3328      	adds	r3, #40	@ 0x28
 801daf6:	2100      	movs	r1, #0
 801daf8:	4618      	mov	r0, r3
 801dafa:	f001 fc8d 	bl	801f418 <RCCEx_PLL3_Config>
 801dafe:	4603      	mov	r3, r0
 801db00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801db04:	e006      	b.n	801db14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801db06:	2301      	movs	r3, #1
 801db08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801db0c:	e002      	b.n	801db14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801db0e:	bf00      	nop
 801db10:	e000      	b.n	801db14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801db12:	bf00      	nop
    }

    if (ret == HAL_OK)
 801db14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db18:	2b00      	cmp	r3, #0
 801db1a:	d10a      	bne.n	801db32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801db1c:	4b4f      	ldr	r3, [pc, #316]	@ (801dc5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801db1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801db20:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801db24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801db2a:	4a4c      	ldr	r2, [pc, #304]	@ (801dc5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801db2c:	430b      	orrs	r3, r1
 801db2e:	6513      	str	r3, [r2, #80]	@ 0x50
 801db30:	e003      	b.n	801db3a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801db32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801db3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db42:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801db46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801db4a:	2300      	movs	r3, #0
 801db4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801db50:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801db54:	460b      	mov	r3, r1
 801db56:	4313      	orrs	r3, r2
 801db58:	d053      	beq.n	801dc02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801db5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801db62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801db66:	d035      	beq.n	801dbd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801db68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801db6c:	d82e      	bhi.n	801dbcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801db6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801db72:	d031      	beq.n	801dbd8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801db74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801db78:	d828      	bhi.n	801dbcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801db7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801db7e:	d01a      	beq.n	801dbb6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801db80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801db84:	d822      	bhi.n	801dbcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801db86:	2b00      	cmp	r3, #0
 801db88:	d003      	beq.n	801db92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801db8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801db8e:	d007      	beq.n	801dba0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801db90:	e01c      	b.n	801dbcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801db92:	4b32      	ldr	r3, [pc, #200]	@ (801dc5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801db94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801db96:	4a31      	ldr	r2, [pc, #196]	@ (801dc5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801db98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801db9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801db9e:	e01c      	b.n	801dbda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dba4:	3308      	adds	r3, #8
 801dba6:	2100      	movs	r1, #0
 801dba8:	4618      	mov	r0, r3
 801dbaa:	f001 fb83 	bl	801f2b4 <RCCEx_PLL2_Config>
 801dbae:	4603      	mov	r3, r0
 801dbb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801dbb4:	e011      	b.n	801dbda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801dbb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbba:	3328      	adds	r3, #40	@ 0x28
 801dbbc:	2100      	movs	r1, #0
 801dbbe:	4618      	mov	r0, r3
 801dbc0:	f001 fc2a 	bl	801f418 <RCCEx_PLL3_Config>
 801dbc4:	4603      	mov	r3, r0
 801dbc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801dbca:	e006      	b.n	801dbda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801dbcc:	2301      	movs	r3, #1
 801dbce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dbd2:	e002      	b.n	801dbda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801dbd4:	bf00      	nop
 801dbd6:	e000      	b.n	801dbda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801dbd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dbda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dbde:	2b00      	cmp	r3, #0
 801dbe0:	d10b      	bne.n	801dbfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801dbe2:	4b1e      	ldr	r3, [pc, #120]	@ (801dc5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dbe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dbe6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801dbea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801dbf2:	4a1a      	ldr	r2, [pc, #104]	@ (801dc5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dbf4:	430b      	orrs	r3, r1
 801dbf6:	6593      	str	r3, [r2, #88]	@ 0x58
 801dbf8:	e003      	b.n	801dc02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dbfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dbfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801dc02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc0a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801dc0e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801dc12:	2300      	movs	r3, #0
 801dc14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801dc18:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801dc1c:	460b      	mov	r3, r1
 801dc1e:	4313      	orrs	r3, r2
 801dc20:	d056      	beq.n	801dcd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801dc22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801dc2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801dc2e:	d038      	beq.n	801dca2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801dc30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801dc34:	d831      	bhi.n	801dc9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801dc36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801dc3a:	d034      	beq.n	801dca6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801dc3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801dc40:	d82b      	bhi.n	801dc9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801dc42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801dc46:	d01d      	beq.n	801dc84 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801dc48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801dc4c:	d825      	bhi.n	801dc9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801dc4e:	2b00      	cmp	r3, #0
 801dc50:	d006      	beq.n	801dc60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801dc52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801dc56:	d00a      	beq.n	801dc6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801dc58:	e01f      	b.n	801dc9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801dc5a:	bf00      	nop
 801dc5c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dc60:	4ba2      	ldr	r3, [pc, #648]	@ (801deec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dc62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dc64:	4aa1      	ldr	r2, [pc, #644]	@ (801deec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dc66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801dc6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801dc6c:	e01c      	b.n	801dca8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dc6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc72:	3308      	adds	r3, #8
 801dc74:	2100      	movs	r1, #0
 801dc76:	4618      	mov	r0, r3
 801dc78:	f001 fb1c 	bl	801f2b4 <RCCEx_PLL2_Config>
 801dc7c:	4603      	mov	r3, r0
 801dc7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801dc82:	e011      	b.n	801dca8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801dc84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc88:	3328      	adds	r3, #40	@ 0x28
 801dc8a:	2100      	movs	r1, #0
 801dc8c:	4618      	mov	r0, r3
 801dc8e:	f001 fbc3 	bl	801f418 <RCCEx_PLL3_Config>
 801dc92:	4603      	mov	r3, r0
 801dc94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801dc98:	e006      	b.n	801dca8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801dc9a:	2301      	movs	r3, #1
 801dc9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dca0:	e002      	b.n	801dca8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801dca2:	bf00      	nop
 801dca4:	e000      	b.n	801dca8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801dca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dca8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dcac:	2b00      	cmp	r3, #0
 801dcae:	d10b      	bne.n	801dcc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801dcb0:	4b8e      	ldr	r3, [pc, #568]	@ (801deec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dcb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dcb4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801dcb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801dcc0:	4a8a      	ldr	r2, [pc, #552]	@ (801deec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dcc2:	430b      	orrs	r3, r1
 801dcc4:	6593      	str	r3, [r2, #88]	@ 0x58
 801dcc6:	e003      	b.n	801dcd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dcc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dccc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801dcd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcd8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801dcdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801dce0:	2300      	movs	r3, #0
 801dce2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801dce6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801dcea:	460b      	mov	r3, r1
 801dcec:	4313      	orrs	r3, r2
 801dcee:	d03a      	beq.n	801dd66 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801dcf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dcf6:	2b30      	cmp	r3, #48	@ 0x30
 801dcf8:	d01f      	beq.n	801dd3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 801dcfa:	2b30      	cmp	r3, #48	@ 0x30
 801dcfc:	d819      	bhi.n	801dd32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801dcfe:	2b20      	cmp	r3, #32
 801dd00:	d00c      	beq.n	801dd1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801dd02:	2b20      	cmp	r3, #32
 801dd04:	d815      	bhi.n	801dd32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801dd06:	2b00      	cmp	r3, #0
 801dd08:	d019      	beq.n	801dd3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801dd0a:	2b10      	cmp	r3, #16
 801dd0c:	d111      	bne.n	801dd32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dd0e:	4b77      	ldr	r3, [pc, #476]	@ (801deec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dd10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dd12:	4a76      	ldr	r2, [pc, #472]	@ (801deec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dd14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801dd18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801dd1a:	e011      	b.n	801dd40 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801dd1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd20:	3308      	adds	r3, #8
 801dd22:	2102      	movs	r1, #2
 801dd24:	4618      	mov	r0, r3
 801dd26:	f001 fac5 	bl	801f2b4 <RCCEx_PLL2_Config>
 801dd2a:	4603      	mov	r3, r0
 801dd2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801dd30:	e006      	b.n	801dd40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801dd32:	2301      	movs	r3, #1
 801dd34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dd38:	e002      	b.n	801dd40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801dd3a:	bf00      	nop
 801dd3c:	e000      	b.n	801dd40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801dd3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dd40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd44:	2b00      	cmp	r3, #0
 801dd46:	d10a      	bne.n	801dd5e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801dd48:	4b68      	ldr	r3, [pc, #416]	@ (801deec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dd4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dd4c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801dd50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dd56:	4a65      	ldr	r2, [pc, #404]	@ (801deec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dd58:	430b      	orrs	r3, r1
 801dd5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801dd5c:	e003      	b.n	801dd66 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dd5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801dd66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd6e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801dd72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801dd76:	2300      	movs	r3, #0
 801dd78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801dd7c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801dd80:	460b      	mov	r3, r1
 801dd82:	4313      	orrs	r3, r2
 801dd84:	d051      	beq.n	801de2a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801dd86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dd8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801dd90:	d035      	beq.n	801ddfe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801dd92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801dd96:	d82e      	bhi.n	801ddf6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801dd98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801dd9c:	d031      	beq.n	801de02 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801dd9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801dda2:	d828      	bhi.n	801ddf6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801dda4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801dda8:	d01a      	beq.n	801dde0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801ddaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ddae:	d822      	bhi.n	801ddf6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	d003      	beq.n	801ddbc <HAL_RCCEx_PeriphCLKConfig+0x498>
 801ddb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ddb8:	d007      	beq.n	801ddca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801ddba:	e01c      	b.n	801ddf6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ddbc:	4b4b      	ldr	r3, [pc, #300]	@ (801deec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ddbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ddc0:	4a4a      	ldr	r2, [pc, #296]	@ (801deec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ddc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ddc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801ddc8:	e01c      	b.n	801de04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ddca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddce:	3308      	adds	r3, #8
 801ddd0:	2100      	movs	r1, #0
 801ddd2:	4618      	mov	r0, r3
 801ddd4:	f001 fa6e 	bl	801f2b4 <RCCEx_PLL2_Config>
 801ddd8:	4603      	mov	r3, r0
 801ddda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801ddde:	e011      	b.n	801de04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801dde0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dde4:	3328      	adds	r3, #40	@ 0x28
 801dde6:	2100      	movs	r1, #0
 801dde8:	4618      	mov	r0, r3
 801ddea:	f001 fb15 	bl	801f418 <RCCEx_PLL3_Config>
 801ddee:	4603      	mov	r3, r0
 801ddf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801ddf4:	e006      	b.n	801de04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ddf6:	2301      	movs	r3, #1
 801ddf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ddfc:	e002      	b.n	801de04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801ddfe:	bf00      	nop
 801de00:	e000      	b.n	801de04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801de02:	bf00      	nop
    }

    if (ret == HAL_OK)
 801de04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de08:	2b00      	cmp	r3, #0
 801de0a:	d10a      	bne.n	801de22 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801de0c:	4b37      	ldr	r3, [pc, #220]	@ (801deec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801de0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801de10:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801de14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801de1a:	4a34      	ldr	r2, [pc, #208]	@ (801deec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801de1c:	430b      	orrs	r3, r1
 801de1e:	6513      	str	r3, [r2, #80]	@ 0x50
 801de20:	e003      	b.n	801de2a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801de22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801de2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de32:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801de36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801de3a:	2300      	movs	r3, #0
 801de3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801de40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801de44:	460b      	mov	r3, r1
 801de46:	4313      	orrs	r3, r2
 801de48:	d056      	beq.n	801def8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801de4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801de50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801de54:	d033      	beq.n	801debe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801de56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801de5a:	d82c      	bhi.n	801deb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801de5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801de60:	d02f      	beq.n	801dec2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801de62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801de66:	d826      	bhi.n	801deb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801de68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801de6c:	d02b      	beq.n	801dec6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801de6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801de72:	d820      	bhi.n	801deb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801de74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801de78:	d012      	beq.n	801dea0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801de7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801de7e:	d81a      	bhi.n	801deb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801de80:	2b00      	cmp	r3, #0
 801de82:	d022      	beq.n	801deca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801de84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801de88:	d115      	bne.n	801deb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801de8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de8e:	3308      	adds	r3, #8
 801de90:	2101      	movs	r1, #1
 801de92:	4618      	mov	r0, r3
 801de94:	f001 fa0e 	bl	801f2b4 <RCCEx_PLL2_Config>
 801de98:	4603      	mov	r3, r0
 801de9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801de9e:	e015      	b.n	801decc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801dea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dea4:	3328      	adds	r3, #40	@ 0x28
 801dea6:	2101      	movs	r1, #1
 801dea8:	4618      	mov	r0, r3
 801deaa:	f001 fab5 	bl	801f418 <RCCEx_PLL3_Config>
 801deae:	4603      	mov	r3, r0
 801deb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801deb4:	e00a      	b.n	801decc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801deb6:	2301      	movs	r3, #1
 801deb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801debc:	e006      	b.n	801decc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801debe:	bf00      	nop
 801dec0:	e004      	b.n	801decc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801dec2:	bf00      	nop
 801dec4:	e002      	b.n	801decc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801dec6:	bf00      	nop
 801dec8:	e000      	b.n	801decc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801deca:	bf00      	nop
    }

    if (ret == HAL_OK)
 801decc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ded0:	2b00      	cmp	r3, #0
 801ded2:	d10d      	bne.n	801def0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801ded4:	4b05      	ldr	r3, [pc, #20]	@ (801deec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ded6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ded8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801dedc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dee0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801dee2:	4a02      	ldr	r2, [pc, #8]	@ (801deec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dee4:	430b      	orrs	r3, r1
 801dee6:	6513      	str	r3, [r2, #80]	@ 0x50
 801dee8:	e006      	b.n	801def8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801deea:	bf00      	nop
 801deec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801def0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801def4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801def8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801defc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df00:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801df04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801df08:	2300      	movs	r3, #0
 801df0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801df0e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801df12:	460b      	mov	r3, r1
 801df14:	4313      	orrs	r3, r2
 801df16:	d055      	beq.n	801dfc4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801df18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801df20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801df24:	d033      	beq.n	801df8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801df26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801df2a:	d82c      	bhi.n	801df86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801df2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801df30:	d02f      	beq.n	801df92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801df32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801df36:	d826      	bhi.n	801df86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801df38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801df3c:	d02b      	beq.n	801df96 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801df3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801df42:	d820      	bhi.n	801df86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801df44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801df48:	d012      	beq.n	801df70 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801df4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801df4e:	d81a      	bhi.n	801df86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801df50:	2b00      	cmp	r3, #0
 801df52:	d022      	beq.n	801df9a <HAL_RCCEx_PeriphCLKConfig+0x676>
 801df54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801df58:	d115      	bne.n	801df86 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801df5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df5e:	3308      	adds	r3, #8
 801df60:	2101      	movs	r1, #1
 801df62:	4618      	mov	r0, r3
 801df64:	f001 f9a6 	bl	801f2b4 <RCCEx_PLL2_Config>
 801df68:	4603      	mov	r3, r0
 801df6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801df6e:	e015      	b.n	801df9c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801df70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df74:	3328      	adds	r3, #40	@ 0x28
 801df76:	2101      	movs	r1, #1
 801df78:	4618      	mov	r0, r3
 801df7a:	f001 fa4d 	bl	801f418 <RCCEx_PLL3_Config>
 801df7e:	4603      	mov	r3, r0
 801df80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801df84:	e00a      	b.n	801df9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801df86:	2301      	movs	r3, #1
 801df88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801df8c:	e006      	b.n	801df9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801df8e:	bf00      	nop
 801df90:	e004      	b.n	801df9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801df92:	bf00      	nop
 801df94:	e002      	b.n	801df9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801df96:	bf00      	nop
 801df98:	e000      	b.n	801df9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801df9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801df9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dfa0:	2b00      	cmp	r3, #0
 801dfa2:	d10b      	bne.n	801dfbc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801dfa4:	4ba3      	ldr	r3, [pc, #652]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dfa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dfa8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801dfac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801dfb4:	4a9f      	ldr	r2, [pc, #636]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dfb6:	430b      	orrs	r3, r1
 801dfb8:	6593      	str	r3, [r2, #88]	@ 0x58
 801dfba:	e003      	b.n	801dfc4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dfbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dfc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801dfc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfcc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801dfd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801dfd4:	2300      	movs	r3, #0
 801dfd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801dfda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801dfde:	460b      	mov	r3, r1
 801dfe0:	4313      	orrs	r3, r2
 801dfe2:	d037      	beq.n	801e054 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801dfe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dfea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801dfee:	d00e      	beq.n	801e00e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801dff0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801dff4:	d816      	bhi.n	801e024 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801dff6:	2b00      	cmp	r3, #0
 801dff8:	d018      	beq.n	801e02c <HAL_RCCEx_PeriphCLKConfig+0x708>
 801dffa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801dffe:	d111      	bne.n	801e024 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e000:	4b8c      	ldr	r3, [pc, #560]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e004:	4a8b      	ldr	r2, [pc, #556]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e00a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801e00c:	e00f      	b.n	801e02e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e012:	3308      	adds	r3, #8
 801e014:	2101      	movs	r1, #1
 801e016:	4618      	mov	r0, r3
 801e018:	f001 f94c 	bl	801f2b4 <RCCEx_PLL2_Config>
 801e01c:	4603      	mov	r3, r0
 801e01e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801e022:	e004      	b.n	801e02e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e024:	2301      	movs	r3, #1
 801e026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e02a:	e000      	b.n	801e02e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801e02c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e02e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e032:	2b00      	cmp	r3, #0
 801e034:	d10a      	bne.n	801e04c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801e036:	4b7f      	ldr	r3, [pc, #508]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e03a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801e03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e044:	4a7b      	ldr	r2, [pc, #492]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e046:	430b      	orrs	r3, r1
 801e048:	6513      	str	r3, [r2, #80]	@ 0x50
 801e04a:	e003      	b.n	801e054 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e04c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e050:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801e054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e05c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801e060:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801e064:	2300      	movs	r3, #0
 801e066:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801e06a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801e06e:	460b      	mov	r3, r1
 801e070:	4313      	orrs	r3, r2
 801e072:	d039      	beq.n	801e0e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801e074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e07a:	2b03      	cmp	r3, #3
 801e07c:	d81c      	bhi.n	801e0b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801e07e:	a201      	add	r2, pc, #4	@ (adr r2, 801e084 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801e080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e084:	0801e0c1 	.word	0x0801e0c1
 801e088:	0801e095 	.word	0x0801e095
 801e08c:	0801e0a3 	.word	0x0801e0a3
 801e090:	0801e0c1 	.word	0x0801e0c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e094:	4b67      	ldr	r3, [pc, #412]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e098:	4a66      	ldr	r2, [pc, #408]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e09a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e09e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801e0a0:	e00f      	b.n	801e0c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0a6:	3308      	adds	r3, #8
 801e0a8:	2102      	movs	r1, #2
 801e0aa:	4618      	mov	r0, r3
 801e0ac:	f001 f902 	bl	801f2b4 <RCCEx_PLL2_Config>
 801e0b0:	4603      	mov	r3, r0
 801e0b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801e0b6:	e004      	b.n	801e0c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801e0b8:	2301      	movs	r3, #1
 801e0ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e0be:	e000      	b.n	801e0c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801e0c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e0c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0c6:	2b00      	cmp	r3, #0
 801e0c8:	d10a      	bne.n	801e0e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801e0ca:	4b5a      	ldr	r3, [pc, #360]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e0cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e0ce:	f023 0103 	bic.w	r1, r3, #3
 801e0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e0d8:	4a56      	ldr	r2, [pc, #344]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e0da:	430b      	orrs	r3, r1
 801e0dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e0de:	e003      	b.n	801e0e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e0e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801e0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801e0f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801e0f8:	2300      	movs	r3, #0
 801e0fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801e0fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801e102:	460b      	mov	r3, r1
 801e104:	4313      	orrs	r3, r2
 801e106:	f000 809f 	beq.w	801e248 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801e10a:	4b4b      	ldr	r3, [pc, #300]	@ (801e238 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e10c:	681b      	ldr	r3, [r3, #0]
 801e10e:	4a4a      	ldr	r2, [pc, #296]	@ (801e238 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801e114:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801e116:	f7fc f807 	bl	801a128 <HAL_GetTick>
 801e11a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801e11e:	e00b      	b.n	801e138 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801e120:	f7fc f802 	bl	801a128 <HAL_GetTick>
 801e124:	4602      	mov	r2, r0
 801e126:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801e12a:	1ad3      	subs	r3, r2, r3
 801e12c:	2b64      	cmp	r3, #100	@ 0x64
 801e12e:	d903      	bls.n	801e138 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801e130:	2303      	movs	r3, #3
 801e132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e136:	e005      	b.n	801e144 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801e138:	4b3f      	ldr	r3, [pc, #252]	@ (801e238 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e140:	2b00      	cmp	r3, #0
 801e142:	d0ed      	beq.n	801e120 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801e144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e148:	2b00      	cmp	r3, #0
 801e14a:	d179      	bne.n	801e240 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801e14c:	4b39      	ldr	r3, [pc, #228]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e14e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801e150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e154:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e158:	4053      	eors	r3, r2
 801e15a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801e15e:	2b00      	cmp	r3, #0
 801e160:	d015      	beq.n	801e18e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801e162:	4b34      	ldr	r3, [pc, #208]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801e16a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801e16e:	4b31      	ldr	r3, [pc, #196]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e172:	4a30      	ldr	r2, [pc, #192]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801e178:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801e17a:	4b2e      	ldr	r3, [pc, #184]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e17c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e17e:	4a2d      	ldr	r2, [pc, #180]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e180:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801e184:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801e186:	4a2b      	ldr	r2, [pc, #172]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e188:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801e18c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801e18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e192:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e19a:	d118      	bne.n	801e1ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e19c:	f7fb ffc4 	bl	801a128 <HAL_GetTick>
 801e1a0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801e1a4:	e00d      	b.n	801e1c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801e1a6:	f7fb ffbf 	bl	801a128 <HAL_GetTick>
 801e1aa:	4602      	mov	r2, r0
 801e1ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801e1b0:	1ad2      	subs	r2, r2, r3
 801e1b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 801e1b6:	429a      	cmp	r2, r3
 801e1b8:	d903      	bls.n	801e1c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801e1ba:	2303      	movs	r3, #3
 801e1bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801e1c0:	e005      	b.n	801e1ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801e1c2:	4b1c      	ldr	r3, [pc, #112]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e1c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e1c6:	f003 0302 	and.w	r3, r3, #2
 801e1ca:	2b00      	cmp	r3, #0
 801e1cc:	d0eb      	beq.n	801e1a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801e1ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	d129      	bne.n	801e22a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801e1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e1de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801e1e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e1e6:	d10e      	bne.n	801e206 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801e1e8:	4b12      	ldr	r3, [pc, #72]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e1ea:	691b      	ldr	r3, [r3, #16]
 801e1ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801e1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e1f8:	091a      	lsrs	r2, r3, #4
 801e1fa:	4b10      	ldr	r3, [pc, #64]	@ (801e23c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801e1fc:	4013      	ands	r3, r2
 801e1fe:	4a0d      	ldr	r2, [pc, #52]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e200:	430b      	orrs	r3, r1
 801e202:	6113      	str	r3, [r2, #16]
 801e204:	e005      	b.n	801e212 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801e206:	4b0b      	ldr	r3, [pc, #44]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e208:	691b      	ldr	r3, [r3, #16]
 801e20a:	4a0a      	ldr	r2, [pc, #40]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e20c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801e210:	6113      	str	r3, [r2, #16]
 801e212:	4b08      	ldr	r3, [pc, #32]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e214:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801e216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e21a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e21e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e222:	4a04      	ldr	r2, [pc, #16]	@ (801e234 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e224:	430b      	orrs	r3, r1
 801e226:	6713      	str	r3, [r2, #112]	@ 0x70
 801e228:	e00e      	b.n	801e248 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801e22a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e22e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801e232:	e009      	b.n	801e248 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801e234:	58024400 	.word	0x58024400
 801e238:	58024800 	.word	0x58024800
 801e23c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e244:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801e248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e250:	f002 0301 	and.w	r3, r2, #1
 801e254:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801e258:	2300      	movs	r3, #0
 801e25a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801e25e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801e262:	460b      	mov	r3, r1
 801e264:	4313      	orrs	r3, r2
 801e266:	f000 8089 	beq.w	801e37c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801e26a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e26e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e270:	2b28      	cmp	r3, #40	@ 0x28
 801e272:	d86b      	bhi.n	801e34c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801e274:	a201      	add	r2, pc, #4	@ (adr r2, 801e27c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801e276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e27a:	bf00      	nop
 801e27c:	0801e355 	.word	0x0801e355
 801e280:	0801e34d 	.word	0x0801e34d
 801e284:	0801e34d 	.word	0x0801e34d
 801e288:	0801e34d 	.word	0x0801e34d
 801e28c:	0801e34d 	.word	0x0801e34d
 801e290:	0801e34d 	.word	0x0801e34d
 801e294:	0801e34d 	.word	0x0801e34d
 801e298:	0801e34d 	.word	0x0801e34d
 801e29c:	0801e321 	.word	0x0801e321
 801e2a0:	0801e34d 	.word	0x0801e34d
 801e2a4:	0801e34d 	.word	0x0801e34d
 801e2a8:	0801e34d 	.word	0x0801e34d
 801e2ac:	0801e34d 	.word	0x0801e34d
 801e2b0:	0801e34d 	.word	0x0801e34d
 801e2b4:	0801e34d 	.word	0x0801e34d
 801e2b8:	0801e34d 	.word	0x0801e34d
 801e2bc:	0801e337 	.word	0x0801e337
 801e2c0:	0801e34d 	.word	0x0801e34d
 801e2c4:	0801e34d 	.word	0x0801e34d
 801e2c8:	0801e34d 	.word	0x0801e34d
 801e2cc:	0801e34d 	.word	0x0801e34d
 801e2d0:	0801e34d 	.word	0x0801e34d
 801e2d4:	0801e34d 	.word	0x0801e34d
 801e2d8:	0801e34d 	.word	0x0801e34d
 801e2dc:	0801e355 	.word	0x0801e355
 801e2e0:	0801e34d 	.word	0x0801e34d
 801e2e4:	0801e34d 	.word	0x0801e34d
 801e2e8:	0801e34d 	.word	0x0801e34d
 801e2ec:	0801e34d 	.word	0x0801e34d
 801e2f0:	0801e34d 	.word	0x0801e34d
 801e2f4:	0801e34d 	.word	0x0801e34d
 801e2f8:	0801e34d 	.word	0x0801e34d
 801e2fc:	0801e355 	.word	0x0801e355
 801e300:	0801e34d 	.word	0x0801e34d
 801e304:	0801e34d 	.word	0x0801e34d
 801e308:	0801e34d 	.word	0x0801e34d
 801e30c:	0801e34d 	.word	0x0801e34d
 801e310:	0801e34d 	.word	0x0801e34d
 801e314:	0801e34d 	.word	0x0801e34d
 801e318:	0801e34d 	.word	0x0801e34d
 801e31c:	0801e355 	.word	0x0801e355
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e324:	3308      	adds	r3, #8
 801e326:	2101      	movs	r1, #1
 801e328:	4618      	mov	r0, r3
 801e32a:	f000 ffc3 	bl	801f2b4 <RCCEx_PLL2_Config>
 801e32e:	4603      	mov	r3, r0
 801e330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801e334:	e00f      	b.n	801e356 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e33a:	3328      	adds	r3, #40	@ 0x28
 801e33c:	2101      	movs	r1, #1
 801e33e:	4618      	mov	r0, r3
 801e340:	f001 f86a 	bl	801f418 <RCCEx_PLL3_Config>
 801e344:	4603      	mov	r3, r0
 801e346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801e34a:	e004      	b.n	801e356 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e34c:	2301      	movs	r3, #1
 801e34e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e352:	e000      	b.n	801e356 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801e354:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	d10a      	bne.n	801e374 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801e35e:	4bbf      	ldr	r3, [pc, #764]	@ (801e65c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e362:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801e366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e36a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e36c:	4abb      	ldr	r2, [pc, #748]	@ (801e65c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e36e:	430b      	orrs	r3, r1
 801e370:	6553      	str	r3, [r2, #84]	@ 0x54
 801e372:	e003      	b.n	801e37c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e378:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801e37c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e380:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e384:	f002 0302 	and.w	r3, r2, #2
 801e388:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801e38c:	2300      	movs	r3, #0
 801e38e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801e392:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801e396:	460b      	mov	r3, r1
 801e398:	4313      	orrs	r3, r2
 801e39a:	d041      	beq.n	801e420 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801e39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e3a2:	2b05      	cmp	r3, #5
 801e3a4:	d824      	bhi.n	801e3f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801e3a6:	a201      	add	r2, pc, #4	@ (adr r2, 801e3ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801e3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e3ac:	0801e3f9 	.word	0x0801e3f9
 801e3b0:	0801e3c5 	.word	0x0801e3c5
 801e3b4:	0801e3db 	.word	0x0801e3db
 801e3b8:	0801e3f9 	.word	0x0801e3f9
 801e3bc:	0801e3f9 	.word	0x0801e3f9
 801e3c0:	0801e3f9 	.word	0x0801e3f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e3c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3c8:	3308      	adds	r3, #8
 801e3ca:	2101      	movs	r1, #1
 801e3cc:	4618      	mov	r0, r3
 801e3ce:	f000 ff71 	bl	801f2b4 <RCCEx_PLL2_Config>
 801e3d2:	4603      	mov	r3, r0
 801e3d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801e3d8:	e00f      	b.n	801e3fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3de:	3328      	adds	r3, #40	@ 0x28
 801e3e0:	2101      	movs	r1, #1
 801e3e2:	4618      	mov	r0, r3
 801e3e4:	f001 f818 	bl	801f418 <RCCEx_PLL3_Config>
 801e3e8:	4603      	mov	r3, r0
 801e3ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801e3ee:	e004      	b.n	801e3fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e3f0:	2301      	movs	r3, #1
 801e3f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e3f6:	e000      	b.n	801e3fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801e3f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e3fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3fe:	2b00      	cmp	r3, #0
 801e400:	d10a      	bne.n	801e418 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801e402:	4b96      	ldr	r3, [pc, #600]	@ (801e65c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e406:	f023 0107 	bic.w	r1, r3, #7
 801e40a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e40e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e410:	4a92      	ldr	r2, [pc, #584]	@ (801e65c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e412:	430b      	orrs	r3, r1
 801e414:	6553      	str	r3, [r2, #84]	@ 0x54
 801e416:	e003      	b.n	801e420 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e41c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801e420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e424:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e428:	f002 0304 	and.w	r3, r2, #4
 801e42c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801e430:	2300      	movs	r3, #0
 801e432:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801e436:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801e43a:	460b      	mov	r3, r1
 801e43c:	4313      	orrs	r3, r2
 801e43e:	d044      	beq.n	801e4ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801e440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e448:	2b05      	cmp	r3, #5
 801e44a:	d825      	bhi.n	801e498 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801e44c:	a201      	add	r2, pc, #4	@ (adr r2, 801e454 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801e44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e452:	bf00      	nop
 801e454:	0801e4a1 	.word	0x0801e4a1
 801e458:	0801e46d 	.word	0x0801e46d
 801e45c:	0801e483 	.word	0x0801e483
 801e460:	0801e4a1 	.word	0x0801e4a1
 801e464:	0801e4a1 	.word	0x0801e4a1
 801e468:	0801e4a1 	.word	0x0801e4a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e46c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e470:	3308      	adds	r3, #8
 801e472:	2101      	movs	r1, #1
 801e474:	4618      	mov	r0, r3
 801e476:	f000 ff1d 	bl	801f2b4 <RCCEx_PLL2_Config>
 801e47a:	4603      	mov	r3, r0
 801e47c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801e480:	e00f      	b.n	801e4a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e486:	3328      	adds	r3, #40	@ 0x28
 801e488:	2101      	movs	r1, #1
 801e48a:	4618      	mov	r0, r3
 801e48c:	f000 ffc4 	bl	801f418 <RCCEx_PLL3_Config>
 801e490:	4603      	mov	r3, r0
 801e492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801e496:	e004      	b.n	801e4a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e498:	2301      	movs	r3, #1
 801e49a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e49e:	e000      	b.n	801e4a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801e4a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e4a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	d10b      	bne.n	801e4c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801e4aa:	4b6c      	ldr	r3, [pc, #432]	@ (801e65c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e4ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e4ae:	f023 0107 	bic.w	r1, r3, #7
 801e4b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e4ba:	4a68      	ldr	r2, [pc, #416]	@ (801e65c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e4bc:	430b      	orrs	r3, r1
 801e4be:	6593      	str	r3, [r2, #88]	@ 0x58
 801e4c0:	e003      	b.n	801e4ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e4c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e4c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801e4ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4d2:	f002 0320 	and.w	r3, r2, #32
 801e4d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801e4da:	2300      	movs	r3, #0
 801e4dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801e4e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801e4e4:	460b      	mov	r3, r1
 801e4e6:	4313      	orrs	r3, r2
 801e4e8:	d055      	beq.n	801e596 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801e4ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e4f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e4f6:	d033      	beq.n	801e560 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801e4f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e4fc:	d82c      	bhi.n	801e558 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e502:	d02f      	beq.n	801e564 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801e504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e508:	d826      	bhi.n	801e558 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e50a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e50e:	d02b      	beq.n	801e568 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801e510:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e514:	d820      	bhi.n	801e558 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e51a:	d012      	beq.n	801e542 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801e51c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e520:	d81a      	bhi.n	801e558 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e522:	2b00      	cmp	r3, #0
 801e524:	d022      	beq.n	801e56c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801e526:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e52a:	d115      	bne.n	801e558 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e52c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e530:	3308      	adds	r3, #8
 801e532:	2100      	movs	r1, #0
 801e534:	4618      	mov	r0, r3
 801e536:	f000 febd 	bl	801f2b4 <RCCEx_PLL2_Config>
 801e53a:	4603      	mov	r3, r0
 801e53c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801e540:	e015      	b.n	801e56e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e546:	3328      	adds	r3, #40	@ 0x28
 801e548:	2102      	movs	r1, #2
 801e54a:	4618      	mov	r0, r3
 801e54c:	f000 ff64 	bl	801f418 <RCCEx_PLL3_Config>
 801e550:	4603      	mov	r3, r0
 801e552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801e556:	e00a      	b.n	801e56e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e558:	2301      	movs	r3, #1
 801e55a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e55e:	e006      	b.n	801e56e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e560:	bf00      	nop
 801e562:	e004      	b.n	801e56e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e564:	bf00      	nop
 801e566:	e002      	b.n	801e56e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e568:	bf00      	nop
 801e56a:	e000      	b.n	801e56e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e56c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e56e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e572:	2b00      	cmp	r3, #0
 801e574:	d10b      	bne.n	801e58e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801e576:	4b39      	ldr	r3, [pc, #228]	@ (801e65c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e57a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801e57e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e586:	4a35      	ldr	r2, [pc, #212]	@ (801e65c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e588:	430b      	orrs	r3, r1
 801e58a:	6553      	str	r3, [r2, #84]	@ 0x54
 801e58c:	e003      	b.n	801e596 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e58e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e592:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801e596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e59e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801e5a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801e5a6:	2300      	movs	r3, #0
 801e5a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801e5ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801e5b0:	460b      	mov	r3, r1
 801e5b2:	4313      	orrs	r3, r2
 801e5b4:	d058      	beq.n	801e668 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801e5b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801e5be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801e5c2:	d033      	beq.n	801e62c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801e5c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801e5c8:	d82c      	bhi.n	801e624 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e5ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e5ce:	d02f      	beq.n	801e630 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801e5d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e5d4:	d826      	bhi.n	801e624 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e5d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801e5da:	d02b      	beq.n	801e634 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801e5dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801e5e0:	d820      	bhi.n	801e624 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e5e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801e5e6:	d012      	beq.n	801e60e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801e5e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801e5ec:	d81a      	bhi.n	801e624 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d022      	beq.n	801e638 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801e5f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e5f6:	d115      	bne.n	801e624 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e5f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5fc:	3308      	adds	r3, #8
 801e5fe:	2100      	movs	r1, #0
 801e600:	4618      	mov	r0, r3
 801e602:	f000 fe57 	bl	801f2b4 <RCCEx_PLL2_Config>
 801e606:	4603      	mov	r3, r0
 801e608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801e60c:	e015      	b.n	801e63a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e612:	3328      	adds	r3, #40	@ 0x28
 801e614:	2102      	movs	r1, #2
 801e616:	4618      	mov	r0, r3
 801e618:	f000 fefe 	bl	801f418 <RCCEx_PLL3_Config>
 801e61c:	4603      	mov	r3, r0
 801e61e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801e622:	e00a      	b.n	801e63a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e624:	2301      	movs	r3, #1
 801e626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e62a:	e006      	b.n	801e63a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e62c:	bf00      	nop
 801e62e:	e004      	b.n	801e63a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e630:	bf00      	nop
 801e632:	e002      	b.n	801e63a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e634:	bf00      	nop
 801e636:	e000      	b.n	801e63a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e638:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e63a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e63e:	2b00      	cmp	r3, #0
 801e640:	d10e      	bne.n	801e660 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801e642:	4b06      	ldr	r3, [pc, #24]	@ (801e65c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e646:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801e64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e64e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801e652:	4a02      	ldr	r2, [pc, #8]	@ (801e65c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e654:	430b      	orrs	r3, r1
 801e656:	6593      	str	r3, [r2, #88]	@ 0x58
 801e658:	e006      	b.n	801e668 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801e65a:	bf00      	nop
 801e65c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e664:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801e668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e670:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801e674:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801e678:	2300      	movs	r3, #0
 801e67a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801e67e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801e682:	460b      	mov	r3, r1
 801e684:	4313      	orrs	r3, r2
 801e686:	d055      	beq.n	801e734 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801e688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e68c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801e690:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801e694:	d033      	beq.n	801e6fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801e696:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801e69a:	d82c      	bhi.n	801e6f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e69c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e6a0:	d02f      	beq.n	801e702 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801e6a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e6a6:	d826      	bhi.n	801e6f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e6a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801e6ac:	d02b      	beq.n	801e706 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801e6ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801e6b2:	d820      	bhi.n	801e6f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e6b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e6b8:	d012      	beq.n	801e6e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801e6ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e6be:	d81a      	bhi.n	801e6f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e6c0:	2b00      	cmp	r3, #0
 801e6c2:	d022      	beq.n	801e70a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801e6c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e6c8:	d115      	bne.n	801e6f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6ce:	3308      	adds	r3, #8
 801e6d0:	2100      	movs	r1, #0
 801e6d2:	4618      	mov	r0, r3
 801e6d4:	f000 fdee 	bl	801f2b4 <RCCEx_PLL2_Config>
 801e6d8:	4603      	mov	r3, r0
 801e6da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801e6de:	e015      	b.n	801e70c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e6e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6e4:	3328      	adds	r3, #40	@ 0x28
 801e6e6:	2102      	movs	r1, #2
 801e6e8:	4618      	mov	r0, r3
 801e6ea:	f000 fe95 	bl	801f418 <RCCEx_PLL3_Config>
 801e6ee:	4603      	mov	r3, r0
 801e6f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801e6f4:	e00a      	b.n	801e70c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e6f6:	2301      	movs	r3, #1
 801e6f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e6fc:	e006      	b.n	801e70c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e6fe:	bf00      	nop
 801e700:	e004      	b.n	801e70c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e702:	bf00      	nop
 801e704:	e002      	b.n	801e70c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e706:	bf00      	nop
 801e708:	e000      	b.n	801e70c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e70a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e70c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e710:	2b00      	cmp	r3, #0
 801e712:	d10b      	bne.n	801e72c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801e714:	4ba1      	ldr	r3, [pc, #644]	@ (801e99c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e718:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801e71c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e720:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801e724:	4a9d      	ldr	r2, [pc, #628]	@ (801e99c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e726:	430b      	orrs	r3, r1
 801e728:	6593      	str	r3, [r2, #88]	@ 0x58
 801e72a:	e003      	b.n	801e734 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e72c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e730:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801e734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e73c:	f002 0308 	and.w	r3, r2, #8
 801e740:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801e744:	2300      	movs	r3, #0
 801e746:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801e74a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801e74e:	460b      	mov	r3, r1
 801e750:	4313      	orrs	r3, r2
 801e752:	d01e      	beq.n	801e792 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801e754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e758:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e75c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e760:	d10c      	bne.n	801e77c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e766:	3328      	adds	r3, #40	@ 0x28
 801e768:	2102      	movs	r1, #2
 801e76a:	4618      	mov	r0, r3
 801e76c:	f000 fe54 	bl	801f418 <RCCEx_PLL3_Config>
 801e770:	4603      	mov	r3, r0
 801e772:	2b00      	cmp	r3, #0
 801e774:	d002      	beq.n	801e77c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801e776:	2301      	movs	r3, #1
 801e778:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801e77c:	4b87      	ldr	r3, [pc, #540]	@ (801e99c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e77e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e780:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801e784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e78c:	4a83      	ldr	r2, [pc, #524]	@ (801e99c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e78e:	430b      	orrs	r3, r1
 801e790:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801e792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e79a:	f002 0310 	and.w	r3, r2, #16
 801e79e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801e7a2:	2300      	movs	r3, #0
 801e7a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801e7a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801e7ac:	460b      	mov	r3, r1
 801e7ae:	4313      	orrs	r3, r2
 801e7b0:	d01e      	beq.n	801e7f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801e7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e7ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e7be:	d10c      	bne.n	801e7da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e7c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7c4:	3328      	adds	r3, #40	@ 0x28
 801e7c6:	2102      	movs	r1, #2
 801e7c8:	4618      	mov	r0, r3
 801e7ca:	f000 fe25 	bl	801f418 <RCCEx_PLL3_Config>
 801e7ce:	4603      	mov	r3, r0
 801e7d0:	2b00      	cmp	r3, #0
 801e7d2:	d002      	beq.n	801e7da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801e7d4:	2301      	movs	r3, #1
 801e7d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801e7da:	4b70      	ldr	r3, [pc, #448]	@ (801e99c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e7dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e7de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e7e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e7ea:	4a6c      	ldr	r2, [pc, #432]	@ (801e99c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e7ec:	430b      	orrs	r3, r1
 801e7ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801e7f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801e7fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801e800:	2300      	movs	r3, #0
 801e802:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801e806:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801e80a:	460b      	mov	r3, r1
 801e80c:	4313      	orrs	r3, r2
 801e80e:	d03e      	beq.n	801e88e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801e810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e814:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801e818:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e81c:	d022      	beq.n	801e864 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801e81e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e822:	d81b      	bhi.n	801e85c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801e824:	2b00      	cmp	r3, #0
 801e826:	d003      	beq.n	801e830 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801e828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e82c:	d00b      	beq.n	801e846 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801e82e:	e015      	b.n	801e85c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e834:	3308      	adds	r3, #8
 801e836:	2100      	movs	r1, #0
 801e838:	4618      	mov	r0, r3
 801e83a:	f000 fd3b 	bl	801f2b4 <RCCEx_PLL2_Config>
 801e83e:	4603      	mov	r3, r0
 801e840:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801e844:	e00f      	b.n	801e866 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e84a:	3328      	adds	r3, #40	@ 0x28
 801e84c:	2102      	movs	r1, #2
 801e84e:	4618      	mov	r0, r3
 801e850:	f000 fde2 	bl	801f418 <RCCEx_PLL3_Config>
 801e854:	4603      	mov	r3, r0
 801e856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801e85a:	e004      	b.n	801e866 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e85c:	2301      	movs	r3, #1
 801e85e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e862:	e000      	b.n	801e866 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801e864:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d10b      	bne.n	801e886 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801e86e:	4b4b      	ldr	r3, [pc, #300]	@ (801e99c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e872:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801e876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e87a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801e87e:	4a47      	ldr	r2, [pc, #284]	@ (801e99c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e880:	430b      	orrs	r3, r1
 801e882:	6593      	str	r3, [r2, #88]	@ 0x58
 801e884:	e003      	b.n	801e88e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e88a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801e88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e892:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e896:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801e89a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801e89c:	2300      	movs	r3, #0
 801e89e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801e8a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801e8a4:	460b      	mov	r3, r1
 801e8a6:	4313      	orrs	r3, r2
 801e8a8:	d03b      	beq.n	801e922 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801e8aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e8b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e8b6:	d01f      	beq.n	801e8f8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801e8b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e8bc:	d818      	bhi.n	801e8f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801e8be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801e8c2:	d003      	beq.n	801e8cc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801e8c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e8c8:	d007      	beq.n	801e8da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801e8ca:	e011      	b.n	801e8f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e8cc:	4b33      	ldr	r3, [pc, #204]	@ (801e99c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e8ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e8d0:	4a32      	ldr	r2, [pc, #200]	@ (801e99c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e8d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e8d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801e8d8:	e00f      	b.n	801e8fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8de:	3328      	adds	r3, #40	@ 0x28
 801e8e0:	2101      	movs	r1, #1
 801e8e2:	4618      	mov	r0, r3
 801e8e4:	f000 fd98 	bl	801f418 <RCCEx_PLL3_Config>
 801e8e8:	4603      	mov	r3, r0
 801e8ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801e8ee:	e004      	b.n	801e8fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e8f0:	2301      	movs	r3, #1
 801e8f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e8f6:	e000      	b.n	801e8fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801e8f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e8fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e8fe:	2b00      	cmp	r3, #0
 801e900:	d10b      	bne.n	801e91a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801e902:	4b26      	ldr	r3, [pc, #152]	@ (801e99c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e906:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801e90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e90e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e912:	4a22      	ldr	r2, [pc, #136]	@ (801e99c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e914:	430b      	orrs	r3, r1
 801e916:	6553      	str	r3, [r2, #84]	@ 0x54
 801e918:	e003      	b.n	801e922 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e91a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e91e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801e922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e92a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801e92e:	673b      	str	r3, [r7, #112]	@ 0x70
 801e930:	2300      	movs	r3, #0
 801e932:	677b      	str	r3, [r7, #116]	@ 0x74
 801e934:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801e938:	460b      	mov	r3, r1
 801e93a:	4313      	orrs	r3, r2
 801e93c:	d034      	beq.n	801e9a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801e93e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e944:	2b00      	cmp	r3, #0
 801e946:	d003      	beq.n	801e950 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801e948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e94c:	d007      	beq.n	801e95e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801e94e:	e011      	b.n	801e974 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e950:	4b12      	ldr	r3, [pc, #72]	@ (801e99c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e954:	4a11      	ldr	r2, [pc, #68]	@ (801e99c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e95a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e95c:	e00e      	b.n	801e97c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e95e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e962:	3308      	adds	r3, #8
 801e964:	2102      	movs	r1, #2
 801e966:	4618      	mov	r0, r3
 801e968:	f000 fca4 	bl	801f2b4 <RCCEx_PLL2_Config>
 801e96c:	4603      	mov	r3, r0
 801e96e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e972:	e003      	b.n	801e97c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801e974:	2301      	movs	r3, #1
 801e976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e97a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e97c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e980:	2b00      	cmp	r3, #0
 801e982:	d10d      	bne.n	801e9a0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801e984:	4b05      	ldr	r3, [pc, #20]	@ (801e99c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e988:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801e98c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e992:	4a02      	ldr	r2, [pc, #8]	@ (801e99c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e994:	430b      	orrs	r3, r1
 801e996:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e998:	e006      	b.n	801e9a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801e99a:	bf00      	nop
 801e99c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e9a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e9a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801e9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9b0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801e9b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e9b6:	2300      	movs	r3, #0
 801e9b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801e9ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801e9be:	460b      	mov	r3, r1
 801e9c0:	4313      	orrs	r3, r2
 801e9c2:	d00c      	beq.n	801e9de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e9c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9c8:	3328      	adds	r3, #40	@ 0x28
 801e9ca:	2102      	movs	r1, #2
 801e9cc:	4618      	mov	r0, r3
 801e9ce:	f000 fd23 	bl	801f418 <RCCEx_PLL3_Config>
 801e9d2:	4603      	mov	r3, r0
 801e9d4:	2b00      	cmp	r3, #0
 801e9d6:	d002      	beq.n	801e9de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801e9d8:	2301      	movs	r3, #1
 801e9da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801e9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9e6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801e9ea:	663b      	str	r3, [r7, #96]	@ 0x60
 801e9ec:	2300      	movs	r3, #0
 801e9ee:	667b      	str	r3, [r7, #100]	@ 0x64
 801e9f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801e9f4:	460b      	mov	r3, r1
 801e9f6:	4313      	orrs	r3, r2
 801e9f8:	d038      	beq.n	801ea6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801e9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ea02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801ea06:	d018      	beq.n	801ea3a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801ea08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801ea0c:	d811      	bhi.n	801ea32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801ea0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ea12:	d014      	beq.n	801ea3e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801ea14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ea18:	d80b      	bhi.n	801ea32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801ea1a:	2b00      	cmp	r3, #0
 801ea1c:	d011      	beq.n	801ea42 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801ea1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ea22:	d106      	bne.n	801ea32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ea24:	4bc3      	ldr	r3, [pc, #780]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ea26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ea28:	4ac2      	ldr	r2, [pc, #776]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ea2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ea2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801ea30:	e008      	b.n	801ea44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ea32:	2301      	movs	r3, #1
 801ea34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ea38:	e004      	b.n	801ea44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801ea3a:	bf00      	nop
 801ea3c:	e002      	b.n	801ea44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801ea3e:	bf00      	nop
 801ea40:	e000      	b.n	801ea44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801ea42:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ea44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea48:	2b00      	cmp	r3, #0
 801ea4a:	d10b      	bne.n	801ea64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801ea4c:	4bb9      	ldr	r3, [pc, #740]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ea4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ea50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801ea54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ea5c:	4ab5      	ldr	r2, [pc, #724]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ea5e:	430b      	orrs	r3, r1
 801ea60:	6553      	str	r3, [r2, #84]	@ 0x54
 801ea62:	e003      	b.n	801ea6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ea64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801ea6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801ea78:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ea7a:	2300      	movs	r3, #0
 801ea7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ea7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801ea82:	460b      	mov	r3, r1
 801ea84:	4313      	orrs	r3, r2
 801ea86:	d009      	beq.n	801ea9c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801ea88:	4baa      	ldr	r3, [pc, #680]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ea8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ea8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801ea90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ea96:	4aa7      	ldr	r2, [pc, #668]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ea98:	430b      	orrs	r3, r1
 801ea9a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801ea9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaa4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801eaa8:	653b      	str	r3, [r7, #80]	@ 0x50
 801eaaa:	2300      	movs	r3, #0
 801eaac:	657b      	str	r3, [r7, #84]	@ 0x54
 801eaae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801eab2:	460b      	mov	r3, r1
 801eab4:	4313      	orrs	r3, r2
 801eab6:	d00a      	beq.n	801eace <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801eab8:	4b9e      	ldr	r3, [pc, #632]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801eaba:	691b      	ldr	r3, [r3, #16]
 801eabc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801eac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eac4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801eac8:	4a9a      	ldr	r2, [pc, #616]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801eaca:	430b      	orrs	r3, r1
 801eacc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801eace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ead2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ead6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801eada:	64bb      	str	r3, [r7, #72]	@ 0x48
 801eadc:	2300      	movs	r3, #0
 801eade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801eae0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801eae4:	460b      	mov	r3, r1
 801eae6:	4313      	orrs	r3, r2
 801eae8:	d009      	beq.n	801eafe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801eaea:	4b92      	ldr	r3, [pc, #584]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801eaec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801eaee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801eaf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eaf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801eaf8:	4a8e      	ldr	r2, [pc, #568]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801eafa:	430b      	orrs	r3, r1
 801eafc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801eafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb06:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801eb0a:	643b      	str	r3, [r7, #64]	@ 0x40
 801eb0c:	2300      	movs	r3, #0
 801eb0e:	647b      	str	r3, [r7, #68]	@ 0x44
 801eb10:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801eb14:	460b      	mov	r3, r1
 801eb16:	4313      	orrs	r3, r2
 801eb18:	d00e      	beq.n	801eb38 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801eb1a:	4b86      	ldr	r3, [pc, #536]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801eb1c:	691b      	ldr	r3, [r3, #16]
 801eb1e:	4a85      	ldr	r2, [pc, #532]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801eb20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801eb24:	6113      	str	r3, [r2, #16]
 801eb26:	4b83      	ldr	r3, [pc, #524]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801eb28:	6919      	ldr	r1, [r3, #16]
 801eb2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801eb32:	4a80      	ldr	r2, [pc, #512]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801eb34:	430b      	orrs	r3, r1
 801eb36:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801eb38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb40:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801eb44:	63bb      	str	r3, [r7, #56]	@ 0x38
 801eb46:	2300      	movs	r3, #0
 801eb48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801eb4a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801eb4e:	460b      	mov	r3, r1
 801eb50:	4313      	orrs	r3, r2
 801eb52:	d009      	beq.n	801eb68 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801eb54:	4b77      	ldr	r3, [pc, #476]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801eb56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801eb58:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801eb5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801eb62:	4a74      	ldr	r2, [pc, #464]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801eb64:	430b      	orrs	r3, r1
 801eb66:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801eb68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb70:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801eb74:	633b      	str	r3, [r7, #48]	@ 0x30
 801eb76:	2300      	movs	r3, #0
 801eb78:	637b      	str	r3, [r7, #52]	@ 0x34
 801eb7a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801eb7e:	460b      	mov	r3, r1
 801eb80:	4313      	orrs	r3, r2
 801eb82:	d00a      	beq.n	801eb9a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801eb84:	4b6b      	ldr	r3, [pc, #428]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801eb86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801eb88:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801eb8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801eb94:	4a67      	ldr	r2, [pc, #412]	@ (801ed34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801eb96:	430b      	orrs	r3, r1
 801eb98:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801eb9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eba2:	2100      	movs	r1, #0
 801eba4:	62b9      	str	r1, [r7, #40]	@ 0x28
 801eba6:	f003 0301 	and.w	r3, r3, #1
 801ebaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ebac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801ebb0:	460b      	mov	r3, r1
 801ebb2:	4313      	orrs	r3, r2
 801ebb4:	d011      	beq.n	801ebda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ebb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebba:	3308      	adds	r3, #8
 801ebbc:	2100      	movs	r1, #0
 801ebbe:	4618      	mov	r0, r3
 801ebc0:	f000 fb78 	bl	801f2b4 <RCCEx_PLL2_Config>
 801ebc4:	4603      	mov	r3, r0
 801ebc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801ebca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ebce:	2b00      	cmp	r3, #0
 801ebd0:	d003      	beq.n	801ebda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ebd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ebd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801ebda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebe2:	2100      	movs	r1, #0
 801ebe4:	6239      	str	r1, [r7, #32]
 801ebe6:	f003 0302 	and.w	r3, r3, #2
 801ebea:	627b      	str	r3, [r7, #36]	@ 0x24
 801ebec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801ebf0:	460b      	mov	r3, r1
 801ebf2:	4313      	orrs	r3, r2
 801ebf4:	d011      	beq.n	801ec1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801ebf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebfa:	3308      	adds	r3, #8
 801ebfc:	2101      	movs	r1, #1
 801ebfe:	4618      	mov	r0, r3
 801ec00:	f000 fb58 	bl	801f2b4 <RCCEx_PLL2_Config>
 801ec04:	4603      	mov	r3, r0
 801ec06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801ec0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ec0e:	2b00      	cmp	r3, #0
 801ec10:	d003      	beq.n	801ec1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ec12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ec16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801ec1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec22:	2100      	movs	r1, #0
 801ec24:	61b9      	str	r1, [r7, #24]
 801ec26:	f003 0304 	and.w	r3, r3, #4
 801ec2a:	61fb      	str	r3, [r7, #28]
 801ec2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801ec30:	460b      	mov	r3, r1
 801ec32:	4313      	orrs	r3, r2
 801ec34:	d011      	beq.n	801ec5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801ec36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec3a:	3308      	adds	r3, #8
 801ec3c:	2102      	movs	r1, #2
 801ec3e:	4618      	mov	r0, r3
 801ec40:	f000 fb38 	bl	801f2b4 <RCCEx_PLL2_Config>
 801ec44:	4603      	mov	r3, r0
 801ec46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801ec4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ec4e:	2b00      	cmp	r3, #0
 801ec50:	d003      	beq.n	801ec5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ec52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ec56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801ec5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec62:	2100      	movs	r1, #0
 801ec64:	6139      	str	r1, [r7, #16]
 801ec66:	f003 0308 	and.w	r3, r3, #8
 801ec6a:	617b      	str	r3, [r7, #20]
 801ec6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801ec70:	460b      	mov	r3, r1
 801ec72:	4313      	orrs	r3, r2
 801ec74:	d011      	beq.n	801ec9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801ec76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec7a:	3328      	adds	r3, #40	@ 0x28
 801ec7c:	2100      	movs	r1, #0
 801ec7e:	4618      	mov	r0, r3
 801ec80:	f000 fbca 	bl	801f418 <RCCEx_PLL3_Config>
 801ec84:	4603      	mov	r3, r0
 801ec86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801ec8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ec8e:	2b00      	cmp	r3, #0
 801ec90:	d003      	beq.n	801ec9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ec92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ec96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801ec9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eca2:	2100      	movs	r1, #0
 801eca4:	60b9      	str	r1, [r7, #8]
 801eca6:	f003 0310 	and.w	r3, r3, #16
 801ecaa:	60fb      	str	r3, [r7, #12]
 801ecac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801ecb0:	460b      	mov	r3, r1
 801ecb2:	4313      	orrs	r3, r2
 801ecb4:	d011      	beq.n	801ecda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801ecb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ecba:	3328      	adds	r3, #40	@ 0x28
 801ecbc:	2101      	movs	r1, #1
 801ecbe:	4618      	mov	r0, r3
 801ecc0:	f000 fbaa 	bl	801f418 <RCCEx_PLL3_Config>
 801ecc4:	4603      	mov	r3, r0
 801ecc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801ecca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ecce:	2b00      	cmp	r3, #0
 801ecd0:	d003      	beq.n	801ecda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ecd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ecd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801ecda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ecde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ece2:	2100      	movs	r1, #0
 801ece4:	6039      	str	r1, [r7, #0]
 801ece6:	f003 0320 	and.w	r3, r3, #32
 801ecea:	607b      	str	r3, [r7, #4]
 801ecec:	e9d7 1200 	ldrd	r1, r2, [r7]
 801ecf0:	460b      	mov	r3, r1
 801ecf2:	4313      	orrs	r3, r2
 801ecf4:	d011      	beq.n	801ed1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ecf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ecfa:	3328      	adds	r3, #40	@ 0x28
 801ecfc:	2102      	movs	r1, #2
 801ecfe:	4618      	mov	r0, r3
 801ed00:	f000 fb8a 	bl	801f418 <RCCEx_PLL3_Config>
 801ed04:	4603      	mov	r3, r0
 801ed06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801ed0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ed0e:	2b00      	cmp	r3, #0
 801ed10:	d003      	beq.n	801ed1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ed12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ed16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801ed1a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	d101      	bne.n	801ed26 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801ed22:	2300      	movs	r3, #0
 801ed24:	e000      	b.n	801ed28 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801ed26:	2301      	movs	r3, #1
}
 801ed28:	4618      	mov	r0, r3
 801ed2a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801ed2e:	46bd      	mov	sp, r7
 801ed30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ed34:	58024400 	.word	0x58024400

0801ed38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801ed38:	b580      	push	{r7, lr}
 801ed3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801ed3c:	f7fe fd96 	bl	801d86c <HAL_RCC_GetHCLKFreq>
 801ed40:	4602      	mov	r2, r0
 801ed42:	4b06      	ldr	r3, [pc, #24]	@ (801ed5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801ed44:	6a1b      	ldr	r3, [r3, #32]
 801ed46:	091b      	lsrs	r3, r3, #4
 801ed48:	f003 0307 	and.w	r3, r3, #7
 801ed4c:	4904      	ldr	r1, [pc, #16]	@ (801ed60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801ed4e:	5ccb      	ldrb	r3, [r1, r3]
 801ed50:	f003 031f 	and.w	r3, r3, #31
 801ed54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801ed58:	4618      	mov	r0, r3
 801ed5a:	bd80      	pop	{r7, pc}
 801ed5c:	58024400 	.word	0x58024400
 801ed60:	080277c0 	.word	0x080277c0

0801ed64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801ed64:	b480      	push	{r7}
 801ed66:	b089      	sub	sp, #36	@ 0x24
 801ed68:	af00      	add	r7, sp, #0
 801ed6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801ed6c:	4ba1      	ldr	r3, [pc, #644]	@ (801eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ed6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed70:	f003 0303 	and.w	r3, r3, #3
 801ed74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801ed76:	4b9f      	ldr	r3, [pc, #636]	@ (801eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ed78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed7a:	0b1b      	lsrs	r3, r3, #12
 801ed7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ed80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801ed82:	4b9c      	ldr	r3, [pc, #624]	@ (801eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ed84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ed86:	091b      	lsrs	r3, r3, #4
 801ed88:	f003 0301 	and.w	r3, r3, #1
 801ed8c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801ed8e:	4b99      	ldr	r3, [pc, #612]	@ (801eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ed90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ed92:	08db      	lsrs	r3, r3, #3
 801ed94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ed98:	693a      	ldr	r2, [r7, #16]
 801ed9a:	fb02 f303 	mul.w	r3, r2, r3
 801ed9e:	ee07 3a90 	vmov	s15, r3
 801eda2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eda6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801edaa:	697b      	ldr	r3, [r7, #20]
 801edac:	2b00      	cmp	r3, #0
 801edae:	f000 8111 	beq.w	801efd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801edb2:	69bb      	ldr	r3, [r7, #24]
 801edb4:	2b02      	cmp	r3, #2
 801edb6:	f000 8083 	beq.w	801eec0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801edba:	69bb      	ldr	r3, [r7, #24]
 801edbc:	2b02      	cmp	r3, #2
 801edbe:	f200 80a1 	bhi.w	801ef04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801edc2:	69bb      	ldr	r3, [r7, #24]
 801edc4:	2b00      	cmp	r3, #0
 801edc6:	d003      	beq.n	801edd0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801edc8:	69bb      	ldr	r3, [r7, #24]
 801edca:	2b01      	cmp	r3, #1
 801edcc:	d056      	beq.n	801ee7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801edce:	e099      	b.n	801ef04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801edd0:	4b88      	ldr	r3, [pc, #544]	@ (801eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801edd2:	681b      	ldr	r3, [r3, #0]
 801edd4:	f003 0320 	and.w	r3, r3, #32
 801edd8:	2b00      	cmp	r3, #0
 801edda:	d02d      	beq.n	801ee38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801eddc:	4b85      	ldr	r3, [pc, #532]	@ (801eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801edde:	681b      	ldr	r3, [r3, #0]
 801ede0:	08db      	lsrs	r3, r3, #3
 801ede2:	f003 0303 	and.w	r3, r3, #3
 801ede6:	4a84      	ldr	r2, [pc, #528]	@ (801eff8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801ede8:	fa22 f303 	lsr.w	r3, r2, r3
 801edec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801edee:	68bb      	ldr	r3, [r7, #8]
 801edf0:	ee07 3a90 	vmov	s15, r3
 801edf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801edf8:	697b      	ldr	r3, [r7, #20]
 801edfa:	ee07 3a90 	vmov	s15, r3
 801edfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ee02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ee06:	4b7b      	ldr	r3, [pc, #492]	@ (801eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ee08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ee0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ee0e:	ee07 3a90 	vmov	s15, r3
 801ee12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ee16:	ed97 6a03 	vldr	s12, [r7, #12]
 801ee1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801effc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ee1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ee22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ee26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ee2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ee2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ee32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801ee36:	e087      	b.n	801ef48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ee38:	697b      	ldr	r3, [r7, #20]
 801ee3a:	ee07 3a90 	vmov	s15, r3
 801ee3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ee42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801f000 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801ee46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ee4a:	4b6a      	ldr	r3, [pc, #424]	@ (801eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ee4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ee4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ee52:	ee07 3a90 	vmov	s15, r3
 801ee56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ee5a:	ed97 6a03 	vldr	s12, [r7, #12]
 801ee5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801effc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ee62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ee66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ee6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ee6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ee72:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ee76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ee7a:	e065      	b.n	801ef48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ee7c:	697b      	ldr	r3, [r7, #20]
 801ee7e:	ee07 3a90 	vmov	s15, r3
 801ee82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ee86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f004 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801ee8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ee8e:	4b59      	ldr	r3, [pc, #356]	@ (801eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ee90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ee92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ee96:	ee07 3a90 	vmov	s15, r3
 801ee9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ee9e:	ed97 6a03 	vldr	s12, [r7, #12]
 801eea2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801effc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801eea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801eeaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801eeae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eeb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eeb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eeba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801eebe:	e043      	b.n	801ef48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801eec0:	697b      	ldr	r3, [r7, #20]
 801eec2:	ee07 3a90 	vmov	s15, r3
 801eec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eeca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801f008 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801eece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801eed2:	4b48      	ldr	r3, [pc, #288]	@ (801eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801eeda:	ee07 3a90 	vmov	s15, r3
 801eede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eee2:	ed97 6a03 	vldr	s12, [r7, #12]
 801eee6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801effc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801eeea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801eeee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801eef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eefa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eefe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ef02:	e021      	b.n	801ef48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ef04:	697b      	ldr	r3, [r7, #20]
 801ef06:	ee07 3a90 	vmov	s15, r3
 801ef0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ef0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801f004 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801ef12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ef16:	4b37      	ldr	r3, [pc, #220]	@ (801eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ef18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ef1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ef1e:	ee07 3a90 	vmov	s15, r3
 801ef22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ef26:	ed97 6a03 	vldr	s12, [r7, #12]
 801ef2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801effc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ef2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ef32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ef36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ef3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ef3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ef46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801ef48:	4b2a      	ldr	r3, [pc, #168]	@ (801eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ef4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ef4c:	0a5b      	lsrs	r3, r3, #9
 801ef4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ef52:	ee07 3a90 	vmov	s15, r3
 801ef56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ef5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ef5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ef62:	edd7 6a07 	vldr	s13, [r7, #28]
 801ef66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ef6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ef6e:	ee17 2a90 	vmov	r2, s15
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801ef76:	4b1f      	ldr	r3, [pc, #124]	@ (801eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ef78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ef7a:	0c1b      	lsrs	r3, r3, #16
 801ef7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ef80:	ee07 3a90 	vmov	s15, r3
 801ef84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ef88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ef8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ef90:	edd7 6a07 	vldr	s13, [r7, #28]
 801ef94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ef98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ef9c:	ee17 2a90 	vmov	r2, s15
 801efa0:	687b      	ldr	r3, [r7, #4]
 801efa2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801efa4:	4b13      	ldr	r3, [pc, #76]	@ (801eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801efa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801efa8:	0e1b      	lsrs	r3, r3, #24
 801efaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801efae:	ee07 3a90 	vmov	s15, r3
 801efb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801efb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801efba:	ee37 7a87 	vadd.f32	s14, s15, s14
 801efbe:	edd7 6a07 	vldr	s13, [r7, #28]
 801efc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801efc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801efca:	ee17 2a90 	vmov	r2, s15
 801efce:	687b      	ldr	r3, [r7, #4]
 801efd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801efd2:	e008      	b.n	801efe6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	2200      	movs	r2, #0
 801efd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801efda:	687b      	ldr	r3, [r7, #4]
 801efdc:	2200      	movs	r2, #0
 801efde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801efe0:	687b      	ldr	r3, [r7, #4]
 801efe2:	2200      	movs	r2, #0
 801efe4:	609a      	str	r2, [r3, #8]
}
 801efe6:	bf00      	nop
 801efe8:	3724      	adds	r7, #36	@ 0x24
 801efea:	46bd      	mov	sp, r7
 801efec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eff0:	4770      	bx	lr
 801eff2:	bf00      	nop
 801eff4:	58024400 	.word	0x58024400
 801eff8:	03d09000 	.word	0x03d09000
 801effc:	46000000 	.word	0x46000000
 801f000:	4c742400 	.word	0x4c742400
 801f004:	4a742400 	.word	0x4a742400
 801f008:	4bbebc20 	.word	0x4bbebc20

0801f00c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801f00c:	b480      	push	{r7}
 801f00e:	b089      	sub	sp, #36	@ 0x24
 801f010:	af00      	add	r7, sp, #0
 801f012:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f014:	4ba1      	ldr	r3, [pc, #644]	@ (801f29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f018:	f003 0303 	and.w	r3, r3, #3
 801f01c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801f01e:	4b9f      	ldr	r3, [pc, #636]	@ (801f29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f022:	0d1b      	lsrs	r3, r3, #20
 801f024:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f028:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801f02a:	4b9c      	ldr	r3, [pc, #624]	@ (801f29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f02c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f02e:	0a1b      	lsrs	r3, r3, #8
 801f030:	f003 0301 	and.w	r3, r3, #1
 801f034:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801f036:	4b99      	ldr	r3, [pc, #612]	@ (801f29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f03a:	08db      	lsrs	r3, r3, #3
 801f03c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f040:	693a      	ldr	r2, [r7, #16]
 801f042:	fb02 f303 	mul.w	r3, r2, r3
 801f046:	ee07 3a90 	vmov	s15, r3
 801f04a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f04e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801f052:	697b      	ldr	r3, [r7, #20]
 801f054:	2b00      	cmp	r3, #0
 801f056:	f000 8111 	beq.w	801f27c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801f05a:	69bb      	ldr	r3, [r7, #24]
 801f05c:	2b02      	cmp	r3, #2
 801f05e:	f000 8083 	beq.w	801f168 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801f062:	69bb      	ldr	r3, [r7, #24]
 801f064:	2b02      	cmp	r3, #2
 801f066:	f200 80a1 	bhi.w	801f1ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801f06a:	69bb      	ldr	r3, [r7, #24]
 801f06c:	2b00      	cmp	r3, #0
 801f06e:	d003      	beq.n	801f078 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801f070:	69bb      	ldr	r3, [r7, #24]
 801f072:	2b01      	cmp	r3, #1
 801f074:	d056      	beq.n	801f124 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801f076:	e099      	b.n	801f1ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f078:	4b88      	ldr	r3, [pc, #544]	@ (801f29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f07a:	681b      	ldr	r3, [r3, #0]
 801f07c:	f003 0320 	and.w	r3, r3, #32
 801f080:	2b00      	cmp	r3, #0
 801f082:	d02d      	beq.n	801f0e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f084:	4b85      	ldr	r3, [pc, #532]	@ (801f29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f086:	681b      	ldr	r3, [r3, #0]
 801f088:	08db      	lsrs	r3, r3, #3
 801f08a:	f003 0303 	and.w	r3, r3, #3
 801f08e:	4a84      	ldr	r2, [pc, #528]	@ (801f2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801f090:	fa22 f303 	lsr.w	r3, r2, r3
 801f094:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f096:	68bb      	ldr	r3, [r7, #8]
 801f098:	ee07 3a90 	vmov	s15, r3
 801f09c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f0a0:	697b      	ldr	r3, [r7, #20]
 801f0a2:	ee07 3a90 	vmov	s15, r3
 801f0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f0aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f0ae:	4b7b      	ldr	r3, [pc, #492]	@ (801f29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f0b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f0b6:	ee07 3a90 	vmov	s15, r3
 801f0ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f0be:	ed97 6a03 	vldr	s12, [r7, #12]
 801f0c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801f2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f0c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f0ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f0ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f0d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f0d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f0da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801f0de:	e087      	b.n	801f1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f0e0:	697b      	ldr	r3, [r7, #20]
 801f0e2:	ee07 3a90 	vmov	s15, r3
 801f0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f0ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801f2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801f0ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f0f2:	4b6a      	ldr	r3, [pc, #424]	@ (801f29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f0f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f0f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f0fa:	ee07 3a90 	vmov	s15, r3
 801f0fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f102:	ed97 6a03 	vldr	s12, [r7, #12]
 801f106:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801f2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f10a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f10e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f11e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f122:	e065      	b.n	801f1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f124:	697b      	ldr	r3, [r7, #20]
 801f126:	ee07 3a90 	vmov	s15, r3
 801f12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f12e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f2ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801f132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f136:	4b59      	ldr	r3, [pc, #356]	@ (801f29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f13e:	ee07 3a90 	vmov	s15, r3
 801f142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f146:	ed97 6a03 	vldr	s12, [r7, #12]
 801f14a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801f2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f14e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f15a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f15e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f166:	e043      	b.n	801f1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f168:	697b      	ldr	r3, [r7, #20]
 801f16a:	ee07 3a90 	vmov	s15, r3
 801f16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f172:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801f2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801f176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f17a:	4b48      	ldr	r3, [pc, #288]	@ (801f29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f17c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f17e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f182:	ee07 3a90 	vmov	s15, r3
 801f186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f18a:	ed97 6a03 	vldr	s12, [r7, #12]
 801f18e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801f2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f19a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f19e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f1a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f1a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f1aa:	e021      	b.n	801f1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f1ac:	697b      	ldr	r3, [r7, #20]
 801f1ae:	ee07 3a90 	vmov	s15, r3
 801f1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f1b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801f2ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801f1ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f1be:	4b37      	ldr	r3, [pc, #220]	@ (801f29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f1c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f1c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f1c6:	ee07 3a90 	vmov	s15, r3
 801f1ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f1ce:	ed97 6a03 	vldr	s12, [r7, #12]
 801f1d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801f2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f1d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f1da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f1de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f1e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f1e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f1ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f1ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801f1f0:	4b2a      	ldr	r3, [pc, #168]	@ (801f29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f1f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f1f4:	0a5b      	lsrs	r3, r3, #9
 801f1f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f1fa:	ee07 3a90 	vmov	s15, r3
 801f1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f202:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f206:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f20a:	edd7 6a07 	vldr	s13, [r7, #28]
 801f20e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f216:	ee17 2a90 	vmov	r2, s15
 801f21a:	687b      	ldr	r3, [r7, #4]
 801f21c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801f21e:	4b1f      	ldr	r3, [pc, #124]	@ (801f29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f222:	0c1b      	lsrs	r3, r3, #16
 801f224:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f228:	ee07 3a90 	vmov	s15, r3
 801f22c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f230:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f234:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f238:	edd7 6a07 	vldr	s13, [r7, #28]
 801f23c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f244:	ee17 2a90 	vmov	r2, s15
 801f248:	687b      	ldr	r3, [r7, #4]
 801f24a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801f24c:	4b13      	ldr	r3, [pc, #76]	@ (801f29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f24e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f250:	0e1b      	lsrs	r3, r3, #24
 801f252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f256:	ee07 3a90 	vmov	s15, r3
 801f25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f25e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f262:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f266:	edd7 6a07 	vldr	s13, [r7, #28]
 801f26a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f26e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f272:	ee17 2a90 	vmov	r2, s15
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801f27a:	e008      	b.n	801f28e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801f27c:	687b      	ldr	r3, [r7, #4]
 801f27e:	2200      	movs	r2, #0
 801f280:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801f282:	687b      	ldr	r3, [r7, #4]
 801f284:	2200      	movs	r2, #0
 801f286:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801f288:	687b      	ldr	r3, [r7, #4]
 801f28a:	2200      	movs	r2, #0
 801f28c:	609a      	str	r2, [r3, #8]
}
 801f28e:	bf00      	nop
 801f290:	3724      	adds	r7, #36	@ 0x24
 801f292:	46bd      	mov	sp, r7
 801f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f298:	4770      	bx	lr
 801f29a:	bf00      	nop
 801f29c:	58024400 	.word	0x58024400
 801f2a0:	03d09000 	.word	0x03d09000
 801f2a4:	46000000 	.word	0x46000000
 801f2a8:	4c742400 	.word	0x4c742400
 801f2ac:	4a742400 	.word	0x4a742400
 801f2b0:	4bbebc20 	.word	0x4bbebc20

0801f2b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801f2b4:	b580      	push	{r7, lr}
 801f2b6:	b084      	sub	sp, #16
 801f2b8:	af00      	add	r7, sp, #0
 801f2ba:	6078      	str	r0, [r7, #4]
 801f2bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f2be:	2300      	movs	r3, #0
 801f2c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801f2c2:	4b53      	ldr	r3, [pc, #332]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f2c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f2c6:	f003 0303 	and.w	r3, r3, #3
 801f2ca:	2b03      	cmp	r3, #3
 801f2cc:	d101      	bne.n	801f2d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801f2ce:	2301      	movs	r3, #1
 801f2d0:	e099      	b.n	801f406 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801f2d2:	4b4f      	ldr	r3, [pc, #316]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f2d4:	681b      	ldr	r3, [r3, #0]
 801f2d6:	4a4e      	ldr	r2, [pc, #312]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f2d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801f2dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f2de:	f7fa ff23 	bl	801a128 <HAL_GetTick>
 801f2e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f2e4:	e008      	b.n	801f2f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801f2e6:	f7fa ff1f 	bl	801a128 <HAL_GetTick>
 801f2ea:	4602      	mov	r2, r0
 801f2ec:	68bb      	ldr	r3, [r7, #8]
 801f2ee:	1ad3      	subs	r3, r2, r3
 801f2f0:	2b02      	cmp	r3, #2
 801f2f2:	d901      	bls.n	801f2f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801f2f4:	2303      	movs	r3, #3
 801f2f6:	e086      	b.n	801f406 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f2f8:	4b45      	ldr	r3, [pc, #276]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f300:	2b00      	cmp	r3, #0
 801f302:	d1f0      	bne.n	801f2e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801f304:	4b42      	ldr	r3, [pc, #264]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f308:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801f30c:	687b      	ldr	r3, [r7, #4]
 801f30e:	681b      	ldr	r3, [r3, #0]
 801f310:	031b      	lsls	r3, r3, #12
 801f312:	493f      	ldr	r1, [pc, #252]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f314:	4313      	orrs	r3, r2
 801f316:	628b      	str	r3, [r1, #40]	@ 0x28
 801f318:	687b      	ldr	r3, [r7, #4]
 801f31a:	685b      	ldr	r3, [r3, #4]
 801f31c:	3b01      	subs	r3, #1
 801f31e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f322:	687b      	ldr	r3, [r7, #4]
 801f324:	689b      	ldr	r3, [r3, #8]
 801f326:	3b01      	subs	r3, #1
 801f328:	025b      	lsls	r3, r3, #9
 801f32a:	b29b      	uxth	r3, r3
 801f32c:	431a      	orrs	r2, r3
 801f32e:	687b      	ldr	r3, [r7, #4]
 801f330:	68db      	ldr	r3, [r3, #12]
 801f332:	3b01      	subs	r3, #1
 801f334:	041b      	lsls	r3, r3, #16
 801f336:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f33a:	431a      	orrs	r2, r3
 801f33c:	687b      	ldr	r3, [r7, #4]
 801f33e:	691b      	ldr	r3, [r3, #16]
 801f340:	3b01      	subs	r3, #1
 801f342:	061b      	lsls	r3, r3, #24
 801f344:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f348:	4931      	ldr	r1, [pc, #196]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f34a:	4313      	orrs	r3, r2
 801f34c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801f34e:	4b30      	ldr	r3, [pc, #192]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f352:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801f356:	687b      	ldr	r3, [r7, #4]
 801f358:	695b      	ldr	r3, [r3, #20]
 801f35a:	492d      	ldr	r1, [pc, #180]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f35c:	4313      	orrs	r3, r2
 801f35e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801f360:	4b2b      	ldr	r3, [pc, #172]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f364:	f023 0220 	bic.w	r2, r3, #32
 801f368:	687b      	ldr	r3, [r7, #4]
 801f36a:	699b      	ldr	r3, [r3, #24]
 801f36c:	4928      	ldr	r1, [pc, #160]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f36e:	4313      	orrs	r3, r2
 801f370:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801f372:	4b27      	ldr	r3, [pc, #156]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f376:	4a26      	ldr	r2, [pc, #152]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f378:	f023 0310 	bic.w	r3, r3, #16
 801f37c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801f37e:	4b24      	ldr	r3, [pc, #144]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f380:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801f382:	4b24      	ldr	r3, [pc, #144]	@ (801f414 <RCCEx_PLL2_Config+0x160>)
 801f384:	4013      	ands	r3, r2
 801f386:	687a      	ldr	r2, [r7, #4]
 801f388:	69d2      	ldr	r2, [r2, #28]
 801f38a:	00d2      	lsls	r2, r2, #3
 801f38c:	4920      	ldr	r1, [pc, #128]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f38e:	4313      	orrs	r3, r2
 801f390:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801f392:	4b1f      	ldr	r3, [pc, #124]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f396:	4a1e      	ldr	r2, [pc, #120]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f398:	f043 0310 	orr.w	r3, r3, #16
 801f39c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801f39e:	683b      	ldr	r3, [r7, #0]
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	d106      	bne.n	801f3b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801f3a4:	4b1a      	ldr	r3, [pc, #104]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f3a8:	4a19      	ldr	r2, [pc, #100]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f3aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801f3ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f3b0:	e00f      	b.n	801f3d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801f3b2:	683b      	ldr	r3, [r7, #0]
 801f3b4:	2b01      	cmp	r3, #1
 801f3b6:	d106      	bne.n	801f3c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801f3b8:	4b15      	ldr	r3, [pc, #84]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f3bc:	4a14      	ldr	r2, [pc, #80]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f3be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f3c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f3c4:	e005      	b.n	801f3d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801f3c6:	4b12      	ldr	r3, [pc, #72]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f3ca:	4a11      	ldr	r2, [pc, #68]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f3cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801f3d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801f3d2:	4b0f      	ldr	r3, [pc, #60]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f3d4:	681b      	ldr	r3, [r3, #0]
 801f3d6:	4a0e      	ldr	r2, [pc, #56]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f3d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801f3dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f3de:	f7fa fea3 	bl	801a128 <HAL_GetTick>
 801f3e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801f3e4:	e008      	b.n	801f3f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801f3e6:	f7fa fe9f 	bl	801a128 <HAL_GetTick>
 801f3ea:	4602      	mov	r2, r0
 801f3ec:	68bb      	ldr	r3, [r7, #8]
 801f3ee:	1ad3      	subs	r3, r2, r3
 801f3f0:	2b02      	cmp	r3, #2
 801f3f2:	d901      	bls.n	801f3f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801f3f4:	2303      	movs	r3, #3
 801f3f6:	e006      	b.n	801f406 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801f3f8:	4b05      	ldr	r3, [pc, #20]	@ (801f410 <RCCEx_PLL2_Config+0x15c>)
 801f3fa:	681b      	ldr	r3, [r3, #0]
 801f3fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f400:	2b00      	cmp	r3, #0
 801f402:	d0f0      	beq.n	801f3e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801f404:	7bfb      	ldrb	r3, [r7, #15]
}
 801f406:	4618      	mov	r0, r3
 801f408:	3710      	adds	r7, #16
 801f40a:	46bd      	mov	sp, r7
 801f40c:	bd80      	pop	{r7, pc}
 801f40e:	bf00      	nop
 801f410:	58024400 	.word	0x58024400
 801f414:	ffff0007 	.word	0xffff0007

0801f418 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801f418:	b580      	push	{r7, lr}
 801f41a:	b084      	sub	sp, #16
 801f41c:	af00      	add	r7, sp, #0
 801f41e:	6078      	str	r0, [r7, #4]
 801f420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f422:	2300      	movs	r3, #0
 801f424:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801f426:	4b53      	ldr	r3, [pc, #332]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f42a:	f003 0303 	and.w	r3, r3, #3
 801f42e:	2b03      	cmp	r3, #3
 801f430:	d101      	bne.n	801f436 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801f432:	2301      	movs	r3, #1
 801f434:	e099      	b.n	801f56a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801f436:	4b4f      	ldr	r3, [pc, #316]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f438:	681b      	ldr	r3, [r3, #0]
 801f43a:	4a4e      	ldr	r2, [pc, #312]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f43c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801f440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f442:	f7fa fe71 	bl	801a128 <HAL_GetTick>
 801f446:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801f448:	e008      	b.n	801f45c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801f44a:	f7fa fe6d 	bl	801a128 <HAL_GetTick>
 801f44e:	4602      	mov	r2, r0
 801f450:	68bb      	ldr	r3, [r7, #8]
 801f452:	1ad3      	subs	r3, r2, r3
 801f454:	2b02      	cmp	r3, #2
 801f456:	d901      	bls.n	801f45c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801f458:	2303      	movs	r3, #3
 801f45a:	e086      	b.n	801f56a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801f45c:	4b45      	ldr	r3, [pc, #276]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f45e:	681b      	ldr	r3, [r3, #0]
 801f460:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801f464:	2b00      	cmp	r3, #0
 801f466:	d1f0      	bne.n	801f44a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801f468:	4b42      	ldr	r3, [pc, #264]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f46a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f46c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801f470:	687b      	ldr	r3, [r7, #4]
 801f472:	681b      	ldr	r3, [r3, #0]
 801f474:	051b      	lsls	r3, r3, #20
 801f476:	493f      	ldr	r1, [pc, #252]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f478:	4313      	orrs	r3, r2
 801f47a:	628b      	str	r3, [r1, #40]	@ 0x28
 801f47c:	687b      	ldr	r3, [r7, #4]
 801f47e:	685b      	ldr	r3, [r3, #4]
 801f480:	3b01      	subs	r3, #1
 801f482:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f486:	687b      	ldr	r3, [r7, #4]
 801f488:	689b      	ldr	r3, [r3, #8]
 801f48a:	3b01      	subs	r3, #1
 801f48c:	025b      	lsls	r3, r3, #9
 801f48e:	b29b      	uxth	r3, r3
 801f490:	431a      	orrs	r2, r3
 801f492:	687b      	ldr	r3, [r7, #4]
 801f494:	68db      	ldr	r3, [r3, #12]
 801f496:	3b01      	subs	r3, #1
 801f498:	041b      	lsls	r3, r3, #16
 801f49a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f49e:	431a      	orrs	r2, r3
 801f4a0:	687b      	ldr	r3, [r7, #4]
 801f4a2:	691b      	ldr	r3, [r3, #16]
 801f4a4:	3b01      	subs	r3, #1
 801f4a6:	061b      	lsls	r3, r3, #24
 801f4a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f4ac:	4931      	ldr	r1, [pc, #196]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f4ae:	4313      	orrs	r3, r2
 801f4b0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801f4b2:	4b30      	ldr	r3, [pc, #192]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f4b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801f4ba:	687b      	ldr	r3, [r7, #4]
 801f4bc:	695b      	ldr	r3, [r3, #20]
 801f4be:	492d      	ldr	r1, [pc, #180]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f4c0:	4313      	orrs	r3, r2
 801f4c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801f4c4:	4b2b      	ldr	r3, [pc, #172]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f4c8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801f4cc:	687b      	ldr	r3, [r7, #4]
 801f4ce:	699b      	ldr	r3, [r3, #24]
 801f4d0:	4928      	ldr	r1, [pc, #160]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f4d2:	4313      	orrs	r3, r2
 801f4d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801f4d6:	4b27      	ldr	r3, [pc, #156]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f4da:	4a26      	ldr	r2, [pc, #152]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f4dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801f4e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801f4e2:	4b24      	ldr	r3, [pc, #144]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f4e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801f4e6:	4b24      	ldr	r3, [pc, #144]	@ (801f578 <RCCEx_PLL3_Config+0x160>)
 801f4e8:	4013      	ands	r3, r2
 801f4ea:	687a      	ldr	r2, [r7, #4]
 801f4ec:	69d2      	ldr	r2, [r2, #28]
 801f4ee:	00d2      	lsls	r2, r2, #3
 801f4f0:	4920      	ldr	r1, [pc, #128]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f4f2:	4313      	orrs	r3, r2
 801f4f4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801f4f6:	4b1f      	ldr	r3, [pc, #124]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f4fa:	4a1e      	ldr	r2, [pc, #120]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f4fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801f500:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801f502:	683b      	ldr	r3, [r7, #0]
 801f504:	2b00      	cmp	r3, #0
 801f506:	d106      	bne.n	801f516 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801f508:	4b1a      	ldr	r3, [pc, #104]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f50a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f50c:	4a19      	ldr	r2, [pc, #100]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f50e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801f512:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f514:	e00f      	b.n	801f536 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801f516:	683b      	ldr	r3, [r7, #0]
 801f518:	2b01      	cmp	r3, #1
 801f51a:	d106      	bne.n	801f52a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801f51c:	4b15      	ldr	r3, [pc, #84]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f520:	4a14      	ldr	r2, [pc, #80]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f522:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801f526:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f528:	e005      	b.n	801f536 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801f52a:	4b12      	ldr	r3, [pc, #72]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f52c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f52e:	4a11      	ldr	r2, [pc, #68]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f530:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801f534:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801f536:	4b0f      	ldr	r3, [pc, #60]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f538:	681b      	ldr	r3, [r3, #0]
 801f53a:	4a0e      	ldr	r2, [pc, #56]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f53c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801f540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f542:	f7fa fdf1 	bl	801a128 <HAL_GetTick>
 801f546:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801f548:	e008      	b.n	801f55c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801f54a:	f7fa fded 	bl	801a128 <HAL_GetTick>
 801f54e:	4602      	mov	r2, r0
 801f550:	68bb      	ldr	r3, [r7, #8]
 801f552:	1ad3      	subs	r3, r2, r3
 801f554:	2b02      	cmp	r3, #2
 801f556:	d901      	bls.n	801f55c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801f558:	2303      	movs	r3, #3
 801f55a:	e006      	b.n	801f56a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801f55c:	4b05      	ldr	r3, [pc, #20]	@ (801f574 <RCCEx_PLL3_Config+0x15c>)
 801f55e:	681b      	ldr	r3, [r3, #0]
 801f560:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801f564:	2b00      	cmp	r3, #0
 801f566:	d0f0      	beq.n	801f54a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801f568:	7bfb      	ldrb	r3, [r7, #15]
}
 801f56a:	4618      	mov	r0, r3
 801f56c:	3710      	adds	r7, #16
 801f56e:	46bd      	mov	sp, r7
 801f570:	bd80      	pop	{r7, pc}
 801f572:	bf00      	nop
 801f574:	58024400 	.word	0x58024400
 801f578:	ffff0007 	.word	0xffff0007

0801f57c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801f57c:	b580      	push	{r7, lr}
 801f57e:	b084      	sub	sp, #16
 801f580:	af00      	add	r7, sp, #0
 801f582:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801f584:	687b      	ldr	r3, [r7, #4]
 801f586:	2b00      	cmp	r3, #0
 801f588:	d101      	bne.n	801f58e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801f58a:	2301      	movs	r3, #1
 801f58c:	e10f      	b.n	801f7ae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801f58e:	687b      	ldr	r3, [r7, #4]
 801f590:	2200      	movs	r2, #0
 801f592:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801f594:	687b      	ldr	r3, [r7, #4]
 801f596:	681b      	ldr	r3, [r3, #0]
 801f598:	4a87      	ldr	r2, [pc, #540]	@ (801f7b8 <HAL_SPI_Init+0x23c>)
 801f59a:	4293      	cmp	r3, r2
 801f59c:	d00f      	beq.n	801f5be <HAL_SPI_Init+0x42>
 801f59e:	687b      	ldr	r3, [r7, #4]
 801f5a0:	681b      	ldr	r3, [r3, #0]
 801f5a2:	4a86      	ldr	r2, [pc, #536]	@ (801f7bc <HAL_SPI_Init+0x240>)
 801f5a4:	4293      	cmp	r3, r2
 801f5a6:	d00a      	beq.n	801f5be <HAL_SPI_Init+0x42>
 801f5a8:	687b      	ldr	r3, [r7, #4]
 801f5aa:	681b      	ldr	r3, [r3, #0]
 801f5ac:	4a84      	ldr	r2, [pc, #528]	@ (801f7c0 <HAL_SPI_Init+0x244>)
 801f5ae:	4293      	cmp	r3, r2
 801f5b0:	d005      	beq.n	801f5be <HAL_SPI_Init+0x42>
 801f5b2:	687b      	ldr	r3, [r7, #4]
 801f5b4:	68db      	ldr	r3, [r3, #12]
 801f5b6:	2b0f      	cmp	r3, #15
 801f5b8:	d901      	bls.n	801f5be <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801f5ba:	2301      	movs	r3, #1
 801f5bc:	e0f7      	b.n	801f7ae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801f5be:	6878      	ldr	r0, [r7, #4]
 801f5c0:	f000 fbba 	bl	801fd38 <SPI_GetPacketSize>
 801f5c4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	681b      	ldr	r3, [r3, #0]
 801f5ca:	4a7b      	ldr	r2, [pc, #492]	@ (801f7b8 <HAL_SPI_Init+0x23c>)
 801f5cc:	4293      	cmp	r3, r2
 801f5ce:	d00c      	beq.n	801f5ea <HAL_SPI_Init+0x6e>
 801f5d0:	687b      	ldr	r3, [r7, #4]
 801f5d2:	681b      	ldr	r3, [r3, #0]
 801f5d4:	4a79      	ldr	r2, [pc, #484]	@ (801f7bc <HAL_SPI_Init+0x240>)
 801f5d6:	4293      	cmp	r3, r2
 801f5d8:	d007      	beq.n	801f5ea <HAL_SPI_Init+0x6e>
 801f5da:	687b      	ldr	r3, [r7, #4]
 801f5dc:	681b      	ldr	r3, [r3, #0]
 801f5de:	4a78      	ldr	r2, [pc, #480]	@ (801f7c0 <HAL_SPI_Init+0x244>)
 801f5e0:	4293      	cmp	r3, r2
 801f5e2:	d002      	beq.n	801f5ea <HAL_SPI_Init+0x6e>
 801f5e4:	68fb      	ldr	r3, [r7, #12]
 801f5e6:	2b08      	cmp	r3, #8
 801f5e8:	d811      	bhi.n	801f60e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801f5ea:	687b      	ldr	r3, [r7, #4]
 801f5ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801f5ee:	4a72      	ldr	r2, [pc, #456]	@ (801f7b8 <HAL_SPI_Init+0x23c>)
 801f5f0:	4293      	cmp	r3, r2
 801f5f2:	d009      	beq.n	801f608 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801f5f4:	687b      	ldr	r3, [r7, #4]
 801f5f6:	681b      	ldr	r3, [r3, #0]
 801f5f8:	4a70      	ldr	r2, [pc, #448]	@ (801f7bc <HAL_SPI_Init+0x240>)
 801f5fa:	4293      	cmp	r3, r2
 801f5fc:	d004      	beq.n	801f608 <HAL_SPI_Init+0x8c>
 801f5fe:	687b      	ldr	r3, [r7, #4]
 801f600:	681b      	ldr	r3, [r3, #0]
 801f602:	4a6f      	ldr	r2, [pc, #444]	@ (801f7c0 <HAL_SPI_Init+0x244>)
 801f604:	4293      	cmp	r3, r2
 801f606:	d104      	bne.n	801f612 <HAL_SPI_Init+0x96>
 801f608:	68fb      	ldr	r3, [r7, #12]
 801f60a:	2b10      	cmp	r3, #16
 801f60c:	d901      	bls.n	801f612 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801f60e:	2301      	movs	r3, #1
 801f610:	e0cd      	b.n	801f7ae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801f612:	687b      	ldr	r3, [r7, #4]
 801f614:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f618:	b2db      	uxtb	r3, r3
 801f61a:	2b00      	cmp	r3, #0
 801f61c:	d106      	bne.n	801f62c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	2200      	movs	r2, #0
 801f622:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801f626:	6878      	ldr	r0, [r7, #4]
 801f628:	f7e2 fed2 	bl	80023d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801f62c:	687b      	ldr	r3, [r7, #4]
 801f62e:	2202      	movs	r2, #2
 801f630:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801f634:	687b      	ldr	r3, [r7, #4]
 801f636:	681b      	ldr	r3, [r3, #0]
 801f638:	681a      	ldr	r2, [r3, #0]
 801f63a:	687b      	ldr	r3, [r7, #4]
 801f63c:	681b      	ldr	r3, [r3, #0]
 801f63e:	f022 0201 	bic.w	r2, r2, #1
 801f642:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801f644:	687b      	ldr	r3, [r7, #4]
 801f646:	681b      	ldr	r3, [r3, #0]
 801f648:	689b      	ldr	r3, [r3, #8]
 801f64a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801f64e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801f650:	687b      	ldr	r3, [r7, #4]
 801f652:	699b      	ldr	r3, [r3, #24]
 801f654:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801f658:	d119      	bne.n	801f68e <HAL_SPI_Init+0x112>
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	685b      	ldr	r3, [r3, #4]
 801f65e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801f662:	d103      	bne.n	801f66c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801f664:	687b      	ldr	r3, [r7, #4]
 801f666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801f668:	2b00      	cmp	r3, #0
 801f66a:	d008      	beq.n	801f67e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801f66c:	687b      	ldr	r3, [r7, #4]
 801f66e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801f670:	2b00      	cmp	r3, #0
 801f672:	d10c      	bne.n	801f68e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801f674:	687b      	ldr	r3, [r7, #4]
 801f676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801f678:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f67c:	d107      	bne.n	801f68e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801f67e:	687b      	ldr	r3, [r7, #4]
 801f680:	681b      	ldr	r3, [r3, #0]
 801f682:	681a      	ldr	r2, [r3, #0]
 801f684:	687b      	ldr	r3, [r7, #4]
 801f686:	681b      	ldr	r3, [r3, #0]
 801f688:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801f68c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801f68e:	687b      	ldr	r3, [r7, #4]
 801f690:	685b      	ldr	r3, [r3, #4]
 801f692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801f696:	2b00      	cmp	r3, #0
 801f698:	d00f      	beq.n	801f6ba <HAL_SPI_Init+0x13e>
 801f69a:	687b      	ldr	r3, [r7, #4]
 801f69c:	68db      	ldr	r3, [r3, #12]
 801f69e:	2b06      	cmp	r3, #6
 801f6a0:	d90b      	bls.n	801f6ba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801f6a2:	687b      	ldr	r3, [r7, #4]
 801f6a4:	681b      	ldr	r3, [r3, #0]
 801f6a6:	681b      	ldr	r3, [r3, #0]
 801f6a8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801f6ac:	687b      	ldr	r3, [r7, #4]
 801f6ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801f6b0:	687b      	ldr	r3, [r7, #4]
 801f6b2:	681b      	ldr	r3, [r3, #0]
 801f6b4:	430a      	orrs	r2, r1
 801f6b6:	601a      	str	r2, [r3, #0]
 801f6b8:	e007      	b.n	801f6ca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801f6ba:	687b      	ldr	r3, [r7, #4]
 801f6bc:	681b      	ldr	r3, [r3, #0]
 801f6be:	681a      	ldr	r2, [r3, #0]
 801f6c0:	687b      	ldr	r3, [r7, #4]
 801f6c2:	681b      	ldr	r3, [r3, #0]
 801f6c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801f6c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801f6ca:	687b      	ldr	r3, [r7, #4]
 801f6cc:	69da      	ldr	r2, [r3, #28]
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f6d2:	431a      	orrs	r2, r3
 801f6d4:	68bb      	ldr	r3, [r7, #8]
 801f6d6:	431a      	orrs	r2, r3
 801f6d8:	687b      	ldr	r3, [r7, #4]
 801f6da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f6dc:	ea42 0103 	orr.w	r1, r2, r3
 801f6e0:	687b      	ldr	r3, [r7, #4]
 801f6e2:	68da      	ldr	r2, [r3, #12]
 801f6e4:	687b      	ldr	r3, [r7, #4]
 801f6e6:	681b      	ldr	r3, [r3, #0]
 801f6e8:	430a      	orrs	r2, r1
 801f6ea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801f6ec:	687b      	ldr	r3, [r7, #4]
 801f6ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f6f0:	687b      	ldr	r3, [r7, #4]
 801f6f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f6f4:	431a      	orrs	r2, r3
 801f6f6:	687b      	ldr	r3, [r7, #4]
 801f6f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f6fa:	431a      	orrs	r2, r3
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	699b      	ldr	r3, [r3, #24]
 801f700:	431a      	orrs	r2, r3
 801f702:	687b      	ldr	r3, [r7, #4]
 801f704:	691b      	ldr	r3, [r3, #16]
 801f706:	431a      	orrs	r2, r3
 801f708:	687b      	ldr	r3, [r7, #4]
 801f70a:	695b      	ldr	r3, [r3, #20]
 801f70c:	431a      	orrs	r2, r3
 801f70e:	687b      	ldr	r3, [r7, #4]
 801f710:	6a1b      	ldr	r3, [r3, #32]
 801f712:	431a      	orrs	r2, r3
 801f714:	687b      	ldr	r3, [r7, #4]
 801f716:	685b      	ldr	r3, [r3, #4]
 801f718:	431a      	orrs	r2, r3
 801f71a:	687b      	ldr	r3, [r7, #4]
 801f71c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801f71e:	431a      	orrs	r2, r3
 801f720:	687b      	ldr	r3, [r7, #4]
 801f722:	689b      	ldr	r3, [r3, #8]
 801f724:	431a      	orrs	r2, r3
 801f726:	687b      	ldr	r3, [r7, #4]
 801f728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801f72a:	ea42 0103 	orr.w	r1, r2, r3
 801f72e:	687b      	ldr	r3, [r7, #4]
 801f730:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801f732:	687b      	ldr	r3, [r7, #4]
 801f734:	681b      	ldr	r3, [r3, #0]
 801f736:	430a      	orrs	r2, r1
 801f738:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801f73a:	687b      	ldr	r3, [r7, #4]
 801f73c:	685b      	ldr	r3, [r3, #4]
 801f73e:	2b00      	cmp	r3, #0
 801f740:	d113      	bne.n	801f76a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801f742:	687b      	ldr	r3, [r7, #4]
 801f744:	681b      	ldr	r3, [r3, #0]
 801f746:	689b      	ldr	r3, [r3, #8]
 801f748:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801f74c:	687b      	ldr	r3, [r7, #4]
 801f74e:	681b      	ldr	r3, [r3, #0]
 801f750:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f754:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801f756:	687b      	ldr	r3, [r7, #4]
 801f758:	681b      	ldr	r3, [r3, #0]
 801f75a:	689b      	ldr	r3, [r3, #8]
 801f75c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801f760:	687b      	ldr	r3, [r7, #4]
 801f762:	681b      	ldr	r3, [r3, #0]
 801f764:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801f768:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801f76a:	687b      	ldr	r3, [r7, #4]
 801f76c:	681b      	ldr	r3, [r3, #0]
 801f76e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801f770:	687b      	ldr	r3, [r7, #4]
 801f772:	681b      	ldr	r3, [r3, #0]
 801f774:	f022 0201 	bic.w	r2, r2, #1
 801f778:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801f77a:	687b      	ldr	r3, [r7, #4]
 801f77c:	685b      	ldr	r3, [r3, #4]
 801f77e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801f782:	2b00      	cmp	r3, #0
 801f784:	d00a      	beq.n	801f79c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801f786:	687b      	ldr	r3, [r7, #4]
 801f788:	681b      	ldr	r3, [r3, #0]
 801f78a:	68db      	ldr	r3, [r3, #12]
 801f78c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f790:	687b      	ldr	r3, [r7, #4]
 801f792:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f794:	687b      	ldr	r3, [r7, #4]
 801f796:	681b      	ldr	r3, [r3, #0]
 801f798:	430a      	orrs	r2, r1
 801f79a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801f79c:	687b      	ldr	r3, [r7, #4]
 801f79e:	2200      	movs	r2, #0
 801f7a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801f7a4:	687b      	ldr	r3, [r7, #4]
 801f7a6:	2201      	movs	r2, #1
 801f7a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801f7ac:	2300      	movs	r3, #0
}
 801f7ae:	4618      	mov	r0, r3
 801f7b0:	3710      	adds	r7, #16
 801f7b2:	46bd      	mov	sp, r7
 801f7b4:	bd80      	pop	{r7, pc}
 801f7b6:	bf00      	nop
 801f7b8:	40013000 	.word	0x40013000
 801f7bc:	40003800 	.word	0x40003800
 801f7c0:	40003c00 	.word	0x40003c00

0801f7c4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801f7c4:	b580      	push	{r7, lr}
 801f7c6:	b08a      	sub	sp, #40	@ 0x28
 801f7c8:	af00      	add	r7, sp, #0
 801f7ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	681b      	ldr	r3, [r3, #0]
 801f7d0:	691b      	ldr	r3, [r3, #16]
 801f7d2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801f7d4:	687b      	ldr	r3, [r7, #4]
 801f7d6:	681b      	ldr	r3, [r3, #0]
 801f7d8:	695b      	ldr	r3, [r3, #20]
 801f7da:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801f7dc:	6a3a      	ldr	r2, [r7, #32]
 801f7de:	69fb      	ldr	r3, [r7, #28]
 801f7e0:	4013      	ands	r3, r2
 801f7e2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801f7e4:	687b      	ldr	r3, [r7, #4]
 801f7e6:	681b      	ldr	r3, [r3, #0]
 801f7e8:	689b      	ldr	r3, [r3, #8]
 801f7ea:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801f7ec:	2300      	movs	r3, #0
 801f7ee:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 801f7f0:	687b      	ldr	r3, [r7, #4]
 801f7f2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f7f6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801f7f8:	687b      	ldr	r3, [r7, #4]
 801f7fa:	681b      	ldr	r3, [r3, #0]
 801f7fc:	3330      	adds	r3, #48	@ 0x30
 801f7fe:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801f800:	69fb      	ldr	r3, [r7, #28]
 801f802:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801f806:	2b00      	cmp	r3, #0
 801f808:	d010      	beq.n	801f82c <HAL_SPI_IRQHandler+0x68>
 801f80a:	6a3b      	ldr	r3, [r7, #32]
 801f80c:	f003 0308 	and.w	r3, r3, #8
 801f810:	2b00      	cmp	r3, #0
 801f812:	d00b      	beq.n	801f82c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801f814:	687b      	ldr	r3, [r7, #4]
 801f816:	681b      	ldr	r3, [r3, #0]
 801f818:	699a      	ldr	r2, [r3, #24]
 801f81a:	687b      	ldr	r3, [r7, #4]
 801f81c:	681b      	ldr	r3, [r3, #0]
 801f81e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f822:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801f824:	6878      	ldr	r0, [r7, #4]
 801f826:	f000 f9c3 	bl	801fbb0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801f82a:	e192      	b.n	801fb52 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801f82c:	69bb      	ldr	r3, [r7, #24]
 801f82e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f832:	2b00      	cmp	r3, #0
 801f834:	d113      	bne.n	801f85e <HAL_SPI_IRQHandler+0x9a>
 801f836:	69bb      	ldr	r3, [r7, #24]
 801f838:	f003 0320 	and.w	r3, r3, #32
 801f83c:	2b00      	cmp	r3, #0
 801f83e:	d10e      	bne.n	801f85e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801f840:	69bb      	ldr	r3, [r7, #24]
 801f842:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801f846:	2b00      	cmp	r3, #0
 801f848:	d009      	beq.n	801f85e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801f84a:	687b      	ldr	r3, [r7, #4]
 801f84c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f84e:	6878      	ldr	r0, [r7, #4]
 801f850:	4798      	blx	r3
    hspi->RxISR(hspi);
 801f852:	687b      	ldr	r3, [r7, #4]
 801f854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f856:	6878      	ldr	r0, [r7, #4]
 801f858:	4798      	blx	r3
    handled = 1UL;
 801f85a:	2301      	movs	r3, #1
 801f85c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801f85e:	69bb      	ldr	r3, [r7, #24]
 801f860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f864:	2b00      	cmp	r3, #0
 801f866:	d10f      	bne.n	801f888 <HAL_SPI_IRQHandler+0xc4>
 801f868:	69bb      	ldr	r3, [r7, #24]
 801f86a:	f003 0301 	and.w	r3, r3, #1
 801f86e:	2b00      	cmp	r3, #0
 801f870:	d00a      	beq.n	801f888 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801f872:	69bb      	ldr	r3, [r7, #24]
 801f874:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801f878:	2b00      	cmp	r3, #0
 801f87a:	d105      	bne.n	801f888 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801f87c:	687b      	ldr	r3, [r7, #4]
 801f87e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f880:	6878      	ldr	r0, [r7, #4]
 801f882:	4798      	blx	r3
    handled = 1UL;
 801f884:	2301      	movs	r3, #1
 801f886:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801f888:	69bb      	ldr	r3, [r7, #24]
 801f88a:	f003 0320 	and.w	r3, r3, #32
 801f88e:	2b00      	cmp	r3, #0
 801f890:	d10f      	bne.n	801f8b2 <HAL_SPI_IRQHandler+0xee>
 801f892:	69bb      	ldr	r3, [r7, #24]
 801f894:	f003 0302 	and.w	r3, r3, #2
 801f898:	2b00      	cmp	r3, #0
 801f89a:	d00a      	beq.n	801f8b2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801f89c:	69bb      	ldr	r3, [r7, #24]
 801f89e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801f8a2:	2b00      	cmp	r3, #0
 801f8a4:	d105      	bne.n	801f8b2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801f8a6:	687b      	ldr	r3, [r7, #4]
 801f8a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f8aa:	6878      	ldr	r0, [r7, #4]
 801f8ac:	4798      	blx	r3
    handled = 1UL;
 801f8ae:	2301      	movs	r3, #1
 801f8b0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801f8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f8b4:	2b00      	cmp	r3, #0
 801f8b6:	f040 8147 	bne.w	801fb48 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801f8ba:	69bb      	ldr	r3, [r7, #24]
 801f8bc:	f003 0308 	and.w	r3, r3, #8
 801f8c0:	2b00      	cmp	r3, #0
 801f8c2:	f000 808b 	beq.w	801f9dc <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801f8c6:	687b      	ldr	r3, [r7, #4]
 801f8c8:	681b      	ldr	r3, [r3, #0]
 801f8ca:	699a      	ldr	r2, [r3, #24]
 801f8cc:	687b      	ldr	r3, [r7, #4]
 801f8ce:	681b      	ldr	r3, [r3, #0]
 801f8d0:	f042 0208 	orr.w	r2, r2, #8
 801f8d4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801f8d6:	687b      	ldr	r3, [r7, #4]
 801f8d8:	681b      	ldr	r3, [r3, #0]
 801f8da:	699a      	ldr	r2, [r3, #24]
 801f8dc:	687b      	ldr	r3, [r7, #4]
 801f8de:	681b      	ldr	r3, [r3, #0]
 801f8e0:	f042 0210 	orr.w	r2, r2, #16
 801f8e4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801f8e6:	687b      	ldr	r3, [r7, #4]
 801f8e8:	681b      	ldr	r3, [r3, #0]
 801f8ea:	699a      	ldr	r2, [r3, #24]
 801f8ec:	687b      	ldr	r3, [r7, #4]
 801f8ee:	681b      	ldr	r3, [r3, #0]
 801f8f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f8f4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801f8f6:	687b      	ldr	r3, [r7, #4]
 801f8f8:	681b      	ldr	r3, [r3, #0]
 801f8fa:	691a      	ldr	r2, [r3, #16]
 801f8fc:	687b      	ldr	r3, [r7, #4]
 801f8fe:	681b      	ldr	r3, [r3, #0]
 801f900:	f022 0208 	bic.w	r2, r2, #8
 801f904:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801f906:	687b      	ldr	r3, [r7, #4]
 801f908:	681b      	ldr	r3, [r3, #0]
 801f90a:	689b      	ldr	r3, [r3, #8]
 801f90c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801f910:	2b00      	cmp	r3, #0
 801f912:	d13d      	bne.n	801f990 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801f914:	e036      	b.n	801f984 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801f916:	687b      	ldr	r3, [r7, #4]
 801f918:	68db      	ldr	r3, [r3, #12]
 801f91a:	2b0f      	cmp	r3, #15
 801f91c:	d90b      	bls.n	801f936 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801f91e:	687b      	ldr	r3, [r7, #4]
 801f920:	681a      	ldr	r2, [r3, #0]
 801f922:	687b      	ldr	r3, [r7, #4]
 801f924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f926:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801f928:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801f92a:	687b      	ldr	r3, [r7, #4]
 801f92c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f92e:	1d1a      	adds	r2, r3, #4
 801f930:	687b      	ldr	r3, [r7, #4]
 801f932:	665a      	str	r2, [r3, #100]	@ 0x64
 801f934:	e01d      	b.n	801f972 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801f936:	687b      	ldr	r3, [r7, #4]
 801f938:	68db      	ldr	r3, [r3, #12]
 801f93a:	2b07      	cmp	r3, #7
 801f93c:	d90b      	bls.n	801f956 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801f93e:	687b      	ldr	r3, [r7, #4]
 801f940:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f942:	68fa      	ldr	r2, [r7, #12]
 801f944:	8812      	ldrh	r2, [r2, #0]
 801f946:	b292      	uxth	r2, r2
 801f948:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801f94a:	687b      	ldr	r3, [r7, #4]
 801f94c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f94e:	1c9a      	adds	r2, r3, #2
 801f950:	687b      	ldr	r3, [r7, #4]
 801f952:	665a      	str	r2, [r3, #100]	@ 0x64
 801f954:	e00d      	b.n	801f972 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801f956:	687b      	ldr	r3, [r7, #4]
 801f958:	681b      	ldr	r3, [r3, #0]
 801f95a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801f95e:	687b      	ldr	r3, [r7, #4]
 801f960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f962:	7812      	ldrb	r2, [r2, #0]
 801f964:	b2d2      	uxtb	r2, r2
 801f966:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801f968:	687b      	ldr	r3, [r7, #4]
 801f96a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f96c:	1c5a      	adds	r2, r3, #1
 801f96e:	687b      	ldr	r3, [r7, #4]
 801f970:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 801f972:	687b      	ldr	r3, [r7, #4]
 801f974:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801f978:	b29b      	uxth	r3, r3
 801f97a:	3b01      	subs	r3, #1
 801f97c:	b29a      	uxth	r2, r3
 801f97e:	687b      	ldr	r3, [r7, #4]
 801f980:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 801f984:	687b      	ldr	r3, [r7, #4]
 801f986:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801f98a:	b29b      	uxth	r3, r3
 801f98c:	2b00      	cmp	r3, #0
 801f98e:	d1c2      	bne.n	801f916 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801f990:	6878      	ldr	r0, [r7, #4]
 801f992:	f000 f931 	bl	801fbf8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801f996:	687b      	ldr	r3, [r7, #4]
 801f998:	2201      	movs	r2, #1
 801f99a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801f99e:	687b      	ldr	r3, [r7, #4]
 801f9a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f9a4:	2b00      	cmp	r3, #0
 801f9a6:	d003      	beq.n	801f9b0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801f9a8:	6878      	ldr	r0, [r7, #4]
 801f9aa:	f000 f8f7 	bl	801fb9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801f9ae:	e0d0      	b.n	801fb52 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801f9b0:	7cfb      	ldrb	r3, [r7, #19]
 801f9b2:	2b05      	cmp	r3, #5
 801f9b4:	d103      	bne.n	801f9be <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801f9b6:	6878      	ldr	r0, [r7, #4]
 801f9b8:	f000 f8e6 	bl	801fb88 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801f9bc:	e0c6      	b.n	801fb4c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801f9be:	7cfb      	ldrb	r3, [r7, #19]
 801f9c0:	2b04      	cmp	r3, #4
 801f9c2:	d103      	bne.n	801f9cc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801f9c4:	6878      	ldr	r0, [r7, #4]
 801f9c6:	f000 f8d5 	bl	801fb74 <HAL_SPI_RxCpltCallback>
    return;
 801f9ca:	e0bf      	b.n	801fb4c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 801f9cc:	7cfb      	ldrb	r3, [r7, #19]
 801f9ce:	2b03      	cmp	r3, #3
 801f9d0:	f040 80bc 	bne.w	801fb4c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801f9d4:	6878      	ldr	r0, [r7, #4]
 801f9d6:	f000 f8c3 	bl	801fb60 <HAL_SPI_TxCpltCallback>
    return;
 801f9da:	e0b7      	b.n	801fb4c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801f9dc:	69bb      	ldr	r3, [r7, #24]
 801f9de:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 801f9e2:	2b00      	cmp	r3, #0
 801f9e4:	f000 80b5 	beq.w	801fb52 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801f9e8:	69bb      	ldr	r3, [r7, #24]
 801f9ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f9ee:	2b00      	cmp	r3, #0
 801f9f0:	d00f      	beq.n	801fa12 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801f9f2:	687b      	ldr	r3, [r7, #4]
 801f9f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f9f8:	f043 0204 	orr.w	r2, r3, #4
 801f9fc:	687b      	ldr	r3, [r7, #4]
 801f9fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801fa02:	687b      	ldr	r3, [r7, #4]
 801fa04:	681b      	ldr	r3, [r3, #0]
 801fa06:	699a      	ldr	r2, [r3, #24]
 801fa08:	687b      	ldr	r3, [r7, #4]
 801fa0a:	681b      	ldr	r3, [r3, #0]
 801fa0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801fa10:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801fa12:	69bb      	ldr	r3, [r7, #24]
 801fa14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801fa18:	2b00      	cmp	r3, #0
 801fa1a:	d00f      	beq.n	801fa3c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801fa1c:	687b      	ldr	r3, [r7, #4]
 801fa1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fa22:	f043 0201 	orr.w	r2, r3, #1
 801fa26:	687b      	ldr	r3, [r7, #4]
 801fa28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801fa2c:	687b      	ldr	r3, [r7, #4]
 801fa2e:	681b      	ldr	r3, [r3, #0]
 801fa30:	699a      	ldr	r2, [r3, #24]
 801fa32:	687b      	ldr	r3, [r7, #4]
 801fa34:	681b      	ldr	r3, [r3, #0]
 801fa36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801fa3a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801fa3c:	69bb      	ldr	r3, [r7, #24]
 801fa3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801fa42:	2b00      	cmp	r3, #0
 801fa44:	d00f      	beq.n	801fa66 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801fa46:	687b      	ldr	r3, [r7, #4]
 801fa48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fa4c:	f043 0208 	orr.w	r2, r3, #8
 801fa50:	687b      	ldr	r3, [r7, #4]
 801fa52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801fa56:	687b      	ldr	r3, [r7, #4]
 801fa58:	681b      	ldr	r3, [r3, #0]
 801fa5a:	699a      	ldr	r2, [r3, #24]
 801fa5c:	687b      	ldr	r3, [r7, #4]
 801fa5e:	681b      	ldr	r3, [r3, #0]
 801fa60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801fa64:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 801fa66:	69bb      	ldr	r3, [r7, #24]
 801fa68:	f003 0320 	and.w	r3, r3, #32
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	d00f      	beq.n	801fa90 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801fa70:	687b      	ldr	r3, [r7, #4]
 801fa72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fa76:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801fa7a:	687b      	ldr	r3, [r7, #4]
 801fa7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801fa80:	687b      	ldr	r3, [r7, #4]
 801fa82:	681b      	ldr	r3, [r3, #0]
 801fa84:	699a      	ldr	r2, [r3, #24]
 801fa86:	687b      	ldr	r3, [r7, #4]
 801fa88:	681b      	ldr	r3, [r3, #0]
 801fa8a:	f042 0220 	orr.w	r2, r2, #32
 801fa8e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801fa90:	687b      	ldr	r3, [r7, #4]
 801fa92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fa96:	2b00      	cmp	r3, #0
 801fa98:	d05a      	beq.n	801fb50 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801fa9a:	687b      	ldr	r3, [r7, #4]
 801fa9c:	681b      	ldr	r3, [r3, #0]
 801fa9e:	681a      	ldr	r2, [r3, #0]
 801faa0:	687b      	ldr	r3, [r7, #4]
 801faa2:	681b      	ldr	r3, [r3, #0]
 801faa4:	f022 0201 	bic.w	r2, r2, #1
 801faa8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801faaa:	687b      	ldr	r3, [r7, #4]
 801faac:	681b      	ldr	r3, [r3, #0]
 801faae:	6919      	ldr	r1, [r3, #16]
 801fab0:	687b      	ldr	r3, [r7, #4]
 801fab2:	681a      	ldr	r2, [r3, #0]
 801fab4:	4b28      	ldr	r3, [pc, #160]	@ (801fb58 <HAL_SPI_IRQHandler+0x394>)
 801fab6:	400b      	ands	r3, r1
 801fab8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801faba:	697b      	ldr	r3, [r7, #20]
 801fabc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801fac0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801fac4:	d138      	bne.n	801fb38 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801fac6:	687b      	ldr	r3, [r7, #4]
 801fac8:	681b      	ldr	r3, [r3, #0]
 801faca:	689a      	ldr	r2, [r3, #8]
 801facc:	687b      	ldr	r3, [r7, #4]
 801face:	681b      	ldr	r3, [r3, #0]
 801fad0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801fad4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801fad6:	687b      	ldr	r3, [r7, #4]
 801fad8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801fada:	2b00      	cmp	r3, #0
 801fadc:	d013      	beq.n	801fb06 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801fade:	687b      	ldr	r3, [r7, #4]
 801fae0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801fae2:	4a1e      	ldr	r2, [pc, #120]	@ (801fb5c <HAL_SPI_IRQHandler+0x398>)
 801fae4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801fae6:	687b      	ldr	r3, [r7, #4]
 801fae8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801faea:	4618      	mov	r0, r3
 801faec:	f7fb f850 	bl	801ab90 <HAL_DMA_Abort_IT>
 801faf0:	4603      	mov	r3, r0
 801faf2:	2b00      	cmp	r3, #0
 801faf4:	d007      	beq.n	801fb06 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801faf6:	687b      	ldr	r3, [r7, #4]
 801faf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fafc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801fb00:	687b      	ldr	r3, [r7, #4]
 801fb02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801fb06:	687b      	ldr	r3, [r7, #4]
 801fb08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801fb0a:	2b00      	cmp	r3, #0
 801fb0c:	d020      	beq.n	801fb50 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801fb0e:	687b      	ldr	r3, [r7, #4]
 801fb10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801fb12:	4a12      	ldr	r2, [pc, #72]	@ (801fb5c <HAL_SPI_IRQHandler+0x398>)
 801fb14:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801fb16:	687b      	ldr	r3, [r7, #4]
 801fb18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801fb1a:	4618      	mov	r0, r3
 801fb1c:	f7fb f838 	bl	801ab90 <HAL_DMA_Abort_IT>
 801fb20:	4603      	mov	r3, r0
 801fb22:	2b00      	cmp	r3, #0
 801fb24:	d014      	beq.n	801fb50 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801fb26:	687b      	ldr	r3, [r7, #4]
 801fb28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fb2c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801fb30:	687b      	ldr	r3, [r7, #4]
 801fb32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801fb36:	e00b      	b.n	801fb50 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 801fb38:	687b      	ldr	r3, [r7, #4]
 801fb3a:	2201      	movs	r2, #1
 801fb3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 801fb40:	6878      	ldr	r0, [r7, #4]
 801fb42:	f000 f82b 	bl	801fb9c <HAL_SPI_ErrorCallback>
    return;
 801fb46:	e003      	b.n	801fb50 <HAL_SPI_IRQHandler+0x38c>
    return;
 801fb48:	bf00      	nop
 801fb4a:	e002      	b.n	801fb52 <HAL_SPI_IRQHandler+0x38e>
    return;
 801fb4c:	bf00      	nop
 801fb4e:	e000      	b.n	801fb52 <HAL_SPI_IRQHandler+0x38e>
    return;
 801fb50:	bf00      	nop
  }
}
 801fb52:	3728      	adds	r7, #40	@ 0x28
 801fb54:	46bd      	mov	sp, r7
 801fb56:	bd80      	pop	{r7, pc}
 801fb58:	fffffc94 	.word	0xfffffc94
 801fb5c:	0801fbc5 	.word	0x0801fbc5

0801fb60 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801fb60:	b480      	push	{r7}
 801fb62:	b083      	sub	sp, #12
 801fb64:	af00      	add	r7, sp, #0
 801fb66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 801fb68:	bf00      	nop
 801fb6a:	370c      	adds	r7, #12
 801fb6c:	46bd      	mov	sp, r7
 801fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb72:	4770      	bx	lr

0801fb74 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801fb74:	b480      	push	{r7}
 801fb76:	b083      	sub	sp, #12
 801fb78:	af00      	add	r7, sp, #0
 801fb7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801fb7c:	bf00      	nop
 801fb7e:	370c      	adds	r7, #12
 801fb80:	46bd      	mov	sp, r7
 801fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb86:	4770      	bx	lr

0801fb88 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801fb88:	b480      	push	{r7}
 801fb8a:	b083      	sub	sp, #12
 801fb8c:	af00      	add	r7, sp, #0
 801fb8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801fb90:	bf00      	nop
 801fb92:	370c      	adds	r7, #12
 801fb94:	46bd      	mov	sp, r7
 801fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb9a:	4770      	bx	lr

0801fb9c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801fb9c:	b480      	push	{r7}
 801fb9e:	b083      	sub	sp, #12
 801fba0:	af00      	add	r7, sp, #0
 801fba2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801fba4:	bf00      	nop
 801fba6:	370c      	adds	r7, #12
 801fba8:	46bd      	mov	sp, r7
 801fbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbae:	4770      	bx	lr

0801fbb0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801fbb0:	b480      	push	{r7}
 801fbb2:	b083      	sub	sp, #12
 801fbb4:	af00      	add	r7, sp, #0
 801fbb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801fbb8:	bf00      	nop
 801fbba:	370c      	adds	r7, #12
 801fbbc:	46bd      	mov	sp, r7
 801fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbc2:	4770      	bx	lr

0801fbc4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801fbc4:	b580      	push	{r7, lr}
 801fbc6:	b084      	sub	sp, #16
 801fbc8:	af00      	add	r7, sp, #0
 801fbca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801fbcc:	687b      	ldr	r3, [r7, #4]
 801fbce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fbd0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801fbd2:	68fb      	ldr	r3, [r7, #12]
 801fbd4:	2200      	movs	r2, #0
 801fbd6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801fbda:	68fb      	ldr	r3, [r7, #12]
 801fbdc:	2200      	movs	r2, #0
 801fbde:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801fbe2:	68fb      	ldr	r3, [r7, #12]
 801fbe4:	2201      	movs	r2, #1
 801fbe6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801fbea:	68f8      	ldr	r0, [r7, #12]
 801fbec:	f7ff ffd6 	bl	801fb9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801fbf0:	bf00      	nop
 801fbf2:	3710      	adds	r7, #16
 801fbf4:	46bd      	mov	sp, r7
 801fbf6:	bd80      	pop	{r7, pc}

0801fbf8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801fbf8:	b480      	push	{r7}
 801fbfa:	b085      	sub	sp, #20
 801fbfc:	af00      	add	r7, sp, #0
 801fbfe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801fc00:	687b      	ldr	r3, [r7, #4]
 801fc02:	681b      	ldr	r3, [r3, #0]
 801fc04:	695b      	ldr	r3, [r3, #20]
 801fc06:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801fc08:	687b      	ldr	r3, [r7, #4]
 801fc0a:	681b      	ldr	r3, [r3, #0]
 801fc0c:	699a      	ldr	r2, [r3, #24]
 801fc0e:	687b      	ldr	r3, [r7, #4]
 801fc10:	681b      	ldr	r3, [r3, #0]
 801fc12:	f042 0208 	orr.w	r2, r2, #8
 801fc16:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801fc18:	687b      	ldr	r3, [r7, #4]
 801fc1a:	681b      	ldr	r3, [r3, #0]
 801fc1c:	699a      	ldr	r2, [r3, #24]
 801fc1e:	687b      	ldr	r3, [r7, #4]
 801fc20:	681b      	ldr	r3, [r3, #0]
 801fc22:	f042 0210 	orr.w	r2, r2, #16
 801fc26:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801fc28:	687b      	ldr	r3, [r7, #4]
 801fc2a:	681b      	ldr	r3, [r3, #0]
 801fc2c:	681a      	ldr	r2, [r3, #0]
 801fc2e:	687b      	ldr	r3, [r7, #4]
 801fc30:	681b      	ldr	r3, [r3, #0]
 801fc32:	f022 0201 	bic.w	r2, r2, #1
 801fc36:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	681b      	ldr	r3, [r3, #0]
 801fc3c:	6919      	ldr	r1, [r3, #16]
 801fc3e:	687b      	ldr	r3, [r7, #4]
 801fc40:	681a      	ldr	r2, [r3, #0]
 801fc42:	4b3c      	ldr	r3, [pc, #240]	@ (801fd34 <SPI_CloseTransfer+0x13c>)
 801fc44:	400b      	ands	r3, r1
 801fc46:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801fc48:	687b      	ldr	r3, [r7, #4]
 801fc4a:	681b      	ldr	r3, [r3, #0]
 801fc4c:	689a      	ldr	r2, [r3, #8]
 801fc4e:	687b      	ldr	r3, [r7, #4]
 801fc50:	681b      	ldr	r3, [r3, #0]
 801fc52:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801fc56:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801fc58:	687b      	ldr	r3, [r7, #4]
 801fc5a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801fc5e:	b2db      	uxtb	r3, r3
 801fc60:	2b04      	cmp	r3, #4
 801fc62:	d014      	beq.n	801fc8e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801fc64:	68fb      	ldr	r3, [r7, #12]
 801fc66:	f003 0320 	and.w	r3, r3, #32
 801fc6a:	2b00      	cmp	r3, #0
 801fc6c:	d00f      	beq.n	801fc8e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801fc6e:	687b      	ldr	r3, [r7, #4]
 801fc70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fc74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801fc78:	687b      	ldr	r3, [r7, #4]
 801fc7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801fc7e:	687b      	ldr	r3, [r7, #4]
 801fc80:	681b      	ldr	r3, [r3, #0]
 801fc82:	699a      	ldr	r2, [r3, #24]
 801fc84:	687b      	ldr	r3, [r7, #4]
 801fc86:	681b      	ldr	r3, [r3, #0]
 801fc88:	f042 0220 	orr.w	r2, r2, #32
 801fc8c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801fc8e:	687b      	ldr	r3, [r7, #4]
 801fc90:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801fc94:	b2db      	uxtb	r3, r3
 801fc96:	2b03      	cmp	r3, #3
 801fc98:	d014      	beq.n	801fcc4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801fc9a:	68fb      	ldr	r3, [r7, #12]
 801fc9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fca0:	2b00      	cmp	r3, #0
 801fca2:	d00f      	beq.n	801fcc4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801fca4:	687b      	ldr	r3, [r7, #4]
 801fca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fcaa:	f043 0204 	orr.w	r2, r3, #4
 801fcae:	687b      	ldr	r3, [r7, #4]
 801fcb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801fcb4:	687b      	ldr	r3, [r7, #4]
 801fcb6:	681b      	ldr	r3, [r3, #0]
 801fcb8:	699a      	ldr	r2, [r3, #24]
 801fcba:	687b      	ldr	r3, [r7, #4]
 801fcbc:	681b      	ldr	r3, [r3, #0]
 801fcbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801fcc2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801fcc4:	68fb      	ldr	r3, [r7, #12]
 801fcc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801fcca:	2b00      	cmp	r3, #0
 801fccc:	d00f      	beq.n	801fcee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801fcce:	687b      	ldr	r3, [r7, #4]
 801fcd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fcd4:	f043 0201 	orr.w	r2, r3, #1
 801fcd8:	687b      	ldr	r3, [r7, #4]
 801fcda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801fcde:	687b      	ldr	r3, [r7, #4]
 801fce0:	681b      	ldr	r3, [r3, #0]
 801fce2:	699a      	ldr	r2, [r3, #24]
 801fce4:	687b      	ldr	r3, [r7, #4]
 801fce6:	681b      	ldr	r3, [r3, #0]
 801fce8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801fcec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801fcee:	68fb      	ldr	r3, [r7, #12]
 801fcf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801fcf4:	2b00      	cmp	r3, #0
 801fcf6:	d00f      	beq.n	801fd18 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801fcf8:	687b      	ldr	r3, [r7, #4]
 801fcfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fcfe:	f043 0208 	orr.w	r2, r3, #8
 801fd02:	687b      	ldr	r3, [r7, #4]
 801fd04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801fd08:	687b      	ldr	r3, [r7, #4]
 801fd0a:	681b      	ldr	r3, [r3, #0]
 801fd0c:	699a      	ldr	r2, [r3, #24]
 801fd0e:	687b      	ldr	r3, [r7, #4]
 801fd10:	681b      	ldr	r3, [r3, #0]
 801fd12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801fd16:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801fd18:	687b      	ldr	r3, [r7, #4]
 801fd1a:	2200      	movs	r2, #0
 801fd1c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	2200      	movs	r2, #0
 801fd24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 801fd28:	bf00      	nop
 801fd2a:	3714      	adds	r7, #20
 801fd2c:	46bd      	mov	sp, r7
 801fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd32:	4770      	bx	lr
 801fd34:	fffffc90 	.word	0xfffffc90

0801fd38 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801fd38:	b480      	push	{r7}
 801fd3a:	b085      	sub	sp, #20
 801fd3c:	af00      	add	r7, sp, #0
 801fd3e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801fd40:	687b      	ldr	r3, [r7, #4]
 801fd42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fd44:	095b      	lsrs	r3, r3, #5
 801fd46:	3301      	adds	r3, #1
 801fd48:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801fd4a:	687b      	ldr	r3, [r7, #4]
 801fd4c:	68db      	ldr	r3, [r3, #12]
 801fd4e:	3301      	adds	r3, #1
 801fd50:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801fd52:	68bb      	ldr	r3, [r7, #8]
 801fd54:	3307      	adds	r3, #7
 801fd56:	08db      	lsrs	r3, r3, #3
 801fd58:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801fd5a:	68bb      	ldr	r3, [r7, #8]
 801fd5c:	68fa      	ldr	r2, [r7, #12]
 801fd5e:	fb02 f303 	mul.w	r3, r2, r3
}
 801fd62:	4618      	mov	r0, r3
 801fd64:	3714      	adds	r7, #20
 801fd66:	46bd      	mov	sp, r7
 801fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd6c:	4770      	bx	lr

0801fd6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801fd6e:	b580      	push	{r7, lr}
 801fd70:	b082      	sub	sp, #8
 801fd72:	af00      	add	r7, sp, #0
 801fd74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801fd76:	687b      	ldr	r3, [r7, #4]
 801fd78:	2b00      	cmp	r3, #0
 801fd7a:	d101      	bne.n	801fd80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801fd7c:	2301      	movs	r3, #1
 801fd7e:	e049      	b.n	801fe14 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801fd80:	687b      	ldr	r3, [r7, #4]
 801fd82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801fd86:	b2db      	uxtb	r3, r3
 801fd88:	2b00      	cmp	r3, #0
 801fd8a:	d106      	bne.n	801fd9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	2200      	movs	r2, #0
 801fd90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801fd94:	6878      	ldr	r0, [r7, #4]
 801fd96:	f7e2 fce7 	bl	8002768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	2202      	movs	r2, #2
 801fd9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801fda2:	687b      	ldr	r3, [r7, #4]
 801fda4:	681a      	ldr	r2, [r3, #0]
 801fda6:	687b      	ldr	r3, [r7, #4]
 801fda8:	3304      	adds	r3, #4
 801fdaa:	4619      	mov	r1, r3
 801fdac:	4610      	mov	r0, r2
 801fdae:	f000 fb1b 	bl	80203e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	2201      	movs	r2, #1
 801fdb6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fdba:	687b      	ldr	r3, [r7, #4]
 801fdbc:	2201      	movs	r2, #1
 801fdbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801fdc2:	687b      	ldr	r3, [r7, #4]
 801fdc4:	2201      	movs	r2, #1
 801fdc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801fdca:	687b      	ldr	r3, [r7, #4]
 801fdcc:	2201      	movs	r2, #1
 801fdce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801fdd2:	687b      	ldr	r3, [r7, #4]
 801fdd4:	2201      	movs	r2, #1
 801fdd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801fdda:	687b      	ldr	r3, [r7, #4]
 801fddc:	2201      	movs	r2, #1
 801fdde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801fde2:	687b      	ldr	r3, [r7, #4]
 801fde4:	2201      	movs	r2, #1
 801fde6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fdea:	687b      	ldr	r3, [r7, #4]
 801fdec:	2201      	movs	r2, #1
 801fdee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801fdf2:	687b      	ldr	r3, [r7, #4]
 801fdf4:	2201      	movs	r2, #1
 801fdf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801fdfa:	687b      	ldr	r3, [r7, #4]
 801fdfc:	2201      	movs	r2, #1
 801fdfe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801fe02:	687b      	ldr	r3, [r7, #4]
 801fe04:	2201      	movs	r2, #1
 801fe06:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fe0a:	687b      	ldr	r3, [r7, #4]
 801fe0c:	2201      	movs	r2, #1
 801fe0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801fe12:	2300      	movs	r3, #0
}
 801fe14:	4618      	mov	r0, r3
 801fe16:	3708      	adds	r7, #8
 801fe18:	46bd      	mov	sp, r7
 801fe1a:	bd80      	pop	{r7, pc}

0801fe1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801fe1c:	b480      	push	{r7}
 801fe1e:	b085      	sub	sp, #20
 801fe20:	af00      	add	r7, sp, #0
 801fe22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801fe24:	687b      	ldr	r3, [r7, #4]
 801fe26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801fe2a:	b2db      	uxtb	r3, r3
 801fe2c:	2b01      	cmp	r3, #1
 801fe2e:	d001      	beq.n	801fe34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801fe30:	2301      	movs	r3, #1
 801fe32:	e054      	b.n	801fede <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fe34:	687b      	ldr	r3, [r7, #4]
 801fe36:	2202      	movs	r2, #2
 801fe38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801fe3c:	687b      	ldr	r3, [r7, #4]
 801fe3e:	681b      	ldr	r3, [r3, #0]
 801fe40:	68da      	ldr	r2, [r3, #12]
 801fe42:	687b      	ldr	r3, [r7, #4]
 801fe44:	681b      	ldr	r3, [r3, #0]
 801fe46:	f042 0201 	orr.w	r2, r2, #1
 801fe4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801fe4c:	687b      	ldr	r3, [r7, #4]
 801fe4e:	681b      	ldr	r3, [r3, #0]
 801fe50:	4a26      	ldr	r2, [pc, #152]	@ (801feec <HAL_TIM_Base_Start_IT+0xd0>)
 801fe52:	4293      	cmp	r3, r2
 801fe54:	d022      	beq.n	801fe9c <HAL_TIM_Base_Start_IT+0x80>
 801fe56:	687b      	ldr	r3, [r7, #4]
 801fe58:	681b      	ldr	r3, [r3, #0]
 801fe5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801fe5e:	d01d      	beq.n	801fe9c <HAL_TIM_Base_Start_IT+0x80>
 801fe60:	687b      	ldr	r3, [r7, #4]
 801fe62:	681b      	ldr	r3, [r3, #0]
 801fe64:	4a22      	ldr	r2, [pc, #136]	@ (801fef0 <HAL_TIM_Base_Start_IT+0xd4>)
 801fe66:	4293      	cmp	r3, r2
 801fe68:	d018      	beq.n	801fe9c <HAL_TIM_Base_Start_IT+0x80>
 801fe6a:	687b      	ldr	r3, [r7, #4]
 801fe6c:	681b      	ldr	r3, [r3, #0]
 801fe6e:	4a21      	ldr	r2, [pc, #132]	@ (801fef4 <HAL_TIM_Base_Start_IT+0xd8>)
 801fe70:	4293      	cmp	r3, r2
 801fe72:	d013      	beq.n	801fe9c <HAL_TIM_Base_Start_IT+0x80>
 801fe74:	687b      	ldr	r3, [r7, #4]
 801fe76:	681b      	ldr	r3, [r3, #0]
 801fe78:	4a1f      	ldr	r2, [pc, #124]	@ (801fef8 <HAL_TIM_Base_Start_IT+0xdc>)
 801fe7a:	4293      	cmp	r3, r2
 801fe7c:	d00e      	beq.n	801fe9c <HAL_TIM_Base_Start_IT+0x80>
 801fe7e:	687b      	ldr	r3, [r7, #4]
 801fe80:	681b      	ldr	r3, [r3, #0]
 801fe82:	4a1e      	ldr	r2, [pc, #120]	@ (801fefc <HAL_TIM_Base_Start_IT+0xe0>)
 801fe84:	4293      	cmp	r3, r2
 801fe86:	d009      	beq.n	801fe9c <HAL_TIM_Base_Start_IT+0x80>
 801fe88:	687b      	ldr	r3, [r7, #4]
 801fe8a:	681b      	ldr	r3, [r3, #0]
 801fe8c:	4a1c      	ldr	r2, [pc, #112]	@ (801ff00 <HAL_TIM_Base_Start_IT+0xe4>)
 801fe8e:	4293      	cmp	r3, r2
 801fe90:	d004      	beq.n	801fe9c <HAL_TIM_Base_Start_IT+0x80>
 801fe92:	687b      	ldr	r3, [r7, #4]
 801fe94:	681b      	ldr	r3, [r3, #0]
 801fe96:	4a1b      	ldr	r2, [pc, #108]	@ (801ff04 <HAL_TIM_Base_Start_IT+0xe8>)
 801fe98:	4293      	cmp	r3, r2
 801fe9a:	d115      	bne.n	801fec8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801fe9c:	687b      	ldr	r3, [r7, #4]
 801fe9e:	681b      	ldr	r3, [r3, #0]
 801fea0:	689a      	ldr	r2, [r3, #8]
 801fea2:	4b19      	ldr	r3, [pc, #100]	@ (801ff08 <HAL_TIM_Base_Start_IT+0xec>)
 801fea4:	4013      	ands	r3, r2
 801fea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fea8:	68fb      	ldr	r3, [r7, #12]
 801feaa:	2b06      	cmp	r3, #6
 801feac:	d015      	beq.n	801feda <HAL_TIM_Base_Start_IT+0xbe>
 801feae:	68fb      	ldr	r3, [r7, #12]
 801feb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801feb4:	d011      	beq.n	801feda <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801feb6:	687b      	ldr	r3, [r7, #4]
 801feb8:	681b      	ldr	r3, [r3, #0]
 801feba:	681a      	ldr	r2, [r3, #0]
 801febc:	687b      	ldr	r3, [r7, #4]
 801febe:	681b      	ldr	r3, [r3, #0]
 801fec0:	f042 0201 	orr.w	r2, r2, #1
 801fec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fec6:	e008      	b.n	801feda <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801fec8:	687b      	ldr	r3, [r7, #4]
 801feca:	681b      	ldr	r3, [r3, #0]
 801fecc:	681a      	ldr	r2, [r3, #0]
 801fece:	687b      	ldr	r3, [r7, #4]
 801fed0:	681b      	ldr	r3, [r3, #0]
 801fed2:	f042 0201 	orr.w	r2, r2, #1
 801fed6:	601a      	str	r2, [r3, #0]
 801fed8:	e000      	b.n	801fedc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801feda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801fedc:	2300      	movs	r3, #0
}
 801fede:	4618      	mov	r0, r3
 801fee0:	3714      	adds	r7, #20
 801fee2:	46bd      	mov	sp, r7
 801fee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fee8:	4770      	bx	lr
 801feea:	bf00      	nop
 801feec:	40010000 	.word	0x40010000
 801fef0:	40000400 	.word	0x40000400
 801fef4:	40000800 	.word	0x40000800
 801fef8:	40000c00 	.word	0x40000c00
 801fefc:	40010400 	.word	0x40010400
 801ff00:	40001800 	.word	0x40001800
 801ff04:	40014000 	.word	0x40014000
 801ff08:	00010007 	.word	0x00010007

0801ff0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801ff0c:	b580      	push	{r7, lr}
 801ff0e:	b082      	sub	sp, #8
 801ff10:	af00      	add	r7, sp, #0
 801ff12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ff14:	687b      	ldr	r3, [r7, #4]
 801ff16:	2b00      	cmp	r3, #0
 801ff18:	d101      	bne.n	801ff1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801ff1a:	2301      	movs	r3, #1
 801ff1c:	e049      	b.n	801ffb2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ff1e:	687b      	ldr	r3, [r7, #4]
 801ff20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801ff24:	b2db      	uxtb	r3, r3
 801ff26:	2b00      	cmp	r3, #0
 801ff28:	d106      	bne.n	801ff38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ff2a:	687b      	ldr	r3, [r7, #4]
 801ff2c:	2200      	movs	r2, #0
 801ff2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801ff32:	6878      	ldr	r0, [r7, #4]
 801ff34:	f000 f841 	bl	801ffba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ff38:	687b      	ldr	r3, [r7, #4]
 801ff3a:	2202      	movs	r2, #2
 801ff3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ff40:	687b      	ldr	r3, [r7, #4]
 801ff42:	681a      	ldr	r2, [r3, #0]
 801ff44:	687b      	ldr	r3, [r7, #4]
 801ff46:	3304      	adds	r3, #4
 801ff48:	4619      	mov	r1, r3
 801ff4a:	4610      	mov	r0, r2
 801ff4c:	f000 fa4c 	bl	80203e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ff50:	687b      	ldr	r3, [r7, #4]
 801ff52:	2201      	movs	r2, #1
 801ff54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ff58:	687b      	ldr	r3, [r7, #4]
 801ff5a:	2201      	movs	r2, #1
 801ff5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801ff60:	687b      	ldr	r3, [r7, #4]
 801ff62:	2201      	movs	r2, #1
 801ff64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801ff68:	687b      	ldr	r3, [r7, #4]
 801ff6a:	2201      	movs	r2, #1
 801ff6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801ff70:	687b      	ldr	r3, [r7, #4]
 801ff72:	2201      	movs	r2, #1
 801ff74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801ff78:	687b      	ldr	r3, [r7, #4]
 801ff7a:	2201      	movs	r2, #1
 801ff7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801ff80:	687b      	ldr	r3, [r7, #4]
 801ff82:	2201      	movs	r2, #1
 801ff84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ff88:	687b      	ldr	r3, [r7, #4]
 801ff8a:	2201      	movs	r2, #1
 801ff8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801ff90:	687b      	ldr	r3, [r7, #4]
 801ff92:	2201      	movs	r2, #1
 801ff94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801ff98:	687b      	ldr	r3, [r7, #4]
 801ff9a:	2201      	movs	r2, #1
 801ff9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801ffa0:	687b      	ldr	r3, [r7, #4]
 801ffa2:	2201      	movs	r2, #1
 801ffa4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ffa8:	687b      	ldr	r3, [r7, #4]
 801ffaa:	2201      	movs	r2, #1
 801ffac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801ffb0:	2300      	movs	r3, #0
}
 801ffb2:	4618      	mov	r0, r3
 801ffb4:	3708      	adds	r7, #8
 801ffb6:	46bd      	mov	sp, r7
 801ffb8:	bd80      	pop	{r7, pc}

0801ffba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801ffba:	b480      	push	{r7}
 801ffbc:	b083      	sub	sp, #12
 801ffbe:	af00      	add	r7, sp, #0
 801ffc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801ffc2:	bf00      	nop
 801ffc4:	370c      	adds	r7, #12
 801ffc6:	46bd      	mov	sp, r7
 801ffc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffcc:	4770      	bx	lr
	...

0801ffd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801ffd0:	b580      	push	{r7, lr}
 801ffd2:	b086      	sub	sp, #24
 801ffd4:	af00      	add	r7, sp, #0
 801ffd6:	60f8      	str	r0, [r7, #12]
 801ffd8:	60b9      	str	r1, [r7, #8]
 801ffda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ffdc:	2300      	movs	r3, #0
 801ffde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801ffe0:	68fb      	ldr	r3, [r7, #12]
 801ffe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801ffe6:	2b01      	cmp	r3, #1
 801ffe8:	d101      	bne.n	801ffee <HAL_TIM_PWM_ConfigChannel+0x1e>
 801ffea:	2302      	movs	r3, #2
 801ffec:	e0ff      	b.n	80201ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 801ffee:	68fb      	ldr	r3, [r7, #12]
 801fff0:	2201      	movs	r2, #1
 801fff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801fff6:	687b      	ldr	r3, [r7, #4]
 801fff8:	2b14      	cmp	r3, #20
 801fffa:	f200 80f0 	bhi.w	80201de <HAL_TIM_PWM_ConfigChannel+0x20e>
 801fffe:	a201      	add	r2, pc, #4	@ (adr r2, 8020004 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8020000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020004:	08020059 	.word	0x08020059
 8020008:	080201df 	.word	0x080201df
 802000c:	080201df 	.word	0x080201df
 8020010:	080201df 	.word	0x080201df
 8020014:	08020099 	.word	0x08020099
 8020018:	080201df 	.word	0x080201df
 802001c:	080201df 	.word	0x080201df
 8020020:	080201df 	.word	0x080201df
 8020024:	080200db 	.word	0x080200db
 8020028:	080201df 	.word	0x080201df
 802002c:	080201df 	.word	0x080201df
 8020030:	080201df 	.word	0x080201df
 8020034:	0802011b 	.word	0x0802011b
 8020038:	080201df 	.word	0x080201df
 802003c:	080201df 	.word	0x080201df
 8020040:	080201df 	.word	0x080201df
 8020044:	0802015d 	.word	0x0802015d
 8020048:	080201df 	.word	0x080201df
 802004c:	080201df 	.word	0x080201df
 8020050:	080201df 	.word	0x080201df
 8020054:	0802019d 	.word	0x0802019d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8020058:	68fb      	ldr	r3, [r7, #12]
 802005a:	681b      	ldr	r3, [r3, #0]
 802005c:	68b9      	ldr	r1, [r7, #8]
 802005e:	4618      	mov	r0, r3
 8020060:	f000 fa68 	bl	8020534 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8020064:	68fb      	ldr	r3, [r7, #12]
 8020066:	681b      	ldr	r3, [r3, #0]
 8020068:	699a      	ldr	r2, [r3, #24]
 802006a:	68fb      	ldr	r3, [r7, #12]
 802006c:	681b      	ldr	r3, [r3, #0]
 802006e:	f042 0208 	orr.w	r2, r2, #8
 8020072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8020074:	68fb      	ldr	r3, [r7, #12]
 8020076:	681b      	ldr	r3, [r3, #0]
 8020078:	699a      	ldr	r2, [r3, #24]
 802007a:	68fb      	ldr	r3, [r7, #12]
 802007c:	681b      	ldr	r3, [r3, #0]
 802007e:	f022 0204 	bic.w	r2, r2, #4
 8020082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8020084:	68fb      	ldr	r3, [r7, #12]
 8020086:	681b      	ldr	r3, [r3, #0]
 8020088:	6999      	ldr	r1, [r3, #24]
 802008a:	68bb      	ldr	r3, [r7, #8]
 802008c:	691a      	ldr	r2, [r3, #16]
 802008e:	68fb      	ldr	r3, [r7, #12]
 8020090:	681b      	ldr	r3, [r3, #0]
 8020092:	430a      	orrs	r2, r1
 8020094:	619a      	str	r2, [r3, #24]
      break;
 8020096:	e0a5      	b.n	80201e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8020098:	68fb      	ldr	r3, [r7, #12]
 802009a:	681b      	ldr	r3, [r3, #0]
 802009c:	68b9      	ldr	r1, [r7, #8]
 802009e:	4618      	mov	r0, r3
 80200a0:	f000 fad8 	bl	8020654 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80200a4:	68fb      	ldr	r3, [r7, #12]
 80200a6:	681b      	ldr	r3, [r3, #0]
 80200a8:	699a      	ldr	r2, [r3, #24]
 80200aa:	68fb      	ldr	r3, [r7, #12]
 80200ac:	681b      	ldr	r3, [r3, #0]
 80200ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80200b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80200b4:	68fb      	ldr	r3, [r7, #12]
 80200b6:	681b      	ldr	r3, [r3, #0]
 80200b8:	699a      	ldr	r2, [r3, #24]
 80200ba:	68fb      	ldr	r3, [r7, #12]
 80200bc:	681b      	ldr	r3, [r3, #0]
 80200be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80200c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80200c4:	68fb      	ldr	r3, [r7, #12]
 80200c6:	681b      	ldr	r3, [r3, #0]
 80200c8:	6999      	ldr	r1, [r3, #24]
 80200ca:	68bb      	ldr	r3, [r7, #8]
 80200cc:	691b      	ldr	r3, [r3, #16]
 80200ce:	021a      	lsls	r2, r3, #8
 80200d0:	68fb      	ldr	r3, [r7, #12]
 80200d2:	681b      	ldr	r3, [r3, #0]
 80200d4:	430a      	orrs	r2, r1
 80200d6:	619a      	str	r2, [r3, #24]
      break;
 80200d8:	e084      	b.n	80201e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80200da:	68fb      	ldr	r3, [r7, #12]
 80200dc:	681b      	ldr	r3, [r3, #0]
 80200de:	68b9      	ldr	r1, [r7, #8]
 80200e0:	4618      	mov	r0, r3
 80200e2:	f000 fb41 	bl	8020768 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80200e6:	68fb      	ldr	r3, [r7, #12]
 80200e8:	681b      	ldr	r3, [r3, #0]
 80200ea:	69da      	ldr	r2, [r3, #28]
 80200ec:	68fb      	ldr	r3, [r7, #12]
 80200ee:	681b      	ldr	r3, [r3, #0]
 80200f0:	f042 0208 	orr.w	r2, r2, #8
 80200f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80200f6:	68fb      	ldr	r3, [r7, #12]
 80200f8:	681b      	ldr	r3, [r3, #0]
 80200fa:	69da      	ldr	r2, [r3, #28]
 80200fc:	68fb      	ldr	r3, [r7, #12]
 80200fe:	681b      	ldr	r3, [r3, #0]
 8020100:	f022 0204 	bic.w	r2, r2, #4
 8020104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8020106:	68fb      	ldr	r3, [r7, #12]
 8020108:	681b      	ldr	r3, [r3, #0]
 802010a:	69d9      	ldr	r1, [r3, #28]
 802010c:	68bb      	ldr	r3, [r7, #8]
 802010e:	691a      	ldr	r2, [r3, #16]
 8020110:	68fb      	ldr	r3, [r7, #12]
 8020112:	681b      	ldr	r3, [r3, #0]
 8020114:	430a      	orrs	r2, r1
 8020116:	61da      	str	r2, [r3, #28]
      break;
 8020118:	e064      	b.n	80201e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 802011a:	68fb      	ldr	r3, [r7, #12]
 802011c:	681b      	ldr	r3, [r3, #0]
 802011e:	68b9      	ldr	r1, [r7, #8]
 8020120:	4618      	mov	r0, r3
 8020122:	f000 fba9 	bl	8020878 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8020126:	68fb      	ldr	r3, [r7, #12]
 8020128:	681b      	ldr	r3, [r3, #0]
 802012a:	69da      	ldr	r2, [r3, #28]
 802012c:	68fb      	ldr	r3, [r7, #12]
 802012e:	681b      	ldr	r3, [r3, #0]
 8020130:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8020134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8020136:	68fb      	ldr	r3, [r7, #12]
 8020138:	681b      	ldr	r3, [r3, #0]
 802013a:	69da      	ldr	r2, [r3, #28]
 802013c:	68fb      	ldr	r3, [r7, #12]
 802013e:	681b      	ldr	r3, [r3, #0]
 8020140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8020144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8020146:	68fb      	ldr	r3, [r7, #12]
 8020148:	681b      	ldr	r3, [r3, #0]
 802014a:	69d9      	ldr	r1, [r3, #28]
 802014c:	68bb      	ldr	r3, [r7, #8]
 802014e:	691b      	ldr	r3, [r3, #16]
 8020150:	021a      	lsls	r2, r3, #8
 8020152:	68fb      	ldr	r3, [r7, #12]
 8020154:	681b      	ldr	r3, [r3, #0]
 8020156:	430a      	orrs	r2, r1
 8020158:	61da      	str	r2, [r3, #28]
      break;
 802015a:	e043      	b.n	80201e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 802015c:	68fb      	ldr	r3, [r7, #12]
 802015e:	681b      	ldr	r3, [r3, #0]
 8020160:	68b9      	ldr	r1, [r7, #8]
 8020162:	4618      	mov	r0, r3
 8020164:	f000 fbf2 	bl	802094c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8020168:	68fb      	ldr	r3, [r7, #12]
 802016a:	681b      	ldr	r3, [r3, #0]
 802016c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 802016e:	68fb      	ldr	r3, [r7, #12]
 8020170:	681b      	ldr	r3, [r3, #0]
 8020172:	f042 0208 	orr.w	r2, r2, #8
 8020176:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8020178:	68fb      	ldr	r3, [r7, #12]
 802017a:	681b      	ldr	r3, [r3, #0]
 802017c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 802017e:	68fb      	ldr	r3, [r7, #12]
 8020180:	681b      	ldr	r3, [r3, #0]
 8020182:	f022 0204 	bic.w	r2, r2, #4
 8020186:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8020188:	68fb      	ldr	r3, [r7, #12]
 802018a:	681b      	ldr	r3, [r3, #0]
 802018c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 802018e:	68bb      	ldr	r3, [r7, #8]
 8020190:	691a      	ldr	r2, [r3, #16]
 8020192:	68fb      	ldr	r3, [r7, #12]
 8020194:	681b      	ldr	r3, [r3, #0]
 8020196:	430a      	orrs	r2, r1
 8020198:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 802019a:	e023      	b.n	80201e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 802019c:	68fb      	ldr	r3, [r7, #12]
 802019e:	681b      	ldr	r3, [r3, #0]
 80201a0:	68b9      	ldr	r1, [r7, #8]
 80201a2:	4618      	mov	r0, r3
 80201a4:	f000 fc36 	bl	8020a14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80201a8:	68fb      	ldr	r3, [r7, #12]
 80201aa:	681b      	ldr	r3, [r3, #0]
 80201ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80201ae:	68fb      	ldr	r3, [r7, #12]
 80201b0:	681b      	ldr	r3, [r3, #0]
 80201b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80201b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80201b8:	68fb      	ldr	r3, [r7, #12]
 80201ba:	681b      	ldr	r3, [r3, #0]
 80201bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80201be:	68fb      	ldr	r3, [r7, #12]
 80201c0:	681b      	ldr	r3, [r3, #0]
 80201c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80201c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80201c8:	68fb      	ldr	r3, [r7, #12]
 80201ca:	681b      	ldr	r3, [r3, #0]
 80201cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80201ce:	68bb      	ldr	r3, [r7, #8]
 80201d0:	691b      	ldr	r3, [r3, #16]
 80201d2:	021a      	lsls	r2, r3, #8
 80201d4:	68fb      	ldr	r3, [r7, #12]
 80201d6:	681b      	ldr	r3, [r3, #0]
 80201d8:	430a      	orrs	r2, r1
 80201da:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80201dc:	e002      	b.n	80201e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80201de:	2301      	movs	r3, #1
 80201e0:	75fb      	strb	r3, [r7, #23]
      break;
 80201e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80201e4:	68fb      	ldr	r3, [r7, #12]
 80201e6:	2200      	movs	r2, #0
 80201e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80201ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80201ee:	4618      	mov	r0, r3
 80201f0:	3718      	adds	r7, #24
 80201f2:	46bd      	mov	sp, r7
 80201f4:	bd80      	pop	{r7, pc}
 80201f6:	bf00      	nop

080201f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80201f8:	b580      	push	{r7, lr}
 80201fa:	b084      	sub	sp, #16
 80201fc:	af00      	add	r7, sp, #0
 80201fe:	6078      	str	r0, [r7, #4]
 8020200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8020202:	2300      	movs	r3, #0
 8020204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8020206:	687b      	ldr	r3, [r7, #4]
 8020208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 802020c:	2b01      	cmp	r3, #1
 802020e:	d101      	bne.n	8020214 <HAL_TIM_ConfigClockSource+0x1c>
 8020210:	2302      	movs	r3, #2
 8020212:	e0dc      	b.n	80203ce <HAL_TIM_ConfigClockSource+0x1d6>
 8020214:	687b      	ldr	r3, [r7, #4]
 8020216:	2201      	movs	r2, #1
 8020218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802021c:	687b      	ldr	r3, [r7, #4]
 802021e:	2202      	movs	r2, #2
 8020220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	681b      	ldr	r3, [r3, #0]
 8020228:	689b      	ldr	r3, [r3, #8]
 802022a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 802022c:	68ba      	ldr	r2, [r7, #8]
 802022e:	4b6a      	ldr	r3, [pc, #424]	@ (80203d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8020230:	4013      	ands	r3, r2
 8020232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020234:	68bb      	ldr	r3, [r7, #8]
 8020236:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 802023a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 802023c:	687b      	ldr	r3, [r7, #4]
 802023e:	681b      	ldr	r3, [r3, #0]
 8020240:	68ba      	ldr	r2, [r7, #8]
 8020242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8020244:	683b      	ldr	r3, [r7, #0]
 8020246:	681b      	ldr	r3, [r3, #0]
 8020248:	4a64      	ldr	r2, [pc, #400]	@ (80203dc <HAL_TIM_ConfigClockSource+0x1e4>)
 802024a:	4293      	cmp	r3, r2
 802024c:	f000 80a9 	beq.w	80203a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8020250:	4a62      	ldr	r2, [pc, #392]	@ (80203dc <HAL_TIM_ConfigClockSource+0x1e4>)
 8020252:	4293      	cmp	r3, r2
 8020254:	f200 80ae 	bhi.w	80203b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8020258:	4a61      	ldr	r2, [pc, #388]	@ (80203e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 802025a:	4293      	cmp	r3, r2
 802025c:	f000 80a1 	beq.w	80203a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8020260:	4a5f      	ldr	r2, [pc, #380]	@ (80203e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8020262:	4293      	cmp	r3, r2
 8020264:	f200 80a6 	bhi.w	80203b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8020268:	4a5e      	ldr	r2, [pc, #376]	@ (80203e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 802026a:	4293      	cmp	r3, r2
 802026c:	f000 8099 	beq.w	80203a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8020270:	4a5c      	ldr	r2, [pc, #368]	@ (80203e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8020272:	4293      	cmp	r3, r2
 8020274:	f200 809e 	bhi.w	80203b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8020278:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 802027c:	f000 8091 	beq.w	80203a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8020280:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8020284:	f200 8096 	bhi.w	80203b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8020288:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 802028c:	f000 8089 	beq.w	80203a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8020290:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020294:	f200 808e 	bhi.w	80203b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8020298:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802029c:	d03e      	beq.n	802031c <HAL_TIM_ConfigClockSource+0x124>
 802029e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80202a2:	f200 8087 	bhi.w	80203b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80202a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80202aa:	f000 8086 	beq.w	80203ba <HAL_TIM_ConfigClockSource+0x1c2>
 80202ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80202b2:	d87f      	bhi.n	80203b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80202b4:	2b70      	cmp	r3, #112	@ 0x70
 80202b6:	d01a      	beq.n	80202ee <HAL_TIM_ConfigClockSource+0xf6>
 80202b8:	2b70      	cmp	r3, #112	@ 0x70
 80202ba:	d87b      	bhi.n	80203b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80202bc:	2b60      	cmp	r3, #96	@ 0x60
 80202be:	d050      	beq.n	8020362 <HAL_TIM_ConfigClockSource+0x16a>
 80202c0:	2b60      	cmp	r3, #96	@ 0x60
 80202c2:	d877      	bhi.n	80203b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80202c4:	2b50      	cmp	r3, #80	@ 0x50
 80202c6:	d03c      	beq.n	8020342 <HAL_TIM_ConfigClockSource+0x14a>
 80202c8:	2b50      	cmp	r3, #80	@ 0x50
 80202ca:	d873      	bhi.n	80203b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80202cc:	2b40      	cmp	r3, #64	@ 0x40
 80202ce:	d058      	beq.n	8020382 <HAL_TIM_ConfigClockSource+0x18a>
 80202d0:	2b40      	cmp	r3, #64	@ 0x40
 80202d2:	d86f      	bhi.n	80203b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80202d4:	2b30      	cmp	r3, #48	@ 0x30
 80202d6:	d064      	beq.n	80203a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80202d8:	2b30      	cmp	r3, #48	@ 0x30
 80202da:	d86b      	bhi.n	80203b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80202dc:	2b20      	cmp	r3, #32
 80202de:	d060      	beq.n	80203a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80202e0:	2b20      	cmp	r3, #32
 80202e2:	d867      	bhi.n	80203b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80202e4:	2b00      	cmp	r3, #0
 80202e6:	d05c      	beq.n	80203a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80202e8:	2b10      	cmp	r3, #16
 80202ea:	d05a      	beq.n	80203a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80202ec:	e062      	b.n	80203b4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80202ee:	687b      	ldr	r3, [r7, #4]
 80202f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80202f2:	683b      	ldr	r3, [r7, #0]
 80202f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80202f6:	683b      	ldr	r3, [r7, #0]
 80202f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80202fa:	683b      	ldr	r3, [r7, #0]
 80202fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80202fe:	f000 fc6d 	bl	8020bdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8020302:	687b      	ldr	r3, [r7, #4]
 8020304:	681b      	ldr	r3, [r3, #0]
 8020306:	689b      	ldr	r3, [r3, #8]
 8020308:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 802030a:	68bb      	ldr	r3, [r7, #8]
 802030c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8020310:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8020312:	687b      	ldr	r3, [r7, #4]
 8020314:	681b      	ldr	r3, [r3, #0]
 8020316:	68ba      	ldr	r2, [r7, #8]
 8020318:	609a      	str	r2, [r3, #8]
      break;
 802031a:	e04f      	b.n	80203bc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 802031c:	687b      	ldr	r3, [r7, #4]
 802031e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8020320:	683b      	ldr	r3, [r7, #0]
 8020322:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8020324:	683b      	ldr	r3, [r7, #0]
 8020326:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8020328:	683b      	ldr	r3, [r7, #0]
 802032a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 802032c:	f000 fc56 	bl	8020bdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8020330:	687b      	ldr	r3, [r7, #4]
 8020332:	681b      	ldr	r3, [r3, #0]
 8020334:	689a      	ldr	r2, [r3, #8]
 8020336:	687b      	ldr	r3, [r7, #4]
 8020338:	681b      	ldr	r3, [r3, #0]
 802033a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 802033e:	609a      	str	r2, [r3, #8]
      break;
 8020340:	e03c      	b.n	80203bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8020342:	687b      	ldr	r3, [r7, #4]
 8020344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8020346:	683b      	ldr	r3, [r7, #0]
 8020348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 802034a:	683b      	ldr	r3, [r7, #0]
 802034c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 802034e:	461a      	mov	r2, r3
 8020350:	f000 fbc6 	bl	8020ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8020354:	687b      	ldr	r3, [r7, #4]
 8020356:	681b      	ldr	r3, [r3, #0]
 8020358:	2150      	movs	r1, #80	@ 0x50
 802035a:	4618      	mov	r0, r3
 802035c:	f000 fc20 	bl	8020ba0 <TIM_ITRx_SetConfig>
      break;
 8020360:	e02c      	b.n	80203bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8020362:	687b      	ldr	r3, [r7, #4]
 8020364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8020366:	683b      	ldr	r3, [r7, #0]
 8020368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 802036a:	683b      	ldr	r3, [r7, #0]
 802036c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 802036e:	461a      	mov	r2, r3
 8020370:	f000 fbe5 	bl	8020b3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8020374:	687b      	ldr	r3, [r7, #4]
 8020376:	681b      	ldr	r3, [r3, #0]
 8020378:	2160      	movs	r1, #96	@ 0x60
 802037a:	4618      	mov	r0, r3
 802037c:	f000 fc10 	bl	8020ba0 <TIM_ITRx_SetConfig>
      break;
 8020380:	e01c      	b.n	80203bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8020382:	687b      	ldr	r3, [r7, #4]
 8020384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8020386:	683b      	ldr	r3, [r7, #0]
 8020388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 802038a:	683b      	ldr	r3, [r7, #0]
 802038c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 802038e:	461a      	mov	r2, r3
 8020390:	f000 fba6 	bl	8020ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8020394:	687b      	ldr	r3, [r7, #4]
 8020396:	681b      	ldr	r3, [r3, #0]
 8020398:	2140      	movs	r1, #64	@ 0x40
 802039a:	4618      	mov	r0, r3
 802039c:	f000 fc00 	bl	8020ba0 <TIM_ITRx_SetConfig>
      break;
 80203a0:	e00c      	b.n	80203bc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80203a2:	687b      	ldr	r3, [r7, #4]
 80203a4:	681a      	ldr	r2, [r3, #0]
 80203a6:	683b      	ldr	r3, [r7, #0]
 80203a8:	681b      	ldr	r3, [r3, #0]
 80203aa:	4619      	mov	r1, r3
 80203ac:	4610      	mov	r0, r2
 80203ae:	f000 fbf7 	bl	8020ba0 <TIM_ITRx_SetConfig>
      break;
 80203b2:	e003      	b.n	80203bc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80203b4:	2301      	movs	r3, #1
 80203b6:	73fb      	strb	r3, [r7, #15]
      break;
 80203b8:	e000      	b.n	80203bc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80203ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80203bc:	687b      	ldr	r3, [r7, #4]
 80203be:	2201      	movs	r2, #1
 80203c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80203c4:	687b      	ldr	r3, [r7, #4]
 80203c6:	2200      	movs	r2, #0
 80203c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80203cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80203ce:	4618      	mov	r0, r3
 80203d0:	3710      	adds	r7, #16
 80203d2:	46bd      	mov	sp, r7
 80203d4:	bd80      	pop	{r7, pc}
 80203d6:	bf00      	nop
 80203d8:	ffceff88 	.word	0xffceff88
 80203dc:	00100040 	.word	0x00100040
 80203e0:	00100030 	.word	0x00100030
 80203e4:	00100020 	.word	0x00100020

080203e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80203e8:	b480      	push	{r7}
 80203ea:	b085      	sub	sp, #20
 80203ec:	af00      	add	r7, sp, #0
 80203ee:	6078      	str	r0, [r7, #4]
 80203f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80203f2:	687b      	ldr	r3, [r7, #4]
 80203f4:	681b      	ldr	r3, [r3, #0]
 80203f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80203f8:	687b      	ldr	r3, [r7, #4]
 80203fa:	4a46      	ldr	r2, [pc, #280]	@ (8020514 <TIM_Base_SetConfig+0x12c>)
 80203fc:	4293      	cmp	r3, r2
 80203fe:	d013      	beq.n	8020428 <TIM_Base_SetConfig+0x40>
 8020400:	687b      	ldr	r3, [r7, #4]
 8020402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020406:	d00f      	beq.n	8020428 <TIM_Base_SetConfig+0x40>
 8020408:	687b      	ldr	r3, [r7, #4]
 802040a:	4a43      	ldr	r2, [pc, #268]	@ (8020518 <TIM_Base_SetConfig+0x130>)
 802040c:	4293      	cmp	r3, r2
 802040e:	d00b      	beq.n	8020428 <TIM_Base_SetConfig+0x40>
 8020410:	687b      	ldr	r3, [r7, #4]
 8020412:	4a42      	ldr	r2, [pc, #264]	@ (802051c <TIM_Base_SetConfig+0x134>)
 8020414:	4293      	cmp	r3, r2
 8020416:	d007      	beq.n	8020428 <TIM_Base_SetConfig+0x40>
 8020418:	687b      	ldr	r3, [r7, #4]
 802041a:	4a41      	ldr	r2, [pc, #260]	@ (8020520 <TIM_Base_SetConfig+0x138>)
 802041c:	4293      	cmp	r3, r2
 802041e:	d003      	beq.n	8020428 <TIM_Base_SetConfig+0x40>
 8020420:	687b      	ldr	r3, [r7, #4]
 8020422:	4a40      	ldr	r2, [pc, #256]	@ (8020524 <TIM_Base_SetConfig+0x13c>)
 8020424:	4293      	cmp	r3, r2
 8020426:	d108      	bne.n	802043a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8020428:	68fb      	ldr	r3, [r7, #12]
 802042a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 802042e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8020430:	683b      	ldr	r3, [r7, #0]
 8020432:	685b      	ldr	r3, [r3, #4]
 8020434:	68fa      	ldr	r2, [r7, #12]
 8020436:	4313      	orrs	r3, r2
 8020438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802043a:	687b      	ldr	r3, [r7, #4]
 802043c:	4a35      	ldr	r2, [pc, #212]	@ (8020514 <TIM_Base_SetConfig+0x12c>)
 802043e:	4293      	cmp	r3, r2
 8020440:	d01f      	beq.n	8020482 <TIM_Base_SetConfig+0x9a>
 8020442:	687b      	ldr	r3, [r7, #4]
 8020444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020448:	d01b      	beq.n	8020482 <TIM_Base_SetConfig+0x9a>
 802044a:	687b      	ldr	r3, [r7, #4]
 802044c:	4a32      	ldr	r2, [pc, #200]	@ (8020518 <TIM_Base_SetConfig+0x130>)
 802044e:	4293      	cmp	r3, r2
 8020450:	d017      	beq.n	8020482 <TIM_Base_SetConfig+0x9a>
 8020452:	687b      	ldr	r3, [r7, #4]
 8020454:	4a31      	ldr	r2, [pc, #196]	@ (802051c <TIM_Base_SetConfig+0x134>)
 8020456:	4293      	cmp	r3, r2
 8020458:	d013      	beq.n	8020482 <TIM_Base_SetConfig+0x9a>
 802045a:	687b      	ldr	r3, [r7, #4]
 802045c:	4a30      	ldr	r2, [pc, #192]	@ (8020520 <TIM_Base_SetConfig+0x138>)
 802045e:	4293      	cmp	r3, r2
 8020460:	d00f      	beq.n	8020482 <TIM_Base_SetConfig+0x9a>
 8020462:	687b      	ldr	r3, [r7, #4]
 8020464:	4a2f      	ldr	r2, [pc, #188]	@ (8020524 <TIM_Base_SetConfig+0x13c>)
 8020466:	4293      	cmp	r3, r2
 8020468:	d00b      	beq.n	8020482 <TIM_Base_SetConfig+0x9a>
 802046a:	687b      	ldr	r3, [r7, #4]
 802046c:	4a2e      	ldr	r2, [pc, #184]	@ (8020528 <TIM_Base_SetConfig+0x140>)
 802046e:	4293      	cmp	r3, r2
 8020470:	d007      	beq.n	8020482 <TIM_Base_SetConfig+0x9a>
 8020472:	687b      	ldr	r3, [r7, #4]
 8020474:	4a2d      	ldr	r2, [pc, #180]	@ (802052c <TIM_Base_SetConfig+0x144>)
 8020476:	4293      	cmp	r3, r2
 8020478:	d003      	beq.n	8020482 <TIM_Base_SetConfig+0x9a>
 802047a:	687b      	ldr	r3, [r7, #4]
 802047c:	4a2c      	ldr	r2, [pc, #176]	@ (8020530 <TIM_Base_SetConfig+0x148>)
 802047e:	4293      	cmp	r3, r2
 8020480:	d108      	bne.n	8020494 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8020482:	68fb      	ldr	r3, [r7, #12]
 8020484:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802048a:	683b      	ldr	r3, [r7, #0]
 802048c:	68db      	ldr	r3, [r3, #12]
 802048e:	68fa      	ldr	r2, [r7, #12]
 8020490:	4313      	orrs	r3, r2
 8020492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8020494:	68fb      	ldr	r3, [r7, #12]
 8020496:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 802049a:	683b      	ldr	r3, [r7, #0]
 802049c:	695b      	ldr	r3, [r3, #20]
 802049e:	4313      	orrs	r3, r2
 80204a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80204a2:	687b      	ldr	r3, [r7, #4]
 80204a4:	68fa      	ldr	r2, [r7, #12]
 80204a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80204a8:	683b      	ldr	r3, [r7, #0]
 80204aa:	689a      	ldr	r2, [r3, #8]
 80204ac:	687b      	ldr	r3, [r7, #4]
 80204ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80204b0:	683b      	ldr	r3, [r7, #0]
 80204b2:	681a      	ldr	r2, [r3, #0]
 80204b4:	687b      	ldr	r3, [r7, #4]
 80204b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80204b8:	687b      	ldr	r3, [r7, #4]
 80204ba:	4a16      	ldr	r2, [pc, #88]	@ (8020514 <TIM_Base_SetConfig+0x12c>)
 80204bc:	4293      	cmp	r3, r2
 80204be:	d00f      	beq.n	80204e0 <TIM_Base_SetConfig+0xf8>
 80204c0:	687b      	ldr	r3, [r7, #4]
 80204c2:	4a18      	ldr	r2, [pc, #96]	@ (8020524 <TIM_Base_SetConfig+0x13c>)
 80204c4:	4293      	cmp	r3, r2
 80204c6:	d00b      	beq.n	80204e0 <TIM_Base_SetConfig+0xf8>
 80204c8:	687b      	ldr	r3, [r7, #4]
 80204ca:	4a17      	ldr	r2, [pc, #92]	@ (8020528 <TIM_Base_SetConfig+0x140>)
 80204cc:	4293      	cmp	r3, r2
 80204ce:	d007      	beq.n	80204e0 <TIM_Base_SetConfig+0xf8>
 80204d0:	687b      	ldr	r3, [r7, #4]
 80204d2:	4a16      	ldr	r2, [pc, #88]	@ (802052c <TIM_Base_SetConfig+0x144>)
 80204d4:	4293      	cmp	r3, r2
 80204d6:	d003      	beq.n	80204e0 <TIM_Base_SetConfig+0xf8>
 80204d8:	687b      	ldr	r3, [r7, #4]
 80204da:	4a15      	ldr	r2, [pc, #84]	@ (8020530 <TIM_Base_SetConfig+0x148>)
 80204dc:	4293      	cmp	r3, r2
 80204de:	d103      	bne.n	80204e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80204e0:	683b      	ldr	r3, [r7, #0]
 80204e2:	691a      	ldr	r2, [r3, #16]
 80204e4:	687b      	ldr	r3, [r7, #4]
 80204e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80204e8:	687b      	ldr	r3, [r7, #4]
 80204ea:	2201      	movs	r2, #1
 80204ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80204ee:	687b      	ldr	r3, [r7, #4]
 80204f0:	691b      	ldr	r3, [r3, #16]
 80204f2:	f003 0301 	and.w	r3, r3, #1
 80204f6:	2b01      	cmp	r3, #1
 80204f8:	d105      	bne.n	8020506 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80204fa:	687b      	ldr	r3, [r7, #4]
 80204fc:	691b      	ldr	r3, [r3, #16]
 80204fe:	f023 0201 	bic.w	r2, r3, #1
 8020502:	687b      	ldr	r3, [r7, #4]
 8020504:	611a      	str	r2, [r3, #16]
  }
}
 8020506:	bf00      	nop
 8020508:	3714      	adds	r7, #20
 802050a:	46bd      	mov	sp, r7
 802050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020510:	4770      	bx	lr
 8020512:	bf00      	nop
 8020514:	40010000 	.word	0x40010000
 8020518:	40000400 	.word	0x40000400
 802051c:	40000800 	.word	0x40000800
 8020520:	40000c00 	.word	0x40000c00
 8020524:	40010400 	.word	0x40010400
 8020528:	40014000 	.word	0x40014000
 802052c:	40014400 	.word	0x40014400
 8020530:	40014800 	.word	0x40014800

08020534 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020534:	b480      	push	{r7}
 8020536:	b087      	sub	sp, #28
 8020538:	af00      	add	r7, sp, #0
 802053a:	6078      	str	r0, [r7, #4]
 802053c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802053e:	687b      	ldr	r3, [r7, #4]
 8020540:	6a1b      	ldr	r3, [r3, #32]
 8020542:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020544:	687b      	ldr	r3, [r7, #4]
 8020546:	6a1b      	ldr	r3, [r3, #32]
 8020548:	f023 0201 	bic.w	r2, r3, #1
 802054c:	687b      	ldr	r3, [r7, #4]
 802054e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020550:	687b      	ldr	r3, [r7, #4]
 8020552:	685b      	ldr	r3, [r3, #4]
 8020554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020556:	687b      	ldr	r3, [r7, #4]
 8020558:	699b      	ldr	r3, [r3, #24]
 802055a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 802055c:	68fa      	ldr	r2, [r7, #12]
 802055e:	4b37      	ldr	r3, [pc, #220]	@ (802063c <TIM_OC1_SetConfig+0x108>)
 8020560:	4013      	ands	r3, r2
 8020562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8020564:	68fb      	ldr	r3, [r7, #12]
 8020566:	f023 0303 	bic.w	r3, r3, #3
 802056a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802056c:	683b      	ldr	r3, [r7, #0]
 802056e:	681b      	ldr	r3, [r3, #0]
 8020570:	68fa      	ldr	r2, [r7, #12]
 8020572:	4313      	orrs	r3, r2
 8020574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8020576:	697b      	ldr	r3, [r7, #20]
 8020578:	f023 0302 	bic.w	r3, r3, #2
 802057c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 802057e:	683b      	ldr	r3, [r7, #0]
 8020580:	689b      	ldr	r3, [r3, #8]
 8020582:	697a      	ldr	r2, [r7, #20]
 8020584:	4313      	orrs	r3, r2
 8020586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8020588:	687b      	ldr	r3, [r7, #4]
 802058a:	4a2d      	ldr	r2, [pc, #180]	@ (8020640 <TIM_OC1_SetConfig+0x10c>)
 802058c:	4293      	cmp	r3, r2
 802058e:	d00f      	beq.n	80205b0 <TIM_OC1_SetConfig+0x7c>
 8020590:	687b      	ldr	r3, [r7, #4]
 8020592:	4a2c      	ldr	r2, [pc, #176]	@ (8020644 <TIM_OC1_SetConfig+0x110>)
 8020594:	4293      	cmp	r3, r2
 8020596:	d00b      	beq.n	80205b0 <TIM_OC1_SetConfig+0x7c>
 8020598:	687b      	ldr	r3, [r7, #4]
 802059a:	4a2b      	ldr	r2, [pc, #172]	@ (8020648 <TIM_OC1_SetConfig+0x114>)
 802059c:	4293      	cmp	r3, r2
 802059e:	d007      	beq.n	80205b0 <TIM_OC1_SetConfig+0x7c>
 80205a0:	687b      	ldr	r3, [r7, #4]
 80205a2:	4a2a      	ldr	r2, [pc, #168]	@ (802064c <TIM_OC1_SetConfig+0x118>)
 80205a4:	4293      	cmp	r3, r2
 80205a6:	d003      	beq.n	80205b0 <TIM_OC1_SetConfig+0x7c>
 80205a8:	687b      	ldr	r3, [r7, #4]
 80205aa:	4a29      	ldr	r2, [pc, #164]	@ (8020650 <TIM_OC1_SetConfig+0x11c>)
 80205ac:	4293      	cmp	r3, r2
 80205ae:	d10c      	bne.n	80205ca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80205b0:	697b      	ldr	r3, [r7, #20]
 80205b2:	f023 0308 	bic.w	r3, r3, #8
 80205b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80205b8:	683b      	ldr	r3, [r7, #0]
 80205ba:	68db      	ldr	r3, [r3, #12]
 80205bc:	697a      	ldr	r2, [r7, #20]
 80205be:	4313      	orrs	r3, r2
 80205c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80205c2:	697b      	ldr	r3, [r7, #20]
 80205c4:	f023 0304 	bic.w	r3, r3, #4
 80205c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80205ca:	687b      	ldr	r3, [r7, #4]
 80205cc:	4a1c      	ldr	r2, [pc, #112]	@ (8020640 <TIM_OC1_SetConfig+0x10c>)
 80205ce:	4293      	cmp	r3, r2
 80205d0:	d00f      	beq.n	80205f2 <TIM_OC1_SetConfig+0xbe>
 80205d2:	687b      	ldr	r3, [r7, #4]
 80205d4:	4a1b      	ldr	r2, [pc, #108]	@ (8020644 <TIM_OC1_SetConfig+0x110>)
 80205d6:	4293      	cmp	r3, r2
 80205d8:	d00b      	beq.n	80205f2 <TIM_OC1_SetConfig+0xbe>
 80205da:	687b      	ldr	r3, [r7, #4]
 80205dc:	4a1a      	ldr	r2, [pc, #104]	@ (8020648 <TIM_OC1_SetConfig+0x114>)
 80205de:	4293      	cmp	r3, r2
 80205e0:	d007      	beq.n	80205f2 <TIM_OC1_SetConfig+0xbe>
 80205e2:	687b      	ldr	r3, [r7, #4]
 80205e4:	4a19      	ldr	r2, [pc, #100]	@ (802064c <TIM_OC1_SetConfig+0x118>)
 80205e6:	4293      	cmp	r3, r2
 80205e8:	d003      	beq.n	80205f2 <TIM_OC1_SetConfig+0xbe>
 80205ea:	687b      	ldr	r3, [r7, #4]
 80205ec:	4a18      	ldr	r2, [pc, #96]	@ (8020650 <TIM_OC1_SetConfig+0x11c>)
 80205ee:	4293      	cmp	r3, r2
 80205f0:	d111      	bne.n	8020616 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80205f2:	693b      	ldr	r3, [r7, #16]
 80205f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80205f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80205fa:	693b      	ldr	r3, [r7, #16]
 80205fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8020600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8020602:	683b      	ldr	r3, [r7, #0]
 8020604:	695b      	ldr	r3, [r3, #20]
 8020606:	693a      	ldr	r2, [r7, #16]
 8020608:	4313      	orrs	r3, r2
 802060a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 802060c:	683b      	ldr	r3, [r7, #0]
 802060e:	699b      	ldr	r3, [r3, #24]
 8020610:	693a      	ldr	r2, [r7, #16]
 8020612:	4313      	orrs	r3, r2
 8020614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020616:	687b      	ldr	r3, [r7, #4]
 8020618:	693a      	ldr	r2, [r7, #16]
 802061a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802061c:	687b      	ldr	r3, [r7, #4]
 802061e:	68fa      	ldr	r2, [r7, #12]
 8020620:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8020622:	683b      	ldr	r3, [r7, #0]
 8020624:	685a      	ldr	r2, [r3, #4]
 8020626:	687b      	ldr	r3, [r7, #4]
 8020628:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802062a:	687b      	ldr	r3, [r7, #4]
 802062c:	697a      	ldr	r2, [r7, #20]
 802062e:	621a      	str	r2, [r3, #32]
}
 8020630:	bf00      	nop
 8020632:	371c      	adds	r7, #28
 8020634:	46bd      	mov	sp, r7
 8020636:	f85d 7b04 	ldr.w	r7, [sp], #4
 802063a:	4770      	bx	lr
 802063c:	fffeff8f 	.word	0xfffeff8f
 8020640:	40010000 	.word	0x40010000
 8020644:	40010400 	.word	0x40010400
 8020648:	40014000 	.word	0x40014000
 802064c:	40014400 	.word	0x40014400
 8020650:	40014800 	.word	0x40014800

08020654 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020654:	b480      	push	{r7}
 8020656:	b087      	sub	sp, #28
 8020658:	af00      	add	r7, sp, #0
 802065a:	6078      	str	r0, [r7, #4]
 802065c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802065e:	687b      	ldr	r3, [r7, #4]
 8020660:	6a1b      	ldr	r3, [r3, #32]
 8020662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020664:	687b      	ldr	r3, [r7, #4]
 8020666:	6a1b      	ldr	r3, [r3, #32]
 8020668:	f023 0210 	bic.w	r2, r3, #16
 802066c:	687b      	ldr	r3, [r7, #4]
 802066e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020670:	687b      	ldr	r3, [r7, #4]
 8020672:	685b      	ldr	r3, [r3, #4]
 8020674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020676:	687b      	ldr	r3, [r7, #4]
 8020678:	699b      	ldr	r3, [r3, #24]
 802067a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 802067c:	68fa      	ldr	r2, [r7, #12]
 802067e:	4b34      	ldr	r3, [pc, #208]	@ (8020750 <TIM_OC2_SetConfig+0xfc>)
 8020680:	4013      	ands	r3, r2
 8020682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8020684:	68fb      	ldr	r3, [r7, #12]
 8020686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802068a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802068c:	683b      	ldr	r3, [r7, #0]
 802068e:	681b      	ldr	r3, [r3, #0]
 8020690:	021b      	lsls	r3, r3, #8
 8020692:	68fa      	ldr	r2, [r7, #12]
 8020694:	4313      	orrs	r3, r2
 8020696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8020698:	697b      	ldr	r3, [r7, #20]
 802069a:	f023 0320 	bic.w	r3, r3, #32
 802069e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80206a0:	683b      	ldr	r3, [r7, #0]
 80206a2:	689b      	ldr	r3, [r3, #8]
 80206a4:	011b      	lsls	r3, r3, #4
 80206a6:	697a      	ldr	r2, [r7, #20]
 80206a8:	4313      	orrs	r3, r2
 80206aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80206ac:	687b      	ldr	r3, [r7, #4]
 80206ae:	4a29      	ldr	r2, [pc, #164]	@ (8020754 <TIM_OC2_SetConfig+0x100>)
 80206b0:	4293      	cmp	r3, r2
 80206b2:	d003      	beq.n	80206bc <TIM_OC2_SetConfig+0x68>
 80206b4:	687b      	ldr	r3, [r7, #4]
 80206b6:	4a28      	ldr	r2, [pc, #160]	@ (8020758 <TIM_OC2_SetConfig+0x104>)
 80206b8:	4293      	cmp	r3, r2
 80206ba:	d10d      	bne.n	80206d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80206bc:	697b      	ldr	r3, [r7, #20]
 80206be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80206c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80206c4:	683b      	ldr	r3, [r7, #0]
 80206c6:	68db      	ldr	r3, [r3, #12]
 80206c8:	011b      	lsls	r3, r3, #4
 80206ca:	697a      	ldr	r2, [r7, #20]
 80206cc:	4313      	orrs	r3, r2
 80206ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80206d0:	697b      	ldr	r3, [r7, #20]
 80206d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80206d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80206d8:	687b      	ldr	r3, [r7, #4]
 80206da:	4a1e      	ldr	r2, [pc, #120]	@ (8020754 <TIM_OC2_SetConfig+0x100>)
 80206dc:	4293      	cmp	r3, r2
 80206de:	d00f      	beq.n	8020700 <TIM_OC2_SetConfig+0xac>
 80206e0:	687b      	ldr	r3, [r7, #4]
 80206e2:	4a1d      	ldr	r2, [pc, #116]	@ (8020758 <TIM_OC2_SetConfig+0x104>)
 80206e4:	4293      	cmp	r3, r2
 80206e6:	d00b      	beq.n	8020700 <TIM_OC2_SetConfig+0xac>
 80206e8:	687b      	ldr	r3, [r7, #4]
 80206ea:	4a1c      	ldr	r2, [pc, #112]	@ (802075c <TIM_OC2_SetConfig+0x108>)
 80206ec:	4293      	cmp	r3, r2
 80206ee:	d007      	beq.n	8020700 <TIM_OC2_SetConfig+0xac>
 80206f0:	687b      	ldr	r3, [r7, #4]
 80206f2:	4a1b      	ldr	r2, [pc, #108]	@ (8020760 <TIM_OC2_SetConfig+0x10c>)
 80206f4:	4293      	cmp	r3, r2
 80206f6:	d003      	beq.n	8020700 <TIM_OC2_SetConfig+0xac>
 80206f8:	687b      	ldr	r3, [r7, #4]
 80206fa:	4a1a      	ldr	r2, [pc, #104]	@ (8020764 <TIM_OC2_SetConfig+0x110>)
 80206fc:	4293      	cmp	r3, r2
 80206fe:	d113      	bne.n	8020728 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8020700:	693b      	ldr	r3, [r7, #16]
 8020702:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8020706:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8020708:	693b      	ldr	r3, [r7, #16]
 802070a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 802070e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8020710:	683b      	ldr	r3, [r7, #0]
 8020712:	695b      	ldr	r3, [r3, #20]
 8020714:	009b      	lsls	r3, r3, #2
 8020716:	693a      	ldr	r2, [r7, #16]
 8020718:	4313      	orrs	r3, r2
 802071a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 802071c:	683b      	ldr	r3, [r7, #0]
 802071e:	699b      	ldr	r3, [r3, #24]
 8020720:	009b      	lsls	r3, r3, #2
 8020722:	693a      	ldr	r2, [r7, #16]
 8020724:	4313      	orrs	r3, r2
 8020726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020728:	687b      	ldr	r3, [r7, #4]
 802072a:	693a      	ldr	r2, [r7, #16]
 802072c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802072e:	687b      	ldr	r3, [r7, #4]
 8020730:	68fa      	ldr	r2, [r7, #12]
 8020732:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8020734:	683b      	ldr	r3, [r7, #0]
 8020736:	685a      	ldr	r2, [r3, #4]
 8020738:	687b      	ldr	r3, [r7, #4]
 802073a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802073c:	687b      	ldr	r3, [r7, #4]
 802073e:	697a      	ldr	r2, [r7, #20]
 8020740:	621a      	str	r2, [r3, #32]
}
 8020742:	bf00      	nop
 8020744:	371c      	adds	r7, #28
 8020746:	46bd      	mov	sp, r7
 8020748:	f85d 7b04 	ldr.w	r7, [sp], #4
 802074c:	4770      	bx	lr
 802074e:	bf00      	nop
 8020750:	feff8fff 	.word	0xfeff8fff
 8020754:	40010000 	.word	0x40010000
 8020758:	40010400 	.word	0x40010400
 802075c:	40014000 	.word	0x40014000
 8020760:	40014400 	.word	0x40014400
 8020764:	40014800 	.word	0x40014800

08020768 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020768:	b480      	push	{r7}
 802076a:	b087      	sub	sp, #28
 802076c:	af00      	add	r7, sp, #0
 802076e:	6078      	str	r0, [r7, #4]
 8020770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020772:	687b      	ldr	r3, [r7, #4]
 8020774:	6a1b      	ldr	r3, [r3, #32]
 8020776:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8020778:	687b      	ldr	r3, [r7, #4]
 802077a:	6a1b      	ldr	r3, [r3, #32]
 802077c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8020780:	687b      	ldr	r3, [r7, #4]
 8020782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020784:	687b      	ldr	r3, [r7, #4]
 8020786:	685b      	ldr	r3, [r3, #4]
 8020788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802078a:	687b      	ldr	r3, [r7, #4]
 802078c:	69db      	ldr	r3, [r3, #28]
 802078e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8020790:	68fa      	ldr	r2, [r7, #12]
 8020792:	4b33      	ldr	r3, [pc, #204]	@ (8020860 <TIM_OC3_SetConfig+0xf8>)
 8020794:	4013      	ands	r3, r2
 8020796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8020798:	68fb      	ldr	r3, [r7, #12]
 802079a:	f023 0303 	bic.w	r3, r3, #3
 802079e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80207a0:	683b      	ldr	r3, [r7, #0]
 80207a2:	681b      	ldr	r3, [r3, #0]
 80207a4:	68fa      	ldr	r2, [r7, #12]
 80207a6:	4313      	orrs	r3, r2
 80207a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80207aa:	697b      	ldr	r3, [r7, #20]
 80207ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80207b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80207b2:	683b      	ldr	r3, [r7, #0]
 80207b4:	689b      	ldr	r3, [r3, #8]
 80207b6:	021b      	lsls	r3, r3, #8
 80207b8:	697a      	ldr	r2, [r7, #20]
 80207ba:	4313      	orrs	r3, r2
 80207bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80207be:	687b      	ldr	r3, [r7, #4]
 80207c0:	4a28      	ldr	r2, [pc, #160]	@ (8020864 <TIM_OC3_SetConfig+0xfc>)
 80207c2:	4293      	cmp	r3, r2
 80207c4:	d003      	beq.n	80207ce <TIM_OC3_SetConfig+0x66>
 80207c6:	687b      	ldr	r3, [r7, #4]
 80207c8:	4a27      	ldr	r2, [pc, #156]	@ (8020868 <TIM_OC3_SetConfig+0x100>)
 80207ca:	4293      	cmp	r3, r2
 80207cc:	d10d      	bne.n	80207ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80207ce:	697b      	ldr	r3, [r7, #20]
 80207d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80207d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80207d6:	683b      	ldr	r3, [r7, #0]
 80207d8:	68db      	ldr	r3, [r3, #12]
 80207da:	021b      	lsls	r3, r3, #8
 80207dc:	697a      	ldr	r2, [r7, #20]
 80207de:	4313      	orrs	r3, r2
 80207e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80207e2:	697b      	ldr	r3, [r7, #20]
 80207e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80207e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80207ea:	687b      	ldr	r3, [r7, #4]
 80207ec:	4a1d      	ldr	r2, [pc, #116]	@ (8020864 <TIM_OC3_SetConfig+0xfc>)
 80207ee:	4293      	cmp	r3, r2
 80207f0:	d00f      	beq.n	8020812 <TIM_OC3_SetConfig+0xaa>
 80207f2:	687b      	ldr	r3, [r7, #4]
 80207f4:	4a1c      	ldr	r2, [pc, #112]	@ (8020868 <TIM_OC3_SetConfig+0x100>)
 80207f6:	4293      	cmp	r3, r2
 80207f8:	d00b      	beq.n	8020812 <TIM_OC3_SetConfig+0xaa>
 80207fa:	687b      	ldr	r3, [r7, #4]
 80207fc:	4a1b      	ldr	r2, [pc, #108]	@ (802086c <TIM_OC3_SetConfig+0x104>)
 80207fe:	4293      	cmp	r3, r2
 8020800:	d007      	beq.n	8020812 <TIM_OC3_SetConfig+0xaa>
 8020802:	687b      	ldr	r3, [r7, #4]
 8020804:	4a1a      	ldr	r2, [pc, #104]	@ (8020870 <TIM_OC3_SetConfig+0x108>)
 8020806:	4293      	cmp	r3, r2
 8020808:	d003      	beq.n	8020812 <TIM_OC3_SetConfig+0xaa>
 802080a:	687b      	ldr	r3, [r7, #4]
 802080c:	4a19      	ldr	r2, [pc, #100]	@ (8020874 <TIM_OC3_SetConfig+0x10c>)
 802080e:	4293      	cmp	r3, r2
 8020810:	d113      	bne.n	802083a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8020812:	693b      	ldr	r3, [r7, #16]
 8020814:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8020818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 802081a:	693b      	ldr	r3, [r7, #16]
 802081c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8020822:	683b      	ldr	r3, [r7, #0]
 8020824:	695b      	ldr	r3, [r3, #20]
 8020826:	011b      	lsls	r3, r3, #4
 8020828:	693a      	ldr	r2, [r7, #16]
 802082a:	4313      	orrs	r3, r2
 802082c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802082e:	683b      	ldr	r3, [r7, #0]
 8020830:	699b      	ldr	r3, [r3, #24]
 8020832:	011b      	lsls	r3, r3, #4
 8020834:	693a      	ldr	r2, [r7, #16]
 8020836:	4313      	orrs	r3, r2
 8020838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802083a:	687b      	ldr	r3, [r7, #4]
 802083c:	693a      	ldr	r2, [r7, #16]
 802083e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020840:	687b      	ldr	r3, [r7, #4]
 8020842:	68fa      	ldr	r2, [r7, #12]
 8020844:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8020846:	683b      	ldr	r3, [r7, #0]
 8020848:	685a      	ldr	r2, [r3, #4]
 802084a:	687b      	ldr	r3, [r7, #4]
 802084c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802084e:	687b      	ldr	r3, [r7, #4]
 8020850:	697a      	ldr	r2, [r7, #20]
 8020852:	621a      	str	r2, [r3, #32]
}
 8020854:	bf00      	nop
 8020856:	371c      	adds	r7, #28
 8020858:	46bd      	mov	sp, r7
 802085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802085e:	4770      	bx	lr
 8020860:	fffeff8f 	.word	0xfffeff8f
 8020864:	40010000 	.word	0x40010000
 8020868:	40010400 	.word	0x40010400
 802086c:	40014000 	.word	0x40014000
 8020870:	40014400 	.word	0x40014400
 8020874:	40014800 	.word	0x40014800

08020878 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020878:	b480      	push	{r7}
 802087a:	b087      	sub	sp, #28
 802087c:	af00      	add	r7, sp, #0
 802087e:	6078      	str	r0, [r7, #4]
 8020880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020882:	687b      	ldr	r3, [r7, #4]
 8020884:	6a1b      	ldr	r3, [r3, #32]
 8020886:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020888:	687b      	ldr	r3, [r7, #4]
 802088a:	6a1b      	ldr	r3, [r3, #32]
 802088c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8020890:	687b      	ldr	r3, [r7, #4]
 8020892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020894:	687b      	ldr	r3, [r7, #4]
 8020896:	685b      	ldr	r3, [r3, #4]
 8020898:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802089a:	687b      	ldr	r3, [r7, #4]
 802089c:	69db      	ldr	r3, [r3, #28]
 802089e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80208a0:	68fa      	ldr	r2, [r7, #12]
 80208a2:	4b24      	ldr	r3, [pc, #144]	@ (8020934 <TIM_OC4_SetConfig+0xbc>)
 80208a4:	4013      	ands	r3, r2
 80208a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80208a8:	68fb      	ldr	r3, [r7, #12]
 80208aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80208ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80208b0:	683b      	ldr	r3, [r7, #0]
 80208b2:	681b      	ldr	r3, [r3, #0]
 80208b4:	021b      	lsls	r3, r3, #8
 80208b6:	68fa      	ldr	r2, [r7, #12]
 80208b8:	4313      	orrs	r3, r2
 80208ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80208bc:	693b      	ldr	r3, [r7, #16]
 80208be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80208c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80208c4:	683b      	ldr	r3, [r7, #0]
 80208c6:	689b      	ldr	r3, [r3, #8]
 80208c8:	031b      	lsls	r3, r3, #12
 80208ca:	693a      	ldr	r2, [r7, #16]
 80208cc:	4313      	orrs	r3, r2
 80208ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80208d0:	687b      	ldr	r3, [r7, #4]
 80208d2:	4a19      	ldr	r2, [pc, #100]	@ (8020938 <TIM_OC4_SetConfig+0xc0>)
 80208d4:	4293      	cmp	r3, r2
 80208d6:	d00f      	beq.n	80208f8 <TIM_OC4_SetConfig+0x80>
 80208d8:	687b      	ldr	r3, [r7, #4]
 80208da:	4a18      	ldr	r2, [pc, #96]	@ (802093c <TIM_OC4_SetConfig+0xc4>)
 80208dc:	4293      	cmp	r3, r2
 80208de:	d00b      	beq.n	80208f8 <TIM_OC4_SetConfig+0x80>
 80208e0:	687b      	ldr	r3, [r7, #4]
 80208e2:	4a17      	ldr	r2, [pc, #92]	@ (8020940 <TIM_OC4_SetConfig+0xc8>)
 80208e4:	4293      	cmp	r3, r2
 80208e6:	d007      	beq.n	80208f8 <TIM_OC4_SetConfig+0x80>
 80208e8:	687b      	ldr	r3, [r7, #4]
 80208ea:	4a16      	ldr	r2, [pc, #88]	@ (8020944 <TIM_OC4_SetConfig+0xcc>)
 80208ec:	4293      	cmp	r3, r2
 80208ee:	d003      	beq.n	80208f8 <TIM_OC4_SetConfig+0x80>
 80208f0:	687b      	ldr	r3, [r7, #4]
 80208f2:	4a15      	ldr	r2, [pc, #84]	@ (8020948 <TIM_OC4_SetConfig+0xd0>)
 80208f4:	4293      	cmp	r3, r2
 80208f6:	d109      	bne.n	802090c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80208f8:	697b      	ldr	r3, [r7, #20]
 80208fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80208fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8020900:	683b      	ldr	r3, [r7, #0]
 8020902:	695b      	ldr	r3, [r3, #20]
 8020904:	019b      	lsls	r3, r3, #6
 8020906:	697a      	ldr	r2, [r7, #20]
 8020908:	4313      	orrs	r3, r2
 802090a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802090c:	687b      	ldr	r3, [r7, #4]
 802090e:	697a      	ldr	r2, [r7, #20]
 8020910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020912:	687b      	ldr	r3, [r7, #4]
 8020914:	68fa      	ldr	r2, [r7, #12]
 8020916:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020918:	683b      	ldr	r3, [r7, #0]
 802091a:	685a      	ldr	r2, [r3, #4]
 802091c:	687b      	ldr	r3, [r7, #4]
 802091e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020920:	687b      	ldr	r3, [r7, #4]
 8020922:	693a      	ldr	r2, [r7, #16]
 8020924:	621a      	str	r2, [r3, #32]
}
 8020926:	bf00      	nop
 8020928:	371c      	adds	r7, #28
 802092a:	46bd      	mov	sp, r7
 802092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020930:	4770      	bx	lr
 8020932:	bf00      	nop
 8020934:	feff8fff 	.word	0xfeff8fff
 8020938:	40010000 	.word	0x40010000
 802093c:	40010400 	.word	0x40010400
 8020940:	40014000 	.word	0x40014000
 8020944:	40014400 	.word	0x40014400
 8020948:	40014800 	.word	0x40014800

0802094c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 802094c:	b480      	push	{r7}
 802094e:	b087      	sub	sp, #28
 8020950:	af00      	add	r7, sp, #0
 8020952:	6078      	str	r0, [r7, #4]
 8020954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020956:	687b      	ldr	r3, [r7, #4]
 8020958:	6a1b      	ldr	r3, [r3, #32]
 802095a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 802095c:	687b      	ldr	r3, [r7, #4]
 802095e:	6a1b      	ldr	r3, [r3, #32]
 8020960:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020968:	687b      	ldr	r3, [r7, #4]
 802096a:	685b      	ldr	r3, [r3, #4]
 802096c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 802096e:	687b      	ldr	r3, [r7, #4]
 8020970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8020974:	68fa      	ldr	r2, [r7, #12]
 8020976:	4b21      	ldr	r3, [pc, #132]	@ (80209fc <TIM_OC5_SetConfig+0xb0>)
 8020978:	4013      	ands	r3, r2
 802097a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802097c:	683b      	ldr	r3, [r7, #0]
 802097e:	681b      	ldr	r3, [r3, #0]
 8020980:	68fa      	ldr	r2, [r7, #12]
 8020982:	4313      	orrs	r3, r2
 8020984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8020986:	693b      	ldr	r3, [r7, #16]
 8020988:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 802098c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 802098e:	683b      	ldr	r3, [r7, #0]
 8020990:	689b      	ldr	r3, [r3, #8]
 8020992:	041b      	lsls	r3, r3, #16
 8020994:	693a      	ldr	r2, [r7, #16]
 8020996:	4313      	orrs	r3, r2
 8020998:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802099a:	687b      	ldr	r3, [r7, #4]
 802099c:	4a18      	ldr	r2, [pc, #96]	@ (8020a00 <TIM_OC5_SetConfig+0xb4>)
 802099e:	4293      	cmp	r3, r2
 80209a0:	d00f      	beq.n	80209c2 <TIM_OC5_SetConfig+0x76>
 80209a2:	687b      	ldr	r3, [r7, #4]
 80209a4:	4a17      	ldr	r2, [pc, #92]	@ (8020a04 <TIM_OC5_SetConfig+0xb8>)
 80209a6:	4293      	cmp	r3, r2
 80209a8:	d00b      	beq.n	80209c2 <TIM_OC5_SetConfig+0x76>
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	4a16      	ldr	r2, [pc, #88]	@ (8020a08 <TIM_OC5_SetConfig+0xbc>)
 80209ae:	4293      	cmp	r3, r2
 80209b0:	d007      	beq.n	80209c2 <TIM_OC5_SetConfig+0x76>
 80209b2:	687b      	ldr	r3, [r7, #4]
 80209b4:	4a15      	ldr	r2, [pc, #84]	@ (8020a0c <TIM_OC5_SetConfig+0xc0>)
 80209b6:	4293      	cmp	r3, r2
 80209b8:	d003      	beq.n	80209c2 <TIM_OC5_SetConfig+0x76>
 80209ba:	687b      	ldr	r3, [r7, #4]
 80209bc:	4a14      	ldr	r2, [pc, #80]	@ (8020a10 <TIM_OC5_SetConfig+0xc4>)
 80209be:	4293      	cmp	r3, r2
 80209c0:	d109      	bne.n	80209d6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80209c2:	697b      	ldr	r3, [r7, #20]
 80209c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80209c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80209ca:	683b      	ldr	r3, [r7, #0]
 80209cc:	695b      	ldr	r3, [r3, #20]
 80209ce:	021b      	lsls	r3, r3, #8
 80209d0:	697a      	ldr	r2, [r7, #20]
 80209d2:	4313      	orrs	r3, r2
 80209d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80209d6:	687b      	ldr	r3, [r7, #4]
 80209d8:	697a      	ldr	r2, [r7, #20]
 80209da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80209dc:	687b      	ldr	r3, [r7, #4]
 80209de:	68fa      	ldr	r2, [r7, #12]
 80209e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80209e2:	683b      	ldr	r3, [r7, #0]
 80209e4:	685a      	ldr	r2, [r3, #4]
 80209e6:	687b      	ldr	r3, [r7, #4]
 80209e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80209ea:	687b      	ldr	r3, [r7, #4]
 80209ec:	693a      	ldr	r2, [r7, #16]
 80209ee:	621a      	str	r2, [r3, #32]
}
 80209f0:	bf00      	nop
 80209f2:	371c      	adds	r7, #28
 80209f4:	46bd      	mov	sp, r7
 80209f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209fa:	4770      	bx	lr
 80209fc:	fffeff8f 	.word	0xfffeff8f
 8020a00:	40010000 	.word	0x40010000
 8020a04:	40010400 	.word	0x40010400
 8020a08:	40014000 	.word	0x40014000
 8020a0c:	40014400 	.word	0x40014400
 8020a10:	40014800 	.word	0x40014800

08020a14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8020a14:	b480      	push	{r7}
 8020a16:	b087      	sub	sp, #28
 8020a18:	af00      	add	r7, sp, #0
 8020a1a:	6078      	str	r0, [r7, #4]
 8020a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020a1e:	687b      	ldr	r3, [r7, #4]
 8020a20:	6a1b      	ldr	r3, [r3, #32]
 8020a22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8020a24:	687b      	ldr	r3, [r7, #4]
 8020a26:	6a1b      	ldr	r3, [r3, #32]
 8020a28:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8020a2c:	687b      	ldr	r3, [r7, #4]
 8020a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020a30:	687b      	ldr	r3, [r7, #4]
 8020a32:	685b      	ldr	r3, [r3, #4]
 8020a34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8020a36:	687b      	ldr	r3, [r7, #4]
 8020a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8020a3c:	68fa      	ldr	r2, [r7, #12]
 8020a3e:	4b22      	ldr	r3, [pc, #136]	@ (8020ac8 <TIM_OC6_SetConfig+0xb4>)
 8020a40:	4013      	ands	r3, r2
 8020a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020a44:	683b      	ldr	r3, [r7, #0]
 8020a46:	681b      	ldr	r3, [r3, #0]
 8020a48:	021b      	lsls	r3, r3, #8
 8020a4a:	68fa      	ldr	r2, [r7, #12]
 8020a4c:	4313      	orrs	r3, r2
 8020a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8020a50:	693b      	ldr	r3, [r7, #16]
 8020a52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8020a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8020a58:	683b      	ldr	r3, [r7, #0]
 8020a5a:	689b      	ldr	r3, [r3, #8]
 8020a5c:	051b      	lsls	r3, r3, #20
 8020a5e:	693a      	ldr	r2, [r7, #16]
 8020a60:	4313      	orrs	r3, r2
 8020a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020a64:	687b      	ldr	r3, [r7, #4]
 8020a66:	4a19      	ldr	r2, [pc, #100]	@ (8020acc <TIM_OC6_SetConfig+0xb8>)
 8020a68:	4293      	cmp	r3, r2
 8020a6a:	d00f      	beq.n	8020a8c <TIM_OC6_SetConfig+0x78>
 8020a6c:	687b      	ldr	r3, [r7, #4]
 8020a6e:	4a18      	ldr	r2, [pc, #96]	@ (8020ad0 <TIM_OC6_SetConfig+0xbc>)
 8020a70:	4293      	cmp	r3, r2
 8020a72:	d00b      	beq.n	8020a8c <TIM_OC6_SetConfig+0x78>
 8020a74:	687b      	ldr	r3, [r7, #4]
 8020a76:	4a17      	ldr	r2, [pc, #92]	@ (8020ad4 <TIM_OC6_SetConfig+0xc0>)
 8020a78:	4293      	cmp	r3, r2
 8020a7a:	d007      	beq.n	8020a8c <TIM_OC6_SetConfig+0x78>
 8020a7c:	687b      	ldr	r3, [r7, #4]
 8020a7e:	4a16      	ldr	r2, [pc, #88]	@ (8020ad8 <TIM_OC6_SetConfig+0xc4>)
 8020a80:	4293      	cmp	r3, r2
 8020a82:	d003      	beq.n	8020a8c <TIM_OC6_SetConfig+0x78>
 8020a84:	687b      	ldr	r3, [r7, #4]
 8020a86:	4a15      	ldr	r2, [pc, #84]	@ (8020adc <TIM_OC6_SetConfig+0xc8>)
 8020a88:	4293      	cmp	r3, r2
 8020a8a:	d109      	bne.n	8020aa0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8020a8c:	697b      	ldr	r3, [r7, #20]
 8020a8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8020a92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8020a94:	683b      	ldr	r3, [r7, #0]
 8020a96:	695b      	ldr	r3, [r3, #20]
 8020a98:	029b      	lsls	r3, r3, #10
 8020a9a:	697a      	ldr	r2, [r7, #20]
 8020a9c:	4313      	orrs	r3, r2
 8020a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020aa0:	687b      	ldr	r3, [r7, #4]
 8020aa2:	697a      	ldr	r2, [r7, #20]
 8020aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8020aa6:	687b      	ldr	r3, [r7, #4]
 8020aa8:	68fa      	ldr	r2, [r7, #12]
 8020aaa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8020aac:	683b      	ldr	r3, [r7, #0]
 8020aae:	685a      	ldr	r2, [r3, #4]
 8020ab0:	687b      	ldr	r3, [r7, #4]
 8020ab2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020ab4:	687b      	ldr	r3, [r7, #4]
 8020ab6:	693a      	ldr	r2, [r7, #16]
 8020ab8:	621a      	str	r2, [r3, #32]
}
 8020aba:	bf00      	nop
 8020abc:	371c      	adds	r7, #28
 8020abe:	46bd      	mov	sp, r7
 8020ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ac4:	4770      	bx	lr
 8020ac6:	bf00      	nop
 8020ac8:	feff8fff 	.word	0xfeff8fff
 8020acc:	40010000 	.word	0x40010000
 8020ad0:	40010400 	.word	0x40010400
 8020ad4:	40014000 	.word	0x40014000
 8020ad8:	40014400 	.word	0x40014400
 8020adc:	40014800 	.word	0x40014800

08020ae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020ae0:	b480      	push	{r7}
 8020ae2:	b087      	sub	sp, #28
 8020ae4:	af00      	add	r7, sp, #0
 8020ae6:	60f8      	str	r0, [r7, #12]
 8020ae8:	60b9      	str	r1, [r7, #8]
 8020aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8020aec:	68fb      	ldr	r3, [r7, #12]
 8020aee:	6a1b      	ldr	r3, [r3, #32]
 8020af0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020af2:	68fb      	ldr	r3, [r7, #12]
 8020af4:	6a1b      	ldr	r3, [r3, #32]
 8020af6:	f023 0201 	bic.w	r2, r3, #1
 8020afa:	68fb      	ldr	r3, [r7, #12]
 8020afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020afe:	68fb      	ldr	r3, [r7, #12]
 8020b00:	699b      	ldr	r3, [r3, #24]
 8020b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8020b04:	693b      	ldr	r3, [r7, #16]
 8020b06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8020b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8020b0c:	687b      	ldr	r3, [r7, #4]
 8020b0e:	011b      	lsls	r3, r3, #4
 8020b10:	693a      	ldr	r2, [r7, #16]
 8020b12:	4313      	orrs	r3, r2
 8020b14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8020b16:	697b      	ldr	r3, [r7, #20]
 8020b18:	f023 030a 	bic.w	r3, r3, #10
 8020b1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8020b1e:	697a      	ldr	r2, [r7, #20]
 8020b20:	68bb      	ldr	r3, [r7, #8]
 8020b22:	4313      	orrs	r3, r2
 8020b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8020b26:	68fb      	ldr	r3, [r7, #12]
 8020b28:	693a      	ldr	r2, [r7, #16]
 8020b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020b2c:	68fb      	ldr	r3, [r7, #12]
 8020b2e:	697a      	ldr	r2, [r7, #20]
 8020b30:	621a      	str	r2, [r3, #32]
}
 8020b32:	bf00      	nop
 8020b34:	371c      	adds	r7, #28
 8020b36:	46bd      	mov	sp, r7
 8020b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b3c:	4770      	bx	lr

08020b3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020b3e:	b480      	push	{r7}
 8020b40:	b087      	sub	sp, #28
 8020b42:	af00      	add	r7, sp, #0
 8020b44:	60f8      	str	r0, [r7, #12]
 8020b46:	60b9      	str	r1, [r7, #8]
 8020b48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8020b4a:	68fb      	ldr	r3, [r7, #12]
 8020b4c:	6a1b      	ldr	r3, [r3, #32]
 8020b4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020b50:	68fb      	ldr	r3, [r7, #12]
 8020b52:	6a1b      	ldr	r3, [r3, #32]
 8020b54:	f023 0210 	bic.w	r2, r3, #16
 8020b58:	68fb      	ldr	r3, [r7, #12]
 8020b5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020b5c:	68fb      	ldr	r3, [r7, #12]
 8020b5e:	699b      	ldr	r3, [r3, #24]
 8020b60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020b62:	693b      	ldr	r3, [r7, #16]
 8020b64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8020b68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8020b6a:	687b      	ldr	r3, [r7, #4]
 8020b6c:	031b      	lsls	r3, r3, #12
 8020b6e:	693a      	ldr	r2, [r7, #16]
 8020b70:	4313      	orrs	r3, r2
 8020b72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8020b74:	697b      	ldr	r3, [r7, #20]
 8020b76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8020b7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8020b7c:	68bb      	ldr	r3, [r7, #8]
 8020b7e:	011b      	lsls	r3, r3, #4
 8020b80:	697a      	ldr	r2, [r7, #20]
 8020b82:	4313      	orrs	r3, r2
 8020b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020b86:	68fb      	ldr	r3, [r7, #12]
 8020b88:	693a      	ldr	r2, [r7, #16]
 8020b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020b8c:	68fb      	ldr	r3, [r7, #12]
 8020b8e:	697a      	ldr	r2, [r7, #20]
 8020b90:	621a      	str	r2, [r3, #32]
}
 8020b92:	bf00      	nop
 8020b94:	371c      	adds	r7, #28
 8020b96:	46bd      	mov	sp, r7
 8020b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b9c:	4770      	bx	lr
	...

08020ba0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8020ba0:	b480      	push	{r7}
 8020ba2:	b085      	sub	sp, #20
 8020ba4:	af00      	add	r7, sp, #0
 8020ba6:	6078      	str	r0, [r7, #4]
 8020ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8020baa:	687b      	ldr	r3, [r7, #4]
 8020bac:	689b      	ldr	r3, [r3, #8]
 8020bae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8020bb0:	68fa      	ldr	r2, [r7, #12]
 8020bb2:	4b09      	ldr	r3, [pc, #36]	@ (8020bd8 <TIM_ITRx_SetConfig+0x38>)
 8020bb4:	4013      	ands	r3, r2
 8020bb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8020bb8:	683a      	ldr	r2, [r7, #0]
 8020bba:	68fb      	ldr	r3, [r7, #12]
 8020bbc:	4313      	orrs	r3, r2
 8020bbe:	f043 0307 	orr.w	r3, r3, #7
 8020bc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020bc4:	687b      	ldr	r3, [r7, #4]
 8020bc6:	68fa      	ldr	r2, [r7, #12]
 8020bc8:	609a      	str	r2, [r3, #8]
}
 8020bca:	bf00      	nop
 8020bcc:	3714      	adds	r7, #20
 8020bce:	46bd      	mov	sp, r7
 8020bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bd4:	4770      	bx	lr
 8020bd6:	bf00      	nop
 8020bd8:	ffcfff8f 	.word	0xffcfff8f

08020bdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8020bdc:	b480      	push	{r7}
 8020bde:	b087      	sub	sp, #28
 8020be0:	af00      	add	r7, sp, #0
 8020be2:	60f8      	str	r0, [r7, #12]
 8020be4:	60b9      	str	r1, [r7, #8]
 8020be6:	607a      	str	r2, [r7, #4]
 8020be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8020bea:	68fb      	ldr	r3, [r7, #12]
 8020bec:	689b      	ldr	r3, [r3, #8]
 8020bee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020bf0:	697b      	ldr	r3, [r7, #20]
 8020bf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8020bf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8020bf8:	683b      	ldr	r3, [r7, #0]
 8020bfa:	021a      	lsls	r2, r3, #8
 8020bfc:	687b      	ldr	r3, [r7, #4]
 8020bfe:	431a      	orrs	r2, r3
 8020c00:	68bb      	ldr	r3, [r7, #8]
 8020c02:	4313      	orrs	r3, r2
 8020c04:	697a      	ldr	r2, [r7, #20]
 8020c06:	4313      	orrs	r3, r2
 8020c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020c0a:	68fb      	ldr	r3, [r7, #12]
 8020c0c:	697a      	ldr	r2, [r7, #20]
 8020c0e:	609a      	str	r2, [r3, #8]
}
 8020c10:	bf00      	nop
 8020c12:	371c      	adds	r7, #28
 8020c14:	46bd      	mov	sp, r7
 8020c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c1a:	4770      	bx	lr

08020c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8020c1c:	b480      	push	{r7}
 8020c1e:	b085      	sub	sp, #20
 8020c20:	af00      	add	r7, sp, #0
 8020c22:	6078      	str	r0, [r7, #4]
 8020c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8020c26:	687b      	ldr	r3, [r7, #4]
 8020c28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8020c2c:	2b01      	cmp	r3, #1
 8020c2e:	d101      	bne.n	8020c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8020c30:	2302      	movs	r3, #2
 8020c32:	e06d      	b.n	8020d10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8020c34:	687b      	ldr	r3, [r7, #4]
 8020c36:	2201      	movs	r2, #1
 8020c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020c3c:	687b      	ldr	r3, [r7, #4]
 8020c3e:	2202      	movs	r2, #2
 8020c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8020c44:	687b      	ldr	r3, [r7, #4]
 8020c46:	681b      	ldr	r3, [r3, #0]
 8020c48:	685b      	ldr	r3, [r3, #4]
 8020c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8020c4c:	687b      	ldr	r3, [r7, #4]
 8020c4e:	681b      	ldr	r3, [r3, #0]
 8020c50:	689b      	ldr	r3, [r3, #8]
 8020c52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8020c54:	687b      	ldr	r3, [r7, #4]
 8020c56:	681b      	ldr	r3, [r3, #0]
 8020c58:	4a30      	ldr	r2, [pc, #192]	@ (8020d1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8020c5a:	4293      	cmp	r3, r2
 8020c5c:	d004      	beq.n	8020c68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8020c5e:	687b      	ldr	r3, [r7, #4]
 8020c60:	681b      	ldr	r3, [r3, #0]
 8020c62:	4a2f      	ldr	r2, [pc, #188]	@ (8020d20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8020c64:	4293      	cmp	r3, r2
 8020c66:	d108      	bne.n	8020c7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8020c68:	68fb      	ldr	r3, [r7, #12]
 8020c6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8020c6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8020c70:	683b      	ldr	r3, [r7, #0]
 8020c72:	685b      	ldr	r3, [r3, #4]
 8020c74:	68fa      	ldr	r2, [r7, #12]
 8020c76:	4313      	orrs	r3, r2
 8020c78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8020c7a:	68fb      	ldr	r3, [r7, #12]
 8020c7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8020c80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8020c82:	683b      	ldr	r3, [r7, #0]
 8020c84:	681b      	ldr	r3, [r3, #0]
 8020c86:	68fa      	ldr	r2, [r7, #12]
 8020c88:	4313      	orrs	r3, r2
 8020c8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8020c8c:	687b      	ldr	r3, [r7, #4]
 8020c8e:	681b      	ldr	r3, [r3, #0]
 8020c90:	68fa      	ldr	r2, [r7, #12]
 8020c92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	681b      	ldr	r3, [r3, #0]
 8020c98:	4a20      	ldr	r2, [pc, #128]	@ (8020d1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8020c9a:	4293      	cmp	r3, r2
 8020c9c:	d022      	beq.n	8020ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020c9e:	687b      	ldr	r3, [r7, #4]
 8020ca0:	681b      	ldr	r3, [r3, #0]
 8020ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020ca6:	d01d      	beq.n	8020ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020ca8:	687b      	ldr	r3, [r7, #4]
 8020caa:	681b      	ldr	r3, [r3, #0]
 8020cac:	4a1d      	ldr	r2, [pc, #116]	@ (8020d24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8020cae:	4293      	cmp	r3, r2
 8020cb0:	d018      	beq.n	8020ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020cb2:	687b      	ldr	r3, [r7, #4]
 8020cb4:	681b      	ldr	r3, [r3, #0]
 8020cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8020d28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8020cb8:	4293      	cmp	r3, r2
 8020cba:	d013      	beq.n	8020ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020cbc:	687b      	ldr	r3, [r7, #4]
 8020cbe:	681b      	ldr	r3, [r3, #0]
 8020cc0:	4a1a      	ldr	r2, [pc, #104]	@ (8020d2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8020cc2:	4293      	cmp	r3, r2
 8020cc4:	d00e      	beq.n	8020ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020cc6:	687b      	ldr	r3, [r7, #4]
 8020cc8:	681b      	ldr	r3, [r3, #0]
 8020cca:	4a15      	ldr	r2, [pc, #84]	@ (8020d20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8020ccc:	4293      	cmp	r3, r2
 8020cce:	d009      	beq.n	8020ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020cd0:	687b      	ldr	r3, [r7, #4]
 8020cd2:	681b      	ldr	r3, [r3, #0]
 8020cd4:	4a16      	ldr	r2, [pc, #88]	@ (8020d30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8020cd6:	4293      	cmp	r3, r2
 8020cd8:	d004      	beq.n	8020ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020cda:	687b      	ldr	r3, [r7, #4]
 8020cdc:	681b      	ldr	r3, [r3, #0]
 8020cde:	4a15      	ldr	r2, [pc, #84]	@ (8020d34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8020ce0:	4293      	cmp	r3, r2
 8020ce2:	d10c      	bne.n	8020cfe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020ce4:	68bb      	ldr	r3, [r7, #8]
 8020ce6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8020cea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8020cec:	683b      	ldr	r3, [r7, #0]
 8020cee:	689b      	ldr	r3, [r3, #8]
 8020cf0:	68ba      	ldr	r2, [r7, #8]
 8020cf2:	4313      	orrs	r3, r2
 8020cf4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8020cf6:	687b      	ldr	r3, [r7, #4]
 8020cf8:	681b      	ldr	r3, [r3, #0]
 8020cfa:	68ba      	ldr	r2, [r7, #8]
 8020cfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8020cfe:	687b      	ldr	r3, [r7, #4]
 8020d00:	2201      	movs	r2, #1
 8020d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8020d06:	687b      	ldr	r3, [r7, #4]
 8020d08:	2200      	movs	r2, #0
 8020d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8020d0e:	2300      	movs	r3, #0
}
 8020d10:	4618      	mov	r0, r3
 8020d12:	3714      	adds	r7, #20
 8020d14:	46bd      	mov	sp, r7
 8020d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d1a:	4770      	bx	lr
 8020d1c:	40010000 	.word	0x40010000
 8020d20:	40010400 	.word	0x40010400
 8020d24:	40000400 	.word	0x40000400
 8020d28:	40000800 	.word	0x40000800
 8020d2c:	40000c00 	.word	0x40000c00
 8020d30:	40001800 	.word	0x40001800
 8020d34:	40014000 	.word	0x40014000

08020d38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8020d38:	b580      	push	{r7, lr}
 8020d3a:	b082      	sub	sp, #8
 8020d3c:	af00      	add	r7, sp, #0
 8020d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8020d40:	687b      	ldr	r3, [r7, #4]
 8020d42:	2b00      	cmp	r3, #0
 8020d44:	d101      	bne.n	8020d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8020d46:	2301      	movs	r3, #1
 8020d48:	e042      	b.n	8020dd0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8020d4a:	687b      	ldr	r3, [r7, #4]
 8020d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020d50:	2b00      	cmp	r3, #0
 8020d52:	d106      	bne.n	8020d62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8020d54:	687b      	ldr	r3, [r7, #4]
 8020d56:	2200      	movs	r2, #0
 8020d58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8020d5c:	6878      	ldr	r0, [r7, #4]
 8020d5e:	f7e1 febb 	bl	8002ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8020d62:	687b      	ldr	r3, [r7, #4]
 8020d64:	2224      	movs	r2, #36	@ 0x24
 8020d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8020d6a:	687b      	ldr	r3, [r7, #4]
 8020d6c:	681b      	ldr	r3, [r3, #0]
 8020d6e:	681a      	ldr	r2, [r3, #0]
 8020d70:	687b      	ldr	r3, [r7, #4]
 8020d72:	681b      	ldr	r3, [r3, #0]
 8020d74:	f022 0201 	bic.w	r2, r2, #1
 8020d78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8020d7a:	687b      	ldr	r3, [r7, #4]
 8020d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	d002      	beq.n	8020d88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8020d82:	6878      	ldr	r0, [r7, #4]
 8020d84:	f000 fd90 	bl	80218a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8020d88:	6878      	ldr	r0, [r7, #4]
 8020d8a:	f000 f825 	bl	8020dd8 <UART_SetConfig>
 8020d8e:	4603      	mov	r3, r0
 8020d90:	2b01      	cmp	r3, #1
 8020d92:	d101      	bne.n	8020d98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8020d94:	2301      	movs	r3, #1
 8020d96:	e01b      	b.n	8020dd0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8020d98:	687b      	ldr	r3, [r7, #4]
 8020d9a:	681b      	ldr	r3, [r3, #0]
 8020d9c:	685a      	ldr	r2, [r3, #4]
 8020d9e:	687b      	ldr	r3, [r7, #4]
 8020da0:	681b      	ldr	r3, [r3, #0]
 8020da2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8020da6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8020da8:	687b      	ldr	r3, [r7, #4]
 8020daa:	681b      	ldr	r3, [r3, #0]
 8020dac:	689a      	ldr	r2, [r3, #8]
 8020dae:	687b      	ldr	r3, [r7, #4]
 8020db0:	681b      	ldr	r3, [r3, #0]
 8020db2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8020db6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8020db8:	687b      	ldr	r3, [r7, #4]
 8020dba:	681b      	ldr	r3, [r3, #0]
 8020dbc:	681a      	ldr	r2, [r3, #0]
 8020dbe:	687b      	ldr	r3, [r7, #4]
 8020dc0:	681b      	ldr	r3, [r3, #0]
 8020dc2:	f042 0201 	orr.w	r2, r2, #1
 8020dc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8020dc8:	6878      	ldr	r0, [r7, #4]
 8020dca:	f000 fe0f 	bl	80219ec <UART_CheckIdleState>
 8020dce:	4603      	mov	r3, r0
}
 8020dd0:	4618      	mov	r0, r3
 8020dd2:	3708      	adds	r7, #8
 8020dd4:	46bd      	mov	sp, r7
 8020dd6:	bd80      	pop	{r7, pc}

08020dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8020dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020ddc:	b092      	sub	sp, #72	@ 0x48
 8020dde:	af00      	add	r7, sp, #0
 8020de0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8020de2:	2300      	movs	r3, #0
 8020de4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8020de8:	697b      	ldr	r3, [r7, #20]
 8020dea:	689a      	ldr	r2, [r3, #8]
 8020dec:	697b      	ldr	r3, [r7, #20]
 8020dee:	691b      	ldr	r3, [r3, #16]
 8020df0:	431a      	orrs	r2, r3
 8020df2:	697b      	ldr	r3, [r7, #20]
 8020df4:	695b      	ldr	r3, [r3, #20]
 8020df6:	431a      	orrs	r2, r3
 8020df8:	697b      	ldr	r3, [r7, #20]
 8020dfa:	69db      	ldr	r3, [r3, #28]
 8020dfc:	4313      	orrs	r3, r2
 8020dfe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8020e00:	697b      	ldr	r3, [r7, #20]
 8020e02:	681b      	ldr	r3, [r3, #0]
 8020e04:	681a      	ldr	r2, [r3, #0]
 8020e06:	4bbe      	ldr	r3, [pc, #760]	@ (8021100 <UART_SetConfig+0x328>)
 8020e08:	4013      	ands	r3, r2
 8020e0a:	697a      	ldr	r2, [r7, #20]
 8020e0c:	6812      	ldr	r2, [r2, #0]
 8020e0e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8020e10:	430b      	orrs	r3, r1
 8020e12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8020e14:	697b      	ldr	r3, [r7, #20]
 8020e16:	681b      	ldr	r3, [r3, #0]
 8020e18:	685b      	ldr	r3, [r3, #4]
 8020e1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8020e1e:	697b      	ldr	r3, [r7, #20]
 8020e20:	68da      	ldr	r2, [r3, #12]
 8020e22:	697b      	ldr	r3, [r7, #20]
 8020e24:	681b      	ldr	r3, [r3, #0]
 8020e26:	430a      	orrs	r2, r1
 8020e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8020e2a:	697b      	ldr	r3, [r7, #20]
 8020e2c:	699b      	ldr	r3, [r3, #24]
 8020e2e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8020e30:	697b      	ldr	r3, [r7, #20]
 8020e32:	681b      	ldr	r3, [r3, #0]
 8020e34:	4ab3      	ldr	r2, [pc, #716]	@ (8021104 <UART_SetConfig+0x32c>)
 8020e36:	4293      	cmp	r3, r2
 8020e38:	d004      	beq.n	8020e44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8020e3a:	697b      	ldr	r3, [r7, #20]
 8020e3c:	6a1b      	ldr	r3, [r3, #32]
 8020e3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8020e40:	4313      	orrs	r3, r2
 8020e42:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8020e44:	697b      	ldr	r3, [r7, #20]
 8020e46:	681b      	ldr	r3, [r3, #0]
 8020e48:	689a      	ldr	r2, [r3, #8]
 8020e4a:	4baf      	ldr	r3, [pc, #700]	@ (8021108 <UART_SetConfig+0x330>)
 8020e4c:	4013      	ands	r3, r2
 8020e4e:	697a      	ldr	r2, [r7, #20]
 8020e50:	6812      	ldr	r2, [r2, #0]
 8020e52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8020e54:	430b      	orrs	r3, r1
 8020e56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8020e58:	697b      	ldr	r3, [r7, #20]
 8020e5a:	681b      	ldr	r3, [r3, #0]
 8020e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020e5e:	f023 010f 	bic.w	r1, r3, #15
 8020e62:	697b      	ldr	r3, [r7, #20]
 8020e64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8020e66:	697b      	ldr	r3, [r7, #20]
 8020e68:	681b      	ldr	r3, [r3, #0]
 8020e6a:	430a      	orrs	r2, r1
 8020e6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8020e6e:	697b      	ldr	r3, [r7, #20]
 8020e70:	681b      	ldr	r3, [r3, #0]
 8020e72:	4aa6      	ldr	r2, [pc, #664]	@ (802110c <UART_SetConfig+0x334>)
 8020e74:	4293      	cmp	r3, r2
 8020e76:	d177      	bne.n	8020f68 <UART_SetConfig+0x190>
 8020e78:	4ba5      	ldr	r3, [pc, #660]	@ (8021110 <UART_SetConfig+0x338>)
 8020e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020e7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8020e80:	2b28      	cmp	r3, #40	@ 0x28
 8020e82:	d86d      	bhi.n	8020f60 <UART_SetConfig+0x188>
 8020e84:	a201      	add	r2, pc, #4	@ (adr r2, 8020e8c <UART_SetConfig+0xb4>)
 8020e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020e8a:	bf00      	nop
 8020e8c:	08020f31 	.word	0x08020f31
 8020e90:	08020f61 	.word	0x08020f61
 8020e94:	08020f61 	.word	0x08020f61
 8020e98:	08020f61 	.word	0x08020f61
 8020e9c:	08020f61 	.word	0x08020f61
 8020ea0:	08020f61 	.word	0x08020f61
 8020ea4:	08020f61 	.word	0x08020f61
 8020ea8:	08020f61 	.word	0x08020f61
 8020eac:	08020f39 	.word	0x08020f39
 8020eb0:	08020f61 	.word	0x08020f61
 8020eb4:	08020f61 	.word	0x08020f61
 8020eb8:	08020f61 	.word	0x08020f61
 8020ebc:	08020f61 	.word	0x08020f61
 8020ec0:	08020f61 	.word	0x08020f61
 8020ec4:	08020f61 	.word	0x08020f61
 8020ec8:	08020f61 	.word	0x08020f61
 8020ecc:	08020f41 	.word	0x08020f41
 8020ed0:	08020f61 	.word	0x08020f61
 8020ed4:	08020f61 	.word	0x08020f61
 8020ed8:	08020f61 	.word	0x08020f61
 8020edc:	08020f61 	.word	0x08020f61
 8020ee0:	08020f61 	.word	0x08020f61
 8020ee4:	08020f61 	.word	0x08020f61
 8020ee8:	08020f61 	.word	0x08020f61
 8020eec:	08020f49 	.word	0x08020f49
 8020ef0:	08020f61 	.word	0x08020f61
 8020ef4:	08020f61 	.word	0x08020f61
 8020ef8:	08020f61 	.word	0x08020f61
 8020efc:	08020f61 	.word	0x08020f61
 8020f00:	08020f61 	.word	0x08020f61
 8020f04:	08020f61 	.word	0x08020f61
 8020f08:	08020f61 	.word	0x08020f61
 8020f0c:	08020f51 	.word	0x08020f51
 8020f10:	08020f61 	.word	0x08020f61
 8020f14:	08020f61 	.word	0x08020f61
 8020f18:	08020f61 	.word	0x08020f61
 8020f1c:	08020f61 	.word	0x08020f61
 8020f20:	08020f61 	.word	0x08020f61
 8020f24:	08020f61 	.word	0x08020f61
 8020f28:	08020f61 	.word	0x08020f61
 8020f2c:	08020f59 	.word	0x08020f59
 8020f30:	2301      	movs	r3, #1
 8020f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020f36:	e222      	b.n	802137e <UART_SetConfig+0x5a6>
 8020f38:	2304      	movs	r3, #4
 8020f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020f3e:	e21e      	b.n	802137e <UART_SetConfig+0x5a6>
 8020f40:	2308      	movs	r3, #8
 8020f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020f46:	e21a      	b.n	802137e <UART_SetConfig+0x5a6>
 8020f48:	2310      	movs	r3, #16
 8020f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020f4e:	e216      	b.n	802137e <UART_SetConfig+0x5a6>
 8020f50:	2320      	movs	r3, #32
 8020f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020f56:	e212      	b.n	802137e <UART_SetConfig+0x5a6>
 8020f58:	2340      	movs	r3, #64	@ 0x40
 8020f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020f5e:	e20e      	b.n	802137e <UART_SetConfig+0x5a6>
 8020f60:	2380      	movs	r3, #128	@ 0x80
 8020f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020f66:	e20a      	b.n	802137e <UART_SetConfig+0x5a6>
 8020f68:	697b      	ldr	r3, [r7, #20]
 8020f6a:	681b      	ldr	r3, [r3, #0]
 8020f6c:	4a69      	ldr	r2, [pc, #420]	@ (8021114 <UART_SetConfig+0x33c>)
 8020f6e:	4293      	cmp	r3, r2
 8020f70:	d130      	bne.n	8020fd4 <UART_SetConfig+0x1fc>
 8020f72:	4b67      	ldr	r3, [pc, #412]	@ (8021110 <UART_SetConfig+0x338>)
 8020f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020f76:	f003 0307 	and.w	r3, r3, #7
 8020f7a:	2b05      	cmp	r3, #5
 8020f7c:	d826      	bhi.n	8020fcc <UART_SetConfig+0x1f4>
 8020f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8020f84 <UART_SetConfig+0x1ac>)
 8020f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020f84:	08020f9d 	.word	0x08020f9d
 8020f88:	08020fa5 	.word	0x08020fa5
 8020f8c:	08020fad 	.word	0x08020fad
 8020f90:	08020fb5 	.word	0x08020fb5
 8020f94:	08020fbd 	.word	0x08020fbd
 8020f98:	08020fc5 	.word	0x08020fc5
 8020f9c:	2300      	movs	r3, #0
 8020f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020fa2:	e1ec      	b.n	802137e <UART_SetConfig+0x5a6>
 8020fa4:	2304      	movs	r3, #4
 8020fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020faa:	e1e8      	b.n	802137e <UART_SetConfig+0x5a6>
 8020fac:	2308      	movs	r3, #8
 8020fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020fb2:	e1e4      	b.n	802137e <UART_SetConfig+0x5a6>
 8020fb4:	2310      	movs	r3, #16
 8020fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020fba:	e1e0      	b.n	802137e <UART_SetConfig+0x5a6>
 8020fbc:	2320      	movs	r3, #32
 8020fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020fc2:	e1dc      	b.n	802137e <UART_SetConfig+0x5a6>
 8020fc4:	2340      	movs	r3, #64	@ 0x40
 8020fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020fca:	e1d8      	b.n	802137e <UART_SetConfig+0x5a6>
 8020fcc:	2380      	movs	r3, #128	@ 0x80
 8020fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020fd2:	e1d4      	b.n	802137e <UART_SetConfig+0x5a6>
 8020fd4:	697b      	ldr	r3, [r7, #20]
 8020fd6:	681b      	ldr	r3, [r3, #0]
 8020fd8:	4a4f      	ldr	r2, [pc, #316]	@ (8021118 <UART_SetConfig+0x340>)
 8020fda:	4293      	cmp	r3, r2
 8020fdc:	d130      	bne.n	8021040 <UART_SetConfig+0x268>
 8020fde:	4b4c      	ldr	r3, [pc, #304]	@ (8021110 <UART_SetConfig+0x338>)
 8020fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020fe2:	f003 0307 	and.w	r3, r3, #7
 8020fe6:	2b05      	cmp	r3, #5
 8020fe8:	d826      	bhi.n	8021038 <UART_SetConfig+0x260>
 8020fea:	a201      	add	r2, pc, #4	@ (adr r2, 8020ff0 <UART_SetConfig+0x218>)
 8020fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020ff0:	08021009 	.word	0x08021009
 8020ff4:	08021011 	.word	0x08021011
 8020ff8:	08021019 	.word	0x08021019
 8020ffc:	08021021 	.word	0x08021021
 8021000:	08021029 	.word	0x08021029
 8021004:	08021031 	.word	0x08021031
 8021008:	2300      	movs	r3, #0
 802100a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802100e:	e1b6      	b.n	802137e <UART_SetConfig+0x5a6>
 8021010:	2304      	movs	r3, #4
 8021012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021016:	e1b2      	b.n	802137e <UART_SetConfig+0x5a6>
 8021018:	2308      	movs	r3, #8
 802101a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802101e:	e1ae      	b.n	802137e <UART_SetConfig+0x5a6>
 8021020:	2310      	movs	r3, #16
 8021022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021026:	e1aa      	b.n	802137e <UART_SetConfig+0x5a6>
 8021028:	2320      	movs	r3, #32
 802102a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802102e:	e1a6      	b.n	802137e <UART_SetConfig+0x5a6>
 8021030:	2340      	movs	r3, #64	@ 0x40
 8021032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021036:	e1a2      	b.n	802137e <UART_SetConfig+0x5a6>
 8021038:	2380      	movs	r3, #128	@ 0x80
 802103a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802103e:	e19e      	b.n	802137e <UART_SetConfig+0x5a6>
 8021040:	697b      	ldr	r3, [r7, #20]
 8021042:	681b      	ldr	r3, [r3, #0]
 8021044:	4a35      	ldr	r2, [pc, #212]	@ (802111c <UART_SetConfig+0x344>)
 8021046:	4293      	cmp	r3, r2
 8021048:	d130      	bne.n	80210ac <UART_SetConfig+0x2d4>
 802104a:	4b31      	ldr	r3, [pc, #196]	@ (8021110 <UART_SetConfig+0x338>)
 802104c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802104e:	f003 0307 	and.w	r3, r3, #7
 8021052:	2b05      	cmp	r3, #5
 8021054:	d826      	bhi.n	80210a4 <UART_SetConfig+0x2cc>
 8021056:	a201      	add	r2, pc, #4	@ (adr r2, 802105c <UART_SetConfig+0x284>)
 8021058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802105c:	08021075 	.word	0x08021075
 8021060:	0802107d 	.word	0x0802107d
 8021064:	08021085 	.word	0x08021085
 8021068:	0802108d 	.word	0x0802108d
 802106c:	08021095 	.word	0x08021095
 8021070:	0802109d 	.word	0x0802109d
 8021074:	2300      	movs	r3, #0
 8021076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802107a:	e180      	b.n	802137e <UART_SetConfig+0x5a6>
 802107c:	2304      	movs	r3, #4
 802107e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021082:	e17c      	b.n	802137e <UART_SetConfig+0x5a6>
 8021084:	2308      	movs	r3, #8
 8021086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802108a:	e178      	b.n	802137e <UART_SetConfig+0x5a6>
 802108c:	2310      	movs	r3, #16
 802108e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021092:	e174      	b.n	802137e <UART_SetConfig+0x5a6>
 8021094:	2320      	movs	r3, #32
 8021096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802109a:	e170      	b.n	802137e <UART_SetConfig+0x5a6>
 802109c:	2340      	movs	r3, #64	@ 0x40
 802109e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80210a2:	e16c      	b.n	802137e <UART_SetConfig+0x5a6>
 80210a4:	2380      	movs	r3, #128	@ 0x80
 80210a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80210aa:	e168      	b.n	802137e <UART_SetConfig+0x5a6>
 80210ac:	697b      	ldr	r3, [r7, #20]
 80210ae:	681b      	ldr	r3, [r3, #0]
 80210b0:	4a1b      	ldr	r2, [pc, #108]	@ (8021120 <UART_SetConfig+0x348>)
 80210b2:	4293      	cmp	r3, r2
 80210b4:	d142      	bne.n	802113c <UART_SetConfig+0x364>
 80210b6:	4b16      	ldr	r3, [pc, #88]	@ (8021110 <UART_SetConfig+0x338>)
 80210b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80210ba:	f003 0307 	and.w	r3, r3, #7
 80210be:	2b05      	cmp	r3, #5
 80210c0:	d838      	bhi.n	8021134 <UART_SetConfig+0x35c>
 80210c2:	a201      	add	r2, pc, #4	@ (adr r2, 80210c8 <UART_SetConfig+0x2f0>)
 80210c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80210c8:	080210e1 	.word	0x080210e1
 80210cc:	080210e9 	.word	0x080210e9
 80210d0:	080210f1 	.word	0x080210f1
 80210d4:	080210f9 	.word	0x080210f9
 80210d8:	08021125 	.word	0x08021125
 80210dc:	0802112d 	.word	0x0802112d
 80210e0:	2300      	movs	r3, #0
 80210e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80210e6:	e14a      	b.n	802137e <UART_SetConfig+0x5a6>
 80210e8:	2304      	movs	r3, #4
 80210ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80210ee:	e146      	b.n	802137e <UART_SetConfig+0x5a6>
 80210f0:	2308      	movs	r3, #8
 80210f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80210f6:	e142      	b.n	802137e <UART_SetConfig+0x5a6>
 80210f8:	2310      	movs	r3, #16
 80210fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80210fe:	e13e      	b.n	802137e <UART_SetConfig+0x5a6>
 8021100:	cfff69f3 	.word	0xcfff69f3
 8021104:	58000c00 	.word	0x58000c00
 8021108:	11fff4ff 	.word	0x11fff4ff
 802110c:	40011000 	.word	0x40011000
 8021110:	58024400 	.word	0x58024400
 8021114:	40004400 	.word	0x40004400
 8021118:	40004800 	.word	0x40004800
 802111c:	40004c00 	.word	0x40004c00
 8021120:	40005000 	.word	0x40005000
 8021124:	2320      	movs	r3, #32
 8021126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802112a:	e128      	b.n	802137e <UART_SetConfig+0x5a6>
 802112c:	2340      	movs	r3, #64	@ 0x40
 802112e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021132:	e124      	b.n	802137e <UART_SetConfig+0x5a6>
 8021134:	2380      	movs	r3, #128	@ 0x80
 8021136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802113a:	e120      	b.n	802137e <UART_SetConfig+0x5a6>
 802113c:	697b      	ldr	r3, [r7, #20]
 802113e:	681b      	ldr	r3, [r3, #0]
 8021140:	4acb      	ldr	r2, [pc, #812]	@ (8021470 <UART_SetConfig+0x698>)
 8021142:	4293      	cmp	r3, r2
 8021144:	d176      	bne.n	8021234 <UART_SetConfig+0x45c>
 8021146:	4bcb      	ldr	r3, [pc, #812]	@ (8021474 <UART_SetConfig+0x69c>)
 8021148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802114a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 802114e:	2b28      	cmp	r3, #40	@ 0x28
 8021150:	d86c      	bhi.n	802122c <UART_SetConfig+0x454>
 8021152:	a201      	add	r2, pc, #4	@ (adr r2, 8021158 <UART_SetConfig+0x380>)
 8021154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021158:	080211fd 	.word	0x080211fd
 802115c:	0802122d 	.word	0x0802122d
 8021160:	0802122d 	.word	0x0802122d
 8021164:	0802122d 	.word	0x0802122d
 8021168:	0802122d 	.word	0x0802122d
 802116c:	0802122d 	.word	0x0802122d
 8021170:	0802122d 	.word	0x0802122d
 8021174:	0802122d 	.word	0x0802122d
 8021178:	08021205 	.word	0x08021205
 802117c:	0802122d 	.word	0x0802122d
 8021180:	0802122d 	.word	0x0802122d
 8021184:	0802122d 	.word	0x0802122d
 8021188:	0802122d 	.word	0x0802122d
 802118c:	0802122d 	.word	0x0802122d
 8021190:	0802122d 	.word	0x0802122d
 8021194:	0802122d 	.word	0x0802122d
 8021198:	0802120d 	.word	0x0802120d
 802119c:	0802122d 	.word	0x0802122d
 80211a0:	0802122d 	.word	0x0802122d
 80211a4:	0802122d 	.word	0x0802122d
 80211a8:	0802122d 	.word	0x0802122d
 80211ac:	0802122d 	.word	0x0802122d
 80211b0:	0802122d 	.word	0x0802122d
 80211b4:	0802122d 	.word	0x0802122d
 80211b8:	08021215 	.word	0x08021215
 80211bc:	0802122d 	.word	0x0802122d
 80211c0:	0802122d 	.word	0x0802122d
 80211c4:	0802122d 	.word	0x0802122d
 80211c8:	0802122d 	.word	0x0802122d
 80211cc:	0802122d 	.word	0x0802122d
 80211d0:	0802122d 	.word	0x0802122d
 80211d4:	0802122d 	.word	0x0802122d
 80211d8:	0802121d 	.word	0x0802121d
 80211dc:	0802122d 	.word	0x0802122d
 80211e0:	0802122d 	.word	0x0802122d
 80211e4:	0802122d 	.word	0x0802122d
 80211e8:	0802122d 	.word	0x0802122d
 80211ec:	0802122d 	.word	0x0802122d
 80211f0:	0802122d 	.word	0x0802122d
 80211f4:	0802122d 	.word	0x0802122d
 80211f8:	08021225 	.word	0x08021225
 80211fc:	2301      	movs	r3, #1
 80211fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021202:	e0bc      	b.n	802137e <UART_SetConfig+0x5a6>
 8021204:	2304      	movs	r3, #4
 8021206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802120a:	e0b8      	b.n	802137e <UART_SetConfig+0x5a6>
 802120c:	2308      	movs	r3, #8
 802120e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021212:	e0b4      	b.n	802137e <UART_SetConfig+0x5a6>
 8021214:	2310      	movs	r3, #16
 8021216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802121a:	e0b0      	b.n	802137e <UART_SetConfig+0x5a6>
 802121c:	2320      	movs	r3, #32
 802121e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021222:	e0ac      	b.n	802137e <UART_SetConfig+0x5a6>
 8021224:	2340      	movs	r3, #64	@ 0x40
 8021226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802122a:	e0a8      	b.n	802137e <UART_SetConfig+0x5a6>
 802122c:	2380      	movs	r3, #128	@ 0x80
 802122e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021232:	e0a4      	b.n	802137e <UART_SetConfig+0x5a6>
 8021234:	697b      	ldr	r3, [r7, #20]
 8021236:	681b      	ldr	r3, [r3, #0]
 8021238:	4a8f      	ldr	r2, [pc, #572]	@ (8021478 <UART_SetConfig+0x6a0>)
 802123a:	4293      	cmp	r3, r2
 802123c:	d130      	bne.n	80212a0 <UART_SetConfig+0x4c8>
 802123e:	4b8d      	ldr	r3, [pc, #564]	@ (8021474 <UART_SetConfig+0x69c>)
 8021240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021242:	f003 0307 	and.w	r3, r3, #7
 8021246:	2b05      	cmp	r3, #5
 8021248:	d826      	bhi.n	8021298 <UART_SetConfig+0x4c0>
 802124a:	a201      	add	r2, pc, #4	@ (adr r2, 8021250 <UART_SetConfig+0x478>)
 802124c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021250:	08021269 	.word	0x08021269
 8021254:	08021271 	.word	0x08021271
 8021258:	08021279 	.word	0x08021279
 802125c:	08021281 	.word	0x08021281
 8021260:	08021289 	.word	0x08021289
 8021264:	08021291 	.word	0x08021291
 8021268:	2300      	movs	r3, #0
 802126a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802126e:	e086      	b.n	802137e <UART_SetConfig+0x5a6>
 8021270:	2304      	movs	r3, #4
 8021272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021276:	e082      	b.n	802137e <UART_SetConfig+0x5a6>
 8021278:	2308      	movs	r3, #8
 802127a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802127e:	e07e      	b.n	802137e <UART_SetConfig+0x5a6>
 8021280:	2310      	movs	r3, #16
 8021282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021286:	e07a      	b.n	802137e <UART_SetConfig+0x5a6>
 8021288:	2320      	movs	r3, #32
 802128a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802128e:	e076      	b.n	802137e <UART_SetConfig+0x5a6>
 8021290:	2340      	movs	r3, #64	@ 0x40
 8021292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021296:	e072      	b.n	802137e <UART_SetConfig+0x5a6>
 8021298:	2380      	movs	r3, #128	@ 0x80
 802129a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802129e:	e06e      	b.n	802137e <UART_SetConfig+0x5a6>
 80212a0:	697b      	ldr	r3, [r7, #20]
 80212a2:	681b      	ldr	r3, [r3, #0]
 80212a4:	4a75      	ldr	r2, [pc, #468]	@ (802147c <UART_SetConfig+0x6a4>)
 80212a6:	4293      	cmp	r3, r2
 80212a8:	d130      	bne.n	802130c <UART_SetConfig+0x534>
 80212aa:	4b72      	ldr	r3, [pc, #456]	@ (8021474 <UART_SetConfig+0x69c>)
 80212ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80212ae:	f003 0307 	and.w	r3, r3, #7
 80212b2:	2b05      	cmp	r3, #5
 80212b4:	d826      	bhi.n	8021304 <UART_SetConfig+0x52c>
 80212b6:	a201      	add	r2, pc, #4	@ (adr r2, 80212bc <UART_SetConfig+0x4e4>)
 80212b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80212bc:	080212d5 	.word	0x080212d5
 80212c0:	080212dd 	.word	0x080212dd
 80212c4:	080212e5 	.word	0x080212e5
 80212c8:	080212ed 	.word	0x080212ed
 80212cc:	080212f5 	.word	0x080212f5
 80212d0:	080212fd 	.word	0x080212fd
 80212d4:	2300      	movs	r3, #0
 80212d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80212da:	e050      	b.n	802137e <UART_SetConfig+0x5a6>
 80212dc:	2304      	movs	r3, #4
 80212de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80212e2:	e04c      	b.n	802137e <UART_SetConfig+0x5a6>
 80212e4:	2308      	movs	r3, #8
 80212e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80212ea:	e048      	b.n	802137e <UART_SetConfig+0x5a6>
 80212ec:	2310      	movs	r3, #16
 80212ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80212f2:	e044      	b.n	802137e <UART_SetConfig+0x5a6>
 80212f4:	2320      	movs	r3, #32
 80212f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80212fa:	e040      	b.n	802137e <UART_SetConfig+0x5a6>
 80212fc:	2340      	movs	r3, #64	@ 0x40
 80212fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021302:	e03c      	b.n	802137e <UART_SetConfig+0x5a6>
 8021304:	2380      	movs	r3, #128	@ 0x80
 8021306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802130a:	e038      	b.n	802137e <UART_SetConfig+0x5a6>
 802130c:	697b      	ldr	r3, [r7, #20]
 802130e:	681b      	ldr	r3, [r3, #0]
 8021310:	4a5b      	ldr	r2, [pc, #364]	@ (8021480 <UART_SetConfig+0x6a8>)
 8021312:	4293      	cmp	r3, r2
 8021314:	d130      	bne.n	8021378 <UART_SetConfig+0x5a0>
 8021316:	4b57      	ldr	r3, [pc, #348]	@ (8021474 <UART_SetConfig+0x69c>)
 8021318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802131a:	f003 0307 	and.w	r3, r3, #7
 802131e:	2b05      	cmp	r3, #5
 8021320:	d826      	bhi.n	8021370 <UART_SetConfig+0x598>
 8021322:	a201      	add	r2, pc, #4	@ (adr r2, 8021328 <UART_SetConfig+0x550>)
 8021324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021328:	08021341 	.word	0x08021341
 802132c:	08021349 	.word	0x08021349
 8021330:	08021351 	.word	0x08021351
 8021334:	08021359 	.word	0x08021359
 8021338:	08021361 	.word	0x08021361
 802133c:	08021369 	.word	0x08021369
 8021340:	2302      	movs	r3, #2
 8021342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021346:	e01a      	b.n	802137e <UART_SetConfig+0x5a6>
 8021348:	2304      	movs	r3, #4
 802134a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802134e:	e016      	b.n	802137e <UART_SetConfig+0x5a6>
 8021350:	2308      	movs	r3, #8
 8021352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021356:	e012      	b.n	802137e <UART_SetConfig+0x5a6>
 8021358:	2310      	movs	r3, #16
 802135a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802135e:	e00e      	b.n	802137e <UART_SetConfig+0x5a6>
 8021360:	2320      	movs	r3, #32
 8021362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021366:	e00a      	b.n	802137e <UART_SetConfig+0x5a6>
 8021368:	2340      	movs	r3, #64	@ 0x40
 802136a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802136e:	e006      	b.n	802137e <UART_SetConfig+0x5a6>
 8021370:	2380      	movs	r3, #128	@ 0x80
 8021372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021376:	e002      	b.n	802137e <UART_SetConfig+0x5a6>
 8021378:	2380      	movs	r3, #128	@ 0x80
 802137a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 802137e:	697b      	ldr	r3, [r7, #20]
 8021380:	681b      	ldr	r3, [r3, #0]
 8021382:	4a3f      	ldr	r2, [pc, #252]	@ (8021480 <UART_SetConfig+0x6a8>)
 8021384:	4293      	cmp	r3, r2
 8021386:	f040 80f8 	bne.w	802157a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 802138a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 802138e:	2b20      	cmp	r3, #32
 8021390:	dc46      	bgt.n	8021420 <UART_SetConfig+0x648>
 8021392:	2b02      	cmp	r3, #2
 8021394:	f2c0 8082 	blt.w	802149c <UART_SetConfig+0x6c4>
 8021398:	3b02      	subs	r3, #2
 802139a:	2b1e      	cmp	r3, #30
 802139c:	d87e      	bhi.n	802149c <UART_SetConfig+0x6c4>
 802139e:	a201      	add	r2, pc, #4	@ (adr r2, 80213a4 <UART_SetConfig+0x5cc>)
 80213a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80213a4:	08021427 	.word	0x08021427
 80213a8:	0802149d 	.word	0x0802149d
 80213ac:	0802142f 	.word	0x0802142f
 80213b0:	0802149d 	.word	0x0802149d
 80213b4:	0802149d 	.word	0x0802149d
 80213b8:	0802149d 	.word	0x0802149d
 80213bc:	0802143f 	.word	0x0802143f
 80213c0:	0802149d 	.word	0x0802149d
 80213c4:	0802149d 	.word	0x0802149d
 80213c8:	0802149d 	.word	0x0802149d
 80213cc:	0802149d 	.word	0x0802149d
 80213d0:	0802149d 	.word	0x0802149d
 80213d4:	0802149d 	.word	0x0802149d
 80213d8:	0802149d 	.word	0x0802149d
 80213dc:	0802144f 	.word	0x0802144f
 80213e0:	0802149d 	.word	0x0802149d
 80213e4:	0802149d 	.word	0x0802149d
 80213e8:	0802149d 	.word	0x0802149d
 80213ec:	0802149d 	.word	0x0802149d
 80213f0:	0802149d 	.word	0x0802149d
 80213f4:	0802149d 	.word	0x0802149d
 80213f8:	0802149d 	.word	0x0802149d
 80213fc:	0802149d 	.word	0x0802149d
 8021400:	0802149d 	.word	0x0802149d
 8021404:	0802149d 	.word	0x0802149d
 8021408:	0802149d 	.word	0x0802149d
 802140c:	0802149d 	.word	0x0802149d
 8021410:	0802149d 	.word	0x0802149d
 8021414:	0802149d 	.word	0x0802149d
 8021418:	0802149d 	.word	0x0802149d
 802141c:	0802148f 	.word	0x0802148f
 8021420:	2b40      	cmp	r3, #64	@ 0x40
 8021422:	d037      	beq.n	8021494 <UART_SetConfig+0x6bc>
 8021424:	e03a      	b.n	802149c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8021426:	f7fd fc87 	bl	801ed38 <HAL_RCCEx_GetD3PCLK1Freq>
 802142a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 802142c:	e03c      	b.n	80214a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802142e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021432:	4618      	mov	r0, r3
 8021434:	f7fd fc96 	bl	801ed64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8021438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802143a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802143c:	e034      	b.n	80214a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802143e:	f107 0318 	add.w	r3, r7, #24
 8021442:	4618      	mov	r0, r3
 8021444:	f7fd fde2 	bl	801f00c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021448:	69fb      	ldr	r3, [r7, #28]
 802144a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802144c:	e02c      	b.n	80214a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802144e:	4b09      	ldr	r3, [pc, #36]	@ (8021474 <UART_SetConfig+0x69c>)
 8021450:	681b      	ldr	r3, [r3, #0]
 8021452:	f003 0320 	and.w	r3, r3, #32
 8021456:	2b00      	cmp	r3, #0
 8021458:	d016      	beq.n	8021488 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802145a:	4b06      	ldr	r3, [pc, #24]	@ (8021474 <UART_SetConfig+0x69c>)
 802145c:	681b      	ldr	r3, [r3, #0]
 802145e:	08db      	lsrs	r3, r3, #3
 8021460:	f003 0303 	and.w	r3, r3, #3
 8021464:	4a07      	ldr	r2, [pc, #28]	@ (8021484 <UART_SetConfig+0x6ac>)
 8021466:	fa22 f303 	lsr.w	r3, r2, r3
 802146a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802146c:	e01c      	b.n	80214a8 <UART_SetConfig+0x6d0>
 802146e:	bf00      	nop
 8021470:	40011400 	.word	0x40011400
 8021474:	58024400 	.word	0x58024400
 8021478:	40007800 	.word	0x40007800
 802147c:	40007c00 	.word	0x40007c00
 8021480:	58000c00 	.word	0x58000c00
 8021484:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8021488:	4b9d      	ldr	r3, [pc, #628]	@ (8021700 <UART_SetConfig+0x928>)
 802148a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802148c:	e00c      	b.n	80214a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802148e:	4b9d      	ldr	r3, [pc, #628]	@ (8021704 <UART_SetConfig+0x92c>)
 8021490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021492:	e009      	b.n	80214a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021494:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802149a:	e005      	b.n	80214a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 802149c:	2300      	movs	r3, #0
 802149e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80214a0:	2301      	movs	r3, #1
 80214a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80214a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80214a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	f000 81de 	beq.w	802186c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80214b0:	697b      	ldr	r3, [r7, #20]
 80214b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80214b4:	4a94      	ldr	r2, [pc, #592]	@ (8021708 <UART_SetConfig+0x930>)
 80214b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80214ba:	461a      	mov	r2, r3
 80214bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80214be:	fbb3 f3f2 	udiv	r3, r3, r2
 80214c2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80214c4:	697b      	ldr	r3, [r7, #20]
 80214c6:	685a      	ldr	r2, [r3, #4]
 80214c8:	4613      	mov	r3, r2
 80214ca:	005b      	lsls	r3, r3, #1
 80214cc:	4413      	add	r3, r2
 80214ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80214d0:	429a      	cmp	r2, r3
 80214d2:	d305      	bcc.n	80214e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80214d4:	697b      	ldr	r3, [r7, #20]
 80214d6:	685b      	ldr	r3, [r3, #4]
 80214d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80214da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80214dc:	429a      	cmp	r2, r3
 80214de:	d903      	bls.n	80214e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80214e0:	2301      	movs	r3, #1
 80214e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80214e6:	e1c1      	b.n	802186c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80214e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80214ea:	2200      	movs	r2, #0
 80214ec:	60bb      	str	r3, [r7, #8]
 80214ee:	60fa      	str	r2, [r7, #12]
 80214f0:	697b      	ldr	r3, [r7, #20]
 80214f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80214f4:	4a84      	ldr	r2, [pc, #528]	@ (8021708 <UART_SetConfig+0x930>)
 80214f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80214fa:	b29b      	uxth	r3, r3
 80214fc:	2200      	movs	r2, #0
 80214fe:	603b      	str	r3, [r7, #0]
 8021500:	607a      	str	r2, [r7, #4]
 8021502:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021506:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802150a:	f7de ff51 	bl	80003b0 <__aeabi_uldivmod>
 802150e:	4602      	mov	r2, r0
 8021510:	460b      	mov	r3, r1
 8021512:	4610      	mov	r0, r2
 8021514:	4619      	mov	r1, r3
 8021516:	f04f 0200 	mov.w	r2, #0
 802151a:	f04f 0300 	mov.w	r3, #0
 802151e:	020b      	lsls	r3, r1, #8
 8021520:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8021524:	0202      	lsls	r2, r0, #8
 8021526:	6979      	ldr	r1, [r7, #20]
 8021528:	6849      	ldr	r1, [r1, #4]
 802152a:	0849      	lsrs	r1, r1, #1
 802152c:	2000      	movs	r0, #0
 802152e:	460c      	mov	r4, r1
 8021530:	4605      	mov	r5, r0
 8021532:	eb12 0804 	adds.w	r8, r2, r4
 8021536:	eb43 0905 	adc.w	r9, r3, r5
 802153a:	697b      	ldr	r3, [r7, #20]
 802153c:	685b      	ldr	r3, [r3, #4]
 802153e:	2200      	movs	r2, #0
 8021540:	469a      	mov	sl, r3
 8021542:	4693      	mov	fp, r2
 8021544:	4652      	mov	r2, sl
 8021546:	465b      	mov	r3, fp
 8021548:	4640      	mov	r0, r8
 802154a:	4649      	mov	r1, r9
 802154c:	f7de ff30 	bl	80003b0 <__aeabi_uldivmod>
 8021550:	4602      	mov	r2, r0
 8021552:	460b      	mov	r3, r1
 8021554:	4613      	mov	r3, r2
 8021556:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8021558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802155a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 802155e:	d308      	bcc.n	8021572 <UART_SetConfig+0x79a>
 8021560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021562:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8021566:	d204      	bcs.n	8021572 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8021568:	697b      	ldr	r3, [r7, #20]
 802156a:	681b      	ldr	r3, [r3, #0]
 802156c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802156e:	60da      	str	r2, [r3, #12]
 8021570:	e17c      	b.n	802186c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8021572:	2301      	movs	r3, #1
 8021574:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021578:	e178      	b.n	802186c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802157a:	697b      	ldr	r3, [r7, #20]
 802157c:	69db      	ldr	r3, [r3, #28]
 802157e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8021582:	f040 80c5 	bne.w	8021710 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8021586:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 802158a:	2b20      	cmp	r3, #32
 802158c:	dc48      	bgt.n	8021620 <UART_SetConfig+0x848>
 802158e:	2b00      	cmp	r3, #0
 8021590:	db7b      	blt.n	802168a <UART_SetConfig+0x8b2>
 8021592:	2b20      	cmp	r3, #32
 8021594:	d879      	bhi.n	802168a <UART_SetConfig+0x8b2>
 8021596:	a201      	add	r2, pc, #4	@ (adr r2, 802159c <UART_SetConfig+0x7c4>)
 8021598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802159c:	08021627 	.word	0x08021627
 80215a0:	0802162f 	.word	0x0802162f
 80215a4:	0802168b 	.word	0x0802168b
 80215a8:	0802168b 	.word	0x0802168b
 80215ac:	08021637 	.word	0x08021637
 80215b0:	0802168b 	.word	0x0802168b
 80215b4:	0802168b 	.word	0x0802168b
 80215b8:	0802168b 	.word	0x0802168b
 80215bc:	08021647 	.word	0x08021647
 80215c0:	0802168b 	.word	0x0802168b
 80215c4:	0802168b 	.word	0x0802168b
 80215c8:	0802168b 	.word	0x0802168b
 80215cc:	0802168b 	.word	0x0802168b
 80215d0:	0802168b 	.word	0x0802168b
 80215d4:	0802168b 	.word	0x0802168b
 80215d8:	0802168b 	.word	0x0802168b
 80215dc:	08021657 	.word	0x08021657
 80215e0:	0802168b 	.word	0x0802168b
 80215e4:	0802168b 	.word	0x0802168b
 80215e8:	0802168b 	.word	0x0802168b
 80215ec:	0802168b 	.word	0x0802168b
 80215f0:	0802168b 	.word	0x0802168b
 80215f4:	0802168b 	.word	0x0802168b
 80215f8:	0802168b 	.word	0x0802168b
 80215fc:	0802168b 	.word	0x0802168b
 8021600:	0802168b 	.word	0x0802168b
 8021604:	0802168b 	.word	0x0802168b
 8021608:	0802168b 	.word	0x0802168b
 802160c:	0802168b 	.word	0x0802168b
 8021610:	0802168b 	.word	0x0802168b
 8021614:	0802168b 	.word	0x0802168b
 8021618:	0802168b 	.word	0x0802168b
 802161c:	0802167d 	.word	0x0802167d
 8021620:	2b40      	cmp	r3, #64	@ 0x40
 8021622:	d02e      	beq.n	8021682 <UART_SetConfig+0x8aa>
 8021624:	e031      	b.n	802168a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021626:	f7fc f951 	bl	801d8cc <HAL_RCC_GetPCLK1Freq>
 802162a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 802162c:	e033      	b.n	8021696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802162e:	f7fc f963 	bl	801d8f8 <HAL_RCC_GetPCLK2Freq>
 8021632:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021634:	e02f      	b.n	8021696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021636:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802163a:	4618      	mov	r0, r3
 802163c:	f7fd fb92 	bl	801ed64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8021640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021644:	e027      	b.n	8021696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021646:	f107 0318 	add.w	r3, r7, #24
 802164a:	4618      	mov	r0, r3
 802164c:	f7fd fcde 	bl	801f00c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021650:	69fb      	ldr	r3, [r7, #28]
 8021652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021654:	e01f      	b.n	8021696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021656:	4b2d      	ldr	r3, [pc, #180]	@ (802170c <UART_SetConfig+0x934>)
 8021658:	681b      	ldr	r3, [r3, #0]
 802165a:	f003 0320 	and.w	r3, r3, #32
 802165e:	2b00      	cmp	r3, #0
 8021660:	d009      	beq.n	8021676 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021662:	4b2a      	ldr	r3, [pc, #168]	@ (802170c <UART_SetConfig+0x934>)
 8021664:	681b      	ldr	r3, [r3, #0]
 8021666:	08db      	lsrs	r3, r3, #3
 8021668:	f003 0303 	and.w	r3, r3, #3
 802166c:	4a24      	ldr	r2, [pc, #144]	@ (8021700 <UART_SetConfig+0x928>)
 802166e:	fa22 f303 	lsr.w	r3, r2, r3
 8021672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021674:	e00f      	b.n	8021696 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8021676:	4b22      	ldr	r3, [pc, #136]	@ (8021700 <UART_SetConfig+0x928>)
 8021678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802167a:	e00c      	b.n	8021696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802167c:	4b21      	ldr	r3, [pc, #132]	@ (8021704 <UART_SetConfig+0x92c>)
 802167e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021680:	e009      	b.n	8021696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021688:	e005      	b.n	8021696 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 802168a:	2300      	movs	r3, #0
 802168c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 802168e:	2301      	movs	r3, #1
 8021690:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021694:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8021696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021698:	2b00      	cmp	r3, #0
 802169a:	f000 80e7 	beq.w	802186c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802169e:	697b      	ldr	r3, [r7, #20]
 80216a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80216a2:	4a19      	ldr	r2, [pc, #100]	@ (8021708 <UART_SetConfig+0x930>)
 80216a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80216a8:	461a      	mov	r2, r3
 80216aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80216ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80216b0:	005a      	lsls	r2, r3, #1
 80216b2:	697b      	ldr	r3, [r7, #20]
 80216b4:	685b      	ldr	r3, [r3, #4]
 80216b6:	085b      	lsrs	r3, r3, #1
 80216b8:	441a      	add	r2, r3
 80216ba:	697b      	ldr	r3, [r7, #20]
 80216bc:	685b      	ldr	r3, [r3, #4]
 80216be:	fbb2 f3f3 	udiv	r3, r2, r3
 80216c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80216c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216c6:	2b0f      	cmp	r3, #15
 80216c8:	d916      	bls.n	80216f8 <UART_SetConfig+0x920>
 80216ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80216d0:	d212      	bcs.n	80216f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80216d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216d4:	b29b      	uxth	r3, r3
 80216d6:	f023 030f 	bic.w	r3, r3, #15
 80216da:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80216dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216de:	085b      	lsrs	r3, r3, #1
 80216e0:	b29b      	uxth	r3, r3
 80216e2:	f003 0307 	and.w	r3, r3, #7
 80216e6:	b29a      	uxth	r2, r3
 80216e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80216ea:	4313      	orrs	r3, r2
 80216ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80216ee:	697b      	ldr	r3, [r7, #20]
 80216f0:	681b      	ldr	r3, [r3, #0]
 80216f2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80216f4:	60da      	str	r2, [r3, #12]
 80216f6:	e0b9      	b.n	802186c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80216f8:	2301      	movs	r3, #1
 80216fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80216fe:	e0b5      	b.n	802186c <UART_SetConfig+0xa94>
 8021700:	03d09000 	.word	0x03d09000
 8021704:	003d0900 	.word	0x003d0900
 8021708:	08027904 	.word	0x08027904
 802170c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8021710:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8021714:	2b20      	cmp	r3, #32
 8021716:	dc49      	bgt.n	80217ac <UART_SetConfig+0x9d4>
 8021718:	2b00      	cmp	r3, #0
 802171a:	db7c      	blt.n	8021816 <UART_SetConfig+0xa3e>
 802171c:	2b20      	cmp	r3, #32
 802171e:	d87a      	bhi.n	8021816 <UART_SetConfig+0xa3e>
 8021720:	a201      	add	r2, pc, #4	@ (adr r2, 8021728 <UART_SetConfig+0x950>)
 8021722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021726:	bf00      	nop
 8021728:	080217b3 	.word	0x080217b3
 802172c:	080217bb 	.word	0x080217bb
 8021730:	08021817 	.word	0x08021817
 8021734:	08021817 	.word	0x08021817
 8021738:	080217c3 	.word	0x080217c3
 802173c:	08021817 	.word	0x08021817
 8021740:	08021817 	.word	0x08021817
 8021744:	08021817 	.word	0x08021817
 8021748:	080217d3 	.word	0x080217d3
 802174c:	08021817 	.word	0x08021817
 8021750:	08021817 	.word	0x08021817
 8021754:	08021817 	.word	0x08021817
 8021758:	08021817 	.word	0x08021817
 802175c:	08021817 	.word	0x08021817
 8021760:	08021817 	.word	0x08021817
 8021764:	08021817 	.word	0x08021817
 8021768:	080217e3 	.word	0x080217e3
 802176c:	08021817 	.word	0x08021817
 8021770:	08021817 	.word	0x08021817
 8021774:	08021817 	.word	0x08021817
 8021778:	08021817 	.word	0x08021817
 802177c:	08021817 	.word	0x08021817
 8021780:	08021817 	.word	0x08021817
 8021784:	08021817 	.word	0x08021817
 8021788:	08021817 	.word	0x08021817
 802178c:	08021817 	.word	0x08021817
 8021790:	08021817 	.word	0x08021817
 8021794:	08021817 	.word	0x08021817
 8021798:	08021817 	.word	0x08021817
 802179c:	08021817 	.word	0x08021817
 80217a0:	08021817 	.word	0x08021817
 80217a4:	08021817 	.word	0x08021817
 80217a8:	08021809 	.word	0x08021809
 80217ac:	2b40      	cmp	r3, #64	@ 0x40
 80217ae:	d02e      	beq.n	802180e <UART_SetConfig+0xa36>
 80217b0:	e031      	b.n	8021816 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80217b2:	f7fc f88b 	bl	801d8cc <HAL_RCC_GetPCLK1Freq>
 80217b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80217b8:	e033      	b.n	8021822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80217ba:	f7fc f89d 	bl	801d8f8 <HAL_RCC_GetPCLK2Freq>
 80217be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80217c0:	e02f      	b.n	8021822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80217c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80217c6:	4618      	mov	r0, r3
 80217c8:	f7fd facc 	bl	801ed64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80217cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80217ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80217d0:	e027      	b.n	8021822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80217d2:	f107 0318 	add.w	r3, r7, #24
 80217d6:	4618      	mov	r0, r3
 80217d8:	f7fd fc18 	bl	801f00c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80217dc:	69fb      	ldr	r3, [r7, #28]
 80217de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80217e0:	e01f      	b.n	8021822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80217e2:	4b2d      	ldr	r3, [pc, #180]	@ (8021898 <UART_SetConfig+0xac0>)
 80217e4:	681b      	ldr	r3, [r3, #0]
 80217e6:	f003 0320 	and.w	r3, r3, #32
 80217ea:	2b00      	cmp	r3, #0
 80217ec:	d009      	beq.n	8021802 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80217ee:	4b2a      	ldr	r3, [pc, #168]	@ (8021898 <UART_SetConfig+0xac0>)
 80217f0:	681b      	ldr	r3, [r3, #0]
 80217f2:	08db      	lsrs	r3, r3, #3
 80217f4:	f003 0303 	and.w	r3, r3, #3
 80217f8:	4a28      	ldr	r2, [pc, #160]	@ (802189c <UART_SetConfig+0xac4>)
 80217fa:	fa22 f303 	lsr.w	r3, r2, r3
 80217fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021800:	e00f      	b.n	8021822 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8021802:	4b26      	ldr	r3, [pc, #152]	@ (802189c <UART_SetConfig+0xac4>)
 8021804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021806:	e00c      	b.n	8021822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8021808:	4b25      	ldr	r3, [pc, #148]	@ (80218a0 <UART_SetConfig+0xac8>)
 802180a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802180c:	e009      	b.n	8021822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802180e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021814:	e005      	b.n	8021822 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8021816:	2300      	movs	r3, #0
 8021818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 802181a:	2301      	movs	r3, #1
 802181c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021820:	bf00      	nop
    }

    if (pclk != 0U)
 8021822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021824:	2b00      	cmp	r3, #0
 8021826:	d021      	beq.n	802186c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021828:	697b      	ldr	r3, [r7, #20]
 802182a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802182c:	4a1d      	ldr	r2, [pc, #116]	@ (80218a4 <UART_SetConfig+0xacc>)
 802182e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021832:	461a      	mov	r2, r3
 8021834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021836:	fbb3 f2f2 	udiv	r2, r3, r2
 802183a:	697b      	ldr	r3, [r7, #20]
 802183c:	685b      	ldr	r3, [r3, #4]
 802183e:	085b      	lsrs	r3, r3, #1
 8021840:	441a      	add	r2, r3
 8021842:	697b      	ldr	r3, [r7, #20]
 8021844:	685b      	ldr	r3, [r3, #4]
 8021846:	fbb2 f3f3 	udiv	r3, r2, r3
 802184a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802184c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802184e:	2b0f      	cmp	r3, #15
 8021850:	d909      	bls.n	8021866 <UART_SetConfig+0xa8e>
 8021852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021858:	d205      	bcs.n	8021866 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 802185a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802185c:	b29a      	uxth	r2, r3
 802185e:	697b      	ldr	r3, [r7, #20]
 8021860:	681b      	ldr	r3, [r3, #0]
 8021862:	60da      	str	r2, [r3, #12]
 8021864:	e002      	b.n	802186c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8021866:	2301      	movs	r3, #1
 8021868:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 802186c:	697b      	ldr	r3, [r7, #20]
 802186e:	2201      	movs	r2, #1
 8021870:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8021874:	697b      	ldr	r3, [r7, #20]
 8021876:	2201      	movs	r2, #1
 8021878:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 802187c:	697b      	ldr	r3, [r7, #20]
 802187e:	2200      	movs	r2, #0
 8021880:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8021882:	697b      	ldr	r3, [r7, #20]
 8021884:	2200      	movs	r2, #0
 8021886:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8021888:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 802188c:	4618      	mov	r0, r3
 802188e:	3748      	adds	r7, #72	@ 0x48
 8021890:	46bd      	mov	sp, r7
 8021892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021896:	bf00      	nop
 8021898:	58024400 	.word	0x58024400
 802189c:	03d09000 	.word	0x03d09000
 80218a0:	003d0900 	.word	0x003d0900
 80218a4:	08027904 	.word	0x08027904

080218a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80218a8:	b480      	push	{r7}
 80218aa:	b083      	sub	sp, #12
 80218ac:	af00      	add	r7, sp, #0
 80218ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80218b0:	687b      	ldr	r3, [r7, #4]
 80218b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80218b4:	f003 0308 	and.w	r3, r3, #8
 80218b8:	2b00      	cmp	r3, #0
 80218ba:	d00a      	beq.n	80218d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80218bc:	687b      	ldr	r3, [r7, #4]
 80218be:	681b      	ldr	r3, [r3, #0]
 80218c0:	685b      	ldr	r3, [r3, #4]
 80218c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80218c6:	687b      	ldr	r3, [r7, #4]
 80218c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80218ca:	687b      	ldr	r3, [r7, #4]
 80218cc:	681b      	ldr	r3, [r3, #0]
 80218ce:	430a      	orrs	r2, r1
 80218d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80218d2:	687b      	ldr	r3, [r7, #4]
 80218d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80218d6:	f003 0301 	and.w	r3, r3, #1
 80218da:	2b00      	cmp	r3, #0
 80218dc:	d00a      	beq.n	80218f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80218de:	687b      	ldr	r3, [r7, #4]
 80218e0:	681b      	ldr	r3, [r3, #0]
 80218e2:	685b      	ldr	r3, [r3, #4]
 80218e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80218e8:	687b      	ldr	r3, [r7, #4]
 80218ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80218ec:	687b      	ldr	r3, [r7, #4]
 80218ee:	681b      	ldr	r3, [r3, #0]
 80218f0:	430a      	orrs	r2, r1
 80218f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80218f4:	687b      	ldr	r3, [r7, #4]
 80218f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80218f8:	f003 0302 	and.w	r3, r3, #2
 80218fc:	2b00      	cmp	r3, #0
 80218fe:	d00a      	beq.n	8021916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8021900:	687b      	ldr	r3, [r7, #4]
 8021902:	681b      	ldr	r3, [r3, #0]
 8021904:	685b      	ldr	r3, [r3, #4]
 8021906:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 802190a:	687b      	ldr	r3, [r7, #4]
 802190c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802190e:	687b      	ldr	r3, [r7, #4]
 8021910:	681b      	ldr	r3, [r3, #0]
 8021912:	430a      	orrs	r2, r1
 8021914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8021916:	687b      	ldr	r3, [r7, #4]
 8021918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802191a:	f003 0304 	and.w	r3, r3, #4
 802191e:	2b00      	cmp	r3, #0
 8021920:	d00a      	beq.n	8021938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8021922:	687b      	ldr	r3, [r7, #4]
 8021924:	681b      	ldr	r3, [r3, #0]
 8021926:	685b      	ldr	r3, [r3, #4]
 8021928:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 802192c:	687b      	ldr	r3, [r7, #4]
 802192e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8021930:	687b      	ldr	r3, [r7, #4]
 8021932:	681b      	ldr	r3, [r3, #0]
 8021934:	430a      	orrs	r2, r1
 8021936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8021938:	687b      	ldr	r3, [r7, #4]
 802193a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802193c:	f003 0310 	and.w	r3, r3, #16
 8021940:	2b00      	cmp	r3, #0
 8021942:	d00a      	beq.n	802195a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8021944:	687b      	ldr	r3, [r7, #4]
 8021946:	681b      	ldr	r3, [r3, #0]
 8021948:	689b      	ldr	r3, [r3, #8]
 802194a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 802194e:	687b      	ldr	r3, [r7, #4]
 8021950:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8021952:	687b      	ldr	r3, [r7, #4]
 8021954:	681b      	ldr	r3, [r3, #0]
 8021956:	430a      	orrs	r2, r1
 8021958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 802195a:	687b      	ldr	r3, [r7, #4]
 802195c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802195e:	f003 0320 	and.w	r3, r3, #32
 8021962:	2b00      	cmp	r3, #0
 8021964:	d00a      	beq.n	802197c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8021966:	687b      	ldr	r3, [r7, #4]
 8021968:	681b      	ldr	r3, [r3, #0]
 802196a:	689b      	ldr	r3, [r3, #8]
 802196c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8021970:	687b      	ldr	r3, [r7, #4]
 8021972:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8021974:	687b      	ldr	r3, [r7, #4]
 8021976:	681b      	ldr	r3, [r3, #0]
 8021978:	430a      	orrs	r2, r1
 802197a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 802197c:	687b      	ldr	r3, [r7, #4]
 802197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021984:	2b00      	cmp	r3, #0
 8021986:	d01a      	beq.n	80219be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8021988:	687b      	ldr	r3, [r7, #4]
 802198a:	681b      	ldr	r3, [r3, #0]
 802198c:	685b      	ldr	r3, [r3, #4]
 802198e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8021992:	687b      	ldr	r3, [r7, #4]
 8021994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8021996:	687b      	ldr	r3, [r7, #4]
 8021998:	681b      	ldr	r3, [r3, #0]
 802199a:	430a      	orrs	r2, r1
 802199c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802199e:	687b      	ldr	r3, [r7, #4]
 80219a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80219a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80219a6:	d10a      	bne.n	80219be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80219a8:	687b      	ldr	r3, [r7, #4]
 80219aa:	681b      	ldr	r3, [r3, #0]
 80219ac:	685b      	ldr	r3, [r3, #4]
 80219ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80219b2:	687b      	ldr	r3, [r7, #4]
 80219b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80219b6:	687b      	ldr	r3, [r7, #4]
 80219b8:	681b      	ldr	r3, [r3, #0]
 80219ba:	430a      	orrs	r2, r1
 80219bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80219be:	687b      	ldr	r3, [r7, #4]
 80219c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80219c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80219c6:	2b00      	cmp	r3, #0
 80219c8:	d00a      	beq.n	80219e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80219ca:	687b      	ldr	r3, [r7, #4]
 80219cc:	681b      	ldr	r3, [r3, #0]
 80219ce:	685b      	ldr	r3, [r3, #4]
 80219d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80219d4:	687b      	ldr	r3, [r7, #4]
 80219d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80219d8:	687b      	ldr	r3, [r7, #4]
 80219da:	681b      	ldr	r3, [r3, #0]
 80219dc:	430a      	orrs	r2, r1
 80219de:	605a      	str	r2, [r3, #4]
  }
}
 80219e0:	bf00      	nop
 80219e2:	370c      	adds	r7, #12
 80219e4:	46bd      	mov	sp, r7
 80219e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219ea:	4770      	bx	lr

080219ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80219ec:	b580      	push	{r7, lr}
 80219ee:	b098      	sub	sp, #96	@ 0x60
 80219f0:	af02      	add	r7, sp, #8
 80219f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80219f4:	687b      	ldr	r3, [r7, #4]
 80219f6:	2200      	movs	r2, #0
 80219f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80219fc:	f7f8 fb94 	bl	801a128 <HAL_GetTick>
 8021a00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8021a02:	687b      	ldr	r3, [r7, #4]
 8021a04:	681b      	ldr	r3, [r3, #0]
 8021a06:	681b      	ldr	r3, [r3, #0]
 8021a08:	f003 0308 	and.w	r3, r3, #8
 8021a0c:	2b08      	cmp	r3, #8
 8021a0e:	d12f      	bne.n	8021a70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8021a10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8021a14:	9300      	str	r3, [sp, #0]
 8021a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021a18:	2200      	movs	r2, #0
 8021a1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8021a1e:	6878      	ldr	r0, [r7, #4]
 8021a20:	f000 f88e 	bl	8021b40 <UART_WaitOnFlagUntilTimeout>
 8021a24:	4603      	mov	r3, r0
 8021a26:	2b00      	cmp	r3, #0
 8021a28:	d022      	beq.n	8021a70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8021a2a:	687b      	ldr	r3, [r7, #4]
 8021a2c:	681b      	ldr	r3, [r3, #0]
 8021a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021a32:	e853 3f00 	ldrex	r3, [r3]
 8021a36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8021a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8021a3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8021a40:	687b      	ldr	r3, [r7, #4]
 8021a42:	681b      	ldr	r3, [r3, #0]
 8021a44:	461a      	mov	r2, r3
 8021a46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8021a4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021a4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8021a4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8021a50:	e841 2300 	strex	r3, r2, [r1]
 8021a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8021a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021a58:	2b00      	cmp	r3, #0
 8021a5a:	d1e6      	bne.n	8021a2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8021a5c:	687b      	ldr	r3, [r7, #4]
 8021a5e:	2220      	movs	r2, #32
 8021a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8021a64:	687b      	ldr	r3, [r7, #4]
 8021a66:	2200      	movs	r2, #0
 8021a68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8021a6c:	2303      	movs	r3, #3
 8021a6e:	e063      	b.n	8021b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8021a70:	687b      	ldr	r3, [r7, #4]
 8021a72:	681b      	ldr	r3, [r3, #0]
 8021a74:	681b      	ldr	r3, [r3, #0]
 8021a76:	f003 0304 	and.w	r3, r3, #4
 8021a7a:	2b04      	cmp	r3, #4
 8021a7c:	d149      	bne.n	8021b12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8021a7e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8021a82:	9300      	str	r3, [sp, #0]
 8021a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021a86:	2200      	movs	r2, #0
 8021a88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8021a8c:	6878      	ldr	r0, [r7, #4]
 8021a8e:	f000 f857 	bl	8021b40 <UART_WaitOnFlagUntilTimeout>
 8021a92:	4603      	mov	r3, r0
 8021a94:	2b00      	cmp	r3, #0
 8021a96:	d03c      	beq.n	8021b12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8021a98:	687b      	ldr	r3, [r7, #4]
 8021a9a:	681b      	ldr	r3, [r3, #0]
 8021a9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021aa0:	e853 3f00 	ldrex	r3, [r3]
 8021aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8021aa6:	6a3b      	ldr	r3, [r7, #32]
 8021aa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8021aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8021aae:	687b      	ldr	r3, [r7, #4]
 8021ab0:	681b      	ldr	r3, [r3, #0]
 8021ab2:	461a      	mov	r2, r3
 8021ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021ab6:	633b      	str	r3, [r7, #48]	@ 0x30
 8021ab8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021aba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8021abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021abe:	e841 2300 	strex	r3, r2, [r1]
 8021ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8021ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ac6:	2b00      	cmp	r3, #0
 8021ac8:	d1e6      	bne.n	8021a98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021aca:	687b      	ldr	r3, [r7, #4]
 8021acc:	681b      	ldr	r3, [r3, #0]
 8021ace:	3308      	adds	r3, #8
 8021ad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021ad2:	693b      	ldr	r3, [r7, #16]
 8021ad4:	e853 3f00 	ldrex	r3, [r3]
 8021ad8:	60fb      	str	r3, [r7, #12]
   return(result);
 8021ada:	68fb      	ldr	r3, [r7, #12]
 8021adc:	f023 0301 	bic.w	r3, r3, #1
 8021ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8021ae2:	687b      	ldr	r3, [r7, #4]
 8021ae4:	681b      	ldr	r3, [r3, #0]
 8021ae6:	3308      	adds	r3, #8
 8021ae8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8021aea:	61fa      	str	r2, [r7, #28]
 8021aec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021aee:	69b9      	ldr	r1, [r7, #24]
 8021af0:	69fa      	ldr	r2, [r7, #28]
 8021af2:	e841 2300 	strex	r3, r2, [r1]
 8021af6:	617b      	str	r3, [r7, #20]
   return(result);
 8021af8:	697b      	ldr	r3, [r7, #20]
 8021afa:	2b00      	cmp	r3, #0
 8021afc:	d1e5      	bne.n	8021aca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8021afe:	687b      	ldr	r3, [r7, #4]
 8021b00:	2220      	movs	r2, #32
 8021b02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8021b06:	687b      	ldr	r3, [r7, #4]
 8021b08:	2200      	movs	r2, #0
 8021b0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8021b0e:	2303      	movs	r3, #3
 8021b10:	e012      	b.n	8021b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8021b12:	687b      	ldr	r3, [r7, #4]
 8021b14:	2220      	movs	r2, #32
 8021b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8021b1a:	687b      	ldr	r3, [r7, #4]
 8021b1c:	2220      	movs	r2, #32
 8021b1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021b22:	687b      	ldr	r3, [r7, #4]
 8021b24:	2200      	movs	r2, #0
 8021b26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8021b28:	687b      	ldr	r3, [r7, #4]
 8021b2a:	2200      	movs	r2, #0
 8021b2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8021b2e:	687b      	ldr	r3, [r7, #4]
 8021b30:	2200      	movs	r2, #0
 8021b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8021b36:	2300      	movs	r3, #0
}
 8021b38:	4618      	mov	r0, r3
 8021b3a:	3758      	adds	r7, #88	@ 0x58
 8021b3c:	46bd      	mov	sp, r7
 8021b3e:	bd80      	pop	{r7, pc}

08021b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8021b40:	b580      	push	{r7, lr}
 8021b42:	b084      	sub	sp, #16
 8021b44:	af00      	add	r7, sp, #0
 8021b46:	60f8      	str	r0, [r7, #12]
 8021b48:	60b9      	str	r1, [r7, #8]
 8021b4a:	603b      	str	r3, [r7, #0]
 8021b4c:	4613      	mov	r3, r2
 8021b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021b50:	e04f      	b.n	8021bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8021b52:	69bb      	ldr	r3, [r7, #24]
 8021b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021b58:	d04b      	beq.n	8021bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8021b5a:	f7f8 fae5 	bl	801a128 <HAL_GetTick>
 8021b5e:	4602      	mov	r2, r0
 8021b60:	683b      	ldr	r3, [r7, #0]
 8021b62:	1ad3      	subs	r3, r2, r3
 8021b64:	69ba      	ldr	r2, [r7, #24]
 8021b66:	429a      	cmp	r2, r3
 8021b68:	d302      	bcc.n	8021b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8021b6a:	69bb      	ldr	r3, [r7, #24]
 8021b6c:	2b00      	cmp	r3, #0
 8021b6e:	d101      	bne.n	8021b74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8021b70:	2303      	movs	r3, #3
 8021b72:	e04e      	b.n	8021c12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8021b74:	68fb      	ldr	r3, [r7, #12]
 8021b76:	681b      	ldr	r3, [r3, #0]
 8021b78:	681b      	ldr	r3, [r3, #0]
 8021b7a:	f003 0304 	and.w	r3, r3, #4
 8021b7e:	2b00      	cmp	r3, #0
 8021b80:	d037      	beq.n	8021bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8021b82:	68bb      	ldr	r3, [r7, #8]
 8021b84:	2b80      	cmp	r3, #128	@ 0x80
 8021b86:	d034      	beq.n	8021bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8021b88:	68bb      	ldr	r3, [r7, #8]
 8021b8a:	2b40      	cmp	r3, #64	@ 0x40
 8021b8c:	d031      	beq.n	8021bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8021b8e:	68fb      	ldr	r3, [r7, #12]
 8021b90:	681b      	ldr	r3, [r3, #0]
 8021b92:	69db      	ldr	r3, [r3, #28]
 8021b94:	f003 0308 	and.w	r3, r3, #8
 8021b98:	2b08      	cmp	r3, #8
 8021b9a:	d110      	bne.n	8021bbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8021b9c:	68fb      	ldr	r3, [r7, #12]
 8021b9e:	681b      	ldr	r3, [r3, #0]
 8021ba0:	2208      	movs	r2, #8
 8021ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8021ba4:	68f8      	ldr	r0, [r7, #12]
 8021ba6:	f000 f839 	bl	8021c1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8021baa:	68fb      	ldr	r3, [r7, #12]
 8021bac:	2208      	movs	r2, #8
 8021bae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8021bb2:	68fb      	ldr	r3, [r7, #12]
 8021bb4:	2200      	movs	r2, #0
 8021bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8021bba:	2301      	movs	r3, #1
 8021bbc:	e029      	b.n	8021c12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8021bbe:	68fb      	ldr	r3, [r7, #12]
 8021bc0:	681b      	ldr	r3, [r3, #0]
 8021bc2:	69db      	ldr	r3, [r3, #28]
 8021bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8021bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8021bcc:	d111      	bne.n	8021bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8021bce:	68fb      	ldr	r3, [r7, #12]
 8021bd0:	681b      	ldr	r3, [r3, #0]
 8021bd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8021bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8021bd8:	68f8      	ldr	r0, [r7, #12]
 8021bda:	f000 f81f 	bl	8021c1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8021bde:	68fb      	ldr	r3, [r7, #12]
 8021be0:	2220      	movs	r2, #32
 8021be2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8021be6:	68fb      	ldr	r3, [r7, #12]
 8021be8:	2200      	movs	r2, #0
 8021bea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8021bee:	2303      	movs	r3, #3
 8021bf0:	e00f      	b.n	8021c12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021bf2:	68fb      	ldr	r3, [r7, #12]
 8021bf4:	681b      	ldr	r3, [r3, #0]
 8021bf6:	69da      	ldr	r2, [r3, #28]
 8021bf8:	68bb      	ldr	r3, [r7, #8]
 8021bfa:	4013      	ands	r3, r2
 8021bfc:	68ba      	ldr	r2, [r7, #8]
 8021bfe:	429a      	cmp	r2, r3
 8021c00:	bf0c      	ite	eq
 8021c02:	2301      	moveq	r3, #1
 8021c04:	2300      	movne	r3, #0
 8021c06:	b2db      	uxtb	r3, r3
 8021c08:	461a      	mov	r2, r3
 8021c0a:	79fb      	ldrb	r3, [r7, #7]
 8021c0c:	429a      	cmp	r2, r3
 8021c0e:	d0a0      	beq.n	8021b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8021c10:	2300      	movs	r3, #0
}
 8021c12:	4618      	mov	r0, r3
 8021c14:	3710      	adds	r7, #16
 8021c16:	46bd      	mov	sp, r7
 8021c18:	bd80      	pop	{r7, pc}
	...

08021c1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8021c1c:	b480      	push	{r7}
 8021c1e:	b095      	sub	sp, #84	@ 0x54
 8021c20:	af00      	add	r7, sp, #0
 8021c22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8021c24:	687b      	ldr	r3, [r7, #4]
 8021c26:	681b      	ldr	r3, [r3, #0]
 8021c28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021c2c:	e853 3f00 	ldrex	r3, [r3]
 8021c30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8021c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021c34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8021c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8021c3a:	687b      	ldr	r3, [r7, #4]
 8021c3c:	681b      	ldr	r3, [r3, #0]
 8021c3e:	461a      	mov	r2, r3
 8021c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021c42:	643b      	str	r3, [r7, #64]	@ 0x40
 8021c44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021c46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8021c48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8021c4a:	e841 2300 	strex	r3, r2, [r1]
 8021c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8021c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021c52:	2b00      	cmp	r3, #0
 8021c54:	d1e6      	bne.n	8021c24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8021c56:	687b      	ldr	r3, [r7, #4]
 8021c58:	681b      	ldr	r3, [r3, #0]
 8021c5a:	3308      	adds	r3, #8
 8021c5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021c5e:	6a3b      	ldr	r3, [r7, #32]
 8021c60:	e853 3f00 	ldrex	r3, [r3]
 8021c64:	61fb      	str	r3, [r7, #28]
   return(result);
 8021c66:	69fa      	ldr	r2, [r7, #28]
 8021c68:	4b1e      	ldr	r3, [pc, #120]	@ (8021ce4 <UART_EndRxTransfer+0xc8>)
 8021c6a:	4013      	ands	r3, r2
 8021c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8021c6e:	687b      	ldr	r3, [r7, #4]
 8021c70:	681b      	ldr	r3, [r3, #0]
 8021c72:	3308      	adds	r3, #8
 8021c74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8021c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8021c78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021c7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8021c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021c7e:	e841 2300 	strex	r3, r2, [r1]
 8021c82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8021c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021c86:	2b00      	cmp	r3, #0
 8021c88:	d1e5      	bne.n	8021c56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8021c8a:	687b      	ldr	r3, [r7, #4]
 8021c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8021c8e:	2b01      	cmp	r3, #1
 8021c90:	d118      	bne.n	8021cc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021c92:	687b      	ldr	r3, [r7, #4]
 8021c94:	681b      	ldr	r3, [r3, #0]
 8021c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021c98:	68fb      	ldr	r3, [r7, #12]
 8021c9a:	e853 3f00 	ldrex	r3, [r3]
 8021c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8021ca0:	68bb      	ldr	r3, [r7, #8]
 8021ca2:	f023 0310 	bic.w	r3, r3, #16
 8021ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8021ca8:	687b      	ldr	r3, [r7, #4]
 8021caa:	681b      	ldr	r3, [r3, #0]
 8021cac:	461a      	mov	r2, r3
 8021cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021cb0:	61bb      	str	r3, [r7, #24]
 8021cb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021cb4:	6979      	ldr	r1, [r7, #20]
 8021cb6:	69ba      	ldr	r2, [r7, #24]
 8021cb8:	e841 2300 	strex	r3, r2, [r1]
 8021cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8021cbe:	693b      	ldr	r3, [r7, #16]
 8021cc0:	2b00      	cmp	r3, #0
 8021cc2:	d1e6      	bne.n	8021c92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8021cc4:	687b      	ldr	r3, [r7, #4]
 8021cc6:	2220      	movs	r2, #32
 8021cc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021ccc:	687b      	ldr	r3, [r7, #4]
 8021cce:	2200      	movs	r2, #0
 8021cd0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8021cd2:	687b      	ldr	r3, [r7, #4]
 8021cd4:	2200      	movs	r2, #0
 8021cd6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8021cd8:	bf00      	nop
 8021cda:	3754      	adds	r7, #84	@ 0x54
 8021cdc:	46bd      	mov	sp, r7
 8021cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ce2:	4770      	bx	lr
 8021ce4:	effffffe 	.word	0xeffffffe

08021ce8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8021ce8:	b480      	push	{r7}
 8021cea:	b085      	sub	sp, #20
 8021cec:	af00      	add	r7, sp, #0
 8021cee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021cf0:	687b      	ldr	r3, [r7, #4]
 8021cf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8021cf6:	2b01      	cmp	r3, #1
 8021cf8:	d101      	bne.n	8021cfe <HAL_UARTEx_DisableFifoMode+0x16>
 8021cfa:	2302      	movs	r3, #2
 8021cfc:	e027      	b.n	8021d4e <HAL_UARTEx_DisableFifoMode+0x66>
 8021cfe:	687b      	ldr	r3, [r7, #4]
 8021d00:	2201      	movs	r2, #1
 8021d02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8021d06:	687b      	ldr	r3, [r7, #4]
 8021d08:	2224      	movs	r2, #36	@ 0x24
 8021d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8021d0e:	687b      	ldr	r3, [r7, #4]
 8021d10:	681b      	ldr	r3, [r3, #0]
 8021d12:	681b      	ldr	r3, [r3, #0]
 8021d14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8021d16:	687b      	ldr	r3, [r7, #4]
 8021d18:	681b      	ldr	r3, [r3, #0]
 8021d1a:	681a      	ldr	r2, [r3, #0]
 8021d1c:	687b      	ldr	r3, [r7, #4]
 8021d1e:	681b      	ldr	r3, [r3, #0]
 8021d20:	f022 0201 	bic.w	r2, r2, #1
 8021d24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8021d26:	68fb      	ldr	r3, [r7, #12]
 8021d28:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8021d2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8021d2e:	687b      	ldr	r3, [r7, #4]
 8021d30:	2200      	movs	r2, #0
 8021d32:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021d34:	687b      	ldr	r3, [r7, #4]
 8021d36:	681b      	ldr	r3, [r3, #0]
 8021d38:	68fa      	ldr	r2, [r7, #12]
 8021d3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8021d3c:	687b      	ldr	r3, [r7, #4]
 8021d3e:	2220      	movs	r2, #32
 8021d40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021d44:	687b      	ldr	r3, [r7, #4]
 8021d46:	2200      	movs	r2, #0
 8021d48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8021d4c:	2300      	movs	r3, #0
}
 8021d4e:	4618      	mov	r0, r3
 8021d50:	3714      	adds	r7, #20
 8021d52:	46bd      	mov	sp, r7
 8021d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d58:	4770      	bx	lr

08021d5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8021d5a:	b580      	push	{r7, lr}
 8021d5c:	b084      	sub	sp, #16
 8021d5e:	af00      	add	r7, sp, #0
 8021d60:	6078      	str	r0, [r7, #4]
 8021d62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021d64:	687b      	ldr	r3, [r7, #4]
 8021d66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8021d6a:	2b01      	cmp	r3, #1
 8021d6c:	d101      	bne.n	8021d72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8021d6e:	2302      	movs	r3, #2
 8021d70:	e02d      	b.n	8021dce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8021d72:	687b      	ldr	r3, [r7, #4]
 8021d74:	2201      	movs	r2, #1
 8021d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8021d7a:	687b      	ldr	r3, [r7, #4]
 8021d7c:	2224      	movs	r2, #36	@ 0x24
 8021d7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8021d82:	687b      	ldr	r3, [r7, #4]
 8021d84:	681b      	ldr	r3, [r3, #0]
 8021d86:	681b      	ldr	r3, [r3, #0]
 8021d88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8021d8a:	687b      	ldr	r3, [r7, #4]
 8021d8c:	681b      	ldr	r3, [r3, #0]
 8021d8e:	681a      	ldr	r2, [r3, #0]
 8021d90:	687b      	ldr	r3, [r7, #4]
 8021d92:	681b      	ldr	r3, [r3, #0]
 8021d94:	f022 0201 	bic.w	r2, r2, #1
 8021d98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8021d9a:	687b      	ldr	r3, [r7, #4]
 8021d9c:	681b      	ldr	r3, [r3, #0]
 8021d9e:	689b      	ldr	r3, [r3, #8]
 8021da0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8021da4:	687b      	ldr	r3, [r7, #4]
 8021da6:	681b      	ldr	r3, [r3, #0]
 8021da8:	683a      	ldr	r2, [r7, #0]
 8021daa:	430a      	orrs	r2, r1
 8021dac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8021dae:	6878      	ldr	r0, [r7, #4]
 8021db0:	f000 f850 	bl	8021e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021db4:	687b      	ldr	r3, [r7, #4]
 8021db6:	681b      	ldr	r3, [r3, #0]
 8021db8:	68fa      	ldr	r2, [r7, #12]
 8021dba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8021dbc:	687b      	ldr	r3, [r7, #4]
 8021dbe:	2220      	movs	r2, #32
 8021dc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021dc4:	687b      	ldr	r3, [r7, #4]
 8021dc6:	2200      	movs	r2, #0
 8021dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8021dcc:	2300      	movs	r3, #0
}
 8021dce:	4618      	mov	r0, r3
 8021dd0:	3710      	adds	r7, #16
 8021dd2:	46bd      	mov	sp, r7
 8021dd4:	bd80      	pop	{r7, pc}

08021dd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8021dd6:	b580      	push	{r7, lr}
 8021dd8:	b084      	sub	sp, #16
 8021dda:	af00      	add	r7, sp, #0
 8021ddc:	6078      	str	r0, [r7, #4]
 8021dde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021de0:	687b      	ldr	r3, [r7, #4]
 8021de2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8021de6:	2b01      	cmp	r3, #1
 8021de8:	d101      	bne.n	8021dee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8021dea:	2302      	movs	r3, #2
 8021dec:	e02d      	b.n	8021e4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8021dee:	687b      	ldr	r3, [r7, #4]
 8021df0:	2201      	movs	r2, #1
 8021df2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8021df6:	687b      	ldr	r3, [r7, #4]
 8021df8:	2224      	movs	r2, #36	@ 0x24
 8021dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8021dfe:	687b      	ldr	r3, [r7, #4]
 8021e00:	681b      	ldr	r3, [r3, #0]
 8021e02:	681b      	ldr	r3, [r3, #0]
 8021e04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8021e06:	687b      	ldr	r3, [r7, #4]
 8021e08:	681b      	ldr	r3, [r3, #0]
 8021e0a:	681a      	ldr	r2, [r3, #0]
 8021e0c:	687b      	ldr	r3, [r7, #4]
 8021e0e:	681b      	ldr	r3, [r3, #0]
 8021e10:	f022 0201 	bic.w	r2, r2, #1
 8021e14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8021e16:	687b      	ldr	r3, [r7, #4]
 8021e18:	681b      	ldr	r3, [r3, #0]
 8021e1a:	689b      	ldr	r3, [r3, #8]
 8021e1c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8021e20:	687b      	ldr	r3, [r7, #4]
 8021e22:	681b      	ldr	r3, [r3, #0]
 8021e24:	683a      	ldr	r2, [r7, #0]
 8021e26:	430a      	orrs	r2, r1
 8021e28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8021e2a:	6878      	ldr	r0, [r7, #4]
 8021e2c:	f000 f812 	bl	8021e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021e30:	687b      	ldr	r3, [r7, #4]
 8021e32:	681b      	ldr	r3, [r3, #0]
 8021e34:	68fa      	ldr	r2, [r7, #12]
 8021e36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8021e38:	687b      	ldr	r3, [r7, #4]
 8021e3a:	2220      	movs	r2, #32
 8021e3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021e40:	687b      	ldr	r3, [r7, #4]
 8021e42:	2200      	movs	r2, #0
 8021e44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8021e48:	2300      	movs	r3, #0
}
 8021e4a:	4618      	mov	r0, r3
 8021e4c:	3710      	adds	r7, #16
 8021e4e:	46bd      	mov	sp, r7
 8021e50:	bd80      	pop	{r7, pc}
	...

08021e54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8021e54:	b480      	push	{r7}
 8021e56:	b085      	sub	sp, #20
 8021e58:	af00      	add	r7, sp, #0
 8021e5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8021e5c:	687b      	ldr	r3, [r7, #4]
 8021e5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8021e60:	2b00      	cmp	r3, #0
 8021e62:	d108      	bne.n	8021e76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8021e64:	687b      	ldr	r3, [r7, #4]
 8021e66:	2201      	movs	r2, #1
 8021e68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8021e6c:	687b      	ldr	r3, [r7, #4]
 8021e6e:	2201      	movs	r2, #1
 8021e70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8021e74:	e031      	b.n	8021eda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8021e76:	2310      	movs	r3, #16
 8021e78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8021e7a:	2310      	movs	r3, #16
 8021e7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8021e7e:	687b      	ldr	r3, [r7, #4]
 8021e80:	681b      	ldr	r3, [r3, #0]
 8021e82:	689b      	ldr	r3, [r3, #8]
 8021e84:	0e5b      	lsrs	r3, r3, #25
 8021e86:	b2db      	uxtb	r3, r3
 8021e88:	f003 0307 	and.w	r3, r3, #7
 8021e8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8021e8e:	687b      	ldr	r3, [r7, #4]
 8021e90:	681b      	ldr	r3, [r3, #0]
 8021e92:	689b      	ldr	r3, [r3, #8]
 8021e94:	0f5b      	lsrs	r3, r3, #29
 8021e96:	b2db      	uxtb	r3, r3
 8021e98:	f003 0307 	and.w	r3, r3, #7
 8021e9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8021e9e:	7bbb      	ldrb	r3, [r7, #14]
 8021ea0:	7b3a      	ldrb	r2, [r7, #12]
 8021ea2:	4911      	ldr	r1, [pc, #68]	@ (8021ee8 <UARTEx_SetNbDataToProcess+0x94>)
 8021ea4:	5c8a      	ldrb	r2, [r1, r2]
 8021ea6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8021eaa:	7b3a      	ldrb	r2, [r7, #12]
 8021eac:	490f      	ldr	r1, [pc, #60]	@ (8021eec <UARTEx_SetNbDataToProcess+0x98>)
 8021eae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8021eb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8021eb4:	b29a      	uxth	r2, r3
 8021eb6:	687b      	ldr	r3, [r7, #4]
 8021eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8021ebc:	7bfb      	ldrb	r3, [r7, #15]
 8021ebe:	7b7a      	ldrb	r2, [r7, #13]
 8021ec0:	4909      	ldr	r1, [pc, #36]	@ (8021ee8 <UARTEx_SetNbDataToProcess+0x94>)
 8021ec2:	5c8a      	ldrb	r2, [r1, r2]
 8021ec4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8021ec8:	7b7a      	ldrb	r2, [r7, #13]
 8021eca:	4908      	ldr	r1, [pc, #32]	@ (8021eec <UARTEx_SetNbDataToProcess+0x98>)
 8021ecc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8021ece:	fb93 f3f2 	sdiv	r3, r3, r2
 8021ed2:	b29a      	uxth	r2, r3
 8021ed4:	687b      	ldr	r3, [r7, #4]
 8021ed6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8021eda:	bf00      	nop
 8021edc:	3714      	adds	r7, #20
 8021ede:	46bd      	mov	sp, r7
 8021ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ee4:	4770      	bx	lr
 8021ee6:	bf00      	nop
 8021ee8:	0802791c 	.word	0x0802791c
 8021eec:	08027924 	.word	0x08027924

08021ef0 <prvInitialiseLogging>:

extern NetworkInterface_t xInterfaces[ 1 ];
/*-----------------------------------------------------------*/

static BaseType_t prvInitialiseLogging( void )
{
 8021ef0:	b580      	push	{r7, lr}
 8021ef2:	b082      	sub	sp, #8
 8021ef4:	af00      	add	r7, sp, #0
size_t xSize;
static BaseType_t xLoggingInitialised = pdFALSE;

	if( xLoggingInitialised == pdFALSE )
 8021ef6:	4b15      	ldr	r3, [pc, #84]	@ (8021f4c <prvInitialiseLogging+0x5c>)
 8021ef8:	681b      	ldr	r3, [r3, #0]
 8021efa:	2b00      	cmp	r3, #0
 8021efc:	d120      	bne.n	8021f40 <prvInitialiseLogging+0x50>
	{
		/* Don't attempt to log unless the scheduler is running. */
		if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8021efe:	f7e3 f9dd 	bl	80052bc <xTaskGetSchedulerState>
 8021f02:	4603      	mov	r3, r0
 8021f04:	2b02      	cmp	r3, #2
 8021f06:	d11b      	bne.n	8021f40 <prvInitialiseLogging+0x50>
		{
			/* Create a stream buffer large enough for the maximum number of
			bytes + 1. */ /*_RB_ Why is the size of pxStreamBuffer->ucArray
			subtracted here? */
			xSize = sizeof( StreamBuffer_t ) - sizeof( pxStreamBuffer->ucArray ) + logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8021f08:	f640 73b5 	movw	r3, #4021	@ 0xfb5
 8021f0c:	607b      	str	r3, [r7, #4]
			pxStreamBuffer = pvPortMalloc( xSize );
 8021f0e:	6878      	ldr	r0, [r7, #4]
 8021f10:	f7e4 fb38 	bl	8006584 <pvPortMalloc>
 8021f14:	4603      	mov	r3, r0
 8021f16:	4a0e      	ldr	r2, [pc, #56]	@ (8021f50 <prvInitialiseLogging+0x60>)
 8021f18:	6013      	str	r3, [r2, #0]

			if( pxStreamBuffer != NULL )
 8021f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8021f50 <prvInitialiseLogging+0x60>)
 8021f1c:	681b      	ldr	r3, [r3, #0]
 8021f1e:	2b00      	cmp	r3, #0
 8021f20:	d00e      	beq.n	8021f40 <prvInitialiseLogging+0x50>
			{
				memset( pxStreamBuffer, '\0', xSize );
 8021f22:	4b0b      	ldr	r3, [pc, #44]	@ (8021f50 <prvInitialiseLogging+0x60>)
 8021f24:	681b      	ldr	r3, [r3, #0]
 8021f26:	687a      	ldr	r2, [r7, #4]
 8021f28:	2100      	movs	r1, #0
 8021f2a:	4618      	mov	r0, r3
 8021f2c:	f000 fc35 	bl	802279a <memset>
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8021f30:	4b07      	ldr	r3, [pc, #28]	@ (8021f50 <prvInitialiseLogging+0x60>)
 8021f32:	681b      	ldr	r3, [r3, #0]
 8021f34:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 8021f38:	611a      	str	r2, [r3, #16]

				xLoggingInitialised = pdTRUE;
 8021f3a:	4b04      	ldr	r3, [pc, #16]	@ (8021f4c <prvInitialiseLogging+0x5c>)
 8021f3c:	2201      	movs	r2, #1
 8021f3e:	601a      	str	r2, [r3, #0]
			}
		}
	}

	return xLoggingInitialised;
 8021f40:	4b02      	ldr	r3, [pc, #8]	@ (8021f4c <prvInitialiseLogging+0x5c>)
 8021f42:	681b      	ldr	r3, [r3, #0]
}
 8021f44:	4618      	mov	r0, r3
 8021f46:	3708      	adds	r7, #8
 8021f48:	46bd      	mov	sp, r7
 8021f4a:	bd80      	pop	{r7, pc}
 8021f4c:	200025e4 	.word	0x200025e4
 8021f50:	200025d4 	.word	0x200025d4

08021f54 <prvGetMessageFromStreamBuffer>:
/*-----------------------------------------------------------*/

static size_t prvGetMessageFromStreamBuffer( char* pcBuffer, size_t xBufferLength )
{
 8021f54:	b580      	push	{r7, lr}
 8021f56:	b086      	sub	sp, #24
 8021f58:	af02      	add	r7, sp, #8
 8021f5a:	6078      	str	r0, [r7, #4]
 8021f5c:	6039      	str	r1, [r7, #0]
size_t uxLength;
size_t xMessageLength = 0;
 8021f5e:	2300      	movs	r3, #0
 8021f60:	60bb      	str	r3, [r7, #8]

	if( pxStreamBuffer != NULL )
 8021f62:	4b24      	ldr	r3, [pc, #144]	@ (8021ff4 <prvGetMessageFromStreamBuffer+0xa0>)
 8021f64:	681b      	ldr	r3, [r3, #0]
 8021f66:	2b00      	cmp	r3, #0
 8021f68:	d03f      	beq.n	8021fea <prvGetMessageFromStreamBuffer+0x96>
	{
		/* Is there data in the stream buffer? */
		uxLength = uxStreamBufferGetSize( pxStreamBuffer );
 8021f6a:	4b22      	ldr	r3, [pc, #136]	@ (8021ff4 <prvGetMessageFromStreamBuffer+0xa0>)
 8021f6c:	681b      	ldr	r3, [r3, #0]
 8021f6e:	4618      	mov	r0, r3
 8021f70:	f7ee fe19 	bl	8010ba6 <uxStreamBufferGetSize>
 8021f74:	60f8      	str	r0, [r7, #12]
		if( uxLength > sizeof( size_t ) )
 8021f76:	68fb      	ldr	r3, [r7, #12]
 8021f78:	2b04      	cmp	r3, #4
 8021f7a:	d936      	bls.n	8021fea <prvGetMessageFromStreamBuffer+0x96>
		{
			/* Avoid concurrent access to the buffer. */
			vTaskSuspendAll();
 8021f7c:	f7e2 fb80 	bl	8004680 <vTaskSuspendAll>
			{
				/* Every message is stored as a length followed by the string.
				Obtain the length of the data first. */
				uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) &xMessageLength, sizeof( xMessageLength ), pdFALSE );
 8021f80:	4b1c      	ldr	r3, [pc, #112]	@ (8021ff4 <prvGetMessageFromStreamBuffer+0xa0>)
 8021f82:	6818      	ldr	r0, [r3, #0]
 8021f84:	f107 0208 	add.w	r2, r7, #8
 8021f88:	2300      	movs	r3, #0
 8021f8a:	9300      	str	r3, [sp, #0]
 8021f8c:	2304      	movs	r3, #4
 8021f8e:	2100      	movs	r1, #0
 8021f90:	f7ee ff27 	bl	8010de2 <uxStreamBufferGet>

				if( xBufferLength < xMessageLength )
 8021f94:	68bb      	ldr	r3, [r7, #8]
 8021f96:	683a      	ldr	r2, [r7, #0]
 8021f98:	429a      	cmp	r2, r3
 8021f9a:	d216      	bcs.n	8021fca <prvGetMessageFromStreamBuffer+0x76>
				{
					/* The 'pcBuffer' provided by the caller is too small.  Load
					the message first into 'xLogEntry.message', and then copy
					as much as possible to 'pcBuffer'. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 8021f9c:	4b15      	ldr	r3, [pc, #84]	@ (8021ff4 <prvGetMessageFromStreamBuffer+0xa0>)
 8021f9e:	6818      	ldr	r0, [r3, #0]
 8021fa0:	68bb      	ldr	r3, [r7, #8]
 8021fa2:	2200      	movs	r2, #0
 8021fa4:	9200      	str	r2, [sp, #0]
 8021fa6:	4a14      	ldr	r2, [pc, #80]	@ (8021ff8 <prvGetMessageFromStreamBuffer+0xa4>)
 8021fa8:	2100      	movs	r1, #0
 8021faa:	f7ee ff1a 	bl	8010de2 <uxStreamBufferGet>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 8021fae:	683a      	ldr	r2, [r7, #0]
 8021fb0:	4911      	ldr	r1, [pc, #68]	@ (8021ff8 <prvGetMessageFromStreamBuffer+0xa4>)
 8021fb2:	6878      	ldr	r0, [r7, #4]
 8021fb4:	f000 fae4 	bl	8022580 <memcpy>
					xMessageLength = xBufferLength;
 8021fb8:	683b      	ldr	r3, [r7, #0]
 8021fba:	60bb      	str	r3, [r7, #8]

					/* Terminate the string at the very end of the buffer. */
					pcBuffer[ xBufferLength - 1 ] = 0x00;
 8021fbc:	683b      	ldr	r3, [r7, #0]
 8021fbe:	3b01      	subs	r3, #1
 8021fc0:	687a      	ldr	r2, [r7, #4]
 8021fc2:	4413      	add	r3, r2
 8021fc4:	2200      	movs	r2, #0
 8021fc6:	701a      	strb	r2, [r3, #0]
 8021fc8:	e00d      	b.n	8021fe6 <prvGetMessageFromStreamBuffer+0x92>
				}
				else
				{
					/* The 'pcBuffer' provided by the caller is big enough. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 8021fca:	4b0a      	ldr	r3, [pc, #40]	@ (8021ff4 <prvGetMessageFromStreamBuffer+0xa0>)
 8021fcc:	6818      	ldr	r0, [r3, #0]
 8021fce:	68bb      	ldr	r3, [r7, #8]
 8021fd0:	2200      	movs	r2, #0
 8021fd2:	9200      	str	r2, [sp, #0]
 8021fd4:	687a      	ldr	r2, [r7, #4]
 8021fd6:	2100      	movs	r1, #0
 8021fd8:	f7ee ff03 	bl	8010de2 <uxStreamBufferGet>

					/* Terminate the string after the string's last character. */
					pcBuffer[ xMessageLength ] = 0x00;
 8021fdc:	68bb      	ldr	r3, [r7, #8]
 8021fde:	687a      	ldr	r2, [r7, #4]
 8021fe0:	4413      	add	r3, r2
 8021fe2:	2200      	movs	r2, #0
 8021fe4:	701a      	strb	r2, [r3, #0]
				}
			}
			xTaskResumeAll();
 8021fe6:	f7e2 fb59 	bl	800469c <xTaskResumeAll>
		}
	}

	return xMessageLength;
 8021fea:	68bb      	ldr	r3, [r7, #8]
}
 8021fec:	4618      	mov	r0, r3
 8021fee:	3710      	adds	r7, #16
 8021ff0:	46bd      	mov	sp, r7
 8021ff2:	bd80      	pop	{r7, pc}
 8021ff4:	200025d4 	.word	0x200025d4
 8021ff8:	2000250c 	.word	0x2000250c

08021ffc <prvBufferFormattedString>:
/*-----------------------------------------------------------*/

static size_t prvBufferFormattedString( const char *pcFormatString, va_list xArgs )
{
 8021ffc:	b580      	push	{r7, lr}
 8021ffe:	b08e      	sub	sp, #56	@ 0x38
 8022000:	af04      	add	r7, sp, #16
 8022002:	6078      	str	r0, [r7, #4]
 8022004:	6039      	str	r1, [r7, #0]
size_t xLength, xSpace;
uint64_t ullCurrentTime;
uint32_t ulSeconds, ulMilliSeconds, ulMicroSeconds;

	/* Sanity check. */
	configASSERT( pxStreamBuffer );
 8022006:	4b49      	ldr	r3, [pc, #292]	@ (802212c <prvBufferFormattedString+0x130>)
 8022008:	681b      	ldr	r3, [r3, #0]
 802200a:	2b00      	cmp	r3, #0
 802200c:	d104      	bne.n	8022018 <prvBufferFormattedString+0x1c>
 802200e:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8022012:	4847      	ldr	r0, [pc, #284]	@ (8022130 <prvBufferFormattedString+0x134>)
 8022014:	f7df fca0 	bl	8001958 <vAssertCalled>

	vTaskSuspendAll();
 8022018:	f7e2 fb32 	bl	8004680 <vTaskSuspendAll>
	{
		ullCurrentTime = ullGetHighResolutionTime();
 802201c:	f000 fa2a 	bl	8022474 <ullGetHighResolutionTime>
 8022020:	e9c7 0108 	strd	r0, r1, [r7, #32]
		ulSeconds = ( uint32_t ) ( ullCurrentTime / 1000000ull );
 8022024:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022028:	4a42      	ldr	r2, [pc, #264]	@ (8022134 <prvBufferFormattedString+0x138>)
 802202a:	f04f 0300 	mov.w	r3, #0
 802202e:	f7de f9bf 	bl	80003b0 <__aeabi_uldivmod>
 8022032:	4602      	mov	r2, r0
 8022034:	460b      	mov	r3, r1
 8022036:	4613      	mov	r3, r2
 8022038:	61fb      	str	r3, [r7, #28]
		ullCurrentTime = ullCurrentTime % 1000000ull;
 802203a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802203e:	4a3d      	ldr	r2, [pc, #244]	@ (8022134 <prvBufferFormattedString+0x138>)
 8022040:	f04f 0300 	mov.w	r3, #0
 8022044:	f7de f9b4 	bl	80003b0 <__aeabi_uldivmod>
 8022048:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 802204c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022050:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8022054:	f04f 0300 	mov.w	r3, #0
 8022058:	f7de f9aa 	bl	80003b0 <__aeabi_uldivmod>
 802205c:	4602      	mov	r2, r0
 802205e:	460b      	mov	r3, r1
 8022060:	4613      	mov	r3, r2
 8022062:	61bb      	str	r3, [r7, #24]
		ulMicroSeconds = ( uint32_t ) ( ullCurrentTime % 1000ull );
 8022064:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022068:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802206c:	f04f 0300 	mov.w	r3, #0
 8022070:	f7de f99e 	bl	80003b0 <__aeabi_uldivmod>
 8022074:	4613      	mov	r3, r2
 8022076:	617b      	str	r3, [r7, #20]

		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 8022078:	2000      	movs	r0, #0
 802207a:	f7e2 fc23 	bl	80048c4 <pcTaskGetName>
 802207e:	4603      	mov	r3, r0
 8022080:	9302      	str	r3, [sp, #8]
 8022082:	697b      	ldr	r3, [r7, #20]
 8022084:	9301      	str	r3, [sp, #4]
 8022086:	69bb      	ldr	r3, [r7, #24]
 8022088:	9300      	str	r3, [sp, #0]
 802208a:	69fb      	ldr	r3, [r7, #28]
 802208c:	4a2a      	ldr	r2, [pc, #168]	@ (8022138 <prvBufferFormattedString+0x13c>)
 802208e:	21c8      	movs	r1, #200	@ 0xc8
 8022090:	482a      	ldr	r0, [pc, #168]	@ (802213c <prvBufferFormattedString+0x140>)
 8022092:	f001 f885 	bl	80231a0 <snprintf>
 8022096:	4603      	mov	r3, r0
 8022098:	60fb      	str	r3, [r7, #12]
			( unsigned int ) ulSeconds, ( unsigned int ) ulMilliSeconds, ( unsigned int ) ulMicroSeconds, pcTaskGetTaskName( NULL ) );
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 802209a:	68fb      	ldr	r3, [r7, #12]
 802209c:	4a27      	ldr	r2, [pc, #156]	@ (802213c <prvBufferFormattedString+0x140>)
 802209e:	1898      	adds	r0, r3, r2
 80220a0:	68fb      	ldr	r3, [r7, #12]
 80220a2:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 80220a6:	683b      	ldr	r3, [r7, #0]
 80220a8:	687a      	ldr	r2, [r7, #4]
 80220aa:	f001 f85d 	bl	8023168 <vsnprintf>
 80220ae:	4603      	mov	r3, r0
 80220b0:	461a      	mov	r2, r3
 80220b2:	68fb      	ldr	r3, [r7, #12]
 80220b4:	4413      	add	r3, r2
 80220b6:	60fb      	str	r3, [r7, #12]

		xSpace = uxStreamBufferGetSpace( pxStreamBuffer );
 80220b8:	4b1c      	ldr	r3, [pc, #112]	@ (802212c <prvBufferFormattedString+0x130>)
 80220ba:	681b      	ldr	r3, [r3, #0]
 80220bc:	4618      	mov	r0, r3
 80220be:	f7ee fd50 	bl	8010b62 <uxStreamBufferGetSpace>
 80220c2:	6138      	str	r0, [r7, #16]

		if( xSpace > ( xLength + sizeof( BaseType_t ) ) )
 80220c4:	68fb      	ldr	r3, [r7, #12]
 80220c6:	3304      	adds	r3, #4
 80220c8:	693a      	ldr	r2, [r7, #16]
 80220ca:	429a      	cmp	r2, r3
 80220cc:	d90e      	bls.n	80220ec <prvBufferFormattedString+0xf0>
		{
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) &xLength, sizeof( xLength ) );
 80220ce:	4b17      	ldr	r3, [pc, #92]	@ (802212c <prvBufferFormattedString+0x130>)
 80220d0:	6818      	ldr	r0, [r3, #0]
 80220d2:	f107 020c 	add.w	r2, r7, #12
 80220d6:	2304      	movs	r3, #4
 80220d8:	2100      	movs	r1, #0
 80220da:	f7ee fe02 	bl	8010ce2 <uxStreamBufferAdd>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) ( xLogEntry.cMessage ), xLength );
 80220de:	4b13      	ldr	r3, [pc, #76]	@ (802212c <prvBufferFormattedString+0x130>)
 80220e0:	6818      	ldr	r0, [r3, #0]
 80220e2:	68fb      	ldr	r3, [r7, #12]
 80220e4:	4a15      	ldr	r2, [pc, #84]	@ (802213c <prvBufferFormattedString+0x140>)
 80220e6:	2100      	movs	r1, #0
 80220e8:	f7ee fdfb 	bl	8010ce2 <uxStreamBufferAdd>
		}
	}
	xTaskResumeAll();
 80220ec:	f7e2 fad6 	bl	800469c <xTaskResumeAll>

	if( xLoggingTask == NULL )
 80220f0:	4b13      	ldr	r3, [pc, #76]	@ (8022140 <prvBufferFormattedString+0x144>)
 80220f2:	681b      	ldr	r3, [r3, #0]
 80220f4:	2b00      	cmp	r3, #0
 80220f6:	d10a      	bne.n	802210e <prvBufferFormattedString+0x112>
	{
		/* The task isn't running yet, call the hook directly. */
		vUDPLoggingHook( xLogEntry.cMessage, xLength );
 80220f8:	68fb      	ldr	r3, [r7, #12]
 80220fa:	4619      	mov	r1, r3
 80220fc:	480f      	ldr	r0, [pc, #60]	@ (802213c <prvBufferFormattedString+0x140>)
 80220fe:	f000 f85b 	bl	80221b8 <vUDPLoggingHook>
		uxSkipCount++;
 8022102:	4b10      	ldr	r3, [pc, #64]	@ (8022144 <prvBufferFormattedString+0x148>)
 8022104:	681b      	ldr	r3, [r3, #0]
 8022106:	3301      	adds	r3, #1
 8022108:	4a0e      	ldr	r2, [pc, #56]	@ (8022144 <prvBufferFormattedString+0x148>)
 802210a:	6013      	str	r3, [r2, #0]
 802210c:	e008      	b.n	8022120 <prvBufferFormattedString+0x124>
	}
	else
	{
		/* Unblock the logging task so it can output the message. */
		xTaskNotifyGive( xLoggingTask );
 802210e:	4b0c      	ldr	r3, [pc, #48]	@ (8022140 <prvBufferFormattedString+0x144>)
 8022110:	6818      	ldr	r0, [r3, #0]
 8022112:	2300      	movs	r3, #0
 8022114:	9300      	str	r3, [sp, #0]
 8022116:	2302      	movs	r3, #2
 8022118:	2200      	movs	r2, #0
 802211a:	2100      	movs	r1, #0
 802211c:	f7e3 fc14 	bl	8005948 <xTaskGenericNotify>
	}

	return xLength;
 8022120:	68fb      	ldr	r3, [r7, #12]
}
 8022122:	4618      	mov	r0, r3
 8022124:	3728      	adds	r7, #40	@ 0x28
 8022126:	46bd      	mov	sp, r7
 8022128:	bd80      	pop	{r7, pc}
 802212a:	bf00      	nop
 802212c:	200025d4 	.word	0x200025d4
 8022130:	08027708 	.word	0x08027708
 8022134:	000f4240 	.word	0x000f4240
 8022138:	08027730 	.word	0x08027730
 802213c:	2000250c 	.word	0x2000250c
 8022140:	200025d8 	.word	0x200025d8
 8022144:	200025dc 	.word	0x200025dc

08022148 <lUDPLoggingPrintf>:
/*-----------------------------------------------------------*/

int lUDPLoggingPrintf( const char *pcFormatString, ... )
{
 8022148:	b40f      	push	{r0, r1, r2, r3}
 802214a:	b580      	push	{r7, lr}
 802214c:	b082      	sub	sp, #8
 802214e:	af00      	add	r7, sp, #0
size_t xLength;

	if( prvInitialiseLogging() != pdFALSE )
 8022150:	f7ff fece 	bl	8021ef0 <prvInitialiseLogging>
 8022154:	4603      	mov	r3, r0
 8022156:	2b00      	cmp	r3, #0
 8022158:	d008      	beq.n	802216c <lUDPLoggingPrintf+0x24>
	{
		va_list args;
		va_start (args, pcFormatString);
 802215a:	f107 0314 	add.w	r3, r7, #20
 802215e:	603b      	str	r3, [r7, #0]
		xLength = prvBufferFormattedString (pcFormatString, args);
 8022160:	6839      	ldr	r1, [r7, #0]
 8022162:	6938      	ldr	r0, [r7, #16]
 8022164:	f7ff ff4a 	bl	8021ffc <prvBufferFormattedString>
 8022168:	6078      	str	r0, [r7, #4]
 802216a:	e001      	b.n	8022170 <lUDPLoggingPrintf+0x28>
		va_end (args);
	}
	else
	{
		xLength = 0;
 802216c:	2300      	movs	r3, #0
 802216e:	607b      	str	r3, [r7, #4]
	}

	return ( int ) xLength;
 8022170:	687b      	ldr	r3, [r7, #4]
}
 8022172:	4618      	mov	r0, r3
 8022174:	3708      	adds	r7, #8
 8022176:	46bd      	mov	sp, r7
 8022178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802217c:	b004      	add	sp, #16
 802217e:	4770      	bx	lr

08022180 <vUDPLoggingTaskCreate>:
/*-----------------------------------------------------------*/

BaseType_t rc_create;

void vUDPLoggingTaskCreate( void )
{
 8022180:	b580      	push	{r7, lr}
 8022182:	b082      	sub	sp, #8
 8022184:	af02      	add	r7, sp, #8
	/* Start a task which will send out the logging lines to a UDP address. */
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 8022186:	4b08      	ldr	r3, [pc, #32]	@ (80221a8 <vUDPLoggingTaskCreate+0x28>)
 8022188:	9301      	str	r3, [sp, #4]
 802218a:	2302      	movs	r3, #2
 802218c:	9300      	str	r3, [sp, #0]
 802218e:	2300      	movs	r3, #0
 8022190:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022194:	4905      	ldr	r1, [pc, #20]	@ (80221ac <vUDPLoggingTaskCreate+0x2c>)
 8022196:	4806      	ldr	r0, [pc, #24]	@ (80221b0 <vUDPLoggingTaskCreate+0x30>)
 8022198:	f7e2 f87a 	bl	8004290 <xTaskCreate>
 802219c:	4603      	mov	r3, r0
 802219e:	4a05      	ldr	r2, [pc, #20]	@ (80221b4 <vUDPLoggingTaskCreate+0x34>)
 80221a0:	6013      	str	r3, [r2, #0]
}
 80221a2:	bf00      	nop
 80221a4:	46bd      	mov	sp, r7
 80221a6:	bd80      	pop	{r7, pc}
 80221a8:	200025d8 	.word	0x200025d8
 80221ac:	08027748 	.word	0x08027748
 80221b0:	080221d1 	.word	0x080221d1
 80221b4:	200025e0 	.word	0x200025e0

080221b8 <vUDPLoggingHook>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void __attribute__((weak)) vUDPLoggingHook( const char *pcMessage, BaseType_t xLength )
{
 80221b8:	b480      	push	{r7}
 80221ba:	b083      	sub	sp, #12
 80221bc:	af00      	add	r7, sp, #0
 80221be:	6078      	str	r0, [r7, #4]
 80221c0:	6039      	str	r1, [r7, #0]
	( void ) pcMessage;
	( void ) xLength;
}
 80221c2:	bf00      	nop
 80221c4:	370c      	adds	r7, #12
 80221c6:	46bd      	mov	sp, r7
 80221c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221cc:	4770      	bx	lr
	...

080221d0 <prvLoggingTask>:
#if( ipconfigOLD_MULTI != 0 )
	#define ENDPOINT_IS_IPv4( pxEndPoint )	( 1 )
#endif

static void prvLoggingTask( void *pvParameters )
{
 80221d0:	b580      	push	{r7, lr}
 80221d2:	b098      	sub	sp, #96	@ 0x60
 80221d4:	af02      	add	r7, sp, #8
 80221d6:	6078      	str	r0, [r7, #4]
TickType_t xBlockingTime = pdMS_TO_TICKS( logUDP_LOGGING_BLOCK_TIME_MS );
 80221d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80221dc:	64bb      	str	r3, [r7, #72]	@ 0x48

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
		for( ;; )
		{
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80221de:	2000      	movs	r0, #0
 80221e0:	f7eb fa92 	bl	800d708 <FreeRTOS_FirstEndPoint>
 80221e4:	6538      	str	r0, [r7, #80]	@ 0x50
 80221e6:	e01c      	b.n	8022222 <prvLoggingTask+0x52>
				pxEndPoint != NULL;
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
			{
				if( ( pxEndPoint->bits.bEndPointUp ) && ( ENDPOINT_IS_IPv4( pxEndPoint ) != pdFALSE) )
 80221e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80221ea:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80221ee:	f003 0310 	and.w	r3, r3, #16
 80221f2:	b2db      	uxtb	r3, r3
 80221f4:	2b00      	cmp	r3, #0
 80221f6:	d00f      	beq.n	8022218 <prvLoggingTask+0x48>
 80221f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80221fa:	2b00      	cmp	r3, #0
 80221fc:	d009      	beq.n	8022212 <prvLoggingTask+0x42>
 80221fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022200:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8022204:	f003 0304 	and.w	r3, r3, #4
 8022208:	b2db      	uxtb	r3, r3
 802220a:	2b00      	cmp	r3, #0
 802220c:	d101      	bne.n	8022212 <prvLoggingTask+0x42>
 802220e:	2301      	movs	r3, #1
 8022210:	e000      	b.n	8022214 <prvLoggingTask+0x44>
 8022212:	2300      	movs	r3, #0
 8022214:	2b00      	cmp	r3, #0
 8022216:	d108      	bne.n	802222a <prvLoggingTask+0x5a>
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8022218:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 802221a:	2000      	movs	r0, #0
 802221c:	f7eb fa96 	bl	800d74c <FreeRTOS_NextEndPoint>
 8022220:	6538      	str	r0, [r7, #80]	@ 0x50
				pxEndPoint != NULL;
 8022222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022224:	2b00      	cmp	r3, #0
 8022226:	d1df      	bne.n	80221e8 <prvLoggingTask+0x18>
 8022228:	e000      	b.n	802222c <prvLoggingTask+0x5c>
				{
					break;
 802222a:	bf00      	nop
				}
			}
			if( pxEndPoint != pdFALSE )
 802222c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802222e:	2b00      	cmp	r3, #0
 8022230:	d000      	beq.n	8022234 <prvLoggingTask+0x64>
			{
				break;
 8022232:	e004      	b.n	802223e <prvLoggingTask+0x6e>
			}
			vTaskDelay( 1000 );
 8022234:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8022238:	f7e2 f96a 	bl	8004510 <vTaskDelay>
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 802223c:	e7cf      	b.n	80221de <prvLoggingTask+0xe>
	#endif	/* ( ipconfigMULTI_INTERFACE != 0 ) */

	/* Loop until a socket is created. */
	do
	{
		vTaskDelay( xBlockingTime );
 802223e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8022240:	f7e2 f966 	bl	8004510 <vTaskDelay>
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8022244:	2211      	movs	r2, #17
 8022246:	2102      	movs	r1, #2
 8022248:	2002      	movs	r0, #2
 802224a:	f7eb ffd9 	bl	800e200 <FreeRTOS_socket>
 802224e:	4603      	mov	r3, r0
 8022250:	4a4c      	ldr	r2, [pc, #304]	@ (8022384 <prvLoggingTask+0x1b4>)
 8022252:	6013      	str	r3, [r2, #0]
	} while( xUDPLoggingSocket == FREERTOS_INVALID_SOCKET );
 8022254:	4b4b      	ldr	r3, [pc, #300]	@ (8022384 <prvLoggingTask+0x1b4>)
 8022256:	681b      	ldr	r3, [r3, #0]
 8022258:	f1b3 3fff 	cmp.w	r3, #4294967295
 802225c:	d0ef      	beq.n	802223e <prvLoggingTask+0x6e>

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
//		pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
		configASSERT( pxEndPoint != NULL );
 802225e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022260:	2b00      	cmp	r3, #0
 8022262:	d104      	bne.n	802226e <prvLoggingTask+0x9e>
 8022264:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8022268:	4847      	ldr	r0, [pc, #284]	@ (8022388 <prvLoggingTask+0x1b8>)
 802226a:	f7df fb75 	bl	8001958 <vAssertCalled>
		configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 802226e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022270:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8022274:	2b00      	cmp	r3, #0
 8022276:	d104      	bne.n	8022282 <prvLoggingTask+0xb2>
 8022278:	f240 11df 	movw	r1, #479	@ 0x1df
 802227c:	4842      	ldr	r0, [pc, #264]	@ (8022388 <prvLoggingTask+0x1b8>)
 802227e:	f7df fb6b 	bl	8001958 <vAssertCalled>
		pxNetworkInterface = pxEndPoint->pxNetworkInterface;
 8022282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022284:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8022288:	647b      	str	r3, [r7, #68]	@ 0x44
		//xRemoteAddress.sin_addr = FREERTOS_INADDR_ANY;
	}
	#endif

	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 802228a:	f246 2309 	movw	r3, #25097	@ 0x6209
 802228e:	857b      	strh	r3, [r7, #42]	@ 0x2a
	{
		xLocalAddress.sin_addr = pxEndPoint->ulIPAddress;
	}
	#else
	{
		xLocalAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress;
 8022290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022292:	681b      	ldr	r3, [r3, #0]
 8022294:	633b      	str	r3, [r7, #48]	@ 0x30
	#endif
#else
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
#endif

	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 8022296:	4b3b      	ldr	r3, [pc, #236]	@ (8022384 <prvLoggingTask+0x1b4>)
 8022298:	681b      	ldr	r3, [r3, #0]
 802229a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 802229e:	2218      	movs	r2, #24
 80222a0:	4618      	mov	r0, r3
 80222a2:	f7ec f99d 	bl	800e5e0 <FreeRTOS_bind>

	xSendTimeOut = xBlockingTime;
 80222a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80222a8:	627b      	str	r3, [r7, #36]	@ 0x24
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 80222aa:	4b36      	ldr	r3, [pc, #216]	@ (8022384 <prvLoggingTask+0x1b4>)
 80222ac:	6818      	ldr	r0, [r3, #0]
 80222ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80222b2:	2204      	movs	r2, #4
 80222b4:	9200      	str	r2, [sp, #0]
 80222b6:	2201      	movs	r2, #1
 80222b8:	2100      	movs	r1, #0
 80222ba:	f7ec ff5b 	bl	800f174 <FreeRTOS_setsockopt>

	for( ;; )
	{
		/* Wait for another message to be placed into the stream buffer. */
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 80222be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80222c0:	2101      	movs	r1, #1
 80222c2:	2000      	movs	r0, #0
 80222c4:	f7e3 fa34 	bl	8005730 <ulTaskGenericNotifyTake>

	#if( ipconfigMULTI_INTERFACE != 0 )
		if( pxNetworkInterface->pfGetPhyLinkStatus( pxNetworkInterface ) != pdFALSE )
 80222c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80222ca:	691b      	ldr	r3, [r3, #16]
 80222cc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80222ce:	4798      	blx	r3
 80222d0:	4603      	mov	r3, r0
 80222d2:	2b00      	cmp	r3, #0
 80222d4:	d0f3      	beq.n	80222be <prvLoggingTask+0xee>
	#else
		if( xSTM32H_GetPhyLinkStatus(&( xInterfaces[ 0 ] )) != pdFALSE )
	#endif
		{
			/* Check for messages in the buffer. */
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 80222d6:	2300      	movs	r3, #0
 80222d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80222da:	e04c      	b.n	8022376 <prvLoggingTask+0x1a6>
			{
				xCount = prvGetMessageFromStreamBuffer ( cLoggingLine, sizeof( cLoggingLine ) );
 80222dc:	21c8      	movs	r1, #200	@ 0xc8
 80222de:	482b      	ldr	r0, [pc, #172]	@ (802238c <prvLoggingTask+0x1bc>)
 80222e0:	f7ff fe38 	bl	8021f54 <prvGetMessageFromStreamBuffer>
 80222e4:	6438      	str	r0, [r7, #64]	@ 0x40

				if( xCount <= 0 )
 80222e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80222e8:	2b00      	cmp	r3, #0
 80222ea:	d048      	beq.n	802237e <prvLoggingTask+0x1ae>
				#if( ipconfigMULTI_INTERFACE != 0 )
				{
				struct freertos_sockaddr xAddress;
				NetworkEndPoint_t *pxEndPoint;

					for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80222ec:	2000      	movs	r0, #0
 80222ee:	f7eb fa0b 	bl	800d708 <FreeRTOS_FirstEndPoint>
 80222f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80222f4:	e02a      	b.n	802234c <prvLoggingTask+0x17c>
						pxEndPoint != NULL;
						)
					{
						if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 80222f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80222f8:	2b00      	cmp	r3, #0
 80222fa:	d022      	beq.n	8022342 <prvLoggingTask+0x172>
 80222fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80222fe:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8022302:	f003 0304 	and.w	r3, r3, #4
 8022306:	b2db      	uxtb	r3, r3
 8022308:	2b00      	cmp	r3, #0
 802230a:	d11a      	bne.n	8022342 <prvLoggingTask+0x172>
						{
							xAddress.sin_len = sizeof( xAddress );		/* length of this structure. */
 802230c:	2318      	movs	r3, #24
 802230e:	733b      	strb	r3, [r7, #12]
							xAddress.sin_family = FREERTOS_AF_INET;
 8022310:	2302      	movs	r3, #2
 8022312:	737b      	strb	r3, [r7, #13]
							{
								xAddress.sin_addr = pxEndPoint->ulIPAddress | ~( pxEndPoint->ulNetMask );
							}
							#else
							{
								xAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 8022314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022316:	681a      	ldr	r2, [r3, #0]
 8022318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802231a:	685b      	ldr	r3, [r3, #4]
 802231c:	43db      	mvns	r3, r3
 802231e:	4313      	orrs	r3, r2
 8022320:	617b      	str	r3, [r7, #20]
							}
							#endif
							xAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 8022322:	f246 3309 	movw	r3, #25353	@ 0x6309
 8022326:	81fb      	strh	r3, [r7, #14]
							//if( pxNextEndPoint == NULL )
							{
								FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xAddress, sizeof( xAddress ) );
 8022328:	4b16      	ldr	r3, [pc, #88]	@ (8022384 <prvLoggingTask+0x1b4>)
 802232a:	6818      	ldr	r0, [r3, #0]
 802232c:	2318      	movs	r3, #24
 802232e:	9301      	str	r3, [sp, #4]
 8022330:	f107 030c 	add.w	r3, r7, #12
 8022334:	9300      	str	r3, [sp, #0]
 8022336:	2300      	movs	r3, #0
 8022338:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802233a:	4914      	ldr	r1, [pc, #80]	@ (802238c <prvLoggingTask+0x1bc>)
 802233c:	f7ec f8e0 	bl	800e500 <FreeRTOS_sendto>
							}
							break;
 8022340:	e007      	b.n	8022352 <prvLoggingTask+0x182>
						}
						pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint );
 8022342:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8022344:	2000      	movs	r0, #0
 8022346:	f7eb fa01 	bl	800d74c <FreeRTOS_NextEndPoint>
 802234a:	64f8      	str	r0, [r7, #76]	@ 0x4c
						pxEndPoint != NULL;
 802234c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802234e:	2b00      	cmp	r3, #0
 8022350:	d1d1      	bne.n	80222f6 <prvLoggingTask+0x126>
				{
//#warning Do not send logging as a test
					FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
				}
				#endif
				if( uxSkipCount != ( size_t )0u )
 8022352:	4b0f      	ldr	r3, [pc, #60]	@ (8022390 <prvLoggingTask+0x1c0>)
 8022354:	681b      	ldr	r3, [r3, #0]
 8022356:	2b00      	cmp	r3, #0
 8022358:	d005      	beq.n	8022366 <prvLoggingTask+0x196>
				{
					uxSkipCount--;
 802235a:	4b0d      	ldr	r3, [pc, #52]	@ (8022390 <prvLoggingTask+0x1c0>)
 802235c:	681b      	ldr	r3, [r3, #0]
 802235e:	3b01      	subs	r3, #1
 8022360:	4a0b      	ldr	r2, [pc, #44]	@ (8022390 <prvLoggingTask+0x1c0>)
 8022362:	6013      	str	r3, [r2, #0]
 8022364:	e004      	b.n	8022370 <prvLoggingTask+0x1a0>
				}
				else
				{
					vUDPLoggingHook( cLoggingLine, xCount );
 8022366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8022368:	4619      	mov	r1, r3
 802236a:	4808      	ldr	r0, [pc, #32]	@ (802238c <prvLoggingTask+0x1bc>)
 802236c:	f7ff ff24 	bl	80221b8 <vUDPLoggingHook>
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8022370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022372:	3301      	adds	r3, #1
 8022374:	657b      	str	r3, [r7, #84]	@ 0x54
 8022376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022378:	2b13      	cmp	r3, #19
 802237a:	ddaf      	ble.n	80222dc <prvLoggingTask+0x10c>
 802237c:	e79f      	b.n	80222be <prvLoggingTask+0xee>
					break;
 802237e:	bf00      	nop
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 8022380:	e79d      	b.n	80222be <prvLoggingTask+0xee>
 8022382:	bf00      	nop
 8022384:	20000028 	.word	0x20000028
 8022388:	08027708 	.word	0x08027708
 802238c:	200025e8 	.word	0x200025e8
 8022390:	200025dc 	.word	0x200025dc

08022394 <TIM2_IRQHandler>:

static uint32_t ulInterruptCount = 0;

uint32_t ulTimer2Flags;
void TIM2_IRQHandler(void)
{
 8022394:	b480      	push	{r7}
 8022396:	af00      	add	r7, sp, #0
	ulTimer2Flags = htim2.Instance->SR;
 8022398:	4b0c      	ldr	r3, [pc, #48]	@ (80223cc <TIM2_IRQHandler+0x38>)
 802239a:	681b      	ldr	r3, [r3, #0]
 802239c:	691b      	ldr	r3, [r3, #16]
 802239e:	4a0c      	ldr	r2, [pc, #48]	@ (80223d0 <TIM2_IRQHandler+0x3c>)
 80223a0:	6013      	str	r3, [r2, #0]
	if( ( ulTimer2Flags & TIM_FLAG_UPDATE ) != 0 )
 80223a2:	4b0b      	ldr	r3, [pc, #44]	@ (80223d0 <TIM2_IRQHandler+0x3c>)
 80223a4:	681b      	ldr	r3, [r3, #0]
 80223a6:	f003 0301 	and.w	r3, r3, #1
 80223aa:	2b00      	cmp	r3, #0
 80223ac:	d009      	beq.n	80223c2 <TIM2_IRQHandler+0x2e>
	{
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 80223ae:	4b07      	ldr	r3, [pc, #28]	@ (80223cc <TIM2_IRQHandler+0x38>)
 80223b0:	681b      	ldr	r3, [r3, #0]
 80223b2:	f06f 0201 	mvn.w	r2, #1
 80223b6:	611a      	str	r2, [r3, #16]
		ulInterruptCount++;
 80223b8:	4b06      	ldr	r3, [pc, #24]	@ (80223d4 <TIM2_IRQHandler+0x40>)
 80223ba:	681b      	ldr	r3, [r3, #0]
 80223bc:	3301      	adds	r3, #1
 80223be:	4a05      	ldr	r2, [pc, #20]	@ (80223d4 <TIM2_IRQHandler+0x40>)
 80223c0:	6013      	str	r3, [r2, #0]
	}
}
 80223c2:	bf00      	nop
 80223c4:	46bd      	mov	sp, r7
 80223c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223ca:	4770      	bx	lr
 80223cc:	20000444 	.word	0x20000444
 80223d0:	200026b4 	.word	0x200026b4
 80223d4:	200026b0 	.word	0x200026b0

080223d8 <vStartHighResolutionTimer>:


/* Timer2 initialization function */
void vStartHighResolutionTimer( void )
{
 80223d8:	b580      	push	{r7, lr}
 80223da:	b082      	sub	sp, #8
 80223dc:	af00      	add	r7, sp, #0
	/* TIM2 clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 80223de:	4b20      	ldr	r3, [pc, #128]	@ (8022460 <vStartHighResolutionTimer+0x88>)
 80223e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80223e4:	4a1e      	ldr	r2, [pc, #120]	@ (8022460 <vStartHighResolutionTimer+0x88>)
 80223e6:	f043 0301 	orr.w	r3, r3, #1
 80223ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80223ee:	4b1c      	ldr	r3, [pc, #112]	@ (8022460 <vStartHighResolutionTimer+0x88>)
 80223f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80223f4:	f003 0301 	and.w	r3, r3, #1
 80223f8:	607b      	str	r3, [r7, #4]
 80223fa:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;     /* Register base address             */
 80223fc:	4b19      	ldr	r3, [pc, #100]	@ (8022464 <vStartHighResolutionTimer+0x8c>)
 80223fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8022402:	601a      	str	r2, [r3, #0]

	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 8022404:	23c8      	movs	r3, #200	@ 0xc8
 8022406:	3b01      	subs	r3, #1
 8022408:	4a16      	ldr	r2, [pc, #88]	@ (8022464 <vStartHighResolutionTimer+0x8c>)
 802240a:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;			/* Specifies the counter mode. */
 802240c:	4b15      	ldr	r3, [pc, #84]	@ (8022464 <vStartHighResolutionTimer+0x8c>)
 802240e:	2200      	movs	r2, #0
 8022410:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ( ulReloadCount - 1ul );			/* Specifies the period value to be loaded into the active. */
 8022412:	4b15      	ldr	r3, [pc, #84]	@ (8022468 <vStartHighResolutionTimer+0x90>)
 8022414:	3b01      	subs	r3, #1
 8022416:	4a13      	ldr	r2, [pc, #76]	@ (8022464 <vStartHighResolutionTimer+0x8c>)
 8022418:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;	/* Specifies the clock division. */
 802241a:	4b12      	ldr	r3, [pc, #72]	@ (8022464 <vStartHighResolutionTimer+0x8c>)
 802241c:	2200      	movs	r2, #0
 802241e:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0ul;					/* Specifies the repetition counter value. */
 8022420:	4b10      	ldr	r3, [pc, #64]	@ (8022464 <vStartHighResolutionTimer+0x8c>)
 8022422:	2200      	movs	r2, #0
 8022424:	615a      	str	r2, [r3, #20]
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8022426:	4b0f      	ldr	r3, [pc, #60]	@ (8022464 <vStartHighResolutionTimer+0x8c>)
 8022428:	2201      	movs	r2, #1
 802242a:	771a      	strb	r2, [r3, #28]

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 802242c:	2200      	movs	r2, #0
 802242e:	2105      	movs	r1, #5
 8022430:	201c      	movs	r0, #28
 8022432:	f7f7 ffa4 	bl	801a37e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 8022436:	201c      	movs	r0, #28
 8022438:	f7f7 ffbb 	bl	801a3b2 <HAL_NVIC_EnableIRQ>


	HAL_TIM_Base_Init( &htim2 );
 802243c:	4809      	ldr	r0, [pc, #36]	@ (8022464 <vStartHighResolutionTimer+0x8c>)
 802243e:	f7fd fc96 	bl	801fd6e <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT( &htim2 );
 8022442:	4808      	ldr	r0, [pc, #32]	@ (8022464 <vStartHighResolutionTimer+0x8c>)
 8022444:	f7fd fcea 	bl	801fe1c <HAL_TIM_Base_Start_IT>
	ulTimer2Flags = htim2.Instance->SR;
 8022448:	4b06      	ldr	r3, [pc, #24]	@ (8022464 <vStartHighResolutionTimer+0x8c>)
 802244a:	681b      	ldr	r3, [r3, #0]
 802244c:	691b      	ldr	r3, [r3, #16]
 802244e:	4a07      	ldr	r2, [pc, #28]	@ (802246c <vStartHighResolutionTimer+0x94>)
 8022450:	6013      	str	r3, [r2, #0]
	/* Ignore the initial interrupt which sets ulInterruptCount = 1.*/
	ulInterruptCount = 0ul;
 8022452:	4b07      	ldr	r3, [pc, #28]	@ (8022470 <vStartHighResolutionTimer+0x98>)
 8022454:	2200      	movs	r2, #0
 8022456:	601a      	str	r2, [r3, #0]
}
 8022458:	bf00      	nop
 802245a:	3708      	adds	r7, #8
 802245c:	46bd      	mov	sp, r7
 802245e:	bd80      	pop	{r7, pc}
 8022460:	58024400 	.word	0x58024400
 8022464:	20000444 	.word	0x20000444
 8022468:	00989680 	.word	0x00989680
 802246c:	200026b4 	.word	0x200026b4
 8022470:	200026b0 	.word	0x200026b0

08022474 <ullGetHighResolutionTime>:

uint64_t ullGetHighResolutionTime()
{
 8022474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022478:	b08e      	sub	sp, #56	@ 0x38
 802247a:	af00      	add	r7, sp, #0
uint64_t ullReturn;
	if( htim2.Instance == NULL )
 802247c:	493d      	ldr	r1, [pc, #244]	@ (8022574 <ullGetHighResolutionTime+0x100>)
 802247e:	6809      	ldr	r1, [r1, #0]
 8022480:	2900      	cmp	r1, #0
 8022482:	d132      	bne.n	80224ea <ullGetHighResolutionTime+0x76>
	{
		ullReturn = 1000ull * xTaskGetTickCount();
 8022484:	f7e2 fa0e 	bl	80048a4 <xTaskGetTickCount>
 8022488:	4603      	mov	r3, r0
 802248a:	2200      	movs	r2, #0
 802248c:	469a      	mov	sl, r3
 802248e:	4693      	mov	fp, r2
 8022490:	4652      	mov	r2, sl
 8022492:	465b      	mov	r3, fp
 8022494:	f04f 0000 	mov.w	r0, #0
 8022498:	f04f 0100 	mov.w	r1, #0
 802249c:	0159      	lsls	r1, r3, #5
 802249e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80224a2:	0150      	lsls	r0, r2, #5
 80224a4:	4602      	mov	r2, r0
 80224a6:	460b      	mov	r3, r1
 80224a8:	ebb2 040a 	subs.w	r4, r2, sl
 80224ac:	eb63 050b 	sbc.w	r5, r3, fp
 80224b0:	f04f 0200 	mov.w	r2, #0
 80224b4:	f04f 0300 	mov.w	r3, #0
 80224b8:	00ab      	lsls	r3, r5, #2
 80224ba:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80224be:	00a2      	lsls	r2, r4, #2
 80224c0:	4614      	mov	r4, r2
 80224c2:	461d      	mov	r5, r3
 80224c4:	eb14 080a 	adds.w	r8, r4, sl
 80224c8:	eb45 090b 	adc.w	r9, r5, fp
 80224cc:	f04f 0200 	mov.w	r2, #0
 80224d0:	f04f 0300 	mov.w	r3, #0
 80224d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80224d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80224dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80224e0:	4690      	mov	r8, r2
 80224e2:	4699      	mov	r9, r3
 80224e4:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
 80224e8:	e03c      	b.n	8022564 <ullGetHighResolutionTime+0xf0>
	uint32_t ulCounts[2];
	uint32_t ulSlowCount;

		for( ;; )
		{
			ulCounts[ 0 ] = htim2.Instance->CNT;
 80224ea:	4922      	ldr	r1, [pc, #136]	@ (8022574 <ullGetHighResolutionTime+0x100>)
 80224ec:	6809      	ldr	r1, [r1, #0]
 80224ee:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80224f0:	6279      	str	r1, [r7, #36]	@ 0x24
			ulSlowCount = ulInterruptCount;
 80224f2:	4921      	ldr	r1, [pc, #132]	@ (8022578 <ullGetHighResolutionTime+0x104>)
 80224f4:	6809      	ldr	r1, [r1, #0]
 80224f6:	62f9      	str	r1, [r7, #44]	@ 0x2c
			ulCounts[ 1 ] = htim2.Instance->CNT;
 80224f8:	491e      	ldr	r1, [pc, #120]	@ (8022574 <ullGetHighResolutionTime+0x100>)
 80224fa:	6809      	ldr	r1, [r1, #0]
 80224fc:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80224fe:	62b9      	str	r1, [r7, #40]	@ 0x28
			if( ulCounts[ 1 ] >= ulCounts[ 0 ] )
 8022500:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8022502:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8022504:	4288      	cmp	r0, r1
 8022506:	d200      	bcs.n	802250a <ullGetHighResolutionTime+0x96>
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8022508:	e7ef      	b.n	80224ea <ullGetHighResolutionTime+0x76>
			{
				/* TIM2_IRQHandler() has not occurred in between. */
				break;
 802250a:	bf00      	nop
			}
		}
		ullReturn = ( uint64_t )ulSlowCount * ulReloadCount + ulCounts[ 1 ];
 802250c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802250e:	2000      	movs	r0, #0
 8022510:	61b9      	str	r1, [r7, #24]
 8022512:	61f8      	str	r0, [r7, #28]
 8022514:	4819      	ldr	r0, [pc, #100]	@ (802257c <ullGetHighResolutionTime+0x108>)
 8022516:	2100      	movs	r1, #0
 8022518:	6138      	str	r0, [r7, #16]
 802251a:	6179      	str	r1, [r7, #20]
 802251c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8022520:	4649      	mov	r1, r9
 8022522:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8022526:	4650      	mov	r0, sl
 8022528:	fb00 f001 	mul.w	r0, r0, r1
 802252c:	4659      	mov	r1, fp
 802252e:	4644      	mov	r4, r8
 8022530:	fb04 f101 	mul.w	r1, r4, r1
 8022534:	4401      	add	r1, r0
 8022536:	4640      	mov	r0, r8
 8022538:	4654      	mov	r4, sl
 802253a:	fba0 2304 	umull	r2, r3, r0, r4
 802253e:	4419      	add	r1, r3
 8022540:	460b      	mov	r3, r1
 8022542:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022544:	2000      	movs	r0, #0
 8022546:	60b9      	str	r1, [r7, #8]
 8022548:	60f8      	str	r0, [r7, #12]
 802254a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 802254e:	4621      	mov	r1, r4
 8022550:	1851      	adds	r1, r2, r1
 8022552:	6039      	str	r1, [r7, #0]
 8022554:	4629      	mov	r1, r5
 8022556:	eb43 0101 	adc.w	r1, r3, r1
 802255a:	6079      	str	r1, [r7, #4]
 802255c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8022560:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
	}

	return ullReturn;
 8022564:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 8022568:	4610      	mov	r0, r2
 802256a:	4619      	mov	r1, r3
 802256c:	3738      	adds	r7, #56	@ 0x38
 802256e:	46bd      	mov	sp, r7
 8022570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8022574:	20000444 	.word	0x20000444
 8022578:	200026b0 	.word	0x200026b0
 802257c:	00989680 	.word	0x00989680

08022580 <memcpy>:
	uint32_t uint32;
};

#if( SIMPLE_MEMCPY == 0 )
void *memcpy( void *pvDest, const void *pvSource, size_t ulBytes )
{
 8022580:	b480      	push	{r7}
 8022582:	b08d      	sub	sp, #52	@ 0x34
 8022584:	af00      	add	r7, sp, #0
 8022586:	60f8      	str	r0, [r7, #12]
 8022588:	60b9      	str	r1, [r7, #8]
 802258a:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxSource;
union xPointer pxLastSource;
uint32_t ulAlignBits;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 802258c:	68fb      	ldr	r3, [r7, #12]
 802258e:	61bb      	str	r3, [r7, #24]
	pxSource.u8 = ( uint8_t * ) pvSource;
 8022590:	68bb      	ldr	r3, [r7, #8]
 8022592:	617b      	str	r3, [r7, #20]
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 8022594:	697a      	ldr	r2, [r7, #20]
 8022596:	687b      	ldr	r3, [r7, #4]
 8022598:	4413      	add	r3, r2
 802259a:	613b      	str	r3, [r7, #16]

	ulAlignBits = ( pxDestination.uint32 & 0x03 ) ^ ( pxSource.uint32 & 0x03 );
 802259c:	69ba      	ldr	r2, [r7, #24]
 802259e:	697b      	ldr	r3, [r7, #20]
 80225a0:	4053      	eors	r3, r2
 80225a2:	f003 0303 	and.w	r3, r3, #3
 80225a6:	627b      	str	r3, [r7, #36]	@ 0x24

	if( ( ulAlignBits & 0x01 ) == 0 )
 80225a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80225aa:	f003 0301 	and.w	r3, r3, #1
 80225ae:	2b00      	cmp	r3, #0
 80225b0:	f040 80a1 	bne.w	80226f6 <memcpy+0x176>
	{
		if( ( ( pxSource.uint32 & 1 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 ) )
 80225b4:	697b      	ldr	r3, [r7, #20]
 80225b6:	f003 0301 	and.w	r3, r3, #1
 80225ba:	2b00      	cmp	r3, #0
 80225bc:	d00b      	beq.n	80225d6 <memcpy+0x56>
 80225be:	697a      	ldr	r2, [r7, #20]
 80225c0:	693b      	ldr	r3, [r7, #16]
 80225c2:	429a      	cmp	r2, r3
 80225c4:	d207      	bcs.n	80225d6 <memcpy+0x56>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 80225c6:	697a      	ldr	r2, [r7, #20]
 80225c8:	1c53      	adds	r3, r2, #1
 80225ca:	617b      	str	r3, [r7, #20]
 80225cc:	69bb      	ldr	r3, [r7, #24]
 80225ce:	1c59      	adds	r1, r3, #1
 80225d0:	61b9      	str	r1, [r7, #24]
 80225d2:	7812      	ldrb	r2, [r2, #0]
 80225d4:	701a      	strb	r2, [r3, #0]
		}
		/* 16-bit aligned here */
		if( ( ulAlignBits & 0x02 ) != 0 )
 80225d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80225d8:	f003 0302 	and.w	r3, r3, #2
 80225dc:	2b00      	cmp	r3, #0
 80225de:	d01f      	beq.n	8022620 <memcpy+0xa0>
		{
			uint32_t extra = pxLastSource.uint32 & 0x01ul;
 80225e0:	693b      	ldr	r3, [r7, #16]
 80225e2:	f003 0301 	and.w	r3, r3, #1
 80225e6:	61fb      	str	r3, [r7, #28]

			pxLastSource.uint32 &= ~0x01ul;
 80225e8:	693b      	ldr	r3, [r7, #16]
 80225ea:	f023 0301 	bic.w	r3, r3, #1
 80225ee:	613b      	str	r3, [r7, #16]

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 80225f0:	e00a      	b.n	8022608 <memcpy+0x88>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 80225f2:	697a      	ldr	r2, [r7, #20]
 80225f4:	1c93      	adds	r3, r2, #2
 80225f6:	617b      	str	r3, [r7, #20]
 80225f8:	69bb      	ldr	r3, [r7, #24]
 80225fa:	1c99      	adds	r1, r3, #2
 80225fc:	61b9      	str	r1, [r7, #24]
 80225fe:	8812      	ldrh	r2, [r2, #0]
 8022600:	801a      	strh	r2, [r3, #0]
					ulBytes -= 2;
 8022602:	687b      	ldr	r3, [r7, #4]
 8022604:	3b02      	subs	r3, #2
 8022606:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8022608:	697a      	ldr	r2, [r7, #20]
 802260a:	693b      	ldr	r3, [r7, #16]
 802260c:	429a      	cmp	r2, r3
 802260e:	d202      	bcs.n	8022616 <memcpy+0x96>
 8022610:	687b      	ldr	r3, [r7, #4]
 8022612:	2b00      	cmp	r3, #0
 8022614:	d1ed      	bne.n	80225f2 <memcpy+0x72>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8022616:	693a      	ldr	r2, [r7, #16]
 8022618:	69fb      	ldr	r3, [r7, #28]
 802261a:	4313      	orrs	r3, r2
 802261c:	613b      	str	r3, [r7, #16]
 802261e:	e0ae      	b.n	802277e <memcpy+0x1fe>
		else
		{
			int iCount;
			uint32_t extra;

			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 8022620:	697b      	ldr	r3, [r7, #20]
 8022622:	f003 0302 	and.w	r3, r3, #2
 8022626:	2b00      	cmp	r3, #0
 8022628:	d00c      	beq.n	8022644 <memcpy+0xc4>
 802262a:	697a      	ldr	r2, [r7, #20]
 802262c:	693b      	ldr	r3, [r7, #16]
 802262e:	3b01      	subs	r3, #1
 8022630:	429a      	cmp	r2, r3
 8022632:	d207      	bcs.n	8022644 <memcpy+0xc4>
			{
				*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8022634:	697a      	ldr	r2, [r7, #20]
 8022636:	1c93      	adds	r3, r2, #2
 8022638:	617b      	str	r3, [r7, #20]
 802263a:	69bb      	ldr	r3, [r7, #24]
 802263c:	1c99      	adds	r1, r3, #2
 802263e:	61b9      	str	r1, [r7, #24]
 8022640:	8812      	ldrh	r2, [r2, #0]
 8022642:	801a      	strh	r2, [r3, #0]
			}
			// 32-bit aligned
			extra = pxLastSource.uint32 & 0x03ul;
 8022644:	693b      	ldr	r3, [r7, #16]
 8022646:	f003 0303 	and.w	r3, r3, #3
 802264a:	623b      	str	r3, [r7, #32]

			pxLastSource.uint32 &= ~0x03ul;
 802264c:	693b      	ldr	r3, [r7, #16]
 802264e:	f023 0303 	bic.w	r3, r3, #3
 8022652:	613b      	str	r3, [r7, #16]
			iCount = pxLastSource.u32 - pxSource.u32;
 8022654:	693a      	ldr	r2, [r7, #16]
 8022656:	697b      	ldr	r3, [r7, #20]
 8022658:	1ad3      	subs	r3, r2, r3
 802265a:	109b      	asrs	r3, r3, #2
 802265c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 802265e:	e02f      	b.n	80226c0 <memcpy+0x140>
			{
				/* Copy 32 bytes */
				/* Normally it doesn't make sense to make this list much longer because
				the indexes will get too big, and therefore longer instructions are needed. */
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 8022660:	697a      	ldr	r2, [r7, #20]
 8022662:	69bb      	ldr	r3, [r7, #24]
 8022664:	6812      	ldr	r2, [r2, #0]
 8022666:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 8022668:	697a      	ldr	r2, [r7, #20]
 802266a:	69bb      	ldr	r3, [r7, #24]
 802266c:	3304      	adds	r3, #4
 802266e:	6852      	ldr	r2, [r2, #4]
 8022670:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 2 ] = pxSource.u32[ 2 ];
 8022672:	697a      	ldr	r2, [r7, #20]
 8022674:	69bb      	ldr	r3, [r7, #24]
 8022676:	3308      	adds	r3, #8
 8022678:	6892      	ldr	r2, [r2, #8]
 802267a:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 3 ] = pxSource.u32[ 3 ];
 802267c:	697a      	ldr	r2, [r7, #20]
 802267e:	69bb      	ldr	r3, [r7, #24]
 8022680:	330c      	adds	r3, #12
 8022682:	68d2      	ldr	r2, [r2, #12]
 8022684:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 4 ] = pxSource.u32[ 4 ];
 8022686:	697a      	ldr	r2, [r7, #20]
 8022688:	69bb      	ldr	r3, [r7, #24]
 802268a:	3310      	adds	r3, #16
 802268c:	6912      	ldr	r2, [r2, #16]
 802268e:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 5 ] = pxSource.u32[ 5 ];
 8022690:	697a      	ldr	r2, [r7, #20]
 8022692:	69bb      	ldr	r3, [r7, #24]
 8022694:	3314      	adds	r3, #20
 8022696:	6952      	ldr	r2, [r2, #20]
 8022698:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 6 ] = pxSource.u32[ 6 ];
 802269a:	697a      	ldr	r2, [r7, #20]
 802269c:	69bb      	ldr	r3, [r7, #24]
 802269e:	3318      	adds	r3, #24
 80226a0:	6992      	ldr	r2, [r2, #24]
 80226a2:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 7 ] = pxSource.u32[ 7 ];
 80226a4:	697a      	ldr	r2, [r7, #20]
 80226a6:	69bb      	ldr	r3, [r7, #24]
 80226a8:	331c      	adds	r3, #28
 80226aa:	69d2      	ldr	r2, [r2, #28]
 80226ac:	601a      	str	r2, [r3, #0]
				pxDestination.u32 += 8;
 80226ae:	69bb      	ldr	r3, [r7, #24]
 80226b0:	3320      	adds	r3, #32
 80226b2:	61bb      	str	r3, [r7, #24]
				pxSource.u32 += 8;
 80226b4:	697b      	ldr	r3, [r7, #20]
 80226b6:	3320      	adds	r3, #32
 80226b8:	617b      	str	r3, [r7, #20]
				iCount -= 8;
 80226ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80226bc:	3b08      	subs	r3, #8
 80226be:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 80226c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80226c2:	2b08      	cmp	r3, #8
 80226c4:	dccc      	bgt.n	8022660 <memcpy+0xe0>
			}

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 80226c6:	e00a      	b.n	80226de <memcpy+0x15e>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 80226c8:	697a      	ldr	r2, [r7, #20]
 80226ca:	1d13      	adds	r3, r2, #4
 80226cc:	617b      	str	r3, [r7, #20]
 80226ce:	69bb      	ldr	r3, [r7, #24]
 80226d0:	1d19      	adds	r1, r3, #4
 80226d2:	61b9      	str	r1, [r7, #24]
 80226d4:	6812      	ldr	r2, [r2, #0]
 80226d6:	601a      	str	r2, [r3, #0]
					ulBytes -= 4;
 80226d8:	687b      	ldr	r3, [r7, #4]
 80226da:	3b04      	subs	r3, #4
 80226dc:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 80226de:	697a      	ldr	r2, [r7, #20]
 80226e0:	693b      	ldr	r3, [r7, #16]
 80226e2:	429a      	cmp	r2, r3
 80226e4:	d202      	bcs.n	80226ec <memcpy+0x16c>
 80226e6:	687b      	ldr	r3, [r7, #4]
 80226e8:	2b00      	cmp	r3, #0
 80226ea:	d1ed      	bne.n	80226c8 <memcpy+0x148>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 80226ec:	693a      	ldr	r2, [r7, #16]
 80226ee:	6a3b      	ldr	r3, [r7, #32]
 80226f0:	4313      	orrs	r3, r2
 80226f2:	613b      	str	r3, [r7, #16]
 80226f4:	e043      	b.n	802277e <memcpy+0x1fe>
	}
	else
	{
		/* This it the worst alignment, e.g. 0x80000 and 0xA0001,
		only 8-bits copying is possible. */
		int iCount = pxLastSource.u8 - pxSource.u8;
 80226f6:	693a      	ldr	r2, [r7, #16]
 80226f8:	697b      	ldr	r3, [r7, #20]
 80226fa:	1ad3      	subs	r3, r2, r3
 80226fc:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 80226fe:	e02f      	b.n	8022760 <memcpy+0x1e0>
		{
			/* Copy 8 bytes the hard way */
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 8022700:	697a      	ldr	r2, [r7, #20]
 8022702:	69bb      	ldr	r3, [r7, #24]
 8022704:	7812      	ldrb	r2, [r2, #0]
 8022706:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 1 ] = pxSource.u8[ 1 ];
 8022708:	697a      	ldr	r2, [r7, #20]
 802270a:	69bb      	ldr	r3, [r7, #24]
 802270c:	3301      	adds	r3, #1
 802270e:	7852      	ldrb	r2, [r2, #1]
 8022710:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 2 ] = pxSource.u8[ 2 ];
 8022712:	697a      	ldr	r2, [r7, #20]
 8022714:	69bb      	ldr	r3, [r7, #24]
 8022716:	3302      	adds	r3, #2
 8022718:	7892      	ldrb	r2, [r2, #2]
 802271a:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 3 ] = pxSource.u8[ 3 ];
 802271c:	697a      	ldr	r2, [r7, #20]
 802271e:	69bb      	ldr	r3, [r7, #24]
 8022720:	3303      	adds	r3, #3
 8022722:	78d2      	ldrb	r2, [r2, #3]
 8022724:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 4 ] = pxSource.u8[ 4 ];
 8022726:	697a      	ldr	r2, [r7, #20]
 8022728:	69bb      	ldr	r3, [r7, #24]
 802272a:	3304      	adds	r3, #4
 802272c:	7912      	ldrb	r2, [r2, #4]
 802272e:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 5 ] = pxSource.u8[ 5 ];
 8022730:	697a      	ldr	r2, [r7, #20]
 8022732:	69bb      	ldr	r3, [r7, #24]
 8022734:	3305      	adds	r3, #5
 8022736:	7952      	ldrb	r2, [r2, #5]
 8022738:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 6 ] = pxSource.u8[ 6 ];
 802273a:	697a      	ldr	r2, [r7, #20]
 802273c:	69bb      	ldr	r3, [r7, #24]
 802273e:	3306      	adds	r3, #6
 8022740:	7992      	ldrb	r2, [r2, #6]
 8022742:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 7 ] = pxSource.u8[ 7 ];
 8022744:	697a      	ldr	r2, [r7, #20]
 8022746:	69bb      	ldr	r3, [r7, #24]
 8022748:	3307      	adds	r3, #7
 802274a:	79d2      	ldrb	r2, [r2, #7]
 802274c:	701a      	strb	r2, [r3, #0]
			pxDestination.u8 += 8;
 802274e:	69bb      	ldr	r3, [r7, #24]
 8022750:	3308      	adds	r3, #8
 8022752:	61bb      	str	r3, [r7, #24]
			pxSource.u8 += 8;
 8022754:	697b      	ldr	r3, [r7, #20]
 8022756:	3308      	adds	r3, #8
 8022758:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 802275a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802275c:	3b08      	subs	r3, #8
 802275e:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8022760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022762:	2b08      	cmp	r3, #8
 8022764:	dccc      	bgt.n	8022700 <memcpy+0x180>
		}
	}
	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8022766:	e00a      	b.n	802277e <memcpy+0x1fe>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
 8022768:	697a      	ldr	r2, [r7, #20]
 802276a:	1c53      	adds	r3, r2, #1
 802276c:	617b      	str	r3, [r7, #20]
 802276e:	69bb      	ldr	r3, [r7, #24]
 8022770:	1c59      	adds	r1, r3, #1
 8022772:	61b9      	str	r1, [r7, #24]
 8022774:	7812      	ldrb	r2, [r2, #0]
 8022776:	701a      	strb	r2, [r3, #0]
			ulBytes--;
 8022778:	687b      	ldr	r3, [r7, #4]
 802277a:	3b01      	subs	r3, #1
 802277c:	607b      	str	r3, [r7, #4]
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 802277e:	697a      	ldr	r2, [r7, #20]
 8022780:	693b      	ldr	r3, [r7, #16]
 8022782:	429a      	cmp	r2, r3
 8022784:	d202      	bcs.n	802278c <memcpy+0x20c>
 8022786:	687b      	ldr	r3, [r7, #4]
 8022788:	2b00      	cmp	r3, #0
 802278a:	d1ed      	bne.n	8022768 <memcpy+0x1e8>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
		}
	}
	#endif
	return pvDest;
 802278c:	68fb      	ldr	r3, [r7, #12]
}
 802278e:	4618      	mov	r0, r3
 8022790:	3734      	adds	r7, #52	@ 0x34
 8022792:	46bd      	mov	sp, r7
 8022794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022798:	4770      	bx	lr

0802279a <memset>:
/*-----------------------------------------------------------*/


#if( SIMPLE_MEMSET == 0 )
void *memset(void *pvDest, int iValue, size_t ulBytes)
{
 802279a:	b480      	push	{r7}
 802279c:	b08b      	sub	sp, #44	@ 0x2c
 802279e:	af00      	add	r7, sp, #0
 80227a0:	60f8      	str	r0, [r7, #12]
 80227a2:	60b9      	str	r1, [r7, #8]
 80227a4:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxLast;
uint32_t ulPattern;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 80227a6:	68fb      	ldr	r3, [r7, #12]
 80227a8:	617b      	str	r3, [r7, #20]
	pxLast.u8 = pxDestination.u8 + ulBytes;
 80227aa:	697a      	ldr	r2, [r7, #20]
 80227ac:	687b      	ldr	r3, [r7, #4]
 80227ae:	4413      	add	r3, r2
 80227b0:	613b      	str	r3, [r7, #16]

	if( ulBytes >= 8 )
 80227b2:	687b      	ldr	r3, [r7, #4]
 80227b4:	2b07      	cmp	r3, #7
 80227b6:	d97b      	bls.n	80228b0 <memset+0x116>
	{
	uint32_t ulAlignBits;
	uint32_t ulExtra;
	int iCount;

		ulPattern = iValue & 0xff;
 80227b8:	68bb      	ldr	r3, [r7, #8]
 80227ba:	b2db      	uxtb	r3, r3
 80227bc:	61fb      	str	r3, [r7, #28]
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
 80227be:	69fb      	ldr	r3, [r7, #28]
 80227c0:	021a      	lsls	r2, r3, #8
 80227c2:	69fb      	ldr	r3, [r7, #28]
 80227c4:	041b      	lsls	r3, r3, #16
 80227c6:	431a      	orrs	r2, r3
 80227c8:	69fb      	ldr	r3, [r7, #28]
 80227ca:	061b      	lsls	r3, r3, #24
 80227cc:	4313      	orrs	r3, r2
 80227ce:	69fa      	ldr	r2, [r7, #28]
 80227d0:	4313      	orrs	r3, r2
 80227d2:	61fb      	str	r3, [r7, #28]
		ulAlignBits = ( pxDestination.uint32 & 0x03 );
 80227d4:	697b      	ldr	r3, [r7, #20]
 80227d6:	f003 0303 	and.w	r3, r3, #3
 80227da:	627b      	str	r3, [r7, #36]	@ 0x24
		if( ulAlignBits != 0 )
 80227dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227de:	2b00      	cmp	r3, #0
 80227e0:	d010      	beq.n	8022804 <memset+0x6a>
		{
			ulAlignBits = 4 - ulAlignBits;
 80227e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227e4:	f1c3 0304 	rsb	r3, r3, #4
 80227e8:	627b      	str	r3, [r7, #36]	@ 0x24
			while( ulAlignBits-- > 0 )
 80227ea:	e006      	b.n	80227fa <memset+0x60>
			{
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 80227ec:	697b      	ldr	r3, [r7, #20]
 80227ee:	68ba      	ldr	r2, [r7, #8]
 80227f0:	b2d2      	uxtb	r2, r2
 80227f2:	701a      	strb	r2, [r3, #0]
				pxDestination.u8++;
 80227f4:	697b      	ldr	r3, [r7, #20]
 80227f6:	3301      	adds	r3, #1
 80227f8:	617b      	str	r3, [r7, #20]
			while( ulAlignBits-- > 0 )
 80227fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227fc:	1e5a      	subs	r2, r3, #1
 80227fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8022800:	2b00      	cmp	r3, #0
 8022802:	d1f3      	bne.n	80227ec <memset+0x52>
			}
		}
		/* Strip-off the last 1 up-to 3 bytes because they can not be set in a 32-bit
		memory instruction. */
		ulExtra = pxLast.uint32 & 0x03ul;
 8022804:	693b      	ldr	r3, [r7, #16]
 8022806:	f003 0303 	and.w	r3, r3, #3
 802280a:	61bb      	str	r3, [r7, #24]

		pxLast.uint32 &= ~0x03ul;
 802280c:	693b      	ldr	r3, [r7, #16]
 802280e:	f023 0303 	bic.w	r3, r3, #3
 8022812:	613b      	str	r3, [r7, #16]
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 8022814:	693a      	ldr	r2, [r7, #16]
 8022816:	697b      	ldr	r3, [r7, #20]
 8022818:	1ad3      	subs	r3, r2, r3
 802281a:	109b      	asrs	r3, r3, #2
 802281c:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 802281e:	e024      	b.n	802286a <memset+0xd0>
		{
			/* Set 8 * 4 bytes and save some increments */
			/* It won't make sense to make this list much longer than 8 assignments. */
			pxDestination.u32[ 0 ] = ulPattern;
 8022820:	697b      	ldr	r3, [r7, #20]
 8022822:	69fa      	ldr	r2, [r7, #28]
 8022824:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 1 ] = ulPattern;
 8022826:	697b      	ldr	r3, [r7, #20]
 8022828:	3304      	adds	r3, #4
 802282a:	69fa      	ldr	r2, [r7, #28]
 802282c:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 2 ] = ulPattern;
 802282e:	697b      	ldr	r3, [r7, #20]
 8022830:	3308      	adds	r3, #8
 8022832:	69fa      	ldr	r2, [r7, #28]
 8022834:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 3 ] = ulPattern;
 8022836:	697b      	ldr	r3, [r7, #20]
 8022838:	330c      	adds	r3, #12
 802283a:	69fa      	ldr	r2, [r7, #28]
 802283c:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 4 ] = ulPattern;
 802283e:	697b      	ldr	r3, [r7, #20]
 8022840:	3310      	adds	r3, #16
 8022842:	69fa      	ldr	r2, [r7, #28]
 8022844:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 5 ] = ulPattern;
 8022846:	697b      	ldr	r3, [r7, #20]
 8022848:	3314      	adds	r3, #20
 802284a:	69fa      	ldr	r2, [r7, #28]
 802284c:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 6 ] = ulPattern;
 802284e:	697b      	ldr	r3, [r7, #20]
 8022850:	3318      	adds	r3, #24
 8022852:	69fa      	ldr	r2, [r7, #28]
 8022854:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 7 ] = ulPattern;
 8022856:	697b      	ldr	r3, [r7, #20]
 8022858:	331c      	adds	r3, #28
 802285a:	69fa      	ldr	r2, [r7, #28]
 802285c:	601a      	str	r2, [r3, #0]
			pxDestination.u32 += 8;
 802285e:	697b      	ldr	r3, [r7, #20]
 8022860:	3320      	adds	r3, #32
 8022862:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8022864:	6a3b      	ldr	r3, [r7, #32]
 8022866:	3b08      	subs	r3, #8
 8022868:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 802286a:	6a3b      	ldr	r3, [r7, #32]
 802286c:	2b08      	cmp	r3, #8
 802286e:	dcd7      	bgt.n	8022820 <memset+0x86>
		}

		#if( MEMCPY_USES_LOOP_COUNTER != 0 )
		{
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8022870:	e008      	b.n	8022884 <memset+0xea>
			{
				pxDestination.u32[0] = ulPattern;
 8022872:	697b      	ldr	r3, [r7, #20]
 8022874:	69fa      	ldr	r2, [r7, #28]
 8022876:	601a      	str	r2, [r3, #0]
				pxDestination.u32++;
 8022878:	697b      	ldr	r3, [r7, #20]
 802287a:	3304      	adds	r3, #4
 802287c:	617b      	str	r3, [r7, #20]
				ulBytes += 4;
 802287e:	687b      	ldr	r3, [r7, #4]
 8022880:	3304      	adds	r3, #4
 8022882:	607b      	str	r3, [r7, #4]
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8022884:	697a      	ldr	r2, [r7, #20]
 8022886:	693b      	ldr	r3, [r7, #16]
 8022888:	429a      	cmp	r2, r3
 802288a:	d202      	bcs.n	8022892 <memset+0xf8>
 802288c:	687b      	ldr	r3, [r7, #4]
 802288e:	2b00      	cmp	r3, #0
 8022890:	d1ef      	bne.n	8022872 <memset+0xd8>
				pxDestination.u32[0] = ulPattern;
				pxDestination.u32++;
			}
		}
		#endif
		pxLast.uint32 |= ulExtra;
 8022892:	693a      	ldr	r2, [r7, #16]
 8022894:	69bb      	ldr	r3, [r7, #24]
 8022896:	4313      	orrs	r3, r2
 8022898:	613b      	str	r3, [r7, #16]
	}

	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 802289a:	e009      	b.n	80228b0 <memset+0x116>
		{
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
 802289c:	697b      	ldr	r3, [r7, #20]
 802289e:	68ba      	ldr	r2, [r7, #8]
 80228a0:	b2d2      	uxtb	r2, r2
 80228a2:	701a      	strb	r2, [r3, #0]
			pxDestination.u8++;
 80228a4:	697b      	ldr	r3, [r7, #20]
 80228a6:	3301      	adds	r3, #1
 80228a8:	617b      	str	r3, [r7, #20]
			ulBytes++;
 80228aa:	687b      	ldr	r3, [r7, #4]
 80228ac:	3301      	adds	r3, #1
 80228ae:	607b      	str	r3, [r7, #4]
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 80228b0:	697a      	ldr	r2, [r7, #20]
 80228b2:	693b      	ldr	r3, [r7, #16]
 80228b4:	429a      	cmp	r2, r3
 80228b6:	d202      	bcs.n	80228be <memset+0x124>
 80228b8:	687b      	ldr	r3, [r7, #4]
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	d1ee      	bne.n	802289c <memset+0x102>
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
			pxDestination.u8++;
		}
	}
	#endif
	return pvDest;
 80228be:	68fb      	ldr	r3, [r7, #12]
}
 80228c0:	4618      	mov	r0, r3
 80228c2:	372c      	adds	r7, #44	@ 0x2c
 80228c4:	46bd      	mov	sp, r7
 80228c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228ca:	4770      	bx	lr

080228cc <xApplicationMemoryPermissions>:
extern void vOutputChar( const char cChar, const TickType_t xTicksToWait  );

#ifdef __GNUC__

__attribute__((weak)) BaseType_t xApplicationMemoryPermissions( uint32_t aAddress )
{
 80228cc:	b480      	push	{r7}
 80228ce:	b083      	sub	sp, #12
 80228d0:	af00      	add	r7, sp, #0
 80228d2:	6078      	str	r0, [r7, #4]
	( void ) aAddress;
	/* Return 1 for readable, 2 for writeable, 3 for both. */
	return 0x03;
 80228d4:	2303      	movs	r3, #3
}
 80228d6:	4618      	mov	r0, r3
 80228d8:	370c      	adds	r7, #12
 80228da:	46bd      	mov	sp, r7
 80228dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228e0:	4770      	bx	lr

080228e2 <vOutputChar>:


__attribute__((weak)) void vOutputChar( const char cChar, const TickType_t xTicksToWait  )
{
 80228e2:	b480      	push	{r7}
 80228e4:	b083      	sub	sp, #12
 80228e6:	af00      	add	r7, sp, #0
 80228e8:	4603      	mov	r3, r0
 80228ea:	6039      	str	r1, [r7, #0]
 80228ec:	71fb      	strb	r3, [r7, #7]
	( void ) cChar;
	( void ) xTicksToWait;
	/* Do nothing. */
}
 80228ee:	bf00      	nop
 80228f0:	370c      	adds	r7, #12
 80228f2:	46bd      	mov	sp, r7
 80228f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228f8:	4770      	bx	lr

080228fa <strbuf_init>:
#else
	static const _U32 u32 = { 0, 1, 2, 3 };
#endif

static void strbuf_init( struct SStringBuf *apStr, char *apBuf, const char *apMaxStr )
{
 80228fa:	b580      	push	{r7, lr}
 80228fc:	b084      	sub	sp, #16
 80228fe:	af00      	add	r7, sp, #0
 8022900:	60f8      	str	r0, [r7, #12]
 8022902:	60b9      	str	r1, [r7, #8]
 8022904:	607a      	str	r2, [r7, #4]
	apStr->str = apBuf;
 8022906:	68fb      	ldr	r3, [r7, #12]
 8022908:	68ba      	ldr	r2, [r7, #8]
 802290a:	601a      	str	r2, [r3, #0]
	apStr->orgStr = apBuf;
 802290c:	68fb      	ldr	r3, [r7, #12]
 802290e:	68ba      	ldr	r2, [r7, #8]
 8022910:	605a      	str	r2, [r3, #4]
	apStr->nulPos = apMaxStr-1;
 8022912:	687b      	ldr	r3, [r7, #4]
 8022914:	1e5a      	subs	r2, r3, #1
 8022916:	68fb      	ldr	r3, [r7, #12]
 8022918:	609a      	str	r2, [r3, #8]
	apStr->curLen = 0;
 802291a:	68fb      	ldr	r3, [r7, #12]
 802291c:	2200      	movs	r2, #0
 802291e:	60da      	str	r2, [r3, #12]

	memset( &apStr->flags, '\0', sizeof apStr->flags );
 8022920:	68fb      	ldr	r3, [r7, #12]
 8022922:	3310      	adds	r3, #16
 8022924:	2210      	movs	r2, #16
 8022926:	2100      	movs	r1, #0
 8022928:	4618      	mov	r0, r3
 802292a:	f7ff ff36 	bl	802279a <memset>
}
 802292e:	bf00      	nop
 8022930:	3710      	adds	r7, #16
 8022932:	46bd      	mov	sp, r7
 8022934:	bd80      	pop	{r7, pc}

08022936 <strbuf_printchar>:
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 8022936:	b580      	push	{r7, lr}
 8022938:	b082      	sub	sp, #8
 802293a:	af00      	add	r7, sp, #0
 802293c:	6078      	str	r0, [r7, #4]
 802293e:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8022940:	687b      	ldr	r3, [r7, #4]
 8022942:	681b      	ldr	r3, [r3, #0]
 8022944:	2b00      	cmp	r3, #0
 8022946:	d10d      	bne.n	8022964 <strbuf_printchar+0x2e>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8022948:	683b      	ldr	r3, [r7, #0]
 802294a:	b2db      	uxtb	r3, r3
 802294c:	2214      	movs	r2, #20
 802294e:	4611      	mov	r1, r2
 8022950:	4618      	mov	r0, r3
 8022952:	f7ff ffc6 	bl	80228e2 <vOutputChar>
		apStr->curLen++;
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	68db      	ldr	r3, [r3, #12]
 802295a:	1c5a      	adds	r2, r3, #1
 802295c:	687b      	ldr	r3, [r7, #4]
 802295e:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022960:	2301      	movs	r3, #1
 8022962:	e022      	b.n	80229aa <strbuf_printchar+0x74>
	}
	if( apStr->str < apStr->nulPos )
 8022964:	687b      	ldr	r3, [r7, #4]
 8022966:	681a      	ldr	r2, [r3, #0]
 8022968:	687b      	ldr	r3, [r7, #4]
 802296a:	689b      	ldr	r3, [r3, #8]
 802296c:	429a      	cmp	r2, r3
 802296e:	d20e      	bcs.n	802298e <strbuf_printchar+0x58>
	{
		*( apStr->str++ ) = c;
 8022970:	687b      	ldr	r3, [r7, #4]
 8022972:	681b      	ldr	r3, [r3, #0]
 8022974:	1c59      	adds	r1, r3, #1
 8022976:	687a      	ldr	r2, [r7, #4]
 8022978:	6011      	str	r1, [r2, #0]
 802297a:	683a      	ldr	r2, [r7, #0]
 802297c:	b2d2      	uxtb	r2, r2
 802297e:	701a      	strb	r2, [r3, #0]
		apStr->curLen++;
 8022980:	687b      	ldr	r3, [r7, #4]
 8022982:	68db      	ldr	r3, [r3, #12]
 8022984:	1c5a      	adds	r2, r3, #1
 8022986:	687b      	ldr	r3, [r7, #4]
 8022988:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 802298a:	2301      	movs	r3, #1
 802298c:	e00d      	b.n	80229aa <strbuf_printchar+0x74>
	}
	if( apStr->str == apStr->nulPos )
 802298e:	687b      	ldr	r3, [r7, #4]
 8022990:	681a      	ldr	r2, [r3, #0]
 8022992:	687b      	ldr	r3, [r7, #4]
 8022994:	689b      	ldr	r3, [r3, #8]
 8022996:	429a      	cmp	r2, r3
 8022998:	d106      	bne.n	80229a8 <strbuf_printchar+0x72>
	{
		*( apStr->str++ ) = '\0';
 802299a:	687b      	ldr	r3, [r7, #4]
 802299c:	681b      	ldr	r3, [r3, #0]
 802299e:	1c59      	adds	r1, r3, #1
 80229a0:	687a      	ldr	r2, [r7, #4]
 80229a2:	6011      	str	r1, [r2, #0]
 80229a4:	2200      	movs	r2, #0
 80229a6:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 80229a8:	2300      	movs	r3, #0
}
 80229aa:	4618      	mov	r0, r3
 80229ac:	3708      	adds	r7, #8
 80229ae:	46bd      	mov	sp, r7
 80229b0:	bd80      	pop	{r7, pc}

080229b2 <strbuf_printchar_inline>:
/*-----------------------------------------------------------*/

static __inline BaseType_t strbuf_printchar_inline( struct SStringBuf *apStr, int c )
{
 80229b2:	b580      	push	{r7, lr}
 80229b4:	b082      	sub	sp, #8
 80229b6:	af00      	add	r7, sp, #0
 80229b8:	6078      	str	r0, [r7, #4]
 80229ba:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 80229bc:	687b      	ldr	r3, [r7, #4]
 80229be:	681b      	ldr	r3, [r3, #0]
 80229c0:	2b00      	cmp	r3, #0
 80229c2:	d112      	bne.n	80229ea <strbuf_printchar_inline+0x38>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 80229c4:	683b      	ldr	r3, [r7, #0]
 80229c6:	b2db      	uxtb	r3, r3
 80229c8:	2214      	movs	r2, #20
 80229ca:	4611      	mov	r1, r2
 80229cc:	4618      	mov	r0, r3
 80229ce:	f7ff ff88 	bl	80228e2 <vOutputChar>
		if( c == 0 )
 80229d2:	683b      	ldr	r3, [r7, #0]
 80229d4:	2b00      	cmp	r3, #0
 80229d6:	d101      	bne.n	80229dc <strbuf_printchar_inline+0x2a>
		{
			return pdFALSE;
 80229d8:	2300      	movs	r3, #0
 80229da:	e02e      	b.n	8022a3a <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 80229dc:	687b      	ldr	r3, [r7, #4]
 80229de:	68db      	ldr	r3, [r3, #12]
 80229e0:	1c5a      	adds	r2, r3, #1
 80229e2:	687b      	ldr	r3, [r7, #4]
 80229e4:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 80229e6:	2301      	movs	r3, #1
 80229e8:	e027      	b.n	8022a3a <strbuf_printchar_inline+0x88>
	}
	if( apStr->str < apStr->nulPos )
 80229ea:	687b      	ldr	r3, [r7, #4]
 80229ec:	681a      	ldr	r2, [r3, #0]
 80229ee:	687b      	ldr	r3, [r7, #4]
 80229f0:	689b      	ldr	r3, [r3, #8]
 80229f2:	429a      	cmp	r2, r3
 80229f4:	d213      	bcs.n	8022a1e <strbuf_printchar_inline+0x6c>
	{
		*(apStr->str++) = c;
 80229f6:	687b      	ldr	r3, [r7, #4]
 80229f8:	681b      	ldr	r3, [r3, #0]
 80229fa:	1c59      	adds	r1, r3, #1
 80229fc:	687a      	ldr	r2, [r7, #4]
 80229fe:	6011      	str	r1, [r2, #0]
 8022a00:	683a      	ldr	r2, [r7, #0]
 8022a02:	b2d2      	uxtb	r2, r2
 8022a04:	701a      	strb	r2, [r3, #0]
		if( c == 0 )
 8022a06:	683b      	ldr	r3, [r7, #0]
 8022a08:	2b00      	cmp	r3, #0
 8022a0a:	d101      	bne.n	8022a10 <strbuf_printchar_inline+0x5e>
		{
			return pdFALSE;
 8022a0c:	2300      	movs	r3, #0
 8022a0e:	e014      	b.n	8022a3a <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 8022a10:	687b      	ldr	r3, [r7, #4]
 8022a12:	68db      	ldr	r3, [r3, #12]
 8022a14:	1c5a      	adds	r2, r3, #1
 8022a16:	687b      	ldr	r3, [r7, #4]
 8022a18:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022a1a:	2301      	movs	r3, #1
 8022a1c:	e00d      	b.n	8022a3a <strbuf_printchar_inline+0x88>
	}
	if( apStr->str == apStr->nulPos )
 8022a1e:	687b      	ldr	r3, [r7, #4]
 8022a20:	681a      	ldr	r2, [r3, #0]
 8022a22:	687b      	ldr	r3, [r7, #4]
 8022a24:	689b      	ldr	r3, [r3, #8]
 8022a26:	429a      	cmp	r2, r3
 8022a28:	d106      	bne.n	8022a38 <strbuf_printchar_inline+0x86>
	{
		*( apStr->str++ ) = '\0';
 8022a2a:	687b      	ldr	r3, [r7, #4]
 8022a2c:	681b      	ldr	r3, [r3, #0]
 8022a2e:	1c59      	adds	r1, r3, #1
 8022a30:	687a      	ldr	r2, [r7, #4]
 8022a32:	6011      	str	r1, [r2, #0]
 8022a34:	2200      	movs	r2, #0
 8022a36:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8022a38:	2300      	movs	r3, #0
}
 8022a3a:	4618      	mov	r0, r3
 8022a3c:	3708      	adds	r7, #8
 8022a3e:	46bd      	mov	sp, r7
 8022a40:	bd80      	pop	{r7, pc}
	...

08022a44 <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 8022a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a46:	b085      	sub	sp, #20
 8022a48:	af00      	add	r7, sp, #0
 8022a4a:	6078      	str	r0, [r7, #4]
 8022a4c:	6039      	str	r1, [r7, #0]
	register int padchar = ' ';
 8022a4e:	2620      	movs	r6, #32
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 8022a50:	683b      	ldr	r3, [r7, #0]
 8022a52:	4618      	mov	r0, r3
 8022a54:	f7ff ff3a 	bl	80228cc <xApplicationMemoryPermissions>
 8022a58:	4603      	mov	r3, r0
 8022a5a:	2b00      	cmp	r3, #0
 8022a5c:	d101      	bne.n	8022a62 <prints+0x1e>
	{
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
 8022a5e:	4b4c      	ldr	r3, [pc, #304]	@ (8022b90 <prints+0x14c>)
 8022a60:	603b      	str	r3, [r7, #0]
	}

	if( apBuf->flags.width > 0 )
 8022a62:	687b      	ldr	r3, [r7, #4]
 8022a64:	695b      	ldr	r3, [r3, #20]
 8022a66:	2b00      	cmp	r3, #0
 8022a68:	dd1b      	ble.n	8022aa2 <prints+0x5e>
	{
		register int count = 0;
 8022a6a:	2400      	movs	r4, #0
		register const char *ptr;
		for( ptr = apString; *ptr; ++ptr )
 8022a6c:	683d      	ldr	r5, [r7, #0]
 8022a6e:	e001      	b.n	8022a74 <prints+0x30>
		{
			++count;
 8022a70:	3401      	adds	r4, #1
		for( ptr = apString; *ptr; ++ptr )
 8022a72:	3501      	adds	r5, #1
 8022a74:	782b      	ldrb	r3, [r5, #0]
 8022a76:	2b00      	cmp	r3, #0
 8022a78:	d1fa      	bne.n	8022a70 <prints+0x2c>
		}

		if( count >= apBuf->flags.width )
 8022a7a:	687b      	ldr	r3, [r7, #4]
 8022a7c:	695b      	ldr	r3, [r3, #20]
 8022a7e:	429c      	cmp	r4, r3
 8022a80:	db03      	blt.n	8022a8a <prints+0x46>
		{
			apBuf->flags.width = 0;
 8022a82:	687b      	ldr	r3, [r7, #4]
 8022a84:	2200      	movs	r2, #0
 8022a86:	615a      	str	r2, [r3, #20]
 8022a88:	e004      	b.n	8022a94 <prints+0x50>
		}
		else
		{
			apBuf->flags.width -= count;
 8022a8a:	687b      	ldr	r3, [r7, #4]
 8022a8c:	695b      	ldr	r3, [r3, #20]
 8022a8e:	1b1a      	subs	r2, r3, r4
 8022a90:	687b      	ldr	r3, [r7, #4]
 8022a92:	615a      	str	r2, [r3, #20]
		}

		if( apBuf->flags.pad & PAD_ZERO )
 8022a94:	687b      	ldr	r3, [r7, #4]
 8022a96:	7f1b      	ldrb	r3, [r3, #28]
 8022a98:	f003 0302 	and.w	r3, r3, #2
 8022a9c:	2b00      	cmp	r3, #0
 8022a9e:	d000      	beq.n	8022aa2 <prints+0x5e>
		{
			padchar = '0';
 8022aa0:	2630      	movs	r6, #48	@ 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 8022aa2:	687b      	ldr	r3, [r7, #4]
 8022aa4:	7f1b      	ldrb	r3, [r3, #28]
 8022aa6:	f003 0301 	and.w	r3, r3, #1
 8022aaa:	2b00      	cmp	r3, #0
 8022aac:	d112      	bne.n	8022ad4 <prints+0x90>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8022aae:	e00d      	b.n	8022acc <prints+0x88>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 8022ab0:	4631      	mov	r1, r6
 8022ab2:	6878      	ldr	r0, [r7, #4]
 8022ab4:	f7ff ff3f 	bl	8022936 <strbuf_printchar>
 8022ab8:	4603      	mov	r3, r0
 8022aba:	2b00      	cmp	r3, #0
 8022abc:	d101      	bne.n	8022ac2 <prints+0x7e>
			{
				return pdFALSE;
 8022abe:	2300      	movs	r3, #0
 8022ac0:	e062      	b.n	8022b88 <prints+0x144>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8022ac2:	687b      	ldr	r3, [r7, #4]
 8022ac4:	695b      	ldr	r3, [r3, #20]
 8022ac6:	1e5a      	subs	r2, r3, #1
 8022ac8:	687b      	ldr	r3, [r7, #4]
 8022aca:	615a      	str	r2, [r3, #20]
 8022acc:	687b      	ldr	r3, [r7, #4]
 8022ace:	695b      	ldr	r3, [r3, #20]
 8022ad0:	2b00      	cmp	r3, #0
 8022ad2:	dced      	bgt.n	8022ab0 <prints+0x6c>
			}
		}
	}
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 8022ad4:	687b      	ldr	r3, [r7, #4]
 8022ad6:	7f9b      	ldrb	r3, [r3, #30]
 8022ad8:	f003 0302 	and.w	r3, r3, #2
 8022adc:	b2db      	uxtb	r3, r3
 8022ade:	2b00      	cmp	r3, #0
 8022ae0:	d036      	beq.n	8022b50 <prints+0x10c>
 8022ae2:	687b      	ldr	r3, [r7, #4]
 8022ae4:	7f1b      	ldrb	r3, [r3, #28]
 8022ae6:	2b01      	cmp	r3, #1
 8022ae8:	d132      	bne.n	8022b50 <prints+0x10c>
		/* The string to print represents an integer number.
		 * In this case, printLimit is the min number of digits to print
		 * If the length of the number to print is less than the min nb of i
		 * digits to display, we add 0 before printing the number
		 */
		len = strlen( apString );
 8022aea:	6838      	ldr	r0, [r7, #0]
 8022aec:	f7dd fc02 	bl	80002f4 <strlen>
 8022af0:	4603      	mov	r3, r0
 8022af2:	60bb      	str	r3, [r7, #8]

		if( len < apBuf->flags.printLimit )
 8022af4:	687b      	ldr	r3, [r7, #4]
 8022af6:	699b      	ldr	r3, [r3, #24]
 8022af8:	68ba      	ldr	r2, [r7, #8]
 8022afa:	429a      	cmp	r2, r3
 8022afc:	da28      	bge.n	8022b50 <prints+0x10c>
		{
			i = apBuf->flags.printLimit - len;
 8022afe:	687b      	ldr	r3, [r7, #4]
 8022b00:	699a      	ldr	r2, [r3, #24]
 8022b02:	68bb      	ldr	r3, [r7, #8]
 8022b04:	1ad3      	subs	r3, r2, r3
 8022b06:	60fb      	str	r3, [r7, #12]
			for( ; i; i-- )
 8022b08:	e00b      	b.n	8022b22 <prints+0xde>
			{
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 8022b0a:	2130      	movs	r1, #48	@ 0x30
 8022b0c:	6878      	ldr	r0, [r7, #4]
 8022b0e:	f7ff ff12 	bl	8022936 <strbuf_printchar>
 8022b12:	4603      	mov	r3, r0
 8022b14:	2b00      	cmp	r3, #0
 8022b16:	d101      	bne.n	8022b1c <prints+0xd8>
				{
					return pdFALSE;
 8022b18:	2300      	movs	r3, #0
 8022b1a:	e035      	b.n	8022b88 <prints+0x144>
			for( ; i; i-- )
 8022b1c:	68fb      	ldr	r3, [r7, #12]
 8022b1e:	3b01      	subs	r3, #1
 8022b20:	60fb      	str	r3, [r7, #12]
 8022b22:	68fb      	ldr	r3, [r7, #12]
 8022b24:	2b00      	cmp	r3, #0
 8022b26:	d1f0      	bne.n	8022b0a <prints+0xc6>
		}
	}
	/* The string to print is not the result of a number conversion to ascii.
	 * For a string, printLimit is the max number of characters to display
	 */
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8022b28:	e012      	b.n	8022b50 <prints+0x10c>
	{
		if( !strbuf_printchar( apBuf, *apString ) )
 8022b2a:	683b      	ldr	r3, [r7, #0]
 8022b2c:	781b      	ldrb	r3, [r3, #0]
 8022b2e:	4619      	mov	r1, r3
 8022b30:	6878      	ldr	r0, [r7, #4]
 8022b32:	f7ff ff00 	bl	8022936 <strbuf_printchar>
 8022b36:	4603      	mov	r3, r0
 8022b38:	2b00      	cmp	r3, #0
 8022b3a:	d101      	bne.n	8022b40 <prints+0xfc>
		{
			return pdFALSE;
 8022b3c:	2300      	movs	r3, #0
 8022b3e:	e023      	b.n	8022b88 <prints+0x144>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8022b40:	683b      	ldr	r3, [r7, #0]
 8022b42:	3301      	adds	r3, #1
 8022b44:	603b      	str	r3, [r7, #0]
 8022b46:	687b      	ldr	r3, [r7, #4]
 8022b48:	699b      	ldr	r3, [r3, #24]
 8022b4a:	1e5a      	subs	r2, r3, #1
 8022b4c:	687b      	ldr	r3, [r7, #4]
 8022b4e:	619a      	str	r2, [r3, #24]
 8022b50:	687b      	ldr	r3, [r7, #4]
 8022b52:	699b      	ldr	r3, [r3, #24]
 8022b54:	2b00      	cmp	r3, #0
 8022b56:	d012      	beq.n	8022b7e <prints+0x13a>
 8022b58:	683b      	ldr	r3, [r7, #0]
 8022b5a:	781b      	ldrb	r3, [r3, #0]
 8022b5c:	2b00      	cmp	r3, #0
 8022b5e:	d1e4      	bne.n	8022b2a <prints+0xe6>
		}
	}

	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8022b60:	e00d      	b.n	8022b7e <prints+0x13a>
	{
		if( !strbuf_printchar( apBuf, padchar ) )
 8022b62:	4631      	mov	r1, r6
 8022b64:	6878      	ldr	r0, [r7, #4]
 8022b66:	f7ff fee6 	bl	8022936 <strbuf_printchar>
 8022b6a:	4603      	mov	r3, r0
 8022b6c:	2b00      	cmp	r3, #0
 8022b6e:	d101      	bne.n	8022b74 <prints+0x130>
		{
			return pdFALSE;
 8022b70:	2300      	movs	r3, #0
 8022b72:	e009      	b.n	8022b88 <prints+0x144>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8022b74:	687b      	ldr	r3, [r7, #4]
 8022b76:	695b      	ldr	r3, [r3, #20]
 8022b78:	1e5a      	subs	r2, r3, #1
 8022b7a:	687b      	ldr	r3, [r7, #4]
 8022b7c:	615a      	str	r2, [r3, #20]
 8022b7e:	687b      	ldr	r3, [r7, #4]
 8022b80:	695b      	ldr	r3, [r3, #20]
 8022b82:	2b00      	cmp	r3, #0
 8022b84:	dced      	bgt.n	8022b62 <prints+0x11e>
		}
	}

	return pdTRUE;
 8022b86:	2301      	movs	r3, #1
}
 8022b88:	4618      	mov	r0, r3
 8022b8a:	3714      	adds	r7, #20
 8022b8c:	46bd      	mov	sp, r7
 8022b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022b90:	08027750 	.word	0x08027750

08022b94 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 8022b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022b98:	b087      	sub	sp, #28
 8022b9a:	af00      	add	r7, sp, #0
 8022b9c:	6078      	str	r0, [r7, #4]
 8022b9e:	6039      	str	r1, [r7, #0]
	char print_buf[ PRINT_BUF_LEN ];
	register char *s;
	register int t, neg = 0;
 8022ba0:	f04f 0900 	mov.w	r9, #0
	register unsigned int u = i;
 8022ba4:	683d      	ldr	r5, [r7, #0]
	register unsigned base = apBuf->flags.base;
 8022ba6:	687b      	ldr	r3, [r7, #4]
 8022ba8:	691b      	ldr	r3, [r3, #16]
 8022baa:	461e      	mov	r6, r3

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 8022bac:	687a      	ldr	r2, [r7, #4]
 8022bae:	7f93      	ldrb	r3, [r2, #30]
 8022bb0:	f043 0302 	orr.w	r3, r3, #2
 8022bb4:	7793      	strb	r3, [r2, #30]

	if( i == 0 )
 8022bb6:	683b      	ldr	r3, [r7, #0]
 8022bb8:	2b00      	cmp	r3, #0
 8022bba:	d10b      	bne.n	8022bd4 <printi+0x40>
	{
		print_buf[ 0 ] = '0';
 8022bbc:	2330      	movs	r3, #48	@ 0x30
 8022bbe:	733b      	strb	r3, [r7, #12]
		print_buf[ 1 ] = '\0';
 8022bc0:	2300      	movs	r3, #0
 8022bc2:	737b      	strb	r3, [r7, #13]
		return prints( apBuf, print_buf );
 8022bc4:	f107 030c 	add.w	r3, r7, #12
 8022bc8:	4619      	mov	r1, r3
 8022bca:	6878      	ldr	r0, [r7, #4]
 8022bcc:	f7ff ff3a 	bl	8022a44 <prints>
 8022bd0:	4603      	mov	r3, r0
 8022bd2:	e067      	b.n	8022ca4 <printi+0x110>
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 8022bd4:	687b      	ldr	r3, [r7, #4]
 8022bd6:	7f9b      	ldrb	r3, [r3, #30]
 8022bd8:	f003 0301 	and.w	r3, r3, #1
 8022bdc:	b2db      	uxtb	r3, r3
 8022bde:	2b00      	cmp	r3, #0
 8022be0:	d009      	beq.n	8022bf6 <printi+0x62>
 8022be2:	2e0a      	cmp	r6, #10
 8022be4:	d107      	bne.n	8022bf6 <printi+0x62>
 8022be6:	683b      	ldr	r3, [r7, #0]
 8022be8:	2b00      	cmp	r3, #0
 8022bea:	da04      	bge.n	8022bf6 <printi+0x62>
	{
		neg = 1;
 8022bec:	f04f 0901 	mov.w	r9, #1
		u = -i;
 8022bf0:	683b      	ldr	r3, [r7, #0]
 8022bf2:	425b      	negs	r3, r3
 8022bf4:	461d      	mov	r5, r3
	}

	s = print_buf + sizeof print_buf - 1;
 8022bf6:	f107 040c 	add.w	r4, r7, #12
 8022bfa:	340b      	adds	r4, #11

	*s = '\0';
 8022bfc:	2300      	movs	r3, #0
 8022bfe:	7023      	strb	r3, [r4, #0]
	switch( base )
 8022c00:	2e10      	cmp	r6, #16
 8022c02:	d017      	beq.n	8022c34 <printi+0xa0>
 8022c04:	2e10      	cmp	r6, #16
 8022c06:	d829      	bhi.n	8022c5c <printi+0xc8>
 8022c08:	2e08      	cmp	r6, #8
 8022c0a:	d024      	beq.n	8022c56 <printi+0xc2>
 8022c0c:	2e0a      	cmp	r6, #10
 8022c0e:	d022      	beq.n	8022c56 <printi+0xc2>
 8022c10:	e024      	b.n	8022c5c <printi+0xc8>
	{
	case 16:
		while( u != 0 )
		{
			t = u & 0xF;
 8022c12:	462b      	mov	r3, r5
 8022c14:	f003 080f 	and.w	r8, r3, #15
			if( t >= 10 )
 8022c18:	f1b8 0f09 	cmp.w	r8, #9
 8022c1c:	dd03      	ble.n	8022c26 <printi+0x92>
			{
				t += apBuf->flags.letBase - '0' - 10;
 8022c1e:	687b      	ldr	r3, [r7, #4]
 8022c20:	7f5b      	ldrb	r3, [r3, #29]
 8022c22:	3b3a      	subs	r3, #58	@ 0x3a
 8022c24:	4498      	add	r8, r3
			}
			*( --s ) = t + '0';
 8022c26:	fa5f f388 	uxtb.w	r3, r8
 8022c2a:	3c01      	subs	r4, #1
 8022c2c:	3330      	adds	r3, #48	@ 0x30
 8022c2e:	b2db      	uxtb	r3, r3
 8022c30:	7023      	strb	r3, [r4, #0]
			u >>= 4;
 8022c32:	092d      	lsrs	r5, r5, #4
		while( u != 0 )
 8022c34:	2d00      	cmp	r5, #0
 8022c36:	d1ec      	bne.n	8022c12 <printi+0x7e>
		}
		break;
 8022c38:	e010      	b.n	8022c5c <printi+0xc8>
	case 8:
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
 8022c3a:	fbb5 f3f6 	udiv	r3, r5, r6
 8022c3e:	fb06 f303 	mul.w	r3, r6, r3
 8022c42:	1aeb      	subs	r3, r5, r3
 8022c44:	4698      	mov	r8, r3
			*( --s ) = t + '0';
 8022c46:	fa5f f388 	uxtb.w	r3, r8
 8022c4a:	3c01      	subs	r4, #1
 8022c4c:	3330      	adds	r3, #48	@ 0x30
 8022c4e:	b2db      	uxtb	r3, r3
 8022c50:	7023      	strb	r3, [r4, #0]
			u /= base;
 8022c52:	fbb5 f5f6 	udiv	r5, r5, r6
		while( u )
 8022c56:	2d00      	cmp	r5, #0
 8022c58:	d1ef      	bne.n	8022c3a <printi+0xa6>
		}
		break;
 8022c5a:	bf00      	nop
		}
		break;
*/
	}

	if( neg != 0 )
 8022c5c:	f1b9 0f00 	cmp.w	r9, #0
 8022c60:	d01b      	beq.n	8022c9a <printi+0x106>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 8022c62:	687b      	ldr	r3, [r7, #4]
 8022c64:	695b      	ldr	r3, [r3, #20]
 8022c66:	2b00      	cmp	r3, #0
 8022c68:	d014      	beq.n	8022c94 <printi+0x100>
 8022c6a:	687b      	ldr	r3, [r7, #4]
 8022c6c:	7f1b      	ldrb	r3, [r3, #28]
 8022c6e:	f003 0302 	and.w	r3, r3, #2
 8022c72:	2b00      	cmp	r3, #0
 8022c74:	d00e      	beq.n	8022c94 <printi+0x100>
		{
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 8022c76:	212d      	movs	r1, #45	@ 0x2d
 8022c78:	6878      	ldr	r0, [r7, #4]
 8022c7a:	f7ff fe5c 	bl	8022936 <strbuf_printchar>
 8022c7e:	4603      	mov	r3, r0
 8022c80:	2b00      	cmp	r3, #0
 8022c82:	d101      	bne.n	8022c88 <printi+0xf4>
			{
				return pdFALSE;
 8022c84:	2300      	movs	r3, #0
 8022c86:	e00d      	b.n	8022ca4 <printi+0x110>
			}
			--apBuf->flags.width;
 8022c88:	687b      	ldr	r3, [r7, #4]
 8022c8a:	695b      	ldr	r3, [r3, #20]
 8022c8c:	1e5a      	subs	r2, r3, #1
 8022c8e:	687b      	ldr	r3, [r7, #4]
 8022c90:	615a      	str	r2, [r3, #20]
 8022c92:	e002      	b.n	8022c9a <printi+0x106>
		}
		else
		{
			*( --s ) = '-';
 8022c94:	3c01      	subs	r4, #1
 8022c96:	232d      	movs	r3, #45	@ 0x2d
 8022c98:	7023      	strb	r3, [r4, #0]
		}
	}

	return prints( apBuf, s );
 8022c9a:	4621      	mov	r1, r4
 8022c9c:	6878      	ldr	r0, [r7, #4]
 8022c9e:	f7ff fed1 	bl	8022a44 <prints>
 8022ca2:	4603      	mov	r3, r0
}
 8022ca4:	4618      	mov	r0, r3
 8022ca6:	371c      	adds	r7, #28
 8022ca8:	46bd      	mov	sp, r7
 8022caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08022cb0 <printIp>:
/*-----------------------------------------------------------*/

static BaseType_t printIp(struct SStringBuf *apBuf, unsigned i )
{
 8022cb0:	b590      	push	{r4, r7, lr}
 8022cb2:	b089      	sub	sp, #36	@ 0x24
 8022cb4:	af02      	add	r7, sp, #8
 8022cb6:	6078      	str	r0, [r7, #4]
 8022cb8:	6039      	str	r1, [r7, #0]
	char print_buf[16];

	sprintf( print_buf, "%u.%u.%u.%u",
 8022cba:	683b      	ldr	r3, [r7, #0]
 8022cbc:	0e19      	lsrs	r1, r3, #24
		i >> 24,
		( i >> 16 ) & 0xff,
 8022cbe:	683b      	ldr	r3, [r7, #0]
 8022cc0:	0c1b      	lsrs	r3, r3, #16
	sprintf( print_buf, "%u.%u.%u.%u",
 8022cc2:	b2dc      	uxtb	r4, r3
		( i >> 8 ) & 0xff,
 8022cc4:	683b      	ldr	r3, [r7, #0]
 8022cc6:	0a1b      	lsrs	r3, r3, #8
	sprintf( print_buf, "%u.%u.%u.%u",
 8022cc8:	b2db      	uxtb	r3, r3
 8022cca:	683a      	ldr	r2, [r7, #0]
 8022ccc:	b2d2      	uxtb	r2, r2
 8022cce:	f107 0008 	add.w	r0, r7, #8
 8022cd2:	9201      	str	r2, [sp, #4]
 8022cd4:	9300      	str	r3, [sp, #0]
 8022cd6:	4623      	mov	r3, r4
 8022cd8:	460a      	mov	r2, r1
 8022cda:	4909      	ldr	r1, [pc, #36]	@ (8022d00 <printIp+0x50>)
 8022cdc:	f000 fa81 	bl	80231e2 <sprintf>
		i & 0xff );
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 8022ce0:	687a      	ldr	r2, [r7, #4]
 8022ce2:	7f93      	ldrb	r3, [r2, #30]
 8022ce4:	f043 0302 	orr.w	r3, r3, #2
 8022ce8:	7793      	strb	r3, [r2, #30]
	prints( apBuf, print_buf );
 8022cea:	f107 0308 	add.w	r3, r7, #8
 8022cee:	4619      	mov	r1, r3
 8022cf0:	6878      	ldr	r0, [r7, #4]
 8022cf2:	f7ff fea7 	bl	8022a44 <prints>

	return pdTRUE;
 8022cf6:	2301      	movs	r3, #1
}
 8022cf8:	4618      	mov	r0, r3
 8022cfa:	371c      	adds	r7, #28
 8022cfc:	46bd      	mov	sp, r7
 8022cfe:	bd90      	pop	{r4, r7, pc}
 8022d00:	08027758 	.word	0x08027758

08022d04 <usNetToHost>:
/*-----------------------------------------------------------*/

static uint16_t usNetToHost( uint16_t usValue )
{
 8022d04:	b480      	push	{r7}
 8022d06:	b083      	sub	sp, #12
 8022d08:	af00      	add	r7, sp, #0
 8022d0a:	4603      	mov	r3, r0
 8022d0c:	80fb      	strh	r3, [r7, #6]
	if( u32.ulWords[ 0 ] == 0x00010203 )
 8022d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8022d3c <usNetToHost+0x38>)
 8022d10:	4b0b      	ldr	r3, [pc, #44]	@ (8022d40 <usNetToHost+0x3c>)
 8022d12:	429a      	cmp	r2, r3
 8022d14:	d101      	bne.n	8022d1a <usNetToHost+0x16>
	{
		return usValue;
 8022d16:	88fb      	ldrh	r3, [r7, #6]
 8022d18:	e009      	b.n	8022d2e <usNetToHost+0x2a>
	}
	else
	{
		return ( usValue << 8 ) | ( usValue >> 8 );
 8022d1a:	88fb      	ldrh	r3, [r7, #6]
 8022d1c:	021b      	lsls	r3, r3, #8
 8022d1e:	b21a      	sxth	r2, r3
 8022d20:	88fb      	ldrh	r3, [r7, #6]
 8022d22:	0a1b      	lsrs	r3, r3, #8
 8022d24:	b29b      	uxth	r3, r3
 8022d26:	b21b      	sxth	r3, r3
 8022d28:	4313      	orrs	r3, r2
 8022d2a:	b21b      	sxth	r3, r3
 8022d2c:	b29b      	uxth	r3, r3
	}
}
 8022d2e:	4618      	mov	r0, r3
 8022d30:	370c      	adds	r7, #12
 8022d32:	46bd      	mov	sp, r7
 8022d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d38:	4770      	bx	lr
 8022d3a:	bf00      	nop
 8022d3c:	03020100 	.word	0x03020100
 8022d40:	00010203 	.word	0x00010203

08022d44 <printIPv6>:

static BaseType_t printIPv6( struct SStringBuf *apBuf, uint16_t *pusAddress )
{
 8022d44:	b580      	push	{r7, lr}
 8022d46:	b088      	sub	sp, #32
 8022d48:	af00      	add	r7, sp, #0
 8022d4a:	6078      	str	r0, [r7, #4]
 8022d4c:	6039      	str	r1, [r7, #0]
	int iIndex;
	int iZeroStart = -1;
 8022d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8022d52:	61bb      	str	r3, [r7, #24]
	int iZeroLength = 0;
 8022d54:	2300      	movs	r3, #0
 8022d56:	617b      	str	r3, [r7, #20]
	int iCurStart = 0;
 8022d58:	2300      	movs	r3, #0
 8022d5a:	613b      	str	r3, [r7, #16]
	int iCurLength = 0;
 8022d5c:	2300      	movs	r3, #0
 8022d5e:	60fb      	str	r3, [r7, #12]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 8022d60:	2300      	movs	r3, #0
 8022d62:	61fb      	str	r3, [r7, #28]
 8022d64:	e026      	b.n	8022db4 <printIPv6+0x70>
	{
	uint16_t usValue = pusAddress[ iIndex ];
 8022d66:	69fb      	ldr	r3, [r7, #28]
 8022d68:	005b      	lsls	r3, r3, #1
 8022d6a:	683a      	ldr	r2, [r7, #0]
 8022d6c:	4413      	add	r3, r2
 8022d6e:	881b      	ldrh	r3, [r3, #0]
 8022d70:	817b      	strh	r3, [r7, #10]
		if( usValue == 0 )
 8022d72:	897b      	ldrh	r3, [r7, #10]
 8022d74:	2b00      	cmp	r3, #0
 8022d76:	d107      	bne.n	8022d88 <printIPv6+0x44>
		{
			if( iCurLength == 0 )
 8022d78:	68fb      	ldr	r3, [r7, #12]
 8022d7a:	2b00      	cmp	r3, #0
 8022d7c:	d101      	bne.n	8022d82 <printIPv6+0x3e>
			{
				iCurStart = iIndex;
 8022d7e:	69fb      	ldr	r3, [r7, #28]
 8022d80:	613b      	str	r3, [r7, #16]
			}
			iCurLength++;
 8022d82:	68fb      	ldr	r3, [r7, #12]
 8022d84:	3301      	adds	r3, #1
 8022d86:	60fb      	str	r3, [r7, #12]
		}
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 8022d88:	897b      	ldrh	r3, [r7, #10]
 8022d8a:	2b00      	cmp	r3, #0
 8022d8c:	d102      	bne.n	8022d94 <printIPv6+0x50>
 8022d8e:	69fb      	ldr	r3, [r7, #28]
 8022d90:	2b07      	cmp	r3, #7
 8022d92:	d10c      	bne.n	8022dae <printIPv6+0x6a>
		{
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 8022d94:	68fb      	ldr	r3, [r7, #12]
 8022d96:	2b01      	cmp	r3, #1
 8022d98:	dd07      	ble.n	8022daa <printIPv6+0x66>
 8022d9a:	697a      	ldr	r2, [r7, #20]
 8022d9c:	68fb      	ldr	r3, [r7, #12]
 8022d9e:	429a      	cmp	r2, r3
 8022da0:	da03      	bge.n	8022daa <printIPv6+0x66>
			{
				iZeroLength = iCurLength;
 8022da2:	68fb      	ldr	r3, [r7, #12]
 8022da4:	617b      	str	r3, [r7, #20]
				iZeroStart = iCurStart;
 8022da6:	693b      	ldr	r3, [r7, #16]
 8022da8:	61bb      	str	r3, [r7, #24]
			}
			iCurLength = 0;
 8022daa:	2300      	movs	r3, #0
 8022dac:	60fb      	str	r3, [r7, #12]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 8022dae:	69fb      	ldr	r3, [r7, #28]
 8022db0:	3301      	adds	r3, #1
 8022db2:	61fb      	str	r3, [r7, #28]
 8022db4:	69fb      	ldr	r3, [r7, #28]
 8022db6:	2b07      	cmp	r3, #7
 8022db8:	ddd5      	ble.n	8022d66 <printIPv6+0x22>
		}
	}

	apBuf->flags.base = 16;
 8022dba:	687b      	ldr	r3, [r7, #4]
 8022dbc:	2210      	movs	r2, #16
 8022dbe:	611a      	str	r2, [r3, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 8022dc0:	687b      	ldr	r3, [r7, #4]
 8022dc2:	2261      	movs	r2, #97	@ 0x61
 8022dc4:	775a      	strb	r2, [r3, #29]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 8022dc6:	2300      	movs	r3, #0
 8022dc8:	61fb      	str	r3, [r7, #28]
 8022dca:	e02b      	b.n	8022e24 <printIPv6+0xe0>
	{
		if( iIndex == iZeroStart )
 8022dcc:	69fa      	ldr	r2, [r7, #28]
 8022dce:	69bb      	ldr	r3, [r7, #24]
 8022dd0:	429a      	cmp	r2, r3
 8022dd2:	d110      	bne.n	8022df6 <printIPv6+0xb2>
		{
			iIndex += iZeroLength - 1;
 8022dd4:	697b      	ldr	r3, [r7, #20]
 8022dd6:	3b01      	subs	r3, #1
 8022dd8:	69fa      	ldr	r2, [r7, #28]
 8022dda:	4413      	add	r3, r2
 8022ddc:	61fb      	str	r3, [r7, #28]
			strbuf_printchar( apBuf, ':' );
 8022dde:	213a      	movs	r1, #58	@ 0x3a
 8022de0:	6878      	ldr	r0, [r7, #4]
 8022de2:	f7ff fda8 	bl	8022936 <strbuf_printchar>
			if( iIndex == 7 )
 8022de6:	69fb      	ldr	r3, [r7, #28]
 8022de8:	2b07      	cmp	r3, #7
 8022dea:	d118      	bne.n	8022e1e <printIPv6+0xda>
			{
				strbuf_printchar( apBuf, ':' );
 8022dec:	213a      	movs	r1, #58	@ 0x3a
 8022dee:	6878      	ldr	r0, [r7, #4]
 8022df0:	f7ff fda1 	bl	8022936 <strbuf_printchar>
 8022df4:	e013      	b.n	8022e1e <printIPv6+0xda>
			}
		}
		else
		{
			if( iIndex > 0 )
 8022df6:	69fb      	ldr	r3, [r7, #28]
 8022df8:	2b00      	cmp	r3, #0
 8022dfa:	dd03      	ble.n	8022e04 <printIPv6+0xc0>
			{
				strbuf_printchar( apBuf, ':' );
 8022dfc:	213a      	movs	r1, #58	@ 0x3a
 8022dfe:	6878      	ldr	r0, [r7, #4]
 8022e00:	f7ff fd99 	bl	8022936 <strbuf_printchar>
			}
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 8022e04:	69fb      	ldr	r3, [r7, #28]
 8022e06:	005b      	lsls	r3, r3, #1
 8022e08:	683a      	ldr	r2, [r7, #0]
 8022e0a:	4413      	add	r3, r2
 8022e0c:	881b      	ldrh	r3, [r3, #0]
 8022e0e:	4618      	mov	r0, r3
 8022e10:	f7ff ff78 	bl	8022d04 <usNetToHost>
 8022e14:	4603      	mov	r3, r0
 8022e16:	4619      	mov	r1, r3
 8022e18:	6878      	ldr	r0, [r7, #4]
 8022e1a:	f7ff febb 	bl	8022b94 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 8022e1e:	69fb      	ldr	r3, [r7, #28]
 8022e20:	3301      	adds	r3, #1
 8022e22:	61fb      	str	r3, [r7, #28]
 8022e24:	69fb      	ldr	r3, [r7, #28]
 8022e26:	2b07      	cmp	r3, #7
 8022e28:	ddd0      	ble.n	8022dcc <printIPv6+0x88>
		}
	}

	return pdTRUE;
 8022e2a:	2301      	movs	r3, #1
}
 8022e2c:	4618      	mov	r0, r3
 8022e2e:	3720      	adds	r7, #32
 8022e30:	46bd      	mov	sp, r7
 8022e32:	bd80      	pop	{r7, pc}

08022e34 <tiny_print>:
/*-----------------------------------------------------------*/

static void tiny_print( struct SStringBuf *apBuf, const char *format, va_list args )
{
 8022e34:	b590      	push	{r4, r7, lr}
 8022e36:	b087      	sub	sp, #28
 8022e38:	af00      	add	r7, sp, #0
 8022e3a:	60f8      	str	r0, [r7, #12]
 8022e3c:	60b9      	str	r1, [r7, #8]
 8022e3e:	607a      	str	r2, [r7, #4]
	char scr[2];

	for( ; ; )
	{
		int ch = *( format++ );
 8022e40:	68bb      	ldr	r3, [r7, #8]
 8022e42:	1c5a      	adds	r2, r3, #1
 8022e44:	60ba      	str	r2, [r7, #8]
 8022e46:	781b      	ldrb	r3, [r3, #0]
 8022e48:	617b      	str	r3, [r7, #20]

		if( ch != '%' )
 8022e4a:	697b      	ldr	r3, [r7, #20]
 8022e4c:	2b25      	cmp	r3, #37	@ 0x25
 8022e4e:	d00f      	beq.n	8022e70 <tiny_print+0x3c>
		{
			do
			{
				/* Put the most like flow in a small loop */
				if( strbuf_printchar_inline( apBuf, ch ) == 0 )
 8022e50:	6979      	ldr	r1, [r7, #20]
 8022e52:	68f8      	ldr	r0, [r7, #12]
 8022e54:	f7ff fdad 	bl	80229b2 <strbuf_printchar_inline>
 8022e58:	4603      	mov	r3, r0
 8022e5a:	2b00      	cmp	r3, #0
 8022e5c:	f000 817e 	beq.w	802315c <tiny_print+0x328>
				{
					return;
				}
				ch = *( format++ );
 8022e60:	68bb      	ldr	r3, [r7, #8]
 8022e62:	1c5a      	adds	r2, r3, #1
 8022e64:	60ba      	str	r2, [r7, #8]
 8022e66:	781b      	ldrb	r3, [r3, #0]
 8022e68:	617b      	str	r3, [r7, #20]
			} while( ch != '%' );
 8022e6a:	697b      	ldr	r3, [r7, #20]
 8022e6c:	2b25      	cmp	r3, #37	@ 0x25
 8022e6e:	d1ef      	bne.n	8022e50 <tiny_print+0x1c>
		}
		ch = *( format++ );
 8022e70:	68bb      	ldr	r3, [r7, #8]
 8022e72:	1c5a      	adds	r2, r3, #1
 8022e74:	60ba      	str	r2, [r7, #8]
 8022e76:	781b      	ldrb	r3, [r3, #0]
 8022e78:	617b      	str	r3, [r7, #20]
		/* Now ch has character after '%', format pointing to next */

		if( ch == '\0' )
 8022e7a:	697b      	ldr	r3, [r7, #20]
 8022e7c:	2b00      	cmp	r3, #0
 8022e7e:	f000 8165 	beq.w	802314c <tiny_print+0x318>
		{
			break;
		}
		if( ch == '%' )
 8022e82:	697b      	ldr	r3, [r7, #20]
 8022e84:	2b25      	cmp	r3, #37	@ 0x25
 8022e86:	d108      	bne.n	8022e9a <tiny_print+0x66>
		{
			if( strbuf_printchar( apBuf, ch ) == 0 )
 8022e88:	6979      	ldr	r1, [r7, #20]
 8022e8a:	68f8      	ldr	r0, [r7, #12]
 8022e8c:	f7ff fd53 	bl	8022936 <strbuf_printchar>
 8022e90:	4603      	mov	r3, r0
 8022e92:	2b00      	cmp	r3, #0
 8022e94:	f040 814e 	bne.w	8023134 <tiny_print+0x300>
			{
				return;
 8022e98:	e161      	b.n	802315e <tiny_print+0x32a>
			}
			continue;
		}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 8022e9a:	68fb      	ldr	r3, [r7, #12]
 8022e9c:	3310      	adds	r3, #16
 8022e9e:	2210      	movs	r2, #16
 8022ea0:	2100      	movs	r1, #0
 8022ea2:	4618      	mov	r0, r3
 8022ea4:	f7ff fc79 	bl	802279a <memset>

		if( ch == '-' )
 8022ea8:	697b      	ldr	r3, [r7, #20]
 8022eaa:	2b2d      	cmp	r3, #45	@ 0x2d
 8022eac:	d114      	bne.n	8022ed8 <tiny_print+0xa4>
		{
			ch = *( format++ );
 8022eae:	68bb      	ldr	r3, [r7, #8]
 8022eb0:	1c5a      	adds	r2, r3, #1
 8022eb2:	60ba      	str	r2, [r7, #8]
 8022eb4:	781b      	ldrb	r3, [r3, #0]
 8022eb6:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad = PAD_RIGHT;
 8022eb8:	68fb      	ldr	r3, [r7, #12]
 8022eba:	2201      	movs	r2, #1
 8022ebc:	771a      	strb	r2, [r3, #28]
		}
		while( ch == '0' )
 8022ebe:	e00b      	b.n	8022ed8 <tiny_print+0xa4>
		{
			ch = *( format++ );
 8022ec0:	68bb      	ldr	r3, [r7, #8]
 8022ec2:	1c5a      	adds	r2, r3, #1
 8022ec4:	60ba      	str	r2, [r7, #8]
 8022ec6:	781b      	ldrb	r3, [r3, #0]
 8022ec8:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad |= PAD_ZERO;
 8022eca:	68fb      	ldr	r3, [r7, #12]
 8022ecc:	7f1b      	ldrb	r3, [r3, #28]
 8022ece:	f043 0302 	orr.w	r3, r3, #2
 8022ed2:	b2da      	uxtb	r2, r3
 8022ed4:	68fb      	ldr	r3, [r7, #12]
 8022ed6:	771a      	strb	r2, [r3, #28]
		while( ch == '0' )
 8022ed8:	697b      	ldr	r3, [r7, #20]
 8022eda:	2b30      	cmp	r3, #48	@ 0x30
 8022edc:	d0f0      	beq.n	8022ec0 <tiny_print+0x8c>
		}
		if( ch == '*' )
 8022ede:	697b      	ldr	r3, [r7, #20]
 8022ee0:	2b2a      	cmp	r3, #42	@ 0x2a
 8022ee2:	d120      	bne.n	8022f26 <tiny_print+0xf2>
		{
			ch = *( format++ );
 8022ee4:	68bb      	ldr	r3, [r7, #8]
 8022ee6:	1c5a      	adds	r2, r3, #1
 8022ee8:	60ba      	str	r2, [r7, #8]
 8022eea:	781b      	ldrb	r3, [r3, #0]
 8022eec:	617b      	str	r3, [r7, #20]
			apBuf->flags.width = va_arg( args, int );
 8022eee:	687b      	ldr	r3, [r7, #4]
 8022ef0:	1d1a      	adds	r2, r3, #4
 8022ef2:	607a      	str	r2, [r7, #4]
 8022ef4:	681a      	ldr	r2, [r3, #0]
 8022ef6:	68fb      	ldr	r3, [r7, #12]
 8022ef8:	615a      	str	r2, [r3, #20]
 8022efa:	e01a      	b.n	8022f32 <tiny_print+0xfe>
		}
		else
		{
			while( ch >= '0' && ch <= '9' )
			{
				apBuf->flags.width *= 10;
 8022efc:	68fb      	ldr	r3, [r7, #12]
 8022efe:	695a      	ldr	r2, [r3, #20]
 8022f00:	4613      	mov	r3, r2
 8022f02:	009b      	lsls	r3, r3, #2
 8022f04:	4413      	add	r3, r2
 8022f06:	005b      	lsls	r3, r3, #1
 8022f08:	461a      	mov	r2, r3
 8022f0a:	68fb      	ldr	r3, [r7, #12]
 8022f0c:	615a      	str	r2, [r3, #20]
				apBuf->flags.width += ch - '0';
 8022f0e:	68fb      	ldr	r3, [r7, #12]
 8022f10:	695a      	ldr	r2, [r3, #20]
 8022f12:	697b      	ldr	r3, [r7, #20]
 8022f14:	3b30      	subs	r3, #48	@ 0x30
 8022f16:	441a      	add	r2, r3
 8022f18:	68fb      	ldr	r3, [r7, #12]
 8022f1a:	615a      	str	r2, [r3, #20]
				ch = *( format++ );
 8022f1c:	68bb      	ldr	r3, [r7, #8]
 8022f1e:	1c5a      	adds	r2, r3, #1
 8022f20:	60ba      	str	r2, [r7, #8]
 8022f22:	781b      	ldrb	r3, [r3, #0]
 8022f24:	617b      	str	r3, [r7, #20]
			while( ch >= '0' && ch <= '9' )
 8022f26:	697b      	ldr	r3, [r7, #20]
 8022f28:	2b2f      	cmp	r3, #47	@ 0x2f
 8022f2a:	dd02      	ble.n	8022f32 <tiny_print+0xfe>
 8022f2c:	697b      	ldr	r3, [r7, #20]
 8022f2e:	2b39      	cmp	r3, #57	@ 0x39
 8022f30:	dde4      	ble.n	8022efc <tiny_print+0xc8>
			}
		}
		if( ch == '.' )
 8022f32:	697b      	ldr	r3, [r7, #20]
 8022f34:	2b2e      	cmp	r3, #46	@ 0x2e
 8022f36:	d12e      	bne.n	8022f96 <tiny_print+0x162>
		{
			ch = *( format++ );
 8022f38:	68bb      	ldr	r3, [r7, #8]
 8022f3a:	1c5a      	adds	r2, r3, #1
 8022f3c:	60ba      	str	r2, [r7, #8]
 8022f3e:	781b      	ldrb	r3, [r3, #0]
 8022f40:	617b      	str	r3, [r7, #20]
			if( ch == '*' )
 8022f42:	697b      	ldr	r3, [r7, #20]
 8022f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8022f46:	d120      	bne.n	8022f8a <tiny_print+0x156>
			{
				apBuf->flags.printLimit = va_arg( args, int );
 8022f48:	687b      	ldr	r3, [r7, #4]
 8022f4a:	1d1a      	adds	r2, r3, #4
 8022f4c:	607a      	str	r2, [r7, #4]
 8022f4e:	681a      	ldr	r2, [r3, #0]
 8022f50:	68fb      	ldr	r3, [r7, #12]
 8022f52:	619a      	str	r2, [r3, #24]
				ch = *( format++ );
 8022f54:	68bb      	ldr	r3, [r7, #8]
 8022f56:	1c5a      	adds	r2, r3, #1
 8022f58:	60ba      	str	r2, [r7, #8]
 8022f5a:	781b      	ldrb	r3, [r3, #0]
 8022f5c:	617b      	str	r3, [r7, #20]
 8022f5e:	e01a      	b.n	8022f96 <tiny_print+0x162>
			}
			else
			{
				while( ch >= '0' && ch <= '9' )
				{
					apBuf->flags.printLimit *= 10;
 8022f60:	68fb      	ldr	r3, [r7, #12]
 8022f62:	699a      	ldr	r2, [r3, #24]
 8022f64:	4613      	mov	r3, r2
 8022f66:	009b      	lsls	r3, r3, #2
 8022f68:	4413      	add	r3, r2
 8022f6a:	005b      	lsls	r3, r3, #1
 8022f6c:	461a      	mov	r2, r3
 8022f6e:	68fb      	ldr	r3, [r7, #12]
 8022f70:	619a      	str	r2, [r3, #24]
					apBuf->flags.printLimit += ch - '0';
 8022f72:	68fb      	ldr	r3, [r7, #12]
 8022f74:	699a      	ldr	r2, [r3, #24]
 8022f76:	697b      	ldr	r3, [r7, #20]
 8022f78:	3b30      	subs	r3, #48	@ 0x30
 8022f7a:	441a      	add	r2, r3
 8022f7c:	68fb      	ldr	r3, [r7, #12]
 8022f7e:	619a      	str	r2, [r3, #24]
					ch = *( format++ );
 8022f80:	68bb      	ldr	r3, [r7, #8]
 8022f82:	1c5a      	adds	r2, r3, #1
 8022f84:	60ba      	str	r2, [r7, #8]
 8022f86:	781b      	ldrb	r3, [r3, #0]
 8022f88:	617b      	str	r3, [r7, #20]
				while( ch >= '0' && ch <= '9' )
 8022f8a:	697b      	ldr	r3, [r7, #20]
 8022f8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8022f8e:	dd02      	ble.n	8022f96 <tiny_print+0x162>
 8022f90:	697b      	ldr	r3, [r7, #20]
 8022f92:	2b39      	cmp	r3, #57	@ 0x39
 8022f94:	dde4      	ble.n	8022f60 <tiny_print+0x12c>
				}
			}
		}
		if( apBuf->flags.printLimit == 0 )
 8022f96:	68fb      	ldr	r3, [r7, #12]
 8022f98:	699b      	ldr	r3, [r3, #24]
 8022f9a:	2b00      	cmp	r3, #0
 8022f9c:	d104      	bne.n	8022fa8 <tiny_print+0x174>
		{
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 8022f9e:	68fb      	ldr	r3, [r7, #12]
 8022fa0:	699b      	ldr	r3, [r3, #24]
 8022fa2:	1e5a      	subs	r2, r3, #1
 8022fa4:	68fb      	ldr	r3, [r7, #12]
 8022fa6:	619a      	str	r2, [r3, #24]
		}
		if( ch == 'p' )
 8022fa8:	697b      	ldr	r3, [r7, #20]
 8022faa:	2b70      	cmp	r3, #112	@ 0x70
 8022fac:	d118      	bne.n	8022fe0 <tiny_print+0x1ac>
		{
			if( format[0] == 'i' && format[1] == 'p' )
 8022fae:	68bb      	ldr	r3, [r7, #8]
 8022fb0:	781b      	ldrb	r3, [r3, #0]
 8022fb2:	2b69      	cmp	r3, #105	@ 0x69
 8022fb4:	d114      	bne.n	8022fe0 <tiny_print+0x1ac>
 8022fb6:	68bb      	ldr	r3, [r7, #8]
 8022fb8:	3301      	adds	r3, #1
 8022fba:	781b      	ldrb	r3, [r3, #0]
 8022fbc:	2b70      	cmp	r3, #112	@ 0x70
 8022fbe:	d10f      	bne.n	8022fe0 <tiny_print+0x1ac>
			{
				format += 2;	/* eat the "pi" of "pip" */
 8022fc0:	68bb      	ldr	r3, [r7, #8]
 8022fc2:	3302      	adds	r3, #2
 8022fc4:	60bb      	str	r3, [r7, #8]
				/* Print a IPv6 address */
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 8022fc6:	687b      	ldr	r3, [r7, #4]
 8022fc8:	1d1a      	adds	r2, r3, #4
 8022fca:	607a      	str	r2, [r7, #4]
 8022fcc:	681b      	ldr	r3, [r3, #0]
 8022fce:	4619      	mov	r1, r3
 8022fd0:	68f8      	ldr	r0, [r7, #12]
 8022fd2:	f7ff feb7 	bl	8022d44 <printIPv6>
 8022fd6:	4603      	mov	r3, r0
 8022fd8:	2b00      	cmp	r3, #0
 8022fda:	f040 80ad 	bne.w	8023138 <tiny_print+0x304>
				{
					break;
 8022fde:	e0b8      	b.n	8023152 <tiny_print+0x31e>
				}
				continue;
			}
		}
		if( ch == 's' )
 8022fe0:	697b      	ldr	r3, [r7, #20]
 8022fe2:	2b73      	cmp	r3, #115	@ 0x73
 8022fe4:	d112      	bne.n	802300c <tiny_print+0x1d8>
		{
			register char *s = ( char * )va_arg( args, int );
 8022fe6:	687b      	ldr	r3, [r7, #4]
 8022fe8:	1d1a      	adds	r2, r3, #4
 8022fea:	607a      	str	r2, [r7, #4]
 8022fec:	681b      	ldr	r3, [r3, #0]
 8022fee:	461c      	mov	r4, r3
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 8022ff0:	2c00      	cmp	r4, #0
 8022ff2:	d001      	beq.n	8022ff8 <tiny_print+0x1c4>
 8022ff4:	4623      	mov	r3, r4
 8022ff6:	e000      	b.n	8022ffa <tiny_print+0x1c6>
 8022ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8023164 <tiny_print+0x330>)
 8022ffa:	4619      	mov	r1, r3
 8022ffc:	68f8      	ldr	r0, [r7, #12]
 8022ffe:	f7ff fd21 	bl	8022a44 <prints>
 8023002:	4603      	mov	r3, r0
 8023004:	2b00      	cmp	r3, #0
 8023006:	f040 8099 	bne.w	802313c <tiny_print+0x308>
			{
				break;
 802300a:	e0a2      	b.n	8023152 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'c' )
 802300c:	697b      	ldr	r3, [r7, #20]
 802300e:	2b63      	cmp	r3, #99	@ 0x63
 8023010:	d10f      	bne.n	8023032 <tiny_print+0x1fe>
		{
			/* char are converted to int then pushed on the stack */
			scr[0] = ( char ) va_arg( args, int );
 8023012:	687b      	ldr	r3, [r7, #4]
 8023014:	1d1a      	adds	r2, r3, #4
 8023016:	607a      	str	r2, [r7, #4]
 8023018:	681b      	ldr	r3, [r3, #0]
 802301a:	b2db      	uxtb	r3, r3
 802301c:	743b      	strb	r3, [r7, #16]

			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 802301e:	7c3b      	ldrb	r3, [r7, #16]
 8023020:	4619      	mov	r1, r3
 8023022:	68f8      	ldr	r0, [r7, #12]
 8023024:	f7ff fc87 	bl	8022936 <strbuf_printchar>
 8023028:	4603      	mov	r3, r0
 802302a:	2b00      	cmp	r3, #0
 802302c:	f040 8088 	bne.w	8023140 <tiny_print+0x30c>
			{
				return;
 8023030:	e095      	b.n	802315e <tiny_print+0x32a>
			}

			continue;
		}
		if( ch == 'l' )
 8023032:	697b      	ldr	r3, [r7, #20]
 8023034:	2b6c      	cmp	r3, #108	@ 0x6c
 8023036:	d109      	bne.n	802304c <tiny_print+0x218>
		{
			ch = *( format++ );
 8023038:	68bb      	ldr	r3, [r7, #8]
 802303a:	1c5a      	adds	r2, r3, #1
 802303c:	60ba      	str	r2, [r7, #8]
 802303e:	781b      	ldrb	r3, [r3, #0]
 8023040:	617b      	str	r3, [r7, #20]
			apBuf->flags.long32 = 1;
 8023042:	68fa      	ldr	r2, [r7, #12]
 8023044:	7f93      	ldrb	r3, [r2, #30]
 8023046:	f043 0304 	orr.w	r3, r3, #4
 802304a:	7793      	strb	r3, [r2, #30]
			/* Makes not difference as u32 == long */
		}
		if( ch == 'L' )
 802304c:	697b      	ldr	r3, [r7, #20]
 802304e:	2b4c      	cmp	r3, #76	@ 0x4c
 8023050:	d109      	bne.n	8023066 <tiny_print+0x232>
		{
			ch = *( format++ );
 8023052:	68bb      	ldr	r3, [r7, #8]
 8023054:	1c5a      	adds	r2, r3, #1
 8023056:	60ba      	str	r2, [r7, #8]
 8023058:	781b      	ldrb	r3, [r3, #0]
 802305a:	617b      	str	r3, [r7, #20]
			apBuf->flags.long64 = 1;
 802305c:	68fa      	ldr	r2, [r7, #12]
 802305e:	7f93      	ldrb	r3, [r2, #30]
 8023060:	f043 0308 	orr.w	r3, r3, #8
 8023064:	7793      	strb	r3, [r2, #30]
			/* Does make a difference */
		}
		apBuf->flags.base = 10;
 8023066:	68fb      	ldr	r3, [r7, #12]
 8023068:	220a      	movs	r2, #10
 802306a:	611a      	str	r2, [r3, #16]
		apBuf->flags.letBase = 'a';
 802306c:	68fb      	ldr	r3, [r7, #12]
 802306e:	2261      	movs	r2, #97	@ 0x61
 8023070:	775a      	strb	r2, [r3, #29]

		if( ch == 'd' || ch == 'u' )
 8023072:	697b      	ldr	r3, [r7, #20]
 8023074:	2b64      	cmp	r3, #100	@ 0x64
 8023076:	d002      	beq.n	802307e <tiny_print+0x24a>
 8023078:	697b      	ldr	r3, [r7, #20]
 802307a:	2b75      	cmp	r3, #117	@ 0x75
 802307c:	d116      	bne.n	80230ac <tiny_print+0x278>
		{
			apBuf->flags.isSigned = ( ch == 'd' );
 802307e:	697b      	ldr	r3, [r7, #20]
 8023080:	2b64      	cmp	r3, #100	@ 0x64
 8023082:	bf0c      	ite	eq
 8023084:	2301      	moveq	r3, #1
 8023086:	2300      	movne	r3, #0
 8023088:	b2d9      	uxtb	r1, r3
 802308a:	68fa      	ldr	r2, [r7, #12]
 802308c:	7f93      	ldrb	r3, [r2, #30]
 802308e:	f361 0300 	bfi	r3, r1, #0, #1
 8023092:	7793      	strb	r3, [r2, #30]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8023094:	687b      	ldr	r3, [r7, #4]
 8023096:	1d1a      	adds	r2, r3, #4
 8023098:	607a      	str	r2, [r7, #4]
 802309a:	681b      	ldr	r3, [r3, #0]
 802309c:	4619      	mov	r1, r3
 802309e:	68f8      	ldr	r0, [r7, #12]
 80230a0:	f7ff fd78 	bl	8022b94 <printi>
 80230a4:	4603      	mov	r3, r0
 80230a6:	2b00      	cmp	r3, #0
 80230a8:	d14c      	bne.n	8023144 <tiny_print+0x310>
			{
				break;
 80230aa:	e052      	b.n	8023152 <tiny_print+0x31e>
			}
			continue;
		}

		apBuf->flags.base = 16;		/* From here all hexadecimal */
 80230ac:	68fb      	ldr	r3, [r7, #12]
 80230ae:	2210      	movs	r2, #16
 80230b0:	611a      	str	r2, [r3, #16]

		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 80230b2:	697b      	ldr	r3, [r7, #20]
 80230b4:	2b78      	cmp	r3, #120	@ 0x78
 80230b6:	d117      	bne.n	80230e8 <tiny_print+0x2b4>
 80230b8:	68bb      	ldr	r3, [r7, #8]
 80230ba:	781b      	ldrb	r3, [r3, #0]
 80230bc:	2b69      	cmp	r3, #105	@ 0x69
 80230be:	d113      	bne.n	80230e8 <tiny_print+0x2b4>
 80230c0:	68bb      	ldr	r3, [r7, #8]
 80230c2:	3301      	adds	r3, #1
 80230c4:	781b      	ldrb	r3, [r3, #0]
 80230c6:	2b70      	cmp	r3, #112	@ 0x70
 80230c8:	d10e      	bne.n	80230e8 <tiny_print+0x2b4>
		{
			format += 2;	/* eat the "xi" of "xip" */
 80230ca:	68bb      	ldr	r3, [r7, #8]
 80230cc:	3302      	adds	r3, #2
 80230ce:	60bb      	str	r3, [r7, #8]
			/* Will use base 10 again */
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 80230d0:	687b      	ldr	r3, [r7, #4]
 80230d2:	1d1a      	adds	r2, r3, #4
 80230d4:	607a      	str	r2, [r7, #4]
 80230d6:	681b      	ldr	r3, [r3, #0]
 80230d8:	4619      	mov	r1, r3
 80230da:	68f8      	ldr	r0, [r7, #12]
 80230dc:	f7ff fde8 	bl	8022cb0 <printIp>
 80230e0:	4603      	mov	r3, r0
 80230e2:	2b00      	cmp	r3, #0
 80230e4:	d130      	bne.n	8023148 <tiny_print+0x314>
			{
				break;
 80230e6:	e034      	b.n	8023152 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 80230e8:	697b      	ldr	r3, [r7, #20]
 80230ea:	2b78      	cmp	r3, #120	@ 0x78
 80230ec:	d009      	beq.n	8023102 <tiny_print+0x2ce>
 80230ee:	697b      	ldr	r3, [r7, #20]
 80230f0:	2b58      	cmp	r3, #88	@ 0x58
 80230f2:	d006      	beq.n	8023102 <tiny_print+0x2ce>
 80230f4:	697b      	ldr	r3, [r7, #20]
 80230f6:	2b70      	cmp	r3, #112	@ 0x70
 80230f8:	d003      	beq.n	8023102 <tiny_print+0x2ce>
 80230fa:	697b      	ldr	r3, [r7, #20]
 80230fc:	2b6f      	cmp	r3, #111	@ 0x6f
 80230fe:	f47f ae9f 	bne.w	8022e40 <tiny_print+0xc>
		{
			if( ch == 'X' )
 8023102:	697b      	ldr	r3, [r7, #20]
 8023104:	2b58      	cmp	r3, #88	@ 0x58
 8023106:	d103      	bne.n	8023110 <tiny_print+0x2dc>
			{
				apBuf->flags.letBase = 'A';
 8023108:	68fb      	ldr	r3, [r7, #12]
 802310a:	2241      	movs	r2, #65	@ 0x41
 802310c:	775a      	strb	r2, [r3, #29]
 802310e:	e005      	b.n	802311c <tiny_print+0x2e8>
			}
			else if( ch == 'o' )
 8023110:	697b      	ldr	r3, [r7, #20]
 8023112:	2b6f      	cmp	r3, #111	@ 0x6f
 8023114:	d102      	bne.n	802311c <tiny_print+0x2e8>
			{
				apBuf->flags.base = 8;
 8023116:	68fb      	ldr	r3, [r7, #12]
 8023118:	2208      	movs	r2, #8
 802311a:	611a      	str	r2, [r3, #16]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 802311c:	687b      	ldr	r3, [r7, #4]
 802311e:	1d1a      	adds	r2, r3, #4
 8023120:	607a      	str	r2, [r7, #4]
 8023122:	681b      	ldr	r3, [r3, #0]
 8023124:	4619      	mov	r1, r3
 8023126:	68f8      	ldr	r0, [r7, #12]
 8023128:	f7ff fd34 	bl	8022b94 <printi>
 802312c:	4603      	mov	r3, r0
 802312e:	2b00      	cmp	r3, #0
 8023130:	d00e      	beq.n	8023150 <tiny_print+0x31c>
			{
				break;
			}
			continue;
 8023132:	e00a      	b.n	802314a <tiny_print+0x316>
			continue;
 8023134:	bf00      	nop
 8023136:	e683      	b.n	8022e40 <tiny_print+0xc>
				continue;
 8023138:	bf00      	nop
 802313a:	e681      	b.n	8022e40 <tiny_print+0xc>
			continue;
 802313c:	bf00      	nop
 802313e:	e67f      	b.n	8022e40 <tiny_print+0xc>
			continue;
 8023140:	bf00      	nop
 8023142:	e67d      	b.n	8022e40 <tiny_print+0xc>
			continue;
 8023144:	bf00      	nop
 8023146:	e67b      	b.n	8022e40 <tiny_print+0xc>
			continue;
 8023148:	bf00      	nop
	{
 802314a:	e679      	b.n	8022e40 <tiny_print+0xc>
			break;
 802314c:	bf00      	nop
 802314e:	e000      	b.n	8023152 <tiny_print+0x31e>
				break;
 8023150:	bf00      	nop
		}
	}
	strbuf_printchar( apBuf, '\0' );
 8023152:	2100      	movs	r1, #0
 8023154:	68f8      	ldr	r0, [r7, #12]
 8023156:	f7ff fbee 	bl	8022936 <strbuf_printchar>
 802315a:	e000      	b.n	802315e <tiny_print+0x32a>
					return;
 802315c:	bf00      	nop
}
 802315e:	371c      	adds	r7, #28
 8023160:	46bd      	mov	sp, r7
 8023162:	bd90      	pop	{r4, r7, pc}
 8023164:	08027764 	.word	0x08027764

08023168 <vsnprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int vsnprintf( char *apBuf, size_t aMaxLen, const char *apFmt, va_list args )
{
 8023168:	b580      	push	{r7, lr}
 802316a:	b08c      	sub	sp, #48	@ 0x30
 802316c:	af00      	add	r7, sp, #0
 802316e:	60f8      	str	r0, [r7, #12]
 8023170:	60b9      	str	r1, [r7, #8]
 8023172:	607a      	str	r2, [r7, #4]
 8023174:	603b      	str	r3, [r7, #0]
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8023176:	68fa      	ldr	r2, [r7, #12]
 8023178:	68bb      	ldr	r3, [r7, #8]
 802317a:	441a      	add	r2, r3
 802317c:	f107 0310 	add.w	r3, r7, #16
 8023180:	68f9      	ldr	r1, [r7, #12]
 8023182:	4618      	mov	r0, r3
 8023184:	f7ff fbb9 	bl	80228fa <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8023188:	f107 0310 	add.w	r3, r7, #16
 802318c:	683a      	ldr	r2, [r7, #0]
 802318e:	6879      	ldr	r1, [r7, #4]
 8023190:	4618      	mov	r0, r3
 8023192:	f7ff fe4f 	bl	8022e34 <tiny_print>

	return strBuf.curLen;
 8023196:	69fb      	ldr	r3, [r7, #28]
}
 8023198:	4618      	mov	r0, r3
 802319a:	3730      	adds	r7, #48	@ 0x30
 802319c:	46bd      	mov	sp, r7
 802319e:	bd80      	pop	{r7, pc}

080231a0 <snprintf>:
/*-----------------------------------------------------------*/

int snprintf( char *apBuf, size_t aMaxLen, const char *apFmt, ... )
{
 80231a0:	b40c      	push	{r2, r3}
 80231a2:	b580      	push	{r7, lr}
 80231a4:	b08c      	sub	sp, #48	@ 0x30
 80231a6:	af00      	add	r7, sp, #0
 80231a8:	6078      	str	r0, [r7, #4]
 80231aa:	6039      	str	r1, [r7, #0]
	va_list args;

	va_start( args,  apFmt );
 80231ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80231b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 80231b2:	687a      	ldr	r2, [r7, #4]
 80231b4:	683b      	ldr	r3, [r7, #0]
 80231b6:	441a      	add	r2, r3
 80231b8:	f107 030c 	add.w	r3, r7, #12
 80231bc:	6879      	ldr	r1, [r7, #4]
 80231be:	4618      	mov	r0, r3
 80231c0:	f7ff fb9b 	bl	80228fa <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 80231c4:	f107 030c 	add.w	r3, r7, #12
 80231c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80231ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80231cc:	4618      	mov	r0, r3
 80231ce:	f7ff fe31 	bl	8022e34 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 80231d2:	69bb      	ldr	r3, [r7, #24]
}
 80231d4:	4618      	mov	r0, r3
 80231d6:	3730      	adds	r7, #48	@ 0x30
 80231d8:	46bd      	mov	sp, r7
 80231da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80231de:	b002      	add	sp, #8
 80231e0:	4770      	bx	lr

080231e2 <sprintf>:
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 80231e2:	b40e      	push	{r1, r2, r3}
 80231e4:	b580      	push	{r7, lr}
 80231e6:	b08d      	sub	sp, #52	@ 0x34
 80231e8:	af00      	add	r7, sp, #0
 80231ea:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args,  apFmt );
 80231ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80231f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 80231f2:	687b      	ldr	r3, [r7, #4]
 80231f4:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 80231f8:	f107 030c 	add.w	r3, r7, #12
 80231fc:	6879      	ldr	r1, [r7, #4]
 80231fe:	4618      	mov	r0, r3
 8023200:	f7ff fb7b 	bl	80228fa <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8023204:	f107 030c 	add.w	r3, r7, #12
 8023208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802320a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 802320c:	4618      	mov	r0, r3
 802320e:	f7ff fe11 	bl	8022e34 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8023212:	69bb      	ldr	r3, [r7, #24]
}
 8023214:	4618      	mov	r0, r3
 8023216:	3734      	adds	r7, #52	@ 0x34
 8023218:	46bd      	mov	sp, r7
 802321a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802321e:	b003      	add	sp, #12
 8023220:	4770      	bx	lr
	...

08023224 <rand>:
 8023224:	4b16      	ldr	r3, [pc, #88]	@ (8023280 <rand+0x5c>)
 8023226:	b510      	push	{r4, lr}
 8023228:	681c      	ldr	r4, [r3, #0]
 802322a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802322c:	b9b3      	cbnz	r3, 802325c <rand+0x38>
 802322e:	2018      	movs	r0, #24
 8023230:	f000 fa70 	bl	8023714 <malloc>
 8023234:	4602      	mov	r2, r0
 8023236:	6320      	str	r0, [r4, #48]	@ 0x30
 8023238:	b920      	cbnz	r0, 8023244 <rand+0x20>
 802323a:	4b12      	ldr	r3, [pc, #72]	@ (8023284 <rand+0x60>)
 802323c:	4812      	ldr	r0, [pc, #72]	@ (8023288 <rand+0x64>)
 802323e:	2152      	movs	r1, #82	@ 0x52
 8023240:	f000 fa00 	bl	8023644 <__assert_func>
 8023244:	4911      	ldr	r1, [pc, #68]	@ (802328c <rand+0x68>)
 8023246:	4b12      	ldr	r3, [pc, #72]	@ (8023290 <rand+0x6c>)
 8023248:	e9c0 1300 	strd	r1, r3, [r0]
 802324c:	4b11      	ldr	r3, [pc, #68]	@ (8023294 <rand+0x70>)
 802324e:	6083      	str	r3, [r0, #8]
 8023250:	230b      	movs	r3, #11
 8023252:	8183      	strh	r3, [r0, #12]
 8023254:	2100      	movs	r1, #0
 8023256:	2001      	movs	r0, #1
 8023258:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802325c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802325e:	480e      	ldr	r0, [pc, #56]	@ (8023298 <rand+0x74>)
 8023260:	690b      	ldr	r3, [r1, #16]
 8023262:	694c      	ldr	r4, [r1, #20]
 8023264:	4a0d      	ldr	r2, [pc, #52]	@ (802329c <rand+0x78>)
 8023266:	4358      	muls	r0, r3
 8023268:	fb02 0004 	mla	r0, r2, r4, r0
 802326c:	fba3 3202 	umull	r3, r2, r3, r2
 8023270:	3301      	adds	r3, #1
 8023272:	eb40 0002 	adc.w	r0, r0, r2
 8023276:	e9c1 3004 	strd	r3, r0, [r1, #16]
 802327a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802327e:	bd10      	pop	{r4, pc}
 8023280:	20000038 	.word	0x20000038
 8023284:	0802792c 	.word	0x0802792c
 8023288:	08027943 	.word	0x08027943
 802328c:	abcd330e 	.word	0xabcd330e
 8023290:	e66d1234 	.word	0xe66d1234
 8023294:	0005deec 	.word	0x0005deec
 8023298:	5851f42d 	.word	0x5851f42d
 802329c:	4c957f2d 	.word	0x4c957f2d

080232a0 <std>:
 80232a0:	2300      	movs	r3, #0
 80232a2:	b510      	push	{r4, lr}
 80232a4:	4604      	mov	r4, r0
 80232a6:	e9c0 3300 	strd	r3, r3, [r0]
 80232aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80232ae:	6083      	str	r3, [r0, #8]
 80232b0:	8181      	strh	r1, [r0, #12]
 80232b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80232b4:	81c2      	strh	r2, [r0, #14]
 80232b6:	6183      	str	r3, [r0, #24]
 80232b8:	4619      	mov	r1, r3
 80232ba:	2208      	movs	r2, #8
 80232bc:	305c      	adds	r0, #92	@ 0x5c
 80232be:	f7ff fa6c 	bl	802279a <memset>
 80232c2:	4b0d      	ldr	r3, [pc, #52]	@ (80232f8 <std+0x58>)
 80232c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80232c6:	4b0d      	ldr	r3, [pc, #52]	@ (80232fc <std+0x5c>)
 80232c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80232ca:	4b0d      	ldr	r3, [pc, #52]	@ (8023300 <std+0x60>)
 80232cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80232ce:	4b0d      	ldr	r3, [pc, #52]	@ (8023304 <std+0x64>)
 80232d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80232d2:	4b0d      	ldr	r3, [pc, #52]	@ (8023308 <std+0x68>)
 80232d4:	6224      	str	r4, [r4, #32]
 80232d6:	429c      	cmp	r4, r3
 80232d8:	d006      	beq.n	80232e8 <std+0x48>
 80232da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80232de:	4294      	cmp	r4, r2
 80232e0:	d002      	beq.n	80232e8 <std+0x48>
 80232e2:	33d0      	adds	r3, #208	@ 0xd0
 80232e4:	429c      	cmp	r4, r3
 80232e6:	d105      	bne.n	80232f4 <std+0x54>
 80232e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80232ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80232f0:	f000 b9a4 	b.w	802363c <__retarget_lock_init_recursive>
 80232f4:	bd10      	pop	{r4, pc}
 80232f6:	bf00      	nop
 80232f8:	08023425 	.word	0x08023425
 80232fc:	08023447 	.word	0x08023447
 8023300:	0802347f 	.word	0x0802347f
 8023304:	080234a3 	.word	0x080234a3
 8023308:	200026b8 	.word	0x200026b8

0802330c <stdio_exit_handler>:
 802330c:	4a02      	ldr	r2, [pc, #8]	@ (8023318 <stdio_exit_handler+0xc>)
 802330e:	4903      	ldr	r1, [pc, #12]	@ (802331c <stdio_exit_handler+0x10>)
 8023310:	4803      	ldr	r0, [pc, #12]	@ (8023320 <stdio_exit_handler+0x14>)
 8023312:	f000 b869 	b.w	80233e8 <_fwalk_sglue>
 8023316:	bf00      	nop
 8023318:	2000002c 	.word	0x2000002c
 802331c:	08023989 	.word	0x08023989
 8023320:	2000003c 	.word	0x2000003c

08023324 <cleanup_stdio>:
 8023324:	6841      	ldr	r1, [r0, #4]
 8023326:	4b0c      	ldr	r3, [pc, #48]	@ (8023358 <cleanup_stdio+0x34>)
 8023328:	4299      	cmp	r1, r3
 802332a:	b510      	push	{r4, lr}
 802332c:	4604      	mov	r4, r0
 802332e:	d001      	beq.n	8023334 <cleanup_stdio+0x10>
 8023330:	f000 fb2a 	bl	8023988 <_fflush_r>
 8023334:	68a1      	ldr	r1, [r4, #8]
 8023336:	4b09      	ldr	r3, [pc, #36]	@ (802335c <cleanup_stdio+0x38>)
 8023338:	4299      	cmp	r1, r3
 802333a:	d002      	beq.n	8023342 <cleanup_stdio+0x1e>
 802333c:	4620      	mov	r0, r4
 802333e:	f000 fb23 	bl	8023988 <_fflush_r>
 8023342:	68e1      	ldr	r1, [r4, #12]
 8023344:	4b06      	ldr	r3, [pc, #24]	@ (8023360 <cleanup_stdio+0x3c>)
 8023346:	4299      	cmp	r1, r3
 8023348:	d004      	beq.n	8023354 <cleanup_stdio+0x30>
 802334a:	4620      	mov	r0, r4
 802334c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023350:	f000 bb1a 	b.w	8023988 <_fflush_r>
 8023354:	bd10      	pop	{r4, pc}
 8023356:	bf00      	nop
 8023358:	200026b8 	.word	0x200026b8
 802335c:	20002720 	.word	0x20002720
 8023360:	20002788 	.word	0x20002788

08023364 <global_stdio_init.part.0>:
 8023364:	b510      	push	{r4, lr}
 8023366:	4b0b      	ldr	r3, [pc, #44]	@ (8023394 <global_stdio_init.part.0+0x30>)
 8023368:	4c0b      	ldr	r4, [pc, #44]	@ (8023398 <global_stdio_init.part.0+0x34>)
 802336a:	4a0c      	ldr	r2, [pc, #48]	@ (802339c <global_stdio_init.part.0+0x38>)
 802336c:	601a      	str	r2, [r3, #0]
 802336e:	4620      	mov	r0, r4
 8023370:	2200      	movs	r2, #0
 8023372:	2104      	movs	r1, #4
 8023374:	f7ff ff94 	bl	80232a0 <std>
 8023378:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802337c:	2201      	movs	r2, #1
 802337e:	2109      	movs	r1, #9
 8023380:	f7ff ff8e 	bl	80232a0 <std>
 8023384:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8023388:	2202      	movs	r2, #2
 802338a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802338e:	2112      	movs	r1, #18
 8023390:	f7ff bf86 	b.w	80232a0 <std>
 8023394:	200027f0 	.word	0x200027f0
 8023398:	200026b8 	.word	0x200026b8
 802339c:	0802330d 	.word	0x0802330d

080233a0 <__sfp_lock_acquire>:
 80233a0:	4801      	ldr	r0, [pc, #4]	@ (80233a8 <__sfp_lock_acquire+0x8>)
 80233a2:	f000 b94c 	b.w	802363e <__retarget_lock_acquire_recursive>
 80233a6:	bf00      	nop
 80233a8:	200027f9 	.word	0x200027f9

080233ac <__sfp_lock_release>:
 80233ac:	4801      	ldr	r0, [pc, #4]	@ (80233b4 <__sfp_lock_release+0x8>)
 80233ae:	f000 b947 	b.w	8023640 <__retarget_lock_release_recursive>
 80233b2:	bf00      	nop
 80233b4:	200027f9 	.word	0x200027f9

080233b8 <__sinit>:
 80233b8:	b510      	push	{r4, lr}
 80233ba:	4604      	mov	r4, r0
 80233bc:	f7ff fff0 	bl	80233a0 <__sfp_lock_acquire>
 80233c0:	6a23      	ldr	r3, [r4, #32]
 80233c2:	b11b      	cbz	r3, 80233cc <__sinit+0x14>
 80233c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80233c8:	f7ff bff0 	b.w	80233ac <__sfp_lock_release>
 80233cc:	4b04      	ldr	r3, [pc, #16]	@ (80233e0 <__sinit+0x28>)
 80233ce:	6223      	str	r3, [r4, #32]
 80233d0:	4b04      	ldr	r3, [pc, #16]	@ (80233e4 <__sinit+0x2c>)
 80233d2:	681b      	ldr	r3, [r3, #0]
 80233d4:	2b00      	cmp	r3, #0
 80233d6:	d1f5      	bne.n	80233c4 <__sinit+0xc>
 80233d8:	f7ff ffc4 	bl	8023364 <global_stdio_init.part.0>
 80233dc:	e7f2      	b.n	80233c4 <__sinit+0xc>
 80233de:	bf00      	nop
 80233e0:	08023325 	.word	0x08023325
 80233e4:	200027f0 	.word	0x200027f0

080233e8 <_fwalk_sglue>:
 80233e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80233ec:	4607      	mov	r7, r0
 80233ee:	4688      	mov	r8, r1
 80233f0:	4614      	mov	r4, r2
 80233f2:	2600      	movs	r6, #0
 80233f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80233f8:	f1b9 0901 	subs.w	r9, r9, #1
 80233fc:	d505      	bpl.n	802340a <_fwalk_sglue+0x22>
 80233fe:	6824      	ldr	r4, [r4, #0]
 8023400:	2c00      	cmp	r4, #0
 8023402:	d1f7      	bne.n	80233f4 <_fwalk_sglue+0xc>
 8023404:	4630      	mov	r0, r6
 8023406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802340a:	89ab      	ldrh	r3, [r5, #12]
 802340c:	2b01      	cmp	r3, #1
 802340e:	d907      	bls.n	8023420 <_fwalk_sglue+0x38>
 8023410:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023414:	3301      	adds	r3, #1
 8023416:	d003      	beq.n	8023420 <_fwalk_sglue+0x38>
 8023418:	4629      	mov	r1, r5
 802341a:	4638      	mov	r0, r7
 802341c:	47c0      	blx	r8
 802341e:	4306      	orrs	r6, r0
 8023420:	3568      	adds	r5, #104	@ 0x68
 8023422:	e7e9      	b.n	80233f8 <_fwalk_sglue+0x10>

08023424 <__sread>:
 8023424:	b510      	push	{r4, lr}
 8023426:	460c      	mov	r4, r1
 8023428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802342c:	f000 f8b8 	bl	80235a0 <_read_r>
 8023430:	2800      	cmp	r0, #0
 8023432:	bfab      	itete	ge
 8023434:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8023436:	89a3      	ldrhlt	r3, [r4, #12]
 8023438:	181b      	addge	r3, r3, r0
 802343a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802343e:	bfac      	ite	ge
 8023440:	6563      	strge	r3, [r4, #84]	@ 0x54
 8023442:	81a3      	strhlt	r3, [r4, #12]
 8023444:	bd10      	pop	{r4, pc}

08023446 <__swrite>:
 8023446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802344a:	461f      	mov	r7, r3
 802344c:	898b      	ldrh	r3, [r1, #12]
 802344e:	05db      	lsls	r3, r3, #23
 8023450:	4605      	mov	r5, r0
 8023452:	460c      	mov	r4, r1
 8023454:	4616      	mov	r6, r2
 8023456:	d505      	bpl.n	8023464 <__swrite+0x1e>
 8023458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802345c:	2302      	movs	r3, #2
 802345e:	2200      	movs	r2, #0
 8023460:	f000 f88c 	bl	802357c <_lseek_r>
 8023464:	89a3      	ldrh	r3, [r4, #12]
 8023466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802346a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802346e:	81a3      	strh	r3, [r4, #12]
 8023470:	4632      	mov	r2, r6
 8023472:	463b      	mov	r3, r7
 8023474:	4628      	mov	r0, r5
 8023476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802347a:	f000 b8a3 	b.w	80235c4 <_write_r>

0802347e <__sseek>:
 802347e:	b510      	push	{r4, lr}
 8023480:	460c      	mov	r4, r1
 8023482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023486:	f000 f879 	bl	802357c <_lseek_r>
 802348a:	1c43      	adds	r3, r0, #1
 802348c:	89a3      	ldrh	r3, [r4, #12]
 802348e:	bf15      	itete	ne
 8023490:	6560      	strne	r0, [r4, #84]	@ 0x54
 8023492:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8023496:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802349a:	81a3      	strheq	r3, [r4, #12]
 802349c:	bf18      	it	ne
 802349e:	81a3      	strhne	r3, [r4, #12]
 80234a0:	bd10      	pop	{r4, pc}

080234a2 <__sclose>:
 80234a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80234a6:	f000 b859 	b.w	802355c <_close_r>

080234aa <memcmp>:
 80234aa:	b510      	push	{r4, lr}
 80234ac:	3901      	subs	r1, #1
 80234ae:	4402      	add	r2, r0
 80234b0:	4290      	cmp	r0, r2
 80234b2:	d101      	bne.n	80234b8 <memcmp+0xe>
 80234b4:	2000      	movs	r0, #0
 80234b6:	e005      	b.n	80234c4 <memcmp+0x1a>
 80234b8:	7803      	ldrb	r3, [r0, #0]
 80234ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80234be:	42a3      	cmp	r3, r4
 80234c0:	d001      	beq.n	80234c6 <memcmp+0x1c>
 80234c2:	1b18      	subs	r0, r3, r4
 80234c4:	bd10      	pop	{r4, pc}
 80234c6:	3001      	adds	r0, #1
 80234c8:	e7f2      	b.n	80234b0 <memcmp+0x6>

080234ca <memmove>:
 80234ca:	4288      	cmp	r0, r1
 80234cc:	b510      	push	{r4, lr}
 80234ce:	eb01 0402 	add.w	r4, r1, r2
 80234d2:	d902      	bls.n	80234da <memmove+0x10>
 80234d4:	4284      	cmp	r4, r0
 80234d6:	4623      	mov	r3, r4
 80234d8:	d807      	bhi.n	80234ea <memmove+0x20>
 80234da:	1e43      	subs	r3, r0, #1
 80234dc:	42a1      	cmp	r1, r4
 80234de:	d008      	beq.n	80234f2 <memmove+0x28>
 80234e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80234e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80234e8:	e7f8      	b.n	80234dc <memmove+0x12>
 80234ea:	4402      	add	r2, r0
 80234ec:	4601      	mov	r1, r0
 80234ee:	428a      	cmp	r2, r1
 80234f0:	d100      	bne.n	80234f4 <memmove+0x2a>
 80234f2:	bd10      	pop	{r4, pc}
 80234f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80234f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80234fc:	e7f7      	b.n	80234ee <memmove+0x24>
	...

08023500 <strcasecmp>:
 8023500:	b530      	push	{r4, r5, lr}
 8023502:	4d0b      	ldr	r5, [pc, #44]	@ (8023530 <strcasecmp+0x30>)
 8023504:	4604      	mov	r4, r0
 8023506:	f814 3b01 	ldrb.w	r3, [r4], #1
 802350a:	5cea      	ldrb	r2, [r5, r3]
 802350c:	f002 0203 	and.w	r2, r2, #3
 8023510:	2a01      	cmp	r2, #1
 8023512:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023516:	5ca8      	ldrb	r0, [r5, r2]
 8023518:	f000 0003 	and.w	r0, r0, #3
 802351c:	bf08      	it	eq
 802351e:	3320      	addeq	r3, #32
 8023520:	2801      	cmp	r0, #1
 8023522:	bf08      	it	eq
 8023524:	3220      	addeq	r2, #32
 8023526:	1a98      	subs	r0, r3, r2
 8023528:	d101      	bne.n	802352e <strcasecmp+0x2e>
 802352a:	2a00      	cmp	r2, #0
 802352c:	d1eb      	bne.n	8023506 <strcasecmp+0x6>
 802352e:	bd30      	pop	{r4, r5, pc}
 8023530:	080279d8 	.word	0x080279d8

08023534 <strncpy>:
 8023534:	b510      	push	{r4, lr}
 8023536:	3901      	subs	r1, #1
 8023538:	4603      	mov	r3, r0
 802353a:	b132      	cbz	r2, 802354a <strncpy+0x16>
 802353c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023540:	f803 4b01 	strb.w	r4, [r3], #1
 8023544:	3a01      	subs	r2, #1
 8023546:	2c00      	cmp	r4, #0
 8023548:	d1f7      	bne.n	802353a <strncpy+0x6>
 802354a:	441a      	add	r2, r3
 802354c:	2100      	movs	r1, #0
 802354e:	4293      	cmp	r3, r2
 8023550:	d100      	bne.n	8023554 <strncpy+0x20>
 8023552:	bd10      	pop	{r4, pc}
 8023554:	f803 1b01 	strb.w	r1, [r3], #1
 8023558:	e7f9      	b.n	802354e <strncpy+0x1a>
	...

0802355c <_close_r>:
 802355c:	b538      	push	{r3, r4, r5, lr}
 802355e:	4d06      	ldr	r5, [pc, #24]	@ (8023578 <_close_r+0x1c>)
 8023560:	2300      	movs	r3, #0
 8023562:	4604      	mov	r4, r0
 8023564:	4608      	mov	r0, r1
 8023566:	602b      	str	r3, [r5, #0]
 8023568:	f7df fcb6 	bl	8002ed8 <_close>
 802356c:	1c43      	adds	r3, r0, #1
 802356e:	d102      	bne.n	8023576 <_close_r+0x1a>
 8023570:	682b      	ldr	r3, [r5, #0]
 8023572:	b103      	cbz	r3, 8023576 <_close_r+0x1a>
 8023574:	6023      	str	r3, [r4, #0]
 8023576:	bd38      	pop	{r3, r4, r5, pc}
 8023578:	200027f4 	.word	0x200027f4

0802357c <_lseek_r>:
 802357c:	b538      	push	{r3, r4, r5, lr}
 802357e:	4d07      	ldr	r5, [pc, #28]	@ (802359c <_lseek_r+0x20>)
 8023580:	4604      	mov	r4, r0
 8023582:	4608      	mov	r0, r1
 8023584:	4611      	mov	r1, r2
 8023586:	2200      	movs	r2, #0
 8023588:	602a      	str	r2, [r5, #0]
 802358a:	461a      	mov	r2, r3
 802358c:	f7df fccb 	bl	8002f26 <_lseek>
 8023590:	1c43      	adds	r3, r0, #1
 8023592:	d102      	bne.n	802359a <_lseek_r+0x1e>
 8023594:	682b      	ldr	r3, [r5, #0]
 8023596:	b103      	cbz	r3, 802359a <_lseek_r+0x1e>
 8023598:	6023      	str	r3, [r4, #0]
 802359a:	bd38      	pop	{r3, r4, r5, pc}
 802359c:	200027f4 	.word	0x200027f4

080235a0 <_read_r>:
 80235a0:	b538      	push	{r3, r4, r5, lr}
 80235a2:	4d07      	ldr	r5, [pc, #28]	@ (80235c0 <_read_r+0x20>)
 80235a4:	4604      	mov	r4, r0
 80235a6:	4608      	mov	r0, r1
 80235a8:	4611      	mov	r1, r2
 80235aa:	2200      	movs	r2, #0
 80235ac:	602a      	str	r2, [r5, #0]
 80235ae:	461a      	mov	r2, r3
 80235b0:	f7df fc59 	bl	8002e66 <_read>
 80235b4:	1c43      	adds	r3, r0, #1
 80235b6:	d102      	bne.n	80235be <_read_r+0x1e>
 80235b8:	682b      	ldr	r3, [r5, #0]
 80235ba:	b103      	cbz	r3, 80235be <_read_r+0x1e>
 80235bc:	6023      	str	r3, [r4, #0]
 80235be:	bd38      	pop	{r3, r4, r5, pc}
 80235c0:	200027f4 	.word	0x200027f4

080235c4 <_write_r>:
 80235c4:	b538      	push	{r3, r4, r5, lr}
 80235c6:	4d07      	ldr	r5, [pc, #28]	@ (80235e4 <_write_r+0x20>)
 80235c8:	4604      	mov	r4, r0
 80235ca:	4608      	mov	r0, r1
 80235cc:	4611      	mov	r1, r2
 80235ce:	2200      	movs	r2, #0
 80235d0:	602a      	str	r2, [r5, #0]
 80235d2:	461a      	mov	r2, r3
 80235d4:	f7df fc64 	bl	8002ea0 <_write>
 80235d8:	1c43      	adds	r3, r0, #1
 80235da:	d102      	bne.n	80235e2 <_write_r+0x1e>
 80235dc:	682b      	ldr	r3, [r5, #0]
 80235de:	b103      	cbz	r3, 80235e2 <_write_r+0x1e>
 80235e0:	6023      	str	r3, [r4, #0]
 80235e2:	bd38      	pop	{r3, r4, r5, pc}
 80235e4:	200027f4 	.word	0x200027f4

080235e8 <__errno>:
 80235e8:	4b01      	ldr	r3, [pc, #4]	@ (80235f0 <__errno+0x8>)
 80235ea:	6818      	ldr	r0, [r3, #0]
 80235ec:	4770      	bx	lr
 80235ee:	bf00      	nop
 80235f0:	20000038 	.word	0x20000038

080235f4 <__libc_init_array>:
 80235f4:	b570      	push	{r4, r5, r6, lr}
 80235f6:	4d0d      	ldr	r5, [pc, #52]	@ (802362c <__libc_init_array+0x38>)
 80235f8:	4c0d      	ldr	r4, [pc, #52]	@ (8023630 <__libc_init_array+0x3c>)
 80235fa:	1b64      	subs	r4, r4, r5
 80235fc:	10a4      	asrs	r4, r4, #2
 80235fe:	2600      	movs	r6, #0
 8023600:	42a6      	cmp	r6, r4
 8023602:	d109      	bne.n	8023618 <__libc_init_array+0x24>
 8023604:	4d0b      	ldr	r5, [pc, #44]	@ (8023634 <__libc_init_array+0x40>)
 8023606:	4c0c      	ldr	r4, [pc, #48]	@ (8023638 <__libc_init_array+0x44>)
 8023608:	f000 fe3a 	bl	8024280 <_init>
 802360c:	1b64      	subs	r4, r4, r5
 802360e:	10a4      	asrs	r4, r4, #2
 8023610:	2600      	movs	r6, #0
 8023612:	42a6      	cmp	r6, r4
 8023614:	d105      	bne.n	8023622 <__libc_init_array+0x2e>
 8023616:	bd70      	pop	{r4, r5, r6, pc}
 8023618:	f855 3b04 	ldr.w	r3, [r5], #4
 802361c:	4798      	blx	r3
 802361e:	3601      	adds	r6, #1
 8023620:	e7ee      	b.n	8023600 <__libc_init_array+0xc>
 8023622:	f855 3b04 	ldr.w	r3, [r5], #4
 8023626:	4798      	blx	r3
 8023628:	3601      	adds	r6, #1
 802362a:	e7f2      	b.n	8023612 <__libc_init_array+0x1e>
 802362c:	08027b14 	.word	0x08027b14
 8023630:	08027b14 	.word	0x08027b14
 8023634:	08027b14 	.word	0x08027b14
 8023638:	08027b18 	.word	0x08027b18

0802363c <__retarget_lock_init_recursive>:
 802363c:	4770      	bx	lr

0802363e <__retarget_lock_acquire_recursive>:
 802363e:	4770      	bx	lr

08023640 <__retarget_lock_release_recursive>:
 8023640:	4770      	bx	lr
	...

08023644 <__assert_func>:
 8023644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023646:	4614      	mov	r4, r2
 8023648:	461a      	mov	r2, r3
 802364a:	4b09      	ldr	r3, [pc, #36]	@ (8023670 <__assert_func+0x2c>)
 802364c:	681b      	ldr	r3, [r3, #0]
 802364e:	4605      	mov	r5, r0
 8023650:	68d8      	ldr	r0, [r3, #12]
 8023652:	b954      	cbnz	r4, 802366a <__assert_func+0x26>
 8023654:	4b07      	ldr	r3, [pc, #28]	@ (8023674 <__assert_func+0x30>)
 8023656:	461c      	mov	r4, r3
 8023658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802365c:	9100      	str	r1, [sp, #0]
 802365e:	462b      	mov	r3, r5
 8023660:	4905      	ldr	r1, [pc, #20]	@ (8023678 <__assert_func+0x34>)
 8023662:	f000 f9b9 	bl	80239d8 <fiprintf>
 8023666:	f000 f9d9 	bl	8023a1c <abort>
 802366a:	4b04      	ldr	r3, [pc, #16]	@ (802367c <__assert_func+0x38>)
 802366c:	e7f4      	b.n	8023658 <__assert_func+0x14>
 802366e:	bf00      	nop
 8023670:	20000038 	.word	0x20000038
 8023674:	080279d6 	.word	0x080279d6
 8023678:	080279a8 	.word	0x080279a8
 802367c:	0802799b 	.word	0x0802799b

08023680 <_free_r>:
 8023680:	b538      	push	{r3, r4, r5, lr}
 8023682:	4605      	mov	r5, r0
 8023684:	2900      	cmp	r1, #0
 8023686:	d041      	beq.n	802370c <_free_r+0x8c>
 8023688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802368c:	1f0c      	subs	r4, r1, #4
 802368e:	2b00      	cmp	r3, #0
 8023690:	bfb8      	it	lt
 8023692:	18e4      	addlt	r4, r4, r3
 8023694:	f000 f8e8 	bl	8023868 <__malloc_lock>
 8023698:	4a1d      	ldr	r2, [pc, #116]	@ (8023710 <_free_r+0x90>)
 802369a:	6813      	ldr	r3, [r2, #0]
 802369c:	b933      	cbnz	r3, 80236ac <_free_r+0x2c>
 802369e:	6063      	str	r3, [r4, #4]
 80236a0:	6014      	str	r4, [r2, #0]
 80236a2:	4628      	mov	r0, r5
 80236a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80236a8:	f000 b8e4 	b.w	8023874 <__malloc_unlock>
 80236ac:	42a3      	cmp	r3, r4
 80236ae:	d908      	bls.n	80236c2 <_free_r+0x42>
 80236b0:	6820      	ldr	r0, [r4, #0]
 80236b2:	1821      	adds	r1, r4, r0
 80236b4:	428b      	cmp	r3, r1
 80236b6:	bf01      	itttt	eq
 80236b8:	6819      	ldreq	r1, [r3, #0]
 80236ba:	685b      	ldreq	r3, [r3, #4]
 80236bc:	1809      	addeq	r1, r1, r0
 80236be:	6021      	streq	r1, [r4, #0]
 80236c0:	e7ed      	b.n	802369e <_free_r+0x1e>
 80236c2:	461a      	mov	r2, r3
 80236c4:	685b      	ldr	r3, [r3, #4]
 80236c6:	b10b      	cbz	r3, 80236cc <_free_r+0x4c>
 80236c8:	42a3      	cmp	r3, r4
 80236ca:	d9fa      	bls.n	80236c2 <_free_r+0x42>
 80236cc:	6811      	ldr	r1, [r2, #0]
 80236ce:	1850      	adds	r0, r2, r1
 80236d0:	42a0      	cmp	r0, r4
 80236d2:	d10b      	bne.n	80236ec <_free_r+0x6c>
 80236d4:	6820      	ldr	r0, [r4, #0]
 80236d6:	4401      	add	r1, r0
 80236d8:	1850      	adds	r0, r2, r1
 80236da:	4283      	cmp	r3, r0
 80236dc:	6011      	str	r1, [r2, #0]
 80236de:	d1e0      	bne.n	80236a2 <_free_r+0x22>
 80236e0:	6818      	ldr	r0, [r3, #0]
 80236e2:	685b      	ldr	r3, [r3, #4]
 80236e4:	6053      	str	r3, [r2, #4]
 80236e6:	4408      	add	r0, r1
 80236e8:	6010      	str	r0, [r2, #0]
 80236ea:	e7da      	b.n	80236a2 <_free_r+0x22>
 80236ec:	d902      	bls.n	80236f4 <_free_r+0x74>
 80236ee:	230c      	movs	r3, #12
 80236f0:	602b      	str	r3, [r5, #0]
 80236f2:	e7d6      	b.n	80236a2 <_free_r+0x22>
 80236f4:	6820      	ldr	r0, [r4, #0]
 80236f6:	1821      	adds	r1, r4, r0
 80236f8:	428b      	cmp	r3, r1
 80236fa:	bf04      	itt	eq
 80236fc:	6819      	ldreq	r1, [r3, #0]
 80236fe:	685b      	ldreq	r3, [r3, #4]
 8023700:	6063      	str	r3, [r4, #4]
 8023702:	bf04      	itt	eq
 8023704:	1809      	addeq	r1, r1, r0
 8023706:	6021      	streq	r1, [r4, #0]
 8023708:	6054      	str	r4, [r2, #4]
 802370a:	e7ca      	b.n	80236a2 <_free_r+0x22>
 802370c:	bd38      	pop	{r3, r4, r5, pc}
 802370e:	bf00      	nop
 8023710:	20002800 	.word	0x20002800

08023714 <malloc>:
 8023714:	4b02      	ldr	r3, [pc, #8]	@ (8023720 <malloc+0xc>)
 8023716:	4601      	mov	r1, r0
 8023718:	6818      	ldr	r0, [r3, #0]
 802371a:	f000 b825 	b.w	8023768 <_malloc_r>
 802371e:	bf00      	nop
 8023720:	20000038 	.word	0x20000038

08023724 <sbrk_aligned>:
 8023724:	b570      	push	{r4, r5, r6, lr}
 8023726:	4e0f      	ldr	r6, [pc, #60]	@ (8023764 <sbrk_aligned+0x40>)
 8023728:	460c      	mov	r4, r1
 802372a:	6831      	ldr	r1, [r6, #0]
 802372c:	4605      	mov	r5, r0
 802372e:	b911      	cbnz	r1, 8023736 <sbrk_aligned+0x12>
 8023730:	f000 f964 	bl	80239fc <_sbrk_r>
 8023734:	6030      	str	r0, [r6, #0]
 8023736:	4621      	mov	r1, r4
 8023738:	4628      	mov	r0, r5
 802373a:	f000 f95f 	bl	80239fc <_sbrk_r>
 802373e:	1c43      	adds	r3, r0, #1
 8023740:	d103      	bne.n	802374a <sbrk_aligned+0x26>
 8023742:	f04f 34ff 	mov.w	r4, #4294967295
 8023746:	4620      	mov	r0, r4
 8023748:	bd70      	pop	{r4, r5, r6, pc}
 802374a:	1cc4      	adds	r4, r0, #3
 802374c:	f024 0403 	bic.w	r4, r4, #3
 8023750:	42a0      	cmp	r0, r4
 8023752:	d0f8      	beq.n	8023746 <sbrk_aligned+0x22>
 8023754:	1a21      	subs	r1, r4, r0
 8023756:	4628      	mov	r0, r5
 8023758:	f000 f950 	bl	80239fc <_sbrk_r>
 802375c:	3001      	adds	r0, #1
 802375e:	d1f2      	bne.n	8023746 <sbrk_aligned+0x22>
 8023760:	e7ef      	b.n	8023742 <sbrk_aligned+0x1e>
 8023762:	bf00      	nop
 8023764:	200027fc 	.word	0x200027fc

08023768 <_malloc_r>:
 8023768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802376c:	1ccd      	adds	r5, r1, #3
 802376e:	f025 0503 	bic.w	r5, r5, #3
 8023772:	3508      	adds	r5, #8
 8023774:	2d0c      	cmp	r5, #12
 8023776:	bf38      	it	cc
 8023778:	250c      	movcc	r5, #12
 802377a:	2d00      	cmp	r5, #0
 802377c:	4606      	mov	r6, r0
 802377e:	db01      	blt.n	8023784 <_malloc_r+0x1c>
 8023780:	42a9      	cmp	r1, r5
 8023782:	d904      	bls.n	802378e <_malloc_r+0x26>
 8023784:	230c      	movs	r3, #12
 8023786:	6033      	str	r3, [r6, #0]
 8023788:	2000      	movs	r0, #0
 802378a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802378e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8023864 <_malloc_r+0xfc>
 8023792:	f000 f869 	bl	8023868 <__malloc_lock>
 8023796:	f8d8 3000 	ldr.w	r3, [r8]
 802379a:	461c      	mov	r4, r3
 802379c:	bb44      	cbnz	r4, 80237f0 <_malloc_r+0x88>
 802379e:	4629      	mov	r1, r5
 80237a0:	4630      	mov	r0, r6
 80237a2:	f7ff ffbf 	bl	8023724 <sbrk_aligned>
 80237a6:	1c43      	adds	r3, r0, #1
 80237a8:	4604      	mov	r4, r0
 80237aa:	d158      	bne.n	802385e <_malloc_r+0xf6>
 80237ac:	f8d8 4000 	ldr.w	r4, [r8]
 80237b0:	4627      	mov	r7, r4
 80237b2:	2f00      	cmp	r7, #0
 80237b4:	d143      	bne.n	802383e <_malloc_r+0xd6>
 80237b6:	2c00      	cmp	r4, #0
 80237b8:	d04b      	beq.n	8023852 <_malloc_r+0xea>
 80237ba:	6823      	ldr	r3, [r4, #0]
 80237bc:	4639      	mov	r1, r7
 80237be:	4630      	mov	r0, r6
 80237c0:	eb04 0903 	add.w	r9, r4, r3
 80237c4:	f000 f91a 	bl	80239fc <_sbrk_r>
 80237c8:	4581      	cmp	r9, r0
 80237ca:	d142      	bne.n	8023852 <_malloc_r+0xea>
 80237cc:	6821      	ldr	r1, [r4, #0]
 80237ce:	1a6d      	subs	r5, r5, r1
 80237d0:	4629      	mov	r1, r5
 80237d2:	4630      	mov	r0, r6
 80237d4:	f7ff ffa6 	bl	8023724 <sbrk_aligned>
 80237d8:	3001      	adds	r0, #1
 80237da:	d03a      	beq.n	8023852 <_malloc_r+0xea>
 80237dc:	6823      	ldr	r3, [r4, #0]
 80237de:	442b      	add	r3, r5
 80237e0:	6023      	str	r3, [r4, #0]
 80237e2:	f8d8 3000 	ldr.w	r3, [r8]
 80237e6:	685a      	ldr	r2, [r3, #4]
 80237e8:	bb62      	cbnz	r2, 8023844 <_malloc_r+0xdc>
 80237ea:	f8c8 7000 	str.w	r7, [r8]
 80237ee:	e00f      	b.n	8023810 <_malloc_r+0xa8>
 80237f0:	6822      	ldr	r2, [r4, #0]
 80237f2:	1b52      	subs	r2, r2, r5
 80237f4:	d420      	bmi.n	8023838 <_malloc_r+0xd0>
 80237f6:	2a0b      	cmp	r2, #11
 80237f8:	d917      	bls.n	802382a <_malloc_r+0xc2>
 80237fa:	1961      	adds	r1, r4, r5
 80237fc:	42a3      	cmp	r3, r4
 80237fe:	6025      	str	r5, [r4, #0]
 8023800:	bf18      	it	ne
 8023802:	6059      	strne	r1, [r3, #4]
 8023804:	6863      	ldr	r3, [r4, #4]
 8023806:	bf08      	it	eq
 8023808:	f8c8 1000 	streq.w	r1, [r8]
 802380c:	5162      	str	r2, [r4, r5]
 802380e:	604b      	str	r3, [r1, #4]
 8023810:	4630      	mov	r0, r6
 8023812:	f000 f82f 	bl	8023874 <__malloc_unlock>
 8023816:	f104 000b 	add.w	r0, r4, #11
 802381a:	1d23      	adds	r3, r4, #4
 802381c:	f020 0007 	bic.w	r0, r0, #7
 8023820:	1ac2      	subs	r2, r0, r3
 8023822:	bf1c      	itt	ne
 8023824:	1a1b      	subne	r3, r3, r0
 8023826:	50a3      	strne	r3, [r4, r2]
 8023828:	e7af      	b.n	802378a <_malloc_r+0x22>
 802382a:	6862      	ldr	r2, [r4, #4]
 802382c:	42a3      	cmp	r3, r4
 802382e:	bf0c      	ite	eq
 8023830:	f8c8 2000 	streq.w	r2, [r8]
 8023834:	605a      	strne	r2, [r3, #4]
 8023836:	e7eb      	b.n	8023810 <_malloc_r+0xa8>
 8023838:	4623      	mov	r3, r4
 802383a:	6864      	ldr	r4, [r4, #4]
 802383c:	e7ae      	b.n	802379c <_malloc_r+0x34>
 802383e:	463c      	mov	r4, r7
 8023840:	687f      	ldr	r7, [r7, #4]
 8023842:	e7b6      	b.n	80237b2 <_malloc_r+0x4a>
 8023844:	461a      	mov	r2, r3
 8023846:	685b      	ldr	r3, [r3, #4]
 8023848:	42a3      	cmp	r3, r4
 802384a:	d1fb      	bne.n	8023844 <_malloc_r+0xdc>
 802384c:	2300      	movs	r3, #0
 802384e:	6053      	str	r3, [r2, #4]
 8023850:	e7de      	b.n	8023810 <_malloc_r+0xa8>
 8023852:	230c      	movs	r3, #12
 8023854:	6033      	str	r3, [r6, #0]
 8023856:	4630      	mov	r0, r6
 8023858:	f000 f80c 	bl	8023874 <__malloc_unlock>
 802385c:	e794      	b.n	8023788 <_malloc_r+0x20>
 802385e:	6005      	str	r5, [r0, #0]
 8023860:	e7d6      	b.n	8023810 <_malloc_r+0xa8>
 8023862:	bf00      	nop
 8023864:	20002800 	.word	0x20002800

08023868 <__malloc_lock>:
 8023868:	4801      	ldr	r0, [pc, #4]	@ (8023870 <__malloc_lock+0x8>)
 802386a:	f7ff bee8 	b.w	802363e <__retarget_lock_acquire_recursive>
 802386e:	bf00      	nop
 8023870:	200027f8 	.word	0x200027f8

08023874 <__malloc_unlock>:
 8023874:	4801      	ldr	r0, [pc, #4]	@ (802387c <__malloc_unlock+0x8>)
 8023876:	f7ff bee3 	b.w	8023640 <__retarget_lock_release_recursive>
 802387a:	bf00      	nop
 802387c:	200027f8 	.word	0x200027f8

08023880 <__sflush_r>:
 8023880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023888:	0716      	lsls	r6, r2, #28
 802388a:	4605      	mov	r5, r0
 802388c:	460c      	mov	r4, r1
 802388e:	d454      	bmi.n	802393a <__sflush_r+0xba>
 8023890:	684b      	ldr	r3, [r1, #4]
 8023892:	2b00      	cmp	r3, #0
 8023894:	dc02      	bgt.n	802389c <__sflush_r+0x1c>
 8023896:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023898:	2b00      	cmp	r3, #0
 802389a:	dd48      	ble.n	802392e <__sflush_r+0xae>
 802389c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802389e:	2e00      	cmp	r6, #0
 80238a0:	d045      	beq.n	802392e <__sflush_r+0xae>
 80238a2:	2300      	movs	r3, #0
 80238a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80238a8:	682f      	ldr	r7, [r5, #0]
 80238aa:	6a21      	ldr	r1, [r4, #32]
 80238ac:	602b      	str	r3, [r5, #0]
 80238ae:	d030      	beq.n	8023912 <__sflush_r+0x92>
 80238b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80238b2:	89a3      	ldrh	r3, [r4, #12]
 80238b4:	0759      	lsls	r1, r3, #29
 80238b6:	d505      	bpl.n	80238c4 <__sflush_r+0x44>
 80238b8:	6863      	ldr	r3, [r4, #4]
 80238ba:	1ad2      	subs	r2, r2, r3
 80238bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80238be:	b10b      	cbz	r3, 80238c4 <__sflush_r+0x44>
 80238c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80238c2:	1ad2      	subs	r2, r2, r3
 80238c4:	2300      	movs	r3, #0
 80238c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80238c8:	6a21      	ldr	r1, [r4, #32]
 80238ca:	4628      	mov	r0, r5
 80238cc:	47b0      	blx	r6
 80238ce:	1c43      	adds	r3, r0, #1
 80238d0:	89a3      	ldrh	r3, [r4, #12]
 80238d2:	d106      	bne.n	80238e2 <__sflush_r+0x62>
 80238d4:	6829      	ldr	r1, [r5, #0]
 80238d6:	291d      	cmp	r1, #29
 80238d8:	d82b      	bhi.n	8023932 <__sflush_r+0xb2>
 80238da:	4a2a      	ldr	r2, [pc, #168]	@ (8023984 <__sflush_r+0x104>)
 80238dc:	410a      	asrs	r2, r1
 80238de:	07d6      	lsls	r6, r2, #31
 80238e0:	d427      	bmi.n	8023932 <__sflush_r+0xb2>
 80238e2:	2200      	movs	r2, #0
 80238e4:	6062      	str	r2, [r4, #4]
 80238e6:	04d9      	lsls	r1, r3, #19
 80238e8:	6922      	ldr	r2, [r4, #16]
 80238ea:	6022      	str	r2, [r4, #0]
 80238ec:	d504      	bpl.n	80238f8 <__sflush_r+0x78>
 80238ee:	1c42      	adds	r2, r0, #1
 80238f0:	d101      	bne.n	80238f6 <__sflush_r+0x76>
 80238f2:	682b      	ldr	r3, [r5, #0]
 80238f4:	b903      	cbnz	r3, 80238f8 <__sflush_r+0x78>
 80238f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80238f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80238fa:	602f      	str	r7, [r5, #0]
 80238fc:	b1b9      	cbz	r1, 802392e <__sflush_r+0xae>
 80238fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023902:	4299      	cmp	r1, r3
 8023904:	d002      	beq.n	802390c <__sflush_r+0x8c>
 8023906:	4628      	mov	r0, r5
 8023908:	f7ff feba 	bl	8023680 <_free_r>
 802390c:	2300      	movs	r3, #0
 802390e:	6363      	str	r3, [r4, #52]	@ 0x34
 8023910:	e00d      	b.n	802392e <__sflush_r+0xae>
 8023912:	2301      	movs	r3, #1
 8023914:	4628      	mov	r0, r5
 8023916:	47b0      	blx	r6
 8023918:	4602      	mov	r2, r0
 802391a:	1c50      	adds	r0, r2, #1
 802391c:	d1c9      	bne.n	80238b2 <__sflush_r+0x32>
 802391e:	682b      	ldr	r3, [r5, #0]
 8023920:	2b00      	cmp	r3, #0
 8023922:	d0c6      	beq.n	80238b2 <__sflush_r+0x32>
 8023924:	2b1d      	cmp	r3, #29
 8023926:	d001      	beq.n	802392c <__sflush_r+0xac>
 8023928:	2b16      	cmp	r3, #22
 802392a:	d11e      	bne.n	802396a <__sflush_r+0xea>
 802392c:	602f      	str	r7, [r5, #0]
 802392e:	2000      	movs	r0, #0
 8023930:	e022      	b.n	8023978 <__sflush_r+0xf8>
 8023932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023936:	b21b      	sxth	r3, r3
 8023938:	e01b      	b.n	8023972 <__sflush_r+0xf2>
 802393a:	690f      	ldr	r7, [r1, #16]
 802393c:	2f00      	cmp	r7, #0
 802393e:	d0f6      	beq.n	802392e <__sflush_r+0xae>
 8023940:	0793      	lsls	r3, r2, #30
 8023942:	680e      	ldr	r6, [r1, #0]
 8023944:	bf08      	it	eq
 8023946:	694b      	ldreq	r3, [r1, #20]
 8023948:	600f      	str	r7, [r1, #0]
 802394a:	bf18      	it	ne
 802394c:	2300      	movne	r3, #0
 802394e:	eba6 0807 	sub.w	r8, r6, r7
 8023952:	608b      	str	r3, [r1, #8]
 8023954:	f1b8 0f00 	cmp.w	r8, #0
 8023958:	dde9      	ble.n	802392e <__sflush_r+0xae>
 802395a:	6a21      	ldr	r1, [r4, #32]
 802395c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802395e:	4643      	mov	r3, r8
 8023960:	463a      	mov	r2, r7
 8023962:	4628      	mov	r0, r5
 8023964:	47b0      	blx	r6
 8023966:	2800      	cmp	r0, #0
 8023968:	dc08      	bgt.n	802397c <__sflush_r+0xfc>
 802396a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802396e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023972:	81a3      	strh	r3, [r4, #12]
 8023974:	f04f 30ff 	mov.w	r0, #4294967295
 8023978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802397c:	4407      	add	r7, r0
 802397e:	eba8 0800 	sub.w	r8, r8, r0
 8023982:	e7e7      	b.n	8023954 <__sflush_r+0xd4>
 8023984:	dfbffffe 	.word	0xdfbffffe

08023988 <_fflush_r>:
 8023988:	b538      	push	{r3, r4, r5, lr}
 802398a:	690b      	ldr	r3, [r1, #16]
 802398c:	4605      	mov	r5, r0
 802398e:	460c      	mov	r4, r1
 8023990:	b913      	cbnz	r3, 8023998 <_fflush_r+0x10>
 8023992:	2500      	movs	r5, #0
 8023994:	4628      	mov	r0, r5
 8023996:	bd38      	pop	{r3, r4, r5, pc}
 8023998:	b118      	cbz	r0, 80239a2 <_fflush_r+0x1a>
 802399a:	6a03      	ldr	r3, [r0, #32]
 802399c:	b90b      	cbnz	r3, 80239a2 <_fflush_r+0x1a>
 802399e:	f7ff fd0b 	bl	80233b8 <__sinit>
 80239a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80239a6:	2b00      	cmp	r3, #0
 80239a8:	d0f3      	beq.n	8023992 <_fflush_r+0xa>
 80239aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80239ac:	07d0      	lsls	r0, r2, #31
 80239ae:	d404      	bmi.n	80239ba <_fflush_r+0x32>
 80239b0:	0599      	lsls	r1, r3, #22
 80239b2:	d402      	bmi.n	80239ba <_fflush_r+0x32>
 80239b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80239b6:	f7ff fe42 	bl	802363e <__retarget_lock_acquire_recursive>
 80239ba:	4628      	mov	r0, r5
 80239bc:	4621      	mov	r1, r4
 80239be:	f7ff ff5f 	bl	8023880 <__sflush_r>
 80239c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80239c4:	07da      	lsls	r2, r3, #31
 80239c6:	4605      	mov	r5, r0
 80239c8:	d4e4      	bmi.n	8023994 <_fflush_r+0xc>
 80239ca:	89a3      	ldrh	r3, [r4, #12]
 80239cc:	059b      	lsls	r3, r3, #22
 80239ce:	d4e1      	bmi.n	8023994 <_fflush_r+0xc>
 80239d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80239d2:	f7ff fe35 	bl	8023640 <__retarget_lock_release_recursive>
 80239d6:	e7dd      	b.n	8023994 <_fflush_r+0xc>

080239d8 <fiprintf>:
 80239d8:	b40e      	push	{r1, r2, r3}
 80239da:	b503      	push	{r0, r1, lr}
 80239dc:	4601      	mov	r1, r0
 80239de:	ab03      	add	r3, sp, #12
 80239e0:	4805      	ldr	r0, [pc, #20]	@ (80239f8 <fiprintf+0x20>)
 80239e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80239e6:	6800      	ldr	r0, [r0, #0]
 80239e8:	9301      	str	r3, [sp, #4]
 80239ea:	f000 f847 	bl	8023a7c <_vfiprintf_r>
 80239ee:	b002      	add	sp, #8
 80239f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80239f4:	b003      	add	sp, #12
 80239f6:	4770      	bx	lr
 80239f8:	20000038 	.word	0x20000038

080239fc <_sbrk_r>:
 80239fc:	b538      	push	{r3, r4, r5, lr}
 80239fe:	4d06      	ldr	r5, [pc, #24]	@ (8023a18 <_sbrk_r+0x1c>)
 8023a00:	2300      	movs	r3, #0
 8023a02:	4604      	mov	r4, r0
 8023a04:	4608      	mov	r0, r1
 8023a06:	602b      	str	r3, [r5, #0]
 8023a08:	f7df fa9a 	bl	8002f40 <_sbrk>
 8023a0c:	1c43      	adds	r3, r0, #1
 8023a0e:	d102      	bne.n	8023a16 <_sbrk_r+0x1a>
 8023a10:	682b      	ldr	r3, [r5, #0]
 8023a12:	b103      	cbz	r3, 8023a16 <_sbrk_r+0x1a>
 8023a14:	6023      	str	r3, [r4, #0]
 8023a16:	bd38      	pop	{r3, r4, r5, pc}
 8023a18:	200027f4 	.word	0x200027f4

08023a1c <abort>:
 8023a1c:	b508      	push	{r3, lr}
 8023a1e:	2006      	movs	r0, #6
 8023a20:	f000 fb8e 	bl	8024140 <raise>
 8023a24:	2001      	movs	r0, #1
 8023a26:	f7df fa13 	bl	8002e50 <_exit>

08023a2a <__sfputc_r>:
 8023a2a:	6893      	ldr	r3, [r2, #8]
 8023a2c:	3b01      	subs	r3, #1
 8023a2e:	2b00      	cmp	r3, #0
 8023a30:	b410      	push	{r4}
 8023a32:	6093      	str	r3, [r2, #8]
 8023a34:	da08      	bge.n	8023a48 <__sfputc_r+0x1e>
 8023a36:	6994      	ldr	r4, [r2, #24]
 8023a38:	42a3      	cmp	r3, r4
 8023a3a:	db01      	blt.n	8023a40 <__sfputc_r+0x16>
 8023a3c:	290a      	cmp	r1, #10
 8023a3e:	d103      	bne.n	8023a48 <__sfputc_r+0x1e>
 8023a40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023a44:	f000 bac0 	b.w	8023fc8 <__swbuf_r>
 8023a48:	6813      	ldr	r3, [r2, #0]
 8023a4a:	1c58      	adds	r0, r3, #1
 8023a4c:	6010      	str	r0, [r2, #0]
 8023a4e:	7019      	strb	r1, [r3, #0]
 8023a50:	4608      	mov	r0, r1
 8023a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023a56:	4770      	bx	lr

08023a58 <__sfputs_r>:
 8023a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a5a:	4606      	mov	r6, r0
 8023a5c:	460f      	mov	r7, r1
 8023a5e:	4614      	mov	r4, r2
 8023a60:	18d5      	adds	r5, r2, r3
 8023a62:	42ac      	cmp	r4, r5
 8023a64:	d101      	bne.n	8023a6a <__sfputs_r+0x12>
 8023a66:	2000      	movs	r0, #0
 8023a68:	e007      	b.n	8023a7a <__sfputs_r+0x22>
 8023a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023a6e:	463a      	mov	r2, r7
 8023a70:	4630      	mov	r0, r6
 8023a72:	f7ff ffda 	bl	8023a2a <__sfputc_r>
 8023a76:	1c43      	adds	r3, r0, #1
 8023a78:	d1f3      	bne.n	8023a62 <__sfputs_r+0xa>
 8023a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08023a7c <_vfiprintf_r>:
 8023a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a80:	460d      	mov	r5, r1
 8023a82:	b09d      	sub	sp, #116	@ 0x74
 8023a84:	4614      	mov	r4, r2
 8023a86:	4698      	mov	r8, r3
 8023a88:	4606      	mov	r6, r0
 8023a8a:	b118      	cbz	r0, 8023a94 <_vfiprintf_r+0x18>
 8023a8c:	6a03      	ldr	r3, [r0, #32]
 8023a8e:	b90b      	cbnz	r3, 8023a94 <_vfiprintf_r+0x18>
 8023a90:	f7ff fc92 	bl	80233b8 <__sinit>
 8023a94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023a96:	07d9      	lsls	r1, r3, #31
 8023a98:	d405      	bmi.n	8023aa6 <_vfiprintf_r+0x2a>
 8023a9a:	89ab      	ldrh	r3, [r5, #12]
 8023a9c:	059a      	lsls	r2, r3, #22
 8023a9e:	d402      	bmi.n	8023aa6 <_vfiprintf_r+0x2a>
 8023aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023aa2:	f7ff fdcc 	bl	802363e <__retarget_lock_acquire_recursive>
 8023aa6:	89ab      	ldrh	r3, [r5, #12]
 8023aa8:	071b      	lsls	r3, r3, #28
 8023aaa:	d501      	bpl.n	8023ab0 <_vfiprintf_r+0x34>
 8023aac:	692b      	ldr	r3, [r5, #16]
 8023aae:	b99b      	cbnz	r3, 8023ad8 <_vfiprintf_r+0x5c>
 8023ab0:	4629      	mov	r1, r5
 8023ab2:	4630      	mov	r0, r6
 8023ab4:	f000 fac6 	bl	8024044 <__swsetup_r>
 8023ab8:	b170      	cbz	r0, 8023ad8 <_vfiprintf_r+0x5c>
 8023aba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023abc:	07dc      	lsls	r4, r3, #31
 8023abe:	d504      	bpl.n	8023aca <_vfiprintf_r+0x4e>
 8023ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8023ac4:	b01d      	add	sp, #116	@ 0x74
 8023ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023aca:	89ab      	ldrh	r3, [r5, #12]
 8023acc:	0598      	lsls	r0, r3, #22
 8023ace:	d4f7      	bmi.n	8023ac0 <_vfiprintf_r+0x44>
 8023ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023ad2:	f7ff fdb5 	bl	8023640 <__retarget_lock_release_recursive>
 8023ad6:	e7f3      	b.n	8023ac0 <_vfiprintf_r+0x44>
 8023ad8:	2300      	movs	r3, #0
 8023ada:	9309      	str	r3, [sp, #36]	@ 0x24
 8023adc:	2320      	movs	r3, #32
 8023ade:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023ae2:	f8cd 800c 	str.w	r8, [sp, #12]
 8023ae6:	2330      	movs	r3, #48	@ 0x30
 8023ae8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023c98 <_vfiprintf_r+0x21c>
 8023aec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023af0:	f04f 0901 	mov.w	r9, #1
 8023af4:	4623      	mov	r3, r4
 8023af6:	469a      	mov	sl, r3
 8023af8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023afc:	b10a      	cbz	r2, 8023b02 <_vfiprintf_r+0x86>
 8023afe:	2a25      	cmp	r2, #37	@ 0x25
 8023b00:	d1f9      	bne.n	8023af6 <_vfiprintf_r+0x7a>
 8023b02:	ebba 0b04 	subs.w	fp, sl, r4
 8023b06:	d00b      	beq.n	8023b20 <_vfiprintf_r+0xa4>
 8023b08:	465b      	mov	r3, fp
 8023b0a:	4622      	mov	r2, r4
 8023b0c:	4629      	mov	r1, r5
 8023b0e:	4630      	mov	r0, r6
 8023b10:	f7ff ffa2 	bl	8023a58 <__sfputs_r>
 8023b14:	3001      	adds	r0, #1
 8023b16:	f000 80a7 	beq.w	8023c68 <_vfiprintf_r+0x1ec>
 8023b1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023b1c:	445a      	add	r2, fp
 8023b1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8023b20:	f89a 3000 	ldrb.w	r3, [sl]
 8023b24:	2b00      	cmp	r3, #0
 8023b26:	f000 809f 	beq.w	8023c68 <_vfiprintf_r+0x1ec>
 8023b2a:	2300      	movs	r3, #0
 8023b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8023b30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023b34:	f10a 0a01 	add.w	sl, sl, #1
 8023b38:	9304      	str	r3, [sp, #16]
 8023b3a:	9307      	str	r3, [sp, #28]
 8023b3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023b40:	931a      	str	r3, [sp, #104]	@ 0x68
 8023b42:	4654      	mov	r4, sl
 8023b44:	2205      	movs	r2, #5
 8023b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023b4a:	4853      	ldr	r0, [pc, #332]	@ (8023c98 <_vfiprintf_r+0x21c>)
 8023b4c:	f7dc fbe0 	bl	8000310 <memchr>
 8023b50:	9a04      	ldr	r2, [sp, #16]
 8023b52:	b9d8      	cbnz	r0, 8023b8c <_vfiprintf_r+0x110>
 8023b54:	06d1      	lsls	r1, r2, #27
 8023b56:	bf44      	itt	mi
 8023b58:	2320      	movmi	r3, #32
 8023b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023b5e:	0713      	lsls	r3, r2, #28
 8023b60:	bf44      	itt	mi
 8023b62:	232b      	movmi	r3, #43	@ 0x2b
 8023b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023b68:	f89a 3000 	ldrb.w	r3, [sl]
 8023b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8023b6e:	d015      	beq.n	8023b9c <_vfiprintf_r+0x120>
 8023b70:	9a07      	ldr	r2, [sp, #28]
 8023b72:	4654      	mov	r4, sl
 8023b74:	2000      	movs	r0, #0
 8023b76:	f04f 0c0a 	mov.w	ip, #10
 8023b7a:	4621      	mov	r1, r4
 8023b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023b80:	3b30      	subs	r3, #48	@ 0x30
 8023b82:	2b09      	cmp	r3, #9
 8023b84:	d94b      	bls.n	8023c1e <_vfiprintf_r+0x1a2>
 8023b86:	b1b0      	cbz	r0, 8023bb6 <_vfiprintf_r+0x13a>
 8023b88:	9207      	str	r2, [sp, #28]
 8023b8a:	e014      	b.n	8023bb6 <_vfiprintf_r+0x13a>
 8023b8c:	eba0 0308 	sub.w	r3, r0, r8
 8023b90:	fa09 f303 	lsl.w	r3, r9, r3
 8023b94:	4313      	orrs	r3, r2
 8023b96:	9304      	str	r3, [sp, #16]
 8023b98:	46a2      	mov	sl, r4
 8023b9a:	e7d2      	b.n	8023b42 <_vfiprintf_r+0xc6>
 8023b9c:	9b03      	ldr	r3, [sp, #12]
 8023b9e:	1d19      	adds	r1, r3, #4
 8023ba0:	681b      	ldr	r3, [r3, #0]
 8023ba2:	9103      	str	r1, [sp, #12]
 8023ba4:	2b00      	cmp	r3, #0
 8023ba6:	bfbb      	ittet	lt
 8023ba8:	425b      	neglt	r3, r3
 8023baa:	f042 0202 	orrlt.w	r2, r2, #2
 8023bae:	9307      	strge	r3, [sp, #28]
 8023bb0:	9307      	strlt	r3, [sp, #28]
 8023bb2:	bfb8      	it	lt
 8023bb4:	9204      	strlt	r2, [sp, #16]
 8023bb6:	7823      	ldrb	r3, [r4, #0]
 8023bb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8023bba:	d10a      	bne.n	8023bd2 <_vfiprintf_r+0x156>
 8023bbc:	7863      	ldrb	r3, [r4, #1]
 8023bbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8023bc0:	d132      	bne.n	8023c28 <_vfiprintf_r+0x1ac>
 8023bc2:	9b03      	ldr	r3, [sp, #12]
 8023bc4:	1d1a      	adds	r2, r3, #4
 8023bc6:	681b      	ldr	r3, [r3, #0]
 8023bc8:	9203      	str	r2, [sp, #12]
 8023bca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8023bce:	3402      	adds	r4, #2
 8023bd0:	9305      	str	r3, [sp, #20]
 8023bd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023ca8 <_vfiprintf_r+0x22c>
 8023bd6:	7821      	ldrb	r1, [r4, #0]
 8023bd8:	2203      	movs	r2, #3
 8023bda:	4650      	mov	r0, sl
 8023bdc:	f7dc fb98 	bl	8000310 <memchr>
 8023be0:	b138      	cbz	r0, 8023bf2 <_vfiprintf_r+0x176>
 8023be2:	9b04      	ldr	r3, [sp, #16]
 8023be4:	eba0 000a 	sub.w	r0, r0, sl
 8023be8:	2240      	movs	r2, #64	@ 0x40
 8023bea:	4082      	lsls	r2, r0
 8023bec:	4313      	orrs	r3, r2
 8023bee:	3401      	adds	r4, #1
 8023bf0:	9304      	str	r3, [sp, #16]
 8023bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023bf6:	4829      	ldr	r0, [pc, #164]	@ (8023c9c <_vfiprintf_r+0x220>)
 8023bf8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023bfc:	2206      	movs	r2, #6
 8023bfe:	f7dc fb87 	bl	8000310 <memchr>
 8023c02:	2800      	cmp	r0, #0
 8023c04:	d03f      	beq.n	8023c86 <_vfiprintf_r+0x20a>
 8023c06:	4b26      	ldr	r3, [pc, #152]	@ (8023ca0 <_vfiprintf_r+0x224>)
 8023c08:	bb1b      	cbnz	r3, 8023c52 <_vfiprintf_r+0x1d6>
 8023c0a:	9b03      	ldr	r3, [sp, #12]
 8023c0c:	3307      	adds	r3, #7
 8023c0e:	f023 0307 	bic.w	r3, r3, #7
 8023c12:	3308      	adds	r3, #8
 8023c14:	9303      	str	r3, [sp, #12]
 8023c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023c18:	443b      	add	r3, r7
 8023c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8023c1c:	e76a      	b.n	8023af4 <_vfiprintf_r+0x78>
 8023c1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8023c22:	460c      	mov	r4, r1
 8023c24:	2001      	movs	r0, #1
 8023c26:	e7a8      	b.n	8023b7a <_vfiprintf_r+0xfe>
 8023c28:	2300      	movs	r3, #0
 8023c2a:	3401      	adds	r4, #1
 8023c2c:	9305      	str	r3, [sp, #20]
 8023c2e:	4619      	mov	r1, r3
 8023c30:	f04f 0c0a 	mov.w	ip, #10
 8023c34:	4620      	mov	r0, r4
 8023c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023c3a:	3a30      	subs	r2, #48	@ 0x30
 8023c3c:	2a09      	cmp	r2, #9
 8023c3e:	d903      	bls.n	8023c48 <_vfiprintf_r+0x1cc>
 8023c40:	2b00      	cmp	r3, #0
 8023c42:	d0c6      	beq.n	8023bd2 <_vfiprintf_r+0x156>
 8023c44:	9105      	str	r1, [sp, #20]
 8023c46:	e7c4      	b.n	8023bd2 <_vfiprintf_r+0x156>
 8023c48:	fb0c 2101 	mla	r1, ip, r1, r2
 8023c4c:	4604      	mov	r4, r0
 8023c4e:	2301      	movs	r3, #1
 8023c50:	e7f0      	b.n	8023c34 <_vfiprintf_r+0x1b8>
 8023c52:	ab03      	add	r3, sp, #12
 8023c54:	9300      	str	r3, [sp, #0]
 8023c56:	462a      	mov	r2, r5
 8023c58:	4b12      	ldr	r3, [pc, #72]	@ (8023ca4 <_vfiprintf_r+0x228>)
 8023c5a:	a904      	add	r1, sp, #16
 8023c5c:	4630      	mov	r0, r6
 8023c5e:	f3af 8000 	nop.w
 8023c62:	4607      	mov	r7, r0
 8023c64:	1c78      	adds	r0, r7, #1
 8023c66:	d1d6      	bne.n	8023c16 <_vfiprintf_r+0x19a>
 8023c68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023c6a:	07d9      	lsls	r1, r3, #31
 8023c6c:	d405      	bmi.n	8023c7a <_vfiprintf_r+0x1fe>
 8023c6e:	89ab      	ldrh	r3, [r5, #12]
 8023c70:	059a      	lsls	r2, r3, #22
 8023c72:	d402      	bmi.n	8023c7a <_vfiprintf_r+0x1fe>
 8023c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023c76:	f7ff fce3 	bl	8023640 <__retarget_lock_release_recursive>
 8023c7a:	89ab      	ldrh	r3, [r5, #12]
 8023c7c:	065b      	lsls	r3, r3, #25
 8023c7e:	f53f af1f 	bmi.w	8023ac0 <_vfiprintf_r+0x44>
 8023c82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023c84:	e71e      	b.n	8023ac4 <_vfiprintf_r+0x48>
 8023c86:	ab03      	add	r3, sp, #12
 8023c88:	9300      	str	r3, [sp, #0]
 8023c8a:	462a      	mov	r2, r5
 8023c8c:	4b05      	ldr	r3, [pc, #20]	@ (8023ca4 <_vfiprintf_r+0x228>)
 8023c8e:	a904      	add	r1, sp, #16
 8023c90:	4630      	mov	r0, r6
 8023c92:	f000 f879 	bl	8023d88 <_printf_i>
 8023c96:	e7e4      	b.n	8023c62 <_vfiprintf_r+0x1e6>
 8023c98:	08027ad8 	.word	0x08027ad8
 8023c9c:	08027ae2 	.word	0x08027ae2
 8023ca0:	00000000 	.word	0x00000000
 8023ca4:	08023a59 	.word	0x08023a59
 8023ca8:	08027ade 	.word	0x08027ade

08023cac <_printf_common>:
 8023cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023cb0:	4616      	mov	r6, r2
 8023cb2:	4698      	mov	r8, r3
 8023cb4:	688a      	ldr	r2, [r1, #8]
 8023cb6:	690b      	ldr	r3, [r1, #16]
 8023cb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023cbc:	4293      	cmp	r3, r2
 8023cbe:	bfb8      	it	lt
 8023cc0:	4613      	movlt	r3, r2
 8023cc2:	6033      	str	r3, [r6, #0]
 8023cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023cc8:	4607      	mov	r7, r0
 8023cca:	460c      	mov	r4, r1
 8023ccc:	b10a      	cbz	r2, 8023cd2 <_printf_common+0x26>
 8023cce:	3301      	adds	r3, #1
 8023cd0:	6033      	str	r3, [r6, #0]
 8023cd2:	6823      	ldr	r3, [r4, #0]
 8023cd4:	0699      	lsls	r1, r3, #26
 8023cd6:	bf42      	ittt	mi
 8023cd8:	6833      	ldrmi	r3, [r6, #0]
 8023cda:	3302      	addmi	r3, #2
 8023cdc:	6033      	strmi	r3, [r6, #0]
 8023cde:	6825      	ldr	r5, [r4, #0]
 8023ce0:	f015 0506 	ands.w	r5, r5, #6
 8023ce4:	d106      	bne.n	8023cf4 <_printf_common+0x48>
 8023ce6:	f104 0a19 	add.w	sl, r4, #25
 8023cea:	68e3      	ldr	r3, [r4, #12]
 8023cec:	6832      	ldr	r2, [r6, #0]
 8023cee:	1a9b      	subs	r3, r3, r2
 8023cf0:	42ab      	cmp	r3, r5
 8023cf2:	dc26      	bgt.n	8023d42 <_printf_common+0x96>
 8023cf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023cf8:	6822      	ldr	r2, [r4, #0]
 8023cfa:	3b00      	subs	r3, #0
 8023cfc:	bf18      	it	ne
 8023cfe:	2301      	movne	r3, #1
 8023d00:	0692      	lsls	r2, r2, #26
 8023d02:	d42b      	bmi.n	8023d5c <_printf_common+0xb0>
 8023d04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023d08:	4641      	mov	r1, r8
 8023d0a:	4638      	mov	r0, r7
 8023d0c:	47c8      	blx	r9
 8023d0e:	3001      	adds	r0, #1
 8023d10:	d01e      	beq.n	8023d50 <_printf_common+0xa4>
 8023d12:	6823      	ldr	r3, [r4, #0]
 8023d14:	6922      	ldr	r2, [r4, #16]
 8023d16:	f003 0306 	and.w	r3, r3, #6
 8023d1a:	2b04      	cmp	r3, #4
 8023d1c:	bf02      	ittt	eq
 8023d1e:	68e5      	ldreq	r5, [r4, #12]
 8023d20:	6833      	ldreq	r3, [r6, #0]
 8023d22:	1aed      	subeq	r5, r5, r3
 8023d24:	68a3      	ldr	r3, [r4, #8]
 8023d26:	bf0c      	ite	eq
 8023d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023d2c:	2500      	movne	r5, #0
 8023d2e:	4293      	cmp	r3, r2
 8023d30:	bfc4      	itt	gt
 8023d32:	1a9b      	subgt	r3, r3, r2
 8023d34:	18ed      	addgt	r5, r5, r3
 8023d36:	2600      	movs	r6, #0
 8023d38:	341a      	adds	r4, #26
 8023d3a:	42b5      	cmp	r5, r6
 8023d3c:	d11a      	bne.n	8023d74 <_printf_common+0xc8>
 8023d3e:	2000      	movs	r0, #0
 8023d40:	e008      	b.n	8023d54 <_printf_common+0xa8>
 8023d42:	2301      	movs	r3, #1
 8023d44:	4652      	mov	r2, sl
 8023d46:	4641      	mov	r1, r8
 8023d48:	4638      	mov	r0, r7
 8023d4a:	47c8      	blx	r9
 8023d4c:	3001      	adds	r0, #1
 8023d4e:	d103      	bne.n	8023d58 <_printf_common+0xac>
 8023d50:	f04f 30ff 	mov.w	r0, #4294967295
 8023d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023d58:	3501      	adds	r5, #1
 8023d5a:	e7c6      	b.n	8023cea <_printf_common+0x3e>
 8023d5c:	18e1      	adds	r1, r4, r3
 8023d5e:	1c5a      	adds	r2, r3, #1
 8023d60:	2030      	movs	r0, #48	@ 0x30
 8023d62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8023d66:	4422      	add	r2, r4
 8023d68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8023d6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8023d70:	3302      	adds	r3, #2
 8023d72:	e7c7      	b.n	8023d04 <_printf_common+0x58>
 8023d74:	2301      	movs	r3, #1
 8023d76:	4622      	mov	r2, r4
 8023d78:	4641      	mov	r1, r8
 8023d7a:	4638      	mov	r0, r7
 8023d7c:	47c8      	blx	r9
 8023d7e:	3001      	adds	r0, #1
 8023d80:	d0e6      	beq.n	8023d50 <_printf_common+0xa4>
 8023d82:	3601      	adds	r6, #1
 8023d84:	e7d9      	b.n	8023d3a <_printf_common+0x8e>
	...

08023d88 <_printf_i>:
 8023d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023d8c:	7e0f      	ldrb	r7, [r1, #24]
 8023d8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023d90:	2f78      	cmp	r7, #120	@ 0x78
 8023d92:	4691      	mov	r9, r2
 8023d94:	4680      	mov	r8, r0
 8023d96:	460c      	mov	r4, r1
 8023d98:	469a      	mov	sl, r3
 8023d9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8023d9e:	d807      	bhi.n	8023db0 <_printf_i+0x28>
 8023da0:	2f62      	cmp	r7, #98	@ 0x62
 8023da2:	d80a      	bhi.n	8023dba <_printf_i+0x32>
 8023da4:	2f00      	cmp	r7, #0
 8023da6:	f000 80d2 	beq.w	8023f4e <_printf_i+0x1c6>
 8023daa:	2f58      	cmp	r7, #88	@ 0x58
 8023dac:	f000 80b9 	beq.w	8023f22 <_printf_i+0x19a>
 8023db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023db4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023db8:	e03a      	b.n	8023e30 <_printf_i+0xa8>
 8023dba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8023dbe:	2b15      	cmp	r3, #21
 8023dc0:	d8f6      	bhi.n	8023db0 <_printf_i+0x28>
 8023dc2:	a101      	add	r1, pc, #4	@ (adr r1, 8023dc8 <_printf_i+0x40>)
 8023dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023dc8:	08023e21 	.word	0x08023e21
 8023dcc:	08023e35 	.word	0x08023e35
 8023dd0:	08023db1 	.word	0x08023db1
 8023dd4:	08023db1 	.word	0x08023db1
 8023dd8:	08023db1 	.word	0x08023db1
 8023ddc:	08023db1 	.word	0x08023db1
 8023de0:	08023e35 	.word	0x08023e35
 8023de4:	08023db1 	.word	0x08023db1
 8023de8:	08023db1 	.word	0x08023db1
 8023dec:	08023db1 	.word	0x08023db1
 8023df0:	08023db1 	.word	0x08023db1
 8023df4:	08023f35 	.word	0x08023f35
 8023df8:	08023e5f 	.word	0x08023e5f
 8023dfc:	08023eef 	.word	0x08023eef
 8023e00:	08023db1 	.word	0x08023db1
 8023e04:	08023db1 	.word	0x08023db1
 8023e08:	08023f57 	.word	0x08023f57
 8023e0c:	08023db1 	.word	0x08023db1
 8023e10:	08023e5f 	.word	0x08023e5f
 8023e14:	08023db1 	.word	0x08023db1
 8023e18:	08023db1 	.word	0x08023db1
 8023e1c:	08023ef7 	.word	0x08023ef7
 8023e20:	6833      	ldr	r3, [r6, #0]
 8023e22:	1d1a      	adds	r2, r3, #4
 8023e24:	681b      	ldr	r3, [r3, #0]
 8023e26:	6032      	str	r2, [r6, #0]
 8023e28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023e2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023e30:	2301      	movs	r3, #1
 8023e32:	e09d      	b.n	8023f70 <_printf_i+0x1e8>
 8023e34:	6833      	ldr	r3, [r6, #0]
 8023e36:	6820      	ldr	r0, [r4, #0]
 8023e38:	1d19      	adds	r1, r3, #4
 8023e3a:	6031      	str	r1, [r6, #0]
 8023e3c:	0606      	lsls	r6, r0, #24
 8023e3e:	d501      	bpl.n	8023e44 <_printf_i+0xbc>
 8023e40:	681d      	ldr	r5, [r3, #0]
 8023e42:	e003      	b.n	8023e4c <_printf_i+0xc4>
 8023e44:	0645      	lsls	r5, r0, #25
 8023e46:	d5fb      	bpl.n	8023e40 <_printf_i+0xb8>
 8023e48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8023e4c:	2d00      	cmp	r5, #0
 8023e4e:	da03      	bge.n	8023e58 <_printf_i+0xd0>
 8023e50:	232d      	movs	r3, #45	@ 0x2d
 8023e52:	426d      	negs	r5, r5
 8023e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023e58:	4859      	ldr	r0, [pc, #356]	@ (8023fc0 <_printf_i+0x238>)
 8023e5a:	230a      	movs	r3, #10
 8023e5c:	e011      	b.n	8023e82 <_printf_i+0xfa>
 8023e5e:	6821      	ldr	r1, [r4, #0]
 8023e60:	6833      	ldr	r3, [r6, #0]
 8023e62:	0608      	lsls	r0, r1, #24
 8023e64:	f853 5b04 	ldr.w	r5, [r3], #4
 8023e68:	d402      	bmi.n	8023e70 <_printf_i+0xe8>
 8023e6a:	0649      	lsls	r1, r1, #25
 8023e6c:	bf48      	it	mi
 8023e6e:	b2ad      	uxthmi	r5, r5
 8023e70:	2f6f      	cmp	r7, #111	@ 0x6f
 8023e72:	4853      	ldr	r0, [pc, #332]	@ (8023fc0 <_printf_i+0x238>)
 8023e74:	6033      	str	r3, [r6, #0]
 8023e76:	bf14      	ite	ne
 8023e78:	230a      	movne	r3, #10
 8023e7a:	2308      	moveq	r3, #8
 8023e7c:	2100      	movs	r1, #0
 8023e7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8023e82:	6866      	ldr	r6, [r4, #4]
 8023e84:	60a6      	str	r6, [r4, #8]
 8023e86:	2e00      	cmp	r6, #0
 8023e88:	bfa2      	ittt	ge
 8023e8a:	6821      	ldrge	r1, [r4, #0]
 8023e8c:	f021 0104 	bicge.w	r1, r1, #4
 8023e90:	6021      	strge	r1, [r4, #0]
 8023e92:	b90d      	cbnz	r5, 8023e98 <_printf_i+0x110>
 8023e94:	2e00      	cmp	r6, #0
 8023e96:	d04b      	beq.n	8023f30 <_printf_i+0x1a8>
 8023e98:	4616      	mov	r6, r2
 8023e9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8023e9e:	fb03 5711 	mls	r7, r3, r1, r5
 8023ea2:	5dc7      	ldrb	r7, [r0, r7]
 8023ea4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023ea8:	462f      	mov	r7, r5
 8023eaa:	42bb      	cmp	r3, r7
 8023eac:	460d      	mov	r5, r1
 8023eae:	d9f4      	bls.n	8023e9a <_printf_i+0x112>
 8023eb0:	2b08      	cmp	r3, #8
 8023eb2:	d10b      	bne.n	8023ecc <_printf_i+0x144>
 8023eb4:	6823      	ldr	r3, [r4, #0]
 8023eb6:	07df      	lsls	r7, r3, #31
 8023eb8:	d508      	bpl.n	8023ecc <_printf_i+0x144>
 8023eba:	6923      	ldr	r3, [r4, #16]
 8023ebc:	6861      	ldr	r1, [r4, #4]
 8023ebe:	4299      	cmp	r1, r3
 8023ec0:	bfde      	ittt	le
 8023ec2:	2330      	movle	r3, #48	@ 0x30
 8023ec4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023ec8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023ecc:	1b92      	subs	r2, r2, r6
 8023ece:	6122      	str	r2, [r4, #16]
 8023ed0:	f8cd a000 	str.w	sl, [sp]
 8023ed4:	464b      	mov	r3, r9
 8023ed6:	aa03      	add	r2, sp, #12
 8023ed8:	4621      	mov	r1, r4
 8023eda:	4640      	mov	r0, r8
 8023edc:	f7ff fee6 	bl	8023cac <_printf_common>
 8023ee0:	3001      	adds	r0, #1
 8023ee2:	d14a      	bne.n	8023f7a <_printf_i+0x1f2>
 8023ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8023ee8:	b004      	add	sp, #16
 8023eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023eee:	6823      	ldr	r3, [r4, #0]
 8023ef0:	f043 0320 	orr.w	r3, r3, #32
 8023ef4:	6023      	str	r3, [r4, #0]
 8023ef6:	4833      	ldr	r0, [pc, #204]	@ (8023fc4 <_printf_i+0x23c>)
 8023ef8:	2778      	movs	r7, #120	@ 0x78
 8023efa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8023efe:	6823      	ldr	r3, [r4, #0]
 8023f00:	6831      	ldr	r1, [r6, #0]
 8023f02:	061f      	lsls	r7, r3, #24
 8023f04:	f851 5b04 	ldr.w	r5, [r1], #4
 8023f08:	d402      	bmi.n	8023f10 <_printf_i+0x188>
 8023f0a:	065f      	lsls	r7, r3, #25
 8023f0c:	bf48      	it	mi
 8023f0e:	b2ad      	uxthmi	r5, r5
 8023f10:	6031      	str	r1, [r6, #0]
 8023f12:	07d9      	lsls	r1, r3, #31
 8023f14:	bf44      	itt	mi
 8023f16:	f043 0320 	orrmi.w	r3, r3, #32
 8023f1a:	6023      	strmi	r3, [r4, #0]
 8023f1c:	b11d      	cbz	r5, 8023f26 <_printf_i+0x19e>
 8023f1e:	2310      	movs	r3, #16
 8023f20:	e7ac      	b.n	8023e7c <_printf_i+0xf4>
 8023f22:	4827      	ldr	r0, [pc, #156]	@ (8023fc0 <_printf_i+0x238>)
 8023f24:	e7e9      	b.n	8023efa <_printf_i+0x172>
 8023f26:	6823      	ldr	r3, [r4, #0]
 8023f28:	f023 0320 	bic.w	r3, r3, #32
 8023f2c:	6023      	str	r3, [r4, #0]
 8023f2e:	e7f6      	b.n	8023f1e <_printf_i+0x196>
 8023f30:	4616      	mov	r6, r2
 8023f32:	e7bd      	b.n	8023eb0 <_printf_i+0x128>
 8023f34:	6833      	ldr	r3, [r6, #0]
 8023f36:	6825      	ldr	r5, [r4, #0]
 8023f38:	6961      	ldr	r1, [r4, #20]
 8023f3a:	1d18      	adds	r0, r3, #4
 8023f3c:	6030      	str	r0, [r6, #0]
 8023f3e:	062e      	lsls	r6, r5, #24
 8023f40:	681b      	ldr	r3, [r3, #0]
 8023f42:	d501      	bpl.n	8023f48 <_printf_i+0x1c0>
 8023f44:	6019      	str	r1, [r3, #0]
 8023f46:	e002      	b.n	8023f4e <_printf_i+0x1c6>
 8023f48:	0668      	lsls	r0, r5, #25
 8023f4a:	d5fb      	bpl.n	8023f44 <_printf_i+0x1bc>
 8023f4c:	8019      	strh	r1, [r3, #0]
 8023f4e:	2300      	movs	r3, #0
 8023f50:	6123      	str	r3, [r4, #16]
 8023f52:	4616      	mov	r6, r2
 8023f54:	e7bc      	b.n	8023ed0 <_printf_i+0x148>
 8023f56:	6833      	ldr	r3, [r6, #0]
 8023f58:	1d1a      	adds	r2, r3, #4
 8023f5a:	6032      	str	r2, [r6, #0]
 8023f5c:	681e      	ldr	r6, [r3, #0]
 8023f5e:	6862      	ldr	r2, [r4, #4]
 8023f60:	2100      	movs	r1, #0
 8023f62:	4630      	mov	r0, r6
 8023f64:	f7dc f9d4 	bl	8000310 <memchr>
 8023f68:	b108      	cbz	r0, 8023f6e <_printf_i+0x1e6>
 8023f6a:	1b80      	subs	r0, r0, r6
 8023f6c:	6060      	str	r0, [r4, #4]
 8023f6e:	6863      	ldr	r3, [r4, #4]
 8023f70:	6123      	str	r3, [r4, #16]
 8023f72:	2300      	movs	r3, #0
 8023f74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023f78:	e7aa      	b.n	8023ed0 <_printf_i+0x148>
 8023f7a:	6923      	ldr	r3, [r4, #16]
 8023f7c:	4632      	mov	r2, r6
 8023f7e:	4649      	mov	r1, r9
 8023f80:	4640      	mov	r0, r8
 8023f82:	47d0      	blx	sl
 8023f84:	3001      	adds	r0, #1
 8023f86:	d0ad      	beq.n	8023ee4 <_printf_i+0x15c>
 8023f88:	6823      	ldr	r3, [r4, #0]
 8023f8a:	079b      	lsls	r3, r3, #30
 8023f8c:	d413      	bmi.n	8023fb6 <_printf_i+0x22e>
 8023f8e:	68e0      	ldr	r0, [r4, #12]
 8023f90:	9b03      	ldr	r3, [sp, #12]
 8023f92:	4298      	cmp	r0, r3
 8023f94:	bfb8      	it	lt
 8023f96:	4618      	movlt	r0, r3
 8023f98:	e7a6      	b.n	8023ee8 <_printf_i+0x160>
 8023f9a:	2301      	movs	r3, #1
 8023f9c:	4632      	mov	r2, r6
 8023f9e:	4649      	mov	r1, r9
 8023fa0:	4640      	mov	r0, r8
 8023fa2:	47d0      	blx	sl
 8023fa4:	3001      	adds	r0, #1
 8023fa6:	d09d      	beq.n	8023ee4 <_printf_i+0x15c>
 8023fa8:	3501      	adds	r5, #1
 8023faa:	68e3      	ldr	r3, [r4, #12]
 8023fac:	9903      	ldr	r1, [sp, #12]
 8023fae:	1a5b      	subs	r3, r3, r1
 8023fb0:	42ab      	cmp	r3, r5
 8023fb2:	dcf2      	bgt.n	8023f9a <_printf_i+0x212>
 8023fb4:	e7eb      	b.n	8023f8e <_printf_i+0x206>
 8023fb6:	2500      	movs	r5, #0
 8023fb8:	f104 0619 	add.w	r6, r4, #25
 8023fbc:	e7f5      	b.n	8023faa <_printf_i+0x222>
 8023fbe:	bf00      	nop
 8023fc0:	08027ae9 	.word	0x08027ae9
 8023fc4:	08027afa 	.word	0x08027afa

08023fc8 <__swbuf_r>:
 8023fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023fca:	460e      	mov	r6, r1
 8023fcc:	4614      	mov	r4, r2
 8023fce:	4605      	mov	r5, r0
 8023fd0:	b118      	cbz	r0, 8023fda <__swbuf_r+0x12>
 8023fd2:	6a03      	ldr	r3, [r0, #32]
 8023fd4:	b90b      	cbnz	r3, 8023fda <__swbuf_r+0x12>
 8023fd6:	f7ff f9ef 	bl	80233b8 <__sinit>
 8023fda:	69a3      	ldr	r3, [r4, #24]
 8023fdc:	60a3      	str	r3, [r4, #8]
 8023fde:	89a3      	ldrh	r3, [r4, #12]
 8023fe0:	071a      	lsls	r2, r3, #28
 8023fe2:	d501      	bpl.n	8023fe8 <__swbuf_r+0x20>
 8023fe4:	6923      	ldr	r3, [r4, #16]
 8023fe6:	b943      	cbnz	r3, 8023ffa <__swbuf_r+0x32>
 8023fe8:	4621      	mov	r1, r4
 8023fea:	4628      	mov	r0, r5
 8023fec:	f000 f82a 	bl	8024044 <__swsetup_r>
 8023ff0:	b118      	cbz	r0, 8023ffa <__swbuf_r+0x32>
 8023ff2:	f04f 37ff 	mov.w	r7, #4294967295
 8023ff6:	4638      	mov	r0, r7
 8023ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023ffa:	6823      	ldr	r3, [r4, #0]
 8023ffc:	6922      	ldr	r2, [r4, #16]
 8023ffe:	1a98      	subs	r0, r3, r2
 8024000:	6963      	ldr	r3, [r4, #20]
 8024002:	b2f6      	uxtb	r6, r6
 8024004:	4283      	cmp	r3, r0
 8024006:	4637      	mov	r7, r6
 8024008:	dc05      	bgt.n	8024016 <__swbuf_r+0x4e>
 802400a:	4621      	mov	r1, r4
 802400c:	4628      	mov	r0, r5
 802400e:	f7ff fcbb 	bl	8023988 <_fflush_r>
 8024012:	2800      	cmp	r0, #0
 8024014:	d1ed      	bne.n	8023ff2 <__swbuf_r+0x2a>
 8024016:	68a3      	ldr	r3, [r4, #8]
 8024018:	3b01      	subs	r3, #1
 802401a:	60a3      	str	r3, [r4, #8]
 802401c:	6823      	ldr	r3, [r4, #0]
 802401e:	1c5a      	adds	r2, r3, #1
 8024020:	6022      	str	r2, [r4, #0]
 8024022:	701e      	strb	r6, [r3, #0]
 8024024:	6962      	ldr	r2, [r4, #20]
 8024026:	1c43      	adds	r3, r0, #1
 8024028:	429a      	cmp	r2, r3
 802402a:	d004      	beq.n	8024036 <__swbuf_r+0x6e>
 802402c:	89a3      	ldrh	r3, [r4, #12]
 802402e:	07db      	lsls	r3, r3, #31
 8024030:	d5e1      	bpl.n	8023ff6 <__swbuf_r+0x2e>
 8024032:	2e0a      	cmp	r6, #10
 8024034:	d1df      	bne.n	8023ff6 <__swbuf_r+0x2e>
 8024036:	4621      	mov	r1, r4
 8024038:	4628      	mov	r0, r5
 802403a:	f7ff fca5 	bl	8023988 <_fflush_r>
 802403e:	2800      	cmp	r0, #0
 8024040:	d0d9      	beq.n	8023ff6 <__swbuf_r+0x2e>
 8024042:	e7d6      	b.n	8023ff2 <__swbuf_r+0x2a>

08024044 <__swsetup_r>:
 8024044:	b538      	push	{r3, r4, r5, lr}
 8024046:	4b29      	ldr	r3, [pc, #164]	@ (80240ec <__swsetup_r+0xa8>)
 8024048:	4605      	mov	r5, r0
 802404a:	6818      	ldr	r0, [r3, #0]
 802404c:	460c      	mov	r4, r1
 802404e:	b118      	cbz	r0, 8024058 <__swsetup_r+0x14>
 8024050:	6a03      	ldr	r3, [r0, #32]
 8024052:	b90b      	cbnz	r3, 8024058 <__swsetup_r+0x14>
 8024054:	f7ff f9b0 	bl	80233b8 <__sinit>
 8024058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802405c:	0719      	lsls	r1, r3, #28
 802405e:	d422      	bmi.n	80240a6 <__swsetup_r+0x62>
 8024060:	06da      	lsls	r2, r3, #27
 8024062:	d407      	bmi.n	8024074 <__swsetup_r+0x30>
 8024064:	2209      	movs	r2, #9
 8024066:	602a      	str	r2, [r5, #0]
 8024068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802406c:	81a3      	strh	r3, [r4, #12]
 802406e:	f04f 30ff 	mov.w	r0, #4294967295
 8024072:	e033      	b.n	80240dc <__swsetup_r+0x98>
 8024074:	0758      	lsls	r0, r3, #29
 8024076:	d512      	bpl.n	802409e <__swsetup_r+0x5a>
 8024078:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802407a:	b141      	cbz	r1, 802408e <__swsetup_r+0x4a>
 802407c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024080:	4299      	cmp	r1, r3
 8024082:	d002      	beq.n	802408a <__swsetup_r+0x46>
 8024084:	4628      	mov	r0, r5
 8024086:	f7ff fafb 	bl	8023680 <_free_r>
 802408a:	2300      	movs	r3, #0
 802408c:	6363      	str	r3, [r4, #52]	@ 0x34
 802408e:	89a3      	ldrh	r3, [r4, #12]
 8024090:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8024094:	81a3      	strh	r3, [r4, #12]
 8024096:	2300      	movs	r3, #0
 8024098:	6063      	str	r3, [r4, #4]
 802409a:	6923      	ldr	r3, [r4, #16]
 802409c:	6023      	str	r3, [r4, #0]
 802409e:	89a3      	ldrh	r3, [r4, #12]
 80240a0:	f043 0308 	orr.w	r3, r3, #8
 80240a4:	81a3      	strh	r3, [r4, #12]
 80240a6:	6923      	ldr	r3, [r4, #16]
 80240a8:	b94b      	cbnz	r3, 80240be <__swsetup_r+0x7a>
 80240aa:	89a3      	ldrh	r3, [r4, #12]
 80240ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80240b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80240b4:	d003      	beq.n	80240be <__swsetup_r+0x7a>
 80240b6:	4621      	mov	r1, r4
 80240b8:	4628      	mov	r0, r5
 80240ba:	f000 f883 	bl	80241c4 <__smakebuf_r>
 80240be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80240c2:	f013 0201 	ands.w	r2, r3, #1
 80240c6:	d00a      	beq.n	80240de <__swsetup_r+0x9a>
 80240c8:	2200      	movs	r2, #0
 80240ca:	60a2      	str	r2, [r4, #8]
 80240cc:	6962      	ldr	r2, [r4, #20]
 80240ce:	4252      	negs	r2, r2
 80240d0:	61a2      	str	r2, [r4, #24]
 80240d2:	6922      	ldr	r2, [r4, #16]
 80240d4:	b942      	cbnz	r2, 80240e8 <__swsetup_r+0xa4>
 80240d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80240da:	d1c5      	bne.n	8024068 <__swsetup_r+0x24>
 80240dc:	bd38      	pop	{r3, r4, r5, pc}
 80240de:	0799      	lsls	r1, r3, #30
 80240e0:	bf58      	it	pl
 80240e2:	6962      	ldrpl	r2, [r4, #20]
 80240e4:	60a2      	str	r2, [r4, #8]
 80240e6:	e7f4      	b.n	80240d2 <__swsetup_r+0x8e>
 80240e8:	2000      	movs	r0, #0
 80240ea:	e7f7      	b.n	80240dc <__swsetup_r+0x98>
 80240ec:	20000038 	.word	0x20000038

080240f0 <_raise_r>:
 80240f0:	291f      	cmp	r1, #31
 80240f2:	b538      	push	{r3, r4, r5, lr}
 80240f4:	4605      	mov	r5, r0
 80240f6:	460c      	mov	r4, r1
 80240f8:	d904      	bls.n	8024104 <_raise_r+0x14>
 80240fa:	2316      	movs	r3, #22
 80240fc:	6003      	str	r3, [r0, #0]
 80240fe:	f04f 30ff 	mov.w	r0, #4294967295
 8024102:	bd38      	pop	{r3, r4, r5, pc}
 8024104:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8024106:	b112      	cbz	r2, 802410e <_raise_r+0x1e>
 8024108:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802410c:	b94b      	cbnz	r3, 8024122 <_raise_r+0x32>
 802410e:	4628      	mov	r0, r5
 8024110:	f000 f830 	bl	8024174 <_getpid_r>
 8024114:	4622      	mov	r2, r4
 8024116:	4601      	mov	r1, r0
 8024118:	4628      	mov	r0, r5
 802411a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802411e:	f000 b817 	b.w	8024150 <_kill_r>
 8024122:	2b01      	cmp	r3, #1
 8024124:	d00a      	beq.n	802413c <_raise_r+0x4c>
 8024126:	1c59      	adds	r1, r3, #1
 8024128:	d103      	bne.n	8024132 <_raise_r+0x42>
 802412a:	2316      	movs	r3, #22
 802412c:	6003      	str	r3, [r0, #0]
 802412e:	2001      	movs	r0, #1
 8024130:	e7e7      	b.n	8024102 <_raise_r+0x12>
 8024132:	2100      	movs	r1, #0
 8024134:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8024138:	4620      	mov	r0, r4
 802413a:	4798      	blx	r3
 802413c:	2000      	movs	r0, #0
 802413e:	e7e0      	b.n	8024102 <_raise_r+0x12>

08024140 <raise>:
 8024140:	4b02      	ldr	r3, [pc, #8]	@ (802414c <raise+0xc>)
 8024142:	4601      	mov	r1, r0
 8024144:	6818      	ldr	r0, [r3, #0]
 8024146:	f7ff bfd3 	b.w	80240f0 <_raise_r>
 802414a:	bf00      	nop
 802414c:	20000038 	.word	0x20000038

08024150 <_kill_r>:
 8024150:	b538      	push	{r3, r4, r5, lr}
 8024152:	4d07      	ldr	r5, [pc, #28]	@ (8024170 <_kill_r+0x20>)
 8024154:	2300      	movs	r3, #0
 8024156:	4604      	mov	r4, r0
 8024158:	4608      	mov	r0, r1
 802415a:	4611      	mov	r1, r2
 802415c:	602b      	str	r3, [r5, #0]
 802415e:	f7de fe67 	bl	8002e30 <_kill>
 8024162:	1c43      	adds	r3, r0, #1
 8024164:	d102      	bne.n	802416c <_kill_r+0x1c>
 8024166:	682b      	ldr	r3, [r5, #0]
 8024168:	b103      	cbz	r3, 802416c <_kill_r+0x1c>
 802416a:	6023      	str	r3, [r4, #0]
 802416c:	bd38      	pop	{r3, r4, r5, pc}
 802416e:	bf00      	nop
 8024170:	200027f4 	.word	0x200027f4

08024174 <_getpid_r>:
 8024174:	f7de be54 	b.w	8002e20 <_getpid>

08024178 <__swhatbuf_r>:
 8024178:	b570      	push	{r4, r5, r6, lr}
 802417a:	460c      	mov	r4, r1
 802417c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024180:	2900      	cmp	r1, #0
 8024182:	b096      	sub	sp, #88	@ 0x58
 8024184:	4615      	mov	r5, r2
 8024186:	461e      	mov	r6, r3
 8024188:	da0d      	bge.n	80241a6 <__swhatbuf_r+0x2e>
 802418a:	89a3      	ldrh	r3, [r4, #12]
 802418c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8024190:	f04f 0100 	mov.w	r1, #0
 8024194:	bf14      	ite	ne
 8024196:	2340      	movne	r3, #64	@ 0x40
 8024198:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802419c:	2000      	movs	r0, #0
 802419e:	6031      	str	r1, [r6, #0]
 80241a0:	602b      	str	r3, [r5, #0]
 80241a2:	b016      	add	sp, #88	@ 0x58
 80241a4:	bd70      	pop	{r4, r5, r6, pc}
 80241a6:	466a      	mov	r2, sp
 80241a8:	f000 f848 	bl	802423c <_fstat_r>
 80241ac:	2800      	cmp	r0, #0
 80241ae:	dbec      	blt.n	802418a <__swhatbuf_r+0x12>
 80241b0:	9901      	ldr	r1, [sp, #4]
 80241b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80241b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80241ba:	4259      	negs	r1, r3
 80241bc:	4159      	adcs	r1, r3
 80241be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80241c2:	e7eb      	b.n	802419c <__swhatbuf_r+0x24>

080241c4 <__smakebuf_r>:
 80241c4:	898b      	ldrh	r3, [r1, #12]
 80241c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80241c8:	079d      	lsls	r5, r3, #30
 80241ca:	4606      	mov	r6, r0
 80241cc:	460c      	mov	r4, r1
 80241ce:	d507      	bpl.n	80241e0 <__smakebuf_r+0x1c>
 80241d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80241d4:	6023      	str	r3, [r4, #0]
 80241d6:	6123      	str	r3, [r4, #16]
 80241d8:	2301      	movs	r3, #1
 80241da:	6163      	str	r3, [r4, #20]
 80241dc:	b003      	add	sp, #12
 80241de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80241e0:	ab01      	add	r3, sp, #4
 80241e2:	466a      	mov	r2, sp
 80241e4:	f7ff ffc8 	bl	8024178 <__swhatbuf_r>
 80241e8:	9f00      	ldr	r7, [sp, #0]
 80241ea:	4605      	mov	r5, r0
 80241ec:	4639      	mov	r1, r7
 80241ee:	4630      	mov	r0, r6
 80241f0:	f7ff faba 	bl	8023768 <_malloc_r>
 80241f4:	b948      	cbnz	r0, 802420a <__smakebuf_r+0x46>
 80241f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80241fa:	059a      	lsls	r2, r3, #22
 80241fc:	d4ee      	bmi.n	80241dc <__smakebuf_r+0x18>
 80241fe:	f023 0303 	bic.w	r3, r3, #3
 8024202:	f043 0302 	orr.w	r3, r3, #2
 8024206:	81a3      	strh	r3, [r4, #12]
 8024208:	e7e2      	b.n	80241d0 <__smakebuf_r+0xc>
 802420a:	89a3      	ldrh	r3, [r4, #12]
 802420c:	6020      	str	r0, [r4, #0]
 802420e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8024212:	81a3      	strh	r3, [r4, #12]
 8024214:	9b01      	ldr	r3, [sp, #4]
 8024216:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802421a:	b15b      	cbz	r3, 8024234 <__smakebuf_r+0x70>
 802421c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024220:	4630      	mov	r0, r6
 8024222:	f000 f81d 	bl	8024260 <_isatty_r>
 8024226:	b128      	cbz	r0, 8024234 <__smakebuf_r+0x70>
 8024228:	89a3      	ldrh	r3, [r4, #12]
 802422a:	f023 0303 	bic.w	r3, r3, #3
 802422e:	f043 0301 	orr.w	r3, r3, #1
 8024232:	81a3      	strh	r3, [r4, #12]
 8024234:	89a3      	ldrh	r3, [r4, #12]
 8024236:	431d      	orrs	r5, r3
 8024238:	81a5      	strh	r5, [r4, #12]
 802423a:	e7cf      	b.n	80241dc <__smakebuf_r+0x18>

0802423c <_fstat_r>:
 802423c:	b538      	push	{r3, r4, r5, lr}
 802423e:	4d07      	ldr	r5, [pc, #28]	@ (802425c <_fstat_r+0x20>)
 8024240:	2300      	movs	r3, #0
 8024242:	4604      	mov	r4, r0
 8024244:	4608      	mov	r0, r1
 8024246:	4611      	mov	r1, r2
 8024248:	602b      	str	r3, [r5, #0]
 802424a:	f7de fe51 	bl	8002ef0 <_fstat>
 802424e:	1c43      	adds	r3, r0, #1
 8024250:	d102      	bne.n	8024258 <_fstat_r+0x1c>
 8024252:	682b      	ldr	r3, [r5, #0]
 8024254:	b103      	cbz	r3, 8024258 <_fstat_r+0x1c>
 8024256:	6023      	str	r3, [r4, #0]
 8024258:	bd38      	pop	{r3, r4, r5, pc}
 802425a:	bf00      	nop
 802425c:	200027f4 	.word	0x200027f4

08024260 <_isatty_r>:
 8024260:	b538      	push	{r3, r4, r5, lr}
 8024262:	4d06      	ldr	r5, [pc, #24]	@ (802427c <_isatty_r+0x1c>)
 8024264:	2300      	movs	r3, #0
 8024266:	4604      	mov	r4, r0
 8024268:	4608      	mov	r0, r1
 802426a:	602b      	str	r3, [r5, #0]
 802426c:	f7de fe50 	bl	8002f10 <_isatty>
 8024270:	1c43      	adds	r3, r0, #1
 8024272:	d102      	bne.n	802427a <_isatty_r+0x1a>
 8024274:	682b      	ldr	r3, [r5, #0]
 8024276:	b103      	cbz	r3, 802427a <_isatty_r+0x1a>
 8024278:	6023      	str	r3, [r4, #0]
 802427a:	bd38      	pop	{r3, r4, r5, pc}
 802427c:	200027f4 	.word	0x200027f4

08024280 <_init>:
 8024280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024282:	bf00      	nop
 8024284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024286:	bc08      	pop	{r3}
 8024288:	469e      	mov	lr, r3
 802428a:	4770      	bx	lr

0802428c <_fini>:
 802428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802428e:	bf00      	nop
 8024290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024292:	bc08      	pop	{r3}
 8024294:	469e      	mov	lr, r3
 8024296:	4770      	bx	lr
