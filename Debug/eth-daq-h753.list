
eth-daq-h753.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023768  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000384c  08023a08  08023a08  00024a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08027254  08027254  00028254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802725c  0802725c  0002825c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08027260  08027260  00028260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  08027264  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002638  20000088  080272ec  00029088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200026c0  080272ec  000296c0  2**0
                  ALLOC
  9 .dtcm_data    00018000  20002cc0  080272ec  00029cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ethernet_data 000580c0  24000000  24000000  00042000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ram2_data    0002400c  30000000  30000000  0009b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ram3_data    00008000  38000000  38000000  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  000c8000  2**0
                  CONTENTS, READONLY
 14 .debug_info   0006314a  00000000  00000000  000c802e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c019  00000000  00000000  0012b178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003178  00000000  00000000  00137198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000027a3  00000000  00000000  0013a310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004f64c  00000000  00000000  0013cab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0005c79a  00000000  00000000  0018c0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00191e49  00000000  00000000  001e8899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0037a6e2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d73c  00000000  00000000  0037a728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  00387e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000088 	.word	0x20000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080239f0 	.word	0x080239f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	080239f0 	.word	0x080239f0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a6:	f001 f9c9 	bl	8001a3c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006aa:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <main+0xd0>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <main+0xd0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <main+0xd0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <main+0xd0>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	e000      	b.n	80006f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <main+0xd0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d13b      	bne.n	8000774 <main+0xd4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0xd0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <main+0xd0>)
 800070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000710:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800071a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000724:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	490e      	ldr	r1, [pc, #56]	@ (8000770 <main+0xd0>)
 8000736:	4313      	orrs	r3, r2
 8000738:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	607a      	str	r2, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <main+0x86>
    } while(sets-- != 0U);
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	60ba      	str	r2, [r7, #8]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e5      	bne.n	800071c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <main+0xd0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <main+0xd0>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	e003      	b.n	8000776 <main+0xd6>
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000774:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f019 f809 	bl	801978c <HAL_Init>

  /* USER CODE BEGIN Init */
  usZero = 0;
 800077a:	4ba6      	ldr	r3, [pc, #664]	@ (8000a14 <main+0x374>)
 800077c:	2200      	movs	r2, #0
 800077e:	801a      	strh	r2, [r3, #0]
  ulSevenSegD2 = 0x00FF00FF;
 8000780:	4ba5      	ldr	r3, [pc, #660]	@ (8000a18 <main+0x378>)
 8000782:	f04f 12ff 	mov.w	r2, #16711935	@ 0xff00ff
 8000786:	601a      	str	r2, [r3, #0]
  ulSevenSegD1 = 0x00FF000F;
 8000788:	4ba4      	ldr	r3, [pc, #656]	@ (8000a1c <main+0x37c>)
 800078a:	4aa5      	ldr	r2, [pc, #660]	@ (8000a20 <main+0x380>)
 800078c:	601a      	str	r2, [r3, #0]
  memset(usADCDataMock0, 0x41, sizeof(usADCDataMock0));
 800078e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000792:	2141      	movs	r1, #65	@ 0x41
 8000794:	48a3      	ldr	r0, [pc, #652]	@ (8000a24 <main+0x384>)
 8000796:	f021 fbb8 	bl	8021f0a <memset>
  memset(usADCDataMock1, 0x42, sizeof(usADCDataMock1));
 800079a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800079e:	2142      	movs	r1, #66	@ 0x42
 80007a0:	48a1      	ldr	r0, [pc, #644]	@ (8000a28 <main+0x388>)
 80007a2:	f021 fbb2 	bl	8021f0a <memset>
  memset(usAuxADCDataMock0, 0x43, sizeof(usAuxADCDataMock0));
 80007a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007aa:	2143      	movs	r1, #67	@ 0x43
 80007ac:	489f      	ldr	r0, [pc, #636]	@ (8000a2c <main+0x38c>)
 80007ae:	f021 fbac 	bl	8021f0a <memset>
  memset(usAuxADCDataMock1, 0x44, sizeof(usAuxADCDataMock1));
 80007b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007b6:	2144      	movs	r1, #68	@ 0x44
 80007b8:	489d      	ldr	r0, [pc, #628]	@ (8000a30 <main+0x390>)
 80007ba:	f021 fba6 	bl	8021f0a <memset>
  __ASM volatile ("dsb 0xF":::"memory");
 80007be:	f3bf 8f4f 	dsb	sy
}
 80007c2:	bf00      	nop
  __DSB();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c4:	f000 fa80 	bl	8000cc8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007c8:	f000 fb2c 	bl	8000e24 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  vHeapInit();
 80007cc:	f000 ff30 	bl	8001630 <vHeapInit>
  vStartHighResolutionTimer();
 80007d0:	f021 f9ba 	bl	8021b48 <vStartHighResolutionTimer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d4:	f000 fe54 	bl	8001480 <MX_GPIO_Init>
  MX_DMA_Init();
 80007d8:	f000 fe0a 	bl	80013f0 <MX_DMA_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80007dc:	f000 fdbc 	bl	8001358 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80007e0:	f000 fb90 	bl	8000f04 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007e4:	f000 fbe6 	bl	8000fb4 <MX_SPI2_Init>
  MX_SPI3_Init();
 80007e8:	f000 fc3a 	bl	8001060 <MX_SPI3_Init>
  MX_TIM1_Init();
 80007ec:	f000 fc8e 	bl	800110c <MX_TIM1_Init>
  MX_TIM3_Init();
 80007f0:	f000 fcde 	bl	80011b0 <MX_TIM3_Init>
  // MX_TIM2_Init();
  MX_I2C4_Init();
 80007f4:	f000 fb46 	bl	8000e84 <MX_I2C4_Init>
  MX_TIM4_Init();
 80007f8:	f000 fd28 	bl	800124c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //7 Segment Setup
  //TIM4 CH1
  DMA1_Stream4->M0AR = &ulSevenSegD1;
 80007fc:	4b8d      	ldr	r3, [pc, #564]	@ (8000a34 <main+0x394>)
 80007fe:	4a87      	ldr	r2, [pc, #540]	@ (8000a1c <main+0x37c>)
 8000800:	60da      	str	r2, [r3, #12]
  DMA1_Stream4->PAR = &(GPIOD->BSRR); //top 16 bits are reset, bottom 16 bits are set, set has priority if both bits set
 8000802:	4b8c      	ldr	r3, [pc, #560]	@ (8000a34 <main+0x394>)
 8000804:	4a8c      	ldr	r2, [pc, #560]	@ (8000a38 <main+0x398>)
 8000806:	609a      	str	r2, [r3, #8]
  DMA1_Stream4->NDTR = 1;
 8000808:	4b8a      	ldr	r3, [pc, #552]	@ (8000a34 <main+0x394>)
 800080a:	2201      	movs	r2, #1
 800080c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800080e:	f3bf 8f4f 	dsb	sy
}
 8000812:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream4->CR |= DMA_SxCR_EN;
 8000814:	4b87      	ldr	r3, [pc, #540]	@ (8000a34 <main+0x394>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a86      	ldr	r2, [pc, #536]	@ (8000a34 <main+0x394>)
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	6013      	str	r3, [r2, #0]
  //TIM4 UP
  DMA1_Stream5->M0AR = &ulSevenSegD2;
 8000820:	4b86      	ldr	r3, [pc, #536]	@ (8000a3c <main+0x39c>)
 8000822:	4a7d      	ldr	r2, [pc, #500]	@ (8000a18 <main+0x378>)
 8000824:	60da      	str	r2, [r3, #12]
  DMA1_Stream5->PAR = &(GPIOD->BSRR);
 8000826:	4b85      	ldr	r3, [pc, #532]	@ (8000a3c <main+0x39c>)
 8000828:	4a83      	ldr	r2, [pc, #524]	@ (8000a38 <main+0x398>)
 800082a:	609a      	str	r2, [r3, #8]
  DMA1_Stream5->NDTR = 1;
 800082c:	4b83      	ldr	r3, [pc, #524]	@ (8000a3c <main+0x39c>)
 800082e:	2201      	movs	r2, #1
 8000830:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000832:	f3bf 8f4f 	dsb	sy
}
 8000836:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream5->CR |= DMA_SxCR_EN;
 8000838:	4b80      	ldr	r3, [pc, #512]	@ (8000a3c <main+0x39c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a7f      	ldr	r2, [pc, #508]	@ (8000a3c <main+0x39c>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	6013      	str	r3, [r2, #0]
  //??? initializing the vars in the top just doesn't work???


  TIM4->CR1 |= TIM_CR1_URS;
 8000844:	4b7e      	ldr	r3, [pc, #504]	@ (8000a40 <main+0x3a0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a7d      	ldr	r2, [pc, #500]	@ (8000a40 <main+0x3a0>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6013      	str	r3, [r2, #0]
  TIM4->CR1 &= ~TIM_CR1_UDIS;
 8000850:	4b7b      	ldr	r3, [pc, #492]	@ (8000a40 <main+0x3a0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a7a      	ldr	r2, [pc, #488]	@ (8000a40 <main+0x3a0>)
 8000856:	f023 0302 	bic.w	r3, r3, #2
 800085a:	6013      	str	r3, [r2, #0]
  TIM4->CR2 &= ~TIM_CR2_CCDS;
 800085c:	4b78      	ldr	r3, [pc, #480]	@ (8000a40 <main+0x3a0>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	4a77      	ldr	r2, [pc, #476]	@ (8000a40 <main+0x3a0>)
 8000862:	f023 0308 	bic.w	r3, r3, #8
 8000866:	6053      	str	r3, [r2, #4]
  TIM4->DIER |= TIM_DIER_UDE | TIM_DIER_CC1DE;
 8000868:	4b75      	ldr	r3, [pc, #468]	@ (8000a40 <main+0x3a0>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	4a74      	ldr	r2, [pc, #464]	@ (8000a40 <main+0x3a0>)
 800086e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000872:	60d3      	str	r3, [r2, #12]
  TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 8000874:	4b72      	ldr	r3, [pc, #456]	@ (8000a40 <main+0x3a0>)
 8000876:	6a1b      	ldr	r3, [r3, #32]
 8000878:	4a71      	ldr	r2, [pc, #452]	@ (8000a40 <main+0x3a0>)
 800087a:	f043 0311 	orr.w	r3, r3, #17
 800087e:	6213      	str	r3, [r2, #32]
  TIM4->EGR |= TIM_EGR_UG | TIM_EGR_CC1G;
 8000880:	4b6f      	ldr	r3, [pc, #444]	@ (8000a40 <main+0x3a0>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	4a6e      	ldr	r2, [pc, #440]	@ (8000a40 <main+0x3a0>)
 8000886:	f043 0303 	orr.w	r3, r3, #3
 800088a:	6153      	str	r3, [r2, #20]
  TIM4->CR1 |= TIM_CR1_CEN;
 800088c:	4b6c      	ldr	r3, [pc, #432]	@ (8000a40 <main+0x3a0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a6b      	ldr	r2, [pc, #428]	@ (8000a40 <main+0x3a0>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	6013      	str	r3, [r2, #0]


  //DAC Setup
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800089e:	4869      	ldr	r0, [pc, #420]	@ (8000a44 <main+0x3a4>)
 80008a0:	f01b fa8a 	bl	801bdb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_DAC_LDAC_GPIO_Port, DUT_DAC_LDAC_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008aa:	4866      	ldr	r0, [pc, #408]	@ (8000a44 <main+0x3a4>)
 80008ac:	f01b fa84 	bl	801bdb8 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008b0:	2032      	movs	r0, #50	@ 0x32
 80008b2:	f018 fffd 	bl	80198b0 <HAL_Delay>
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008bc:	4861      	ldr	r0, [pc, #388]	@ (8000a44 <main+0x3a4>)
 80008be:	f01b fa7b 	bl	801bdb8 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008c2:	2032      	movs	r0, #50	@ 0x32
 80008c4:	f018 fff4 	bl	80198b0 <HAL_Delay>

  I2C4->CR2 = ( (0b0001100 << 1) & 0xFFFE )  // 7-bit address
 80008c8:	4b5f      	ldr	r3, [pc, #380]	@ (8000a48 <main+0x3a8>)
 80008ca:	4a60      	ldr	r2, [pc, #384]	@ (8000a4c <main+0x3ac>)
 80008cc:	605a      	str	r2, [r3, #4]
                 | (3 << 16)                   // NBYTES = 2
                 | (0 << 10)                   // Write direction (0 = write)
                 | I2C_CR2_AUTOEND             // Auto generate STOP
                 | I2C_CR2_START;              // Generate START
  while( (I2C4->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)) == 0 );
 80008ce:	bf00      	nop
 80008d0:	4b5d      	ldr	r3, [pc, #372]	@ (8000a48 <main+0x3a8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0312 	and.w	r3, r3, #18
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d0f9      	beq.n	80008d0 <main+0x230>
//      if (I2C4->ISR & I2C_ISR_NACKF) {
//          I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
//          return;  // Abort on failure
//      }
  I2C4->TXDR = 0b00111001; //write to both registers
 80008dc:	4b5a      	ldr	r3, [pc, #360]	@ (8000a48 <main+0x3a8>)
 80008de:	2239      	movs	r2, #57	@ 0x39
 80008e0:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008e2:	bf00      	nop
 80008e4:	4b58      	ldr	r3, [pc, #352]	@ (8000a48 <main+0x3a8>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0302 	and.w	r3, r3, #2
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0f9      	beq.n	80008e4 <main+0x244>
  I2C4->TXDR = 0; //MSB
 80008f0:	4b55      	ldr	r3, [pc, #340]	@ (8000a48 <main+0x3a8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008f6:	bf00      	nop
 80008f8:	4b53      	ldr	r3, [pc, #332]	@ (8000a48 <main+0x3a8>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0302 	and.w	r3, r3, #2
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0f9      	beq.n	80008f8 <main+0x258>
  I2C4->TXDR = 4; //LSB
 8000904:	4b50      	ldr	r3, [pc, #320]	@ (8000a48 <main+0x3a8>)
 8000906:	2204      	movs	r2, #4
 8000908:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXE)) == 0 );
 800090a:	bf00      	nop
 800090c:	4b4e      	ldr	r3, [pc, #312]	@ (8000a48 <main+0x3a8>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d0f9      	beq.n	800090c <main+0x26c>
  // Check if NACK occurred
  if (I2C4->ISR & I2C_ISR_NACKF) {
 8000918:	4b4b      	ldr	r3, [pc, #300]	@ (8000a48 <main+0x3a8>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	2b00      	cmp	r3, #0
 8000922:	d005      	beq.n	8000930 <main+0x290>
      // Handle error (e.g., reset I2C)
      I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
 8000924:	4b48      	ldr	r3, [pc, #288]	@ (8000a48 <main+0x3a8>)
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	4a47      	ldr	r2, [pc, #284]	@ (8000a48 <main+0x3a8>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	61d3      	str	r3, [r2, #28]
  }

  //SPI1 RX Stream
   DMA1_Stream0->M0AR = usADCDataMock0;
 8000930:	4b47      	ldr	r3, [pc, #284]	@ (8000a50 <main+0x3b0>)
 8000932:	4a3c      	ldr	r2, [pc, #240]	@ (8000a24 <main+0x384>)
 8000934:	60da      	str	r2, [r3, #12]
   DMA1_Stream0->M1AR = usADCDataMock1;
 8000936:	4b46      	ldr	r3, [pc, #280]	@ (8000a50 <main+0x3b0>)
 8000938:	4a3b      	ldr	r2, [pc, #236]	@ (8000a28 <main+0x388>)
 800093a:	611a      	str	r2, [r3, #16]
   DMA1_Stream0->PAR = &(SPI1->RXDR);
 800093c:	4b44      	ldr	r3, [pc, #272]	@ (8000a50 <main+0x3b0>)
 800093e:	4a45      	ldr	r2, [pc, #276]	@ (8000a54 <main+0x3b4>)
 8000940:	609a      	str	r2, [r3, #8]
   DMA1_Stream0->CR |= DMA_DOUBLE_BUFFER_M0;
 8000942:	4b43      	ldr	r3, [pc, #268]	@ (8000a50 <main+0x3b0>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a42      	ldr	r2, [pc, #264]	@ (8000a50 <main+0x3b0>)
 8000948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800094c:	6013      	str	r3, [r2, #0]
   DMA1_Stream0->NDTR = ADC_BUFFER_HALF_SIZE;
 800094e:	4b40      	ldr	r3, [pc, #256]	@ (8000a50 <main+0x3b0>)
 8000950:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000954:	605a      	str	r2, [r3, #4]
  //  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
   DMA1_Stream0->CR |= DMA_SxCR_TCIE;
 8000956:	4b3e      	ldr	r3, [pc, #248]	@ (8000a50 <main+0x3b0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a50 <main+0x3b0>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000962:	f3bf 8f4f 	dsb	sy
}
 8000966:	bf00      	nop
   __DSB(); //required?
   DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000968:	4b39      	ldr	r3, [pc, #228]	@ (8000a50 <main+0x3b0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a38      	ldr	r2, [pc, #224]	@ (8000a50 <main+0x3b0>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6013      	str	r3, [r2, #0]

  //SPI2 RX Stream
  DMA1_Stream1->M0AR = usAuxADCDataMock0;
 8000974:	4b38      	ldr	r3, [pc, #224]	@ (8000a58 <main+0x3b8>)
 8000976:	4a2d      	ldr	r2, [pc, #180]	@ (8000a2c <main+0x38c>)
 8000978:	60da      	str	r2, [r3, #12]
  DMA1_Stream1->M1AR = usAuxADCDataMock1;
 800097a:	4b37      	ldr	r3, [pc, #220]	@ (8000a58 <main+0x3b8>)
 800097c:	4a2c      	ldr	r2, [pc, #176]	@ (8000a30 <main+0x390>)
 800097e:	611a      	str	r2, [r3, #16]
  DMA1_Stream1->PAR = &(SPI2->RXDR);
 8000980:	4b35      	ldr	r3, [pc, #212]	@ (8000a58 <main+0x3b8>)
 8000982:	4a36      	ldr	r2, [pc, #216]	@ (8000a5c <main+0x3bc>)
 8000984:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_DOUBLE_BUFFER_M0;
 8000986:	4b34      	ldr	r3, [pc, #208]	@ (8000a58 <main+0x3b8>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a33      	ldr	r2, [pc, #204]	@ (8000a58 <main+0x3b8>)
 800098c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000990:	6013      	str	r3, [r2, #0]
  DMA1_Stream1->NDTR = AUX_ADC_BUFFER_HALF_SIZE;
 8000992:	4b31      	ldr	r3, [pc, #196]	@ (8000a58 <main+0x3b8>)
 8000994:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000998:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream1->CR |= DMA_SxCR_TCIE;
 800099a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a58 <main+0x3b8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a2e      	ldr	r2, [pc, #184]	@ (8000a58 <main+0x3b8>)
 80009a0:	f043 0310 	orr.w	r3, r3, #16
 80009a4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80009a6:	f3bf 8f4f 	dsb	sy
}
 80009aa:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 80009ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000a58 <main+0x3b8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a29      	ldr	r2, [pc, #164]	@ (8000a58 <main+0x3b8>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	6013      	str	r3, [r2, #0]

  //TIM1 UP DMA
  DMA1_Stream2->M0AR = &usZero;
 80009b8:	4b29      	ldr	r3, [pc, #164]	@ (8000a60 <main+0x3c0>)
 80009ba:	4a16      	ldr	r2, [pc, #88]	@ (8000a14 <main+0x374>)
 80009bc:	60da      	str	r2, [r3, #12]
  DMA1_Stream2->PAR = &(SPI1->TXDR);
 80009be:	4b28      	ldr	r3, [pc, #160]	@ (8000a60 <main+0x3c0>)
 80009c0:	4a28      	ldr	r2, [pc, #160]	@ (8000a64 <main+0x3c4>)
 80009c2:	609a      	str	r2, [r3, #8]
  DMA1_Stream2->NDTR = 1;
 80009c4:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <main+0x3c0>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80009ca:	f3bf 8f4f 	dsb	sy
}
 80009ce:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream2->CR |= DMA_SxCR_EN;
 80009d0:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <main+0x3c0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a22      	ldr	r2, [pc, #136]	@ (8000a60 <main+0x3c0>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]

  //TIM3 UP DMA
  DMA1_Stream3->M0AR = &usZero;
 80009dc:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <main+0x3c8>)
 80009de:	4a0d      	ldr	r2, [pc, #52]	@ (8000a14 <main+0x374>)
 80009e0:	60da      	str	r2, [r3, #12]
  DMA1_Stream3->PAR = &(SPI2->TXDR);
 80009e2:	4b21      	ldr	r3, [pc, #132]	@ (8000a68 <main+0x3c8>)
 80009e4:	4a21      	ldr	r2, [pc, #132]	@ (8000a6c <main+0x3cc>)
 80009e6:	609a      	str	r2, [r3, #8]
  DMA1_Stream3->NDTR = 1;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <main+0x3c8>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80009ee:	f3bf 8f4f 	dsb	sy
}
 80009f2:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream3->CR |= DMA_SxCR_EN;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <main+0x3c8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a68 <main+0x3c8>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6013      	str	r3, [r2, #0]

  //initialize high speed ADC here
  SPI1->CR1 |= SPI_CR1_SPE;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <main+0x3d0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1a      	ldr	r2, [pc, #104]	@ (8000a70 <main+0x3d0>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <main+0x3d0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	e030      	b.n	8000a74 <main+0x3d4>
 8000a12:	bf00      	nop
 8000a14:	30000000 	.word	0x30000000
 8000a18:	30024008 	.word	0x30024008
 8000a1c:	30024004 	.word	0x30024004
 8000a20:	00ff000f 	.word	0x00ff000f
 8000a24:	30000004 	.word	0x30000004
 8000a28:	30010004 	.word	0x30010004
 8000a2c:	30020004 	.word	0x30020004
 8000a30:	30022004 	.word	0x30022004
 8000a34:	40020070 	.word	0x40020070
 8000a38:	58020c18 	.word	0x58020c18
 8000a3c:	40020088 	.word	0x40020088
 8000a40:	40000800 	.word	0x40000800
 8000a44:	58020c00 	.word	0x58020c00
 8000a48:	58001c00 	.word	0x58001c00
 8000a4c:	02032018 	.word	0x02032018
 8000a50:	40020010 	.word	0x40020010
 8000a54:	40013030 	.word	0x40013030
 8000a58:	40020028 	.word	0x40020028
 8000a5c:	40003830 	.word	0x40003830
 8000a60:	40020040 	.word	0x40020040
 8000a64:	40013020 	.word	0x40013020
 8000a68:	40020058 	.word	0x40020058
 8000a6c:	40003820 	.word	0x40003820
 8000a70:	40013000 	.word	0x40013000
 8000a74:	4a82      	ldr	r2, [pc, #520]	@ (8000c80 <main+0x5e0>)
 8000a76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a7a:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a82:	4880      	ldr	r0, [pc, #512]	@ (8000c84 <main+0x5e4>)
 8000a84:	f01b f998 	bl	801bdb8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a88:	2064      	movs	r0, #100	@ 0x64
 8000a8a:	f018 ff11 	bl	80198b0 <HAL_Delay>
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a94:	487b      	ldr	r0, [pc, #492]	@ (8000c84 <main+0x5e4>)
 8000a96:	f01b f98f 	bl	801bdb8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a9a:	2064      	movs	r0, #100	@ 0x64
 8000a9c:	f018 ff08 	bl	80198b0 <HAL_Delay>
  uint8_t spi_data[2] = {0b00011011, 0x80+0x05}; //low reference, low input, vcm on, refpbuf on, input buf on
 8000aa0:	f248 531b 	movw	r3, #34075	@ 0x851b
 8000aa4:	803b      	strh	r3, [r7, #0]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000aa6:	787b      	ldrb	r3, [r7, #1]
 8000aa8:	021b      	lsls	r3, r3, #8
 8000aaa:	783a      	ldrb	r2, [r7, #0]
 8000aac:	431a      	orrs	r2, r3
 8000aae:	4b74      	ldr	r3, [pc, #464]	@ (8000c80 <main+0x5e0>)
 8000ab0:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000ab2:	bf00      	nop
 8000ab4:	4b72      	ldr	r3, [pc, #456]	@ (8000c80 <main+0x5e0>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d0f9      	beq.n	8000ab4 <main+0x414>
  spi_data[1]++;
 8000ac0:	787b      	ldrb	r3, [r7, #1]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	707b      	strb	r3, [r7, #1]
  spi_data[0] = 0b00010000; //sync control mode
 8000ac8:	2310      	movs	r3, #16
 8000aca:	703b      	strb	r3, [r7, #0]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000acc:	787b      	ldrb	r3, [r7, #1]
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	783a      	ldrb	r2, [r7, #0]
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	4b6a      	ldr	r3, [pc, #424]	@ (8000c80 <main+0x5e0>)
 8000ad6:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000ad8:	bf00      	nop
 8000ada:	4b69      	ldr	r3, [pc, #420]	@ (8000c80 <main+0x5e0>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d0f9      	beq.n	8000ada <main+0x43a>
  spi_data[1]++;
 8000ae6:	787b      	ldrb	r3, [r7, #1]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	707b      	strb	r3, [r7, #1]
  spi_data[0] = 0b00001001; //sinc4 osr16
 8000aee:	2309      	movs	r3, #9
 8000af0:	703b      	strb	r3, [r7, #0]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000af2:	787b      	ldrb	r3, [r7, #1]
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	783a      	ldrb	r2, [r7, #0]
 8000af8:	431a      	orrs	r2, r3
 8000afa:	4b61      	ldr	r3, [pc, #388]	@ (8000c80 <main+0x5e0>)
 8000afc:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000afe:	bf00      	nop
 8000b00:	4b5f      	ldr	r3, [pc, #380]	@ (8000c80 <main+0x5e0>)
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0f9      	beq.n	8000b00 <main+0x460>
  spi_data[1]++;
 8000b0c:	787b      	ldrb	r3, [r7, #1]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	707b      	strb	r3, [r7, #1]
  spi_data[0]=0b10000000; //external clock
 8000b14:	2380      	movs	r3, #128	@ 0x80
 8000b16:	703b      	strb	r3, [r7, #0]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b18:	787b      	ldrb	r3, [r7, #1]
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	783a      	ldrb	r2, [r7, #0]
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	4b57      	ldr	r3, [pc, #348]	@ (8000c80 <main+0x5e0>)
 8000b22:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b24:	bf00      	nop
 8000b26:	4b56      	ldr	r3, [pc, #344]	@ (8000c80 <main+0x5e0>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f9      	beq.n	8000b26 <main+0x486>
  spi_data[1]=0x80+0x03; //start conversion
 8000b32:	2383      	movs	r3, #131	@ 0x83
 8000b34:	707b      	strb	r3, [r7, #1]
  spi_data[0]=0b00000010;
 8000b36:	2302      	movs	r3, #2
 8000b38:	703b      	strb	r3, [r7, #0]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b3a:	787b      	ldrb	r3, [r7, #1]
 8000b3c:	021b      	lsls	r3, r3, #8
 8000b3e:	783a      	ldrb	r2, [r7, #0]
 8000b40:	431a      	orrs	r2, r3
 8000b42:	4b4f      	ldr	r3, [pc, #316]	@ (8000c80 <main+0x5e0>)
 8000b44:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b46:	bf00      	nop
 8000b48:	4b4d      	ldr	r3, [pc, #308]	@ (8000c80 <main+0x5e0>)
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0f9      	beq.n	8000b48 <main+0x4a8>
  SPI1->CR1 &= ~SPI_CR1_SPE;
 8000b54:	4b4a      	ldr	r3, [pc, #296]	@ (8000c80 <main+0x5e0>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a49      	ldr	r2, [pc, #292]	@ (8000c80 <main+0x5e0>)
 8000b5a:	f023 0301 	bic.w	r3, r3, #1
 8000b5e:	6013      	str	r3, [r2, #0]



  //Enable SPI1
//  SPI1->CR1 &=  ~SPI_CR1_SPE;
  SPI1->CR2 = 0; //reinitialize tsize
 8000b60:	4b47      	ldr	r3, [pc, #284]	@ (8000c80 <main+0x5e0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	605a      	str	r2, [r3, #4]
  SPI1->CFG1 |= SPI_CFG1_RXDMAEN;
 8000b66:	4b46      	ldr	r3, [pc, #280]	@ (8000c80 <main+0x5e0>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	4a45      	ldr	r2, [pc, #276]	@ (8000c80 <main+0x5e0>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b70:	6093      	str	r3, [r2, #8]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000b72:	4b43      	ldr	r3, [pc, #268]	@ (8000c80 <main+0x5e0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a42      	ldr	r2, [pc, #264]	@ (8000c80 <main+0x5e0>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000b7e:	4b40      	ldr	r3, [pc, #256]	@ (8000c80 <main+0x5e0>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a3f      	ldr	r2, [pc, #252]	@ (8000c80 <main+0x5e0>)
 8000b84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b88:	6013      	str	r3, [r2, #0]

  //Enable SPI2
  SPI2->CFG1 |= SPI_CFG1_RXDMAEN;
 8000b8a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c88 <main+0x5e8>)
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	4a3e      	ldr	r2, [pc, #248]	@ (8000c88 <main+0x5e8>)
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b94:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000b96:	4b3c      	ldr	r3, [pc, #240]	@ (8000c88 <main+0x5e8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a3b      	ldr	r2, [pc, #236]	@ (8000c88 <main+0x5e8>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000ba2:	4b39      	ldr	r3, [pc, #228]	@ (8000c88 <main+0x5e8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a38      	ldr	r2, [pc, #224]	@ (8000c88 <main+0x5e8>)
 8000ba8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bac:	6013      	str	r3, [r2, #0]

  //Enable TIM1 (SPI1)
  TIM1->CR1 |= TIM_CR1_URS;
 8000bae:	4b37      	ldr	r3, [pc, #220]	@ (8000c8c <main+0x5ec>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a36      	ldr	r2, [pc, #216]	@ (8000c8c <main+0x5ec>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6013      	str	r3, [r2, #0]
  TIM1->CR1 &= ~TIM_CR1_UDIS;
 8000bba:	4b34      	ldr	r3, [pc, #208]	@ (8000c8c <main+0x5ec>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a33      	ldr	r2, [pc, #204]	@ (8000c8c <main+0x5ec>)
 8000bc0:	f023 0302 	bic.w	r3, r3, #2
 8000bc4:	6013      	str	r3, [r2, #0]
  TIM1->DIER |= TIM_DMA_UPDATE;
 8000bc6:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <main+0x5ec>)
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	4a30      	ldr	r2, [pc, #192]	@ (8000c8c <main+0x5ec>)
 8000bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bd0:	60d3      	str	r3, [r2, #12]
  TIM1->EGR |= TIM_EGR_UG;
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c8c <main+0x5ec>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8000c8c <main+0x5ec>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6153      	str	r3, [r2, #20]
  TIM1->CR1 |= TIM_CR1_CEN;
 8000bde:	4b2b      	ldr	r3, [pc, #172]	@ (8000c8c <main+0x5ec>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a2a      	ldr	r2, [pc, #168]	@ (8000c8c <main+0x5ec>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6013      	str	r3, [r2, #0]

  //Enable TIM3 (SPI2)
  TIM3->CR1 |= TIM_CR1_URS;
 8000bea:	4b29      	ldr	r3, [pc, #164]	@ (8000c90 <main+0x5f0>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a28      	ldr	r2, [pc, #160]	@ (8000c90 <main+0x5f0>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6013      	str	r3, [r2, #0]
  TIM3->CR1 &= ~TIM_CR1_UDIS;
 8000bf6:	4b26      	ldr	r3, [pc, #152]	@ (8000c90 <main+0x5f0>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a25      	ldr	r2, [pc, #148]	@ (8000c90 <main+0x5f0>)
 8000bfc:	f023 0302 	bic.w	r3, r3, #2
 8000c00:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= TIM_DMA_UPDATE;
 8000c02:	4b23      	ldr	r3, [pc, #140]	@ (8000c90 <main+0x5f0>)
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	4a22      	ldr	r2, [pc, #136]	@ (8000c90 <main+0x5f0>)
 8000c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c0c:	60d3      	str	r3, [r2, #12]
  TIM3->EGR |= TIM_EGR_UG;
 8000c0e:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <main+0x5f0>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a1f      	ldr	r2, [pc, #124]	@ (8000c90 <main+0x5f0>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6153      	str	r3, [r2, #20]
  TIM3->CR1 |= TIM_CR1_CEN;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <main+0x5f0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000c90 <main+0x5f0>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6013      	str	r3, [r2, #0]

  /* Initialise the interface descriptor for WinPCap for example. */
     pxSTM32H_FillInterfaceDescriptor( 0, &( xInterfaces[ 0 ] ) );
 8000c26:	491b      	ldr	r1, [pc, #108]	@ (8000c94 <main+0x5f4>)
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f016 fee3 	bl	80179f4 <pxSTM32H_FillInterfaceDescriptor>

     FreeRTOS_FillEndPoint( &( xInterfaces[ 0 ] ), &( xEndPoints[ 0 ] ), ucIPAddress,
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <main+0x5f8>)
 8000c30:	9302      	str	r3, [sp, #8]
 8000c32:	4b1a      	ldr	r3, [pc, #104]	@ (8000c9c <main+0x5fc>)
 8000c34:	9301      	str	r3, [sp, #4]
 8000c36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <main+0x600>)
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <main+0x604>)
 8000c3c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ca8 <main+0x608>)
 8000c3e:	491b      	ldr	r1, [pc, #108]	@ (8000cac <main+0x60c>)
 8000c40:	4814      	ldr	r0, [pc, #80]	@ (8000c94 <main+0x5f4>)
 8000c42:	f00b ffb5 	bl	800cbb0 <FreeRTOS_FillEndPoint>
     #endif /* ( ipconfigUSE_DHCP != 0 ) */

     /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
        are created in the vApplicationIPNetworkEventHook() hook function
        below.  The hook function is called when the network connects. */
      FreeRTOS_IPInit_Multi();
 8000c46:	f008 f903 	bl	8008e50 <FreeRTOS_IPInit_Multi>


      xTaskCreate( prvServerWorkTask, "SvrWork", mainTCP_SERVER_STACK_SIZE, NULL, 0, &xServerWorkTaskHandle );
 8000c4a:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <main+0x610>)
 8000c4c:	9301      	str	r3, [sp, #4]
 8000c4e:	2300      	movs	r3, #0
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2300      	movs	r3, #0
 8000c54:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000c58:	4916      	ldr	r1, [pc, #88]	@ (8000cb4 <main+0x614>)
 8000c5a:	4817      	ldr	r0, [pc, #92]	@ (8000cb8 <main+0x618>)
 8000c5c:	f002 fed4 	bl	8003a08 <xTaskCreate>
//      xTaskCreate ( vNotifierTask, "Notif", 200, NULL, 0, &vNotifierTaskHandle);
      xTaskCreate ( vADCTCPTask, "ADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vADCTCPTaskHandle);
 8000c60:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <main+0x61c>)
 8000c62:	9301      	str	r3, [sp, #4]
 8000c64:	2301      	movs	r3, #1
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000c6e:	4914      	ldr	r1, [pc, #80]	@ (8000cc0 <main+0x620>)
 8000c70:	4814      	ldr	r0, [pc, #80]	@ (8000cc4 <main+0x624>)
 8000c72:	f002 fec9 	bl	8003a08 <xTaskCreate>
//      xTaskCreate ( vAuxADCTCPTask, "AuxADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vAuxADCTCPTaskHandle);
      vTaskStartScheduler();
 8000c76:	f003 f883 	bl	8003d80 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c7a:	bf00      	nop
 8000c7c:	e7fd      	b.n	8000c7a <main+0x5da>
 8000c7e:	bf00      	nop
 8000c80:	40013000 	.word	0x40013000
 8000c84:	58020000 	.word	0x58020000
 8000c88:	40003800 	.word	0x40003800
 8000c8c:	40010000 	.word	0x40010000
 8000c90:	40000400 	.word	0x40000400
 8000c94:	20000724 	.word	0x20000724
 8000c98:	08026efc 	.word	0x08026efc
 8000c9c:	08026ef8 	.word	0x08026ef8
 8000ca0:	08026ef4 	.word	0x08026ef4
 8000ca4:	08026ef0 	.word	0x08026ef0
 8000ca8:	08026eec 	.word	0x08026eec
 8000cac:	2000074c 	.word	0x2000074c
 8000cb0:	20000bf4 	.word	0x20000bf4
 8000cb4:	08023a08 	.word	0x08023a08
 8000cb8:	0800185d 	.word	0x0800185d
 8000cbc:	20000bf8 	.word	0x20000bf8
 8000cc0:	08023a10 	.word	0x08023a10
 8000cc4:	08001885 	.word	0x08001885

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b09e      	sub	sp, #120	@ 0x78
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cd2:	224c      	movs	r2, #76	@ 0x4c
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f021 f917 	bl	8021f0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	2220      	movs	r2, #32
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f021 f910 	bl	8021f0a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cea:	2002      	movs	r0, #2
 8000cec:	f01b f9b2 	bl	801c054 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	4b48      	ldr	r3, [pc, #288]	@ (8000e18 <SystemClock_Config+0x150>)
 8000cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cf8:	4a47      	ldr	r2, [pc, #284]	@ (8000e18 <SystemClock_Config+0x150>)
 8000cfa:	f023 0301 	bic.w	r3, r3, #1
 8000cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d00:	4b45      	ldr	r3, [pc, #276]	@ (8000e18 <SystemClock_Config+0x150>)
 8000d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b44      	ldr	r3, [pc, #272]	@ (8000e1c <SystemClock_Config+0x154>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	4a43      	ldr	r2, [pc, #268]	@ (8000e1c <SystemClock_Config+0x154>)
 8000d10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d14:	6193      	str	r3, [r2, #24]
 8000d16:	4b41      	ldr	r3, [pc, #260]	@ (8000e1c <SystemClock_Config+0x154>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d22:	bf00      	nop
 8000d24:	4b3d      	ldr	r3, [pc, #244]	@ (8000e1c <SystemClock_Config+0x154>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d30:	d1f8      	bne.n	8000d24 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	4b3b      	ldr	r3, [pc, #236]	@ (8000e20 <SystemClock_Config+0x158>)
 8000d34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d38:	4a39      	ldr	r2, [pc, #228]	@ (8000e20 <SystemClock_Config+0x158>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d42:	4b37      	ldr	r3, [pc, #220]	@ (8000e20 <SystemClock_Config+0x158>)
 8000d44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d50:	2300      	movs	r3, #0
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	4b31      	ldr	r3, [pc, #196]	@ (8000e1c <SystemClock_Config+0x154>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a30      	ldr	r2, [pc, #192]	@ (8000e1c <SystemClock_Config+0x154>)
 8000d5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b2e      	ldr	r3, [pc, #184]	@ (8000e1c <SystemClock_Config+0x154>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e18 <SystemClock_Config+0x150>)
 8000d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8000e18 <SystemClock_Config+0x150>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d76:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <SystemClock_Config+0x150>)
 8000d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d82:	bf00      	nop
 8000d84:	4b25      	ldr	r3, [pc, #148]	@ (8000e1c <SystemClock_Config+0x154>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d90:	d1f8      	bne.n	8000d84 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d92:	2301      	movs	r3, #1
 8000d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d96:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d9a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da0:	2302      	movs	r3, #2
 8000da2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000da8:	2340      	movs	r3, #64	@ 0x40
 8000daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000db8:	230c      	movs	r3, #12
 8000dba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f01b f97d 	bl	801c0c8 <HAL_RCC_OscConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000dd4:	f000 fe68 	bl	8001aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd8:	233f      	movs	r3, #63	@ 0x3f
 8000dda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000de4:	2308      	movs	r3, #8
 8000de6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000de8:	2340      	movs	r3, #64	@ 0x40
 8000dea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dec:	2340      	movs	r3, #64	@ 0x40
 8000dee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000df0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000df6:	2340      	movs	r3, #64	@ 0x40
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	2102      	movs	r1, #2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f01b fdbb 	bl	801c97c <HAL_RCC_ClockConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000e0c:	f000 fe4c 	bl	8001aa8 <Error_Handler>
  }
}
 8000e10:	bf00      	nop
 8000e12:	3778      	adds	r7, #120	@ 0x78
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	58000400 	.word	0x58000400
 8000e1c:	58024800 	.word	0x58024800
 8000e20:	58024400 	.word	0x58024400

08000e24 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b0b0      	sub	sp, #192	@ 0xc0
 8000e28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	22c0      	movs	r2, #192	@ 0xc0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f021 f86a 	bl	8021f0a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 8000e36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 8000e42:	2308      	movs	r3, #8
 8000e44:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 64;
 8000e46:	2340      	movs	r3, #64	@ 0x40
 8000e48:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000e56:	2340      	movs	r3, #64	@ 0x40
 8000e58:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000e62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e68:	463b      	mov	r3, r7
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f01c f912 	bl	801d094 <HAL_RCCEx_PeriphCLKConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000e76:	f000 fe17 	bl	8001aa8 <Error_Handler>
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	37c0      	adds	r7, #192	@ 0xc0
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000e88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <MX_I2C4_Init+0x74>)
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000efc <MX_I2C4_Init+0x78>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <MX_I2C4_Init+0x74>)
 8000e90:	4a1b      	ldr	r2, [pc, #108]	@ (8000f00 <MX_I2C4_Init+0x7c>)
 8000e92:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000e94:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <MX_I2C4_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <MX_I2C4_Init+0x74>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea0:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <MX_I2C4_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_I2C4_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <MX_I2C4_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_I2C4_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <MX_I2C4_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000ebe:	480e      	ldr	r0, [pc, #56]	@ (8000ef8 <MX_I2C4_Init+0x74>)
 8000ec0:	f01a ff94 	bl	801bdec <HAL_I2C_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000eca:	f000 fded 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4809      	ldr	r0, [pc, #36]	@ (8000ef8 <MX_I2C4_Init+0x74>)
 8000ed2:	f01b f827 	bl	801bf24 <HAL_I2CEx_ConfigAnalogFilter>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000edc:	f000 fde4 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_I2C4_Init+0x74>)
 8000ee4:	f01b f869 	bl	801bfba <HAL_I2CEx_ConfigDigitalFilter>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000eee:	f000 fddb 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000a4 	.word	0x200000a4
 8000efc:	58001c00 	.word	0x58001c00
 8000f00:	10c0ecff 	.word	0x10c0ecff

08000f04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f08:	4b28      	ldr	r3, [pc, #160]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f0a:	4a29      	ldr	r2, [pc, #164]	@ (8000fb0 <MX_SPI1_Init+0xac>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0e:	4b27      	ldr	r3, [pc, #156]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f10:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f16:	4b25      	ldr	r3, [pc, #148]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f1c:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f1e:	220f      	movs	r2, #15
 8000f20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f22:	4b22      	ldr	r3, [pc, #136]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f28:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f2e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f30:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f32:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000f36:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f46:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f52:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f58:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f5e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f80:	2230      	movs	r2, #48	@ 0x30
 8000f82:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	@ (8000fac <MX_SPI1_Init+0xa8>)
 8000f98:	f01d fea8 	bl	801ecec <HAL_SPI_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000fa2:	f000 fd81 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200000f8 	.word	0x200000f8
 8000fb0:	40013000 	.word	0x40013000

08000fb4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fb8:	4b27      	ldr	r3, [pc, #156]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8000fba:	4a28      	ldr	r2, [pc, #160]	@ (800105c <MX_SPI2_Init+0xa8>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fbe:	4b26      	ldr	r3, [pc, #152]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8000fc0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fc6:	4b24      	ldr	r3, [pc, #144]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000fcc:	4b22      	ldr	r3, [pc, #136]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8000fce:	220f      	movs	r2, #15
 8000fd0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000fde:	4b1e      	ldr	r3, [pc, #120]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8000fe0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000fe4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8000fe8:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000fec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8001008:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800100c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800100e:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8001010:	2200      	movs	r2, #0
 8001012:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001014:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8001016:	2200      	movs	r2, #0
 8001018:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <MX_SPI2_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001020:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8001022:	2200      	movs	r2, #0
 8001024:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8001026:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8001028:	2203      	movs	r2, #3
 800102a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 800102c:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <MX_SPI2_Init+0xa4>)
 800102e:	2230      	movs	r2, #48	@ 0x30
 8001030:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8001034:	2200      	movs	r2, #0
 8001036:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <MX_SPI2_Init+0xa4>)
 800103a:	2200      	movs	r2, #0
 800103c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8001040:	2200      	movs	r2, #0
 8001042:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001044:	4804      	ldr	r0, [pc, #16]	@ (8001058 <MX_SPI2_Init+0xa4>)
 8001046:	f01d fe51 	bl	801ecec <HAL_SPI_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001050:	f000 fd2a 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000180 	.word	0x20000180
 800105c:	40003800 	.word	0x40003800

08001060 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001064:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <MX_SPI3_Init+0xa4>)
 8001066:	4a28      	ldr	r2, [pc, #160]	@ (8001108 <MX_SPI3_Init+0xa8>)
 8001068:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800106a:	4b26      	ldr	r3, [pc, #152]	@ (8001104 <MX_SPI3_Init+0xa4>)
 800106c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001070:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001072:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <MX_SPI3_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001078:	4b22      	ldr	r3, [pc, #136]	@ (8001104 <MX_SPI3_Init+0xa4>)
 800107a:	2203      	movs	r2, #3
 800107c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107e:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <MX_SPI3_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001084:	4b1f      	ldr	r3, [pc, #124]	@ (8001104 <MX_SPI3_Init+0xa4>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800108a:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <MX_SPI3_Init+0xa4>)
 800108c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001090:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001092:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <MX_SPI3_Init+0xa4>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001098:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <MX_SPI3_Init+0xa4>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800109e:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <MX_SPI3_Init+0xa4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a4:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <MX_SPI3_Init+0xa4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80010aa:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <MX_SPI3_Init+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010b0:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <MX_SPI3_Init+0xa4>)
 80010b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <MX_SPI3_Init+0xa4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_SPI3_Init+0xa4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_SPI3_Init+0xa4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_SPI3_Init+0xa4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_SPI3_Init+0xa4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <MX_SPI3_Init+0xa4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010dc:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_SPI3_Init+0xa4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <MX_SPI3_Init+0xa4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_SPI3_Init+0xa4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	@ (8001104 <MX_SPI3_Init+0xa4>)
 80010f0:	f01d fdfc 	bl	801ecec <HAL_SPI_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80010fa:	f000 fcd5 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000208 	.word	0x20000208
 8001108:	40003c00 	.word	0x40003c00

0800110c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800112a:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <MX_TIM1_Init+0x9c>)
 800112c:	4a1f      	ldr	r2, [pc, #124]	@ (80011ac <MX_TIM1_Init+0xa0>)
 800112e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001130:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <MX_TIM1_Init+0x9c>)
 8001132:	2200      	movs	r2, #0
 8001134:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001136:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <MX_TIM1_Init+0x9c>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800113c:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_TIM1_Init+0x9c>)
 800113e:	22ff      	movs	r2, #255	@ 0xff
 8001140:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <MX_TIM1_Init+0x9c>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001148:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <MX_TIM1_Init+0x9c>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <MX_TIM1_Init+0x9c>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001154:	4814      	ldr	r0, [pc, #80]	@ (80011a8 <MX_TIM1_Init+0x9c>)
 8001156:	f01e f9c2 	bl	801f4de <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001160:	f000 fca2 	bl	8001aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001168:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	4619      	mov	r1, r3
 8001170:	480d      	ldr	r0, [pc, #52]	@ (80011a8 <MX_TIM1_Init+0x9c>)
 8001172:	f01e fbf9 	bl	801f968 <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800117c:	f000 fc94 	bl	8001aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001180:	2320      	movs	r3, #32
 8001182:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_TIM1_Init+0x9c>)
 8001192:	f01f f8fb 	bl	802038c <HAL_TIMEx_MasterConfigSynchronization>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800119c:	f000 fc84 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000380 	.word	0x20000380
 80011ac:	40010000 	.word	0x40010000

080011b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001248 <MX_TIM3_Init+0x98>)
 80011d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011d6:	22c7      	movs	r2, #199	@ 0xc7
 80011d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011e2:	2209      	movs	r2, #9
 80011e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011f2:	4814      	ldr	r0, [pc, #80]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011f4:	f01e f973 	bl	801f4de <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80011fe:	f000 fc53 	bl	8001aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001202:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001206:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	4619      	mov	r1, r3
 800120e:	480d      	ldr	r0, [pc, #52]	@ (8001244 <MX_TIM3_Init+0x94>)
 8001210:	f01e fbaa 	bl	801f968 <HAL_TIM_ConfigClockSource>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800121a:	f000 fc45 	bl	8001aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4619      	mov	r1, r3
 800122a:	4806      	ldr	r0, [pc, #24]	@ (8001244 <MX_TIM3_Init+0x94>)
 800122c:	f01f f8ae 	bl	802038c <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001236:	f000 fc37 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	3720      	adds	r7, #32
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000418 	.word	0x20000418
 8001248:	40000400 	.word	0x40000400

0800124c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	@ 0x38
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001252:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800126c:	463b      	mov	r3, r7
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]
 800127a:	615a      	str	r2, [r3, #20]
 800127c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800127e:	4b34      	ldr	r3, [pc, #208]	@ (8001350 <MX_TIM4_Init+0x104>)
 8001280:	4a34      	ldr	r2, [pc, #208]	@ (8001354 <MX_TIM4_Init+0x108>)
 8001282:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8001284:	4b32      	ldr	r3, [pc, #200]	@ (8001350 <MX_TIM4_Init+0x104>)
 8001286:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800128a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128c:	4b30      	ldr	r3, [pc, #192]	@ (8001350 <MX_TIM4_Init+0x104>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001292:	4b2f      	ldr	r3, [pc, #188]	@ (8001350 <MX_TIM4_Init+0x104>)
 8001294:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001298:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129a:	4b2d      	ldr	r3, [pc, #180]	@ (8001350 <MX_TIM4_Init+0x104>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001350 <MX_TIM4_Init+0x104>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012a6:	482a      	ldr	r0, [pc, #168]	@ (8001350 <MX_TIM4_Init+0x104>)
 80012a8:	f01e f919 	bl	801f4de <HAL_TIM_Base_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80012b2:	f000 fbf9 	bl	8001aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4823      	ldr	r0, [pc, #140]	@ (8001350 <MX_TIM4_Init+0x104>)
 80012c4:	f01e fb50 	bl	801f968 <HAL_TIM_ConfigClockSource>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80012ce:	f000 fbeb 	bl	8001aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012d2:	481f      	ldr	r0, [pc, #124]	@ (8001350 <MX_TIM4_Init+0x104>)
 80012d4:	f01e f9d2 	bl	801f67c <HAL_TIM_PWM_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80012de:	f000 fbe3 	bl	8001aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4817      	ldr	r0, [pc, #92]	@ (8001350 <MX_TIM4_Init+0x104>)
 80012f2:	f01f f84b 	bl	802038c <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80012fc:	f000 fbd4 	bl	8001aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001300:	2360      	movs	r3, #96	@ 0x60
 8001302:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 999;
 8001304:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001308:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001312:	463b      	mov	r3, r7
 8001314:	2200      	movs	r2, #0
 8001316:	4619      	mov	r1, r3
 8001318:	480d      	ldr	r0, [pc, #52]	@ (8001350 <MX_TIM4_Init+0x104>)
 800131a:	f01e fa11 	bl	801f740 <HAL_TIM_PWM_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001324:	f000 fbc0 	bl	8001aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001328:	2370      	movs	r3, #112	@ 0x70
 800132a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	2204      	movs	r2, #4
 8001330:	4619      	mov	r1, r3
 8001332:	4807      	ldr	r0, [pc, #28]	@ (8001350 <MX_TIM4_Init+0x104>)
 8001334:	f01e fa04 	bl	801f740 <HAL_TIM_PWM_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 800133e:	f000 fbb3 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001342:	4803      	ldr	r0, [pc, #12]	@ (8001350 <MX_TIM4_Init+0x104>)
 8001344:	f000 ffd8 	bl	80022f8 <HAL_TIM_MspPostInit>

}
 8001348:	bf00      	nop
 800134a:	3738      	adds	r7, #56	@ 0x38
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000464 	.word	0x20000464
 8001354:	40000800 	.word	0x40000800

08001358 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800135c:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 800135e:	4a23      	ldr	r2, [pc, #140]	@ (80013ec <MX_USART3_UART_Init+0x94>)
 8001360:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001362:	4b21      	ldr	r3, [pc, #132]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001376:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138e:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001394:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139a:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013a0:	4811      	ldr	r0, [pc, #68]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 80013a2:	f01f f881 	bl	80204a8 <HAL_UART_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013ac:	f000 fb7c 	bl	8001aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b0:	2100      	movs	r1, #0
 80013b2:	480d      	ldr	r0, [pc, #52]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 80013b4:	f020 f889 	bl	80214ca <HAL_UARTEx_SetTxFifoThreshold>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013be:	f000 fb73 	bl	8001aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c2:	2100      	movs	r1, #0
 80013c4:	4808      	ldr	r0, [pc, #32]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 80013c6:	f020 f8be 	bl	8021546 <HAL_UARTEx_SetRxFifoThreshold>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013d0:	f000 fb6a 	bl	8001aa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 80013d6:	f020 f83f 	bl	8021458 <HAL_UARTEx_DisableFifoMode>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013e0:	f000 fb62 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000690 	.word	0x20000690
 80013ec:	40004800 	.word	0x40004800

080013f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013f6:	4b21      	ldr	r3, [pc, #132]	@ (800147c <MX_DMA_Init+0x8c>)
 80013f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013fc:	4a1f      	ldr	r2, [pc, #124]	@ (800147c <MX_DMA_Init+0x8c>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001406:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <MX_DMA_Init+0x8c>)
 8001408:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2106      	movs	r1, #6
 8001418:	200b      	movs	r0, #11
 800141a:	f018 fb68 	bl	8019aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800141e:	200b      	movs	r0, #11
 8001420:	f018 fb7f 	bl	8019b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8001424:	2200      	movs	r2, #0
 8001426:	2106      	movs	r1, #6
 8001428:	200c      	movs	r0, #12
 800142a:	f018 fb60 	bl	8019aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800142e:	200c      	movs	r0, #12
 8001430:	f018 fb77 	bl	8019b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2107      	movs	r1, #7
 8001438:	200d      	movs	r0, #13
 800143a:	f018 fb58 	bl	8019aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800143e:	200d      	movs	r0, #13
 8001440:	f018 fb6f 	bl	8019b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 7, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2107      	movs	r1, #7
 8001448:	200e      	movs	r0, #14
 800144a:	f018 fb50 	bl	8019aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800144e:	200e      	movs	r0, #14
 8001450:	f018 fb67 	bl	8019b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2107      	movs	r1, #7
 8001458:	200f      	movs	r0, #15
 800145a:	f018 fb48 	bl	8019aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800145e:	200f      	movs	r0, #15
 8001460:	f018 fb5f 	bl	8019b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 7, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	2107      	movs	r1, #7
 8001468:	2010      	movs	r0, #16
 800146a:	f018 fb40 	bl	8019aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800146e:	2010      	movs	r0, #16
 8001470:	f018 fb57 	bl	8019b22 <HAL_NVIC_EnableIRQ>

}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	58024400 	.word	0x58024400

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	@ 0x30
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	4b61      	ldr	r3, [pc, #388]	@ (800161c <MX_GPIO_Init+0x19c>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149c:	4a5f      	ldr	r2, [pc, #380]	@ (800161c <MX_GPIO_Init+0x19c>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014a6:	4b5d      	ldr	r3, [pc, #372]	@ (800161c <MX_GPIO_Init+0x19c>)
 80014a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ac:	f003 0310 	and.w	r3, r3, #16
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b4:	4b59      	ldr	r3, [pc, #356]	@ (800161c <MX_GPIO_Init+0x19c>)
 80014b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ba:	4a58      	ldr	r2, [pc, #352]	@ (800161c <MX_GPIO_Init+0x19c>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014c4:	4b55      	ldr	r3, [pc, #340]	@ (800161c <MX_GPIO_Init+0x19c>)
 80014c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	4b52      	ldr	r3, [pc, #328]	@ (800161c <MX_GPIO_Init+0x19c>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d8:	4a50      	ldr	r2, [pc, #320]	@ (800161c <MX_GPIO_Init+0x19c>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e2:	4b4e      	ldr	r3, [pc, #312]	@ (800161c <MX_GPIO_Init+0x19c>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b4a      	ldr	r3, [pc, #296]	@ (800161c <MX_GPIO_Init+0x19c>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f6:	4a49      	ldr	r2, [pc, #292]	@ (800161c <MX_GPIO_Init+0x19c>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001500:	4b46      	ldr	r3, [pc, #280]	@ (800161c <MX_GPIO_Init+0x19c>)
 8001502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b43      	ldr	r3, [pc, #268]	@ (800161c <MX_GPIO_Init+0x19c>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001514:	4a41      	ldr	r2, [pc, #260]	@ (800161c <MX_GPIO_Init+0x19c>)
 8001516:	f043 0302 	orr.w	r3, r3, #2
 800151a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800151e:	4b3f      	ldr	r3, [pc, #252]	@ (800161c <MX_GPIO_Init+0x19c>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152c:	4b3b      	ldr	r3, [pc, #236]	@ (800161c <MX_GPIO_Init+0x19c>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001532:	4a3a      	ldr	r2, [pc, #232]	@ (800161c <MX_GPIO_Init+0x19c>)
 8001534:	f043 0308 	orr.w	r3, r3, #8
 8001538:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800153c:	4b37      	ldr	r3, [pc, #220]	@ (800161c <MX_GPIO_Init+0x19c>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DUT_HVDC_ISOLATE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	213c      	movs	r1, #60	@ 0x3c
 800154e:	4834      	ldr	r0, [pc, #208]	@ (8001620 <MX_GPIO_Init+0x1a0>)
 8001550:	f01a fc32 	bl	801bdb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 8001554:	2200      	movs	r2, #0
 8001556:	f24c 41ff 	movw	r1, #50431	@ 0xc4ff
 800155a:	4832      	ldr	r0, [pc, #200]	@ (8001624 <MX_GPIO_Init+0x1a4>)
 800155c:	f01a fc2c 	bl	801bdb8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HS_ADC_START_Pin|HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001566:	4830      	ldr	r0, [pc, #192]	@ (8001628 <MX_GPIO_Init+0x1a8>)
 8001568:	f01a fc26 	bl	801bdb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DUT_HVDC_ISOLATE_Pin DUT_VGS_IDLE_SEL_Pin DUT_VICTRL_SEL_Pin DUT_GATE_SEL_Pin */
  GPIO_InitStruct.Pin = DUT_HVDC_ISOLATE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin;
 800156c:	233c      	movs	r3, #60	@ 0x3c
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	4827      	ldr	r0, [pc, #156]	@ (8001620 <MX_GPIO_Init+0x1a0>)
 8001584:	f01a fa68 	bl	801ba58 <HAL_GPIO_Init>

  /*Configure GPIO pins : GADC_RESET_Pin DUT_DAC_LDAC_Pin DUT_DAC_RESET_Pin PD0
                           PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 8001588:	f24c 43ff 	movw	r3, #50431	@ 0xc4ff
 800158c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	4619      	mov	r1, r3
 80015a0:	4820      	ldr	r0, [pc, #128]	@ (8001624 <MX_GPIO_Init+0x1a4>)
 80015a2:	f01a fa59 	bl	801ba58 <HAL_GPIO_Init>

  /*Configure GPIO pin : GADC_RVS_Pin */
  GPIO_InitStruct.Pin = GADC_RVS_Pin;
 80015a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GADC_RVS_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 031c 	add.w	r3, r7, #28
 80015b8:	4619      	mov	r1, r3
 80015ba:	481a      	ldr	r0, [pc, #104]	@ (8001624 <MX_GPIO_Init+0x1a4>)
 80015bc:	f01a fa4c 	bl	801ba58 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS_ADC_START_Pin HS_ADC_RESET_Pin */
  GPIO_InitStruct.Pin = HS_ADC_START_Pin|HS_ADC_RESET_Pin;
 80015c0:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80015c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	4813      	ldr	r0, [pc, #76]	@ (8001628 <MX_GPIO_Init+0x1a8>)
 80015da:	f01a fa3d 	bl	801ba58 <HAL_GPIO_Init>

  /*Configure GPIO pin : HS_ADC_DRDY_Pin */
  GPIO_InitStruct.Pin = HS_ADC_DRDY_Pin;
 80015de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HS_ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4619      	mov	r1, r3
 80015f2:	480d      	ldr	r0, [pc, #52]	@ (8001628 <MX_GPIO_Init+0x1a8>)
 80015f4:	f01a fa30 	bl	801ba58 <HAL_GPIO_Init>

  /*Configure GPIO pins : EFUSE_FLT_Pin EFUSE_PGOOD_Pin */
  GPIO_InitStruct.Pin = EFUSE_FLT_Pin|EFUSE_PGOOD_Pin;
 80015f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4807      	ldr	r0, [pc, #28]	@ (800162c <MX_GPIO_Init+0x1ac>)
 800160e:	f01a fa23 	bl	801ba58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001612:	bf00      	nop
 8001614:	3730      	adds	r7, #48	@ 0x30
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	58024400 	.word	0x58024400
 8001620:	58021000 	.word	0x58021000
 8001624:	58020c00 	.word	0x58020c00
 8001628:	58020000 	.word	0x58020000
 800162c:	58020400 	.word	0x58020400

08001630 <vHeapInit>:
static uint8_t ucRAM_3 [ 32 * 1024] __attribute__( ( section( ".ram3_data" ) ) );

#define mainMEM_REGION( REGION )   REGION, sizeof( REGION )

static void vHeapInit( )
{
 8001630:	b5b0      	push	{r4, r5, r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
	/* Note: the memories must be sorted on their physical address. */
	HeapRegion_t xHeapRegions[] = {
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <vHeapInit+0x28>)
 8001638:	463c      	mov	r4, r7
 800163a:	461d      	mov	r5, r3
 800163c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800163e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001640:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001644:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//		{ mainMEM_REGION( ucRAM_2 ) },
		{ mainMEM_REGION( ucRAM_3 ) },
		{ NULL, 0 }
		};

	vPortDefineHeapRegions( xHeapRegions );
 8001648:	463b      	mov	r3, r7
 800164a:	4618      	mov	r0, r3
 800164c:	f004 fcea 	bl	8006024 <vPortDefineHeapRegions>
}
 8001650:	bf00      	nop
 8001652:	3720      	adds	r7, #32
 8001654:	46bd      	mov	sp, r7
 8001656:	bdb0      	pop	{r4, r5, r7, pc}
 8001658:	08023a18 	.word	0x08023a18

0800165c <ulGetRunTimeCounterValue>:


// helper functions

uint32_t ulGetRunTimeCounterValue()
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
	return 0U;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <vAssertCalled>:

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]

	( void ) pcFile;
	( void ) ulLine;

	taskENTER_CRITICAL();
 800167a:	f004 fa39 	bl	8005af0 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		function. */
		while( ul == 0 )
 800167e:	e000      	b.n	8001682 <vAssertCalled+0x16>
		{
			__NOP();
 8001680:	bf00      	nop
		while( ul == 0 )
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0fb      	beq.n	8001680 <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 8001688:	f004 fa5e 	bl	8005b48 <vPortExitCritical>
}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
 8001698:	f240 419a 	movw	r1, #1178	@ 0x49a
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <vApplicationMallocFailedHook+0x14>)
 800169e:	f7ff ffe5 	bl	800166c <vAssertCalled>
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	08023a38 	.word	0x08023a38

080016ac <ulApplicationGetNextSequenceNumber>:
uint32_t ulApplicationGetNextSequenceNumber(
    uint32_t ulSourceAddress,
    uint16_t usSourcePort,
    uint32_t ulDestinationAddress,
    uint16_t usDestinationPort )
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	461a      	mov	r2, r3
 80016b8:	460b      	mov	r3, r1
 80016ba:	817b      	strh	r3, [r7, #10]
 80016bc:	4613      	mov	r3, r2
 80016be:	813b      	strh	r3, [r7, #8]
	uint32_t ulReturn;
	( void ) ulSourceAddress;
	( void ) usSourcePort;
	( void ) ulDestinationAddress;
	( void ) usDestinationPort;
	xApplicationGetRandomNumber( &ulReturn );
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 f89b 	bl	8001800 <xApplicationGetRandomNumber>

	return ulReturn;
 80016ca:	697b      	ldr	r3, [r7, #20]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <vApplicationIPNetworkEventHook>:

void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	@ 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
	/* If the network has just come up...*/
	if( eNetworkEvent == eNetworkUp )
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d147      	bne.n	8001774 <vApplicationIPNetworkEventHook+0xa0>
	uint32_t ulIPAddress, ulNetMask, ulGatewayAddress, ulDNSServerAddress;
	char cBuffer[ 16 ];

		/* Create the tasks that use the IP stack if they have not already been
		created. */
		if( xTasksAlreadyCreated == pdFALSE )
 80016e4:	4b25      	ldr	r3, [pc, #148]	@ (800177c <vApplicationIPNetworkEventHook+0xa8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d105      	bne.n	80016f8 <vApplicationIPNetworkEventHook+0x24>
		{
			xTasksAlreadyCreated = pdTRUE;
 80016ec:	4b23      	ldr	r3, [pc, #140]	@ (800177c <vApplicationIPNetworkEventHook+0xa8>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
			/* Sockets, and tasks that use the TCP/IP stack can be created here. */
//
			xDoCreateSockets = pdTRUE;
 80016f2:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <vApplicationIPNetworkEventHook+0xac>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	601a      	str	r2, [r3, #0]
		}
		/* Print out the network configuration, which may have come from a DHCP
		server. */
		FreeRTOS_GetAddressConfiguration( &ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress );
 80016f8:	f107 0318 	add.w	r3, r7, #24
 80016fc:	f107 021c 	add.w	r2, r7, #28
 8001700:	f107 0120 	add.w	r1, r7, #32
 8001704:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001708:	f007 fc3a 	bl	8008f80 <FreeRTOS_GetAddressConfiguration>
		FreeRTOS_inet_ntoa( ulIPAddress, cBuffer );
 800170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170e:	f107 0208 	add.w	r2, r7, #8
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f00d fa37 	bl	800eb88 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "IP Address: %s\n", cBuffer ) );
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4619      	mov	r1, r3
 8001720:	4818      	ldr	r0, [pc, #96]	@ (8001784 <vApplicationIPNetworkEventHook+0xb0>)
 8001722:	f020 f8c9 	bl	80218b8 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulNetMask, cBuffer );
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	f107 0208 	add.w	r2, r7, #8
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f00d fa2a 	bl	800eb88 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Subnet Mask: %s\n", cBuffer ) );
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	4619      	mov	r1, r3
 800173a:	4813      	ldr	r0, [pc, #76]	@ (8001788 <vApplicationIPNetworkEventHook+0xb4>)
 800173c:	f020 f8bc 	bl	80218b8 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulGatewayAddress, cBuffer );
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f107 0208 	add.w	r2, r7, #8
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f00d fa1d 	bl	800eb88 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Gateway Address: %s\n", cBuffer ) );
 800174e:	f107 0308 	add.w	r3, r7, #8
 8001752:	4619      	mov	r1, r3
 8001754:	480d      	ldr	r0, [pc, #52]	@ (800178c <vApplicationIPNetworkEventHook+0xb8>)
 8001756:	f020 f8af 	bl	80218b8 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulDNSServerAddress, cBuffer );
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	f107 0208 	add.w	r2, r7, #8
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f00d fa10 	bl	800eb88 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "DNS Server Address: %s\n", cBuffer ) );
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	4619      	mov	r1, r3
 800176e:	4808      	ldr	r0, [pc, #32]	@ (8001790 <vApplicationIPNetworkEventHook+0xbc>)
 8001770:	f020 f8a2 	bl	80218b8 <lUDPLoggingPrintf>
	}
}
 8001774:	bf00      	nop
 8001776:	3728      	adds	r7, #40	@ 0x28
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000bec 	.word	0x20000bec
 8001780:	20000bf0 	.word	0x20000bf0
 8001784:	08023a4c 	.word	0x08023a4c
 8001788:	08023a5c 	.word	0x08023a5c
 800178c:	08023a70 	.word	0x08023a70
 8001790:	08023a88 	.word	0x08023a88

08001794 <xApplicationDNSQueryHook>:
/*-----------------------------------------------------------*/

BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFAIL;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 80017a0:	f000 f810 	bl	80017c4 <pcApplicationHostnameHook>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4619      	mov	r1, r3
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f021 fa61 	bl	8022c70 <strcasecmp>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <xApplicationDNSQueryHook+0x24>
	{
		xReturn = pdPASS;
 80017b4:	2301      	movs	r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
	}
	return xReturn;
 80017b8:	68fb      	ldr	r3, [r7, #12]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <pcApplicationHostnameHook>:
/*-----------------------------------------------------------*/

const char *pcApplicationHostnameHook( void )
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
	/* Assign the name "STM32H7" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return "STM32H7";
 80017c8:	4b02      	ldr	r3, [pc, #8]	@ (80017d4 <pcApplicationHostnameHook+0x10>)
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	08023aa0 	.word	0x08023aa0

080017d8 <vApplicationPingReplyHook>:
/*-----------------------------------------------------------*/

#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
	void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, uint16_t usIdentifier )
	{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	460a      	mov	r2, r1
 80017e2:	71fb      	strb	r3, [r7, #7]
 80017e4:	4613      	mov	r3, r2
 80017e6:	80bb      	strh	r3, [r7, #4]
		FreeRTOS_printf( ( "Received ping ID %04X\n", usIdentifier ) );
 80017e8:	88bb      	ldrh	r3, [r7, #4]
 80017ea:	4619      	mov	r1, r3
 80017ec:	4803      	ldr	r0, [pc, #12]	@ (80017fc <vApplicationPingReplyHook+0x24>)
 80017ee:	f020 f863 	bl	80218b8 <lUDPLoggingPrintf>
	}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	08023aa8 	.word	0x08023aa8

08001800 <xApplicationGetRandomNumber>:
#endif

/*-----------------------------------------------------------*/

BaseType_t xApplicationGetRandomNumber( uint32_t *pulNumber ){
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	*pulNumber = rand();
 8001808:	f021 f8c4 	bl	8022994 <rand>
 800180c:	4603      	mov	r3, r0
 800180e:	461a      	mov	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <prvGetRegistersFromStack>:
};

volatile struct xREGISTER_STACK *pxRegisterStack = NULL;

void prvGetRegistersFromStack( uint32_t * pulFaultStackAddress )
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	/* When the debuggger stops here, you can inspect the registeers of the
	application by looking at *pxRegisterStack. */
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
		( pulFaultStackAddress - ARRAY_SIZE( pxRegisterStack->spare0 ) );
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b20      	subs	r3, #32
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
 800182c:	4a01      	ldr	r2, [pc, #4]	@ (8001834 <prvGetRegistersFromStack+0x14>)
 800182e:	6013      	str	r3, [r2, #0]

	/* When the following line is hit, the variables contain the register values. */
	for( ;; );
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <prvGetRegistersFromStack+0x10>
 8001834:	20000bfc 	.word	0x20000bfc

08001838 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
	__asm volatile
 800183c:	f01e 0f04 	tst.w	lr, #4
 8001840:	bf0c      	ite	eq
 8001842:	f3ef 8008 	mrseq	r0, MSP
 8001846:	f3ef 8009 	mrsne	r0, PSP
 800184a:	6981      	ldr	r1, [r0, #24]
 800184c:	f7ff ffe8 	bl	8001820 <prvGetRegistersFromStack>
		" mrseq r0, msp                                             \n"
		" mrsne r0, psp                                             \n"
		" ldr r1, [r0, #24]                                         \n"
		" bl prvGetRegistersFromStack                               \n"
	);
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <prvServerWorkTask>:



static void prvServerWorkTask( void *pvParameters )
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 100U );
#endif	/* ( CONTINUOUS_PING != 0 ) */

	for( ;; )
	{
		vTaskDelay( 10U );
 8001864:	200a      	movs	r0, #10
 8001866:	f002 fa0f 	bl	8003c88 <vTaskDelay>
		if( xDoCreateSockets != pdFALSE )
 800186a:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <prvServerWorkTask+0x24>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f8      	beq.n	8001864 <prvServerWorkTask+0x8>
		{
			xDoCreateSockets = pdFALSE;
 8001872:	4b03      	ldr	r3, [pc, #12]	@ (8001880 <prvServerWorkTask+0x24>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
			/* Start a new task to fetch logging lines and send them out.
			See FreeRTOSConfig.h for the configuration of UDP logging. */
			vUDPLoggingTaskCreate();
 8001878:	f020 f83a 	bl	80218f0 <vUDPLoggingTaskCreate>
		vTaskDelay( 10U );
 800187c:	e7f2      	b.n	8001864 <prvServerWorkTask+0x8>
 800187e:	bf00      	nop
 8001880:	20000bf0 	.word	0x20000bf0

08001884 <vADCTCPTask>:

}



static void vADCTCPTask(void *pvParameters) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b098      	sub	sp, #96	@ 0x60
 8001888:	af02      	add	r7, sp, #8
 800188a:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usADCDataMock0);
 800188c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001890:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001896:	2218      	movs	r2, #24
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f020 fb35 	bl	8021f0a <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usADCPort);
 80018a0:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	b21a      	sxth	r2, r3
 80018a8:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	4313      	orrs	r3, r2
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 80018ba:	2303      	movs	r3, #3
 80018bc:	061a      	lsls	r2, r3, #24
 80018be:	2301      	movs	r3, #1
 80018c0:	041b      	lsls	r3, r3, #16
 80018c2:	431a      	orrs	r2, r3
 80018c4:	23a8      	movs	r3, #168	@ 0xa8
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	4313      	orrs	r3, r2
 80018ca:	22c0      	movs	r2, #192	@ 0xc0
 80018cc:	4313      	orrs	r3, r2
 80018ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 80018d0:	2302      	movs	r3, #2
 80018d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 80018d6:	2206      	movs	r2, #6
 80018d8:	2101      	movs	r1, #1
 80018da:	2002      	movs	r0, #2
 80018dc:	f00c f848 	bl	800d970 <FreeRTOS_socket>
 80018e0:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	2210      	movs	r2, #16
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f020 fb0d 	bl	8021f0a <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 80018f0:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 80018f4:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 80018f6:	230c      	movs	r3, #12
 80018f8:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 80018fa:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 80018fe:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001900:	230c      	movs	r3, #12
 8001902:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 8001904:	2304      	movs	r3, #4
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	4b48      	ldr	r3, [pc, #288]	@ (8001a2c <vADCTCPTask+0x1a8>)
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001910:	f00c ffe8 	bl	800e8e4 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001914:	2304      	movs	r3, #4
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	4b44      	ldr	r3, [pc, #272]	@ (8001a2c <vADCTCPTask+0x1a8>)
 800191a:	2201      	movs	r2, #1
 800191c:	2100      	movs	r1, #0
 800191e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001920:	f00c ffe0 	bl	800e8e4 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	2210      	movs	r2, #16
 800192a:	9200      	str	r2, [sp, #0]
 800192c:	220d      	movs	r2, #13
 800192e:	2100      	movs	r1, #0
 8001930:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001932:	f00c ffd7 	bl	800e8e4 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193c:	d104      	bne.n	8001948 <vADCTCPTask+0xc4>
 800193e:	f240 51c2 	movw	r1, #1474	@ 0x5c2
 8001942:	483b      	ldr	r0, [pc, #236]	@ (8001a30 <vADCTCPTask+0x1ac>)
 8001944:	f7ff fe92 	bl	800166c <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001948:	f107 0320 	add.w	r3, r7, #32
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	9200      	str	r2, [sp, #0]
 8001952:	f04f 32ff 	mov.w	r2, #4294967295
 8001956:	2100      	movs	r1, #0
 8001958:	2000      	movs	r0, #0
 800195a:	f003 fb1f 	bl	8004f9c <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <vADCTCPTask+0xea>
	    pcBufferToTransmit = usADCDataMock1;
 8001968:	4b32      	ldr	r3, [pc, #200]	@ (8001a34 <vADCTCPTask+0x1b0>)
 800196a:	653b      	str	r3, [r7, #80]	@ 0x50
 800196c:	e001      	b.n	8001972 <vADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usADCDataMock0;
 800196e:	4b32      	ldr	r3, [pc, #200]	@ (8001a38 <vADCTCPTask+0x1b4>)
 8001970:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
        xAlreadyTransmitted = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 800197a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800197e:	2218      	movs	r2, #24
 8001980:	4619      	mov	r1, r3
 8001982:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001984:	f00d fb4c 	bl	800f020 <FreeRTOS_connect>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d139      	bne.n	8001a02 <vADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 800198e:	e030      	b.n	80019f2 <vADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	4619      	mov	r1, r3
 800199e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80019a0:	f00d fd27 	bl	800f3f2 <FreeRTOS_get_tx_head>
 80019a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 80019a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d027      	beq.n	80019fc <vADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 80019ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d902      	bls.n	80019be <vADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019bc:	e003      	b.n	80019c6 <vADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 80019be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 80019c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80019ca:	4413      	add	r3, r2
 80019cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019ce:	4619      	mov	r1, r3
 80019d0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80019d2:	f020 f98d 	bl	8021cf0 <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 80019d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019d8:	2300      	movs	r3, #0
 80019da:	2100      	movs	r1, #0
 80019dc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80019de:	f00d fe13 	bl	800f608 <FreeRTOS_send>
 80019e2:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 80019e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db0a      	blt.n	8001a00 <vADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 80019ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80019ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019ee:	4413      	add	r3, r2
 80019f0:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 80019f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d8ca      	bhi.n	8001990 <vADCTCPTask+0x10c>
 80019fa:	e002      	b.n	8001a02 <vADCTCPTask+0x17e>
                        break;
 80019fc:	bf00      	nop
 80019fe:	e000      	b.n	8001a02 <vADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 8001a00:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8001a02:	2102      	movs	r1, #2
 8001a04:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a06:	f00d feae 	bl	800f766 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001a0a:	e002      	b.n	8001a12 <vADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f002 f93b 	bl	8003c88 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001a12:	2300      	movs	r3, #0
 8001a14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a16:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001a18:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a1a:	f00d fc55 	bl	800f2c8 <FreeRTOS_recv>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	daf3      	bge.n	8001a0c <vADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 8001a24:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a26:	f00c fb67 	bl	800e0f8 <FreeRTOS_closesocket>
    for(;;) {
 8001a2a:	e754      	b.n	80018d6 <vADCTCPTask+0x52>
 8001a2c:	08026f04 	.word	0x08026f04
 8001a30:	08023a38 	.word	0x08023a38
 8001a34:	30010004 	.word	0x30010004
 8001a38:	30000004 	.word	0x30000004

08001a3c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a42:	463b      	mov	r3, r7
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a4e:	f018 f883 	bl	8019b58 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a52:	2301      	movs	r3, #1
 8001a54:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8001a5a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8001a5e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001a60:	2312      	movs	r3, #18
 8001a62:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001a74:	2301      	movs	r3, #1
 8001a76:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a80:	463b      	mov	r3, r7
 8001a82:	4618      	mov	r0, r3
 8001a84:	f018 f8a0 	bl	8019bc8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001a8c:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001a90:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a92:	463b      	mov	r3, r7
 8001a94:	4618      	mov	r0, r3
 8001a96:	f018 f897 	bl	8019bc8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001a9a:	2004      	movs	r0, #4
 8001a9c:	f018 f874 	bl	8019b88 <HAL_MPU_Enable>

}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001aac:	b672      	cpsid	i
}
 8001aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <Error_Handler+0x8>

08001ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <HAL_MspInit+0x30>)
 8001abc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ac0:	4a08      	ldr	r2, [pc, #32]	@ (8001ae4 <HAL_MspInit+0x30>)
 8001ac2:	f043 0302 	orr.w	r3, r3, #2
 8001ac6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_MspInit+0x30>)
 8001acc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	58024400 	.word	0x58024400

08001ae8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08e      	sub	sp, #56	@ 0x38
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a61      	ldr	r2, [pc, #388]	@ (8001c8c <HAL_ETH_MspInit+0x1a4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	f040 80bb 	bne.w	8001c82 <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001b0c:	4b60      	ldr	r3, [pc, #384]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001b0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b12:	4a5f      	ldr	r2, [pc, #380]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001b14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b18:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001b1c:	4b5c      	ldr	r3, [pc, #368]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001b1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b26:	623b      	str	r3, [r7, #32]
 8001b28:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001b2a:	4b59      	ldr	r3, [pc, #356]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b30:	4a57      	ldr	r2, [pc, #348]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b36:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001b3a:	4b55      	ldr	r3, [pc, #340]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001b3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b44:	61fb      	str	r3, [r7, #28]
 8001b46:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001b48:	4b51      	ldr	r3, [pc, #324]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001b4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b4e:	4a50      	ldr	r2, [pc, #320]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b54:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001b58:	4b4d      	ldr	r3, [pc, #308]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001b5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b66:	4b4a      	ldr	r3, [pc, #296]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b6c:	4a48      	ldr	r2, [pc, #288]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b76:	4b46      	ldr	r3, [pc, #280]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	4b42      	ldr	r3, [pc, #264]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b8a:	4a41      	ldr	r2, [pc, #260]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b94:	4b3e      	ldr	r3, [pc, #248]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	4b3b      	ldr	r3, [pc, #236]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba8:	4a39      	ldr	r2, [pc, #228]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001baa:	f043 0302 	orr.w	r3, r3, #2
 8001bae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bb2:	4b37      	ldr	r3, [pc, #220]	@ (8001c90 <HAL_ETH_MspInit+0x1a8>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bd0:	230b      	movs	r3, #11
 8001bd2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd8:	4619      	mov	r1, r3
 8001bda:	482e      	ldr	r0, [pc, #184]	@ (8001c94 <HAL_ETH_MspInit+0x1ac>)
 8001bdc:	f019 ff3c 	bl	801ba58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001be0:	2306      	movs	r3, #6
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bf0:	230b      	movs	r3, #11
 8001bf2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4827      	ldr	r0, [pc, #156]	@ (8001c98 <HAL_ETH_MspInit+0x1b0>)
 8001bfc:	f019 ff2c 	bl	801ba58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c10:	230b      	movs	r3, #11
 8001c12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c18:	4619      	mov	r1, r3
 8001c1a:	481f      	ldr	r0, [pc, #124]	@ (8001c98 <HAL_ETH_MspInit+0x1b0>)
 8001c1c:	f019 ff1c 	bl	801ba58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c20:	2330      	movs	r3, #48	@ 0x30
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c30:	230b      	movs	r3, #11
 8001c32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4816      	ldr	r0, [pc, #88]	@ (8001c94 <HAL_ETH_MspInit+0x1ac>)
 8001c3c:	f019 ff0c 	bl	801ba58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001c40:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c52:	230b      	movs	r3, #11
 8001c54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	480f      	ldr	r0, [pc, #60]	@ (8001c9c <HAL_ETH_MspInit+0x1b4>)
 8001c5e:	f019 fefb 	bl	801ba58 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2105      	movs	r1, #5
 8001c66:	203d      	movs	r0, #61	@ 0x3d
 8001c68:	f017 ff41 	bl	8019aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001c6c:	203d      	movs	r0, #61	@ 0x3d
 8001c6e:	f017 ff58 	bl	8019b22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2105      	movs	r1, #5
 8001c76:	203e      	movs	r0, #62	@ 0x3e
 8001c78:	f017 ff39 	bl	8019aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8001c7c:	203e      	movs	r0, #62	@ 0x3e
 8001c7e:	f017 ff50 	bl	8019b22 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001c82:	bf00      	nop
 8001c84:	3738      	adds	r7, #56	@ 0x38
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40028000 	.word	0x40028000
 8001c90:	58024400 	.word	0x58024400
 8001c94:	58020800 	.word	0x58020800
 8001c98:	58020000 	.word	0x58020000
 8001c9c:	58020400 	.word	0x58020400

08001ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b0ba      	sub	sp, #232	@ 0xe8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	22c0      	movs	r2, #192	@ 0xc0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f020 f922 	bl	8021f0a <memset>
  if(hi2c->Instance==I2C4)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a27      	ldr	r2, [pc, #156]	@ (8001d68 <HAL_I2C_MspInit+0xc8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d146      	bne.n	8001d5e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001cd0:	f04f 0210 	mov.w	r2, #16
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ce2:	f107 0310 	add.w	r3, r7, #16
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f01b f9d4 	bl	801d094 <HAL_RCCEx_PeriphCLKConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001cf2:	f7ff fed9 	bl	8001aa8 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001cfe:	f043 0308 	orr.w	r3, r3, #8
 8001d02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d06:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001d14:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1c:	2312      	movs	r3, #18
 8001d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d34:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d38:	4619      	mov	r1, r3
 8001d3a:	480d      	ldr	r0, [pc, #52]	@ (8001d70 <HAL_I2C_MspInit+0xd0>)
 8001d3c:	f019 fe8c 	bl	801ba58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001d40:	4b0a      	ldr	r3, [pc, #40]	@ (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d46:	4a09      	ldr	r2, [pc, #36]	@ (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d4c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001d5e:	bf00      	nop
 8001d60:	37e8      	adds	r7, #232	@ 0xe8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	58001c00 	.word	0x58001c00
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	58020c00 	.word	0x58020c00

08001d74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b090      	sub	sp, #64	@ 0x40
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a88      	ldr	r2, [pc, #544]	@ (8001fb4 <HAL_SPI_MspInit+0x240>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	f040 8083 	bne.w	8001e9e <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d98:	4b87      	ldr	r3, [pc, #540]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d9e:	4a86      	ldr	r2, [pc, #536]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001da0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001da4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001da8:	4b83      	ldr	r3, [pc, #524]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001db2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	4b80      	ldr	r3, [pc, #512]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbc:	4a7e      	ldr	r2, [pc, #504]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dc6:	4b7c      	ldr	r3, [pc, #496]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd4:	4b78      	ldr	r3, [pc, #480]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dda:	4a77      	ldr	r2, [pc, #476]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001de4:	4b74      	ldr	r3, [pc, #464]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	623b      	str	r3, [r7, #32]
 8001df0:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001df2:	2370      	movs	r3, #112	@ 0x70
 8001df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e02:	2305      	movs	r3, #5
 8001e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	486b      	ldr	r0, [pc, #428]	@ (8001fbc <HAL_SPI_MspInit+0x248>)
 8001e0e:	f019 fe23 	bl	801ba58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e12:	2320      	movs	r3, #32
 8001e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e22:	2305      	movs	r3, #5
 8001e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4864      	ldr	r0, [pc, #400]	@ (8001fc0 <HAL_SPI_MspInit+0x24c>)
 8001e2e:	f019 fe13 	bl	801ba58 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001e32:	4b64      	ldr	r3, [pc, #400]	@ (8001fc4 <HAL_SPI_MspInit+0x250>)
 8001e34:	4a64      	ldr	r2, [pc, #400]	@ (8001fc8 <HAL_SPI_MspInit+0x254>)
 8001e36:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001e38:	4b62      	ldr	r3, [pc, #392]	@ (8001fc4 <HAL_SPI_MspInit+0x250>)
 8001e3a:	2225      	movs	r2, #37	@ 0x25
 8001e3c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e3e:	4b61      	ldr	r3, [pc, #388]	@ (8001fc4 <HAL_SPI_MspInit+0x250>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e44:	4b5f      	ldr	r3, [pc, #380]	@ (8001fc4 <HAL_SPI_MspInit+0x250>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e4a:	4b5e      	ldr	r3, [pc, #376]	@ (8001fc4 <HAL_SPI_MspInit+0x250>)
 8001e4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e50:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e52:	4b5c      	ldr	r3, [pc, #368]	@ (8001fc4 <HAL_SPI_MspInit+0x250>)
 8001e54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e58:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e5a:	4b5a      	ldr	r3, [pc, #360]	@ (8001fc4 <HAL_SPI_MspInit+0x250>)
 8001e5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e60:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001e62:	4b58      	ldr	r3, [pc, #352]	@ (8001fc4 <HAL_SPI_MspInit+0x250>)
 8001e64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e68:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e6a:	4b56      	ldr	r3, [pc, #344]	@ (8001fc4 <HAL_SPI_MspInit+0x250>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e70:	4b54      	ldr	r3, [pc, #336]	@ (8001fc4 <HAL_SPI_MspInit+0x250>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001e76:	4853      	ldr	r0, [pc, #332]	@ (8001fc4 <HAL_SPI_MspInit+0x250>)
 8001e78:	f017 fee6 	bl	8019c48 <HAL_DMA_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8001e82:	f7ff fe11 	bl	8001aa8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a4e      	ldr	r2, [pc, #312]	@ (8001fc4 <HAL_SPI_MspInit+0x250>)
 8001e8a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001e8c:	4a4d      	ldr	r2, [pc, #308]	@ (8001fc4 <HAL_SPI_MspInit+0x250>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2023      	movs	r0, #35	@ 0x23
 8001e98:	f017 fe29 	bl	8019aee <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e9c:	e0f0      	b.n	8002080 <HAL_SPI_MspInit+0x30c>
  else if(hspi->Instance==SPI2)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a4a      	ldr	r2, [pc, #296]	@ (8001fcc <HAL_SPI_MspInit+0x258>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	f040 8097 	bne.w	8001fd8 <HAL_SPI_MspInit+0x264>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eaa:	4b43      	ldr	r3, [pc, #268]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eb0:	4a41      	ldr	r2, [pc, #260]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001eb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001eba:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ec0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ece:	4a3a      	ldr	r2, [pc, #232]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ed8:	4b37      	ldr	r3, [pc, #220]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	4b34      	ldr	r3, [pc, #208]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eec:	4a32      	ldr	r2, [pc, #200]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ef6:	4b30      	ldr	r3, [pc, #192]	@ (8001fb8 <HAL_SPI_MspInit+0x244>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001f04:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f16:	2305      	movs	r3, #5
 8001f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4827      	ldr	r0, [pc, #156]	@ (8001fc0 <HAL_SPI_MspInit+0x24c>)
 8001f22:	f019 fd99 	bl	801ba58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f38:	2305      	movs	r3, #5
 8001f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f40:	4619      	mov	r1, r3
 8001f42:	481e      	ldr	r0, [pc, #120]	@ (8001fbc <HAL_SPI_MspInit+0x248>)
 8001f44:	f019 fd88 	bl	801ba58 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8001f48:	4b21      	ldr	r3, [pc, #132]	@ (8001fd0 <HAL_SPI_MspInit+0x25c>)
 8001f4a:	4a22      	ldr	r2, [pc, #136]	@ (8001fd4 <HAL_SPI_MspInit+0x260>)
 8001f4c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001f4e:	4b20      	ldr	r3, [pc, #128]	@ (8001fd0 <HAL_SPI_MspInit+0x25c>)
 8001f50:	2227      	movs	r2, #39	@ 0x27
 8001f52:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f54:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd0 <HAL_SPI_MspInit+0x25c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <HAL_SPI_MspInit+0x25c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd0 <HAL_SPI_MspInit+0x25c>)
 8001f62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f66:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f68:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <HAL_SPI_MspInit+0x25c>)
 8001f6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f6e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f70:	4b17      	ldr	r3, [pc, #92]	@ (8001fd0 <HAL_SPI_MspInit+0x25c>)
 8001f72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f76:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001f78:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <HAL_SPI_MspInit+0x25c>)
 8001f7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f7e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f80:	4b13      	ldr	r3, [pc, #76]	@ (8001fd0 <HAL_SPI_MspInit+0x25c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f86:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <HAL_SPI_MspInit+0x25c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001f8c:	4810      	ldr	r0, [pc, #64]	@ (8001fd0 <HAL_SPI_MspInit+0x25c>)
 8001f8e:	f017 fe5b 	bl	8019c48 <HAL_DMA_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_SPI_MspInit+0x228>
      Error_Handler();
 8001f98:	f7ff fd86 	bl	8001aa8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd0 <HAL_SPI_MspInit+0x25c>)
 8001fa0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd0 <HAL_SPI_MspInit+0x25c>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	2024      	movs	r0, #36	@ 0x24
 8001fae:	f017 fd9e 	bl	8019aee <HAL_NVIC_SetPriority>
}
 8001fb2:	e065      	b.n	8002080 <HAL_SPI_MspInit+0x30c>
 8001fb4:	40013000 	.word	0x40013000
 8001fb8:	58024400 	.word	0x58024400
 8001fbc:	58020000 	.word	0x58020000
 8001fc0:	58020400 	.word	0x58020400
 8001fc4:	20000290 	.word	0x20000290
 8001fc8:	40020010 	.word	0x40020010
 8001fcc:	40003800 	.word	0x40003800
 8001fd0:	20000308 	.word	0x20000308
 8001fd4:	40020028 	.word	0x40020028
  else if(hspi->Instance==SPI3)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a2a      	ldr	r2, [pc, #168]	@ (8002088 <HAL_SPI_MspInit+0x314>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d14e      	bne.n	8002080 <HAL_SPI_MspInit+0x30c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800208c <HAL_SPI_MspInit+0x318>)
 8001fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fe8:	4a28      	ldr	r2, [pc, #160]	@ (800208c <HAL_SPI_MspInit+0x318>)
 8001fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ff2:	4b26      	ldr	r3, [pc, #152]	@ (800208c <HAL_SPI_MspInit+0x318>)
 8001ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ff8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002000:	4b22      	ldr	r3, [pc, #136]	@ (800208c <HAL_SPI_MspInit+0x318>)
 8002002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002006:	4a21      	ldr	r2, [pc, #132]	@ (800208c <HAL_SPI_MspInit+0x318>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002010:	4b1e      	ldr	r3, [pc, #120]	@ (800208c <HAL_SPI_MspInit+0x318>)
 8002012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800201e:	4b1b      	ldr	r3, [pc, #108]	@ (800208c <HAL_SPI_MspInit+0x318>)
 8002020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002024:	4a19      	ldr	r2, [pc, #100]	@ (800208c <HAL_SPI_MspInit+0x318>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800202e:	4b17      	ldr	r3, [pc, #92]	@ (800208c <HAL_SPI_MspInit+0x318>)
 8002030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800203c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002040:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2300      	movs	r3, #0
 800204c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800204e:	2306      	movs	r3, #6
 8002050:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002056:	4619      	mov	r1, r3
 8002058:	480d      	ldr	r0, [pc, #52]	@ (8002090 <HAL_SPI_MspInit+0x31c>)
 800205a:	f019 fcfd 	bl	801ba58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800205e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002062:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002070:	2306      	movs	r3, #6
 8002072:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002074:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002078:	4619      	mov	r1, r3
 800207a:	4806      	ldr	r0, [pc, #24]	@ (8002094 <HAL_SPI_MspInit+0x320>)
 800207c:	f019 fcec 	bl	801ba58 <HAL_GPIO_Init>
}
 8002080:	bf00      	nop
 8002082:	3740      	adds	r7, #64	@ 0x40
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40003c00 	.word	0x40003c00
 800208c:	58024400 	.word	0x58024400
 8002090:	58020000 	.word	0x58020000
 8002094:	58020800 	.word	0x58020800

08002098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a88      	ldr	r2, [pc, #544]	@ (80022c8 <HAL_TIM_Base_MspInit+0x230>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d13e      	bne.n	8002128 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020aa:	4b88      	ldr	r3, [pc, #544]	@ (80022cc <HAL_TIM_Base_MspInit+0x234>)
 80020ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020b0:	4a86      	ldr	r2, [pc, #536]	@ (80022cc <HAL_TIM_Base_MspInit+0x234>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020ba:	4b84      	ldr	r3, [pc, #528]	@ (80022cc <HAL_TIM_Base_MspInit+0x234>)
 80020bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Stream2;
 80020c8:	4b81      	ldr	r3, [pc, #516]	@ (80022d0 <HAL_TIM_Base_MspInit+0x238>)
 80020ca:	4a82      	ldr	r2, [pc, #520]	@ (80022d4 <HAL_TIM_Base_MspInit+0x23c>)
 80020cc:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 80020ce:	4b80      	ldr	r3, [pc, #512]	@ (80022d0 <HAL_TIM_Base_MspInit+0x238>)
 80020d0:	220f      	movs	r2, #15
 80020d2:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020d4:	4b7e      	ldr	r3, [pc, #504]	@ (80022d0 <HAL_TIM_Base_MspInit+0x238>)
 80020d6:	2240      	movs	r2, #64	@ 0x40
 80020d8:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80020da:	4b7d      	ldr	r3, [pc, #500]	@ (80022d0 <HAL_TIM_Base_MspInit+0x238>)
 80020dc:	2200      	movs	r2, #0
 80020de:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 80020e0:	4b7b      	ldr	r3, [pc, #492]	@ (80022d0 <HAL_TIM_Base_MspInit+0x238>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020e6:	4b7a      	ldr	r3, [pc, #488]	@ (80022d0 <HAL_TIM_Base_MspInit+0x238>)
 80020e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020ec:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020ee:	4b78      	ldr	r3, [pc, #480]	@ (80022d0 <HAL_TIM_Base_MspInit+0x238>)
 80020f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020f4:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80020f6:	4b76      	ldr	r3, [pc, #472]	@ (80022d0 <HAL_TIM_Base_MspInit+0x238>)
 80020f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020fc:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 80020fe:	4b74      	ldr	r3, [pc, #464]	@ (80022d0 <HAL_TIM_Base_MspInit+0x238>)
 8002100:	2200      	movs	r2, #0
 8002102:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002104:	4b72      	ldr	r3, [pc, #456]	@ (80022d0 <HAL_TIM_Base_MspInit+0x238>)
 8002106:	2200      	movs	r2, #0
 8002108:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 800210a:	4871      	ldr	r0, [pc, #452]	@ (80022d0 <HAL_TIM_Base_MspInit+0x238>)
 800210c:	f017 fd9c 	bl	8019c48 <HAL_DMA_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002116:	f7ff fcc7 	bl	8001aa8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a6c      	ldr	r2, [pc, #432]	@ (80022d0 <HAL_TIM_Base_MspInit+0x238>)
 800211e:	621a      	str	r2, [r3, #32]
 8002120:	4a6b      	ldr	r2, [pc, #428]	@ (80022d0 <HAL_TIM_Base_MspInit+0x238>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002126:	e0cb      	b.n	80022c0 <HAL_TIM_Base_MspInit+0x228>
  else if(htim_base->Instance==TIM2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002130:	d10f      	bne.n	8002152 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002132:	4b66      	ldr	r3, [pc, #408]	@ (80022cc <HAL_TIM_Base_MspInit+0x234>)
 8002134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002138:	4a64      	ldr	r2, [pc, #400]	@ (80022cc <HAL_TIM_Base_MspInit+0x234>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002142:	4b62      	ldr	r3, [pc, #392]	@ (80022cc <HAL_TIM_Base_MspInit+0x234>)
 8002144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	693b      	ldr	r3, [r7, #16]
}
 8002150:	e0b6      	b.n	80022c0 <HAL_TIM_Base_MspInit+0x228>
  else if(htim_base->Instance==TIM3)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a60      	ldr	r2, [pc, #384]	@ (80022d8 <HAL_TIM_Base_MspInit+0x240>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d13e      	bne.n	80021da <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800215c:	4b5b      	ldr	r3, [pc, #364]	@ (80022cc <HAL_TIM_Base_MspInit+0x234>)
 800215e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002162:	4a5a      	ldr	r2, [pc, #360]	@ (80022cc <HAL_TIM_Base_MspInit+0x234>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800216c:	4b57      	ldr	r3, [pc, #348]	@ (80022cc <HAL_TIM_Base_MspInit+0x234>)
 800216e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_up.Instance = DMA1_Stream3;
 800217a:	4b58      	ldr	r3, [pc, #352]	@ (80022dc <HAL_TIM_Base_MspInit+0x244>)
 800217c:	4a58      	ldr	r2, [pc, #352]	@ (80022e0 <HAL_TIM_Base_MspInit+0x248>)
 800217e:	601a      	str	r2, [r3, #0]
    hdma_tim3_up.Init.Request = DMA_REQUEST_TIM3_UP;
 8002180:	4b56      	ldr	r3, [pc, #344]	@ (80022dc <HAL_TIM_Base_MspInit+0x244>)
 8002182:	221b      	movs	r2, #27
 8002184:	605a      	str	r2, [r3, #4]
    hdma_tim3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002186:	4b55      	ldr	r3, [pc, #340]	@ (80022dc <HAL_TIM_Base_MspInit+0x244>)
 8002188:	2240      	movs	r2, #64	@ 0x40
 800218a:	609a      	str	r2, [r3, #8]
    hdma_tim3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800218c:	4b53      	ldr	r3, [pc, #332]	@ (80022dc <HAL_TIM_Base_MspInit+0x244>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
    hdma_tim3_up.Init.MemInc = DMA_MINC_DISABLE;
 8002192:	4b52      	ldr	r3, [pc, #328]	@ (80022dc <HAL_TIM_Base_MspInit+0x244>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
    hdma_tim3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002198:	4b50      	ldr	r3, [pc, #320]	@ (80022dc <HAL_TIM_Base_MspInit+0x244>)
 800219a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800219e:	615a      	str	r2, [r3, #20]
    hdma_tim3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021a0:	4b4e      	ldr	r3, [pc, #312]	@ (80022dc <HAL_TIM_Base_MspInit+0x244>)
 80021a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021a6:	619a      	str	r2, [r3, #24]
    hdma_tim3_up.Init.Mode = DMA_CIRCULAR;
 80021a8:	4b4c      	ldr	r3, [pc, #304]	@ (80022dc <HAL_TIM_Base_MspInit+0x244>)
 80021aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021ae:	61da      	str	r2, [r3, #28]
    hdma_tim3_up.Init.Priority = DMA_PRIORITY_LOW;
 80021b0:	4b4a      	ldr	r3, [pc, #296]	@ (80022dc <HAL_TIM_Base_MspInit+0x244>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	621a      	str	r2, [r3, #32]
    hdma_tim3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021b6:	4b49      	ldr	r3, [pc, #292]	@ (80022dc <HAL_TIM_Base_MspInit+0x244>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_up) != HAL_OK)
 80021bc:	4847      	ldr	r0, [pc, #284]	@ (80022dc <HAL_TIM_Base_MspInit+0x244>)
 80021be:	f017 fd43 	bl	8019c48 <HAL_DMA_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 80021c8:	f7ff fc6e 	bl	8001aa8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_up);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a43      	ldr	r2, [pc, #268]	@ (80022dc <HAL_TIM_Base_MspInit+0x244>)
 80021d0:	621a      	str	r2, [r3, #32]
 80021d2:	4a42      	ldr	r2, [pc, #264]	@ (80022dc <HAL_TIM_Base_MspInit+0x244>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80021d8:	e072      	b.n	80022c0 <HAL_TIM_Base_MspInit+0x228>
  else if(htim_base->Instance==TIM4)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a41      	ldr	r2, [pc, #260]	@ (80022e4 <HAL_TIM_Base_MspInit+0x24c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d16d      	bne.n	80022c0 <HAL_TIM_Base_MspInit+0x228>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021e4:	4b39      	ldr	r3, [pc, #228]	@ (80022cc <HAL_TIM_Base_MspInit+0x234>)
 80021e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021ea:	4a38      	ldr	r2, [pc, #224]	@ (80022cc <HAL_TIM_Base_MspInit+0x234>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80021f4:	4b35      	ldr	r3, [pc, #212]	@ (80022cc <HAL_TIM_Base_MspInit+0x234>)
 80021f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream4;
 8002202:	4b39      	ldr	r3, [pc, #228]	@ (80022e8 <HAL_TIM_Base_MspInit+0x250>)
 8002204:	4a39      	ldr	r2, [pc, #228]	@ (80022ec <HAL_TIM_Base_MspInit+0x254>)
 8002206:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 8002208:	4b37      	ldr	r3, [pc, #220]	@ (80022e8 <HAL_TIM_Base_MspInit+0x250>)
 800220a:	221d      	movs	r2, #29
 800220c:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800220e:	4b36      	ldr	r3, [pc, #216]	@ (80022e8 <HAL_TIM_Base_MspInit+0x250>)
 8002210:	2240      	movs	r2, #64	@ 0x40
 8002212:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002214:	4b34      	ldr	r3, [pc, #208]	@ (80022e8 <HAL_TIM_Base_MspInit+0x250>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_DISABLE;
 800221a:	4b33      	ldr	r3, [pc, #204]	@ (80022e8 <HAL_TIM_Base_MspInit+0x250>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002220:	4b31      	ldr	r3, [pc, #196]	@ (80022e8 <HAL_TIM_Base_MspInit+0x250>)
 8002222:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002226:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002228:	4b2f      	ldr	r3, [pc, #188]	@ (80022e8 <HAL_TIM_Base_MspInit+0x250>)
 800222a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800222e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8002230:	4b2d      	ldr	r3, [pc, #180]	@ (80022e8 <HAL_TIM_Base_MspInit+0x250>)
 8002232:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002236:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002238:	4b2b      	ldr	r3, [pc, #172]	@ (80022e8 <HAL_TIM_Base_MspInit+0x250>)
 800223a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800223e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002240:	4b29      	ldr	r3, [pc, #164]	@ (80022e8 <HAL_TIM_Base_MspInit+0x250>)
 8002242:	2200      	movs	r2, #0
 8002244:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002246:	4828      	ldr	r0, [pc, #160]	@ (80022e8 <HAL_TIM_Base_MspInit+0x250>)
 8002248:	f017 fcfe 	bl	8019c48 <HAL_DMA_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_TIM_Base_MspInit+0x1be>
      Error_Handler();
 8002252:	f7ff fc29 	bl	8001aa8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a23      	ldr	r2, [pc, #140]	@ (80022e8 <HAL_TIM_Base_MspInit+0x250>)
 800225a:	625a      	str	r2, [r3, #36]	@ 0x24
 800225c:	4a22      	ldr	r2, [pc, #136]	@ (80022e8 <HAL_TIM_Base_MspInit+0x250>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim4_up.Instance = DMA1_Stream5;
 8002262:	4b23      	ldr	r3, [pc, #140]	@ (80022f0 <HAL_TIM_Base_MspInit+0x258>)
 8002264:	4a23      	ldr	r2, [pc, #140]	@ (80022f4 <HAL_TIM_Base_MspInit+0x25c>)
 8002266:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Request = DMA_REQUEST_TIM4_UP;
 8002268:	4b21      	ldr	r3, [pc, #132]	@ (80022f0 <HAL_TIM_Base_MspInit+0x258>)
 800226a:	2220      	movs	r2, #32
 800226c:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800226e:	4b20      	ldr	r3, [pc, #128]	@ (80022f0 <HAL_TIM_Base_MspInit+0x258>)
 8002270:	2240      	movs	r2, #64	@ 0x40
 8002272:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002274:	4b1e      	ldr	r3, [pc, #120]	@ (80022f0 <HAL_TIM_Base_MspInit+0x258>)
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_DISABLE;
 800227a:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <HAL_TIM_Base_MspInit+0x258>)
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002280:	4b1b      	ldr	r3, [pc, #108]	@ (80022f0 <HAL_TIM_Base_MspInit+0x258>)
 8002282:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002286:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002288:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <HAL_TIM_Base_MspInit+0x258>)
 800228a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800228e:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8002290:	4b17      	ldr	r3, [pc, #92]	@ (80022f0 <HAL_TIM_Base_MspInit+0x258>)
 8002292:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002296:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002298:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <HAL_TIM_Base_MspInit+0x258>)
 800229a:	2200      	movs	r2, #0
 800229c:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800229e:	4b14      	ldr	r3, [pc, #80]	@ (80022f0 <HAL_TIM_Base_MspInit+0x258>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 80022a4:	4812      	ldr	r0, [pc, #72]	@ (80022f0 <HAL_TIM_Base_MspInit+0x258>)
 80022a6:	f017 fccf 	bl	8019c48 <HAL_DMA_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_TIM_Base_MspInit+0x21c>
      Error_Handler();
 80022b0:	f7ff fbfa 	bl	8001aa8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a0e      	ldr	r2, [pc, #56]	@ (80022f0 <HAL_TIM_Base_MspInit+0x258>)
 80022b8:	621a      	str	r2, [r3, #32]
 80022ba:	4a0d      	ldr	r2, [pc, #52]	@ (80022f0 <HAL_TIM_Base_MspInit+0x258>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80022c0:	bf00      	nop
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40010000 	.word	0x40010000
 80022cc:	58024400 	.word	0x58024400
 80022d0:	200004b0 	.word	0x200004b0
 80022d4:	40020040 	.word	0x40020040
 80022d8:	40000400 	.word	0x40000400
 80022dc:	20000528 	.word	0x20000528
 80022e0:	40020058 	.word	0x40020058
 80022e4:	40000800 	.word	0x40000800
 80022e8:	200005a0 	.word	0x200005a0
 80022ec:	40020070 	.word	0x40020070
 80022f0:	20000618 	.word	0x20000618
 80022f4:	40020088 	.word	0x40020088

080022f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a12      	ldr	r2, [pc, #72]	@ (8002360 <HAL_TIM_MspPostInit+0x68>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d11e      	bne.n	8002358 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231a:	4b12      	ldr	r3, [pc, #72]	@ (8002364 <HAL_TIM_MspPostInit+0x6c>)
 800231c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002320:	4a10      	ldr	r2, [pc, #64]	@ (8002364 <HAL_TIM_MspPostInit+0x6c>)
 8002322:	f043 0302 	orr.w	r3, r3, #2
 8002326:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800232a:	4b0e      	ldr	r3, [pc, #56]	@ (8002364 <HAL_TIM_MspPostInit+0x6c>)
 800232c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002338:	23c0      	movs	r3, #192	@ 0xc0
 800233a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002348:	2302      	movs	r3, #2
 800234a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	4619      	mov	r1, r3
 8002352:	4805      	ldr	r0, [pc, #20]	@ (8002368 <HAL_TIM_MspPostInit+0x70>)
 8002354:	f019 fb80 	bl	801ba58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002358:	bf00      	nop
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40000800 	.word	0x40000800
 8002364:	58024400 	.word	0x58024400
 8002368:	58020400 	.word	0x58020400

0800236c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b0ba      	sub	sp, #232	@ 0xe8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002384:	f107 0310 	add.w	r3, r7, #16
 8002388:	22c0      	movs	r2, #192	@ 0xc0
 800238a:	2100      	movs	r1, #0
 800238c:	4618      	mov	r0, r3
 800238e:	f01f fdbc 	bl	8021f0a <memset>
  if(huart->Instance==USART3)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a27      	ldr	r2, [pc, #156]	@ (8002434 <HAL_UART_MspInit+0xc8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d146      	bne.n	800242a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800239c:	f04f 0202 	mov.w	r2, #2
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ae:	f107 0310 	add.w	r3, r7, #16
 80023b2:	4618      	mov	r0, r3
 80023b4:	f01a fe6e 	bl	801d094 <HAL_RCCEx_PeriphCLKConfig>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80023be:	f7ff fb73 	bl	8001aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002438 <HAL_UART_MspInit+0xcc>)
 80023c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002438 <HAL_UART_MspInit+0xcc>)
 80023ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023d2:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <HAL_UART_MspInit+0xcc>)
 80023d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e0:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <HAL_UART_MspInit+0xcc>)
 80023e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023e6:	4a14      	ldr	r2, [pc, #80]	@ (8002438 <HAL_UART_MspInit+0xcc>)
 80023e8:	f043 0308 	orr.w	r3, r3, #8
 80023ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023f0:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <HAL_UART_MspInit+0xcc>)
 80023f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	2302      	movs	r3, #2
 8002408:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002412:	2300      	movs	r3, #0
 8002414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002418:	2307      	movs	r3, #7
 800241a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800241e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002422:	4619      	mov	r1, r3
 8002424:	4805      	ldr	r0, [pc, #20]	@ (800243c <HAL_UART_MspInit+0xd0>)
 8002426:	f019 fb17 	bl	801ba58 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800242a:	bf00      	nop
 800242c:	37e8      	adds	r7, #232	@ 0xe8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40004800 	.word	0x40004800
 8002438:	58024400 	.word	0x58024400
 800243c:	58020c00 	.word	0x58020c00

08002440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <NMI_Handler+0x4>

08002448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <MemManage_Handler+0x4>

08002450 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <BusFault_Handler+0x4>

08002458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <UsageFault_Handler+0x4>

08002460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002472:	f017 f9fd 	bl	8019870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002476:	f002 fadd 	bl	8004a34 <xTaskGetSchedulerState>
 800247a:	4603      	mov	r3, r0
 800247c:	2b02      	cmp	r3, #2
 800247e:	d101      	bne.n	8002484 <SysTick_Handler+0x16>
      {
    	xPortSysTickHandler();
 8002480:	f003 fbba 	bl	8005bf8 <xPortSysTickHandler>
      }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}

08002488 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF0_4){
 8002492:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <DMA1_Stream0_IRQHandler+0x70>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00c      	beq.n	80024b8 <DMA1_Stream0_IRQHandler+0x30>
      uint32_t status = DMA1_Stream0->CR;
 800249e:	4b17      	ldr	r3, [pc, #92]	@ (80024fc <DMA1_Stream0_IRQHandler+0x74>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60bb      	str	r3, [r7, #8]
        if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <DMA1_Stream0_IRQHandler+0x2c>
  	  ulCurrBuf = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	e001      	b.n	80024b8 <DMA1_Stream0_IRQHandler+0x30>
        } else {
  	  ulCurrBuf = 1;
 80024b4:	2301      	movs	r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
        }

    }
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80024b8:	4811      	ldr	r0, [pc, #68]	@ (8002500 <DMA1_Stream0_IRQHandler+0x78>)
 80024ba:	f018 f967 	bl	801a78c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vADCTCPTaskHandle,
 80024c2:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <DMA1_Stream0_IRQHandler+0x7c>)
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	2300      	movs	r3, #0
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2301      	movs	r3, #1
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	2100      	movs	r1, #0
 80024d4:	f002 ff06 	bl	80052e4 <xTaskGenericNotifyFromISR>
			     &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <DMA1_Stream0_IRQHandler+0x66>
 80024de:	4b0a      	ldr	r3, [pc, #40]	@ (8002508 <DMA1_Stream0_IRQHandler+0x80>)
 80024e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40020010 	.word	0x40020010
 8002500:	20000290 	.word	0x20000290
 8002504:	20000bf8 	.word	0x20000bf8
 8002508:	e000ed04 	.word	0xe000ed04

0800250c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002510:	4802      	ldr	r0, [pc, #8]	@ (800251c <DMA1_Stream1_IRQHandler+0x10>)
 8002512:	f018 f93b 	bl	801a78c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000308 	.word	0x20000308

08002520 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8002524:	4802      	ldr	r0, [pc, #8]	@ (8002530 <DMA1_Stream2_IRQHandler+0x10>)
 8002526:	f018 f931 	bl	801a78c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200004b0 	.word	0x200004b0

08002534 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_up);
 8002538:	4802      	ldr	r0, [pc, #8]	@ (8002544 <DMA1_Stream3_IRQHandler+0x10>)
 800253a:	f018 f927 	bl	801a78c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000528 	.word	0x20000528

08002548 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 800254c:	4802      	ldr	r0, [pc, #8]	@ (8002558 <DMA1_Stream4_IRQHandler+0x10>)
 800254e:	f018 f91d 	bl	801a78c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200005a0 	.word	0x200005a0

0800255c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8002560:	4802      	ldr	r0, [pc, #8]	@ (800256c <DMA1_Stream5_IRQHandler+0x10>)
 8002562:	f018 f913 	bl	801a78c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000618 	.word	0x20000618

08002570 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002574:	4802      	ldr	r0, [pc, #8]	@ (8002580 <SPI1_IRQHandler+0x10>)
 8002576:	f01c fcdd 	bl	801ef34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200000f8 	.word	0x200000f8

08002584 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002588:	4802      	ldr	r0, [pc, #8]	@ (8002594 <SPI2_IRQHandler+0x10>)
 800258a:	f01c fcd3 	bl	801ef34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000180 	.word	0x20000180

08002598 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return 1;
 800259c:	2301      	movs	r3, #1
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <_kill>:

int _kill(int pid, int sig)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025b2:	f020 fbd1 	bl	8022d58 <__errno>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2216      	movs	r2, #22
 80025ba:	601a      	str	r2, [r3, #0]
  return -1;
 80025bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <_exit>:

void _exit (int status)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ffe7 	bl	80025a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025da:	bf00      	nop
 80025dc:	e7fd      	b.n	80025da <_exit+0x12>

080025de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	e00a      	b.n	8002606 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025f0:	f3af 8000 	nop.w
 80025f4:	4601      	mov	r1, r0
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	60ba      	str	r2, [r7, #8]
 80025fc:	b2ca      	uxtb	r2, r1
 80025fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	3301      	adds	r3, #1
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	429a      	cmp	r2, r3
 800260c:	dbf0      	blt.n	80025f0 <_read+0x12>
  }

  return len;
 800260e:	687b      	ldr	r3, [r7, #4]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	e009      	b.n	800263e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	60ba      	str	r2, [r7, #8]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3301      	adds	r3, #1
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	429a      	cmp	r2, r3
 8002644:	dbf1      	blt.n	800262a <_write+0x12>
  }
  return len;
 8002646:	687b      	ldr	r3, [r7, #4]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <_close>:

int _close(int file)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002658:	f04f 33ff 	mov.w	r3, #4294967295
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002678:	605a      	str	r2, [r3, #4]
  return 0;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <_isatty>:

int _isatty(int file)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002690:	2301      	movs	r3, #1
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800269e:	b480      	push	{r7}
 80026a0:	b085      	sub	sp, #20
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026c0:	4a14      	ldr	r2, [pc, #80]	@ (8002714 <_sbrk+0x5c>)
 80026c2:	4b15      	ldr	r3, [pc, #84]	@ (8002718 <_sbrk+0x60>)
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026cc:	4b13      	ldr	r3, [pc, #76]	@ (800271c <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026d4:	4b11      	ldr	r3, [pc, #68]	@ (800271c <_sbrk+0x64>)
 80026d6:	4a12      	ldr	r2, [pc, #72]	@ (8002720 <_sbrk+0x68>)
 80026d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026da:	4b10      	ldr	r3, [pc, #64]	@ (800271c <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d207      	bcs.n	80026f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e8:	f020 fb36 	bl	8022d58 <__errno>
 80026ec:	4603      	mov	r3, r0
 80026ee:	220c      	movs	r2, #12
 80026f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	e009      	b.n	800270c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f8:	4b08      	ldr	r3, [pc, #32]	@ (800271c <_sbrk+0x64>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026fe:	4b07      	ldr	r3, [pc, #28]	@ (800271c <_sbrk+0x64>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	4a05      	ldr	r2, [pc, #20]	@ (800271c <_sbrk+0x64>)
 8002708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800270a:	68fb      	ldr	r3, [r7, #12]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	24080000 	.word	0x24080000
 8002718:	00000400 	.word	0x00000400
 800271c:	20000c00 	.word	0x20000c00
 8002720:	200026c0 	.word	0x200026c0

08002724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800272a:	4b3f      	ldr	r3, [pc, #252]	@ (8002828 <SystemInit+0x104>)
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002730:	4a3d      	ldr	r2, [pc, #244]	@ (8002828 <SystemInit+0x104>)
 8002732:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002736:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800273a:	4b3c      	ldr	r3, [pc, #240]	@ (800282c <SystemInit+0x108>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	2b06      	cmp	r3, #6
 8002744:	d807      	bhi.n	8002756 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002746:	4b39      	ldr	r3, [pc, #228]	@ (800282c <SystemInit+0x108>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 030f 	bic.w	r3, r3, #15
 800274e:	4a37      	ldr	r2, [pc, #220]	@ (800282c <SystemInit+0x108>)
 8002750:	f043 0307 	orr.w	r3, r3, #7
 8002754:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002756:	4b36      	ldr	r3, [pc, #216]	@ (8002830 <SystemInit+0x10c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a35      	ldr	r2, [pc, #212]	@ (8002830 <SystemInit+0x10c>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002762:	4b33      	ldr	r3, [pc, #204]	@ (8002830 <SystemInit+0x10c>)
 8002764:	2200      	movs	r2, #0
 8002766:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002768:	4b31      	ldr	r3, [pc, #196]	@ (8002830 <SystemInit+0x10c>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4930      	ldr	r1, [pc, #192]	@ (8002830 <SystemInit+0x10c>)
 800276e:	4b31      	ldr	r3, [pc, #196]	@ (8002834 <SystemInit+0x110>)
 8002770:	4013      	ands	r3, r2
 8002772:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002774:	4b2d      	ldr	r3, [pc, #180]	@ (800282c <SystemInit+0x108>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002780:	4b2a      	ldr	r3, [pc, #168]	@ (800282c <SystemInit+0x108>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 030f 	bic.w	r3, r3, #15
 8002788:	4a28      	ldr	r2, [pc, #160]	@ (800282c <SystemInit+0x108>)
 800278a:	f043 0307 	orr.w	r3, r3, #7
 800278e:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002790:	4b27      	ldr	r3, [pc, #156]	@ (8002830 <SystemInit+0x10c>)
 8002792:	2200      	movs	r2, #0
 8002794:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002796:	4b26      	ldr	r3, [pc, #152]	@ (8002830 <SystemInit+0x10c>)
 8002798:	2200      	movs	r2, #0
 800279a:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800279c:	4b24      	ldr	r3, [pc, #144]	@ (8002830 <SystemInit+0x10c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027a2:	4b23      	ldr	r3, [pc, #140]	@ (8002830 <SystemInit+0x10c>)
 80027a4:	4a24      	ldr	r2, [pc, #144]	@ (8002838 <SystemInit+0x114>)
 80027a6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027a8:	4b21      	ldr	r3, [pc, #132]	@ (8002830 <SystemInit+0x10c>)
 80027aa:	4a24      	ldr	r2, [pc, #144]	@ (800283c <SystemInit+0x118>)
 80027ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027ae:	4b20      	ldr	r3, [pc, #128]	@ (8002830 <SystemInit+0x10c>)
 80027b0:	4a23      	ldr	r2, [pc, #140]	@ (8002840 <SystemInit+0x11c>)
 80027b2:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002830 <SystemInit+0x10c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002830 <SystemInit+0x10c>)
 80027bc:	4a20      	ldr	r2, [pc, #128]	@ (8002840 <SystemInit+0x11c>)
 80027be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002830 <SystemInit+0x10c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002830 <SystemInit+0x10c>)
 80027c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002840 <SystemInit+0x11c>)
 80027ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027cc:	4b18      	ldr	r3, [pc, #96]	@ (8002830 <SystemInit+0x10c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027d2:	4b17      	ldr	r3, [pc, #92]	@ (8002830 <SystemInit+0x10c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a16      	ldr	r2, [pc, #88]	@ (8002830 <SystemInit+0x10c>)
 80027d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027de:	4b14      	ldr	r3, [pc, #80]	@ (8002830 <SystemInit+0x10c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80027e4:	4b17      	ldr	r3, [pc, #92]	@ (8002844 <SystemInit+0x120>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b17      	ldr	r3, [pc, #92]	@ (8002848 <SystemInit+0x124>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027f0:	d202      	bcs.n	80027f8 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80027f2:	4b16      	ldr	r3, [pc, #88]	@ (800284c <SystemInit+0x128>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 80027f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002830 <SystemInit+0x10c>)
 80027fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80027fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002830 <SystemInit+0x10c>)
 8002800:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 8002804:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8002808:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <SystemInit+0x10c>)
 800280a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800280e:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8002810:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002812:	4b0f      	ldr	r3, [pc, #60]	@ (8002850 <SystemInit+0x12c>)
 8002814:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002818:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000ed00 	.word	0xe000ed00
 800282c:	52002000 	.word	0x52002000
 8002830:	58024400 	.word	0x58024400
 8002834:	eaf6ed7f 	.word	0xeaf6ed7f
 8002838:	02020200 	.word	0x02020200
 800283c:	01ff0000 	.word	0x01ff0000
 8002840:	01010280 	.word	0x01010280
 8002844:	5c001000 	.word	0x5c001000
 8002848:	ffff0000 	.word	0xffff0000
 800284c:	51008108 	.word	0x51008108
 8002850:	52004000 	.word	0x52004000

08002854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002854:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800288c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002858:	f7ff ff64 	bl	8002724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800285c:	480c      	ldr	r0, [pc, #48]	@ (8002890 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800285e:	490d      	ldr	r1, [pc, #52]	@ (8002894 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002860:	4a0d      	ldr	r2, [pc, #52]	@ (8002898 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002864:	e002      	b.n	800286c <LoopCopyDataInit>

08002866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800286a:	3304      	adds	r3, #4

0800286c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800286c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800286e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002870:	d3f9      	bcc.n	8002866 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002872:	4a0a      	ldr	r2, [pc, #40]	@ (800289c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002874:	4c0a      	ldr	r4, [pc, #40]	@ (80028a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002878:	e001      	b.n	800287e <LoopFillZerobss>

0800287a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800287a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800287c:	3204      	adds	r2, #4

0800287e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800287e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002880:	d3fb      	bcc.n	800287a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002882:	f020 fa6f 	bl	8022d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002886:	f7fd ff0b 	bl	80006a0 <main>
  bx  lr
 800288a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800288c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002894:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002898:	08027264 	.word	0x08027264
  ldr r2, =_sbss
 800289c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80028a0:	200026c0 	.word	0x200026c0

080028a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028a4:	e7fe      	b.n	80028a4 <ADC3_IRQHandler>

080028a6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80028ac:	201c      	movs	r0, #28
 80028ae:	f003 fa21 	bl	8005cf4 <pvPortMalloc>
 80028b2:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d007      	beq.n	80028ca <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3304      	adds	r3, #4
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 f9c3 	bl	8002c50 <vListInitialise>
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
 80028ca:	687b      	ldr	r3, [r7, #4]
        }
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08c      	sub	sp, #48	@ 0x30
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	627b      	str	r3, [r7, #36]	@ 0x24
        EventBits_t uxReturn, uxControlBits = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xWaitConditionMet, xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]

        traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );

        /* Check the user is not attempting to wait on the bits used by the kernel
         * itself, and that at least one bit is being requested. */
        configASSERT( xEventGroup );
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d104      	bne.n	80028fe <xEventGroupWaitBits+0x2a>
 80028f4:	f240 1147 	movw	r1, #327	@ 0x147
 80028f8:	4850      	ldr	r0, [pc, #320]	@ (8002a3c <xEventGroupWaitBits+0x168>)
 80028fa:	f7fe feb7 	bl	800166c <vAssertCalled>
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002904:	d304      	bcc.n	8002910 <xEventGroupWaitBits+0x3c>
 8002906:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 800290a:	484c      	ldr	r0, [pc, #304]	@ (8002a3c <xEventGroupWaitBits+0x168>)
 800290c:	f7fe feae 	bl	800166c <vAssertCalled>
        configASSERT( uxBitsToWaitFor != 0 );
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d104      	bne.n	8002920 <xEventGroupWaitBits+0x4c>
 8002916:	f240 1149 	movw	r1, #329	@ 0x149
 800291a:	4848      	ldr	r0, [pc, #288]	@ (8002a3c <xEventGroupWaitBits+0x168>)
 800291c:	f7fe fea6 	bl	800166c <vAssertCalled>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002920:	f002 f888 	bl	8004a34 <xTaskGetSchedulerState>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d102      	bne.n	8002930 <xEventGroupWaitBits+0x5c>
 800292a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <xEventGroupWaitBits+0x60>
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <xEventGroupWaitBits+0x62>
 8002934:	2300      	movs	r3, #0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d104      	bne.n	8002944 <xEventGroupWaitBits+0x70>
 800293a:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800293e:	483f      	ldr	r0, [pc, #252]	@ (8002a3c <xEventGroupWaitBits+0x168>)
 8002940:	f7fe fe94 	bl	800166c <vAssertCalled>
        }
        #endif

        vTaskSuspendAll();
 8002944:	f001 fa58 	bl	8003df8 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61fb      	str	r3, [r7, #28]

            /* Check to see if the wait condition is already met or not. */
            xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	69f8      	ldr	r0, [r7, #28]
 8002954:	f000 f95a 	bl	8002c0c <prvTestWaitCondition>
 8002958:	61b8      	str	r0, [r7, #24]

            if( xWaitConditionMet != pdFALSE )
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00e      	beq.n	800297e <xEventGroupWaitBits+0xaa>
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTicksToWait = ( TickType_t ) 0;
 8002964:	2300      	movs	r3, #0
 8002966:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d028      	beq.n	80029c0 <xEventGroupWaitBits+0xec>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	43db      	mvns	r3, r3
 8002976:	401a      	ands	r2, r3
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	e020      	b.n	80029c0 <xEventGroupWaitBits+0xec>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
 800297e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002980:	2b00      	cmp	r3, #0
 8002982:	d104      	bne.n	800298e <xEventGroupWaitBits+0xba>
            {
                /* The wait condition has not been met, but no block time was
                 * specified, so just return the current value. */
                uxReturn = uxCurrentEventBits;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTimeoutOccurred = pdTRUE;
 8002988:	2301      	movs	r3, #1
 800298a:	623b      	str	r3, [r7, #32]
 800298c:	e018      	b.n	80029c0 <xEventGroupWaitBits+0xec>
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <xEventGroupWaitBits+0xc8>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800299a:	62bb      	str	r3, [r7, #40]	@ 0x28
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <xEventGroupWaitBits+0xd6>
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80029a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029a8:	62bb      	str	r3, [r7, #40]	@ 0x28
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	1d18      	adds	r0, r3, #4
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b2:	4313      	orrs	r3, r2
 80029b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029b6:	4619      	mov	r1, r3
 80029b8:	f001 fd06 	bl	80043c8 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80029c0:	f001 fa28 	bl	8003e14 <xTaskResumeAll>
 80029c4:	6178      	str	r0, [r7, #20]

        if( xTicksToWait != ( TickType_t ) 0 )
 80029c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d031      	beq.n	8002a30 <xEventGroupWaitBits+0x15c>
        {
            if( xAlreadyYielded == pdFALSE )
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d107      	bne.n	80029e2 <xEventGroupWaitBits+0x10e>
            {
                taskYIELD_WITHIN_API();
 80029d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a40 <xEventGroupWaitBits+0x16c>)
 80029d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	f3bf 8f4f 	dsb	sy
 80029de:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 80029e2:	f002 fa31 	bl	8004e48 <uxTaskResetEventItemValue>
 80029e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80029e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d11a      	bne.n	8002a28 <xEventGroupWaitBits+0x154>
            {
                taskENTER_CRITICAL();
 80029f2:	f003 f87d 	bl	8005af0 <vPortEnterCritical>
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a02:	f000 f903 	bl	8002c0c <prvTestWaitCondition>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d009      	beq.n	8002a20 <xEventGroupWaitBits+0x14c>
                    {
                        if( xClearOnExit != pdFALSE )
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d006      	beq.n	8002a20 <xEventGroupWaitBits+0x14c>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
 8002a20:	2301      	movs	r3, #1
 8002a22:	623b      	str	r3, [r7, #32]
                }
                taskEXIT_CRITICAL();
 8002a24:	f003 f890 	bl	8005b48 <vPortExitCritical>
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
 8002a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8002a32:	4618      	mov	r0, r3
 8002a34:	3730      	adds	r7, #48	@ 0x30
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	08023ac0 	.word	0x08023ac0
 8002a40:	e000ed04 	.word	0xe000ed04

08002a44 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	60fb      	str	r3, [r7, #12]

        traceENTER_xEventGroupClearBits( xEventGroup, uxBitsToClear );

        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d104      	bne.n	8002a62 <xEventGroupClearBits+0x1e>
 8002a58:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 8002a5c:	480f      	ldr	r0, [pc, #60]	@ (8002a9c <xEventGroupClearBits+0x58>)
 8002a5e:	f7fe fe05 	bl	800166c <vAssertCalled>
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a68:	d304      	bcc.n	8002a74 <xEventGroupClearBits+0x30>
 8002a6a:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8002a6e:	480b      	ldr	r0, [pc, #44]	@ (8002a9c <xEventGroupClearBits+0x58>)
 8002a70:	f7fe fdfc 	bl	800166c <vAssertCalled>

        taskENTER_CRITICAL();
 8002a74:	f003 f83c 	bl	8005af0 <vPortEnterCritical>
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60bb      	str	r3, [r7, #8]

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	401a      	ands	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	601a      	str	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002a8c:	f003 f85c 	bl	8005b48 <vPortExitCritical>

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
 8002a90:	68bb      	ldr	r3, [r7, #8]
    }
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	08023ac0 	.word	0x08023ac0

08002aa0 <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08c      	sub	sp, #48	@ 0x30
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	62bb      	str	r3, [r7, #40]	@ 0x28
        EventGroup_t * pxEventBits = xEventGroup;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	623b      	str	r3, [r7, #32]
        BaseType_t xMatchFound = pdFALSE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d104      	bne.n	8002ac6 <xEventGroupSetBits+0x26>
 8002abc:	f240 2132 	movw	r1, #562	@ 0x232
 8002ac0:	4836      	ldr	r0, [pc, #216]	@ (8002b9c <xEventGroupSetBits+0xfc>)
 8002ac2:	f7fe fdd3 	bl	800166c <vAssertCalled>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002acc:	d304      	bcc.n	8002ad8 <xEventGroupSetBits+0x38>
 8002ace:	f240 2133 	movw	r1, #563	@ 0x233
 8002ad2:	4832      	ldr	r0, [pc, #200]	@ (8002b9c <xEventGroupSetBits+0xfc>)
 8002ad4:	f7fe fdca 	bl	800166c <vAssertCalled>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	3304      	adds	r3, #4
 8002adc:	61fb      	str	r3, [r7, #28]
        pxListEnd = listGET_END_MARKER( pxList );
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3308      	adds	r3, #8
 8002ae2:	61bb      	str	r3, [r7, #24]
        vTaskSuspendAll();
 8002ae4:	f001 f988 	bl	8003df8 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 8002afa:	e03c      	b.n	8002b76 <xEventGroupSetBits+0xd6>
            {
                pxNext = listGET_NEXT( pxListItem );
 8002afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	613b      	str	r3, [r7, #16]
                xMatchFound = pdFALSE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002b12:	60fb      	str	r3, [r7, #12]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002b1a:	613b      	str	r3, [r7, #16]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d108      	bne.n	8002b38 <xEventGroupSetBits+0x98>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <xEventGroupSetBits+0xaa>
                    {
                        xMatchFound = pdTRUE;
 8002b32:	2301      	movs	r3, #1
 8002b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b36:	e008      	b.n	8002b4a <xEventGroupSetBits+0xaa>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d101      	bne.n	8002b4a <xEventGroupSetBits+0xaa>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 8002b46:	2301      	movs	r3, #1
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d010      	beq.n	8002b72 <xEventGroupSetBits+0xd2>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <xEventGroupSetBits+0xc2>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 8002b5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b6e:	f001 fd49 	bl	8004604 <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while( pxListItem != pxListEnd )
 8002b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d1be      	bne.n	8002afc <xEventGroupSetBits+0x5c>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b84:	43db      	mvns	r3, r3
 8002b86:	401a      	ands	r2, r3
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 8002b8c:	f001 f942 	bl	8003e14 <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	681b      	ldr	r3, [r3, #0]
    }
 8002b94:	4618      	mov	r0, r3
 8002b96:	3730      	adds	r7, #48	@ 0x30
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	08023ac0 	.word	0x08023ac0

08002ba0 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
        EventGroup_t * pxEventBits = xEventGroup;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	60fb      	str	r3, [r7, #12]
        const List_t * pxTasksWaitingForBits;

        traceENTER_vEventGroupDelete( xEventGroup );

        configASSERT( pxEventBits );
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d104      	bne.n	8002bbc <vEventGroupDelete+0x1c>
 8002bb2:	f240 218e 	movw	r1, #654	@ 0x28e
 8002bb6:	4814      	ldr	r0, [pc, #80]	@ (8002c08 <vEventGroupDelete+0x68>)
 8002bb8:	f7fe fd58 	bl	800166c <vAssertCalled>

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	60bb      	str	r3, [r7, #8]

        vTaskSuspendAll();
 8002bc2:	f001 f919 	bl	8003df8 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8002bc6:	e011      	b.n	8002bec <vEventGroupDelete+0x4c>
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	3308      	adds	r3, #8
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d104      	bne.n	8002bde <vEventGroupDelete+0x3e>
 8002bd4:	f240 219a 	movw	r1, #666	@ 0x29a
 8002bd8:	480b      	ldr	r0, [pc, #44]	@ (8002c08 <vEventGroupDelete+0x68>)
 8002bda:	f7fe fd47 	bl	800166c <vAssertCalled>
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002be6:	4618      	mov	r0, r3
 8002be8:	f001 fd0c 	bl	8004604 <vTaskRemoveFromUnorderedEventList>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1e9      	bne.n	8002bc8 <vEventGroupDelete+0x28>
            }
        }
        ( void ) xTaskResumeAll();
 8002bf4:	f001 f90e 	bl	8003e14 <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f003 f94f 	bl	8005e9c <vPortFree>
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	08023ac0 	.word	0x08023ac0

08002c0c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
        BaseType_t xWaitConditionMet = pdFALSE;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]

        if( xWaitForAllBits == pdFALSE )
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d107      	bne.n	8002c32 <prvTestWaitCondition+0x26>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	e007      	b.n	8002c42 <prvTestWaitCondition+0x36>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4013      	ands	r3, r2
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d101      	bne.n	8002c42 <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	617b      	str	r3, [r7, #20]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return xWaitConditionMet;
 8002c42:	697b      	ldr	r3, [r7, #20]
    }
 8002c44:	4618      	mov	r0, r3
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f103 0208 	add.w	r2, r3, #8
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f04f 32ff 	mov.w	r2, #4294967295
 8002c68:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f103 0208 	add.w	r2, r3, #8
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f103 0208 	add.w	r2, r3, #8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002caa:	b480      	push	{r7}
 8002cac:	b085      	sub	sp, #20
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8002ce6:	bf00      	nop
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d103      	bne.n	8002d12 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	e00c      	b.n	8002d2c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3308      	adds	r3, #8
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e002      	b.n	8002d20 <vListInsert+0x2e>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d2f6      	bcs.n	8002d1a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6892      	ldr	r2, [r2, #8]
 8002d7a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6852      	ldr	r2, [r2, #4]
 8002d84:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d103      	bne.n	8002d98 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	1e5a      	subs	r2, r3, #1
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d104      	bne.n	8002dda <xQueueGenericReset+0x22>
 8002dd0:	f240 1137 	movw	r1, #311	@ 0x137
 8002dd4:	4839      	ldr	r0, [pc, #228]	@ (8002ebc <xQueueGenericReset+0x104>)
 8002dd6:	f7fe fc49 	bl	800166c <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d05d      	beq.n	8002e9c <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d059      	beq.n	8002e9c <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df0:	2100      	movs	r1, #0
 8002df2:	fba3 2302 	umull	r2, r3, r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d000      	beq.n	8002dfc <xQueueGenericReset+0x44>
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d14c      	bne.n	8002e9c <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 8002e02:	f002 fe75 	bl	8005af0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	441a      	add	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e32:	3b01      	subs	r3, #1
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	441a      	add	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	22ff      	movs	r2, #255	@ 0xff
 8002e46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	22ff      	movs	r2, #255	@ 0xff
 8002e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d114      	bne.n	8002e82 <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01a      	beq.n	8002e96 <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	3310      	adds	r3, #16
 8002e64:	4618      	mov	r0, r3
 8002e66:	f001 fafb 	bl	8004460 <xTaskRemoveFromEventList>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d012      	beq.n	8002e96 <xQueueGenericReset+0xde>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002e70:	4b13      	ldr	r3, [pc, #76]	@ (8002ec0 <xQueueGenericReset+0x108>)
 8002e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	e009      	b.n	8002e96 <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3310      	adds	r3, #16
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fee2 	bl	8002c50 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	3324      	adds	r3, #36	@ 0x24
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fedd 	bl	8002c50 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002e96:	f002 fe57 	bl	8005b48 <vPortExitCritical>
 8002e9a:	e001      	b.n	8002ea0 <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d104      	bne.n	8002eb0 <xQueueGenericReset+0xf8>
 8002ea6:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8002eaa:	4804      	ldr	r0, [pc, #16]	@ (8002ebc <xQueueGenericReset+0x104>)
 8002eac:	f7fe fbde 	bl	800166c <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	08023aec 	.word	0x08023aec
 8002ec0:	e000ed04 	.word	0xe000ed04

08002ec4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	@ 0x28
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d02e      	beq.n	8002f3a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002edc:	2100      	movs	r1, #0
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d000      	beq.n	8002eec <xQueueGenericCreate+0x28>
 8002eea:	2101      	movs	r1, #1
 8002eec:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d123      	bne.n	8002f3a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002efa:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002efe:	d81c      	bhi.n	8002f3a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	fb02 f303 	mul.w	r3, r2, r3
 8002f08:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	3350      	adds	r3, #80	@ 0x50
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f002 fef0 	bl	8005cf4 <pvPortMalloc>
 8002f14:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d016      	beq.n	8002f4a <xQueueGenericCreate+0x86>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	3350      	adds	r3, #80	@ 0x50
 8002f24:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f26:	79fa      	ldrb	r2, [r7, #7]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f810 	bl	8002f58 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002f38:	e007      	b.n	8002f4a <xQueueGenericCreate+0x86>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d104      	bne.n	8002f4a <xQueueGenericCreate+0x86>
 8002f40:	f240 212a 	movw	r1, #554	@ 0x22a
 8002f44:	4803      	ldr	r0, [pc, #12]	@ (8002f54 <xQueueGenericCreate+0x90>)
 8002f46:	f7fe fb91 	bl	800166c <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
    }
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3720      	adds	r7, #32
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	08023aec 	.word	0x08023aec

08002f58 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d103      	bne.n	8002f74 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e002      	b.n	8002f7a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f86:	2101      	movs	r1, #1
 8002f88:	69b8      	ldr	r0, [r7, #24]
 8002f8a:	f7ff ff15 	bl	8002db8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00e      	beq.n	8002fca <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f847 	bl	8003058 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b086      	sub	sp, #24
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	6939      	ldr	r1, [r7, #16]
 8002fea:	6978      	ldr	r0, [r7, #20]
 8002fec:	f7ff ff6a 	bl	8002ec4 <xQueueGenericCreate>
 8002ff0:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7ff ffd3 	bl	8002f9e <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
    }
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );

        if( ( uxMaxCount != 0U ) &&
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <xQueueCreateCountingSemaphore+0x36>
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	429a      	cmp	r2, r3
 800301e:	d80c      	bhi.n	800303a <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003020:	2202      	movs	r2, #2
 8003022:	2100      	movs	r1, #0
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ff4d 	bl	8002ec4 <xQueueGenericCreate>
 800302a:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <xQueueCreateCountingSemaphore+0x46>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 8003038:	e007      	b.n	800304a <xQueueCreateCountingSemaphore+0x46>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d104      	bne.n	800304a <xQueueCreateCountingSemaphore+0x46>
 8003040:	f240 319f 	movw	r1, #927	@ 0x39f
 8003044:	4803      	ldr	r0, [pc, #12]	@ (8003054 <xQueueCreateCountingSemaphore+0x50>)
 8003046:	f7fe fb11 	bl	800166c <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphore( xHandle );

        return xHandle;
 800304a:	68fb      	ldr	r3, [r7, #12]
    }
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	08023aec 	.word	0x08023aec

08003058 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	@ 0x28
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003066:	2300      	movs	r3, #0
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d104      	bne.n	800307e <xQueueGenericSend+0x26>
 8003074:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8003078:	4869      	ldr	r0, [pc, #420]	@ (8003220 <xQueueGenericSend+0x1c8>)
 800307a:	f7fe faf7 	bl	800166c <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d103      	bne.n	800308c <xQueueGenericSend+0x34>
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <xQueueGenericSend+0x38>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <xQueueGenericSend+0x3a>
 8003090:	2300      	movs	r3, #0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d104      	bne.n	80030a0 <xQueueGenericSend+0x48>
 8003096:	f240 31b7 	movw	r1, #951	@ 0x3b7
 800309a:	4861      	ldr	r0, [pc, #388]	@ (8003220 <xQueueGenericSend+0x1c8>)
 800309c:	f7fe fae6 	bl	800166c <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d103      	bne.n	80030ae <xQueueGenericSend+0x56>
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <xQueueGenericSend+0x5a>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <xQueueGenericSend+0x5c>
 80030b2:	2300      	movs	r3, #0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d104      	bne.n	80030c2 <xQueueGenericSend+0x6a>
 80030b8:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 80030bc:	4858      	ldr	r0, [pc, #352]	@ (8003220 <xQueueGenericSend+0x1c8>)
 80030be:	f7fe fad5 	bl	800166c <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030c2:	f001 fcb7 	bl	8004a34 <xTaskGetSchedulerState>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d102      	bne.n	80030d2 <xQueueGenericSend+0x7a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <xQueueGenericSend+0x7e>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <xQueueGenericSend+0x80>
 80030d6:	2300      	movs	r3, #0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d104      	bne.n	80030e6 <xQueueGenericSend+0x8e>
 80030dc:	f240 31bb 	movw	r1, #955	@ 0x3bb
 80030e0:	484f      	ldr	r0, [pc, #316]	@ (8003220 <xQueueGenericSend+0x1c8>)
 80030e2:	f7fe fac3 	bl	800166c <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80030e6:	f002 fd03 	bl	8005af0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <xQueueGenericSend+0xa4>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d129      	bne.n	8003150 <xQueueGenericSend+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	6a38      	ldr	r0, [r7, #32]
 8003102:	f000 fabb 	bl	800367c <prvCopyDataToQueue>
 8003106:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	2b00      	cmp	r3, #0
 800310e:	d010      	beq.n	8003132 <xQueueGenericSend+0xda>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	3324      	adds	r3, #36	@ 0x24
 8003114:	4618      	mov	r0, r3
 8003116:	f001 f9a3 	bl	8004460 <xTaskRemoveFromEventList>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <xQueueGenericSend+0xf0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003120:	4b40      	ldr	r3, [pc, #256]	@ (8003224 <xQueueGenericSend+0x1cc>)
 8003122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	e00a      	b.n	8003148 <xQueueGenericSend+0xf0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <xQueueGenericSend+0xf0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003138:	4b3a      	ldr	r3, [pc, #232]	@ (8003224 <xQueueGenericSend+0x1cc>)
 800313a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003148:	f002 fcfe 	bl	8005b48 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 800314c:	2301      	movs	r3, #1
 800314e:	e063      	b.n	8003218 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003156:	f002 fcf7 	bl	8005b48 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 800315a:	2300      	movs	r3, #0
 800315c:	e05c      	b.n	8003218 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003160:	2b00      	cmp	r3, #0
 8003162:	d106      	bne.n	8003172 <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003164:	f107 0314 	add.w	r3, r7, #20
 8003168:	4618      	mov	r0, r3
 800316a:	f001 fb23 	bl	80047b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800316e:	2301      	movs	r3, #1
 8003170:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003172:	f002 fce9 	bl	8005b48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003176:	f000 fe3f 	bl	8003df8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800317a:	f002 fcb9 	bl	8005af0 <vPortEnterCritical>
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003184:	b25b      	sxtb	r3, r3
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318a:	d103      	bne.n	8003194 <xQueueGenericSend+0x13c>
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800319a:	b25b      	sxtb	r3, r3
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d103      	bne.n	80031aa <xQueueGenericSend+0x152>
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031aa:	f002 fccd 	bl	8005b48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031ae:	1d3a      	adds	r2, r7, #4
 80031b0:	f107 0314 	add.w	r3, r7, #20
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f001 fb12 	bl	80047e0 <xTaskCheckForTimeOut>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d124      	bne.n	800320c <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031c2:	6a38      	ldr	r0, [r7, #32]
 80031c4:	f000 fb52 	bl	800386c <prvIsQueueFull>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d018      	beq.n	8003200 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	3310      	adds	r3, #16
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 f8d6 	bl	8004388 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80031dc:	6a38      	ldr	r0, [r7, #32]
 80031de:	f000 fadd 	bl	800379c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80031e2:	f000 fe17 	bl	8003e14 <xTaskResumeAll>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f47f af7c 	bne.w	80030e6 <xQueueGenericSend+0x8e>
                {
                    taskYIELD_WITHIN_API();
 80031ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003224 <xQueueGenericSend+0x1cc>)
 80031f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	e772      	b.n	80030e6 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003200:	6a38      	ldr	r0, [r7, #32]
 8003202:	f000 facb 	bl	800379c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003206:	f000 fe05 	bl	8003e14 <xTaskResumeAll>
 800320a:	e76c      	b.n	80030e6 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800320c:	6a38      	ldr	r0, [r7, #32]
 800320e:	f000 fac5 	bl	800379c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003212:	f000 fdff 	bl	8003e14 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8003216:	2300      	movs	r3, #0
        }
    }
}
 8003218:	4618      	mov	r0, r3
 800321a:	3728      	adds	r7, #40	@ 0x28
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	08023aec 	.word	0x08023aec
 8003224:	e000ed04 	.word	0xe000ed04

08003228 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	@ 0x28
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003234:	2300      	movs	r3, #0
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d104      	bne.n	800324c <xQueueReceive+0x24>
 8003242:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 8003246:	485e      	ldr	r0, [pc, #376]	@ (80033c0 <xQueueReceive+0x198>)
 8003248:	f7fe fa10 	bl	800166c <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d103      	bne.n	800325a <xQueueReceive+0x32>
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <xQueueReceive+0x36>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <xQueueReceive+0x38>
 800325e:	2300      	movs	r3, #0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d104      	bne.n	800326e <xQueueReceive+0x46>
 8003264:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 8003268:	4855      	ldr	r0, [pc, #340]	@ (80033c0 <xQueueReceive+0x198>)
 800326a:	f7fe f9ff 	bl	800166c <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800326e:	f001 fbe1 	bl	8004a34 <xTaskGetSchedulerState>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <xQueueReceive+0x56>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <xQueueReceive+0x5a>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <xQueueReceive+0x5c>
 8003282:	2300      	movs	r3, #0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d104      	bne.n	8003292 <xQueueReceive+0x6a>
 8003288:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 800328c:	484c      	ldr	r0, [pc, #304]	@ (80033c0 <xQueueReceive+0x198>)
 800328e:	f7fe f9ed 	bl	800166c <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003292:	f002 fc2d 	bl	8005af0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329a:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01f      	beq.n	80032e2 <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	6a38      	ldr	r0, [r7, #32]
 80032a6:	f000 fa53 	bl	8003750 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	1e5a      	subs	r2, r3, #1
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00f      	beq.n	80032da <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	3310      	adds	r3, #16
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 f8ce 	bl	8004460 <xTaskRemoveFromEventList>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80032ca:	4b3e      	ldr	r3, [pc, #248]	@ (80033c4 <xQueueReceive+0x19c>)
 80032cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80032da:	f002 fc35 	bl	8005b48 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 80032de:	2301      	movs	r3, #1
 80032e0:	e069      	b.n	80033b6 <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d103      	bne.n	80032f0 <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80032e8:	f002 fc2e 	bl	8005b48 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e062      	b.n	80033b6 <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80032f6:	f107 0314 	add.w	r3, r7, #20
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 fa5a 	bl	80047b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003300:	2301      	movs	r3, #1
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003304:	f002 fc20 	bl	8005b48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003308:	f000 fd76 	bl	8003df8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800330c:	f002 fbf0 	bl	8005af0 <vPortEnterCritical>
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003316:	b25b      	sxtb	r3, r3
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d103      	bne.n	8003326 <xQueueReceive+0xfe>
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800332c:	b25b      	sxtb	r3, r3
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003332:	d103      	bne.n	800333c <xQueueReceive+0x114>
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800333c:	f002 fc04 	bl	8005b48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003340:	1d3a      	adds	r2, r7, #4
 8003342:	f107 0314 	add.w	r3, r7, #20
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f001 fa49 	bl	80047e0 <xTaskCheckForTimeOut>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d123      	bne.n	800339c <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003354:	6a38      	ldr	r0, [r7, #32]
 8003356:	f000 fa73 	bl	8003840 <prvIsQueueEmpty>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d017      	beq.n	8003390 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	3324      	adds	r3, #36	@ 0x24
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f001 f80d 	bl	8004388 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800336e:	6a38      	ldr	r0, [r7, #32]
 8003370:	f000 fa14 	bl	800379c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003374:	f000 fd4e 	bl	8003e14 <xTaskResumeAll>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d189      	bne.n	8003292 <xQueueReceive+0x6a>
                {
                    taskYIELD_WITHIN_API();
 800337e:	4b11      	ldr	r3, [pc, #68]	@ (80033c4 <xQueueReceive+0x19c>)
 8003380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	e780      	b.n	8003292 <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003390:	6a38      	ldr	r0, [r7, #32]
 8003392:	f000 fa03 	bl	800379c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003396:	f000 fd3d 	bl	8003e14 <xTaskResumeAll>
 800339a:	e77a      	b.n	8003292 <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800339c:	6a38      	ldr	r0, [r7, #32]
 800339e:	f000 f9fd 	bl	800379c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80033a2:	f000 fd37 	bl	8003e14 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033a6:	6a38      	ldr	r0, [r7, #32]
 80033a8:	f000 fa4a 	bl	8003840 <prvIsQueueEmpty>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f43f af6f 	beq.w	8003292 <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80033b4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3728      	adds	r7, #40	@ 0x28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	08023aec 	.word	0x08023aec
 80033c4:	e000ed04 	.word	0xe000ed04

080033c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	@ 0x28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80033d2:	2300      	movs	r3, #0
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80033da:	2300      	movs	r3, #0
 80033dc:	623b      	str	r3, [r7, #32]
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d104      	bne.n	80033ee <xQueueSemaphoreTake+0x26>
 80033e4:	f240 6182 	movw	r1, #1666	@ 0x682
 80033e8:	486c      	ldr	r0, [pc, #432]	@ (800359c <xQueueSemaphoreTake+0x1d4>)
 80033ea:	f7fe f93f 	bl	800166c <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d004      	beq.n	8003400 <xQueueSemaphoreTake+0x38>
 80033f6:	f240 6186 	movw	r1, #1670	@ 0x686
 80033fa:	4868      	ldr	r0, [pc, #416]	@ (800359c <xQueueSemaphoreTake+0x1d4>)
 80033fc:	f7fe f936 	bl	800166c <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003400:	f001 fb18 	bl	8004a34 <xTaskGetSchedulerState>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d102      	bne.n	8003410 <xQueueSemaphoreTake+0x48>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <xQueueSemaphoreTake+0x4c>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <xQueueSemaphoreTake+0x4e>
 8003414:	2300      	movs	r3, #0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d104      	bne.n	8003424 <xQueueSemaphoreTake+0x5c>
 800341a:	f240 618b 	movw	r1, #1675	@ 0x68b
 800341e:	485f      	ldr	r0, [pc, #380]	@ (800359c <xQueueSemaphoreTake+0x1d4>)
 8003420:	f7fe f924 	bl	800166c <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003424:	f002 fb64 	bl	8005af0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342c:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d024      	beq.n	800347e <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	1e5a      	subs	r2, r3, #1
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d104      	bne.n	800344e <xQueueSemaphoreTake+0x86>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003444:	f001 fd18 	bl	8004e78 <pvTaskIncrementMutexHeldCount>
 8003448:	4602      	mov	r2, r0
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00f      	beq.n	8003476 <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3310      	adds	r3, #16
 800345a:	4618      	mov	r0, r3
 800345c:	f001 f800 	bl	8004460 <xTaskRemoveFromEventList>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003466:	4b4e      	ldr	r3, [pc, #312]	@ (80035a0 <xQueueSemaphoreTake+0x1d8>)
 8003468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003476:	f002 fb67 	bl	8005b48 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 800347a:	2301      	movs	r3, #1
 800347c:	e089      	b.n	8003592 <xQueueSemaphoreTake+0x1ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d103      	bne.n	800348c <xQueueSemaphoreTake+0xc4>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003484:	f002 fb60 	bl	8005b48 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8003488:	2300      	movs	r3, #0
 800348a:	e082      	b.n	8003592 <xQueueSemaphoreTake+0x1ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <xQueueSemaphoreTake+0xd8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003492:	f107 030c 	add.w	r3, r7, #12
 8003496:	4618      	mov	r0, r3
 8003498:	f001 f98c 	bl	80047b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800349c:	2301      	movs	r3, #1
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80034a0:	f002 fb52 	bl	8005b48 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80034a4:	f000 fca8 	bl	8003df8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80034a8:	f002 fb22 	bl	8005af0 <vPortEnterCritical>
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034b2:	b25b      	sxtb	r3, r3
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d103      	bne.n	80034c2 <xQueueSemaphoreTake+0xfa>
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034c8:	b25b      	sxtb	r3, r3
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ce:	d103      	bne.n	80034d8 <xQueueSemaphoreTake+0x110>
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034d8:	f002 fb36 	bl	8005b48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034dc:	463a      	mov	r2, r7
 80034de:	f107 030c 	add.w	r3, r7, #12
 80034e2:	4611      	mov	r1, r2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 f97b 	bl	80047e0 <xTaskCheckForTimeOut>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d132      	bne.n	8003556 <xQueueSemaphoreTake+0x18e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034f0:	69f8      	ldr	r0, [r7, #28]
 80034f2:	f000 f9a5 	bl	8003840 <prvIsQueueEmpty>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d026      	beq.n	800354a <xQueueSemaphoreTake+0x182>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d109      	bne.n	8003518 <xQueueSemaphoreTake+0x150>
                    {
                        taskENTER_CRITICAL();
 8003504:	f002 faf4 	bl	8005af0 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4618      	mov	r0, r3
 800350e:	f001 faaf 	bl	8004a70 <xTaskPriorityInherit>
 8003512:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 8003514:	f002 fb18 	bl	8005b48 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	3324      	adds	r3, #36	@ 0x24
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f000 ff31 	bl	8004388 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003526:	69f8      	ldr	r0, [r7, #28]
 8003528:	f000 f938 	bl	800379c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800352c:	f000 fc72 	bl	8003e14 <xTaskResumeAll>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	f47f af76 	bne.w	8003424 <xQueueSemaphoreTake+0x5c>
                {
                    taskYIELD_WITHIN_API();
 8003538:	4b19      	ldr	r3, [pc, #100]	@ (80035a0 <xQueueSemaphoreTake+0x1d8>)
 800353a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	e76c      	b.n	8003424 <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800354a:	69f8      	ldr	r0, [r7, #28]
 800354c:	f000 f926 	bl	800379c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003550:	f000 fc60 	bl	8003e14 <xTaskResumeAll>
 8003554:	e766      	b.n	8003424 <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003556:	69f8      	ldr	r0, [r7, #28]
 8003558:	f000 f920 	bl	800379c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800355c:	f000 fc5a 	bl	8003e14 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003560:	69f8      	ldr	r0, [r7, #28]
 8003562:	f000 f96d 	bl	8003840 <prvIsQueueEmpty>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	f43f af5b 	beq.w	8003424 <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00d      	beq.n	8003590 <xQueueSemaphoreTake+0x1c8>
                    {
                        taskENTER_CRITICAL();
 8003574:	f002 fabc 	bl	8005af0 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003578:	69f8      	ldr	r0, [r7, #28]
 800357a:	f000 f867 	bl	800364c <prvGetDisinheritPriorityAfterTimeout>
 800357e:	6178      	str	r0, [r7, #20]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	6979      	ldr	r1, [r7, #20]
 8003586:	4618      	mov	r0, r3
 8003588:	f001 fbae 	bl	8004ce8 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800358c:	f002 fadc 	bl	8005b48 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8003590:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003592:	4618      	mov	r0, r3
 8003594:	3728      	adds	r7, #40	@ 0x28
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	08023aec 	.word	0x08023aec
 80035a0:	e000ed04 	.word	0xe000ed04

080035a4 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d104      	bne.n	80035bc <uxQueueMessagesWaiting+0x18>
 80035b2:	f640 019b 	movw	r1, #2203	@ 0x89b
 80035b6:	4807      	ldr	r0, [pc, #28]	@ (80035d4 <uxQueueMessagesWaiting+0x30>)
 80035b8:	f7fe f858 	bl	800166c <vAssertCalled>

    taskENTER_CRITICAL();
 80035bc:	f002 fa98 	bl	8005af0 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c4:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80035c6:	f002 fabf 	bl	8005b48 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 80035ca:	68fb      	ldr	r3, [r7, #12]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	08023aec 	.word	0x08023aec

080035d8 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	60fb      	str	r3, [r7, #12]

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d104      	bne.n	80035f4 <uxQueueSpacesAvailable+0x1c>
 80035ea:	f44f 610b 	mov.w	r1, #2224	@ 0x8b0
 80035ee:	4809      	ldr	r0, [pc, #36]	@ (8003614 <uxQueueSpacesAvailable+0x3c>)
 80035f0:	f7fe f83c 	bl	800166c <vAssertCalled>

    taskENTER_CRITICAL();
 80035f4:	f002 fa7c 	bl	8005af0 <vPortEnterCritical>
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	60bb      	str	r3, [r7, #8]
    }
    taskEXIT_CRITICAL();
 8003604:	f002 faa0 	bl	8005b48 <vPortExitCritical>

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
 8003608:	68bb      	ldr	r3, [r7, #8]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	08023aec 	.word	0x08023aec

08003618 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d104      	bne.n	8003634 <vQueueDelete+0x1c>
 800362a:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 800362e:	4806      	ldr	r0, [pc, #24]	@ (8003648 <vQueueDelete+0x30>)
 8003630:	f7fe f81c 	bl	800166c <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f979 	bl	800392c <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f002 fc2e 	bl	8005e9c <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 8003640:	bf00      	nop
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	08023aec 	.word	0x08023aec

0800364c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003658:	2b00      	cmp	r3, #0
 800365a:	d006      	beq.n	800366a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f1c3 0307 	rsb	r3, r3, #7
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	e001      	b.n	800366e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800366e:	68fb      	ldr	r3, [r7, #12]
    }
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003690:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10d      	bne.n	80036b6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d14d      	bne.n	800373e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f001 fa82 	bl	8004bb0 <xTaskPriorityDisinherit>
 80036ac:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	e043      	b.n	800373e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d119      	bne.n	80036f0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6858      	ldr	r0, [r3, #4]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c4:	461a      	mov	r2, r3
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	f01e fb12 	bl	8021cf0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d4:	441a      	add	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d32b      	bcc.n	800373e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	e026      	b.n	800373e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	68d8      	ldr	r0, [r3, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	461a      	mov	r2, r3
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	f01e faf8 	bl	8021cf0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	425b      	negs	r3, r3
 800370a:	441a      	add	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d207      	bcs.n	800372c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003724:	425b      	negs	r3, r3
 8003726:	441a      	add	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d105      	bne.n	800373e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	3b01      	subs	r3, #1
 800373c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003746:	697b      	ldr	r3, [r7, #20]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d018      	beq.n	8003794 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	441a      	add	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	429a      	cmp	r2, r3
 800377a:	d303      	bcc.n	8003784 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68d9      	ldr	r1, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378c:	461a      	mov	r2, r3
 800378e:	6838      	ldr	r0, [r7, #0]
 8003790:	f01e faae 	bl	8021cf0 <memcpy>
    }
}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80037a4:	f002 f9a4 	bl	8005af0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037ae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80037b0:	e011      	b.n	80037d6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d012      	beq.n	80037e0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3324      	adds	r3, #36	@ 0x24
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fe4e 	bl	8004460 <xTaskRemoveFromEventList>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80037ca:	f001 f865 	bl	8004898 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80037d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	dce9      	bgt.n	80037b2 <prvUnlockQueue+0x16>
 80037de:	e000      	b.n	80037e2 <prvUnlockQueue+0x46>
                    break;
 80037e0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	22ff      	movs	r2, #255	@ 0xff
 80037e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80037ea:	f002 f9ad 	bl	8005b48 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80037ee:	f002 f97f 	bl	8005af0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037f8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80037fa:	e011      	b.n	8003820 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d012      	beq.n	800382a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3310      	adds	r3, #16
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fe29 	bl	8004460 <xTaskRemoveFromEventList>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003814:	f001 f840 	bl	8004898 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003818:	7bbb      	ldrb	r3, [r7, #14]
 800381a:	3b01      	subs	r3, #1
 800381c:	b2db      	uxtb	r3, r3
 800381e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003824:	2b00      	cmp	r3, #0
 8003826:	dce9      	bgt.n	80037fc <prvUnlockQueue+0x60>
 8003828:	e000      	b.n	800382c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800382a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	22ff      	movs	r2, #255	@ 0xff
 8003830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003834:	f002 f988 	bl	8005b48 <vPortExitCritical>
}
 8003838:	bf00      	nop
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003848:	f002 f952 	bl	8005af0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003850:	2b00      	cmp	r3, #0
 8003852:	d102      	bne.n	800385a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003854:	2301      	movs	r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	e001      	b.n	800385e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800385e:	f002 f973 	bl	8005b48 <vPortExitCritical>

    return xReturn;
 8003862:	68fb      	ldr	r3, [r7, #12]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003874:	f002 f93c 	bl	8005af0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003880:	429a      	cmp	r2, r3
 8003882:	d102      	bne.n	800388a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003884:	2301      	movs	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	e001      	b.n	800388e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800388e:	f002 f95b 	bl	8005b48 <vPortExitCritical>

    return xReturn;
 8003892:	68fb      	ldr	r3, [r7, #12]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d104      	bne.n	80038ba <vQueueAddToRegistry+0x1e>
 80038b0:	f640 31c9 	movw	r1, #3017	@ 0xbc9
 80038b4:	481b      	ldr	r0, [pc, #108]	@ (8003924 <vQueueAddToRegistry+0x88>)
 80038b6:	f7fd fed9 	bl	800166c <vAssertCalled>

        if( pcQueueName != NULL )
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d024      	beq.n	800390a <vQueueAddToRegistry+0x6e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	e01e      	b.n	8003904 <vQueueAddToRegistry+0x68>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80038c6:	4a18      	ldr	r2, [pc, #96]	@ (8003928 <vQueueAddToRegistry+0x8c>)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d105      	bne.n	80038e2 <vQueueAddToRegistry+0x46>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4a13      	ldr	r2, [pc, #76]	@ (8003928 <vQueueAddToRegistry+0x8c>)
 80038dc:	4413      	add	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]
                    break;
 80038e0:	e013      	b.n	800390a <vQueueAddToRegistry+0x6e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <vQueueAddToRegistry+0x62>
 80038e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003928 <vQueueAddToRegistry+0x8c>)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d104      	bne.n	80038fe <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003928 <vQueueAddToRegistry+0x8c>)
 80038fa:	4413      	add	r3, r2
 80038fc:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3301      	adds	r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b07      	cmp	r3, #7
 8003908:	d9dd      	bls.n	80038c6 <vQueueAddToRegistry+0x2a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <vQueueAddToRegistry+0x80>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	08023aec 	.word	0x08023aec
 8003928:	20000c04 	.word	0x20000c04

0800392c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d104      	bne.n	8003944 <vQueueUnregisterQueue+0x18>
 800393a:	f640 411d 	movw	r1, #3101	@ 0xc1d
 800393e:	4812      	ldr	r0, [pc, #72]	@ (8003988 <vQueueUnregisterQueue+0x5c>)
 8003940:	f7fd fe94 	bl	800166c <vAssertCalled>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e016      	b.n	8003978 <vQueueUnregisterQueue+0x4c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800394a:	4a10      	ldr	r2, [pc, #64]	@ (800398c <vQueueUnregisterQueue+0x60>)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4413      	add	r3, r2
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	429a      	cmp	r2, r3
 8003958:	d10b      	bne.n	8003972 <vQueueUnregisterQueue+0x46>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800395a:	4a0c      	ldr	r2, [pc, #48]	@ (800398c <vQueueUnregisterQueue+0x60>)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2100      	movs	r1, #0
 8003960:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003964:	4a09      	ldr	r2, [pc, #36]	@ (800398c <vQueueUnregisterQueue+0x60>)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4413      	add	r3, r2
 800396c:	2200      	movs	r2, #0
 800396e:	605a      	str	r2, [r3, #4]
                break;
 8003970:	e006      	b.n	8003980 <vQueueUnregisterQueue+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3301      	adds	r3, #1
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b07      	cmp	r3, #7
 800397c:	d9e5      	bls.n	800394a <vQueueUnregisterQueue+0x1e>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	08023aec 	.word	0x08023aec
 800398c:	20000c04 	.word	0x20000c04

08003990 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	@ 0x28
 8003994:	af04      	add	r7, sp, #16
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f002 f9a6 	bl	8005cf4 <pvPortMalloc>
 80039a8:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d013      	beq.n	80039d8 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80039b0:	206c      	movs	r0, #108	@ 0x6c
 80039b2:	f002 f99f 	bl	8005cf4 <pvPortMalloc>
 80039b6:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d008      	beq.n	80039d0 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80039be:	226c      	movs	r2, #108	@ 0x6c
 80039c0:	2100      	movs	r1, #0
 80039c2:	6978      	ldr	r0, [r7, #20]
 80039c4:	f01e faa1 	bl	8021f0a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80039ce:	e005      	b.n	80039dc <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80039d0:	6938      	ldr	r0, [r7, #16]
 80039d2:	f002 fa63 	bl	8005e9c <vPortFree>
 80039d6:	e001      	b.n	80039dc <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00d      	beq.n	80039fe <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039e2:	2300      	movs	r3, #0
 80039e4:	9303      	str	r3, [sp, #12]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	9302      	str	r3, [sp, #8]
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	68b9      	ldr	r1, [r7, #8]
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f829 	bl	8003a50 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80039fe:	697b      	ldr	r3, [r7, #20]
    }
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f7ff ffb3 	bl	8003990 <prvCreateTask>
 8003a2a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8003a32:	6938      	ldr	r0, [r7, #16]
 8003a34:	f000 f890 	bl	8003b58 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	e002      	b.n	8003a44 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a42:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8003a44:	697b      	ldr	r3, [r7, #20]
    }
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8003a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a60:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	461a      	mov	r2, r3
 8003a68:	21a5      	movs	r1, #165	@ 0xa5
 8003a6a:	f01e fa4e 	bl	8021f0a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8003a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003a78:	440b      	add	r3, r1
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f023 0307 	bic.w	r3, r3, #7
 8003a86:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d004      	beq.n	8003a9c <prvInitialiseNewTask+0x4c>
 8003a92:	f240 712e 	movw	r1, #1838	@ 0x72e
 8003a96:	482f      	ldr	r0, [pc, #188]	@ (8003b54 <prvInitialiseNewTask+0x104>)
 8003a98:	f7fd fde8 	bl	800166c <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d01e      	beq.n	8003ae0 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	e012      	b.n	8003ace <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	4413      	add	r3, r2
 8003aae:	7819      	ldrb	r1, [r3, #0]
 8003ab0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3334      	adds	r3, #52	@ 0x34
 8003ab8:	460a      	mov	r2, r1
 8003aba:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d006      	beq.n	8003ad6 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	3301      	adds	r3, #1
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b0f      	cmp	r3, #15
 8003ad2:	d9e9      	bls.n	8003aa8 <prvInitialiseNewTask+0x58>
 8003ad4:	e000      	b.n	8003ad8 <prvInitialiseNewTask+0x88>
            {
                break;
 8003ad6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8003ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	2b06      	cmp	r3, #6
 8003ae4:	d904      	bls.n	8003af0 <prvInitialiseNewTask+0xa0>
 8003ae6:	f240 7164 	movw	r1, #1892	@ 0x764
 8003aea:	481a      	ldr	r0, [pc, #104]	@ (8003b54 <prvInitialiseNewTask+0x104>)
 8003aec:	f7fd fdbe 	bl	800166c <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	2b06      	cmp	r3, #6
 8003af4:	d901      	bls.n	8003afa <prvInitialiseNewTask+0xaa>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003af6:	2306      	movs	r3, #6
 8003af8:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afc:	6a3a      	ldr	r2, [r7, #32]
 8003afe:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b02:	6a3a      	ldr	r2, [r7, #32]
 8003b04:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b08:	3304      	adds	r3, #4
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff f8c0 	bl	8002c90 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b12:	3318      	adds	r3, #24
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff f8bb 	bl	8002c90 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b1e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	f1c3 0207 	rsb	r2, r3, #7
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b2e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	68f9      	ldr	r1, [r7, #12]
 8003b34:	6938      	ldr	r0, [r7, #16]
 8003b36:	f001 fea5 	bl	8005884 <pxPortInitialiseStack>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3e:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b4a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b4c:	bf00      	nop
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	08023b10 	.word	0x08023b10

08003b58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8003b60:	f001 ffc6 	bl	8005af0 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8003b64:	4b41      	ldr	r3, [pc, #260]	@ (8003c6c <prvAddNewTaskToReadyList+0x114>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	4a40      	ldr	r2, [pc, #256]	@ (8003c6c <prvAddNewTaskToReadyList+0x114>)
 8003b6c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8003b6e:	4b40      	ldr	r3, [pc, #256]	@ (8003c70 <prvAddNewTaskToReadyList+0x118>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8003b76:	4a3e      	ldr	r2, [pc, #248]	@ (8003c70 <prvAddNewTaskToReadyList+0x118>)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c6c <prvAddNewTaskToReadyList+0x114>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d110      	bne.n	8003ba6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8003b84:	f000 feac 	bl	80048e0 <prvInitialiseTaskLists>
 8003b88:	e00d      	b.n	8003ba6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8003b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003c74 <prvAddNewTaskToReadyList+0x11c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b92:	4b37      	ldr	r3, [pc, #220]	@ (8003c70 <prvAddNewTaskToReadyList+0x118>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d802      	bhi.n	8003ba6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8003ba0:	4a33      	ldr	r2, [pc, #204]	@ (8003c70 <prvAddNewTaskToReadyList+0x118>)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8003ba6:	4b34      	ldr	r3, [pc, #208]	@ (8003c78 <prvAddNewTaskToReadyList+0x120>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3301      	adds	r3, #1
 8003bac:	4a32      	ldr	r2, [pc, #200]	@ (8003c78 <prvAddNewTaskToReadyList+0x120>)
 8003bae:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bb0:	4b31      	ldr	r3, [pc, #196]	@ (8003c78 <prvAddNewTaskToReadyList+0x120>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8003c7c <prvAddNewTaskToReadyList+0x124>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	4a2d      	ldr	r2, [pc, #180]	@ (8003c7c <prvAddNewTaskToReadyList+0x124>)
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bce:	492c      	ldr	r1, [pc, #176]	@ (8003c80 <prvAddNewTaskToReadyList+0x128>)
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	3304      	adds	r3, #4
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	609a      	str	r2, [r3, #8]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	60da      	str	r2, [r3, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	3204      	adds	r2, #4
 8003bf6:	605a      	str	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	1d1a      	adds	r2, r3, #4
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8003c80 <prvAddNewTaskToReadyList+0x128>)
 8003c0e:	441a      	add	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	615a      	str	r2, [r3, #20]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c18:	4919      	ldr	r1, [pc, #100]	@ (8003c80 <prvAddNewTaskToReadyList+0x128>)
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c2a:	1c59      	adds	r1, r3, #1
 8003c2c:	4814      	ldr	r0, [pc, #80]	@ (8003c80 <prvAddNewTaskToReadyList+0x128>)
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4403      	add	r3, r0
 8003c38:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003c3a:	f001 ff85 	bl	8005b48 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c74 <prvAddNewTaskToReadyList+0x11c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00e      	beq.n	8003c64 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8003c46:	4b0a      	ldr	r3, [pc, #40]	@ (8003c70 <prvAddNewTaskToReadyList+0x118>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d207      	bcs.n	8003c64 <prvAddNewTaskToReadyList+0x10c>
 8003c54:	4b0b      	ldr	r3, [pc, #44]	@ (8003c84 <prvAddNewTaskToReadyList+0x12c>)
 8003c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003c64:	bf00      	nop
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20000d44 	.word	0x20000d44
 8003c70:	20000c44 	.word	0x20000c44
 8003c74:	20000d50 	.word	0x20000d50
 8003c78:	20000d60 	.word	0x20000d60
 8003c7c:	20000d4c 	.word	0x20000d4c
 8003c80:	20000c48 	.word	0x20000c48
 8003c84:	e000ed04 	.word	0xe000ed04

08003c88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d011      	beq.n	8003cbe <vTaskDelay+0x36>
        {
            vTaskSuspendAll();
 8003c9a:	f000 f8ad 	bl	8003df8 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003cdc <vTaskDelay+0x54>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d004      	beq.n	8003cb0 <vTaskDelay+0x28>
 8003ca6:	f640 118e 	movw	r1, #2446	@ 0x98e
 8003caa:	480d      	ldr	r0, [pc, #52]	@ (8003ce0 <vTaskDelay+0x58>)
 8003cac:	f7fd fcde 	bl	800166c <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f001 fd64 	bl	8005780 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003cb8:	f000 f8ac 	bl	8003e14 <xTaskResumeAll>
 8003cbc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d107      	bne.n	8003cd4 <vTaskDelay+0x4c>
        {
            taskYIELD_WITHIN_API();
 8003cc4:	4b07      	ldr	r3, [pc, #28]	@ (8003ce4 <vTaskDelay+0x5c>)
 8003cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000d6c 	.word	0x20000d6c
 8003ce0:	08023b10 	.word	0x08023b10
 8003ce4:	e000ed04 	.word	0xe000ed04

08003ce8 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	@ 0x28
 8003cec:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	e011      	b.n	8003d20 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8003d74 <prvCreateIdleTasks+0x8c>)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	4413      	add	r3, r2
 8003d02:	7819      	ldrb	r1, [r3, #0]
 8003d04:	463a      	mov	r2, r7
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	4413      	add	r3, r2
 8003d0a:	460a      	mov	r2, r1
 8003d0c:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003d0e:	463a      	mov	r2, r7
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	4413      	add	r3, r2
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d006      	beq.n	8003d28 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2b0f      	cmp	r3, #15
 8003d24:	ddea      	ble.n	8003cfc <prvCreateIdleTasks+0x14>
 8003d26:	e000      	b.n	8003d2a <prvCreateIdleTasks+0x42>
        {
            break;
 8003d28:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	e016      	b.n	8003d5e <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003d30:	4b11      	ldr	r3, [pc, #68]	@ (8003d78 <prvCreateIdleTasks+0x90>)
 8003d32:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4a10      	ldr	r2, [pc, #64]	@ (8003d7c <prvCreateIdleTasks+0x94>)
 8003d3a:	4413      	add	r3, r2
 8003d3c:	4639      	mov	r1, r7
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	2300      	movs	r3, #0
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	2300      	movs	r3, #0
 8003d46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d4a:	6938      	ldr	r0, [r7, #16]
 8003d4c:	f7ff fe5c 	bl	8003a08 <xTaskCreate>
 8003d50:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d006      	beq.n	8003d66 <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	dde5      	ble.n	8003d30 <prvCreateIdleTasks+0x48>
 8003d64:	e000      	b.n	8003d68 <prvCreateIdleTasks+0x80>
        {
            break;
 8003d66:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8003d68:	69fb      	ldr	r3, [r7, #28]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3720      	adds	r7, #32
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	08023b34 	.word	0x08023b34
 8003d78:	080048b1 	.word	0x080048b1
 8003d7c:	20000d68 	.word	0x20000d68

08003d80 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8003d86:	f7ff ffaf 	bl	8003ce8 <prvCreateIdleTasks>
 8003d8a:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d118      	bne.n	8003dc4 <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8003d92:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003d96:	b672      	cpsid	i
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	b662      	cpsie	i
 8003da6:	603b      	str	r3, [r7, #0]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8003da8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003daa:	4b0e      	ldr	r3, [pc, #56]	@ (8003de4 <vTaskStartScheduler+0x64>)
 8003dac:	f04f 32ff 	mov.w	r2, #4294967295
 8003db0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003db2:	4b0d      	ldr	r3, [pc, #52]	@ (8003de8 <vTaskStartScheduler+0x68>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003db8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dec <vTaskStartScheduler+0x6c>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003dbe:	f001 fde9 	bl	8005994 <xPortStartScheduler>
 8003dc2:	e008      	b.n	8003dd6 <vTaskStartScheduler+0x56>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d104      	bne.n	8003dd6 <vTaskStartScheduler+0x56>
 8003dcc:	f640 61a9 	movw	r1, #3753	@ 0xea9
 8003dd0:	4807      	ldr	r0, [pc, #28]	@ (8003df0 <vTaskStartScheduler+0x70>)
 8003dd2:	f7fd fc4b 	bl	800166c <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003dd6:	4b07      	ldr	r3, [pc, #28]	@ (8003df4 <vTaskStartScheduler+0x74>)
 8003dd8:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000d64 	.word	0x20000d64
 8003de8:	20000d50 	.word	0x20000d50
 8003dec:	20000d48 	.word	0x20000d48
 8003df0:	08023b10 	.word	0x08023b10
 8003df4:	20000008 	.word	0x20000008

08003df8 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003dfc:	4b04      	ldr	r3, [pc, #16]	@ (8003e10 <vTaskSuspendAll+0x18>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3301      	adds	r3, #1
 8003e02:	4a03      	ldr	r2, [pc, #12]	@ (8003e10 <vTaskSuspendAll+0x18>)
 8003e04:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8003e06:	bf00      	nop
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	20000d6c 	.word	0x20000d6c

08003e14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003e22:	f001 fe65 	bl	8005af0 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003e2a:	4b72      	ldr	r3, [pc, #456]	@ (8003ff4 <xTaskResumeAll+0x1e0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d104      	bne.n	8003e3c <xTaskResumeAll+0x28>
 8003e32:	f640 718b 	movw	r1, #3979	@ 0xf8b
 8003e36:	4870      	ldr	r0, [pc, #448]	@ (8003ff8 <xTaskResumeAll+0x1e4>)
 8003e38:	f7fd fc18 	bl	800166c <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003e3c:	4b6d      	ldr	r3, [pc, #436]	@ (8003ff4 <xTaskResumeAll+0x1e0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	4a6c      	ldr	r2, [pc, #432]	@ (8003ff4 <xTaskResumeAll+0x1e0>)
 8003e44:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003e46:	4b6b      	ldr	r3, [pc, #428]	@ (8003ff4 <xTaskResumeAll+0x1e0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f040 80ca 	bne.w	8003fe4 <xTaskResumeAll+0x1d0>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e50:	4b6a      	ldr	r3, [pc, #424]	@ (8003ffc <xTaskResumeAll+0x1e8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80c5 	beq.w	8003fe4 <xTaskResumeAll+0x1d0>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e5a:	e08e      	b.n	8003f7a <xTaskResumeAll+0x166>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e5c:	4b68      	ldr	r3, [pc, #416]	@ (8004000 <xTaskResumeAll+0x1ec>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	6a12      	ldr	r2, [r2, #32]
 8003e72:	609a      	str	r2, [r3, #8]
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	69fa      	ldr	r2, [r7, #28]
 8003e7a:	69d2      	ldr	r2, [r2, #28]
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3318      	adds	r3, #24
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d103      	bne.n	8003e92 <xTaskResumeAll+0x7e>
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	6a1a      	ldr	r2, [r3, #32]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	605a      	str	r2, [r3, #4]
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	2200      	movs	r2, #0
 8003e96:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	1e5a      	subs	r2, r3, #1
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	68d2      	ldr	r2, [r2, #12]
 8003eb0:	609a      	str	r2, [r3, #8]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	6892      	ldr	r2, [r2, #8]
 8003eba:	605a      	str	r2, [r3, #4]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d103      	bne.n	8003ed0 <xTaskResumeAll+0xbc>
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	605a      	str	r2, [r3, #4]
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	615a      	str	r2, [r3, #20]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	1e5a      	subs	r2, r3, #1
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	4b46      	ldr	r3, [pc, #280]	@ (8004004 <xTaskResumeAll+0x1f0>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	4a45      	ldr	r2, [pc, #276]	@ (8004004 <xTaskResumeAll+0x1f0>)
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef6:	4944      	ldr	r1, [pc, #272]	@ (8004008 <xTaskResumeAll+0x1f4>)
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	3304      	adds	r3, #4
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	607b      	str	r3, [r7, #4]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	609a      	str	r2, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	3204      	adds	r2, #4
 8003f1e:	605a      	str	r2, [r3, #4]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	1d1a      	adds	r2, r3, #4
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	609a      	str	r2, [r3, #8]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4a34      	ldr	r2, [pc, #208]	@ (8004008 <xTaskResumeAll+0x1f4>)
 8003f36:	441a      	add	r2, r3
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	615a      	str	r2, [r3, #20]
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f40:	4931      	ldr	r1, [pc, #196]	@ (8004008 <xTaskResumeAll+0x1f4>)
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f52:	1c59      	adds	r1, r3, #1
 8003f54:	482c      	ldr	r0, [pc, #176]	@ (8004008 <xTaskResumeAll+0x1f4>)
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4403      	add	r3, r0
 8003f60:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f66:	4b29      	ldr	r3, [pc, #164]	@ (800400c <xTaskResumeAll+0x1f8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d904      	bls.n	8003f7a <xTaskResumeAll+0x166>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003f70:	4a27      	ldr	r2, [pc, #156]	@ (8004010 <xTaskResumeAll+0x1fc>)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2101      	movs	r1, #1
 8003f76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f7a:	4b21      	ldr	r3, [pc, #132]	@ (8004000 <xTaskResumeAll+0x1ec>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f47f af6c 	bne.w	8003e5c <xTaskResumeAll+0x48>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <xTaskResumeAll+0x17a>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003f8a:	f000 fd27 	bl	80049dc <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f8e:	4b21      	ldr	r3, [pc, #132]	@ (8004014 <xTaskResumeAll+0x200>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d012      	beq.n	8003fc0 <xTaskResumeAll+0x1ac>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003f9a:	f000 f86d 	bl	8004078 <xTaskIncrementTick>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d004      	beq.n	8003fae <xTaskResumeAll+0x19a>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8004010 <xTaskResumeAll+0x1fc>)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	2101      	movs	r1, #1
 8003faa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1ef      	bne.n	8003f9a <xTaskResumeAll+0x186>

                            xPendedTicks = 0;
 8003fba:	4b16      	ldr	r3, [pc, #88]	@ (8004014 <xTaskResumeAll+0x200>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003fc0:	4a13      	ldr	r2, [pc, #76]	@ (8004010 <xTaskResumeAll+0x1fc>)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00b      	beq.n	8003fe4 <xTaskResumeAll+0x1d0>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800400c <xTaskResumeAll+0x1f8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4b10      	ldr	r3, [pc, #64]	@ (8004018 <xTaskResumeAll+0x204>)
 8003fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003fe4:	f001 fdb0 	bl	8005b48 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8003fe8:	69bb      	ldr	r3, [r7, #24]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000d6c 	.word	0x20000d6c
 8003ff8:	08023b10 	.word	0x08023b10
 8003ffc:	20000d44 	.word	0x20000d44
 8004000:	20000d04 	.word	0x20000d04
 8004004:	20000d4c 	.word	0x20000d4c
 8004008:	20000c48 	.word	0x20000c48
 800400c:	20000c44 	.word	0x20000c44
 8004010:	20000d58 	.word	0x20000d58
 8004014:	20000d54 	.word	0x20000d54
 8004018:	e000ed04 	.word	0xe000ed04

0800401c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004022:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <xTaskGetTickCount+0x1c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8004028:	687b      	ldr	r3, [r7, #4]
}
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	20000d48 	.word	0x20000d48

0800403c <pcTaskGetName>:
    return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d102      	bne.n	8004050 <pcTaskGetName+0x14>
 800404a:	4b09      	ldr	r3, [pc, #36]	@ (8004070 <pcTaskGetName+0x34>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	e000      	b.n	8004052 <pcTaskGetName+0x16>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d104      	bne.n	8004064 <pcTaskGetName+0x28>
 800405a:	f241 0155 	movw	r1, #4181	@ 0x1055
 800405e:	4805      	ldr	r0, [pc, #20]	@ (8004074 <pcTaskGetName+0x38>)
 8004060:	f7fd fb04 	bl	800166c <vAssertCalled>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3334      	adds	r3, #52	@ 0x34
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20000c44 	.word	0x20000c44
 8004074:	08023b10 	.word	0x08023b10

08004078 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004082:	4b7b      	ldr	r3, [pc, #492]	@ (8004270 <xTaskIncrementTick+0x1f8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	f040 80e8 	bne.w	800425c <xTaskIncrementTick+0x1e4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800408c:	4b79      	ldr	r3, [pc, #484]	@ (8004274 <xTaskIncrementTick+0x1fc>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3301      	adds	r3, #1
 8004092:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004094:	4a77      	ldr	r2, [pc, #476]	@ (8004274 <xTaskIncrementTick+0x1fc>)
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d11a      	bne.n	80040d6 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 80040a0:	4b75      	ldr	r3, [pc, #468]	@ (8004278 <xTaskIncrementTick+0x200>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d004      	beq.n	80040b4 <xTaskIncrementTick+0x3c>
 80040aa:	f241 215f 	movw	r1, #4703	@ 0x125f
 80040ae:	4873      	ldr	r0, [pc, #460]	@ (800427c <xTaskIncrementTick+0x204>)
 80040b0:	f7fd fadc 	bl	800166c <vAssertCalled>
 80040b4:	4b70      	ldr	r3, [pc, #448]	@ (8004278 <xTaskIncrementTick+0x200>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	4b71      	ldr	r3, [pc, #452]	@ (8004280 <xTaskIncrementTick+0x208>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a6e      	ldr	r2, [pc, #440]	@ (8004278 <xTaskIncrementTick+0x200>)
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	4a6f      	ldr	r2, [pc, #444]	@ (8004280 <xTaskIncrementTick+0x208>)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	4b6e      	ldr	r3, [pc, #440]	@ (8004284 <xTaskIncrementTick+0x20c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3301      	adds	r3, #1
 80040ce:	4a6d      	ldr	r2, [pc, #436]	@ (8004284 <xTaskIncrementTick+0x20c>)
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	f000 fc83 	bl	80049dc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80040d6:	4b6c      	ldr	r3, [pc, #432]	@ (8004288 <xTaskIncrementTick+0x210>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	429a      	cmp	r2, r3
 80040de:	f0c0 80a8 	bcc.w	8004232 <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040e2:	4b65      	ldr	r3, [pc, #404]	@ (8004278 <xTaskIncrementTick+0x200>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d104      	bne.n	80040f6 <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80040ec:	4b66      	ldr	r3, [pc, #408]	@ (8004288 <xTaskIncrementTick+0x210>)
 80040ee:	f04f 32ff 	mov.w	r2, #4294967295
 80040f2:	601a      	str	r2, [r3, #0]
                    break;
 80040f4:	e09d      	b.n	8004232 <xTaskIncrementTick+0x1ba>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040f6:	4b60      	ldr	r3, [pc, #384]	@ (8004278 <xTaskIncrementTick+0x200>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	429a      	cmp	r2, r3
 800410c:	d203      	bcs.n	8004116 <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800410e:	4a5e      	ldr	r2, [pc, #376]	@ (8004288 <xTaskIncrementTick+0x210>)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6013      	str	r3, [r2, #0]
                        break;
 8004114:	e08d      	b.n	8004232 <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	68d2      	ldr	r2, [r2, #12]
 8004124:	609a      	str	r2, [r3, #8]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	6892      	ldr	r2, [r2, #8]
 800412e:	605a      	str	r2, [r3, #4]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	3304      	adds	r3, #4
 8004138:	429a      	cmp	r2, r3
 800413a:	d103      	bne.n	8004144 <xTaskIncrementTick+0xcc>
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	605a      	str	r2, [r3, #4]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	2200      	movs	r2, #0
 8004148:	615a      	str	r2, [r3, #20]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	1e5a      	subs	r2, r3, #1
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01e      	beq.n	800419a <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004160:	607b      	str	r3, [r7, #4]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	6a12      	ldr	r2, [r2, #32]
 800416a:	609a      	str	r2, [r3, #8]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	69d2      	ldr	r2, [r2, #28]
 8004174:	605a      	str	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	3318      	adds	r3, #24
 800417e:	429a      	cmp	r2, r3
 8004180:	d103      	bne.n	800418a <xTaskIncrementTick+0x112>
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2200      	movs	r2, #0
 800418e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	1e5a      	subs	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419e:	2201      	movs	r2, #1
 80041a0:	409a      	lsls	r2, r3
 80041a2:	4b3a      	ldr	r3, [pc, #232]	@ (800428c <xTaskIncrementTick+0x214>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	4a38      	ldr	r2, [pc, #224]	@ (800428c <xTaskIncrementTick+0x214>)
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041b0:	4937      	ldr	r1, [pc, #220]	@ (8004290 <xTaskIncrementTick+0x218>)
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	3304      	adds	r3, #4
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	609a      	str	r2, [r3, #8]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	60da      	str	r2, [r3, #12]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	3204      	adds	r2, #4
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1d1a      	adds	r2, r3, #4
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	609a      	str	r2, [r3, #8]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4a28      	ldr	r2, [pc, #160]	@ (8004290 <xTaskIncrementTick+0x218>)
 80041f0:	441a      	add	r2, r3
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	615a      	str	r2, [r3, #20]
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fa:	4925      	ldr	r1, [pc, #148]	@ (8004290 <xTaskIncrementTick+0x218>)
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800420c:	1c59      	adds	r1, r3, #1
 800420e:	4820      	ldr	r0, [pc, #128]	@ (8004290 <xTaskIncrementTick+0x218>)
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4403      	add	r3, r0
 800421a:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004220:	4b1c      	ldr	r3, [pc, #112]	@ (8004294 <xTaskIncrementTick+0x21c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004226:	429a      	cmp	r2, r3
 8004228:	f67f af5b 	bls.w	80040e2 <xTaskIncrementTick+0x6a>
                            {
                                xSwitchRequired = pdTRUE;
 800422c:	2301      	movs	r3, #1
 800422e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004230:	e757      	b.n	80040e2 <xTaskIncrementTick+0x6a>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8004232:	4b18      	ldr	r3, [pc, #96]	@ (8004294 <xTaskIncrementTick+0x21c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004238:	4915      	ldr	r1, [pc, #84]	@ (8004290 <xTaskIncrementTick+0x218>)
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d901      	bls.n	800424e <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 800424a:	2301      	movs	r3, #1
 800424c:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800424e:	4b12      	ldr	r3, [pc, #72]	@ (8004298 <xTaskIncrementTick+0x220>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d007      	beq.n	8004266 <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 8004256:	2301      	movs	r3, #1
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	e004      	b.n	8004266 <xTaskIncrementTick+0x1ee>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800425c:	4b0f      	ldr	r3, [pc, #60]	@ (800429c <xTaskIncrementTick+0x224>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3301      	adds	r3, #1
 8004262:	4a0e      	ldr	r2, [pc, #56]	@ (800429c <xTaskIncrementTick+0x224>)
 8004264:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8004266:	69fb      	ldr	r3, [r7, #28]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3720      	adds	r7, #32
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20000d6c 	.word	0x20000d6c
 8004274:	20000d48 	.word	0x20000d48
 8004278:	20000cfc 	.word	0x20000cfc
 800427c:	08023b10 	.word	0x08023b10
 8004280:	20000d00 	.word	0x20000d00
 8004284:	20000d5c 	.word	0x20000d5c
 8004288:	20000d64 	.word	0x20000d64
 800428c:	20000d4c 	.word	0x20000d4c
 8004290:	20000c48 	.word	0x20000c48
 8004294:	20000c44 	.word	0x20000c44
 8004298:	20000d58 	.word	0x20000d58
 800429c:	20000d54 	.word	0x20000d54

080042a0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80042a6:	4b30      	ldr	r3, [pc, #192]	@ (8004368 <vTaskSwitchContext+0xc8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80042ae:	4b2f      	ldr	r3, [pc, #188]	@ (800436c <vTaskSwitchContext+0xcc>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80042b4:	e053      	b.n	800435e <vTaskSwitchContext+0xbe>
            xYieldPendings[ 0 ] = pdFALSE;
 80042b6:	4b2d      	ldr	r3, [pc, #180]	@ (800436c <vTaskSwitchContext+0xcc>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 80042bc:	f7fd f9ce 	bl	800165c <ulGetRunTimeCounterValue>
 80042c0:	4603      	mov	r3, r0
 80042c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004370 <vTaskSwitchContext+0xd0>)
 80042c4:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 80042c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004370 <vTaskSwitchContext+0xd0>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004374 <vTaskSwitchContext+0xd4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d909      	bls.n	80042e6 <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 80042d2:	4b27      	ldr	r3, [pc, #156]	@ (8004370 <vTaskSwitchContext+0xd0>)
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	4b27      	ldr	r3, [pc, #156]	@ (8004374 <vTaskSwitchContext+0xd4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	1ad1      	subs	r1, r2, r3
 80042dc:	4b26      	ldr	r3, [pc, #152]	@ (8004378 <vTaskSwitchContext+0xd8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80042e2:	440a      	add	r2, r1
 80042e4:	661a      	str	r2, [r3, #96]	@ 0x60
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 80042e6:	4b22      	ldr	r3, [pc, #136]	@ (8004370 <vTaskSwitchContext+0xd0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a22      	ldr	r2, [pc, #136]	@ (8004374 <vTaskSwitchContext+0xd4>)
 80042ec:	6013      	str	r3, [r2, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80042ee:	4b23      	ldr	r3, [pc, #140]	@ (800437c <vTaskSwitchContext+0xdc>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	fab3 f383 	clz	r3, r3
 80042fa:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	f1c3 031f 	rsb	r3, r3, #31
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	491e      	ldr	r1, [pc, #120]	@ (8004380 <vTaskSwitchContext+0xe0>)
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d104      	bne.n	8004322 <vTaskSwitchContext+0x82>
 8004318:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 800431c:	4819      	ldr	r0, [pc, #100]	@ (8004384 <vTaskSwitchContext+0xe4>)
 800431e:	f7fd f9a5 	bl	800166c <vAssertCalled>
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4a14      	ldr	r2, [pc, #80]	@ (8004380 <vTaskSwitchContext+0xe0>)
 800432e:	4413      	add	r3, r2
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	605a      	str	r2, [r3, #4]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	3308      	adds	r3, #8
 8004344:	429a      	cmp	r2, r3
 8004346:	d103      	bne.n	8004350 <vTaskSwitchContext+0xb0>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	605a      	str	r2, [r3, #4]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	4a08      	ldr	r2, [pc, #32]	@ (8004378 <vTaskSwitchContext+0xd8>)
 8004358:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800435a:	4b07      	ldr	r3, [pc, #28]	@ (8004378 <vTaskSwitchContext+0xd8>)
 800435c:	681b      	ldr	r3, [r3, #0]
    }
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20000d6c 	.word	0x20000d6c
 800436c:	20000d58 	.word	0x20000d58
 8004370:	20000d74 	.word	0x20000d74
 8004374:	20000d70 	.word	0x20000d70
 8004378:	20000c44 	.word	0x20000c44
 800437c:	20000d4c 	.word	0x20000d4c
 8004380:	20000c48 	.word	0x20000c48
 8004384:	08023b10 	.word	0x08023b10

08004388 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d104      	bne.n	80043a2 <vTaskPlaceOnEventList+0x1a>
 8004398:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 800439c:	4808      	ldr	r0, [pc, #32]	@ (80043c0 <vTaskPlaceOnEventList+0x38>)
 800439e:	f7fd f965 	bl	800166c <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043a2:	4b08      	ldr	r3, [pc, #32]	@ (80043c4 <vTaskPlaceOnEventList+0x3c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3318      	adds	r3, #24
 80043a8:	4619      	mov	r1, r3
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fe fca1 	bl	8002cf2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043b0:	2101      	movs	r1, #1
 80043b2:	6838      	ldr	r0, [r7, #0]
 80043b4:	f001 f9e4 	bl	8005780 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 80043b8:	bf00      	nop
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	08023b10 	.word	0x08023b10
 80043c4:	20000c44 	.word	0x20000c44

080043c8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d104      	bne.n	80043e4 <vTaskPlaceOnUnorderedEventList+0x1c>
 80043da:	f241 419e 	movw	r1, #5278	@ 0x149e
 80043de:	481d      	ldr	r0, [pc, #116]	@ (8004454 <vTaskPlaceOnUnorderedEventList+0x8c>)
 80043e0:	f7fd f944 	bl	800166c <vAssertCalled>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 80043e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004458 <vTaskPlaceOnUnorderedEventList+0x90>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d104      	bne.n	80043f6 <vTaskPlaceOnUnorderedEventList+0x2e>
 80043ec:	f241 41a2 	movw	r1, #5282	@ 0x14a2
 80043f0:	4818      	ldr	r0, [pc, #96]	@ (8004454 <vTaskPlaceOnUnorderedEventList+0x8c>)
 80043f2:	f7fd f93b 	bl	800166c <vAssertCalled>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80043f6:	4b19      	ldr	r3, [pc, #100]	@ (800445c <vTaskPlaceOnUnorderedEventList+0x94>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004400:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	4b14      	ldr	r3, [pc, #80]	@ (800445c <vTaskPlaceOnUnorderedEventList+0x94>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	61da      	str	r2, [r3, #28]
 8004410:	4b12      	ldr	r3, [pc, #72]	@ (800445c <vTaskPlaceOnUnorderedEventList+0x94>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	6892      	ldr	r2, [r2, #8]
 8004418:	621a      	str	r2, [r3, #32]
 800441a:	4b10      	ldr	r3, [pc, #64]	@ (800445c <vTaskPlaceOnUnorderedEventList+0x94>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	3218      	adds	r2, #24
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	4b0d      	ldr	r3, [pc, #52]	@ (800445c <vTaskPlaceOnUnorderedEventList+0x94>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f103 0218 	add.w	r2, r3, #24
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	609a      	str	r2, [r3, #8]
 8004432:	4b0a      	ldr	r3, [pc, #40]	@ (800445c <vTaskPlaceOnUnorderedEventList+0x94>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	629a      	str	r2, [r3, #40]	@ 0x28
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004444:	2101      	movs	r1, #1
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f001 f99a 	bl	8005780 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 800444c:	bf00      	nop
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	08023b10 	.word	0x08023b10
 8004458:	20000d6c 	.word	0x20000d6c
 800445c:	20000c44 	.word	0x20000c44

08004460 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d104      	bne.n	8004480 <xTaskRemoveFromEventList+0x20>
 8004476:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 800447a:	485b      	ldr	r0, [pc, #364]	@ (80045e8 <xTaskRemoveFromEventList+0x188>)
 800447c:	f7fd f8f6 	bl	800166c <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	6a12      	ldr	r2, [r2, #32]
 800448e:	609a      	str	r2, [r3, #8]
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	69d2      	ldr	r2, [r2, #28]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	3318      	adds	r3, #24
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d103      	bne.n	80044ae <xTaskRemoveFromEventList+0x4e>
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	6a1a      	ldr	r2, [r3, #32]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2200      	movs	r2, #0
 80044b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	1e5a      	subs	r2, r3, #1
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80044be:	4b4b      	ldr	r3, [pc, #300]	@ (80045ec <xTaskRemoveFromEventList+0x18c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d160      	bne.n	8004588 <xTaskRemoveFromEventList+0x128>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	68d2      	ldr	r2, [r2, #12]
 80044d4:	609a      	str	r2, [r3, #8]
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	6892      	ldr	r2, [r2, #8]
 80044de:	605a      	str	r2, [r3, #4]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	3304      	adds	r3, #4
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d103      	bne.n	80044f4 <xTaskRemoveFromEventList+0x94>
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	605a      	str	r2, [r3, #4]
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2200      	movs	r2, #0
 80044f8:	615a      	str	r2, [r3, #20]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	1e5a      	subs	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004508:	2201      	movs	r2, #1
 800450a:	409a      	lsls	r2, r3
 800450c:	4b38      	ldr	r3, [pc, #224]	@ (80045f0 <xTaskRemoveFromEventList+0x190>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4313      	orrs	r3, r2
 8004512:	4a37      	ldr	r2, [pc, #220]	@ (80045f0 <xTaskRemoveFromEventList+0x190>)
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800451a:	4936      	ldr	r1, [pc, #216]	@ (80045f4 <xTaskRemoveFromEventList+0x194>)
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	3304      	adds	r3, #4
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	609a      	str	r2, [r3, #8]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	60da      	str	r2, [r3, #12]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	3204      	adds	r2, #4
 8004542:	605a      	str	r2, [r3, #4]
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	1d1a      	adds	r2, r3, #4
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4a26      	ldr	r2, [pc, #152]	@ (80045f4 <xTaskRemoveFromEventList+0x194>)
 800455a:	441a      	add	r2, r3
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	615a      	str	r2, [r3, #20]
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004564:	4923      	ldr	r1, [pc, #140]	@ (80045f4 <xTaskRemoveFromEventList+0x194>)
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004576:	1c59      	adds	r1, r3, #1
 8004578:	481e      	ldr	r0, [pc, #120]	@ (80045f4 <xTaskRemoveFromEventList+0x194>)
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4403      	add	r3, r0
 8004584:	6019      	str	r1, [r3, #0]
 8004586:	e01b      	b.n	80045c0 <xTaskRemoveFromEventList+0x160>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004588:	4b1b      	ldr	r3, [pc, #108]	@ (80045f8 <xTaskRemoveFromEventList+0x198>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	61da      	str	r2, [r3, #28]
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	621a      	str	r2, [r3, #32]
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	3218      	adds	r2, #24
 80045a4:	605a      	str	r2, [r3, #4]
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	f103 0218 	add.w	r2, r3, #24
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	609a      	str	r2, [r3, #8]
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	4a11      	ldr	r2, [pc, #68]	@ (80045f8 <xTaskRemoveFromEventList+0x198>)
 80045b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80045b6:	4b10      	ldr	r3, [pc, #64]	@ (80045f8 <xTaskRemoveFromEventList+0x198>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3301      	adds	r3, #1
 80045bc:	4a0e      	ldr	r2, [pc, #56]	@ (80045f8 <xTaskRemoveFromEventList+0x198>)
 80045be:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c4:	4b0d      	ldr	r3, [pc, #52]	@ (80045fc <xTaskRemoveFromEventList+0x19c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d905      	bls.n	80045da <xTaskRemoveFromEventList+0x17a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80045ce:	2301      	movs	r3, #1
 80045d0:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80045d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <xTaskRemoveFromEventList+0x1a0>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	e001      	b.n	80045de <xTaskRemoveFromEventList+0x17e>
        }
        else
        {
            xReturn = pdFALSE;
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 80045de:	69fb      	ldr	r3, [r7, #28]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3720      	adds	r7, #32
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	08023b10 	.word	0x08023b10
 80045ec:	20000d6c 	.word	0x20000d6c
 80045f0:	20000d4c 	.word	0x20000d4c
 80045f4:	20000c48 	.word	0x20000c48
 80045f8:	20000d04 	.word	0x20000d04
 80045fc:	20000c44 	.word	0x20000c44
 8004600:	20000d58 	.word	0x20000d58

08004604 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 800460e:	4b52      	ldr	r3, [pc, #328]	@ (8004758 <vTaskRemoveFromUnorderedEventList+0x154>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d104      	bne.n	8004620 <vTaskRemoveFromUnorderedEventList+0x1c>
 8004616:	f241 5143 	movw	r1, #5443	@ 0x1543
 800461a:	4850      	ldr	r0, [pc, #320]	@ (800475c <vTaskRemoveFromUnorderedEventList+0x158>)
 800461c:	f7fd f826 	bl	800166c <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d104      	bne.n	8004640 <vTaskRemoveFromUnorderedEventList+0x3c>
 8004636:	f241 514e 	movw	r1, #5454	@ 0x154e
 800463a:	4848      	ldr	r0, [pc, #288]	@ (800475c <vTaskRemoveFromUnorderedEventList+0x158>)
 800463c:	f7fd f816 	bl	800166c <vAssertCalled>
    listREMOVE_ITEM( pxEventListItem );
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6892      	ldr	r2, [r2, #8]
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6852      	ldr	r2, [r2, #4]
 8004658:	605a      	str	r2, [r3, #4]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	429a      	cmp	r2, r3
 8004662:	d103      	bne.n	800466c <vTaskRemoveFromUnorderedEventList+0x68>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	605a      	str	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	611a      	str	r2, [r3, #16]
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	1e5a      	subs	r2, r3, #1
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	68d2      	ldr	r2, [r2, #12]
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	6892      	ldr	r2, [r2, #8]
 8004694:	605a      	str	r2, [r3, #4]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	3304      	adds	r3, #4
 800469e:	429a      	cmp	r2, r3
 80046a0:	d103      	bne.n	80046aa <vTaskRemoveFromUnorderedEventList+0xa6>
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	605a      	str	r2, [r3, #4]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2200      	movs	r2, #0
 80046ae:	615a      	str	r2, [r3, #20]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	1e5a      	subs	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046be:	2201      	movs	r2, #1
 80046c0:	409a      	lsls	r2, r3
 80046c2:	4b27      	ldr	r3, [pc, #156]	@ (8004760 <vTaskRemoveFromUnorderedEventList+0x15c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	4a25      	ldr	r2, [pc, #148]	@ (8004760 <vTaskRemoveFromUnorderedEventList+0x15c>)
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046d0:	4924      	ldr	r1, [pc, #144]	@ (8004764 <vTaskRemoveFromUnorderedEventList+0x160>)
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	3304      	adds	r3, #4
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	60da      	str	r2, [r3, #12]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	3204      	adds	r2, #4
 80046f8:	605a      	str	r2, [r3, #4]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	1d1a      	adds	r2, r3, #4
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	609a      	str	r2, [r3, #8]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4a15      	ldr	r2, [pc, #84]	@ (8004764 <vTaskRemoveFromUnorderedEventList+0x160>)
 8004710:	441a      	add	r2, r3
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	615a      	str	r2, [r3, #20]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800471a:	4912      	ldr	r1, [pc, #72]	@ (8004764 <vTaskRemoveFromUnorderedEventList+0x160>)
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800472c:	1c59      	adds	r1, r3, #1
 800472e:	480d      	ldr	r0, [pc, #52]	@ (8004764 <vTaskRemoveFromUnorderedEventList+0x160>)
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4403      	add	r3, r0
 800473a:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004740:	4b09      	ldr	r3, [pc, #36]	@ (8004768 <vTaskRemoveFromUnorderedEventList+0x164>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004746:	429a      	cmp	r2, r3
 8004748:	d902      	bls.n	8004750 <vTaskRemoveFromUnorderedEventList+0x14c>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 800474a:	4b08      	ldr	r3, [pc, #32]	@ (800476c <vTaskRemoveFromUnorderedEventList+0x168>)
 800474c:	2201      	movs	r2, #1
 800474e:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 8004750:	bf00      	nop
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000d6c 	.word	0x20000d6c
 800475c:	08023b10 	.word	0x08023b10
 8004760:	20000d4c 	.word	0x20000d4c
 8004764:	20000c48 	.word	0x20000c48
 8004768:	20000c44 	.word	0x20000c44
 800476c:	20000d58 	.word	0x20000d58

08004770 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <vTaskSetTimeOutState+0x18>
 800477e:	f241 5186 	movw	r1, #5510	@ 0x1586
 8004782:	4809      	ldr	r0, [pc, #36]	@ (80047a8 <vTaskSetTimeOutState+0x38>)
 8004784:	f7fc ff72 	bl	800166c <vAssertCalled>
    taskENTER_CRITICAL();
 8004788:	f001 f9b2 	bl	8005af0 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 800478c:	4b07      	ldr	r3, [pc, #28]	@ (80047ac <vTaskSetTimeOutState+0x3c>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 8004794:	4b06      	ldr	r3, [pc, #24]	@ (80047b0 <vTaskSetTimeOutState+0x40>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 800479c:	f001 f9d4 	bl	8005b48 <vPortExitCritical>

    traceRETURN_vTaskSetTimeOutState();
}
 80047a0:	bf00      	nop
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	08023b10 	.word	0x08023b10
 80047ac:	20000d5c 	.word	0x20000d5c
 80047b0:	20000d48 	.word	0x20000d48

080047b4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047bc:	4b06      	ldr	r3, [pc, #24]	@ (80047d8 <vTaskInternalSetTimeOutState+0x24>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80047c4:	4b05      	ldr	r3, [pc, #20]	@ (80047dc <vTaskInternalSetTimeOutState+0x28>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	20000d5c 	.word	0x20000d5c
 80047dc:	20000d48 	.word	0x20000d48

080047e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d104      	bne.n	80047fa <xTaskCheckForTimeOut+0x1a>
 80047f0:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 80047f4:	4825      	ldr	r0, [pc, #148]	@ (800488c <xTaskCheckForTimeOut+0xac>)
 80047f6:	f7fc ff39 	bl	800166c <vAssertCalled>
    configASSERT( pxTicksToWait );
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <xTaskCheckForTimeOut+0x2a>
 8004800:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 8004804:	4821      	ldr	r0, [pc, #132]	@ (800488c <xTaskCheckForTimeOut+0xac>)
 8004806:	f7fc ff31 	bl	800166c <vAssertCalled>

    taskENTER_CRITICAL();
 800480a:	f001 f971 	bl	8005af0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800480e:	4b20      	ldr	r3, [pc, #128]	@ (8004890 <xTaskCheckForTimeOut+0xb0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004826:	d102      	bne.n	800482e <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e026      	b.n	800487c <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4b18      	ldr	r3, [pc, #96]	@ (8004894 <xTaskCheckForTimeOut+0xb4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d00a      	beq.n	8004850 <xTaskCheckForTimeOut+0x70>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	429a      	cmp	r2, r3
 8004842:	d305      	bcc.n	8004850 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004844:	2301      	movs	r3, #1
 8004846:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	e015      	b.n	800487c <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	429a      	cmp	r2, r3
 8004858:	d20b      	bcs.n	8004872 <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad2      	subs	r2, r2, r3
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff ffa4 	bl	80047b4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	e004      	b.n	800487c <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004878:	2301      	movs	r3, #1
 800487a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800487c:	f001 f964 	bl	8005b48 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8004880:	697b      	ldr	r3, [r7, #20]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	08023b10 	.word	0x08023b10
 8004890:	20000d48 	.word	0x20000d48
 8004894:	20000d5c 	.word	0x20000d5c

08004898 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 800489c:	4b03      	ldr	r3, [pc, #12]	@ (80048ac <vTaskMissedYield+0x14>)
 800489e:	2201      	movs	r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 80048a2:	bf00      	nop
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	20000d58 	.word	0x20000d58

080048b0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80048b8:	f000 f852 	bl	8004960 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80048bc:	4b06      	ldr	r3, [pc, #24]	@ (80048d8 <prvIdleTask+0x28>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d9f9      	bls.n	80048b8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80048c4:	4b05      	ldr	r3, [pc, #20]	@ (80048dc <prvIdleTask+0x2c>)
 80048c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80048d4:	e7f0      	b.n	80048b8 <prvIdleTask+0x8>
 80048d6:	bf00      	nop
 80048d8:	20000c48 	.word	0x20000c48
 80048dc:	e000ed04 	.word	0xe000ed04

080048e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048e6:	2300      	movs	r3, #0
 80048e8:	607b      	str	r3, [r7, #4]
 80048ea:	e00c      	b.n	8004906 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	4613      	mov	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4a12      	ldr	r2, [pc, #72]	@ (8004940 <prvInitialiseTaskLists+0x60>)
 80048f8:	4413      	add	r3, r2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fe f9a8 	bl	8002c50 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3301      	adds	r3, #1
 8004904:	607b      	str	r3, [r7, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b06      	cmp	r3, #6
 800490a:	d9ef      	bls.n	80048ec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800490c:	480d      	ldr	r0, [pc, #52]	@ (8004944 <prvInitialiseTaskLists+0x64>)
 800490e:	f7fe f99f 	bl	8002c50 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004912:	480d      	ldr	r0, [pc, #52]	@ (8004948 <prvInitialiseTaskLists+0x68>)
 8004914:	f7fe f99c 	bl	8002c50 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004918:	480c      	ldr	r0, [pc, #48]	@ (800494c <prvInitialiseTaskLists+0x6c>)
 800491a:	f7fe f999 	bl	8002c50 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800491e:	480c      	ldr	r0, [pc, #48]	@ (8004950 <prvInitialiseTaskLists+0x70>)
 8004920:	f7fe f996 	bl	8002c50 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004924:	480b      	ldr	r0, [pc, #44]	@ (8004954 <prvInitialiseTaskLists+0x74>)
 8004926:	f7fe f993 	bl	8002c50 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800492a:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <prvInitialiseTaskLists+0x78>)
 800492c:	4a05      	ldr	r2, [pc, #20]	@ (8004944 <prvInitialiseTaskLists+0x64>)
 800492e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004930:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <prvInitialiseTaskLists+0x7c>)
 8004932:	4a05      	ldr	r2, [pc, #20]	@ (8004948 <prvInitialiseTaskLists+0x68>)
 8004934:	601a      	str	r2, [r3, #0]
}
 8004936:	bf00      	nop
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20000c48 	.word	0x20000c48
 8004944:	20000cd4 	.word	0x20000cd4
 8004948:	20000ce8 	.word	0x20000ce8
 800494c:	20000d04 	.word	0x20000d04
 8004950:	20000d18 	.word	0x20000d18
 8004954:	20000d30 	.word	0x20000d30
 8004958:	20000cfc 	.word	0x20000cfc
 800495c:	20000d00 	.word	0x20000d00

08004960 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004966:	e019      	b.n	800499c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004968:	f001 f8c2 	bl	8005af0 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800496c:	4b10      	ldr	r3, [pc, #64]	@ (80049b0 <prvCheckTasksWaitingTermination+0x50>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3304      	adds	r3, #4
 8004978:	4618      	mov	r0, r3
 800497a:	f7fe f9f3 	bl	8002d64 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800497e:	4b0d      	ldr	r3, [pc, #52]	@ (80049b4 <prvCheckTasksWaitingTermination+0x54>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3b01      	subs	r3, #1
 8004984:	4a0b      	ldr	r2, [pc, #44]	@ (80049b4 <prvCheckTasksWaitingTermination+0x54>)
 8004986:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004988:	4b0b      	ldr	r3, [pc, #44]	@ (80049b8 <prvCheckTasksWaitingTermination+0x58>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3b01      	subs	r3, #1
 800498e:	4a0a      	ldr	r2, [pc, #40]	@ (80049b8 <prvCheckTasksWaitingTermination+0x58>)
 8004990:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8004992:	f001 f8d9 	bl	8005b48 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f810 	bl	80049bc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800499c:	4b06      	ldr	r3, [pc, #24]	@ (80049b8 <prvCheckTasksWaitingTermination+0x58>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e1      	bne.n	8004968 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000d18 	.word	0x20000d18
 80049b4:	20000d44 	.word	0x20000d44
 80049b8:	20000d2c 	.word	0x20000d2c

080049bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 fa67 	bl	8005e9c <vPortFree>
            vPortFree( pxTCB );
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f001 fa64 	bl	8005e9c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80049d4:	bf00      	nop
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049e0:	4b0a      	ldr	r3, [pc, #40]	@ (8004a0c <prvResetNextTaskUnblockTime+0x30>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d104      	bne.n	80049f4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80049ea:	4b09      	ldr	r3, [pc, #36]	@ (8004a10 <prvResetNextTaskUnblockTime+0x34>)
 80049ec:	f04f 32ff 	mov.w	r2, #4294967295
 80049f0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80049f2:	e005      	b.n	8004a00 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049f4:	4b05      	ldr	r3, [pc, #20]	@ (8004a0c <prvResetNextTaskUnblockTime+0x30>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a04      	ldr	r2, [pc, #16]	@ (8004a10 <prvResetNextTaskUnblockTime+0x34>)
 80049fe:	6013      	str	r3, [r2, #0]
}
 8004a00:	bf00      	nop
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20000cfc 	.word	0x20000cfc
 8004a10:	20000d64 	.word	0x20000d64

08004a14 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 8004a1a:	4b05      	ldr	r3, [pc, #20]	@ (8004a30 <xTaskGetCurrentTaskHandle+0x1c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 8004a20:	687b      	ldr	r3, [r7, #4]
        }
 8004a22:	4618      	mov	r0, r3
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	20000c44 	.word	0x20000c44

08004a34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a68 <xTaskGetSchedulerState+0x34>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d102      	bne.n	8004a48 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004a42:	2301      	movs	r3, #1
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	e008      	b.n	8004a5a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004a48:	4b08      	ldr	r3, [pc, #32]	@ (8004a6c <xTaskGetSchedulerState+0x38>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8004a50:	2302      	movs	r3, #2
 8004a52:	607b      	str	r3, [r7, #4]
 8004a54:	e001      	b.n	8004a5a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8004a56:	2300      	movs	r3, #0
 8004a58:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8004a5a:	687b      	ldr	r3, [r7, #4]
    }
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	20000d50 	.word	0x20000d50
 8004a6c:	20000d6c 	.word	0x20000d6c

08004a70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 8089 	beq.w	8004b9a <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a8c:	4b45      	ldr	r3, [pc, #276]	@ (8004ba4 <xTaskPriorityInherit+0x134>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d278      	bcs.n	8004b88 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	db06      	blt.n	8004aac <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8004a9e:	4b41      	ldr	r3, [pc, #260]	@ (8004ba4 <xTaskPriorityInherit+0x134>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa4:	f1c3 0207 	rsb	r2, r3, #7
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	6959      	ldr	r1, [r3, #20]
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4a3a      	ldr	r2, [pc, #232]	@ (8004ba8 <xTaskPriorityInherit+0x138>)
 8004abe:	4413      	add	r3, r2
 8004ac0:	4299      	cmp	r1, r3
 8004ac2:	d159      	bne.n	8004b78 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fe f94b 	bl	8002d64 <uxListRemove>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad8:	2201      	movs	r2, #1
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	43da      	mvns	r2, r3
 8004ae0:	4b32      	ldr	r3, [pc, #200]	@ (8004bac <xTaskPriorityInherit+0x13c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	4a31      	ldr	r2, [pc, #196]	@ (8004bac <xTaskPriorityInherit+0x13c>)
 8004ae8:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004aea:	4b2e      	ldr	r3, [pc, #184]	@ (8004ba4 <xTaskPriorityInherit+0x134>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af8:	2201      	movs	r2, #1
 8004afa:	409a      	lsls	r2, r3
 8004afc:	4b2b      	ldr	r3, [pc, #172]	@ (8004bac <xTaskPriorityInherit+0x13c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	4a2a      	ldr	r2, [pc, #168]	@ (8004bac <xTaskPriorityInherit+0x13c>)
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b0a:	4927      	ldr	r1, [pc, #156]	@ (8004ba8 <xTaskPriorityInherit+0x138>)
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	3304      	adds	r3, #4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	609a      	str	r2, [r3, #8]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	60da      	str	r2, [r3, #12]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	3204      	adds	r2, #4
 8004b32:	605a      	str	r2, [r3, #4]
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1d1a      	adds	r2, r3, #4
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4a17      	ldr	r2, [pc, #92]	@ (8004ba8 <xTaskPriorityInherit+0x138>)
 8004b4a:	441a      	add	r2, r3
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	615a      	str	r2, [r3, #20]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b54:	4914      	ldr	r1, [pc, #80]	@ (8004ba8 <xTaskPriorityInherit+0x138>)
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	440b      	add	r3, r1
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b66:	1c59      	adds	r1, r3, #1
 8004b68:	480f      	ldr	r0, [pc, #60]	@ (8004ba8 <xTaskPriorityInherit+0x138>)
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4403      	add	r3, r0
 8004b74:	6019      	str	r1, [r3, #0]
 8004b76:	e004      	b.n	8004b82 <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b78:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba4 <xTaskPriorityInherit+0x134>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004b82:	2301      	movs	r3, #1
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	e008      	b.n	8004b9a <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ba4 <xTaskPriorityInherit+0x134>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d201      	bcs.n	8004b9a <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004b96:	2301      	movs	r3, #1
 8004b98:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 8004b9a:	697b      	ldr	r3, [r7, #20]
    }
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	20000c44 	.word	0x20000c44
 8004ba8:	20000c48 	.word	0x20000c48
 8004bac:	20000d4c 	.word	0x20000d4c

08004bb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8082 	beq.w	8004ccc <xTaskPriorityDisinherit+0x11c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004bc8:	4b43      	ldr	r3, [pc, #268]	@ (8004cd8 <xTaskPriorityDisinherit+0x128>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d004      	beq.n	8004bdc <xTaskPriorityDisinherit+0x2c>
 8004bd2:	f641 2128 	movw	r1, #6696	@ 0x1a28
 8004bd6:	4841      	ldr	r0, [pc, #260]	@ (8004cdc <xTaskPriorityDisinherit+0x12c>)
 8004bd8:	f7fc fd48 	bl	800166c <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d104      	bne.n	8004bee <xTaskPriorityDisinherit+0x3e>
 8004be4:	f641 2129 	movw	r1, #6697	@ 0x1a29
 8004be8:	483c      	ldr	r0, [pc, #240]	@ (8004cdc <xTaskPriorityDisinherit+0x12c>)
 8004bea:	f7fc fd3f 	bl	800166c <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf2:	1e5a      	subs	r2, r3, #1
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d063      	beq.n	8004ccc <xTaskPriorityDisinherit+0x11c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d15f      	bne.n	8004ccc <xTaskPriorityDisinherit+0x11c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fe f8a7 	bl	8002d64 <uxListRemove>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <xTaskPriorityDisinherit+0x82>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c20:	2201      	movs	r2, #1
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	43da      	mvns	r2, r3
 8004c28:	4b2d      	ldr	r3, [pc, #180]	@ (8004ce0 <xTaskPriorityDisinherit+0x130>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8004ce0 <xTaskPriorityDisinherit+0x130>)
 8004c30:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	f1c3 0207 	rsb	r2, r3, #7
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	409a      	lsls	r2, r3
 8004c4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ce0 <xTaskPriorityDisinherit+0x130>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	4a22      	ldr	r2, [pc, #136]	@ (8004ce0 <xTaskPriorityDisinherit+0x130>)
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c5c:	4921      	ldr	r1, [pc, #132]	@ (8004ce4 <xTaskPriorityDisinherit+0x134>)
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	3304      	adds	r3, #4
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	60da      	str	r2, [r3, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	3204      	adds	r2, #4
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1d1a      	adds	r2, r3, #4
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	609a      	str	r2, [r3, #8]
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4a12      	ldr	r2, [pc, #72]	@ (8004ce4 <xTaskPriorityDisinherit+0x134>)
 8004c9c:	441a      	add	r2, r3
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	615a      	str	r2, [r3, #20]
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca6:	490f      	ldr	r1, [pc, #60]	@ (8004ce4 <xTaskPriorityDisinherit+0x134>)
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	440b      	add	r3, r1
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004cb8:	1c59      	adds	r1, r3, #1
 8004cba:	480a      	ldr	r0, [pc, #40]	@ (8004ce4 <xTaskPriorityDisinherit+0x134>)
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4403      	add	r3, r0
 8004cc6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8004ccc:	697b      	ldr	r3, [r7, #20]
    }
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000c44 	.word	0x20000c44
 8004cdc:	08023b10 	.word	0x08023b10
 8004ce0:	20000d4c 	.word	0x20000d4c
 8004ce4:	20000c48 	.word	0x20000c48

08004ce8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8096 	beq.w	8004e2e <vTaskPriorityDisinheritAfterTimeout+0x146>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8004d0a:	f641 2186 	movw	r1, #6790	@ 0x1a86
 8004d0e:	484a      	ldr	r0, [pc, #296]	@ (8004e38 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004d10:	f7fc fcac 	bl	800166c <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d902      	bls.n	8004d24 <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	e002      	b.n	8004d2a <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d28:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2e:	69fa      	ldr	r2, [r7, #28]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d07c      	beq.n	8004e2e <vTaskPriorityDisinheritAfterTimeout+0x146>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d177      	bne.n	8004e2e <vTaskPriorityDisinheritAfterTimeout+0x146>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004d3e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e3c <vTaskPriorityDisinheritAfterTimeout+0x154>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d104      	bne.n	8004d52 <vTaskPriorityDisinheritAfterTimeout+0x6a>
 8004d48:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 8004d4c:	483a      	ldr	r0, [pc, #232]	@ (8004e38 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004d4e:	f7fc fc8d 	bl	800166c <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d56:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	69fa      	ldr	r2, [r7, #28]
 8004d5c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	db04      	blt.n	8004d70 <vTaskPriorityDisinheritAfterTimeout+0x88>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	f1c3 0207 	rsb	r2, r3, #7
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	6959      	ldr	r1, [r3, #20]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4a30      	ldr	r2, [pc, #192]	@ (8004e40 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004d80:	4413      	add	r3, r2
 8004d82:	4299      	cmp	r1, r3
 8004d84:	d153      	bne.n	8004e2e <vTaskPriorityDisinheritAfterTimeout+0x146>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fd ffea 	bl	8002d64 <uxListRemove>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <vTaskPriorityDisinheritAfterTimeout+0xc4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	43da      	mvns	r2, r3
 8004da2:	4b28      	ldr	r3, [pc, #160]	@ (8004e44 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4013      	ands	r3, r2
 8004da8:	4a26      	ldr	r2, [pc, #152]	@ (8004e44 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004daa:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db0:	2201      	movs	r2, #1
 8004db2:	409a      	lsls	r2, r3
 8004db4:	4b23      	ldr	r3, [pc, #140]	@ (8004e44 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	4a22      	ldr	r2, [pc, #136]	@ (8004e44 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dc2:	491f      	ldr	r1, [pc, #124]	@ (8004e40 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	3304      	adds	r3, #4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	609a      	str	r2, [r3, #8]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	60da      	str	r2, [r3, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	3204      	adds	r2, #4
 8004dea:	605a      	str	r2, [r3, #4]
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	1d1a      	adds	r2, r3, #4
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	609a      	str	r2, [r3, #8]
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df8:	4613      	mov	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4a0f      	ldr	r2, [pc, #60]	@ (8004e40 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004e02:	441a      	add	r2, r3
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	615a      	str	r2, [r3, #20]
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e0c:	490c      	ldr	r1, [pc, #48]	@ (8004e40 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e1e:	1c59      	adds	r1, r3, #1
 8004e20:	4807      	ldr	r0, [pc, #28]	@ (8004e40 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4403      	add	r3, r0
 8004e2c:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 8004e2e:	bf00      	nop
 8004e30:	3720      	adds	r7, #32
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	08023b10 	.word	0x08023b10
 8004e3c:	20000c44 	.word	0x20000c44
 8004e40:	20000c48 	.word	0x20000c48
 8004e44:	20000d4c 	.word	0x20000d4c

08004e48 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004e4e:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <uxTaskResetEventItemValue+0x2c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 8004e56:	4b07      	ldr	r3, [pc, #28]	@ (8004e74 <uxTaskResetEventItemValue+0x2c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e5c:	4b05      	ldr	r3, [pc, #20]	@ (8004e74 <uxTaskResetEventItemValue+0x2c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f1c2 0207 	rsb	r2, r2, #7
 8004e64:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 8004e66:	687b      	ldr	r3, [r7, #4]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	20000c44 	.word	0x20000c44

08004e78 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 8004e7e:	4b09      	ldr	r3, [pc, #36]	@ (8004ea4 <pvTaskIncrementMutexHeldCount+0x2c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d004      	beq.n	8004e94 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8004e94:	687b      	ldr	r3, [r7, #4]
    }
 8004e96:	4618      	mov	r0, r3
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	20000c44 	.word	0x20000c44

08004ea8 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d004      	beq.n	8004ec8 <ulTaskGenericNotifyTake+0x20>
 8004ebe:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
 8004ec2:	4833      	ldr	r0, [pc, #204]	@ (8004f90 <ulTaskGenericNotifyTake+0xe8>)
 8004ec4:	f7fc fbd2 	bl	800166c <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8004ec8:	f7fe ff96 	bl	8003df8 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 8004ecc:	f000 fe10 	bl	8005af0 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 8004ed0:	4b30      	ldr	r3, [pc, #192]	@ (8004f94 <ulTaskGenericNotifyTake+0xec>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3318      	adds	r3, #24
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10b      	bne.n	8004efa <ulTaskGenericNotifyTake+0x52>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8004ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8004f94 <ulTaskGenericNotifyTake+0xec>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4413      	add	r3, r2
 8004eea:	3368      	adds	r3, #104	@ 0x68
 8004eec:	2201      	movs	r2, #1
 8004eee:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <ulTaskGenericNotifyTake+0x52>
                    {
                        xShouldBlock = pdTRUE;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8004efa:	f000 fe25 	bl	8005b48 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d103      	bne.n	8004f0c <ulTaskGenericNotifyTake+0x64>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f04:	2101      	movs	r1, #1
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fc3a 	bl	8005780 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8004f0c:	f7fe ff82 	bl	8003e14 <xTaskResumeAll>
 8004f10:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d10a      	bne.n	8004f2e <ulTaskGenericNotifyTake+0x86>
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d107      	bne.n	8004f2e <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
 8004f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004f98 <ulTaskGenericNotifyTake+0xf0>)
 8004f20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8004f2e:	f000 fddf 	bl	8005af0 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8004f32:	4b18      	ldr	r3, [pc, #96]	@ (8004f94 <ulTaskGenericNotifyTake+0xec>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3318      	adds	r3, #24
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d014      	beq.n	8004f72 <ulTaskGenericNotifyTake+0xca>
            {
                if( xClearCountOnExit != pdFALSE )
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d008      	beq.n	8004f60 <ulTaskGenericNotifyTake+0xb8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 8004f4e:	4b11      	ldr	r3, [pc, #68]	@ (8004f94 <ulTaskGenericNotifyTake+0xec>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3318      	adds	r3, #24
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	605a      	str	r2, [r3, #4]
 8004f5e:	e008      	b.n	8004f72 <ulTaskGenericNotifyTake+0xca>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 8004f60:	4b0c      	ldr	r3, [pc, #48]	@ (8004f94 <ulTaskGenericNotifyTake+0xec>)
 8004f62:	6819      	ldr	r1, [r3, #0]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	1e5a      	subs	r2, r3, #1
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3318      	adds	r3, #24
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	440b      	add	r3, r1
 8004f70:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8004f72:	4b08      	ldr	r3, [pc, #32]	@ (8004f94 <ulTaskGenericNotifyTake+0xec>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4413      	add	r3, r2
 8004f7a:	3368      	adds	r3, #104	@ 0x68
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004f80:	f000 fde2 	bl	8005b48 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 8004f84:	697b      	ldr	r3, [r7, #20]
    }
 8004f86:	4618      	mov	r0, r3
 8004f88:	3720      	adds	r7, #32
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	08023b10 	.word	0x08023b10
 8004f94:	20000c44 	.word	0x20000c44
 8004f98:	e000ed04 	.word	0xe000ed04

08004f9c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d004      	beq.n	8004fbe <xTaskGenericNotifyWait+0x22>
 8004fb4:	f641 612f 	movw	r1, #7727	@ 0x1e2f
 8004fb8:	483e      	ldr	r0, [pc, #248]	@ (80050b4 <xTaskGenericNotifyWait+0x118>)
 8004fba:	f7fc fb57 	bl	800166c <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8004fbe:	f7fe ff1b 	bl	8003df8 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8004fc2:	f000 fd95 	bl	8005af0 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8004fc6:	4b3c      	ldr	r3, [pc, #240]	@ (80050b8 <xTaskGenericNotifyWait+0x11c>)
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	3368      	adds	r3, #104	@ 0x68
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d01a      	beq.n	800500e <xTaskGenericNotifyWait+0x72>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8004fd8:	4b37      	ldr	r3, [pc, #220]	@ (80050b8 <xTaskGenericNotifyWait+0x11c>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3318      	adds	r3, #24
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	6859      	ldr	r1, [r3, #4]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	4019      	ands	r1, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3318      	adds	r3, #24
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8004ff6:	4b30      	ldr	r3, [pc, #192]	@ (80050b8 <xTaskGenericNotifyWait+0x11c>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3368      	adds	r3, #104	@ 0x68
 8005000:	2201      	movs	r2, #1
 8005002:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8005004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <xTaskGenericNotifyWait+0x72>
                    {
                        xShouldBlock = pdTRUE;
 800500a:	2301      	movs	r3, #1
 800500c:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800500e:	f000 fd9b 	bl	8005b48 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d103      	bne.n	8005020 <xTaskGenericNotifyWait+0x84>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005018:	2101      	movs	r1, #1
 800501a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800501c:	f000 fbb0 	bl	8005780 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005020:	f7fe fef8 	bl	8003e14 <xTaskResumeAll>
 8005024:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d10a      	bne.n	8005042 <xTaskGenericNotifyWait+0xa6>
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d107      	bne.n	8005042 <xTaskGenericNotifyWait+0xa6>
        {
            taskYIELD_WITHIN_API();
 8005032:	4b22      	ldr	r3, [pc, #136]	@ (80050bc <xTaskGenericNotifyWait+0x120>)
 8005034:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8005042:	f000 fd55 	bl	8005af0 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <xTaskGenericNotifyWait+0xc2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 800504c:	4b1a      	ldr	r3, [pc, #104]	@ (80050b8 <xTaskGenericNotifyWait+0x11c>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	3318      	adds	r3, #24
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800505e:	4b16      	ldr	r3, [pc, #88]	@ (80050b8 <xTaskGenericNotifyWait+0x11c>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4413      	add	r3, r2
 8005066:	3368      	adds	r3, #104	@ 0x68
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d002      	beq.n	8005076 <xTaskGenericNotifyWait+0xda>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005070:	2300      	movs	r3, #0
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	e010      	b.n	8005098 <xTaskGenericNotifyWait+0xfc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8005076:	4b10      	ldr	r3, [pc, #64]	@ (80050b8 <xTaskGenericNotifyWait+0x11c>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3318      	adds	r3, #24
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	6859      	ldr	r1, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	43db      	mvns	r3, r3
 8005088:	4019      	ands	r1, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3318      	adds	r3, #24
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8005094:	2301      	movs	r3, #1
 8005096:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8005098:	4b07      	ldr	r3, [pc, #28]	@ (80050b8 <xTaskGenericNotifyWait+0x11c>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	3368      	adds	r3, #104	@ 0x68
 80050a2:	2200      	movs	r2, #0
 80050a4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80050a6:	f000 fd4f 	bl	8005b48 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 80050aa:	69fb      	ldr	r3, [r7, #28]
    }
 80050ac:	4618      	mov	r0, r3
 80050ae:	3720      	adds	r7, #32
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	08023b10 	.word	0x08023b10
 80050b8:	20000c44 	.word	0x20000c44
 80050bc:	e000ed04 	.word	0xe000ed04

080050c0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	@ 0x28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80050ce:	2301      	movs	r3, #1
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d004      	beq.n	80050e2 <xTaskGenericNotify+0x22>
 80050d8:	f641 61a4 	movw	r1, #7844	@ 0x1ea4
 80050dc:	487b      	ldr	r0, [pc, #492]	@ (80052cc <xTaskGenericNotify+0x20c>)
 80050de:	f7fc fac5 	bl	800166c <vAssertCalled>
        configASSERT( xTaskToNotify );
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d104      	bne.n	80050f2 <xTaskGenericNotify+0x32>
 80050e8:	f641 61a5 	movw	r1, #7845	@ 0x1ea5
 80050ec:	4877      	ldr	r0, [pc, #476]	@ (80052cc <xTaskGenericNotify+0x20c>)
 80050ee:	f7fc fabd 	bl	800166c <vAssertCalled>
        pxTCB = xTaskToNotify;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 80050f6:	f000 fcfb 	bl	8005af0 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80050fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d007      	beq.n	8005110 <xTaskGenericNotify+0x50>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005100:	6a3a      	ldr	r2, [r7, #32]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	3318      	adds	r3, #24
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510e:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005110:	6a3a      	ldr	r2, [r7, #32]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4413      	add	r3, r2
 8005116:	3368      	adds	r3, #104	@ 0x68
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800511c:	6a3a      	ldr	r2, [r7, #32]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	4413      	add	r3, r2
 8005122:	3368      	adds	r3, #104	@ 0x68
 8005124:	2202      	movs	r2, #2
 8005126:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	2b04      	cmp	r3, #4
 800512c:	d83f      	bhi.n	80051ae <xTaskGenericNotify+0xee>
 800512e:	a201      	add	r2, pc, #4	@ (adr r2, 8005134 <xTaskGenericNotify+0x74>)
 8005130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005134:	080051c3 	.word	0x080051c3
 8005138:	08005149 	.word	0x08005149
 800513c:	08005167 	.word	0x08005167
 8005140:	08005183 	.word	0x08005183
 8005144:	08005193 	.word	0x08005193
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005148:	6a3a      	ldr	r2, [r7, #32]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	3318      	adds	r3, #24
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	431a      	orrs	r2, r3
 8005158:	6a39      	ldr	r1, [r7, #32]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	3318      	adds	r3, #24
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	605a      	str	r2, [r3, #4]
                    break;
 8005164:	e030      	b.n	80051c8 <xTaskGenericNotify+0x108>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005166:	6a3a      	ldr	r2, [r7, #32]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	3318      	adds	r3, #24
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	6a39      	ldr	r1, [r7, #32]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	3318      	adds	r3, #24
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	605a      	str	r2, [r3, #4]
                    break;
 8005180:	e022      	b.n	80051c8 <xTaskGenericNotify+0x108>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005182:	6a3a      	ldr	r2, [r7, #32]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	3318      	adds	r3, #24
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	605a      	str	r2, [r3, #4]
                    break;
 8005190:	e01a      	b.n	80051c8 <xTaskGenericNotify+0x108>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005192:	7ffb      	ldrb	r3, [r7, #31]
 8005194:	2b02      	cmp	r3, #2
 8005196:	d007      	beq.n	80051a8 <xTaskGenericNotify+0xe8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005198:	6a3a      	ldr	r2, [r7, #32]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	3318      	adds	r3, #24
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80051a6:	e00f      	b.n	80051c8 <xTaskGenericNotify+0x108>
                        xReturn = pdFAIL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 80051ac:	e00c      	b.n	80051c8 <xTaskGenericNotify+0x108>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80051ae:	4b48      	ldr	r3, [pc, #288]	@ (80052d0 <xTaskGenericNotify+0x210>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d007      	beq.n	80051c6 <xTaskGenericNotify+0x106>
 80051b6:	f641 61da 	movw	r1, #7898	@ 0x1eda
 80051ba:	4844      	ldr	r0, [pc, #272]	@ (80052cc <xTaskGenericNotify+0x20c>)
 80051bc:	f7fc fa56 	bl	800166c <vAssertCalled>

                    break;
 80051c0:	e001      	b.n	80051c6 <xTaskGenericNotify+0x106>
                    break;
 80051c2:	bf00      	nop
 80051c4:	e000      	b.n	80051c8 <xTaskGenericNotify+0x108>
                    break;
 80051c6:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80051c8:	7ffb      	ldrb	r3, [r7, #31]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d177      	bne.n	80052be <xTaskGenericNotify+0x1fe>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	61bb      	str	r3, [r7, #24]
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	6a3a      	ldr	r2, [r7, #32]
 80051da:	68d2      	ldr	r2, [r2, #12]
 80051dc:	609a      	str	r2, [r3, #8]
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	6a3a      	ldr	r2, [r7, #32]
 80051e4:	6892      	ldr	r2, [r2, #8]
 80051e6:	605a      	str	r2, [r3, #4]
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	3304      	adds	r3, #4
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d103      	bne.n	80051fc <xTaskGenericNotify+0x13c>
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	605a      	str	r2, [r3, #4]
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	2200      	movs	r2, #0
 8005200:	615a      	str	r2, [r3, #20]
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	1e5a      	subs	r2, r3, #1
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005210:	2201      	movs	r2, #1
 8005212:	409a      	lsls	r2, r3
 8005214:	4b2f      	ldr	r3, [pc, #188]	@ (80052d4 <xTaskGenericNotify+0x214>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4313      	orrs	r3, r2
 800521a:	4a2e      	ldr	r2, [pc, #184]	@ (80052d4 <xTaskGenericNotify+0x214>)
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005222:	492d      	ldr	r1, [pc, #180]	@ (80052d8 <xTaskGenericNotify+0x218>)
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	3304      	adds	r3, #4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	609a      	str	r2, [r3, #8]
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	60da      	str	r2, [r3, #12]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	6a3a      	ldr	r2, [r7, #32]
 8005248:	3204      	adds	r2, #4
 800524a:	605a      	str	r2, [r3, #4]
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	1d1a      	adds	r2, r3, #4
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	609a      	str	r2, [r3, #8]
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4a1d      	ldr	r2, [pc, #116]	@ (80052d8 <xTaskGenericNotify+0x218>)
 8005262:	441a      	add	r2, r3
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	615a      	str	r2, [r3, #20]
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800526c:	491a      	ldr	r1, [pc, #104]	@ (80052d8 <xTaskGenericNotify+0x218>)
 800526e:	4613      	mov	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	440b      	add	r3, r1
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6a3a      	ldr	r2, [r7, #32]
 800527c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800527e:	1c59      	adds	r1, r3, #1
 8005280:	4815      	ldr	r0, [pc, #84]	@ (80052d8 <xTaskGenericNotify+0x218>)
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4403      	add	r3, r0
 800528c:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005292:	2b00      	cmp	r3, #0
 8005294:	d004      	beq.n	80052a0 <xTaskGenericNotify+0x1e0>
 8005296:	f641 61e9 	movw	r1, #7913	@ 0x1ee9
 800529a:	480c      	ldr	r0, [pc, #48]	@ (80052cc <xTaskGenericNotify+0x20c>)
 800529c:	f7fc f9e6 	bl	800166c <vAssertCalled>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 80052a0:	4b0e      	ldr	r3, [pc, #56]	@ (80052dc <xTaskGenericNotify+0x21c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d207      	bcs.n	80052be <xTaskGenericNotify+0x1fe>
 80052ae:	4b0c      	ldr	r3, [pc, #48]	@ (80052e0 <xTaskGenericNotify+0x220>)
 80052b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80052be:	f000 fc43 	bl	8005b48 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80052c4:	4618      	mov	r0, r3
 80052c6:	3728      	adds	r7, #40	@ 0x28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	08023b10 	.word	0x08023b10
 80052d0:	20000d48 	.word	0x20000d48
 80052d4:	20000d4c 	.word	0x20000d4c
 80052d8:	20000c48 	.word	0x20000c48
 80052dc:	20000c44 	.word	0x20000c44
 80052e0:	e000ed04 	.word	0xe000ed04

080052e4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08e      	sub	sp, #56	@ 0x38
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80052f2:	2301      	movs	r3, #1
 80052f4:	637b      	str	r3, [r7, #52]	@ 0x34
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d104      	bne.n	8005306 <xTaskGenericNotifyFromISR+0x22>
 80052fc:	f641 711e 	movw	r1, #7966	@ 0x1f1e
 8005300:	4899      	ldr	r0, [pc, #612]	@ (8005568 <xTaskGenericNotifyFromISR+0x284>)
 8005302:	f7fc f9b3 	bl	800166c <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d004      	beq.n	8005316 <xTaskGenericNotifyFromISR+0x32>
 800530c:	f641 711f 	movw	r1, #7967	@ 0x1f1f
 8005310:	4895      	ldr	r0, [pc, #596]	@ (8005568 <xTaskGenericNotifyFromISR+0x284>)
 8005312:	f7fc f9ab 	bl	800166c <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005316:	f000 fcb9 	bl	8005c8c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 800531e:	f3ef 8211 	mrs	r2, BASEPRI
 8005322:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005326:	b672      	cpsid	i
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	b662      	cpsie	i
 8005336:	61ba      	str	r2, [r7, #24]
 8005338:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 800533a:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 800533c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
            if( pulPreviousNotificationValue != NULL )
 800533e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <xTaskGenericNotifyFromISR+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	3318      	adds	r3, #24
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005352:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4413      	add	r3, r2
 800535a:	3368      	adds	r3, #104	@ 0x68
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4413      	add	r3, r2
 8005368:	3368      	adds	r3, #104	@ 0x68
 800536a:	2202      	movs	r2, #2
 800536c:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800536e:	78fb      	ldrb	r3, [r7, #3]
 8005370:	2b04      	cmp	r3, #4
 8005372:	d841      	bhi.n	80053f8 <xTaskGenericNotifyFromISR+0x114>
 8005374:	a201      	add	r2, pc, #4	@ (adr r2, 800537c <xTaskGenericNotifyFromISR+0x98>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	0800540d 	.word	0x0800540d
 8005380:	08005391 	.word	0x08005391
 8005384:	080053af 	.word	0x080053af
 8005388:	080053cb 	.word	0x080053cb
 800538c:	080053db 	.word	0x080053db
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	3318      	adds	r3, #24
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	431a      	orrs	r2, r3
 80053a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	3318      	adds	r3, #24
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	605a      	str	r2, [r3, #4]
                    break;
 80053ac:	e031      	b.n	8005412 <xTaskGenericNotifyFromISR+0x12e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80053ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	3318      	adds	r3, #24
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	3318      	adds	r3, #24
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	605a      	str	r2, [r3, #4]
                    break;
 80053c8:	e023      	b.n	8005412 <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80053ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	3318      	adds	r3, #24
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	605a      	str	r2, [r3, #4]
                    break;
 80053d8:	e01b      	b.n	8005412 <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80053da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d007      	beq.n	80053f2 <xTaskGenericNotifyFromISR+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80053e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	3318      	adds	r3, #24
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80053f0:	e00f      	b.n	8005412 <xTaskGenericNotifyFromISR+0x12e>
                        xReturn = pdFAIL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 80053f6:	e00c      	b.n	8005412 <xTaskGenericNotifyFromISR+0x12e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80053f8:	4b5c      	ldr	r3, [pc, #368]	@ (800556c <xTaskGenericNotifyFromISR+0x288>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d007      	beq.n	8005410 <xTaskGenericNotifyFromISR+0x12c>
 8005400:	f641 7169 	movw	r1, #8041	@ 0x1f69
 8005404:	4858      	ldr	r0, [pc, #352]	@ (8005568 <xTaskGenericNotifyFromISR+0x284>)
 8005406:	f7fc f931 	bl	800166c <vAssertCalled>
                    break;
 800540a:	e001      	b.n	8005410 <xTaskGenericNotifyFromISR+0x12c>
                    break;
 800540c:	bf00      	nop
 800540e:	e000      	b.n	8005412 <xTaskGenericNotifyFromISR+0x12e>
                    break;
 8005410:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005412:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005416:	2b01      	cmp	r3, #1
 8005418:	f040 809a 	bne.w	8005550 <xTaskGenericNotifyFromISR+0x26c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800541c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <xTaskGenericNotifyFromISR+0x14a>
 8005424:	f641 7174 	movw	r1, #8052	@ 0x1f74
 8005428:	484f      	ldr	r0, [pc, #316]	@ (8005568 <xTaskGenericNotifyFromISR+0x284>)
 800542a:	f7fc f91f 	bl	800166c <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800542e:	4b50      	ldr	r3, [pc, #320]	@ (8005570 <xTaskGenericNotifyFromISR+0x28c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d160      	bne.n	80054f8 <xTaskGenericNotifyFromISR+0x214>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	623b      	str	r3, [r7, #32]
 800543c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005442:	68d2      	ldr	r2, [r2, #12]
 8005444:	609a      	str	r2, [r3, #8]
 8005446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800544c:	6892      	ldr	r2, [r2, #8]
 800544e:	605a      	str	r2, [r3, #4]
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005456:	3304      	adds	r3, #4
 8005458:	429a      	cmp	r2, r3
 800545a:	d103      	bne.n	8005464 <xTaskGenericNotifyFromISR+0x180>
 800545c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	605a      	str	r2, [r3, #4]
 8005464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005466:	2200      	movs	r2, #0
 8005468:	615a      	str	r2, [r3, #20]
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	1e5a      	subs	r2, r3, #1
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005478:	2201      	movs	r2, #1
 800547a:	409a      	lsls	r2, r3
 800547c:	4b3d      	ldr	r3, [pc, #244]	@ (8005574 <xTaskGenericNotifyFromISR+0x290>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4313      	orrs	r3, r2
 8005482:	4a3c      	ldr	r2, [pc, #240]	@ (8005574 <xTaskGenericNotifyFromISR+0x290>)
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800548a:	493b      	ldr	r1, [pc, #236]	@ (8005578 <xTaskGenericNotifyFromISR+0x294>)
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	3304      	adds	r3, #4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	61fb      	str	r3, [r7, #28]
 800549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549e:	69fa      	ldr	r2, [r7, #28]
 80054a0:	609a      	str	r2, [r3, #8]
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a8:	60da      	str	r2, [r3, #12]
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054b0:	3204      	adds	r2, #4
 80054b2:	605a      	str	r2, [r3, #4]
 80054b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b6:	1d1a      	adds	r2, r3, #4
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	609a      	str	r2, [r3, #8]
 80054bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005578 <xTaskGenericNotifyFromISR+0x294>)
 80054ca:	441a      	add	r2, r3
 80054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ce:	615a      	str	r2, [r3, #20]
 80054d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d4:	4928      	ldr	r1, [pc, #160]	@ (8005578 <xTaskGenericNotifyFromISR+0x294>)
 80054d6:	4613      	mov	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80054e6:	1c59      	adds	r1, r3, #1
 80054e8:	4823      	ldr	r0, [pc, #140]	@ (8005578 <xTaskGenericNotifyFromISR+0x294>)
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4403      	add	r3, r0
 80054f4:	6019      	str	r1, [r3, #0]
 80054f6:	e01b      	b.n	8005530 <xTaskGenericNotifyFromISR+0x24c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80054f8:	4b20      	ldr	r3, [pc, #128]	@ (800557c <xTaskGenericNotifyFromISR+0x298>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80054fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005502:	61da      	str	r2, [r3, #28]
 8005504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550a:	621a      	str	r2, [r3, #32]
 800550c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005512:	3218      	adds	r2, #24
 8005514:	605a      	str	r2, [r3, #4]
 8005516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005518:	f103 0218 	add.w	r2, r3, #24
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	609a      	str	r2, [r3, #8]
 8005520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005522:	4a16      	ldr	r2, [pc, #88]	@ (800557c <xTaskGenericNotifyFromISR+0x298>)
 8005524:	629a      	str	r2, [r3, #40]	@ 0x28
 8005526:	4b15      	ldr	r3, [pc, #84]	@ (800557c <xTaskGenericNotifyFromISR+0x298>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3301      	adds	r3, #1
 800552c:	4a13      	ldr	r2, [pc, #76]	@ (800557c <xTaskGenericNotifyFromISR+0x298>)
 800552e:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005534:	4b12      	ldr	r3, [pc, #72]	@ (8005580 <xTaskGenericNotifyFromISR+0x29c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553a:	429a      	cmp	r2, r3
 800553c:	d908      	bls.n	8005550 <xTaskGenericNotifyFromISR+0x26c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800553e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <xTaskGenericNotifyFromISR+0x266>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005546:	2201      	movs	r2, #1
 8005548:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 800554a:	4b0e      	ldr	r3, [pc, #56]	@ (8005584 <xTaskGenericNotifyFromISR+0x2a0>)
 800554c:	2201      	movs	r2, #1
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005552:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800555a:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 800555c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800555e:	4618      	mov	r0, r3
 8005560:	3738      	adds	r7, #56	@ 0x38
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	08023b10 	.word	0x08023b10
 800556c:	20000d48 	.word	0x20000d48
 8005570:	20000d6c 	.word	0x20000d6c
 8005574:	20000d4c 	.word	0x20000d4c
 8005578:	20000c48 	.word	0x20000c48
 800557c:	20000d04 	.word	0x20000d04
 8005580:	20000c44 	.word	0x20000c44
 8005584:	20000d58 	.word	0x20000d58

08005588 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005588:	b580      	push	{r7, lr}
 800558a:	b08e      	sub	sp, #56	@ 0x38
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d104      	bne.n	80055a4 <vTaskGenericNotifyGiveFromISR+0x1c>
 800559a:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 800559e:	4871      	ldr	r0, [pc, #452]	@ (8005764 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 80055a0:	f7fc f864 	bl	800166c <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d004      	beq.n	80055b4 <vTaskGenericNotifyGiveFromISR+0x2c>
 80055aa:	f641 71c1 	movw	r1, #8129	@ 0x1fc1
 80055ae:	486d      	ldr	r0, [pc, #436]	@ (8005764 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 80055b0:	f7fc f85c 	bl	800166c <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055b4:	f000 fb6a 	bl	8005c8c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm volatile
 80055bc:	f3ef 8211 	mrs	r2, BASEPRI
 80055c0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80055c4:	b672      	cpsid	i
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	b662      	cpsie	i
 80055d4:	61fa      	str	r2, [r7, #28]
 80055d6:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 80055d8:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80055da:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80055dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4413      	add	r3, r2
 80055e2:	3368      	adds	r3, #104	@ 0x68
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80055ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4413      	add	r3, r2
 80055f0:	3368      	adds	r3, #104	@ 0x68
 80055f2:	2202      	movs	r2, #2
 80055f4:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80055f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	3318      	adds	r3, #24
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	3318      	adds	r3, #24
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005610:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005614:	2b01      	cmp	r3, #1
 8005616:	f040 809a 	bne.w	800574e <vTaskGenericNotifyGiveFromISR+0x1c6>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800561a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800561c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561e:	2b00      	cmp	r3, #0
 8005620:	d004      	beq.n	800562c <vTaskGenericNotifyGiveFromISR+0xa4>
 8005622:	f641 71ea 	movw	r1, #8170	@ 0x1fea
 8005626:	484f      	ldr	r0, [pc, #316]	@ (8005764 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8005628:	f7fc f820 	bl	800166c <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800562c:	4b4e      	ldr	r3, [pc, #312]	@ (8005768 <vTaskGenericNotifyGiveFromISR+0x1e0>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d160      	bne.n	80056f6 <vTaskGenericNotifyGiveFromISR+0x16e>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	627b      	str	r3, [r7, #36]	@ 0x24
 800563a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005640:	68d2      	ldr	r2, [r2, #12]
 8005642:	609a      	str	r2, [r3, #8]
 8005644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800564a:	6892      	ldr	r2, [r2, #8]
 800564c:	605a      	str	r2, [r3, #4]
 800564e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005654:	3304      	adds	r3, #4
 8005656:	429a      	cmp	r2, r3
 8005658:	d103      	bne.n	8005662 <vTaskGenericNotifyGiveFromISR+0xda>
 800565a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005660:	605a      	str	r2, [r3, #4]
 8005662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005664:	2200      	movs	r2, #0
 8005666:	615a      	str	r2, [r3, #20]
 8005668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	1e5a      	subs	r2, r3, #1
 800566e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005670:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005676:	2201      	movs	r2, #1
 8005678:	409a      	lsls	r2, r3
 800567a:	4b3c      	ldr	r3, [pc, #240]	@ (800576c <vTaskGenericNotifyGiveFromISR+0x1e4>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4313      	orrs	r3, r2
 8005680:	4a3a      	ldr	r2, [pc, #232]	@ (800576c <vTaskGenericNotifyGiveFromISR+0x1e4>)
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005688:	4939      	ldr	r1, [pc, #228]	@ (8005770 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	3304      	adds	r3, #4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	623b      	str	r3, [r7, #32]
 800569a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569c:	6a3a      	ldr	r2, [r7, #32]
 800569e:	609a      	str	r2, [r3, #8]
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a6:	60da      	str	r2, [r3, #12]
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056ae:	3204      	adds	r2, #4
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b4:	1d1a      	adds	r2, r3, #4
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	609a      	str	r2, [r3, #8]
 80056ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056be:	4613      	mov	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005770 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 80056c8:	441a      	add	r2, r3
 80056ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056cc:	615a      	str	r2, [r3, #20]
 80056ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d2:	4927      	ldr	r1, [pc, #156]	@ (8005770 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 80056d4:	4613      	mov	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056e2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80056e4:	1c59      	adds	r1, r3, #1
 80056e6:	4822      	ldr	r0, [pc, #136]	@ (8005770 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 80056e8:	4613      	mov	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4403      	add	r3, r0
 80056f2:	6019      	str	r1, [r3, #0]
 80056f4:	e01b      	b.n	800572e <vTaskGenericNotifyGiveFromISR+0x1a6>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80056f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005774 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005700:	61da      	str	r2, [r3, #28]
 8005702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005704:	689a      	ldr	r2, [r3, #8]
 8005706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005708:	621a      	str	r2, [r3, #32]
 800570a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005710:	3218      	adds	r2, #24
 8005712:	605a      	str	r2, [r3, #4]
 8005714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005716:	f103 0218 	add.w	r2, r3, #24
 800571a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571c:	609a      	str	r2, [r3, #8]
 800571e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005720:	4a14      	ldr	r2, [pc, #80]	@ (8005774 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005722:	629a      	str	r2, [r3, #40]	@ 0x28
 8005724:	4b13      	ldr	r3, [pc, #76]	@ (8005774 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3301      	adds	r3, #1
 800572a:	4a12      	ldr	r2, [pc, #72]	@ (8005774 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 800572c:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800572e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005732:	4b11      	ldr	r3, [pc, #68]	@ (8005778 <vTaskGenericNotifyGiveFromISR+0x1f0>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005738:	429a      	cmp	r2, r3
 800573a:	d908      	bls.n	800574e <vTaskGenericNotifyGiveFromISR+0x1c6>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <vTaskGenericNotifyGiveFromISR+0x1c0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8005748:	4b0c      	ldr	r3, [pc, #48]	@ (800577c <vTaskGenericNotifyGiveFromISR+0x1f4>)
 800574a:	2201      	movs	r2, #1
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005750:	617b      	str	r3, [r7, #20]
    __asm volatile
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f383 8811 	msr	BASEPRI, r3
}
 8005758:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 800575a:	bf00      	nop
 800575c:	3738      	adds	r7, #56	@ 0x38
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	08023b10 	.word	0x08023b10
 8005768:	20000d6c 	.word	0x20000d6c
 800576c:	20000d4c 	.word	0x20000d4c
 8005770:	20000c48 	.word	0x20000c48
 8005774:	20000d04 	.word	0x20000d04
 8005778:	20000c44 	.word	0x20000c44
 800577c:	20000d58 	.word	0x20000d58

08005780 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b088      	sub	sp, #32
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800578a:	4b37      	ldr	r3, [pc, #220]	@ (8005868 <prvAddCurrentTaskToDelayedList+0xe8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8005790:	4b36      	ldr	r3, [pc, #216]	@ (800586c <prvAddCurrentTaskToDelayedList+0xec>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8005796:	4b36      	ldr	r3, [pc, #216]	@ (8005870 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800579c:	4b35      	ldr	r3, [pc, #212]	@ (8005874 <prvAddCurrentTaskToDelayedList+0xf4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3304      	adds	r3, #4
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fd fade 	bl	8002d64 <uxListRemove>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10b      	bne.n	80057c6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80057ae:	4b31      	ldr	r3, [pc, #196]	@ (8005874 <prvAddCurrentTaskToDelayedList+0xf4>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b4:	2201      	movs	r2, #1
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	43da      	mvns	r2, r3
 80057bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005878 <prvAddCurrentTaskToDelayedList+0xf8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4013      	ands	r3, r2
 80057c2:	4a2d      	ldr	r2, [pc, #180]	@ (8005878 <prvAddCurrentTaskToDelayedList+0xf8>)
 80057c4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	d124      	bne.n	8005818 <prvAddCurrentTaskToDelayedList+0x98>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d021      	beq.n	8005818 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057d4:	4b29      	ldr	r3, [pc, #164]	@ (800587c <prvAddCurrentTaskToDelayedList+0xfc>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	4b26      	ldr	r3, [pc, #152]	@ (8005874 <prvAddCurrentTaskToDelayedList+0xf4>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	609a      	str	r2, [r3, #8]
 80057e2:	4b24      	ldr	r3, [pc, #144]	@ (8005874 <prvAddCurrentTaskToDelayedList+0xf4>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	6892      	ldr	r2, [r2, #8]
 80057ea:	60da      	str	r2, [r3, #12]
 80057ec:	4b21      	ldr	r3, [pc, #132]	@ (8005874 <prvAddCurrentTaskToDelayedList+0xf4>)
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	3204      	adds	r2, #4
 80057f6:	605a      	str	r2, [r3, #4]
 80057f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005874 <prvAddCurrentTaskToDelayedList+0xf4>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	1d1a      	adds	r2, r3, #4
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	609a      	str	r2, [r3, #8]
 8005802:	4b1c      	ldr	r3, [pc, #112]	@ (8005874 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1d      	ldr	r2, [pc, #116]	@ (800587c <prvAddCurrentTaskToDelayedList+0xfc>)
 8005808:	615a      	str	r2, [r3, #20]
 800580a:	4b1c      	ldr	r3, [pc, #112]	@ (800587c <prvAddCurrentTaskToDelayedList+0xfc>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3301      	adds	r3, #1
 8005810:	4a1a      	ldr	r2, [pc, #104]	@ (800587c <prvAddCurrentTaskToDelayedList+0xfc>)
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005816:	e022      	b.n	800585e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4413      	add	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005820:	4b14      	ldr	r3, [pc, #80]	@ (8005874 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	429a      	cmp	r2, r3
 800582e:	d207      	bcs.n	8005840 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005830:	4b10      	ldr	r3, [pc, #64]	@ (8005874 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3304      	adds	r3, #4
 8005836:	4619      	mov	r1, r3
 8005838:	6978      	ldr	r0, [r7, #20]
 800583a:	f7fd fa5a 	bl	8002cf2 <vListInsert>
}
 800583e:	e00e      	b.n	800585e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005840:	4b0c      	ldr	r3, [pc, #48]	@ (8005874 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3304      	adds	r3, #4
 8005846:	4619      	mov	r1, r3
 8005848:	69b8      	ldr	r0, [r7, #24]
 800584a:	f7fd fa52 	bl	8002cf2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800584e:	4b0c      	ldr	r3, [pc, #48]	@ (8005880 <prvAddCurrentTaskToDelayedList+0x100>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	429a      	cmp	r2, r3
 8005856:	d202      	bcs.n	800585e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8005858:	4a09      	ldr	r2, [pc, #36]	@ (8005880 <prvAddCurrentTaskToDelayedList+0x100>)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6013      	str	r3, [r2, #0]
}
 800585e:	bf00      	nop
 8005860:	3720      	adds	r7, #32
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000d48 	.word	0x20000d48
 800586c:	20000cfc 	.word	0x20000cfc
 8005870:	20000d00 	.word	0x20000d00
 8005874:	20000c44 	.word	0x20000c44
 8005878:	20000d4c 	.word	0x20000d4c
 800587c:	20000d30 	.word	0x20000d30
 8005880:	20000d64 	.word	0x20000d64

08005884 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3b04      	subs	r3, #4
 8005894:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800589c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3b04      	subs	r3, #4
 80058a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f023 0201 	bic.w	r2, r3, #1
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3b04      	subs	r3, #4
 80058b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80058b4:	4a0c      	ldr	r2, [pc, #48]	@ (80058e8 <pxPortInitialiseStack+0x64>)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3b14      	subs	r3, #20
 80058be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3b04      	subs	r3, #4
 80058ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f06f 0202 	mvn.w	r2, #2
 80058d2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3b20      	subs	r3, #32
 80058d8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80058da:	68fb      	ldr	r3, [r7, #12]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	080058ed 	.word	0x080058ed

080058ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80058f2:	2300      	movs	r3, #0
 80058f4:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80058f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005934 <prvTaskExitError+0x48>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fe:	d003      	beq.n	8005908 <prvTaskExitError+0x1c>
 8005900:	21ee      	movs	r1, #238	@ 0xee
 8005902:	480d      	ldr	r0, [pc, #52]	@ (8005938 <prvTaskExitError+0x4c>)
 8005904:	f7fb feb2 	bl	800166c <vAssertCalled>
    __asm volatile
 8005908:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800590c:	b672      	cpsid	i
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	b662      	cpsie	i
 800591c:	607b      	str	r3, [r7, #4]
}
 800591e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005920:	bf00      	nop
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0fc      	beq.n	8005922 <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005928:	bf00      	nop
 800592a:	bf00      	nop
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	2000000c 	.word	0x2000000c
 8005938:	08023b3c 	.word	0x08023b3c
 800593c:	00000000 	.word	0x00000000

08005940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005940:	4b07      	ldr	r3, [pc, #28]	@ (8005960 <pxCurrentTCBConst2>)
 8005942:	6819      	ldr	r1, [r3, #0]
 8005944:	6808      	ldr	r0, [r1, #0]
 8005946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594a:	f380 8809 	msr	PSP, r0
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f04f 0000 	mov.w	r0, #0
 8005956:	f380 8811 	msr	BASEPRI, r0
 800595a:	4770      	bx	lr
 800595c:	f3af 8000 	nop.w

08005960 <pxCurrentTCBConst2>:
 8005960:	20000c44 	.word	0x20000c44
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop

08005968 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005968:	4808      	ldr	r0, [pc, #32]	@ (800598c <prvPortStartFirstTask+0x24>)
 800596a:	6800      	ldr	r0, [r0, #0]
 800596c:	6800      	ldr	r0, [r0, #0]
 800596e:	f380 8808 	msr	MSP, r0
 8005972:	f04f 0000 	mov.w	r0, #0
 8005976:	f380 8814 	msr	CONTROL, r0
 800597a:	b662      	cpsie	i
 800597c:	b661      	cpsie	f
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	df00      	svc	0
 8005988:	bf00      	nop
 800598a:	0000      	.short	0x0000
 800598c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8005990:	bf00      	nop
 8005992:	bf00      	nop

08005994 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800599a:	4b4a      	ldr	r3, [pc, #296]	@ (8005ac4 <xPortStartScheduler+0x130>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	617b      	str	r3, [r7, #20]
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	332c      	adds	r3, #44	@ 0x2c
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a48      	ldr	r2, [pc, #288]	@ (8005ac8 <xPortStartScheduler+0x134>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d004      	beq.n	80059b6 <xPortStartScheduler+0x22>
 80059ac:	f240 114b 	movw	r1, #331	@ 0x14b
 80059b0:	4846      	ldr	r0, [pc, #280]	@ (8005acc <xPortStartScheduler+0x138>)
 80059b2:	f7fb fe5b 	bl	800166c <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	3338      	adds	r3, #56	@ 0x38
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a44      	ldr	r2, [pc, #272]	@ (8005ad0 <xPortStartScheduler+0x13c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d004      	beq.n	80059cc <xPortStartScheduler+0x38>
 80059c2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 80059c6:	4841      	ldr	r0, [pc, #260]	@ (8005acc <xPortStartScheduler+0x138>)
 80059c8:	f7fb fe50 	bl	800166c <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059d0:	4b40      	ldr	r3, [pc, #256]	@ (8005ad4 <xPortStartScheduler+0x140>)
 80059d2:	613b      	str	r3, [r7, #16]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	22ff      	movs	r2, #255	@ 0xff
 80059e0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059ea:	79fb      	ldrb	r3, [r7, #7]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	4b38      	ldr	r3, [pc, #224]	@ (8005ad8 <xPortStartScheduler+0x144>)
 80059f6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80059f8:	4b37      	ldr	r3, [pc, #220]	@ (8005ad8 <xPortStartScheduler+0x144>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d104      	bne.n	8005a0a <xPortStartScheduler+0x76>
 8005a00:	f240 116f 	movw	r1, #367	@ 0x16f
 8005a04:	4831      	ldr	r0, [pc, #196]	@ (8005acc <xPortStartScheduler+0x138>)
 8005a06:	f7fb fe31 	bl	800166c <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00d      	beq.n	8005a34 <xPortStartScheduler+0xa0>
 8005a18:	f240 1173 	movw	r1, #371	@ 0x173
 8005a1c:	482b      	ldr	r0, [pc, #172]	@ (8005acc <xPortStartScheduler+0x138>)
 8005a1e:	f7fb fe25 	bl	800166c <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a22:	e007      	b.n	8005a34 <xPortStartScheduler+0xa0>
        {
            ulImplementedPrioBits++;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a3c:	2b80      	cmp	r3, #128	@ 0x80
 8005a3e:	d0f1      	beq.n	8005a24 <xPortStartScheduler+0x90>
        }

        if( ulImplementedPrioBits == 8 )
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d103      	bne.n	8005a4e <xPortStartScheduler+0xba>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8005a46:	4b25      	ldr	r3, [pc, #148]	@ (8005adc <xPortStartScheduler+0x148>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	e004      	b.n	8005a58 <xPortStartScheduler+0xc4>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f1c3 0307 	rsb	r3, r3, #7
 8005a54:	4a21      	ldr	r2, [pc, #132]	@ (8005adc <xPortStartScheduler+0x148>)
 8005a56:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a58:	4b20      	ldr	r3, [pc, #128]	@ (8005adc <xPortStartScheduler+0x148>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	021b      	lsls	r3, r3, #8
 8005a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8005adc <xPortStartScheduler+0x148>)
 8005a60:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a62:	4b1e      	ldr	r3, [pc, #120]	@ (8005adc <xPortStartScheduler+0x148>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005adc <xPortStartScheduler+0x148>)
 8005a6c:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005a76:	4b1a      	ldr	r3, [pc, #104]	@ (8005ae0 <xPortStartScheduler+0x14c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a19      	ldr	r2, [pc, #100]	@ (8005ae0 <xPortStartScheduler+0x14c>)
 8005a7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a80:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005a82:	4b17      	ldr	r3, [pc, #92]	@ (8005ae0 <xPortStartScheduler+0x14c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a16      	ldr	r2, [pc, #88]	@ (8005ae0 <xPortStartScheduler+0x14c>)
 8005a88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a8c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8005a8e:	4b15      	ldr	r3, [pc, #84]	@ (8005ae4 <xPortStartScheduler+0x150>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005a94:	f000 f8d4 	bl	8005c40 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005a98:	4b13      	ldr	r3, [pc, #76]	@ (8005ae8 <xPortStartScheduler+0x154>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005a9e:	f000 f8e9 	bl	8005c74 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005aa2:	4b12      	ldr	r3, [pc, #72]	@ (8005aec <xPortStartScheduler+0x158>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a11      	ldr	r2, [pc, #68]	@ (8005aec <xPortStartScheduler+0x158>)
 8005aa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005aac:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005aae:	f7ff ff5b 	bl	8005968 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005ab2:	f7fe fbf5 	bl	80042a0 <vTaskSwitchContext>
    prvTaskExitError();
 8005ab6:	f7ff ff19 	bl	80058ec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	e000ed08 	.word	0xe000ed08
 8005ac8:	08005941 	.word	0x08005941
 8005acc:	08023b3c 	.word	0x08023b3c
 8005ad0:	08005b91 	.word	0x08005b91
 8005ad4:	e000e400 	.word	0xe000e400
 8005ad8:	20000d78 	.word	0x20000d78
 8005adc:	20000d7c 	.word	0x20000d7c
 8005ae0:	e000ed20 	.word	0xe000ed20
 8005ae4:	e000ed1c 	.word	0xe000ed1c
 8005ae8:	2000000c 	.word	0x2000000c
 8005aec:	e000ef34 	.word	0xe000ef34

08005af0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
    __asm volatile
 8005af6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005afa:	b672      	cpsid	i
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	b662      	cpsie	i
 8005b0a:	607b      	str	r3, [r7, #4]
}
 8005b0c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b3c <vPortEnterCritical+0x4c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3301      	adds	r3, #1
 8005b14:	4a09      	ldr	r2, [pc, #36]	@ (8005b3c <vPortEnterCritical+0x4c>)
 8005b16:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005b18:	4b08      	ldr	r3, [pc, #32]	@ (8005b3c <vPortEnterCritical+0x4c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d109      	bne.n	8005b34 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b20:	4b07      	ldr	r3, [pc, #28]	@ (8005b40 <vPortEnterCritical+0x50>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d004      	beq.n	8005b34 <vPortEnterCritical+0x44>
 8005b2a:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8005b2e:	4805      	ldr	r0, [pc, #20]	@ (8005b44 <vPortEnterCritical+0x54>)
 8005b30:	f7fb fd9c 	bl	800166c <vAssertCalled>
    }
}
 8005b34:	bf00      	nop
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	2000000c 	.word	0x2000000c
 8005b40:	e000ed04 	.word	0xe000ed04
 8005b44:	08023b3c 	.word	0x08023b3c

08005b48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b88 <vPortExitCritical+0x40>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d104      	bne.n	8005b60 <vPortExitCritical+0x18>
 8005b56:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8005b5a:	480c      	ldr	r0, [pc, #48]	@ (8005b8c <vPortExitCritical+0x44>)
 8005b5c:	f7fb fd86 	bl	800166c <vAssertCalled>
    uxCriticalNesting--;
 8005b60:	4b09      	ldr	r3, [pc, #36]	@ (8005b88 <vPortExitCritical+0x40>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	4a08      	ldr	r2, [pc, #32]	@ (8005b88 <vPortExitCritical+0x40>)
 8005b68:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005b6a:	4b07      	ldr	r3, [pc, #28]	@ (8005b88 <vPortExitCritical+0x40>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d105      	bne.n	8005b7e <vPortExitCritical+0x36>
 8005b72:	2300      	movs	r3, #0
 8005b74:	607b      	str	r3, [r7, #4]
    __asm volatile
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f383 8811 	msr	BASEPRI, r3
}
 8005b7c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005b7e:	bf00      	nop
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	2000000c 	.word	0x2000000c
 8005b8c:	08023b3c 	.word	0x08023b3c

08005b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005b90:	f3ef 8009 	mrs	r0, PSP
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	4b15      	ldr	r3, [pc, #84]	@ (8005bf0 <pxCurrentTCBConst>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	f01e 0f10 	tst.w	lr, #16
 8005ba0:	bf08      	it	eq
 8005ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005baa:	6010      	str	r0, [r2, #0]
 8005bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005bb0:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8005bb4:	b672      	cpsid	i
 8005bb6:	f380 8811 	msr	BASEPRI, r0
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	b662      	cpsie	i
 8005bc4:	f7fe fb6c 	bl	80042a0 <vTaskSwitchContext>
 8005bc8:	f04f 0000 	mov.w	r0, #0
 8005bcc:	f380 8811 	msr	BASEPRI, r0
 8005bd0:	bc09      	pop	{r0, r3}
 8005bd2:	6819      	ldr	r1, [r3, #0]
 8005bd4:	6808      	ldr	r0, [r1, #0]
 8005bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bda:	f01e 0f10 	tst.w	lr, #16
 8005bde:	bf08      	it	eq
 8005be0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005be4:	f380 8809 	msr	PSP, r0
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop

08005bf0 <pxCurrentTCBConst>:
 8005bf0:	20000c44 	.word	0x20000c44
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop

08005bf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
    __asm volatile
 8005bfe:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005c02:	b672      	cpsid	i
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	b662      	cpsie	i
 8005c12:	607b      	str	r3, [r7, #4]
}
 8005c14:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005c16:	f7fe fa2f 	bl	8004078 <xTaskIncrementTick>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c20:	4b06      	ldr	r3, [pc, #24]	@ (8005c3c <xPortSysTickHandler+0x44>)
 8005c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	2300      	movs	r3, #0
 8005c2a:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	f383 8811 	msr	BASEPRI, r3
}
 8005c32:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8005c34:	bf00      	nop
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	e000ed04 	.word	0xe000ed04

08005c40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c44:	4b08      	ldr	r3, [pc, #32]	@ (8005c68 <vPortSetupTimerInterrupt+0x28>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c4a:	4b08      	ldr	r3, [pc, #32]	@ (8005c6c <vPortSetupTimerInterrupt+0x2c>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c50:	4b07      	ldr	r3, [pc, #28]	@ (8005c70 <vPortSetupTimerInterrupt+0x30>)
 8005c52:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8005c56:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c58:	4b03      	ldr	r3, [pc, #12]	@ (8005c68 <vPortSetupTimerInterrupt+0x28>)
 8005c5a:	2203      	movs	r2, #3
 8005c5c:	601a      	str	r2, [r3, #0]
}
 8005c5e:	bf00      	nop
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	e000e010 	.word	0xe000e010
 8005c6c:	e000e018 	.word	0xe000e018
 8005c70:	e000e014 	.word	0xe000e014

08005c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005c74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005c84 <vPortEnableVFP+0x10>
 8005c78:	6801      	ldr	r1, [r0, #0]
 8005c7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005c7e:	6001      	str	r1, [r0, #0]
 8005c80:	4770      	bx	lr
 8005c82:	0000      	.short	0x0000
 8005c84:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8005c88:	bf00      	nop
 8005c8a:	bf00      	nop

08005c8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005c92:	f3ef 8305 	mrs	r3, IPSR
 8005c96:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b0f      	cmp	r3, #15
 8005c9c:	d90e      	bls.n	8005cbc <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c9e:	4a10      	ldr	r2, [pc, #64]	@ (8005ce0 <vPortValidateInterruptPriority+0x54>)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8005ce4 <vPortValidateInterruptPriority+0x58>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	78fa      	ldrb	r2, [r7, #3]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d204      	bcs.n	8005cbc <vPortValidateInterruptPriority+0x30>
 8005cb2:	f44f 715c 	mov.w	r1, #880	@ 0x370
 8005cb6:	480c      	ldr	r0, [pc, #48]	@ (8005ce8 <vPortValidateInterruptPriority+0x5c>)
 8005cb8:	f7fb fcd8 	bl	800166c <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8005cec <vPortValidateInterruptPriority+0x60>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf0 <vPortValidateInterruptPriority+0x64>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d904      	bls.n	8005cd6 <vPortValidateInterruptPriority+0x4a>
 8005ccc:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8005cd0:	4805      	ldr	r0, [pc, #20]	@ (8005ce8 <vPortValidateInterruptPriority+0x5c>)
 8005cd2:	f7fb fccb 	bl	800166c <vAssertCalled>
    }
 8005cd6:	bf00      	nop
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	e000e3f0 	.word	0xe000e3f0
 8005ce4:	20000d78 	.word	0x20000d78
 8005ce8:	08023b3c 	.word	0x08023b3c
 8005cec:	e000ed0c 	.word	0xe000ed0c
 8005cf0:	20000d7c 	.word	0x20000d7c

08005cf4 <pvPortMalloc>:
#endif /* configENABLE_HEAP_PROTECTOR */

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    /* The heap must be initialised before the first call to
     * pvPortMalloc(). */
    configASSERT( pxEnd );
 8005d00:	4b60      	ldr	r3, [pc, #384]	@ (8005e84 <pvPortMalloc+0x190>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d103      	bne.n	8005d10 <pvPortMalloc+0x1c>
 8005d08:	21da      	movs	r1, #218	@ 0xda
 8005d0a:	485f      	ldr	r0, [pc, #380]	@ (8005e88 <pvPortMalloc+0x194>)
 8005d0c:	f7fb fcae 	bl	800166c <vAssertCalled>

    if( xWantedSize > 0 )
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d022      	beq.n	8005d5c <pvPortMalloc+0x68>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8005d16:	2308      	movs	r3, #8
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d81b      	bhi.n	8005d58 <pvPortMalloc+0x64>
        {
            xWantedSize += xHeapStructSize;
 8005d20:	2208      	movs	r2, #8
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4413      	add	r3, r2
 8005d26:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d014      	beq.n	8005d5c <pvPortMalloc+0x68>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	f1c3 0308 	rsb	r3, r3, #8
 8005d3c:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	43db      	mvns	r3, r3
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d804      	bhi.n	8005d52 <pvPortMalloc+0x5e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	607b      	str	r3, [r7, #4]
 8005d50:	e004      	b.n	8005d5c <pvPortMalloc+0x68>
                }
                else
                {
                    xWantedSize = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	607b      	str	r3, [r7, #4]
 8005d56:	e001      	b.n	8005d5c <pvPortMalloc+0x68>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8005d5c:	f7fe f84c 	bl	8003df8 <vTaskSuspendAll>
    {
        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	db78      	blt.n	8005e58 <pvPortMalloc+0x164>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d075      	beq.n	8005e58 <pvPortMalloc+0x164>
 8005d6c:	4b47      	ldr	r3, [pc, #284]	@ (8005e8c <pvPortMalloc+0x198>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d870      	bhi.n	8005e58 <pvPortMalloc+0x164>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005d76:	4b46      	ldr	r3, [pc, #280]	@ (8005e90 <pvPortMalloc+0x19c>)
 8005d78:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8005d7a:	4b45      	ldr	r3, [pc, #276]	@ (8005e90 <pvPortMalloc+0x19c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8005d80:	e004      	b.n	8005d8c <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d903      	bls.n	8005d9e <pvPortMalloc+0xaa>
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f1      	bne.n	8005d82 <pvPortMalloc+0x8e>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005d9e:	4b39      	ldr	r3, [pc, #228]	@ (8005e84 <pvPortMalloc+0x190>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d057      	beq.n	8005e58 <pvPortMalloc+0x164>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2208      	movs	r2, #8
 8005dae:	4413      	add	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d904      	bls.n	8005dce <pvPortMalloc+0xda>
 8005dc4:	f240 1129 	movw	r1, #297	@ 0x129
 8005dc8:	482f      	ldr	r0, [pc, #188]	@ (8005e88 <pvPortMalloc+0x194>)
 8005dca:	f7fb fc4f 	bl	800166c <vAssertCalled>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	1ad2      	subs	r2, r2, r3
 8005dd6:	2308      	movs	r3, #8
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d91d      	bls.n	8005e1a <pvPortMalloc+0x126>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005dde:	69fa      	ldr	r2, [r7, #28]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4413      	add	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d004      	beq.n	8005dfa <pvPortMalloc+0x106>
 8005df0:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8005df4:	4824      	ldr	r0, [pc, #144]	@ (8005e88 <pvPortMalloc+0x194>)
 8005df6:	f7fb fc39 	bl	800166c <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	1ad2      	subs	r2, r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8005e8c <pvPortMalloc+0x198>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	4a19      	ldr	r2, [pc, #100]	@ (8005e8c <pvPortMalloc+0x198>)
 8005e26:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e28:	4b18      	ldr	r3, [pc, #96]	@ (8005e8c <pvPortMalloc+0x198>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	4b19      	ldr	r3, [pc, #100]	@ (8005e94 <pvPortMalloc+0x1a0>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d203      	bcs.n	8005e3c <pvPortMalloc+0x148>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e34:	4b15      	ldr	r3, [pc, #84]	@ (8005e8c <pvPortMalloc+0x198>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a16      	ldr	r2, [pc, #88]	@ (8005e94 <pvPortMalloc+0x1a0>)
 8005e3a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005e4e:	4b12      	ldr	r3, [pc, #72]	@ (8005e98 <pvPortMalloc+0x1a4>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3301      	adds	r3, #1
 8005e54:	4a10      	ldr	r2, [pc, #64]	@ (8005e98 <pvPortMalloc+0x1a4>)
 8005e56:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005e58:	f7fd ffdc 	bl	8003e14 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <pvPortMalloc+0x172>
        {
            vApplicationMallocFailedHook();
 8005e62:	f7fb fc17 	bl	8001694 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d004      	beq.n	8005e7a <pvPortMalloc+0x186>
 8005e70:	f240 1173 	movw	r1, #371	@ 0x173
 8005e74:	4804      	ldr	r0, [pc, #16]	@ (8005e88 <pvPortMalloc+0x194>)
 8005e76:	f7fb fbf9 	bl	800166c <vAssertCalled>
    return pvReturn;
 8005e7a:	697b      	ldr	r3, [r7, #20]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3720      	adds	r7, #32
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	20000d88 	.word	0x20000d88
 8005e88:	08023b78 	.word	0x08023b78
 8005e8c:	20000d8c 	.word	0x20000d8c
 8005e90:	20000d80 	.word	0x20000d80
 8005e94:	20000d90 	.word	0x20000d90
 8005e98:	20000d94 	.word	0x20000d94

08005e9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d03d      	beq.n	8005f2a <vPortFree+0x8e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005eae:	2308      	movs	r3, #8
 8005eb0:	425b      	negs	r3, r3
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	db04      	blt.n	8005ece <vPortFree+0x32>
 8005ec4:	f240 1187 	movw	r1, #391	@ 0x187
 8005ec8:	481a      	ldr	r0, [pc, #104]	@ (8005f34 <vPortFree+0x98>)
 8005eca:	f7fb fbcf 	bl	800166c <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d004      	beq.n	8005ee0 <vPortFree+0x44>
 8005ed6:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8005eda:	4816      	ldr	r0, [pc, #88]	@ (8005f34 <vPortFree+0x98>)
 8005edc:	f7fb fbc6 	bl	800166c <vAssertCalled>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	0fdb      	lsrs	r3, r3, #31
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01c      	beq.n	8005f2a <vPortFree+0x8e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d118      	bne.n	8005f2a <vPortFree+0x8e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8005f04:	f7fd ff78 	bl	8003df8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f38 <vPortFree+0x9c>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4413      	add	r3, r2
 8005f12:	4a09      	ldr	r2, [pc, #36]	@ (8005f38 <vPortFree+0x9c>)
 8005f14:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f16:	68b8      	ldr	r0, [r7, #8]
 8005f18:	f000 f82a 	bl	8005f70 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005f1c:	4b07      	ldr	r3, [pc, #28]	@ (8005f3c <vPortFree+0xa0>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3301      	adds	r3, #1
 8005f22:	4a06      	ldr	r2, [pc, #24]	@ (8005f3c <vPortFree+0xa0>)
 8005f24:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005f26:	f7fd ff75 	bl	8003e14 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	08023b78 	.word	0x08023b78
 8005f38:	20000d8c 	.word	0x20000d8c
 8005f3c:	20000d98 	.word	0x20000d98

08005f40 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8005f44:	4b03      	ldr	r3, [pc, #12]	@ (8005f54 <xPortGetFreeHeapSize+0x14>)
 8005f46:	681b      	ldr	r3, [r3, #0]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	20000d8c 	.word	0x20000d8c

08005f58 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 8005f5c:	4b03      	ldr	r3, [pc, #12]	@ (8005f6c <xPortGetMinimumEverFreeHeapSize+0x14>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	20000d90 	.word	0x20000d90

08005f70 <prvInsertBlockIntoFreeList>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005f78:	4b28      	ldr	r3, [pc, #160]	@ (800601c <prvInsertBlockIntoFreeList+0xac>)
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	e002      	b.n	8005f84 <prvInsertBlockIntoFreeList+0x14>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d8f7      	bhi.n	8005f7e <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	4413      	add	r3, r2
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d108      	bne.n	8005fb2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	441a      	add	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	441a      	add	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d118      	bne.n	8005ff8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	4b15      	ldr	r3, [pc, #84]	@ (8006020 <prvInsertBlockIntoFreeList+0xb0>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d00d      	beq.n	8005fee <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	441a      	add	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	e008      	b.n	8006000 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005fee:	4b0c      	ldr	r3, [pc, #48]	@ (8006020 <prvInsertBlockIntoFreeList+0xb0>)
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	e003      	b.n	8006000 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	429a      	cmp	r2, r3
 8006006:	d002      	beq.n	800600e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	20000d80 	.word	0x20000d80
 8006020:	20000d88 	.word	0x20000d88

08006024 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) /* PRIVILEGED_FUNCTION */
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08a      	sub	sp, #40	@ 0x28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxFirstFreeBlockInRegion = NULL;
 800602c:	2300      	movs	r3, #0
 800602e:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxPreviousFreeBlock;
    portPOINTER_SIZE_TYPE xAlignedHeap;
    size_t xTotalRegionSize, xTotalHeapSize = 0;
 8006030:	2300      	movs	r3, #0
 8006032:	623b      	str	r3, [r7, #32]
    BaseType_t xDefinedRegions = 0;
 8006034:	2300      	movs	r3, #0
 8006036:	61fb      	str	r3, [r7, #28]
    portPOINTER_SIZE_TYPE xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
 8006038:	4b4b      	ldr	r3, [pc, #300]	@ (8006168 <vPortDefineHeapRegions+0x144>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d004      	beq.n	800604a <vPortDefineHeapRegions+0x26>
 8006040:	f240 2121 	movw	r1, #545	@ 0x221
 8006044:	4849      	ldr	r0, [pc, #292]	@ (800616c <vPortDefineHeapRegions+0x148>)
 8006046:	f7fb fb11 	bl	800166c <vAssertCalled>
    {
        vApplicationGetRandomHeapCanary( &( xHeapCanary ) );
    }
    #endif

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	4413      	add	r3, r2
 8006052:	617b      	str	r3, [r7, #20]

    while( pxHeapRegion->xSizeInBytes > 0 )
 8006054:	e071      	b.n	800613a <vPortDefineHeapRegions+0x116>
    {
        xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Ensure the heap region starts on a correctly aligned boundary. */
        xAddress = ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	61bb      	str	r3, [r7, #24]

        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00e      	beq.n	800608a <vPortDefineHeapRegions+0x66>
        {
            xAddress += ( portBYTE_ALIGNMENT - 1 );
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	3307      	adds	r3, #7
 8006070:	61bb      	str	r3, [r7, #24]
            xAddress &= ~( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK;
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	f023 0307 	bic.w	r3, r3, #7
 8006078:	61bb      	str	r3, [r7, #24]

            /* Adjust the size for the bytes lost to alignment. */
            xTotalRegionSize -= ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress );
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006086:	4413      	add	r3, r2
 8006088:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        xAlignedHeap = xAddress;
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	60fb      	str	r3, [r7, #12]

        /* Set xStart if it has not already been set. */
        if( xDefinedRegions == 0 )
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d106      	bne.n	80060a2 <vPortDefineHeapRegions+0x7e>
        {
            /* xStart is used to hold a pointer to the first item in the list of
             *  free blocks.  The void cast is used to prevent compiler warnings. */
            xStart.pxNextFreeBlock = ( BlockLink_t * ) heapPROTECT_BLOCK_POINTER( xAlignedHeap );
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4a36      	ldr	r2, [pc, #216]	@ (8006170 <vPortDefineHeapRegions+0x14c>)
 8006098:	6013      	str	r3, [r2, #0]
            xStart.xBlockSize = ( size_t ) 0;
 800609a:	4b35      	ldr	r3, [pc, #212]	@ (8006170 <vPortDefineHeapRegions+0x14c>)
 800609c:	2200      	movs	r2, #0
 800609e:	605a      	str	r2, [r3, #4]
 80060a0:	e013      	b.n	80060ca <vPortDefineHeapRegions+0xa6>
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != heapPROTECT_BLOCK_POINTER( NULL ) );
 80060a2:	4b31      	ldr	r3, [pc, #196]	@ (8006168 <vPortDefineHeapRegions+0x144>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d104      	bne.n	80060b4 <vPortDefineHeapRegions+0x90>
 80060aa:	f240 2149 	movw	r1, #585	@ 0x249
 80060ae:	482f      	ldr	r0, [pc, #188]	@ (800616c <vPortDefineHeapRegions+0x148>)
 80060b0:	f7fb fadc 	bl	800166c <vAssertCalled>

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( ( size_t ) xAddress > ( size_t ) pxEnd );
 80060b4:	4b2c      	ldr	r3, [pc, #176]	@ (8006168 <vPortDefineHeapRegions+0x144>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	461a      	mov	r2, r3
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	4293      	cmp	r3, r2
 80060be:	d804      	bhi.n	80060ca <vPortDefineHeapRegions+0xa6>
 80060c0:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 80060c4:	4829      	ldr	r0, [pc, #164]	@ (800616c <vPortDefineHeapRegions+0x148>)
 80060c6:	f7fb fad1 	bl	800166c <vAssertCalled>
        }
        #endif /* configENABLE_HEAP_PROTECTOR */

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
 80060ca:	4b27      	ldr	r3, [pc, #156]	@ (8006168 <vPortDefineHeapRegions+0x144>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60bb      	str	r3, [r7, #8]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + ( portPOINTER_SIZE_TYPE ) xTotalRegionSize;
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d4:	4413      	add	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]
        xAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80060d8:	2208      	movs	r2, #8
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	1a9b      	subs	r3, r3, r2
 80060de:	61bb      	str	r3, [r7, #24]
        xAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	f023 0307 	bic.w	r3, r3, #7
 80060e6:	61bb      	str	r3, [r7, #24]
        pxEnd = ( BlockLink_t * ) xAddress;
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	4a1f      	ldr	r2, [pc, #124]	@ (8006168 <vPortDefineHeapRegions+0x144>)
 80060ec:	6013      	str	r3, [r2, #0]
        pxEnd->xBlockSize = 0;
 80060ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006168 <vPortDefineHeapRegions+0x144>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2200      	movs	r2, #0
 80060f4:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80060f6:	4b1c      	ldr	r3, [pc, #112]	@ (8006168 <vPortDefineHeapRegions+0x144>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	613b      	str	r3, [r7, #16]
        pxFirstFreeBlockInRegion->xBlockSize = ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlockInRegion );
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	1ad2      	subs	r2, r2, r3
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	605a      	str	r2, [r3, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800610c:	4b16      	ldr	r3, [pc, #88]	@ (8006168 <vPortDefineHeapRegions+0x144>)
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	601a      	str	r2, [r3, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <vPortDefineHeapRegions+0xfc>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxFirstFreeBlockInRegion );
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	601a      	str	r2, [r3, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	6a3a      	ldr	r2, [r7, #32]
 8006126:	4413      	add	r3, r2
 8006128:	623b      	str	r3, [r7, #32]
            }
        }
        #endif

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	3301      	adds	r3, #1
 800612e:	61fb      	str	r3, [r7, #28]
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	4413      	add	r3, r2
 8006138:	617b      	str	r3, [r7, #20]
    while( pxHeapRegion->xSizeInBytes > 0 )
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d189      	bne.n	8006056 <vPortDefineHeapRegions+0x32>
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8006142:	4a0c      	ldr	r2, [pc, #48]	@ (8006174 <vPortDefineHeapRegions+0x150>)
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
 8006148:	4a0b      	ldr	r2, [pc, #44]	@ (8006178 <vPortDefineHeapRegions+0x154>)
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	6013      	str	r3, [r2, #0]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d104      	bne.n	800615e <vPortDefineHeapRegions+0x13a>
 8006154:	f240 2189 	movw	r1, #649	@ 0x289
 8006158:	4804      	ldr	r0, [pc, #16]	@ (800616c <vPortDefineHeapRegions+0x148>)
 800615a:	f7fb fa87 	bl	800166c <vAssertCalled>
}
 800615e:	bf00      	nop
 8006160:	3728      	adds	r7, #40	@ 0x28
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20000d88 	.word	0x20000d88
 800616c:	08023b78 	.word	0x08023b78
 8006170:	20000d80 	.word	0x20000d80
 8006174:	20000d90 	.word	0x20000d90
 8006178:	20000d8c 	.word	0x20000d8c

0800617c <eARPProcessPacket>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be processed.
 *
 * @return An enum which says whether to return the frame or to release it.
 */
    eFrameProcessingResult_t eARPProcessPacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800617c:	b580      	push	{r7, lr}
 800617e:	b090      	sub	sp, #64	@ 0x40
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ARPPacket_t * pxARPFrame = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006188:	63bb      	str	r3, [r7, #56]	@ 0x38
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800618a:	2300      	movs	r3, #0
 800618c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;
        NetworkEndPoint_t * pxTargetEndPoint = pxNetworkBuffer->pxEndPoint;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006194:	637b      	str	r3, [r7, #52]	@ 0x34
         * period. */
        static UBaseType_t uxARPClashCounter = 0U;
        /* The time at which the last ARP clash was sent. */
        static TimeOut_t xARPClashTimeOut;

        pxARPHeader = &( pxARPFrame->xARPHeader );
 8006196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006198:	330e      	adds	r3, #14
 800619a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Only Ethernet hardware type is supported.
         * Only IPv4 address can be present in the ARP packet.
         * The hardware length (the MAC address) must be 6 bytes. And,
         * The Protocol address length must be 4 bytes as it is IPv4. */
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061a6:	f040 81bb 	bne.w	8006520 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	885b      	ldrh	r3, [r3, #2]
 80061ae:	b29b      	uxth	r3, r3
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	f040 81b5 	bne.w	8006520 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 80061b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b8:	791b      	ldrb	r3, [r3, #4]
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 80061ba:	2b06      	cmp	r3, #6
 80061bc:	f040 81b0 	bne.w	8006520 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 80061c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c2:	795b      	ldrb	r3, [r3, #5]
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	f040 81ab 	bne.w	8006520 <eARPProcessPacket+0x3a4>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	330e      	adds	r3, #14
 80061ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &ulSenderProtocolAddress;
 80061d0:	f107 0320 	add.w	r3, r7, #32
 80061d4:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 80061d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061de:	601a      	str	r2, [r3, #0]
            /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
            ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 80061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxARPClashCounter != 0U )
 80061e6:	4b9c      	ldr	r3, [pc, #624]	@ (8006458 <eARPProcessPacket+0x2dc>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d009      	beq.n	8006202 <eARPProcessPacket+0x86>
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xARPClashTimeOut, &uxARPClashTimeoutPeriod ) == pdTRUE )
 80061ee:	499b      	ldr	r1, [pc, #620]	@ (800645c <eARPProcessPacket+0x2e0>)
 80061f0:	489b      	ldr	r0, [pc, #620]	@ (8006460 <eARPProcessPacket+0x2e4>)
 80061f2:	f7fe faf5 	bl	80047e0 <xTaskCheckForTimeOut>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d102      	bne.n	8006202 <eARPProcessPacket+0x86>
                {
                    /* We have waited long enough, reset the counter. */
                    uxARPClashCounter = 0;
 80061fc:	4b96      	ldr	r3, [pc, #600]	@ (8006458 <eARPProcessPacket+0x2dc>)
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]
                }
            }

            /* Check whether the lowest bit of the highest byte is 1 to check for
             * multicast address or even a broadcast address (FF:FF:FF:FF:FF:FF). */
            if( ( pxARPHeader->xSenderHardwareAddress.ucBytes[ 0 ] & 0x01U ) == 0x01U )
 8006202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006204:	7a1b      	ldrb	r3, [r3, #8]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	f040 8188 	bne.w	8006520 <eARPProcessPacket+0x3a4>
                /* Senders address is a multicast OR broadcast address which is not
                 * allowed for an ARP packet. Drop the packet. See RFC 1812 section
                 * 3.3.2. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	061a      	lsls	r2, r3, #24
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	021b      	lsls	r3, r3, #8
 8006218:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800621c:	431a      	orrs	r2, r3
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	0a1b      	lsrs	r3, r3, #8
 8006222:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006226:	431a      	orrs	r2, r3
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	0e1b      	lsrs	r3, r3, #24
 800622c:	4313      	orrs	r3, r2
 800622e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8006232:	d311      	bcc.n	8006258 <eARPProcessPacket+0xdc>
                     ( ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) < ipLAST_LOOPBACK_IPv4 ) )
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	061a      	lsls	r2, r3, #24
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	021b      	lsls	r3, r3, #8
 800623c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006240:	431a      	orrs	r2, r3
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	0a1b      	lsrs	r3, r3, #8
 8006246:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800624a:	431a      	orrs	r2, r3
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	0e1b      	lsrs	r3, r3, #24
 8006250:	4313      	orrs	r3, r2
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006252:	2b00      	cmp	r3, #0
 8006254:	f280 8164 	bge.w	8006520 <eARPProcessPacket+0x3a4>
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            /* Check whether there is a clash with another device for this IP address. */
            else if( ( pxTargetEndPoint != NULL ) && ( ulSenderProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) )
 8006258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800625a:	2b00      	cmp	r3, #0
 800625c:	d021      	beq.n	80062a2 <eARPProcessPacket+0x126>
 800625e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	429a      	cmp	r2, r3
 8006266:	d11c      	bne.n	80062a2 <eARPProcessPacket+0x126>
            {
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8006268:	4b7b      	ldr	r3, [pc, #492]	@ (8006458 <eARPProcessPacket+0x2dc>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	f040 8157 	bne.w	8006520 <eARPProcessPacket+0x3a4>
                {
                    /* Increment the counter. */
                    uxARPClashCounter++;
 8006272:	4b79      	ldr	r3, [pc, #484]	@ (8006458 <eARPProcessPacket+0x2dc>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3301      	adds	r3, #1
 8006278:	4a77      	ldr	r2, [pc, #476]	@ (8006458 <eARPProcessPacket+0x2dc>)
 800627a:	6013      	str	r3, [r2, #0]

                    /* Send out a defensive ARP request. */
                    FreeRTOS_OutputARPRequest_Multi( pxTargetEndPoint, pxTargetEndPoint->ipv4_settings.ulIPAddress );
 800627c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4619      	mov	r1, r3
 8006282:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006284:	f000 fe32 	bl	8006eec <FreeRTOS_OutputARPRequest_Multi>

                    /* Since an ARP Request for this IP was just sent, do not send a gratuitous
                     * ARP for arpGRATUITOUS_ARP_PERIOD. */
                    xLastGratuitousARPTime = xTaskGetTickCount();
 8006288:	f7fd fec8 	bl	800401c <xTaskGetTickCount>
 800628c:	4603      	mov	r3, r0
 800628e:	4a75      	ldr	r2, [pc, #468]	@ (8006464 <eARPProcessPacket+0x2e8>)
 8006290:	6013      	str	r3, [r2, #0]

                    /* Note the time at which this request was sent. */
                    vTaskSetTimeOutState( &xARPClashTimeOut );
 8006292:	4873      	ldr	r0, [pc, #460]	@ (8006460 <eARPProcessPacket+0x2e4>)
 8006294:	f7fe fa6c 	bl	8004770 <vTaskSetTimeOutState>

                    /* Reset the time-out period to the given value. */
                    uxARPClashTimeoutPeriod = pdMS_TO_TICKS( arpIP_CLASH_RESET_TIMEOUT_MS );
 8006298:	4b70      	ldr	r3, [pc, #448]	@ (800645c <eARPProcessPacket+0x2e0>)
 800629a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800629e:	601a      	str	r2, [r3, #0]
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 80062a0:	e13e      	b.n	8006520 <eARPProcessPacket+0x3a4>
            {
                traceARP_PACKET_RECEIVED();

                /* Some extra logging while still testing. */
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( pxARPHeader->usOperation == ( uint16_t ) ipARP_REPLY )
 80062a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a4:	88db      	ldrh	r3, [r3, #6]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062ac:	d14a      	bne.n	8006344 <eARPProcessPacket+0x1c8>
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REPLY from %xip to %xip end-point %xip\n",
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	061a      	lsls	r2, r3, #24
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80062ba:	431a      	orrs	r2, r3
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	0a1b      	lsrs	r3, r3, #8
 80062c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80062c4:	431a      	orrs	r2, r3
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	0e1b      	lsrs	r3, r3, #24
 80062ca:	ea42 0103 	orr.w	r1, r2, r3
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	061a      	lsls	r2, r3, #24
 80062d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d4:	021b      	lsls	r3, r3, #8
 80062d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80062da:	431a      	orrs	r2, r3
 80062dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062de:	0a1b      	lsrs	r3, r3, #8
 80062e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80062e4:	431a      	orrs	r2, r3
 80062e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e8:	0e1b      	lsrs	r3, r3, #24
 80062ea:	ea42 0003 	orr.w	r0, r2, r3
 80062ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <eARPProcessPacket+0x180>
 80062f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	061a      	lsls	r2, r3, #24
 80062fa:	e000      	b.n	80062fe <eARPProcessPacket+0x182>
 80062fc:	2200      	movs	r2, #0
 80062fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006300:	2b00      	cmp	r3, #0
 8006302:	d005      	beq.n	8006310 <eARPProcessPacket+0x194>
 8006304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	021b      	lsls	r3, r3, #8
 800630a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800630e:	e000      	b.n	8006312 <eARPProcessPacket+0x196>
 8006310:	2300      	movs	r3, #0
 8006312:	431a      	orrs	r2, r3
 8006314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <eARPProcessPacket+0x1aa>
 800631a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	0a1b      	lsrs	r3, r3, #8
 8006320:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006324:	e000      	b.n	8006328 <eARPProcessPacket+0x1ac>
 8006326:	2300      	movs	r3, #0
 8006328:	431a      	orrs	r2, r3
 800632a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <eARPProcessPacket+0x1bc>
 8006330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	0e1b      	lsrs	r3, r3, #24
 8006336:	e000      	b.n	800633a <eARPProcessPacket+0x1be>
 8006338:	2300      	movs	r3, #0
 800633a:	4313      	orrs	r3, r2
 800633c:	4602      	mov	r2, r0
 800633e:	484a      	ldr	r0, [pc, #296]	@ (8006468 <eARPProcessPacket+0x2ec>)
 8006340:	f01b faba 	bl	80218b8 <lUDPLoggingPrintf>
                                                 ( unsigned ) FreeRTOS_ntohl( ( pxTargetEndPoint != NULL ) ? pxTargetEndPoint->ipv4_settings.ulIPAddress : 0U ) ) );
                    }
                #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8006344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006346:	88db      	ldrh	r3, [r3, #6]
 8006348:	b29b      	uxth	r3, r3
 800634a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800634e:	d151      	bne.n	80063f4 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8006350:	6a3b      	ldr	r3, [r7, #32]
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8006352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006354:	429a      	cmp	r2, r3
 8006356:	d04d      	beq.n	80063f4 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8006358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800635a:	2b00      	cmp	r3, #0
 800635c:	d04a      	beq.n	80063f4 <eARPProcessPacket+0x278>
                        ( pxTargetEndPoint != NULL ) )
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REQUEST from %xip to %xip end-point %xip\n",
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	061a      	lsls	r2, r3, #24
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	021b      	lsls	r3, r3, #8
 8006366:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800636a:	431a      	orrs	r2, r3
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	0a1b      	lsrs	r3, r3, #8
 8006370:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006374:	431a      	orrs	r2, r3
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	0e1b      	lsrs	r3, r3, #24
 800637a:	ea42 0103 	orr.w	r1, r2, r3
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	061a      	lsls	r2, r3, #24
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	021b      	lsls	r3, r3, #8
 8006386:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800638a:	431a      	orrs	r2, r3
 800638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638e:	0a1b      	lsrs	r3, r3, #8
 8006390:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006394:	431a      	orrs	r2, r3
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	0e1b      	lsrs	r3, r3, #24
 800639a:	ea42 0003 	orr.w	r0, r2, r3
 800639e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d003      	beq.n	80063ac <eARPProcessPacket+0x230>
 80063a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	061a      	lsls	r2, r3, #24
 80063aa:	e000      	b.n	80063ae <eARPProcessPacket+0x232>
 80063ac:	2200      	movs	r2, #0
 80063ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d005      	beq.n	80063c0 <eARPProcessPacket+0x244>
 80063b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	021b      	lsls	r3, r3, #8
 80063ba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80063be:	e000      	b.n	80063c2 <eARPProcessPacket+0x246>
 80063c0:	2300      	movs	r3, #0
 80063c2:	431a      	orrs	r2, r3
 80063c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d005      	beq.n	80063d6 <eARPProcessPacket+0x25a>
 80063ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	0a1b      	lsrs	r3, r3, #8
 80063d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80063d4:	e000      	b.n	80063d8 <eARPProcessPacket+0x25c>
 80063d6:	2300      	movs	r3, #0
 80063d8:	431a      	orrs	r2, r3
 80063da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <eARPProcessPacket+0x26c>
 80063e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	0e1b      	lsrs	r3, r3, #24
 80063e6:	e000      	b.n	80063ea <eARPProcessPacket+0x26e>
 80063e8:	2300      	movs	r3, #0
 80063ea:	4313      	orrs	r3, r2
 80063ec:	4602      	mov	r2, r0
 80063ee:	481f      	ldr	r0, [pc, #124]	@ (800646c <eARPProcessPacket+0x2f0>)
 80063f0:	f01b fa62 	bl	80218b8 <lUDPLoggingPrintf>
                /* ulTargetProtocolAddress won't be used unless logging is enabled. */
                ( void ) ulTargetProtocolAddress;

                /* Don't do anything if the local IP address is zero because
                 * that means a DHCP request has not completed. */
                if( ( pxTargetEndPoint != NULL ) && ( pxTargetEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) )
 80063f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 8092 	beq.w	8006520 <eARPProcessPacket+0x3a4>
 80063fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063fe:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006402:	f003 0310 	and.w	r3, r3, #16
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 8089 	beq.w	8006520 <eARPProcessPacket+0x3a4>
                {
                    switch( pxARPHeader->usOperation )
 800640e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006410:	88db      	ldrh	r3, [r3, #6]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006418:	d003      	beq.n	8006422 <eARPProcessPacket+0x2a6>
 800641a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800641e:	d077      	beq.n	8006510 <eARPProcessPacket+0x394>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
                            break;

                        default:
                            /* Invalid. */
                            break;
 8006420:	e07e      	b.n	8006520 <eARPProcessPacket+0x3a4>
                            if( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress )
 8006422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006428:	429a      	cmp	r2, r3
 800642a:	d121      	bne.n	8006470 <eARPProcessPacket+0x2f4>
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 800642c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800642e:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
                                            pxARPHeader->xSenderHardwareAddress.ucBytes,
 8006432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006434:	3308      	adds	r3, #8
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8006436:	2206      	movs	r2, #6
 8006438:	4619      	mov	r1, r3
 800643a:	f01c fbee 	bl	8022c1a <memcmp>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d06c      	beq.n	800651e <eARPProcessPacket+0x3a2>
                                    vARPProcessPacketRequest( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	461a      	mov	r2, r3
 8006448:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800644a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800644c:	f000 f872 	bl	8006534 <vARPProcessPacketRequest>
                                    eReturn = eReturnEthernetFrame;
 8006450:	2302      	movs	r3, #2
 8006452:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 8006456:	e062      	b.n	800651e <eARPProcessPacket+0x3a2>
 8006458:	20000e00 	.word	0x20000e00
 800645c:	20000010 	.word	0x20000010
 8006460:	20000e04 	.word	0x20000e04
 8006464:	20000dfc 	.word	0x20000dfc
 8006468:	08023bb0 	.word	0x08023bb0
 800646c:	08023be0 	.word	0x08023be0
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006474:	429a      	cmp	r2, r3
 8006476:	d152      	bne.n	800651e <eARPProcessPacket+0x3a2>
                                     ( ( ulSenderProtocolAddress & pxTargetEndPoint->ipv4_settings.ulNetMask ) == ( pxTargetEndPoint->ipv4_settings.ulNetMask & pxTargetEndPoint->ipv4_settings.ulIPAddress ) ) )
 8006478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	405a      	eors	r2, r3
 8006480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	4013      	ands	r3, r2
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8006486:	2b00      	cmp	r3, #0
 8006488:	d149      	bne.n	800651e <eARPProcessPacket+0x3a2>
                                const MACAddress_t xGARPTargetAddress = { { 0, 0, 0, 0, 0, 0 } };
 800648a:	4a28      	ldr	r2, [pc, #160]	@ (800652c <eARPProcessPacket+0x3b0>)
 800648c:	f107 0318 	add.w	r3, r7, #24
 8006490:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006494:	6018      	str	r0, [r3, #0]
 8006496:	3304      	adds	r3, #4
 8006498:	8019      	strh	r1, [r3, #0]
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 800649a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649c:	3312      	adds	r3, #18
 800649e:	2206      	movs	r2, #6
 80064a0:	4923      	ldr	r1, [pc, #140]	@ (8006530 <eARPProcessPacket+0x3b4>)
 80064a2:	4618      	mov	r0, r3
 80064a4:	f01c fbb9 	bl	8022c1a <memcmp>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <eARPProcessPacket+0x348>
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 80064ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b0:	3312      	adds	r3, #18
 80064b2:	f107 0118 	add.w	r1, r7, #24
 80064b6:	2206      	movs	r2, #6
 80064b8:	4618      	mov	r0, r3
 80064ba:	f01c fbae 	bl	8022c1a <memcmp>
 80064be:	4603      	mov	r3, r0
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d12c      	bne.n	800651e <eARPProcessPacket+0x3a2>
                                    ( memcmp( pxTargetEndPoint->xMACAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) != 0 ) )
 80064c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c6:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 80064ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064cc:	3308      	adds	r3, #8
 80064ce:	2206      	movs	r2, #6
 80064d0:	4619      	mov	r1, r3
 80064d2:	f01c fba2 	bl	8022c1a <memcmp>
 80064d6:	4603      	mov	r3, r0
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d020      	beq.n	800651e <eARPProcessPacket+0x3a2>
                                    pxCachedEndPoint = NULL;
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]
                                    if( eARPGetCacheEntry( &( ulSenderProtocolAddress ), &( xHardwareAddress ), &( pxCachedEndPoint ) ) == eARPCacheHit )
 80064e0:	f107 020c 	add.w	r2, r7, #12
 80064e4:	f107 0110 	add.w	r1, r7, #16
 80064e8:	f107 0320 	add.w	r3, r7, #32
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 fb11 	bl	8006b14 <eARPGetCacheEntry>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d112      	bne.n	800651e <eARPProcessPacket+0x3a2>
                                        if( pxCachedEndPoint == pxTargetEndPoint )
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d10e      	bne.n	800651e <eARPProcessPacket+0x3a2>
                                            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8006500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006502:	3308      	adds	r3, #8
 8006504:	6a39      	ldr	r1, [r7, #32]
 8006506:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006508:	4618      	mov	r0, r3
 800650a:	f000 f9ef 	bl	80068ec <vARPRefreshCacheEntry>
                            break;
 800650e:	e006      	b.n	800651e <eARPProcessPacket+0x3a2>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	461a      	mov	r2, r3
 8006514:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006516:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006518:	f000 f84a 	bl	80065b0 <vARPProcessPacketReply>
                            break;
 800651c:	e000      	b.n	8006520 <eARPProcessPacket+0x3a4>
                            break;
 800651e:	bf00      	nop
        else
        {
            iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
        }

        return eReturn;
 8006520:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
    }
 8006524:	4618      	mov	r0, r3
 8006526:	3740      	adds	r7, #64	@ 0x40
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	08023c10 	.word	0x08023c10
 8006530:	08026f50 	.word	0x08026f50

08006534 <vARPProcessPacketRequest>:
 *
 */
    static void vARPProcessPacketRequest( ARPPacket_t * pxARPFrame,
                                          NetworkEndPoint_t * pxTargetEndPoint,
                                          uint32_t ulSenderProtocolAddress )
    {
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
        ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	330e      	adds	r3, #14
 8006544:	61fb      	str	r3, [r7, #28]
        iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );

        /* The request is for the address of this node.  Add the
         * entry into the ARP cache, or refresh the entry if it
         * already exists. */
        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	3308      	adds	r3, #8
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	4618      	mov	r0, r3
 8006550:	f000 f9cc 	bl	80068ec <vARPRefreshCacheEntry>

        /* Generate a reply payload in the same buffer. */
        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	2200      	movs	r2, #0
 8006558:	719a      	strb	r2, [r3, #6]
 800655a:	2200      	movs	r2, #0
 800655c:	f042 0202 	orr.w	r2, r2, #2
 8006560:	71da      	strb	r2, [r3, #7]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	3308      	adds	r3, #8
 8006566:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	3312      	adds	r3, #18
 800656c:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 800656e:	2206      	movs	r2, #6
 8006570:	69b9      	ldr	r1, [r7, #24]
 8006572:	6978      	ldr	r0, [r7, #20]
 8006574:	f01b fbbc 	bl	8021cf0 <memcpy>
        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	619a      	str	r2, [r3, #24]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxTargetEndPoint->xMACAddress.ucBytes;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	33e8      	adds	r3, #232	@ 0xe8
 8006582:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	3308      	adds	r3, #8
 8006588:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 800658a:	2206      	movs	r2, #6
 800658c:	69b9      	ldr	r1, [r7, #24]
 800658e:	6978      	ldr	r0, [r7, #20]
 8006590:	f01b fbae 	bl	8021cf0 <memcpy>
        pvCopySource = &( pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	330e      	adds	r3, #14
 800659c:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	601a      	str	r2, [r3, #0]
    }
 80065a8:	bf00      	nop
 80065aa:	3720      	adds	r7, #32
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <vARPProcessPacketReply>:
 * @param[in] ulSenderProtocolAddress The IPv4 address involved.
 */
    static void vARPProcessPacketReply( const ARPPacket_t * pxARPFrame,
                                        NetworkEndPoint_t * pxTargetEndPoint,
                                        uint32_t ulSenderProtocolAddress )
    {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08c      	sub	sp, #48	@ 0x30
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
        const ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	330e      	adds	r3, #14
 80065c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 80065c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If the packet is meant for this device or if the entry already exists. */
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d005      	beq.n	80065de <vARPProcessPacketReply+0x2e>
            ( xIsIPInARPCache( ulSenderProtocolAddress ) == pdTRUE ) )
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f844 	bl	8006660 <xIsIPInARPCache>
 80065d8:	4603      	mov	r3, r0
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d106      	bne.n	80065ec <vARPProcessPacketReply+0x3c>
        {
            iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 80065de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e0:	3308      	adds	r3, #8
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 f980 	bl	80068ec <vARPRefreshCacheEntry>
        }

        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 80065ec:	4b1b      	ldr	r3, [pc, #108]	@ (800665c <vARPProcessPacketReply+0xac>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d02e      	beq.n	8006652 <vARPProcessPacketReply+0xa2>
            ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv4_HEADER ) )
 80065f4:	4b19      	ldr	r3, [pc, #100]	@ (800665c <vARPProcessPacketReply+0xac>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f003 f8a5 	bl	8009748 <uxIPHeaderSizePacket>
 80065fe:	4603      	mov	r3, r0
        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8006600:	2b14      	cmp	r3, #20
 8006602:	d126      	bne.n	8006652 <vARPProcessPacketReply+0xa2>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_t * pxARPWaitingIPPacket = ( ( IPPacket_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 8006604:	4b15      	ldr	r3, [pc, #84]	@ (800665c <vARPProcessPacketReply+0xac>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660a:	627b      	str	r3, [r7, #36]	@ 0x24
            const IPHeader_t * pxARPWaitingIPHeader = &( pxARPWaitingIPPacket->xIPHeader );
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	330e      	adds	r3, #14
 8006610:	623b      	str	r3, [r7, #32]

            if( ulSenderProtocolAddress == pxARPWaitingIPHeader->ulSourceIPAddress )
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	429a      	cmp	r2, r3
 800661a:	d11a      	bne.n	8006652 <vARPProcessPacketReply+0xa2>
            {
                IPStackEvent_t xEventMessage;
                const TickType_t xDontBlock = ( TickType_t ) 0;
 800661c:	2300      	movs	r3, #0
 800661e:	61fb      	str	r3, [r7, #28]

                xEventMessage.eEventType = eNetworkRxEvent;
 8006620:	2301      	movs	r3, #1
 8006622:	753b      	strb	r3, [r7, #20]
                xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 8006624:	4b0d      	ldr	r3, [pc, #52]	@ (800665c <vARPProcessPacketReply+0xac>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	61bb      	str	r3, [r7, #24]

                if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800662a:	f107 0314 	add.w	r3, r7, #20
 800662e:	69f9      	ldr	r1, [r7, #28]
 8006630:	4618      	mov	r0, r3
 8006632:	f002 fcd5 	bl	8008fe0 <xSendEventStructToIPTask>
 8006636:	4603      	mov	r3, r0
 8006638:	2b01      	cmp	r3, #1
 800663a:	d004      	beq.n	8006646 <vARPProcessPacketReply+0x96>
                {
                    /* Failed to send the message, so release the network buffer. */
                    vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800663c:	4b07      	ldr	r3, [pc, #28]	@ (800665c <vARPProcessPacketReply+0xac>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4618      	mov	r0, r3
 8006642:	f010 fa91 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Clear the buffer. */
                pxARPWaitingNetworkBuffer = NULL;
 8006646:	4b05      	ldr	r3, [pc, #20]	@ (800665c <vARPProcessPacketReply+0xac>)
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]

                /* Found an ARP resolution, disable ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 800664c:	2000      	movs	r0, #0
 800664e:	f003 fabd 	bl	8009bcc <vIPSetARPResolutionTimerEnableState>

                iptrace_DELAYED_ARP_REQUEST_REPLIED();
            }
        }
    }
 8006652:	bf00      	nop
 8006654:	3730      	adds	r7, #48	@ 0x30
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	20000fd4 	.word	0x20000fd4

08006660 <xIsIPInARPCache>:
 *                    check for.
 *
 * @return When the IP-address is found: pdTRUE, else pdFALSE.
 */
BaseType_t xIsIPInARPCache( uint32_t ulAddressToLookup )
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
    BaseType_t x, xReturn = pdFALSE;
 8006668:	2300      	movs	r3, #0
 800666a:	60bb      	str	r3, [r7, #8]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800666c:	2300      	movs	r3, #0
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	e017      	b.n	80066a2 <xIsIPInARPCache+0x42>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8006672:	4a12      	ldr	r2, [pc, #72]	@ (80066bc <xIsIPInARPCache+0x5c>)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	011b      	lsls	r3, r3, #4
 8006678:	4413      	add	r3, r2
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	429a      	cmp	r2, r3
 8006680:	d10c      	bne.n	800669c <xIsIPInARPCache+0x3c>
        {
            xReturn = pdTRUE;
 8006682:	2301      	movs	r3, #1
 8006684:	60bb      	str	r3, [r7, #8]

            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8006686:	4a0d      	ldr	r2, [pc, #52]	@ (80066bc <xIsIPInARPCache+0x5c>)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	011b      	lsls	r3, r3, #4
 800668c:	4413      	add	r3, r2
 800668e:	330b      	adds	r3, #11
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d109      	bne.n	80066aa <xIsIPInARPCache+0x4a>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                xReturn = pdFALSE;
 8006696:	2300      	movs	r3, #0
 8006698:	60bb      	str	r3, [r7, #8]
            }

            break;
 800669a:	e006      	b.n	80066aa <xIsIPInARPCache+0x4a>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3301      	adds	r3, #1
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b05      	cmp	r3, #5
 80066a6:	dde4      	ble.n	8006672 <xIsIPInARPCache+0x12>
 80066a8:	e000      	b.n	80066ac <xIsIPInARPCache+0x4c>
            break;
 80066aa:	bf00      	nop
        }
    }

    return xReturn;
 80066ac:	68bb      	ldr	r3, [r7, #8]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	20000d9c 	.word	0x20000d9c

080066c0 <xCheckRequiresARPResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs ARP resolution, pdFALSE otherwise.
 */
BaseType_t xCheckRequiresARPResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 80066c0:	b590      	push	{r4, r7, lr}
 80066c2:	b0a5      	sub	sp, #148	@ 0x94
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
    BaseType_t xNeedsARPResolution = pdFALSE;
 80066c8:	2300      	movs	r3, #0
 80066ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f003 f83a 	bl	8009748 <uxIPHeaderSizePacket>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b14      	cmp	r3, #20
 80066d8:	d002      	beq.n	80066e0 <xCheckRequiresARPResolution+0x20>
 80066da:	2b28      	cmp	r3, #40	@ 0x28
 80066dc:	d029      	beq.n	8006732 <xCheckRequiresARPResolution+0x72>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* Shouldn't reach here */
            /* MISRA 16.4 Compliance */
            break;
 80066de:	e0b6      	b.n	800684e <xCheckRequiresARPResolution+0x18e>
                   const IPPacket_t * pxIPPacket = ( ( const IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e4:	673b      	str	r3, [r7, #112]	@ 0x70
                   const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 80066e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066e8:	330e      	adds	r3, #14
 80066ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
                   const IPV4Parameters_t * pxIPv4Settings = &( pxNetworkBuffer->pxEndPoint->ipv4_settings );
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f0:	66bb      	str	r3, [r7, #104]	@ 0x68
                   if( ( pxIPHeader->ulSourceIPAddress & pxIPv4Settings->ulNetMask ) == ( pxIPv4Settings->ulIPAddress & pxIPv4Settings->ulNetMask ) )
 80066f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	405a      	eors	r2, r3
 80066fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	4013      	ands	r3, r2
 8006702:	2b00      	cmp	r3, #0
 8006704:	f040 80a0 	bne.w	8006848 <xCheckRequiresARPResolution+0x188>
                       if( xIsIPInARPCache( pxIPHeader->ulSourceIPAddress ) == pdFALSE )
 8006708:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff ffa7 	bl	8006660 <xIsIPInARPCache>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	f040 8097 	bne.w	8006848 <xCheckRequiresARPResolution+0x188>
                           FreeRTOS_OutputARPRequest_Multi( pxNetworkBuffer->pxEndPoint, pxIPHeader->ulSourceIPAddress );
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800671e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	4619      	mov	r1, r3
 8006724:	4610      	mov	r0, r2
 8006726:	f000 fbe1 	bl	8006eec <FreeRTOS_OutputARPRequest_Multi>
                           xNeedsARPResolution = pdTRUE;
 800672a:	2301      	movs	r3, #1
 800672c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8006730:	e08a      	b.n	8006848 <xCheckRequiresARPResolution+0x188>
                   IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006736:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                   IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800673a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800673e:	330e      	adds	r3, #14
 8006740:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                   IPv6_Address_t * pxIPAddress = &( pxIPHeader->xSourceAddress );
 8006744:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006748:	3308      	adds	r3, #8
 800674a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                   uint8_t ucNextHeader = pxIPHeader->ucNextHeader;
 800674e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006752:	799b      	ldrb	r3, [r3, #6]
 8006754:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
                   if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 8006758:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800675c:	2b06      	cmp	r3, #6
 800675e:	d003      	beq.n	8006768 <xCheckRequiresARPResolution+0xa8>
 8006760:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006764:	2b11      	cmp	r3, #17
 8006766:	d171      	bne.n	800684c <xCheckRequiresARPResolution+0x18c>
                       IPv6_Type_t eType = xIPv6_GetIPType( ( const IPv6_Address_t * ) pxIPAddress );
 8006768:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800676c:	f006 ff68 	bl	800d640 <xIPv6_GetIPType>
 8006770:	4603      	mov	r3, r0
 8006772:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
                       FreeRTOS_debug_printf( ( "xCheckRequiresARPResolution: %pip type %s\n",
 8006776:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800677a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00d      	beq.n	800679e <xCheckRequiresARPResolution+0xde>
 8006782:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006786:	2b01      	cmp	r3, #1
 8006788:	d007      	beq.n	800679a <xCheckRequiresARPResolution+0xda>
 800678a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800678e:	2b04      	cmp	r3, #4
 8006790:	d101      	bne.n	8006796 <xCheckRequiresARPResolution+0xd6>
 8006792:	4b32      	ldr	r3, [pc, #200]	@ (800685c <xCheckRequiresARPResolution+0x19c>)
 8006794:	e004      	b.n	80067a0 <xCheckRequiresARPResolution+0xe0>
 8006796:	4b32      	ldr	r3, [pc, #200]	@ (8006860 <xCheckRequiresARPResolution+0x1a0>)
 8006798:	e002      	b.n	80067a0 <xCheckRequiresARPResolution+0xe0>
 800679a:	4b32      	ldr	r3, [pc, #200]	@ (8006864 <xCheckRequiresARPResolution+0x1a4>)
 800679c:	e000      	b.n	80067a0 <xCheckRequiresARPResolution+0xe0>
 800679e:	4b32      	ldr	r3, [pc, #200]	@ (8006868 <xCheckRequiresARPResolution+0x1a8>)
 80067a0:	461a      	mov	r2, r3
 80067a2:	4832      	ldr	r0, [pc, #200]	@ (800686c <xCheckRequiresARPResolution+0x1ac>)
 80067a4:	f01b f888 	bl	80218b8 <lUDPLoggingPrintf>
                       if( eType == eIPv6_LinkLocal )
 80067a8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d14d      	bne.n	800684c <xCheckRequiresARPResolution+0x18c>
                           ( void ) memset( &( pcName ), 0, sizeof( pcName ) );
 80067b0:	f107 030c 	add.w	r3, r7, #12
 80067b4:	2250      	movs	r2, #80	@ 0x50
 80067b6:	2100      	movs	r1, #0
 80067b8:	4618      	mov	r0, r3
 80067ba:	f01b fba6 	bl	8021f0a <memset>
                           eResult = eNDGetCacheEntry( pxIPAddress, &xMACAddress, &pxEndPoint );
 80067be:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80067c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80067c6:	4619      	mov	r1, r3
 80067c8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80067cc:	f004 fe0e 	bl	800b3ec <eNDGetCacheEntry>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
                           FreeRTOS_printf( ( "xCheckRequiresARPResolution: eResult %s with EP %s\n", ( eResult == eARPCacheMiss ) ? "Miss" : ( eResult == eARPCacheHit ) ? "Hit" : "Error", pcEndpointName( pxEndPoint, pcName, sizeof pcName ) ) );
 80067d6:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d007      	beq.n	80067ee <xCheckRequiresARPResolution+0x12e>
 80067de:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d101      	bne.n	80067ea <xCheckRequiresARPResolution+0x12a>
 80067e6:	4c22      	ldr	r4, [pc, #136]	@ (8006870 <xCheckRequiresARPResolution+0x1b0>)
 80067e8:	e002      	b.n	80067f0 <xCheckRequiresARPResolution+0x130>
 80067ea:	4c22      	ldr	r4, [pc, #136]	@ (8006874 <xCheckRequiresARPResolution+0x1b4>)
 80067ec:	e000      	b.n	80067f0 <xCheckRequiresARPResolution+0x130>
 80067ee:	4c22      	ldr	r4, [pc, #136]	@ (8006878 <xCheckRequiresARPResolution+0x1b8>)
 80067f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067f2:	f107 010c 	add.w	r1, r7, #12
 80067f6:	2250      	movs	r2, #80	@ 0x50
 80067f8:	4618      	mov	r0, r3
 80067fa:	f006 ff79 	bl	800d6f0 <pcEndpointName>
 80067fe:	4603      	mov	r3, r0
 8006800:	461a      	mov	r2, r3
 8006802:	4621      	mov	r1, r4
 8006804:	481d      	ldr	r0, [pc, #116]	@ (800687c <xCheckRequiresARPResolution+0x1bc>)
 8006806:	f01b f857 	bl	80218b8 <lUDPLoggingPrintf>
                           if( eResult == eARPCacheMiss )
 800680a:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800680e:	2b00      	cmp	r3, #0
 8006810:	d11c      	bne.n	800684c <xCheckRequiresARPResolution+0x18c>
                               uxNeededSize = sizeof( ICMPPacket_IPv6_t );
 8006812:	2356      	movs	r3, #86	@ 0x56
 8006814:	67bb      	str	r3, [r7, #120]	@ 0x78
                               pxTempBuffer = pxGetNetworkBufferWithDescriptor( BUFFER_FROM_WHERE_CALL( 199 ) uxNeededSize, 0U );
 8006816:	2100      	movs	r1, #0
 8006818:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800681a:	f010 f93d 	bl	8016a98 <pxGetNetworkBufferWithDescriptor>
 800681e:	6778      	str	r0, [r7, #116]	@ 0x74
                               if( pxTempBuffer != NULL )
 8006820:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00c      	beq.n	8006840 <xCheckRequiresARPResolution+0x180>
                                   pxTempBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800682a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800682c:	631a      	str	r2, [r3, #48]	@ 0x30
                                   pxTempBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006832:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006834:	62da      	str	r2, [r3, #44]	@ 0x2c
                                   vNDSendNeighbourSolicitation( pxTempBuffer, pxIPAddress );
 8006836:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800683a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800683c:	f005 f842 	bl	800b8c4 <vNDSendNeighbourSolicitation>
                               xNeedsARPResolution = pdTRUE;
 8006840:	2301      	movs	r3, #1
 8006842:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8006846:	e001      	b.n	800684c <xCheckRequiresARPResolution+0x18c>
                   break;
 8006848:	bf00      	nop
 800684a:	e000      	b.n	800684e <xCheckRequiresARPResolution+0x18e>
                   break;
 800684c:	bf00      	nop
    }

    return xNeedsARPResolution;
 800684e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 8006852:	4618      	mov	r0, r3
 8006854:	3794      	adds	r7, #148	@ 0x94
 8006856:	46bd      	mov	sp, r7
 8006858:	bd90      	pop	{r4, r7, pc}
 800685a:	bf00      	nop
 800685c:	08023c18 	.word	0x08023c18
 8006860:	08023c24 	.word	0x08023c24
 8006864:	08023c2c 	.word	0x08023c2c
 8006868:	08023c38 	.word	0x08023c38
 800686c:	08023c40 	.word	0x08023c40
 8006870:	08023c6c 	.word	0x08023c6c
 8006874:	08023c70 	.word	0x08023c70
 8006878:	08023c78 	.word	0x08023c78
 800687c:	08023c80 	.word	0x08023c80

08006880 <vARPRefreshCacheEntryAge>:
 * @param[in] pxMACAddress Pointer to the MAC address whose entry needs to be updated.
 * @param[in] ulIPAddress the IP address whose corresponding entry needs to be updated.
 */
void vARPRefreshCacheEntryAge( const MACAddress_t * pxMACAddress,
                               const uint32_t ulIPAddress )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
    BaseType_t x;

    if( pxMACAddress != NULL )
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d026      	beq.n	80068de <vARPRefreshCacheEntryAge+0x5e>
    {
        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	e020      	b.n	80068d8 <vARPRefreshCacheEntryAge+0x58>
        {
            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8006896:	4a14      	ldr	r2, [pc, #80]	@ (80068e8 <vARPRefreshCacheEntryAge+0x68>)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	4413      	add	r3, r2
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d115      	bne.n	80068d2 <vARPRefreshCacheEntryAge+0x52>
            {
                /* Does this cache entry have the same MAC address? */
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	011b      	lsls	r3, r3, #4
 80068aa:	4a0f      	ldr	r2, [pc, #60]	@ (80068e8 <vARPRefreshCacheEntryAge+0x68>)
 80068ac:	4413      	add	r3, r2
 80068ae:	3304      	adds	r3, #4
 80068b0:	6879      	ldr	r1, [r7, #4]
 80068b2:	2206      	movs	r2, #6
 80068b4:	4618      	mov	r0, r3
 80068b6:	f01c f9b0 	bl	8022c1a <memcmp>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d108      	bne.n	80068d2 <vARPRefreshCacheEntryAge+0x52>
                {
                    /* The IP address and the MAC matched, update this entry age. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80068c0:	4a09      	ldr	r2, [pc, #36]	@ (80068e8 <vARPRefreshCacheEntryAge+0x68>)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	4413      	add	r3, r2
 80068c8:	330a      	adds	r3, #10
 80068ca:	2296      	movs	r2, #150	@ 0x96
 80068cc:	701a      	strb	r2, [r3, #0]
                    break;
 80068ce:	bf00      	nop
                }
            }
        }
    }
}
 80068d0:	e005      	b.n	80068de <vARPRefreshCacheEntryAge+0x5e>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3301      	adds	r3, #1
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b05      	cmp	r3, #5
 80068dc:	dddb      	ble.n	8006896 <vARPRefreshCacheEntryAge+0x16>
}
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20000d9c 	.word	0x20000d9c

080068ec <vARPRefreshCacheEntry>:
 * @param[in] pxEndPoint The end-point stored in the table.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress,
                            struct xNetworkEndPoint * pxEndPoint )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
    #endif
    {
        CacheLocation_t xLocation;
        BaseType_t xReady;

        xReady = prvFindCacheEntry( pxMACAddress, ulIPAddress, pxEndPoint, &( xLocation ) );
 80068f8:	f107 0310 	add.w	r3, r7, #16
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	68b9      	ldr	r1, [r7, #8]
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 f85b 	bl	80069bc <prvFindCacheEntry>
 8006906:	61f8      	str	r0, [r7, #28]

        if( xReady == pdFALSE )
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d150      	bne.n	80069b0 <vARPRefreshCacheEntry+0xc4>
        {
            if( xLocation.xMacEntry >= 0 )
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	db0e      	blt.n	8006932 <vARPRefreshCacheEntry+0x46>
            {
                xLocation.xUseEntry = xLocation.xMacEntry;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	61bb      	str	r3, [r7, #24]

                if( xLocation.xIpEntry >= 0 )
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	db0e      	blt.n	800693c <vARPRefreshCacheEntry+0x50>
                {
                    /* Both the MAC address as well as the IP address were found in
                     * different locations: clear the entry which matches the
                     * IP-address */
                    ( void ) memset( &( xARPCache[ xLocation.xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	4a25      	ldr	r2, [pc, #148]	@ (80069b8 <vARPRefreshCacheEntry+0xcc>)
 8006924:	4413      	add	r3, r2
 8006926:	2210      	movs	r2, #16
 8006928:	2100      	movs	r1, #0
 800692a:	4618      	mov	r0, r3
 800692c:	f01b faed 	bl	8021f0a <memset>
 8006930:	e004      	b.n	800693c <vARPRefreshCacheEntry+0x50>
                }
            }
            else if( xLocation.xIpEntry >= 0 )
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	2b00      	cmp	r3, #0
 8006936:	db01      	blt.n	800693c <vARPRefreshCacheEntry+0x50>
            {
                /* An entry containing the IP-address was found, but it had a different MAC address */
                xLocation.xUseEntry = xLocation.xIpEntry;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	61bb      	str	r3, [r7, #24]
            {
                /* No matching entry found. */
            }

            /* If the entry was not found, we use the oldest entry and set the IPaddress */
            xARPCache[ xLocation.xUseEntry ].ulIPAddress = ulIPAddress;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	4a1e      	ldr	r2, [pc, #120]	@ (80069b8 <vARPRefreshCacheEntry+0xcc>)
 8006940:	011b      	lsls	r3, r3, #4
 8006942:	4413      	add	r3, r2
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	601a      	str	r2, [r3, #0]

            if( pxMACAddress != NULL )
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d01f      	beq.n	800698e <vARPRefreshCacheEntry+0xa2>
            {
                ( void ) memcpy( xARPCache[ xLocation.xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	011b      	lsls	r3, r3, #4
 8006952:	4a19      	ldr	r2, [pc, #100]	@ (80069b8 <vARPRefreshCacheEntry+0xcc>)
 8006954:	4413      	add	r3, r2
 8006956:	3304      	adds	r3, #4
 8006958:	68f9      	ldr	r1, [r7, #12]
 800695a:	2206      	movs	r2, #6
 800695c:	4618      	mov	r0, r3
 800695e:	f01b f9c7 	bl	8021cf0 <memcpy>

                iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
                /* And this entry does not need immediate attention */
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	4a14      	ldr	r2, [pc, #80]	@ (80069b8 <vARPRefreshCacheEntry+0xcc>)
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	4413      	add	r3, r2
 800696a:	330a      	adds	r3, #10
 800696c:	2296      	movs	r2, #150	@ 0x96
 800696e:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	4a11      	ldr	r2, [pc, #68]	@ (80069b8 <vARPRefreshCacheEntry+0xcc>)
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	4413      	add	r3, r2
 8006978:	330b      	adds	r3, #11
 800697a:	2201      	movs	r2, #1
 800697c:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].pxEndPoint = pxEndPoint;
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	4a0d      	ldr	r2, [pc, #52]	@ (80069b8 <vARPRefreshCacheEntry+0xcc>)
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	4413      	add	r3, r2
 8006986:	330c      	adds	r3, #12
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	601a      	str	r2, [r3, #0]
            {
                /* Nothing will be stored. */
            }
        }
    }
}
 800698c:	e010      	b.n	80069b0 <vARPRefreshCacheEntry+0xc4>
            else if( xLocation.xIpEntry < 0 )
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	da0d      	bge.n	80069b0 <vARPRefreshCacheEntry+0xc4>
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	4a08      	ldr	r2, [pc, #32]	@ (80069b8 <vARPRefreshCacheEntry+0xcc>)
 8006998:	011b      	lsls	r3, r3, #4
 800699a:	4413      	add	r3, r2
 800699c:	330a      	adds	r3, #10
 800699e:	2205      	movs	r2, #5
 80069a0:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	4a04      	ldr	r2, [pc, #16]	@ (80069b8 <vARPRefreshCacheEntry+0xcc>)
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	4413      	add	r3, r2
 80069aa:	330b      	adds	r3, #11
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]
}
 80069b0:	bf00      	nop
 80069b2:	3720      	adds	r7, #32
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	20000d9c 	.word	0x20000d9c

080069bc <prvFindCacheEntry>:
 */
static BaseType_t prvFindCacheEntry( const MACAddress_t * pxMACAddress,
                                     const uint32_t ulIPAddress,
                                     struct xNetworkEndPoint * pxEndPoint,
                                     CacheLocation_t * pxLocation )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08a      	sub	sp, #40	@ 0x28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]
    BaseType_t x = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t ucMinAgeFound = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    BaseType_t xReturn = pdFALSE;
 80069d4:	2300      	movs	r3, #0
 80069d6:	61fb      	str	r3, [r7, #28]

    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
        BaseType_t xAddressIsLocal = ( FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 2 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 80069d8:	2102      	movs	r1, #2
 80069da:	68b8      	ldr	r0, [r7, #8]
 80069dc:	f006 fb24 	bl	800d028 <FreeRTOS_FindEndPointOnNetMask>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	bf14      	ite	ne
 80069e6:	2301      	movne	r3, #1
 80069e8:	2300      	moveq	r3, #0
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	617b      	str	r3, [r7, #20]
    #endif

    /* Start with the maximum possible number. */
    ucMinAgeFound--;
 80069ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80069f2:	3b01      	subs	r3, #1
 80069f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    pxLocation->xIpEntry = -1;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	f04f 32ff 	mov.w	r2, #4294967295
 80069fe:	601a      	str	r2, [r3, #0]
    pxLocation->xMacEntry = -1;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	f04f 32ff 	mov.w	r2, #4294967295
 8006a06:	605a      	str	r2, [r3, #4]
    pxLocation->xUseEntry = 0;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	609a      	str	r2, [r3, #8]

    /* For each entry in the ARP cache table. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006a0e:	2300      	movs	r3, #0
 8006a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a12:	e074      	b.n	8006afe <prvFindCacheEntry+0x142>
    {
        BaseType_t xMatchingMAC = pdFALSE;
 8006a14:	2300      	movs	r3, #0
 8006a16:	61bb      	str	r3, [r7, #24]

        if( pxMACAddress != NULL )
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00e      	beq.n	8006a3c <prvFindCacheEntry+0x80>
        {
            if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	4a3b      	ldr	r2, [pc, #236]	@ (8006b10 <prvFindCacheEntry+0x154>)
 8006a24:	4413      	add	r3, r2
 8006a26:	3304      	adds	r3, #4
 8006a28:	68f9      	ldr	r1, [r7, #12]
 8006a2a:	2206      	movs	r2, #6
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f01c f8f4 	bl	8022c1a <memcmp>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <prvFindCacheEntry+0x80>
            {
                xMatchingMAC = pdTRUE;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	61bb      	str	r3, [r7, #24]
            }
        }

        /* Does this line in the cache table hold an entry for the IP
         * address being queried? */
        if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8006a3c:	4a34      	ldr	r2, [pc, #208]	@ (8006b10 <prvFindCacheEntry+0x154>)
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a40:	011b      	lsls	r3, r3, #4
 8006a42:	4413      	add	r3, r2
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d125      	bne.n	8006a98 <prvFindCacheEntry+0xdc>
        {
            if( pxMACAddress == NULL )
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <prvFindCacheEntry+0x9e>
            {
                /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                 * indicate that there is an outstanding ARP request, This entry will have
                 * "ucValid == pdFALSE". */
                pxLocation->xIpEntry = x;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a56:	601a      	str	r2, [r3, #0]
                break;
 8006a58:	e054      	b.n	8006b04 <prvFindCacheEntry+0x148>
            }

            /* See if the MAC-address also matches. */
            if( xMatchingMAC != pdFALSE )
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d017      	beq.n	8006a90 <prvFindCacheEntry+0xd4>
            {
                /* This function will be called for each received packet
                 * This is by far the most common path. */
                xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8006a60:	4a2b      	ldr	r2, [pc, #172]	@ (8006b10 <prvFindCacheEntry+0x154>)
 8006a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a64:	011b      	lsls	r3, r3, #4
 8006a66:	4413      	add	r3, r2
 8006a68:	330a      	adds	r3, #10
 8006a6a:	2296      	movs	r2, #150	@ 0x96
 8006a6c:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 8006a6e:	4a28      	ldr	r2, [pc, #160]	@ (8006b10 <prvFindCacheEntry+0x154>)
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	4413      	add	r3, r2
 8006a76:	330b      	adds	r3, #11
 8006a78:	2201      	movs	r2, #1
 8006a7a:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].pxEndPoint = pxEndPoint;
 8006a7c:	4a24      	ldr	r2, [pc, #144]	@ (8006b10 <prvFindCacheEntry+0x154>)
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	4413      	add	r3, r2
 8006a84:	330c      	adds	r3, #12
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	601a      	str	r2, [r3, #0]
                /* Indicate to the caller that the entry is updated. */
                xReturn = pdTRUE;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	61fb      	str	r3, [r7, #28]
                break;
 8006a8e:	e039      	b.n	8006b04 <prvFindCacheEntry+0x148>
            /* Found an entry containing ulIPAddress, but the MAC address
             * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
             * for an ARP reply.  Still want to see if there is match with the
             * given MAC address.ucBytes.  If found, either of the two entries
             * must be cleared. */
            pxLocation->xIpEntry = x;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	e02f      	b.n	8006af8 <prvFindCacheEntry+0x13c>
        }
        else if( xMatchingMAC != pdFALSE )
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d017      	beq.n	8006ace <prvFindCacheEntry+0x112>
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
            {
                /* If ARP stores the MAC address of IP addresses outside the
                 * network, than the MAC address of the gateway should not be
                 * overwritten. */
                BaseType_t xOtherIsLocal = ( FreeRTOS_FindEndPointOnNetMask( xARPCache[ x ].ulIPAddress, 3 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8006a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8006b10 <prvFindCacheEntry+0x154>)
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa2:	011b      	lsls	r3, r3, #4
 8006aa4:	4413      	add	r3, r2
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2103      	movs	r1, #3
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f006 fabc 	bl	800d028 <FreeRTOS_FindEndPointOnNetMask>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	bf14      	ite	ne
 8006ab6:	2301      	movne	r3, #1
 8006ab8:	2300      	moveq	r3, #0
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	613b      	str	r3, [r7, #16]

                if( xAddressIsLocal == xOtherIsLocal )
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d118      	bne.n	8006af8 <prvFindCacheEntry+0x13c>
                {
                    pxLocation->xMacEntry = x;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aca:	605a      	str	r2, [r3, #4]
 8006acc:	e014      	b.n	8006af8 <prvFindCacheEntry+0x13c>
            #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
        }

        /* _HT_
         * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
        else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8006ace:	4a10      	ldr	r2, [pc, #64]	@ (8006b10 <prvFindCacheEntry+0x154>)
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad2:	011b      	lsls	r3, r3, #4
 8006ad4:	4413      	add	r3, r2
 8006ad6:	330a      	adds	r3, #10
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d90a      	bls.n	8006af8 <prvFindCacheEntry+0x13c>
        {
            /* As the table is traversed, remember the table row that
             * contains the oldest entry (the lowest age count, as ages are
             * decremented to zero) so the row can be re-used if this function
             * needs to add an entry that does not already exist. */
            ucMinAgeFound = xARPCache[ x ].ucAge;
 8006ae2:	4a0b      	ldr	r2, [pc, #44]	@ (8006b10 <prvFindCacheEntry+0x154>)
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	4413      	add	r3, r2
 8006aea:	330a      	adds	r3, #10
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            pxLocation->xUseEntry = x;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af6:	609a      	str	r2, [r3, #8]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afa:	3301      	adds	r3, #1
 8006afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b00:	2b05      	cmp	r3, #5
 8006b02:	dd87      	ble.n	8006a14 <prvFindCacheEntry+0x58>
        {
            /* Nothing happens to this cache entry for now. */
        }
    } /* for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ ) */

    return xReturn;
 8006b04:	69fb      	ldr	r3, [r7, #28]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3728      	adds	r7, #40	@ 0x28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000d9c 	.word	0x20000d9c

08006b14 <eARPGetCacheEntry>:
 *         eCantSendPacket.
 */
    eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                          MACAddress_t * const pxMACAddress,
                                          struct xNetworkEndPoint ** ppxEndPoint )
    {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b088      	sub	sp, #32
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        uint32_t ulAddressToLookup;
        NetworkEndPoint_t * pxEndPoint = NULL;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61bb      	str	r3, [r7, #24]

        configASSERT( pxMACAddress != NULL );
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d104      	bne.n	8006b34 <eARPGetCacheEntry+0x20>
 8006b2a:	f240 31c9 	movw	r1, #969	@ 0x3c9
 8006b2e:	483c      	ldr	r0, [pc, #240]	@ (8006c20 <eARPGetCacheEntry+0x10c>)
 8006b30:	f7fa fd9c 	bl	800166c <vAssertCalled>
        configASSERT( pulIPAddress != NULL );
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d104      	bne.n	8006b44 <eARPGetCacheEntry+0x30>
 8006b3a:	f240 31ca 	movw	r1, #970	@ 0x3ca
 8006b3e:	4838      	ldr	r0, [pc, #224]	@ (8006c20 <eARPGetCacheEntry+0x10c>)
 8006b40:	f7fa fd94 	bl	800166c <vAssertCalled>
        configASSERT( ppxEndPoint != NULL );
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d104      	bne.n	8006b54 <eARPGetCacheEntry+0x40>
 8006b4a:	f240 31cb 	movw	r1, #971	@ 0x3cb
 8006b4e:	4834      	ldr	r0, [pc, #208]	@ (8006c20 <eARPGetCacheEntry+0x10c>)
 8006b50:	f7fa fd8c 	bl	800166c <vAssertCalled>

        *( ppxEndPoint ) = NULL;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]
        ulAddressToLookup = *pulIPAddress;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	617b      	str	r3, [r7, #20]
        pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulAddressToLookup, 0 );
 8006b60:	2100      	movs	r1, #0
 8006b62:	6978      	ldr	r0, [r7, #20]
 8006b64:	f006 f9d4 	bl	800cf10 <FreeRTOS_FindEndPointOnIP_IPv4>
 8006b68:	61b8      	str	r0, [r7, #24]

        if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 8006b6a:	6978      	ldr	r0, [r7, #20]
 8006b6c:	f003 fc3c 	bl	800a3e8 <xIsIPv4Multicast>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d021      	beq.n	8006bba <eARPGetCacheEntry+0xa6>
        {
            /* Get the lowest 23 bits of the IP-address. */
            vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8006b76:	68b9      	ldr	r1, [r7, #8]
 8006b78:	6978      	ldr	r0, [r7, #20]
 8006b7a:	f003 fd63 	bl	800a644 <vSetMultiCastIPv4MacAddress>

            eReturn = eCantSendPacket;
 8006b7e:	2302      	movs	r3, #2
 8006b80:	77fb      	strb	r3, [r7, #31]
            pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8006b82:	2000      	movs	r0, #0
 8006b84:	f006 f978 	bl	800ce78 <FreeRTOS_FirstEndPoint>
 8006b88:	61b8      	str	r0, [r7, #24]

            for( ;
 8006b8a:	e012      	b.n	8006bb2 <eARPGetCacheEntry+0x9e>
                 pxEndPoint != NULL;
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
            {
                if( pxEndPoint->bits.bIPv6 == 0U ) /*NULL End Point is checked in the for loop, no need for an extra check */
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d105      	bne.n	8006ba8 <eARPGetCacheEntry+0x94>
                {
                    /* For multi-cast, use the first IPv4 end-point. */
                    *( ppxEndPoint ) = pxEndPoint;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	77fb      	strb	r3, [r7, #31]
                    break;
 8006ba6:	e035      	b.n	8006c14 <eARPGetCacheEntry+0x100>
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8006ba8:	69b9      	ldr	r1, [r7, #24]
 8006baa:	2000      	movs	r0, #0
 8006bac:	f006 f986 	bl	800cebc <FreeRTOS_NextEndPoint>
 8006bb0:	61b8      	str	r0, [r7, #24]
                 pxEndPoint != NULL;
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e9      	bne.n	8006b8c <eARPGetCacheEntry+0x78>
 8006bb8:	e02c      	b.n	8006c14 <eARPGetCacheEntry+0x100>
                }
            }
        }
        else if( ( FreeRTOS_htonl( ulAddressToLookup ) & 0xffU ) == 0xffU ) /* Is this a broadcast address like x.x.x.255 ? */
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	061a      	lsls	r2, r3, #24
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	021b      	lsls	r3, r3, #8
 8006bc2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	0a1b      	lsrs	r3, r3, #8
 8006bcc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	0e1b      	lsrs	r3, r3, #24
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2bff      	cmp	r3, #255	@ 0xff
 8006bdc:	d113      	bne.n	8006c06 <eARPGetCacheEntry+0xf2>
        {
            /* This is a broadcast so it uses the broadcast MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	4a10      	ldr	r2, [pc, #64]	@ (8006c24 <eARPGetCacheEntry+0x110>)
 8006be2:	6811      	ldr	r1, [r2, #0]
 8006be4:	6019      	str	r1, [r3, #0]
 8006be6:	8892      	ldrh	r2, [r2, #4]
 8006be8:	809a      	strh	r2, [r3, #4]
            pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 8006bea:	2104      	movs	r1, #4
 8006bec:	6978      	ldr	r0, [r7, #20]
 8006bee:	f006 fa1b 	bl	800d028 <FreeRTOS_FindEndPointOnNetMask>
 8006bf2:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <eARPGetCacheEntry+0xec>
            {
                *( ppxEndPoint ) = pxEndPoint;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 8006c00:	2301      	movs	r3, #1
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	e006      	b.n	8006c14 <eARPGetCacheEntry+0x100>
        }
        else
        {
            eReturn = eARPGetCacheEntryGateWay( pulIPAddress, pxMACAddress, ppxEndPoint );
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 f80c 	bl	8006c28 <eARPGetCacheEntryGateWay>
 8006c10:	4603      	mov	r3, r0
 8006c12:	77fb      	strb	r3, [r7, #31]
        }

        return eReturn;
 8006c14:	7ffb      	ldrb	r3, [r7, #31]
    }
 8006c16:	4618      	mov	r0, r3
 8006c18:	3720      	adds	r7, #32
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	08023cb4 	.word	0x08023cb4
 8006c24:	08026f50 	.word	0x08026f50

08006c28 <eARPGetCacheEntryGateWay>:
 * @param[out] ppxEndPoint The end-point of the gateway will be copy to the pointee.
 */
    static eARPLookupResult_t eARPGetCacheEntryGateWay( uint32_t * pulIPAddress,
                                                        MACAddress_t * const pxMACAddress,
                                                        struct xNetworkEndPoint ** ppxEndPoint )
    {
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8006c34:	2300      	movs	r3, #0
 8006c36:	77fb      	strb	r3, [r7, #31]
        uint32_t ulAddressToLookup = *( pulIPAddress );
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	61bb      	str	r3, [r7, #24]
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulOriginal = *pulIPAddress;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	617b      	str	r3, [r7, #20]

        /* It is assumed that devices with the same netmask are on the same
         * LAN and don't need a gateway. */
        pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 8006c44:	2104      	movs	r1, #4
 8006c46:	69b8      	ldr	r0, [r7, #24]
 8006c48:	f006 f9ee 	bl	800d028 <FreeRTOS_FindEndPointOnNetMask>
 8006c4c:	6138      	str	r0, [r7, #16]

        if( pxEndPoint == NULL )
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d11b      	bne.n	8006c8c <eARPGetCacheEntryGateWay+0x64>
        {
            /* No matching end-point is found, look for a gateway. */
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	69b8      	ldr	r0, [r7, #24]
 8006c5a:	f000 f86b 	bl	8006d34 <prvCacheLookup>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	77fb      	strb	r3, [r7, #31]

                if( eReturn == eARPCacheHit )
 8006c62:	7ffb      	ldrb	r3, [r7, #31]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d017      	beq.n	8006c98 <eARPGetCacheEntryGateWay+0x70>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                *( ppxEndPoint ) = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv4 );
 8006c68:	2040      	movs	r0, #64	@ 0x40
 8006c6a:	f006 fca9 	bl	800d5c0 <FreeRTOS_FindGateWay>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	601a      	str	r2, [r3, #0]

                if( *( ppxEndPoint ) != NULL )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <eARPGetCacheEntryGateWay+0x5e>
                {
                    /* 'ipv4_settings' can be accessed safely, because 'ipTYPE_IPv4' was provided. */
                    ulAddressToLookup = ( *ppxEndPoint )->ipv4_settings.ulGatewayAddress;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	61bb      	str	r3, [r7, #24]
 8006c84:	e008      	b.n	8006c98 <eARPGetCacheEntryGateWay+0x70>
                }
                else
                {
                    ulAddressToLookup = 0U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	61bb      	str	r3, [r7, #24]
 8006c8a:	e005      	b.n	8006c98 <eARPGetCacheEntryGateWay+0x70>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	61bb      	str	r3, [r7, #24]
            *ppxEndPoint = pxEndPoint;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	601a      	str	r2, [r3, #0]
        }

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
            if( eReturn == eARPCacheMiss )
 8006c98:	7ffb      	ldrb	r3, [r7, #31]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d13f      	bne.n	8006d1e <eARPGetCacheEntryGateWay+0xf6>
        #endif
        {
            if( ulAddressToLookup == 0U )
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d102      	bne.n	8006caa <eARPGetCacheEntryGateWay+0x82>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	77fb      	strb	r3, [r7, #31]
 8006ca8:	e039      	b.n	8006d1e <eARPGetCacheEntryGateWay+0xf6>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	68b9      	ldr	r1, [r7, #8]
 8006cae:	69b8      	ldr	r0, [r7, #24]
 8006cb0:	f000 f840 	bl	8006d34 <prvCacheLookup>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	77fb      	strb	r3, [r7, #31]

                if( ( eReturn != eARPCacheHit ) || ( ulOriginal != ulAddressToLookup ) )
 8006cb8:	7ffb      	ldrb	r3, [r7, #31]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d103      	bne.n	8006cc6 <eARPGetCacheEntryGateWay+0x9e>
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d028      	beq.n	8006d18 <eARPGetCacheEntryGateWay+0xf0>
                {
                    FreeRTOS_debug_printf( ( "ARP %xip %s using %xip\n",
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	061a      	lsls	r2, r3, #24
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	021b      	lsls	r3, r3, #8
 8006cce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	0a1b      	lsrs	r3, r3, #8
 8006cd8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	0e1b      	lsrs	r3, r3, #24
 8006ce2:	ea42 0103 	orr.w	r1, r2, r3
 8006ce6:	7ffb      	ldrb	r3, [r7, #31]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d101      	bne.n	8006cf0 <eARPGetCacheEntryGateWay+0xc8>
 8006cec:	480e      	ldr	r0, [pc, #56]	@ (8006d28 <eARPGetCacheEntryGateWay+0x100>)
 8006cee:	e000      	b.n	8006cf2 <eARPGetCacheEntryGateWay+0xca>
 8006cf0:	480e      	ldr	r0, [pc, #56]	@ (8006d2c <eARPGetCacheEntryGateWay+0x104>)
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	061a      	lsls	r2, r3, #24
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	021b      	lsls	r3, r3, #8
 8006cfa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	0a1b      	lsrs	r3, r3, #8
 8006d04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006d08:	431a      	orrs	r2, r3
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	0e1b      	lsrs	r3, r3, #24
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	4602      	mov	r2, r0
 8006d12:	4807      	ldr	r0, [pc, #28]	@ (8006d30 <eARPGetCacheEntryGateWay+0x108>)
 8006d14:	f01a fdd0 	bl	80218b8 <lUDPLoggingPrintf>
                                             ( eReturn == eARPCacheHit ) ? "hit" : "miss",
                                             ( unsigned ) FreeRTOS_ntohl( ulAddressToLookup ) ) );
                }

                /* It might be that the ARP has to go to the gateway. */
                *pulIPAddress = ulAddressToLookup;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 8006d1e:	7ffb      	ldrb	r3, [r7, #31]
    }
 8006d20:	4618      	mov	r0, r3
 8006d22:	3720      	adds	r7, #32
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	08023ce0 	.word	0x08023ce0
 8006d2c:	08023ce4 	.word	0x08023ce4
 8006d30:	08023cec 	.word	0x08023cec

08006d34 <prvCacheLookup>:
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
    static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                              MACAddress_t * const pxMACAddress,
                                              NetworkEndPoint_t ** ppxEndPoint )
    {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8006d40:	2300      	movs	r3, #0
 8006d42:	74fb      	strb	r3, [r7, #19]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006d44:	2300      	movs	r3, #0
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	e02a      	b.n	8006da0 <prvCacheLookup+0x6c>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8006d4a:	4a19      	ldr	r2, [pc, #100]	@ (8006db0 <prvCacheLookup+0x7c>)
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	4413      	add	r3, r2
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d11f      	bne.n	8006d9a <prvCacheLookup+0x66>
            {
                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8006d5a:	4a15      	ldr	r2, [pc, #84]	@ (8006db0 <prvCacheLookup+0x7c>)
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	011b      	lsls	r3, r3, #4
 8006d60:	4413      	add	r3, r2
 8006d62:	330b      	adds	r3, #11
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d102      	bne.n	8006d70 <prvCacheLookup+0x3c>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    eReturn = eCantSendPacket;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	74fb      	strb	r3, [r7, #19]
                    /* ppxEndPoint != NULL was tested in the only caller eARPGetCacheEntry(). */
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
                    eReturn = eARPCacheHit;
                }

                break;
 8006d6e:	e01a      	b.n	8006da6 <prvCacheLookup+0x72>
                    ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8006d70:	68b8      	ldr	r0, [r7, #8]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	011b      	lsls	r3, r3, #4
 8006d76:	4a0e      	ldr	r2, [pc, #56]	@ (8006db0 <prvCacheLookup+0x7c>)
 8006d78:	4413      	add	r3, r2
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	2206      	movs	r2, #6
 8006d7e:	4619      	mov	r1, r3
 8006d80:	f01a ffb6 	bl	8021cf0 <memcpy>
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
 8006d84:	4a0a      	ldr	r2, [pc, #40]	@ (8006db0 <prvCacheLookup+0x7c>)
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	011b      	lsls	r3, r3, #4
 8006d8a:	4413      	add	r3, r2
 8006d8c:	330c      	adds	r3, #12
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8006d94:	2301      	movs	r3, #1
 8006d96:	74fb      	strb	r3, [r7, #19]
                break;
 8006d98:	e005      	b.n	8006da6 <prvCacheLookup+0x72>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2b05      	cmp	r3, #5
 8006da4:	ddd1      	ble.n	8006d4a <prvCacheLookup+0x16>
            }
        }

        return eReturn;
 8006da6:	7cfb      	ldrb	r3, [r7, #19]
    }
 8006da8:	4618      	mov	r0, r3
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20000d9c 	.word	0x20000d9c

08006db4 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
    void vARPAgeCache( void )
    {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
        BaseType_t x;
        TickType_t xTimeNow;

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	e048      	b.n	8006e52 <vARPAgeCache+0x9e>
        {
            /* If the entry is valid (its age is greater than zero). */
            if( xARPCache[ x ].ucAge > 0U )
 8006dc0:	4a47      	ldr	r2, [pc, #284]	@ (8006ee0 <vARPAgeCache+0x12c>)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	011b      	lsls	r3, r3, #4
 8006dc6:	4413      	add	r3, r2
 8006dc8:	330a      	adds	r3, #10
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d03d      	beq.n	8006e4c <vARPAgeCache+0x98>
            {
                /* Decrement the age value of the entry in this ARP cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xARPCache[ x ].ucAge )--;
 8006dd0:	4a43      	ldr	r2, [pc, #268]	@ (8006ee0 <vARPAgeCache+0x12c>)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	011b      	lsls	r3, r3, #4
 8006dd6:	4413      	add	r3, r2
 8006dd8:	330a      	adds	r3, #10
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b2d9      	uxtb	r1, r3
 8006de0:	4a3f      	ldr	r2, [pc, #252]	@ (8006ee0 <vARPAgeCache+0x12c>)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	011b      	lsls	r3, r3, #4
 8006de6:	4413      	add	r3, r2
 8006de8:	330a      	adds	r3, #10
 8006dea:	460a      	mov	r2, r1
 8006dec:	701a      	strb	r2, [r3, #0]

                /* If the entry is not yet valid, then it is waiting an ARP
                 * reply, and the ARP request should be retransmitted. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8006dee:	4a3c      	ldr	r2, [pc, #240]	@ (8006ee0 <vARPAgeCache+0x12c>)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	4413      	add	r3, r2
 8006df6:	330b      	adds	r3, #11
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d108      	bne.n	8006e10 <vARPAgeCache+0x5c>
                {
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8006dfe:	4a38      	ldr	r2, [pc, #224]	@ (8006ee0 <vARPAgeCache+0x12c>)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	011b      	lsls	r3, r3, #4
 8006e04:	4413      	add	r3, r2
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 f8d7 	bl	8006fbc <FreeRTOS_OutputARPRequest>
 8006e0e:	e00f      	b.n	8006e30 <vARPAgeCache+0x7c>
                }
                else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8006e10:	4a33      	ldr	r2, [pc, #204]	@ (8006ee0 <vARPAgeCache+0x12c>)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	4413      	add	r3, r2
 8006e18:	330a      	adds	r3, #10
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d807      	bhi.n	8006e30 <vARPAgeCache+0x7c>
                {
                    /* This entry will get removed soon.  See if the MAC address is
                     * still valid to prevent this happening. */
                    iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8006e20:	4a2f      	ldr	r2, [pc, #188]	@ (8006ee0 <vARPAgeCache+0x12c>)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	4413      	add	r3, r2
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 f8c6 	bl	8006fbc <FreeRTOS_OutputARPRequest>
                else
                {
                    /* The age has just ticked down, with nothing to do. */
                }

                if( xARPCache[ x ].ucAge == 0U )
 8006e30:	4a2b      	ldr	r2, [pc, #172]	@ (8006ee0 <vARPAgeCache+0x12c>)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	011b      	lsls	r3, r3, #4
 8006e36:	4413      	add	r3, r2
 8006e38:	330a      	adds	r3, #10
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d105      	bne.n	8006e4c <vARPAgeCache+0x98>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                    xARPCache[ x ].ulIPAddress = 0U;
 8006e40:	4a27      	ldr	r2, [pc, #156]	@ (8006ee0 <vARPAgeCache+0x12c>)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	011b      	lsls	r3, r3, #4
 8006e46:	4413      	add	r3, r2
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2b05      	cmp	r3, #5
 8006e56:	ddb3      	ble.n	8006dc0 <vARPAgeCache+0xc>
                }
            }
        }

        xTimeNow = xTaskGetTickCount();
 8006e58:	f7fd f8e0 	bl	800401c <xTaskGetTickCount>
 8006e5c:	6078      	str	r0, [r7, #4]

        if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8006e5e:	4b21      	ldr	r3, [pc, #132]	@ (8006ee4 <vARPAgeCache+0x130>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d007      	beq.n	8006e76 <vARPAgeCache+0xc2>
 8006e66:	4b1f      	ldr	r3, [pc, #124]	@ (8006ee4 <vARPAgeCache+0x130>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d92f      	bls.n	8006ed6 <vARPAgeCache+0x122>
        {
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8006e76:	4b1c      	ldr	r3, [pc, #112]	@ (8006ee8 <vARPAgeCache+0x134>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	60bb      	str	r3, [r7, #8]

            while( pxEndPoint != NULL )
 8006e7c:	e025      	b.n	8006eca <vARPAgeCache+0x116>
            {
                if( ( pxEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) && ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006e84:	f003 0310 	and.w	r3, r3, #16
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d019      	beq.n	8006ec2 <vARPAgeCache+0x10e>
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d015      	beq.n	8006ec2 <vARPAgeCache+0x10e>
                {
                    /* Case default is never toggled because IPv6 flag can be TRUE or FALSE */
                    switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006e9c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <vARPAgeCache+0xf8>
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d007      	beq.n	8006eba <vARPAgeCache+0x106>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default: /* LCOV_EXCL_LINE */
                            /* Shouldn't reach here */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 8006eaa:	e00a      	b.n	8006ec2 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputARPRequest_Multi( pxEndPoint, pxEndPoint->ipv4_settings.ulIPAddress );
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	68b8      	ldr	r0, [r7, #8]
 8006eb4:	f000 f81a 	bl	8006eec <FreeRTOS_OutputARPRequest_Multi>
                                break;
 8006eb8:	e003      	b.n	8006ec2 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputAdvertiseIPv6( pxEndPoint );
 8006eba:	68b8      	ldr	r0, [r7, #8]
 8006ebc:	f005 f822 	bl	800bf04 <FreeRTOS_OutputAdvertiseIPv6>
                                break;
 8006ec0:	bf00      	nop
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006ec8:	60bb      	str	r3, [r7, #8]
            while( pxEndPoint != NULL )
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1d6      	bne.n	8006e7e <vARPAgeCache+0xca>
            }

            xLastGratuitousARPTime = xTimeNow;
 8006ed0:	4a04      	ldr	r2, [pc, #16]	@ (8006ee4 <vARPAgeCache+0x130>)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6013      	str	r3, [r2, #0]
        }
    }
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20000d9c 	.word	0x20000d9c
 8006ee4:	20000dfc 	.word	0x20000dfc
 8006ee8:	20001360 	.word	0x20001360

08006eec <FreeRTOS_OutputARPRequest_Multi>:
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest_Multi( NetworkEndPoint_t * pxEndPoint,
                                          uint32_t ulIPAddress )
    {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d156      	bne.n	8006fb4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d052      	beq.n	8006fb4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
        {
            /* This is called from the context of the IP event task, so a block time
             * must not be used. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 8006f0e:	2100      	movs	r1, #0
 8006f10:	202a      	movs	r0, #42	@ 0x2a
 8006f12:	f00f fdc1 	bl	8016a98 <pxGetNetworkBufferWithDescriptor>
 8006f16:	6138      	str	r0, [r7, #16]

            if( pxNetworkBuffer != NULL )
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d04a      	beq.n	8006fb4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	615a      	str	r2, [r3, #20]
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	631a      	str	r2, [r3, #48]	@ 0x30
                pxNetworkBuffer->pxInterface = pxEndPoint->pxNetworkInterface;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	62da      	str	r2, [r3, #44]	@ 0x2c
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8006f34:	6938      	ldr	r0, [r7, #16]
 8006f36:	f000 f855 	bl	8006fe4 <vARPGenerateRequestPacket>

                #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f3e:	2b3b      	cmp	r3, #59	@ 0x3b
 8006f40:	d812      	bhi.n	8006f68 <FreeRTOS_OutputARPRequest_Multi+0x7c>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	e008      	b.n	8006f5c <FreeRTOS_OutputARPRequest_Multi+0x70>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	4413      	add	r3, r2
 8006f52:	2200      	movs	r2, #0
 8006f54:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2b3b      	cmp	r3, #59	@ 0x3b
 8006f60:	ddf3      	ble.n	8006f4a <FreeRTOS_OutputARPRequest_Multi+0x5e>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	223c      	movs	r2, #60	@ 0x3c
 8006f66:	629a      	str	r2, [r3, #40]	@ 0x28
                    }
                }
                #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

                if( xIsCallingFromIPTask() != pdFALSE )
 8006f68:	f002 ff7c 	bl	8009e64 <xIsCallingFromIPTask>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00f      	beq.n	8006f92 <FreeRTOS_OutputARPRequest_Multi+0xa6>
                {
                    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

                    /* Only the IP-task is allowed to call this function directly. */
                    if( pxEndPoint->pxNetworkInterface != NULL )
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d01b      	beq.n	8006fb4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    {
                        ( void ) pxEndPoint->pxNetworkInterface->pfOutput( pxEndPoint->pxNetworkInterface, pxNetworkBuffer, pdTRUE );
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	f8d2 0120 	ldr.w	r0, [r2, #288]	@ 0x120
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	6939      	ldr	r1, [r7, #16]
 8006f8e:	4798      	blx	r3
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                    }
                }
            }
        }
    }
 8006f90:	e010      	b.n	8006fb4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    xSendEvent.eEventType = eNetworkTxEvent;
 8006f92:	2302      	movs	r3, #2
 8006f94:	723b      	strb	r3, [r7, #8]
                    xSendEvent.pvData = pxNetworkBuffer;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	60fb      	str	r3, [r7, #12]
                    if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8006f9a:	f107 0308 	add.w	r3, r7, #8
 8006f9e:	f04f 31ff 	mov.w	r1, #4294967295
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f002 f81c 	bl	8008fe0 <xSendEventStructToIPTask>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d102      	bne.n	8006fb4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8006fae:	6938      	ldr	r0, [r7, #16]
 8006fb0:	f00f fdda 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
    }
 8006fb4:	bf00      	nop
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
    {
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
        /* Its assumed that IPv4 endpoints belonging to different physical interface
         * in the system will have a different subnet, but endpoints on same interface
         * may have it. */
        NetworkEndPoint_t * pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 12 );
 8006fc4:	210c      	movs	r1, #12
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f006 f82e 	bl	800d028 <FreeRTOS_FindEndPointOnNetMask>
 8006fcc:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <FreeRTOS_OutputARPRequest+0x20>
        {
            FreeRTOS_OutputARPRequest_Multi( pxEndPoint, ulIPAddress );
 8006fd4:	6879      	ldr	r1, [r7, #4]
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f7ff ff88 	bl	8006eec <FreeRTOS_OutputARPRequest_Multi>
        }
    }
 8006fdc:	bf00      	nop
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
    void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
        void * pvCopyDest;

        /* Buffer allocation ensures that buffers always have space
         * for an ARP packet. See buffer allocation implementations 1
         * and 2 under portable/BufferManagement. */
        configASSERT( pxNetworkBuffer != NULL );
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d104      	bne.n	8006ffc <vARPGenerateRequestPacket+0x18>
 8006ff2:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 8006ff6:	4828      	ldr	r0, [pc, #160]	@ (8007098 <vARPGenerateRequestPacket+0xb4>)
 8006ff8:	f7fa fb38 	bl	800166c <vAssertCalled>
        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007000:	2b29      	cmp	r3, #41	@ 0x29
 8007002:	d804      	bhi.n	800700e <vARPGenerateRequestPacket+0x2a>
 8007004:	f240 51b2 	movw	r1, #1458	@ 0x5b2
 8007008:	4823      	ldr	r0, [pc, #140]	@ (8007098 <vARPGenerateRequestPacket+0xb4>)
 800700a:	f7fa fb2f 	bl	800166c <vAssertCalled>
        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007012:	2b00      	cmp	r3, #0
 8007014:	d104      	bne.n	8007020 <vARPGenerateRequestPacket+0x3c>
 8007016:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 800701a:	481f      	ldr	r0, [pc, #124]	@ (8007098 <vARPGenerateRequestPacket+0xb4>)
 800701c:	f7fa fb26 	bl	800166c <vAssertCalled>

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxARPPacket = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007024:	617b      	str	r3, [r7, #20]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = xDefaultPartARPPacketHeader;
 8007026:	4b1d      	ldr	r3, [pc, #116]	@ (800709c <vARPGenerateRequestPacket+0xb8>)
 8007028:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 800702e:	2226      	movs	r2, #38	@ 0x26
 8007030:	6939      	ldr	r1, [r7, #16]
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f01a fe5c 	bl	8021cf0 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703c:	33e8      	adds	r3, #232	@ 0xe8
 800703e:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	3306      	adds	r3, #6
 8007044:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007046:	2206      	movs	r2, #6
 8007048:	6939      	ldr	r1, [r7, #16]
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f01a fe50 	bl	8021cf0 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007054:	33e8      	adds	r3, #232	@ 0xe8
 8007056:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	3316      	adds	r3, #22
 800705c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 800705e:	2206      	movs	r2, #6
 8007060:	6939      	ldr	r1, [r7, #16]
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f01a fe44 	bl	8021cf0 <memcpy>

        pvCopySource = &( pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress );
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706c:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	331c      	adds	r3, #28
 8007072:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	601a      	str	r2, [r3, #0]
        pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	695a      	ldr	r2, [r3, #20]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26

        pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	222a      	movs	r2, #42	@ 0x2a
 800708c:	629a      	str	r2, [r3, #40]	@ 0x28

        iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );
    }
 800708e:	bf00      	nop
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	08023cb4 	.word	0x08023cb4
 800709c:	08026f18 	.word	0x08026f18

080070a0 <FreeRTOS_ClearARP>:
 * @brief A call to this function will clear the ARP cache.
 * @param[in] pxEndPoint only clean entries with this end-point, or when NULL,
 *                        clear the entire ARP cache.
 */
void FreeRTOS_ClearARP( const struct xNetworkEndPoint * pxEndPoint )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
    if( pxEndPoint != NULL )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d01b      	beq.n	80070e6 <FreeRTOS_ClearARP+0x46>
    {
        BaseType_t x;

        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80070ae:	2300      	movs	r3, #0
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	e014      	b.n	80070de <FreeRTOS_ClearARP+0x3e>
        {
            if( xARPCache[ x ].pxEndPoint == pxEndPoint )
 80070b4:	4a10      	ldr	r2, [pc, #64]	@ (80070f8 <FreeRTOS_ClearARP+0x58>)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	4413      	add	r3, r2
 80070bc:	330c      	adds	r3, #12
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d108      	bne.n	80070d8 <FreeRTOS_ClearARP+0x38>
            {
                ( void ) memset( &( xARPCache[ x ] ), 0, sizeof( ARPCacheRow_t ) );
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	4a0b      	ldr	r2, [pc, #44]	@ (80070f8 <FreeRTOS_ClearARP+0x58>)
 80070cc:	4413      	add	r3, r2
 80070ce:	2210      	movs	r2, #16
 80070d0:	2100      	movs	r1, #0
 80070d2:	4618      	mov	r0, r3
 80070d4:	f01a ff19 	bl	8021f0a <memset>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	3301      	adds	r3, #1
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b05      	cmp	r3, #5
 80070e2:	dde7      	ble.n	80070b4 <FreeRTOS_ClearARP+0x14>
    }
    else
    {
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
    }
}
 80070e4:	e004      	b.n	80070f0 <FreeRTOS_ClearARP+0x50>
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 80070e6:	2260      	movs	r2, #96	@ 0x60
 80070e8:	2100      	movs	r1, #0
 80070ea:	4803      	ldr	r0, [pc, #12]	@ (80070f8 <FreeRTOS_ClearARP+0x58>)
 80070ec:	f01a ff0d 	bl	8021f0a <memset>
}
 80070f0:	bf00      	nop
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	20000d9c 	.word	0x20000d9c

080070fc <vDNSInitialise>:
    #if ( ipconfigDNS_USE_CALLBACKS == 1 )

/** @brief Initialise the list of call-back structures.
 */
        void vDNSInitialise( void )
        {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
            vDNSCallbackInitialise();
 8007100:	f000 fc8a 	bl	8007a18 <vDNSCallbackInitialise>
        }
 8007104:	bf00      	nop
 8007106:	bd80      	pop	{r7, pc}

08007108 <pxNew_AddrInfo>:
 * @return A pointer to the newly allocated struct, or NULL in case malloc failed..
 */
    struct freertos_addrinfo * pxNew_AddrInfo( const char * pcName,
                                               BaseType_t xFamily,
                                               const uint8_t * pucAddress )
    {
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
        struct freertos_addrinfo * pxAddrInfo = NULL;
 8007114:	2300      	movs	r3, #0
 8007116:	61fb      	str	r3, [r7, #28]
        void * pvBuffer;

        /* 'xFamily' might not be used when IPv6 is disabled. */
        ( void ) xFamily;
        pvBuffer = pvPortMalloc( sizeof( *pxAddrInfo ) );
 8007118:	2048      	movs	r0, #72	@ 0x48
 800711a:	f7fe fdeb 	bl	8005cf4 <pvPortMalloc>
 800711e:	61b8      	str	r0, [r7, #24]

        if( pvBuffer != NULL )
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d057      	beq.n	80071d6 <pxNew_AddrInfo+0xce>
        {
            pxAddrInfo = ( struct freertos_addrinfo * ) pvBuffer;
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	61fb      	str	r3, [r7, #28]

            ( void ) memset( pxAddrInfo, 0, sizeof( *pxAddrInfo ) );
 800712a:	2248      	movs	r2, #72	@ 0x48
 800712c:	2100      	movs	r1, #0
 800712e:	69f8      	ldr	r0, [r7, #28]
 8007130:	f01a feeb 	bl	8021f0a <memset>
            #if ( ipconfigUSE_DNS_CACHE != 0 )
                pxAddrInfo->ai_canonname = pxAddrInfo->xPrivateStorage.ucName;
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	619a      	str	r2, [r3, #24]
                ( void ) strncpy( pxAddrInfo->xPrivateStorage.ucName, pcName, sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U );
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	3338      	adds	r3, #56	@ 0x38
 8007142:	220f      	movs	r2, #15
 8007144:	68f9      	ldr	r1, [r7, #12]
 8007146:	4618      	mov	r0, r3
 8007148:	f01b fdac 	bl	8022ca4 <strncpy>
                pxAddrInfo->xPrivateStorage.ucName[ sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U ] = '\0';
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            #endif /* (ipconfigUSE_DNS_CACHE != 0 ) */

            pxAddrInfo->ai_addr = ( ( struct freertos_sockaddr * ) &( pxAddrInfo->xPrivateStorage.sockaddr ) );
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	f103 0220 	add.w	r2, r3, #32
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	615a      	str	r2, [r3, #20]

            switch( xFamily )
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2b02      	cmp	r3, #2
 8007162:	d003      	beq.n	800716c <pxNew_AddrInfo+0x64>
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2b0a      	cmp	r3, #10
 8007168:	d01e      	beq.n	80071a8 <pxNew_AddrInfo+0xa0>
 800716a:	e02b      	b.n	80071c4 <pxNew_AddrInfo+0xbc>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                       {
                           /* ulChar2u32 reads from big-endian to host-endian. */
                           uint32_t ulIPAddress = ulChar2u32( pucAddress );
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f003 f87d 	bl	800a26c <ulChar2u32>
 8007172:	6178      	str	r0, [r7, #20]
                           /* Translate to network-endian. */
                           pxAddrInfo->ai_addr->sin_address.ulIP_IPv4 = FreeRTOS_htonl( ulIPAddress );
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	061a      	lsls	r2, r3, #24
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	021b      	lsls	r3, r3, #8
 800717c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007180:	431a      	orrs	r2, r3
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	0a1b      	lsrs	r3, r3, #8
 8007186:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800718a:	ea42 0103 	orr.w	r1, r2, r3
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	0e1a      	lsrs	r2, r3, #24
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	430a      	orrs	r2, r1
 8007198:	609a      	str	r2, [r3, #8]
                           pxAddrInfo->ai_family = FREERTOS_AF_INET4;
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	2202      	movs	r2, #2
 800719e:	605a      	str	r2, [r3, #4]
                           pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv4_ADDRESS;
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	2204      	movs	r2, #4
 80071a4:	611a      	str	r2, [r3, #16]
                       }
                       break;
 80071a6:	e016      	b.n	80071d6 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxAddrInfo->ai_family = FREERTOS_AF_INET6;
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	220a      	movs	r2, #10
 80071ac:	605a      	str	r2, [r3, #4]
                        pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv6_ADDRESS;
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	2210      	movs	r2, #16
 80071b2:	611a      	str	r2, [r3, #16]
                        ( void ) memcpy( pxAddrInfo->xPrivateStorage.sockaddr.sin_address.xIP_IPv6.ucBytes, pucAddress, ipSIZE_OF_IPv6_ADDRESS );
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	3328      	adds	r3, #40	@ 0x28
 80071b8:	2210      	movs	r2, #16
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	4618      	mov	r0, r3
 80071be:	f01a fd97 	bl	8021cf0 <memcpy>
                        break;
 80071c2:	e008      	b.n	80071d6 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "pxNew_AddrInfo: Undefined xFamily Type \n" ) );
 80071c4:	4806      	ldr	r0, [pc, #24]	@ (80071e0 <pxNew_AddrInfo+0xd8>)
 80071c6:	f01a fb77 	bl	80218b8 <lUDPLoggingPrintf>

                    vPortFree( pvBuffer );
 80071ca:	69b8      	ldr	r0, [r7, #24]
 80071cc:	f7fe fe66 	bl	8005e9c <vPortFree>
                    pxAddrInfo = NULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	61fb      	str	r3, [r7, #28]

                    break;
 80071d4:	bf00      	nop
            }
        }

        return pxAddrInfo;
 80071d6:	69fb      	ldr	r3, [r7, #28]
    }
 80071d8:	4618      	mov	r0, r3
 80071da:	3720      	adds	r7, #32
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	08023d58 	.word	0x08023d58

080071e4 <FreeRTOS_freeaddrinfo>:
/**
 * @brief Free a chain of structs of type 'freertos_addrinfo'.
 * @param[in] pxInfo The first find result.
 */
    void FreeRTOS_freeaddrinfo( struct freertos_addrinfo * pxInfo )
    {
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
        struct freertos_addrinfo * pxNext;
        struct freertos_addrinfo * pxIterator = pxInfo;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	60fb      	str	r3, [r7, #12]

        if( pxInfo != NULL )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00b      	beq.n	800720e <FreeRTOS_freeaddrinfo+0x2a>
        {
            while( pxIterator != NULL )
 80071f6:	e007      	b.n	8007208 <FreeRTOS_freeaddrinfo+0x24>
            {
                pxNext = pxIterator->ai_next;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	60bb      	str	r3, [r7, #8]
                vPortFree( pxIterator );
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f7fe fe4c 	bl	8005e9c <vPortFree>
                pxIterator = pxNext;
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	60fb      	str	r3, [r7, #12]
            while( pxIterator != NULL )
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1f4      	bne.n	80071f8 <FreeRTOS_freeaddrinfo+0x14>
            }
        }
    }
 800720e:	bf00      	nop
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <ulDNSHandlePacket>:
 * @param[in] pxNetworkBuffer The network buffer to be parsed.
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8007216:	b580      	push	{r7, lr}
 8007218:	b088      	sub	sp, #32
 800721a:	af02      	add	r7, sp, #8
 800721c:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;
        size_t uxUDPPacketSize = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f002 fa92 	bl	8009748 <uxIPHeaderSizePacket>
 8007224:	4603      	mov	r3, r0
 8007226:	3316      	adds	r3, #22
 8007228:	617b      	str	r3, [r7, #20]

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= uxUDPPacketSize )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	429a      	cmp	r2, r3
 8007232:	d829      	bhi.n	8007288 <ulDNSHandlePacket+0x72>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxUDPPacketSize;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	613b      	str	r3, [r7, #16]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2b0b      	cmp	r3, #11
 8007242:	d921      	bls.n	8007288 <ulDNSHandlePacket+0x72>
            {
                struct freertos_addrinfo * pxAddressInfo = NULL;
 8007244:	2300      	movs	r3, #0
 8007246:	60bb      	str	r3, [r7, #8]
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPPacketSize ] );
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	4413      	add	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]
                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
                                            uxPayloadSize,
                                            &( pxAddressInfo ),
                                            pdFALSE,
                                            FreeRTOS_ntohs( pxNetworkBuffer->usPort ) );
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007256:	021b      	lsls	r3, r3, #8
 8007258:	b21a      	sxth	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800725e:	0a1b      	lsrs	r3, r3, #8
 8007260:	b29b      	uxth	r3, r3
 8007262:	b21b      	sxth	r3, r3
 8007264:	4313      	orrs	r3, r2
 8007266:	b21b      	sxth	r3, r3
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
 8007268:	b29b      	uxth	r3, r3
 800726a:	f107 0208 	add.w	r2, r7, #8
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	2300      	movs	r3, #0
 8007272:	6939      	ldr	r1, [r7, #16]
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 fcb5 	bl	8007be4 <DNS_ParseDNSReply>

                if( pxAddressInfo != NULL )
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <ulDNSHandlePacket+0x72>
                {
                    FreeRTOS_freeaddrinfo( pxAddressInfo );
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff ffae 	bl	80071e4 <FreeRTOS_freeaddrinfo>
                }
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 8007288:	2300      	movs	r3, #0
    }
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <FreeRTOS_dns_update>:
    BaseType_t FreeRTOS_dns_update( const char * pcName,
                                    IPv46_Address_t * pxIP,
                                    uint32_t ulTTL,
                                    BaseType_t xLookUp,
                                    struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007292:	b580      	push	{r7, lr}
 8007294:	b086      	sub	sp, #24
 8007296:	af02      	add	r7, sp, #8
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	60b9      	str	r1, [r7, #8]
 800729c:	607a      	str	r2, [r7, #4]
 800729e:	603b      	str	r3, [r7, #0]
        /* _HT_ we can as well remove the parameter 'xLookUp'. */
        ( void ) xLookUp;
        ( void ) FreeRTOS_ProcessDNSCache( pcName,
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	2300      	movs	r3, #0
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	68b9      	ldr	r1, [r7, #8]
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 f818 	bl	80072e0 <FreeRTOS_ProcessDNSCache>
                                           pxIP,
                                           ulTTL,
                                           pdFALSE,
                                           ppxAddressInfo );
        return pdTRUE;
 80072b0:	2301      	movs	r3, #1
    }
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <FreeRTOS_dnsclear>:
/**
 * @brief perform a dns clear in the local cache
 * @post the global structure \a xDNSCache is modified
 */
    void FreeRTOS_dnsclear( void )
    {
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
        ( void ) memset( xDNSCache, 0x0, sizeof( xDNSCache ) );
 80072c0:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 80072c4:	2100      	movs	r1, #0
 80072c6:	4804      	ldr	r0, [pc, #16]	@ (80072d8 <FreeRTOS_dnsclear+0x1c>)
 80072c8:	f01a fe1f 	bl	8021f0a <memset>
        uxFreeEntry = 0U;
 80072cc:	4b03      	ldr	r3, [pc, #12]	@ (80072dc <FreeRTOS_dnsclear+0x20>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]
    }
 80072d2:	bf00      	nop
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20000e0c 	.word	0x20000e0c
 80072dc:	20000fbc 	.word	0x20000fbc

080072e0 <FreeRTOS_ProcessDNSCache>:
    BaseType_t FreeRTOS_ProcessDNSCache( const char * pcName,
                                         IPv46_Address_t * pxIP,
                                         uint32_t ulTTL,
                                         BaseType_t xLookUp,
                                         struct freertos_addrinfo ** ppxAddressInfo )
    {
 80072e0:	b590      	push	{r4, r7, lr}
 80072e2:	b09b      	sub	sp, #108	@ 0x6c
 80072e4:	af02      	add	r7, sp, #8
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
        UBaseType_t uxIndex;
        BaseType_t xResult;
        /* Get the current time in clock-ticks. */
        TickType_t xCurrentTickCount = xTaskGetTickCount();
 80072ee:	f7fc fe95 	bl	800401c <xTaskGetTickCount>
 80072f2:	65b8      	str	r0, [r7, #88]	@ 0x58
        /* In milliseconds. */
        uint32_t ulCurrentTimeSeconds;

        configASSERT( ( pcName != NULL ) );
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d103      	bne.n	8007302 <FreeRTOS_ProcessDNSCache+0x22>
 80072fa:	21d8      	movs	r1, #216	@ 0xd8
 80072fc:	4841      	ldr	r0, [pc, #260]	@ (8007404 <FreeRTOS_ProcessDNSCache+0x124>)
 80072fe:	f7fa f9b5 	bl	800166c <vAssertCalled>

        if( xLookUp != pdFALSE )
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <FreeRTOS_ProcessDNSCache+0x2e>
        {
            pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]
        }

        ulCurrentTimeSeconds = ( uint32_t ) ( ( xCurrentTickCount / portTICK_PERIOD_MS ) / 1000U );
 800730e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007310:	4a3d      	ldr	r2, [pc, #244]	@ (8007408 <FreeRTOS_ProcessDNSCache+0x128>)
 8007312:	fba2 2303 	umull	r2, r3, r2, r3
 8007316:	099b      	lsrs	r3, r3, #6
 8007318:	657b      	str	r3, [r7, #84]	@ 0x54
        xResult = prvFindEntryIndex( pcName, pxIP, &uxIndex );
 800731a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800731e:	461a      	mov	r2, r3
 8007320:	68b9      	ldr	r1, [r7, #8]
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f000 f87a 	bl	800741c <prvFindEntryIndex>
 8007328:	6538      	str	r0, [r7, #80]	@ 0x50

        if( xResult == pdTRUE )
 800732a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800732c:	2b01      	cmp	r3, #1
 800732e:	d110      	bne.n	8007352 <FreeRTOS_ProcessDNSCache+0x72>
        { /* Element found */
            /* Is this function called for a lookup or to add/update an IP address? */
            if( xLookUp == pdTRUE )
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d106      	bne.n	8007344 <FreeRTOS_ProcessDNSCache+0x64>
            {
                /* This statement can only be reached when xResult is true; which
                 * implies that the entry is present and a 'get' operation will result
                 * in success. Therefore, it is safe to ignore the return value of the
                 * below function. */
                ( void ) prvGetCacheIPEntry( uxIndex,
 8007336:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007338:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800733a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800733c:	68b9      	ldr	r1, [r7, #8]
 800733e:	f000 f8b1 	bl	80074a4 <prvGetCacheIPEntry>
 8007342:	e013      	b.n	800736c <FreeRTOS_ProcessDNSCache+0x8c>
                                             ulCurrentTimeSeconds,
                                             ppxAddressInfo );
            }
            else
            {
                prvUpdateCacheEntry( uxIndex,
 8007344:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	f000 f94a 	bl	80075e4 <prvUpdateCacheEntry>
 8007350:	e00c      	b.n	800736c <FreeRTOS_ProcessDNSCache+0x8c>
                                     ulCurrentTimeSeconds );
            }
        }
        else /* Element not Found xResult = pdFALSE */
        {
            if( xLookUp == pdTRUE )
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d103      	bne.n	8007360 <FreeRTOS_ProcessDNSCache+0x80>
            {
                pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2200      	movs	r2, #0
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	e005      	b.n	800736c <FreeRTOS_ProcessDNSCache+0x8c>
            }
            else
            {
                prvInsertCacheEntry( pcName,
 8007360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	6879      	ldr	r1, [r7, #4]
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 f994 	bl	8007694 <prvInsertCacheEntry>
                                     ulCurrentTimeSeconds );
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( ( xLookUp == pdFALSE ) || ( pxIP->xIPAddress.ulIP_IPv4 != 0U ) )
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <FreeRTOS_ProcessDNSCache+0x9a>
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d03f      	beq.n	80073fa <FreeRTOS_ProcessDNSCache+0x11a>
            {
                char pcAddress[ 40 ];
                IP_Address_t xAddress;
                BaseType_t xFamily = FREERTOS_AF_INET;
 800737a:	2302      	movs	r3, #2
 800737c:	65fb      	str	r3, [r7, #92]	@ 0x5c

                switch( pxIP->xIs_IPv6 )
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00c      	beq.n	80073a0 <FreeRTOS_ProcessDNSCache+0xc0>
 8007386:	2b01      	cmp	r3, #1
 8007388:	d10e      	bne.n	80073a8 <FreeRTOS_ProcessDNSCache+0xc8>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case pdTRUE:
                            ( void ) memcpy( xAddress.xIP_IPv6.ucBytes, pxIP->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	6859      	ldr	r1, [r3, #4]
 8007394:	689a      	ldr	r2, [r3, #8]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            xFamily = FREERTOS_AF_INET6;
 800739a:	230a      	movs	r3, #10
 800739c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            break;
 800739e:	e007      	b.n	80073b0 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE:
                            xAddress.ulIP_IPv4 = pxIP->xIPAddress.ulIP_IPv4;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            break;
 80073a6:	e003      	b.n	80073b0 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: Undefined IP Type \n" ) );
 80073a8:	4818      	ldr	r0, [pc, #96]	@ (800740c <FreeRTOS_ProcessDNSCache+0x12c>)
 80073aa:	f01a fa85 	bl	80218b8 <lUDPLoggingPrintf>
                        break;
 80073ae:	bf00      	nop
                }

                ( void ) FreeRTOS_inet_ntop( xFamily,
 80073b0:	f107 0214 	add.w	r2, r7, #20
 80073b4:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80073b8:	2328      	movs	r3, #40	@ 0x28
 80073ba:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80073bc:	f007 fc62 	bl	800ec84 <FreeRTOS_inet_ntop>
                                             ( const void * ) xAddress.xIP_IPv6.ucBytes,
                                             pcAddress,
                                             ( socklen_t ) sizeof( pcAddress ) );
                FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: %s: '%s' @ %s (TTL %u)\n",
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <FreeRTOS_ProcessDNSCache+0xea>
 80073c6:	4912      	ldr	r1, [pc, #72]	@ (8007410 <FreeRTOS_ProcessDNSCache+0x130>)
 80073c8:	e000      	b.n	80073cc <FreeRTOS_ProcessDNSCache+0xec>
 80073ca:	4912      	ldr	r1, [pc, #72]	@ (8007414 <FreeRTOS_ProcessDNSCache+0x134>)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	061a      	lsls	r2, r3, #24
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	021b      	lsls	r3, r3, #8
 80073d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80073d8:	431a      	orrs	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	0a1b      	lsrs	r3, r3, #8
 80073de:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	0e1b      	lsrs	r3, r3, #24
 80073e8:	4313      	orrs	r3, r2
 80073ea:	f107 0214 	add.w	r2, r7, #20
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	4613      	mov	r3, r2
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4808      	ldr	r0, [pc, #32]	@ (8007418 <FreeRTOS_ProcessDNSCache+0x138>)
 80073f6:	f01a fa5f 	bl	80218b8 <lUDPLoggingPrintf>
                                         pcAddress,
                                         ( unsigned ) FreeRTOS_ntohl( ulTTL ) ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return xResult;
 80073fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    }
 80073fc:	4618      	mov	r0, r3
 80073fe:	3764      	adds	r7, #100	@ 0x64
 8007400:	46bd      	mov	sp, r7
 8007402:	bd90      	pop	{r4, r7, pc}
 8007404:	08023fd4 	.word	0x08023fd4
 8007408:	10624dd3 	.word	0x10624dd3
 800740c:	08024008 	.word	0x08024008
 8007410:	08024038 	.word	0x08024038
 8007414:	08024040 	.word	0x08024040
 8007418:	08024044 	.word	0x08024044

0800741c <prvFindEntryIndex>:
 * @returns res pdTRUE if index in found else pdFALSE
 */
    static BaseType_t prvFindEntryIndex( const char * pcName,
                                         const IPv46_Address_t * pxIP,
                                         UBaseType_t * uxResult )
    {
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8007428:	2300      	movs	r3, #0
 800742a:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIndex;

        /* For each entry in the DNS cache table. */
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 800742c:	2300      	movs	r3, #0
 800742e:	613b      	str	r3, [r7, #16]
 8007430:	e02d      	b.n	800748e <prvFindEntryIndex+0x72>
        {
            if( xDNSCache[ uxIndex ].pcName[ 0 ] == ( char ) 0 )
 8007432:	4a1b      	ldr	r2, [pc, #108]	@ (80074a0 <prvFindEntryIndex+0x84>)
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	216c      	movs	r1, #108	@ 0x6c
 8007438:	fb01 f303 	mul.w	r3, r1, r3
 800743c:	4413      	add	r3, r2
 800743e:	3350      	adds	r3, #80	@ 0x50
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d01f      	beq.n	8007486 <prvFindEntryIndex+0x6a>
            { /* empty slot */
                continue;
            }

            if( strcmp( xDNSCache[ uxIndex ].pcName, pcName ) == 0 )
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	226c      	movs	r2, #108	@ 0x6c
 800744a:	fb02 f303 	mul.w	r3, r2, r3
 800744e:	3350      	adds	r3, #80	@ 0x50
 8007450:	4a13      	ldr	r2, [pc, #76]	@ (80074a0 <prvFindEntryIndex+0x84>)
 8007452:	4413      	add	r3, r2
 8007454:	68f9      	ldr	r1, [r7, #12]
 8007456:	4618      	mov	r0, r3
 8007458:	f7f8 ff42 	bl	80002e0 <strcmp>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d112      	bne.n	8007488 <prvFindEntryIndex+0x6c>
            { /* hostname found */
                /* IPv6 is enabled, See if the cache entry has the correct type. */
                if( pxIP->xIs_IPv6 == xDNSCache[ uxIndex ].xAddresses[ 0 ].xIs_IPv6 )
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	691a      	ldr	r2, [r3, #16]
 8007466:	490e      	ldr	r1, [pc, #56]	@ (80074a0 <prvFindEntryIndex+0x84>)
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	206c      	movs	r0, #108	@ 0x6c
 800746c:	fb00 f303 	mul.w	r3, r0, r3
 8007470:	440b      	add	r3, r1
 8007472:	3310      	adds	r3, #16
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d106      	bne.n	8007488 <prvFindEntryIndex+0x6c>
                {
                    xReturn = pdTRUE;
 800747a:	2301      	movs	r3, #1
 800747c:	617b      	str	r3, [r7, #20]
                    *uxResult = uxIndex;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	601a      	str	r2, [r3, #0]
                    break;
 8007484:	e006      	b.n	8007494 <prvFindEntryIndex+0x78>
                continue;
 8007486:	bf00      	nop
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	3301      	adds	r3, #1
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	2b03      	cmp	r3, #3
 8007492:	d9ce      	bls.n	8007432 <prvFindEntryIndex+0x16>
                }
            }
        }

        return xReturn;
 8007494:	697b      	ldr	r3, [r7, #20]
    }
 8007496:	4618      	mov	r0, r3
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20000e0c 	.word	0x20000e0c

080074a4 <prvGetCacheIPEntry>:

    static BaseType_t prvGetCacheIPEntry( UBaseType_t uxIndex,
                                          IPv46_Address_t * pxIP,
                                          uint32_t ulCurrentTimeSeconds,
                                          struct freertos_addrinfo ** ppxAddressInfo )
    {
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b088      	sub	sp, #32
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	603b      	str	r3, [r7, #0]
        BaseType_t isRead;
        uint32_t ulIPAddressIndex = 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	61bb      	str	r3, [r7, #24]
        uint32_t ulAge = ulCurrentTimeSeconds - xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds;
 80074b6:	4a4a      	ldr	r2, [pc, #296]	@ (80075e0 <prvGetCacheIPEntry+0x13c>)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	216c      	movs	r1, #108	@ 0x6c
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	4413      	add	r3, r2
 80074c2:	3364      	adds	r3, #100	@ 0x64
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	617b      	str	r3, [r7, #20]

        /* Confirm that the record is still fresh.
         * The field ulTTL was stored as network-endian. */
        if( ulAge < FreeRTOS_ntohl( xDNSCache[ uxIndex ].ulTTL ) )
 80074cc:	4a44      	ldr	r2, [pc, #272]	@ (80075e0 <prvGetCacheIPEntry+0x13c>)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	216c      	movs	r1, #108	@ 0x6c
 80074d2:	fb01 f303 	mul.w	r3, r1, r3
 80074d6:	4413      	add	r3, r2
 80074d8:	3360      	adds	r3, #96	@ 0x60
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	061a      	lsls	r2, r3, #24
 80074de:	4940      	ldr	r1, [pc, #256]	@ (80075e0 <prvGetCacheIPEntry+0x13c>)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	206c      	movs	r0, #108	@ 0x6c
 80074e4:	fb00 f303 	mul.w	r3, r0, r3
 80074e8:	440b      	add	r3, r1
 80074ea:	3360      	adds	r3, #96	@ 0x60
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	021b      	lsls	r3, r3, #8
 80074f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80074f4:	431a      	orrs	r2, r3
 80074f6:	493a      	ldr	r1, [pc, #232]	@ (80075e0 <prvGetCacheIPEntry+0x13c>)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	206c      	movs	r0, #108	@ 0x6c
 80074fc:	fb00 f303 	mul.w	r3, r0, r3
 8007500:	440b      	add	r3, r1
 8007502:	3360      	adds	r3, #96	@ 0x60
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	0a1b      	lsrs	r3, r3, #8
 8007508:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800750c:	431a      	orrs	r2, r3
 800750e:	4934      	ldr	r1, [pc, #208]	@ (80075e0 <prvGetCacheIPEntry+0x13c>)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	206c      	movs	r0, #108	@ 0x6c
 8007514:	fb00 f303 	mul.w	r3, r0, r3
 8007518:	440b      	add	r3, r1
 800751a:	3360      	adds	r3, #96	@ 0x60
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	0e1b      	lsrs	r3, r3, #24
 8007520:	4313      	orrs	r3, r2
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	429a      	cmp	r2, r3
 8007526:	d24a      	bcs.n	80075be <prvGetCacheIPEntry+0x11a>
                /*  modulo it by the number of IP addresses to keep it in range.     */
                /*  Also perform a final modulo by the max number of IP addresses    */
                /*  per DNS cache entry to prevent out-of-bounds access in the event */
                /*  that ucNumIPAddresses has been corrupted.                        */

                ucIndex = xDNSCache[ uxIndex ].ucCurrentIPAddress % xDNSCache[ uxIndex ].ucNumIPAddresses;
 8007528:	4a2d      	ldr	r2, [pc, #180]	@ (80075e0 <prvGetCacheIPEntry+0x13c>)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	216c      	movs	r1, #108	@ 0x6c
 800752e:	fb01 f303 	mul.w	r3, r1, r3
 8007532:	4413      	add	r3, r2
 8007534:	3369      	adds	r3, #105	@ 0x69
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	4929      	ldr	r1, [pc, #164]	@ (80075e0 <prvGetCacheIPEntry+0x13c>)
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	206c      	movs	r0, #108	@ 0x6c
 800753e:	fb00 f202 	mul.w	r2, r0, r2
 8007542:	440a      	add	r2, r1
 8007544:	3268      	adds	r2, #104	@ 0x68
 8007546:	7812      	ldrb	r2, [r2, #0]
 8007548:	fbb3 f1f2 	udiv	r1, r3, r2
 800754c:	fb01 f202 	mul.w	r2, r1, r2
 8007550:	1a9b      	subs	r3, r3, r2
 8007552:	74fb      	strb	r3, [r7, #19]
                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8007554:	7cfb      	ldrb	r3, [r7, #19]
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	74fb      	strb	r3, [r7, #19]
                ulIPAddressIndex = ucIndex;
 800755c:	7cfb      	ldrb	r3, [r7, #19]
 800755e:	61bb      	str	r3, [r7, #24]

                xDNSCache[ uxIndex ].ucCurrentIPAddress++;
 8007560:	4a1f      	ldr	r2, [pc, #124]	@ (80075e0 <prvGetCacheIPEntry+0x13c>)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	216c      	movs	r1, #108	@ 0x6c
 8007566:	fb01 f303 	mul.w	r3, r1, r3
 800756a:	4413      	add	r3, r2
 800756c:	3369      	adds	r3, #105	@ 0x69
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	3301      	adds	r3, #1
 8007572:	b2d8      	uxtb	r0, r3
 8007574:	4a1a      	ldr	r2, [pc, #104]	@ (80075e0 <prvGetCacheIPEntry+0x13c>)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	216c      	movs	r1, #108	@ 0x6c
 800757a:	fb01 f303 	mul.w	r3, r1, r3
 800757e:	4413      	add	r3, r2
 8007580:	3369      	adds	r3, #105	@ 0x69
 8007582:	4602      	mov	r2, r0
 8007584:	701a      	strb	r2, [r3, #0]
            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

            ( void ) memcpy( pxIP, &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), sizeof( *pxIP ) );
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	216c      	movs	r1, #108	@ 0x6c
 8007594:	fb01 f202 	mul.w	r2, r1, r2
 8007598:	4413      	add	r3, r2
 800759a:	4a11      	ldr	r2, [pc, #68]	@ (80075e0 <prvGetCacheIPEntry+0x13c>)
 800759c:	4413      	add	r3, r2
 800759e:	2214      	movs	r2, #20
 80075a0:	4619      	mov	r1, r3
 80075a2:	68b8      	ldr	r0, [r7, #8]
 80075a4:	f01a fba4 	bl	8021cf0 <memcpy>
            isRead = pdTRUE;
 80075a8:	2301      	movs	r3, #1
 80075aa:	61fb      	str	r3, [r7, #28]

            if( ppxAddressInfo != NULL )
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d010      	beq.n	80075d4 <prvGetCacheIPEntry+0x130>
            {
                /* Copy all entries from position 'uxIndex' to a linked struct addrinfo. */
                prvReadDNSCache( ( BaseType_t ) uxIndex, ppxAddressInfo );
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 f8dc 	bl	8007774 <prvReadDNSCache>
 80075bc:	e00a      	b.n	80075d4 <prvGetCacheIPEntry+0x130>
            }
        }
        else
        {
            /* Age out the old cached record. */
            xDNSCache[ uxIndex ].pcName[ 0 ] = ( char ) 0;
 80075be:	4a08      	ldr	r2, [pc, #32]	@ (80075e0 <prvGetCacheIPEntry+0x13c>)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	216c      	movs	r1, #108	@ 0x6c
 80075c4:	fb01 f303 	mul.w	r3, r1, r3
 80075c8:	4413      	add	r3, r2
 80075ca:	3350      	adds	r3, #80	@ 0x50
 80075cc:	2200      	movs	r2, #0
 80075ce:	701a      	strb	r2, [r3, #0]
            isRead = pdFALSE;
 80075d0:	2300      	movs	r3, #0
 80075d2:	61fb      	str	r3, [r7, #28]
        }

        return isRead;
 80075d4:	69fb      	ldr	r3, [r7, #28]
    }
 80075d6:	4618      	mov	r0, r3
 80075d8:	3720      	adds	r7, #32
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20000e0c 	.word	0x20000e0c

080075e4 <prvUpdateCacheEntry>:
 */
    static void prvUpdateCacheEntry( UBaseType_t uxIndex,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddressIndex = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	617b      	str	r3, [r7, #20]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            if( xDNSCache[ uxIndex ].ucNumIPAddresses <
 80075f6:	4a26      	ldr	r2, [pc, #152]	@ (8007690 <prvUpdateCacheEntry+0xac>)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	216c      	movs	r1, #108	@ 0x6c
 80075fc:	fb01 f303 	mul.w	r3, r1, r3
 8007600:	4413      	add	r3, r2
 8007602:	3368      	adds	r3, #104	@ 0x68
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b03      	cmp	r3, #3
 8007608:	d81b      	bhi.n	8007642 <prvUpdateCacheEntry+0x5e>
                ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
            {
                /* If more answers exist than there are IP address storage
                 * slots they will overwrite entry 0 */
                ulIPAddressIndex = xDNSCache[ uxIndex ].ucNumIPAddresses;
 800760a:	4a21      	ldr	r2, [pc, #132]	@ (8007690 <prvUpdateCacheEntry+0xac>)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	216c      	movs	r1, #108	@ 0x6c
 8007610:	fb01 f303 	mul.w	r3, r1, r3
 8007614:	4413      	add	r3, r2
 8007616:	3368      	adds	r3, #104	@ 0x68
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	617b      	str	r3, [r7, #20]
                xDNSCache[ uxIndex ].ucNumIPAddresses++;
 800761c:	4a1c      	ldr	r2, [pc, #112]	@ (8007690 <prvUpdateCacheEntry+0xac>)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	216c      	movs	r1, #108	@ 0x6c
 8007622:	fb01 f303 	mul.w	r3, r1, r3
 8007626:	4413      	add	r3, r2
 8007628:	3368      	adds	r3, #104	@ 0x68
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	3301      	adds	r3, #1
 800762e:	b2d8      	uxtb	r0, r3
 8007630:	4a17      	ldr	r2, [pc, #92]	@ (8007690 <prvUpdateCacheEntry+0xac>)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	216c      	movs	r1, #108	@ 0x6c
 8007636:	fb01 f303 	mul.w	r3, r1, r3
 800763a:	4413      	add	r3, r2
 800763c:	3368      	adds	r3, #104	@ 0x68
 800763e:	4602      	mov	r2, r0
 8007640:	701a      	strb	r2, [r3, #0]
            }
        #endif
        ( void ) memcpy( &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), pxIP, sizeof( *pxIP ) );
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	4613      	mov	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	216c      	movs	r1, #108	@ 0x6c
 8007650:	fb01 f202 	mul.w	r2, r1, r2
 8007654:	4413      	add	r3, r2
 8007656:	4a0e      	ldr	r2, [pc, #56]	@ (8007690 <prvUpdateCacheEntry+0xac>)
 8007658:	4413      	add	r3, r2
 800765a:	2214      	movs	r2, #20
 800765c:	6879      	ldr	r1, [r7, #4]
 800765e:	4618      	mov	r0, r3
 8007660:	f01a fb46 	bl	8021cf0 <memcpy>
        xDNSCache[ uxIndex ].ulTTL = ulTTL;
 8007664:	4a0a      	ldr	r2, [pc, #40]	@ (8007690 <prvUpdateCacheEntry+0xac>)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	216c      	movs	r1, #108	@ 0x6c
 800766a:	fb01 f303 	mul.w	r3, r1, r3
 800766e:	4413      	add	r3, r2
 8007670:	3360      	adds	r3, #96	@ 0x60
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	601a      	str	r2, [r3, #0]
        xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8007676:	4a06      	ldr	r2, [pc, #24]	@ (8007690 <prvUpdateCacheEntry+0xac>)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	216c      	movs	r1, #108	@ 0x6c
 800767c:	fb01 f303 	mul.w	r3, r1, r3
 8007680:	4413      	add	r3, r2
 8007682:	3364      	adds	r3, #100	@ 0x64
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	601a      	str	r2, [r3, #0]
    }
 8007688:	bf00      	nop
 800768a:	3718      	adds	r7, #24
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	20000e0c 	.word	0x20000e0c

08007694 <prvInsertCacheEntry>:
 */
    static void prvInsertCacheEntry( const char * pcName,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
        /* Add or update the item. */
        if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f7f8 fe26 	bl	80002f4 <strlen>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b0f      	cmp	r3, #15
 80076ac:	d859      	bhi.n	8007762 <prvInsertCacheEntry+0xce>
        {
            ( void ) strncpy( xDNSCache[ uxFreeEntry ].pcName, pcName, ipconfigDNS_CACHE_NAME_LENGTH );
 80076ae:	4b2f      	ldr	r3, [pc, #188]	@ (800776c <prvInsertCacheEntry+0xd8>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	226c      	movs	r2, #108	@ 0x6c
 80076b4:	fb02 f303 	mul.w	r3, r2, r3
 80076b8:	3350      	adds	r3, #80	@ 0x50
 80076ba:	4a2d      	ldr	r2, [pc, #180]	@ (8007770 <prvInsertCacheEntry+0xdc>)
 80076bc:	4413      	add	r3, r2
 80076be:	2210      	movs	r2, #16
 80076c0:	68f9      	ldr	r1, [r7, #12]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f01b faee 	bl	8022ca4 <strncpy>
            ( void ) memcpy( &( xDNSCache[ uxFreeEntry ].xAddresses[ 0 ] ), pxIP, sizeof( *pxIP ) );
 80076c8:	4b28      	ldr	r3, [pc, #160]	@ (800776c <prvInsertCacheEntry+0xd8>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	226c      	movs	r2, #108	@ 0x6c
 80076ce:	fb02 f303 	mul.w	r3, r2, r3
 80076d2:	4a27      	ldr	r2, [pc, #156]	@ (8007770 <prvInsertCacheEntry+0xdc>)
 80076d4:	4413      	add	r3, r2
 80076d6:	2214      	movs	r2, #20
 80076d8:	6879      	ldr	r1, [r7, #4]
 80076da:	4618      	mov	r0, r3
 80076dc:	f01a fb08 	bl	8021cf0 <memcpy>


            xDNSCache[ uxFreeEntry ].ulTTL = ulTTL;
 80076e0:	4b22      	ldr	r3, [pc, #136]	@ (800776c <prvInsertCacheEntry+0xd8>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a22      	ldr	r2, [pc, #136]	@ (8007770 <prvInsertCacheEntry+0xdc>)
 80076e6:	216c      	movs	r1, #108	@ 0x6c
 80076e8:	fb01 f303 	mul.w	r3, r1, r3
 80076ec:	4413      	add	r3, r2
 80076ee:	3360      	adds	r3, #96	@ 0x60
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	601a      	str	r2, [r3, #0]
            xDNSCache[ uxFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 80076f4:	4b1d      	ldr	r3, [pc, #116]	@ (800776c <prvInsertCacheEntry+0xd8>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007770 <prvInsertCacheEntry+0xdc>)
 80076fa:	216c      	movs	r1, #108	@ 0x6c
 80076fc:	fb01 f303 	mul.w	r3, r1, r3
 8007700:	4413      	add	r3, r2
 8007702:	3364      	adds	r3, #100	@ 0x64
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	601a      	str	r2, [r3, #0]
            #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
                xDNSCache[ uxFreeEntry ].ucNumIPAddresses = 1;
 8007708:	4b18      	ldr	r3, [pc, #96]	@ (800776c <prvInsertCacheEntry+0xd8>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a18      	ldr	r2, [pc, #96]	@ (8007770 <prvInsertCacheEntry+0xdc>)
 800770e:	216c      	movs	r1, #108	@ 0x6c
 8007710:	fb01 f303 	mul.w	r3, r1, r3
 8007714:	4413      	add	r3, r2
 8007716:	3368      	adds	r3, #104	@ 0x68
 8007718:	2201      	movs	r2, #1
 800771a:	701a      	strb	r2, [r3, #0]
                xDNSCache[ uxFreeEntry ].ucCurrentIPAddress = 0;
 800771c:	4b13      	ldr	r3, [pc, #76]	@ (800776c <prvInsertCacheEntry+0xd8>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a13      	ldr	r2, [pc, #76]	@ (8007770 <prvInsertCacheEntry+0xdc>)
 8007722:	216c      	movs	r1, #108	@ 0x6c
 8007724:	fb01 f303 	mul.w	r3, r1, r3
 8007728:	4413      	add	r3, r2
 800772a:	3369      	adds	r3, #105	@ 0x69
 800772c:	2200      	movs	r2, #0
 800772e:	701a      	strb	r2, [r3, #0]

                /* Initialize all remaining IP addresses in this entry to 0 */
                ( void ) memset( &xDNSCache[ uxFreeEntry ].xAddresses[ 1 ],
 8007730:	4b0e      	ldr	r3, [pc, #56]	@ (800776c <prvInsertCacheEntry+0xd8>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	226c      	movs	r2, #108	@ 0x6c
 8007736:	fb02 f303 	mul.w	r3, r2, r3
 800773a:	3314      	adds	r3, #20
 800773c:	4a0c      	ldr	r2, [pc, #48]	@ (8007770 <prvInsertCacheEntry+0xdc>)
 800773e:	4413      	add	r3, r2
 8007740:	223c      	movs	r2, #60	@ 0x3c
 8007742:	2100      	movs	r1, #0
 8007744:	4618      	mov	r0, r3
 8007746:	f01a fbe0 	bl	8021f0a <memset>
                                 0,
                                 sizeof( xDNSCache[ uxFreeEntry ].xAddresses[ 1 ] ) *
                                 ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
            #endif
            uxFreeEntry++;
 800774a:	4b08      	ldr	r3, [pc, #32]	@ (800776c <prvInsertCacheEntry+0xd8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3301      	adds	r3, #1
 8007750:	4a06      	ldr	r2, [pc, #24]	@ (800776c <prvInsertCacheEntry+0xd8>)
 8007752:	6013      	str	r3, [r2, #0]

            if( uxFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8007754:	4b05      	ldr	r3, [pc, #20]	@ (800776c <prvInsertCacheEntry+0xd8>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b04      	cmp	r3, #4
 800775a:	d102      	bne.n	8007762 <prvInsertCacheEntry+0xce>
            {
                uxFreeEntry = 0;
 800775c:	4b03      	ldr	r3, [pc, #12]	@ (800776c <prvInsertCacheEntry+0xd8>)
 800775e:	2200      	movs	r2, #0
 8007760:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8007762:	bf00      	nop
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20000fbc 	.word	0x20000fbc
 8007770:	20000e0c 	.word	0x20000e0c

08007774 <prvReadDNSCache>:
 * @param[in] uxIndex The index from where entries must be copied.
 * @param[out] ppxAddressInfo Target to store the DNS entries.
 */
    static void prvReadDNSCache( BaseType_t uxIndex,
                                 struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007774:	b580      	push	{r7, lr}
 8007776:	b088      	sub	sp, #32
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
        size_t uxIPAddressIndex;
        size_t uxNumIPAddresses = 1U;
 800777e:	2301      	movs	r3, #1
 8007780:	61bb      	str	r3, [r7, #24]
        const IPv46_Address_t * pxAddresses;
        struct freertos_addrinfo * pxNewAddress = NULL;
 8007782:	2300      	movs	r3, #0
 8007784:	617b      	str	r3, [r7, #20]
        struct freertos_addrinfo ** ppxLastAddress = ppxAddressInfo;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	613b      	str	r3, [r7, #16]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            uxNumIPAddresses = ( size_t ) xDNSCache[ uxIndex ].ucNumIPAddresses;
 800778a:	4a2e      	ldr	r2, [pc, #184]	@ (8007844 <prvReadDNSCache+0xd0>)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	216c      	movs	r1, #108	@ 0x6c
 8007790:	fb01 f303 	mul.w	r3, r1, r3
 8007794:	4413      	add	r3, r2
 8007796:	3368      	adds	r3, #104	@ 0x68
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	61bb      	str	r3, [r7, #24]

            if( uxNumIPAddresses > ( size_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	2b04      	cmp	r3, #4
 80077a0:	d901      	bls.n	80077a6 <prvReadDNSCache+0x32>
            {
                /* Make this a configASSERT()? */
                uxNumIPAddresses = ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 80077a2:	2304      	movs	r3, #4
 80077a4:	61bb      	str	r3, [r7, #24]
            }
        #endif /* ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 80077a6:	2300      	movs	r3, #0
 80077a8:	61fb      	str	r3, [r7, #28]
 80077aa:	e041      	b.n	8007830 <prvReadDNSCache+0xbc>
        {
            pxAddresses = &( xDNSCache[ uxIndex ].xAddresses[ uxIPAddressIndex ] );
 80077ac:	69fa      	ldr	r2, [r7, #28]
 80077ae:	4613      	mov	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4413      	add	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	216c      	movs	r1, #108	@ 0x6c
 80077ba:	fb01 f202 	mul.w	r2, r1, r2
 80077be:	4413      	add	r3, r2
 80077c0:	4a20      	ldr	r2, [pc, #128]	@ (8007844 <prvReadDNSCache+0xd0>)
 80077c2:	4413      	add	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]

            switch( pxAddresses->xIs_IPv6 ) /* LCOV_EXCL_BR_LINE - xIs_IPv6 is always either pdFALSE or pdTRUE. */
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <prvReadDNSCache+0x60>
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d010      	beq.n	80077f4 <prvReadDNSCache+0x80>
 80077d2:	e01d      	b.n	8007810 <prvReadDNSCache+0x9c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE:
                       {
                           const uint8_t * ucBytes = ( const uint8_t * ) &( pxAddresses->xIPAddress.ulIP_IPv4 );
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	60bb      	str	r3, [r7, #8]
                           pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET4, ucBytes );
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	226c      	movs	r2, #108	@ 0x6c
 80077dc:	fb02 f303 	mul.w	r3, r2, r3
 80077e0:	3350      	adds	r3, #80	@ 0x50
 80077e2:	4a18      	ldr	r2, [pc, #96]	@ (8007844 <prvReadDNSCache+0xd0>)
 80077e4:	4413      	add	r3, r2
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	2102      	movs	r1, #2
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7ff fc8c 	bl	8007108 <pxNew_AddrInfo>
 80077f0:	6178      	str	r0, [r7, #20]
                       }
                       break;
 80077f2:	e011      	b.n	8007818 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE:
                        pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET6, pxAddresses->xIPAddress.xIP_IPv6.ucBytes );
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	226c      	movs	r2, #108	@ 0x6c
 80077f8:	fb02 f303 	mul.w	r3, r2, r3
 80077fc:	3350      	adds	r3, #80	@ 0x50
 80077fe:	4a11      	ldr	r2, [pc, #68]	@ (8007844 <prvReadDNSCache+0xd0>)
 8007800:	4413      	add	r3, r2
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	210a      	movs	r1, #10
 8007806:	4618      	mov	r0, r3
 8007808:	f7ff fc7e 	bl	8007108 <pxNew_AddrInfo>
 800780c:	6178      	str	r0, [r7, #20]
                        break;
 800780e:	e003      	b.n	8007818 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default: /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "prvReadDNSCache: Undefined IP Type \n" ) );
 8007810:	480d      	ldr	r0, [pc, #52]	@ (8007848 <prvReadDNSCache+0xd4>)
 8007812:	f01a f851 	bl	80218b8 <lUDPLoggingPrintf>
                    break; /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
 8007816:	bf00      	nop
            }

            if( pxNewAddress == NULL )
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00d      	beq.n	800783a <prvReadDNSCache+0xc6>
                /* Malloc must has failed. */
                break;
            }

            /* Set either 'ppxAddressInfo' or 'pxNewAddress->ai_next'. */
            *( ppxLastAddress ) = pxNewAddress;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	601a      	str	r2, [r3, #0]

            ppxLastAddress = &( pxNewAddress->ai_next );
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	331c      	adds	r3, #28
 8007828:	613b      	str	r3, [r7, #16]
        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	3301      	adds	r3, #1
 800782e:	61fb      	str	r3, [r7, #28]
 8007830:	69fa      	ldr	r2, [r7, #28]
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	429a      	cmp	r2, r3
 8007836:	d3b9      	bcc.n	80077ac <prvReadDNSCache+0x38>
        }
    }
 8007838:	e000      	b.n	800783c <prvReadDNSCache+0xc8>
                break;
 800783a:	bf00      	nop
    }
 800783c:	bf00      	nop
 800783e:	3720      	adds	r7, #32
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	20000e0c 	.word	0x20000e0c
 8007848:	08024078 	.word	0x08024078

0800784c <xDNSDoCallback>:
 *
 * @return Returns pdTRUE if uxIdentifier was recognized.
 */
    BaseType_t xDNSDoCallback( ParseSet_t * pxSet,
                               struct freertos_addrinfo * pxAddress )
    {
 800784c:	b580      	push	{r7, lr}
 800784e:	b08a      	sub	sp, #40	@ 0x28
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8007856:	2300      	movs	r3, #0
 8007858:	627b      	str	r3, [r7, #36]	@ 0x24
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 800785a:	4b28      	ldr	r3, [pc, #160]	@ (80078fc <xDNSDoCallback+0xb0>)
 800785c:	617b      	str	r3, [r7, #20]
        TickType_t uxIdentifier = ( TickType_t ) pxSet->pxDNSMessageHeader->usIdentifier;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	b29b      	uxth	r3, r3
 8007866:	613b      	str	r3, [r7, #16]

        /* While iterating through the list, the scheduler is suspended.
         * Remember which function shall be called once the scheduler is
         * running again. */
        FOnDNSEvent pCallbackFunction = NULL;
 8007868:	2300      	movs	r3, #0
 800786a:	61fb      	str	r3, [r7, #28]
        void * pvSearchID = NULL;
 800786c:	2300      	movs	r3, #0
 800786e:	61bb      	str	r3, [r7, #24]

        vTaskSuspendAll();
 8007870:	f7fc fac2 	bl	8003df8 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	623b      	str	r3, [r7, #32]
 800787a:	e029      	b.n	80078d0 <xDNSDoCallback+0x84>
                 pxIterator != ( const ListItem_t * ) xEnd;
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
            {
                BaseType_t xMatching;
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	60fb      	str	r3, [r7, #12]
                        xMatching = ( strcasecmp( pxCallback->pcName, pxSet->pcName ) == 0 ) ? pdTRUE : pdFALSE;
                    }
                    else
                #endif /* if ( ipconfigUSE_MDNS == 1 ) */
                {
                    xMatching = ( listGET_LIST_ITEM_VALUE( pxIterator ) == uxIdentifier ) ? pdTRUE : pdFALSE;
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	429a      	cmp	r2, r3
 800788a:	d101      	bne.n	8007890 <xDNSDoCallback+0x44>
 800788c:	2301      	movs	r3, #1
 800788e:	e000      	b.n	8007892 <xDNSDoCallback+0x46>
 8007890:	2300      	movs	r3, #0
 8007892:	60bb      	str	r3, [r7, #8]
                }

                if( xMatching == pdTRUE )
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d117      	bne.n	80078ca <xDNSDoCallback+0x7e>
                {
                    pvSearchID = pxCallback->pvSearchID;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	61bb      	str	r3, [r7, #24]
                    pCallbackFunction = pxCallback->pCallbackFunction;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	61fb      	str	r3, [r7, #28]
                    ( void ) uxListRemove( &pxCallback->xListItem );
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3314      	adds	r3, #20
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fb fa5a 	bl	8002d64 <uxListRemove>
                    vPortFree( pxCallback );
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f7fe faf3 	bl	8005e9c <vPortFree>

                    if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 80078b6:	4b12      	ldr	r3, [pc, #72]	@ (8007900 <xDNSDoCallback+0xb4>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d102      	bne.n	80078c4 <xDNSDoCallback+0x78>
                    {
                        /* The list of outstanding requests is empty. No need for periodic polling. */
                        vIPSetDNSTimerEnableState( pdFALSE );
 80078be:	2000      	movs	r0, #0
 80078c0:	f002 f9ca 	bl	8009c58 <vIPSetDNSTimerEnableState>
                    }

                    xResult = pdTRUE;
 80078c4:	2301      	movs	r3, #1
 80078c6:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 80078c8:	e006      	b.n	80078d8 <xDNSDoCallback+0x8c>
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	623b      	str	r3, [r7, #32]
                 pxIterator != ( const ListItem_t * ) xEnd;
 80078d0:	6a3a      	ldr	r2, [r7, #32]
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d1d1      	bne.n	800787c <xDNSDoCallback+0x30>
                }
            }
        }
        ( void ) xTaskResumeAll();
 80078d8:	f7fc fa9c 	bl	8003e14 <xTaskResumeAll>

        if( pCallbackFunction != NULL )
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d006      	beq.n	80078f0 <xDNSDoCallback+0xa4>
        {
            pCallbackFunction( pxSet->pcName, pvSearchID, pxAddress );
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	69b9      	ldr	r1, [r7, #24]
 80078ee:	4798      	blx	r3
        }

        return xResult;
 80078f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80078f2:	4618      	mov	r0, r3
 80078f4:	3728      	adds	r7, #40	@ 0x28
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20000fc8 	.word	0x20000fc8
 8007900:	20000fc0 	.word	0x20000fc0

08007904 <vDNSCheckCallBack>:
 * @param[in] pvSearchID The search ID of callback function whose associated
 *                 DNS request is being cancelled. If non-ID specific checking of
 *                 all requests is required, then this field should be kept as NULL.
 */
    void vDNSCheckCallBack( void * pvSearchID )
    {
 8007904:	b580      	push	{r7, lr}
 8007906:	b08c      	sub	sp, #48	@ 0x30
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 800790c:	4b40      	ldr	r3, [pc, #256]	@ (8007a10 <vDNSCheckCallBack+0x10c>)
 800790e:	62bb      	str	r3, [r7, #40]	@ 0x28
         * be called. Store theses item in a temporary list.
         * Only when the scheduler is running, user functions
         * shall be called. */
        List_t xTempList;

        vListInitialise( &xTempList );
 8007910:	f107 030c 	add.w	r3, r7, #12
 8007914:	4618      	mov	r0, r3
 8007916:	f7fb f99b 	bl	8002c50 <vListInitialise>

        vTaskSuspendAll();
 800791a:	f7fc fa6d 	bl	8003df8 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800791e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007924:	e02e      	b.n	8007984 <vDNSCheckCallBack+0x80>
                 pxIterator != xEnd; )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8007926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	623b      	str	r3, [r7, #32]
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800792c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00d      	beq.n	8007954 <vDNSCheckCallBack+0x50>
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	429a      	cmp	r2, r3
 8007940:	d108      	bne.n	8007954 <vDNSCheckCallBack+0x50>
                {
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8007942:	6a3b      	ldr	r3, [r7, #32]
 8007944:	3314      	adds	r3, #20
 8007946:	4618      	mov	r0, r3
 8007948:	f7fb fa0c 	bl	8002d64 <uxListRemove>
                    vPortFree( pxCallback );
 800794c:	6a38      	ldr	r0, [r7, #32]
 800794e:	f7fe faa5 	bl	8005e9c <vPortFree>
 8007952:	e017      	b.n	8007984 <vDNSCheckCallBack+0x80>
                }
                else if( xTaskCheckForTimeOut( &pxCallback->uxTimeoutState, &( pxCallback->uxRemainingTime ) ) != pdFALSE )
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	3308      	adds	r3, #8
 8007958:	6a3a      	ldr	r2, [r7, #32]
 800795a:	4611      	mov	r1, r2
 800795c:	4618      	mov	r0, r3
 800795e:	f7fc ff3f 	bl	80047e0 <xTaskCheckForTimeOut>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00d      	beq.n	8007984 <vDNSCheckCallBack+0x80>
                {
                    /* A time-out occurred in the asynchronous search.
                     * Remove it from xCallbackList. */
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	3314      	adds	r3, #20
 800796c:	4618      	mov	r0, r3
 800796e:	f7fb f9f9 	bl	8002d64 <uxListRemove>

                    /* Insert it in a temporary list. The function will be called
                     * once the scheduler is resumed. */
                    vListInsertEnd( &( xTempList ), &pxCallback->xListItem );
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	f103 0214 	add.w	r2, r3, #20
 8007978:	f107 030c 	add.w	r3, r7, #12
 800797c:	4611      	mov	r1, r2
 800797e:	4618      	mov	r0, r3
 8007980:	f7fb f993 	bl	8002caa <vListInsertEnd>
                 pxIterator != xEnd; )
 8007984:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007988:	429a      	cmp	r2, r3
 800798a:	d1cc      	bne.n	8007926 <vDNSCheckCallBack+0x22>
                {
                    /* This call-back is still waiting for a reply or a time-out. */
                }
            }
        }
        ( void ) xTaskResumeAll();
 800798c:	f7fc fa42 	bl	8003e14 <xTaskResumeAll>

        if( listLIST_IS_EMPTY( &xTempList ) == pdFALSE )
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d030      	beq.n	80079f8 <vDNSCheckCallBack+0xf4>
        {
            /* There is at least one item in xTempList which must be removed and deleted. */
            xEnd = listGET_END_MARKER( &xTempList );
 8007996:	f107 030c 	add.w	r3, r7, #12
 800799a:	3308      	adds	r3, #8
 800799c:	62bb      	str	r3, [r7, #40]	@ 0x28

            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800799e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079a4:	e024      	b.n	80079f0 <vDNSCheckCallBack+0xec>
                 pxIterator != xEnd;
                 )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80079a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 80079ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* A time-out occurred in the asynchronous search.
                 * Call the application hook with the proper information. */
                if( pxCallback->xIsIPv6 != 0 )
 80079b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d009      	beq.n	80079ce <vDNSCheckCallBack+0xca>
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, NULL );
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079c0:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 80079c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079c6:	6911      	ldr	r1, [r2, #16]
 80079c8:	2200      	movs	r2, #0
 80079ca:	4798      	blx	r3
 80079cc:	e008      	b.n	80079e0 <vDNSCheckCallBack+0xdc>
                }
                else
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0U );
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079d4:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 80079d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079da:	6911      	ldr	r1, [r2, #16]
 80079dc:	2200      	movs	r2, #0
 80079de:	4798      	blx	r3
                }

                /* Remove it from 'xTempList' and free the memory. */
                ( void ) uxListRemove( &( pxCallback->xListItem ) );
 80079e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e2:	3314      	adds	r3, #20
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fb f9bd 	bl	8002d64 <uxListRemove>
                vPortFree( pxCallback );
 80079ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80079ec:	f7fe fa56 	bl	8005e9c <vPortFree>
                 pxIterator != xEnd;
 80079f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d1d6      	bne.n	80079a6 <vDNSCheckCallBack+0xa2>
            }
        }

        if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 80079f8:	4b06      	ldr	r3, [pc, #24]	@ (8007a14 <vDNSCheckCallBack+0x110>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d102      	bne.n	8007a06 <vDNSCheckCallBack+0x102>
        {
            vIPSetDNSTimerEnableState( pdFALSE );
 8007a00:	2000      	movs	r0, #0
 8007a02:	f002 f929 	bl	8009c58 <vIPSetDNSTimerEnableState>
        }
    }
 8007a06:	bf00      	nop
 8007a08:	3730      	adds	r7, #48	@ 0x30
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000fc8 	.word	0x20000fc8
 8007a14:	20000fc0 	.word	0x20000fc0

08007a18 <vDNSCallbackInitialise>:
/**
 * @brief initialize the cache
 * @post will modify global list xCallbackList
 */
    void vDNSCallbackInitialise()
    {
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	af00      	add	r7, sp, #0
        vListInitialise( &xCallbackList );
 8007a1c:	4802      	ldr	r0, [pc, #8]	@ (8007a28 <vDNSCallbackInitialise+0x10>)
 8007a1e:	f7fb f917 	bl	8002c50 <vListInitialise>
    }
 8007a22:	bf00      	nop
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000fc0 	.word	0x20000fc0

08007a2c <DNS_ReadNameField>:
 *
 * @return If a fully formed name was found, then return the number of bytes processed in pucByte.
 */
    size_t DNS_ReadNameField( ParseSet_t * pxSet,
                              size_t uxDestLen )
    {
 8007a2c:	b480      	push	{r7}
 8007a2e:	b089      	sub	sp, #36	@ 0x24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
        size_t uxNameLen = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	61fb      	str	r3, [r7, #28]
        size_t uxIndex = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	61bb      	str	r3, [r7, #24]
        size_t uxSourceLen = pxSet->uxSourceBytesRemaining;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	613b      	str	r3, [r7, #16]
        const uint8_t * pucByte = pxSet->pucByte;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	60fb      	str	r3, [r7, #12]

        /* uxCount gets the values from pucByte and counts down to 0.
         * No need to have a different type than that of pucByte */
        size_t uxCount;

        if( uxSourceLen == ( size_t ) 0U )
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d102      	bne.n	8007a56 <DNS_ReadNameField+0x2a>
        {
            /* Return 0 value in case of error. */
            uxIndex = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	61bb      	str	r3, [r7, #24]
 8007a54:	e069      	b.n	8007b2a <DNS_ReadNameField+0xfe>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007a62:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a64:	d144      	bne.n	8007af0 <DNS_ReadNameField+0xc4>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLen > sizeof( uint16_t ) )
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d903      	bls.n	8007a74 <DNS_ReadNameField+0x48>
            {
                uxIndex += sizeof( uint16_t );
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	3302      	adds	r3, #2
 8007a70:	61bb      	str	r3, [r7, #24]
 8007a72:	e05a      	b.n	8007b2a <DNS_ReadNameField+0xfe>
            }
            else
            {
                uxIndex = 0U;
 8007a74:	2300      	movs	r3, #0
 8007a76:	61bb      	str	r3, [r7, #24]
 8007a78:	e057      	b.n	8007b2a <DNS_ReadNameField+0xfe>
            /* 'uxIndex' points to the full name. Walk over the string. */
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
            {
                /* If this is not the first time through the loop, then add a
                 * separator in the output. */
                if( ( uxNameLen > 0U ) )
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d008      	beq.n	8007a92 <DNS_ReadNameField+0x66>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = '.';
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	4413      	add	r3, r2
 8007a86:	3334      	adds	r3, #52	@ 0x34
 8007a88:	222e      	movs	r2, #46	@ 0x2e
 8007a8a:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	61fb      	str	r3, [r7, #28]
                }

                /* Process the first/next sub-string. */
                uxCount = ( size_t ) pucByte[ uxIndex ];
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	4413      	add	r3, r2
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	617b      	str	r3, [r7, #20]

                /* uxIndex should point to the first character now, unless uxCount
                 * is an offset field. */
                uxIndex++;
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	61bb      	str	r3, [r7, #24]

                if( ( uxIndex + uxCount ) > uxSourceLen )
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d202      	bcs.n	8007ab4 <DNS_ReadNameField+0x88>
                {
                    uxIndex = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	61bb      	str	r3, [r7, #24]
                    break;
 8007ab2:	e027      	b.n	8007b04 <DNS_ReadNameField+0xd8>
                }

                if( ( uxNameLen + uxCount ) >= uxDestLen )
 8007ab4:	69fa      	ldr	r2, [r7, #28]
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	4413      	add	r3, r2
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d812      	bhi.n	8007ae6 <DNS_ReadNameField+0xba>
                {
                    uxIndex = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	61bb      	str	r3, [r7, #24]
                    break;
 8007ac4:	e01e      	b.n	8007b04 <DNS_ReadNameField+0xd8>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	4413      	add	r3, r2
 8007acc:	7819      	ldrb	r1, [r3, #0]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	3334      	adds	r3, #52	@ 0x34
 8007ad6:	460a      	mov	r2, r1
 8007ad8:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	3301      	adds	r3, #1
 8007ade:	61fb      	str	r3, [r7, #28]
                    uxIndex++;
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	61bb      	str	r3, [r7, #24]
                while( uxCount-- != 0U )
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	1e5a      	subs	r2, r3, #1
 8007aea:	617a      	str	r2, [r7, #20]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1ea      	bne.n	8007ac6 <DNS_ReadNameField+0x9a>
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8007af0:	69ba      	ldr	r2, [r7, #24]
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d205      	bcs.n	8007b04 <DNS_ReadNameField+0xd8>
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	4413      	add	r3, r2
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1ba      	bne.n	8007a7a <DNS_ReadNameField+0x4e>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00f      	beq.n	8007b2a <DNS_ReadNameField+0xfe>
                 * failing above check. Whenever we exit the loop otherwise, either
                 * pucByte[ uxIndex ] == 0 (which makes the check here unnecessary) or
                 * uxIndex >= uxSourceLen (which makes sure that we do not go in the 'if'
                 * case).
                 */
                if( uxIndex < uxSourceLen )
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d209      	bcs.n	8007b26 <DNS_ReadNameField+0xfa>
                {
                    pxSet->pcName[ uxNameLen ] = '\0';
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	4413      	add	r3, r2
 8007b18:	3334      	adds	r3, #52	@ 0x34
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	701a      	strb	r2, [r3, #0]
                    uxIndex++;
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	3301      	adds	r3, #1
 8007b22:	61bb      	str	r3, [r7, #24]
 8007b24:	e001      	b.n	8007b2a <DNS_ReadNameField+0xfe>
                }
                else
                {
                    uxIndex = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	61bb      	str	r3, [r7, #24]
                }
            }
        }

        return uxIndex;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
    }
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3724      	adds	r7, #36	@ 0x24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <DNS_SkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    size_t DNS_SkipNameField( const uint8_t * pucByte,
                              size_t uxLength )
    {
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d102      	bne.n	8007b56 <DNS_SkipNameField+0x1e>
        {
            uxIndex = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	613b      	str	r3, [r7, #16]
 8007b54:	e03f      	b.n	8007bd6 <DNS_SkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b62:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b64:	d11f      	bne.n	8007ba6 <DNS_SkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d903      	bls.n	8007b74 <DNS_SkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	3302      	adds	r3, #2
 8007b70:	613b      	str	r3, [r7, #16]
 8007b72:	e030      	b.n	8007bd6 <DNS_SkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	613b      	str	r3, [r7, #16]
 8007b78:	e02d      	b.n	8007bd6 <DNS_SkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	4413      	add	r3, r2
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d908      	bls.n	8007ba0 <DNS_SkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	613b      	str	r3, [r7, #16]
 8007b9e:	e002      	b.n	8007ba6 <DNS_SkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	613b      	str	r3, [r7, #16]
                    break;
 8007ba4:	e008      	b.n	8007bb8 <DNS_SkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	4413      	add	r3, r2
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d002      	beq.n	8007bb8 <DNS_SkipNameField+0x80>
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d8e0      	bhi.n	8007b7a <DNS_SkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00b      	beq.n	8007bd6 <DNS_SkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d103      	bne.n	8007bd2 <DNS_SkipNameField+0x9a>
                {
                    uxIndex++;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	613b      	str	r3, [r7, #16]
 8007bd0:	e001      	b.n	8007bd6 <DNS_SkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8007bd6:	693b      	ldr	r3, [r7, #16]
    }
 8007bd8:	4618      	mov	r0, r3
 8007bda:	371c      	adds	r7, #28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <DNS_ParseDNSReply>:
    uint32_t DNS_ParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                size_t uxBufferLength,
                                struct freertos_addrinfo ** ppxAddressInfo,
                                BaseType_t xExpected,
                                uint16_t usPort )
    {
 8007be4:	b5b0      	push	{r4, r5, r7, lr}
 8007be6:	b0f6      	sub	sp, #472	@ 0x1d8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 8007bee:	f5a4 74e6 	sub.w	r4, r4, #460	@ 0x1cc
 8007bf2:	6020      	str	r0, [r4, #0]
 8007bf4:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8007bf8:	f5a0 70e8 	sub.w	r0, r0, #464	@ 0x1d0
 8007bfc:	6001      	str	r1, [r0, #0]
 8007bfe:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8007c02:	f5a1 71ea 	sub.w	r1, r1, #468	@ 0x1d4
 8007c06:	600a      	str	r2, [r1, #0]
 8007c08:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007c0c:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 8007c10:	6013      	str	r3, [r2, #0]
        ParseSet_t xSet;
        uint16_t x;
        BaseType_t xReturn = pdTRUE;
 8007c12:	2301      	movs	r3, #1
 8007c14:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
        uint32_t ulIPAddress = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        BaseType_t xDNSHookReturn;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 8007c1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c22:	224c      	movs	r2, #76	@ 0x4c
 8007c24:	2100      	movs	r1, #0
 8007c26:	4618      	mov	r0, r3
 8007c28:	f01a f96f 	bl	8021f0a <memset>
        xSet.usPortNumber = usPort;
 8007c2c:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8007c30:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166
        xSet.ppxLastAddress = &( xSet.pxLastAddress );
 8007c34:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c38:	3344      	adds	r3, #68	@ 0x44
 8007c3a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            xSet.xDoStore = xExpected;
 8007c3e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c42:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
        #endif

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 8007c4c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c50:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b0b      	cmp	r3, #11
 8007c58:	d803      	bhi.n	8007c62 <DNS_ParseDNSReply+0x7e>
        {
            ( void ) xDNSHookReturn;
            xReturn = pdFALSE;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8007c60:	e35a      	b.n	8008318 <DNS_ParseDNSReply+0x734>
        }
        else
        {
            xSet.uxBufferLength = uxBufferLength;
 8007c62:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c66:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            xSet.uxSourceBytesRemaining = uxBufferLength;
 8007c70:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c74:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
             * for easier access. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xSet.pxDNSMessageHeader = ( ( DNSMessage_t * )
 8007c7e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c82:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                                        pucUDPPayloadBuffer );

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                size_t uxResult;
                BaseType_t xIsResponse = pdFALSE;
 8007c92:	2300      	movs	r3, #0
 8007c94:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                /* Start at the first byte after the header. */
                xSet.pucUDPPayloadBuffer = pucUDPPayloadBuffer;
 8007c98:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c9c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                /* Skip 12-byte header. */
                xSet.pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8007ca6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007caa:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	330c      	adds	r3, #12
 8007cb2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                xSet.uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 8007cb6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007cba:	3b0c      	subs	r3, #12
 8007cbc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                /* The number of questions supplied. */
                xSet.usQuestions = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usQuestions );
 8007cc0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007cc4:	889b      	ldrh	r3, [r3, #4]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	021b      	lsls	r3, r3, #8
 8007cca:	b21a      	sxth	r2, r3
 8007ccc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007cd0:	889b      	ldrh	r3, [r3, #4]
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	0a1b      	lsrs	r3, r3, #8
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	b21b      	sxth	r3, r3
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	b21b      	sxth	r3, r3
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
                /* The number of answer records. */
                xSet.usAnswers = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usAnswers );
 8007ce4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007ce8:	88db      	ldrh	r3, [r3, #6]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	021b      	lsls	r3, r3, #8
 8007cee:	b21a      	sxth	r2, r3
 8007cf0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007cf4:	88db      	ldrh	r3, [r3, #6]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	0a1b      	lsrs	r3, r3, #8
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	b21b      	sxth	r3, r3
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	b21b      	sxth	r3, r3
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146

                if( ( xSet.pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8007d08:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007d0c:	885b      	ldrh	r3, [r3, #2]
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 8007d14:	2b80      	cmp	r3, #128	@ 0x80
 8007d16:	d11b      	bne.n	8007d50 <DNS_ParseDNSReply+0x16c>
                {
                    xIsResponse = pdTRUE;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                    if( xSet.usAnswers == 0U )
 8007d1e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d103      	bne.n	8007d2e <DNS_ParseDNSReply+0x14a>
                    {
                        /* This is a response that does not include answers. */
                        xReturn = pdFALSE;
 8007d26:	2300      	movs	r3, #0
 8007d28:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8007d2c:	e2f4      	b.n	8008318 <DNS_ParseDNSReply+0x734>
                    }

                    if( xSet.usQuestions == 0U )
 8007d2e:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d114      	bne.n	8007d60 <DNS_ParseDNSReply+0x17c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8007d36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d3a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                        #endif

                        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                            uxResult = DNS_ReadNameField( &xSet,
 8007d3e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007d42:	2110      	movs	r1, #16
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff fe71 	bl	8007a2c <DNS_ReadNameField>
 8007d4a:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 8007d4e:	e007      	b.n	8007d60 <DNS_ParseDNSReply+0x17c>
                        #endif
                    }
                }
                else
                {
                    if( xSet.usQuestions == 0U )
 8007d50:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d103      	bne.n	8007d60 <DNS_ParseDNSReply+0x17c>
                    {
                        /* This is a query that does not include any question. */
                        xReturn = pdFALSE;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8007d5e:	e2db      	b.n	8008318 <DNS_ParseDNSReply+0x734>
                    }
                }

                for( x = 0U; x < xSet.usQuestions; x++ )
 8007d60:	2300      	movs	r3, #0
 8007d62:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8007d66:	e064      	b.n	8007e32 <DNS_ParseDNSReply+0x24e>
                {
                    #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                    {
                        if( x == 0U )
 8007d68:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d103      	bne.n	8007d78 <DNS_ParseDNSReply+0x194>
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8007d70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d74:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                    }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 8007d78:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d108      	bne.n	8007d92 <DNS_ParseDNSReply+0x1ae>
                        {
                            uxResult = DNS_ReadNameField( &xSet,
 8007d80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007d84:	2110      	movs	r1, #16
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff fe50 	bl	8007a2c <DNS_ReadNameField>
 8007d8c:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 8007d90:	e009      	b.n	8007da6 <DNS_ParseDNSReply+0x1c2>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = DNS_SkipNameField( xSet.pucByte,
 8007d92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d96:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff fecb 	bl	8007b38 <DNS_SkipNameField>
 8007da2:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
                                                      xSet.uxSourceBytesRemaining );
                    }

                    /* Check for a malformed response. */
                    if( uxResult == 0U )
 8007da6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d103      	bne.n	8007db6 <DNS_ParseDNSReply+0x1d2>
                    {
                        xReturn = pdFALSE;
 8007dae:	2300      	movs	r3, #0
 8007db0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8007db4:	e043      	b.n	8007e3e <DNS_ParseDNSReply+0x25a>
                    }

                    uxBytesRead += uxResult;
 8007db6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8007dba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    xSet.pucByte = &( xSet.pucByte[ uxResult ] );
 8007dc4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007dc8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8007dcc:	4413      	add	r3, r2
 8007dce:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                    xSet.uxSourceBytesRemaining -= uxResult;
 8007dd2:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8007dd6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                    /* Check the remaining buffer size. */
                    if( xSet.uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8007de0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d91b      	bls.n	8007e20 <DNS_ParseDNSReply+0x23c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            /* usChar2u16 returns value in host endianness. */
                            xSet.usType = usChar2u16( xSet.pucByte );
 8007de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dec:	4618      	mov	r0, r3
 8007dee:	f002 fa58 	bl	800a2a2 <usChar2u16>
 8007df2:	4603      	mov	r3, r0
 8007df4:	f8a7 3158 	strh.w	r3, [r7, #344]	@ 0x158
                            xSet.usClass = usChar2u16( &( xSet.pucByte[ 2 ] ) );
 8007df8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dfc:	3302      	adds	r3, #2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f002 fa4f 	bl	800a2a2 <usChar2u16>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
                        }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        xSet.pucByte = &( xSet.pucByte[ sizeof( uint32_t ) ] );
 8007e0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e0e:	3304      	adds	r3, #4
 8007e10:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                        xSet.uxSourceBytesRemaining -= sizeof( uint32_t );
 8007e14:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007e18:	3b04      	subs	r3, #4
 8007e1a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8007e1e:	e003      	b.n	8007e28 <DNS_ParseDNSReply+0x244>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 8007e20:	2300      	movs	r3, #0
 8007e22:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8007e26:	e00a      	b.n	8007e3e <DNS_ParseDNSReply+0x25a>
                for( x = 0U; x < xSet.usQuestions; x++ )
 8007e28:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8007e32:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8007e36:	f8b7 21d6 	ldrh.w	r2, [r7, #470]	@ 0x1d6
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d394      	bcc.n	8007d68 <DNS_ParseDNSReply+0x184>
                    }
                } /* for( x = 0U; x < xSet.usQuestions; x++ ) */

                if( xReturn == pdFALSE )
 8007e3e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 8265 	beq.w	8008312 <DNS_ParseDNSReply+0x72e>
                {
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                if( xIsResponse == pdTRUE )
 8007e48:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d10d      	bne.n	8007e6c <DNS_ParseDNSReply+0x288>
                {
                    /* Search through the answer records. */
                    ulIPAddress = parseDNSAnswer( &( xSet ), ppxAddressInfo, &uxBytesRead );
 8007e50:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8007e54:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007e58:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8007e5c:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8007e60:	6819      	ldr	r1, [r3, #0]
 8007e62:	f000 fa73 	bl	800834c <parseDNSAnswer>
 8007e66:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
 8007e6a:	e255      	b.n	8008318 <DNS_ParseDNSReply+0x734>

                    /* No need to check that pcRequestedName != NULL since sQuestions != 0, then
                     * pcRequestedName is assigned with this statement
                     * "pcRequestedName = ( char * ) pucByte;" */
                    /* No need to check that usQuestions != 0, since the check is done before */
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8007e6c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d004      	beq.n	8007e7e <DNS_ParseDNSReply+0x29a>
 8007e74:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007e78:	2b1c      	cmp	r3, #28
 8007e7a:	f040 824d 	bne.w	8008318 <DNS_ParseDNSReply+0x734>
                             ( xSet.usClass == dnsCLASS_IN ) )
 8007e7e:	f8b7 3168 	ldrh.w	r3, [r7, #360]	@ 0x168
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	f040 8248 	bne.w	8008318 <DNS_ParseDNSReply+0x734>
                    {
                        NetworkBufferDescriptor_t * pxNetworkBuffer;
                        NetworkEndPoint_t * pxEndPoint, xEndPoint;
                        size_t uxUDPOffset;

                        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8007e88:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007e8c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007e90:	6818      	ldr	r0, [r3, #0]
 8007e92:	f001 ff9f 	bl	8009dd4 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8007e96:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

                        /* This test could be replaced with a assert(). */
                        if( pxNetworkBuffer == NULL )
 8007e9a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d103      	bne.n	8007eaa <DNS_ParseDNSReply+0x2c6>
                        {
                            /* _HT_ just while testing. When the program gets here,
                             * pucUDPPayloadBuffer was invalid. */
                            FreeRTOS_printf( ( "DNS_ParseDNSReply: pucUDPPayloadBuffer was invalid\n" ) );
 8007ea2:	48c4      	ldr	r0, [pc, #784]	@ (80081b4 <DNS_ParseDNSReply+0x5d0>)
 8007ea4:	f019 fd08 	bl	80218b8 <lUDPLoggingPrintf>
                            break;
 8007ea8:	e236      	b.n	8008318 <DNS_ParseDNSReply+0x734>
                        }

                        uxUDPOffset = ( size_t ) ( pucUDPPayloadBuffer - pxNetworkBuffer->pucEthernetBuffer );
 8007eaa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb0:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007eb4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8007eb8:	6812      	ldr	r2, [r2, #0]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
                        configASSERT( ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv4 ) || ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv6 ) );
 8007ec0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8007ec4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ec6:	d003      	beq.n	8007ed0 <DNS_ParseDNSReply+0x2ec>
 8007ec8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8007ecc:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ece:	d101      	bne.n	8007ed4 <DNS_ParseDNSReply+0x2f0>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e000      	b.n	8007ed6 <DNS_ParseDNSReply+0x2f2>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d104      	bne.n	8007ee4 <DNS_ParseDNSReply+0x300>
 8007eda:	f240 11bb 	movw	r1, #443	@ 0x1bb
 8007ede:	48b6      	ldr	r0, [pc, #728]	@ (80081b8 <DNS_ParseDNSReply+0x5d4>)
 8007ee0:	f7f9 fbc4 	bl	800166c <vAssertCalled>

                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8007ee4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 8213 	beq.w	8008316 <DNS_ParseDNSReply+0x732>
                        {
                            break;
                        }

                        pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8007ef0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

                        /* Make a copy of the end-point because xApplicationDNSQueryHook() is allowed
                         * to write into it. */
                        ( void ) memcpy( &( xEndPoint ), pxEndPoint, sizeof( xEndPoint ) );
 8007efa:	f107 0314 	add.w	r3, r7, #20
 8007efe:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8007f02:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8007f06:	4618      	mov	r0, r3
 8007f08:	f019 fef2 	bl	8021cf0 <memcpy>

                        #if ( ipconfigUSE_IPv6 != 0 )
                        {
                            /*logging*/
                            FreeRTOS_printf( ( "prvParseDNS_HandleLLMNRRequest[%s]: type %04X\n", xSet.pcName, xSet.usType ) );
 8007f0c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007f10:	461a      	mov	r2, r3
 8007f12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007f16:	3334      	adds	r3, #52	@ 0x34
 8007f18:	4619      	mov	r1, r3
 8007f1a:	48a8      	ldr	r0, [pc, #672]	@ (80081bc <DNS_ParseDNSReply+0x5d8>)
 8007f1c:	f019 fccc 	bl	80218b8 <lUDPLoggingPrintf>

                            xEndPoint.usDNSType = ( uint8_t ) xSet.usType;
 8007f20:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007f2a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007f2e:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        /* If this is not a reply to our DNS request, it might be an mDNS or an LLMNR
                         * request. Ask the application if it uses the name. */
                        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                            xDNSHookReturn = xApplicationDNSQueryHook( xSet.pcName );
 8007f32:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007f36:	3334      	adds	r3, #52	@ 0x34
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7f9 fc2b 	bl	8001794 <xApplicationDNSQueryHook>
 8007f3e:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8
                            xDNSHookReturn = xApplicationDNSQueryHook_Multi( &xEndPoint, xSet.pcName );
                        #endif

                        /* During the early stages of boot or after a DHCP lease expires, our end-point
                         * may have an IP address of 0.0.0.0. Do not respond to name queries with that address. */
                        if( ( xDNSHookReturn != pdFALSE ) && ( xEndPoint.bits.bIPv6 == pdFALSE ) && ( xEndPoint.ipv4_settings.ulIPAddress == 0U ) )
 8007f42:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d014      	beq.n	8007f74 <DNS_ParseDNSReply+0x390>
 8007f4a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007f4e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007f52:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007f56:	f003 0304 	and.w	r3, r3, #4
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d109      	bne.n	8007f74 <DNS_ParseDNSReply+0x390>
 8007f60:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007f64:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d102      	bne.n	8007f74 <DNS_ParseDNSReply+0x390>
                        {
                            xDNSHookReturn = pdFALSE;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                        }

                        if( xDNSHookReturn != pdFALSE )
 8007f74:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 81cd 	beq.w	8008318 <DNS_ParseDNSReply+0x734>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 8007f84:	2300      	movs	r3, #0
 8007f86:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            size_t uxExtraLength;

                            if( xBufferAllocFixedSize == pdFALSE )
 8007f8a:	4b8d      	ldr	r3, [pc, #564]	@ (80081c0 <DNS_ParseDNSReply+0x5dc>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d164      	bne.n	800805c <DNS_ParseDNSReply+0x478>
                            {
                                size_t uxDataLength = uxBufferLength +
                                                      sizeof( UDPHeader_t ) +
                                                      sizeof( EthernetHeader_t ) +
                                                      uxIPHeaderSizePacket( pxNetworkBuffer );
 8007f92:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8007f96:	f001 fbd7 	bl	8009748 <uxIPHeaderSizePacket>
 8007f9a:	4602      	mov	r2, r0
                                                      sizeof( EthernetHeader_t ) +
 8007f9c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007fa0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4413      	add	r3, r2
                                size_t uxDataLength = uxBufferLength +
 8007fa8:	3316      	adds	r3, #22
 8007faa:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8007fae:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007fb2:	2b1c      	cmp	r3, #28
 8007fb4:	d103      	bne.n	8007fbe <DNS_ParseDNSReply+0x3da>
                                    {
                                        uxExtraLength = sizeof( LLMNRAnswer_t ) + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress );
 8007fb6:	231c      	movs	r3, #28
 8007fb8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8007fbc:	e002      	b.n	8007fc4 <DNS_ParseDNSReply+0x3e0>
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                #if ( ipconfigUSE_IPv4 != 0 )
                                {
                                    uxExtraLength = sizeof( LLMNRAnswer_t );
 8007fbe:	2310      	movs	r3, #16
 8007fc0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
                                    /* do nothing, coverity happy */
                                }
                                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 8007fc4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007fc8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8007fcc:	629a      	str	r2, [r3, #40]	@ 0x28
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer,
 8007fce:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8007fd2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8007fd6:	4413      	add	r3, r2
 8007fd8:	4619      	mov	r1, r3
 8007fda:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8007fde:	f001 fe65 	bl	8009cac <pxDuplicateNetworkBufferWithDescriptor>
 8007fe2:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
                                                                                      uxDataLength +
                                                                                      uxExtraLength );

                                if( pxNewBuffer != NULL )
 8007fe6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d032      	beq.n	8008054 <DNS_ParseDNSReply+0x470>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( xSet.pucByte - pucUDPPayloadBuffer );
 8007fee:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007ff2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007ff6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) xSet.pcRequestedName ) - pucUDPPayloadBuffer );
 8008002:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8008006:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800800a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

                                    pxNetworkBuffer = pxNewBuffer;
 8008016:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800801a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 800801e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008022:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008024:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008028:	4413      	add	r3, r2
 800802a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

                                    xSet.pucByte = &( pucNewBuffer[ xOffset1 ] );
 800802e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8008032:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008036:	4413      	add	r3, r2
 8008038:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                                    xSet.pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 800803c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8008040:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008044:	4413      	add	r3, r2
 8008046:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                                    xSet.pxDNSMessageHeader = ( ( DNSMessage_t * ) pucNewBuffer );
 800804a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800804e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8008052:	e00b      	b.n	800806c <DNS_ParseDNSReply+0x488>
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 8008054:	2300      	movs	r3, #0
 8008056:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800805a:	e007      	b.n	800806c <DNS_ParseDNSReply+0x488>
                                }
                            }
                            else
                            {
                                pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 800805c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008060:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008062:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008066:	4413      	add	r3, r2
 8008068:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            }

                            if( ( pxNetworkBuffer != NULL ) )
 800806c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 8151 	beq.w	8008318 <DNS_ParseDNSReply+0x734>
                            {
                                pxAnswer = ( ( LLMNRAnswer_t * ) xSet.pucByte );
 8008076:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800807a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_RESPONSE ); /* Set the response flag */
 800807e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008082:	3302      	adds	r3, #2
 8008084:	2280      	movs	r2, #128	@ 0x80
 8008086:	701a      	strb	r2, [r3, #0]
 8008088:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800808c:	3303      	adds	r3, #3
 800808e:	2200      	movs	r2, #0
 8008090:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                        /* Provide a single answer */
 8008092:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008096:	3306      	adds	r3, #6
 8008098:	2200      	movs	r2, #0
 800809a:	701a      	strb	r2, [r3, #0]
 800809c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80080a0:	3307      	adds	r3, #7
 80080a2:	2201      	movs	r2, #1
 80080a4:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                   /* No authority */
 80080a6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80080aa:	3308      	adds	r3, #8
 80080ac:	2200      	movs	r2, #0
 80080ae:	701a      	strb	r2, [r3, #0]
 80080b0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80080b4:	3309      	adds	r3, #9
 80080b6:	2200      	movs	r2, #0
 80080b8:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                  /* No additional info */
 80080ba:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80080be:	330a      	adds	r3, #10
 80080c0:	2200      	movs	r2, #0
 80080c2:	701a      	strb	r2, [r3, #0]
 80080c4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80080c8:	330b      	adds	r3, #11
 80080ca:	2200      	movs	r2, #0
 80080cc:	701a      	strb	r2, [r3, #0]

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 80080ce:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80080d2:	22c0      	movs	r2, #192	@ 0xc0
 80080d4:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( xSet.pcRequestedName - ( char * ) pucNewBuffer );
 80080d6:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80080da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80080e6:	705a      	strb	r2, [r3, #1]

                                vSetField16( pxAnswer, LLMNRAnswer_t, usType, xSet.usType );  /* Type A or AAAA: host */
 80080e8:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80080ec:	0a1b      	lsrs	r3, r3, #8
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80080f4:	3302      	adds	r3, #2
 80080f6:	b2d2      	uxtb	r2, r2
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	f8b7 2158 	ldrh.w	r2, [r7, #344]	@ 0x158
 80080fe:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008102:	3303      	adds	r3, #3
 8008104:	b2d2      	uxtb	r2, r2
 8008106:	701a      	strb	r2, [r3, #0]
                                vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN ); /* 1: Class IN */
 8008108:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800810c:	3304      	adds	r3, #4
 800810e:	2200      	movs	r2, #0
 8008110:	701a      	strb	r2, [r3, #0]
 8008112:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008116:	3305      	adds	r3, #5
 8008118:	2201      	movs	r2, #1
 800811a:	701a      	strb	r2, [r3, #0]
                                vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 800811c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008120:	3306      	adds	r3, #6
 8008122:	2200      	movs	r2, #0
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800812a:	3307      	adds	r3, #7
 800812c:	2200      	movs	r2, #0
 800812e:	701a      	strb	r2, [r3, #0]
 8008130:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008134:	3308      	adds	r3, #8
 8008136:	2201      	movs	r2, #1
 8008138:	701a      	strb	r2, [r3, #0]
 800813a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800813e:	3309      	adds	r3, #9
 8008140:	222c      	movs	r2, #44	@ 0x2c
 8008142:	701a      	strb	r2, [r3, #0]

                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( xSet.pucByte - pucNewBuffer ) );
 8008144:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008148:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	b29b      	uxth	r3, r3
 8008150:	3310      	adds	r3, #16
 8008152:	b29b      	uxth	r3, r3
 8008154:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8008158:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 800815c:	2b1c      	cmp	r3, #28
 800815e:	d131      	bne.n	80081c4 <DNS_ParseDNSReply+0x5e0>
                                    {
                                        size_t uxDistance;
                                        vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ipSIZE_OF_IPv6_ADDRESS );
 8008160:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008164:	330a      	adds	r3, #10
 8008166:	2200      	movs	r2, #0
 8008168:	701a      	strb	r2, [r3, #0]
 800816a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800816e:	330b      	adds	r3, #11
 8008170:	2210      	movs	r2, #16
 8008172:	701a      	strb	r2, [r3, #0]
                                        ( void ) memcpy( &( pxAnswer->ulIPAddress ), xEndPoint.ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8008174:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008178:	f103 020c 	add.w	r2, r3, #12
 800817c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008180:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008184:	4615      	mov	r5, r2
 8008186:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 800818a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800818c:	6028      	str	r0, [r5, #0]
 800818e:	6069      	str	r1, [r5, #4]
 8008190:	60aa      	str	r2, [r5, #8]
 8008192:	60eb      	str	r3, [r5, #12]
                                        uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8008194:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008198:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                                        /* An extra 12 bytes will be sent compared to an A-record. */
                                        usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress ) );
 80081a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	331c      	adds	r3, #28
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
 80081b0:	e09a      	b.n	80082e8 <DNS_ParseDNSReply+0x704>
 80081b2:	bf00      	nop
 80081b4:	08024120 	.word	0x08024120
 80081b8:	08024154 	.word	0x08024154
 80081bc:	08024188 	.word	0x08024188
 80081c0:	0802703c 	.word	0x0802703c
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                {
                                    size_t uxDistance;
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ( uint16_t ) sizeof( pxAnswer->ulIPAddress ) );
 80081c4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80081c8:	330a      	adds	r3, #10
 80081ca:	2200      	movs	r2, #0
 80081cc:	701a      	strb	r2, [r3, #0]
 80081ce:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80081d2:	330b      	adds	r3, #11
 80081d4:	2204      	movs	r2, #4
 80081d6:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( xEndPoint.ipv4_settings.ulIPAddress ) );
 80081d8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80081dc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	061a      	lsls	r2, r3, #24
 80081e4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80081e8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	021b      	lsls	r3, r3, #8
 80081f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80081f4:	431a      	orrs	r2, r3
 80081f6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80081fa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	0a1b      	lsrs	r3, r3, #8
 8008202:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008206:	431a      	orrs	r2, r3
 8008208:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800820c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	0e1b      	lsrs	r3, r3, #24
 8008214:	4313      	orrs	r3, r2
 8008216:	0e1a      	lsrs	r2, r3, #24
 8008218:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800821c:	330c      	adds	r3, #12
 800821e:	b2d2      	uxtb	r2, r2
 8008220:	701a      	strb	r2, [r3, #0]
 8008222:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008226:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	061a      	lsls	r2, r3, #24
 800822e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008232:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	021b      	lsls	r3, r3, #8
 800823a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800823e:	431a      	orrs	r2, r3
 8008240:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008244:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	0a1b      	lsrs	r3, r3, #8
 800824c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008250:	431a      	orrs	r2, r3
 8008252:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008256:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	0e1b      	lsrs	r3, r3, #24
 800825e:	4313      	orrs	r3, r2
 8008260:	0c1a      	lsrs	r2, r3, #16
 8008262:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008266:	330d      	adds	r3, #13
 8008268:	b2d2      	uxtb	r2, r2
 800826a:	701a      	strb	r2, [r3, #0]
 800826c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008270:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	061a      	lsls	r2, r3, #24
 8008278:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800827c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	021b      	lsls	r3, r3, #8
 8008284:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008288:	431a      	orrs	r2, r3
 800828a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800828e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	0a1b      	lsrs	r3, r3, #8
 8008296:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800829a:	431a      	orrs	r2, r3
 800829c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80082a0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	0e1b      	lsrs	r3, r3, #24
 80082a8:	4313      	orrs	r3, r2
 80082aa:	0a1a      	lsrs	r2, r3, #8
 80082ac:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80082b0:	330e      	adds	r3, #14
 80082b2:	b2d2      	uxtb	r2, r2
 80082b4:	701a      	strb	r2, [r3, #0]
 80082b6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80082ba:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	0e1a      	lsrs	r2, r3, #24
 80082c2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80082c6:	330f      	adds	r3, #15
 80082c8:	b2d2      	uxtb	r2, r2
 80082ca:	701a      	strb	r2, [r3, #0]
                                    uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 80082cc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80082d0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
                                    usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance );
 80082da:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80082de:	b29b      	uxth	r3, r3
 80082e0:	3310      	adds	r3, #16
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
                                }

                                prepareReplyDNSMessage( pxNetworkBuffer, usLength );
 80082e8:	f9b7 31ba 	ldrsh.w	r3, [r7, #442]	@ 0x1ba
 80082ec:	4619      	mov	r1, r3
 80082ee:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 80082f2:	f000 fa21 	bl	8008738 <prepareReplyDNSMessage>
                                /* This function will fill in the eth addresses and send the packet */
                                vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 80082f6:	2100      	movs	r1, #0
 80082f8:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 80082fc:	f001 f924 	bl	8009548 <vReturnEthernetFrame>

                                if( pxNewBuffer != NULL )
 8008300:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008304:	2b00      	cmp	r3, #0
 8008306:	d007      	beq.n	8008318 <DNS_ParseDNSReply+0x734>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8008308:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 800830c:	f00e fc2c 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
 8008310:	e002      	b.n	8008318 <DNS_ParseDNSReply+0x734>
                    break;
 8008312:	bf00      	nop
 8008314:	e000      	b.n	8008318 <DNS_ParseDNSReply+0x734>
                            break;
 8008316:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 8008318:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d103      	bne.n	8008328 <DNS_ParseDNSReply+0x744>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = ( uint32_t ) dnsPARSE_ERROR;
 8008320:	2300      	movs	r3, #0
 8008322:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008326:	e009      	b.n	800833c <DNS_ParseDNSReply+0x758>
        }
        else if( xExpected == pdFALSE )
 8008328:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800832c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d102      	bne.n	800833c <DNS_ParseDNSReply+0x758>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        else
        {
            /* The IP-address found will be returned. */
        }

        return ulIPAddress;
 800833c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 8008340:	4618      	mov	r0, r3
 8008342:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8008346:	46bd      	mov	sp, r7
 8008348:	bdb0      	pop	{r4, r5, r7, pc}
 800834a:	bf00      	nop

0800834c <parseDNSAnswer>:
 * @return pdTRUE when successful, otherwise pdFALSE.
 */
    uint32_t parseDNSAnswer( ParseSet_t * pxSet,
                             struct freertos_addrinfo ** ppxAddressInfo,
                             size_t * uxBytesRead )
    {
 800834c:	b590      	push	{r4, r7, lr}
 800834e:	b0a7      	sub	sp, #156	@ 0x9c
 8008350:	af02      	add	r7, sp, #8
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
        uint16_t x;
        size_t uxResult;
        uint32_t ulReturnIPAddress = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 800835e:	2304      	movs	r3, #4
 8008360:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        BaseType_t xReturn = pdTRUE;
 8008364:	2301      	movs	r3, #1
 8008366:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        IPv46_Address_t xIP_Address;

        struct freertos_addrinfo * pxNewAddress = NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for( x = 0U; x < pxSet->usAnswers; x++ )
 8008370:	2300      	movs	r3, #0
 8008372:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008376:	e1c1      	b.n	80086fc <parseDNSAnswer+0x3b0>
        {
            BaseType_t xDoAccept = pdFALSE;
 8008378:	2300      	movs	r3, #0
 800837a:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if( pxSet->usNumARecordsStored >= usCount )
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008380:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8008384:	429a      	cmp	r2, r3
 8008386:	f240 81c1 	bls.w	800870c <parseDNSAnswer+0x3c0>
            {
                /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                break;
            }

            uxResult = DNS_SkipNameField( pxSet->pucByte,
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	4619      	mov	r1, r3
 8008394:	4610      	mov	r0, r2
 8008396:	f7ff fbcf 	bl	8007b38 <DNS_SkipNameField>
 800839a:	6778      	str	r0, [r7, #116]	@ 0x74
                                          pxSet->uxSourceBytesRemaining );

            /* Check for a malformed response. */
            if( uxResult == 0U )
 800839c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d103      	bne.n	80083aa <parseDNSAnswer+0x5e>
            {
                xReturn = pdFALSE;
 80083a2:	2300      	movs	r3, #0
 80083a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 80083a8:	e1b1      	b.n	800870e <parseDNSAnswer+0x3c2>
            }

            if( uxBytesRead != NULL )
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d005      	beq.n	80083bc <parseDNSAnswer+0x70>
            {
                *uxBytesRead += uxResult;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083b6:	441a      	add	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	601a      	str	r2, [r3, #0]
            }

            pxSet->pucByte = &( pxSet->pucByte[ uxResult ] );
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	68da      	ldr	r2, [r3, #12]
 80083c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083c2:	441a      	add	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	60da      	str	r2, [r3, #12]
            pxSet->uxSourceBytesRemaining -= uxResult;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	695a      	ldr	r2, [r3, #20]
 80083cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083ce:	1ad2      	subs	r2, r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	615a      	str	r2, [r3, #20]

            /* Is there enough data for an IPv4 A record answer and, if so,
             * is this an A record? */
            if( pxSet->uxSourceBytesRemaining < sizeof( uint16_t ) )
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d803      	bhi.n	80083e4 <parseDNSAnswer+0x98>
            {
                xReturn = pdFALSE;
 80083dc:	2300      	movs	r3, #0
 80083de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 80083e2:	e194      	b.n	800870e <parseDNSAnswer+0x3c2>
            }

            pxSet->usType = usChar2u16( pxSet->pucByte );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f001 ff5a 	bl	800a2a2 <usChar2u16>
 80083ee:	4603      	mov	r3, r0
 80083f0:	461a      	mov	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	831a      	strh	r2, [r3, #24]

            if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	8b1b      	ldrh	r3, [r3, #24]
 80083fa:	2b1c      	cmp	r3, #28
 80083fc:	d10c      	bne.n	8008418 <parseDNSAnswer+0xcc>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv6_ADDRESS;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2210      	movs	r2, #16
 8008402:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	695a      	ldr	r2, [r3, #20]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6a1b      	ldr	r3, [r3, #32]
 800840c:	330a      	adds	r3, #10
 800840e:	429a      	cmp	r2, r3
 8008410:	d323      	bcc.n	800845a <parseDNSAnswer+0x10e>
                {
                    xDoAccept = pdTRUE;
 8008412:	2301      	movs	r3, #1
 8008414:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008416:	e020      	b.n	800845a <parseDNSAnswer+0x10e>
                }
            }
            else if( pxSet->usType == ( uint16_t ) dnsTYPE_A_HOST )
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	8b1b      	ldrh	r3, [r3, #24]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d11c      	bne.n	800845a <parseDNSAnswer+0x10e>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2204      	movs	r2, #4
 8008424:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	695a      	ldr	r2, [r3, #20]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	330a      	adds	r3, #10
 8008430:	429a      	cmp	r2, r3
 8008432:	d312      	bcc.n	800845a <parseDNSAnswer+0x10e>
                     * invoke the user callback and also store this invalid address in our cache. */
                    void * pvCopyDest;
                    const void * pvCopySource;
                    uint32_t ulTestAddress;

                    pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	330a      	adds	r3, #10
 800843a:	673b      	str	r3, [r7, #112]	@ 0x70
                    pvCopyDest = &( ulTestAddress );
 800843c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008440:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	461a      	mov	r2, r3
 8008448:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800844a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800844c:	f019 fc50 	bl	8021cf0 <memcpy>

                    if( ulTestAddress != 0U )
 8008450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <parseDNSAnswer+0x10e>
                    {
                        xDoAccept = pdTRUE;
 8008456:	2301      	movs	r3, #1
 8008458:	67fb      	str	r3, [r7, #124]	@ 0x7c
            {
                /* Unknown host type, AAAA nor A.
                 * 'xDoAccept' was already initialised as pdFALSE. */
            }

            if( xDoAccept != pdFALSE )
 800845a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 810d 	beq.w	800867c <parseDNSAnswer+0x330>
                 * fields of the structure. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Sanity check the data length of an IPv4 answer. */
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8008468:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800846a:	891b      	ldrh	r3, [r3, #8]
 800846c:	b29b      	uxth	r3, r3
 800846e:	021b      	lsls	r3, r3, #8
 8008470:	b21a      	sxth	r2, r3
 8008472:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008474:	891b      	ldrh	r3, [r3, #8]
 8008476:	b29b      	uxth	r3, r3
 8008478:	0a1b      	lsrs	r3, r3, #8
 800847a:	b29b      	uxth	r3, r3
 800847c:	b21b      	sxth	r3, r3
 800847e:	4313      	orrs	r3, r2
 8008480:	b21a      	sxth	r2, r3
                    ( uint16_t ) pxSet->uxAddressLength )
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6a1b      	ldr	r3, [r3, #32]
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8008486:	b21b      	sxth	r3, r3
 8008488:	429a      	cmp	r2, r3
 800848a:	f040 80d0 	bne.w	800862e <parseDNSAnswer+0x2e2>
                {
                    if( pxSet->uxAddressLength == ipSIZE_OF_IPv6_ADDRESS ) /*No check needed for pxSet->usType as uxAddressLength is set based on usType*/
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	2b10      	cmp	r3, #16
 8008494:	d11c      	bne.n	80084d0 <parseDNSAnswer+0x184>
                    {
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
                                         &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] ),
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	330a      	adds	r3, #10
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
 800849c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80084a0:	6818      	ldr	r0, [r3, #0]
 80084a2:	6859      	ldr	r1, [r3, #4]
 80084a4:	689a      	ldr	r2, [r3, #8]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                         ipSIZE_OF_IPv6_ADDRESS );

                        if( ppxAddressInfo != NULL )
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d009      	beq.n	80084c4 <parseDNSAnswer+0x178>
                        {
                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET6, xIP_Address.xIPAddress.xIP_IPv6.ucBytes );
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	3334      	adds	r3, #52	@ 0x34
 80084b4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80084b8:	210a      	movs	r1, #10
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe fe24 	bl	8007108 <pxNew_AddrInfo>
 80084c0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIs_IPv6 = pdTRUE;
 80084c4:	2301      	movs	r3, #1
 80084c6:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Return non-zero to inform the caller that a valid
                         * IPv6 address was found. */
                        pxSet->ulIPAddress = 1U;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2201      	movs	r2, #1
 80084cc:	61da      	str	r2, [r3, #28]
 80084ce:	e021      	b.n	8008514 <parseDNSAnswer+0x1c8>
                        /*
                         * Use helper variables for memcpy() to remain
                         * compliant with MISRA Rule 21.15.  These should be
                         * optimized away.
                         */
                        pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	330a      	adds	r3, #10
 80084d6:	663b      	str	r3, [r7, #96]	@ 0x60
                        pvCopyDest = &( pxSet->ulIPAddress );
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	331c      	adds	r3, #28
 80084dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	461a      	mov	r2, r3
 80084e4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80084e6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80084e8:	f019 fc02 	bl	8021cf0 <memcpy>

                        if( ppxAddressInfo != NULL )
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00b      	beq.n	800850a <parseDNSAnswer+0x1be>
                        {
                            const uint8_t * ucBytes = ( uint8_t * ) &( pxSet->ulIPAddress );
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	331c      	adds	r3, #28
 80084f6:	65bb      	str	r3, [r7, #88]	@ 0x58

                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET4, ucBytes );
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	3334      	adds	r3, #52	@ 0x34
 80084fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084fe:	2102      	movs	r1, #2
 8008500:	4618      	mov	r0, r3
 8008502:	f7fe fe01 	bl	8007108 <pxNew_AddrInfo>
 8008506:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIPAddress.ulIP_IPv4 = pxSet->ulIPAddress;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	643b      	str	r3, [r7, #64]	@ 0x40
                        xIP_Address.xIs_IPv6 = pdFALSE;
 8008510:	2300      	movs	r3, #0
 8008512:	653b      	str	r3, [r7, #80]	@ 0x50
                    }

                    if( pxNewAddress != NULL )
 8008514:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008518:	2b00      	cmp	r3, #0
 800851a:	d013      	beq.n	8008544 <parseDNSAnswer+0x1f8>
                    {
                        if( *( ppxAddressInfo ) == NULL )
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d104      	bne.n	800852e <parseDNSAnswer+0x1e2>
                        {
                            /* For the first address found. */
                            *( ppxAddressInfo ) = pxNewAddress;
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	e004      	b.n	8008538 <parseDNSAnswer+0x1ec>
                        }
                        else
                        {
                            /* For the next address found. */
                            *( pxSet->ppxLastAddress ) = pxNewAddress;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008532:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008536:	601a      	str	r2, [r3, #0]
                        }

                        pxSet->ppxLastAddress = &( pxNewAddress->ai_next );
 8008538:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800853c:	f103 021c 	add.w	r2, r3, #28
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	649a      	str	r2, [r3, #72]	@ 0x48

                    #if ( ipconfigDNS_USE_CALLBACKS == 1 )
                    {
                        BaseType_t xCallbackResult;

                        xCallbackResult = xDNSDoCallback( pxSet, ( ppxAddressInfo != NULL ) ? *( ppxAddressInfo ) : NULL );
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <parseDNSAnswer+0x204>
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	e000      	b.n	8008552 <parseDNSAnswer+0x206>
 8008550:	2300      	movs	r3, #0
 8008552:	4619      	mov	r1, r3
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f7ff f979 	bl	800784c <xDNSDoCallback>
 800855a:	6578      	str	r0, [r7, #84]	@ 0x54

                        /* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
                        if( xCallbackResult != pdFALSE )
 800855c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <parseDNSAnswer+0x21c>
                        {
                            /* This device has requested this DNS look-up.
                             * The result may be stored in the DNS cache. */
                            pxSet->xDoStore = pdTRUE;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2201      	movs	r2, #1
 8008566:	631a      	str	r2, [r3, #48]	@ 0x30
                    {
                        char cBuffer[ 40 ];

                        /* The reply will only be stored in the DNS cache when the
                         * request was issued by this device. */
                        if( pxSet->xDoStore != pdFALSE )
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800856c:	2b00      	cmp	r3, #0
 800856e:	d011      	beq.n	8008594 <parseDNSAnswer+0x248>
                        {
                            ( void ) FreeRTOS_dns_update(
                                pxSet->pcName,
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f103 0034 	add.w	r0, r3, #52	@ 0x34
                                &xIP_Address,
                                pxDNSAnswerRecord->ulTTL,
 8008576:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008578:	685a      	ldr	r2, [r3, #4]
                            ( void ) FreeRTOS_dns_update(
 800857a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800857e:	2300      	movs	r3, #0
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	2300      	movs	r3, #0
 8008584:	f7fe fe85 	bl	8007292 <FreeRTOS_dns_update>
                                pdFALSE,
                                NULL );
                            pxSet->usNumARecordsStored++; /* Track # of A records stored */
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800858c:	3301      	adds	r3, #1
 800858e:	b29a      	uxth	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	849a      	strh	r2, [r3, #36]	@ 0x24
                        }

                        if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	8b1b      	ldrh	r3, [r3, #24]
 8008598:	2b1c      	cmp	r3, #28
 800859a:	d11f      	bne.n	80085dc <parseDNSAnswer+0x290>
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) xIP_Address.xIPAddress.xIP_IPv6.ucBytes, cBuffer, sizeof( cBuffer ) );
 800859c:	f107 0214 	add.w	r2, r7, #20
 80085a0:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80085a4:	2328      	movs	r3, #40	@ 0x28
 80085a6:	200a      	movs	r0, #10
 80085a8:	f006 fb6c 	bl	800ec84 <FreeRTOS_inet_ntop>
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	4618      	mov	r0, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <parseDNSAnswer+0x27c>
 80085c4:	4b58      	ldr	r3, [pc, #352]	@ (8008728 <parseDNSAnswer+0x3dc>)
 80085c6:	e000      	b.n	80085ca <parseDNSAnswer+0x27e>
 80085c8:	4b58      	ldr	r3, [pc, #352]	@ (800872c <parseDNSAnswer+0x3e0>)
 80085ca:	f107 0114 	add.w	r1, r7, #20
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	460b      	mov	r3, r1
 80085d2:	4601      	mov	r1, r0
 80085d4:	4856      	ldr	r0, [pc, #344]	@ (8008730 <parseDNSAnswer+0x3e4>)
 80085d6:	f019 f96f 	bl	80218b8 <lUDPLoggingPrintf>
 80085da:	e01f      	b.n	800861c <parseDNSAnswer+0x2d0>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                        else
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
                                                         ( const void * ) &( pxSet->ulIPAddress ),
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f103 011c 	add.w	r1, r3, #28
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
 80085e2:	f107 0214 	add.w	r2, r7, #20
 80085e6:	2328      	movs	r3, #40	@ 0x28
 80085e8:	2002      	movs	r0, #2
 80085ea:	f006 fb4b 	bl	800ec84 <FreeRTOS_inet_ntop>
                                                         cBuffer,
                                                         ( socklen_t ) sizeof( cBuffer ) );
                            /* Show what has happened. */
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	4618      	mov	r0, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <parseDNSAnswer+0x2be>
 8008606:	4b48      	ldr	r3, [pc, #288]	@ (8008728 <parseDNSAnswer+0x3dc>)
 8008608:	e000      	b.n	800860c <parseDNSAnswer+0x2c0>
 800860a:	4b48      	ldr	r3, [pc, #288]	@ (800872c <parseDNSAnswer+0x3e0>)
 800860c:	f107 0114 	add.w	r1, r7, #20
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	460b      	mov	r3, r1
 8008614:	4601      	mov	r1, r0
 8008616:	4846      	ldr	r0, [pc, #280]	@ (8008730 <parseDNSAnswer+0x3e4>)
 8008618:	f019 f94e 	bl	80218b8 <lUDPLoggingPrintf>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                    }
                    #endif /* ipconfigUSE_DNS_CACHE */

                    if( ulReturnIPAddress == 0U )
 800861c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008620:	2b00      	cmp	r3, #0
 8008622:	d119      	bne.n	8008658 <parseDNSAnswer+0x30c>
                    {
                        /* Here pxSet->ulIPAddress should be not equal tp 0 since pxSet->ulIPAddress is copied from
                         * pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] and os verified to be non zero above. */
                        /* Remember the first IP-address that is found. */
                        ulReturnIPAddress = pxSet->ulIPAddress;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800862c:	e014      	b.n	8008658 <parseDNSAnswer+0x30c>
                    }
                }
                else
                {
                    FreeRTOS_printf( ( "DNS sanity check failed: %u != %u\n",
 800862e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008630:	891b      	ldrh	r3, [r3, #8]
 8008632:	b29b      	uxth	r3, r3
 8008634:	021b      	lsls	r3, r3, #8
 8008636:	b21a      	sxth	r2, r3
 8008638:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800863a:	891b      	ldrh	r3, [r3, #8]
 800863c:	b29b      	uxth	r3, r3
 800863e:	0a1b      	lsrs	r3, r3, #8
 8008640:	b29b      	uxth	r3, r3
 8008642:	b21b      	sxth	r3, r3
 8008644:	4313      	orrs	r3, r2
 8008646:	b21b      	sxth	r3, r3
 8008648:	b29b      	uxth	r3, r3
 800864a:	4619      	mov	r1, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	461a      	mov	r2, r3
 8008652:	4838      	ldr	r0, [pc, #224]	@ (8008734 <parseDNSAnswer+0x3e8>)
 8008654:	f019 f930 	bl	80218b8 <lUDPLoggingPrintf>
                                       FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ),
                                       ( unsigned ) pxSet->uxAddressLength ) );
                }

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ] );
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	68da      	ldr	r2, [r3, #12]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6a1b      	ldr	r3, [r3, #32]
 8008660:	330a      	adds	r3, #10
 8008662:	441a      	add	r2, r3
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength );
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	695a      	ldr	r2, [r3, #20]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6a1b      	ldr	r3, [r3, #32]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	f1a3 020a 	sub.w	r2, r3, #10
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	615a      	str	r2, [r3, #20]
 800867a:	e03a      	b.n	80086f2 <parseDNSAnswer+0x3a6>
            }
            else if( pxSet->uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	2b09      	cmp	r3, #9
 8008682:	d936      	bls.n	80086f2 <parseDNSAnswer+0x3a6>
                /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	66bb      	str	r3, [r7, #104]	@ 0x68

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f103 020a 	add.w	r2, r3, #10
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	f1a3 020a 	sub.w	r2, r3, #10
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	615a      	str	r2, [r3, #20]

                /* Determine the length of the answer data from the header. */
                usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 80086a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086a4:	891b      	ldrh	r3, [r3, #8]
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	021b      	lsls	r3, r3, #8
 80086aa:	b21a      	sxth	r2, r3
 80086ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086ae:	891b      	ldrh	r3, [r3, #8]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	0a1b      	lsrs	r3, r3, #8
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	b21b      	sxth	r3, r3
 80086b8:	4313      	orrs	r3, r2
 80086ba:	b21b      	sxth	r3, r3
 80086bc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                /* Jump over the answer. */
                if( pxSet->uxSourceBytesRemaining >= usDataLength )
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	695a      	ldr	r2, [r3, #20]
 80086c4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d30e      	bcc.n	80086ea <parseDNSAnswer+0x39e>
                {
                    pxSet->pucByte = &( pxSet->pucByte[ usDataLength ] );
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	68da      	ldr	r2, [r3, #12]
 80086d0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80086d4:	441a      	add	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	60da      	str	r2, [r3, #12]
                    pxSet->uxSourceBytesRemaining -= usDataLength;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	695a      	ldr	r2, [r3, #20]
 80086de:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80086e2:	1ad2      	subs	r2, r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	615a      	str	r2, [r3, #20]
 80086e8:	e003      	b.n	80086f2 <parseDNSAnswer+0x3a6>
                }
                else
                {
                    /* Malformed response. */
                    xReturn = pdFALSE;
 80086ea:	2300      	movs	r3, #0
 80086ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    break;
 80086f0:	e00d      	b.n	800870e <parseDNSAnswer+0x3c2>
        for( x = 0U; x < pxSet->usAnswers; x++ )
 80086f2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80086f6:	3301      	adds	r3, #1
 80086f8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	88db      	ldrh	r3, [r3, #6]
 8008700:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008704:	429a      	cmp	r2, r3
 8008706:	f4ff ae37 	bcc.w	8008378 <parseDNSAnswer+0x2c>
 800870a:	e000      	b.n	800870e <parseDNSAnswer+0x3c2>
                break;
 800870c:	bf00      	nop
            {
                /* Do nothing */
            }
        }

        return ( xReturn != 0 ) ? ulReturnIPAddress : 0U;
 800870e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008712:	2b00      	cmp	r3, #0
 8008714:	d002      	beq.n	800871c <parseDNSAnswer+0x3d0>
 8008716:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800871a:	e000      	b.n	800871e <parseDNSAnswer+0x3d2>
 800871c:	2300      	movs	r3, #0
    }
 800871e:	4618      	mov	r0, r3
 8008720:	3794      	adds	r7, #148	@ 0x94
 8008722:	46bd      	mov	sp, r7
 8008724:	bd90      	pop	{r4, r7, pc}
 8008726:	bf00      	nop
 8008728:	080241b8 	.word	0x080241b8
 800872c:	080241bc 	.word	0x080241bc
 8008730:	080241c4 	.word	0x080241c4
 8008734:	080241fc 	.word	0x080241fc

08008738 <prepareReplyDNSMessage>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the DNS message.
 * @param[in] lNetLength The length of the DNS message.
 */
        void prepareReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                     BaseType_t lNetLength )
        {
 8008738:	b580      	push	{r7, lr}
 800873a:	b08c      	sub	sp, #48	@ 0x30
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;
            NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008746:	62bb      	str	r3, [r7, #40]	@ 0x28
            const size_t uxIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 fffd 	bl	8009748 <uxIPHeaderSizePacket>
 800874e:	6278      	str	r0, [r7, #36]	@ 0x24

            configASSERT( pxEndPoint != NULL );
 8008750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008752:	2b00      	cmp	r3, #0
 8008754:	d104      	bne.n	8008760 <prepareReplyDNSMessage+0x28>
 8008756:	f240 319f 	movw	r1, #927	@ 0x39f
 800875a:	4865      	ldr	r0, [pc, #404]	@ (80088f0 <prepareReplyDNSMessage+0x1b8>)
 800875c:	f7f8 ff86 	bl	800166c <vAssertCalled>
            pxUDPPacket = ( ( UDPPacket_t * )
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008764:	623b      	str	r3, [r7, #32]
                            pxNetworkBuffer->pucEthernetBuffer );
            pxIPHeader = &pxUDPPacket->xIPHeader;
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	330e      	adds	r3, #14
 800876a:	61fb      	str	r3, [r7, #28]

            #if ( ipconfigUSE_IPv6 != 0 )
                if( ( ( uxIPHeaderLength == ipSIZE_OF_IPv6_HEADER ) && ( ( pxIPHeader->ucVersionHeaderLength & 0xf0U ) == 0x60U ) ) )
 800876c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876e:	2b28      	cmp	r3, #40	@ 0x28
 8008770:	d150      	bne.n	8008814 <prepareReplyDNSMessage+0xdc>
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800877a:	2b60      	cmp	r3, #96	@ 0x60
 800877c:	d14a      	bne.n	8008814 <prepareReplyDNSMessage+0xdc>
                {
                    UDPPacket_IPv6_t * xUDPPacket_IPv6;
                    IPHeader_IPv6_t * pxIPHeader_IPv6;

                    xUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008782:	61bb      	str	r3, [r7, #24]
                    pxIPHeader_IPv6 = &( xUDPPacket_IPv6->xIPHeader );
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	330e      	adds	r3, #14
 8008788:	617b      	str	r3, [r7, #20]
                    pxUDPHeader = &xUDPPacket_IPv6->xUDPHeader;
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	3336      	adds	r3, #54	@ 0x36
 800878e:	613b      	str	r3, [r7, #16]

                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	b29b      	uxth	r3, r3
 8008794:	3308      	adds	r3, #8
 8008796:	b29b      	uxth	r3, r3
 8008798:	021b      	lsls	r3, r3, #8
 800879a:	b29a      	uxth	r2, r3
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	b29b      	uxth	r3, r3
 80087a0:	3308      	adds	r3, #8
 80087a2:	0a1b      	lsrs	r3, r3, #8
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	4313      	orrs	r3, r2
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	809a      	strh	r2, [r3, #4]

                    {
                        ( void ) memcpy( pxIPHeader_IPv6->xDestinationAddress.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f103 0018 	add.w	r0, r3, #24
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	3308      	adds	r3, #8
 80087b8:	2210      	movs	r2, #16
 80087ba:	4619      	mov	r1, r3
 80087bc:	f019 fa98 	bl	8021cf0 <memcpy>
                        ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f103 0008 	add.w	r0, r3, #8
 80087c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c8:	3338      	adds	r3, #56	@ 0x38
 80087ca:	2210      	movs	r2, #16
 80087cc:	4619      	mov	r1, r3
 80087ce:	f019 fa8f 	bl	8021cf0 <memcpy>
                    }

                    xUDPPacket_IPv6->xUDPHeader.usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	3308      	adds	r3, #8
 80087d8:	b29b      	uxth	r3, r3
 80087da:	021b      	lsls	r3, r3, #8
 80087dc:	b29a      	uxth	r2, r3
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	3308      	adds	r3, #8
 80087e4:	0a1b      	lsrs	r3, r3, #8
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	4313      	orrs	r3, r2
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	875a      	strh	r2, [r3, #58]	@ 0x3a
                    vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	781a      	ldrb	r2, [r3, #0]
 80087f4:	785b      	ldrb	r3, [r3, #1]
 80087f6:	021b      	lsls	r3, r3, #8
 80087f8:	4313      	orrs	r3, r2
 80087fa:	81fb      	strh	r3, [r7, #14]
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	885b      	ldrh	r3, [r3, #2]
 8008800:	b29a      	uxth	r2, r3
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	801a      	strh	r2, [r3, #0]
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	89fa      	ldrh	r2, [r7, #14]
 800880a:	805a      	strh	r2, [r3, #2]
                    uxDataLength = ( size_t ) lNetLength + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	333e      	adds	r3, #62	@ 0x3e
 8008810:	62fb      	str	r3, [r7, #44]	@ 0x2c
                {
 8008812:	e066      	b.n	80088e2 <prepareReplyDNSMessage+0x1aa>
                }
                else
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            {
                pxUDPHeader = &pxUDPPacket->xUDPHeader;
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	3322      	adds	r3, #34	@ 0x22
 8008818:	613b      	str	r3, [r7, #16]
                /* HT: started using defines like 'ipSIZE_OF_xxx' */
                pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength +
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	b29a      	uxth	r2, r3
 800881e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008820:	b29b      	uxth	r3, r3
 8008822:	4413      	add	r3, r2
 8008824:	b29b      	uxth	r3, r3
 8008826:	3308      	adds	r3, #8
 8008828:	b29b      	uxth	r3, r3
 800882a:	021b      	lsls	r3, r3, #8
 800882c:	b29a      	uxth	r2, r3
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	b29b      	uxth	r3, r3
 8008832:	4619      	mov	r1, r3
 8008834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008836:	440b      	add	r3, r1
 8008838:	3308      	adds	r3, #8
 800883a:	0a1b      	lsrs	r3, r3, #8
 800883c:	b29b      	uxth	r3, r3
 800883e:	4313      	orrs	r3, r2
 8008840:	b29a      	uxth	r2, r3
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	805a      	strh	r2, [r3, #2]
                                                       uxIPHeaderLength +
                                                       ipSIZE_OF_UDP_HEADER );

                /* HT:endian: should not be translated, copying from packet to packet */
                if( pxIPHeader->ulDestinationIPAddress == ipMDNS_IP_ADDRESS )
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	4a2a      	ldr	r2, [pc, #168]	@ (80088f4 <prepareReplyDNSMessage+0x1bc>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d103      	bne.n	8008858 <prepareReplyDNSMessage+0x120>
                {
                    pxIPHeader->ucTimeToLive = ipMDNS_TIME_TO_LIVE;
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	22ff      	movs	r2, #255	@ 0xff
 8008854:	721a      	strb	r2, [r3, #8]
 8008856:	e006      	b.n	8008866 <prepareReplyDNSMessage+0x12e>
                }
                else
                {
                    pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	68da      	ldr	r2, [r3, #12]
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	611a      	str	r2, [r3, #16]
                    pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	2280      	movs	r2, #128	@ 0x80
 8008864:	721a      	strb	r2, [r3, #8]
                }

                pxIPHeader->ulSourceIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8008866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	60da      	str	r2, [r3, #12]
                pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800886e:	4b22      	ldr	r3, [pc, #136]	@ (80088f8 <prepareReplyDNSMessage+0x1c0>)
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	021b      	lsls	r3, r3, #8
 8008874:	b21a      	sxth	r2, r3
 8008876:	4b20      	ldr	r3, [pc, #128]	@ (80088f8 <prepareReplyDNSMessage+0x1c0>)
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	0a1b      	lsrs	r3, r3, #8
 800887c:	b29b      	uxth	r3, r3
 800887e:	b21b      	sxth	r3, r3
 8008880:	4313      	orrs	r3, r2
 8008882:	b21b      	sxth	r3, r3
 8008884:	b29a      	uxth	r2, r3
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	809a      	strh	r2, [r3, #4]
                 * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
                 */
                #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                    pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
                #else
                    pxIPHeader->usFragmentOffset = 0U;
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	2200      	movs	r2, #0
 800888e:	719a      	strb	r2, [r3, #6]
 8008890:	2200      	movs	r2, #0
 8008892:	71da      	strb	r2, [r3, #7]
                #endif
                usPacketIdentifier++;
 8008894:	4b18      	ldr	r3, [pc, #96]	@ (80088f8 <prepareReplyDNSMessage+0x1c0>)
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	3301      	adds	r3, #1
 800889a:	b29a      	uxth	r2, r3
 800889c:	4b16      	ldr	r3, [pc, #88]	@ (80088f8 <prepareReplyDNSMessage+0x1c0>)
 800889e:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength +
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	3308      	adds	r3, #8
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	021b      	lsls	r3, r3, #8
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	3308      	adds	r3, #8
 80088b0:	0a1b      	lsrs	r3, r3, #8
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	4313      	orrs	r3, r2
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	809a      	strh	r2, [r3, #4]
                                                        ipSIZE_OF_UDP_HEADER );
                vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	781a      	ldrb	r2, [r3, #0]
 80088c0:	785b      	ldrb	r3, [r3, #1]
 80088c2:	021b      	lsls	r3, r3, #8
 80088c4:	4313      	orrs	r3, r2
 80088c6:	81bb      	strh	r3, [r7, #12]
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	885b      	ldrh	r3, [r3, #2]
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	801a      	strh	r2, [r3, #0]
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	89ba      	ldrh	r2, [r7, #12]
 80088d6:	805a      	strh	r2, [r3, #2]

                /* Important: tell NIC driver how many bytes must be sent */
                uxDataLength = ( ( size_t ) lNetLength ) + uxIPHeaderLength + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088dc:	4413      	add	r3, r2
 80088de:	3316      	adds	r3, #22
 80088e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088e6:	629a      	str	r2, [r3, #40]	@ 0x28
        }
 80088e8:	bf00      	nop
 80088ea:	3730      	adds	r7, #48	@ 0x30
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	08024154 	.word	0x08024154
 80088f4:	fb0000e0 	.word	0xfb0000e0
 80088f8:	20000fdc 	.word	0x20000fdc

080088fc <ProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    eFrameProcessingResult_t ProcessICMPPacket( const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8008904:	2300      	movs	r3, #0
 8008906:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800890c:	2b29      	cmp	r3, #41	@ 0x29
 800890e:	d803      	bhi.n	8008918 <ProcessICMPPacket+0x1c>
 8008910:	2159      	movs	r1, #89	@ 0x59
 8008912:	4811      	ldr	r0, [pc, #68]	@ (8008958 <ProcessICMPPacket+0x5c>)
 8008914:	f7f8 feaa 	bl	800166c <vAssertCalled>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891c:	2b29      	cmp	r3, #41	@ 0x29
 800891e:	d915      	bls.n	800894c <ProcessICMPPacket+0x50>
             * fields of ICMP packet. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            ICMPPacket_t * pxICMPPacket = ( ( ICMPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008924:	60bb      	str	r3, [r7, #8]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800892c:	2b00      	cmp	r3, #0
 800892e:	d008      	beq.n	8008942 <ProcessICMPPacket+0x46>
 8008930:	2b08      	cmp	r3, #8
 8008932:	d10a      	bne.n	800894a <ProcessICMPPacket+0x4e>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    {
                        eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 8008934:	6879      	ldr	r1, [r7, #4]
 8008936:	68b8      	ldr	r0, [r7, #8]
 8008938:	f000 f810 	bl	800895c <prvProcessICMPEchoRequest>
 800893c:	4603      	mov	r3, r0
 800893e:	73fb      	strb	r3, [r7, #15]
                    }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 8008940:	e004      	b.n	800894c <ProcessICMPPacket+0x50>

                case ipICMP_ECHO_REPLY:
                    #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    {
                        prvProcessICMPEchoReply( pxICMPPacket );
 8008942:	68b8      	ldr	r0, [r7, #8]
 8008944:	f000 f836 	bl	80089b4 <prvProcessICMPEchoReply>
                    }
                    #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                    break;
 8008948:	e000      	b.n	800894c <ProcessICMPPacket+0x50>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
 800894a:	bf00      	nop
            }
        }

        return eReturn;
 800894c:	7bfb      	ldrb	r3, [r7, #15]
    }
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	08024220 	.word	0x08024220

0800895c <prvProcessICMPEchoRequest>:
 * @param pxNetworkBuffer Pointer to the network buffer containing the ICMP packet.
 * @returns Function returns eReturnEthernetFrame.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint32_t ulIPAddress;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	3322      	adds	r3, #34	@ 0x22
 800896a:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	330e      	adds	r3, #14
 8008970:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	2200      	movs	r2, #0
 8008976:	701a      	strb	r2, [r3, #0]
        ulIPAddress = pxIPHeader->ulDestinationIPAddress;
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	60fb      	str	r3, [r7, #12]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = ulIPAddress;
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	60da      	str	r2, [r3, #12]
        /* Update the TTL field. */
        pxIPHeader->ucTimeToLive = ipconfigICMP_TIME_TO_LIVE;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	2240      	movs	r2, #64	@ 0x40
 8008990:	721a      	strb	r2, [r3, #8]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	2200      	movs	r2, #0
 8008996:	719a      	strb	r2, [r3, #6]
 8008998:	2200      	movs	r2, #0
 800899a:	71da      	strb	r2, [r3, #7]
            /* Just to prevent compiler warnings about unused parameters. */
            ( void ) pxNetworkBuffer;

            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPHeader->usChecksum = 0U;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	2200      	movs	r2, #0
 80089a0:	709a      	strb	r2, [r3, #2]
 80089a2:	2200      	movs	r2, #0
 80089a4:	70da      	strb	r2, [r3, #3]
        }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 80089a6:	2302      	movs	r3, #2
    }
 80089a8:	4618      	mov	r0, r3
 80089aa:	371c      	adds	r7, #28
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <prvProcessICMPEchoReply>:
 * @brief Process an ICMP echo reply.
 *
 * @param[in] pxICMPPacket The IP packet that contains the ICMP message.
 */
    static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
    {
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
        ePingReplyStatus_t eStatus = eSuccess;
 80089bc:	2300      	movs	r3, #0
 80089be:	75fb      	strb	r3, [r7, #23]
        uint16_t usDataLength, usCount;
        uint8_t * pucByte;

        /* Find the total length of the IP packet. */
        usDataLength = pxICMPPacket->xIPHeader.usLength;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	7c1a      	ldrb	r2, [r3, #16]
 80089c4:	7c5b      	ldrb	r3, [r3, #17]
 80089c6:	021b      	lsls	r3, r3, #8
 80089c8:	4313      	orrs	r3, r2
 80089ca:	81fb      	strh	r3, [r7, #14]
        usDataLength = FreeRTOS_ntohs( usDataLength );
 80089cc:	89fb      	ldrh	r3, [r7, #14]
 80089ce:	021b      	lsls	r3, r3, #8
 80089d0:	b21a      	sxth	r2, r3
 80089d2:	89fb      	ldrh	r3, [r7, #14]
 80089d4:	0a1b      	lsrs	r3, r3, #8
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	b21b      	sxth	r3, r3
 80089da:	4313      	orrs	r3, r2
 80089dc:	b21b      	sxth	r3, r3
 80089de:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the IP headers to obtain the length of the ICMP
         * message itself. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 80089e0:	89fb      	ldrh	r3, [r7, #14]
 80089e2:	3b14      	subs	r3, #20
 80089e4:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the ICMP header, to obtain the length of
         * data contained in the ping. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMPv4_HEADER );
 80089e6:	89fb      	ldrh	r3, [r7, #14]
 80089e8:	3b08      	subs	r3, #8
 80089ea:	81fb      	strh	r3, [r7, #14]

        /* Checksum has already been checked before in prvProcessIPPacket */

        /* Find the first byte of the data within the ICMP packet. */
        pucByte = ( uint8_t * ) pxICMPPacket;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	613b      	str	r3, [r7, #16]
        pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	332a      	adds	r3, #42	@ 0x2a
 80089f4:	613b      	str	r3, [r7, #16]

        /* Check each byte. */
        for( usCount = 0; usCount < usDataLength; usCount++ )
 80089f6:	2300      	movs	r3, #0
 80089f8:	82bb      	strh	r3, [r7, #20]
 80089fa:	e00c      	b.n	8008a16 <prvProcessICMPEchoReply+0x62>
        {
            if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	2b78      	cmp	r3, #120	@ 0x78
 8008a02:	d002      	beq.n	8008a0a <prvProcessICMPEchoReply+0x56>
            {
                eStatus = eInvalidData;
 8008a04:	2302      	movs	r3, #2
 8008a06:	75fb      	strb	r3, [r7, #23]
                break;
 8008a08:	e009      	b.n	8008a1e <prvProcessICMPEchoReply+0x6a>
            }

            pucByte++;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	613b      	str	r3, [r7, #16]
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8008a10:	8abb      	ldrh	r3, [r7, #20]
 8008a12:	3301      	adds	r3, #1
 8008a14:	82bb      	strh	r3, [r7, #20]
 8008a16:	8aba      	ldrh	r2, [r7, #20]
 8008a18:	89fb      	ldrh	r3, [r7, #14]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d3ee      	bcc.n	80089fc <prvProcessICMPEchoReply+0x48>
        }

        /* Call back into the application to pass it the result. */
        vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	4611      	mov	r1, r2
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7f8 fed5 	bl	80017d8 <vApplicationPingReplyHook>
    }
 8008a2e:	bf00      	nop
 8008a30:	3718      	adds	r7, #24
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
	...

08008a38 <prvIPTask>:

/* MISRA Ref 8.13.1 [Not decorating a pointer to const parameter with const] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-813 */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void * pvParameters )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
    /* Just to prevent compiler warnings about unused parameters. */
    ( void ) pvParameters;

    prvIPTask_Initialise();
 8008a40:	f000 f90e 	bl	8008c60 <prvIPTask_Initialise>

    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 8008a44:	4802      	ldr	r0, [pc, #8]	@ (8008a50 <prvIPTask+0x18>)
 8008a46:	f018 ff37 	bl	80218b8 <lUDPLoggingPrintf>

    /* Loop, processing IP events. */
    while( ipFOREVER() == pdTRUE )
    {
        prvProcessIPEventsAndTimers();
 8008a4a:	f000 f803 	bl	8008a54 <prvProcessIPEventsAndTimers>
 8008a4e:	e7fc      	b.n	8008a4a <prvIPTask+0x12>
 8008a50:	08024250 	.word	0x08024250

08008a54 <prvProcessIPEventsAndTimers>:

/**
 * @brief Process the events sent to the IP task and process the timers.
 */
static void prvProcessIPEventsAndTimers( void )
{
 8008a54:	b590      	push	{r4, r7, lr}
 8008a56:	b08d      	sub	sp, #52	@ 0x34
 8008a58:	af00      	add	r7, sp, #0

    ipconfigWATCHDOG_TIMER();

    /* Check the ARP, DHCP and TCP timers to see if there is any periodic
     * or timeout processing to perform. */
    vCheckNetworkTimers();
 8008a5a:	f000 ff09 	bl	8009870 <vCheckNetworkTimers>

    /* Calculate the acceptable maximum sleep time. */
    xNextIPSleep = xCalculateSleepTime();
 8008a5e:	f000 fea7 	bl	80097b0 <xCalculateSleepTime>
 8008a62:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Wait until there is something to do. If the following call exits
     * due to a time out rather than a message being received, set a
     * 'NoEvent' value. */
    if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 8008a64:	4b7c      	ldr	r3, [pc, #496]	@ (8008c58 <prvProcessIPEventsAndTimers+0x204>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f107 0118 	add.w	r1, r7, #24
 8008a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fa fbda 	bl	8003228 <xQueueReceive>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <prvProcessIPEventsAndTimers+0x2a>
    {
        xReceivedEvent.eEventType = eNoEvent;
 8008a7a:	23ff      	movs	r3, #255	@ 0xff
 8008a7c:	763b      	strb	r3, [r7, #24]
    }

    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
    {
        if( xReceivedEvent.eEventType != eNoEvent )
 8008a7e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8008a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a86:	d00d      	beq.n	8008aa4 <prvProcessIPEventsAndTimers+0x50>
        {
            UBaseType_t uxCount;

            uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 8008a88:	4b73      	ldr	r3, [pc, #460]	@ (8008c58 <prvProcessIPEventsAndTimers+0x204>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fa fda3 	bl	80035d8 <uxQueueSpacesAvailable>
 8008a92:	62b8      	str	r0, [r7, #40]	@ 0x28

            if( uxQueueMinimumSpace > uxCount )
 8008a94:	4b71      	ldr	r3, [pc, #452]	@ (8008c5c <prvProcessIPEventsAndTimers+0x208>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d202      	bcs.n	8008aa4 <prvProcessIPEventsAndTimers+0x50>
            {
                uxQueueMinimumSpace = uxCount;
 8008a9e:	4a6f      	ldr	r2, [pc, #444]	@ (8008c5c <prvProcessIPEventsAndTimers+0x208>)
 8008aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa2:	6013      	str	r3, [r2, #0]
    }
    #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

    iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

    switch( xReceivedEvent.eEventType )
 8008aa4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	2b0e      	cmp	r3, #14
 8008aac:	f200 80ca 	bhi.w	8008c44 <prvProcessIPEventsAndTimers+0x1f0>
 8008ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab8 <prvProcessIPEventsAndTimers+0x64>)
 8008ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab6:	bf00      	nop
 8008ab8:	08008c45 	.word	0x08008c45
 8008abc:	08008af5 	.word	0x08008af5
 8008ac0:	08008aff 	.word	0x08008aff
 8008ac4:	08008b09 	.word	0x08008b09
 8008ac8:	08008b15 	.word	0x08008b15
 8008acc:	08008bdf 	.word	0x08008bdf
 8008ad0:	08008be9 	.word	0x08008be9
 8008ad4:	08008bfd 	.word	0x08008bfd
 8008ad8:	08008c05 	.word	0x08008c05
 8008adc:	08008c29 	.word	0x08008c29
 8008ae0:	08008b1f 	.word	0x08008b1f
 8008ae4:	08008bd5 	.word	0x08008bd5
 8008ae8:	08008bf3 	.word	0x08008bf3
 8008aec:	08008c45 	.word	0x08008c45
 8008af0:	08008c2f 	.word	0x08008c2f
    {
        case eNetworkDownEvent:
            /* Attempt to establish a connection. */
            prvProcessNetworkDownEvent( ( ( NetworkInterface_t * ) xReceivedEvent.pvData ) );
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f001 f9cc 	bl	8009e94 <prvProcessNetworkDownEvent>
            break;
 8008afc:	e0a5      	b.n	8008c4a <prvProcessIPEventsAndTimers+0x1f6>
        case eNetworkRxEvent:

            /* The network hardware driver has received a new packet.  A
             * pointer to the received buffer is located in the pvData member
             * of the received event structure. */
            prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	4618      	mov	r0, r3
 8008b02:	f000 f955 	bl	8008db0 <prvHandleEthernetPacket>
            break;
 8008b06:	e0a0      	b.n	8008c4a <prvProcessIPEventsAndTimers+0x1f6>

        case eNetworkTxEvent:

            /* Send a network packet. The ownership will  be transferred to
             * the driver, which will release it after delivery. */
            prvForwardTxPacket( ( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData ), pdTRUE );
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 f95d 	bl	8008dcc <prvForwardTxPacket>
            break;
 8008b12:	e09a      	b.n	8008c4a <prvProcessIPEventsAndTimers+0x1f6>

        case eARPTimerEvent:
            /* The ARP timer has expired, process the ARP cache. */
            #if ( ipconfigUSE_IPv4 != 0 )
                vARPAgeCache();
 8008b14:	f7fe f94e 	bl	8006db4 <vARPAgeCache>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            #if ( ipconfigUSE_IPv6 != 0 )
                vNDAgeCache();
 8008b18:	f002 fdb6 	bl	800b688 <vNDAgeCache>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            break;
 8008b1c:	e095      	b.n	8008c4a <prvProcessIPEventsAndTimers+0x1f6>
            /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
             * to a port. The port number is communicated in the socket field
             * usLocalPort. vSocketBind() will actually bind the socket and the
             * API will unblock as soon as the eSOCKET_BOUND event is
             * triggered. */
            pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	623b      	str	r3, [r7, #32]
            xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 8008b22:	2318      	movs	r3, #24
 8008b24:	703b      	strb	r3, [r7, #0]

            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8008b26:	6a3b      	ldr	r3, [r7, #32]
 8008b28:	7a1b      	ldrb	r3, [r3, #8]
 8008b2a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <prvProcessIPEventsAndTimers+0xe6>
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d01a      	beq.n	8008b6e <prvProcessIPEventsAndTimers+0x11a>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8008b38:	e02c      	b.n	8008b94 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET;
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	707b      	strb	r3, [r7, #1]
                        xAddress.sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b42:	061a      	lsls	r2, r3, #24
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b48:	021b      	lsls	r3, r3, #8
 8008b4a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008b4e:	431a      	orrs	r2, r3
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b54:	0a1b      	lsrs	r3, r3, #8
 8008b56:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008b5a:	431a      	orrs	r2, r3
 8008b5c:	6a3b      	ldr	r3, [r7, #32]
 8008b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b60:	0e1b      	lsrs	r3, r3, #24
 8008b62:	4313      	orrs	r3, r2
 8008b64:	60bb      	str	r3, [r7, #8]
                        pxSocket->xLocalAddress.ulIP_IPv4 = 0;
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	629a      	str	r2, [r3, #40]	@ 0x28
                        break;
 8008b6c:	e012      	b.n	8008b94 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET6;
 8008b6e:	230a      	movs	r3, #10
 8008b70:	707b      	strb	r3, [r7, #1]
                        ( void ) memcpy( xAddress.sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( xAddress.sin_address.xIP_IPv6.ucBytes ) );
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	3328      	adds	r3, #40	@ 0x28
 8008b76:	f107 0408 	add.w	r4, r7, #8
 8008b7a:	6818      	ldr	r0, [r3, #0]
 8008b7c:	6859      	ldr	r1, [r3, #4]
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	3328      	adds	r3, #40	@ 0x28
 8008b88:	2210      	movs	r2, #16
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f019 f9bc 	bl	8021f0a <memset>
                        break;
 8008b92:	bf00      	nop
            }

            xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8008b94:	6a3b      	ldr	r3, [r7, #32]
 8008b96:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8008b98:	021b      	lsls	r3, r3, #8
 8008b9a:	b21a      	sxth	r2, r3
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8008ba0:	0a1b      	lsrs	r3, r3, #8
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	b21b      	sxth	r3, r3
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	b21b      	sxth	r3, r3
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	807b      	strh	r3, [r7, #2]
            /* 'usLocalPort' will be set again by vSocketBind(). */
            pxSocket->usLocalPort = 0U;
 8008bae:	6a3b      	ldr	r3, [r7, #32]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8008bb4:	4639      	mov	r1, r7
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	2218      	movs	r2, #24
 8008bba:	6a38      	ldr	r0, [r7, #32]
 8008bbc:	f005 fa32 	bl	800e024 <vSocketBind>

            /* Before 'eSocketBindEvent' was sent it was tested that
             * ( xEventGroup != NULL ) so it can be used now to wake up the
             * user. */
            pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f043 0210 	orr.w	r2, r3, #16
 8008bc8:	6a3b      	ldr	r3, [r7, #32]
 8008bca:	601a      	str	r2, [r3, #0]
            vSocketWakeUpUser( pxSocket );
 8008bcc:	6a38      	ldr	r0, [r7, #32]
 8008bce:	f006 f8d8 	bl	800ed82 <vSocketWakeUpUser>
            break;
 8008bd2:	e03a      	b.n	8008c4a <prvProcessIPEventsAndTimers+0x1f6>

            /* The user API FreeRTOS_closesocket() has sent a message to the
             * IP-task to actually close a socket. This is handled in
             * vSocketClose().  As the socket gets closed, there is no way to
             * report back to the API, so the API won't wait for the result */
            ( void ) vSocketClose( ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData ) );
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f005 fad8 	bl	800e18c <vSocketClose>
            break;
 8008bdc:	e035      	b.n	8008c4a <prvProcessIPEventsAndTimers+0x1f6>
        case eStackTxEvent:

            /* The network stack has generated a packet to send.  A
             * pointer to the generated buffer is located in the pvData
             * member of the received event structure. */
            vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f00d f9b1 	bl	8015f48 <vProcessGeneratedUDPPacket>
            break;
 8008be6:	e030      	b.n	8008c4a <prvProcessIPEventsAndTimers+0x1f6>

        case eDHCPEvent:
            prvCallDHCP_RA_Handler( ( ( NetworkEndPoint_t * ) xReceivedEvent.pvData ) );
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 f88c 	bl	8008d08 <prvCallDHCP_RA_Handler>
            break;
 8008bf0:	e02b      	b.n	8008c4a <prvProcessIPEventsAndTimers+0x1f6>
                    vSocketSelect( pxMessage->pxSocketSet );
                    ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                }
            #else
                {
                    vSocketSelect( ( ( SocketSelect_t * ) xReceivedEvent.pvData ) );
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f007 fab3 	bl	8010160 <vSocketSelect>
                }
            #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 8008bfa:	e026      	b.n	8008c4a <prvProcessIPEventsAndTimers+0x1f6>
        case eTCPTimerEvent:
            #if ( ipconfigUSE_TCP == 1 )

                /* Simply mark the TCP timer as expired so it gets processed
                 * the next time prvCheckNetworkTimers() is called. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8008bfc:	2001      	movs	r0, #1
 8008bfe:	f000 ffab 	bl	8009b58 <vIPSetTCPTimerExpiredState>
            #endif /* ipconfigUSE_TCP */
            break;
 8008c02:	e022      	b.n	8008c4a <prvProcessIPEventsAndTimers+0x1f6>

            /* The API FreeRTOS_accept() was called, the IP-task will now
             * check if the listening socket (communicated in pvData) actually
             * received a new connection. */
            #if ( ipconfigUSE_TCP == 1 )
                pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	623b      	str	r3, [r7, #32]

                if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8008c08:	6a38      	ldr	r0, [r7, #32]
 8008c0a:	f008 fbed 	bl	80113e8 <xTCPCheckNewClient>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d019      	beq.n	8008c48 <prvProcessIPEventsAndTimers+0x1f4>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8008c14:	6a3b      	ldr	r3, [r7, #32]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f043 0204 	orr.w	r2, r3, #4
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	601a      	str	r2, [r3, #0]
                    vSocketWakeUpUser( pxSocket );
 8008c20:	6a38      	ldr	r0, [r7, #32]
 8008c22:	f006 f8ae 	bl	800ed82 <vSocketWakeUpUser>
                }
            #endif /* ipconfigUSE_TCP */
            break;
 8008c26:	e00f      	b.n	8008c48 <prvProcessIPEventsAndTimers+0x1f4>
        case eTCPNetStat:

            /* FreeRTOS_netstat() was called to have the IP-task print an
             * overview of all sockets and their connections */
            #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                vTCPNetStat();
 8008c28:	f007 f984 	bl	800ff34 <vTCPNetStat>
            #endif /* ipconfigUSE_TCP */
            break;
 8008c2c:	e00d      	b.n	8008c4a <prvProcessIPEventsAndTimers+0x1f6>

        case eSocketSetDeleteEvent:
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	627b      	str	r3, [r7, #36]	@ 0x24

                iptraceMEM_STATS_DELETE( pxSocketSet );
                vEventGroupDelete( pxSocketSet->xSelectGroup );
 8008c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7f9 ffb2 	bl	8002ba0 <vEventGroupDelete>
                vPortFree( ( void * ) pxSocketSet );
 8008c3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c3e:	f7fd f92d 	bl	8005e9c <vPortFree>
            }
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 8008c42:	e002      	b.n	8008c4a <prvProcessIPEventsAndTimers+0x1f6>
            /* xQueueReceive() returned because of a normal time-out. */
            break;

        default:
            /* Should not get here. */
            break;
 8008c44:	bf00      	nop
 8008c46:	e000      	b.n	8008c4a <prvProcessIPEventsAndTimers+0x1f6>
            break;
 8008c48:	bf00      	nop
    }

    prvIPTask_CheckPendingEvents();
 8008c4a:	f000 f833 	bl	8008cb4 <prvIPTask_CheckPendingEvents>
}
 8008c4e:	bf00      	nop
 8008c50:	3734      	adds	r7, #52	@ 0x34
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd90      	pop	{r4, r7, pc}
 8008c56:	bf00      	nop
 8008c58:	20000fd8 	.word	0x20000fd8
 8008c5c:	20000014 	.word	0x20000014

08008c60 <prvIPTask_Initialise>:
/**
 * @brief Helper function for prvIPTask, it does the first initializations
 *        at start-up. No parameters, no return type.
 */
static void prvIPTask_Initialise( void )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
    /* Generate a dummy message to say that the network connection has gone
     * down.  This will cause this task to initialise the network interface.  After
     * this it is the responsibility of the network interface hardware driver to
     * send this message if a previously connected network is disconnected. */

    vNetworkTimerReload( pdMS_TO_TICKS( ipINITIALISATION_RETRY_DELAY ) );
 8008c66:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8008c6a:	f000 ff2b 	bl	8009ac4 <vNetworkTimerReload>

    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8008c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8008cac <prvIPTask_Initialise+0x4c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	607b      	str	r3, [r7, #4]
 8008c74:	e005      	b.n	8008c82 <prvIPTask_Initialise+0x22>
    {
        /* Post a 'eNetworkDownEvent' for every interface. */
        FreeRTOS_NetworkDown( pxInterface );
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f8be 	bl	8008df8 <FreeRTOS_NetworkDown>
    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c80:	607b      	str	r3, [r7, #4]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1f6      	bne.n	8008c76 <prvIPTask_Initialise+0x16>
    }

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* Initialise the TCP timer. */
        vTCPTimerReload( pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8008c88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008c8c:	f000 fee8 	bl	8009a60 <vTCPTimerReload>
    }
    #endif

    /* Mark the timer as inactive since we are not waiting on any ARP resolution as of now. */
    vIPSetARPResolutionTimerEnableState( pdFALSE );
 8008c90:	2000      	movs	r0, #0
 8008c92:	f000 ff9b 	bl	8009bcc <vIPSetARPResolutionTimerEnableState>

    #if ( ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        vDNSInitialise();
 8008c96:	f7fe fa31 	bl	80070fc <vDNSInitialise>
    #endif /* ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) */

    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* Clear the DNS cache once only. */
        FreeRTOS_dnsclear();
 8008c9a:	f7fe fb0f 	bl	80072bc <FreeRTOS_dnsclear>
    }
    #endif /* ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) ) */

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 8008c9e:	4b04      	ldr	r3, [pc, #16]	@ (8008cb0 <prvIPTask_Initialise+0x50>)
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	601a      	str	r2, [r3, #0]
}
 8008ca4:	bf00      	nop
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	20001364 	.word	0x20001364
 8008cb0:	20000fe8 	.word	0x20000fe8

08008cb4 <prvIPTask_CheckPendingEvents>:
/**
 * @brief Check the value of 'xNetworkDownEventPending'. When non-zero, pending
 *        network-down events will be handled.
 */
static void prvIPTask_CheckPendingEvents( void )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    if( xNetworkDownEventPending != pdFALSE )
 8008cba:	4b12      	ldr	r3, [pc, #72]	@ (8008d04 <prvIPTask_CheckPendingEvents+0x50>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d01c      	beq.n	8008cfc <prvIPTask_CheckPendingEvents+0x48>
    {
        /* A network down event could not be posted to the network event
         * queue because the queue was full.
         * As this code runs in the IP-task, it can be done directly by
         * calling prvProcessNetworkDownEvent(). */
        xNetworkDownEventPending = pdFALSE;
 8008cc2:	4b10      	ldr	r3, [pc, #64]	@ (8008d04 <prvIPTask_CheckPendingEvents+0x50>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	601a      	str	r2, [r3, #0]

        for( pxInterface = FreeRTOS_FirstNetworkInterface();
 8008cc8:	f004 f836 	bl	800cd38 <FreeRTOS_FirstNetworkInterface>
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	e012      	b.n	8008cf6 <prvIPTask_CheckPendingEvents+0x42>
             pxInterface != NULL;
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
        {
            if( pxInterface->bits.bCallDownEvent != pdFALSE_UNSIGNED )
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	7f1b      	ldrb	r3, [r3, #28]
 8008cd4:	f003 0302 	and.w	r3, r3, #2
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d007      	beq.n	8008cee <prvIPTask_CheckPendingEvents+0x3a>
            {
                prvProcessNetworkDownEvent( pxInterface );
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 f8d8 	bl	8009e94 <prvProcessNetworkDownEvent>
                pxInterface->bits.bCallDownEvent = pdFALSE_UNSIGNED;
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	7f13      	ldrb	r3, [r2, #28]
 8008ce8:	f36f 0341 	bfc	r3, #1, #1
 8008cec:	7713      	strb	r3, [r2, #28]
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f004 f82e 	bl	800cd50 <FreeRTOS_NextNetworkInterface>
 8008cf4:	6078      	str	r0, [r7, #4]
             pxInterface != NULL;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1e9      	bne.n	8008cd0 <prvIPTask_CheckPendingEvents+0x1c>
            }
        }
    }
}
 8008cfc:	bf00      	nop
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	20000fe0 	.word	0x20000fe0

08008d08 <prvCallDHCP_RA_Handler>:
 * @brief Call the state machine of either DHCP, DHCPv6, or RA, whichever is activated.
 *
 * @param[in] pxEndPoint The end-point for which the state-machine will be called.
 */
static void prvCallDHCP_RA_Handler( NetworkEndPoint_t * pxEndPoint )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
    BaseType_t xIsIPv6 = pdFALSE;
 8008d10:	2300      	movs	r3, #0
 8008d12:	60fb      	str	r3, [r7, #12]

    #if ( ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_RA == 1 ) )
        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008d1a:	f003 0304 	and.w	r3, r3, #4
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <prvCallDHCP_RA_Handler+0x20>
        {
            xIsIPv6 = pdTRUE;
 8008d24:	2301      	movs	r3, #1
 8008d26:	60fb      	str	r3, [r7, #12]
        }
    }
    #endif /* ipconfigUSE_DHCPv6 */
    #if ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
    {
        if( ( xIsIPv6 == pdTRUE ) && ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) )
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d10b      	bne.n	8008d46 <prvCallDHCP_RA_Handler+0x3e>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008d34:	f003 0302 	and.w	r3, r3, #2
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d003      	beq.n	8008d46 <prvCallDHCP_RA_Handler+0x3e>
        {
            /* Process RA messages for a given end-point. */
            vRAProcess( pdFALSE, pxEndPoint );
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	2000      	movs	r0, #0
 8008d42:	f003 fecd 	bl	800cae0 <vRAProcess>
    #endif /* ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) ) */

    /* Mention pxEndPoint and xIsIPv6 in case they have not been used. */
    ( void ) pxEndPoint;
    ( void ) xIsIPv6;
}
 8008d46:	bf00      	nop
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
	...

08008d50 <FreeRTOS_GetIPTaskHandle>:
 *        gives read-only access to it.
 *
 * @return The handle of the IP-task.
 */
TaskHandle_t FreeRTOS_GetIPTaskHandle( void )
{
 8008d50:	b480      	push	{r7}
 8008d52:	af00      	add	r7, sp, #0
    return xIPTaskHandle;
 8008d54:	4b03      	ldr	r3, [pc, #12]	@ (8008d64 <FreeRTOS_GetIPTaskHandle+0x14>)
 8008d56:	681b      	ldr	r3, [r3, #0]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	20000fe4 	.word	0x20000fe4

08008d68 <vIPNetworkUpCalls>:
 * @brief Perform all the required tasks when the network gets connected.
 *
 * @param pxEndPoint The end-point which goes up.
 */
void vIPNetworkUpCalls( struct xNetworkEndPoint * pxEndPoint )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
    if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008d76:	f003 0304 	and.w	r3, r3, #4
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d003      	beq.n	8008d88 <vIPNetworkUpCalls+0x20>
    {
        /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
        #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
            vManageSolicitedNodeAddress( pxEndPoint, pdTRUE );
 8008d80:	2101      	movs	r1, #1
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f002 fa7e 	bl	800b284 <vManageSolicitedNodeAddress>
        #endif
    }

    pxEndPoint->bits.bEndPointUp = pdTRUE_UNSIGNED;
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8008d8e:	f043 0310 	orr.w	r3, r3, #16
 8008d92:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 8008d96:	2000      	movs	r0, #0
 8008d98:	f7f8 fc9c 	bl	80016d4 <vApplicationIPNetworkEventHook>
    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        extern void vDNSInitialise( void );
        vDNSInitialise();
 8008d9c:	f7fe f9ae 	bl	80070fc <vDNSInitialise>
    }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    vARPTimerReload( pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 8008da0:	f242 7010 	movw	r0, #10000	@ 0x2710
 8008da4:	f000 fe6a 	bl	8009a7c <vARPTimerReload>
}
 8008da8:	bf00      	nop
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
    {
        /* When ipconfigUSE_LINKED_RX_MESSAGES is set to 0 then only one
         * buffer will be sent at a time.  This is the default way for +TCP to pass
         * messages from the MAC to the TCP/IP stack. */
        if( pxBuffer != NULL )
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d002      	beq.n	8008dc4 <prvHandleEthernetPacket+0x14>
        {
            prvProcessEthernetPacket( pxBuffer );
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f9c8 	bl	8009154 <prvProcessEthernetPacket>
            prvProcessEthernetPacket( pxBuffer );
            pxBuffer = pxNextBuffer;
        }
    }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <prvForwardTxPacket>:
 * @param[in] pxNetworkBuffer The message buffer.
 * @param[in] xReleaseAfterSend When true, the network interface will own the buffer and is responsible for it's release.
 */
static void prvForwardTxPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                BaseType_t xReleaseAfterSend )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    if( pxNetworkBuffer->pxInterface != NULL )
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d007      	beq.n	8008dee <prvForwardTxPacket+0x22>
    {
        ( void ) pxNetworkBuffer->pxInterface->pfOutput( pxNetworkBuffer->pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	4798      	blx	r3
    }
}
 8008dee:	bf00      	nop
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
	...

08008df8 <FreeRTOS_NetworkDown>:
 *         and later on a 'network-down' event, it will be executed.
 *
 * @param[in] pxNetworkInterface The interface that goes down.
 */
void FreeRTOS_NetworkDown( struct xNetworkInterface * pxNetworkInterface )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xNetworkDownEvent;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	617b      	str	r3, [r7, #20]

    pxNetworkInterface->bits.bInterfaceUp = pdFALSE_UNSIGNED;
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	7f13      	ldrb	r3, [r2, #28]
 8008e08:	f36f 0300 	bfc	r3, #0, #1
 8008e0c:	7713      	strb	r3, [r2, #28]
    xNetworkDownEvent.eEventType = eNetworkDownEvent;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	733b      	strb	r3, [r7, #12]
    xNetworkDownEvent.pvData = pxNetworkInterface;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	613b      	str	r3, [r7, #16]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8008e16:	f107 030c 	add.w	r3, r7, #12
 8008e1a:	6979      	ldr	r1, [r7, #20]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 f8df 	bl	8008fe0 <xSendEventStructToIPTask>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d008      	beq.n	8008e3a <FreeRTOS_NetworkDown+0x42>
    {
        /* Could not send the message, so it is still pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdTRUE;
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	7f13      	ldrb	r3, [r2, #28]
 8008e2c:	f043 0302 	orr.w	r3, r3, #2
 8008e30:	7713      	strb	r3, [r2, #28]
        xNetworkDownEventPending = pdTRUE;
 8008e32:	4b06      	ldr	r3, [pc, #24]	@ (8008e4c <FreeRTOS_NetworkDown+0x54>)
 8008e34:	2201      	movs	r2, #1
 8008e36:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8008e38:	e004      	b.n	8008e44 <FreeRTOS_NetworkDown+0x4c>
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	7f13      	ldrb	r3, [r2, #28]
 8008e3e:	f36f 0341 	bfc	r3, #1, #1
 8008e42:	7713      	strb	r3, [r2, #28]
}
 8008e44:	bf00      	nop
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	20000fe0 	.word	0x20000fe0

08008e50 <FreeRTOS_IPInit_Multi>:
 * @brief Initialise the FreeRTOS-Plus-TCP network stack and initialise the IP-task.
 *        Before calling this function, at least 1 interface and 1 end-point must
 *        have been set-up.
 */
BaseType_t FreeRTOS_IPInit_Multi( void )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdFALSE;
 8008e56:	2300      	movs	r3, #0
 8008e58:	607b      	str	r3, [r7, #4]

    /* There must be at least one interface and one end-point. */
    configASSERT( FreeRTOS_FirstNetworkInterface() != NULL );
 8008e5a:	f003 ff6d 	bl	800cd38 <FreeRTOS_FirstNetworkInterface>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d104      	bne.n	8008e6e <FreeRTOS_IPInit_Multi+0x1e>
 8008e64:	f240 31b5 	movw	r1, #949	@ 0x3b5
 8008e68:	4823      	ldr	r0, [pc, #140]	@ (8008ef8 <FreeRTOS_IPInit_Multi+0xa8>)
 8008e6a:	f7f8 fbff 	bl	800166c <vAssertCalled>

    /* Check that the configuration values are correct and that the IP-task has not
     * already been initialized. */
    vPreCheckConfigs();
 8008e6e:	f001 f8cb 	bl	800a008 <vPreCheckConfigs>
                                                 ucNetworkEventQueueStorageArea,
                                                 &xNetworkEventStaticQueue );
    }
    #else
    {
        xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 8008e72:	2200      	movs	r2, #0
 8008e74:	2108      	movs	r1, #8
 8008e76:	2045      	movs	r0, #69	@ 0x45
 8008e78:	f7fa f824 	bl	8002ec4 <xQueueGenericCreate>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8008efc <FreeRTOS_IPInit_Multi+0xac>)
 8008e80:	6013      	str	r3, [r2, #0]
        configASSERT( xNetworkEventQueue != NULL );
 8008e82:	4b1e      	ldr	r3, [pc, #120]	@ (8008efc <FreeRTOS_IPInit_Multi+0xac>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d104      	bne.n	8008e94 <FreeRTOS_IPInit_Multi+0x44>
 8008e8a:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
 8008e8e:	481a      	ldr	r0, [pc, #104]	@ (8008ef8 <FreeRTOS_IPInit_Multi+0xa8>)
 8008e90:	f7f8 fbec 	bl	800166c <vAssertCalled>
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 8008e94:	4b19      	ldr	r3, [pc, #100]	@ (8008efc <FreeRTOS_IPInit_Multi+0xac>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d025      	beq.n	8008ee8 <FreeRTOS_IPInit_Multi+0x98>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            /* A queue registry is normally used to assist a kernel aware
             * debugger.  If one is in use then it will be helpful for the debugger
             * to show information about the network event queue. */
            vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 8008e9c:	4b17      	ldr	r3, [pc, #92]	@ (8008efc <FreeRTOS_IPInit_Multi+0xac>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4917      	ldr	r1, [pc, #92]	@ (8008f00 <FreeRTOS_IPInit_Multi+0xb0>)
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fa fcfa 	bl	800389c <vQueueAddToRegistry>
        }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 8008ea8:	f00d fd8c 	bl	80169c4 <xNetworkBuffersInitialise>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d10e      	bne.n	8008ed0 <FreeRTOS_IPInit_Multi+0x80>
        {
            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 8008eb2:	f004 fc7f 	bl	800d7b4 <vNetworkSocketsInit>
                    xReturn = pdTRUE;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvIPTask,
 8008eb6:	4b13      	ldr	r3, [pc, #76]	@ (8008f04 <FreeRTOS_IPInit_Multi+0xb4>)
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	2304      	movs	r3, #4
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8008ec4:	4910      	ldr	r1, [pc, #64]	@ (8008f08 <FreeRTOS_IPInit_Multi+0xb8>)
 8008ec6:	4811      	ldr	r0, [pc, #68]	@ (8008f0c <FreeRTOS_IPInit_Multi+0xbc>)
 8008ec8:	f7fa fd9e 	bl	8003a08 <xTaskCreate>
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	e00e      	b.n	8008eee <FreeRTOS_IPInit_Multi+0x9e>
            }
            #endif /* configSUPPORT_STATIC_ALLOCATION */
        }
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: xNetworkBuffersInitialise() failed\n" ) );
 8008ed0:	480f      	ldr	r0, [pc, #60]	@ (8008f10 <FreeRTOS_IPInit_Multi+0xc0>)
 8008ed2:	f018 fcf1 	bl	80218b8 <lUDPLoggingPrintf>

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 8008ed6:	4b09      	ldr	r3, [pc, #36]	@ (8008efc <FreeRTOS_IPInit_Multi+0xac>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fa fb9c 	bl	8003618 <vQueueDelete>
            xNetworkEventQueue = NULL;
 8008ee0:	4b06      	ldr	r3, [pc, #24]	@ (8008efc <FreeRTOS_IPInit_Multi+0xac>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	e002      	b.n	8008eee <FreeRTOS_IPInit_Multi+0x9e>
        }
    }
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: Network event queue could not be created\n" ) );
 8008ee8:	480a      	ldr	r0, [pc, #40]	@ (8008f14 <FreeRTOS_IPInit_Multi+0xc4>)
 8008eea:	f018 fce5 	bl	80218b8 <lUDPLoggingPrintf>
    }

    return xReturn;
 8008eee:	687b      	ldr	r3, [r7, #4]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	08024264 	.word	0x08024264
 8008efc:	20000fd8 	.word	0x20000fd8
 8008f00:	08024290 	.word	0x08024290
 8008f04:	20000fe4 	.word	0x20000fe4
 8008f08:	08024298 	.word	0x08024298
 8008f0c:	08008a39 	.word	0x08008a39
 8008f10:	080242a0 	.word	0x080242a0
 8008f14:	080242dc 	.word	0x080242dc

08008f18 <FreeRTOS_GetEndPointConfiguration>:
    void FreeRTOS_GetEndPointConfiguration( uint32_t * pulIPAddress,
                                            uint32_t * pulNetMask,
                                            uint32_t * pulGatewayAddress,
                                            uint32_t * pulDNSServerAddress,
                                            const struct xNetworkEndPoint * pxEndPoint )
    {
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
 8008f24:	603b      	str	r3, [r7, #0]
        if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d023      	beq.n	8008f74 <FreeRTOS_GetEndPointConfiguration+0x5c>
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008f32:	f003 0304 	and.w	r3, r3, #4
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d11b      	bne.n	8008f74 <FreeRTOS_GetEndPointConfiguration+0x5c>
        {
            /* Return the address configuration to the caller. */

            if( pulIPAddress != NULL )
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d003      	beq.n	8008f4a <FreeRTOS_GetEndPointConfiguration+0x32>
            {
                *pulIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	601a      	str	r2, [r3, #0]
            }

            if( pulNetMask != NULL )
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d003      	beq.n	8008f58 <FreeRTOS_GetEndPointConfiguration+0x40>
            {
                *pulNetMask = pxEndPoint->ipv4_settings.ulNetMask;
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	685a      	ldr	r2, [r3, #4]
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	601a      	str	r2, [r3, #0]
            }

            if( pulGatewayAddress != NULL )
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <FreeRTOS_GetEndPointConfiguration+0x4e>
            {
                *pulGatewayAddress = pxEndPoint->ipv4_settings.ulGatewayAddress;
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	689a      	ldr	r2, [r3, #8]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	601a      	str	r2, [r3, #0]
            }

            if( pulDNSServerAddress != NULL )
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <FreeRTOS_GetEndPointConfiguration+0x5c>
            {
                *pulDNSServerAddress = pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ]; /*_RB_ Only returning the address of the first DNS server. */
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	68da      	ldr	r2, [r3, #12]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8008f74:	bf00      	nop
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <FreeRTOS_GetAddressConfiguration>:
 */
    void FreeRTOS_GetAddressConfiguration( uint32_t * pulIPAddress,
                                           uint32_t * pulNetMask,
                                           uint32_t * pulGatewayAddress,
                                           uint32_t * pulDNSServerAddress )
    {
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af02      	add	r7, sp, #8
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	603b      	str	r3, [r7, #0]
        NetworkEndPoint_t * pxEndPoint;

        /* Get first end point. */
        pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8008f8e:	2000      	movs	r0, #0
 8008f90:	f003 ff72 	bl	800ce78 <FreeRTOS_FirstEndPoint>
 8008f94:	6178      	str	r0, [r7, #20]

        if( pxEndPoint != NULL )
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d007      	beq.n	8008fac <FreeRTOS_GetAddressConfiguration+0x2c>
        {
            FreeRTOS_GetEndPointConfiguration( pulIPAddress, pulNetMask,
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	68b9      	ldr	r1, [r7, #8]
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f7ff ffb6 	bl	8008f18 <FreeRTOS_GetEndPointConfiguration>
                                               pulGatewayAddress, pulDNSServerAddress, pxEndPoint );
        }
    }
 8008fac:	bf00      	nop
 8008fae:	3718      	adds	r7, #24
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <xSendEventToIPTask>:
 * @param[in] eEvent The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b086      	sub	sp, #24
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
 8008fc4:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8008fca:	f107 030c 	add.w	r3, r7, #12
 8008fce:	6979      	ldr	r1, [r7, #20]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 f805 	bl	8008fe0 <xSendEventStructToIPTask>
 8008fd6:	4603      	mov	r3, r0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3718      	adds	r7, #24
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8008fee:	f000 fb93 	bl	8009718 <xIPIsNetworkTaskReady>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d107      	bne.n	8009008 <xSendEventStructToIPTask+0x28>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f993 3000 	ldrsb.w	r3, [r3]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d002      	beq.n	8009008 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 8009002:	2300      	movs	r3, #0
 8009004:	617b      	str	r3, [r7, #20]
 8009006:	e035      	b.n	8009074 <xSendEventStructToIPTask+0x94>
    }
    else
    {
        xSendMessage = pdTRUE;
 8009008:	2301      	movs	r3, #1
 800900a:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
        {
            if( pxEvent->eEventType == eTCPTimerEvent )
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f993 3000 	ldrsb.w	r3, [r3]
 8009012:	2b06      	cmp	r3, #6
 8009014:	d10c      	bne.n	8009030 <xSendEventStructToIPTask+0x50>
            {
                /* TCP timer events are sent to wake the timer task when
                 * xTCPTimer has expired, but there is no point sending them if the
                 * IP task is already awake processing other message. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8009016:	2001      	movs	r0, #1
 8009018:	f000 fd9e 	bl	8009b58 <vIPSetTCPTimerExpiredState>

                if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 800901c:	4b18      	ldr	r3, [pc, #96]	@ (8009080 <xSendEventStructToIPTask+0xa0>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4618      	mov	r0, r3
 8009022:	f7fa fabf 	bl	80035a4 <uxQueueMessagesWaiting>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <xSendEventStructToIPTask+0x50>
                {
                    /* Not actually going to send the message but this is not a
                     * failure as the message didn't need to be sent. */
                    xSendMessage = pdFALSE;
 800902c:	2300      	movs	r3, #0
 800902e:	613b      	str	r3, [r7, #16]
                }
            }
        }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d01c      	beq.n	8009070 <xSendEventStructToIPTask+0x90>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8009036:	f000 ff15 	bl	8009e64 <xIsCallingFromIPTask>
 800903a:	4603      	mov	r3, r0
 800903c:	2b01      	cmp	r3, #1
 800903e:	d104      	bne.n	800904a <xSendEventStructToIPTask+0x6a>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <xSendEventStructToIPTask+0x6a>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8009046:	2300      	movs	r3, #0
 8009048:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 800904a:	4b0d      	ldr	r3, [pc, #52]	@ (8009080 <xSendEventStructToIPTask+0xa0>)
 800904c:	6818      	ldr	r0, [r3, #0]
 800904e:	2300      	movs	r3, #0
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	6879      	ldr	r1, [r7, #4]
 8009054:	f7fa f800 	bl	8003058 <xQueueGenericSend>
 8009058:	6178      	str	r0, [r7, #20]

            if( xReturn == pdFAIL )
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d109      	bne.n	8009074 <xSendEventStructToIPTask+0x94>
            {
                /* A message should have been sent to the IP task, but wasn't. */
                FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f993 3000 	ldrsb.w	r3, [r3]
 8009066:	4619      	mov	r1, r3
 8009068:	4806      	ldr	r0, [pc, #24]	@ (8009084 <xSendEventStructToIPTask+0xa4>)
 800906a:	f018 fc25 	bl	80218b8 <lUDPLoggingPrintf>
 800906e:	e001      	b.n	8009074 <xSendEventStructToIPTask+0x94>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 8009070:	2301      	movs	r3, #1
 8009072:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 8009074:	697b      	ldr	r3, [r7, #20]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3718      	adds	r7, #24
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	20000fd8 	.word	0x20000fd8
 8009084:	08024320 	.word	0x08024320

08009088 <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8009090:	2301      	movs	r3, #1
 8009092:	75fb      	strb	r3, [r7, #23]
    const EthernetHeader_t * pxEthernetHeader = NULL;
 8009094:	2300      	movs	r3, #0
 8009096:	613b      	str	r3, [r7, #16]
    const NetworkEndPoint_t * pxEndPoint = NULL;
 8009098:	2300      	movs	r3, #0
 800909a:	60fb      	str	r3, [r7, #12]

    if( pucEthernetBuffer == NULL )
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d102      	bne.n	80090a8 <eConsiderFrameForProcessing+0x20>
    {
        eReturn = eReleaseBuffer;
 80090a2:	2300      	movs	r3, #0
 80090a4:	75fb      	strb	r3, [r7, #23]
 80090a6:	e032      	b.n	800910e <eConsiderFrameForProcessing+0x86>
        /* Map the buffer onto Ethernet Header struct for easy access to fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	613b      	str	r3, [r7, #16]

        /* Examine the destination MAC from the Ethernet header to see if it matches
         * that of an end point managed by FreeRTOS+TCP. */
        pxEndPoint = FreeRTOS_FindEndPointOnMAC( &( pxEthernetHeader->xDestinationAddress ), NULL );
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	2100      	movs	r1, #0
 80090b0:	4618      	mov	r0, r3
 80090b2:	f003 ff81 	bl	800cfb8 <FreeRTOS_FindEndPointOnMAC>
 80090b6:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <eConsiderFrameForProcessing+0x3c>
        {
            /* The packet was directed to this node - process it. */
            eReturn = eProcessBuffer;
 80090be:	2301      	movs	r3, #1
 80090c0:	75fb      	strb	r3, [r7, #23]
 80090c2:	e024      	b.n	800910e <eConsiderFrameForProcessing+0x86>
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	2206      	movs	r2, #6
 80090c8:	4619      	mov	r1, r3
 80090ca:	4820      	ldr	r0, [pc, #128]	@ (800914c <eConsiderFrameForProcessing+0xc4>)
 80090cc:	f019 fda5 	bl	8022c1a <memcmp>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d102      	bne.n	80090dc <eConsiderFrameForProcessing+0x54>
        {
            /* The packet was a broadcast - process it. */
            eReturn = eProcessBuffer;
 80090d6:	2301      	movs	r3, #1
 80090d8:	75fb      	strb	r3, [r7, #23]
 80090da:	e018      	b.n	800910e <eConsiderFrameForProcessing+0x86>
        }
        else
        #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_DNS != 0 ) )
            if( memcmp( xLLMNR_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	2206      	movs	r2, #6
 80090e0:	4619      	mov	r1, r3
 80090e2:	481b      	ldr	r0, [pc, #108]	@ (8009150 <eConsiderFrameForProcessing+0xc8>)
 80090e4:	f019 fd99 	bl	8022c1a <memcmp>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d102      	bne.n	80090f4 <eConsiderFrameForProcessing+0x6c>
            {
                /* The packet is a request for LLMNR - process it. */
                eReturn = eProcessBuffer;
 80090ee:	2301      	movs	r3, #1
 80090f0:	75fb      	strb	r3, [r7, #23]
 80090f2:	e00c      	b.n	800910e <eConsiderFrameForProcessing+0x86>
                /* The packet is a request for MDNS - process it. */
                eReturn = eProcessBuffer;
            }
            else
        #endif /* ipconfigUSE_MDNS */
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	2b33      	cmp	r3, #51	@ 0x33
 80090fa:	d106      	bne.n	800910a <eConsiderFrameForProcessing+0x82>
            ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv6_1 ) )
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	785b      	ldrb	r3, [r3, #1]
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009100:	2b33      	cmp	r3, #51	@ 0x33
 8009102:	d102      	bne.n	800910a <eConsiderFrameForProcessing+0x82>
        {
            /* The packet is a request for LLMNR - process it. */
            eReturn = eProcessBuffer;
 8009104:	2301      	movs	r3, #1
 8009106:	75fb      	strb	r3, [r7, #23]
 8009108:	e001      	b.n	800910e <eConsiderFrameForProcessing+0x86>
        }
        else
        {
            /* The packet was not a broadcast, or for this node, just release
             * the buffer without taking any other action. */
            eReturn = eReleaseBuffer;
 800910a:	2300      	movs	r3, #0
 800910c:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
    {
        uint16_t usFrameType;

        if( eReturn == eProcessBuffer )
 800910e:	7dfb      	ldrb	r3, [r7, #23]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d115      	bne.n	8009140 <eConsiderFrameForProcessing+0xb8>
        {
            usFrameType = pxEthernetHeader->usFrameType;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	7b1a      	ldrb	r2, [r3, #12]
 8009118:	7b5b      	ldrb	r3, [r3, #13]
 800911a:	021b      	lsls	r3, r3, #8
 800911c:	4313      	orrs	r3, r2
 800911e:	817b      	strh	r3, [r7, #10]
            usFrameType = FreeRTOS_ntohs( usFrameType );
 8009120:	897b      	ldrh	r3, [r7, #10]
 8009122:	021b      	lsls	r3, r3, #8
 8009124:	b21a      	sxth	r2, r3
 8009126:	897b      	ldrh	r3, [r7, #10]
 8009128:	0a1b      	lsrs	r3, r3, #8
 800912a:	b29b      	uxth	r3, r3
 800912c:	b21b      	sxth	r3, r3
 800912e:	4313      	orrs	r3, r2
 8009130:	b21b      	sxth	r3, r3
 8009132:	817b      	strh	r3, [r7, #10]

            if( usFrameType <= 0x600U )
 8009134:	897b      	ldrh	r3, [r7, #10]
 8009136:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800913a:	d801      	bhi.n	8009140 <eConsiderFrameForProcessing+0xb8>
            {
                /* Not an Ethernet II frame. */
                eReturn = eReleaseBuffer;
 800913c:	2300      	movs	r3, #0
 800913e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

    return eReturn;
 8009140:	7dfb      	ldrb	r3, [r7, #23]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	08026f50 	.word	0x08026f50
 8009150:	08026f40 	.word	0x08026f40

08009154 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 800915c:	2300      	movs	r3, #0
 800915e:	73fb      	strb	r3, [r7, #15]
    {
        /* prvHandleEthernetPacket() already checked for ( pxNetworkBuffer != NULL ) so
         * it is safe to break out of the do{}while() and let the second half of this
         * function handle the releasing of pxNetworkBuffer */

        if( ( pxNetworkBuffer->pxInterface == NULL ) || ( pxNetworkBuffer->pxEndPoint == NULL ) )
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009164:	2b00      	cmp	r3, #0
 8009166:	d03d      	beq.n	80091e4 <prvProcessEthernetPacket+0x90>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800916c:	2b00      	cmp	r3, #0
 800916e:	d039      	beq.n	80091e4 <prvProcessEthernetPacket+0x90>
         * None of the above need to be checked again in code that handles incoming packets. */

        iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

        /* Interpret the Ethernet frame. */
        if( pxNetworkBuffer->xDataLength < sizeof( EthernetHeader_t ) )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009174:	2b0d      	cmp	r3, #13
 8009176:	d934      	bls.n	80091e2 <prvProcessEthernetPacket+0x8e>
        {
            break;
        }

        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 8009178:	2301      	movs	r3, #1
 800917a:	73fb      	strb	r3, [r7, #15]
        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009180:	60bb      	str	r3, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	899b      	ldrh	r3, [r3, #12]
 8009186:	b29b      	uxth	r3, r3
 8009188:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800918c:	4293      	cmp	r3, r2
 800918e:	d015      	beq.n	80091bc <prvProcessEthernetPacket+0x68>
 8009190:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009194:	4293      	cmp	r3, r2
 8009196:	dc21      	bgt.n	80091dc <prvProcessEthernetPacket+0x88>
 8009198:	2b08      	cmp	r3, #8
 800919a:	d00f      	beq.n	80091bc <prvProcessEthernetPacket+0x68>
 800919c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80091a0:	d11c      	bne.n	80091dc <prvProcessEthernetPacket+0x88>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipARP_FRAME_TYPE:

                        /* The Ethernet frame contains an ARP packet. */
                        if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a6:	2b29      	cmp	r3, #41	@ 0x29
 80091a8:	d905      	bls.n	80091b6 <prvProcessEthernetPacket+0x62>
                        {
                            /* MISRA Ref 11.3.1 [Misaligned access] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                            /* coverity[misra_c_2012_rule_11_3_violation] */
                            eReturned = eARPProcessPacket( pxNetworkBuffer );
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7fc ffe6 	bl	800617c <eARPProcessPacket>
 80091b0:	4603      	mov	r3, r0
 80091b2:	73fb      	strb	r3, [r7, #15]
                        }
                        else
                        {
                            eReturned = eReleaseBuffer;
                        }
                        break;
 80091b4:	e016      	b.n	80091e4 <prvProcessEthernetPacket+0x90>
                            eReturned = eReleaseBuffer;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]
                        break;
 80091ba:	e013      	b.n	80091e4 <prvProcessEthernetPacket+0x90>

                case ipIPv4_FRAME_TYPE:
                case ipIPv6_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091c0:	2b21      	cmp	r3, #33	@ 0x21
 80091c2:	d908      	bls.n	80091d6 <prvProcessEthernetPacket+0x82>
                    {
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        eReturned = prvProcessIPPacket( ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c8:	6879      	ldr	r1, [r7, #4]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 f8c6 	bl	800935c <prvProcessIPPacket>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 80091d4:	e006      	b.n	80091e4 <prvProcessEthernetPacket+0x90>
                        eReturned = eReleaseBuffer;
 80091d6:	2300      	movs	r3, #0
 80091d8:	73fb      	strb	r3, [r7, #15]
                    break;
 80091da:	e003      	b.n	80091e4 <prvProcessEthernetPacket+0x90>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 80091dc:	2300      	movs	r3, #0
 80091de:	73fb      	strb	r3, [r7, #15]
                    #endif
                    break;
 80091e0:	e000      	b.n	80091e4 <prvProcessEthernetPacket+0x90>
            break;
 80091e2:	bf00      	nop
            } /* switch( pxEthernetHeader->usFrameType ) */
        }
    } while( pdFALSE );

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	2b04      	cmp	r3, #4
 80091e8:	d00b      	beq.n	8009202 <prvProcessEthernetPacket+0xae>
 80091ea:	2b04      	cmp	r3, #4
 80091ec:	dc19      	bgt.n	8009222 <prvProcessEthernetPacket+0xce>
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d002      	beq.n	80091f8 <prvProcessEthernetPacket+0xa4>
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	d019      	beq.n	800922a <prvProcessEthernetPacket+0xd6>
 80091f6:	e014      	b.n	8009222 <prvProcessEthernetPacket+0xce>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 80091f8:	2101      	movs	r1, #1
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f9a4 	bl	8009548 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 8009200:	e014      	b.n	800922c <prvProcessEthernetPacket+0xd8>
             * yet. */
            break;

        case eWaitingARPResolution:

            if( pxARPWaitingNetworkBuffer == NULL )
 8009202:	4b0c      	ldr	r3, [pc, #48]	@ (8009234 <prvProcessEthernetPacket+0xe0>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d107      	bne.n	800921a <prvProcessEthernetPacket+0xc6>
            {
                pxARPWaitingNetworkBuffer = pxNetworkBuffer;
 800920a:	4a0a      	ldr	r2, [pc, #40]	@ (8009234 <prvProcessEthernetPacket+0xe0>)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6013      	str	r3, [r2, #0]
                vIPTimerStartARPResolution( ipARP_RESOLUTION_MAX_DELAY );
 8009210:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8009214:	f000 fc06 	bl	8009a24 <vIPTimerStartARPResolution>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );

                iptraceDELAYED_ARP_BUFFER_FULL();
            }

            break;
 8009218:	e008      	b.n	800922c <prvProcessEthernetPacket+0xd8>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f00d fca4 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009220:	e004      	b.n	800922c <prvProcessEthernetPacket+0xd8>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f00d fca0 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009228:	e000      	b.n	800922c <prvProcessEthernetPacket+0xd8>
            break;
 800922a:	bf00      	nop
    }
}
 800922c:	bf00      	nop
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	20000fd4 	.word	0x20000fd4

08009238 <prvProcessUDPPacket>:
 * @return eReleaseBuffer ( please release the buffer ).
 *         eFrameConsumed ( the buffer has now been released ).
 */

static eFrameProcessingResult_t prvProcessUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009238:	b5b0      	push	{r4, r5, r7, lr}
 800923a:	b08c      	sub	sp, #48	@ 0x30
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009240:	2300      	movs	r3, #0
 8009242:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BaseType_t xIsWaitingARPResolution = pdFALSE;
 8009246:	2300      	movs	r3, #0
 8009248:	60bb      	str	r3, [r7, #8]
    /* The IP packet contained a UDP frame. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const UDPPacket_t * pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800924e:	627b      	str	r3, [r7, #36]	@ 0x24
    const UDPHeader_t * pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8009250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009252:	3322      	adds	r3, #34	@ 0x22
 8009254:	62bb      	str	r3, [r7, #40]	@ 0x28

    size_t uxMinSize = ipSIZE_OF_ETH_HEADER + ( size_t ) uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fa76 	bl	8009748 <uxIPHeaderSizePacket>
 800925c:	4603      	mov	r3, r0
 800925e:	3316      	adds	r3, #22
 8009260:	623b      	str	r3, [r7, #32]
    size_t uxLength;
    uint16_t usLength;

    #if ( ipconfigUSE_IPv6 != 0 )
        if( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv6_FRAME_TYPE )
 8009262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009264:	899b      	ldrh	r3, [r3, #12]
 8009266:	b29b      	uxth	r3, r3
 8009268:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800926c:	4293      	cmp	r3, r2
 800926e:	d105      	bne.n	800927c <prvProcessUDPPacket+0x44>
            const ProtocolHeaders_t * pxProtocolHeaders;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] ) );
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009274:	3336      	adds	r3, #54	@ 0x36
 8009276:	61fb      	str	r3, [r7, #28]
            pxUDPHeader = &( pxProtocolHeaders->xUDPHeader );
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    usLength = FreeRTOS_ntohs( pxUDPHeader->usLength );
 800927c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800927e:	889b      	ldrh	r3, [r3, #4]
 8009280:	b29b      	uxth	r3, r3
 8009282:	021b      	lsls	r3, r3, #8
 8009284:	b21a      	sxth	r2, r3
 8009286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009288:	889b      	ldrh	r3, [r3, #4]
 800928a:	b29b      	uxth	r3, r3
 800928c:	0a1b      	lsrs	r3, r3, #8
 800928e:	b29b      	uxth	r3, r3
 8009290:	b21b      	sxth	r3, r3
 8009292:	4313      	orrs	r3, r2
 8009294:	b21b      	sxth	r3, r3
 8009296:	837b      	strh	r3, [r7, #26]
    uxLength = ( size_t ) usLength;
 8009298:	8b7b      	ldrh	r3, [r7, #26]
 800929a:	617b      	str	r3, [r7, #20]

    /* Note the header values required prior to the checksum
     * generation as the checksum pseudo header may clobber some of
     * these values. */
    #if ( ipconfigUSE_IPv4 != 0 )
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 800929c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929e:	899b      	ldrh	r3, [r3, #12]
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	2b08      	cmp	r3, #8
 80092a4:	d11a      	bne.n	80092dc <prvProcessUDPPacket+0xa4>
            ( usLength > ( FreeRTOS_ntohs( pxUDPPacket->xIPHeader.usLength ) - uxIPHeaderSizePacket( pxNetworkBuffer ) ) ) )
 80092a6:	8b7c      	ldrh	r4, [r7, #26]
 80092a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092aa:	8a1b      	ldrh	r3, [r3, #16]
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	021b      	lsls	r3, r3, #8
 80092b0:	b21a      	sxth	r2, r3
 80092b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b4:	8a1b      	ldrh	r3, [r3, #16]
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	0a1b      	lsrs	r3, r3, #8
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	b21b      	sxth	r3, r3
 80092be:	4313      	orrs	r3, r2
 80092c0:	b21b      	sxth	r3, r3
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	461d      	mov	r5, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fa3e 	bl	8009748 <uxIPHeaderSizePacket>
 80092cc:	4603      	mov	r3, r0
 80092ce:	1aeb      	subs	r3, r5, r3
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 80092d0:	429c      	cmp	r4, r3
 80092d2:	d903      	bls.n	80092dc <prvProcessUDPPacket+0xa4>
        {
            eReturn = eReleaseBuffer;
 80092d4:	2300      	movs	r3, #0
 80092d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80092da:	e038      	b.n	800934e <prvProcessUDPPacket+0x116>
        }
        else
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    if( ( pxNetworkBuffer->xDataLength >= uxMinSize ) &&
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e0:	6a3a      	ldr	r2, [r7, #32]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d833      	bhi.n	800934e <prvProcessUDPPacket+0x116>
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2b07      	cmp	r3, #7
 80092ea:	d930      	bls.n	800934e <prvProcessUDPPacket+0x116>
         * size of the UDP header.
         *
         * The size of the UDP packet structure in this implementation
         * includes the size of the Ethernet header, the size of
         * the IP header, and the size of the UDP header. */
        uxPayloadSize_1 = pxNetworkBuffer->xDataLength - uxMinSize;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	613b      	str	r3, [r7, #16]
        uxPayloadSize_2 = uxLength - ipSIZE_OF_UDP_HEADER;
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	3b08      	subs	r3, #8
 80092fa:	60fb      	str	r3, [r7, #12]

        if( uxPayloadSize_1 > uxPayloadSize_2 )
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	429a      	cmp	r2, r3
 8009302:	d904      	bls.n	800930e <prvProcessUDPPacket+0xd6>
        {
            pxNetworkBuffer->xDataLength = uxPayloadSize_2 + uxMinSize;
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	441a      	add	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pxNetworkBuffer->usPort = pxUDPHeader->usSourcePort;
 800930e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	b29a      	uxth	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8009318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931a:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	615a      	str	r2, [r3, #20]
         * by the NIC driver. */

        /* Pass the packet payload to the UDP sockets
         * implementation. */
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
                                       pxUDPHeader->usDestinationPort,
 8009322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009324:	885b      	ldrh	r3, [r3, #2]
 8009326:	b29b      	uxth	r3, r3
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8009328:	f107 0208 	add.w	r2, r7, #8
 800932c:	4619      	mov	r1, r3
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f00c fe2a 	bl	8015f88 <xProcessReceivedUDPPacket>
 8009334:	4603      	mov	r3, r0
 8009336:	2b01      	cmp	r3, #1
 8009338:	d103      	bne.n	8009342 <prvProcessUDPPacket+0x10a>
                                       &( xIsWaitingARPResolution ) ) == pdPASS )
        {
            eReturn = eFrameConsumed;
 800933a:	2303      	movs	r3, #3
 800933c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009340:	e005      	b.n	800934e <prvProcessUDPPacket+0x116>
        }
        else
        {
            /* Is this packet to be set aside for ARP resolution. */
            if( xIsWaitingARPResolution == pdTRUE )
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d102      	bne.n	800934e <prvProcessUDPPacket+0x116>
            {
                eReturn = eWaitingARPResolution;
 8009348:	2304      	movs	r3, #4
 800934a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        /* Length checks failed, the buffer will be released. */
    }

    return eReturn;
 800934e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009352:	4618      	mov	r0, r3
 8009354:	3730      	adds	r7, #48	@ 0x30
 8009356:	46bd      	mov	sp, r7
 8009358:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800935c <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    UBaseType_t uxHeaderLength = ipSIZE_OF_IPv4_HEADER;
 8009366:	2314      	movs	r3, #20
 8009368:	61bb      	str	r3, [r7, #24]
    uint8_t ucProtocol = 0U;
 800936a:	2300      	movs	r3, #0
 800936c:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigUSE_IPv6 != 0 )
        const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 800936e:	2300      	movs	r3, #0
 8009370:	613b      	str	r3, [r7, #16]
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    #if ( ipconfigUSE_IPv4 != 0 )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	330e      	adds	r3, #14
 8009376:	60fb      	str	r3, [r7, #12]
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    switch( pxIPPacket->xEthernetHeader.usFrameType )
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	899b      	ldrh	r3, [r3, #12]
 800937c:	b29b      	uxth	r3, r3
 800937e:	2b08      	cmp	r3, #8
 8009380:	d023      	beq.n	80093ca <prvProcessIPPacket+0x6e>
 8009382:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009386:	4293      	cmp	r3, r2
 8009388:	d144      	bne.n	8009414 <prvProcessIPPacket+0xb8>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case ipIPv6_FRAME_TYPE:

                if( pxNetworkBuffer->xDataLength < sizeof( IPPacket_IPv6_t ) )
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938e:	2b35      	cmp	r3, #53	@ 0x35
 8009390:	d802      	bhi.n	8009398 <prvProcessIPPacket+0x3c>
                {
                    /* The packet size is less than minimum IPv6 packet. */
                    eReturn = eReleaseBuffer;
 8009392:	2300      	movs	r3, #0
 8009394:	77fb      	strb	r3, [r7, #31]
                    /* The IP-header type is copied to a special reserved location a few bytes before the message
                     * starts. In the case of IPv6, this value is never actually used and the line below can safely be removed
                     * with no ill effects. We only store it to help with debugging. */
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
                }
                break;
 8009396:	e043      	b.n	8009420 <prvProcessIPPacket+0xc4>
                    pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800939c:	330e      	adds	r3, #14
 800939e:	613b      	str	r3, [r7, #16]
                    uxHeaderLength = ipSIZE_OF_IPv6_HEADER;
 80093a0:	2328      	movs	r3, #40	@ 0x28
 80093a2:	61bb      	str	r3, [r7, #24]
                    ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	799b      	ldrb	r3, [r3, #6]
 80093a8:	75fb      	strb	r3, [r7, #23]
                    eReturn = prvAllowIPPacketIPv6( ( ( const IPHeader_IPv6_t * ) &( pxIPPacket->xIPHeader ) ), pxNetworkBuffer, uxHeaderLength );
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	330e      	adds	r3, #14
 80093ae:	69ba      	ldr	r2, [r7, #24]
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f001 fb6c 	bl	800aa90 <prvAllowIPPacketIPv6>
 80093b8:	4603      	mov	r3, r0
 80093ba:	77fb      	strb	r3, [r7, #31]
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c0:	3b06      	subs	r3, #6
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	7812      	ldrb	r2, [r2, #0]
 80093c6:	701a      	strb	r2, [r3, #0]
                break;
 80093c8:	e02a      	b.n	8009420 <prvProcessIPPacket+0xc4>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
               {
                   size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	60bb      	str	r3, [r7, #8]

                   /* Check if the IP headers are acceptable and if it has our destination.
                    * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
                    * length in multiples of 4. */
                   uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80093d8:	61bb      	str	r3, [r7, #24]

                   if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093de:	3b0e      	subs	r3, #14
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d802      	bhi.n	80093ec <prvProcessIPPacket+0x90>
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	2b13      	cmp	r3, #19
 80093ea:	d802      	bhi.n	80093f2 <prvProcessIPPacket+0x96>
                       ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
                   {
                       eReturn = eReleaseBuffer;
 80093ec:	2300      	movs	r3, #0
 80093ee:	77fb      	strb	r3, [r7, #31]
                            * buffer is being used. */
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
                       }
                   }

                   break;
 80093f0:	e016      	b.n	8009420 <prvProcessIPPacket+0xc4>
                       ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	7ddb      	ldrb	r3, [r3, #23]
 80093f6:	75fb      	strb	r3, [r7, #23]
                       eReturn = prvAllowIPPacketIPv4( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 80093f8:	69ba      	ldr	r2, [r7, #24]
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f001 f81b 	bl	800a438 <prvAllowIPPacketIPv4>
 8009402:	4603      	mov	r3, r0
 8009404:	77fb      	strb	r3, [r7, #31]
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800940a:	3b06      	subs	r3, #6
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	7812      	ldrb	r2, [r2, #0]
 8009410:	701a      	strb	r2, [r3, #0]
                   break;
 8009412:	e005      	b.n	8009420 <prvProcessIPPacket+0xc4>
               }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            eReturn = eReleaseBuffer;
 8009414:	2300      	movs	r3, #0
 8009416:	77fb      	strb	r3, [r7, #31]
            FreeRTOS_debug_printf( ( "prvProcessIPPacket: Undefined Frame Type \n" ) );
 8009418:	484a      	ldr	r0, [pc, #296]	@ (8009544 <prvProcessIPPacket+0x1e8>)
 800941a:	f018 fa4d 	bl	80218b8 <lUDPLoggingPrintf>
            /* MISRA 16.4 Compliance */
            break;
 800941e:	bf00      	nop

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    /* coverity[cond_const] */
    if( eReturn == eProcessBuffer )
 8009420:	7ffb      	ldrb	r3, [r7, #31]
 8009422:	2b01      	cmp	r3, #1
 8009424:	f040 8088 	bne.w	8009538 <prvProcessIPPacket+0x1dc>
    {
        /* Are there IP-options. */
        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
        switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	899b      	ldrh	r3, [r3, #12]
 800942c:	b29b      	uxth	r3, r3
 800942e:	2b08      	cmp	r3, #8
 8009430:	d004      	beq.n	800943c <prvProcessIPPacket+0xe0>
 8009432:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009436:	4293      	cmp	r3, r2
 8009438:	d009      	beq.n	800944e <prvProcessIPPacket+0xf2>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 800943a:	e020      	b.n	800947e <prvProcessIPPacket+0x122>
                    if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	2b14      	cmp	r3, #20
 8009440:	d91a      	bls.n	8009478 <prvProcessIPPacket+0x11c>
                        eReturn = prvCheckIP4HeaderOptions( pxNetworkBuffer );
 8009442:	6838      	ldr	r0, [r7, #0]
 8009444:	f001 f852 	bl	800a4ec <prvCheckIP4HeaderOptions>
 8009448:	4603      	mov	r3, r0
 800944a:	77fb      	strb	r3, [r7, #31]
                    break;
 800944c:	e014      	b.n	8009478 <prvProcessIPPacket+0x11c>
                    if( xGetExtensionOrder( ucProtocol, 0U ) > 0 )
 800944e:	7dfb      	ldrb	r3, [r7, #23]
 8009450:	2100      	movs	r1, #0
 8009452:	4618      	mov	r0, r3
 8009454:	f001 fb3a 	bl	800aacc <xGetExtensionOrder>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	dd0e      	ble.n	800947c <prvProcessIPPacket+0x120>
                        eReturn = eHandleIPv6ExtensionHeaders( pxNetworkBuffer, pdTRUE );
 800945e:	2101      	movs	r1, #1
 8009460:	6838      	ldr	r0, [r7, #0]
 8009462:	f001 fb99 	bl	800ab98 <eHandleIPv6ExtensionHeaders>
 8009466:	4603      	mov	r3, r0
 8009468:	77fb      	strb	r3, [r7, #31]
                        if( eReturn != eReleaseBuffer )
 800946a:	7ffb      	ldrb	r3, [r7, #31]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d005      	beq.n	800947c <prvProcessIPPacket+0x120>
                            ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	799b      	ldrb	r3, [r3, #6]
 8009474:	75fb      	strb	r3, [r7, #23]
                    break;
 8009476:	e001      	b.n	800947c <prvProcessIPPacket+0x120>
                    break;
 8009478:	bf00      	nop
 800947a:	e000      	b.n	800947e <prvProcessIPPacket+0x122>
                    break;
 800947c:	bf00      	nop

        /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
        /* coverity[misra_c_2012_rule_14_3_violation] */
        /* coverity[const] */
        if( eReturn != eReleaseBuffer )
 800947e:	7ffb      	ldrb	r3, [r7, #31]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d059      	beq.n	8009538 <prvProcessIPPacket+0x1dc>
        {
            /* Add the IP and MAC addresses to the ARP table if they are not
             * already there - otherwise refresh the age of the existing
             * entry. */
            if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8009484:	7dfb      	ldrb	r3, [r7, #23]
 8009486:	2b11      	cmp	r3, #17
 8009488:	d026      	beq.n	80094d8 <prvProcessIPPacket+0x17c>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 800948a:	6838      	ldr	r0, [r7, #0]
 800948c:	f7fd f918 	bl	80066c0 <xCheckRequiresARPResolution>
 8009490:	4603      	mov	r3, r0
 8009492:	2b01      	cmp	r3, #1
 8009494:	d102      	bne.n	800949c <prvProcessIPPacket+0x140>
                {
                    eReturn = eWaitingARPResolution;
 8009496:	2304      	movs	r3, #4
 8009498:	77fb      	strb	r3, [r7, #31]
 800949a:	e01d      	b.n	80094d8 <prvProcessIPPacket+0x17c>
                     * packet.  For UDP packets, this will be done later in
                     * xProcessReceivedUDPPacket(), as soon as it's know that the message
                     * will be handled.  This will prevent the ARP cache getting
                     * overwritten with the IP address of useless broadcast packets. */
                    /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                    switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	899b      	ldrh	r3, [r3, #12]
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	2b08      	cmp	r3, #8
 80094a4:	d00e      	beq.n	80094c4 <prvProcessIPPacket+0x168>
 80094a6:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d113      	bne.n	80094d6 <prvProcessIPPacket+0x17a>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            case ipIPv6_FRAME_TYPE:
                                vNDRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), &( pxIPHeader_IPv6->xSourceAddress ), pxNetworkBuffer->pxEndPoint );
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	1d98      	adds	r0, r3, #6
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f103 0108 	add.w	r1, r3, #8
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094bc:	461a      	mov	r2, r3
 80094be:	f002 f843 	bl	800b548 <vNDRefreshCacheEntry>
                                break;
 80094c2:	e009      	b.n	80094d8 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        #if ( ipconfigUSE_IPv4 != 0 )
                            case ipIPv4_FRAME_TYPE:
                                /* Refresh the age of this cache entry since a packet was received. */
                                vARPRefreshCacheEntryAge( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	1d9a      	adds	r2, r3, #6
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	4619      	mov	r1, r3
 80094ce:	4610      	mov	r0, r2
 80094d0:	f7fd f9d6 	bl	8006880 <vARPRefreshCacheEntryAge>
                                break;
 80094d4:	e000      	b.n	80094d8 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                        default:   /* LCOV_EXCL_LINE */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 80094d6:	bf00      	nop
                    }
                }
            }

            if( eReturn != eWaitingARPResolution )
 80094d8:	7ffb      	ldrb	r3, [r7, #31]
 80094da:	2b04      	cmp	r3, #4
 80094dc:	d02c      	beq.n	8009538 <prvProcessIPPacket+0x1dc>
            {
                switch( ucProtocol )
 80094de:	7dfb      	ldrb	r3, [r7, #23]
 80094e0:	2b3a      	cmp	r3, #58	@ 0x3a
 80094e2:	d010      	beq.n	8009506 <prvProcessIPPacket+0x1aa>
 80094e4:	2b3a      	cmp	r3, #58	@ 0x3a
 80094e6:	dc23      	bgt.n	8009530 <prvProcessIPPacket+0x1d4>
 80094e8:	2b11      	cmp	r3, #17
 80094ea:	d012      	beq.n	8009512 <prvProcessIPPacket+0x1b6>
 80094ec:	2b11      	cmp	r3, #17
 80094ee:	dc1f      	bgt.n	8009530 <prvProcessIPPacket+0x1d4>
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d002      	beq.n	80094fa <prvProcessIPPacket+0x19e>
 80094f4:	2b06      	cmp	r3, #6
 80094f6:	d012      	beq.n	800951e <prvProcessIPPacket+0x1c2>
 80094f8:	e01a      	b.n	8009530 <prvProcessIPPacket+0x1d4>
                             * also be returned, and the source of the ping will know something
                             * went wrong because it will not be able to validate what it
                             * receives. */
                            #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                            {
                                eReturn = ProcessICMPPacket( pxNetworkBuffer );
 80094fa:	6838      	ldr	r0, [r7, #0]
 80094fc:	f7ff f9fe 	bl	80088fc <ProcessICMPPacket>
 8009500:	4603      	mov	r3, r0
 8009502:	77fb      	strb	r3, [r7, #31]
                            }
                            #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
                            break;
 8009504:	e018      	b.n	8009538 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ipPROTOCOL_ICMP_IPv6:
                            eReturn = prvProcessICMPMessage_IPv6( pxNetworkBuffer );
 8009506:	6838      	ldr	r0, [r7, #0]
 8009508:	f002 fb6e 	bl	800bbe8 <prvProcessICMPMessage_IPv6>
 800950c:	4603      	mov	r3, r0
 800950e:	77fb      	strb	r3, [r7, #31]
                            break;
 8009510:	e012      	b.n	8009538 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ipPROTOCOL_UDP:
                        /* The IP packet contained a UDP frame. */

                        eReturn = prvProcessUDPPacket( pxNetworkBuffer );
 8009512:	6838      	ldr	r0, [r7, #0]
 8009514:	f7ff fe90 	bl	8009238 <prvProcessUDPPacket>
 8009518:	4603      	mov	r3, r0
 800951a:	77fb      	strb	r3, [r7, #31]
                        break;
 800951c:	e00c      	b.n	8009538 <prvProcessIPPacket+0x1dc>

                        #if ipconfigUSE_TCP == 1
                            case ipPROTOCOL_TCP:

                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800951e:	6838      	ldr	r0, [r7, #0]
 8009520:	f007 fda0 	bl	8011064 <xProcessReceivedTCPPacket>
 8009524:	4603      	mov	r3, r0
 8009526:	2b01      	cmp	r3, #1
 8009528:	d105      	bne.n	8009536 <prvProcessIPPacket+0x1da>
                                {
                                    eReturn = eFrameConsumed;
 800952a:	2303      	movs	r3, #3
 800952c:	77fb      	strb	r3, [r7, #31]
                                }
                                break;
 800952e:	e002      	b.n	8009536 <prvProcessIPPacket+0x1da>
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        eReturn = eReleaseBuffer;
 8009530:	2300      	movs	r3, #0
 8009532:	77fb      	strb	r3, [r7, #31]
                        break;
 8009534:	e000      	b.n	8009538 <prvProcessIPPacket+0x1dc>
                                break;
 8009536:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 8009538:	7ffb      	ldrb	r3, [r7, #31]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3720      	adds	r7, #32
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	0802434c 	.word	0x0802434c

08009548 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b08e      	sub	sp, #56	@ 0x38
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
    {
        if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009556:	2b3b      	cmp	r3, #59	@ 0x3b
 8009558:	d818      	bhi.n	800958c <vReturnEthernetFrame+0x44>
        {
            BaseType_t xIndex;

            FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955e:	4619      	mov	r1, r3
 8009560:	486a      	ldr	r0, [pc, #424]	@ (800970c <vReturnEthernetFrame+0x1c4>)
 8009562:	f018 f9a9 	bl	80218b8 <lUDPLoggingPrintf>

            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800956a:	637b      	str	r3, [r7, #52]	@ 0x34
 800956c:	e008      	b.n	8009580 <vReturnEthernetFrame+0x38>
            {
                pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009574:	4413      	add	r3, r2
 8009576:	2200      	movs	r2, #0
 8009578:	701a      	strb	r2, [r3, #0]
            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800957a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800957c:	3301      	adds	r3, #1
 800957e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009582:	2b3b      	cmp	r3, #59	@ 0x3b
 8009584:	ddf3      	ble.n	800956e <vReturnEthernetFrame+0x26>
            }

            pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	223c      	movs	r2, #60	@ 0x3c
 800958a:	629a      	str	r2, [r3, #40]	@ 0x28
        }
    }
    #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d111      	bne.n	80095b6 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009596:	4619      	mov	r1, r3
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fb87 	bl	8009cac <pxDuplicateNetworkBufferWithDescriptor>
 800959e:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( pxNewBuffer != NULL )
 80095a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d005      	beq.n	80095b2 <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 80095a6:	2301      	movs	r3, #1
 80095a8:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b0:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            pxNetworkBuffer = pxNewBuffer;
 80095b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b4:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f000 80a3 	beq.w	8009704 <vReturnEthernetFrame+0x1bc>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPPacket_t * pxIPPacket = ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c2:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource = NULL;
 80095c4:	2300      	movs	r3, #0
 80095c6:	633b      	str	r3, [r7, #48]	@ 0x30
        void * pvCopyDest;

        #if ( ipconfigUSE_IPv4 != 0 )
            MACAddress_t xMACAddress;
            eARPLookupResult_t eResult;
            uint32_t ulDestinationIPAddress = 0U;
 80095c8:	2300      	movs	r3, #0
 80095ca:	613b      	str	r3, [r7, #16]
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        /* Send! */
        if( pxNetworkBuffer->pxEndPoint == NULL )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d12f      	bne.n	8009634 <vReturnEthernetFrame+0xec>
        {
            /* _HT_ I wonder if this ad-hoc search of an end-point it necessary. */
            FreeRTOS_printf( ( "vReturnEthernetFrame: No pxEndPoint yet for %x ip?\n", ( unsigned int ) FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ) ) );
 80095d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d6:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80095da:	061a      	lsls	r2, r3, #24
 80095dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095de:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80095e2:	021b      	lsls	r3, r3, #8
 80095e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80095e8:	431a      	orrs	r2, r3
 80095ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ec:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80095f0:	0a1b      	lsrs	r3, r3, #8
 80095f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80095f6:	431a      	orrs	r2, r3
 80095f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fa:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80095fe:	0e1b      	lsrs	r3, r3, #24
 8009600:	4313      	orrs	r3, r2
 8009602:	4619      	mov	r1, r3
 8009604:	4842      	ldr	r0, [pc, #264]	@ (8009710 <vReturnEthernetFrame+0x1c8>)
 8009606:	f018 f957 	bl	80218b8 <lUDPLoggingPrintf>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            switch( ( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer ) )->usFrameType )
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800960e:	899b      	ldrh	r3, [r3, #12]
 8009610:	b29b      	uxth	r3, r3
 8009612:	2b08      	cmp	r3, #8
 8009614:	d003      	beq.n	800961e <vReturnEthernetFrame+0xd6>
 8009616:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800961a:	4293      	cmp	r3, r2
                        break;
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800961c:	e00a      	b.n	8009634 <vReturnEthernetFrame+0xec>
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPPacket->xIPHeader.ulDestinationIPAddress, 7 );
 800961e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009620:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009624:	2107      	movs	r1, #7
 8009626:	4618      	mov	r0, r3
 8009628:	f003 fcfe 	bl	800d028 <FreeRTOS_FindEndPointOnNetMask>
 800962c:	4602      	mov	r2, r0
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	631a      	str	r2, [r3, #48]	@ 0x30
                        break;
 8009632:	bf00      	nop
            }
        }

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009638:	2b00      	cmp	r3, #0
 800963a:	d063      	beq.n	8009704 <vReturnEthernetFrame+0x1bc>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface; /*_RB_ Why not use the pxNetworkBuffer->pxNetworkInterface directly? */
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009640:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8009644:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Interpret the Ethernet packet being sent. */
            switch( pxIPPacket->xEthernetHeader.usFrameType )
 8009646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009648:	899b      	ldrh	r3, [r3, #12]
 800964a:	b29b      	uxth	r3, r3
 800964c:	2b08      	cmp	r3, #8
 800964e:	d11c      	bne.n	800968a <vReturnEthernetFrame+0x142>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        ulDestinationIPAddress = pxIPPacket->xIPHeader.ulDestinationIPAddress;
 8009650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009652:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009656:	613b      	str	r3, [r7, #16]

                        /* Try to find a MAC address corresponding to the destination IP
                         * address. */
                        eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800965e:	f107 0114 	add.w	r1, r7, #20
 8009662:	f107 0310 	add.w	r3, r7, #16
 8009666:	4618      	mov	r0, r3
 8009668:	f7fd fa54 	bl	8006b14 <eARPGetCacheEntry>
 800966c:	4603      	mov	r3, r0
 800966e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                        if( eResult == eARPCacheHit )
 8009672:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009676:	2b01      	cmp	r3, #1
 8009678:	d103      	bne.n	8009682 <vReturnEthernetFrame+0x13a>
                        {
                            /* Best case scenario - an address is found, use it. */
                            pvCopySource = &xMACAddress;
 800967a:	f107 0314 	add.w	r3, r7, #20
 800967e:	633b      	str	r3, [r7, #48]	@ 0x30
                        else
                        {
                            /* If an address is not found, just swap the source and destination MAC addresses. */
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
                        }
                        break;
 8009680:	e007      	b.n	8009692 <vReturnEthernetFrame+0x14a>
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009684:	3306      	adds	r3, #6
 8009686:	633b      	str	r3, [r7, #48]	@ 0x30
                        break;
 8009688:	e003      	b.n	8009692 <vReturnEthernetFrame+0x14a>

                case ipIPv6_FRAME_TYPE:
                case ipARP_FRAME_TYPE:
                default:
                    /* In case of ARP frame, just swap the source and destination MAC addresses. */
                    pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800968a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968c:	3306      	adds	r3, #6
 800968e:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 8009690:	bf00      	nop
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xDestinationAddress );
 8009692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009694:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxIPPacket->xEthernetHeader.xDestinationAddress ) );
 8009696:	2206      	movs	r2, #6
 8009698:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800969a:	69f8      	ldr	r0, [r7, #28]
 800969c:	f018 fb28 	bl	8021cf0 <memcpy>

            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a4:	33e8      	adds	r3, #232	@ 0xe8
 80096a6:	633b      	str	r3, [r7, #48]	@ 0x30
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 80096a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096aa:	3306      	adds	r3, #6
 80096ac:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80096ae:	2206      	movs	r2, #6
 80096b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80096b2:	69f8      	ldr	r0, [r7, #28]
 80096b4:	f018 fb1c 	bl	8021cf0 <memcpy>

            /* Send! */
            if( xIsCallingFromIPTask() == pdTRUE )
 80096b8:	f000 fbd4 	bl	8009e64 <xIsCallingFromIPTask>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d106      	bne.n	80096d0 <vReturnEthernetFrame+0x188>
            {
                iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 80096c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	6879      	ldr	r1, [r7, #4]
 80096ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80096cc:	4798      	blx	r3
                /* This should never reach or the packet is gone. */
                configASSERT( pdFALSE );
            }
        }
    }
}
 80096ce:	e019      	b.n	8009704 <vReturnEthernetFrame+0x1bc>
            else if( xReleaseAfterSend != pdFALSE )
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d011      	beq.n	80096fa <vReturnEthernetFrame+0x1b2>
                xSendEvent.eEventType = eNetworkTxEvent;
 80096d6:	2302      	movs	r3, #2
 80096d8:	723b      	strb	r3, [r7, #8]
                xSendEvent.pvData = pxNetworkBuffer;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	60fb      	str	r3, [r7, #12]
                if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 80096de:	f107 0308 	add.w	r3, r7, #8
 80096e2:	f04f 31ff 	mov.w	r1, #4294967295
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7ff fc7a 	bl	8008fe0 <xSendEventStructToIPTask>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d108      	bne.n	8009704 <vReturnEthernetFrame+0x1bc>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f00d fa38 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
}
 80096f8:	e004      	b.n	8009704 <vReturnEthernetFrame+0x1bc>
                configASSERT( pdFALSE );
 80096fa:	f640 019f 	movw	r1, #2207	@ 0x89f
 80096fe:	4805      	ldr	r0, [pc, #20]	@ (8009714 <vReturnEthernetFrame+0x1cc>)
 8009700:	f7f7 ffb4 	bl	800166c <vAssertCalled>
}
 8009704:	bf00      	nop
 8009706:	3738      	adds	r7, #56	@ 0x38
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	08024378 	.word	0x08024378
 8009710:	0802439c 	.word	0x0802439c
 8009714:	08024264 	.word	0x08024264

08009718 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 8009718:	b480      	push	{r7}
 800971a:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 800971c:	4b03      	ldr	r3, [pc, #12]	@ (800972c <xIPIsNetworkTaskReady+0x14>)
 800971e:	681b      	ldr	r3, [r3, #0]
}
 8009720:	4618      	mov	r0, r3
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	20000fe8 	.word	0x20000fe8

08009730 <uxGetMinimumIPQueueSpace>:
 * @brief Get the minimum space in the IP task queue.
 *
 * @return The minimum possible space in the IP task queue.
 */
    UBaseType_t uxGetMinimumIPQueueSpace( void )
    {
 8009730:	b480      	push	{r7}
 8009732:	af00      	add	r7, sp, #0
        return uxQueueMinimumSpace;
 8009734:	4b03      	ldr	r3, [pc, #12]	@ (8009744 <uxGetMinimumIPQueueSpace+0x14>)
 8009736:	681b      	ldr	r3, [r3, #0]
    }
 8009738:	4618      	mov	r0, r3
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	20000014 	.word	0x20000014

08009748 <uxIPHeaderSizePacket>:
 * @brief Get the size of the IP-header, by checking the type of the network buffer.
 * @param[in] pxNetworkBuffer The network buffer.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
    size_t uxResult;
    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009754:	60bb      	str	r3, [r7, #8]

    if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	899b      	ldrh	r3, [r3, #12]
 800975a:	b29b      	uxth	r3, r3
 800975c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009760:	4293      	cmp	r3, r2
 8009762:	d102      	bne.n	800976a <uxIPHeaderSizePacket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8009764:	2328      	movs	r3, #40	@ 0x28
 8009766:	60fb      	str	r3, [r7, #12]
 8009768:	e001      	b.n	800976e <uxIPHeaderSizePacket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800976a:	2314      	movs	r3, #20
 800976c:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 800976e:	68fb      	ldr	r3, [r7, #12]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <uxIPHeaderSizeSocket>:
 * @brief Get the size of the IP-header, by checking if the socket bIsIPv6 set.
 * @param[in] pxSocket The socket.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizeSocket( const FreeRTOS_Socket_t * pxSocket )
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
    size_t uxResult;

    if( ( pxSocket != NULL ) && ( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED ) )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d009      	beq.n	800979e <uxIPHeaderSizeSocket+0x22>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	7a1b      	ldrb	r3, [r3, #8]
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <uxIPHeaderSizeSocket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8009798:	2328      	movs	r3, #40	@ 0x28
 800979a:	60fb      	str	r3, [r7, #12]
 800979c:	e001      	b.n	80097a2 <uxIPHeaderSizeSocket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800979e:	2314      	movs	r3, #20
 80097a0:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 80097a2:	68fb      	ldr	r3, [r7, #12]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <xCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
TickType_t xCalculateSleepTime( void )
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
    TickType_t uxMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    uxMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 80097b6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80097ba:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 80097bc:	4b28      	ldr	r3, [pc, #160]	@ (8009860 <xCalculateSleepTime+0xb0>)
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d007      	beq.n	80097da <xCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < uxMaximumSleepTime )
 80097ca:	4b25      	ldr	r3, [pc, #148]	@ (8009860 <xCalculateSleepTime+0xb0>)
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d902      	bls.n	80097da <xCalculateSleepTime+0x2a>
        {
            uxMaximumSleepTime = xARPTimer.ulRemainingTime;
 80097d4:	4b22      	ldr	r3, [pc, #136]	@ (8009860 <xCalculateSleepTime+0xb0>)
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	607b      	str	r3, [r7, #4]
        }
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 80097da:	4b22      	ldr	r3, [pc, #136]	@ (8009864 <xCalculateSleepTime+0xb4>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	603b      	str	r3, [r7, #0]

        while( pxEndPoint != NULL )
 80097e0:	e015      	b.n	800980e <xCalculateSleepTime+0x5e>
        {
            if( pxEndPoint->xDHCP_RATimer.bActive != pdFALSE_UNSIGNED )
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 80097e8:	f003 0301 	and.w	r3, r3, #1
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d009      	beq.n	8009806 <xCalculateSleepTime+0x56>
            {
                if( pxEndPoint->xDHCP_RATimer.ulRemainingTime < uxMaximumSleepTime )
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d903      	bls.n	8009806 <xCalculateSleepTime+0x56>
                {
                    uxMaximumSleepTime = pxEndPoint->xDHCP_RATimer.ulRemainingTime;
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8009804:	607b      	str	r3, [r7, #4]
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800980c:	603b      	str	r3, [r7, #0]
        while( pxEndPoint != NULL )
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1e6      	bne.n	80097e2 <xCalculateSleepTime+0x32>
    }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
    {
        if( xTCPTimer.bActive != pdFALSE_UNSIGNED )
 8009814:	4b14      	ldr	r3, [pc, #80]	@ (8009868 <xCalculateSleepTime+0xb8>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	f003 0301 	and.w	r3, r3, #1
 800981c:	b2db      	uxtb	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d007      	beq.n	8009832 <xCalculateSleepTime+0x82>
        {
            if( xTCPTimer.ulRemainingTime < uxMaximumSleepTime )
 8009822:	4b11      	ldr	r3, [pc, #68]	@ (8009868 <xCalculateSleepTime+0xb8>)
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	429a      	cmp	r2, r3
 800982a:	d902      	bls.n	8009832 <xCalculateSleepTime+0x82>
            {
                uxMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800982c:	4b0e      	ldr	r3, [pc, #56]	@ (8009868 <xCalculateSleepTime+0xb8>)
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	607b      	str	r3, [r7, #4]
    }
    #endif

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 8009832:	4b0e      	ldr	r3, [pc, #56]	@ (800986c <xCalculateSleepTime+0xbc>)
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b00      	cmp	r3, #0
 800983e:	d007      	beq.n	8009850 <xCalculateSleepTime+0xa0>
        {
            if( xDNSTimer.ulRemainingTime < uxMaximumSleepTime )
 8009840:	4b0a      	ldr	r3, [pc, #40]	@ (800986c <xCalculateSleepTime+0xbc>)
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	429a      	cmp	r2, r3
 8009848:	d902      	bls.n	8009850 <xCalculateSleepTime+0xa0>
            {
                uxMaximumSleepTime = xDNSTimer.ulRemainingTime;
 800984a:	4b08      	ldr	r3, [pc, #32]	@ (800986c <xCalculateSleepTime+0xbc>)
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif

    return uxMaximumSleepTime;
 8009850:	687b      	ldr	r3, [r7, #4]
}
 8009852:	4618      	mov	r0, r3
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	20001004 	.word	0x20001004
 8009864:	20001360 	.word	0x20001360
 8009868:	20001018 	.word	0x20001018
 800986c:	2000102c 	.word	0x2000102c

08009870 <vCheckNetworkTimers>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void vCheckNetworkTimers( void )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 8009876:	484f      	ldr	r0, [pc, #316]	@ (80099b4 <vCheckNetworkTimers+0x144>)
 8009878:	f000 f932 	bl	8009ae0 <prvIPTimerCheck>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d002      	beq.n	8009888 <vCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 8009882:	2003      	movs	r0, #3
 8009884:	f7ff fb96 	bl	8008fb4 <xSendEventToIPTask>
    }

    /* Is the ARP resolution timer expired? */
    if( prvIPTimerCheck( &xARPResolutionTimer ) != pdFALSE )
 8009888:	484b      	ldr	r0, [pc, #300]	@ (80099b8 <vCheckNetworkTimers+0x148>)
 800988a:	f000 f929 	bl	8009ae0 <prvIPTimerCheck>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00e      	beq.n	80098b2 <vCheckNetworkTimers+0x42>
    {
        if( pxARPWaitingNetworkBuffer != NULL )
 8009894:	4b49      	ldr	r3, [pc, #292]	@ (80099bc <vCheckNetworkTimers+0x14c>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00a      	beq.n	80098b2 <vCheckNetworkTimers+0x42>
        {
            /* Disable the ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800989c:	2000      	movs	r0, #0
 800989e:	f000 f995 	bl	8009bcc <vIPSetARPResolutionTimerEnableState>

            /* We have waited long enough for the ARP response. Now, free the network
             * buffer. */
            vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 80098a2:	4b46      	ldr	r3, [pc, #280]	@ (80099bc <vCheckNetworkTimers+0x14c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f00d f95e 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>

            /* Clear the pointer. */
            pxARPWaitingNetworkBuffer = NULL;
 80098ac:	4b43      	ldr	r3, [pc, #268]	@ (80099bc <vCheckNetworkTimers+0x14c>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	601a      	str	r2, [r3, #0]
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        /* Is it time for DHCP processing? */
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 80098b2:	4b43      	ldr	r3, [pc, #268]	@ (80099c0 <vCheckNetworkTimers+0x150>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	613b      	str	r3, [r7, #16]

        while( pxEndPoint != NULL )
 80098b8:	e01f      	b.n	80098fa <vCheckNetworkTimers+0x8a>
        {
            if( prvIPTimerCheck( &( pxEndPoint->xDHCP_RATimer ) ) != pdFALSE )
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	33f8      	adds	r3, #248	@ 0xf8
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 f90e 	bl	8009ae0 <prvIPTimerCheck>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d013      	beq.n	80098f2 <vCheckNetworkTimers+0x82>
                        ( void ) xSendDHCPEvent( pxEndPoint );
                    }
                #endif /* ( ipconfigUSE_DHCP == 1 ) */

                #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                    if( END_POINT_USES_RA( pxEndPoint ) )
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80098d0:	f003 0304 	and.w	r3, r3, #4
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00b      	beq.n	80098f2 <vCheckNetworkTimers+0x82>
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80098e0:	f003 0302 	and.w	r3, r3, #2
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d003      	beq.n	80098f2 <vCheckNetworkTimers+0x82>
                    {
                        vRAProcess( pdFALSE, pxEndPoint );
 80098ea:	6939      	ldr	r1, [r7, #16]
 80098ec:	2000      	movs	r0, #0
 80098ee:	f003 f8f7 	bl	800cae0 <vRAProcess>
                    }
                #endif /* ( ipconfigUSE_RA != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80098f8:	613b      	str	r3, [r7, #16]
        while( pxEndPoint != NULL )
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1dc      	bne.n	80098ba <vCheckNetworkTimers+0x4a>
    #endif /* ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA != 0 ) */

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* Is it time for DNS processing? */
        if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 8009900:	4830      	ldr	r0, [pc, #192]	@ (80099c4 <vCheckNetworkTimers+0x154>)
 8009902:	f000 f8ed 	bl	8009ae0 <prvIPTimerCheck>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <vCheckNetworkTimers+0xa2>
        {
            vDNSCheckCallBack( NULL );
 800990c:	2000      	movs	r0, #0
 800990e:	f7fd fff9 	bl	8007904 <vDNSCheckCallBack>
        TickType_t xNextTime;
        BaseType_t xCheckTCPSockets;

        /* If the IP task has messages waiting to be processed then
         * it will not sleep in any case. */
        if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 8009912:	4b2d      	ldr	r3, [pc, #180]	@ (80099c8 <vCheckNetworkTimers+0x158>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4618      	mov	r0, r3
 8009918:	f7f9 fe44 	bl	80035a4 <uxQueueMessagesWaiting>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d102      	bne.n	8009928 <vCheckNetworkTimers+0xb8>
        {
            xWillSleep = pdTRUE;
 8009922:	2301      	movs	r3, #1
 8009924:	60fb      	str	r3, [r7, #12]
 8009926:	e001      	b.n	800992c <vCheckNetworkTimers+0xbc>
        }
        else
        {
            xWillSleep = pdFALSE;
 8009928:	2300      	movs	r3, #0
 800992a:	60fb      	str	r3, [r7, #12]
        }

        /* Sockets need to be checked if the TCP timer has expired. */
        xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800992c:	4827      	ldr	r0, [pc, #156]	@ (80099cc <vCheckNetworkTimers+0x15c>)
 800992e:	f000 f8d7 	bl	8009ae0 <prvIPTimerCheck>
 8009932:	60b8      	str	r0, [r7, #8]

        /* Sockets will also be checked if there are TCP messages but the
        * message queue is empty (indicated by xWillSleep being true). */
        if( xWillSleep != pdFALSE )
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <vCheckNetworkTimers+0xce>
        {
            xCheckTCPSockets = pdTRUE;
 800993a:	2301      	movs	r3, #1
 800993c:	60bb      	str	r3, [r7, #8]
        }

        if( xCheckTCPSockets != pdFALSE )
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d007      	beq.n	8009954 <vCheckNetworkTimers+0xe4>
        {
            /* Attend to the sockets, returning the period after which the
             * check must be repeated. */
            xNextTime = xTCPTimerCheck( xWillSleep );
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f005 ff3f 	bl	800f7c8 <xTCPTimerCheck>
 800994a:	6038      	str	r0, [r7, #0]
            prvIPTimerStart( &xTCPTimer, xNextTime );
 800994c:	6839      	ldr	r1, [r7, #0]
 800994e:	481f      	ldr	r0, [pc, #124]	@ (80099cc <vCheckNetworkTimers+0x15c>)
 8009950:	f000 f844 	bl	80099dc <prvIPTimerStart>
        }
    }

    /* See if any socket was planned to be closed. */
    vSocketCloseNextTime( NULL );
 8009954:	2000      	movs	r0, #0
 8009956:	f006 fe6f 	bl	8010638 <vSocketCloseNextTime>

    /* See if any reusable socket needs to go back to 'eTCP_LISTEN' state. */
    vSocketListenNextTime( NULL );
 800995a:	2000      	movs	r0, #0
 800995c:	f006 fe88 	bl	8010670 <vSocketListenNextTime>
    #endif /* ipconfigUSE_TCP == 1 */

    /* Is it time to trigger the repeated NetworkDown events? */
    if( xAllNetworksUp == pdFALSE )
 8009960:	4b1b      	ldr	r3, [pc, #108]	@ (80099d0 <vCheckNetworkTimers+0x160>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d120      	bne.n	80099aa <vCheckNetworkTimers+0x13a>
    {
        if( prvIPTimerCheck( &( xNetworkTimer ) ) != pdFALSE )
 8009968:	481a      	ldr	r0, [pc, #104]	@ (80099d4 <vCheckNetworkTimers+0x164>)
 800996a:	f000 f8b9 	bl	8009ae0 <prvIPTimerCheck>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d01a      	beq.n	80099aa <vCheckNetworkTimers+0x13a>
        {
            BaseType_t xUp = pdTRUE;
 8009974:	2301      	movs	r3, #1
 8009976:	607b      	str	r3, [r7, #4]

            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8009978:	4b17      	ldr	r3, [pc, #92]	@ (80099d8 <vCheckNetworkTimers+0x168>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	617b      	str	r3, [r7, #20]
 800997e:	e00e      	b.n	800999e <vCheckNetworkTimers+0x12e>
            {
                if( pxInterface->bits.bInterfaceUp == pdFALSE_UNSIGNED )
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	7f1b      	ldrb	r3, [r3, #28]
 8009984:	f003 0301 	and.w	r3, r3, #1
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	d104      	bne.n	8009998 <vCheckNetworkTimers+0x128>
                {
                    xUp = pdFALSE;
 800998e:	2300      	movs	r3, #0
 8009990:	607b      	str	r3, [r7, #4]
                    FreeRTOS_NetworkDown( pxInterface );
 8009992:	6978      	ldr	r0, [r7, #20]
 8009994:	f7ff fa30 	bl	8008df8 <FreeRTOS_NetworkDown>
            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800999c:	617b      	str	r3, [r7, #20]
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1ed      	bne.n	8009980 <vCheckNetworkTimers+0x110>
                }
            }

            vSetAllNetworksUp( xUp );
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f971 	bl	8009c8c <vSetAllNetworksUp>
        }
    }
}
 80099aa:	bf00      	nop
 80099ac:	3718      	adds	r7, #24
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	20001004 	.word	0x20001004
 80099b8:	20000ff0 	.word	0x20000ff0
 80099bc:	20000fd4 	.word	0x20000fd4
 80099c0:	20001360 	.word	0x20001360
 80099c4:	2000102c 	.word	0x2000102c
 80099c8:	20000fd8 	.word	0x20000fd8
 80099cc:	20001018 	.word	0x20001018
 80099d0:	20000fec 	.word	0x20000fec
 80099d4:	20001040 	.word	0x20001040
 80099d8:	20001364 	.word	0x20001364

080099dc <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	3304      	adds	r3, #4
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fa fec0 	bl	8004770 <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d105      	bne.n	8009a08 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	7813      	ldrb	r3, [r2, #0]
 8009a00:	f043 0302 	orr.w	r3, r3, #2
 8009a04:	7013      	strb	r3, [r2, #0]
 8009a06:	e004      	b.n	8009a12 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	7813      	ldrb	r3, [r2, #0]
 8009a0c:	f36f 0341 	bfc	r3, #1, #1
 8009a10:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	7813      	ldrb	r3, [r2, #0]
 8009a16:	f043 0301 	orr.w	r3, r3, #1
 8009a1a:	7013      	strb	r3, [r2, #0]
}
 8009a1c:	bf00      	nop
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <vIPTimerStartARPResolution>:
 * @brief Start an ARP Resolution timer.
 *
 * @param[in] xTime Time to be loaded into the ARP Resolution timer.
 */
void vIPTimerStartARPResolution( TickType_t xTime )
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
    prvIPTimerStart( &( xARPResolutionTimer ), xTime );
 8009a2c:	6879      	ldr	r1, [r7, #4]
 8009a2e:	4803      	ldr	r0, [pc, #12]	@ (8009a3c <vIPTimerStartARPResolution+0x18>)
 8009a30:	f7ff ffd4 	bl	80099dc <prvIPTimerStart>
}
 8009a34:	bf00      	nop
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	20000ff0 	.word	0x20000ff0

08009a40 <prvIPTimerReload>:
 * @param[in] pxTimer Pointer to the IP timer.
 * @param[in] xTime Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7ff ffc2 	bl	80099dc <prvIPTimerStart>
}
 8009a58:	bf00      	nop
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <vTCPTimerReload>:
 * @brief Sets the reload time of the TCP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the TCP timer.
 */
    void vTCPTimerReload( TickType_t xTime )
    {
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xTCPTimer, xTime );
 8009a68:	6879      	ldr	r1, [r7, #4]
 8009a6a:	4803      	ldr	r0, [pc, #12]	@ (8009a78 <vTCPTimerReload+0x18>)
 8009a6c:	f7ff ffe8 	bl	8009a40 <prvIPTimerReload>
    }
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	20001018 	.word	0x20001018

08009a7c <vARPTimerReload>:
 * @brief Sets the reload time of the ARP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the ARP timer.
 */
void vARPTimerReload( TickType_t xTime )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xARPTimer, xTime );
 8009a84:	6879      	ldr	r1, [r7, #4]
 8009a86:	4803      	ldr	r0, [pc, #12]	@ (8009a94 <vARPTimerReload+0x18>)
 8009a88:	f7ff ffda 	bl	8009a40 <prvIPTimerReload>
}
 8009a8c:	bf00      	nop
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	20001004 	.word	0x20001004

08009a98 <vDHCP_RATimerReload>:
 * @param[in] uxClockTicks The number of clock-ticks after which the timer should expire.
 */

    void vDHCP_RATimerReload( NetworkEndPoint_t * pxEndPoint,
                              TickType_t uxClockTicks )
    {
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vDHCP_RATimerReload: %lu\n", uxClockTicks ) );
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	4806      	ldr	r0, [pc, #24]	@ (8009ac0 <vDHCP_RATimerReload+0x28>)
 8009aa6:	f017 ff07 	bl	80218b8 <lUDPLoggingPrintf>
        prvIPTimerReload( &( pxEndPoint->xDHCP_RATimer ), uxClockTicks );
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	33f8      	adds	r3, #248	@ 0xf8
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7ff ffc5 	bl	8009a40 <prvIPTimerReload>
    }
 8009ab6:	bf00      	nop
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	080243d0 	.word	0x080243d0

08009ac4 <vNetworkTimerReload>:
 * @brief Reload the Network timer.
 *
 * @param[in] xTime Time to be reloaded into the Network timer.
 */
void vNetworkTimerReload( TickType_t xTime )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xNetworkTimer, xTime );
 8009acc:	6879      	ldr	r1, [r7, #4]
 8009ace:	4803      	ldr	r0, [pc, #12]	@ (8009adc <vNetworkTimerReload+0x18>)
 8009ad0:	f7ff ffb6 	bl	8009a40 <prvIPTimerReload>
}
 8009ad4:	bf00      	nop
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	20001040 	.word	0x20001040

08009ae0 <prvIPTimerCheck>:
 * @param[in] pxTimer Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d102      	bne.n	8009afc <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 8009af6:	2300      	movs	r3, #0
 8009af8:	60fb      	str	r3, [r7, #12]
 8009afa:	e028      	b.n	8009b4e <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	f003 0302 	and.w	r3, r3, #2
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10f      	bne.n	8009b2a <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	1d1a      	adds	r2, r3, #4
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	330c      	adds	r3, #12
 8009b12:	4619      	mov	r1, r3
 8009b14:	4610      	mov	r0, r2
 8009b16:	f7fa fe63 	bl	80047e0 <xTaskCheckForTimeOut>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d004      	beq.n	8009b2a <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	7813      	ldrb	r3, [r2, #0]
 8009b24:	f043 0302 	orr.w	r3, r3, #2
 8009b28:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	f003 0302 	and.w	r3, r3, #2
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d008      	beq.n	8009b4a <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7ff ff4c 	bl	80099dc <prvIPTimerStart>
            xReturn = pdTRUE;
 8009b44:	2301      	movs	r3, #1
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	e001      	b.n	8009b4e <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <vIPSetTCPTimerExpiredState>:
 * @brief Enable/disable the TCP timer.
 *
 * @param[in] xExpiredState pdTRUE - set as expired; pdFALSE - set as non-expired.
 */
    void vIPSetTCPTimerExpiredState( BaseType_t xExpiredState )
    {
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
        xTCPTimer.bActive = pdTRUE_UNSIGNED;
 8009b60:	4a0c      	ldr	r2, [pc, #48]	@ (8009b94 <vIPSetTCPTimerExpiredState+0x3c>)
 8009b62:	7813      	ldrb	r3, [r2, #0]
 8009b64:	f043 0301 	orr.w	r3, r3, #1
 8009b68:	7013      	strb	r3, [r2, #0]

        if( xExpiredState != pdFALSE )
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d005      	beq.n	8009b7c <vIPSetTCPTimerExpiredState+0x24>
        {
            xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8009b70:	4a08      	ldr	r2, [pc, #32]	@ (8009b94 <vIPSetTCPTimerExpiredState+0x3c>)
 8009b72:	7813      	ldrb	r3, [r2, #0]
 8009b74:	f043 0302 	orr.w	r3, r3, #2
 8009b78:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
        }
    }
 8009b7a:	e004      	b.n	8009b86 <vIPSetTCPTimerExpiredState+0x2e>
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
 8009b7c:	4a05      	ldr	r2, [pc, #20]	@ (8009b94 <vIPSetTCPTimerExpiredState+0x3c>)
 8009b7e:	7813      	ldrb	r3, [r2, #0]
 8009b80:	f36f 0341 	bfc	r3, #1, #1
 8009b84:	7013      	strb	r3, [r2, #0]
    }
 8009b86:	bf00      	nop
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	20001018 	.word	0x20001018

08009b98 <vIPSetARPTimerEnableState>:
 * @brief Enable/disable the ARP timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
void vIPSetARPTimerEnableState( BaseType_t xEnableState )
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d005      	beq.n	8009bb2 <vIPSetARPTimerEnableState+0x1a>
    {
        xARPTimer.bActive = pdTRUE_UNSIGNED;
 8009ba6:	4a08      	ldr	r2, [pc, #32]	@ (8009bc8 <vIPSetARPTimerEnableState+0x30>)
 8009ba8:	7813      	ldrb	r3, [r2, #0]
 8009baa:	f043 0301 	orr.w	r3, r3, #1
 8009bae:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 8009bb0:	e004      	b.n	8009bbc <vIPSetARPTimerEnableState+0x24>
        xARPTimer.bActive = pdFALSE_UNSIGNED;
 8009bb2:	4a05      	ldr	r2, [pc, #20]	@ (8009bc8 <vIPSetARPTimerEnableState+0x30>)
 8009bb4:	7813      	ldrb	r3, [r2, #0]
 8009bb6:	f36f 0300 	bfc	r3, #0, #1
 8009bba:	7013      	strb	r3, [r2, #0]
}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	20001004 	.word	0x20001004

08009bcc <vIPSetARPResolutionTimerEnableState>:
 * @brief Enable or disable the ARP resolution timer.
 *
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
void vIPSetARPResolutionTimerEnableState( BaseType_t xEnableState )
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d005      	beq.n	8009be6 <vIPSetARPResolutionTimerEnableState+0x1a>
    {
        xARPResolutionTimer.bActive = pdTRUE_UNSIGNED;
 8009bda:	4a08      	ldr	r2, [pc, #32]	@ (8009bfc <vIPSetARPResolutionTimerEnableState+0x30>)
 8009bdc:	7813      	ldrb	r3, [r2, #0]
 8009bde:	f043 0301 	orr.w	r3, r3, #1
 8009be2:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 8009be4:	e004      	b.n	8009bf0 <vIPSetARPResolutionTimerEnableState+0x24>
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
 8009be6:	4a05      	ldr	r2, [pc, #20]	@ (8009bfc <vIPSetARPResolutionTimerEnableState+0x30>)
 8009be8:	7813      	ldrb	r3, [r2, #0]
 8009bea:	f36f 0300 	bfc	r3, #0, #1
 8009bee:	7013      	strb	r3, [r2, #0]
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	20000ff0 	.word	0x20000ff0

08009c00 <vIPSetDHCP_RATimerEnableState>:
 * @param[in] pxEndPoint The end-point that needs to acquire an IP-address.
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetDHCP_RATimerEnableState( NetworkEndPoint_t * pxEndPoint,
                                        BaseType_t xEnableState )
    {
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vIPSetDHCP_RATimerEnableState: %s\n", ( xEnableState != 0 ) ? "On" : "Off" ) );
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d001      	beq.n	8009c14 <vIPSetDHCP_RATimerEnableState+0x14>
 8009c10:	4b0e      	ldr	r3, [pc, #56]	@ (8009c4c <vIPSetDHCP_RATimerEnableState+0x4c>)
 8009c12:	e000      	b.n	8009c16 <vIPSetDHCP_RATimerEnableState+0x16>
 8009c14:	4b0e      	ldr	r3, [pc, #56]	@ (8009c50 <vIPSetDHCP_RATimerEnableState+0x50>)
 8009c16:	4619      	mov	r1, r3
 8009c18:	480e      	ldr	r0, [pc, #56]	@ (8009c54 <vIPSetDHCP_RATimerEnableState+0x54>)
 8009c1a:	f017 fe4d 	bl	80218b8 <lUDPLoggingPrintf>

        /* 'xDHCP_RATimer' is shared between DHCP (IPv4) and RA/SLAAC (IPv6). */
        if( xEnableState != 0 )
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d007      	beq.n	8009c34 <vIPSetDHCP_RATimerEnableState+0x34>
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdTRUE_UNSIGNED;
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 8009c2a:	f043 0301 	orr.w	r3, r3, #1
 8009c2e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
        }
        else
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 8009c32:	e006      	b.n	8009c42 <vIPSetDHCP_RATimerEnableState+0x42>
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 8009c3a:	f36f 0300 	bfc	r3, #0, #1
 8009c3e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
    }
 8009c42:	bf00      	nop
 8009c44:	3708      	adds	r7, #8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	080243ec 	.word	0x080243ec
 8009c50:	080243f0 	.word	0x080243f0
 8009c54:	080243f4 	.word	0x080243f4

08009c58 <vIPSetDNSTimerEnableState>:
 * @brief Enable/disable the DNS timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDNSTimerEnableState( BaseType_t xEnableState )
    {
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
        if( xEnableState != 0 )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d005      	beq.n	8009c72 <vIPSetDNSTimerEnableState+0x1a>
        {
            xDNSTimer.bActive = pdTRUE_UNSIGNED;
 8009c66:	4a08      	ldr	r2, [pc, #32]	@ (8009c88 <vIPSetDNSTimerEnableState+0x30>)
 8009c68:	7813      	ldrb	r3, [r2, #0]
 8009c6a:	f043 0301 	orr.w	r3, r3, #1
 8009c6e:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 8009c70:	e004      	b.n	8009c7c <vIPSetDNSTimerEnableState+0x24>
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
 8009c72:	4a05      	ldr	r2, [pc, #20]	@ (8009c88 <vIPSetDNSTimerEnableState+0x30>)
 8009c74:	7813      	ldrb	r3, [r2, #0]
 8009c76:	f36f 0300 	bfc	r3, #0, #1
 8009c7a:	7013      	strb	r3, [r2, #0]
    }
 8009c7c:	bf00      	nop
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	2000102c 	.word	0x2000102c

08009c8c <vSetAllNetworksUp>:
/**
 * @brief Mark whether all interfaces are up or at least one interface is down.
 *        If all interfaces are up, the 'xNetworkTimer' will not be checked.
 */
void vSetAllNetworksUp( BaseType_t xIsAllNetworksUp )
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
    xAllNetworksUp = xIsAllNetworksUp;
 8009c94:	4a04      	ldr	r2, [pc, #16]	@ (8009ca8 <vSetAllNetworksUp+0x1c>)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6013      	str	r3, [r2, #0]
}
 8009c9a:	bf00      	nop
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	20000fec 	.word	0x20000fec

08009cac <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;
    size_t uxLengthToCopy = uxNewLength;
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	60fb      	str	r3, [r7, #12]

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 8009cba:	2100      	movs	r1, #0
 8009cbc:	6838      	ldr	r0, [r7, #0]
 8009cbe:	f00c feeb 	bl	8016a98 <pxGetNetworkBufferWithDescriptor>
 8009cc2:	60b8      	str	r0, [r7, #8]

    if( pxNewBuffer != NULL )
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d03e      	beq.n	8009d48 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
    {
        configASSERT( pxNewBuffer->pucEthernetBuffer != NULL );
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d104      	bne.n	8009cdc <pxDuplicateNetworkBufferWithDescriptor+0x30>
 8009cd2:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8009cd6:	481f      	ldr	r0, [pc, #124]	@ (8009d54 <pxDuplicateNetworkBufferWithDescriptor+0xa8>)
 8009cd8:	f7f7 fcc8 	bl	800166c <vAssertCalled>

        /* Get the minimum of both values to copy the data. */
        if( uxLengthToCopy > pxNetworkBuffer->xDataLength )
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d902      	bls.n	8009cec <pxDuplicateNetworkBufferWithDescriptor+0x40>
        {
            uxLengthToCopy = pxNetworkBuffer->xDataLength;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cea:	60fb      	str	r3, [r7, #12]
        }

        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Copy the original packet information. */
        pxNewBuffer->xIPAddress.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	695a      	ldr	r2, [r3, #20]
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	86da      	strh	r2, [r3, #54]	@ 0x36
        pxNewBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	631a      	str	r2, [r3, #48]	@ 0x30
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, uxLengthToCopy );
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	4619      	mov	r1, r3
 8009d26:	f017 ffe3 	bl	8021cf0 <memcpy>

        #if ( ipconfigUSE_IPv6 != 0 )
            if( uxIPHeaderSizePacket( pxNewBuffer ) == ipSIZE_OF_IPv6_HEADER )
 8009d2a:	68b8      	ldr	r0, [r7, #8]
 8009d2c:	f7ff fd0c 	bl	8009748 <uxIPHeaderSizePacket>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b28      	cmp	r3, #40	@ 0x28
 8009d34:	d108      	bne.n	8009d48 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
            {
                ( void ) memcpy( pxNewBuffer->xIPAddress.xIP_IPv6.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	f103 0014 	add.w	r0, r3, #20
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	3314      	adds	r3, #20
 8009d40:	2210      	movs	r2, #16
 8009d42:	4619      	mov	r1, r3
 8009d44:	f017 ffd4 	bl	8021cf0 <memcpy>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
    }

    return pxNewBuffer;
 8009d48:	68bb      	ldr	r3, [r7, #8]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	08024418 	.word	0x08024418

08009d58 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d102      	bne.n	8009d6e <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	60fb      	str	r3, [r7, #12]
 8009d6c:	e013      	b.n	8009d96 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        /* Obtain the network buffer from the zero copy pointer. */

        /* MISRA Ref 11.6.2 [Pointer arithmetic and hidden pointer] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        uxBuffer = void_ptr_to_uintptr( pvBuffer );
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f816 	bl	8009da0 <void_ptr_to_uintptr>
 8009d74:	60b8      	str	r0, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	3b0a      	subs	r3, #10
 8009d7e:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	f003 0303 	and.w	r3, r3, #3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d103      	bne.n	8009d92 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        {
            /* MISRA Ref 11.4.2 [Validation of pointer alignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	60fb      	str	r3, [r7, #12]
 8009d90:	e001      	b.n	8009d96 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        }
        else
        {
            pxResult = NULL;
 8009d92:	2300      	movs	r3, #0
 8009d94:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 8009d96:	68fb      	ldr	r3, [r7, #12]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <void_ptr_to_uintptr>:
 *        using a union as defined here above.
 * @param[in] pvPointer A void pointer to be converted.
 * @return The value of the void pointer as an unsigned number.
 */
static uintptr_t void_ptr_to_uintptr( const void * pvPointer )
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
    /* The type 'uintptr_t' has the same size as a pointer.
     * Therefore, it is safe to use a union to convert it. */
    union uIntPtr intPtr;

    intPtr.pvPtr = pvPointer;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	60fb      	str	r3, [r7, #12]
    return intPtr.uxPtr;
 8009dac:	68fb      	ldr	r3, [r7, #12]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3714      	adds	r7, #20
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b082      	sub	sp, #8
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f7ff ffc7 	bl	8009d58 <prvPacketBuffer_to_NetworkBuffer>
 8009dca:	4603      	mov	r3, r0
    }
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b088      	sub	sp, #32
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d102      	bne.n	8009de8 <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
    {
        pxResult = NULL;
 8009de2:	2300      	movs	r3, #0
 8009de4:	61fb      	str	r3, [r7, #28]
 8009de6:	e033      	b.n	8009e50 <pxUDPPayloadBuffer_to_NetworkBuffer+0x7c>
        const uint8_t * pucIPType;
        uint8_t ucIPType;

        /* When IPv6 is supported, find out the type of the packet.
         * It is stored 48 bytes before the payload buffer as 0x40 or 0x60. */
        uxTypeOffset = void_ptr_to_uintptr( pvBuffer );
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f7ff ffd9 	bl	8009da0 <void_ptr_to_uintptr>
 8009dee:	6178      	str	r0, [r7, #20]
        uxTypeOffset -= ipUDP_PAYLOAD_IP_TYPE_OFFSET;
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	3b30      	subs	r3, #48	@ 0x30
 8009df4:	617b      	str	r3, [r7, #20]
        /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
        /* coverity[misra_c_2012_rule_11_4_violation] */
        pucIPType = ( const uint8_t * ) uxTypeOffset;
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	613b      	str	r3, [r7, #16]

        /* For an IPv4 packet, pucIPType points to 6 bytes before the pucEthernetBuffer,
         * for a IPv6 packet, pucIPType will point to the first byte of the IP-header: 'ucVersionTrafficClass'. */
        ucIPType = pucIPType[ 0 ] & 0xf0U;
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	f023 030f 	bic.w	r3, r3, #15
 8009e02:	73fb      	strb	r3, [r7, #15]

        /* To help the translation from a UDP payload pointer to a networkBuffer,
         * a byte was stored at a certain negative offset (-48 bytes).
         * It must have a value of either 0x4x or 0x6x. */
        configASSERT( ( ucIPType == ipTYPE_IPv4 ) || ( ucIPType == ipTYPE_IPv6 ) );
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
 8009e06:	2b40      	cmp	r3, #64	@ 0x40
 8009e08:	d002      	beq.n	8009e10 <pxUDPPayloadBuffer_to_NetworkBuffer+0x3c>
 8009e0a:	7bfb      	ldrb	r3, [r7, #15]
 8009e0c:	2b60      	cmp	r3, #96	@ 0x60
 8009e0e:	d101      	bne.n	8009e14 <pxUDPPayloadBuffer_to_NetworkBuffer+0x40>
 8009e10:	2301      	movs	r3, #1
 8009e12:	e000      	b.n	8009e16 <pxUDPPayloadBuffer_to_NetworkBuffer+0x42>
 8009e14:	2300      	movs	r3, #0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d104      	bne.n	8009e24 <pxUDPPayloadBuffer_to_NetworkBuffer+0x50>
 8009e1a:	f240 21f1 	movw	r1, #753	@ 0x2f1
 8009e1e:	480f      	ldr	r0, [pc, #60]	@ (8009e5c <pxUDPPayloadBuffer_to_NetworkBuffer+0x88>)
 8009e20:	f7f7 fc24 	bl	800166c <vAssertCalled>

        switch( ucIPType ) /* LCOV_EXCL_BR_LINE */
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
 8009e26:	2b40      	cmp	r3, #64	@ 0x40
 8009e28:	d004      	beq.n	8009e34 <pxUDPPayloadBuffer_to_NetworkBuffer+0x60>
 8009e2a:	2b60      	cmp	r3, #96	@ 0x60
 8009e2c:	d105      	bne.n	8009e3a <pxUDPPayloadBuffer_to_NetworkBuffer+0x66>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                case ipTYPE_IPv6:
                    uxOffset = sizeof( UDPPacket_IPv6_t );
 8009e2e:	233e      	movs	r3, #62	@ 0x3e
 8009e30:	61bb      	str	r3, [r7, #24]
                    break;
 8009e32:	e008      	b.n	8009e46 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            #if ( ipconfigUSE_IPv4 != 0 )
                case ipTYPE_IPv4:
                    uxOffset = sizeof( UDPPacket_t );
 8009e34:	232a      	movs	r3, #42	@ 0x2a
 8009e36:	61bb      	str	r3, [r7, #24]
                    break;
 8009e38:	e005      	b.n	8009e46 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            default:
                FreeRTOS_debug_printf( ( "pxUDPPayloadBuffer_to_NetworkBuffer: Undefined ucIPType \n" ) );
 8009e3a:	4809      	ldr	r0, [pc, #36]	@ (8009e60 <pxUDPPayloadBuffer_to_NetworkBuffer+0x8c>)
 8009e3c:	f017 fd3c 	bl	80218b8 <lUDPLoggingPrintf>
                uxOffset = sizeof( UDPPacket_t );
 8009e40:	232a      	movs	r3, #42	@ 0x2a
 8009e42:	61bb      	str	r3, [r7, #24]
                break;
 8009e44:	bf00      	nop
        }

        pxResult = prvPacketBuffer_to_NetworkBuffer( pvBuffer, uxOffset );
 8009e46:	69b9      	ldr	r1, [r7, #24]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f7ff ff85 	bl	8009d58 <prvPacketBuffer_to_NetworkBuffer>
 8009e4e:	61f8      	str	r0, [r7, #28]
    }

    return pxResult;
 8009e50:	69fb      	ldr	r3, [r7, #28]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3720      	adds	r7, #32
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	08024418 	.word	0x08024418
 8009e60:	080244f0 	.word	0x080244f0

08009e64 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    const struct tskTaskControlBlock * const xCurrentHandle = xTaskGetCurrentTaskHandle();
 8009e6a:	f7fa fdd3 	bl	8004a14 <xTaskGetCurrentTaskHandle>
 8009e6e:	60b8      	str	r0, [r7, #8]
    const struct tskTaskControlBlock * const xCurrentIPTaskHandle = FreeRTOS_GetIPTaskHandle();
 8009e70:	f7fe ff6e 	bl	8008d50 <FreeRTOS_GetIPTaskHandle>
 8009e74:	6078      	str	r0, [r7, #4]

    if( xCurrentHandle == xCurrentIPTaskHandle )
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d102      	bne.n	8009e84 <xIsCallingFromIPTask+0x20>
    {
        xReturn = pdTRUE;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	60fb      	str	r3, [r7, #12]
 8009e82:	e001      	b.n	8009e88 <xIsCallingFromIPTask+0x24>
    }
    else
    {
        xReturn = pdFALSE;
 8009e84:	2300      	movs	r3, #0
 8009e86:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8009e88:	68fb      	ldr	r3, [r7, #12]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
	...

08009e94 <prvProcessNetworkDownEvent>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void prvProcessNetworkDownEvent( struct xNetworkInterface * pxInterface )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
    NetworkEndPoint_t * pxEndPoint;

    configASSERT( pxInterface != NULL );
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d104      	bne.n	8009eac <prvProcessNetworkDownEvent+0x18>
 8009ea2:	f240 3137 	movw	r1, #823	@ 0x337
 8009ea6:	4857      	ldr	r0, [pc, #348]	@ (800a004 <prvProcessNetworkDownEvent+0x170>)
 8009ea8:	f7f7 fbe0 	bl	800166c <vAssertCalled>
    configASSERT( pxInterface->pfInitialise != NULL );
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d104      	bne.n	8009ebe <prvProcessNetworkDownEvent+0x2a>
 8009eb4:	f44f 714e 	mov.w	r1, #824	@ 0x338
 8009eb8:	4852      	ldr	r0, [pc, #328]	@ (800a004 <prvProcessNetworkDownEvent+0x170>)
 8009eba:	f7f7 fbd7 	bl	800166c <vAssertCalled>
    /* Stop the ARP timer while there is no network. */
    vIPSetARPTimerEnableState( pdFALSE );
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	f7ff fe6a 	bl	8009b98 <vIPSetARPTimerEnableState>

    /* The first network down event is generated by the IP stack itself to
     * initialise the network hardware, so do not call the network down event
     * the first time through. */

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f002 ffd7 	bl	800ce78 <FreeRTOS_FirstEndPoint>
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	e041      	b.n	8009f52 <prvProcessNetworkDownEvent+0xbe>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
    {
        /* The bit 'bEndPointUp' stays low until vIPNetworkUpCalls() is called. */
        pxEndPoint->bits.bEndPointUp = pdFALSE_UNSIGNED;
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8009ed4:	f36f 1304 	bfc	r3, #4, #1
 8009ed8:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

        if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009ee2:	f003 0304 	and.w	r3, r3, #4
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d003      	beq.n	8009ef4 <prvProcessNetworkDownEvent+0x60>
        {
            /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
            #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
                vManageSolicitedNodeAddress( pxEndPoint, pdFALSE );
 8009eec:	2100      	movs	r1, #0
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f001 f9c8 	bl	800b284 <vManageSolicitedNodeAddress>
            #endif
        }

        #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            if( pxEndPoint->bits.bCallDownHook != pdFALSE_UNSIGNED )
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009efa:	f003 0308 	and.w	r3, r3, #8
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d003      	beq.n	8009f0c <prvProcessNetworkDownEvent+0x78>
            {
                #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                {
                    vApplicationIPNetworkEventHook( eNetworkDown );
 8009f04:	2001      	movs	r0, #1
 8009f06:	f7f7 fbe5 	bl	80016d4 <vApplicationIPNetworkEventHook>
 8009f0a:	e006      	b.n	8009f1a <prvProcessNetworkDownEvent+0x86>
                #endif
            }
            else
            {
                /* The next time NetworkEventHook will be called for this end-point. */
                pxEndPoint->bits.bCallDownHook = pdTRUE_UNSIGNED;
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8009f12:	f043 0308 	orr.w	r3, r3, #8
 8009f16:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
        #endif /* ipconfigUSE_NETWORK_EVENT_HOOK */

        /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122
         * treat network down as a "delivery problem" and flush the ARP cache for this
         *  interface. */
        FreeRTOS_ClearARP( pxEndPoint );
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f7fd f8c0 	bl	80070a0 <FreeRTOS_ClearARP>
                }
            }
        #endif /* ( ipconfigUSE_DHCP == 1 ) */

        #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
            if( END_POINT_USES_RA( pxEndPoint ) )
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009f26:	f003 0304 	and.w	r3, r3, #4
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00b      	beq.n	8009f48 <prvProcessNetworkDownEvent+0xb4>
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009f36:	f003 0302 	and.w	r3, r3, #2
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d003      	beq.n	8009f48 <prvProcessNetworkDownEvent+0xb4>
            {
                /* Stop the RA/SLAAC process for this end-point. */
                vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 8009f40:	2100      	movs	r1, #0
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f7ff fe5c 	bl	8009c00 <vIPSetDHCP_RATimerEnableState>
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 8009f48:	68f9      	ldr	r1, [r7, #12]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f002 ffb6 	bl	800cebc <FreeRTOS_NextEndPoint>
 8009f50:	60f8      	str	r0, [r7, #12]
         pxEndPoint != NULL;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1ba      	bne.n	8009ece <prvProcessNetworkDownEvent+0x3a>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */

    if( pxInterface->pfInitialise( pxInterface ) == pdPASS )
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	4798      	blx	r3
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d147      	bne.n	8009ff6 <prvProcessNetworkDownEvent+0x162>
    {
        pxInterface->bits.bInterfaceUp = pdTRUE_UNSIGNED;
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	7f13      	ldrb	r3, [r2, #28]
 8009f6a:	f043 0301 	orr.w	r3, r3, #1
 8009f6e:	7713      	strb	r3, [r2, #28]
        /* Set remaining time to 0 so it will become active immediately. */

        /* The network is not up until DHCP has completed.
         * Start it now for all associated end-points. */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f002 ff81 	bl	800ce78 <FreeRTOS_FirstEndPoint>
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	e039      	b.n	8009fee <prvProcessNetworkDownEvent+0x15a>
                }
                else /* Yes this else ought to be here. */
            #endif /* ( ipconfigUSE_DHCP == 1 ) */

            #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                if( END_POINT_USES_RA( pxEndPoint ) )
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009f80:	f003 0304 	and.w	r3, r3, #4
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00c      	beq.n	8009fa4 <prvProcessNetworkDownEvent+0x110>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009f90:	f003 0302 	and.w	r3, r3, #2
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d004      	beq.n	8009fa4 <prvProcessNetworkDownEvent+0x110>
                {
                    /* Reset the RA/SLAAC process for this end-point. */
                    vRAProcess( pdTRUE, pxEndPoint );
 8009f9a:	68f9      	ldr	r1, [r7, #12]
 8009f9c:	2001      	movs	r0, #1
 8009f9e:	f002 fd9f 	bl	800cae0 <vRAProcess>
 8009fa2:	e01f      	b.n	8009fe4 <prvProcessNetworkDownEvent+0x150>
                }
                else
            #endif /* ( (ipconfigUSE_RA != 0) && ( ipconfigUSE_IPv6 != 0 )) */

            {
                switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009faa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <prvProcessNetworkDownEvent+0x126>
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d008      	beq.n	8009fca <prvProcessNetworkDownEvent+0x136>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 8009fb8:	e011      	b.n	8009fde <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv4_settings ), &( pxEndPoint->ipv4_defaults ), sizeof( pxEndPoint->ipv4_settings ) );
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	331c      	adds	r3, #28
 8009fc0:	221c      	movs	r2, #28
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	f017 fe94 	bl	8021cf0 <memcpy>
                            break;
 8009fc8:	e009      	b.n	8009fde <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	3390      	adds	r3, #144	@ 0x90
 8009fd4:	2258      	movs	r2, #88	@ 0x58
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	f017 fe8a 	bl	8021cf0 <memcpy>
                            break;
 8009fdc:	bf00      	nop
                }

                /* DHCP or Router Advertisement are not enabled for this end-point.
                 * Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls( pxEndPoint );
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7fe fec2 	bl	8008d68 <vIPNetworkUpCalls>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 8009fe4:	68f9      	ldr	r1, [r7, #12]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f002 ff68 	bl	800cebc <FreeRTOS_NextEndPoint>
 8009fec:	60f8      	str	r0, [r7, #12]
             pxEndPoint != NULL;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1c2      	bne.n	8009f7a <prvProcessNetworkDownEvent+0xe6>
        vSetAllNetworksUp( pdFALSE );

        /* Nothing else to do. When the 'xNetworkTimer' expires, all interfaces
         * with bits.bInterfaceUp cleared will get a new 'eNetworkDownEvent' */
    }
}
 8009ff4:	e002      	b.n	8009ffc <prvProcessNetworkDownEvent+0x168>
        vSetAllNetworksUp( pdFALSE );
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	f7ff fe48 	bl	8009c8c <vSetAllNetworksUp>
}
 8009ffc:	bf00      	nop
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	08024418 	.word	0x08024418

0800a008 <vPreCheckConfigs>:
/**
 * @brief Check the values of configuration options and assert on it. Also verify that the IP-task
 *        has not already been initialized.
 */
void vPreCheckConfigs( void )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800a00e:	f7ff fb83 	bl	8009718 <xIPIsNetworkTaskReady>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d004      	beq.n	800a022 <vPreCheckConfigs+0x1a>
 800a018:	f240 31db 	movw	r1, #987	@ 0x3db
 800a01c:	4831      	ldr	r0, [pc, #196]	@ (800a0e4 <vPreCheckConfigs+0xdc>)
 800a01e:	f7f7 fb25 	bl	800166c <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 800a022:	4b31      	ldr	r3, [pc, #196]	@ (800a0e8 <vPreCheckConfigs+0xe0>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d004      	beq.n	800a034 <vPreCheckConfigs+0x2c>
 800a02a:	f44f 7177 	mov.w	r1, #988	@ 0x3dc
 800a02e:	482d      	ldr	r0, [pc, #180]	@ (800a0e4 <vPreCheckConfigs+0xdc>)
 800a030:	f7f7 fb1c 	bl	800166c <vAssertCalled>
    configASSERT( FreeRTOS_GetIPTaskHandle() == NULL );
 800a034:	f7fe fe8c 	bl	8008d50 <FreeRTOS_GetIPTaskHandle>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d004      	beq.n	800a048 <vPreCheckConfigs+0x40>
 800a03e:	f240 31dd 	movw	r1, #989	@ 0x3dd
 800a042:	4828      	ldr	r0, [pc, #160]	@ (800a0e4 <vPreCheckConfigs+0xdc>)
 800a044:	f7f7 fb12 	bl	800166c <vAssertCalled>
         * fields in the protocol headers.
         */
        configASSERT( ( ( ( ipSIZE_OF_ETH_HEADER ) + ( ipBUFFER_PADDING ) ) % 4U ) == 0U );

        /* LCOV_EXCL_BR_START */
        uxSize = ipconfigNETWORK_MTU;
 800a048:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800a04c:	607b      	str	r3, [r7, #4]
        /* Check if MTU is big enough. */
        configASSERT( uxSize >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + ipconfigTCP_MSS ) );
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f240 52db 	movw	r2, #1499	@ 0x5db
 800a054:	4293      	cmp	r3, r2
 800a056:	d804      	bhi.n	800a062 <vPreCheckConfigs+0x5a>
 800a058:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 800a05c:	4821      	ldr	r0, [pc, #132]	@ (800a0e4 <vPreCheckConfigs+0xdc>)
 800a05e:	f7f7 fb05 	bl	800166c <vAssertCalled>

        uxSize = sizeof( EthernetHeader_t );
 800a062:	230e      	movs	r3, #14
 800a064:	607b      	str	r3, [r7, #4]
        /* Check structure packing is correct. */
        configASSERT( uxSize == ipEXPECTED_EthernetHeader_t_SIZE );
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b0e      	cmp	r3, #14
 800a06a:	d004      	beq.n	800a076 <vPreCheckConfigs+0x6e>
 800a06c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800a070:	481c      	ldr	r0, [pc, #112]	@ (800a0e4 <vPreCheckConfigs+0xdc>)
 800a072:	f7f7 fafb 	bl	800166c <vAssertCalled>

        uxSize = sizeof( ARPHeader_t );
 800a076:	231c      	movs	r3, #28
 800a078:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ARPHeader_t_SIZE );
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b1c      	cmp	r3, #28
 800a07e:	d004      	beq.n	800a08a <vPreCheckConfigs+0x82>
 800a080:	f240 4102 	movw	r1, #1026	@ 0x402
 800a084:	4817      	ldr	r0, [pc, #92]	@ (800a0e4 <vPreCheckConfigs+0xdc>)
 800a086:	f7f7 faf1 	bl	800166c <vAssertCalled>

        uxSize = sizeof( IPHeader_t );
 800a08a:	2314      	movs	r3, #20
 800a08c:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_IPHeader_t_SIZE );
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b14      	cmp	r3, #20
 800a092:	d004      	beq.n	800a09e <vPreCheckConfigs+0x96>
 800a094:	f240 4105 	movw	r1, #1029	@ 0x405
 800a098:	4812      	ldr	r0, [pc, #72]	@ (800a0e4 <vPreCheckConfigs+0xdc>)
 800a09a:	f7f7 fae7 	bl	800166c <vAssertCalled>

        uxSize = sizeof( ICMPHeader_t );
 800a09e:	2308      	movs	r3, #8
 800a0a0:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ICMPHeader_t_SIZE );
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b08      	cmp	r3, #8
 800a0a6:	d004      	beq.n	800a0b2 <vPreCheckConfigs+0xaa>
 800a0a8:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 800a0ac:	480d      	ldr	r0, [pc, #52]	@ (800a0e4 <vPreCheckConfigs+0xdc>)
 800a0ae:	f7f7 fadd 	bl	800166c <vAssertCalled>

        uxSize = sizeof( UDPHeader_t );
 800a0b2:	2308      	movs	r3, #8
 800a0b4:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_UDPHeader_t_SIZE );
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2b08      	cmp	r3, #8
 800a0ba:	d004      	beq.n	800a0c6 <vPreCheckConfigs+0xbe>
 800a0bc:	f240 410b 	movw	r1, #1035	@ 0x40b
 800a0c0:	4808      	ldr	r0, [pc, #32]	@ (800a0e4 <vPreCheckConfigs+0xdc>)
 800a0c2:	f7f7 fad3 	bl	800166c <vAssertCalled>

        #if ipconfigUSE_TCP == 1
        {
            uxSize = sizeof( TCPHeader_t );
 800a0c6:	2324      	movs	r3, #36	@ 0x24
 800a0c8:	607b      	str	r3, [r7, #4]
            configASSERT( uxSize == ( ipEXPECTED_TCPHeader_t_SIZE + ipSIZE_TCP_OPTIONS ) );
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b24      	cmp	r3, #36	@ 0x24
 800a0ce:	d004      	beq.n	800a0da <vPreCheckConfigs+0xd2>
 800a0d0:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800a0d4:	4803      	ldr	r0, [pc, #12]	@ (800a0e4 <vPreCheckConfigs+0xdc>)
 800a0d6:	f7f7 fac9 	bl	800166c <vAssertCalled>
         * It's value MUST be > 0. Otherwise, storing the IPv4 version byte
         * will overwrite the Ethernet header. */
        configASSERT( ipIP_TYPE_OFFSET > 0 );
    }
    #endif /* if ( configASSERT_DEFINED == 1 ) */
}
 800a0da:	bf00      	nop
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	08024418 	.word	0x08024418
 800a0e8:	20000fd8 	.word	0x20000fd8

0800a0ec <vPrintResourceStats>:
/**
 * @brief A function that monitors a three resources: the heap, the space in the message
 *        queue of the IP-task, the number of available network buffer descriptors.
 */
    void vPrintResourceStats( void )
    {
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
        /* When setting up and testing a project with FreeRTOS+TCP, it is
         * can be helpful to monitor a few resources: the number of network
         * buffers and the amount of available heap.
         * This function will issue some logging when a minimum value has
         * changed. */
        uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 800a0f2:	f00c fd7f 	bl	8016bf4 <uxGetMinimumFreeNetworkBuffers>
 800a0f6:	60f8      	str	r0, [r7, #12]

        if( uxLastMinBufferCount > uxCurrentBufferCount )
 800a0f8:	4b24      	ldr	r3, [pc, #144]	@ (800a18c <vPrintResourceStats+0xa0>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d20a      	bcs.n	800a118 <vPrintResourceStats+0x2c>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentBufferCount;
 800a102:	4a22      	ldr	r2, [pc, #136]	@ (800a18c <vPrintResourceStats+0xa0>)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 800a108:	f00c fd80 	bl	8016c0c <uxGetNumberOfFreeNetworkBuffers>
 800a10c:	4603      	mov	r3, r0
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	4619      	mov	r1, r3
 800a112:	481f      	ldr	r0, [pc, #124]	@ (800a190 <vPrintResourceStats+0xa4>)
 800a114:	f017 fbd0 	bl	80218b8 <lUDPLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(),
                               uxCurrentBufferCount ) );
        }

        uxMinSize = xPortGetMinimumEverFreeHeapSize();
 800a118:	f7fb ff1e 	bl	8005f58 <xPortGetMinimumEverFreeHeapSize>
 800a11c:	60b8      	str	r0, [r7, #8]

        if( uxMinLastSize == 0U )
 800a11e:	4b1d      	ldr	r3, [pc, #116]	@ (800a194 <vPrintResourceStats+0xa8>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d103      	bne.n	800a12e <vPrintResourceStats+0x42>
        {
            /* Probably the first time this function is called. */
            uxMinLastSize = uxMinSize;
 800a126:	4a1b      	ldr	r2, [pc, #108]	@ (800a194 <vPrintResourceStats+0xa8>)
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	6013      	str	r3, [r2, #0]
 800a12c:	e019      	b.n	800a162 <vPrintResourceStats+0x76>
        }
        else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a134:	d215      	bcs.n	800a162 <vPrintResourceStats+0x76>
        {
            /* There is more than enough heap space. No need for logging. */
        }
        /* Write logging if there is a 10% decrease since the last time logging was written. */
        else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 800a136:	4b17      	ldr	r3, [pc, #92]	@ (800a194 <vPrintResourceStats+0xa8>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	225a      	movs	r2, #90	@ 0x5a
 800a13c:	fb03 f202 	mul.w	r2, r3, r2
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	2164      	movs	r1, #100	@ 0x64
 800a144:	fb01 f303 	mul.w	r3, r1, r3
 800a148:	429a      	cmp	r2, r3
 800a14a:	d90a      	bls.n	800a162 <vPrintResourceStats+0x76>
        {
            uxMinLastSize = uxMinSize;
 800a14c:	4a11      	ldr	r2, [pc, #68]	@ (800a194 <vPrintResourceStats+0xa8>)
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Heap: current %u lowest %u\n", ( unsigned ) xPortGetFreeHeapSize(), ( unsigned ) uxMinSize ) );
 800a152:	f7fb fef5 	bl	8005f40 <xPortGetFreeHeapSize>
 800a156:	4603      	mov	r3, r0
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	4619      	mov	r1, r3
 800a15c:	480e      	ldr	r0, [pc, #56]	@ (800a198 <vPrintResourceStats+0xac>)
 800a15e:	f017 fbab 	bl	80218b8 <lUDPLoggingPrintf>
            /* Nothing to log. */
        }

        #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        {
            UBaseType_t uxCurrentCount = 0u;
 800a162:	2300      	movs	r3, #0
 800a164:	607b      	str	r3, [r7, #4]

            uxCurrentCount = uxGetMinimumIPQueueSpace();
 800a166:	f7ff fae3 	bl	8009730 <uxGetMinimumIPQueueSpace>
 800a16a:	6078      	str	r0, [r7, #4]

            if( uxLastMinQueueSpace != uxCurrentCount )
 800a16c:	4b0b      	ldr	r3, [pc, #44]	@ (800a19c <vPrintResourceStats+0xb0>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	429a      	cmp	r2, r3
 800a174:	d006      	beq.n	800a184 <vPrintResourceStats+0x98>
            {
                /* The logging produced below may be helpful
                 * while tuning +TCP: see how many buffers are in use. */
                uxLastMinQueueSpace = uxCurrentCount;
 800a176:	4a09      	ldr	r2, [pc, #36]	@ (800a19c <vPrintResourceStats+0xb0>)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 800a17c:	6879      	ldr	r1, [r7, #4]
 800a17e:	4808      	ldr	r0, [pc, #32]	@ (800a1a0 <vPrintResourceStats+0xb4>)
 800a180:	f017 fb9a 	bl	80218b8 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */
    }
 800a184:	bf00      	nop
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	20000018 	.word	0x20000018
 800a190:	08024588 	.word	0x08024588
 800a194:	20001054 	.word	0x20001054
 800a198:	080245ac 	.word	0x080245ac
 800a19c:	20001058 	.word	0x20001058
 800a1a0:	080245c8 	.word	0x080245c8

0800a1a4 <FreeRTOS_max_size_t>:
 * @param[in] b the second value.
 * @return The highest of the two values.
 */
size_t FreeRTOS_max_size_t( size_t a,
                            size_t b )
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	bf38      	it	cc
 800a1b6:	4613      	movcc	r3, r2
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <FreeRTOS_min_int32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	bfa8      	it	ge
 800a1d6:	4613      	movge	r3, r2
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <FreeRTOS_min_uint32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	bf28      	it	cs
 800a1f6:	4613      	movcs	r3, r2
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <FreeRTOS_min_size_t>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
size_t FreeRTOS_min_size_t( size_t a,
                            size_t b )
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	4293      	cmp	r3, r2
 800a214:	bf28      	it	cs
 800a216:	4613      	movcs	r3, r2
}
 800a218:	4618      	mov	r0, r3
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <FreeRTOS_round_up>:
 * @param[in] d the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
    uint32_t ulResult = a;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	60fb      	str	r3, [r7, #12]

    configASSERT( d != 0U );
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d104      	bne.n	800a242 <FreeRTOS_round_up+0x1e>
 800a238:	f240 61ac 	movw	r1, #1708	@ 0x6ac
 800a23c:	480a      	ldr	r0, [pc, #40]	@ (800a268 <FreeRTOS_round_up+0x44>)
 800a23e:	f7f7 fa15 	bl	800166c <vAssertCalled>

    if( d != 0U )
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00a      	beq.n	800a25e <FreeRTOS_round_up+0x3a>
    {
        ulResult = d * ( ( a + d - 1U ) / d );
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	4413      	add	r3, r2
 800a24e:	1e5a      	subs	r2, r3, #1
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	fbb2 f2f3 	udiv	r2, r2, r3
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	fb02 f303 	mul.w	r3, r2, r3
 800a25c:	60fb      	str	r3, [r7, #12]
    }

    return ulResult;
 800a25e:	68fb      	ldr	r3, [r7, #12]
}
 800a260:	4618      	mov	r0, r3
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	08024418 	.word	0x08024418

0800a26c <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	3301      	adds	r3, #1
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800a282:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3302      	adds	r3, #2
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800a28c:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	3203      	adds	r2, #3
 800a292:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800a294:	4313      	orrs	r3, r2
}
 800a296:	4618      	mov	r0, r3
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	021b      	lsls	r3, r3, #8
 800a2b0:	b29b      	uxth	r3, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	3201      	adds	r2, #1
 800a2b6:	7812      	ldrb	r2, [r2, #0]
    return ( uint16_t )
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	b29b      	uxth	r3, r3
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <xCheckIPv4SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv4SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b08a      	sub	sp, #40	@ 0x28
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIPHeaderLength;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	623b      	str	r3, [r7, #32]

        /* Map the buffer onto a IP-Packet struct to easily access the
         * fields of the IP packet. */
        const IPPacket_t * const pxIPPacket = ( ( const IPPacket_t * const ) pvEthernetBuffer );
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	61bb      	str	r3, [r7, #24]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800a2da:	2300      	movs	r3, #0
 800a2dc:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	2b21      	cmp	r3, #33	@ 0x21
 800a2e2:	d802      	bhi.n	800a2ea <xCheckIPv4SizeFields+0x22>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	61fb      	str	r3, [r7, #28]
                break;
 800a2e8:	e06f      	b.n	800a3ca <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	7b9b      	ldrb	r3, [r3, #14]
 800a2ee:	82fb      	strh	r3, [r7, #22]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800a2f0:	8afb      	ldrh	r3, [r7, #22]
 800a2f2:	2b44      	cmp	r3, #68	@ 0x44
 800a2f4:	d902      	bls.n	800a2fc <xCheckIPv4SizeFields+0x34>
 800a2f6:	8afb      	ldrh	r3, [r7, #22]
 800a2f8:	2b4f      	cmp	r3, #79	@ 0x4f
 800a2fa:	d902      	bls.n	800a302 <xCheckIPv4SizeFields+0x3a>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	61fb      	str	r3, [r7, #28]
                break;
 800a300:	e063      	b.n	800a3ca <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = ( uint16_t ) ( ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2U );
 800a302:	8afb      	ldrh	r3, [r7, #22]
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	b29b      	uxth	r3, r3
 800a308:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800a30c:	82fb      	strh	r3, [r7, #22]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 800a30e:	8afb      	ldrh	r3, [r7, #22]
 800a310:	613b      	str	r3, [r7, #16]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	330e      	adds	r3, #14
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d202      	bcs.n	800a322 <xCheckIPv4SizeFields+0x5a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800a31c:	2303      	movs	r3, #3
 800a31e:	61fb      	str	r3, [r7, #28]
                break;
 800a320:	e053      	b.n	800a3ca <xCheckIPv4SizeFields+0x102>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	7c1a      	ldrb	r2, [r3, #16]
 800a326:	7c5b      	ldrb	r3, [r3, #17]
 800a328:	021b      	lsls	r3, r3, #8
 800a32a:	4313      	orrs	r3, r2
 800a32c:	81fb      	strh	r3, [r7, #14]
            usLength = FreeRTOS_ntohs( usLength );
 800a32e:	89fb      	ldrh	r3, [r7, #14]
 800a330:	021b      	lsls	r3, r3, #8
 800a332:	b21a      	sxth	r2, r3
 800a334:	89fb      	ldrh	r3, [r7, #14]
 800a336:	0a1b      	lsrs	r3, r3, #8
 800a338:	b29b      	uxth	r3, r3
 800a33a:	b21b      	sxth	r3, r3
 800a33c:	4313      	orrs	r3, r2
 800a33e:	b21b      	sxth	r3, r3
 800a340:	81fb      	strh	r3, [r7, #14]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800a342:	89fb      	ldrh	r3, [r7, #14]
 800a344:	330e      	adds	r3, #14
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d202      	bcs.n	800a352 <xCheckIPv4SizeFields+0x8a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800a34c:	2304      	movs	r3, #4
 800a34e:	61fb      	str	r3, [r7, #28]
                break;
 800a350:	e03b      	b.n	800a3ca <xCheckIPv4SizeFields+0x102>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	7ddb      	ldrb	r3, [r3, #23]
 800a356:	737b      	strb	r3, [r7, #13]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800a358:	7b7b      	ldrb	r3, [r7, #13]
 800a35a:	2b11      	cmp	r3, #17
 800a35c:	d103      	bne.n	800a366 <xCheckIPv4SizeFields+0x9e>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	3316      	adds	r3, #22
 800a362:	627b      	str	r3, [r7, #36]	@ 0x24
 800a364:	e013      	b.n	800a38e <xCheckIPv4SizeFields+0xc6>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800a366:	7b7b      	ldrb	r3, [r7, #13]
 800a368:	2b06      	cmp	r3, #6
 800a36a:	d103      	bne.n	800a374 <xCheckIPv4SizeFields+0xac>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	3322      	adds	r3, #34	@ 0x22
 800a370:	627b      	str	r3, [r7, #36]	@ 0x24
 800a372:	e00c      	b.n	800a38e <xCheckIPv4SizeFields+0xc6>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800a374:	7b7b      	ldrb	r3, [r7, #13]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d002      	beq.n	800a380 <xCheckIPv4SizeFields+0xb8>
 800a37a:	7b7b      	ldrb	r3, [r7, #13]
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d103      	bne.n	800a388 <xCheckIPv4SizeFields+0xc0>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMPv4_HEADER;
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	3316      	adds	r3, #22
 800a384:	627b      	str	r3, [r7, #36]	@ 0x24
 800a386:	e002      	b.n	800a38e <xCheckIPv4SizeFields+0xc6>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800a388:	2305      	movs	r3, #5
 800a38a:	61fb      	str	r3, [r7, #28]
                break;
 800a38c:	e01d      	b.n	800a3ca <xCheckIPv4SizeFields+0x102>
            }

            if( uxBufferLength < uxMinimumLength )
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a392:	429a      	cmp	r2, r3
 800a394:	d202      	bcs.n	800a39c <xCheckIPv4SizeFields+0xd4>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800a396:	2306      	movs	r3, #6
 800a398:	61fb      	str	r3, [r7, #28]
                break;
 800a39a:	e016      	b.n	800a3ca <xCheckIPv4SizeFields+0x102>
            }

            uxLength = ( size_t ) usLength;
 800a39c:	89fb      	ldrh	r3, [r7, #14]
 800a39e:	60bb      	str	r3, [r7, #8]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	1a9b      	subs	r3, r3, r2
 800a3aa:	60bb      	str	r3, [r7, #8]

            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2b07      	cmp	r3, #7
 800a3b0:	d906      	bls.n	800a3c0 <xCheckIPv4SizeFields+0xf8>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 800a3b2:	693a      	ldr	r2, [r7, #16]
 800a3b4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800a3b8:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d902      	bls.n	800a3c6 <xCheckIPv4SizeFields+0xfe>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800a3c0:	2307      	movs	r3, #7
 800a3c2:	61fb      	str	r3, [r7, #28]
                break;
 800a3c4:	e001      	b.n	800a3ca <xCheckIPv4SizeFields+0x102>
            }

            xResult = pdPASS;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	623b      	str	r3, [r7, #32]
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800a3ca:	6a3b      	ldr	r3, [r7, #32]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d003      	beq.n	800a3d8 <xCheckIPv4SizeFields+0x110>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv4SizeFields: location %ld\n", xLocation ) );
 800a3d0:	69f9      	ldr	r1, [r7, #28]
 800a3d2:	4804      	ldr	r0, [pc, #16]	@ (800a3e4 <xCheckIPv4SizeFields+0x11c>)
 800a3d4:	f017 fa70 	bl	80218b8 <lUDPLoggingPrintf>
        }

        return xResult;
 800a3d8:	6a3b      	ldr	r3, [r7, #32]
    }
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3728      	adds	r7, #40	@ 0x28
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	08024694 	.word	0x08024694

0800a3e8 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	061a      	lsls	r2, r3, #24
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	021b      	lsls	r3, r3, #8
 800a3f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a3fc:	431a      	orrs	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	0a1b      	lsrs	r3, r3, #8
 800a402:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a406:	431a      	orrs	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	0e1b      	lsrs	r3, r3, #24
 800a40c:	4313      	orrs	r3, r2
 800a40e:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800a416:	d306      	bcc.n	800a426 <xIsIPv4Multicast+0x3e>
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 800a41e:	d202      	bcs.n	800a426 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 800a420:	2301      	movs	r3, #1
 800a422:	60fb      	str	r3, [r7, #12]
 800a424:	e001      	b.n	800a42a <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 800a426:	2300      	movs	r3, #0
 800a428:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800a42a:	68fb      	ldr	r3, [r7, #12]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3714      	adds	r7, #20
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <prvAllowIPPacketIPv4>:
 * @return Whether the packet should be processed or dropped.
 */
enum eFrameProcessingResult prvAllowIPPacketIPv4( const struct xIP_PACKET * const pxIPPacket,
                                                  const struct xNETWORK_BUFFER * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800a444:	2301      	movs	r3, #1
 800a446:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800a448:	7dfb      	ldrb	r3, [r7, #23]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d10c      	bne.n	800a468 <prvAllowIPPacketIPv4+0x30>
        {
            if( xCheckIPv4SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a456:	4619      	mov	r1, r3
 800a458:	4610      	mov	r0, r2
 800a45a:	f7ff ff35 	bl	800a2c8 <xCheckIPv4SizeFields>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b01      	cmp	r3, #1
 800a462:	d001      	beq.n	800a468 <prvAllowIPPacketIPv4+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800a464:	2300      	movs	r3, #0
 800a466:	75fb      	strb	r3, [r7, #23]
        }

        #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
        {
            /* Check if this is a UDP packet without a checksum. */
            if( eReturn == eProcessBuffer )
 800a468:	7dfb      	ldrb	r3, [r7, #23]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d134      	bne.n	800a4d8 <prvAllowIPPacketIPv4+0xa0>
                const ProtocolHeaders_t * pxProtocolHeaders;

                /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                 * and so UDP packets carrying a protocol checksum of 0, will
                 * be dropped. */
                ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	7ddb      	ldrb	r3, [r3, #23]
 800a472:	75bb      	strb	r3, [r7, #22]
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ( size_t ) ipSIZE_OF_IPv4_HEADER ] ) );
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a478:	3322      	adds	r3, #34	@ 0x22
 800a47a:	613b      	str	r3, [r7, #16]

                /* Identify the next protocol. */
                if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800a47c:	7dbb      	ldrb	r3, [r7, #22]
 800a47e:	2b11      	cmp	r3, #17
 800a480:	d12a      	bne.n	800a4d8 <prvAllowIPPacketIPv4+0xa0>
                {
                    if( pxProtocolHeaders->xUDPHeader.usChecksum == ( uint16_t ) 0U )
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	88db      	ldrh	r3, [r3, #6]
 800a486:	b29b      	uxth	r3, r3
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d125      	bne.n	800a4d8 <prvAllowIPPacketIPv4+0xa0>
                        #if ( ipconfigHAS_PRINTF != 0 )
                        {
                            static BaseType_t xCount = 0;

                            /* Exclude this from branch coverage as this is only used for debugging. */
                            if( xCount < 5 ) /* LCOV_EXCL_BR_LINE */
 800a48c:	4b15      	ldr	r3, [pc, #84]	@ (800a4e4 <prvAllowIPPacketIPv4+0xac>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b04      	cmp	r3, #4
 800a492:	dc1f      	bgt.n	800a4d4 <prvAllowIPPacketIPv4+0x9c>
                            {
                                FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a49a:	061a      	lsls	r2, r3, #24
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a4a2:	021b      	lsls	r3, r3, #8
 800a4a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a4a8:	431a      	orrs	r2, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a4b0:	0a1b      	lsrs	r3, r3, #8
 800a4b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a4b6:	431a      	orrs	r2, r3
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a4be:	0e1b      	lsrs	r3, r3, #24
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	4808      	ldr	r0, [pc, #32]	@ (800a4e8 <prvAllowIPPacketIPv4+0xb0>)
 800a4c6:	f017 f9f7 	bl	80218b8 <lUDPLoggingPrintf>
                                                   FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                xCount++;
 800a4ca:	4b06      	ldr	r3, [pc, #24]	@ (800a4e4 <prvAllowIPPacketIPv4+0xac>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	4a04      	ldr	r2, [pc, #16]	@ (800a4e4 <prvAllowIPPacketIPv4+0xac>)
 800a4d2:	6013      	str	r3, [r2, #0]
                            }
                        }
                        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                        /* Protocol checksum not accepted. */
                        eReturn = eReleaseBuffer;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
        ( void ) uxHeaderLength;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 800a4d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3718      	adds	r7, #24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	2000105c 	.word	0x2000105c
 800a4e8:	080246b8 	.word	0x080246b8

0800a4ec <prvCheckIP4HeaderOptions>:
 * @param[in] pxNetworkBuffer the network buffer that contains the packet.
 *
 * @return Either 'eProcessBuffer' or 'eReleaseBuffer'
 */
enum eFrameProcessingResult prvCheckIP4HeaderOptions( struct xNETWORK_BUFFER * const pxNetworkBuffer )
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b08a      	sub	sp, #40	@ 0x28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4fe:	330e      	adds	r3, #14
 800a500:	623b      	str	r3, [r7, #32]

        /* All structs of headers expect a IP header size of 20 bytes
         * IP header options were included, we'll ignore them and cut them out. */
        size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800a502:	6a3b      	ldr	r3, [r7, #32]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	61fb      	str	r3, [r7, #28]

        /* Check if the IP headers are acceptable and if it has our destination.
         * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
         * length in multiples of 4. */
        size_t uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800a510:	61bb      	str	r3, [r7, #24]

        /* Number of bytes contained in IPv4 header options. */
        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	3b14      	subs	r3, #20
 800a516:	617b      	str	r3, [r7, #20]
        /* From: the previous start of UDP/ICMP/TCP data. */
        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	330e      	adds	r3, #14
 800a520:	4413      	add	r3, r2
 800a522:	613b      	str	r3, [r7, #16]
        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a528:	3322      	adds	r3, #34	@ 0x22
 800a52a:	60fb      	str	r3, [r7, #12]
        /* How many: total length minus the options and the lower headers. */
        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	1ad3      	subs	r3, r2, r3
 800a534:	3b22      	subs	r3, #34	@ 0x22
 800a536:	60bb      	str	r3, [r7, #8]

        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 800a538:	68ba      	ldr	r2, [r7, #8]
 800a53a:	6939      	ldr	r1, [r7, #16]
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f018 fb7c 	bl	8022c3a <memmove>
        pxNetworkBuffer->xDataLength -= optlen;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	1ad2      	subs	r2, r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	629a      	str	r2, [r3, #40]	@ 0x28
        /* Update the total length of the IP packet after removing options. */
        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 800a54e:	6a3b      	ldr	r3, [r7, #32]
 800a550:	885b      	ldrh	r3, [r3, #2]
 800a552:	b29b      	uxth	r3, r3
 800a554:	021b      	lsls	r3, r3, #8
 800a556:	b21a      	sxth	r2, r3
 800a558:	6a3b      	ldr	r3, [r7, #32]
 800a55a:	885b      	ldrh	r3, [r3, #2]
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	0a1b      	lsrs	r3, r3, #8
 800a560:	b29b      	uxth	r3, r3
 800a562:	b21b      	sxth	r3, r3
 800a564:	4313      	orrs	r3, r2
 800a566:	b21b      	sxth	r3, r3
 800a568:	b29a      	uxth	r2, r3
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	b29b      	uxth	r3, r3
 800a572:	021b      	lsls	r3, r3, #8
 800a574:	b29a      	uxth	r2, r3
 800a576:	6a3b      	ldr	r3, [r7, #32]
 800a578:	885b      	ldrh	r3, [r3, #2]
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	021b      	lsls	r3, r3, #8
 800a57e:	b219      	sxth	r1, r3
 800a580:	6a3b      	ldr	r3, [r7, #32]
 800a582:	885b      	ldrh	r3, [r3, #2]
 800a584:	b29b      	uxth	r3, r3
 800a586:	0a1b      	lsrs	r3, r3, #8
 800a588:	b29b      	uxth	r3, r3
 800a58a:	b21b      	sxth	r3, r3
 800a58c:	430b      	orrs	r3, r1
 800a58e:	b21b      	sxth	r3, r3
 800a590:	b29b      	uxth	r3, r3
 800a592:	4619      	mov	r1, r3
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	1acb      	subs	r3, r1, r3
 800a598:	0a1b      	lsrs	r3, r3, #8
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	4313      	orrs	r3, r2
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	805a      	strh	r2, [r3, #2]

        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
        pxIPHeader->ucVersionHeaderLength = ( uint8_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800a5a4:	6a3b      	ldr	r3, [r7, #32]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	f023 030f 	bic.w	r3, r3, #15
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	f043 0305 	orr.w	r3, r3, #5
 800a5b2:	b2da      	uxtb	r2, r3
 800a5b4:	6a3b      	ldr	r3, [r7, #32]
 800a5b6:	701a      	strb	r2, [r3, #0]
         * IP-options will be dropped. */
        eReturn = eReleaseBuffer;
    }
    #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */

    return eReturn;
 800a5b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3728      	adds	r7, #40	@ 0x28
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b088      	sub	sp, #32
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b0f      	cmp	r3, #15
 800a5d4:	d802      	bhi.n	800a5dc <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	61fb      	str	r3, [r7, #28]
 800a5da:	e00e      	b.n	800a5fa <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800a5dc:	f107 0314 	add.w	r3, r7, #20
 800a5e0:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	68b9      	ldr	r1, [r7, #8]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f004 fac9 	bl	800eb88 <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800a5fa:	69fb      	ldr	r3, [r7, #28]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3720      	adds	r7, #32
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <xSend_UDP_Update_IPv4>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
    UDPPacket_t * pxUDPPacket;

    if( ( pxNetworkBuffer != NULL ) && ( pxDestinationAddress != NULL ) )
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d010      	beq.n	800a636 <xSend_UDP_Update_IPv4+0x32>
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00d      	beq.n	800a636 <xSend_UDP_Update_IPv4+0x32>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a61e:	60fb      	str	r3, [r7, #12]

        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxDestinationAddress->sin_address.ulIP_IPv4;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	689a      	ldr	r2, [r3, #8]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	615a      	str	r2, [r3, #20]
        /* Map the UDP packet onto the start of the frame. */
        pxUDPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f042 0208 	orr.w	r2, r2, #8
 800a630:	731a      	strb	r2, [r3, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	735a      	strb	r2, [r3, #13]
    }

    return NULL;
 800a636:	2300      	movs	r3, #0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3714      	adds	r7, #20
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress IP address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	061a      	lsls	r2, r3, #24
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	021b      	lsls	r3, r3, #8
 800a656:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a65a:	431a      	orrs	r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	0a1b      	lsrs	r3, r3, #8
 800a660:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a664:	431a      	orrs	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	0e1b      	lsrs	r3, r3, #24
 800a66a:	4313      	orrs	r3, r2
 800a66c:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2201      	movs	r2, #1
 800a672:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	2200      	movs	r2, #0
 800a678:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	225e      	movs	r2, #94	@ 0x5e
 800a67e:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	0c1b      	lsrs	r3, r3, #16
 800a684:	b2db      	uxtb	r3, r3
 800a686:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	0a1b      	lsrs	r3, r3, #8
 800a694:	b2da      	uxtb	r2, r3
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	715a      	strb	r2, [r3, #5]
}
 800a6a2:	bf00      	nop
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
	...

0800a6b0 <xCheckIPv6SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv6SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b08c      	sub	sp, #48	@ 0x30
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint16_t ucVersionTrafficClass;
        uint16_t usPayloadLength;
        uint8_t ucNextHeader;
        size_t uxMinimumLength;
        size_t uxExtHeaderLength = 0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	623b      	str	r3, [r7, #32]
        const IPExtHeader_IPv6_t * pxExtHeader = NULL;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	61bb      	str	r3, [r7, #24]
        const uint8_t * const pucEthernetBuffer = ( const uint8_t * const ) pvEthernetBuffer;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	617b      	str	r3, [r7, #20]

        /* Map the buffer onto a IPv6-Packet struct to easily access the
         * fields of the IPv6 packet. */
        const IPPacket_IPv6_t * const pxIPv6Packet = ( const IPPacket_IPv6_t * const ) pucEthernetBuffer;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	613b      	str	r3, [r7, #16]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IPv6-header, 54 bytes */
            if( uxBufferLength < sizeof( IPHeader_IPv6_t ) )
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	2b27      	cmp	r3, #39	@ 0x27
 800a6d6:	d802      	bhi.n	800a6de <xCheckIPv6SizeFields+0x2e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800a6d8:	2301      	movs	r3, #1
 800a6da:	61fb      	str	r3, [r7, #28]
                break;
 800a6dc:	e098      	b.n	800a810 <xCheckIPv6SizeFields+0x160>
            }

            ucVersionTrafficClass = pxIPv6Packet->xIPHeader.ucVersionTrafficClass;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	7b9b      	ldrb	r3, [r3, #14]
 800a6e2:	81fb      	strh	r3, [r7, #14]

            /* Test if the IP-version is 6. */
            if( ( ( ucVersionTrafficClass & ( uint8_t ) 0xF0U ) >> 4 ) != 6U )
 800a6e4:	89fb      	ldrh	r3, [r7, #14]
 800a6e6:	111b      	asrs	r3, r3, #4
 800a6e8:	f003 030f 	and.w	r3, r3, #15
 800a6ec:	2b06      	cmp	r3, #6
 800a6ee:	d002      	beq.n	800a6f6 <xCheckIPv6SizeFields+0x46>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800a6f0:	2302      	movs	r3, #2
 800a6f2:	61fb      	str	r3, [r7, #28]
                break;
 800a6f4:	e08c      	b.n	800a810 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the IPv6-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) )
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	2b35      	cmp	r3, #53	@ 0x35
 800a6fa:	d802      	bhi.n	800a702 <xCheckIPv6SizeFields+0x52>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	61fb      	str	r3, [r7, #28]
                break;
 800a700:	e086      	b.n	800a810 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the complete IPv6-header plus protocol data have been transferred: */
            usPayloadLength = FreeRTOS_ntohs( pxIPv6Packet->xIPHeader.usPayloadLength );
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	8a5b      	ldrh	r3, [r3, #18]
 800a706:	b29b      	uxth	r3, r3
 800a708:	021b      	lsls	r3, r3, #8
 800a70a:	b21a      	sxth	r2, r3
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	8a5b      	ldrh	r3, [r3, #18]
 800a710:	b29b      	uxth	r3, r3
 800a712:	0a1b      	lsrs	r3, r3, #8
 800a714:	b29b      	uxth	r3, r3
 800a716:	b21b      	sxth	r3, r3
 800a718:	4313      	orrs	r3, r2
 800a71a:	b21b      	sxth	r3, r3
 800a71c:	81bb      	strh	r3, [r7, #12]

            if( uxBufferLength != ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ( size_t ) usPayloadLength ) )
 800a71e:	89bb      	ldrh	r3, [r7, #12]
 800a720:	3336      	adds	r3, #54	@ 0x36
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	429a      	cmp	r2, r3
 800a726:	d002      	beq.n	800a72e <xCheckIPv6SizeFields+0x7e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800a728:	2304      	movs	r3, #4
 800a72a:	61fb      	str	r3, [r7, #28]
                break;
 800a72c:	e070      	b.n	800a810 <xCheckIPv6SizeFields+0x160>
            }

            /* Identify the next protocol. */
            ucNextHeader = pxIPv6Packet->xIPHeader.ucNextHeader;
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	7d1b      	ldrb	r3, [r3, #20]
 800a732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            while( xIsExtHeader( ucNextHeader ) )
 800a736:	e015      	b.n	800a764 <xCheckIPv6SizeFields+0xb4>
            {
                pxExtHeader = ( const IPExtHeader_IPv6_t * ) ( &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength ] ) );
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	3336      	adds	r3, #54	@ 0x36
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	4413      	add	r3, r2
 800a740:	61bb      	str	r3, [r7, #24]
                /* The definition of length in extension header - Length of this header in 8-octet units, not including the first 8 octets. */
                uxExtHeaderLength += ( size_t ) ( ( 8 * pxExtHeader->ucHeaderExtLength ) + 8 );
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	785b      	ldrb	r3, [r3, #1]
 800a746:	3301      	adds	r3, #1
 800a748:	00db      	lsls	r3, r3, #3
 800a74a:	461a      	mov	r2, r3
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	4413      	add	r3, r2
 800a750:	623b      	str	r3, [r7, #32]

                ucNextHeader = pxExtHeader->ucNextHeader;
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800a75a:	6a3b      	ldr	r3, [r7, #32]
 800a75c:	3336      	adds	r3, #54	@ 0x36
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	429a      	cmp	r2, r3
 800a762:	d908      	bls.n	800a776 <xCheckIPv6SizeFields+0xc6>
            while( xIsExtHeader( ucNextHeader ) )
 800a764:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 f85f 	bl	800a82c <xIsExtHeader>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1e1      	bne.n	800a738 <xCheckIPv6SizeFields+0x88>
 800a774:	e000      	b.n	800a778 <xCheckIPv6SizeFields+0xc8>
                {
                    break;
 800a776:	bf00      	nop
                }
            }

            if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800a778:	6a3b      	ldr	r3, [r7, #32]
 800a77a:	3336      	adds	r3, #54	@ 0x36
 800a77c:	683a      	ldr	r2, [r7, #0]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d802      	bhi.n	800a788 <xCheckIPv6SizeFields+0xd8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800a782:	2307      	movs	r3, #7
 800a784:	61fb      	str	r3, [r7, #28]
                break;
 800a786:	e043      	b.n	800a810 <xCheckIPv6SizeFields+0x160>
            }

            /* Switch on the Layer 3/4 protocol. */
            if( ucNextHeader == ( uint8_t ) ipPROTOCOL_UDP )
 800a788:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a78c:	2b11      	cmp	r3, #17
 800a78e:	d103      	bne.n	800a798 <xCheckIPv6SizeFields+0xe8>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_UDP_HEADER;
 800a790:	6a3b      	ldr	r3, [r7, #32]
 800a792:	333e      	adds	r3, #62	@ 0x3e
 800a794:	627b      	str	r3, [r7, #36]	@ 0x24
 800a796:	e032      	b.n	800a7fe <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_TCP )
 800a798:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a79c:	2b06      	cmp	r3, #6
 800a79e:	d103      	bne.n	800a7a8 <xCheckIPv6SizeFields+0xf8>
            {
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_TCP_HEADER;
 800a7a0:	6a3b      	ldr	r3, [r7, #32]
 800a7a2:	334a      	adds	r3, #74	@ 0x4a
 800a7a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7a6:	e02a      	b.n	800a7fe <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_ICMP_IPv6 )
 800a7a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a7ac:	2b3a      	cmp	r3, #58	@ 0x3a
 800a7ae:	d123      	bne.n	800a7f8 <xCheckIPv6SizeFields+0x148>
            {
                uint8_t ucTypeOfMessage;

                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength;
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
 800a7b2:	3336      	adds	r3, #54	@ 0x36
 800a7b4:	627b      	str	r3, [r7, #36]	@ 0x24

                ucTypeOfMessage = pucEthernetBuffer[ uxMinimumLength ];
 800a7b6:	697a      	ldr	r2, [r7, #20]
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ba:	4413      	add	r3, r2
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	72fb      	strb	r3, [r7, #11]

                if( ( ucTypeOfMessage == ipICMP_PING_REQUEST_IPv6 ) ||
 800a7c0:	7afb      	ldrb	r3, [r7, #11]
 800a7c2:	2b80      	cmp	r3, #128	@ 0x80
 800a7c4:	d002      	beq.n	800a7cc <xCheckIPv6SizeFields+0x11c>
 800a7c6:	7afb      	ldrb	r3, [r7, #11]
 800a7c8:	2b81      	cmp	r3, #129	@ 0x81
 800a7ca:	d103      	bne.n	800a7d4 <xCheckIPv6SizeFields+0x124>
                    ( ucTypeOfMessage == ipICMP_PING_REPLY_IPv6 ) )
                {
                    uxMinimumLength += sizeof( ICMPEcho_IPv6_t );
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ce:	3308      	adds	r3, #8
 800a7d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7d2:	e014      	b.n	800a7fe <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_SOLICITATION_IPv6 )
 800a7d4:	7afb      	ldrb	r3, [r7, #11]
 800a7d6:	2b85      	cmp	r3, #133	@ 0x85
 800a7d8:	d103      	bne.n	800a7e2 <xCheckIPv6SizeFields+0x132>
                {
                    uxMinimumLength += sizeof( ICMPRouterSolicitation_IPv6_t );
 800a7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7dc:	3308      	adds	r3, #8
 800a7de:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7e0:	e00d      	b.n	800a7fe <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_ADVERTISEMENT_IPv6 )
 800a7e2:	7afb      	ldrb	r3, [r7, #11]
 800a7e4:	2b86      	cmp	r3, #134	@ 0x86
 800a7e6:	d103      	bne.n	800a7f0 <xCheckIPv6SizeFields+0x140>
                {
                    uxMinimumLength += sizeof( ICMPRouterAdvertisement_IPv6_t );
 800a7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ea:	3310      	adds	r3, #16
 800a7ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7ee:	e006      	b.n	800a7fe <xCheckIPv6SizeFields+0x14e>
                }
                else
                {
                    uxMinimumLength += ipSIZE_OF_ICMPv6_HEADER;
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f2:	3318      	adds	r3, #24
 800a7f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7f6:	e002      	b.n	800a7fe <xCheckIPv6SizeFields+0x14e>
                }
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800a7f8:	2305      	movs	r3, #5
 800a7fa:	61fb      	str	r3, [r7, #28]
                break;
 800a7fc:	e008      	b.n	800a810 <xCheckIPv6SizeFields+0x160>
            }

            if( uxBufferLength < uxMinimumLength )
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a802:	429a      	cmp	r2, r3
 800a804:	d202      	bcs.n	800a80c <xCheckIPv6SizeFields+0x15c>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800a806:	2306      	movs	r3, #6
 800a808:	61fb      	str	r3, [r7, #28]
                break;
 800a80a:	e001      	b.n	800a810 <xCheckIPv6SizeFields+0x160>
            }

            xResult = pdPASS;
 800a80c:	2301      	movs	r3, #1
 800a80e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800a810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a812:	2b01      	cmp	r3, #1
 800a814:	d003      	beq.n	800a81e <xCheckIPv6SizeFields+0x16e>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv6SizeFields: location %ld\n", xLocation ) );
 800a816:	69f9      	ldr	r1, [r7, #28]
 800a818:	4803      	ldr	r0, [pc, #12]	@ (800a828 <xCheckIPv6SizeFields+0x178>)
 800a81a:	f017 f84d 	bl	80218b8 <lUDPLoggingPrintf>
        }

        return xResult;
 800a81e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800a820:	4618      	mov	r0, r3
 800a822:	3730      	adds	r7, #48	@ 0x30
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	080246f4 	.word	0x080246f4

0800a82c <xIsExtHeader>:
 * @param[in] ucNextHeader Next header, such as ipIPv6_EXT_HEADER_HOP_BY_HOP.
 *
 * @return pdTRUE if it's extension header, otherwise pdFALSE.
 */
    static BaseType_t xIsExtHeader( uint8_t ucNextHeader )
    {
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	4603      	mov	r3, r0
 800a834:	71fb      	strb	r3, [r7, #7]
        BaseType_t xReturn = pdFALSE;
 800a836:	2300      	movs	r3, #0
 800a838:	60fb      	str	r3, [r7, #12]

        switch( ucNextHeader )
 800a83a:	79fb      	ldrb	r3, [r7, #7]
 800a83c:	2b87      	cmp	r3, #135	@ 0x87
 800a83e:	d016      	beq.n	800a86e <xIsExtHeader+0x42>
 800a840:	2b87      	cmp	r3, #135	@ 0x87
 800a842:	dc16      	bgt.n	800a872 <xIsExtHeader+0x46>
 800a844:	2b00      	cmp	r3, #0
 800a846:	d012      	beq.n	800a86e <xIsExtHeader+0x42>
 800a848:	2b00      	cmp	r3, #0
 800a84a:	db12      	blt.n	800a872 <xIsExtHeader+0x46>
 800a84c:	2b3c      	cmp	r3, #60	@ 0x3c
 800a84e:	dc10      	bgt.n	800a872 <xIsExtHeader+0x46>
 800a850:	2b2b      	cmp	r3, #43	@ 0x2b
 800a852:	db0e      	blt.n	800a872 <xIsExtHeader+0x46>
 800a854:	3b2b      	subs	r3, #43	@ 0x2b
 800a856:	4a0a      	ldr	r2, [pc, #40]	@ (800a880 <xIsExtHeader+0x54>)
 800a858:	fa22 f303 	lsr.w	r3, r2, r3
 800a85c:	f003 0301 	and.w	r3, r3, #1
 800a860:	2b00      	cmp	r3, #0
 800a862:	bf14      	ite	ne
 800a864:	2301      	movne	r3, #1
 800a866:	2300      	moveq	r3, #0
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <xIsExtHeader+0x46>
            case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
                xReturn = pdTRUE;
 800a86e:	2301      	movs	r3, #1
 800a870:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800a872:	68fb      	ldr	r3, [r7, #12]
    }
 800a874:	4618      	mov	r0, r3
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	00020183 	.word	0x00020183

0800a884 <xGetIPv6MulticastGroupID>:
 * @param[in] pxIPv6Address The multicast address to filter group ID.
 * @param[out] pxReturnGroupID The buffer to store group ID.
 */
static void xGetIPv6MulticastGroupID( const IPv6_Address_t * pxIPv6Address,
                                      IPv6_Address_t * pxReturnGroupID )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
    configASSERT( pxIPv6Address != NULL );
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d104      	bne.n	800a89e <xGetIPv6MulticastGroupID+0x1a>
 800a894:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800a898:	480e      	ldr	r0, [pc, #56]	@ (800a8d4 <xGetIPv6MulticastGroupID+0x50>)
 800a89a:	f7f6 fee7 	bl	800166c <vAssertCalled>
    configASSERT( pxReturnGroupID != NULL );
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d104      	bne.n	800a8ae <xGetIPv6MulticastGroupID+0x2a>
 800a8a4:	f240 1113 	movw	r1, #275	@ 0x113
 800a8a8:	480a      	ldr	r0, [pc, #40]	@ (800a8d4 <xGetIPv6MulticastGroupID+0x50>)
 800a8aa:	f7f6 fedf 	bl	800166c <vAssertCalled>

    pxReturnGroupID->ucBytes[ 0 ] = 0U;
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	701a      	strb	r2, [r3, #0]
    pxReturnGroupID->ucBytes[ 1 ] = 0U;
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	705a      	strb	r2, [r3, #1]
    ( void ) memcpy( &( pxReturnGroupID->ucBytes[ 2 ] ), &( pxIPv6Address->ucBytes[ 2 ] ), 14 );
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	1c98      	adds	r0, r3, #2
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	3302      	adds	r3, #2
 800a8c2:	220e      	movs	r2, #14
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	f017 fa13 	bl	8021cf0 <memcpy>
}
 800a8ca:	bf00      	nop
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	08024718 	.word	0x08024718

0800a8d8 <xIsIPv6Loopback>:
 * @param[in] pxAddress The IP-address being checked.
 *
 * @return pdTRUE if the IP-address is a loopback address or else, pdFALSE.
 */
BaseType_t xIsIPv6Loopback( const IPv6_Address_t * pxAddress )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	60fb      	str	r3, [r7, #12]

    if( memcmp( pxAddress->ucBytes, FreeRTOS_in6addr_loopback.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2210      	movs	r2, #16
 800a8e8:	4906      	ldr	r1, [pc, #24]	@ (800a904 <xIsIPv6Loopback+0x2c>)
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f018 f995 	bl	8022c1a <memcmp>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d101      	bne.n	800a8fa <xIsIPv6Loopback+0x22>
    {
        xReturn = pdTRUE;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3710      	adds	r7, #16
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	08026f68 	.word	0x08026f68

0800a908 <xIsIPv6AllowedMulticast>:
 * @param[in] pxIPAddress The IP address to be checked.
 *
 * @return Returns pdTRUE if pxIPAddress is an allowed multicast address, pdFALSE if not.
 */
BaseType_t xIsIPv6AllowedMulticast( const IPv6_Address_t * pxIPAddress )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b088      	sub	sp, #32
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800a910:	2300      	movs	r3, #0
 800a912:	61fb      	str	r3, [r7, #28]
    IPv6_Address_t xGroupIDAddress;

    if( pxIPAddress->ucBytes[ 0 ] == 0xffU )
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	2bff      	cmp	r3, #255	@ 0xff
 800a91a:	d123      	bne.n	800a964 <xIsIPv6AllowedMulticast+0x5c>
    {
        IPv6MC_GET_GROUP_ID( pxIPAddress, &xGroupIDAddress );
 800a91c:	f107 030c 	add.w	r3, r7, #12
 800a920:	4619      	mov	r1, r3
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7ff ffae 	bl	800a884 <xGetIPv6MulticastGroupID>

        /* From RFC4291 - sec 2.7, packets from multicast address whose scope field is 0
         * should be silently dropped. */
        if( IPv6MC_GET_SCOPE_VALUE( pxIPAddress ) == 0U )
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	785b      	ldrb	r3, [r3, #1]
 800a92c:	f003 030f 	and.w	r3, r3, #15
 800a930:	2b00      	cmp	r3, #0
 800a932:	d102      	bne.n	800a93a <xIsIPv6AllowedMulticast+0x32>
        {
            xReturn = pdFALSE;
 800a934:	2300      	movs	r3, #0
 800a936:	61fb      	str	r3, [r7, #28]
 800a938:	e014      	b.n	800a964 <xIsIPv6AllowedMulticast+0x5c>
        /* From RFC4291 - sec 2.7.1, packets from predefined multicast address should never be used.
         * - 0xFF00::
         * - 0xFF01::
         * - ..
         * - 0xFF0F:: */
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	785b      	ldrb	r3, [r3, #1]
 800a93e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d10c      	bne.n	800a960 <xIsIPv6AllowedMulticast+0x58>
                 ( memcmp( xGroupIDAddress.ucBytes, FreeRTOS_in6addr_any.ucBytes, sizeof( IPv6_Address_t ) ) == 0 ) )
 800a946:	f107 030c 	add.w	r3, r7, #12
 800a94a:	2210      	movs	r2, #16
 800a94c:	4908      	ldr	r1, [pc, #32]	@ (800a970 <xIsIPv6AllowedMulticast+0x68>)
 800a94e:	4618      	mov	r0, r3
 800a950:	f018 f963 	bl	8022c1a <memcmp>
 800a954:	4603      	mov	r3, r0
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800a956:	2b00      	cmp	r3, #0
 800a958:	d102      	bne.n	800a960 <xIsIPv6AllowedMulticast+0x58>
        {
            xReturn = pdFALSE;
 800a95a:	2300      	movs	r3, #0
 800a95c:	61fb      	str	r3, [r7, #28]
 800a95e:	e001      	b.n	800a964 <xIsIPv6AllowedMulticast+0x5c>
        }
        else
        {
            xReturn = pdTRUE;
 800a960:	2301      	movs	r3, #1
 800a962:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800a964:	69fb      	ldr	r3, [r7, #28]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3720      	adds	r7, #32
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	08026f58 	.word	0x08026f58

0800a974 <xCompareIPv6_Address>:
 * @return Returns 0 if it can handle it, else non zero .
 */
BaseType_t xCompareIPv6_Address( const IPv6_Address_t * pxLeft,
                                 const IPv6_Address_t * pxRight,
                                 size_t uxPrefixLength )
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b08a      	sub	sp, #40	@ 0x28
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
    /* This variable is initialized by the system to contain the IPv6 multicast address for all nodes. */
    static const struct xIPv6_Address FreeRTOS_in6addr_allnodes = { { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } };

    /* 0    2    4    6    8    10   12   14 */
    /* ff02:0000:0000:0000:0000:0001:ff66:4a81 */
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	2bff      	cmp	r3, #255	@ 0xff
 800a986:	d112      	bne.n	800a9ae <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d10e      	bne.n	800a9ae <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 12 ] == 0xffU ) )
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	7b1b      	ldrb	r3, [r3, #12]
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800a994:	2bff      	cmp	r3, #255	@ 0xff
 800a996:	d10a      	bne.n	800a9ae <xCompareIPv6_Address+0x3a>
    {
        /* This is an LLMNR address. */
        xResult = memcmp( &( pxLeft->ucBytes[ 13 ] ), &( pxRight->ucBytes[ 13 ] ), 3 );
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f103 000d 	add.w	r0, r3, #13
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	330d      	adds	r3, #13
 800a9a2:	2203      	movs	r2, #3
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	f018 f938 	bl	8022c1a <memcmp>
 800a9aa:	6278      	str	r0, [r7, #36]	@ 0x24
 800a9ac:	e069      	b.n	800aa82 <xCompareIPv6_Address+0x10e>
    }
    else
    if( memcmp( pxRight->ucBytes, FreeRTOS_in6addr_allnodes.ucBytes, sizeof( IPv6_Address_t ) ) == 0 )
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2210      	movs	r2, #16
 800a9b2:	4936      	ldr	r1, [pc, #216]	@ (800aa8c <xCompareIPv6_Address+0x118>)
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f018 f930 	bl	8022c1a <memcmp>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d102      	bne.n	800a9c6 <xCompareIPv6_Address+0x52>
    {
        /* FF02::1 is all node address to reach out all nodes in the same link. */
        xResult = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9c4:	e05d      	b.n	800aa82 <xCompareIPv6_Address+0x10e>
    }
    else
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	2bfe      	cmp	r3, #254	@ 0xfe
 800a9cc:	d10e      	bne.n	800a9ec <xCompareIPv6_Address+0x78>
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800a9d2:	2b80      	cmp	r3, #128	@ 0x80
 800a9d4:	d10a      	bne.n	800a9ec <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	781b      	ldrb	r3, [r3, #0]
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800a9da:	2bfe      	cmp	r3, #254	@ 0xfe
 800a9dc:	d106      	bne.n	800a9ec <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 1 ] == 0x80U ) )
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	785b      	ldrb	r3, [r3, #1]
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800a9e2:	2b80      	cmp	r3, #128	@ 0x80
 800a9e4:	d102      	bne.n	800a9ec <xCompareIPv6_Address+0x78>
    {
        /* Both are local addresses. */
        xResult = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9ea:	e04a      	b.n	800aa82 <xCompareIPv6_Address+0x10e>
    }
    else
    {
        if( uxPrefixLength == 0U )
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d102      	bne.n	800a9f8 <xCompareIPv6_Address+0x84>
        {
            xResult = 0;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9f6:	e044      	b.n	800aa82 <xCompareIPv6_Address+0x10e>
        }
        else if( uxPrefixLength == ( 8U * ipSIZE_OF_IPv6_ADDRESS ) )
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b80      	cmp	r3, #128	@ 0x80
 800a9fc:	d107      	bne.n	800aa0e <xCompareIPv6_Address+0x9a>
        {
            xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	68b9      	ldr	r1, [r7, #8]
 800aa02:	2210      	movs	r2, #16
 800aa04:	4618      	mov	r0, r3
 800aa06:	f018 f908 	bl	8022c1a <memcmp>
 800aa0a:	6278      	str	r0, [r7, #36]	@ 0x24
 800aa0c:	e039      	b.n	800aa82 <xCompareIPv6_Address+0x10e>
        }
        else
        {
            size_t uxLength = uxPrefixLength / 8U;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	08db      	lsrs	r3, r3, #3
 800aa12:	623b      	str	r3, [r7, #32]

            xResult = 0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxLength > 0U )
 800aa18:	6a3b      	ldr	r3, [r7, #32]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d006      	beq.n	800aa2c <xCompareIPv6_Address+0xb8>
            {
                xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, uxLength );
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	68b9      	ldr	r1, [r7, #8]
 800aa22:	6a3a      	ldr	r2, [r7, #32]
 800aa24:	4618      	mov	r0, r3
 800aa26:	f018 f8f8 	bl	8022c1a <memcmp>
 800aa2a:	6278      	str	r0, [r7, #36]	@ 0x24
            }

            if( ( xResult == 0 ) && ( ( uxPrefixLength % 8U ) != 0U ) )
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d127      	bne.n	800aa82 <xCompareIPv6_Address+0x10e>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f003 0307 	and.w	r3, r3, #7
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d022      	beq.n	800aa82 <xCompareIPv6_Address+0x10e>
            {
                /* One byte has both a network- and a host-address. */
                size_t uxBits = uxPrefixLength % 8U;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f003 0307 	and.w	r3, r3, #7
 800aa42:	61fb      	str	r3, [r7, #28]
                size_t uxHostLen = 8U - uxBits;
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	f1c3 0308 	rsb	r3, r3, #8
 800aa4a:	61bb      	str	r3, [r7, #24]
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	fa02 f303 	lsl.w	r3, r2, r3
 800aa54:	3b01      	subs	r3, #1
 800aa56:	617b      	str	r3, [r7, #20]
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	43db      	mvns	r3, r3
 800aa5e:	74fb      	strb	r3, [r7, #19]

                if( ( pxLeft->ucBytes[ uxLength ] & ucNetMask ) != ( pxRight->ucBytes[ uxLength ] & ucNetMask ) )
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	6a3b      	ldr	r3, [r7, #32]
 800aa64:	4413      	add	r3, r2
 800aa66:	781a      	ldrb	r2, [r3, #0]
 800aa68:	68b9      	ldr	r1, [r7, #8]
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	440b      	add	r3, r1
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	4053      	eors	r3, r2
 800aa72:	b2da      	uxtb	r2, r3
 800aa74:	7cfb      	ldrb	r3, [r7, #19]
 800aa76:	4013      	ands	r3, r2
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d001      	beq.n	800aa82 <xCompareIPv6_Address+0x10e>
                {
                    xResult = 1;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }
    }

    return xResult;
 800aa82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3728      	adds	r7, #40	@ 0x28
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	08026f78 	.word	0x08026f78

0800aa90 <prvAllowIPPacketIPv6>:
 * @return Whether the packet should be processed or dropped.
 */
eFrameProcessingResult_t prvAllowIPPacketIPv6( const IPHeader_IPv6_t * const pxIPv6Header,
                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                               UBaseType_t uxHeaderLength )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
    }
    #else /* if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) */
    {
        ( void ) pxIPv6Header;
        /* The packet has been checked by the network interface. */
        eReturn = eProcessBuffer;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800aaa0:	7dfb      	ldrb	r3, [r7, #23]
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d10c      	bne.n	800aac0 <prvAllowIPPacketIPv6+0x30>
        {
            if( xCheckIPv6SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaae:	4619      	mov	r1, r3
 800aab0:	4610      	mov	r0, r2
 800aab2:	f7ff fdfd 	bl	800a6b0 <xCheckIPv6SizeFields>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d001      	beq.n	800aac0 <prvAllowIPPacketIPv6+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800aabc:	2300      	movs	r3, #0
 800aabe:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
    ( void ) uxHeaderLength;

    return eReturn;
 800aac0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3718      	adds	r7, #24
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
	...

0800aacc <xGetExtensionOrder>:
 *
 * @return Extension header order in the packet.
 */
BaseType_t xGetExtensionOrder( uint8_t ucProtocol,
                               uint8_t ucNextHeader )
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	4603      	mov	r3, r0
 800aad4:	460a      	mov	r2, r1
 800aad6:	71fb      	strb	r3, [r7, #7]
 800aad8:	4613      	mov	r3, r2
 800aada:	71bb      	strb	r3, [r7, #6]
    BaseType_t xReturn;

    switch( ucProtocol )
 800aadc:	79fb      	ldrb	r3, [r7, #7]
 800aade:	2b87      	cmp	r3, #135	@ 0x87
 800aae0:	d04b      	beq.n	800ab7a <xGetExtensionOrder+0xae>
 800aae2:	2b87      	cmp	r3, #135	@ 0x87
 800aae4:	dc4c      	bgt.n	800ab80 <xGetExtensionOrder+0xb4>
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d030      	beq.n	800ab4c <xGetExtensionOrder+0x80>
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	db48      	blt.n	800ab80 <xGetExtensionOrder+0xb4>
 800aaee:	2b3c      	cmp	r3, #60	@ 0x3c
 800aaf0:	dc46      	bgt.n	800ab80 <xGetExtensionOrder+0xb4>
 800aaf2:	2b2b      	cmp	r3, #43	@ 0x2b
 800aaf4:	db44      	blt.n	800ab80 <xGetExtensionOrder+0xb4>
 800aaf6:	3b2b      	subs	r3, #43	@ 0x2b
 800aaf8:	2b11      	cmp	r3, #17
 800aafa:	d841      	bhi.n	800ab80 <xGetExtensionOrder+0xb4>
 800aafc:	a201      	add	r2, pc, #4	@ (adr r2, 800ab04 <xGetExtensionOrder+0x38>)
 800aafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab02:	bf00      	nop
 800ab04:	0800ab63 	.word	0x0800ab63
 800ab08:	0800ab69 	.word	0x0800ab69
 800ab0c:	0800ab81 	.word	0x0800ab81
 800ab10:	0800ab81 	.word	0x0800ab81
 800ab14:	0800ab81 	.word	0x0800ab81
 800ab18:	0800ab81 	.word	0x0800ab81
 800ab1c:	0800ab81 	.word	0x0800ab81
 800ab20:	0800ab75 	.word	0x0800ab75
 800ab24:	0800ab6f 	.word	0x0800ab6f
 800ab28:	0800ab81 	.word	0x0800ab81
 800ab2c:	0800ab81 	.word	0x0800ab81
 800ab30:	0800ab81 	.word	0x0800ab81
 800ab34:	0800ab81 	.word	0x0800ab81
 800ab38:	0800ab81 	.word	0x0800ab81
 800ab3c:	0800ab81 	.word	0x0800ab81
 800ab40:	0800ab81 	.word	0x0800ab81
 800ab44:	0800ab81 	.word	0x0800ab81
 800ab48:	0800ab53 	.word	0x0800ab53
    {
        case ipIPv6_EXT_HEADER_HOP_BY_HOP:
            xReturn = 1;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	60fb      	str	r3, [r7, #12]
            break;
 800ab50:	e01b      	b.n	800ab8a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            xReturn = 7;
 800ab52:	2307      	movs	r3, #7
 800ab54:	60fb      	str	r3, [r7, #12]

            if( ucNextHeader == ipIPv6_EXT_HEADER_ROUTING_HEADER )
 800ab56:	79bb      	ldrb	r3, [r7, #6]
 800ab58:	2b2b      	cmp	r3, #43	@ 0x2b
 800ab5a:	d115      	bne.n	800ab88 <xGetExtensionOrder+0xbc>
            {
                xReturn = 2;
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	60fb      	str	r3, [r7, #12]
            }

            break;
 800ab60:	e012      	b.n	800ab88 <xGetExtensionOrder+0xbc>

        case ipIPv6_EXT_HEADER_ROUTING_HEADER:
            xReturn = 3;
 800ab62:	2303      	movs	r3, #3
 800ab64:	60fb      	str	r3, [r7, #12]
            break;
 800ab66:	e010      	b.n	800ab8a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            xReturn = 4;
 800ab68:	2304      	movs	r3, #4
 800ab6a:	60fb      	str	r3, [r7, #12]
            break;
 800ab6c:	e00d      	b.n	800ab8a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            xReturn = 5;
 800ab6e:	2305      	movs	r3, #5
 800ab70:	60fb      	str	r3, [r7, #12]
            break;
 800ab72:	e00a      	b.n	800ab8a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            xReturn = 6;
 800ab74:	2306      	movs	r3, #6
 800ab76:	60fb      	str	r3, [r7, #12]
            break;
 800ab78:	e007      	b.n	800ab8a <xGetExtensionOrder+0xbe>

        /* Destination options may follow here in case there are no routing options. */
        case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
            xReturn = 8;
 800ab7a:	2308      	movs	r3, #8
 800ab7c:	60fb      	str	r3, [r7, #12]
            break;
 800ab7e:	e004      	b.n	800ab8a <xGetExtensionOrder+0xbe>

        default:
            xReturn = -1;
 800ab80:	f04f 33ff 	mov.w	r3, #4294967295
 800ab84:	60fb      	str	r3, [r7, #12]
            break;
 800ab86:	e000      	b.n	800ab8a <xGetExtensionOrder+0xbe>
            break;
 800ab88:	bf00      	nop
    }

    return xReturn;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3714      	adds	r7, #20
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <eHandleIPv6ExtensionHeaders>:
 * @return eProcessBuffer in case the options are removed successfully, otherwise
 *         eReleaseBuffer.
 */
eFrameProcessingResult_t eHandleIPv6ExtensionHeaders( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                      BaseType_t xDoRemove )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b08e      	sub	sp, #56	@ 0x38
 800ab9c:	af02      	add	r7, sp, #8
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eResult = eReleaseBuffer;
 800aba2:	2300      	movs	r3, #0
 800aba4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    const size_t uxMaxLength = pxNetworkBuffer->xDataLength;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abac:	627b      	str	r3, [r7, #36]	@ 0x24
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb2:	623b      	str	r3, [r7, #32]
    size_t xMoveLen = 0U;
 800abb4:	2300      	movs	r3, #0
 800abb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxRemovedBytes = 0U;
 800abb8:	2300      	movs	r3, #0
 800abba:	61fb      	str	r3, [r7, #28]
    uint8_t ucNextHeader = 0U;
 800abbc:	2300      	movs	r3, #0
 800abbe:	72fb      	strb	r3, [r7, #11]
    size_t uxIndex = 0U;
 800abc0:	2300      	movs	r3, #0
 800abc2:	61bb      	str	r3, [r7, #24]

    uxRemovedBytes = usGetExtensionHeaderLength( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength, &ucNextHeader );
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abcc:	f107 020b 	add.w	r2, r7, #11
 800abd0:	4619      	mov	r1, r3
 800abd2:	f000 faa5 	bl	800b120 <usGetExtensionHeaderLength>
 800abd6:	61f8      	str	r0, [r7, #28]
    uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxRemovedBytes;
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	3336      	adds	r3, #54	@ 0x36
 800abdc:	61bb      	str	r3, [r7, #24]

    if( uxIndex < uxMaxLength )
 800abde:	69ba      	ldr	r2, [r7, #24]
 800abe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d243      	bcs.n	800ac6e <eHandleIPv6ExtensionHeaders+0xd6>
    {
        uint8_t * pucTo;
        const uint8_t * pucFrom;
        uint16_t usPayloadLength = FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength );
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	8a5b      	ldrh	r3, [r3, #18]
 800abea:	b29b      	uxth	r3, r3
 800abec:	021b      	lsls	r3, r3, #8
 800abee:	b21a      	sxth	r2, r3
 800abf0:	6a3b      	ldr	r3, [r7, #32]
 800abf2:	8a5b      	ldrh	r3, [r3, #18]
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	0a1b      	lsrs	r3, r3, #8
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	b21b      	sxth	r3, r3
 800abfc:	4313      	orrs	r3, r2
 800abfe:	b21b      	sxth	r3, r3
 800ac00:	82fb      	strh	r3, [r7, #22]

        if( uxRemovedBytes >= ( size_t ) usPayloadLength )
 800ac02:	8afb      	ldrh	r3, [r7, #22]
 800ac04:	69fa      	ldr	r2, [r7, #28]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d231      	bcs.n	800ac6e <eHandleIPv6ExtensionHeaders+0xd6>
        {
            /* Can not remove more bytes than the payload length. */
        }
        else if( xDoRemove == pdTRUE )
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d12e      	bne.n	800ac6e <eHandleIPv6ExtensionHeaders+0xd6>
        {
            pxIPPacket_IPv6->xIPHeader.ucNextHeader = ucNextHeader;
 800ac10:	7afa      	ldrb	r2, [r7, #11]
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	751a      	strb	r2, [r3, #20]
            pucTo = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] );
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac1a:	3336      	adds	r3, #54	@ 0x36
 800ac1c:	613b      	str	r3, [r7, #16]
            pucFrom = &( pxNetworkBuffer->pucEthernetBuffer[ uxIndex ] );
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	4413      	add	r3, r2
 800ac26:	60fb      	str	r3, [r7, #12]
            xMoveLen = uxMaxLength - uxIndex;
 800ac28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	1ad3      	subs	r3, r2, r3
 800ac2e:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memmove( pucTo, pucFrom, xMoveLen );
 800ac30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac32:	68f9      	ldr	r1, [r7, #12]
 800ac34:	6938      	ldr	r0, [r7, #16]
 800ac36:	f018 f800 	bl	8022c3a <memmove>
            pxNetworkBuffer->xDataLength -= uxRemovedBytes;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	1ad2      	subs	r2, r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	629a      	str	r2, [r3, #40]	@ 0x28

            usPayloadLength = ( uint16_t ) ( usPayloadLength - uxRemovedBytes );
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	8afa      	ldrh	r2, [r7, #22]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	82fb      	strh	r3, [r7, #22]
            pxIPPacket_IPv6->xIPHeader.usPayloadLength = FreeRTOS_htons( usPayloadLength );
 800ac50:	8afb      	ldrh	r3, [r7, #22]
 800ac52:	021b      	lsls	r3, r3, #8
 800ac54:	b21a      	sxth	r2, r3
 800ac56:	8afb      	ldrh	r3, [r7, #22]
 800ac58:	0a1b      	lsrs	r3, r3, #8
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	b21b      	sxth	r3, r3
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	b21b      	sxth	r3, r3
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	6a3b      	ldr	r3, [r7, #32]
 800ac66:	825a      	strh	r2, [r3, #18]
            eResult = eProcessBuffer;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* xDoRemove is false, so the function is not supposed to
             * remove extension headers. */
        }
    }

    FreeRTOS_printf( ( "Extension headers : %s Truncated %u bytes. Removed %u, Payload %u xDataLength now %u\n",
 800ac6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d101      	bne.n	800ac7a <eHandleIPv6ExtensionHeaders+0xe2>
 800ac76:	4910      	ldr	r1, [pc, #64]	@ (800acb8 <eHandleIPv6ExtensionHeaders+0x120>)
 800ac78:	e000      	b.n	800ac7c <eHandleIPv6ExtensionHeaders+0xe4>
 800ac7a:	4910      	ldr	r1, [pc, #64]	@ (800acbc <eHandleIPv6ExtensionHeaders+0x124>)
 800ac7c:	6a3b      	ldr	r3, [r7, #32]
 800ac7e:	8a5b      	ldrh	r3, [r3, #18]
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	021b      	lsls	r3, r3, #8
 800ac84:	b21a      	sxth	r2, r3
 800ac86:	6a3b      	ldr	r3, [r7, #32]
 800ac88:	8a5b      	ldrh	r3, [r3, #18]
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	0a1b      	lsrs	r3, r3, #8
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	b21b      	sxth	r3, r3
 800ac92:	4313      	orrs	r3, r2
 800ac94:	b21b      	sxth	r3, r3
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	461a      	mov	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	9200      	str	r2, [sp, #0]
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aca6:	4806      	ldr	r0, [pc, #24]	@ (800acc0 <eHandleIPv6ExtensionHeaders+0x128>)
 800aca8:	f016 fe06 	bl	80218b8 <lUDPLoggingPrintf>
                       ( eResult == eProcessBuffer ) ? "good" : "bad",
                       ( unsigned ) xMoveLen,
                       ( unsigned ) uxRemovedBytes,
                       FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength ),
                       ( unsigned ) pxNetworkBuffer->xDataLength ) );
    return eResult;
 800acac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3730      	adds	r7, #48	@ 0x30
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	08024748 	.word	0x08024748
 800acbc:	08024750 	.word	0x08024750
 800acc0:	08024754 	.word	0x08024754

0800acc4 <pxTCPSocketLookup_IPv6>:
 * @param[in] pxAddress The IPv4/IPv6 address.
 * @return The socket in case it is connected to the remote IP-address.
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup_IPv6( FreeRTOS_Socket_t * pxSocket,
                                                const IPv46_Address_t * pxAddress )
    {
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxResult = NULL;
 800acce:	2300      	movs	r3, #0
 800acd0:	60fb      	str	r3, [r7, #12]

        if( ( pxSocket != NULL ) && ( pxAddress != NULL ) )
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d026      	beq.n	800ad26 <pxTCPSocketLookup_IPv6+0x62>
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d023      	beq.n	800ad26 <pxTCPSocketLookup_IPv6+0x62>
        {
            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	7a1b      	ldrb	r3, [r3, #8]
 800ace2:	f003 0301 	and.w	r3, r3, #1
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d010      	beq.n	800ad0e <pxTCPSocketLookup_IPv6+0x4a>
            {
                if( pxAddress->xIs_IPv6 != pdFALSE )
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d018      	beq.n	800ad26 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( memcmp( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	3354      	adds	r3, #84	@ 0x54
 800acf8:	6839      	ldr	r1, [r7, #0]
 800acfa:	2210      	movs	r2, #16
 800acfc:	4618      	mov	r0, r3
 800acfe:	f017 ff8c 	bl	8022c1a <memcmp>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10e      	bne.n	800ad26 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	60fb      	str	r3, [r7, #12]
 800ad0c:	e00b      	b.n	800ad26 <pxTCPSocketLookup_IPv6+0x62>
                    }
                }
            }
            else
            {
                if( pxAddress->xIs_IPv6 == pdFALSE )
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d107      	bne.n	800ad26 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == pxAddress->xIPAddress.ulIP_IPv4 )
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d101      	bne.n	800ad26 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	60fb      	str	r3, [r7, #12]
                    }
                }
            }
        }

        return pxResult;
 800ad26:	68fb      	ldr	r3, [r7, #12]
    }
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <xSend_UDP_Update_IPv6>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    UDPPacket_IPv6_t * pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad3e:	60fb      	str	r3, [r7, #12]

    pxNetworkBuffer->xIPAddress.ulIP_IPv4 = 0U;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	615a      	str	r2, [r3, #20]

    configASSERT( pxDestinationAddress != NULL );
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d103      	bne.n	800ad54 <xSend_UDP_Update_IPv6+0x24>
 800ad4c:	2173      	movs	r1, #115	@ 0x73
 800ad4e:	4811      	ldr	r0, [pc, #68]	@ (800ad94 <xSend_UDP_Update_IPv6+0x64>)
 800ad50:	f7f6 fc8c 	bl	800166c <vAssertCalled>
    ( void ) memcpy( pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	3308      	adds	r3, #8
 800ad5e:	2210      	movs	r2, #16
 800ad60:	4619      	mov	r1, r3
 800ad62:	f016 ffc5 	bl	8021cf0 <memcpy>
    ( void ) memcpy( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f103 0014 	add.w	r0, r3, #20
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	3308      	adds	r3, #8
 800ad70:	2210      	movs	r2, #16
 800ad72:	4619      	mov	r1, r3
 800ad74:	f016 ffbc 	bl	8021cf0 <memcpy>
    pxUDPPacket_IPv6->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800ad80:	731a      	strb	r2, [r3, #12]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800ad88:	735a      	strb	r2, [r3, #13]

    return NULL;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	080247ac 	.word	0x080247ac

0800ad98 <cHexToChar>:
 * @brief Converts a 4 bit (nibble) value to a readable hex character, e.g. 14 becomes 'e'.
 * @param usValue  The value to be converted, must be between 0 and 15.
 * @return The character, between '0' and '9', or between 'a' and 'f'.
 */
char cHexToChar( uint16_t usValue )
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	4603      	mov	r3, r0
 800ada0:	80fb      	strh	r3, [r7, #6]
    char cReturn = '0';
 800ada2:	2330      	movs	r3, #48	@ 0x30
 800ada4:	73fb      	strb	r3, [r7, #15]

    if( usValue <= 9U )
 800ada6:	88fb      	ldrh	r3, [r7, #6]
 800ada8:	2b09      	cmp	r3, #9
 800adaa:	d805      	bhi.n	800adb8 <cHexToChar+0x20>
    {
        cReturn = ( char ) ( cReturn + usValue );
 800adac:	88fb      	ldrh	r3, [r7, #6]
 800adae:	b2da      	uxtb	r2, r3
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
 800adb2:	4413      	add	r3, r2
 800adb4:	73fb      	strb	r3, [r7, #15]
 800adb6:	e010      	b.n	800adda <cHexToChar+0x42>
    }
    else if( usValue <= 15U )
 800adb8:	88fb      	ldrh	r3, [r7, #6]
 800adba:	2b0f      	cmp	r3, #15
 800adbc:	d809      	bhi.n	800add2 <cHexToChar+0x3a>
    {
        cReturn = 'a';
 800adbe:	2361      	movs	r3, #97	@ 0x61
 800adc0:	73fb      	strb	r3, [r7, #15]
        cReturn = ( char ) ( cReturn + ( usValue - ( uint16_t ) 10 ) );
 800adc2:	88fb      	ldrh	r3, [r7, #6]
 800adc4:	b2da      	uxtb	r2, r3
 800adc6:	7bfb      	ldrb	r3, [r7, #15]
 800adc8:	4413      	add	r3, r2
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	3b0a      	subs	r3, #10
 800adce:	73fb      	strb	r3, [r7, #15]
 800add0:	e003      	b.n	800adda <cHexToChar+0x42>
    }
    else
    {
        /* The value passed to 'usValue' has been and-ed with 0x0f,
         * so this else clause should never be reached. */
        configASSERT( 0 == 1 );
 800add2:	21b3      	movs	r1, #179	@ 0xb3
 800add4:	4803      	ldr	r0, [pc, #12]	@ (800ade4 <cHexToChar+0x4c>)
 800add6:	f7f6 fc49 	bl	800166c <vAssertCalled>
    }

    return cReturn;
 800adda:	7bfb      	ldrb	r3, [r7, #15]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	080247ac 	.word	0x080247ac

0800ade8 <uxHexPrintShort>:
 * @return The number of bytes written to 'pcBuffer'.
 */
socklen_t uxHexPrintShort( char * pcBuffer,
                           size_t uxBufferSize,
                           uint16_t usValue )
{
 800ade8:	b590      	push	{r4, r7, lr}
 800adea:	b08b      	sub	sp, #44	@ 0x2c
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	4613      	mov	r3, r2
 800adf4:	80fb      	strh	r3, [r7, #6]
    const size_t uxNibbleCount = 4U;
 800adf6:	2304      	movs	r3, #4
 800adf8:	617b      	str	r3, [r7, #20]
    size_t uxNibble;
    socklen_t uxIndex = 0U;
 800adfa:	2300      	movs	r3, #0
 800adfc:	623b      	str	r3, [r7, #32]
    uint16_t usShifter = usValue;
 800adfe:	88fb      	ldrh	r3, [r7, #6]
 800ae00:	83fb      	strh	r3, [r7, #30]
    BaseType_t xHadNonZero = pdFALSE;
 800ae02:	2300      	movs	r3, #0
 800ae04:	61bb      	str	r3, [r7, #24]

    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800ae06:	2300      	movs	r3, #0
 800ae08:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae0a:	e026      	b.n	800ae5a <uxHexPrintShort+0x72>
    {
        uint16_t usNibble = ( usShifter >> 12 ) & 0x0FU;
 800ae0c:	8bfb      	ldrh	r3, [r7, #30]
 800ae0e:	0b1b      	lsrs	r3, r3, #12
 800ae10:	827b      	strh	r3, [r7, #18]

        if( usNibble != 0U )
 800ae12:	8a7b      	ldrh	r3, [r7, #18]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d001      	beq.n	800ae1c <uxHexPrintShort+0x34>
        {
            xHadNonZero = pdTRUE;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	61bb      	str	r3, [r7, #24]
        }

        if( ( xHadNonZero != pdFALSE ) || ( uxNibble == ( uxNibbleCount - 1U ) ) )
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d104      	bne.n	800ae2c <uxHexPrintShort+0x44>
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	3b01      	subs	r3, #1
 800ae26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d110      	bne.n	800ae4e <uxHexPrintShort+0x66>
        {
            if( uxIndex >= ( uxBufferSize - 1U ) )
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	6a3a      	ldr	r2, [r7, #32]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d216      	bcs.n	800ae64 <uxHexPrintShort+0x7c>
            {
                break;
            }

            pcBuffer[ uxIndex ] = cHexToChar( usNibble );
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	6a3b      	ldr	r3, [r7, #32]
 800ae3a:	18d4      	adds	r4, r2, r3
 800ae3c:	8a7b      	ldrh	r3, [r7, #18]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7ff ffaa 	bl	800ad98 <cHexToChar>
 800ae44:	4603      	mov	r3, r0
 800ae46:	7023      	strb	r3, [r4, #0]
            uxIndex++;
 800ae48:	6a3b      	ldr	r3, [r7, #32]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	623b      	str	r3, [r7, #32]
        }

        usShifter = ( uint16_t ) ( usShifter << 4 );
 800ae4e:	8bfb      	ldrh	r3, [r7, #30]
 800ae50:	011b      	lsls	r3, r3, #4
 800ae52:	83fb      	strh	r3, [r7, #30]
    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800ae54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae56:	3301      	adds	r3, #1
 800ae58:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d3d4      	bcc.n	800ae0c <uxHexPrintShort+0x24>
 800ae62:	e000      	b.n	800ae66 <uxHexPrintShort+0x7e>
                break;
 800ae64:	bf00      	nop
    }

    return uxIndex;
 800ae66:	6a3b      	ldr	r3, [r7, #32]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	372c      	adds	r7, #44	@ 0x2c
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd90      	pop	{r4, r7, pc}

0800ae70 <prv_ntop6_search_zeros>:
 * @brief Scan the binary IPv6 address and find the longest train of consecutive zero's.
 *        The result of this search will be stored in 'xZeroStart' and 'xZeroLength'.
 * @param pxSet the set of parameters as used by FreeRTOS_inet_ntop6().
 */
void prv_ntop6_search_zeros( struct sNTOP6_Set * pxSet )
{
 800ae70:	b480      	push	{r7}
 800ae72:	b089      	sub	sp, #36	@ 0x24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
    BaseType_t xIndex = 0;            /* The index in the IPv6 address: 0..7. */
 800ae78:	2300      	movs	r3, #0
 800ae7a:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurStart = 0;         /* The position of the first zero found so far. */
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	61bb      	str	r3, [r7, #24]
    BaseType_t xCurLength = 0;        /* The number of zero's seen so far. */
 800ae80:	2300      	movs	r3, #0
 800ae82:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800ae84:	2308      	movs	r3, #8
 800ae86:	613b      	str	r3, [r7, #16]

    /* Default: when xZeroStart is negative, it won't match with any xIndex. */
    pxSet->xZeroStart = -1;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae8e:	605a      	str	r2, [r3, #4]

    /* Look for the longest train of zero's 0:0:0:... */
    for( ; xIndex < xShortCount; xIndex++ )
 800ae90:	e02c      	b.n	800aeec <prv_ntop6_search_zeros+0x7c>
    {
        uint16_t usValue = pxSet->pusAddress[ xIndex ];
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	005b      	lsls	r3, r3, #1
 800ae9a:	4413      	add	r3, r2
 800ae9c:	881b      	ldrh	r3, [r3, #0]
 800ae9e:	81fb      	strh	r3, [r7, #14]

        if( usValue == 0U )
 800aea0:	89fb      	ldrh	r3, [r7, #14]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d107      	bne.n	800aeb6 <prv_ntop6_search_zeros+0x46>
        {
            if( xCurLength == 0 )
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d101      	bne.n	800aeb0 <prv_ntop6_search_zeros+0x40>
            {
                /* Remember the position of the first zero. */
                xCurStart = xIndex;
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	61bb      	str	r3, [r7, #24]
            }

            /* Count consecutive zeros. */
            xCurLength++;
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	617b      	str	r3, [r7, #20]
        }

        if( ( usValue != 0U ) || ( xIndex == ( xShortCount - 1 ) ) )
 800aeb6:	89fb      	ldrh	r3, [r7, #14]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d104      	bne.n	800aec6 <prv_ntop6_search_zeros+0x56>
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	3b01      	subs	r3, #1
 800aec0:	69fa      	ldr	r2, [r7, #28]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d10f      	bne.n	800aee6 <prv_ntop6_search_zeros+0x76>
        {
            /* Has a longer train of zero's been found? */
            if( ( xCurLength > 1 ) && ( pxSet->xZeroLength < xCurLength ) )
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	dd0a      	ble.n	800aee2 <prv_ntop6_search_zeros+0x72>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	697a      	ldr	r2, [r7, #20]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	dd05      	ble.n	800aee2 <prv_ntop6_search_zeros+0x72>
            {
                /* Remember the number of consecutive zeros. */
                pxSet->xZeroLength = xCurLength;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	609a      	str	r2, [r3, #8]
                /* Remember the index of the first zero found. */
                pxSet->xZeroStart = xCurStart;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	69ba      	ldr	r2, [r7, #24]
 800aee0:	605a      	str	r2, [r3, #4]
            }

            /* Reset the counter of consecutive zeros. */
            xCurLength = 0;
 800aee2:	2300      	movs	r3, #0
 800aee4:	617b      	str	r3, [r7, #20]
    for( ; xIndex < xShortCount; xIndex++ )
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	3301      	adds	r3, #1
 800aeea:	61fb      	str	r3, [r7, #28]
 800aeec:	69fa      	ldr	r2, [r7, #28]
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	dbce      	blt.n	800ae92 <prv_ntop6_search_zeros+0x22>
        }
    }
}
 800aef4:	bf00      	nop
 800aef6:	bf00      	nop
 800aef8:	3724      	adds	r7, #36	@ 0x24
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr

0800af02 <prv_ntop6_write_zeros>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_zeros( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800af02:	b480      	push	{r7}
 800af04:	b087      	sub	sp, #28
 800af06:	af00      	add	r7, sp, #0
 800af08:	60f8      	str	r0, [r7, #12]
 800af0a:	60b9      	str	r1, [r7, #8]
 800af0c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdPASS;
 800af0e:	2301      	movs	r3, #1
 800af10:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800af12:	2308      	movs	r3, #8
 800af14:	613b      	str	r3, [r7, #16]

    if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	691a      	ldr	r2, [r3, #16]
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	3b01      	subs	r3, #1
 800af1e:	429a      	cmp	r2, r3
 800af20:	d827      	bhi.n	800af72 <prv_ntop6_write_zeros+0x70>
    {
        pcDestination[ pxSet->uxTargetIndex ] = ':';
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	4413      	add	r3, r2
 800af2a:	223a      	movs	r2, #58	@ 0x3a
 800af2c:	701a      	strb	r2, [r3, #0]
        pxSet->uxTargetIndex++;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	1c5a      	adds	r2, r3, #1
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	611a      	str	r2, [r3, #16]

        if( ( pxSet->xIndex + pxSet->xZeroLength ) == xShortCount )
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68da      	ldr	r2, [r3, #12]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	4413      	add	r3, r2
 800af42:	693a      	ldr	r2, [r7, #16]
 800af44:	429a      	cmp	r2, r3
 800af46:	d116      	bne.n	800af76 <prv_ntop6_write_zeros+0x74>
        {
            /* Reached the last index, write a second ":". */
            if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	691a      	ldr	r2, [r3, #16]
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	3b01      	subs	r3, #1
 800af50:	429a      	cmp	r2, r3
 800af52:	d80b      	bhi.n	800af6c <prv_ntop6_write_zeros+0x6a>
            {
                pcDestination[ pxSet->uxTargetIndex ] = ':';
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	4413      	add	r3, r2
 800af5c:	223a      	movs	r2, #58	@ 0x3a
 800af5e:	701a      	strb	r2, [r3, #0]
                pxSet->uxTargetIndex++;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	1c5a      	adds	r2, r3, #1
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	611a      	str	r2, [r3, #16]
 800af6a:	e004      	b.n	800af76 <prv_ntop6_write_zeros+0x74>
            }
            else
            {
                /* Can not write the second colon. */
                xReturn = pdFAIL;
 800af6c:	2300      	movs	r3, #0
 800af6e:	617b      	str	r3, [r7, #20]
 800af70:	e001      	b.n	800af76 <prv_ntop6_write_zeros+0x74>
        }
    }
    else
    {
        /* Can not write the first colon. */
        xReturn = pdFAIL;
 800af72:	2300      	movs	r3, #0
 800af74:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800af76:	697b      	ldr	r3, [r7, #20]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	371c      	adds	r7, #28
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <prv_ntop6_write_short>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_short( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800af84:	b590      	push	{r4, r7, lr}
 800af86:	b089      	sub	sp, #36	@ 0x24
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
    socklen_t uxLength;
    BaseType_t xReturn = pdPASS;
 800af90:	2301      	movs	r3, #1
 800af92:	61fb      	str	r3, [r7, #28]
    const size_t uxBytesPerShortValue = 4U;
 800af94:	2304      	movs	r3, #4
 800af96:	61bb      	str	r3, [r7, #24]

    if( pxSet->xIndex > 0 )
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	dd13      	ble.n	800afc8 <prv_ntop6_write_short+0x44>
    {
        if( pxSet->uxTargetIndex >= ( uxSize - 1U ) )
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	691a      	ldr	r2, [r3, #16]
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	3b01      	subs	r3, #1
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d302      	bcc.n	800afb2 <prv_ntop6_write_short+0x2e>
        {
            xReturn = pdFAIL;
 800afac:	2300      	movs	r3, #0
 800afae:	61fb      	str	r3, [r7, #28]
 800afb0:	e00a      	b.n	800afc8 <prv_ntop6_write_short+0x44>
        }
        else
        {
            pcDestination[ pxSet->uxTargetIndex ] = ':';
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	4413      	add	r3, r2
 800afba:	223a      	movs	r2, #58	@ 0x3a
 800afbc:	701a      	strb	r2, [r3, #0]
            pxSet->uxTargetIndex++;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	1c5a      	adds	r2, r3, #1
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	611a      	str	r2, [r3, #16]
        }
    }

    if( xReturn == pdPASS )
 800afc8:	69fb      	ldr	r3, [r7, #28]
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d130      	bne.n	800b030 <prv_ntop6_write_short+0xac>
    {
        /* If there is enough space to write a short. */
        if( pxSet->uxTargetIndex <= ( uxSize - uxBytesPerShortValue ) )
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	691a      	ldr	r2, [r3, #16]
 800afd2:	68b9      	ldr	r1, [r7, #8]
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	1acb      	subs	r3, r1, r3
 800afd8:	429a      	cmp	r2, r3
 800afda:	d827      	bhi.n	800b02c <prv_ntop6_write_short+0xa8>
        {
            /* Write hex value of short. at most 4 + 1 bytes. */
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	18d0      	adds	r0, r2, r3
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	1c5c      	adds	r4, r3, #1
                                        uxBytesPerShortValue + 1U,
                                        FreeRTOS_ntohs( pxSet->pusAddress[ pxSet->xIndex ] ) );
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	005b      	lsls	r3, r3, #1
 800aff2:	4413      	add	r3, r2
 800aff4:	881b      	ldrh	r3, [r3, #0]
 800aff6:	021b      	lsls	r3, r3, #8
 800aff8:	b21a      	sxth	r2, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6819      	ldr	r1, [r3, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	005b      	lsls	r3, r3, #1
 800b004:	440b      	add	r3, r1
 800b006:	881b      	ldrh	r3, [r3, #0]
 800b008:	0a1b      	lsrs	r3, r3, #8
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	b21b      	sxth	r3, r3
 800b00e:	4313      	orrs	r3, r2
 800b010:	b21b      	sxth	r3, r3
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800b012:	b29b      	uxth	r3, r3
 800b014:	461a      	mov	r2, r3
 800b016:	4621      	mov	r1, r4
 800b018:	f7ff fee6 	bl	800ade8 <uxHexPrintShort>
 800b01c:	6178      	str	r0, [r7, #20]

            /* uxLength will be non zero and positive always. */
            pxSet->uxTargetIndex += uxLength;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	691a      	ldr	r2, [r3, #16]
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	441a      	add	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	611a      	str	r2, [r3, #16]
 800b02a:	e001      	b.n	800b030 <prv_ntop6_write_short+0xac>
        }
        else
        {
            xReturn = pdFAIL;
 800b02c:	2300      	movs	r3, #0
 800b02e:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800b030:	69fb      	ldr	r3, [r7, #28]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3724      	adds	r7, #36	@ 0x24
 800b036:	46bd      	mov	sp, r7
 800b038:	bd90      	pop	{r4, r7, pc}

0800b03a <FreeRTOS_inet_ntop6>:
 * @return pdPASS if the translation was successful or else pdFAIL.
 */
const char * FreeRTOS_inet_ntop6( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b08a      	sub	sp, #40	@ 0x28
 800b03e:	af00      	add	r7, sp, #0
 800b040:	60f8      	str	r0, [r7, #12]
 800b042:	60b9      	str	r1, [r7, #8]
 800b044:	607a      	str	r2, [r7, #4]
    const char * pcReturn;  /* The return value, which is either 'pcDestination' or NULL. */
    struct sNTOP6_Set xSet; /* A set of values for easy exchange with the helper functions prv_ntop6_xxx(). */

    ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800b046:	f107 0310 	add.w	r3, r7, #16
 800b04a:	2214      	movs	r2, #20
 800b04c:	2100      	movs	r1, #0
 800b04e:	4618      	mov	r0, r3
 800b050:	f016 ff5b 	bl	8021f0a <memset>

    xSet.pusAddress = pvSource;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	613b      	str	r3, [r7, #16]

    if( uxSize < 3U )
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d92c      	bls.n	800b0b8 <FreeRTOS_inet_ntop6+0x7e>
    {
        /* Can not even print :: */
    }
    else
    {
        prv_ntop6_search_zeros( &( xSet ) );
 800b05e:	f107 0310 	add.w	r3, r7, #16
 800b062:	4618      	mov	r0, r3
 800b064:	f7ff ff04 	bl	800ae70 <prv_ntop6_search_zeros>

        while( xSet.xIndex < 8 )
 800b068:	e01f      	b.n	800b0aa <FreeRTOS_inet_ntop6+0x70>
        {
            if( xSet.xIndex == xSet.xZeroStart )
 800b06a:	69fa      	ldr	r2, [r7, #28]
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d10e      	bne.n	800b090 <FreeRTOS_inet_ntop6+0x56>
            {
                if( prv_ntop6_write_zeros( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800b072:	f107 0310 	add.w	r3, r7, #16
 800b076:	461a      	mov	r2, r3
 800b078:	6879      	ldr	r1, [r7, #4]
 800b07a:	68b8      	ldr	r0, [r7, #8]
 800b07c:	f7ff ff41 	bl	800af02 <prv_ntop6_write_zeros>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	d015      	beq.n	800b0b2 <FreeRTOS_inet_ntop6+0x78>
                {
                    break;
                }

                xSet.xIndex += xSet.xZeroLength;
 800b086:	69fa      	ldr	r2, [r7, #28]
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	4413      	add	r3, r2
 800b08c:	61fb      	str	r3, [r7, #28]
 800b08e:	e00c      	b.n	800b0aa <FreeRTOS_inet_ntop6+0x70>
            }
            else
            {
                if( prv_ntop6_write_short( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800b090:	f107 0310 	add.w	r3, r7, #16
 800b094:	461a      	mov	r2, r3
 800b096:	6879      	ldr	r1, [r7, #4]
 800b098:	68b8      	ldr	r0, [r7, #8]
 800b09a:	f7ff ff73 	bl	800af84 <prv_ntop6_write_short>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d008      	beq.n	800b0b6 <FreeRTOS_inet_ntop6+0x7c>
                {
                    break;
                }

                xSet.xIndex++;
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	61fb      	str	r3, [r7, #28]
        while( xSet.xIndex < 8 )
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	2b07      	cmp	r3, #7
 800b0ae:	dddc      	ble.n	800b06a <FreeRTOS_inet_ntop6+0x30>
 800b0b0:	e002      	b.n	800b0b8 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800b0b2:	bf00      	nop
 800b0b4:	e000      	b.n	800b0b8 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800b0b6:	bf00      	nop
            }
        }
    }

    if( xSet.xIndex < 8 )
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	2b07      	cmp	r3, #7
 800b0bc:	dc02      	bgt.n	800b0c4 <FreeRTOS_inet_ntop6+0x8a>
    {
        /* Didn't reach the last nibble: clear the string. */
        pcReturn = NULL;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0c2:	e006      	b.n	800b0d2 <FreeRTOS_inet_ntop6+0x98>
    }
    else
    {
        pcDestination[ xSet.uxTargetIndex ] = '\0';
 800b0c4:	6a3b      	ldr	r3, [r7, #32]
 800b0c6:	68ba      	ldr	r2, [r7, #8]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	701a      	strb	r2, [r3, #0]
        pcReturn = pcDestination;
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pcReturn;
 800b0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3728      	adds	r7, #40	@ 0x28
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <vSetMultiCastIPv6MacAddress>:
 * @param[in] pxAddress IPv6 address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv6MacAddress( const IPv6_Address_t * pxAddress,
                                  MACAddress_t * pxMACAddress )
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
    pxMACAddress->ucBytes[ 0 ] = 0x33U;
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	2233      	movs	r2, #51	@ 0x33
 800b0ea:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = 0x33U;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	2233      	movs	r2, #51	@ 0x33
 800b0f0:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = pxAddress->ucBytes[ 12 ];
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	7b1a      	ldrb	r2, [r3, #12]
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = pxAddress->ucBytes[ 13 ];
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	7b5a      	ldrb	r2, [r3, #13]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = pxAddress->ucBytes[ 14 ];
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	7b9a      	ldrb	r2, [r3, #14]
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = pxAddress->ucBytes[ 15 ];
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	7bda      	ldrb	r2, [r3, #15]
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	715a      	strb	r2, [r3, #5]
}
 800b112:	bf00      	nop
 800b114:	370c      	adds	r7, #12
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
	...

0800b120 <usGetExtensionHeaderLength>:
 * @return The total length of all extension headers, or whole buffer length when error detected.
 */
size_t usGetExtensionHeaderLength( const uint8_t * pucEthernetBuffer,
                                   size_t uxBufferLength,
                                   uint8_t * pucProtocol )
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b08e      	sub	sp, #56	@ 0x38
 800b124:	af02      	add	r7, sp, #8
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
    uint8_t ucCurrentHeader;
    const IPPacket_IPv6_t * pxIPPacket_IPv6;
    uint8_t ucNextHeader = 0U;
 800b12c:	2300      	movs	r3, #0
 800b12e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    size_t uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER;
 800b132:	2336      	movs	r3, #54	@ 0x36
 800b134:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxHopSize = 0U;
 800b136:	2300      	movs	r3, #0
 800b138:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurrentOrder = 0;
 800b13a:	2300      	movs	r3, #0
 800b13c:	61bb      	str	r3, [r7, #24]
    BaseType_t xNextOrder = 0;
 800b13e:	2300      	movs	r3, #0
 800b140:	617b      	str	r3, [r7, #20]
    size_t uxReturn = uxBufferLength;
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	627b      	str	r3, [r7, #36]	@ 0x24

    if( ( pucEthernetBuffer != NULL ) && ( pucProtocol != NULL ) )
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f000 808c 	beq.w	800b266 <usGetExtensionHeaderLength+0x146>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2b00      	cmp	r3, #0
 800b152:	f000 8088 	beq.w	800b266 <usGetExtensionHeaderLength+0x146>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	613b      	str	r3, [r7, #16]
        ucCurrentHeader = pxIPPacket_IPv6->xIPHeader.ucNextHeader;
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	7d1b      	ldrb	r3, [r3, #20]
 800b15e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        /* Check if packet has extension header. */
        if( xGetExtensionOrder( ucCurrentHeader, 0U ) > 0 )
 800b162:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b166:	2100      	movs	r1, #0
 800b168:	4618      	mov	r0, r3
 800b16a:	f7ff fcaf 	bl	800aacc <xGetExtensionOrder>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	dd72      	ble.n	800b25a <usGetExtensionHeaderLength+0x13a>
        {
            while( ( uxIndex + 8U ) < uxBufferLength )
 800b174:	e06b      	b.n	800b24e <usGetExtensionHeaderLength+0x12e>
            {
                ucNextHeader = pucEthernetBuffer[ uxIndex ];
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b17a:	4413      	add	r3, r2
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                xCurrentOrder = xGetExtensionOrder( ucCurrentHeader, ucNextHeader );
 800b182:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b186:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b18a:	4611      	mov	r1, r2
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7ff fc9d 	bl	800aacc <xGetExtensionOrder>
 800b192:	61b8      	str	r0, [r7, #24]

                /* To avoid compile warning if debug print is disabled. */
                ( void ) xCurrentOrder;

                /* Read the length expressed in number of octets. */
                uxHopSize = ( size_t ) pucEthernetBuffer[ uxIndex + 1U ];
 800b194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b196:	3301      	adds	r3, #1
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	4413      	add	r3, r2
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	61fb      	str	r3, [r7, #28]
                /* And multiply by 8 and add the minimum size of 8. */
                uxHopSize = ( uxHopSize * 8U ) + 8U;
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	00db      	lsls	r3, r3, #3
 800b1a6:	61fb      	str	r3, [r7, #28]

                if( ( uxIndex + uxHopSize ) >= uxBufferLength )
 800b1a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d806      	bhi.n	800b1c2 <usGetExtensionHeaderLength+0xa2>
                {
                    FreeRTOS_debug_printf( ( "The length %u + %u of extension header is larger than buffer size %u \n", ( unsigned ) uxIndex, ( unsigned ) uxHopSize, ( unsigned ) uxBufferLength ) );
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	69fa      	ldr	r2, [r7, #28]
 800b1b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b1ba:	482d      	ldr	r0, [pc, #180]	@ (800b270 <usGetExtensionHeaderLength+0x150>)
 800b1bc:	f016 fb7c 	bl	80218b8 <lUDPLoggingPrintf>
                    break;
 800b1c0:	e051      	b.n	800b266 <usGetExtensionHeaderLength+0x146>
                }

                uxIndex = uxIndex + uxHopSize;
 800b1c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 800b1ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b1ce:	2b06      	cmp	r3, #6
 800b1d0:	d007      	beq.n	800b1e2 <usGetExtensionHeaderLength+0xc2>
 800b1d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b1d6:	2b11      	cmp	r3, #17
 800b1d8:	d003      	beq.n	800b1e2 <usGetExtensionHeaderLength+0xc2>
                    ( ucNextHeader == ipPROTOCOL_UDP ) ||
 800b1da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b1de:	2b3a      	cmp	r3, #58	@ 0x3a
 800b1e0:	d10d      	bne.n	800b1fe <usGetExtensionHeaderLength+0xde>
                    ( ucNextHeader == ipPROTOCOL_ICMP_IPv6 ) )
                {
                    FreeRTOS_debug_printf( ( "Stop at header %u\n", ucNextHeader ) );
 800b1e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	4822      	ldr	r0, [pc, #136]	@ (800b274 <usGetExtensionHeaderLength+0x154>)
 800b1ea:	f016 fb65 	bl	80218b8 <lUDPLoggingPrintf>

                    uxReturn = uxIndex - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER );
 800b1ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f0:	3b36      	subs	r3, #54	@ 0x36
 800b1f2:	627b      	str	r3, [r7, #36]	@ 0x24
                    *pucProtocol = ucNextHeader;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b1fa:	701a      	strb	r2, [r3, #0]
                    break;
 800b1fc:	e033      	b.n	800b266 <usGetExtensionHeaderLength+0x146>
                }

                xNextOrder = xGetExtensionOrder( ucNextHeader, pucEthernetBuffer[ uxIndex ] );
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b202:	4413      	add	r3, r2
 800b204:	781a      	ldrb	r2, [r3, #0]
 800b206:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b20a:	4611      	mov	r1, r2
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7ff fc5d 	bl	800aacc <xGetExtensionOrder>
 800b212:	6178      	str	r0, [r7, #20]

                FreeRTOS_debug_printf( ( "Going from header %2u (%d) to %2u (%d)\n",
 800b214:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800b218:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	4613      	mov	r3, r2
 800b222:	69ba      	ldr	r2, [r7, #24]
 800b224:	4814      	ldr	r0, [pc, #80]	@ (800b278 <usGetExtensionHeaderLength+0x158>)
 800b226:	f016 fb47 	bl	80218b8 <lUDPLoggingPrintf>
                 * any order and occurring any number of times in the same packet,
                 * except for the Hop-by-Hop Options header which is restricted to
                 * appear immediately after an IPv6 header only. Outlined
                 * by RFC 2460 section 4.1  Extension Header Order.
                 */
                if( xNextOrder == 1 ) /* ipIPv6_EXT_HEADER_HOP_BY_HOP */
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d103      	bne.n	800b238 <usGetExtensionHeaderLength+0x118>
                {
                    FreeRTOS_printf( ( "Wrong order. Hop-by-Hop Options header restricted to appear immediately after an IPv6 header\n" ) );
 800b230:	4812      	ldr	r0, [pc, #72]	@ (800b27c <usGetExtensionHeaderLength+0x15c>)
 800b232:	f016 fb41 	bl	80218b8 <lUDPLoggingPrintf>
                    break;
 800b236:	e016      	b.n	800b266 <usGetExtensionHeaderLength+0x146>
                }
                else if( xNextOrder < 0 )
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	da03      	bge.n	800b246 <usGetExtensionHeaderLength+0x126>
                {
                    FreeRTOS_printf( ( "Invalid extension header detected\n" ) );
 800b23e:	4810      	ldr	r0, [pc, #64]	@ (800b280 <usGetExtensionHeaderLength+0x160>)
 800b240:	f016 fb3a 	bl	80218b8 <lUDPLoggingPrintf>
                    break;
 800b244:	e00f      	b.n	800b266 <usGetExtensionHeaderLength+0x146>
                else
                {
                    /* Do nothing, coverity happy. */
                }

                ucCurrentHeader = ucNextHeader;
 800b246:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b24a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            while( ( uxIndex + 8U ) < uxBufferLength )
 800b24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b250:	3308      	adds	r3, #8
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	429a      	cmp	r2, r3
 800b256:	d88e      	bhi.n	800b176 <usGetExtensionHeaderLength+0x56>
 800b258:	e005      	b.n	800b266 <usGetExtensionHeaderLength+0x146>
            }
        }
        else
        {
            /* No extension headers. */
            *pucProtocol = ucCurrentHeader;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b260:	701a      	strb	r2, [r3, #0]
            uxReturn = 0;
 800b262:	2300      	movs	r3, #0
 800b264:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    return uxReturn;
 800b266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3730      	adds	r7, #48	@ 0x30
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	080247f4 	.word	0x080247f4
 800b274:	0802483c 	.word	0x0802483c
 800b278:	08024850 	.word	0x08024850
 800b27c:	08024878 	.word	0x08024878
 800b280:	080248d8 	.word	0x080248d8

0800b284 <vManageSolicitedNodeAddress>:
 * @param[in] pxEndPoint The end-point for which a network up/down event is being handled.
 * @param[in] xNetworkGoingUp pdTRUE when the network goes UP, pdFALSE when the network goes DOWN.
 */
void vManageSolicitedNodeAddress( const struct xNetworkEndPoint * pxEndPoint,
                                  BaseType_t xNetworkGoingUp )
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
    IPv6_Type_t xAddressType;
    MACAddress_t xMACAddress;

    configASSERT( pxEndPoint != NULL );
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d104      	bne.n	800b29e <vManageSolicitedNodeAddress+0x1a>
 800b294:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800b298:	482d      	ldr	r0, [pc, #180]	@ (800b350 <vManageSolicitedNodeAddress+0xcc>)
 800b29a:	f7f6 f9e7 	bl	800166c <vAssertCalled>
    configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d104      	bne.n	800b2b2 <vManageSolicitedNodeAddress+0x2e>
 800b2a8:	f240 1133 	movw	r1, #307	@ 0x133
 800b2ac:	4828      	ldr	r0, [pc, #160]	@ (800b350 <vManageSolicitedNodeAddress+0xcc>)
 800b2ae:	f7f6 f9dd 	bl	800166c <vAssertCalled>
         * therefore the calculated MAC address will be incorrect. Nothing bad will happen though, because the address
         * type check below will kick us out before the call to pfRemoveAllowedMAC(). Without the check below, the network
         * driver ends up being called once to register 33:33:FF:00:00:00 and that MAC never gets unregistered. */

        /* Solicited-node multicast addresses only apply to normal unicast non-loopback addresses. */
        xAddressType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	3338      	adds	r3, #56	@ 0x38
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f002 f9c2 	bl	800d640 <xIPv6_GetIPType>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	73fb      	strb	r3, [r7, #15]

        if( ( xAddressType != eIPv6_LinkLocal ) && ( xAddressType != eIPv6_SiteLocal ) && ( xAddressType != eIPv6_Global ) )
 800b2c0:	7bfb      	ldrb	r3, [r7, #15]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d005      	beq.n	800b2d2 <vManageSolicitedNodeAddress+0x4e>
 800b2c6:	7bfb      	ldrb	r3, [r7, #15]
 800b2c8:	2b02      	cmp	r3, #2
 800b2ca:	d002      	beq.n	800b2d2 <vManageSolicitedNodeAddress+0x4e>
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d138      	bne.n	800b344 <vManageSolicitedNodeAddress+0xc0>
             * solicited-node multicast address that we need to manage. Do nothing.*/
            break;
        }

        /* Calculate the multicast MAC that corresponds to this endpoint's IPv6 address. */
        xMACAddress.ucBytes[ 0 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800b2d2:	2333      	movs	r3, #51	@ 0x33
 800b2d4:	723b      	strb	r3, [r7, #8]
        xMACAddress.ucBytes[ 1 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800b2d6:	2333      	movs	r3, #51	@ 0x33
 800b2d8:	727b      	strb	r3, [r7, #9]
        xMACAddress.ucBytes[ 2 ] = 0xFFU;
 800b2da:	23ff      	movs	r3, #255	@ 0xff
 800b2dc:	72bb      	strb	r3, [r7, #10]
        xMACAddress.ucBytes[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2e4:	72fb      	strb	r3, [r7, #11]
        xMACAddress.ucBytes[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b2ec:	733b      	strb	r3, [r7, #12]
        xMACAddress.ucBytes[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800b2f4:	737b      	strb	r3, [r7, #13]

        /* Update the network driver filter */
        if( xNetworkGoingUp == pdTRUE )
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d111      	bne.n	800b320 <vManageSolicitedNodeAddress+0x9c>
        {
            if( pxEndPoint->pxNetworkInterface->pfAddAllowedMAC != NULL )
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d01e      	beq.n	800b346 <vManageSolicitedNodeAddress+0xc2>
            {
                pxEndPoint->pxNetworkInterface->pfAddAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b30e:	695b      	ldr	r3, [r3, #20]
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800b316:	f107 0108 	add.w	r1, r7, #8
 800b31a:	4610      	mov	r0, r2
 800b31c:	4798      	blx	r3
            {
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
            }
        }
    } while( pdFALSE );
}
 800b31e:	e012      	b.n	800b346 <vManageSolicitedNodeAddress+0xc2>
            if( pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC != NULL )
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b326:	699b      	ldr	r3, [r3, #24]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00c      	beq.n	800b346 <vManageSolicitedNodeAddress+0xc2>
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b332:	699b      	ldr	r3, [r3, #24]
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800b33a:	f107 0108 	add.w	r1, r7, #8
 800b33e:	4610      	mov	r0, r2
 800b340:	4798      	blx	r3
}
 800b342:	e000      	b.n	800b346 <vManageSolicitedNodeAddress+0xc2>
            break;
 800b344:	bf00      	nop
}
 800b346:	bf00      	nop
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	080248fc 	.word	0x080248fc

0800b354 <pxFindLocalEndpoint>:
 * @brief Find the first end-point of type IPv6.
 *
 * @return The first IPv6 end-point found.
 */
    static NetworkEndPoint_t * pxFindLocalEndpoint( void )
    {
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800b35a:	2000      	movs	r0, #0
 800b35c:	f001 fd8c 	bl	800ce78 <FreeRTOS_FirstEndPoint>
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	e016      	b.n	800b392 <pxFindLocalEndpoint+0x3e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
        {
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b36a:	f003 0304 	and.w	r3, r3, #4
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	2b00      	cmp	r3, #0
 800b372:	d009      	beq.n	800b388 <pxFindLocalEndpoint+0x34>
            {
                IPv6_Type_t eType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	3338      	adds	r3, #56	@ 0x38
 800b378:	4618      	mov	r0, r3
 800b37a:	f002 f961 	bl	800d640 <xIPv6_GetIPType>
 800b37e:	4603      	mov	r3, r0
 800b380:	70fb      	strb	r3, [r7, #3]

                if( eType == eIPv6_LinkLocal )
 800b382:	78fb      	ldrb	r3, [r7, #3]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d008      	beq.n	800b39a <pxFindLocalEndpoint+0x46>
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800b388:	6879      	ldr	r1, [r7, #4]
 800b38a:	2000      	movs	r0, #0
 800b38c:	f001 fd96 	bl	800cebc <FreeRTOS_NextEndPoint>
 800b390:	6078      	str	r0, [r7, #4]
             pxEndPoint != NULL;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1e5      	bne.n	800b364 <pxFindLocalEndpoint+0x10>
 800b398:	e000      	b.n	800b39c <pxFindLocalEndpoint+0x48>
                {
                    break;
 800b39a:	bf00      	nop
                }
            }
        }

        return pxEndPoint;
 800b39c:	687b      	ldr	r3, [r7, #4]
    }
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <prvMACResolve>:
 * @return An enum, either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvMACResolve( const IPv6_Address_t * pxAddressToLookup,
                                             MACAddress_t * const pxMACAddress,
                                             NetworkEndPoint_t ** ppxEndPoint )
    {
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b086      	sub	sp, #24
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	60f8      	str	r0, [r7, #12]
 800b3ae:	60b9      	str	r1, [r7, #8]
 800b3b0:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;

        /* Mostly used multi-cast address is ff02::. */
        if( xIsIPv6AllowedMulticast( pxAddressToLookup ) != pdFALSE )
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f7ff faa8 	bl	800a908 <xIsIPv6AllowedMulticast>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00e      	beq.n	800b3dc <prvMACResolve+0x36>
        {
            vSetMultiCastIPv6MacAddress( pxAddressToLookup, pxMACAddress );
 800b3be:	68b9      	ldr	r1, [r7, #8]
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f7ff fe8b 	bl	800b0dc <vSetMultiCastIPv6MacAddress>

            if( ppxEndPoint != NULL )
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d004      	beq.n	800b3d6 <prvMACResolve+0x30>
            {
                *ppxEndPoint = pxFindLocalEndpoint();
 800b3cc:	f7ff ffc2 	bl	800b354 <pxFindLocalEndpoint>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	75fb      	strb	r3, [r7, #23]
 800b3da:	e001      	b.n	800b3e0 <prvMACResolve+0x3a>
        }
        else
        {
            /* Not a multicast IP address. */
            eReturn = eARPCacheMiss;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	75fb      	strb	r3, [r7, #23]
        }

        return eReturn;
 800b3e0:	7dfb      	ldrb	r3, [r7, #23]
    }
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3718      	adds	r7, #24
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
	...

0800b3ec <eNDGetCacheEntry>:
 * @return An enum which says whether the address was found: eARPCacheHit or eARPCacheMiss.
 */
    eARPLookupResult_t eNDGetCacheEntry( IPv6_Address_t * pxIPAddress,
                                         MACAddress_t * const pxMACAddress,
                                         struct xNetworkEndPoint ** ppxEndPoint )
    {
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b088      	sub	sp, #32
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        NetworkEndPoint_t * pxEndPoint;

        /* Multi-cast addresses can be resolved immediately. */
        eReturn = prvMACResolve( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	68b9      	ldr	r1, [r7, #8]
 800b3fc:	68f8      	ldr	r0, [r7, #12]
 800b3fe:	f7ff ffd2 	bl	800b3a6 <prvMACResolve>
 800b402:	4603      	mov	r3, r0
 800b404:	77fb      	strb	r3, [r7, #31]

        if( eReturn == eARPCacheMiss )
 800b406:	7ffb      	ldrb	r3, [r7, #31]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d106      	bne.n	800b41a <eNDGetCacheEntry+0x2e>
        {
            /* See if the IP-address has an entry in the cache. */
            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	68b9      	ldr	r1, [r7, #8]
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f000 f9a9 	bl	800b768 <prvNDCacheLookup>
 800b416:	4603      	mov	r3, r0
 800b418:	77fb      	strb	r3, [r7, #31]
        }

        if( eReturn == eARPCacheMiss )
 800b41a:	7ffb      	ldrb	r3, [r7, #31]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d104      	bne.n	800b42a <eNDGetCacheEntry+0x3e>
        {
            FreeRTOS_printf( ( "eNDGetCacheEntry: lookup %pip miss\n", ( void * ) pxIPAddress->ucBytes ) );
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	4619      	mov	r1, r3
 800b424:	4840      	ldr	r0, [pc, #256]	@ (800b528 <eNDGetCacheEntry+0x13c>)
 800b426:	f016 fa47 	bl	80218b8 <lUDPLoggingPrintf>
        }

        if( eReturn == eARPCacheMiss )
 800b42a:	7ffb      	ldrb	r3, [r7, #31]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d176      	bne.n	800b51e <eNDGetCacheEntry+0x132>
        {
            IPv6_Type_t eIPType = xIPv6_GetIPType( pxIPAddress );
 800b430:	68f8      	ldr	r0, [r7, #12]
 800b432:	f002 f905 	bl	800d640 <xIPv6_GetIPType>
 800b436:	4603      	mov	r3, r0
 800b438:	75fb      	strb	r3, [r7, #23]

            pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( pxIPAddress );
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f001 fdae 	bl	800cf9c <FreeRTOS_FindEndPointOnIP_IPv6>
 800b440:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00d      	beq.n	800b464 <eNDGetCacheEntry+0x78>
            {
                if( ppxEndPoint != NULL )
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d002      	beq.n	800b454 <eNDGetCacheEntry+0x68>
                {
                    *( ppxEndPoint ) = pxEndPoint;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	69ba      	ldr	r2, [r7, #24]
 800b452:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_printf( ( "eNDGetCacheEntry: FindEndPointOnIP failed for %pip (endpoint %pip)\n",
 800b454:	68f9      	ldr	r1, [r7, #12]
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	3338      	adds	r3, #56	@ 0x38
 800b45a:	461a      	mov	r2, r3
 800b45c:	4833      	ldr	r0, [pc, #204]	@ (800b52c <eNDGetCacheEntry+0x140>)
 800b45e:	f016 fa2b 	bl	80218b8 <lUDPLoggingPrintf>
 800b462:	e05c      	b.n	800b51e <eNDGetCacheEntry+0x132>
                                   ( void * ) pxIPAddress->ucBytes,
                                   ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
            }
            else
            {
                if( eIPType == eIPv6_LinkLocal )
 800b464:	7dfb      	ldrb	r3, [r7, #23]
 800b466:	2b01      	cmp	r3, #1
 800b468:	d12b      	bne.n	800b4c2 <eNDGetCacheEntry+0xd6>
                {
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800b46a:	2000      	movs	r0, #0
 800b46c:	f001 fd04 	bl	800ce78 <FreeRTOS_FirstEndPoint>
 800b470:	61b8      	str	r0, [r7, #24]
 800b472:	e017      	b.n	800b4a4 <eNDGetCacheEntry+0xb8>
                         pxEndPoint != NULL;
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
                    {
                        IPv6_Type_t eMyType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	3338      	adds	r3, #56	@ 0x38
 800b478:	4618      	mov	r0, r3
 800b47a:	f002 f8e1 	bl	800d640 <xIPv6_GetIPType>
 800b47e:	4603      	mov	r3, r0
 800b480:	75bb      	strb	r3, [r7, #22]

                        if( eMyType == eIPType )
 800b482:	7dba      	ldrb	r2, [r7, #22]
 800b484:	7dfb      	ldrb	r3, [r7, #23]
 800b486:	429a      	cmp	r2, r3
 800b488:	d107      	bne.n	800b49a <eNDGetCacheEntry+0xae>
                        {
                            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	68b9      	ldr	r1, [r7, #8]
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f000 f96a 	bl	800b768 <prvNDCacheLookup>
 800b494:	4603      	mov	r3, r0
 800b496:	77fb      	strb	r3, [r7, #31]
                            break;
 800b498:	e007      	b.n	800b4aa <eNDGetCacheEntry+0xbe>
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800b49a:	69b9      	ldr	r1, [r7, #24]
 800b49c:	2000      	movs	r0, #0
 800b49e:	f001 fd0d 	bl	800cebc <FreeRTOS_NextEndPoint>
 800b4a2:	61b8      	str	r0, [r7, #24]
                         pxEndPoint != NULL;
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1e4      	bne.n	800b474 <eNDGetCacheEntry+0x88>
                        }
                    }

                    FreeRTOS_printf( ( "eNDGetCacheEntry: LinkLocal %pip \"%s\"\n", ( void * ) pxIPAddress->ucBytes,
 800b4aa:	68f9      	ldr	r1, [r7, #12]
 800b4ac:	7ffb      	ldrb	r3, [r7, #31]
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d101      	bne.n	800b4b6 <eNDGetCacheEntry+0xca>
 800b4b2:	4b1f      	ldr	r3, [pc, #124]	@ (800b530 <eNDGetCacheEntry+0x144>)
 800b4b4:	e000      	b.n	800b4b8 <eNDGetCacheEntry+0xcc>
 800b4b6:	4b1f      	ldr	r3, [pc, #124]	@ (800b534 <eNDGetCacheEntry+0x148>)
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	481f      	ldr	r0, [pc, #124]	@ (800b538 <eNDGetCacheEntry+0x14c>)
 800b4bc:	f016 f9fc 	bl	80218b8 <lUDPLoggingPrintf>
 800b4c0:	e02d      	b.n	800b51e <eNDGetCacheEntry+0x132>
                                       ( eReturn == eARPCacheHit ) ? "hit" : "miss" ) );
                }
                else
                {
                    pxEndPoint = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv6 );
 800b4c2:	2060      	movs	r0, #96	@ 0x60
 800b4c4:	f002 f87c 	bl	800d5c0 <FreeRTOS_FindGateWay>
 800b4c8:	61b8      	str	r0, [r7, #24]

                    if( pxEndPoint != NULL )
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d026      	beq.n	800b51e <eNDGetCacheEntry+0x132>
                    {
                        ( void ) memcpy( pxIPAddress->ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	335c      	adds	r3, #92	@ 0x5c
 800b4d6:	2210      	movs	r2, #16
 800b4d8:	4619      	mov	r1, r3
 800b4da:	f016 fc09 	bl	8021cf0 <memcpy>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: Using gw %pip\n", ( void * ) pxIPAddress->ucBytes ) );
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	4816      	ldr	r0, [pc, #88]	@ (800b53c <eNDGetCacheEntry+0x150>)
 800b4e4:	f016 f9e8 	bl	80218b8 <lUDPLoggingPrintf>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: From addr %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800b4e8:	69bb      	ldr	r3, [r7, #24]
 800b4ea:	3338      	adds	r3, #56	@ 0x38
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	4814      	ldr	r0, [pc, #80]	@ (800b540 <eNDGetCacheEntry+0x154>)
 800b4f0:	f016 f9e2 	bl	80218b8 <lUDPLoggingPrintf>

                        /* See if the gateway has an entry in the cache. */
                        eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	68b9      	ldr	r1, [r7, #8]
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f000 f935 	bl	800b768 <prvNDCacheLookup>
 800b4fe:	4603      	mov	r3, r0
 800b500:	77fb      	strb	r3, [r7, #31]

                        if( *ppxEndPoint != NULL )
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d006      	beq.n	800b518 <eNDGetCacheEntry+0x12c>
                        {
                            FreeRTOS_printf( ( "eNDGetCacheEntry: found end-point %pip\n", ( void * ) ( *ppxEndPoint )->ipv6_settings.xIPAddress.ucBytes ) );
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	3338      	adds	r3, #56	@ 0x38
 800b510:	4619      	mov	r1, r3
 800b512:	480c      	ldr	r0, [pc, #48]	@ (800b544 <eNDGetCacheEntry+0x158>)
 800b514:	f016 f9d0 	bl	80218b8 <lUDPLoggingPrintf>
                        }

                        *( ppxEndPoint ) = pxEndPoint;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	69ba      	ldr	r2, [r7, #24]
 800b51c:	601a      	str	r2, [r3, #0]
                    }
                }
            }
        }

        return eReturn;
 800b51e:	7ffb      	ldrb	r3, [r7, #31]
    }
 800b520:	4618      	mov	r0, r3
 800b522:	3720      	adds	r7, #32
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	08024930 	.word	0x08024930
 800b52c:	08024954 	.word	0x08024954
 800b530:	08024998 	.word	0x08024998
 800b534:	0802499c 	.word	0x0802499c
 800b538:	080249a4 	.word	0x080249a4
 800b53c:	080249cc 	.word	0x080249cc
 800b540:	080249f0 	.word	0x080249f0
 800b544:	08024a14 	.word	0x08024a14

0800b548 <vNDRefreshCacheEntry>:
 *
 */
    void vNDRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                               const IPv6_Address_t * pxIPAddress,
                               NetworkEndPoint_t * pxEndPoint )
    {
 800b548:	b5b0      	push	{r4, r5, r7, lr}
 800b54a:	b08e      	sub	sp, #56	@ 0x38
 800b54c:	af04      	add	r7, sp, #16
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        BaseType_t xFreeEntry = -1, xEntryFound = -1;
 800b554:	f04f 33ff 	mov.w	r3, #4294967295
 800b558:	623b      	str	r3, [r7, #32]
 800b55a:	f04f 33ff 	mov.w	r3, #4294967295
 800b55e:	61fb      	str	r3, [r7, #28]
        uint16_t xOldestValue = ipconfigMAX_ARP_AGE + 1;
 800b560:	2397      	movs	r3, #151	@ 0x97
 800b562:	837b      	strh	r3, [r7, #26]
        BaseType_t xOldestEntry = 0;
 800b564:	2300      	movs	r3, #0
 800b566:	617b      	str	r3, [r7, #20]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b568:	2300      	movs	r3, #0
 800b56a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b56c:	e033      	b.n	800b5d6 <vNDRefreshCacheEntry+0x8e>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800b56e:	4a44      	ldr	r2, [pc, #272]	@ (800b680 <vNDRefreshCacheEntry+0x138>)
 800b570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b572:	015b      	lsls	r3, r3, #5
 800b574:	4413      	add	r3, r2
 800b576:	331d      	adds	r3, #29
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d106      	bne.n	800b58c <vNDRefreshCacheEntry+0x44>
            {
                if( xFreeEntry == -1 )
 800b57e:	6a3b      	ldr	r3, [r7, #32]
 800b580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b584:	d124      	bne.n	800b5d0 <vNDRefreshCacheEntry+0x88>
                {
                    xFreeEntry = x;
 800b586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b588:	623b      	str	r3, [r7, #32]
 800b58a:	e021      	b.n	800b5d0 <vNDRefreshCacheEntry+0x88>
                }
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b58e:	015b      	lsls	r3, r3, #5
 800b590:	4a3b      	ldr	r2, [pc, #236]	@ (800b680 <vNDRefreshCacheEntry+0x138>)
 800b592:	4413      	add	r3, r2
 800b594:	68b9      	ldr	r1, [r7, #8]
 800b596:	2210      	movs	r2, #16
 800b598:	4618      	mov	r0, r3
 800b59a:	f017 fb3e 	bl	8022c1a <memcmp>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d102      	bne.n	800b5aa <vNDRefreshCacheEntry+0x62>
            {
                xEntryFound = x;
 800b5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a6:	61fb      	str	r3, [r7, #28]
                break;
 800b5a8:	e018      	b.n	800b5dc <vNDRefreshCacheEntry+0x94>
                 * neighbor advertisement needed for that packet. If we don't store this network advertisement in cache,
                 * the parting of the frame from pxARPWaitingNetworkBuffer will cause the sending of neighbor solicitation
                 * and stores the frame in pxARPWaitingNetworkBuffer. This becomes a vicious circle with thousands of
                 * neighbor solicitation/advertisement packets going back and forth because the ND cache is full.
                 * Overwriting the oldest cache entry is not a fool-proof solution, but it's something. */
                if( xNDCache[ x ].ucAge < xOldestValue )
 800b5aa:	4a35      	ldr	r2, [pc, #212]	@ (800b680 <vNDRefreshCacheEntry+0x138>)
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ae:	015b      	lsls	r3, r3, #5
 800b5b0:	4413      	add	r3, r2
 800b5b2:	331c      	adds	r3, #28
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	8b7b      	ldrh	r3, [r7, #26]
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d908      	bls.n	800b5d0 <vNDRefreshCacheEntry+0x88>
                {
                    xOldestValue = xNDCache[ x ].ucAge;
 800b5be:	4a30      	ldr	r2, [pc, #192]	@ (800b680 <vNDRefreshCacheEntry+0x138>)
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c2:	015b      	lsls	r3, r3, #5
 800b5c4:	4413      	add	r3, r2
 800b5c6:	331c      	adds	r3, #28
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	837b      	strh	r3, [r7, #26]
                    xOldestEntry = x;
 800b5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ce:	617b      	str	r3, [r7, #20]
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d8:	2b17      	cmp	r3, #23
 800b5da:	ddc8      	ble.n	800b56e <vNDRefreshCacheEntry+0x26>
                }
            }
        }

        if( xEntryFound < 0 )
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	da22      	bge.n	800b628 <vNDRefreshCacheEntry+0xe0>
        {
            /* The IP-address was not found, use the first free location. */
            if( xFreeEntry >= 0 )
 800b5e2:	6a3b      	ldr	r3, [r7, #32]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	db02      	blt.n	800b5ee <vNDRefreshCacheEntry+0xa6>
            {
                xEntryFound = xFreeEntry;
 800b5e8:	6a3b      	ldr	r3, [r7, #32]
 800b5ea:	61fb      	str	r3, [r7, #28]
 800b5ec:	e01c      	b.n	800b628 <vNDRefreshCacheEntry+0xe0>
            }
            else
            {
                /* No free location. Overwrite the oldest. */
                xEntryFound = xOldestEntry;
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "vNDRefreshCacheEntry: Cache FULL! Overwriting oldest entry %i with %02X-%02X-%02X-%02X-%02X-%02X\n", ( int ) xEntryFound, pxMACAddress->ucBytes[ 0 ], pxMACAddress->ucBytes[ 1 ], pxMACAddress->ucBytes[ 2 ], pxMACAddress->ucBytes[ 3 ], pxMACAddress->ucBytes[ 4 ], pxMACAddress->ucBytes[ 5 ] ) );
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	461c      	mov	r4, r3
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	785b      	ldrb	r3, [r3, #1]
 800b5fc:	461d      	mov	r5, r3
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	789b      	ldrb	r3, [r3, #2]
 800b602:	461a      	mov	r2, r3
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	78db      	ldrb	r3, [r3, #3]
 800b608:	4619      	mov	r1, r3
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	791b      	ldrb	r3, [r3, #4]
 800b60e:	4618      	mov	r0, r3
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	795b      	ldrb	r3, [r3, #5]
 800b614:	9303      	str	r3, [sp, #12]
 800b616:	9002      	str	r0, [sp, #8]
 800b618:	9101      	str	r1, [sp, #4]
 800b61a:	9200      	str	r2, [sp, #0]
 800b61c:	462b      	mov	r3, r5
 800b61e:	4622      	mov	r2, r4
 800b620:	69f9      	ldr	r1, [r7, #28]
 800b622:	4818      	ldr	r0, [pc, #96]	@ (800b684 <vNDRefreshCacheEntry+0x13c>)
 800b624:	f016 f948 	bl	80218b8 <lUDPLoggingPrintf>
            }
        }

        /* At this point, xEntryFound is always a valid index. */
        /* Copy the IP-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	015b      	lsls	r3, r3, #5
 800b62c:	4a14      	ldr	r2, [pc, #80]	@ (800b680 <vNDRefreshCacheEntry+0x138>)
 800b62e:	4413      	add	r3, r2
 800b630:	68b9      	ldr	r1, [r7, #8]
 800b632:	2210      	movs	r2, #16
 800b634:	4618      	mov	r0, r3
 800b636:	f016 fb5b 	bl	8021cf0 <memcpy>
        /* Copy the MAC-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( MACAddress_t ) );
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	015b      	lsls	r3, r3, #5
 800b63e:	3310      	adds	r3, #16
 800b640:	4a0f      	ldr	r2, [pc, #60]	@ (800b680 <vNDRefreshCacheEntry+0x138>)
 800b642:	4413      	add	r3, r2
 800b644:	68f9      	ldr	r1, [r7, #12]
 800b646:	2206      	movs	r2, #6
 800b648:	4618      	mov	r0, r3
 800b64a:	f016 fb51 	bl	8021cf0 <memcpy>
        xNDCache[ xEntryFound ].pxEndPoint = pxEndPoint;
 800b64e:	4a0c      	ldr	r2, [pc, #48]	@ (800b680 <vNDRefreshCacheEntry+0x138>)
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	015b      	lsls	r3, r3, #5
 800b654:	4413      	add	r3, r2
 800b656:	3318      	adds	r3, #24
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	601a      	str	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800b65c:	4a08      	ldr	r2, [pc, #32]	@ (800b680 <vNDRefreshCacheEntry+0x138>)
 800b65e:	69fb      	ldr	r3, [r7, #28]
 800b660:	015b      	lsls	r3, r3, #5
 800b662:	4413      	add	r3, r2
 800b664:	331c      	adds	r3, #28
 800b666:	2296      	movs	r2, #150	@ 0x96
 800b668:	701a      	strb	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucValid = ( uint8_t ) pdTRUE;
 800b66a:	4a05      	ldr	r2, [pc, #20]	@ (800b680 <vNDRefreshCacheEntry+0x138>)
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	015b      	lsls	r3, r3, #5
 800b670:	4413      	add	r3, r2
 800b672:	331d      	adds	r3, #29
 800b674:	2201      	movs	r2, #1
 800b676:	701a      	strb	r2, [r3, #0]
    }
 800b678:	bf00      	nop
 800b67a:	3728      	adds	r7, #40	@ 0x28
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bdb0      	pop	{r4, r5, r7, pc}
 800b680:	20001060 	.word	0x20001060
 800b684:	08024a3c 	.word	0x08024a3c

0800b688 <vNDAgeCache>:
 * @brief Reduce the age counter in each entry within the ND cache.  An entry is no
 * longer considered valid and is deleted if its age reaches zero.
 * Just before getting to zero, 3 times a neighbour solicitation will be sent.
 */
    void vNDAgeCache( void )
    {
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
        BaseType_t x;

        /* Loop through each entry in the ND cache. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b68e:	2300      	movs	r3, #0
 800b690:	60fb      	str	r3, [r7, #12]
 800b692:	e05f      	b.n	800b754 <vNDAgeCache+0xcc>
        {
            BaseType_t xDoSolicitate = pdFALSE;
 800b694:	2300      	movs	r3, #0
 800b696:	60bb      	str	r3, [r7, #8]

            /* If the entry is valid (its age is greater than zero). */
            if( xNDCache[ x ].ucAge > 0U )
 800b698:	4a32      	ldr	r2, [pc, #200]	@ (800b764 <vNDAgeCache+0xdc>)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	015b      	lsls	r3, r3, #5
 800b69e:	4413      	add	r3, r2
 800b6a0:	331c      	adds	r3, #28
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d052      	beq.n	800b74e <vNDAgeCache+0xc6>
            {
                /* Decrement the age value of the entry in this ND cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xNDCache[ x ].ucAge )--;
 800b6a8:	4a2e      	ldr	r2, [pc, #184]	@ (800b764 <vNDAgeCache+0xdc>)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	015b      	lsls	r3, r3, #5
 800b6ae:	4413      	add	r3, r2
 800b6b0:	331c      	adds	r3, #28
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	b2d9      	uxtb	r1, r3
 800b6b8:	4a2a      	ldr	r2, [pc, #168]	@ (800b764 <vNDAgeCache+0xdc>)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	015b      	lsls	r3, r3, #5
 800b6be:	4413      	add	r3, r2
 800b6c0:	331c      	adds	r3, #28
 800b6c2:	460a      	mov	r2, r1
 800b6c4:	701a      	strb	r2, [r3, #0]

                if( xNDCache[ x ].ucAge == 0U )
 800b6c6:	4a27      	ldr	r2, [pc, #156]	@ (800b764 <vNDAgeCache+0xdc>)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	015b      	lsls	r3, r3, #5
 800b6cc:	4413      	add	r3, r2
 800b6ce:	331c      	adds	r3, #28
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d109      	bne.n	800b6ea <vNDAgeCache+0x62>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceND_TABLE_ENTRY_EXPIRED( xNDCache[ x ].xIPAddress );
                    ( void ) memset( &( xNDCache[ x ] ), 0, sizeof( xNDCache[ x ] ) );
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	015b      	lsls	r3, r3, #5
 800b6da:	4a22      	ldr	r2, [pc, #136]	@ (800b764 <vNDAgeCache+0xdc>)
 800b6dc:	4413      	add	r3, r2
 800b6de:	2220      	movs	r2, #32
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f016 fc11 	bl	8021f0a <memset>
 800b6e8:	e031      	b.n	800b74e <vNDAgeCache+0xc6>
                }
                else
                {
                    /* If the entry is not yet valid, then it is waiting an ND
                     * advertisement, and the ND solicitation should be retransmitted. */
                    if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800b6ea:	4a1e      	ldr	r2, [pc, #120]	@ (800b764 <vNDAgeCache+0xdc>)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	015b      	lsls	r3, r3, #5
 800b6f0:	4413      	add	r3, r2
 800b6f2:	331d      	adds	r3, #29
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d102      	bne.n	800b700 <vNDAgeCache+0x78>
                    {
                        xDoSolicitate = pdTRUE;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	60bb      	str	r3, [r7, #8]
 800b6fe:	e009      	b.n	800b714 <vNDAgeCache+0x8c>
                    }
                    else if( xNDCache[ x ].ucAge <= ( uint8_t ) ndMAX_CACHE_AGE_BEFORE_NEW_ND_SOLICITATION )
 800b700:	4a18      	ldr	r2, [pc, #96]	@ (800b764 <vNDAgeCache+0xdc>)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	015b      	lsls	r3, r3, #5
 800b706:	4413      	add	r3, r2
 800b708:	331c      	adds	r3, #28
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	2b03      	cmp	r3, #3
 800b70e:	d801      	bhi.n	800b714 <vNDAgeCache+0x8c>
                    {
                        /* This entry will get removed soon.  See if the MAC address is
                         * still valid to prevent this happening. */
                        iptraceND_TABLE_ENTRY_WILL_EXPIRE( xNDCache[ x ].xIPAddress );
                        xDoSolicitate = pdTRUE;
 800b710:	2301      	movs	r3, #1
 800b712:	60bb      	str	r3, [r7, #8]
                    else
                    {
                        /* The age has just ticked down, with nothing to do. */
                    }

                    if( xDoSolicitate != pdFALSE )
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d019      	beq.n	800b74e <vNDAgeCache+0xc6>
                    {
                        size_t uxNeededSize;
                        NetworkBufferDescriptor_t * pxNetworkBuffer;

                        uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800b71a:	2356      	movs	r3, #86	@ 0x56
 800b71c:	607b      	str	r3, [r7, #4]
                        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 800b71e:	2100      	movs	r1, #0
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f00b f9b9 	bl	8016a98 <pxGetNetworkBufferWithDescriptor>
 800b726:	6038      	str	r0, [r7, #0]

                        if( pxNetworkBuffer != NULL )
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00f      	beq.n	800b74e <vNDAgeCache+0xc6>
                        {
                            pxNetworkBuffer->pxEndPoint = xNDCache[ x ].pxEndPoint;
 800b72e:	4a0d      	ldr	r2, [pc, #52]	@ (800b764 <vNDAgeCache+0xdc>)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	015b      	lsls	r3, r3, #5
 800b734:	4413      	add	r3, r2
 800b736:	3318      	adds	r3, #24
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	631a      	str	r2, [r3, #48]	@ 0x30
                            /* _HT_ From here I am suspecting a network buffer leak */
                            vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xNDCache[ x ].xIPAddress ) );
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	015b      	lsls	r3, r3, #5
 800b742:	4a08      	ldr	r2, [pc, #32]	@ (800b764 <vNDAgeCache+0xdc>)
 800b744:	4413      	add	r3, r2
 800b746:	4619      	mov	r1, r3
 800b748:	6838      	ldr	r0, [r7, #0]
 800b74a:	f000 f8bb 	bl	800b8c4 <vNDSendNeighbourSolicitation>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	3301      	adds	r3, #1
 800b752:	60fb      	str	r3, [r7, #12]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2b17      	cmp	r3, #23
 800b758:	dd9c      	ble.n	800b694 <vNDAgeCache+0xc>
                        }
                    }
                }
            }
        }
    }
 800b75a:	bf00      	nop
 800b75c:	bf00      	nop
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	20001060 	.word	0x20001060

0800b768 <prvNDCacheLookup>:
 * @return An enum: either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvNDCacheLookup( const IPv6_Address_t * pxAddressToLookup,
                                                MACAddress_t * const pxMACAddress,
                                                NetworkEndPoint_t ** ppxEndPoint )
    {
 800b768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b76a:	b08d      	sub	sp, #52	@ 0x34
 800b76c:	af06      	add	r7, sp, #24
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 800b774:	2300      	movs	r3, #0
 800b776:	74fb      	strb	r3, [r7, #19]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b778:	2300      	movs	r3, #0
 800b77a:	617b      	str	r3, [r7, #20]
 800b77c:	e04a      	b.n	800b814 <prvNDCacheLookup+0xac>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800b77e:	4a30      	ldr	r2, [pc, #192]	@ (800b840 <prvNDCacheLookup+0xd8>)
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	015b      	lsls	r3, r3, #5
 800b784:	4413      	add	r3, r2
 800b786:	331d      	adds	r3, #29
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d03f      	beq.n	800b80e <prvNDCacheLookup+0xa6>
            {
                /* Skip invalid entries. */
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxAddressToLookup->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	015b      	lsls	r3, r3, #5
 800b792:	4a2b      	ldr	r2, [pc, #172]	@ (800b840 <prvNDCacheLookup+0xd8>)
 800b794:	4413      	add	r3, r2
 800b796:	68f9      	ldr	r1, [r7, #12]
 800b798:	2210      	movs	r2, #16
 800b79a:	4618      	mov	r0, r3
 800b79c:	f017 fa3d 	bl	8022c1a <memcmp>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d133      	bne.n	800b80e <prvNDCacheLookup+0xa6>
            {
                ( void ) memcpy( pxMACAddress->ucBytes, xNDCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800b7a6:	68b8      	ldr	r0, [r7, #8]
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	015b      	lsls	r3, r3, #5
 800b7ac:	3310      	adds	r3, #16
 800b7ae:	4a24      	ldr	r2, [pc, #144]	@ (800b840 <prvNDCacheLookup+0xd8>)
 800b7b0:	4413      	add	r3, r2
 800b7b2:	2206      	movs	r2, #6
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	f016 fa9b 	bl	8021cf0 <memcpy>
                eReturn = eARPCacheHit;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	74fb      	strb	r3, [r7, #19]

                if( ppxEndPoint != NULL )
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d007      	beq.n	800b7d4 <prvNDCacheLookup+0x6c>
                {
                    *ppxEndPoint = xNDCache[ x ].pxEndPoint;
 800b7c4:	4a1e      	ldr	r2, [pc, #120]	@ (800b840 <prvNDCacheLookup+0xd8>)
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	015b      	lsls	r3, r3, #5
 800b7ca:	4413      	add	r3, r2
 800b7cc:	3318      	adds	r3, #24
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_debug_printf( ( "prvCacheLookup6[ %d ] %pip with %02x:%02x:%02x:%02x:%02x:%02x\n",
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	461e      	mov	r6, r3
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	785b      	ldrb	r3, [r3, #1]
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	789b      	ldrb	r3, [r3, #2]
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	78db      	ldrb	r3, [r3, #3]
 800b7ec:	461c      	mov	r4, r3
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	791b      	ldrb	r3, [r3, #4]
 800b7f2:	461d      	mov	r5, r3
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	795b      	ldrb	r3, [r3, #5]
 800b7f8:	9304      	str	r3, [sp, #16]
 800b7fa:	9503      	str	r5, [sp, #12]
 800b7fc:	9402      	str	r4, [sp, #8]
 800b7fe:	9001      	str	r0, [sp, #4]
 800b800:	9100      	str	r1, [sp, #0]
 800b802:	4633      	mov	r3, r6
 800b804:	6979      	ldr	r1, [r7, #20]
 800b806:	480f      	ldr	r0, [pc, #60]	@ (800b844 <prvNDCacheLookup+0xdc>)
 800b808:	f016 f856 	bl	80218b8 <lUDPLoggingPrintf>
                                         pxMACAddress->ucBytes[ 1 ],
                                         pxMACAddress->ucBytes[ 2 ],
                                         pxMACAddress->ucBytes[ 3 ],
                                         pxMACAddress->ucBytes[ 4 ],
                                         pxMACAddress->ucBytes[ 5 ] ) );
                break;
 800b80c:	e005      	b.n	800b81a <prvNDCacheLookup+0xb2>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	3301      	adds	r3, #1
 800b812:	617b      	str	r3, [r7, #20]
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	2b17      	cmp	r3, #23
 800b818:	ddb1      	ble.n	800b77e <prvNDCacheLookup+0x16>
            {
                /* Entry is valid but the MAC-address doesn't match. */
            }
        }

        if( eReturn == eARPCacheMiss )
 800b81a:	7cfb      	ldrb	r3, [r7, #19]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10a      	bne.n	800b836 <prvNDCacheLookup+0xce>
        {
            FreeRTOS_printf( ( "prvNDCacheLookup %pip Miss\n", ( void * ) pxAddressToLookup->ucBytes ) );
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	4619      	mov	r1, r3
 800b824:	4808      	ldr	r0, [pc, #32]	@ (800b848 <prvNDCacheLookup+0xe0>)
 800b826:	f016 f847 	bl	80218b8 <lUDPLoggingPrintf>

            if( ppxEndPoint != NULL )
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <prvNDCacheLookup+0xce>
            {
                *ppxEndPoint = NULL;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800b836:	7cfb      	ldrb	r3, [r7, #19]
    }
 800b838:	4618      	mov	r0, r3
 800b83a:	371c      	adds	r7, #28
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b840:	20001060 	.word	0x20001060
 800b844:	08024aa0 	.word	0x08024aa0
 800b848:	08024ae0 	.word	0x08024ae0

0800b84c <prvReturnICMP_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet.
 * @param[in] uxICMPSize The number of bytes to be sent.
 */
    static void prvReturnICMP_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                    size_t uxICMPSize )
    {
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b85a:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b860:	60bb      	str	r3, [r7, #8]

        ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	3316      	adds	r3, #22
 800b86c:	2210      	movs	r2, #16
 800b86e:	4619      	mov	r1, r3
 800b870:	f016 fa3e 	bl	8021cf0 <memcpy>
        ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	f103 0016 	add.w	r0, r3, #22
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	3338      	adds	r3, #56	@ 0x38
 800b87e:	2210      	movs	r2, #16
 800b880:	4619      	mov	r1, r3
 800b882:	f016 fa35 	bl	8021cf0 <memcpy>
        pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( uxICMPSize );
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	b29b      	uxth	r3, r3
 800b88a:	021b      	lsls	r3, r3, #8
 800b88c:	b29a      	uxth	r2, r3
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	0a1b      	lsrs	r3, r3, #8
 800b892:	b29b      	uxth	r3, r3
 800b894:	4313      	orrs	r3, r2
 800b896:	b29a      	uxth	r2, r3
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	825a      	strh	r2, [r3, #18]

        /* Important: tell NIC driver how many bytes must be sent */
        pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        #else
        {
            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPPacket->xICMPHeaderIPv6.usChecksum = 0;
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
        #endif

        /* This function will fill in the Ethernet addresses and send the packet */
        vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7fd fe46 	bl	8009548 <vReturnEthernetFrame>
    }
 800b8bc:	bf00      	nop
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <vNDSendNeighbourSolicitation>:
 * outstanding so re-transmissions can be generated.
 */

    void vNDSendNeighbourSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                       const IPv6_Address_t * pxIPAddress )
    {
 800b8c4:	b5b0      	push	{r4, r5, r7, lr}
 800b8c6:	b090      	sub	sp, #64	@ 0x40
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8d2:	637b      	str	r3, [r7, #52]	@ 0x34
        size_t uxNeededSize;
        IPv6_Address_t xTargetIPAddress;
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xReleased = pdFALSE;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( ( pxEndPoint != NULL ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800b8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f000 80c1 	beq.w	800ba6a <vNDSendNeighbourSolicitation+0x1a6>
 800b8e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ea:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b8ee:	f003 0304 	and.w	r3, r3, #4
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f000 80b8 	beq.w	800ba6a <vNDSendNeighbourSolicitation+0x1a6>
        {
            uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800b8fa:	2356      	movs	r3, #86	@ 0x56
 800b8fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if( pxDescriptor->xDataLength < uxNeededSize )
 800b8fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b904:	429a      	cmp	r2, r3
 800b906:	d909      	bls.n	800b91c <vNDSendNeighbourSolicitation+0x58>
            {
                pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800b908:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b90a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b90c:	f7fe f9ce 	bl	8009cac <pxDuplicateNetworkBufferWithDescriptor>
 800b910:	6338      	str	r0, [r7, #48]	@ 0x30
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800b912:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b914:	f00b f928 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
                pxDescriptor = pxNewDescriptor;
 800b918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            if( pxDescriptor != NULL )
 800b91c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f000 80a3 	beq.w	800ba6a <vNDSendNeighbourSolicitation+0x1a6>
            {
                const uint32_t ulPayloadLength = 32U;
 800b924:	2320      	movs	r3, #32
 800b926:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800b928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b92c:	627b      	str	r3, [r7, #36]	@ 0x24
                pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800b92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b930:	3336      	adds	r3, #54	@ 0x36
 800b932:	623b      	str	r3, [r7, #32]

                pxDescriptor->xDataLength = uxNeededSize;
 800b934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b936:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b938:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Set the multi-cast MAC-address. */
                xMultiCastMacAddress.ucBytes[ 0 ] = 0x33U;
 800b93a:	2333      	movs	r3, #51	@ 0x33
 800b93c:	723b      	strb	r3, [r7, #8]
                xMultiCastMacAddress.ucBytes[ 1 ] = 0x33U;
 800b93e:	2333      	movs	r3, #51	@ 0x33
 800b940:	727b      	strb	r3, [r7, #9]
                xMultiCastMacAddress.ucBytes[ 2 ] = 0xffU;
 800b942:	23ff      	movs	r3, #255	@ 0xff
 800b944:	72bb      	strb	r3, [r7, #10]
                xMultiCastMacAddress.ucBytes[ 3 ] = pxIPAddress->ucBytes[ 13 ];
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	7b5b      	ldrb	r3, [r3, #13]
 800b94a:	72fb      	strb	r3, [r7, #11]
                xMultiCastMacAddress.ucBytes[ 4 ] = pxIPAddress->ucBytes[ 14 ];
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	7b9b      	ldrb	r3, [r3, #14]
 800b950:	733b      	strb	r3, [r7, #12]
                xMultiCastMacAddress.ucBytes[ 5 ] = pxIPAddress->ucBytes[ 15 ];
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	7bdb      	ldrb	r3, [r3, #15]
 800b956:	737b      	strb	r3, [r7, #13]

                /* Set Ethernet header. Source and Destination will be swapped. */
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800b958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95a:	3306      	adds	r3, #6
 800b95c:	461a      	mov	r2, r3
 800b95e:	f107 0308 	add.w	r3, r7, #8
 800b962:	6818      	ldr	r0, [r3, #0]
 800b964:	6010      	str	r0, [r2, #0]
 800b966:	889b      	ldrh	r3, [r3, #4]
 800b968:	8093      	strh	r3, [r2, #4]
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800b96a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b96c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b96e:	33e8      	adds	r3, #232	@ 0xe8
 800b970:	2206      	movs	r2, #6
 800b972:	4619      	mov	r1, r3
 800b974:	f016 f9bc 	bl	8021cf0 <memcpy>
                pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800b978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b97a:	2200      	movs	r2, #0
 800b97c:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800b980:	731a      	strb	r2, [r3, #12]
 800b982:	2200      	movs	r2, #0
 800b984:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800b988:	735a      	strb	r2, [r3, #13]

                /* Set IP-header. */
                pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60U;
 800b98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98c:	2260      	movs	r2, #96	@ 0x60
 800b98e:	739a      	strb	r2, [r3, #14]
                pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800b990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b992:	2200      	movs	r2, #0
 800b994:	73da      	strb	r2, [r3, #15]
                pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800b996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b998:	2200      	movs	r2, #0
 800b99a:	741a      	strb	r2, [r3, #16]
 800b99c:	2200      	movs	r2, #0
 800b99e:	745a      	strb	r2, [r3, #17]
                pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( ulPayloadLength );
 800b9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	021b      	lsls	r3, r3, #8
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9aa:	0a1b      	lsrs	r3, r3, #8
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	b29a      	uxth	r2, r3
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b4:	825a      	strh	r2, [r3, #18]
                pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b8:	223a      	movs	r2, #58	@ 0x3a
 800b9ba:	751a      	strb	r2, [r3, #20]
                pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9be:	22ff      	movs	r2, #255	@ 0xff
 800b9c0:	755a      	strb	r2, [r3, #21]

                /* Source address */
                ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c4:	f103 0016 	add.w	r0, r3, #22
 800b9c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9ca:	3338      	adds	r3, #56	@ 0x38
 800b9cc:	2210      	movs	r2, #16
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	f016 f98e 	bl	8021cf0 <memcpy>

                /*ff02::1:ff5a:afe7 */
                ( void ) memset( xTargetIPAddress.ucBytes, 0, sizeof( xTargetIPAddress.ucBytes ) );
 800b9d4:	f107 0310 	add.w	r3, r7, #16
 800b9d8:	2210      	movs	r2, #16
 800b9da:	2100      	movs	r1, #0
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f016 fa94 	bl	8021f0a <memset>
                xTargetIPAddress.ucBytes[ 0 ] = 0xff;
 800b9e2:	23ff      	movs	r3, #255	@ 0xff
 800b9e4:	743b      	strb	r3, [r7, #16]
                xTargetIPAddress.ucBytes[ 1 ] = 0x02;
 800b9e6:	2302      	movs	r3, #2
 800b9e8:	747b      	strb	r3, [r7, #17]
                xTargetIPAddress.ucBytes[ 11 ] = 0x01;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	76fb      	strb	r3, [r7, #27]
                xTargetIPAddress.ucBytes[ 12 ] = 0xff;
 800b9ee:	23ff      	movs	r3, #255	@ 0xff
 800b9f0:	773b      	strb	r3, [r7, #28]
                xTargetIPAddress.ucBytes[ 13 ] = pxIPAddress->ucBytes[ 13 ];
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	7b5b      	ldrb	r3, [r3, #13]
 800b9f6:	777b      	strb	r3, [r7, #29]
                xTargetIPAddress.ucBytes[ 14 ] = pxIPAddress->ucBytes[ 14 ];
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	7b9b      	ldrb	r3, [r3, #14]
 800b9fc:	77bb      	strb	r3, [r7, #30]
                xTargetIPAddress.ucBytes[ 15 ] = pxIPAddress->ucBytes[ 15 ];
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	7bdb      	ldrb	r3, [r3, #15]
 800ba02:	77fb      	strb	r3, [r7, #31]
                ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, xTargetIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ba04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba06:	3326      	adds	r3, #38	@ 0x26
 800ba08:	461d      	mov	r5, r3
 800ba0a:	f107 0410 	add.w	r4, r7, #16
 800ba0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba10:	6028      	str	r0, [r5, #0]
 800ba12:	6069      	str	r1, [r5, #4]
 800ba14:	60aa      	str	r2, [r5, #8]
 800ba16:	60eb      	str	r3, [r5, #12]

                /* Set ICMP header. */
                ( void ) memset( pxICMPHeader_IPv6, 0, sizeof( *pxICMPHeader_IPv6 ) );
 800ba18:	2220      	movs	r2, #32
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	6a38      	ldr	r0, [r7, #32]
 800ba1e:	f016 fa74 	bl	8021f0a <memset>
                pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_SOLICITATION_IPv6;
 800ba22:	6a3b      	ldr	r3, [r7, #32]
 800ba24:	2287      	movs	r2, #135	@ 0x87
 800ba26:	701a      	strb	r2, [r3, #0]
                ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ba28:	6a3b      	ldr	r3, [r7, #32]
 800ba2a:	3308      	adds	r3, #8
 800ba2c:	6839      	ldr	r1, [r7, #0]
 800ba2e:	2210      	movs	r2, #16
 800ba30:	4618      	mov	r0, r3
 800ba32:	f016 f95d 	bl	8021cf0 <memcpy>
                pxICMPHeader_IPv6->ucOptionType = ndICMP_SOURCE_LINK_LAYER_ADDRESS;
 800ba36:	6a3b      	ldr	r3, [r7, #32]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	761a      	strb	r2, [r3, #24]
                pxICMPHeader_IPv6->ucOptionLength = 1U; /* times 8 bytes. */
 800ba3c:	6a3b      	ldr	r3, [r7, #32]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	765a      	strb	r2, [r3, #25]
                ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800ba42:	6a3b      	ldr	r3, [r7, #32]
 800ba44:	f103 001a 	add.w	r0, r3, #26
 800ba48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba4a:	33e8      	adds	r3, #232	@ 0xe8
 800ba4c:	2206      	movs	r2, #6
 800ba4e:	4619      	mov	r1, r3
 800ba50:	f016 f94e 	bl	8021cf0 <memcpy>
                }
                #else
                {
                    /* Many EMAC peripherals will only calculate the ICMP checksum
                     * correctly if the field is nulled beforehand. */
                    pxICMPHeader_IPv6->usChecksum = 0U;
 800ba54:	6a3b      	ldr	r3, [r7, #32]
 800ba56:	2200      	movs	r2, #0
 800ba58:	709a      	strb	r2, [r3, #2]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	70da      	strb	r2, [r3, #3]
                }
                #endif

                /* This function will fill in the eth addresses and send the packet */
                vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800ba5e:	2101      	movs	r1, #1
 800ba60:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ba62:	f7fd fd71 	bl	8009548 <vReturnEthernetFrame>
                xReleased = pdTRUE;
 800ba66:	2301      	movs	r3, #1
 800ba68:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        }

        if( ( pxDescriptor != NULL ) && ( xReleased == pdFALSE ) )
 800ba6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d005      	beq.n	800ba7c <vNDSendNeighbourSolicitation+0x1b8>
 800ba70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d102      	bne.n	800ba7c <vNDSendNeighbourSolicitation+0x1b8>
        {
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800ba76:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ba78:	f00b f876 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
        }
    }
 800ba7c:	bf00      	nop
 800ba7e:	3740      	adds	r7, #64	@ 0x40
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bdb0      	pop	{r4, r5, r7, pc}

0800ba84 <pcMessageType>:
 * @param[in] xType The type of message.
 *
 * @return A null-terminated string that represents the type the kind of message.
 */
        static const char * pcMessageType( BaseType_t xType )
        {
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
            const char * pcReturn;

            switch( ( uint8_t ) xType )
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	2b04      	cmp	r3, #4
 800ba92:	dc29      	bgt.n	800bae8 <pcMessageType+0x64>
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	dc19      	bgt.n	800bacc <pcMessageType+0x48>
 800ba98:	e049      	b.n	800bb2e <pcMessageType+0xaa>
 800ba9a:	3b80      	subs	r3, #128	@ 0x80
 800ba9c:	2b08      	cmp	r3, #8
 800ba9e:	d846      	bhi.n	800bb2e <pcMessageType+0xaa>
 800baa0:	a201      	add	r2, pc, #4	@ (adr r2, 800baa8 <pcMessageType+0x24>)
 800baa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa6:	bf00      	nop
 800baa8:	0800bb0b 	.word	0x0800bb0b
 800baac:	0800bb11 	.word	0x0800bb11
 800bab0:	0800bb2f 	.word	0x0800bb2f
 800bab4:	0800bb2f 	.word	0x0800bb2f
 800bab8:	0800bb2f 	.word	0x0800bb2f
 800babc:	0800bb17 	.word	0x0800bb17
 800bac0:	0800bb1d 	.word	0x0800bb1d
 800bac4:	0800bb23 	.word	0x0800bb23
 800bac8:	0800bb29 	.word	0x0800bb29
 800bacc:	3b01      	subs	r3, #1
 800bace:	2b03      	cmp	r3, #3
 800bad0:	d82d      	bhi.n	800bb2e <pcMessageType+0xaa>
 800bad2:	a201      	add	r2, pc, #4	@ (adr r2, 800bad8 <pcMessageType+0x54>)
 800bad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad8:	0800baf3 	.word	0x0800baf3
 800badc:	0800baf9 	.word	0x0800baf9
 800bae0:	0800baff 	.word	0x0800baff
 800bae4:	0800bb05 	.word	0x0800bb05
 800bae8:	2b88      	cmp	r3, #136	@ 0x88
 800baea:	dc20      	bgt.n	800bb2e <pcMessageType+0xaa>
 800baec:	2b80      	cmp	r3, #128	@ 0x80
 800baee:	dad4      	bge.n	800ba9a <pcMessageType+0x16>
 800baf0:	e01d      	b.n	800bb2e <pcMessageType+0xaa>
            {
                case ipICMP_DEST_UNREACHABLE_IPv6:
                    pcReturn = "DEST_UNREACHABLE";
 800baf2:	4b14      	ldr	r3, [pc, #80]	@ (800bb44 <pcMessageType+0xc0>)
 800baf4:	60fb      	str	r3, [r7, #12]
                    break;
 800baf6:	e01d      	b.n	800bb34 <pcMessageType+0xb0>

                case ipICMP_PACKET_TOO_BIG_IPv6:
                    pcReturn = "PACKET_TOO_BIG";
 800baf8:	4b13      	ldr	r3, [pc, #76]	@ (800bb48 <pcMessageType+0xc4>)
 800bafa:	60fb      	str	r3, [r7, #12]
                    break;
 800bafc:	e01a      	b.n	800bb34 <pcMessageType+0xb0>

                case ipICMP_TIME_EXCEEDED_IPv6:
                    pcReturn = "TIME_EXCEEDED";
 800bafe:	4b13      	ldr	r3, [pc, #76]	@ (800bb4c <pcMessageType+0xc8>)
 800bb00:	60fb      	str	r3, [r7, #12]
                    break;
 800bb02:	e017      	b.n	800bb34 <pcMessageType+0xb0>

                case ipICMP_PARAMETER_PROBLEM_IPv6:
                    pcReturn = "PARAMETER_PROBLEM";
 800bb04:	4b12      	ldr	r3, [pc, #72]	@ (800bb50 <pcMessageType+0xcc>)
 800bb06:	60fb      	str	r3, [r7, #12]
                    break;
 800bb08:	e014      	b.n	800bb34 <pcMessageType+0xb0>

                case ipICMP_PING_REQUEST_IPv6:
                    pcReturn = "PING_REQUEST";
 800bb0a:	4b12      	ldr	r3, [pc, #72]	@ (800bb54 <pcMessageType+0xd0>)
 800bb0c:	60fb      	str	r3, [r7, #12]
                    break;
 800bb0e:	e011      	b.n	800bb34 <pcMessageType+0xb0>

                case ipICMP_PING_REPLY_IPv6:
                    pcReturn = "PING_REPLY";
 800bb10:	4b11      	ldr	r3, [pc, #68]	@ (800bb58 <pcMessageType+0xd4>)
 800bb12:	60fb      	str	r3, [r7, #12]
                    break;
 800bb14:	e00e      	b.n	800bb34 <pcMessageType+0xb0>

                case ipICMP_ROUTER_SOLICITATION_IPv6:
                    pcReturn = "ROUTER_SOL";
 800bb16:	4b11      	ldr	r3, [pc, #68]	@ (800bb5c <pcMessageType+0xd8>)
 800bb18:	60fb      	str	r3, [r7, #12]
                    break;
 800bb1a:	e00b      	b.n	800bb34 <pcMessageType+0xb0>

                case ipICMP_ROUTER_ADVERTISEMENT_IPv6:
                    pcReturn = "ROUTER_ADV";
 800bb1c:	4b10      	ldr	r3, [pc, #64]	@ (800bb60 <pcMessageType+0xdc>)
 800bb1e:	60fb      	str	r3, [r7, #12]
                    break;
 800bb20:	e008      	b.n	800bb34 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_SOLICITATION_IPv6:
                    pcReturn = "NEIGHBOR_SOL";
 800bb22:	4b10      	ldr	r3, [pc, #64]	@ (800bb64 <pcMessageType+0xe0>)
 800bb24:	60fb      	str	r3, [r7, #12]
                    break;
 800bb26:	e005      	b.n	800bb34 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6:
                    pcReturn = "NEIGHBOR_ADV";
 800bb28:	4b0f      	ldr	r3, [pc, #60]	@ (800bb68 <pcMessageType+0xe4>)
 800bb2a:	60fb      	str	r3, [r7, #12]
                    break;
 800bb2c:	e002      	b.n	800bb34 <pcMessageType+0xb0>

                default:
                    pcReturn = "UNKNOWN ICMP";
 800bb2e:	4b0f      	ldr	r3, [pc, #60]	@ (800bb6c <pcMessageType+0xe8>)
 800bb30:	60fb      	str	r3, [r7, #12]
                    break;
 800bb32:	bf00      	nop
            }

            return pcReturn;
 800bb34:	68fb      	ldr	r3, [r7, #12]
        }
 800bb36:	4618      	mov	r0, r3
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	08024ba8 	.word	0x08024ba8
 800bb48:	08024bbc 	.word	0x08024bbc
 800bb4c:	08024bcc 	.word	0x08024bcc
 800bb50:	08024bdc 	.word	0x08024bdc
 800bb54:	08024bf0 	.word	0x08024bf0
 800bb58:	08024c00 	.word	0x08024c00
 800bb5c:	08024c0c 	.word	0x08024c0c
 800bb60:	08024c18 	.word	0x08024c18
 800bb64:	08024c24 	.word	0x08024c24
 800bb68:	08024c34 	.word	0x08024c34
 800bb6c:	08024c44 	.word	0x08024c44

0800bb70 <prvCheckWaitingBuffer>:
 * @brief When a neighbour advertisement has been received, check if 'pxARPWaitingNetworkBuffer'
 *        was waiting for this new address look-up. If so, feed it to the IP-task as a new
 *        incoming packet.
 */
    static void prvCheckWaitingBuffer( const IPv6_Address_t * pxIPv6Address )
    {
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b088      	sub	sp, #32
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 800bb78:	4b19      	ldr	r3, [pc, #100]	@ (800bbe0 <prvCheckWaitingBuffer+0x70>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb7e:	61fb      	str	r3, [r7, #28]
        const IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	330e      	adds	r3, #14
 800bb84:	61bb      	str	r3, [r7, #24]

        if( memcmp( pxIPv6Address->ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	3308      	adds	r3, #8
 800bb8c:	2210      	movs	r2, #16
 800bb8e:	4619      	mov	r1, r3
 800bb90:	f017 f843 	bl	8022c1a <memcmp>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d11d      	bne.n	800bbd6 <prvCheckWaitingBuffer+0x66>
        {
            IPStackEvent_t xEventMessage;
            const TickType_t xDontBlock = ( TickType_t ) 0;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	617b      	str	r3, [r7, #20]

            FreeRTOS_printf( ( "Waiting done\n" ) );
 800bb9e:	4811      	ldr	r0, [pc, #68]	@ (800bbe4 <prvCheckWaitingBuffer+0x74>)
 800bba0:	f015 fe8a 	bl	80218b8 <lUDPLoggingPrintf>

            xEventMessage.eEventType = eNetworkRxEvent;
 800bba4:	2301      	movs	r3, #1
 800bba6:	733b      	strb	r3, [r7, #12]
            xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 800bba8:	4b0d      	ldr	r3, [pc, #52]	@ (800bbe0 <prvCheckWaitingBuffer+0x70>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	613b      	str	r3, [r7, #16]

            if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800bbae:	f107 030c 	add.w	r3, r7, #12
 800bbb2:	6979      	ldr	r1, [r7, #20]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7fd fa13 	bl	8008fe0 <xSendEventStructToIPTask>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d004      	beq.n	800bbca <prvCheckWaitingBuffer+0x5a>
            {
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( BUFFER_FROM_WHERE_CALL( 140 ) pxARPWaitingNetworkBuffer );
 800bbc0:	4b07      	ldr	r3, [pc, #28]	@ (800bbe0 <prvCheckWaitingBuffer+0x70>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f00a ffcf 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
            }

            /* Clear the buffer. */
            pxARPWaitingNetworkBuffer = NULL;
 800bbca:	4b05      	ldr	r3, [pc, #20]	@ (800bbe0 <prvCheckWaitingBuffer+0x70>)
 800bbcc:	2200      	movs	r2, #0
 800bbce:	601a      	str	r2, [r3, #0]

            /* Found an ARP resolution, disable ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800bbd0:	2000      	movs	r0, #0
 800bbd2:	f7fd fffb 	bl	8009bcc <vIPSetARPResolutionTimerEnableState>

            iptrace_DELAYED_ARP_REQUEST_REPLIED();
        }
    }
 800bbd6:	bf00      	nop
 800bbd8:	3720      	adds	r7, #32
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	20000fd4 	.word	0x20000fd4
 800bbe4:	08024c54 	.word	0x08024c54

0800bbe8 <prvProcessICMPMessage_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet which contains an IPv6 message.
 *
 * @return A const value 'eReleaseBuffer' which means that the network must still be released.
 */
    eFrameProcessingResult_t prvProcessICMPMessage_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800bbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbec:	b09e      	sub	sp, #120	@ 0x78
 800bbee:	af02      	add	r7, sp, #8
 800bbf0:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800bbf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bbfa:	3336      	adds	r3, #54	@ 0x36
 800bbfc:	65bb      	str	r3, [r7, #88]	@ 0x58
        /* Note: pxNetworkBuffer->pxEndPoint is already verified to be non-NULL in prvProcessEthernetPacket() */
        NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc02:	657b      	str	r3, [r7, #84]	@ 0x54
        size_t uxNeededSize;

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            if( pxICMPHeader_IPv6->ucTypeOfMessage != ipICMP_PING_REQUEST_IPv6 )
 800bc04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	2b80      	cmp	r3, #128	@ 0x80
 800bc0a:	d01e      	beq.n	800bc4a <prvProcessICMPMessage_IPv6+0x62>
            {
                char pcAddress[ 40 ];
                FreeRTOS_printf( ( "ICMPv6_recv %d (%s) from %pip to %pip end-point = %s\n",
 800bc0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	4698      	mov	r8, r3
 800bc12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7ff ff34 	bl	800ba84 <pcMessageType>
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc20:	f103 0516 	add.w	r5, r3, #22
 800bc24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc26:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800bc2a:	f107 030c 	add.w	r3, r7, #12
 800bc2e:	2228      	movs	r2, #40	@ 0x28
 800bc30:	4619      	mov	r1, r3
 800bc32:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800bc34:	f001 fd5c 	bl	800d6f0 <pcEndpointName>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	9301      	str	r3, [sp, #4]
 800bc3c:	9400      	str	r4, [sp, #0]
 800bc3e:	462b      	mov	r3, r5
 800bc40:	4632      	mov	r2, r6
 800bc42:	4641      	mov	r1, r8
 800bc44:	48a7      	ldr	r0, [pc, #668]	@ (800bee4 <prvProcessICMPMessage_IPv6+0x2fc>)
 800bc46:	f015 fe37 	bl	80218b8 <lUDPLoggingPrintf>
                                   pcEndpointName( pxEndPoint, pcAddress, sizeof( pcAddress ) ) ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800bc4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc4c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bc50:	f003 0304 	and.w	r3, r3, #4
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f000 813e 	beq.w	800bed8 <prvProcessICMPMessage_IPv6+0x2f0>
        {
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800bc5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	2b04      	cmp	r3, #4
 800bc62:	dc1d      	bgt.n	800bca0 <prvProcessICMPMessage_IPv6+0xb8>
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	f300 8130 	bgt.w	800beca <prvProcessICMPMessage_IPv6+0x2e2>
                            break;
                    #endif /* ( ipconfigUSE_RA != 0 ) */

                default:
                    /* All possible values are included here above. */
                    break;
 800bc6a:	e130      	b.n	800bece <prvProcessICMPMessage_IPv6+0x2e6>
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800bc6c:	3b80      	subs	r3, #128	@ 0x80
 800bc6e:	2b08      	cmp	r3, #8
 800bc70:	f200 812d 	bhi.w	800bece <prvProcessICMPMessage_IPv6+0x2e6>
 800bc74:	a201      	add	r2, pc, #4	@ (adr r2, 800bc7c <prvProcessICMPMessage_IPv6+0x94>)
 800bc76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7a:	bf00      	nop
 800bc7c:	0800bcad 	.word	0x0800bcad
 800bc80:	0800bcf5 	.word	0x0800bcf5
 800bc84:	0800becf 	.word	0x0800becf
 800bc88:	0800becf 	.word	0x0800becf
 800bc8c:	0800becf 	.word	0x0800becf
 800bc90:	0800becf 	.word	0x0800becf
 800bc94:	0800bec3 	.word	0x0800bec3
 800bc98:	0800bd6b 	.word	0x0800bd6b
 800bc9c:	0800be7b 	.word	0x0800be7b
 800bca0:	2b88      	cmp	r3, #136	@ 0x88
 800bca2:	f300 8114 	bgt.w	800bece <prvProcessICMPMessage_IPv6+0x2e6>
 800bca6:	2b80      	cmp	r3, #128	@ 0x80
 800bca8:	dae0      	bge.n	800bc6c <prvProcessICMPMessage_IPv6+0x84>
                    break;
 800bcaa:	e110      	b.n	800bece <prvProcessICMPMessage_IPv6+0x2e6>
                       usICMPSize = FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength );
 800bcac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcae:	8a5b      	ldrh	r3, [r3, #18]
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	021b      	lsls	r3, r3, #8
 800bcb4:	b21a      	sxth	r2, r3
 800bcb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcb8:	8a5b      	ldrh	r3, [r3, #18]
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	0a1b      	lsrs	r3, r3, #8
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	b21b      	sxth	r3, r3
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	b21b      	sxth	r3, r3
 800bcc6:	877b      	strh	r3, [r7, #58]	@ 0x3a
                       uxICMPSize = ( size_t ) usICMPSize;
 800bcc8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bcca:	637b      	str	r3, [r7, #52]	@ 0x34
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800bccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcce:	3336      	adds	r3, #54	@ 0x36
 800bcd0:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d903      	bls.n	800bce4 <prvProcessICMPMessage_IPv6+0xfc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800bcdc:	4882      	ldr	r0, [pc, #520]	@ (800bee8 <prvProcessICMPMessage_IPv6+0x300>)
 800bcde:	f015 fdeb 	bl	80218b8 <lUDPLoggingPrintf>
                           break;
 800bce2:	e0f9      	b.n	800bed8 <prvProcessICMPMessage_IPv6+0x2f0>
                       pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_PING_REPLY_IPv6;
 800bce4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bce6:	2281      	movs	r2, #129	@ 0x81
 800bce8:	701a      	strb	r2, [r3, #0]
                       prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800bcea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f7ff fdad 	bl	800b84c <prvReturnICMP_IPv6>
                   break;
 800bcf2:	e0f1      	b.n	800bed8 <prvProcessICMPMessage_IPv6+0x2f0>
                               ePingReplyStatus_t eStatus = eSuccess;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                               const ICMPEcho_IPv6_t * pxICMPEchoHeader = ( ( const ICMPEcho_IPv6_t * ) pxICMPHeader_IPv6 );
 800bcfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bcfc:	643b      	str	r3, [r7, #64]	@ 0x40
                               uxDataLength = ipNUMERIC_CAST( size_t, FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength ) );
 800bcfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd00:	8a5b      	ldrh	r3, [r3, #18]
 800bd02:	b29b      	uxth	r3, r3
 800bd04:	021b      	lsls	r3, r3, #8
 800bd06:	b21a      	sxth	r2, r3
 800bd08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd0a:	8a5b      	ldrh	r3, [r3, #18]
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	0a1b      	lsrs	r3, r3, #8
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	b21b      	sxth	r3, r3
 800bd14:	4313      	orrs	r3, r2
 800bd16:	b21b      	sxth	r3, r3
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               uxDataLength = uxDataLength - sizeof( *pxICMPEchoHeader );
 800bd1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd1e:	3b08      	subs	r3, #8
 800bd20:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               pucByte = ( const uint8_t * ) pxICMPEchoHeader;
 800bd22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd24:	667b      	str	r3, [r7, #100]	@ 0x64
                               pucByte = &( pucByte[ sizeof( *pxICMPEchoHeader ) ] );
 800bd26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd28:	3308      	adds	r3, #8
 800bd2a:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd30:	e00d      	b.n	800bd4e <prvProcessICMPMessage_IPv6+0x166>
                                   if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800bd32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	2b78      	cmp	r3, #120	@ 0x78
 800bd38:	d003      	beq.n	800bd42 <prvProcessICMPMessage_IPv6+0x15a>
                                       eStatus = eInvalidData;
 800bd3a:	2302      	movs	r3, #2
 800bd3c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                                       break;
 800bd40:	e009      	b.n	800bd56 <prvProcessICMPMessage_IPv6+0x16e>
                                   pucByte++;
 800bd42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd44:	3301      	adds	r3, #1
 800bd46:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800bd48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd4e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bd50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d3ed      	bcc.n	800bd32 <prvProcessICMPMessage_IPv6+0x14a>
                               vApplicationPingReplyHook( eStatus, pxICMPEchoHeader->usIdentifier );
 800bd56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd58:	889b      	ldrh	r3, [r3, #4]
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bd60:	4611      	mov	r1, r2
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7f5 fd38 	bl	80017d8 <vApplicationPingReplyHook>
                           break;
 800bd68:	e0b6      	b.n	800bed8 <prvProcessICMPMessage_IPv6+0x2f0>
                       const NetworkEndPoint_t * pxTargetedEndPoint = pxEndPoint;
 800bd6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd6c:	663b      	str	r3, [r7, #96]	@ 0x60
                       const NetworkEndPoint_t * pxEndPointInSameSubnet = FreeRTOS_InterfaceEPInSameSubnet_IPv6( pxNetworkBuffer->pxInterface, &( pxICMPHeader_IPv6->xIPv6Address ) );
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd74:	3308      	adds	r3, #8
 800bd76:	4619      	mov	r1, r3
 800bd78:	4610      	mov	r0, r2
 800bd7a:	f001 f9cd 	bl	800d118 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800bd7e:	6538      	str	r0, [r7, #80]	@ 0x50
                       if( pxEndPointInSameSubnet != NULL )
 800bd80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d002      	beq.n	800bd8c <prvProcessICMPMessage_IPv6+0x1a4>
                           pxTargetedEndPoint = pxEndPointInSameSubnet;
 800bd86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd88:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd8a:	e005      	b.n	800bd98 <prvProcessICMPMessage_IPv6+0x1b0>
                           FreeRTOS_debug_printf( ( "prvProcessICMPMessage_IPv6: No match for %pip\n",
 800bd8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd8e:	3308      	adds	r3, #8
 800bd90:	4619      	mov	r1, r3
 800bd92:	4856      	ldr	r0, [pc, #344]	@ (800beec <prvProcessICMPMessage_IPv6+0x304>)
 800bd94:	f015 fd90 	bl	80218b8 <lUDPLoggingPrintf>
                       uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800bd98:	2320      	movs	r3, #32
 800bd9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800bd9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd9e:	3336      	adds	r3, #54	@ 0x36
 800bda0:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d903      	bls.n	800bdb4 <prvProcessICMPMessage_IPv6+0x1cc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800bdac:	484e      	ldr	r0, [pc, #312]	@ (800bee8 <prvProcessICMPMessage_IPv6+0x300>)
 800bdae:	f015 fd83 	bl	80218b8 <lUDPLoggingPrintf>
                           break;
 800bdb2:	e091      	b.n	800bed8 <prvProcessICMPMessage_IPv6+0x2f0>
                       xCompare = memcmp( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bdb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdb6:	f103 0008 	add.w	r0, r3, #8
 800bdba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdbc:	3338      	adds	r3, #56	@ 0x38
 800bdbe:	2210      	movs	r2, #16
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	f016 ff2a 	bl	8022c1a <memcmp>
 800bdc6:	6478      	str	r0, [r7, #68]	@ 0x44
                       FreeRTOS_printf( ( "ND NS for %pip endpoint %pip %s\n",
 800bdc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdca:	f103 0108 	add.w	r1, r3, #8
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdd2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800bdd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d101      	bne.n	800bde0 <prvProcessICMPMessage_IPv6+0x1f8>
 800bddc:	4b44      	ldr	r3, [pc, #272]	@ (800bef0 <prvProcessICMPMessage_IPv6+0x308>)
 800bdde:	e000      	b.n	800bde2 <prvProcessICMPMessage_IPv6+0x1fa>
 800bde0:	4b44      	ldr	r3, [pc, #272]	@ (800bef4 <prvProcessICMPMessage_IPv6+0x30c>)
 800bde2:	4845      	ldr	r0, [pc, #276]	@ (800bef8 <prvProcessICMPMessage_IPv6+0x310>)
 800bde4:	f015 fd68 	bl	80218b8 <lUDPLoggingPrintf>
                       if( xCompare == 0 )
 800bde8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d171      	bne.n	800bed2 <prvProcessICMPMessage_IPv6+0x2ea>
                           pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800bdee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdf0:	2288      	movs	r2, #136	@ 0x88
 800bdf2:	701a      	strb	r2, [r3, #0]
                           pxICMPHeader_IPv6->ucTypeOfService = 0U;
 800bdf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	705a      	strb	r2, [r3, #1]
                           pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800bdfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	711a      	strb	r2, [r3, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	715a      	strb	r2, [r3, #5]
 800be04:	2200      	movs	r2, #0
 800be06:	719a      	strb	r2, [r3, #6]
 800be08:	2200      	movs	r2, #0
 800be0a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800be0e:	71da      	strb	r2, [r3, #7]
                           pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800be10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	061a      	lsls	r2, r3, #24
 800be16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	021b      	lsls	r3, r3, #8
 800be1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800be20:	431a      	orrs	r2, r3
 800be22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	0a1b      	lsrs	r3, r3, #8
 800be28:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800be2c:	431a      	orrs	r2, r3
 800be2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	0e1b      	lsrs	r3, r3, #24
 800be34:	431a      	orrs	r2, r3
 800be36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be38:	605a      	str	r2, [r3, #4]
                           pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800be3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be3c:	2202      	movs	r2, #2
 800be3e:	761a      	strb	r2, [r3, #24]
                           pxICMPHeader_IPv6->ucOptionLength = 1U;
 800be40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be42:	2201      	movs	r2, #1
 800be44:	765a      	strb	r2, [r3, #25]
                           ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxTargetedEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800be46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be48:	f103 001a 	add.w	r0, r3, #26
 800be4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be4e:	33e8      	adds	r3, #232	@ 0xe8
 800be50:	2206      	movs	r2, #6
 800be52:	4619      	mov	r1, r3
 800be54:	f015 ff4c 	bl	8021cf0 <memcpy>
                           pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800be58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be5a:	22ff      	movs	r2, #255	@ 0xff
 800be5c:	755a      	strb	r2, [r3, #21]
                           ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800be5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be60:	f103 0008 	add.w	r0, r3, #8
 800be64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be66:	3338      	adds	r3, #56	@ 0x38
 800be68:	2210      	movs	r2, #16
 800be6a:	4619      	mov	r1, r3
 800be6c:	f015 ff40 	bl	8021cf0 <memcpy>
                           prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800be70:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f7ff fcea 	bl	800b84c <prvReturnICMP_IPv6>
                   break;
 800be78:	e02b      	b.n	800bed2 <prvProcessICMPMessage_IPv6+0x2ea>
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800be7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be7c:	f103 001a 	add.w	r0, r3, #26
                                          &( pxICMPHeader_IPv6->xIPv6Address ),
 800be80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be82:	3308      	adds	r3, #8
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800be84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800be86:	4619      	mov	r1, r3
 800be88:	f7ff fb5e 	bl	800b548 <vNDRefreshCacheEntry>
                    FreeRTOS_printf( ( "NEIGHBOR_ADV from %pip\n",
 800be8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be8e:	3308      	adds	r3, #8
 800be90:	4619      	mov	r1, r3
 800be92:	481a      	ldr	r0, [pc, #104]	@ (800befc <prvProcessICMPMessage_IPv6+0x314>)
 800be94:	f015 fd10 	bl	80218b8 <lUDPLoggingPrintf>
                        vReceiveNA( pxNetworkBuffer );
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 fa89 	bl	800c3b0 <vReceiveNA>
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800be9e:	4b18      	ldr	r3, [pc, #96]	@ (800bf00 <prvProcessICMPMessage_IPv6+0x318>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d017      	beq.n	800bed6 <prvProcessICMPMessage_IPv6+0x2ee>
                        ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER ) )
 800bea6:	4b16      	ldr	r3, [pc, #88]	@ (800bf00 <prvProcessICMPMessage_IPv6+0x318>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4618      	mov	r0, r3
 800beac:	f7fd fc4c 	bl	8009748 <uxIPHeaderSizePacket>
 800beb0:	4603      	mov	r3, r0
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800beb2:	2b28      	cmp	r3, #40	@ 0x28
 800beb4:	d10f      	bne.n	800bed6 <prvProcessICMPMessage_IPv6+0x2ee>
                        prvCheckWaitingBuffer( &( pxICMPHeader_IPv6->xIPv6Address ) );
 800beb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800beb8:	3308      	adds	r3, #8
 800beba:	4618      	mov	r0, r3
 800bebc:	f7ff fe58 	bl	800bb70 <prvCheckWaitingBuffer>
                    break;
 800bec0:	e009      	b.n	800bed6 <prvProcessICMPMessage_IPv6+0x2ee>
                            vReceiveRA( pxNetworkBuffer );
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fb9a 	bl	800c5fc <vReceiveRA>
                            break;
 800bec8:	e006      	b.n	800bed8 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800beca:	bf00      	nop
 800becc:	e004      	b.n	800bed8 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800bece:	bf00      	nop
 800bed0:	e002      	b.n	800bed8 <prvProcessICMPMessage_IPv6+0x2f0>
                   break;
 800bed2:	bf00      	nop
 800bed4:	e000      	b.n	800bed8 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800bed6:	bf00      	nop
            } /* switch( pxICMPHeader_IPv6->ucTypeOfMessage ) */
        }     /* if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) */

        return eReleaseBuffer;
 800bed8:	2300      	movs	r3, #0
    }
 800beda:	4618      	mov	r0, r3
 800bedc:	3770      	adds	r7, #112	@ 0x70
 800bede:	46bd      	mov	sp, r7
 800bee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bee4:	08024c64 	.word	0x08024c64
 800bee8:	08024c9c 	.word	0x08024c9c
 800beec:	08024ca8 	.word	0x08024ca8
 800bef0:	08024cd8 	.word	0x08024cd8
 800bef4:	08024ce0 	.word	0x08024ce0
 800bef8:	08024ce8 	.word	0x08024ce8
 800befc:	08024d0c 	.word	0x08024d0c
 800bf00:	20000fd4 	.word	0x20000fd4

0800bf04 <FreeRTOS_OutputAdvertiseIPv6>:
    /* MISRA Ref 8.9.1 [File scoped variables] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
    /* coverity[misra_c_2012_rule_8_9_violation] */
    /* coverity[single_use] */
    void FreeRTOS_OutputAdvertiseIPv6( NetworkEndPoint_t * pxEndPoint )
    {
 800bf04:	b5b0      	push	{r4, r5, r7, lr}
 800bf06:	b088      	sub	sp, #32
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxInterface;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        size_t uxICMPSize;
        size_t uxPacketSize;

        uxPacketSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800bf0c:	2356      	movs	r3, #86	@ 0x56
 800bf0e:	61fb      	str	r3, [r7, #28]

        /* This is called from the context of the IP event task, so a block time
         * must not be used. */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPacketSize, ndDONT_BLOCK );
 800bf10:	2100      	movs	r1, #0
 800bf12:	69f8      	ldr	r0, [r7, #28]
 800bf14:	f00a fdc0 	bl	8016a98 <pxGetNetworkBufferWithDescriptor>
 800bf18:	61b8      	str	r0, [r7, #24]

        if( pxNetworkBuffer != NULL )
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f000 80b1 	beq.w	800c084 <FreeRTOS_OutputAdvertiseIPv6+0x180>
        {
            ( void ) memset( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	3314      	adds	r3, #20
 800bf26:	2210      	movs	r2, #16
 800bf28:	2100      	movs	r1, #0
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f015 ffed 	bl	8021f0a <memset>
            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	631a      	str	r2, [r3, #48]	@ 0x30

            pxInterface = pxEndPoint->pxNetworkInterface;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bf3c:	617b      	str	r3, [r7, #20]

            configASSERT( pxInterface != NULL );
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d104      	bne.n	800bf4e <FreeRTOS_OutputAdvertiseIPv6+0x4a>
 800bf44:	f240 419e 	movw	r1, #1182	@ 0x49e
 800bf48:	4850      	ldr	r0, [pc, #320]	@ (800c08c <FreeRTOS_OutputAdvertiseIPv6+0x188>)
 800bf4a:	f7f5 fb8f 	bl	800166c <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf52:	613b      	str	r3, [r7, #16]
            pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	3336      	adds	r3, #54	@ 0x36
 800bf58:	60fb      	str	r3, [r7, #12]

            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_MAC, ipMAC_ADDRESS_LENGTH_BYTES );
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	4a4c      	ldr	r2, [pc, #304]	@ (800c090 <FreeRTOS_OutputAdvertiseIPv6+0x18c>)
 800bf5e:	6810      	ldr	r0, [r2, #0]
 800bf60:	6018      	str	r0, [r3, #0]
 800bf62:	8892      	ldrh	r2, [r2, #4]
 800bf64:	809a      	strh	r2, [r3, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	1d98      	adds	r0, r3, #6
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	33e8      	adds	r3, #232	@ 0xe8
 800bf6e:	2206      	movs	r2, #6
 800bf70:	4619      	mov	r1, r3
 800bf72:	f015 febd 	bl	8021cf0 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE; /* 12 + 2 = 14 */
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800bf7e:	731a      	strb	r2, [r3, #12]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800bf86:	735a      	strb	r2, [r3, #13]

            pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60;
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	2260      	movs	r2, #96	@ 0x60
 800bf8c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0;
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	2200      	movs	r2, #0
 800bf92:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0;
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	2200      	movs	r2, #0
 800bf98:	741a      	strb	r2, [r3, #16]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	745a      	strb	r2, [r3, #17]

            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPHeader_IPv6_t ) );
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	749a      	strb	r2, [r3, #18]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f042 0220 	orr.w	r2, r2, #32
 800bfaa:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	223a      	movs	r2, #58	@ 0x3a
 800bfb0:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	22ff      	movs	r2, #255	@ 0xff
 800bfb6:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	f103 0016 	add.w	r0, r3, #22
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3338      	adds	r3, #56	@ 0x38
 800bfc2:	2210      	movs	r2, #16
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	f015 fe93 	bl	8021cf0 <memcpy>
            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_IP, ipSIZE_OF_IPv6_ADDRESS );
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	3326      	adds	r3, #38	@ 0x26
 800bfce:	4a31      	ldr	r2, [pc, #196]	@ (800c094 <FreeRTOS_OutputAdvertiseIPv6+0x190>)
 800bfd0:	461c      	mov	r4, r3
 800bfd2:	4615      	mov	r5, r2
 800bfd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bfd6:	6020      	str	r0, [r4, #0]
 800bfd8:	6061      	str	r1, [r4, #4]
 800bfda:	60a2      	str	r2, [r4, #8]
 800bfdc:	60e3      	str	r3, [r4, #12]

            uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800bfde:	2320      	movs	r3, #32
 800bfe0:	60bb      	str	r3, [r7, #8]
            pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2288      	movs	r2, #136	@ 0x88
 800bfe6:	701a      	strb	r2, [r3, #0]
            pxICMPHeader_IPv6->ucTypeOfService = 0;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2200      	movs	r2, #0
 800bfec:	705a      	strb	r2, [r3, #1]
            pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	711a      	strb	r2, [r3, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	715a      	strb	r2, [r3, #5]
 800bff8:	2200      	movs	r2, #0
 800bffa:	719a      	strb	r2, [r3, #6]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c002:	71da      	strb	r2, [r3, #7]
            pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	061a      	lsls	r2, r3, #24
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	021b      	lsls	r3, r3, #8
 800c010:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c014:	431a      	orrs	r2, r3
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	0a1b      	lsrs	r3, r3, #8
 800c01c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c020:	431a      	orrs	r2, r3
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	0e1b      	lsrs	r3, r3, #24
 800c028:	431a      	orrs	r2, r3
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	605a      	str	r2, [r3, #4]

            /* Type of option. */
            pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2202      	movs	r2, #2
 800c032:	761a      	strb	r2, [r3, #24]
            /* Length of option in units of 8 bytes. */
            pxICMPHeader_IPv6->ucOptionLength = 1;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2201      	movs	r2, #1
 800c038:	765a      	strb	r2, [r3, #25]
            ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f103 001a 	add.w	r0, r3, #26
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	33e8      	adds	r3, #232	@ 0xe8
 800c044:	2206      	movs	r2, #6
 800c046:	4619      	mov	r1, r3
 800c048:	f015 fe52 	bl	8021cf0 <memcpy>
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	22ff      	movs	r2, #255	@ 0xff
 800c050:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f103 0008 	add.w	r0, r3, #8
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	3338      	adds	r3, #56	@ 0x38
 800c05c:	2210      	movs	r2, #16
 800c05e:	4619      	mov	r1, r3
 800c060:	f015 fe46 	bl	8021cf0 <memcpy>

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	629a      	str	r2, [r3, #40]	@ 0x28
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                pxICMPHeader_IPv6->usChecksum = 0;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2200      	movs	r2, #0
 800c072:	709a      	strb	r2, [r3, #2]
 800c074:	2200      	movs	r2, #0
 800c076:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* Set the parameter 'bReleaseAfterSend'. */
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	2201      	movs	r2, #1
 800c07e:	69b9      	ldr	r1, [r7, #24]
 800c080:	6978      	ldr	r0, [r7, #20]
 800c082:	4798      	blx	r3
        }
    }
 800c084:	bf00      	nop
 800c086:	3720      	adds	r7, #32
 800c088:	46bd      	mov	sp, r7
 800c08a:	bdb0      	pop	{r4, r5, r7, pc}
 800c08c:	08024d24 	.word	0x08024d24
 800c090:	08026f98 	.word	0x08026f98
 800c094:	08026f88 	.word	0x08026f88

0800c098 <FreeRTOS_CreateIPv6Address>:
 */
    BaseType_t FreeRTOS_CreateIPv6Address( IPv6_Address_t * pxIPAddress,
                                           const IPv6_Address_t * pxPrefix,
                                           size_t uxPrefixLength,
                                           BaseType_t xDoRandom )
    {
 800c098:	b580      	push	{r7, lr}
 800c09a:	b090      	sub	sp, #64	@ 0x40
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	607a      	str	r2, [r7, #4]
 800c0a4:	603b      	str	r3, [r7, #0]
        uint32_t pulRandom[ 4 ];
        uint8_t * pucSource;
        BaseType_t xIndex, xResult = pdPASS;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	637b      	str	r3, [r7, #52]	@ 0x34

        if( xDoRandom != pdFALSE )
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d017      	beq.n	800c0e0 <FreeRTOS_CreateIPv6Address+0x48>
            /* Create an IP-address, based on a net prefix and a
             * random host address.
             * ARRAY_SIZE_X() returns the size of an array as a
             * signed value ( BaseType_t ).
             */
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c0b4:	e010      	b.n	800c0d8 <FreeRTOS_CreateIPv6Address+0x40>
            {
                if( xApplicationGetRandomNumber( &( pulRandom[ xIndex ] ) ) == pdFAIL )
 800c0b6:	f107 0214 	add.w	r2, r7, #20
 800c0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4413      	add	r3, r2
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7f5 fb9d 	bl	8001800 <xApplicationGetRandomNumber>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d102      	bne.n	800c0d2 <FreeRTOS_CreateIPv6Address+0x3a>
                {
                    xResult = pdFAIL;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800c0d0:	e00d      	b.n	800c0ee <FreeRTOS_CreateIPv6Address+0x56>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800c0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0da:	2b03      	cmp	r3, #3
 800c0dc:	ddeb      	ble.n	800c0b6 <FreeRTOS_CreateIPv6Address+0x1e>
 800c0de:	e006      	b.n	800c0ee <FreeRTOS_CreateIPv6Address+0x56>
                }
            }
        }
        else
        {
            ( void ) memset( pulRandom, 0, sizeof( pulRandom ) );
 800c0e0:	f107 0314 	add.w	r3, r7, #20
 800c0e4:	2210      	movs	r2, #16
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f015 ff0e 	bl	8021f0a <memset>
        }

        if( xResult == pdPASS )
 800c0ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d167      	bne.n	800c1c4 <FreeRTOS_CreateIPv6Address+0x12c>
        {
            size_t uxIndex;
            /* A loopback IP-address has a prefix of 128. */
            configASSERT( ( uxPrefixLength > 0U ) && ( uxPrefixLength <= ( 8U * ipSIZE_OF_IPv6_ADDRESS ) ) );
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d004      	beq.n	800c104 <FreeRTOS_CreateIPv6Address+0x6c>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2b80      	cmp	r3, #128	@ 0x80
 800c0fe:	d801      	bhi.n	800c104 <FreeRTOS_CreateIPv6Address+0x6c>
 800c100:	2301      	movs	r3, #1
 800c102:	e000      	b.n	800c106 <FreeRTOS_CreateIPv6Address+0x6e>
 800c104:	2300      	movs	r3, #0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d104      	bne.n	800c114 <FreeRTOS_CreateIPv6Address+0x7c>
 800c10a:	f240 5105 	movw	r1, #1285	@ 0x505
 800c10e:	4830      	ldr	r0, [pc, #192]	@ (800c1d0 <FreeRTOS_CreateIPv6Address+0x138>)
 800c110:	f7f5 faac 	bl	800166c <vAssertCalled>

            if( uxPrefixLength >= 8U )
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2b07      	cmp	r3, #7
 800c118:	d907      	bls.n	800c12a <FreeRTOS_CreateIPv6Address+0x92>
            {
                ( void ) memcpy( pxIPAddress->ucBytes, pxPrefix->ucBytes, ( uxPrefixLength + 7U ) / 8U );
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	68b9      	ldr	r1, [r7, #8]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	3307      	adds	r3, #7
 800c122:	08db      	lsrs	r3, r3, #3
 800c124:	461a      	mov	r2, r3
 800c126:	f015 fde3 	bl	8021cf0 <memcpy>
            }

            pucSource = ( uint8_t * ) pulRandom;
 800c12a:	f107 0314 	add.w	r3, r7, #20
 800c12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxIndex = uxPrefixLength / 8U;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	08db      	lsrs	r3, r3, #3
 800c134:	633b      	str	r3, [r7, #48]	@ 0x30

            if( ( uxPrefixLength % 8U ) != 0U )
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f003 0307 	and.w	r3, r3, #7
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d034      	beq.n	800c1aa <FreeRTOS_CreateIPv6Address+0x112>
            {
                /* uxHostLen is between 1 and 7 bits long. */
                size_t uxHostLen = 8U - ( uxPrefixLength % 8U );
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f003 0307 	and.w	r3, r3, #7
 800c146:	f1c3 0308 	rsb	r3, r3, #8
 800c14a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800c14c:	2201      	movs	r2, #1
 800c14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c150:	fa02 f303 	lsl.w	r3, r2, r3
 800c154:	3b01      	subs	r3, #1
 800c156:	62bb      	str	r3, [r7, #40]	@ 0x28
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800c158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	43db      	mvns	r3, r3
 800c15e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                pxIPAddress->ucBytes[ uxIndex ] &= ucNetMask;
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c166:	4413      	add	r3, r2
 800c168:	781a      	ldrb	r2, [r3, #0]
 800c16a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c16e:	4013      	ands	r3, r2
 800c170:	b2d9      	uxtb	r1, r3
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c176:	4413      	add	r3, r2
 800c178:	460a      	mov	r2, r1
 800c17a:	701a      	strb	r2, [r3, #0]
                pxIPAddress->ucBytes[ uxIndex ] |= ( pucSource[ 0 ] & ( ( uint8_t ) uxHostMask ) );
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c180:	4413      	add	r3, r2
 800c182:	781a      	ldrb	r2, [r3, #0]
 800c184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c186:	7819      	ldrb	r1, [r3, #0]
 800c188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	400b      	ands	r3, r1
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	4313      	orrs	r3, r2
 800c192:	b2d9      	uxtb	r1, r3
 800c194:	68fa      	ldr	r2, [r7, #12]
 800c196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c198:	4413      	add	r3, r2
 800c19a:	460a      	mov	r2, r1
 800c19c:	701a      	strb	r2, [r3, #0]
                pucSource = &( pucSource[ 1 ] );
 800c19e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                uxIndex++;
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            if( uxIndex < ipSIZE_OF_IPv6_ADDRESS )
 800c1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ac:	2b0f      	cmp	r3, #15
 800c1ae:	d809      	bhi.n	800c1c4 <FreeRTOS_CreateIPv6Address+0x12c>
            {
                ( void ) memcpy( &( pxIPAddress->ucBytes[ uxIndex ] ), pucSource, ipSIZE_OF_IPv6_ADDRESS - uxIndex );
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b4:	18d0      	adds	r0, r2, r3
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b8:	f1c3 0310 	rsb	r3, r3, #16
 800c1bc:	461a      	mov	r2, r3
 800c1be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c1c0:	f015 fd96 	bl	8021cf0 <memcpy>
            }
        }

        return xResult;
 800c1c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3740      	adds	r7, #64	@ 0x40
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	08024d24 	.word	0x08024d24

0800c1d4 <xGetLinkLocalAddress>:
 *
 * @return pdPASS in case a link-local address was found, otherwise pdFAIL.
 */
    static BaseType_t xGetLinkLocalAddress( const NetworkInterface_t * pxInterface,
                                            IPv6_Address_t * pxAddress )
    {
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	60fb      	str	r3, [r7, #12]
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fe48 	bl	800ce78 <FreeRTOS_FirstEndPoint>
 800c1e8:	60b8      	str	r0, [r7, #8]
 800c1ea:	e01a      	b.n	800c222 <xGetLinkLocalAddress+0x4e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
        {
            /* Check if it has the link-local prefix FE80::/10 */
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c1f2:	2bfe      	cmp	r3, #254	@ 0xfe
 800c1f4:	d110      	bne.n	800c218 <xGetLinkLocalAddress+0x44>
                ( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 1 ] & 0xc0U ) == 0x80U ) )
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c1fc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800c200:	2b80      	cmp	r3, #128	@ 0x80
 800c202:	d109      	bne.n	800c218 <xGetLinkLocalAddress+0x44>
            {
                ( void ) memcpy( pxAddress->ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c204:	6838      	ldr	r0, [r7, #0]
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	3338      	adds	r3, #56	@ 0x38
 800c20a:	2210      	movs	r2, #16
 800c20c:	4619      	mov	r1, r3
 800c20e:	f015 fd6f 	bl	8021cf0 <memcpy>
                xResult = pdPASS;
 800c212:	2301      	movs	r3, #1
 800c214:	60fb      	str	r3, [r7, #12]
                break;
 800c216:	e007      	b.n	800c228 <xGetLinkLocalAddress+0x54>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800c218:	68b9      	ldr	r1, [r7, #8]
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 fe4e 	bl	800cebc <FreeRTOS_NextEndPoint>
 800c220:	60b8      	str	r0, [r7, #8]
             pxEndPoint != NULL;
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d1e1      	bne.n	800c1ec <xGetLinkLocalAddress+0x18>
            }
        }

        return xResult;
 800c228:	68fb      	ldr	r3, [r7, #12]
    }
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
	...

0800c234 <vNDSendRouterSolicitation>:
 * @param[in] pxIPAddress The target address, normally ff02::2
 *
 */
    void vNDSendRouterSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                    IPv6_Address_t * pxIPAddress )
    {
 800c234:	b5b0      	push	{r4, r5, r7, lr}
 800c236:	b090      	sub	sp, #64	@ 0x40
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPRouterSolicitation_IPv6_t * xRASolicitationRequest;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c242:	63bb      	str	r3, [r7, #56]	@ 0x38
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800c244:	233e      	movs	r3, #62	@ 0x3e
 800c246:	637b      	str	r3, [r7, #52]	@ 0x34
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        IPv6_Address_t xSourceAddress;
        BaseType_t xHasLocal;
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800c24c:	2300      	movs	r3, #0
 800c24e:	633b      	str	r3, [r7, #48]	@ 0x30

        configASSERT( pxEndPoint != NULL );
 800c250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c252:	2b00      	cmp	r3, #0
 800c254:	d103      	bne.n	800c25e <vNDSendRouterSolicitation+0x2a>
 800c256:	218f      	movs	r1, #143	@ 0x8f
 800c258:	4852      	ldr	r0, [pc, #328]	@ (800c3a4 <vNDSendRouterSolicitation+0x170>)
 800c25a:	f7f5 fa07 	bl	800166c <vAssertCalled>
        configASSERT( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED );
 800c25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c260:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c264:	f003 0304 	and.w	r3, r3, #4
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d103      	bne.n	800c276 <vNDSendRouterSolicitation+0x42>
 800c26e:	2190      	movs	r1, #144	@ 0x90
 800c270:	484c      	ldr	r0, [pc, #304]	@ (800c3a4 <vNDSendRouterSolicitation+0x170>)
 800c272:	f7f5 f9fb 	bl	800166c <vAssertCalled>

        xHasLocal = xGetLinkLocalAddress( pxEndPoint->pxNetworkInterface, &( xSourceAddress ) );
 800c276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c278:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c27c:	f107 020c 	add.w	r2, r7, #12
 800c280:	4611      	mov	r1, r2
 800c282:	4618      	mov	r0, r3
 800c284:	f7ff ffa6 	bl	800c1d4 <xGetLinkLocalAddress>
 800c288:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if( xHasLocal == pdFAIL )
 800c28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d10a      	bne.n	800c2a6 <vNDSendRouterSolicitation+0x72>
        {
            FreeRTOS_printf( ( "RA: can not find a Link-local address\n" ) );
 800c290:	4845      	ldr	r0, [pc, #276]	@ (800c3a8 <vNDSendRouterSolicitation+0x174>)
 800c292:	f015 fb11 	bl	80218b8 <lUDPLoggingPrintf>
            ( void ) memset( xSourceAddress.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800c296:	f107 030c 	add.w	r3, r7, #12
 800c29a:	2210      	movs	r2, #16
 800c29c:	2100      	movs	r1, #0
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f015 fe33 	bl	8021f0a <memset>
 800c2a4:	e005      	b.n	800c2b2 <vNDSendRouterSolicitation+0x7e>
        }
        else
        {
            FreeRTOS_printf( ( "RA: source %pip\n", ( void * ) xSourceAddress.ucBytes ) );
 800c2a6:	f107 030c 	add.w	r3, r7, #12
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	483f      	ldr	r0, [pc, #252]	@ (800c3ac <vNDSendRouterSolicitation+0x178>)
 800c2ae:	f015 fb03 	bl	80218b8 <lUDPLoggingPrintf>
        }

        if( pxDescriptor->xDataLength < uxNeededSize )
 800c2b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d909      	bls.n	800c2d0 <vNDSendRouterSolicitation+0x9c>
        {
            pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800c2bc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c2be:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c2c0:	f7fd fcf4 	bl	8009cac <pxDuplicateNetworkBufferWithDescriptor>
 800c2c4:	6338      	str	r0, [r7, #48]	@ 0x30
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c2c6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c2c8:	f00a fc4e 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
            pxDescriptor = pxNewDescriptor;
 800c2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        if( pxDescriptor != NULL )
 800c2d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d062      	beq.n	800c39c <vNDSendRouterSolicitation+0x168>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800c2d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2da:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xRASolicitationRequest = ( ( ICMPRouterSolicitation_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2de:	3336      	adds	r3, #54	@ 0x36
 800c2e0:	627b      	str	r3, [r7, #36]	@ 0x24

            pxDescriptor->xDataLength = uxNeededSize;
 800c2e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2e6:	629a      	str	r2, [r3, #40]	@ 0x28

            ( void ) eNDGetCacheEntry( pxIPAddress, &( xMultiCastMacAddress ), NULL );
 800c2e8:	f107 031c 	add.w	r3, r7, #28
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	6838      	ldr	r0, [r7, #0]
 800c2f2:	f7ff f87b 	bl	800b3ec <eNDGetCacheEntry>

            /* Set Ethernet header. Will be swapped. */
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f8:	3306      	adds	r3, #6
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	f107 031c 	add.w	r3, r7, #28
 800c300:	6818      	ldr	r0, [r3, #0]
 800c302:	6010      	str	r0, [r2, #0]
 800c304:	889b      	ldrh	r3, [r3, #4]
 800c306:	8093      	strh	r3, [r2, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c308:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c30c:	33e8      	adds	r3, #232	@ 0xe8
 800c30e:	2206      	movs	r2, #6
 800c310:	4619      	mov	r1, r3
 800c312:	f015 fced 	bl	8021cf0 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800c316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c318:	2200      	movs	r2, #0
 800c31a:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800c31e:	731a      	strb	r2, [r3, #12]
 800c320:	2200      	movs	r2, #0
 800c322:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800c326:	735a      	strb	r2, [r3, #13]

            /* Set IP-header. */
            pxICMPPacket->xIPHeader.ucVersionTrafficClass = raDEFAULT_VERSION_TRAFFIC_CLASS;
 800c328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c32a:	2260      	movs	r2, #96	@ 0x60
 800c32c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800c32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c330:	2200      	movs	r2, #0
 800c332:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800c334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c336:	2200      	movs	r2, #0
 800c338:	741a      	strb	r2, [r3, #16]
 800c33a:	2200      	movs	r2, #0
 800c33c:	745a      	strb	r2, [r3, #17]
            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPRouterSolicitation_IPv6_t ) );
 800c33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c340:	2200      	movs	r2, #0
 800c342:	749a      	strb	r2, [r3, #18]
 800c344:	2200      	movs	r2, #0
 800c346:	f042 0208 	orr.w	r2, r2, #8
 800c34a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800c34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c34e:	223a      	movs	r2, #58	@ 0x3a
 800c350:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = raDEFAULT_HOP_LIMIT;
 800c352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c354:	22ff      	movs	r2, #255	@ 0xff
 800c356:	755a      	strb	r2, [r3, #21]

            /* Normally, the source address is set as 'ipv6_settings.xIPAddress'.
             * But is some routers will not accept a public IP-address, the original
             * default address will be used. It must be a link-local address. */
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c35a:	3316      	adds	r3, #22
 800c35c:	461d      	mov	r5, r3
 800c35e:	f107 040c 	add.w	r4, r7, #12
 800c362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c364:	6028      	str	r0, [r5, #0]
 800c366:	6069      	str	r1, [r5, #4]
 800c368:	60aa      	str	r2, [r5, #8]
 800c36a:	60eb      	str	r3, [r5, #12]

            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c36e:	3326      	adds	r3, #38	@ 0x26
 800c370:	6839      	ldr	r1, [r7, #0]
 800c372:	2210      	movs	r2, #16
 800c374:	4618      	mov	r0, r3
 800c376:	f015 fcbb 	bl	8021cf0 <memcpy>

            /* Set ICMP header. */
            ( void ) memset( xRASolicitationRequest, 0, sizeof( *xRASolicitationRequest ) );
 800c37a:	2208      	movs	r2, #8
 800c37c:	2100      	movs	r1, #0
 800c37e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c380:	f015 fdc3 	bl	8021f0a <memset>
            xRASolicitationRequest->ucTypeOfMessage = ipICMP_ROUTER_SOLICITATION_IPv6;
 800c384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c386:	2285      	movs	r2, #133	@ 0x85
 800c388:	701a      	strb	r2, [r3, #0]
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                xRASolicitationRequest->usChecksum = 0U;
 800c38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38c:	2200      	movs	r2, #0
 800c38e:	709a      	strb	r2, [r3, #2]
 800c390:	2200      	movs	r2, #0
 800c392:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800c394:	2101      	movs	r1, #1
 800c396:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c398:	f7fd f8d6 	bl	8009548 <vReturnEthernetFrame>
        }
    }
 800c39c:	bf00      	nop
 800c39e:	3740      	adds	r7, #64	@ 0x40
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bdb0      	pop	{r4, r5, r7, pc}
 800c3a4:	08024d50 	.word	0x08024d50
 800c3a8:	08024d7c 	.word	0x08024d7c
 800c3ac:	08024da4 	.word	0x08024da4

0800c3b0 <vReceiveNA>:
 * @brief Receive a NA ( Neighbour Advertisement ) message to see if a chosen IP-address is already in use.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveNA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
        const NetworkInterface_t * pxInterface = pxNetworkBuffer->pxInterface;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3bc:	613b      	str	r3, [r7, #16]
        NetworkEndPoint_t * pxPoint;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3c2:	60fb      	str	r3, [r7, #12]
        const ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( const ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	3336      	adds	r3, #54	@ 0x36
 800c3c8:	60bb      	str	r3, [r7, #8]

        for( pxPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800c3ca:	6938      	ldr	r0, [r7, #16]
 800c3cc:	f000 fd54 	bl	800ce78 <FreeRTOS_FirstEndPoint>
 800c3d0:	6178      	str	r0, [r7, #20]
 800c3d2:	e028      	b.n	800c426 <vReceiveNA+0x76>
             pxPoint != NULL;
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
        {
            if( ( pxPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxPoint->xRAData.eRAState == eRAStateIPWait ) )
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c3da:	f003 0302 	and.w	r3, r3, #2
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d01b      	beq.n	800c41c <vReceiveNA+0x6c>
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c3ea:	2b03      	cmp	r3, #3
 800c3ec:	d116      	bne.n	800c41c <vReceiveNA+0x6c>
            {
                if( memcmp( pxPoint->ipv6_settings.xIPAddress.ucBytes, pxICMPHeader_IPv6->xIPv6Address.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	3308      	adds	r3, #8
 800c3f8:	2210      	movs	r2, #16
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	f016 fc0d 	bl	8022c1a <memcmp>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d10a      	bne.n	800c41c <vReceiveNA+0x6c>
                {
                    pxPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800c406:	697a      	ldr	r2, [r7, #20]
 800c408:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c40c:	f043 0302 	orr.w	r3, r3, #2
 800c410:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                    vDHCP_RATimerReload( pxPoint, 100U );
 800c414:	2164      	movs	r1, #100	@ 0x64
 800c416:	6978      	ldr	r0, [r7, #20]
 800c418:	f7fd fb3e 	bl	8009a98 <vDHCP_RATimerReload>
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
 800c41c:	6979      	ldr	r1, [r7, #20]
 800c41e:	6938      	ldr	r0, [r7, #16]
 800c420:	f000 fd4c 	bl	800cebc <FreeRTOS_NextEndPoint>
 800c424:	6178      	str	r0, [r7, #20]
             pxPoint != NULL;
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1d3      	bne.n	800c3d4 <vReceiveNA+0x24>
                }
            }
        }
    }
 800c42c:	bf00      	nop
 800c42e:	bf00      	nop
 800c430:	3718      	adds	r7, #24
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
	...

0800c438 <vReceiveRA_ReadReply>:
 *
 * @returns Returns the ICMP prefix option pointer, pointing to its location in the
 *          input RA reply message buffer.
 */
    static ICMPPrefixOption_IPv6_t * vReceiveRA_ReadReply( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c43a:	b091      	sub	sp, #68	@ 0x44
 800c43c:	af04      	add	r7, sp, #16
 800c43e:	6078      	str	r0, [r7, #4]
        size_t uxIndex = 0U;
 800c440:	2300      	movs	r3, #0
 800c442:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800c444:	2310      	movs	r3, #16
 800c446:	627b      	str	r3, [r7, #36]	@ 0x24
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800c448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c44a:	3336      	adds	r3, #54	@ 0x36
 800c44c:	623b      	str	r3, [r7, #32]
        /* uxLast points to the first byte after the buffer. */
        const size_t uxLast = pxNetworkBuffer->xDataLength - uxNeededSize;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c452:	6a3b      	ldr	r3, [r7, #32]
 800c454:	1ad3      	subs	r3, r2, r3
 800c456:	61fb      	str	r3, [r7, #28]
        uint8_t * pucBytes = &( pxNetworkBuffer->pucEthernetBuffer[ uxNeededSize ] );
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c45c:	6a3b      	ldr	r3, [r7, #32]
 800c45e:	4413      	add	r3, r2
 800c460:	61bb      	str	r3, [r7, #24]
        ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800c462:	2300      	movs	r3, #0
 800c464:	62bb      	str	r3, [r7, #40]	@ 0x28

        while( ( uxIndex + 1U ) < uxLast )
 800c466:	e0b2      	b.n	800c5ce <vReceiveRA_ReadReply+0x196>
        {
            uint8_t ucType = pucBytes[ uxIndex ];
 800c468:	69ba      	ldr	r2, [r7, #24]
 800c46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c46c:	4413      	add	r3, r2
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	75fb      	strb	r3, [r7, #23]
            size_t uxPrefixLength = ( size_t ) pucBytes[ uxIndex + 1U ];
 800c472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c474:	3301      	adds	r3, #1
 800c476:	69ba      	ldr	r2, [r7, #24]
 800c478:	4413      	add	r3, r2
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	613b      	str	r3, [r7, #16]
            size_t uxLength = uxPrefixLength * 8U;
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	00db      	lsls	r3, r3, #3
 800c482:	60fb      	str	r3, [r7, #12]

            if( uxPrefixLength == 0U )
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d103      	bne.n	800c492 <vReceiveRA_ReadReply+0x5a>
            {
                /* According to RFC 4861, length of the option value 0 is invalid. Hence returning from here */
                FreeRTOS_printf( ( "RA: Invalid length of the option value as zero. " ) );
 800c48a:	4856      	ldr	r0, [pc, #344]	@ (800c5e4 <vReceiveRA_ReadReply+0x1ac>)
 800c48c:	f015 fa14 	bl	80218b8 <lUDPLoggingPrintf>
                break;
 800c490:	e0a3      	b.n	800c5da <vReceiveRA_ReadReply+0x1a2>
            }

            if( uxLast < ( uxIndex + uxLength ) )
 800c492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	4413      	add	r3, r2
 800c498:	69fa      	ldr	r2, [r7, #28]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d208      	bcs.n	800c4b0 <vReceiveRA_ReadReply+0x78>
            {
                FreeRTOS_printf( ( "RA: Not enough bytes ( %u > %u )\n", ( unsigned ) ( uxIndex + uxLength ), ( unsigned ) uxLast ) );
 800c49e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	4413      	add	r3, r2
 800c4a4:	69fa      	ldr	r2, [r7, #28]
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	484f      	ldr	r0, [pc, #316]	@ (800c5e8 <vReceiveRA_ReadReply+0x1b0>)
 800c4aa:	f015 fa05 	bl	80218b8 <lUDPLoggingPrintf>
                break;
 800c4ae:	e094      	b.n	800c5da <vReceiveRA_ReadReply+0x1a2>
            }

            switch( ucType )
 800c4b0:	7dfb      	ldrb	r3, [r7, #23]
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	2b04      	cmp	r3, #4
 800c4b6:	d87f      	bhi.n	800c5b8 <vReceiveRA_ReadReply+0x180>
 800c4b8:	a201      	add	r2, pc, #4	@ (adr r2, 800c4c0 <vReceiveRA_ReadReply+0x88>)
 800c4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4be:	bf00      	nop
 800c4c0:	0800c4d5 	.word	0x0800c4d5
 800c4c4:	0800c5c5 	.word	0x0800c5c5
 800c4c8:	0800c52f 	.word	0x0800c52f
 800c4cc:	0800c5c5 	.word	0x0800c5c5
 800c4d0:	0800c59f 	.word	0x0800c59f
            {
                case ndICMP_SOURCE_LINK_LAYER_ADDRESS: /* 1 */
                    FreeRTOS_printf( ( "RA: Source = %02x-%02x-%02x-%02x-%02x-%02x\n",
 800c4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d6:	3302      	adds	r3, #2
 800c4d8:	69ba      	ldr	r2, [r7, #24]
 800c4da:	4413      	add	r3, r2
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	461c      	mov	r4, r3
 800c4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4e2:	3303      	adds	r3, #3
 800c4e4:	69ba      	ldr	r2, [r7, #24]
 800c4e6:	4413      	add	r3, r2
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	461d      	mov	r5, r3
 800c4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ee:	3304      	adds	r3, #4
 800c4f0:	69ba      	ldr	r2, [r7, #24]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	461e      	mov	r6, r3
 800c4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4fa:	3305      	adds	r3, #5
 800c4fc:	69ba      	ldr	r2, [r7, #24]
 800c4fe:	4413      	add	r3, r2
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	4619      	mov	r1, r3
 800c504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c506:	3306      	adds	r3, #6
 800c508:	69ba      	ldr	r2, [r7, #24]
 800c50a:	4413      	add	r3, r2
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	4618      	mov	r0, r3
 800c510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c512:	3307      	adds	r3, #7
 800c514:	69ba      	ldr	r2, [r7, #24]
 800c516:	4413      	add	r3, r2
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	9302      	str	r3, [sp, #8]
 800c51c:	9001      	str	r0, [sp, #4]
 800c51e:	9100      	str	r1, [sp, #0]
 800c520:	4633      	mov	r3, r6
 800c522:	462a      	mov	r2, r5
 800c524:	4621      	mov	r1, r4
 800c526:	4831      	ldr	r0, [pc, #196]	@ (800c5ec <vReceiveRA_ReadReply+0x1b4>)
 800c528:	f015 f9c6 	bl	80218b8 <lUDPLoggingPrintf>
                                       pucBytes[ uxIndex + 3U ],
                                       pucBytes[ uxIndex + 4U ],
                                       pucBytes[ uxIndex + 5U ],
                                       pucBytes[ uxIndex + 6U ],
                                       pucBytes[ uxIndex + 7U ] ) );
                    break;
 800c52c:	e04b      	b.n	800c5c6 <vReceiveRA_ReadReply+0x18e>

                case ndICMP_PREFIX_INFORMATION: /* 3 */
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxPrefixOption = ( ( ICMPPrefixOption_IPv6_t * ) &( pucBytes[ uxIndex ] ) );
 800c52e:	69ba      	ldr	r2, [r7, #24]
 800c530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c532:	4413      	add	r3, r2
 800c534:	62bb      	str	r3, [r7, #40]	@ 0x28

                    FreeRTOS_printf( ( "RA: Prefix len %d Life %u, %u (%pip)\n",
 800c536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c538:	789b      	ldrb	r3, [r3, #2]
 800c53a:	4618      	mov	r0, r3
 800c53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	061a      	lsls	r2, r3, #24
 800c542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	021b      	lsls	r3, r3, #8
 800c548:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c54c:	431a      	orrs	r2, r3
 800c54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	0a1b      	lsrs	r3, r3, #8
 800c554:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c558:	431a      	orrs	r2, r3
 800c55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	0e1b      	lsrs	r3, r3, #24
 800c560:	ea42 0103 	orr.w	r1, r2, r3
 800c564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	061a      	lsls	r2, r3, #24
 800c56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c56c:	689b      	ldr	r3, [r3, #8]
 800c56e:	021b      	lsls	r3, r3, #8
 800c570:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c574:	431a      	orrs	r2, r3
 800c576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	0a1b      	lsrs	r3, r3, #8
 800c57c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c580:	431a      	orrs	r2, r3
 800c582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	0e1b      	lsrs	r3, r3, #24
 800c588:	431a      	orrs	r2, r3
 800c58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c58c:	3310      	adds	r3, #16
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	4613      	mov	r3, r2
 800c592:	460a      	mov	r2, r1
 800c594:	4601      	mov	r1, r0
 800c596:	4816      	ldr	r0, [pc, #88]	@ (800c5f0 <vReceiveRA_ReadReply+0x1b8>)
 800c598:	f015 f98e 	bl	80218b8 <lUDPLoggingPrintf>
                                       pxPrefixOption->ucPrefixLength,
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulValidLifeTime ),
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime ),
                                       ( void * ) pxPrefixOption->ucPrefix ) );
                    break;
 800c59c:	e013      	b.n	800c5c6 <vReceiveRA_ReadReply+0x18e>
                   {
                       uint32_t ulMTU;
                       ( void ) ulMTU;

                       /* ulChar2u32 returns host-endian numbers. */
                       ulMTU = ulChar2u32( &( pucBytes[ uxIndex + 4U ] ) );
 800c59e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	69ba      	ldr	r2, [r7, #24]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fd fe60 	bl	800a26c <ulChar2u32>
 800c5ac:	60b8      	str	r0, [r7, #8]
                       FreeRTOS_printf( ( "RA: MTU = %u\n", ( unsigned int ) ulMTU ) );
 800c5ae:	68b9      	ldr	r1, [r7, #8]
 800c5b0:	4810      	ldr	r0, [pc, #64]	@ (800c5f4 <vReceiveRA_ReadReply+0x1bc>)
 800c5b2:	f015 f981 	bl	80218b8 <lUDPLoggingPrintf>
                   }
                   break;
 800c5b6:	e006      	b.n	800c5c6 <vReceiveRA_ReadReply+0x18e>

                default:
                    FreeRTOS_printf( ( "RA: Type 0x%02x not implemented\n", ucType ) );
 800c5b8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	480e      	ldr	r0, [pc, #56]	@ (800c5f8 <vReceiveRA_ReadReply+0x1c0>)
 800c5be:	f015 f97b 	bl	80218b8 <lUDPLoggingPrintf>
                    break;
 800c5c2:	e000      	b.n	800c5c6 <vReceiveRA_ReadReply+0x18e>
                    break;
 800c5c4:	bf00      	nop
            }

            uxIndex = uxIndex + uxLength;
 800c5c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	4413      	add	r3, r2
 800c5cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( ( uxIndex + 1U ) < uxLast )
 800c5ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	69fa      	ldr	r2, [r7, #28]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	f63f af47 	bhi.w	800c468 <vReceiveRA_ReadReply+0x30>
        } /* while( ( uxIndex + 1 ) < uxLast ) */

        return pxPrefixOption;
 800c5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3734      	adds	r7, #52	@ 0x34
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5e4:	08024db8 	.word	0x08024db8
 800c5e8:	08024dec 	.word	0x08024dec
 800c5ec:	08024e10 	.word	0x08024e10
 800c5f0:	08024e3c 	.word	0x08024e3c
 800c5f4:	08024e64 	.word	0x08024e64
 800c5f8:	08024e74 	.word	0x08024e74

0800c5fc <vReceiveRA>:
 *        already exists that uses the same IP-address.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveRA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5fe:	b08d      	sub	sp, #52	@ 0x34
 800c600:	af04      	add	r7, sp, #16
 800c602:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c608:	61bb      	str	r3, [r7, #24]
        const ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800c60a:	2300      	movs	r3, #0
 800c60c:	617b      	str	r3, [r7, #20]
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800c60e:	2310      	movs	r3, #16
 800c610:	613b      	str	r3, [r7, #16]
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	3336      	adds	r3, #54	@ 0x36
 800c616:	60fb      	str	r3, [r7, #12]

        /* A Router Advertisement was received, handle it here. */
        if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d903      	bls.n	800c62a <vReceiveRA+0x2e>
        {
            FreeRTOS_printf( ( "vReceiveRA: The buffer provided is too small\n" ) );
 800c622:	485b      	ldr	r0, [pc, #364]	@ (800c790 <vReceiveRA+0x194>)
 800c624:	f015 f948 	bl	80218b8 <lUDPLoggingPrintf>
            else
            {
                /* The life-time field contains zero. */
            }
        }
    }
 800c628:	e0ae      	b.n	800c788 <vReceiveRA+0x18c>
            const ICMPRouterAdvertisement_IPv6_t * pxAdvertisement = ( ( const ICMPRouterAdvertisement_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c62a:	69bb      	ldr	r3, [r7, #24]
 800c62c:	3336      	adds	r3, #54	@ 0x36
 800c62e:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "RA: Type %02x Srv %02x Checksum %04x Hops %d Flags %02x Life %d\n",
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	461c      	mov	r4, r3
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	785b      	ldrb	r3, [r3, #1]
 800c63a:	461d      	mov	r5, r3
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	885b      	ldrh	r3, [r3, #2]
 800c640:	b29b      	uxth	r3, r3
 800c642:	021b      	lsls	r3, r3, #8
 800c644:	b21a      	sxth	r2, r3
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	885b      	ldrh	r3, [r3, #2]
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	0a1b      	lsrs	r3, r3, #8
 800c64e:	b29b      	uxth	r3, r3
 800c650:	b21b      	sxth	r3, r3
 800c652:	4313      	orrs	r3, r2
 800c654:	b21b      	sxth	r3, r3
 800c656:	b29b      	uxth	r3, r3
 800c658:	461e      	mov	r6, r3
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	791b      	ldrb	r3, [r3, #4]
 800c65e:	4619      	mov	r1, r3
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	795b      	ldrb	r3, [r3, #5]
 800c664:	4618      	mov	r0, r3
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	88db      	ldrh	r3, [r3, #6]
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	021b      	lsls	r3, r3, #8
 800c66e:	b21a      	sxth	r2, r3
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	88db      	ldrh	r3, [r3, #6]
 800c674:	b29b      	uxth	r3, r3
 800c676:	0a1b      	lsrs	r3, r3, #8
 800c678:	b29b      	uxth	r3, r3
 800c67a:	b21b      	sxth	r3, r3
 800c67c:	4313      	orrs	r3, r2
 800c67e:	b21b      	sxth	r3, r3
 800c680:	b29b      	uxth	r3, r3
 800c682:	9302      	str	r3, [sp, #8]
 800c684:	9001      	str	r0, [sp, #4]
 800c686:	9100      	str	r1, [sp, #0]
 800c688:	4633      	mov	r3, r6
 800c68a:	462a      	mov	r2, r5
 800c68c:	4621      	mov	r1, r4
 800c68e:	4841      	ldr	r0, [pc, #260]	@ (800c794 <vReceiveRA+0x198>)
 800c690:	f015 f912 	bl	80218b8 <lUDPLoggingPrintf>
            if( pxAdvertisement->usLifetime != 0U )
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	88db      	ldrh	r3, [r3, #6]
 800c698:	b29b      	uxth	r3, r3
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d074      	beq.n	800c788 <vReceiveRA+0x18c>
                pxPrefixOption = vReceiveRA_ReadReply( pxNetworkBuffer );
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f7ff feca 	bl	800c438 <vReceiveRA_ReadReply>
 800c6a4:	6178      	str	r0, [r7, #20]
                configASSERT( pxNetworkBuffer->pxInterface != NULL );
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d104      	bne.n	800c6b8 <vReceiveRA+0xbc>
 800c6ae:	f240 118b 	movw	r1, #395	@ 0x18b
 800c6b2:	4839      	ldr	r0, [pc, #228]	@ (800c798 <vReceiveRA+0x19c>)
 800c6b4:	f7f4 ffda 	bl	800166c <vAssertCalled>
                if( pxPrefixOption != NULL )
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d064      	beq.n	800c788 <vReceiveRA+0x18c>
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkBuffer->pxInterface );
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f000 fbd8 	bl	800ce78 <FreeRTOS_FirstEndPoint>
 800c6c8:	61f8      	str	r0, [r7, #28]
 800c6ca:	e05a      	b.n	800c782 <vReceiveRA+0x186>
                        if( ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxEndPoint->xRAData.eRAState == eRAStateWait ) )
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c6d2:	f003 0302 	and.w	r3, r3, #2
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d04b      	beq.n	800c774 <vReceiveRA+0x178>
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d146      	bne.n	800c774 <vReceiveRA+0x178>
                            pxEndPoint->ipv6_settings.uxPrefixLength = pxPrefixOption->ucPrefixLength;
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	789b      	ldrb	r3, [r3, #2]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	649a      	str	r2, [r3, #72]	@ 0x48
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xPrefix.ucBytes, pxPrefixOption->ucPrefix, ipSIZE_OF_IPv6_ADDRESS );
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	3310      	adds	r3, #16
 800c6fa:	2210      	movs	r2, #16
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	f015 faf7 	bl	8021cf0 <memcpy>
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	3316      	adds	r3, #22
 800c70c:	2210      	movs	r2, #16
 800c70e:	4619      	mov	r1, r3
 800c710:	f015 faee 	bl	8021cf0 <memcpy>
                            pxEndPoint->xRAData.bits.bRouterReplied = pdTRUE_UNSIGNED;
 800c714:	69fa      	ldr	r2, [r7, #28]
 800c716:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c71a:	f043 0301 	orr.w	r3, r3, #1
 800c71e:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.uxRetryCount = 0U;
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	2200      	movs	r2, #0
 800c726:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                            pxEndPoint->xRAData.ulPreferredLifeTime = FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime );
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	061a      	lsls	r2, r3, #24
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	021b      	lsls	r3, r3, #8
 800c736:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c73a:	431a      	orrs	r2, r3
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	0a1b      	lsrs	r3, r3, #8
 800c742:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c746:	431a      	orrs	r2, r3
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	0e1b      	lsrs	r3, r3, #24
 800c74e:	431a      	orrs	r2, r3
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                            pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800c756:	69fa      	ldr	r2, [r7, #28]
 800c758:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c75c:	f043 0302 	orr.w	r3, r3, #2
 800c760:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	2202      	movs	r2, #2
 800c768:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                            vRAProcess( pdFALSE, pxEndPoint );
 800c76c:	69f9      	ldr	r1, [r7, #28]
 800c76e:	2000      	movs	r0, #0
 800c770:	f000 f9b6 	bl	800cae0 <vRAProcess>
                         pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkBuffer->pxInterface, pxEndPoint ) )
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c778:	69f9      	ldr	r1, [r7, #28]
 800c77a:	4618      	mov	r0, r3
 800c77c:	f000 fb9e 	bl	800cebc <FreeRTOS_NextEndPoint>
 800c780:	61f8      	str	r0, [r7, #28]
                         pxEndPoint != NULL;
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1a1      	bne.n	800c6cc <vReceiveRA+0xd0>
    }
 800c788:	bf00      	nop
 800c78a:	3724      	adds	r7, #36	@ 0x24
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c790:	08024e98 	.word	0x08024e98
 800c794:	08024ec8 	.word	0x08024ec8
 800c798:	08024d50 	.word	0x08024d50

0800c79c <xRAProcess_HandleWaitStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleWaitStates( NetworkEndPoint_t * pxEndPoint,
                                                   TickType_t uxReloadTime )
    {
 800c79c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c7a0:	b088      	sub	sp, #32
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	6178      	str	r0, [r7, #20]
 800c7a6:	6139      	str	r1, [r7, #16]
        TickType_t uxNewReloadTime = uxReloadTime;
 800c7a8:	6939      	ldr	r1, [r7, #16]
 800c7aa:	61f9      	str	r1, [r7, #28]

        if( pxEndPoint->xRAData.eRAState == eRAStateWait )
 800c7ac:	6979      	ldr	r1, [r7, #20]
 800c7ae:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800c7b2:	2901      	cmp	r1, #1
 800c7b4:	d133      	bne.n	800c81e <xRAProcess_HandleWaitStates+0x82>
        {
            /* A Router Solicitation has been sent, waited for a reply, but no came.
             * All replies will be handled in the function vReceiveRA(). */
            pxEndPoint->xRAData.uxRetryCount++;
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c7bc:	1c5a      	adds	r2, r3, #1
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

            if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_SEARCH_COUNT )
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c7ca:	2b02      	cmp	r3, #2
 800c7cc:	d804      	bhi.n	800c7d8 <xRAProcess_HandleWaitStates+0x3c>
            {
                pxEndPoint->xRAData.eRAState = eRAStateApply;
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800c7d6:	e0bf      	b.n	800c958 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                FreeRTOS_printf( ( "RA: Giving up waiting for a Router.\n" ) );
 800c7d8:	4862      	ldr	r0, [pc, #392]	@ (800c964 <xRAProcess_HandleWaitStates+0x1c8>)
 800c7da:	f015 f86d 	bl	80218b8 <lUDPLoggingPrintf>
                ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	3390      	adds	r3, #144	@ 0x90
 800c7e8:	2258      	movs	r2, #88	@ 0x58
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	f015 fa80 	bl	8021cf0 <memcpy>

                pxEndPoint->xRAData.bits.bRouterReplied = pdFALSE_UNSIGNED;
 800c7f0:	697a      	ldr	r2, [r7, #20]
 800c7f2:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c7f6:	f36f 0300 	bfc	r3, #0, #1
 800c7fa:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	2200      	movs	r2, #0
 800c802:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                /* Force taking a new random IP-address. */
                pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800c806:	697a      	ldr	r2, [r7, #20]
 800c808:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c80c:	f043 0302 	orr.w	r3, r3, #2
 800c810:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	2202      	movs	r2, #2
 800c818:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800c81c:	e09c      	b.n	800c958 <xRAProcess_HandleWaitStates+0x1bc>
            }
        }
        else if( pxEndPoint->xRAData.eRAState == eRAStateIPWait )
 800c81e:	6979      	ldr	r1, [r7, #20]
 800c820:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800c824:	2903      	cmp	r1, #3
 800c826:	f040 8097 	bne.w	800c958 <xRAProcess_HandleWaitStates+0x1bc>
        {
            /* A Neighbour Solicitation has been sent, waited for a reply.
             * Repeat this 'ipconfigRA_IP_TEST_COUNT' times to be sure. */
            if( pxEndPoint->xRAData.bits.bIPAddressInUse != pdFALSE_UNSIGNED )
 800c82a:	6979      	ldr	r1, [r7, #20]
 800c82c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800c830:	f001 0102 	and.w	r1, r1, #2
 800c834:	b2c9      	uxtb	r1, r1
 800c836:	2900      	cmp	r1, #0
 800c838:	d00b      	beq.n	800c852 <xRAProcess_HandleWaitStates+0xb6>
            {
                /* Another device has responded with the same IPv4 address. */
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	2200      	movs	r2, #0
 800c83e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	2202      	movs	r2, #2
 800c846:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800c84a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800c84e:	61fb      	str	r3, [r7, #28]
 800c850:	e082      	b.n	800c958 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_IP_TEST_COUNT )
 800c852:	6979      	ldr	r1, [r7, #20]
 800c854:	f8d1 1118 	ldr.w	r1, [r1, #280]	@ 0x118
 800c858:	2902      	cmp	r1, #2
 800c85a:	d80e      	bhi.n	800c87a <xRAProcess_HandleWaitStates+0xde>
            {
                /* Try again. */
                pxEndPoint->xRAData.uxRetryCount++;
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c862:	1c5a      	adds	r2, r3, #1
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	2202      	movs	r2, #2
 800c86e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800c872:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800c876:	61fb      	str	r3, [r7, #28]
 800c878:	e06e      	b.n	800c958 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                /* Now it is assumed that there is no other device using the same IP-address. */
                if( pxEndPoint->xRAData.bits.bRouterReplied != pdFALSE_UNSIGNED )
 800c87a:	6979      	ldr	r1, [r7, #20]
 800c87c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800c880:	f001 0101 	and.w	r1, r1, #1
 800c884:	b2c9      	uxtb	r1, r1
 800c886:	2900      	cmp	r1, #0
 800c888:	d057      	beq.n	800c93a <xRAProcess_HandleWaitStates+0x19e>
                {
                    /* Obtained configuration from a router. */
                    uxNewReloadTime = pdMS_TO_TICKS( ( 1000U * ( uint64_t ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
 800c88a:	6979      	ldr	r1, [r7, #20]
 800c88c:	f8d1 1114 	ldr.w	r1, [r1, #276]	@ 0x114
 800c890:	2000      	movs	r0, #0
 800c892:	4688      	mov	r8, r1
 800c894:	4681      	mov	r9, r0
 800c896:	4640      	mov	r0, r8
 800c898:	4649      	mov	r1, r9
 800c89a:	f04f 0a00 	mov.w	sl, #0
 800c89e:	f04f 0b00 	mov.w	fp, #0
 800c8a2:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800c8a6:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800c8aa:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800c8ae:	4650      	mov	r0, sl
 800c8b0:	4659      	mov	r1, fp
 800c8b2:	ebb0 0208 	subs.w	r2, r0, r8
 800c8b6:	eb61 0309 	sbc.w	r3, r1, r9
 800c8ba:	f04f 0000 	mov.w	r0, #0
 800c8be:	f04f 0100 	mov.w	r1, #0
 800c8c2:	0259      	lsls	r1, r3, #9
 800c8c4:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800c8c8:	0250      	lsls	r0, r2, #9
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	eb12 0408 	adds.w	r4, r2, r8
 800c8d2:	eb43 0509 	adc.w	r5, r3, r9
 800c8d6:	f04f 0200 	mov.w	r2, #0
 800c8da:	f04f 0300 	mov.w	r3, #0
 800c8de:	01ab      	lsls	r3, r5, #6
 800c8e0:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800c8e4:	01a2      	lsls	r2, r4, #6
 800c8e6:	1b11      	subs	r1, r2, r4
 800c8e8:	6039      	str	r1, [r7, #0]
 800c8ea:	eb63 0305 	sbc.w	r3, r3, r5
 800c8ee:	607b      	str	r3, [r7, #4]
 800c8f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	eb13 0308 	adds.w	r3, r3, r8
 800c8fa:	60bb      	str	r3, [r7, #8]
 800c8fc:	4613      	mov	r3, r2
 800c8fe:	eb43 0309 	adc.w	r3, r3, r9
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c908:	f04f 0300 	mov.w	r3, #0
 800c90c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c910:	f7f3 fd4e 	bl	80003b0 <__aeabi_uldivmod>
 800c914:	4602      	mov	r2, r0
 800c916:	460b      	mov	r3, r1
 800c918:	4613      	mov	r3, r2
 800c91a:	61fb      	str	r3, [r7, #28]
                    pxEndPoint->xRAData.eRAState = eRAStatePreLease;
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	2204      	movs	r2, #4
 800c920:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                    iptraceRA_SUCCEEDED( &( pxEndPoint->ipv6_settings.xIPAddress ) );
                    FreeRTOS_printf( ( "RA: succeeded, using IP address %pip Reload after %u seconds\n",
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c930:	461a      	mov	r2, r3
 800c932:	480d      	ldr	r0, [pc, #52]	@ (800c968 <xRAProcess_HandleWaitStates+0x1cc>)
 800c934:	f014 ffc0 	bl	80218b8 <lUDPLoggingPrintf>
 800c938:	e00b      	b.n	800c952 <xRAProcess_HandleWaitStates+0x1b6>
                                       ( unsigned ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
                }
                else
                {
                    /* Using the default network parameters. */
                    pxEndPoint->xRAData.eRAState = eRAStateFailed;
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	2206      	movs	r2, #6
 800c93e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                    iptraceRA_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( &( pxEndPoint->ipv6_settings.xIPAddress ) );

                    FreeRTOS_printf( ( "RA: failed, using default parameters and IP address %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	3338      	adds	r3, #56	@ 0x38
 800c946:	4619      	mov	r1, r3
 800c948:	4808      	ldr	r0, [pc, #32]	@ (800c96c <xRAProcess_HandleWaitStates+0x1d0>)
 800c94a:	f014 ffb5 	bl	80218b8 <lUDPLoggingPrintf>
                    /* Disable the timer. */
                    uxNewReloadTime = 0U;
 800c94e:	2300      	movs	r3, #0
 800c950:	61fb      	str	r3, [r7, #28]
                }

                /* Now call vIPNetworkUpCalls() to send the network-up event and
                 * start the ARP timer. */
                vIPNetworkUpCalls( pxEndPoint );
 800c952:	6978      	ldr	r0, [r7, #20]
 800c954:	f7fc fa08 	bl	8008d68 <vIPNetworkUpCalls>
        else
        {
            /* Do nothing */
        }

        return uxNewReloadTime;
 800c958:	69fb      	ldr	r3, [r7, #28]
    }
 800c95a:	4618      	mov	r0, r3
 800c95c:	3720      	adds	r7, #32
 800c95e:	46bd      	mov	sp, r7
 800c960:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c964:	08024f0c 	.word	0x08024f0c
 800c968:	08024f34 	.word	0x08024f34
 800c96c:	08024f74 	.word	0x08024f74

0800c970 <xRAProcess_HandleOtherStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleOtherStates( NetworkEndPoint_t * pxEndPoint,
                                                    TickType_t uxReloadTime )
    {
 800c970:	b580      	push	{r7, lr}
 800c972:	b08c      	sub	sp, #48	@ 0x30
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
        TickType_t uxNewReloadTime = uxReloadTime;
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        switch( pxEndPoint->xRAData.eRAState )
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c984:	2b06      	cmp	r3, #6
 800c986:	f200 808c 	bhi.w	800caa2 <xRAProcess_HandleOtherStates+0x132>
 800c98a:	a201      	add	r2, pc, #4	@ (adr r2, 800c990 <xRAProcess_HandleOtherStates+0x20>)
 800c98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c990:	0800c9ad 	.word	0x0800c9ad
 800c994:	0800caa3 	.word	0x0800caa3
 800c998:	0800ca0f 	.word	0x0800ca0f
 800c99c:	0800caa3 	.word	0x0800caa3
 800c9a0:	0800ca8b 	.word	0x0800ca8b
 800c9a4:	0800ca95 	.word	0x0800ca95
 800c9a8:	0800caa3 	.word	0x0800caa3
                   IPv6_Address_t xIPAddress;
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Send a Router Solicitation to ff02::2 */
                   ( void ) memset( xIPAddress.ucBytes, 0, sizeof( xIPAddress.ucBytes ) );
 800c9ac:	f107 030c 	add.w	r3, r7, #12
 800c9b0:	2210      	movs	r2, #16
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f015 faa8 	bl	8021f0a <memset>
                   xIPAddress.ucBytes[ 0 ] = 0xffU;
 800c9ba:	23ff      	movs	r3, #255	@ 0xff
 800c9bc:	733b      	strb	r3, [r7, #12]
                   xIPAddress.ucBytes[ 1 ] = 0x02U;
 800c9be:	2302      	movs	r3, #2
 800c9c0:	737b      	strb	r3, [r7, #13]
                   xIPAddress.ucBytes[ 15 ] = 0x02U;
 800c9c2:	2302      	movs	r3, #2
 800c9c4:	76fb      	strb	r3, [r7, #27]
                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800c9c6:	233e      	movs	r3, #62	@ 0x3e
 800c9c8:	623b      	str	r3, [r7, #32]
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800c9ca:	2100      	movs	r1, #0
 800c9cc:	6a38      	ldr	r0, [r7, #32]
 800c9ce:	f00a f863 	bl	8016a98 <pxGetNetworkBufferWithDescriptor>
 800c9d2:	61f8      	str	r0, [r7, #28]

                   if( pxNetworkBuffer != NULL )
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d008      	beq.n	800c9ec <xRAProcess_HandleOtherStates+0x7c>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendRouterSolicitation( pxNetworkBuffer, &( xIPAddress ) );
 800c9e0:	f107 030c 	add.w	r3, r7, #12
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	69f8      	ldr	r0, [r7, #28]
 800c9e8:	f7ff fc24 	bl	800c234 <vNDSendRouterSolicitation>
                   }

                   FreeRTOS_printf( ( "vRAProcess: Router Solicitation, attempt %lu/%u\n",
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	2203      	movs	r2, #3
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	482d      	ldr	r0, [pc, #180]	@ (800cab0 <xRAProcess_HandleOtherStates+0x140>)
 800c9fa:	f014 ff5d 	bl	80218b8 <lUDPLoggingPrintf>
                                      pxEndPoint->xRAData.uxRetryCount + 1U,
                                      ipconfigRA_SEARCH_COUNT ) );
                   /* Wait a configurable time for a router advertisement. */
                   uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_SEARCH_TIME_OUT_MSEC );
 800c9fe:	f242 7310 	movw	r3, #10000	@ 0x2710
 800ca02:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateWait;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2201      	movs	r2, #1
 800ca08:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800ca0c:	e04a      	b.n	800caa4 <xRAProcess_HandleOtherStates+0x134>
               {
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Get an IP-address, using the network prefix and a random host address. */
                   if( pxEndPoint->xRAData.bits.bIPAddressInUse != 0U )
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800ca14:	f003 0302 	and.w	r3, r3, #2
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d014      	beq.n	800ca48 <xRAProcess_HandleOtherStates+0xd8>
                   {
                       pxEndPoint->xRAData.bits.bIPAddressInUse = pdFALSE_UNSIGNED;
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800ca24:	f36f 0341 	bfc	r3, #1, #1
 800ca28:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110

                       ( void ) FreeRTOS_CreateIPv6Address( &pxEndPoint->ipv6_settings.xIPAddress, &pxEndPoint->ipv6_settings.xPrefix, pxEndPoint->ipv6_settings.uxPrefixLength, pdTRUE );
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	f7ff fb2b 	bl	800c098 <FreeRTOS_CreateIPv6Address>

                       FreeRTOS_printf( ( "RA: Creating a random IP-address\n" ) );
 800ca42:	481c      	ldr	r0, [pc, #112]	@ (800cab4 <xRAProcess_HandleOtherStates+0x144>)
 800ca44:	f014 ff38 	bl	80218b8 <lUDPLoggingPrintf>
                   }

                   FreeRTOS_printf( ( "RA: Neighbour solicitation for %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	3338      	adds	r3, #56	@ 0x38
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	481a      	ldr	r0, [pc, #104]	@ (800cab8 <xRAProcess_HandleOtherStates+0x148>)
 800ca50:	f014 ff32 	bl	80218b8 <lUDPLoggingPrintf>

                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800ca54:	2356      	movs	r3, #86	@ 0x56
 800ca56:	62bb      	str	r3, [r7, #40]	@ 0x28
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800ca58:	2100      	movs	r1, #0
 800ca5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca5c:	f00a f81c 	bl	8016a98 <pxGetNetworkBufferWithDescriptor>
 800ca60:	6278      	str	r0, [r7, #36]	@ 0x24

                   if( pxNetworkBuffer != NULL )
 800ca62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d008      	beq.n	800ca7a <xRAProcess_HandleOtherStates+0x10a>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800ca68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	3338      	adds	r3, #56	@ 0x38
 800ca72:	4619      	mov	r1, r3
 800ca74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ca76:	f7fe ff25 	bl	800b8c4 <vNDSendNeighbourSolicitation>
                   }

                   uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800ca7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ca7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateIPWait;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2203      	movs	r2, #3
 800ca84:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800ca88:	e00c      	b.n	800caa4 <xRAProcess_HandleOtherStates+0x134>

            case eRAStatePreLease:
                pxEndPoint->xRAData.eRAState = eRAStateLease;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2205      	movs	r2, #5
 800ca8e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                break;
 800ca92:	e007      	b.n	800caa4 <xRAProcess_HandleOtherStates+0x134>

            case eRAStateLease:

                vRAProcessInit( pxEndPoint );
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f811 	bl	800cabc <vRAProcessInit>
                uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800ca9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ca9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                break;
 800caa0:	e000      	b.n	800caa4 <xRAProcess_HandleOtherStates+0x134>
            case eRAStateFailed:
                break;

            default:
                /* All states were handled. */
                break;
 800caa2:	bf00      	nop
        }

        return uxNewReloadTime;
 800caa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800caa6:	4618      	mov	r0, r3
 800caa8:	3730      	adds	r7, #48	@ 0x30
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	08024fb0 	.word	0x08024fb0
 800cab4:	08024fe4 	.word	0x08024fe4
 800cab8:	08025008 	.word	0x08025008

0800cabc <vRAProcessInit>:
 * @brief Initialise the RA state machine.
 *
 * @param[in] pxEndPoint The end-point for which Router Advertisement is required.
 */
    static void vRAProcessInit( NetworkEndPoint_t * pxEndPoint )
    {
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
        pxEndPoint->xRAData.uxRetryCount = 0U;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2200      	movs	r2, #0
 800cac8:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxEndPoint->xRAData.eRAState = eRAStateApply;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2200      	movs	r2, #0
 800cad0:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    }
 800cad4:	bf00      	nop
 800cad6:	370c      	adds	r7, #12
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <vRAProcess>:
 * @param[in] xDoReset pdTRUE if the state machine must be reset.
 * @param[in] pxEndPoint The end-point for which a RA assignment is required.
 */
    void vRAProcess( BaseType_t xDoReset,
                     NetworkEndPoint_t * pxEndPoint )
    {
 800cae0:	b590      	push	{r4, r7, lr}
 800cae2:	b089      	sub	sp, #36	@ 0x24
 800cae4:	af04      	add	r7, sp, #16
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
        TickType_t uxReloadTime = pdMS_TO_TICKS( 5000U );
 800caea:	f241 3388 	movw	r3, #5000	@ 0x1388
 800caee:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
            eRAState_t eRAState;
        #endif

        configASSERT( pxEndPoint != NULL );
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d104      	bne.n	800cb00 <vRAProcess+0x20>
 800caf6:	f240 2189 	movw	r1, #649	@ 0x289
 800cafa:	4828      	ldr	r0, [pc, #160]	@ (800cb9c <vRAProcess+0xbc>)
 800cafc:	f7f4 fdb6 	bl	800166c <vAssertCalled>

        #if ( ipconfigHAS_PRINTF == 1 )
            /* Remember the initial state, just for logging. */
            eRAState = pxEndPoint->xRAData.eRAState;
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800cb06:	72fb      	strb	r3, [r7, #11]
        #endif

        if( xDoReset != pdFALSE )
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d002      	beq.n	800cb14 <vRAProcess+0x34>
        {
            vRAProcessInit( pxEndPoint );
 800cb0e:	6838      	ldr	r0, [r7, #0]
 800cb10:	f7ff ffd4 	bl	800cabc <vRAProcessInit>
        }

        /* First handle the states that are limited by a timer. See if some
         * timer has expired. */
        uxReloadTime = xRAProcess_HandleWaitStates( pxEndPoint, uxReloadTime );
 800cb14:	68f9      	ldr	r1, [r7, #12]
 800cb16:	6838      	ldr	r0, [r7, #0]
 800cb18:	f7ff fe40 	bl	800c79c <xRAProcess_HandleWaitStates>
 800cb1c:	60f8      	str	r0, [r7, #12]

        /* Now handle the other states. */
        uxReloadTime = xRAProcess_HandleOtherStates( pxEndPoint, uxReloadTime );
 800cb1e:	68f9      	ldr	r1, [r7, #12]
 800cb20:	6838      	ldr	r0, [r7, #0]
 800cb22:	f7ff ff25 	bl	800c970 <xRAProcess_HandleOtherStates>
 800cb26:	60f8      	str	r0, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            FreeRTOS_printf( ( "vRAProcess( %ld, %pip) bRouterReplied=%d bIPAddressInUse=%d state %d -> %d\n",
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800cb34:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	461c      	mov	r4, r3
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800cb42:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	4618      	mov	r0, r3
 800cb4a:	7afb      	ldrb	r3, [r7, #11]
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	f892 211c 	ldrb.w	r2, [r2, #284]	@ 0x11c
 800cb52:	9202      	str	r2, [sp, #8]
 800cb54:	9301      	str	r3, [sp, #4]
 800cb56:	9000      	str	r0, [sp, #0]
 800cb58:	4623      	mov	r3, r4
 800cb5a:	460a      	mov	r2, r1
 800cb5c:	6879      	ldr	r1, [r7, #4]
 800cb5e:	4810      	ldr	r0, [pc, #64]	@ (800cba0 <vRAProcess+0xc0>)
 800cb60:	f014 feaa 	bl	80218b8 <lUDPLoggingPrintf>
                               eRAState,
                               pxEndPoint->xRAData.eRAState ) );
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( uxReloadTime != 0U )
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d00d      	beq.n	800cb86 <vRAProcess+0xa6>
        {
            FreeRTOS_printf( ( "RA: Reload %u seconds\n", ( unsigned ) ( uxReloadTime / 1000U ) ) );
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	4a0d      	ldr	r2, [pc, #52]	@ (800cba4 <vRAProcess+0xc4>)
 800cb6e:	fba2 2303 	umull	r2, r3, r2, r3
 800cb72:	099b      	lsrs	r3, r3, #6
 800cb74:	4619      	mov	r1, r3
 800cb76:	480c      	ldr	r0, [pc, #48]	@ (800cba8 <vRAProcess+0xc8>)
 800cb78:	f014 fe9e 	bl	80218b8 <lUDPLoggingPrintf>
            vDHCP_RATimerReload( pxEndPoint, uxReloadTime );
 800cb7c:	68f9      	ldr	r1, [r7, #12]
 800cb7e:	6838      	ldr	r0, [r7, #0]
 800cb80:	f7fc ff8a 	bl	8009a98 <vDHCP_RATimerReload>
        {
            /* Disable the timer, this function vRAProcess() won't be called anymore for this end-point. */
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
        }
    }
 800cb84:	e006      	b.n	800cb94 <vRAProcess+0xb4>
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
 800cb86:	4809      	ldr	r0, [pc, #36]	@ (800cbac <vRAProcess+0xcc>)
 800cb88:	f014 fe96 	bl	80218b8 <lUDPLoggingPrintf>
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	6838      	ldr	r0, [r7, #0]
 800cb90:	f7fd f836 	bl	8009c00 <vIPSetDHCP_RATimerEnableState>
    }
 800cb94:	bf00      	nop
 800cb96:	3714      	adds	r7, #20
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd90      	pop	{r4, r7, pc}
 800cb9c:	08024d50 	.word	0x08024d50
 800cba0:	08025030 	.word	0x08025030
 800cba4:	10624dd3 	.word	0x10624dd3
 800cba8:	0802507c 	.word	0x0802507c
 800cbac:	08025094 	.word	0x08025094

0800cbb0 <FreeRTOS_FillEndPoint>:
                                const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
    {
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b086      	sub	sp, #24
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	607a      	str	r2, [r7, #4]
 800cbbc:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddress;

        if( ( pxNetworkInterface == NULL ) || ( pxEndPoint == NULL ) )
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d002      	beq.n	800cbca <FreeRTOS_FillEndPoint+0x1a>
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d105      	bne.n	800cbd6 <FreeRTOS_FillEndPoint+0x26>
        {
            /* Invalid input. */
            FreeRTOS_printf( ( "FreeRTOS_FillEndPoint: Invalid input, netif=%p, endpoint=%p\n",
 800cbca:	68ba      	ldr	r2, [r7, #8]
 800cbcc:	68f9      	ldr	r1, [r7, #12]
 800cbce:	483f      	ldr	r0, [pc, #252]	@ (800cccc <FreeRTOS_FillEndPoint+0x11c>)
 800cbd0:	f014 fe72 	bl	80218b8 <lUDPLoggingPrintf>
 800cbd4:	e075      	b.n	800ccc2 <FreeRTOS_FillEndPoint+0x112>
             * The user must make sure that the object pointed to by 'pxEndPoint'
             * will remain to exist. */

            /* As the endpoint might be part of a linked list,
             * protect the field pxNext from being overwritten. */
            NetworkEndPoint_t * pxNext = pxEndPoint->pxNext;
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cbdc:	617b      	str	r3, [r7, #20]
            ( void ) memset( pxEndPoint, 0, sizeof( *pxEndPoint ) );
 800cbde:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	68b8      	ldr	r0, [r7, #8]
 800cbe6:	f015 f990 	bl	8021f0a <memset>
            pxEndPoint->pxNext = pxNext;
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	697a      	ldr	r2, [r7, #20]
 800cbee:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

            ulIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	3303      	adds	r3, #3
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	061a      	lsls	r2, r3, #24
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	3302      	adds	r3, #2
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	041b      	lsls	r3, r3, #16
 800cc02:	431a      	orrs	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	3301      	adds	r3, #1
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	021b      	lsls	r3, r3, #8
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	7812      	ldrb	r2, [r2, #0]
 800cc12:	4313      	orrs	r3, r2
 800cc14:	613b      	str	r3, [r7, #16]
            pxEndPoint->ipv4_settings.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	3303      	adds	r3, #3
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	061a      	lsls	r2, r3, #24
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	3302      	adds	r3, #2
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	041b      	lsls	r3, r3, #16
 800cc26:	431a      	orrs	r2, r3
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	021b      	lsls	r3, r3, #8
 800cc30:	4313      	orrs	r3, r2
 800cc32:	683a      	ldr	r2, [r7, #0]
 800cc34:	7812      	ldrb	r2, [r2, #0]
 800cc36:	431a      	orrs	r2, r3
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	605a      	str	r2, [r3, #4]
            pxEndPoint->ipv4_settings.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800cc3c:	6a3b      	ldr	r3, [r7, #32]
 800cc3e:	3303      	adds	r3, #3
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	061a      	lsls	r2, r3, #24
 800cc44:	6a3b      	ldr	r3, [r7, #32]
 800cc46:	3302      	adds	r3, #2
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	041b      	lsls	r3, r3, #16
 800cc4c:	431a      	orrs	r2, r3
 800cc4e:	6a3b      	ldr	r3, [r7, #32]
 800cc50:	3301      	adds	r3, #1
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	021b      	lsls	r3, r3, #8
 800cc56:	4313      	orrs	r3, r2
 800cc58:	6a3a      	ldr	r2, [r7, #32]
 800cc5a:	7812      	ldrb	r2, [r2, #0]
 800cc5c:	431a      	orrs	r2, r3
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	609a      	str	r2, [r3, #8]
            pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ] = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800cc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc64:	3303      	adds	r3, #3
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	061a      	lsls	r2, r3, #24
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc6c:	3302      	adds	r3, #2
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	041b      	lsls	r3, r3, #16
 800cc72:	431a      	orrs	r2, r3
 800cc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc76:	3301      	adds	r3, #1
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	021b      	lsls	r3, r3, #8
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc80:	7812      	ldrb	r2, [r2, #0]
 800cc82:	431a      	orrs	r2, r3
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	60da      	str	r2, [r3, #12]
            pxEndPoint->ipv4_settings.ulBroadcastAddress = ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	43da      	mvns	r2, r3
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	431a      	orrs	r2, r3
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	615a      	str	r2, [r3, #20]

            /* Copy the current values to the default values. */
            ( void ) memcpy( &( pxEndPoint->ipv4_defaults ), &( pxEndPoint->ipv4_settings ), sizeof( pxEndPoint->ipv4_defaults ) );
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	331c      	adds	r3, #28
 800cc9a:	68b9      	ldr	r1, [r7, #8]
 800cc9c:	221c      	movs	r2, #28
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f015 f826 	bl	8021cf0 <memcpy>

            /* The default IP-address will be used in case DHCP is not used, or also if DHCP has failed, or
             * when the user chooses to use the default IP-address. */
            pxEndPoint->ipv4_defaults.ulIPAddress = ulIPAddress;
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	693a      	ldr	r2, [r7, #16]
 800cca8:	61da      	str	r2, [r3, #28]

            /* The field 'ipv4_settings.ulIPAddress' will be set later on. */

            ( void ) memcpy( pxEndPoint->xMACAddress.ucBytes, ucMACAddress, sizeof( pxEndPoint->xMACAddress ) );
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	33e8      	adds	r3, #232	@ 0xe8
 800ccae:	2206      	movs	r2, #6
 800ccb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f015 f81c 	bl	8021cf0 <memcpy>
            ( void ) FreeRTOS_AddEndPoint( pxNetworkInterface, pxEndPoint );
 800ccb8:	68b9      	ldr	r1, [r7, #8]
 800ccba:	68f8      	ldr	r0, [r7, #12]
 800ccbc:	f000 f85c 	bl	800cd78 <FreeRTOS_AddEndPoint>
        }
    }
 800ccc0:	bf00      	nop
 800ccc2:	bf00      	nop
 800ccc4:	3718      	adds	r7, #24
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop
 800cccc:	080250ac 	.word	0x080250ac

0800ccd0 <FreeRTOS_AddNetworkInterface>:
 * @param[in] pxInterface The address of the new interface.
 *
 * @return The value of the parameter 'pxInterface'.
 */
    NetworkInterface_t * FreeRTOS_AddNetworkInterface( NetworkInterface_t * pxInterface )
    {
 800ccd0:	b480      	push	{r7}
 800ccd2:	b085      	sub	sp, #20
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxIterator = NULL;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	60fb      	str	r3, [r7, #12]

        if( pxInterface != NULL )
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d021      	beq.n	800cd26 <FreeRTOS_AddNetworkInterface+0x56>
        {
            if( pxNetworkInterfaces == NULL )
 800cce2:	4b14      	ldr	r3, [pc, #80]	@ (800cd34 <FreeRTOS_AddNetworkInterface+0x64>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d106      	bne.n	800ccf8 <FreeRTOS_AddNetworkInterface+0x28>
            {
                /* No other interfaces are set yet, so this is the first in the list. */
                pxNetworkInterfaces = pxInterface;
 800ccea:	4a12      	ldr	r2, [pc, #72]	@ (800cd34 <FreeRTOS_AddNetworkInterface+0x64>)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6013      	str	r3, [r2, #0]
                pxInterface->pxNext = NULL;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	625a      	str	r2, [r3, #36]	@ 0x24
 800ccf6:	e016      	b.n	800cd26 <FreeRTOS_AddNetworkInterface+0x56>
            }
            else
            {
                /* Other interfaces are already defined, so iterate to the end of the
                 * list. */
                pxIterator = pxNetworkInterfaces;
 800ccf8:	4b0e      	ldr	r3, [pc, #56]	@ (800cd34 <FreeRTOS_AddNetworkInterface+0x64>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	60fb      	str	r3, [r7, #12]

                for( ; ; )
                {
                    if( pxIterator == pxInterface )
 800ccfe:	68fa      	ldr	r2, [r7, #12]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d00e      	beq.n	800cd24 <FreeRTOS_AddNetworkInterface+0x54>
                    {
                        /* This interface was already added. */
                        break;
                    }

                    if( pxIterator->pxNext == NULL )
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d106      	bne.n	800cd1c <FreeRTOS_AddNetworkInterface+0x4c>
                    {
                        pxIterator->pxNext = pxInterface;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	625a      	str	r2, [r3, #36]	@ 0x24
                        pxInterface->pxNext = NULL;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	625a      	str	r2, [r3, #36]	@ 0x24
                        break;
 800cd1a:	e004      	b.n	800cd26 <FreeRTOS_AddNetworkInterface+0x56>
                    }

                    pxIterator = pxIterator->pxNext;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd20:	60fb      	str	r3, [r7, #12]
                    if( pxIterator == pxInterface )
 800cd22:	e7ec      	b.n	800ccfe <FreeRTOS_AddNetworkInterface+0x2e>
                        break;
 800cd24:	bf00      	nop
                }
            }
        }

        return pxInterface;
 800cd26:	687b      	ldr	r3, [r7, #4]
    }
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3714      	adds	r7, #20
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr
 800cd34:	20001364 	.word	0x20001364

0800cd38 <FreeRTOS_FirstNetworkInterface>:
 * @brief Get the first Network Interface, or NULL if none has been added.
 *
 * @return The first interface, or NULL if none has been added
 */
    NetworkInterface_t * FreeRTOS_FirstNetworkInterface( void )
    {
 800cd38:	b480      	push	{r7}
 800cd3a:	af00      	add	r7, sp, #0
        return pxNetworkInterfaces;
 800cd3c:	4b03      	ldr	r3, [pc, #12]	@ (800cd4c <FreeRTOS_FirstNetworkInterface+0x14>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
    }
 800cd40:	4618      	mov	r0, r3
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr
 800cd4a:	bf00      	nop
 800cd4c:	20001364 	.word	0x20001364

0800cd50 <FreeRTOS_NextNetworkInterface>:
 *
 * @return The interface that comes after 'pxInterface'. NULL when either 'pxInterface'
 *         is NULL, or when 'pxInterface' is the last interface.
 */
    NetworkInterface_t * FreeRTOS_NextNetworkInterface( const NetworkInterface_t * pxInterface )
    {
 800cd50:	b480      	push	{r7}
 800cd52:	b085      	sub	sp, #20
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxReturn;

        if( pxInterface != NULL )
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d003      	beq.n	800cd66 <FreeRTOS_NextNetworkInterface+0x16>
        {
            pxReturn = pxInterface->pxNext;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd62:	60fb      	str	r3, [r7, #12]
 800cd64:	e001      	b.n	800cd6a <FreeRTOS_NextNetworkInterface+0x1a>
        }
        else
        {
            pxReturn = NULL;
 800cd66:	2300      	movs	r3, #0
 800cd68:	60fb      	str	r3, [r7, #12]
        }

        return pxReturn;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
    }
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3714      	adds	r7, #20
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <FreeRTOS_AddEndPoint>:
 *
 * @return The value of the parameter 'pxEndPoint'.
 */
    static NetworkEndPoint_t * FreeRTOS_AddEndPoint( NetworkInterface_t * pxInterface,
                                                     NetworkEndPoint_t * pxEndPoint )
    {
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxIterator = NULL;
 800cd82:	2300      	movs	r3, #0
 800cd84:	60fb      	str	r3, [r7, #12]

        /* Double link between the NetworkInterface_t that is using the addressing
         * defined by this NetworkEndPoint_t structure. */
        pxEndPoint->pxNetworkInterface = pxInterface;
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

        if( pxInterface->pxEndPoint == NULL )
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6a1b      	ldr	r3, [r3, #32]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d102      	bne.n	800cd9c <FreeRTOS_AddEndPoint+0x24>
        {
            /*_RB_ When would pxInterface->pxEndPoint ever not be NULL unless this is called twice? */
            /*_HT_ It may be called twice. */
            pxInterface->pxEndPoint = pxEndPoint;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	683a      	ldr	r2, [r7, #0]
 800cd9a:	621a      	str	r2, [r3, #32]
        }

        if( pxNetworkEndPoints == NULL )
 800cd9c:	4b33      	ldr	r3, [pc, #204]	@ (800ce6c <FreeRTOS_AddEndPoint+0xf4>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d107      	bne.n	800cdb4 <FreeRTOS_AddEndPoint+0x3c>
        {
            /* No other end points are defined yet - so this is the first in the
             * list. */
            pxEndPoint->pxNext = NULL;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	2200      	movs	r2, #0
 800cda8:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            pxNetworkEndPoints = pxEndPoint;
 800cdac:	4a2f      	ldr	r2, [pc, #188]	@ (800ce6c <FreeRTOS_AddEndPoint+0xf4>)
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	6013      	str	r3, [r2, #0]
 800cdb2:	e01a      	b.n	800cdea <FreeRTOS_AddEndPoint+0x72>
        }
        else
        {
            /* Other end points are already defined so iterate to the end of the
             * list. */
            pxIterator = pxNetworkEndPoints;
 800cdb4:	4b2d      	ldr	r3, [pc, #180]	@ (800ce6c <FreeRTOS_AddEndPoint+0xf4>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	60fb      	str	r3, [r7, #12]

            for( ; ; )
            {
                if( pxIterator == pxEndPoint )
 800cdba:	68fa      	ldr	r2, [r7, #12]
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d012      	beq.n	800cde8 <FreeRTOS_AddEndPoint+0x70>
                {
                    /* This end-point has already been added to the list. */
                    break;
                }

                if( pxIterator->pxNext == NULL )
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d108      	bne.n	800cdde <FreeRTOS_AddEndPoint+0x66>
                {
                    pxEndPoint->pxNext = NULL;
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    pxIterator->pxNext = pxEndPoint;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    break;
 800cddc:	e005      	b.n	800cdea <FreeRTOS_AddEndPoint+0x72>
                }

                pxIterator = pxIterator->pxNext;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cde4:	60fb      	str	r3, [r7, #12]
                if( pxIterator == pxEndPoint )
 800cde6:	e7e8      	b.n	800cdba <FreeRTOS_AddEndPoint+0x42>
                    break;
 800cde8:	bf00      	nop
            }
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cdf0:	f003 0304 	and.w	r3, r3, #4
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00c      	beq.n	800ce14 <FreeRTOS_AddEndPoint+0x9c>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv6: %pip\n",
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800ce00:	4619      	mov	r1, r3
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800ce08:	461a      	mov	r2, r3
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	3390      	adds	r3, #144	@ 0x90
 800ce0e:	4818      	ldr	r0, [pc, #96]	@ (800ce70 <FreeRTOS_AddEndPoint+0xf8>)
 800ce10:	f014 fd52 	bl	80218b8 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( void * ) pxEndPoint->ipv6_defaults.xIPAddress.ucBytes ) );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ce1a:	f003 0304 	and.w	r3, r3, #4
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d11e      	bne.n	800ce62 <FreeRTOS_AddEndPoint+0xea>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv4: %xip\n",
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800ce32:	4618      	mov	r0, r3
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	69db      	ldr	r3, [r3, #28]
 800ce38:	061a      	lsls	r2, r3, #24
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	69db      	ldr	r3, [r3, #28]
 800ce3e:	021b      	lsls	r3, r3, #8
 800ce40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ce44:	431a      	orrs	r2, r3
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	69db      	ldr	r3, [r3, #28]
 800ce4a:	0a1b      	lsrs	r3, r3, #8
 800ce4c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ce50:	431a      	orrs	r2, r3
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	69db      	ldr	r3, [r3, #28]
 800ce56:	0e1b      	lsrs	r3, r3, #24
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	4805      	ldr	r0, [pc, #20]	@ (800ce74 <FreeRTOS_AddEndPoint+0xfc>)
 800ce5e:	f014 fd2b 	bl	80218b8 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( unsigned ) FreeRTOS_ntohl( pxEndPoint->ipv4_defaults.ulIPAddress ) ) );
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        return pxEndPoint;
 800ce62:	683b      	ldr	r3, [r7, #0]
    }
 800ce64:	4618      	mov	r0, r3
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	20001360 	.word	0x20001360
 800ce70:	080250ec 	.word	0x080250ec
 800ce74:	08025120 	.word	0x08025120

0800ce78 <FreeRTOS_FirstEndPoint>:
 *
 * @return The first end-point that is found to the interface, or NULL when the
 *         interface doesn't have any end-point yet.
 */
    NetworkEndPoint_t * FreeRTOS_FirstEndPoint( const NetworkInterface_t * pxInterface )
    {
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800ce80:	4b0d      	ldr	r3, [pc, #52]	@ (800ceb8 <FreeRTOS_FirstEndPoint+0x40>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	60fb      	str	r3, [r7, #12]

        /* Find and return the NetworkEndPoint_t structure that is associated with
         * the pxInterface NetworkInterface_t. *//*_RB_ Could this be made a two way link, so the NetworkEndPoint_t can just be read from the NetworkInterface_t structure?  Looks like there is a pointer in the struct already. */
        while( pxEndPoint != NULL )
 800ce86:	e00c      	b.n	800cea2 <FreeRTOS_FirstEndPoint+0x2a>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00c      	beq.n	800cea8 <FreeRTOS_FirstEndPoint+0x30>
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d006      	beq.n	800cea8 <FreeRTOS_FirstEndPoint+0x30>
            {
                break;
            }

            pxEndPoint = pxEndPoint->pxNext;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cea0:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d1ef      	bne.n	800ce88 <FreeRTOS_FirstEndPoint+0x10>
        }

        return pxEndPoint;
 800cea8:	68fb      	ldr	r3, [r7, #12]
    }
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3714      	adds	r7, #20
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr
 800ceb6:	bf00      	nop
 800ceb8:	20001360 	.word	0x20001360

0800cebc <FreeRTOS_NextEndPoint>:
 *
 * @return The end-point that is found, or NULL when there are no more end-points in the list.
 */
    NetworkEndPoint_t * FreeRTOS_NextEndPoint( const NetworkInterface_t * pxInterface,
                                               NetworkEndPoint_t * pxEndPoint )
    {
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = pxEndPoint;
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	60fb      	str	r3, [r7, #12]

        if( pxResult != NULL )
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d015      	beq.n	800cefc <FreeRTOS_NextEndPoint+0x40>
        {
            pxResult = pxResult->pxNext;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800ced6:	60fb      	str	r3, [r7, #12]

            while( pxResult != NULL )
 800ced8:	e00c      	b.n	800cef4 <FreeRTOS_NextEndPoint+0x38>
            {
                if( ( pxInterface == NULL ) || ( pxResult->pxNetworkInterface == pxInterface ) )
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d011      	beq.n	800cf04 <FreeRTOS_NextEndPoint+0x48>
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d00b      	beq.n	800cf04 <FreeRTOS_NextEndPoint+0x48>
                {
                    break;
                }

                pxResult = pxResult->pxNext;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cef2:	60fb      	str	r3, [r7, #12]
            while( pxResult != NULL )
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d1ef      	bne.n	800ceda <FreeRTOS_NextEndPoint+0x1e>
 800cefa:	e003      	b.n	800cf04 <FreeRTOS_NextEndPoint+0x48>
            }
        }
        else
        {
            pxResult = FreeRTOS_FirstEndPoint( pxInterface );
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f7ff ffbb 	bl	800ce78 <FreeRTOS_FirstEndPoint>
 800cf02:	60f8      	str	r0, [r7, #12]
        }

        return pxResult;
 800cf04:	68fb      	ldr	r3, [r7, #12]
    }
 800cf06:	4618      	mov	r0, r3
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
	...

0800cf10 <FreeRTOS_FindEndPointOnIP_IPv4>:
 *
 * @return The end-point found or NULL.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv4( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800cf10:	b480      	push	{r7}
 800cf12:	b085      	sub	sp, #20
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800cf1a:	4b1e      	ldr	r3, [pc, #120]	@ (800cf94 <FreeRTOS_FindEndPointOnIP_IPv4+0x84>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocationsIP ) / sizeof( xRoutingStatistics.ulLocationsIP[ 0 ] ) );
 800cf20:	2308      	movs	r3, #8
 800cf22:	60bb      	str	r3, [r7, #8]

            xRoutingStatistics.ulOnIp++;
 800cf24:	4b1c      	ldr	r3, [pc, #112]	@ (800cf98 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	4a1b      	ldr	r2, [pc, #108]	@ (800cf98 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800cf2c:	6013      	str	r3, [r2, #0]

            if( ulWhere < ulLocationCount )
 800cf2e:	683a      	ldr	r2, [r7, #0]
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d223      	bcs.n	800cf7e <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
            {
                xRoutingStatistics.ulLocationsIP[ ulWhere ]++;
 800cf36:	4a18      	ldr	r2, [pc, #96]	@ (800cf98 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	3312      	adds	r3, #18
 800cf3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf40:	1c5a      	adds	r2, r3, #1
 800cf42:	4915      	ldr	r1, [pc, #84]	@ (800cf98 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	3312      	adds	r3, #18
 800cf48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
        #endif /* ( ipconfigHAS_ROUTING_STATISTICS == 1 ) */

        while( pxEndPoint != NULL )
 800cf4c:	e017      	b.n	800cf7e <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                #if ( ipconfigUSE_IPv6 != 0 )
                    if( pxEndPoint->bits.bIPv6 == 0U )
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cf54:	f003 0304 	and.w	r3, r3, #4
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d10b      	bne.n	800cf76 <FreeRTOS_FindEndPointOnIP_IPv4+0x66>
                #endif
                {
                    if( ( ulIPAddress == 0U ) ||
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d00f      	beq.n	800cf84 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
                    if( ( ulIPAddress == 0U ) ||
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d00b      	beq.n	800cf84 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == ulIPAddress ) )
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d006      	beq.n	800cf84 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        break;
                    }
                }
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            pxEndPoint = pxEndPoint->pxNext;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cf7c:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d1e4      	bne.n	800cf4e <FreeRTOS_FindEndPointOnIP_IPv4+0x3e>
        }

        ( void ) ulIPAddress;

        return pxEndPoint;
 800cf84:	68fb      	ldr	r3, [r7, #12]
    }
 800cf86:	4618      	mov	r0, r3
 800cf88:	3714      	adds	r7, #20
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop
 800cf94:	20001360 	.word	0x20001360
 800cf98:	20001368 	.word	0x20001368

0800cf9c <FreeRTOS_FindEndPointOnIP_IPv6>:
 * @param[in] pxIPAddress The IP-address of interest.
 *
 * @return The end-point found or NULL.
 */
        NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv6( const IPv6_Address_t * pxIPAddress )
        {
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
            return FreeRTOS_InterfaceEPInSameSubnet_IPv6( NULL, pxIPAddress );
 800cfa4:	6879      	ldr	r1, [r7, #4]
 800cfa6:	2000      	movs	r0, #0
 800cfa8:	f000 f8b6 	bl	800d118 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800cfac:	4603      	mov	r3, r0
        }
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3708      	adds	r7, #8
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
	...

0800cfb8 <FreeRTOS_FindEndPointOnMAC>:
 *
 * @return The end-point that has the given MAC-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnMAC( const MACAddress_t * pxMACAddress,
                                                    const NetworkInterface_t * pxInterface )
    {
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800cfc2:	4b17      	ldr	r3, [pc, #92]	@ (800d020 <FreeRTOS_FindEndPointOnMAC+0x68>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            xRoutingStatistics.ulOnMAC++;
 800cfc8:	4b16      	ldr	r3, [pc, #88]	@ (800d024 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	4a15      	ldr	r2, [pc, #84]	@ (800d024 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800cfd0:	6053      	str	r3, [r2, #4]
        }
        #endif

        /* If input MAC address is NULL, return NULL. */
        if( pxMACAddress == NULL )
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d119      	bne.n	800d00c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            pxEndPoint = NULL;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	60fb      	str	r3, [r7, #12]
         * uin64_t variables for direct comparison instead of using memcmp()?  [don't
         * know if there is a quick way of creating a 64-bit number from the 48-byte
         * MAC address without getting junk in the top 2 bytes]. */

        /* Find the end-point with given MAC-address. */
        while( pxEndPoint != NULL )
 800cfdc:	e016      	b.n	800d00c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            if( ( pxInterface == NULL ) || ( pxInterface == pxEndPoint->pxNetworkInterface ) )
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d005      	beq.n	800cff0 <FreeRTOS_FindEndPointOnMAC+0x38>
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cfea:	683a      	ldr	r2, [r7, #0]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d109      	bne.n	800d004 <FreeRTOS_FindEndPointOnMAC+0x4c>
            {
                if( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 )
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	33e8      	adds	r3, #232	@ 0xe8
 800cff4:	6879      	ldr	r1, [r7, #4]
 800cff6:	2206      	movs	r2, #6
 800cff8:	4618      	mov	r0, r3
 800cffa:	f015 fe0e 	bl	8022c1a <memcmp>
 800cffe:	4603      	mov	r3, r0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d007      	beq.n	800d014 <FreeRTOS_FindEndPointOnMAC+0x5c>
                {
                    break;
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d00a:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1e5      	bne.n	800cfde <FreeRTOS_FindEndPointOnMAC+0x26>
 800d012:	e000      	b.n	800d016 <FreeRTOS_FindEndPointOnMAC+0x5e>
                    break;
 800d014:	bf00      	nop
        }

        return pxEndPoint;
 800d016:	68fb      	ldr	r3, [r7, #12]
    }
 800d018:	4618      	mov	r0, r3
 800d01a:	3710      	adds	r7, #16
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	20001360 	.word	0x20001360
 800d024:	20001368 	.word	0x20001368

0800d028 <FreeRTOS_FindEndPointOnNetMask>:
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnNetMask( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
        /* The 'ulWhere' parameter is only for debugging purposes. */
        return FreeRTOS_InterfaceEndPointOnNetMask( NULL, ulIPAddress, ulWhere );
 800d032:	683a      	ldr	r2, [r7, #0]
 800d034:	6879      	ldr	r1, [r7, #4]
 800d036:	2000      	movs	r0, #0
 800d038:	f000 f806 	bl	800d048 <FreeRTOS_InterfaceEndPointOnNetMask>
 800d03c:	4603      	mov	r3, r0
    }
 800d03e:	4618      	mov	r0, r3
 800d040:	3708      	adds	r7, #8
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
	...

0800d048 <FreeRTOS_InterfaceEndPointOnNetMask>:
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_InterfaceEndPointOnNetMask( const NetworkInterface_t * pxInterface,
                                                             uint32_t ulIPAddress,
                                                             uint32_t ulWhere )
    {
 800d048:	b580      	push	{r7, lr}
 800d04a:	b086      	sub	sp, #24
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	607a      	str	r2, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d054:	4b2d      	ldr	r3, [pc, #180]	@ (800d10c <FreeRTOS_InterfaceEndPointOnNetMask+0xc4>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	617b      	str	r3, [r7, #20]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocations ) / sizeof( xRoutingStatistics.ulLocations[ 0 ] ) );
 800d05a:	230e      	movs	r3, #14
 800d05c:	613b      	str	r3, [r7, #16]

            xRoutingStatistics.ulOnNetMask++;
 800d05e:	4b2c      	ldr	r3, [pc, #176]	@ (800d110 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d060:	689b      	ldr	r3, [r3, #8]
 800d062:	3301      	adds	r3, #1
 800d064:	4a2a      	ldr	r2, [pc, #168]	@ (800d110 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d066:	6093      	str	r3, [r2, #8]

            if( ulWhere < ulLocationCount )
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d22d      	bcs.n	800d0cc <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
            {
                xRoutingStatistics.ulLocations[ ulWhere ]++;
 800d070:	4a27      	ldr	r2, [pc, #156]	@ (800d110 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	3304      	adds	r3, #4
 800d076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d07a:	1c5a      	adds	r2, r3, #1
 800d07c:	4924      	ldr	r1, [pc, #144]	@ (800d110 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	3304      	adds	r3, #4
 800d082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /*_RB_ Presumably then a broadcast reply could go out on a different end point to that on
         * which the broadcast was received - although that should not be an issue if the nodes are
         * on the same LAN it could be an issue if the nodes are on separate LAN's. */

        while( pxEndPoint != NULL )
 800d086:	e021      	b.n	800d0cc <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d005      	beq.n	800d09a <FreeRTOS_InterfaceEndPointOnNetMask+0x52>
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d094:	68fa      	ldr	r2, [r7, #12]
 800d096:	429a      	cmp	r2, r3
 800d098:	d114      	bne.n	800d0c4 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    #if ( ipconfigUSE_IPv6 != 0 )
                        if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d0a0:	f003 0304 	and.w	r3, r3, #4
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d10c      	bne.n	800d0c4 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
                    #endif
                    {
                        if( ( ulIPAddress == ~0U ) ||
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b0:	d00f      	beq.n	800d0d2 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                            ( ( ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) == ( pxEndPoint->ipv4_settings.ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) ) )
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	405a      	eors	r2, r3
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	4013      	ands	r3, r2
                        if( ( ulIPAddress == ~0U ) ||
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d006      	beq.n	800d0d2 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                        }
                    }
                #endif /* if ( ipconfigUSE_IPv4 != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d0ca:	617b      	str	r3, [r7, #20]
        while( pxEndPoint != NULL )
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d1da      	bne.n	800d088 <FreeRTOS_InterfaceEndPointOnNetMask+0x40>
        }

        /* This was only for debugging. */
        if( pxEndPoint == NULL )
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d113      	bne.n	800d100 <FreeRTOS_InterfaceEndPointOnNetMask+0xb8>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_FindEndPointOnNetMask[%d]: No match for %xip\n",
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	061a      	lsls	r2, r3, #24
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	021b      	lsls	r3, r3, #8
 800d0e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d0e4:	431a      	orrs	r2, r3
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	0a1b      	lsrs	r3, r3, #8
 800d0ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d0ee:	431a      	orrs	r2, r3
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	0e1b      	lsrs	r3, r3, #24
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	6879      	ldr	r1, [r7, #4]
 800d0fa:	4806      	ldr	r0, [pc, #24]	@ (800d114 <FreeRTOS_InterfaceEndPointOnNetMask+0xcc>)
 800d0fc:	f014 fbdc 	bl	80218b8 <lUDPLoggingPrintf>
                                     ( unsigned ) ulWhere, ( unsigned ) FreeRTOS_ntohl( ulIPAddress ) ) );
        }

        return pxEndPoint;
 800d100:	697b      	ldr	r3, [r7, #20]
    }
 800d102:	4618      	mov	r0, r3
 800d104:	3718      	adds	r7, #24
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	20001360 	.word	0x20001360
 800d110:	20001368 	.word	0x20001368
 800d114:	08025154 	.word	0x08025154

0800d118 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>:
 * @param[in] pxIPAddress The IPv6-address for which an end-point is looked-up.
 * @return An end-point that is in the same subnet as the given IP-address.
 */
        NetworkEndPoint_t * FreeRTOS_InterfaceEPInSameSubnet_IPv6( const NetworkInterface_t * pxInterface,
                                                                   const IPv6_Address_t * pxIPAddress )
        {
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d122:	4b17      	ldr	r3, [pc, #92]	@ (800d180 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x68>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	60fb      	str	r3, [r7, #12]

            /* Find the best fitting end-point to reach a given IP-address. */

            while( pxEndPoint != NULL )
 800d128:	e020      	b.n	800d16c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x54>
            {
                if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d005      	beq.n	800d13c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x24>
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d113      	bne.n	800d164 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                {
                    if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d142:	f003 0304 	and.w	r3, r3, #4
 800d146:	b2db      	uxtb	r3, r3
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d00b      	beq.n	800d164 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                    {
                        if( xCompareIPv6_Address( &( pxEndPoint->ipv6_settings.xIPAddress ), pxIPAddress, pxEndPoint->ipv6_settings.uxPrefixLength ) == 0 )
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d156:	461a      	mov	r2, r3
 800d158:	6839      	ldr	r1, [r7, #0]
 800d15a:	f7fd fc0b 	bl	800a974 <xCompareIPv6_Address>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d007      	beq.n	800d174 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5c>
                            break;
                        }
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d16a:	60fb      	str	r3, [r7, #12]
            while( pxEndPoint != NULL )
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d1db      	bne.n	800d12a <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x12>
 800d172:	e000      	b.n	800d176 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5e>
                            break;
 800d174:	bf00      	nop
            }

            return pxEndPoint;
 800d176:	68fb      	ldr	r3, [r7, #12]
        }
 800d178:	4618      	mov	r0, r3
 800d17a:	3710      	adds	r7, #16
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	20001360 	.word	0x20001360

0800d184 <pxEasyFit>:
    NetworkEndPoint_t * pxEasyFit( const NetworkInterface_t * pxNetworkInterface,
                                   const uint16_t usFrameType,
                                   const IP_Address_t * pxIPAddressFrom,
                                   const IP_Address_t * pxIPAddressTo,
                                   const MACAddress_t * pxMACAddress )
    {
 800d184:	b5b0      	push	{r4, r5, r7, lr}
 800d186:	b0b0      	sub	sp, #192	@ 0xc0
 800d188:	af04      	add	r7, sp, #16
 800d18a:	60f8      	str	r0, [r7, #12]
 800d18c:	607a      	str	r2, [r7, #4]
 800d18e:	603b      	str	r3, [r7, #0]
 800d190:	460b      	mov	r3, r1
 800d192:	817b      	strh	r3, [r7, #10]
        NetworkEndPoint_t * pxEndPoint;
        NetworkEndPoint_t * pxReturn = NULL;
 800d194:	2300      	movs	r3, #0
 800d196:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        /* endpoints found for IP-type, IP-address, and MAC-address. */
        NetworkEndPoint_t * pxFound[ rMATCH_COUNT ] = { NULL, NULL, NULL, NULL };
 800d19a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d19e:	2200      	movs	r2, #0
 800d1a0:	601a      	str	r2, [r3, #0]
 800d1a2:	605a      	str	r2, [r3, #4]
 800d1a4:	609a      	str	r2, [r3, #8]
 800d1a6:	60da      	str	r2, [r3, #12]
        BaseType_t xCount[ rMATCH_COUNT ] = { 0, 0, 0, 0 };
 800d1a8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	601a      	str	r2, [r3, #0]
 800d1b0:	605a      	str	r2, [r3, #4]
 800d1b2:	609a      	str	r2, [r3, #8]
 800d1b4:	60da      	str	r2, [r3, #12]
        BaseType_t xIndex;
        BaseType_t xIsIPv6 = ( usFrameType == ipIPv6_FRAME_TYPE ) ? pdTRUE : pdFALSE;
 800d1b6:	897b      	ldrh	r3, [r7, #10]
 800d1b8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d101      	bne.n	800d1c4 <pxEasyFit+0x40>
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e000      	b.n	800d1c6 <pxEasyFit+0x42>
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        BaseType_t xGatewayTarget = pdFALSE;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        BaseType_t xTargetGlobal = pdFALSE;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        ( void ) pxIPAddressFrom;
        ( void ) xGatewayTarget;
        ( void ) xTargetGlobal;

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 800d1d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	d123      	bne.n	800d226 <pxEasyFit+0xa2>
                    0xfe, 0x80, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01
                };
                xGatewayTarget = ( memcmp( ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, 16 ) == 0 ) ? pdTRUE : pdFALSE;
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	2210      	movs	r2, #16
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	4888      	ldr	r0, [pc, #544]	@ (800d408 <pxEasyFit+0x284>)
 800d1e6:	f015 fd18 	bl	8022c1a <memcmp>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d101      	bne.n	800d1f4 <pxEasyFit+0x70>
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	e000      	b.n	800d1f6 <pxEasyFit+0x72>
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                if( xGatewayTarget == pdTRUE )
 800d1fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d105      	bne.n	800d20e <pxEasyFit+0x8a>
                {
                    FreeRTOS_debug_printf( ( " GW address %pip to %pip\n",
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	683a      	ldr	r2, [r7, #0]
 800d206:	4619      	mov	r1, r3
 800d208:	4880      	ldr	r0, [pc, #512]	@ (800d40c <pxEasyFit+0x288>)
 800d20a:	f014 fb55 	bl	80218b8 <lUDPLoggingPrintf>
                                             ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
                                             ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes ) );
                }

                xTargetGlobal = ( xIPv6_GetIPType( &( pxIPAddressTo->xIP_IPv6 ) ) == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	4618      	mov	r0, r3
 800d212:	f000 fa15 	bl	800d640 <xIPv6_GetIPType>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d101      	bne.n	800d220 <pxEasyFit+0x9c>
 800d21c:	2301      	movs	r3, #1
 800d21e:	e000      	b.n	800d222 <pxEasyFit+0x9e>
 800d220:	2300      	movs	r3, #0
 800d222:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkInterface );
 800d226:	68f8      	ldr	r0, [r7, #12]
 800d228:	f7ff fe26 	bl	800ce78 <FreeRTOS_FirstEndPoint>
 800d22c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800d230:	e07d      	b.n	800d32e <pxEasyFit+0x1aa>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
        {
            BaseType_t xSameMACAddress = ( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ? pdTRUE : pdFALSE;
 800d232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d236:	33e8      	adds	r3, #232	@ 0xe8
 800d238:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800d23c:	2206      	movs	r2, #6
 800d23e:	4618      	mov	r0, r3
 800d240:	f015 fceb 	bl	8022c1a <memcmp>
 800d244:	4603      	mov	r3, r0
 800d246:	2b00      	cmp	r3, #0
 800d248:	d101      	bne.n	800d24e <pxEasyFit+0xca>
 800d24a:	2301      	movs	r3, #1
 800d24c:	e000      	b.n	800d250 <pxEasyFit+0xcc>
 800d24e:	2300      	movs	r3, #0
 800d250:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            if( xIsIPv6 == ( BaseType_t ) pxEndPoint->bits.bIPv6 )
 800d254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d258:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d25c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d260:	b2db      	uxtb	r3, r3
 800d262:	461a      	mov	r2, r3
 800d264:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d268:	4293      	cmp	r3, r2
 800d26a:	d159      	bne.n	800d320 <pxEasyFit+0x19c>
            {
                pxFound[ rMATCH_IP_TYPE ] = pxEndPoint;
 800d26c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d270:	67fb      	str	r3, [r7, #124]	@ 0x7c
                xCount[ rMATCH_IP_TYPE ]++;
 800d272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d274:	3301      	adds	r3, #1
 800d276:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Case default is impossible to reach because no endpoints for disabled IP type. */
                switch( xIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800d278:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d134      	bne.n	800d2ea <pxEasyFit+0x166>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ( BaseType_t ) pdTRUE:
                           {
                               IPv6_Type_t xEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800d280:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d284:	3338      	adds	r3, #56	@ 0x38
 800d286:	4618      	mov	r0, r3
 800d288:	f000 f9da 	bl	800d640 <xIPv6_GetIPType>
 800d28c:	4603      	mov	r3, r0
 800d28e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                               if( xEndpointType != eIPv6_Unknown )
 800d292:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d296:	2b05      	cmp	r3, #5
 800d298:	d035      	beq.n	800d306 <pxEasyFit+0x182>
                               {
                                   BaseType_t xEndpointGlobal = ( xEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800d29a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d101      	bne.n	800d2a6 <pxEasyFit+0x122>
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	e000      	b.n	800d2a8 <pxEasyFit+0x124>
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                                   if( ( memcmp( pxEndPoint->ipv6_settings.xIPAddress.ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 ) )
 800d2ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2b0:	3338      	adds	r3, #56	@ 0x38
 800d2b2:	6839      	ldr	r1, [r7, #0]
 800d2b4:	2210      	movs	r2, #16
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f015 fcaf 	bl	8022c1a <memcmp>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d106      	bne.n	800d2d0 <pxEasyFit+0x14c>
                                   {
                                       pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800d2c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2c6:	673b      	str	r3, [r7, #112]	@ 0x70
                                       xCount[ rMATCH_IP_ADDR ]++;
 800d2c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	663b      	str	r3, [r7, #96]	@ 0x60
                               else
                               {
                                   /* do nothing, coverity happy */
                               }
                           }
                           break;
 800d2ce:	e01a      	b.n	800d306 <pxEasyFit+0x182>
                                   else if( xTargetGlobal == xEndpointGlobal )
 800d2d0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800d2d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d114      	bne.n	800d306 <pxEasyFit+0x182>
                                       pxFound[ rMATCH_IPv6_TYPE ] = pxEndPoint;
 800d2dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2e0:	677b      	str	r3, [r7, #116]	@ 0x74
                                       xCount[ rMATCH_IPv6_TYPE ]++;
 800d2e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	667b      	str	r3, [r7, #100]	@ 0x64
                           break;
 800d2e8:	e00d      	b.n	800d306 <pxEasyFit+0x182>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ( BaseType_t ) pdFALSE:
                    default:
                        #if ( ipconfigUSE_IPv4 != 0 )
                            if( pxEndPoint->ipv4_settings.ulIPAddress == pxIPAddressTo->ulIP_IPv4 )
 800d2ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d108      	bne.n	800d30a <pxEasyFit+0x186>
                            {
                                pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800d2f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2fc:	673b      	str	r3, [r7, #112]	@ 0x70
                                xCount[ rMATCH_IP_ADDR ]++;
 800d2fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d300:	3301      	adds	r3, #1
 800d302:	663b      	str	r3, [r7, #96]	@ 0x60
                            {
                                /* do nothing, coverity happy */
                            }
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        break;
 800d304:	e001      	b.n	800d30a <pxEasyFit+0x186>
                           break;
 800d306:	bf00      	nop
 800d308:	e000      	b.n	800d30c <pxEasyFit+0x188>
                        break;
 800d30a:	bf00      	nop
                }

                if( xSameMACAddress == pdTRUE )
 800d30c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d310:	2b01      	cmp	r3, #1
 800d312:	d105      	bne.n	800d320 <pxEasyFit+0x19c>
                {
                    xCount[ rMATCH_MAC_ADDR ]++;
 800d314:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d316:	3301      	adds	r3, #1
 800d318:	66bb      	str	r3, [r7, #104]	@ 0x68
                    pxFound[ rMATCH_MAC_ADDR ] = pxEndPoint;
 800d31a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d31e:	67bb      	str	r3, [r7, #120]	@ 0x78
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
 800d320:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800d324:	68f8      	ldr	r0, [r7, #12]
 800d326:	f7ff fdc9 	bl	800cebc <FreeRTOS_NextEndPoint>
 800d32a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
             pxEndPoint != NULL;
 800d32e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d332:	2b00      	cmp	r3, #0
 800d334:	f47f af7d 	bne.w	800d232 <pxEasyFit+0xae>
                }
            }
        }

        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800d338:	2300      	movs	r3, #0
 800d33a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d33e:	e017      	b.n	800d370 <pxEasyFit+0x1ec>
        {
            if( xCount[ xIndex ] >= 1 )
 800d340:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	33b0      	adds	r3, #176	@ 0xb0
 800d348:	443b      	add	r3, r7
 800d34a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	dd09      	ble.n	800d366 <pxEasyFit+0x1e2>
            {
                pxReturn = pxFound[ xIndex ];
 800d352:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d356:	009b      	lsls	r3, r3, #2
 800d358:	33b0      	adds	r3, #176	@ 0xb0
 800d35a:	443b      	add	r3, r7
 800d35c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800d360:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                break;
 800d364:	e008      	b.n	800d378 <pxEasyFit+0x1f4>
        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800d366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d36a:	3301      	adds	r3, #1
 800d36c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d370:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d374:	2b03      	cmp	r3, #3
 800d376:	dde3      	ble.n	800d340 <pxEasyFit+0x1bc>
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( pxReturn == NULL )
 800d378:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d13c      	bne.n	800d3fa <pxEasyFit+0x276>
            {
                char pcBufferFrom[ 40 ];
                char pcBufferTo[ 40 ];
                BaseType_t xFamily = ( usFrameType == ipIPv6_FRAME_TYPE ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET4;
 800d380:	897b      	ldrh	r3, [r7, #10]
 800d382:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d386:	4293      	cmp	r3, r2
 800d388:	d101      	bne.n	800d38e <pxEasyFit+0x20a>
 800d38a:	230a      	movs	r3, #10
 800d38c:	e000      	b.n	800d390 <pxEasyFit+0x20c>
 800d38e:	2302      	movs	r3, #2
 800d390:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                const char * xRetNtopTo;
                const char * xRetNtopFrom;
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
                                                 ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes,
 800d394:	6839      	ldr	r1, [r7, #0]
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
 800d396:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800d39a:	2328      	movs	r3, #40	@ 0x28
 800d39c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800d3a0:	f001 fc70 	bl	800ec84 <FreeRTOS_inet_ntop>
 800d3a4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
                                                 pcBufferTo,
                                                 sizeof( pcBufferTo ) );
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
                                                   ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
 800d3a8:	6879      	ldr	r1, [r7, #4]
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
 800d3aa:	f107 0210 	add.w	r2, r7, #16
 800d3ae:	2328      	movs	r3, #40	@ 0x28
 800d3b0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800d3b4:	f001 fc66 	bl	800ec84 <FreeRTOS_inet_ntop>
 800d3b8:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
                                                   pcBufferFrom,
                                                   sizeof( pcBufferFrom ) );

                FreeRTOS_debug_printf( ( "EasyFit[%x]: %d %d %d ( %s ->%s ) BAD\n",
 800d3bc:	8979      	ldrh	r1, [r7, #10]
 800d3be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d3c0:	461c      	mov	r4, r3
 800d3c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3c4:	461d      	mov	r5, r3
 800d3c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d002      	beq.n	800d3d8 <pxEasyFit+0x254>
 800d3d2:	f107 0310 	add.w	r3, r7, #16
 800d3d6:	e000      	b.n	800d3da <pxEasyFit+0x256>
 800d3d8:	4b0d      	ldr	r3, [pc, #52]	@ (800d410 <pxEasyFit+0x28c>)
 800d3da:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800d3de:	2a00      	cmp	r2, #0
 800d3e0:	d002      	beq.n	800d3e8 <pxEasyFit+0x264>
 800d3e2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800d3e6:	e000      	b.n	800d3ea <pxEasyFit+0x266>
 800d3e8:	4a09      	ldr	r2, [pc, #36]	@ (800d410 <pxEasyFit+0x28c>)
 800d3ea:	9202      	str	r2, [sp, #8]
 800d3ec:	9301      	str	r3, [sp, #4]
 800d3ee:	9000      	str	r0, [sp, #0]
 800d3f0:	462b      	mov	r3, r5
 800d3f2:	4622      	mov	r2, r4
 800d3f4:	4807      	ldr	r0, [pc, #28]	@ (800d414 <pxEasyFit+0x290>)
 800d3f6:	f014 fa5f 	bl	80218b8 <lUDPLoggingPrintf>
                                         ( xRetNtopFrom == NULL ) ? "INVALID" : pcBufferFrom,
                                         ( xRetNtopTo == NULL ) ? "INVALID" : pcBufferTo ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return pxReturn;
 800d3fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
    }
 800d3fe:	4618      	mov	r0, r3
 800d400:	37b0      	adds	r7, #176	@ 0xb0
 800d402:	46bd      	mov	sp, r7
 800d404:	bdb0      	pop	{r4, r5, r7, pc}
 800d406:	bf00      	nop
 800d408:	08026fa0 	.word	0x08026fa0
 800d40c:	080251f0 	.word	0x080251f0
 800d410:	0802520c 	.word	0x0802520c
 800d414:	08025214 	.word	0x08025214

0800d418 <FreeRTOS_MatchingEndpoint>:
 *
 * @return The end-point that should handle the incoming Ethernet packet.
 */
    NetworkEndPoint_t * FreeRTOS_MatchingEndpoint( const NetworkInterface_t * pxNetworkInterface,
                                                   const uint8_t * pucEthernetBuffer )
    {
 800d418:	b590      	push	{r4, r7, lr}
 800d41a:	b097      	sub	sp, #92	@ 0x5c
 800d41c:	af02      	add	r7, sp, #8
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = NULL;
 800d422:	2300      	movs	r3, #0
 800d424:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolPacket_t * pxPacket = ( ( const ProtocolPacket_t * ) pucEthernetBuffer );
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	647b      	str	r3, [r7, #68]	@ 0x44

        #if ( ipconfigUSE_IPv6 != 0 )
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	643b      	str	r3, [r7, #64]	@ 0x40
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        configASSERT( pucEthernetBuffer != NULL );
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d104      	bne.n	800d43e <FreeRTOS_MatchingEndpoint+0x26>
 800d434:	f44f 7164 	mov.w	r1, #912	@ 0x390
 800d438:	485e      	ldr	r0, [pc, #376]	@ (800d5b4 <FreeRTOS_MatchingEndpoint+0x19c>)
 800d43a:	f7f4 f917 	bl	800166c <vAssertCalled>
        #ifndef _lint
        {
            /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            uintptr_t uxAddress = ( uintptr_t ) pucEthernetBuffer;
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxAddress += 2U;
 800d442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d444:	3302      	adds	r3, #2
 800d446:	63fb      	str	r3, [r7, #60]	@ 0x3c
            configASSERT( ( uxAddress % 4U ) == 0U );
 800d448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d44a:	f003 0303 	and.w	r3, r3, #3
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d004      	beq.n	800d45c <FreeRTOS_MatchingEndpoint+0x44>
 800d452:	f240 319b 	movw	r1, #923	@ 0x39b
 800d456:	4857      	ldr	r0, [pc, #348]	@ (800d5b4 <FreeRTOS_MatchingEndpoint+0x19c>)
 800d458:	f7f4 f908 	bl	800166c <vAssertCalled>
         */

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            /* Some stats while developing. */
            xRoutingStatistics.ulMatching++;
 800d45c:	4b56      	ldr	r3, [pc, #344]	@ (800d5b8 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	3301      	adds	r3, #1
 800d462:	4a55      	ldr	r2, [pc, #340]	@ (800d5b8 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800d464:	60d3      	str	r3, [r2, #12]
        }
        #endif
        {
            uint16_t usFrameType = pxPacket->xUDPPacket.xEthernetHeader.usFrameType;
 800d466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d468:	7b1a      	ldrb	r2, [r3, #12]
 800d46a:	7b5b      	ldrb	r3, [r3, #13]
 800d46c:	021b      	lsls	r3, r3, #8
 800d46e:	4313      	orrs	r3, r2
 800d470:	877b      	strh	r3, [r7, #58]	@ 0x3a
            IP_Address_t xIPAddressFrom;
            IP_Address_t xIPAddressTo;
            MACAddress_t xMACAddress;
            BaseType_t xDoProcessPacket = pdFALSE;
 800d472:	2300      	movs	r3, #0
 800d474:	64bb      	str	r3, [r7, #72]	@ 0x48

            ( void ) memset( xIPAddressFrom.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800d476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d47a:	2210      	movs	r2, #16
 800d47c:	2100      	movs	r1, #0
 800d47e:	4618      	mov	r0, r3
 800d480:	f014 fd43 	bl	8021f0a <memset>
            ( void ) memset( xIPAddressTo.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800d484:	f107 0314 	add.w	r3, r7, #20
 800d488:	2210      	movs	r2, #16
 800d48a:	2100      	movs	r1, #0
 800d48c:	4618      	mov	r0, r3
 800d48e:	f014 fd3c 	bl	8021f0a <memset>

            switch( usFrameType )
 800d492:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d494:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d498:	4293      	cmp	r3, r2
 800d49a:	d009      	beq.n	800d4b0 <FreeRTOS_MatchingEndpoint+0x98>
 800d49c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	dc6a      	bgt.n	800d57a <FreeRTOS_MatchingEndpoint+0x162>
 800d4a4:	2b08      	cmp	r3, #8
 800d4a6:	d05d      	beq.n	800d564 <FreeRTOS_MatchingEndpoint+0x14c>
 800d4a8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800d4ac:	d015      	beq.n	800d4da <FreeRTOS_MatchingEndpoint+0xc2>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES == 1 )
                        /* Custom frame types, match by MAC address only. */
                        xDoProcessPacket = pdTRUE;
                    #endif

                    break;
 800d4ae:	e064      	b.n	800d57a <FreeRTOS_MatchingEndpoint+0x162>
                        ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d4b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4b2:	3316      	adds	r3, #22
 800d4b4:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800d4b8:	6818      	ldr	r0, [r3, #0]
 800d4ba:	6859      	ldr	r1, [r3, #4]
 800d4bc:	689a      	ldr	r2, [r3, #8]
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d4c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4c4:	3326      	adds	r3, #38	@ 0x26
 800d4c6:	f107 0414 	add.w	r4, r7, #20
 800d4ca:	6818      	ldr	r0, [r3, #0]
 800d4cc:	6859      	ldr	r1, [r3, #4]
 800d4ce:	689a      	ldr	r2, [r3, #8]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        xDoProcessPacket = pdTRUE;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800d4d8:	e050      	b.n	800d57c <FreeRTOS_MatchingEndpoint+0x164>
                        const ARPPacket_t * pxARPFrame = ( const ARPPacket_t * ) pucEthernetBuffer;
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	637b      	str	r3, [r7, #52]	@ 0x34
                        if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REQUEST )
 800d4de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4e0:	8a9b      	ldrh	r3, [r3, #20]
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d4e8:	d108      	bne.n	800d4fc <FreeRTOS_MatchingEndpoint+0xe4>
                            ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800d4ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4ec:	331c      	adds	r3, #28
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	627b      	str	r3, [r7, #36]	@ 0x24
                            xIPAddressTo.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800d4f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4f4:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800d4f8:	617b      	str	r3, [r7, #20]
 800d4fa:	e00d      	b.n	800d518 <FreeRTOS_MatchingEndpoint+0x100>
                        else if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REPLY )
 800d4fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4fe:	8a9b      	ldrh	r3, [r3, #20]
 800d500:	b29b      	uxth	r3, r3
 800d502:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d506:	d107      	bne.n	800d518 <FreeRTOS_MatchingEndpoint+0x100>
                            ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800d508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d50a:	331c      	adds	r3, #28
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	617b      	str	r3, [r7, #20]
                            xIPAddressFrom.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800d510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d512:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800d516:	627b      	str	r3, [r7, #36]	@ 0x24
                        FreeRTOS_debug_printf( ( "pxEasyFit: ARP %xip -> %xip\n", ( unsigned ) FreeRTOS_ntohl( xIPAddressFrom.ulIP_IPv4 ), ( unsigned ) FreeRTOS_ntohl( xIPAddressTo.ulIP_IPv4 ) ) );
 800d518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d51a:	061a      	lsls	r2, r3, #24
 800d51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d51e:	021b      	lsls	r3, r3, #8
 800d520:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d524:	431a      	orrs	r2, r3
 800d526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d528:	0a1b      	lsrs	r3, r3, #8
 800d52a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d52e:	431a      	orrs	r2, r3
 800d530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d532:	0e1b      	lsrs	r3, r3, #24
 800d534:	ea42 0103 	orr.w	r1, r2, r3
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	061a      	lsls	r2, r3, #24
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	021b      	lsls	r3, r3, #8
 800d540:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d544:	431a      	orrs	r2, r3
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	0a1b      	lsrs	r3, r3, #8
 800d54a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d54e:	431a      	orrs	r2, r3
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	0e1b      	lsrs	r3, r3, #24
 800d554:	4313      	orrs	r3, r2
 800d556:	461a      	mov	r2, r3
 800d558:	4818      	ldr	r0, [pc, #96]	@ (800d5bc <FreeRTOS_MatchingEndpoint+0x1a4>)
 800d55a:	f014 f9ad 	bl	80218b8 <lUDPLoggingPrintf>
                    xDoProcessPacket = pdTRUE;
 800d55e:	2301      	movs	r3, #1
 800d560:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800d562:	e00b      	b.n	800d57c <FreeRTOS_MatchingEndpoint+0x164>
                        xIPAddressFrom.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulSourceIPAddress;
 800d564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d566:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800d56a:	627b      	str	r3, [r7, #36]	@ 0x24
                        xIPAddressTo.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulDestinationIPAddress;
 800d56c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d56e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800d572:	617b      	str	r3, [r7, #20]
                        xDoProcessPacket = pdTRUE;
 800d574:	2301      	movs	r3, #1
 800d576:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800d578:	e000      	b.n	800d57c <FreeRTOS_MatchingEndpoint+0x164>
                    break;
 800d57a:	bf00      	nop
            }

            if( xDoProcessPacket == pdTRUE )
 800d57c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d113      	bne.n	800d5aa <FreeRTOS_MatchingEndpoint+0x192>
            {
                ( void ) memcpy( xMACAddress.ucBytes, pxPacket->xUDPPacket.xEthernetHeader.xDestinationAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800d582:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d584:	f107 030c 	add.w	r3, r7, #12
 800d588:	6810      	ldr	r0, [r2, #0]
 800d58a:	6018      	str	r0, [r3, #0]
 800d58c:	8892      	ldrh	r2, [r2, #4]
 800d58e:	809a      	strh	r2, [r3, #4]
                pxEndPoint = pxEasyFit( pxNetworkInterface,
 800d590:	f107 0014 	add.w	r0, r7, #20
 800d594:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d598:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 800d59a:	f107 030c 	add.w	r3, r7, #12
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f7ff fdee 	bl	800d184 <pxEasyFit>
 800d5a8:	64f8      	str	r0, [r7, #76]	@ 0x4c
                                        &xIPAddressFrom,
                                        &xIPAddressTo,
                                        &xMACAddress );
            }
        }
        return pxEndPoint;
 800d5aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3754      	adds	r7, #84	@ 0x54
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd90      	pop	{r4, r7, pc}
 800d5b4:	0802523c 	.word	0x0802523c
 800d5b8:	20001368 	.word	0x20001368
 800d5bc:	0802526c 	.word	0x0802526c

0800d5c0 <FreeRTOS_FindGateWay>:
 * @param[in] xIPType The type of Gateway to look for ( ipTYPE_IPv4 or ipTYPE_IPv6 ).
 *
 * @return The end-point that will lead to the gateway, or NULL when no gateway was found.
 */
    NetworkEndPoint_t * FreeRTOS_FindGateWay( BaseType_t xIPType )
    {
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d5c8:	4b1b      	ldr	r3, [pc, #108]	@ (800d638 <FreeRTOS_FindGateWay+0x78>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	60fb      	str	r3, [r7, #12]

        while( pxEndPoint != NULL )
 800d5ce:	e028      	b.n	800d622 <FreeRTOS_FindGateWay+0x62>
                if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U ) /* access to ipv4_settings is checked. */
                {
                    break;
                }
            #else
                if( ( xIPType == ( BaseType_t ) ipTYPE_IPv6 ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2b60      	cmp	r3, #96	@ 0x60
 800d5d4:	d112      	bne.n	800d5fc <FreeRTOS_FindGateWay+0x3c>
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d5dc:	f003 0304 	and.w	r3, r3, #4
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d00a      	beq.n	800d5fc <FreeRTOS_FindGateWay+0x3c>
                {
                    /* Check if the IP-address is non-zero. */
                    if( memcmp( FreeRTOS_in6addr_any.ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) != 0 )
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	335c      	adds	r3, #92	@ 0x5c
 800d5ea:	2210      	movs	r2, #16
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	4813      	ldr	r0, [pc, #76]	@ (800d63c <FreeRTOS_FindGateWay+0x7c>)
 800d5f0:	f015 fb13 	bl	8022c1a <memcmp>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d00f      	beq.n	800d61a <FreeRTOS_FindGateWay+0x5a>
                    {
                        break;
 800d5fa:	e017      	b.n	800d62c <FreeRTOS_FindGateWay+0x6c>
                    }
                }

                #if ( ipconfigUSE_IPv4 != 0 )
                    else
                    if( ( xIPType == ( BaseType_t ) ipTYPE_IPv4 ) && ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) )
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2b40      	cmp	r3, #64	@ 0x40
 800d600:	d10b      	bne.n	800d61a <FreeRTOS_FindGateWay+0x5a>
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d608:	f003 0304 	and.w	r3, r3, #4
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d103      	bne.n	800d61a <FreeRTOS_FindGateWay+0x5a>
                    {
                        if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U )
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d107      	bne.n	800d62a <FreeRTOS_FindGateWay+0x6a>
                else
                {
                    /* This end-point is not the right IP-type. */
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            pxEndPoint = pxEndPoint->pxNext;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d620:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d1d3      	bne.n	800d5d0 <FreeRTOS_FindGateWay+0x10>
 800d628:	e000      	b.n	800d62c <FreeRTOS_FindGateWay+0x6c>
                            break;
 800d62a:	bf00      	nop
        }

        return pxEndPoint;
 800d62c:	68fb      	ldr	r3, [r7, #12]
    }
 800d62e:	4618      	mov	r0, r3
 800d630:	3710      	adds	r7, #16
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	20001360 	.word	0x20001360
 800d63c:	08026f58 	.word	0x08026f58

0800d640 <xIPv6_GetIPType>:
 * @param[in] pxAddress The IPv6 address whose type needs to be returned.
 * @returns The IP type of the given address.
 */
#if ( ipconfigUSE_IPv6 != 0 )
    IPv6_Type_t xIPv6_GetIPType( const IPv6_Address_t * pxAddress )
    {
 800d640:	b580      	push	{r7, lr}
 800d642:	b086      	sub	sp, #24
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
        IPv6_Type_t eResult = eIPv6_Unknown;
 800d648:	2305      	movs	r3, #5
 800d64a:	75fb      	strb	r3, [r7, #23]
            { eIPv6_SiteLocal, 0xFFC0U, 0xFEC0U }, /* 1111 1110 11 */
            { eIPv6_Multicast, 0xFF00U, 0xFF00U }, /* 1111 1111 */
            { eIPv6_Loopback,  0xFFFFU, 0x0000U }, /* 0000 0000 ::1 */
        };

        if( pxAddress != NULL )
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d046      	beq.n	800d6e0 <xIPv6_GetIPType+0xa0>
        {
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800d652:	2300      	movs	r3, #0
 800d654:	613b      	str	r3, [r7, #16]
 800d656:	e040      	b.n	800d6da <xIPv6_GetIPType+0x9a>
            {
                uint16_t usAddress =
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	021b      	lsls	r3, r3, #8
 800d65e:	b21a      	sxth	r2, r3
                                   ( ( uint16_t ) pxAddress->ucBytes[ 1 ] ) );
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	785b      	ldrb	r3, [r3, #1]
 800d664:	b21b      	sxth	r3, r3
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800d666:	4313      	orrs	r3, r2
 800d668:	b21b      	sxth	r3, r3
                uint16_t usAddress =
 800d66a:	81fb      	strh	r3, [r7, #14]

                if( xIPCouples[ xIndex ].eType == eIPv6_Loopback )
 800d66c:	491f      	ldr	r1, [pc, #124]	@ (800d6ec <xIPv6_GetIPType+0xac>)
 800d66e:	693a      	ldr	r2, [r7, #16]
 800d670:	4613      	mov	r3, r2
 800d672:	005b      	lsls	r3, r3, #1
 800d674:	4413      	add	r3, r2
 800d676:	005b      	lsls	r3, r3, #1
 800d678:	440b      	add	r3, r1
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	2b04      	cmp	r3, #4
 800d67e:	d108      	bne.n	800d692 <xIPv6_GetIPType+0x52>
                {
                    if( xIsIPv6Loopback( pxAddress ) != pdFALSE )
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f7fd f929 	bl	800a8d8 <xIsIPv6Loopback>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d002      	beq.n	800d692 <xIPv6_GetIPType+0x52>
                    {
                        eResult = eIPv6_Loopback;
 800d68c:	2304      	movs	r3, #4
 800d68e:	75fb      	strb	r3, [r7, #23]
                        break;
 800d690:	e026      	b.n	800d6e0 <xIPv6_GetIPType+0xa0>
                    }
                }

                if( ( usAddress & xIPCouples[ xIndex ].usMask ) == xIPCouples[ xIndex ].usExpected )
 800d692:	4916      	ldr	r1, [pc, #88]	@ (800d6ec <xIPv6_GetIPType+0xac>)
 800d694:	693a      	ldr	r2, [r7, #16]
 800d696:	4613      	mov	r3, r2
 800d698:	005b      	lsls	r3, r3, #1
 800d69a:	4413      	add	r3, r2
 800d69c:	005b      	lsls	r3, r3, #1
 800d69e:	440b      	add	r3, r1
 800d6a0:	3302      	adds	r3, #2
 800d6a2:	881a      	ldrh	r2, [r3, #0]
 800d6a4:	89fb      	ldrh	r3, [r7, #14]
 800d6a6:	4013      	ands	r3, r2
 800d6a8:	b299      	uxth	r1, r3
 800d6aa:	4810      	ldr	r0, [pc, #64]	@ (800d6ec <xIPv6_GetIPType+0xac>)
 800d6ac:	693a      	ldr	r2, [r7, #16]
 800d6ae:	4613      	mov	r3, r2
 800d6b0:	005b      	lsls	r3, r3, #1
 800d6b2:	4413      	add	r3, r2
 800d6b4:	005b      	lsls	r3, r3, #1
 800d6b6:	4403      	add	r3, r0
 800d6b8:	3304      	adds	r3, #4
 800d6ba:	881b      	ldrh	r3, [r3, #0]
 800d6bc:	4299      	cmp	r1, r3
 800d6be:	d109      	bne.n	800d6d4 <xIPv6_GetIPType+0x94>
                {
                    eResult = xIPCouples[ xIndex ].eType;
 800d6c0:	490a      	ldr	r1, [pc, #40]	@ (800d6ec <xIPv6_GetIPType+0xac>)
 800d6c2:	693a      	ldr	r2, [r7, #16]
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	005b      	lsls	r3, r3, #1
 800d6c8:	4413      	add	r3, r2
 800d6ca:	005b      	lsls	r3, r3, #1
 800d6cc:	440b      	add	r3, r1
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	75fb      	strb	r3, [r7, #23]
                    break;
 800d6d2:	e005      	b.n	800d6e0 <xIPv6_GetIPType+0xa0>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	613b      	str	r3, [r7, #16]
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	2b04      	cmp	r3, #4
 800d6de:	ddbb      	ble.n	800d658 <xIPv6_GetIPType+0x18>
                }
            }
        }

        return eResult;
 800d6e0:	7dfb      	ldrb	r3, [r7, #23]
    }
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3718      	adds	r7, #24
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	08026fb0 	.word	0x08026fb0

0800d6f0 <pcEndpointName>:
 *          The string will be "NULL" if the end point pointer is NULL.
 */
    const char * pcEndpointName( const NetworkEndPoint_t * pxEndPoint,
                                 char * pcBuffer,
                                 size_t uxSize )
    {
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	60b9      	str	r1, [r7, #8]
 800d6fa:	607a      	str	r2, [r7, #4]
        if( pxEndPoint == NULL )
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d105      	bne.n	800d70e <pcEndpointName+0x1e>
        {
            /* MISRA Ref 21.6.1 [snprintf and logging] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
            /* coverity[misra_c_2012_rule_21_6_violation] */
            ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800d702:	4a16      	ldr	r2, [pc, #88]	@ (800d75c <pcEndpointName+0x6c>)
 800d704:	6879      	ldr	r1, [r7, #4]
 800d706:	68b8      	ldr	r0, [r7, #8]
 800d708:	f015 f902 	bl	8022910 <snprintf>
 800d70c:	e020      	b.n	800d750 <pcEndpointName+0x60>
        }
        else
        {
            switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d714:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d002      	beq.n	800d724 <pcEndpointName+0x34>
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d007      	beq.n	800d732 <pcEndpointName+0x42>
 800d722:	e00f      	b.n	800d744 <pcEndpointName+0x54>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
                                                     ( const void * ) &( pxEndPoint->ipv4_settings.ulIPAddress ),
 800d724:	68f9      	ldr	r1, [r7, #12]
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	68ba      	ldr	r2, [r7, #8]
 800d72a:	2002      	movs	r0, #2
 800d72c:	f001 faaa 	bl	800ec84 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800d730:	e00e      	b.n	800d750 <pcEndpointName+0x60>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
                                                     pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f103 0138 	add.w	r1, r3, #56	@ 0x38
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	68ba      	ldr	r2, [r7, #8]
 800d73c:	200a      	movs	r0, #10
 800d73e:	f001 faa1 	bl	800ec84 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800d742:	e005      	b.n	800d750 <pcEndpointName+0x60>
                default:
                    /* MISRA 16.4 Compliance */
                    /* MISRA Ref 21.6.1 [snprintf and logging] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
                    /* coverity[misra_c_2012_rule_21_6_violation] */
                    ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800d744:	4a05      	ldr	r2, [pc, #20]	@ (800d75c <pcEndpointName+0x6c>)
 800d746:	6879      	ldr	r1, [r7, #4]
 800d748:	68b8      	ldr	r0, [r7, #8]
 800d74a:	f015 f8e1 	bl	8022910 <snprintf>
                    break;
 800d74e:	bf00      	nop
            }
        }

        return pcBuffer;
 800d750:	68bb      	ldr	r3, [r7, #8]
    }
 800d752:	4618      	mov	r0, r3
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	0802528c 	.word	0x0802528c

0800d760 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b086      	sub	sp, #24
 800d764:	af00      	add	r7, sp, #0
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( xSocketValid( pxSocket ) == pdFALSE )
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	f002 fb21 	bl	800fdb4 <xSocketValid>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d102      	bne.n	800d77e <prvValidSocket+0x1e>
    {
        xReturn = pdFALSE;
 800d778:	2300      	movs	r3, #0
 800d77a:	617b      	str	r3, [r7, #20]
 800d77c:	e015      	b.n	800d7aa <prvValidSocket+0x4a>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d006      	beq.n	800d792 <prvValidSocket+0x32>
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	69db      	ldr	r3, [r3, #28]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d102      	bne.n	800d792 <prvValidSocket+0x32>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800d78c:	2300      	movs	r3, #0
 800d78e:	617b      	str	r3, [r7, #20]
 800d790:	e00b      	b.n	800d7aa <prvValidSocket+0x4a>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d002      	beq.n	800d7a6 <prvValidSocket+0x46>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	617b      	str	r3, [r7, #20]
 800d7a4:	e001      	b.n	800d7aa <prvValidSocket+0x4a>
    }
    else
    {
        xReturn = pdTRUE;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800d7aa:	697b      	ldr	r3, [r7, #20]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3718      	adds	r7, #24
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800d7b8:	4803      	ldr	r0, [pc, #12]	@ (800d7c8 <vNetworkSocketsInit+0x14>)
 800d7ba:	f7f5 fa49 	bl	8002c50 <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800d7be:	4803      	ldr	r0, [pc, #12]	@ (800d7cc <vNetworkSocketsInit+0x18>)
 800d7c0:	f7f5 fa46 	bl	8002c50 <vListInitialise>
    }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800d7c4:	bf00      	nop
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	2000142c 	.word	0x2000142c
 800d7cc:	20001440 	.word	0x20001440

0800d7d0 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b086      	sub	sp, #24
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	60b9      	str	r1, [r7, #8]
 800d7da:	607a      	str	r2, [r7, #4]
 800d7dc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800d7e6:	f7fb ff97 	bl	8009718 <xIPIsNetworkTaskReady>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d102      	bne.n	800d7f6 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	617b      	str	r3, [r7, #20]
 800d7f4:	e05e      	b.n	800d8b4 <prvDetermineSocketSize+0xe4>

            configASSERT( xDomain == FREERTOS_AF_INET6 );
        }
        #else /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */
        {
            if( ( xDomain != FREERTOS_AF_INET ) && ( xDomain != FREERTOS_AF_INET6 ) )
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2b02      	cmp	r3, #2
 800d7fa:	d004      	beq.n	800d806 <prvDetermineSocketSize+0x36>
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2b0a      	cmp	r3, #10
 800d800:	d001      	beq.n	800d806 <prvDetermineSocketSize+0x36>
            {
                xReturn = pdFAIL;
 800d802:	2300      	movs	r3, #0
 800d804:	617b      	str	r3, [r7, #20]
            }

            configASSERT( ( xDomain == FREERTOS_AF_INET ) || ( xDomain == FREERTOS_AF_INET6 ) );
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2b02      	cmp	r3, #2
 800d80a:	d002      	beq.n	800d812 <prvDetermineSocketSize+0x42>
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2b0a      	cmp	r3, #10
 800d810:	d101      	bne.n	800d816 <prvDetermineSocketSize+0x46>
 800d812:	2301      	movs	r3, #1
 800d814:	e000      	b.n	800d818 <prvDetermineSocketSize+0x48>
 800d816:	2300      	movs	r3, #0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d104      	bne.n	800d826 <prvDetermineSocketSize+0x56>
 800d81c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800d820:	4827      	ldr	r0, [pc, #156]	@ (800d8c0 <prvDetermineSocketSize+0xf0>)
 800d822:	f7f3 ff23 	bl	800166c <vAssertCalled>
        }
        #endif /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800d826:	4b27      	ldr	r3, [pc, #156]	@ (800d8c4 <prvDetermineSocketSize+0xf4>)
 800d828:	689b      	ldr	r3, [r3, #8]
 800d82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d82e:	d004      	beq.n	800d83a <prvDetermineSocketSize+0x6a>
 800d830:	f240 11f9 	movw	r1, #505	@ 0x1f9
 800d834:	4822      	ldr	r0, [pc, #136]	@ (800d8c0 <prvDetermineSocketSize+0xf0>)
 800d836:	f7f3 ff19 	bl	800166c <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
        {
            /* Check if the TCP socket-list has been initialised. */
            configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800d83a:	4b23      	ldr	r3, [pc, #140]	@ (800d8c8 <prvDetermineSocketSize+0xf8>)
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d842:	d004      	beq.n	800d84e <prvDetermineSocketSize+0x7e>
 800d844:	f240 11fd 	movw	r1, #509	@ 0x1fd
 800d848:	481d      	ldr	r0, [pc, #116]	@ (800d8c0 <prvDetermineSocketSize+0xf0>)
 800d84a:	f7f3 ff0f 	bl	800166c <vAssertCalled>
        }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2b11      	cmp	r3, #17
 800d852:	d110      	bne.n	800d876 <prvDetermineSocketSize+0xa6>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	2b02      	cmp	r3, #2
 800d858:	d009      	beq.n	800d86e <prvDetermineSocketSize+0x9e>
            {
                xReturn = pdFAIL;
 800d85a:	2300      	movs	r3, #0
 800d85c:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d004      	beq.n	800d86e <prvDetermineSocketSize+0x9e>
 800d864:	f240 2106 	movw	r1, #518	@ 0x206
 800d868:	4815      	ldr	r0, [pc, #84]	@ (800d8c0 <prvDetermineSocketSize+0xf0>)
 800d86a:	f7f3 feff 	bl	800166c <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	2270      	movs	r2, #112	@ 0x70
 800d872:	601a      	str	r2, [r3, #0]
 800d874:	e01e      	b.n	800d8b4 <prvDetermineSocketSize+0xe4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2b06      	cmp	r3, #6
 800d87a:	d111      	bne.n	800d8a0 <prvDetermineSocketSize+0xd0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d009      	beq.n	800d896 <prvDetermineSocketSize+0xc6>
                {
                    xReturn = pdFAIL;
 800d882:	2300      	movs	r3, #0
 800d884:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d004      	beq.n	800d896 <prvDetermineSocketSize+0xc6>
 800d88c:	f240 2113 	movw	r1, #531	@ 0x213
 800d890:	480b      	ldr	r0, [pc, #44]	@ (800d8c0 <prvDetermineSocketSize+0xf0>)
 800d892:	f7f3 feeb 	bl	800166c <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d89c:	601a      	str	r2, [r3, #0]
 800d89e:	e009      	b.n	800d8b4 <prvDetermineSocketSize+0xe4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	d004      	beq.n	800d8b4 <prvDetermineSocketSize+0xe4>
 800d8aa:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800d8ae:	4804      	ldr	r0, [pc, #16]	@ (800d8c0 <prvDetermineSocketSize+0xf0>)
 800d8b0:	f7f3 fedc 	bl	800166c <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800d8b4:	697b      	ldr	r3, [r7, #20]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3718      	adds	r7, #24
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	08025294 	.word	0x08025294
 800d8c4:	2000142c 	.word	0x2000142c
 800d8c8:	20001440 	.word	0x20001440

0800d8cc <prvInitialiseTCPFields>:
 * @param[in] uxSocketSize The calculated size of the socket, only used to
 *                          gather memory usage statistics.
 */
    static void prvInitialiseTCPFields( FreeRTOS_Socket_t * pxSocket,
                                        size_t uxSocketSize )
    {
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
        ( void ) uxSocketSize;
        /* Lint wants at least a comment, in case the macro is empty. */
        iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
        /* StreamSize is expressed in number of bytes */
        /* Round up buffer sizes to nearest multiple of MSS */
        pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800d8dc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxSocket->bits.bIsIPv6 != 0U )
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	7a1b      	ldrb	r3, [r3, #8]
 800d8e4:	f003 0301 	and.w	r3, r3, #1
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d00a      	beq.n	800d904 <prvInitialiseTCPFields+0x38>
            {
                uint16_t usDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 800d8ee:	2314      	movs	r3, #20
 800d8f0:	81fb      	strh	r3, [r7, #14]

                /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
                 * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
                pxSocket->u.xTCP.usMSS = ( uint16_t ) ( pxSocket->u.xTCP.usMSS - usDifference );
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800d8f8:	89fb      	ldrh	r3, [r7, #14]
 800d8fa:	1ad3      	subs	r3, r2, r3
 800d8fc:	b29a      	uxth	r2, r3
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
            }
        #endif /* ipconfigUSE_IPv6 != 0 */

        pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d90a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800d90e:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800d912:	f640 3068 	movw	r0, #2920	@ 0xb68
 800d916:	f7fc fc85 	bl	800a224 <FreeRTOS_round_up>
 800d91a:	4602      	mov	r2, r0
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        /* Use half of the buffer size of the TCP windows */
        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d928:	08db      	lsrs	r3, r3, #3
 800d92a:	4a10      	ldr	r2, [pc, #64]	@ (800d96c <prvInitialiseTCPFields+0xa0>)
 800d92c:	fba2 2303 	umull	r2, r3, r2, r3
 800d930:	099b      	lsrs	r3, r3, #6
 800d932:	4619      	mov	r1, r3
 800d934:	2001      	movs	r0, #1
 800d936:	f7fc fc35 	bl	800a1a4 <FreeRTOS_max_size_t>
 800d93a:	4602      	mov	r2, r0
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d948:	08db      	lsrs	r3, r3, #3
 800d94a:	4a08      	ldr	r2, [pc, #32]	@ (800d96c <prvInitialiseTCPFields+0xa0>)
 800d94c:	fba2 2303 	umull	r2, r3, r2, r3
 800d950:	099b      	lsrs	r3, r3, #6
 800d952:	4619      	mov	r1, r3
 800d954:	2001      	movs	r0, #1
 800d956:	f7fc fc25 	bl	800a1a4 <FreeRTOS_max_size_t>
 800d95a:	4602      	mov	r2, r0
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        #endif

        /* The above values are just defaults, and can be overridden by
         * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
         * socket is connected and data is exchanged. */
    }
 800d962:	bf00      	nop
 800d964:	3710      	adds	r7, #16
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	2ce33e6d 	.word	0x2ce33e6d

0800d970 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b08a      	sub	sp, #40	@ 0x28
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800d97c:	2301      	movs	r3, #1
 800d97e:	617b      	str	r3, [r7, #20]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;
    BaseType_t xProtocolCpy = xProtocol;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	623b      	str	r3, [r7, #32]

    configASSERT( ( xDomain == FREERTOS_AF_INET6 ) || ( xDomain == FREERTOS_AF_INET ) );
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2b0a      	cmp	r3, #10
 800d988:	d002      	beq.n	800d990 <FreeRTOS_socket+0x20>
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	2b02      	cmp	r3, #2
 800d98e:	d101      	bne.n	800d994 <FreeRTOS_socket+0x24>
 800d990:	2301      	movs	r3, #1
 800d992:	e000      	b.n	800d996 <FreeRTOS_socket+0x26>
 800d994:	2300      	movs	r3, #0
 800d996:	2b00      	cmp	r3, #0
 800d998:	d104      	bne.n	800d9a4 <FreeRTOS_socket+0x34>
 800d99a:	f240 2171 	movw	r1, #625	@ 0x271
 800d99e:	4845      	ldr	r0, [pc, #276]	@ (800dab4 <FreeRTOS_socket+0x144>)
 800d9a0:	f7f3 fe64 	bl	800166c <vAssertCalled>
         * to passing 0 as defined by POSIX, indicates to the socket layer that it
         * should pick a sensible default protocol based off the given socket type.
         * If we can't, prvDetermineSocketSize will catch it as an invalid
         * type/protocol combo.
         */
        if( xProtocol == FREERTOS_SOCK_DEPENDENT_PROTO )
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d10c      	bne.n	800d9c4 <FreeRTOS_socket+0x54>
        {
            switch( xType )
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d005      	beq.n	800d9bc <FreeRTOS_socket+0x4c>
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	2b02      	cmp	r3, #2
 800d9b4:	d105      	bne.n	800d9c2 <FreeRTOS_socket+0x52>
            {
                case FREERTOS_SOCK_DGRAM:
                    xProtocolCpy = FREERTOS_IPPROTO_UDP;
 800d9b6:	2311      	movs	r3, #17
 800d9b8:	623b      	str	r3, [r7, #32]
                    break;
 800d9ba:	e003      	b.n	800d9c4 <FreeRTOS_socket+0x54>

                case FREERTOS_SOCK_STREAM:
                    xProtocolCpy = FREERTOS_IPPROTO_TCP;
 800d9bc:	2306      	movs	r3, #6
 800d9be:	623b      	str	r3, [r7, #32]
                    break;
 800d9c0:	e000      	b.n	800d9c4 <FreeRTOS_socket+0x54>
                default:

                    /* incorrect xType. this will be caught by
                     * prvDetermineSocketSize.
                     */
                    break;
 800d9c2:	bf00      	nop
            }
        }

        if( prvDetermineSocketSize( xDomain, xType, xProtocolCpy, &uxSocketSize ) == pdFAIL )
 800d9c4:	f107 0314 	add.w	r3, r7, #20
 800d9c8:	6a3a      	ldr	r2, [r7, #32]
 800d9ca:	68b9      	ldr	r1, [r7, #8]
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f7ff feff 	bl	800d7d0 <prvDetermineSocketSize>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d103      	bne.n	800d9e0 <FreeRTOS_socket+0x70>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800d9d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d9de:	e063      	b.n	800daa8 <FreeRTOS_socket+0x138>
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxSocket = ( ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize ) );
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7f8 f986 	bl	8005cf4 <pvPortMalloc>
 800d9e8:	61f8      	str	r0, [r7, #28]

        if( pxSocket == NULL )
 800d9ea:	69fb      	ldr	r3, [r7, #28]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d103      	bne.n	800d9f8 <FreeRTOS_socket+0x88>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800d9f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d9f4:	627b      	str	r3, [r7, #36]	@ 0x24
            iptraceFAILED_TO_CREATE_SOCKET();
            break;
 800d9f6:	e057      	b.n	800daa8 <FreeRTOS_socket+0x138>
        }

        xEventGroup = xEventGroupCreate();
 800d9f8:	f7f4 ff55 	bl	80028a6 <xEventGroupCreate>
 800d9fc:	61b8      	str	r0, [r7, #24]

        if( xEventGroup == NULL )
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d106      	bne.n	800da12 <FreeRTOS_socket+0xa2>
        {
            vPortFreeSocket( pxSocket );
 800da04:	69f8      	ldr	r0, [r7, #28]
 800da06:	f7f8 fa49 	bl	8005e9c <vPortFree>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800da0a:	f04f 33ff 	mov.w	r3, #4294967295
 800da0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800da10:	e04a      	b.n	800daa8 <FreeRTOS_socket+0x138>
            iptraceFAILED_TO_CREATE_EVENT_GROUP();
        }
        else
        {
            /* Clear the entire space to avoid nulling individual entries. */
            ( void ) memset( pxSocket, 0, uxSocketSize );
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	461a      	mov	r2, r3
 800da16:	2100      	movs	r1, #0
 800da18:	69f8      	ldr	r0, [r7, #28]
 800da1a:	f014 fa76 	bl	8021f0a <memset>

            pxSocket->xEventGroup = xEventGroup;
 800da1e:	69fb      	ldr	r3, [r7, #28]
 800da20:	69ba      	ldr	r2, [r7, #24]
 800da22:	605a      	str	r2, [r3, #4]

            switch( xDomain ) /* LCOV_EXCL_BR_LINE Exclude this because domain is checked at the begin of this function. */
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2b02      	cmp	r3, #2
 800da28:	d008      	beq.n	800da3c <FreeRTOS_socket+0xcc>
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2b0a      	cmp	r3, #10
 800da2e:	d10b      	bne.n	800da48 <FreeRTOS_socket+0xd8>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800da30:	69fa      	ldr	r2, [r7, #28]
 800da32:	7a13      	ldrb	r3, [r2, #8]
 800da34:	f043 0301 	orr.w	r3, r3, #1
 800da38:	7213      	strb	r3, [r2, #8]
                        break;
 800da3a:	e009      	b.n	800da50 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET:
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800da3c:	69fa      	ldr	r2, [r7, #28]
 800da3e:	7a13      	ldrb	r3, [r2, #8]
 800da40:	f36f 0300 	bfc	r3, #0, #1
 800da44:	7213      	strb	r3, [r2, #8]
                        break;
 800da46:	e003      	b.n	800da50 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default: /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
                    FreeRTOS_debug_printf( ( "FreeRTOS_socket: Undefined xDomain \n" ) );
 800da48:	481b      	ldr	r0, [pc, #108]	@ (800dab8 <FreeRTOS_socket+0x148>)
 800da4a:	f013 ff35 	bl	80218b8 <lUDPLoggingPrintf>

                    /* MISRA 16.4 Compliance */
                    break; /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
 800da4e:	bf00      	nop
            }

            /* Initialise the socket's members.  The semaphore will be created
             * if the socket is bound to an address, for now the pointer to the
             * semaphore is just set to NULL to show it has not been created. */
            if( xProtocolCpy == FREERTOS_IPPROTO_UDP )
 800da50:	6a3b      	ldr	r3, [r7, #32]
 800da52:	2b11      	cmp	r3, #17
 800da54:	d105      	bne.n	800da62 <FreeRTOS_socket+0xf2>
            {
                iptraceMEM_STATS_CREATE( tcpSOCKET_UDP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );

                vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	3354      	adds	r3, #84	@ 0x54
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7f5 f8f8 	bl	8002c50 <vListInitialise>
 800da60:	e007      	b.n	800da72 <FreeRTOS_socket+0x102>
                }
                #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
            }

            #if ( ipconfigUSE_TCP == 1 )
                else if( xProtocolCpy == FREERTOS_IPPROTO_TCP ) /* LCOV_EXCL_BR_LINE Exclude else case because protocol is checked in prvDetermineSocketSize */
 800da62:	6a3b      	ldr	r3, [r7, #32]
 800da64:	2b06      	cmp	r3, #6
 800da66:	d104      	bne.n	800da72 <FreeRTOS_socket+0x102>
                {
                    prvInitialiseTCPFields( pxSocket, uxSocketSize );
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	4619      	mov	r1, r3
 800da6c:	69f8      	ldr	r0, [r7, #28]
 800da6e:	f7ff ff2d 	bl	800d8cc <prvInitialiseTCPFields>
                {
                    /* MISRA wants to see an unconditional else clause. */
                }
            #endif /* ipconfigUSE_TCP == 1 */

            vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800da72:	69fb      	ldr	r3, [r7, #28]
 800da74:	330c      	adds	r3, #12
 800da76:	4618      	mov	r0, r3
 800da78:	f7f5 f90a 	bl	8002c90 <vListInitialiseItem>
            listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	69fa      	ldr	r2, [r7, #28]
 800da80:	619a      	str	r2, [r3, #24]

            pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800da82:	69fb      	ldr	r3, [r7, #28]
 800da84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da88:	621a      	str	r2, [r3, #32]
            pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800da8a:	69fb      	ldr	r3, [r7, #28]
 800da8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da90:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800da92:	69fb      	ldr	r3, [r7, #28]
 800da94:	2202      	movs	r2, #2
 800da96:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            pxSocket->ucProtocol = ( uint8_t ) xProtocolCpy; /* protocol: UDP or TCP */
 800da9a:	6a3b      	ldr	r3, [r7, #32]
 800da9c:	b2da      	uxtb	r2, r3
 800da9e:	69fb      	ldr	r3, [r7, #28]
 800daa0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

            xReturn = pxSocket;
 800daa4:	69fb      	ldr	r3, [r7, #28]
 800daa6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 800daa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3728      	adds	r7, #40	@ 0x28
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	08025294 	.word	0x08025294
 800dab8:	080252c4 	.word	0x080252c4

0800dabc <prvMakeSureSocketIsBound>:
 * @param[in] pxSocket The socket that must be bound to a port number.
 * @return Returns pdTRUE if the socket was already bound, or if the
 *         socket has been bound successfully.
 */
static BaseType_t prvMakeSureSocketIsBound( FreeRTOS_Socket_t * pxSocket )
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
    /* Check if this is a valid UDP socket, does not have to be bound yet. */
    BaseType_t xReturn = prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdFALSE );
 800dac4:	2200      	movs	r2, #0
 800dac6:	2111      	movs	r1, #17
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f7ff fe49 	bl	800d760 <prvValidSocket>
 800dace:	60f8      	str	r0, [r7, #12]

    if( ( xReturn == pdTRUE ) && ( !socketSOCKET_IS_BOUND( pxSocket ) ) )
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	2b01      	cmp	r3, #1
 800dad4:	d10d      	bne.n	800daf2 <prvMakeSureSocketIsBound+0x36>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	69db      	ldr	r3, [r3, #28]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d109      	bne.n	800daf2 <prvMakeSureSocketIsBound+0x36>
    {
        /* The socket is valid but it is not yet bound. */
        if( FreeRTOS_bind( pxSocket, NULL, 0U ) != 0 )
 800dade:	2200      	movs	r2, #0
 800dae0:	2100      	movs	r1, #0
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 f934 	bl	800dd50 <FreeRTOS_bind>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d001      	beq.n	800daf2 <prvMakeSureSocketIsBound+0x36>
        {
            /* The socket was not yet bound, and binding it has failed. */
            xReturn = pdFALSE;
 800daee:	2300      	movs	r3, #0
 800daf0:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800daf2:	68fb      	ldr	r3, [r7, #12]
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3710      	adds	r7, #16
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <prvSendUDPPacket>:
                                 size_t uxTotalDataLength,
                                 BaseType_t xFlags,
                                 const struct freertos_sockaddr * pxDestinationAddress,
                                 TickType_t xTicksToWait,
                                 size_t uxPayloadOffset )
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b088      	sub	sp, #32
 800db00:	af00      	add	r7, sp, #0
 800db02:	60f8      	str	r0, [r7, #12]
 800db04:	60b9      	str	r1, [r7, #8]
 800db06:	607a      	str	r2, [r7, #4]
 800db08:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800db0a:	2300      	movs	r3, #0
 800db0c:	61fb      	str	r3, [r7, #28]
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800db0e:	2304      	movs	r3, #4
 800db10:	753b      	strb	r3, [r7, #20]
 800db12:	2300      	movs	r3, #0
 800db14:	61bb      	str	r3, [r7, #24]

    switch( pxDestinationAddress->sin_family ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800db16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db18:	785b      	ldrb	r3, [r3, #1]
 800db1a:	2b02      	cmp	r3, #2
 800db1c:	d006      	beq.n	800db2c <prvSendUDPPacket+0x30>
 800db1e:	2b0a      	cmp	r3, #10
 800db20:	d109      	bne.n	800db36 <prvSendUDPPacket+0x3a>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                ( void ) xSend_UDP_Update_IPv6( pxNetworkBuffer, pxDestinationAddress );
 800db22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db24:	68b8      	ldr	r0, [r7, #8]
 800db26:	f7fd f903 	bl	800ad30 <xSend_UDP_Update_IPv6>
                break;
 800db2a:	e005      	b.n	800db38 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                ( void ) xSend_UDP_Update_IPv4( pxNetworkBuffer, pxDestinationAddress );
 800db2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db2e:	68b8      	ldr	r0, [r7, #8]
 800db30:	f7fc fd68 	bl	800a604 <xSend_UDP_Update_IPv4>
                break;
 800db34:	e000      	b.n	800db38 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:   /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
            /* MISRA 16.4 Compliance */
            break; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800db36:	bf00      	nop
    }

    pxNetworkBuffer->xDataLength = uxTotalDataLength + uxPayloadOffset;
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db3c:	441a      	add	r2, r3
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	629a      	str	r2, [r3, #40]	@ 0x28
    pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800db42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db44:	885a      	ldrh	r2, [r3, #2]
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	869a      	strh	r2, [r3, #52]	@ 0x34
    pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	b29a      	uxth	r2, r3
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* The socket options are passed to the IP layer in the
     * space that will eventually get used by the Ethernet header. */
    pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db58:	3306      	adds	r3, #6
 800db5a:	68fa      	ldr	r2, [r7, #12]
 800db5c:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800db60:	701a      	strb	r2, [r3, #0]

    /* Tell the networking task that the packet needs sending. */
    xStackTxEvent.pvData = pxNetworkBuffer;
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	61bb      	str	r3, [r7, #24]

    /* Ask the IP-task to send this packet */
    if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800db66:	f107 0314 	add.w	r3, r7, #20
 800db6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7fb fa37 	bl	8008fe0 <xSendEventStructToIPTask>
 800db72:	4603      	mov	r3, r0
 800db74:	2b01      	cmp	r3, #1
 800db76:	d10b      	bne.n	800db90 <prvSendUDPPacket+0x94>
    {
        /* The packet was successfully sent to the IP task. */
        lReturn = ( int32_t ) uxTotalDataLength;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db80:	2b00      	cmp	r3, #0
 800db82:	d00d      	beq.n	800dba0 <prvSendUDPPacket+0xa4>
            {
                pxSocket->u.xUDP.pxHandleSent( ( FreeRTOS_Socket_t * ) pxSocket, uxTotalDataLength );
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db88:	6879      	ldr	r1, [r7, #4]
 800db8a:	68f8      	ldr	r0, [r7, #12]
 800db8c:	4798      	blx	r3
 800db8e:	e007      	b.n	800dba0 <prvSendUDPPacket+0xa4>
    }
    else
    {
        /* If the buffer was allocated in this function, release
         * it. */
        if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	f003 0301 	and.w	r3, r3, #1
 800db96:	2b00      	cmp	r3, #0
 800db98:	d102      	bne.n	800dba0 <prvSendUDPPacket+0xa4>
        {
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800db9a:	68b8      	ldr	r0, [r7, #8]
 800db9c:	f008 ffe4 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
        }

        iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
    }

    return lReturn;
 800dba0:	69fb      	ldr	r3, [r7, #28]
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3720      	adds	r7, #32
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <prvSendTo_ActualSend>:
                                     const void * pvBuffer,
                                     size_t uxTotalDataLength,
                                     BaseType_t xFlags,
                                     const struct freertos_sockaddr * pxDestinationAddress,
                                     size_t uxPayloadOffset )
{
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b08e      	sub	sp, #56	@ 0x38
 800dbae:	af04      	add	r7, sp, #16
 800dbb0:	60f8      	str	r0, [r7, #12]
 800dbb2:	60b9      	str	r1, [r7, #8]
 800dbb4:	607a      	str	r2, [r7, #4]
 800dbb6:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xTicksToWait = pxSocket->xSendBlockTime;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbc0:	61bb      	str	r3, [r7, #24]
    TimeOut_t xTimeOut;
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	f003 0310 	and.w	r3, r3, #16
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d104      	bne.n	800dbd6 <prvSendTo_ActualSend+0x2c>
        ( xIsCallingFromIPTask() != pdFALSE ) )
 800dbcc:	f7fc f94a 	bl	8009e64 <xIsCallingFromIPTask>
 800dbd0:	4603      	mov	r3, r0
    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d001      	beq.n	800dbda <prvSendTo_ActualSend+0x30>
    {
        /* The caller wants a non-blocking operation. When called by the IP-task,
         * the operation should always be non-blocking. */
        xTicksToWait = ( TickType_t ) 0U;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	61bb      	str	r3, [r7, #24]
    }

    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	f003 0301 	and.w	r3, r3, #1
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d128      	bne.n	800dc36 <prvSendTo_ActualSend+0x8c>
    {
        /* Zero copy is not set, so obtain a network buffer into
         * which the payload will be copied. */
        vTaskSetTimeOutState( &xTimeOut );
 800dbe4:	f107 0310 	add.w	r3, r7, #16
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7f6 fdc1 	bl	8004770 <vTaskSetTimeOutState>

        /* Block until a buffer becomes available, or until a
         * timeout has been reached */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800dbee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	69ba      	ldr	r2, [r7, #24]
 800dbf6:	4611      	mov	r1, r2
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f008 ff4d 	bl	8016a98 <pxGetNetworkBufferWithDescriptor>
 800dbfe:	6238      	str	r0, [r7, #32]

        if( pxNetworkBuffer != NULL )
 800dc00:	6a3b      	ldr	r3, [r7, #32]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d01b      	beq.n	800dc3e <prvSendTo_ActualSend+0x94>
        {
            void * pvCopyDest = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ] );
 800dc06:	6a3b      	ldr	r3, [r7, #32]
 800dc08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dc0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc0c:	4413      	add	r3, r2
 800dc0e:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800dc10:	687a      	ldr	r2, [r7, #4]
 800dc12:	68b9      	ldr	r1, [r7, #8]
 800dc14:	69f8      	ldr	r0, [r7, #28]
 800dc16:	f014 f86b 	bl	8021cf0 <memcpy>

            if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800dc1a:	f107 0218 	add.w	r2, r7, #24
 800dc1e:	f107 0310 	add.w	r3, r7, #16
 800dc22:	4611      	mov	r1, r2
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7f6 fddb 	bl	80047e0 <xTaskCheckForTimeOut>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d106      	bne.n	800dc3e <prvSendTo_ActualSend+0x94>
            {
                /* The entire block time has been used up. */
                xTicksToWait = ( TickType_t ) 0;
 800dc30:	2300      	movs	r3, #0
 800dc32:	61bb      	str	r3, [r7, #24]
 800dc34:	e003      	b.n	800dc3e <prvSendTo_ActualSend+0x94>
    else
    {
        /* When zero copy is used, pvBuffer is a pointer to the
         * payload of a buffer that has already been obtained from the
         * stack.  Obtain the network buffer pointer from the buffer. */
        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800dc36:	68b8      	ldr	r0, [r7, #8]
 800dc38:	f7fc f8cc 	bl	8009dd4 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800dc3c:	6238      	str	r0, [r7, #32]
    }

    if( pxNetworkBuffer != NULL )
 800dc3e:	6a3b      	ldr	r3, [r7, #32]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d010      	beq.n	800dc66 <prvSendTo_ActualSend+0xbc>
    {
        pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dc48:	6a3b      	ldr	r3, [r7, #32]
 800dc4a:	631a      	str	r2, [r3, #48]	@ 0x30
        lReturn = prvSendUDPPacket( pxSocket,
 800dc4c:	69bb      	ldr	r3, [r7, #24]
 800dc4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc50:	9202      	str	r2, [sp, #8]
 800dc52:	9301      	str	r3, [sp, #4]
 800dc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc56:	9300      	str	r3, [sp, #0]
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	687a      	ldr	r2, [r7, #4]
 800dc5c:	6a39      	ldr	r1, [r7, #32]
 800dc5e:	68f8      	ldr	r0, [r7, #12]
 800dc60:	f7ff ff4c 	bl	800dafc <prvSendUDPPacket>
 800dc64:	6278      	str	r0, [r7, #36]	@ 0x24
         * number of transmitted bytes, so the calling function knows
         * how  much data was actually sent. */
        iptraceNO_BUFFER_FOR_SENDTO();
    }

    return lReturn;
 800dc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3728      	adds	r7, #40	@ 0x28
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b090      	sub	sp, #64	@ 0x40
 800dc74:	af02      	add	r7, sp, #8
 800dc76:	60f8      	str	r0, [r7, #12]
 800dc78:	60b9      	str	r1, [r7, #8]
 800dc7a:	607a      	str	r2, [r7, #4]
 800dc7c:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	637b      	str	r3, [r7, #52]	@ 0x34
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxMaxPayloadLength = 0;
 800dc86:	2300      	movs	r3, #0
 800dc88:	633b      	str	r3, [r7, #48]	@ 0x30
    size_t uxPayloadOffset = 0;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempDestinationAddress;

        if( ( pxDestinationAddress != NULL ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET ) )
 800dc8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d013      	beq.n	800dcbc <FreeRTOS_sendto+0x4c>
 800dc94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc96:	785b      	ldrb	r3, [r3, #1]
 800dc98:	2b0a      	cmp	r3, #10
 800dc9a:	d00f      	beq.n	800dcbc <FreeRTOS_sendto+0x4c>
 800dc9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc9e:	785b      	ldrb	r3, [r3, #1]
 800dca0:	2b02      	cmp	r3, #2
 800dca2:	d00b      	beq.n	800dcbc <FreeRTOS_sendto+0x4c>
        {
            ( void ) memcpy( &xTempDestinationAddress, pxDestinationAddress, sizeof( struct freertos_sockaddr ) );
 800dca4:	f107 0310 	add.w	r3, r7, #16
 800dca8:	2218      	movs	r2, #24
 800dcaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dcac:	4618      	mov	r0, r3
 800dcae:	f014 f81f 	bl	8021cf0 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempDestinationAddress.sin_family = FREERTOS_AF_INET;
 800dcb2:	2302      	movs	r3, #2
 800dcb4:	747b      	strb	r3, [r7, #17]
            pxDestinationAddress = &xTempDestinationAddress;
 800dcb6:	f107 0310 	add.w	r3, r7, #16
 800dcba:	643b      	str	r3, [r7, #64]	@ 0x40

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pxDestinationAddress != NULL );
 800dcbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d104      	bne.n	800dccc <FreeRTOS_sendto+0x5c>
 800dcc2:	f240 6143 	movw	r1, #1603	@ 0x643
 800dcc6:	4820      	ldr	r0, [pc, #128]	@ (800dd48 <FreeRTOS_sendto+0xd8>)
 800dcc8:	f7f3 fcd0 	bl	800166c <vAssertCalled>
    configASSERT( pvBuffer != NULL );
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d104      	bne.n	800dcdc <FreeRTOS_sendto+0x6c>
 800dcd2:	f240 6144 	movw	r1, #1604	@ 0x644
 800dcd6:	481c      	ldr	r0, [pc, #112]	@ (800dd48 <FreeRTOS_sendto+0xd8>)
 800dcd8:	f7f3 fcc8 	bl	800166c <vAssertCalled>

    switch( pxDestinationAddress->sin_family )
 800dcdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcde:	785b      	ldrb	r3, [r3, #1]
 800dce0:	2b02      	cmp	r3, #2
 800dce2:	d007      	beq.n	800dcf4 <FreeRTOS_sendto+0x84>
 800dce4:	2b0a      	cmp	r3, #10
 800dce6:	d10b      	bne.n	800dd00 <FreeRTOS_sendto+0x90>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER );
 800dce8:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 800dcec:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER;
 800dcee:	233e      	movs	r3, #62	@ 0x3e
 800dcf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800dcf2:	e00c      	b.n	800dd0e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800dcf4:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800dcf8:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER;
 800dcfa:	232a      	movs	r3, #42	@ 0x2a
 800dcfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800dcfe:	e006      	b.n	800dd0e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            FreeRTOS_debug_printf( ( "FreeRTOS_sendto: Undefined sin_family \n" ) );
 800dd00:	4812      	ldr	r0, [pc, #72]	@ (800dd4c <FreeRTOS_sendto+0xdc>)
 800dd02:	f013 fdd9 	bl	80218b8 <lUDPLoggingPrintf>
            lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800dd06:	f06f 0315 	mvn.w	r3, #21
 800dd0a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800dd0c:	bf00      	nop
    }

    if( lReturn == 0 )
 800dd0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d114      	bne.n	800dd3e <FreeRTOS_sendto+0xce>
    {
        if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d810      	bhi.n	800dd3e <FreeRTOS_sendto+0xce>
        {
            /* If the socket is not already bound to an address, bind it now.
             * Passing NULL as the address parameter tells FreeRTOS_bind() to select
             * the address to bind to. */
            if( prvMakeSureSocketIsBound( pxSocket ) == pdTRUE )
 800dd1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd1e:	f7ff fecd 	bl	800dabc <prvMakeSureSocketIsBound>
 800dd22:	4603      	mov	r3, r0
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d10a      	bne.n	800dd3e <FreeRTOS_sendto+0xce>
            {
                lReturn = prvSendTo_ActualSend( pxSocket, pvBuffer, uxTotalDataLength, xFlags, pxDestinationAddress, uxPayloadOffset );
 800dd28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd2a:	9301      	str	r3, [sp, #4]
 800dd2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	68b9      	ldr	r1, [r7, #8]
 800dd36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd38:	f7ff ff37 	bl	800dbaa <prvSendTo_ActualSend>
 800dd3c:	6378      	str	r0, [r7, #52]	@ 0x34
            /* The data is longer than the available buffer space. */
            iptraceSENDTO_DATA_TOO_LONG();
        }
    }

    return lReturn;
 800dd3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800dd40:	4618      	mov	r0, r3
 800dd42:	3738      	adds	r7, #56	@ 0x38
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	08025294 	.word	0x08025294
 800dd4c:	08025348 	.word	0x08025348

0800dd50 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b090      	sub	sp, #64	@ 0x40
 800dd54:	af02      	add	r7, sp, #8
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	60b9      	str	r1, [r7, #8]
 800dd5a:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	633b      	str	r3, [r7, #48]	@ 0x30
    BaseType_t xReturn = 0;
 800dd60:	2300      	movs	r3, #0
 800dd62:	637b      	str	r3, [r7, #52]	@ 0x34

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempAddress;

        if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d013      	beq.n	800dd92 <FreeRTOS_bind+0x42>
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	785b      	ldrb	r3, [r3, #1]
 800dd6e:	2b0a      	cmp	r3, #10
 800dd70:	d00f      	beq.n	800dd92 <FreeRTOS_bind+0x42>
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	785b      	ldrb	r3, [r3, #1]
 800dd76:	2b02      	cmp	r3, #2
 800dd78:	d00b      	beq.n	800dd92 <FreeRTOS_bind+0x42>
        {
            ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800dd7a:	f107 0310 	add.w	r3, r7, #16
 800dd7e:	2218      	movs	r2, #24
 800dd80:	68b9      	ldr	r1, [r7, #8]
 800dd82:	4618      	mov	r0, r3
 800dd84:	f013 ffb4 	bl	8021cf0 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempAddress.sin_family = FREERTOS_AF_INET;
 800dd88:	2302      	movs	r3, #2
 800dd8a:	747b      	strb	r3, [r7, #17]
            pxAddress = &xTempAddress;
 800dd8c:	f107 0310 	add.w	r3, r7, #16
 800dd90:	60bb      	str	r3, [r7, #8]
        }
    #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800dd92:	f7fc f867 	bl	8009e64 <xIsCallingFromIPTask>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d004      	beq.n	800dda6 <FreeRTOS_bind+0x56>
 800dd9c:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 800dda0:	484b      	ldr	r0, [pc, #300]	@ (800ded0 <FreeRTOS_bind+0x180>)
 800dda2:	f7f3 fc63 	bl	800166c <vAssertCalled>

    if( xSocketValid( pxSocket ) == pdFALSE )
 800dda6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dda8:	f002 f804 	bl	800fdb4 <xSocketValid>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d103      	bne.n	800ddba <FreeRTOS_bind+0x6a>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ddb2:	f06f 0315 	mvn.w	r3, #21
 800ddb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddb8:	e084      	b.n	800dec4 <FreeRTOS_bind+0x174>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800ddba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddbc:	69db      	ldr	r3, [r3, #28]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d009      	beq.n	800ddd6 <FreeRTOS_bind+0x86>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 800ddc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddc4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	4842      	ldr	r0, [pc, #264]	@ (800ded4 <FreeRTOS_bind+0x184>)
 800ddca:	f013 fd75 	bl	80218b8 <lUDPLoggingPrintf>
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ddce:	f06f 0315 	mvn.w	r3, #21
 800ddd2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddd4:	e076      	b.n	800dec4 <FreeRTOS_bind+0x174>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800ddd6:	2309      	movs	r3, #9
 800ddd8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        xBindEvent.pvData = xSocket;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxAddress != NULL )
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d042      	beq.n	800de6c <FreeRTOS_bind+0x11c>
        {
            switch( pxAddress->sin_family )
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	785b      	ldrb	r3, [r3, #1]
 800ddea:	2b02      	cmp	r3, #2
 800ddec:	d010      	beq.n	800de10 <FreeRTOS_bind+0xc0>
 800ddee:	2b0a      	cmp	r3, #10
 800ddf0:	d129      	bne.n	800de46 <FreeRTOS_bind+0xf6>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800ddf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	3308      	adds	r3, #8
 800ddfc:	2210      	movs	r2, #16
 800ddfe:	4619      	mov	r1, r3
 800de00:	f013 ff76 	bl	8021cf0 <memcpy>
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800de04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de06:	7a13      	ldrb	r3, [r2, #8]
 800de08:	f043 0301 	orr.w	r3, r3, #1
 800de0c:	7213      	strb	r3, [r2, #8]
                        break;
 800de0e:	e01e      	b.n	800de4e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                        pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	061a      	lsls	r2, r3, #24
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	021b      	lsls	r3, r3, #8
 800de1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800de20:	431a      	orrs	r2, r3
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	689b      	ldr	r3, [r3, #8]
 800de26:	0a1b      	lsrs	r3, r3, #8
 800de28:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800de2c:	431a      	orrs	r2, r3
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	689b      	ldr	r3, [r3, #8]
 800de32:	0e1b      	lsrs	r3, r3, #24
 800de34:	431a      	orrs	r2, r3
 800de36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de38:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800de3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de3c:	7a13      	ldrb	r3, [r2, #8]
 800de3e:	f36f 0300 	bfc	r3, #0, #1
 800de42:	7213      	strb	r3, [r2, #8]
                        break;
 800de44:	e003      	b.n	800de4e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    FreeRTOS_debug_printf( ( "FreeRTOS_bind: Undefined sin_family \n" ) );
 800de46:	4824      	ldr	r0, [pc, #144]	@ (800ded8 <FreeRTOS_bind+0x188>)
 800de48:	f013 fd36 	bl	80218b8 <lUDPLoggingPrintf>
                    break;
 800de4c:	bf00      	nop
            }

            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	885b      	ldrh	r3, [r3, #2]
 800de52:	021b      	lsls	r3, r3, #8
 800de54:	b21a      	sxth	r2, r3
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	885b      	ldrh	r3, [r3, #2]
 800de5a:	0a1b      	lsrs	r3, r3, #8
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	b21b      	sxth	r3, r3
 800de60:	4313      	orrs	r3, r2
 800de62:	b21b      	sxth	r3, r3
 800de64:	b29a      	uxth	r2, r3
 800de66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de68:	871a      	strh	r2, [r3, #56]	@ 0x38
 800de6a:	e009      	b.n	800de80 <FreeRTOS_bind+0x130>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800de6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de6e:	2200      	movs	r2, #0
 800de70:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800de72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de74:	3328      	adds	r3, #40	@ 0x28
 800de76:	2210      	movs	r2, #16
 800de78:	2100      	movs	r1, #0
 800de7a:	4618      	mov	r0, r3
 800de7c:	f014 f845 	bl	8021f0a <memset>
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800de80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800de84:	f04f 31ff 	mov.w	r1, #4294967295
 800de88:	4618      	mov	r0, r3
 800de8a:	f7fb f8a9 	bl	8008fe0 <xSendEventStructToIPTask>
 800de8e:	4603      	mov	r3, r0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d106      	bne.n	800dea2 <FreeRTOS_bind+0x152>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 800de94:	4811      	ldr	r0, [pc, #68]	@ (800dedc <FreeRTOS_bind+0x18c>)
 800de96:	f013 fd0f 	bl	80218b8 <lUDPLoggingPrintf>
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800de9a:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800de9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800dea0:	e010      	b.n	800dec4 <FreeRTOS_bind+0x174>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800dea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea4:	6858      	ldr	r0, [r3, #4]
 800dea6:	f04f 33ff 	mov.w	r3, #4294967295
 800deaa:	9300      	str	r3, [sp, #0]
 800deac:	2300      	movs	r3, #0
 800deae:	2201      	movs	r2, #1
 800deb0:	2110      	movs	r1, #16
 800deb2:	f7f4 fd0f 	bl	80028d4 <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800deb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb8:	69db      	ldr	r3, [r3, #28]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d102      	bne.n	800dec4 <FreeRTOS_bind+0x174>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800debe:	f06f 0315 	mvn.w	r3, #21
 800dec2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }
    }

    return xReturn;
 800dec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3738      	adds	r7, #56	@ 0x38
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	08025294 	.word	0x08025294
 800ded4:	08025370 	.word	0x08025370
 800ded8:	0802539c 	.word	0x0802539c
 800dedc:	080253c4 	.word	0x080253c4

0800dee0 <prvSocketBindAdd>:
 */
static BaseType_t prvSocketBindAdd( FreeRTOS_Socket_t * pxSocket,
                                    const struct freertos_sockaddr * pxAddress,
                                    List_t * pxSocketList,
                                    BaseType_t xInternal )
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b086      	sub	sp, #24
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0;
 800deee:	2300      	movs	r3, #0
 800def0:	617b      	str	r3, [r7, #20]

    /* Check to ensure the port is not already in use.  If the bind is
     * called internally, a port MAY be used by more than one socket. */
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d004      	beq.n	800df02 <prvSocketBindAdd+0x22>
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800defe:	2b06      	cmp	r3, #6
 800df00:	d024      	beq.n	800df4c <prvSocketBindAdd+0x6c>
        ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	885b      	ldrh	r3, [r3, #2]
 800df06:	4619      	mov	r1, r3
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 fdf1 	bl	800eaf0 <pxListFindListItemWithValue>
 800df0e:	4603      	mov	r3, r0
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800df10:	2b00      	cmp	r3, #0
 800df12:	d01b      	beq.n	800df4c <prvSocketBindAdd+0x6c>
    {
        FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800df1a:	2b06      	cmp	r3, #6
 800df1c:	d101      	bne.n	800df22 <prvSocketBindAdd+0x42>
 800df1e:	493e      	ldr	r1, [pc, #248]	@ (800e018 <prvSocketBindAdd+0x138>)
 800df20:	e000      	b.n	800df24 <prvSocketBindAdd+0x44>
 800df22:	493e      	ldr	r1, [pc, #248]	@ (800e01c <prvSocketBindAdd+0x13c>)
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	885b      	ldrh	r3, [r3, #2]
 800df28:	021b      	lsls	r3, r3, #8
 800df2a:	b21a      	sxth	r2, r3
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	885b      	ldrh	r3, [r3, #2]
 800df30:	0a1b      	lsrs	r3, r3, #8
 800df32:	b29b      	uxth	r3, r3
 800df34:	b21b      	sxth	r3, r3
 800df36:	4313      	orrs	r3, r2
 800df38:	b21b      	sxth	r3, r3
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	461a      	mov	r2, r3
 800df3e:	4838      	ldr	r0, [pc, #224]	@ (800e020 <prvSocketBindAdd+0x140>)
 800df40:	f013 fcba 	bl	80218b8 <lUDPLoggingPrintf>
                                 ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                 FreeRTOS_ntohs( pxAddress->sin_port ) ) );
        xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800df44:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800df48:	617b      	str	r3, [r7, #20]
 800df4a:	e060      	b.n	800e00e <prvSocketBindAdd+0x12e>
    }
    else
    {
        /* Allocate the port number to the socket.
         * This macro will set 'xBoundSocketListItem->xItemValue' */
        socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	885b      	ldrh	r3, [r3, #2]
 800df50:	461a      	mov	r2, r3
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	60da      	str	r2, [r3, #12]

        /* And also store it in a socket field 'usLocalPort' in host-byte-order,
         * mostly used for logging and debugging purposes */
        pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	885b      	ldrh	r3, [r3, #2]
 800df5a:	021b      	lsls	r3, r3, #8
 800df5c:	b21a      	sxth	r2, r3
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	885b      	ldrh	r3, [r3, #2]
 800df62:	0a1b      	lsrs	r3, r3, #8
 800df64:	b29b      	uxth	r3, r3
 800df66:	b21b      	sxth	r3, r3
 800df68:	4313      	orrs	r3, r2
 800df6a:	b21b      	sxth	r3, r3
 800df6c:	b29a      	uxth	r2, r3
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	871a      	strh	r2, [r3, #56]	@ 0x38

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	785b      	ldrb	r3, [r3, #1]
 800df76:	2b0a      	cmp	r3, #10
 800df78:	d109      	bne.n	800df8e <prvSocketBindAdd+0xae>
            {
                ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	3308      	adds	r3, #8
 800df84:	2210      	movs	r2, #16
 800df86:	4619      	mov	r1, r3
 800df88:	f013 feb2 	bl	8021cf0 <memcpy>
 800df8c:	e00c      	b.n	800dfa8 <prvSocketBindAdd+0xc8>
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                if( pxAddress->sin_address.ulIP_IPv4 != FREERTOS_INADDR_ANY )
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	689b      	ldr	r3, [r3, #8]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d008      	beq.n	800dfa8 <prvSocketBindAdd+0xc8>
                {
                    pxSocket->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( pxAddress->sin_address.ulIP_IPv4, 7 );
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	689b      	ldr	r3, [r3, #8]
 800df9a:	2107      	movs	r1, #7
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7fe ffb7 	bl	800cf10 <FreeRTOS_FindEndPointOnIP_IPv4>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	64da      	str	r2, [r3, #76]	@ 0x4c
                /* Place holder, do nothing, MISRA compliance */
            }
        }

        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxSocket->pxEndPoint != NULL )
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d019      	beq.n	800dfe4 <prvSocketBindAdd+0x104>
            {
                pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxSocket->pxEndPoint->ipv4_settings.ulIPAddress );
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	061a      	lsls	r2, r3, #24
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	021b      	lsls	r3, r3, #8
 800dfc0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dfc4:	431a      	orrs	r2, r3
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	0a1b      	lsrs	r3, r3, #8
 800dfce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dfd2:	431a      	orrs	r2, r3
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	0e1b      	lsrs	r3, r3, #24
 800dfdc:	431a      	orrs	r2, r3
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	629a      	str	r2, [r3, #40]	@ 0x28
 800dfe2:	e00a      	b.n	800dffa <prvSocketBindAdd+0x11a>
            }
            else
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	785b      	ldrb	r3, [r3, #1]
 800dfe8:	2b0a      	cmp	r3, #10
 800dfea:	d006      	beq.n	800dffa <prvSocketBindAdd+0x11a>
                /* Socket address was set, do nothing for IPv6. */
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	3328      	adds	r3, #40	@ 0x28
 800dff0:	2210      	movs	r2, #16
 800dff2:	2100      	movs	r1, #0
 800dff4:	4618      	mov	r0, r3
 800dff6:	f013 ff88 	bl	8021f0a <memset>
            /* If the network driver can iterate through 'xBoundUDPSocketsList',
             * by calling xPortHasUDPSocket() then the IP-task must temporarily
             * suspend the scheduler to keep the list in a consistent state. */
            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                vTaskSuspendAll();
 800dffa:	f7f5 fefd 	bl	8003df8 <vTaskSuspendAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

            /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
            vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	330c      	adds	r3, #12
 800e002:	4619      	mov	r1, r3
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7f4 fe50 	bl	8002caa <vListInsertEnd>

            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                ( void ) xTaskResumeAll();
 800e00a:	f7f5 ff03 	bl	8003e14 <xTaskResumeAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
        }
    }

    return xReturn;
 800e00e:	697b      	ldr	r3, [r7, #20]
}
 800e010:	4618      	mov	r0, r3
 800e012:	3718      	adds	r7, #24
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	080253e8 	.word	0x080253e8
 800e01c:	080253ec 	.word	0x080253ec
 800e020:	080253f0 	.word	0x080253f0

0800e024 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b08e      	sub	sp, #56	@ 0x38
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]
 800e030:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800e032:	2300      	movs	r3, #0
 800e034:	637b      	str	r3, [r7, #52]	@ 0x34
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    configASSERT( xSocketValid( pxSocket ) == pdTRUE );
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	f001 feba 	bl	800fdb4 <xSocketValid>
 800e040:	4603      	mov	r3, r0
 800e042:	2b01      	cmp	r3, #1
 800e044:	d004      	beq.n	800e050 <vSocketBind+0x2c>
 800e046:	f240 716f 	movw	r1, #1903	@ 0x76f
 800e04a:	4828      	ldr	r0, [pc, #160]	@ (800e0ec <vSocketBind+0xc8>)
 800e04c:	f7f3 fb0e 	bl	800166c <vAssertCalled>

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e056:	2b06      	cmp	r3, #6
 800e058:	d102      	bne.n	800e060 <vSocketBind+0x3c>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800e05a:	4b25      	ldr	r3, [pc, #148]	@ (800e0f0 <vSocketBind+0xcc>)
 800e05c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e05e:	e001      	b.n	800e064 <vSocketBind+0x40>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800e060:	4b24      	ldr	r3, [pc, #144]	@ (800e0f4 <vSocketBind+0xd0>)
 800e062:	633b      	str	r3, [r7, #48]	@ 0x30
        /* pxAddress will be NULL if sendto() was called on a socket without the
         * socket being bound to an address. In this case, automatically allocate
         * an address to the socket.  There is a small chance that the allocated
         * port will already be in use - if that is the case, then the check below
         * [pxListFindListItemWithValue()] will result in an error being returned. */
        if( pxAddress == NULL )
 800e064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e066:	2b00      	cmp	r3, #0
 800e068:	d115      	bne.n	800e096 <vSocketBind+0x72>
        {
            pxAddress = &xAddress;
 800e06a:	f107 0314 	add.w	r3, r7, #20
 800e06e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Clear the address: */
            ( void ) memset( pxAddress, 0, sizeof( struct freertos_sockaddr ) );
 800e070:	2218      	movs	r2, #24
 800e072:	2100      	movs	r1, #0
 800e074:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e076:	f013 ff48 	bl	8021f0a <memset>

            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	7a1b      	ldrb	r3, [r3, #8]
 800e07e:	f003 0301 	and.w	r3, r3, #1
 800e082:	b2db      	uxtb	r3, r3
 800e084:	2b00      	cmp	r3, #0
 800e086:	d003      	beq.n	800e090 <vSocketBind+0x6c>
            {
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800e088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e08a:	220a      	movs	r2, #10
 800e08c:	705a      	strb	r2, [r3, #1]
 800e08e:	e002      	b.n	800e096 <vSocketBind+0x72>
            }
            else
            {
                pxAddress->sin_family = FREERTOS_AF_INET;
 800e090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e092:	2202      	movs	r2, #2
 800e094:	705a      	strb	r2, [r3, #1]
    }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800e096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d104      	bne.n	800e0a6 <vSocketBind+0x82>
 800e09c:	f240 719b 	movw	r1, #1947	@ 0x79b
 800e0a0:	4812      	ldr	r0, [pc, #72]	@ (800e0ec <vSocketBind+0xc8>)
 800e0a2:	f7f3 fae3 	bl	800166c <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800e0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a8:	885b      	ldrh	r3, [r3, #2]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d111      	bne.n	800e0d2 <vSocketBind+0xae>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f000 fcc3 	bl	800ea40 <prvGetPrivatePortNumber>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	461a      	mov	r2, r3
 800e0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c0:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800e0c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c4:	885b      	ldrh	r3, [r3, #2]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d103      	bne.n	800e0d2 <vSocketBind+0xae>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800e0ca:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800e0ce:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800e0d0:	e006      	b.n	800e0e0 <vSocketBind+0xbc>

            /* If vSocketBind() is called from the API FreeRTOS_bind() it has been
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            xReturn = prvSocketBindAdd( pxSocket, pxAddress, pxSocketList, xInternal );
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e0d8:	68f8      	ldr	r0, [r7, #12]
 800e0da:	f7ff ff01 	bl	800dee0 <prvSocketBindAdd>
 800e0de:	6378      	str	r0, [r7, #52]	@ 0x34
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800e0e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3738      	adds	r7, #56	@ 0x38
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	08025294 	.word	0x08025294
 800e0f0:	20001440 	.word	0x20001440
 800e0f4:	2000142c 	.word	0x2000142c

0800e0f8 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b086      	sub	sp, #24
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    #if ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	613b      	str	r3, [r7, #16]
    #endif /* ipconfigUSE_CALLBACKS == 1 */
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800e104:	230a      	movs	r3, #10
 800e106:	723b      	strb	r3, [r7, #8]
    xCloseEvent.pvData = xSocket;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	60fb      	str	r3, [r7, #12]

    if( xSocketValid( xSocket ) == pdFALSE )
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f001 fe51 	bl	800fdb4 <xSocketValid>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d102      	bne.n	800e11e <FreeRTOS_closesocket+0x26>
    {
        xResult = 0;
 800e118:	2300      	movs	r3, #0
 800e11a:	617b      	str	r3, [r7, #20]
 800e11c:	e02f      	b.n	800e17e <FreeRTOS_closesocket+0x86>
    else
    {
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            #if ( ipconfigUSE_TCP == 1 )
                if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e124:	2b06      	cmp	r3, #6
 800e126:	d10c      	bne.n	800e142 <FreeRTOS_closesocket+0x4a>
                {
                    /* Make sure that IP-task won't call the user callback's anymore */
                    pxSocket->u.xTCP.pxHandleConnected = NULL;
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	2200      	movs	r2, #0
 800e12c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                    pxSocket->u.xTCP.pxHandleReceive = NULL;
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	2200      	movs	r2, #0
 800e134:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                    pxSocket->u.xTCP.pxHandleSent = NULL;
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	2200      	movs	r2, #0
 800e13c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800e140:	e00a      	b.n	800e158 <FreeRTOS_closesocket+0x60>
                }
                else
            #endif /* ipconfigUSE_TCP == 1 */

            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e148:	2b11      	cmp	r3, #17
 800e14a:	d105      	bne.n	800e158 <FreeRTOS_closesocket+0x60>
            {
                /* Clear the two UDP handlers. */
                pxSocket->u.xUDP.pxHandleReceive = NULL;
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	2200      	movs	r2, #0
 800e150:	669a      	str	r2, [r3, #104]	@ 0x68
                pxSocket->u.xUDP.pxHandleSent = NULL;
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	2200      	movs	r2, #0
 800e156:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* The timeout value below is only used if this function is called from
         * a user task. If this function is called by the IP-task, it may fail
         * to close the socket when the event queue is full.
         * This should only happen in case of a user call-back. */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800e158:	f107 0308 	add.w	r3, r7, #8
 800e15c:	f04f 31ff 	mov.w	r1, #4294967295
 800e160:	4618      	mov	r0, r3
 800e162:	f7fa ff3d 	bl	8008fe0 <xSendEventStructToIPTask>
 800e166:	4603      	mov	r3, r0
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d106      	bne.n	800e17a <FreeRTOS_closesocket+0x82>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 800e16c:	4806      	ldr	r0, [pc, #24]	@ (800e188 <FreeRTOS_closesocket+0x90>)
 800e16e:	f013 fba3 	bl	80218b8 <lUDPLoggingPrintf>
            xResult = -1;
 800e172:	f04f 33ff 	mov.w	r3, #4294967295
 800e176:	617b      	str	r3, [r7, #20]
 800e178:	e001      	b.n	800e17e <FreeRTOS_closesocket+0x86>
        }
        else
        {
            xResult = 1;
 800e17a:	2301      	movs	r3, #1
 800e17c:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800e17e:	697b      	ldr	r3, [r7, #20]
}
 800e180:	4618      	mov	r0, r3
 800e182:	3718      	adds	r7, #24
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}
 800e188:	08025414 	.word	0x08025414

0800e18c <vSocketClose>:
 */
/* MISRA Ref 17.2.1 [Sockets and limited recursion] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
/* coverity[misra_c_2012_rule_17_2_violation] */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800e18c:	b590      	push	{r4, r7, lr}
 800e18e:	b085      	sub	sp, #20
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* For TCP: clean up a little more. */
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e19a:	2b06      	cmp	r3, #6
 800e19c:	d129      	bne.n	800e1f2 <vSocketClose+0x66>
        {
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d005      	beq.n	800e1b4 <vSocketClose+0x28>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f008 fcda 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Free the resources which were claimed by the tcpWin member */
                vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f006 fee6 	bl	8014f8c <vTCPWindowDestroy>
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* Free the input and output streams */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d005      	beq.n	800e1d6 <vSocketClose+0x4a>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7f7 fe63 	bl	8005e9c <vPortFree>
            }

            if( pxSocket->u.xTCP.txStream != NULL )
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d005      	beq.n	800e1ec <vSocketClose+0x60>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7f7 fe58 	bl	8005e9c <vPortFree>
            }

            /* In case this is a child socket, make sure the child-count of the
             * parent socket is decreased. */
            prvTCPSetSocketCount( pxSocket );
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 f8bd 	bl	800e36c <prvTCPSetSocketCount>
    }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	69db      	ldr	r3, [r3, #28]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d008      	beq.n	800e20c <vSocketClose+0x80>
        /* If the network driver can iterate through 'xBoundUDPSocketsList',
         * by calling xPortHasUDPSocket(), then the IP-task must temporarily
         * suspend the scheduler to keep the list in a consistent state. */
        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            vTaskSuspendAll();
 800e1fa:	f7f5 fdfd 	bl	8003df8 <vTaskSuspendAll>
        }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	330c      	adds	r3, #12
 800e202:	4618      	mov	r0, r3
 800e204:	f7f4 fdae 	bl	8002d64 <uxListRemove>

        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            ( void ) xTaskResumeAll();
 800e208:	f7f5 fe04 	bl	8003e14 <xTaskResumeAll>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e212:	2b11      	cmp	r3, #17
 800e214:	d10f      	bne.n	800e236 <vSocketClose+0xaa>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800e216:	e00a      	b.n	800e22e <vSocketClose+0xa2>
        {
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	4618      	mov	r0, r3
 800e224:	f7f4 fd9e 	bl	8002d64 <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f008 fc9d 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e232:	2b00      	cmp	r3, #0
 800e234:	d1f0      	bne.n	800e218 <vSocketClose+0x8c>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d004      	beq.n	800e248 <vSocketClose+0xbc>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	4618      	mov	r0, r3
 800e244:	f7f4 fcac 	bl	8002ba0 <vEventGroupDelete>
    }

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e24e:	2b06      	cmp	r3, #6
 800e250:	d10c      	bne.n	800e26c <vSocketClose+0xe0>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%s]: buffers %lu socks %lu\n",
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 f816 	bl	800e284 <prvSocketProps>
 800e258:	4604      	mov	r4, r0
 800e25a:	f008 fcd7 	bl	8016c0c <uxGetNumberOfFreeNetworkBuffers>
 800e25e:	4602      	mov	r2, r0
 800e260:	4b06      	ldr	r3, [pc, #24]	@ (800e27c <vSocketClose+0xf0>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4621      	mov	r1, r4
 800e266:	4806      	ldr	r0, [pc, #24]	@ (800e280 <vSocketClose+0xf4>)
 800e268:	f013 fb26 	bl	80218b8 <lUDPLoggingPrintf>
    }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f7f7 fe15 	bl	8005e9c <vPortFree>

    return NULL;
 800e272:	2300      	movs	r3, #0
} /* Tested */
 800e274:	4618      	mov	r0, r3
 800e276:	3714      	adds	r7, #20
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd90      	pop	{r4, r7, pc}
 800e27c:	20001440 	.word	0x20001440
 800e280:	08025434 	.word	0x08025434

0800e284 <prvSocketProps>:
/*-----------------------------------------------------------*/

#if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
    const char * prvSocketProps( FreeRTOS_Socket_t * pxSocket )
    {
 800e284:	b580      	push	{r7, lr}
 800e286:	b086      	sub	sp, #24
 800e288:	af04      	add	r7, sp, #16
 800e28a:	6078      	str	r0, [r7, #4]
        /* For debugging purposes only: show some properties of a socket:
         * IP-addresses and port numbers. */
        #if ipconfigUSE_TCP == 1
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e292:	2b06      	cmp	r3, #6
 800e294:	d132      	bne.n	800e2fc <prvSocketProps+0x78>
            {
                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	7a1b      	ldrb	r3, [r3, #8]
 800e29a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d002      	beq.n	800e2aa <prvSocketProps+0x26>
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d014      	beq.n	800e2d2 <prvSocketProps+0x4e>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800e2a8:	e050      	b.n	800e34c <prvSocketProps+0xc8>
                                               ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6a99      	ldr	r1, [r3, #40]	@ 0x28
                                               pxSocket->usLocalPort,
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800e2b2:	4618      	mov	r0, r3
                                               ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800e2be:	9202      	str	r2, [sp, #8]
 800e2c0:	9301      	str	r3, [sp, #4]
 800e2c2:	9000      	str	r0, [sp, #0]
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	4a24      	ldr	r2, [pc, #144]	@ (800e358 <prvSocketProps+0xd4>)
 800e2c8:	215c      	movs	r1, #92	@ 0x5c
 800e2ca:	4824      	ldr	r0, [pc, #144]	@ (800e35c <prvSocketProps+0xd8>)
 800e2cc:	f014 fb20 	bl	8022910 <snprintf>
                            break;
 800e2d0:	e03c      	b.n	800e34c <prvSocketProps+0xc8>
                                               ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
                                               pxSocket->usLocalPort,
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800e2dc:	4618      	mov	r0, r3
                                               ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	3354      	adds	r3, #84	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800e2e2:	687a      	ldr	r2, [r7, #4]
 800e2e4:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800e2e8:	9202      	str	r2, [sp, #8]
 800e2ea:	9301      	str	r3, [sp, #4]
 800e2ec:	9000      	str	r0, [sp, #0]
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	4a1b      	ldr	r2, [pc, #108]	@ (800e360 <prvSocketProps+0xdc>)
 800e2f2:	215c      	movs	r1, #92	@ 0x5c
 800e2f4:	4819      	ldr	r0, [pc, #100]	@ (800e35c <prvSocketProps+0xd8>)
 800e2f6:	f014 fb0b 	bl	8022910 <snprintf>
                            break;
 800e2fa:	e027      	b.n	800e34c <prvSocketProps+0xc8>
                }
            }
            else
        #endif /* if ipconfigUSE_TCP == 1 */

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e302:	2b11      	cmp	r3, #17
 800e304:	d122      	bne.n	800e34c <prvSocketProps+0xc8>
        {
            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	7a1b      	ldrb	r3, [r3, #8]
 800e30a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	2b00      	cmp	r3, #0
 800e312:	d002      	beq.n	800e31a <prvSocketProps+0x96>
 800e314:	2b01      	cmp	r3, #1
 800e316:	d00c      	beq.n	800e332 <prvSocketProps+0xae>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800e318:	e018      	b.n	800e34c <prvSocketProps+0xc8>
                                           ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                                           pxSocket->usLocalPort );
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800e322:	9300      	str	r3, [sp, #0]
 800e324:	4613      	mov	r3, r2
 800e326:	4a0f      	ldr	r2, [pc, #60]	@ (800e364 <prvSocketProps+0xe0>)
 800e328:	215c      	movs	r1, #92	@ 0x5c
 800e32a:	480c      	ldr	r0, [pc, #48]	@ (800e35c <prvSocketProps+0xd8>)
 800e32c:	f014 faf0 	bl	8022910 <snprintf>
                        break;
 800e330:	e00c      	b.n	800e34c <prvSocketProps+0xc8>
                                           ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f103 0228 	add.w	r2, r3, #40	@ 0x28
                                           pxSocket->usLocalPort );
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800e33c:	9300      	str	r3, [sp, #0]
 800e33e:	4613      	mov	r3, r2
 800e340:	4a09      	ldr	r2, [pc, #36]	@ (800e368 <prvSocketProps+0xe4>)
 800e342:	215c      	movs	r1, #92	@ 0x5c
 800e344:	4805      	ldr	r0, [pc, #20]	@ (800e35c <prvSocketProps+0xd8>)
 800e346:	f014 fae3 	bl	8022910 <snprintf>
                        break;
 800e34a:	bf00      	nop
        else
        {
            /* Protocol not handled. */
        }

        return pucSocketProps;
 800e34c:	4b03      	ldr	r3, [pc, #12]	@ (800e35c <prvSocketProps+0xd8>)
    }
 800e34e:	4618      	mov	r0, r3
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	08025468 	.word	0x08025468
 800e35c:	200013d0 	.word	0x200013d0
 800e360:	08025488 	.word	0x08025488
 800e364:	080254a8 	.word	0x080254a8
 800e368:	080254b8 	.word	0x080254b8

0800e36c <prvTCPSetSocketCount>:
    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b088      	sub	sp, #32
 800e370:	af02      	add	r7, sp, #8
 800e372:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800e374:	4b3c      	ldr	r3, [pc, #240]	@ (800e468 <prvTCPSetSocketCount+0xfc>)
 800e376:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e37c:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.eTCPState == eTCP_LISTEN )
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e384:	2b01      	cmp	r3, #1
 800e386:	d12b      	bne.n	800e3e0 <prvTCPSetSocketCount+0x74>
        {
            pxIterator = listGET_NEXT( pxEnd );
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800e38e:	e022      	b.n	800e3d6 <prvTCPSetSocketCount+0x6a>
            {
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	60bb      	str	r3, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d017      	beq.n	800e3d6 <prvTCPSetSocketCount+0x6a>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800e3aa:	89fa      	ldrh	r2, [r7, #14]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d112      	bne.n	800e3d6 <prvTCPSetSocketCount+0x6a>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800e3b6:	f003 0304 	and.w	r3, r3, #4
 800e3ba:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d107      	bne.n	800e3d0 <prvTCPSetSocketCount+0x64>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800e3c6:	f003 0302 	and.w	r3, r3, #2
 800e3ca:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d002      	beq.n	800e3d6 <prvTCPSetSocketCount+0x6a>
                {
                    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
                    /* coverity[misra_c_2012_rule_17_2_violation] */
                    /* coverity[recursive_step] */
                    ( void ) vSocketClose( pxOtherSocket );
 800e3d0:	68b8      	ldr	r0, [r7, #8]
 800e3d2:	f7ff fedb 	bl	800e18c <vSocketClose>
            while( pxIterator != pxEnd )
 800e3d6:	697a      	ldr	r2, [r7, #20]
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d1d8      	bne.n	800e390 <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 800e3de:	e03e      	b.n	800e45e <prvTCPSetSocketCount+0xf2>
            for( pxIterator = listGET_NEXT( pxEnd );
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	617b      	str	r3, [r7, #20]
 800e3e6:	e036      	b.n	800e456 <prvTCPSetSocketCount+0xea>
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	60bb      	str	r3, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	d12b      	bne.n	800e450 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800e3fc:	89fa      	ldrh	r2, [r7, #14]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d126      	bne.n	800e450 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d021      	beq.n	800e450 <prvTCPSetSocketCount+0xe4>
                    pxOtherSocket->u.xTCP.usChildCount--;
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800e412:	3b01      	subs	r3, #1
 800e414:	b29a      	uxth	r2, r3
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                    FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e420:	4619      	mov	r1, r3
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800e428:	461a      	mov	r2, r3
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800e430:	4618      	mov	r0, r3
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800e438:	2b01      	cmp	r3, #1
 800e43a:	d101      	bne.n	800e440 <prvTCPSetSocketCount+0xd4>
 800e43c:	4b0b      	ldr	r3, [pc, #44]	@ (800e46c <prvTCPSetSocketCount+0x100>)
 800e43e:	e000      	b.n	800e442 <prvTCPSetSocketCount+0xd6>
 800e440:	4b0b      	ldr	r3, [pc, #44]	@ (800e470 <prvTCPSetSocketCount+0x104>)
 800e442:	9300      	str	r3, [sp, #0]
 800e444:	4603      	mov	r3, r0
 800e446:	480b      	ldr	r0, [pc, #44]	@ (800e474 <prvTCPSetSocketCount+0x108>)
 800e448:	f013 fa36 	bl	80218b8 <lUDPLoggingPrintf>
                    break;
 800e44c:	bf00      	nop
    }
 800e44e:	e006      	b.n	800e45e <prvTCPSetSocketCount+0xf2>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800e456:	697a      	ldr	r2, [r7, #20]
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d1c4      	bne.n	800e3e8 <prvTCPSetSocketCount+0x7c>
    }
 800e45e:	bf00      	nop
 800e460:	3718      	adds	r7, #24
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	20001448 	.word	0x20001448
 800e46c:	080254c8 	.word	0x080254c8
 800e470:	080254cc 	.word	0x080254cc
 800e474:	080254d0 	.word	0x080254d0

0800e478 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800e478:	b580      	push	{r7, lr}
 800e47a:	b086      	sub	sp, #24
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e48a:	2b06      	cmp	r3, #6
 800e48c:	d00d      	beq.n	800e4aa <prvSockopt_so_buffer+0x32>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	2b04      	cmp	r3, #4
 800e492:	d101      	bne.n	800e498 <prvSockopt_so_buffer+0x20>
 800e494:	4b23      	ldr	r3, [pc, #140]	@ (800e524 <prvSockopt_so_buffer+0xac>)
 800e496:	e000      	b.n	800e49a <prvSockopt_so_buffer+0x22>
 800e498:	4b23      	ldr	r3, [pc, #140]	@ (800e528 <prvSockopt_so_buffer+0xb0>)
 800e49a:	4619      	mov	r1, r3
 800e49c:	4823      	ldr	r0, [pc, #140]	@ (800e52c <prvSockopt_so_buffer+0xb4>)
 800e49e:	f013 fa0b 	bl	80218b8 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e4a2:	f06f 0315 	mvn.w	r3, #21
 800e4a6:	617b      	str	r3, [r7, #20]
 800e4a8:	e036      	b.n	800e518 <prvSockopt_so_buffer+0xa0>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	2b04      	cmp	r3, #4
 800e4ae:	d104      	bne.n	800e4ba <prvSockopt_so_buffer+0x42>
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d107      	bne.n	800e4ca <prvSockopt_so_buffer+0x52>
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	2b05      	cmp	r3, #5
 800e4be:	d112      	bne.n	800e4e6 <prvSockopt_so_buffer+0x6e>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d00d      	beq.n	800e4e6 <prvSockopt_so_buffer+0x6e>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	2b04      	cmp	r3, #4
 800e4ce:	d101      	bne.n	800e4d4 <prvSockopt_so_buffer+0x5c>
 800e4d0:	4b14      	ldr	r3, [pc, #80]	@ (800e524 <prvSockopt_so_buffer+0xac>)
 800e4d2:	e000      	b.n	800e4d6 <prvSockopt_so_buffer+0x5e>
 800e4d4:	4b14      	ldr	r3, [pc, #80]	@ (800e528 <prvSockopt_so_buffer+0xb0>)
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	4815      	ldr	r0, [pc, #84]	@ (800e530 <prvSockopt_so_buffer+0xb8>)
 800e4da:	f013 f9ed 	bl	80218b8 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e4de:	f06f 0315 	mvn.w	r3, #21
 800e4e2:	617b      	str	r3, [r7, #20]
 800e4e4:	e018      	b.n	800e518 <prvSockopt_so_buffer+0xa0>
        }
        else
        {
            ulNewValue = *( ( const uint32_t * ) pvOptionValue );
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	2b04      	cmp	r3, #4
 800e4f0:	d10c      	bne.n	800e50c <prvSockopt_so_buffer+0x94>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	6938      	ldr	r0, [r7, #16]
 800e4fc:	f7fb fe92 	bl	800a224 <FreeRTOS_round_up>
 800e500:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	693a      	ldr	r2, [r7, #16]
 800e506:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800e50a:	e003      	b.n	800e514 <prvSockopt_so_buffer+0x9c>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	693a      	ldr	r2, [r7, #16]
 800e510:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            }

            xReturn = 0;
 800e514:	2300      	movs	r3, #0
 800e516:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800e518:	697b      	ldr	r3, [r7, #20]
    }
 800e51a:	4618      	mov	r0, r3
 800e51c:	3718      	adds	r7, #24
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
 800e522:	bf00      	nop
 800e524:	080254fc 	.word	0x080254fc
 800e528:	08025500 	.word	0x08025500
 800e52c:	08025504 	.word	0x08025504
 800e530:	08025528 	.word	0x08025528

0800e534 <prvSetOptionCallback>:
 *         value is returned.
 */
    BaseType_t prvSetOptionCallback( FreeRTOS_Socket_t * pxSocket,
                                     int32_t lOptionName,
                                     const void * pvOptionValue )
    {
 800e534:	b480      	push	{r7}
 800e536:	b087      	sub	sp, #28
 800e538:	af00      	add	r7, sp, #0
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	60b9      	str	r1, [r7, #8]
 800e53e:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = 0;
 800e540:	2300      	movs	r3, #0
 800e542:	617b      	str	r3, [r7, #20]

        #if ( ipconfigUSE_TCP == 1 )
        {
            UBaseType_t uxProtocol;

            if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	2b09      	cmp	r3, #9
 800e548:	d002      	beq.n	800e550 <prvSetOptionCallback+0x1c>
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	2b0a      	cmp	r3, #10
 800e54e:	d102      	bne.n	800e556 <prvSetOptionCallback+0x22>
                ( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
 800e550:	2311      	movs	r3, #17
 800e552:	613b      	str	r3, [r7, #16]
 800e554:	e001      	b.n	800e55a <prvSetOptionCallback+0x26>
            }
            else
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
 800e556:	2306      	movs	r3, #6
 800e558:	613b      	str	r3, [r7, #16]
            }

            if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	b2db      	uxtb	r3, r3
 800e564:	429a      	cmp	r2, r3
 800e566:	d002      	beq.n	800e56e <prvSetOptionCallback+0x3a>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e568:	f06f 0315 	mvn.w	r3, #21
 800e56c:	617b      	str	r3, [r7, #20]
            /* No need to check if the socket has the right
             * protocol, because only UDP sockets can be created. */
        }
        #endif /* ipconfigUSE_TCP */

        if( xReturn == 0 )
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d131      	bne.n	800e5d8 <prvSetOptionCallback+0xa4>
        {
            switch( lOptionName ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	3b06      	subs	r3, #6
 800e578:	2b04      	cmp	r3, #4
 800e57a:	d829      	bhi.n	800e5d0 <prvSetOptionCallback+0x9c>
 800e57c:	a201      	add	r2, pc, #4	@ (adr r2, 800e584 <prvSetOptionCallback+0x50>)
 800e57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e582:	bf00      	nop
 800e584:	0800e599 	.word	0x0800e599
 800e588:	0800e5a5 	.word	0x0800e5a5
 800e58c:	0800e5b1 	.word	0x0800e5b1
 800e590:	0800e5bd 	.word	0x0800e5bd
 800e594:	0800e5c7 	.word	0x0800e5c7
            {
                #if ipconfigUSE_TCP == 1
                    case FREERTOS_SO_TCP_CONN_HANDLER:
                        pxSocket->u.xTCP.pxHandleConnected = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPConnected;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                        break;
 800e5a2:	e019      	b.n	800e5d8 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_RECV_HANDLER:
                        pxSocket->u.xTCP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPReceive;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	685a      	ldr	r2, [r3, #4]
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                        break;
 800e5ae:	e013      	b.n	800e5d8 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_SENT_HANDLER:
                        pxSocket->u.xTCP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPSent;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	689a      	ldr	r2, [r3, #8]
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                        break;
 800e5ba:	e00d      	b.n	800e5d8 <prvSetOptionCallback+0xa4>
                #endif /* ipconfigUSE_TCP */
                case FREERTOS_SO_UDP_RECV_HANDLER:
                    pxSocket->u.xUDP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPReceive;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	68da      	ldr	r2, [r3, #12]
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	669a      	str	r2, [r3, #104]	@ 0x68
                    break;
 800e5c4:	e008      	b.n	800e5d8 <prvSetOptionCallback+0xa4>

                case FREERTOS_SO_UDP_SENT_HANDLER:
                    pxSocket->u.xUDP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPSent;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	691a      	ldr	r2, [r3, #16]
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	66da      	str	r2, [r3, #108]	@ 0x6c
                    break;
 800e5ce:	e003      	b.n	800e5d8 <prvSetOptionCallback+0xa4>

                default:                                /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
                    xReturn = -pdFREERTOS_ERRNO_EINVAL; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800e5d0:	f06f 0315 	mvn.w	r3, #21
 800e5d4:	617b      	str	r3, [r7, #20]
                    break;                              /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800e5d6:	bf00      	nop
            }
        }

        return xReturn;
 800e5d8:	697b      	ldr	r3, [r7, #20]
    }
 800e5da:	4618      	mov	r0, r3
 800e5dc:	371c      	adds	r7, #28
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop

0800e5e8 <prvSetOptionTCPWindows>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionTCPWindows( FreeRTOS_Socket_t * pxSocket,
                                              const void * pvOptionValue )
    {
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b086      	sub	sp, #24
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e5f2:	f06f 0315 	mvn.w	r3, #21
 800e5f6:	617b      	str	r3, [r7, #20]
        const WinProperties_t * pxProps;

        do
        {
            IPTCPSocket_t * pxTCP = &( pxSocket->u.xTCP );
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	3354      	adds	r3, #84	@ 0x54
 800e5fc:	613b      	str	r3, [r7, #16]

            if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e604:	2b06      	cmp	r3, #6
 800e606:	d003      	beq.n	800e610 <prvSetOptionTCPWindows+0x28>
            {
                FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
 800e608:	4825      	ldr	r0, [pc, #148]	@ (800e6a0 <prvSetOptionTCPWindows+0xb8>)
 800e60a:	f013 f955 	bl	80218b8 <lUDPLoggingPrintf>
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800e60e:	e042      	b.n	800e696 <prvSetOptionTCPWindows+0xae>
            }

            pxProps = ( const WinProperties_t * ) pvOptionValue;
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	60fb      	str	r3, [r7, #12]

            /* Validity of txStream will be checked by the function below. */
            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	461a      	mov	r2, r3
 800e618:	2104      	movs	r1, #4
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f7ff ff2c 	bl	800e478 <prvSockopt_so_buffer>
 800e620:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d133      	bne.n	800e690 <prvSetOptionTCPWindows+0xa8>
            {
                break; /* will return an error. */
            }

            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	3308      	adds	r3, #8
 800e62c:	461a      	mov	r2, r3
 800e62e:	2105      	movs	r1, #5
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f7ff ff21 	bl	800e478 <prvSockopt_so_buffer>
 800e636:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d12a      	bne.n	800e694 <prvSetOptionTCPWindows+0xac>
                break; /* will return an error. */
            }

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                pxTCP->uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	68db      	ldr	r3, [r3, #12]
 800e642:	461a      	mov	r2, r3
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                pxTCP->uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	461a      	mov	r2, r3
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            }
            #endif

            /* In case the socket has already initialised its tcpWin,
             * adapt the window size parameters */
            if( pxTCP->xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800e65c:	f003 0301 	and.w	r3, r3, #1
 800e660:	b2db      	uxtb	r3, r3
 800e662:	2b00      	cmp	r3, #0
 800e664:	d017      	beq.n	800e696 <prvSetOptionTCPWindows+0xae>
            {
                pxTCP->xTCPWindow.xSize.ulRxWindowLength = ( uint32_t ) ( pxTCP->uxRxWinSize * pxTCP->usMSS );
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e66c:	693a      	ldr	r2, [r7, #16]
 800e66e:	8bd2      	ldrh	r2, [r2, #30]
 800e670:	fb03 f202 	mul.w	r2, r3, r2
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                pxTCP->xTCPWindow.xSize.ulTxWindowLength = ( uint32_t ) ( pxTCP->uxTxWinSize * pxTCP->usMSS );
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e680:	693a      	ldr	r2, [r7, #16]
 800e682:	8bd2      	ldrh	r2, [r2, #30]
 800e684:	fb03 f202 	mul.w	r2, r3, r2
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800e68e:	e002      	b.n	800e696 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800e690:	bf00      	nop
 800e692:	e000      	b.n	800e696 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800e694:	bf00      	nop
            }
        }
        while( ipFALSE_BOOL );

        return xReturn;
 800e696:	697b      	ldr	r3, [r7, #20]
    }
 800e698:	4618      	mov	r0, r3
 800e69a:	3718      	adds	r7, #24
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	08025550 	.word	0x08025550

0800e6a4 <prvSetOptionLowHighWater>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionLowHighWater( FreeRTOS_Socket_t * pxSocket,
                                                const void * pvOptionValue )
    {
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e6ae:	f06f 0315 	mvn.w	r3, #21
 800e6b2:	60fb      	str	r3, [r7, #12]
        const LowHighWater_t * pxLowHighWater = ( const LowHighWater_t * ) pvOptionValue;
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	60bb      	str	r3, [r7, #8]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e6be:	2b06      	cmp	r3, #6
 800e6c0:	d003      	beq.n	800e6ca <prvSetOptionLowHighWater+0x26>
        {
            /* It is not allowed to access 'pxSocket->u.xTCP'. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
 800e6c2:	4813      	ldr	r0, [pc, #76]	@ (800e710 <prvSetOptionLowHighWater+0x6c>)
 800e6c4:	f013 f8f8 	bl	80218b8 <lUDPLoggingPrintf>
 800e6c8:	e01c      	b.n	800e704 <prvSetOptionLowHighWater+0x60>
        }
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d206      	bcs.n	800e6e4 <prvSetOptionLowHighWater+0x40>
                 ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	685a      	ldr	r2, [r3, #4]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d903      	bls.n	800e6ec <prvSetOptionLowHighWater+0x48>
        {
            /* Impossible values. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
 800e6e4:	480b      	ldr	r0, [pc, #44]	@ (800e714 <prvSetOptionLowHighWater+0x70>)
 800e6e6:	f013 f8e7 	bl	80218b8 <lUDPLoggingPrintf>
 800e6ea:	e00b      	b.n	800e704 <prvSetOptionLowHighWater+0x60>
        }
        else
        {
            /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
            pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	681a      	ldr	r2, [r3, #0]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
            pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	685a      	ldr	r2, [r3, #4]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            xReturn = 0;
 800e700:	2300      	movs	r3, #0
 800e702:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e704:	68fb      	ldr	r3, [r7, #12]
    }
 800e706:	4618      	mov	r0, r3
 800e708:	3710      	adds	r7, #16
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	08025574 	.word	0x08025574
 800e714:	080255a8 	.word	0x080255a8

0800e718 <prvSetOptionSetFullSize>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionSetFullSize( FreeRTOS_Socket_t * pxSocket,
                                               const void * pvOptionValue )
    {
 800e718:	b580      	push	{r7, lr}
 800e71a:	b084      	sub	sp, #16
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e722:	f06f 0315 	mvn.w	r3, #21
 800e726:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e72e:	2b06      	cmp	r3, #6
 800e730:	d126      	bne.n	800e780 <prvSetOptionSetFullSize+0x68>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d007      	beq.n	800e74a <prvSetOptionSetFullSize+0x32>
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800e740:	f043 0302 	orr.w	r3, r3, #2
 800e744:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
 800e748:	e006      	b.n	800e758 <prvSetOptionSetFullSize+0x40>
            }
            else
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800e750:	f36f 0341 	bfc	r3, #1, #1
 800e754:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
            }

            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e75e:	2b04      	cmp	r3, #4
 800e760:	d90c      	bls.n	800e77c <prvSetOptionSetFullSize+0x64>
                ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f001 faba 	bl	800fcdc <FreeRTOS_tx_size>
 800e768:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d006      	beq.n	800e77c <prvSetOptionSetFullSize+0x64>
            {
                /* There might be some data in the TX-stream, less than full-size,
                 * which equals a MSS.  Wake-up the IP-task to check this. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2201      	movs	r2, #1
 800e772:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800e776:	2006      	movs	r0, #6
 800e778:	f7fa fc1c 	bl	8008fb4 <xSendEventToIPTask>
            }

            xReturn = 0;
 800e77c:	2300      	movs	r3, #0
 800e77e:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e780:	68fb      	ldr	r3, [r7, #12]
    }
 800e782:	4618      	mov	r0, r3
 800e784:	3710      	adds	r7, #16
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}

0800e78a <prvSetOptionStopRX>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionStopRX( FreeRTOS_Socket_t * pxSocket,
                                          const void * pvOptionValue )
    {
 800e78a:	b580      	push	{r7, lr}
 800e78c:	b084      	sub	sp, #16
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
 800e792:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e794:	f06f 0315 	mvn.w	r3, #21
 800e798:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e7a0:	2b06      	cmp	r3, #6
 800e7a2:	d122      	bne.n	800e7ea <prvSetOptionStopRX+0x60>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d007      	beq.n	800e7bc <prvSetOptionStopRX+0x32>
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800e7b2:	f043 0304 	orr.w	r3, r3, #4
 800e7b6:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 800e7ba:	e006      	b.n	800e7ca <prvSetOptionStopRX+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800e7c2:	f36f 0382 	bfc	r3, #2, #1
 800e7c6:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }

            pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800e7ca:	687a      	ldr	r2, [r7, #4]
 800e7cc:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800e7d0:	f043 0301 	orr.w	r3, r3, #1
 800e7d4:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800e7e0:	2006      	movs	r0, #6
 800e7e2:	f7fa fbe7 	bl	8008fb4 <xSendEventToIPTask>
            xReturn = 0;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
    }
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3710      	adds	r7, #16
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <prvSetOptionTimeout>:
 *            otherwise handle the option `FREERTOS_SO_RCVTIMEO`.
 */
static void prvSetOptionTimeout( FreeRTOS_Socket_t * pxSocket,
                                 const void * pvOptionValue,
                                 BaseType_t xForSend )
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b087      	sub	sp, #28
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	607a      	str	r2, [r7, #4]
    TickType_t xBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	617b      	str	r3, [r7, #20]

    if( xForSend == pdTRUE )
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d110      	bne.n	800e82e <prvSetOptionTimeout+0x3a>
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e812:	2b11      	cmp	r3, #17
 800e814:	d107      	bne.n	800e826 <prvSetOptionTimeout+0x32>
        {
            /* The send time out is capped for the reason stated in the
             * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
             * in FreeRTOSIPConfig.h (assuming an official configuration file
             * is being used. */
            if( xBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d902      	bls.n	800e826 <prvSetOptionTimeout+0x32>
            {
                xBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800e820:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e824:	617b      	str	r3, [r7, #20]
            /* For TCP socket, it isn't necessary to limit the blocking time
             * because  the FreeRTOS_send() function does not wait for a network
             * buffer to become available. */
        }

        pxSocket->xSendBlockTime = xBlockTime;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	697a      	ldr	r2, [r7, #20]
 800e82a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    else
    {
        pxSocket->xReceiveBlockTime = xBlockTime;
    }
}
 800e82c:	e002      	b.n	800e834 <prvSetOptionTimeout+0x40>
        pxSocket->xReceiveBlockTime = xBlockTime;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	697a      	ldr	r2, [r7, #20]
 800e832:	621a      	str	r2, [r3, #32]
}
 800e834:	bf00      	nop
 800e836:	371c      	adds	r7, #28
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr

0800e840 <prvSetOptionReuseListenSocket>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionReuseListenSocket( FreeRTOS_Socket_t * pxSocket,
                                                     const void * pvOptionValue )
    {
 800e840:	b480      	push	{r7}
 800e842:	b085      	sub	sp, #20
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e84a:	f06f 0315 	mvn.w	r3, #21
 800e84e:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e856:	2b06      	cmp	r3, #6
 800e858:	d114      	bne.n	800e884 <prvSetOptionReuseListenSocket+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d007      	beq.n	800e872 <prvSetOptionReuseListenSocket+0x32>
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e868:	f043 0308 	orr.w	r3, r3, #8
 800e86c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800e870:	e006      	b.n	800e880 <prvSetOptionReuseListenSocket+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800e872:	687a      	ldr	r2, [r7, #4]
 800e874:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e878:	f36f 03c3 	bfc	r3, #3, #1
 800e87c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800e880:	2300      	movs	r3, #0
 800e882:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e884:	68fb      	ldr	r3, [r7, #12]
    }
 800e886:	4618      	mov	r0, r3
 800e888:	3714      	adds	r7, #20
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr

0800e892 <prvSetOptionCloseAfterSend>:
 * @param[in] pvOptionValue A pointer to a binary value of size
 *            BaseType_t.
 */
    static BaseType_t prvSetOptionCloseAfterSend( FreeRTOS_Socket_t * pxSocket,
                                                  const void * pvOptionValue )
    {
 800e892:	b480      	push	{r7}
 800e894:	b085      	sub	sp, #20
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
 800e89a:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e89c:	f06f 0315 	mvn.w	r3, #21
 800e8a0:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e8a8:	2b06      	cmp	r3, #6
 800e8aa:	d114      	bne.n	800e8d6 <prvSetOptionCloseAfterSend+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d007      	beq.n	800e8c4 <prvSetOptionCloseAfterSend+0x32>
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e8ba:	f043 0310 	orr.w	r3, r3, #16
 800e8be:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800e8c2:	e006      	b.n	800e8d2 <prvSetOptionCloseAfterSend+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e8ca:	f36f 1304 	bfc	r3, #4, #1
 800e8ce:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
    }
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3714      	adds	r7, #20
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr

0800e8e4 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b086      	sub	sp, #24
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	60b9      	str	r1, [r7, #8]
 800e8ee:	607a      	str	r2, [r7, #4]
 800e8f0:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e8f2:	f06f 0315 	mvn.w	r3, #21
 800e8f6:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	613b      	str	r3, [r7, #16]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( xSocketValid( pxSocket ) == pdTRUE )
 800e8fc:	6938      	ldr	r0, [r7, #16]
 800e8fe:	f001 fa59 	bl	800fdb4 <xSocketValid>
 800e902:	4603      	mov	r3, r0
 800e904:	2b01      	cmp	r3, #1
 800e906:	f040 8093 	bne.w	800ea30 <FreeRTOS_setsockopt+0x14c>
    {
        switch( lOptionName )
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2b12      	cmp	r3, #18
 800e90e:	f200 808b 	bhi.w	800ea28 <FreeRTOS_setsockopt+0x144>
 800e912:	a201      	add	r2, pc, #4	@ (adr r2, 800e918 <FreeRTOS_setsockopt+0x34>)
 800e914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e918:	0800e965 	.word	0x0800e965
 800e91c:	0800e975 	.word	0x0800e975
 800e920:	0800e985 	.word	0x0800e985
 800e924:	0800e9c5 	.word	0x0800e9c5
 800e928:	0800e9df 	.word	0x0800e9df
 800e92c:	0800e9df 	.word	0x0800e9df
 800e930:	0800e9b7 	.word	0x0800e9b7
 800e934:	0800e9b7 	.word	0x0800e9b7
 800e938:	0800e9b7 	.word	0x0800e9b7
 800e93c:	0800e9b7 	.word	0x0800e9b7
 800e940:	0800e9b7 	.word	0x0800e9b7
 800e944:	0800e9f9 	.word	0x0800e9f9
 800e948:	0800ea05 	.word	0x0800ea05
 800e94c:	0800e9ed 	.word	0x0800e9ed
 800e950:	0800ea11 	.word	0x0800ea11
 800e954:	0800ea1d 	.word	0x0800ea1d
 800e958:	0800ea29 	.word	0x0800ea29
 800e95c:	0800ea29 	.word	0x0800ea29
 800e960:	0800e9d3 	.word	0x0800e9d3
        {
            case FREERTOS_SO_RCVTIMEO:
                /* Receive time out. */
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdFALSE );
 800e964:	2200      	movs	r2, #0
 800e966:	6839      	ldr	r1, [r7, #0]
 800e968:	6938      	ldr	r0, [r7, #16]
 800e96a:	f7ff ff43 	bl	800e7f4 <prvSetOptionTimeout>
                xReturn = 0;
 800e96e:	2300      	movs	r3, #0
 800e970:	617b      	str	r3, [r7, #20]
                break;
 800e972:	e060      	b.n	800ea36 <FreeRTOS_setsockopt+0x152>

            case FREERTOS_SO_SNDTIMEO:
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdTRUE );
 800e974:	2201      	movs	r2, #1
 800e976:	6839      	ldr	r1, [r7, #0]
 800e978:	6938      	ldr	r0, [r7, #16]
 800e97a:	f7ff ff3b 	bl	800e7f4 <prvSetOptionTimeout>
                xReturn = 0;
 800e97e:	2300      	movs	r3, #0
 800e980:	617b      	str	r3, [r7, #20]
                break;
 800e982:	e058      	b.n	800ea36 <FreeRTOS_setsockopt+0x152>
            case FREERTOS_SO_UDPCKSUM_OUT:

                /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
                 * is anything else than NULL, the checksum generation will be turned on. */

                if( pvOptionValue == NULL )
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d109      	bne.n	800e99e <FreeRTOS_setsockopt+0xba>
                {
                    pxSocket->ucSocketOptions &= ( ( uint8_t ) ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) );
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e990:	f023 0302 	bic.w	r3, r3, #2
 800e994:	b2da      	uxtb	r2, r3
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800e99c:	e008      	b.n	800e9b0 <FreeRTOS_setsockopt+0xcc>
                }
                else
                {
                    pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e9a4:	f043 0302 	orr.w	r3, r3, #2
 800e9a8:	b2da      	uxtb	r2, r3
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                }

                xReturn = 0;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	617b      	str	r3, [r7, #20]
                break;
 800e9b4:	e03f      	b.n	800ea36 <FreeRTOS_setsockopt+0x152>
                        case FREERTOS_SO_TCP_RECV_HANDLER: /* Install a callback for receiving TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        case FREERTOS_SO_TCP_SENT_HANDLER: /* Install a callback for sending TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    #endif /* ipconfigUSE_TCP */
                    case FREERTOS_SO_UDP_RECV_HANDLER:     /* Install a callback for receiving UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    case FREERTOS_SO_UDP_SENT_HANDLER:     /* Install a callback for sending UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        xReturn = prvSetOptionCallback( pxSocket, lOptionName, pvOptionValue );
 800e9b6:	683a      	ldr	r2, [r7, #0]
 800e9b8:	6879      	ldr	r1, [r7, #4]
 800e9ba:	6938      	ldr	r0, [r7, #16]
 800e9bc:	f7ff fdba 	bl	800e534 <prvSetOptionCallback>
 800e9c0:	6178      	str	r0, [r7, #20]
                        break;
 800e9c2:	e038      	b.n	800ea36 <FreeRTOS_setsockopt+0x152>
                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )

                    /* Each socket has a semaphore on which the using task normally
                     * sleeps. */
                    case FREERTOS_SO_SET_SEMAPHORE:
                        pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	63da      	str	r2, [r3, #60]	@ 0x3c
                        xReturn = 0;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	617b      	str	r3, [r7, #20]
                        break;
 800e9d0:	e031      	b.n	800ea36 <FreeRTOS_setsockopt+0x152>
                        break;
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                #if ( ipconfigUSE_TCP != 0 )
                    case FREERTOS_SO_SET_LOW_HIGH_WATER:
                        xReturn = prvSetOptionLowHighWater( pxSocket, pvOptionValue );
 800e9d2:	6839      	ldr	r1, [r7, #0]
 800e9d4:	6938      	ldr	r0, [r7, #16]
 800e9d6:	f7ff fe65 	bl	800e6a4 <prvSetOptionLowHighWater>
 800e9da:	6178      	str	r0, [r7, #20]
                        break;
 800e9dc:	e02b      	b.n	800ea36 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                    case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                        xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800e9de:	683a      	ldr	r2, [r7, #0]
 800e9e0:	6879      	ldr	r1, [r7, #4]
 800e9e2:	6938      	ldr	r0, [r7, #16]
 800e9e4:	f7ff fd48 	bl	800e478 <prvSockopt_so_buffer>
 800e9e8:	6178      	str	r0, [r7, #20]
                        break;
 800e9ea:	e024      	b.n	800ea36 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                        xReturn = prvSetOptionTCPWindows( pxSocket, pvOptionValue );
 800e9ec:	6839      	ldr	r1, [r7, #0]
 800e9ee:	6938      	ldr	r0, [r7, #16]
 800e9f0:	f7ff fdfa 	bl	800e5e8 <prvSetOptionTCPWindows>
 800e9f4:	6178      	str	r0, [r7, #20]
                        break;
 800e9f6:	e01e      	b.n	800ea36 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                        xReturn = prvSetOptionReuseListenSocket( pxSocket, pvOptionValue );
 800e9f8:	6839      	ldr	r1, [r7, #0]
 800e9fa:	6938      	ldr	r0, [r7, #16]
 800e9fc:	f7ff ff20 	bl	800e840 <prvSetOptionReuseListenSocket>
 800ea00:	6178      	str	r0, [r7, #20]
                        break;
 800ea02:	e018      	b.n	800ea36 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                        xReturn = prvSetOptionCloseAfterSend( pxSocket, pvOptionValue );
 800ea04:	6839      	ldr	r1, [r7, #0]
 800ea06:	6938      	ldr	r0, [r7, #16]
 800ea08:	f7ff ff43 	bl	800e892 <prvSetOptionCloseAfterSend>
 800ea0c:	6178      	str	r0, [r7, #20]
                        break;
 800ea0e:	e012      	b.n	800ea36 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                        xReturn = prvSetOptionSetFullSize( pxSocket, pvOptionValue );
 800ea10:	6839      	ldr	r1, [r7, #0]
 800ea12:	6938      	ldr	r0, [r7, #16]
 800ea14:	f7ff fe80 	bl	800e718 <prvSetOptionSetFullSize>
 800ea18:	6178      	str	r0, [r7, #20]
                        break;
 800ea1a:	e00c      	b.n	800ea36 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                        xReturn = prvSetOptionStopRX( pxSocket, pvOptionValue );
 800ea1c:	6839      	ldr	r1, [r7, #0]
 800ea1e:	6938      	ldr	r0, [r7, #16]
 800ea20:	f7ff feb3 	bl	800e78a <prvSetOptionStopRX>
 800ea24:	6178      	str	r0, [r7, #20]
                        break;
 800ea26:	e006      	b.n	800ea36 <FreeRTOS_setsockopt+0x152>
                #endif /* ipconfigUSE_TCP == 1 */

            default:
                /* No other options are handled. */
                xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800ea28:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800ea2c:	617b      	str	r3, [r7, #20]
                break;
 800ea2e:	e002      	b.n	800ea36 <FreeRTOS_setsockopt+0x152>
        }
    }
    else
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ea30:	f06f 0315 	mvn.w	r3, #21
 800ea34:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800ea36:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3718      	adds	r7, #24
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b086      	sub	sp, #24
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800ea48:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800ea4c:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800ea4e:	89fb      	ldrh	r3, [r7, #14]
 800ea50:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800ea52:	2300      	movs	r3, #0
 800ea54:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800ea56:	2300      	movs	r3, #0
 800ea58:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2b06      	cmp	r3, #6
 800ea5e:	d102      	bne.n	800ea66 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800ea60:	4b21      	ldr	r3, [pc, #132]	@ (800eae8 <prvGetPrivatePortNumber+0xa8>)
 800ea62:	613b      	str	r3, [r7, #16]
 800ea64:	e001      	b.n	800ea6a <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800ea66:	4b21      	ldr	r3, [pc, #132]	@ (800eaec <prvGetPrivatePortNumber+0xac>)
 800ea68:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800ea6a:	f107 0308 	add.w	r3, r7, #8
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7f2 fec6 	bl	8001800 <xApplicationGetRandomNumber>
 800ea74:	4603      	mov	r3, r0
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d030      	beq.n	800eadc <prvGetPrivatePortNumber+0x9c>
            break;
        }

        /* Map the random to a candidate port. */
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
                                  ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount ) );
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	b29b      	uxth	r3, r3
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800ea7e:	89fa      	ldrh	r2, [r7, #14]
 800ea80:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea84:	fb01 f202 	mul.w	r2, r1, r2
 800ea88:	1a9b      	subs	r3, r3, r2
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ea90:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800ea92:	8abb      	ldrh	r3, [r7, #20]
 800ea94:	021b      	lsls	r3, r3, #8
 800ea96:	b21a      	sxth	r2, r3
 800ea98:	8abb      	ldrh	r3, [r7, #20]
 800ea9a:	0a1b      	lsrs	r3, r3, #8
 800ea9c:	b29b      	uxth	r3, r3
 800ea9e:	b21b      	sxth	r3, r3
 800eaa0:	4313      	orrs	r3, r2
 800eaa2:	b21b      	sxth	r3, r3
 800eaa4:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	6938      	ldr	r0, [r7, #16]
 800eaaa:	f000 f821 	bl	800eaf0 <pxListFindListItemWithValue>
 800eaae:	4603      	mov	r3, r0
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d10a      	bne.n	800eaca <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800eab4:	8abb      	ldrh	r3, [r7, #20]
 800eab6:	021b      	lsls	r3, r3, #8
 800eab8:	b21a      	sxth	r2, r3
 800eaba:	8abb      	ldrh	r3, [r7, #20]
 800eabc:	0a1b      	lsrs	r3, r3, #8
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	b21b      	sxth	r3, r3
 800eac2:	4313      	orrs	r3, r2
 800eac4:	b21b      	sxth	r3, r3
 800eac6:	82bb      	strh	r3, [r7, #20]
            break;
 800eac8:	e009      	b.n	800eade <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800eaca:	2300      	movs	r3, #0
 800eacc:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800eace:	8afb      	ldrh	r3, [r7, #22]
 800ead0:	3b01      	subs	r3, #1
 800ead2:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800ead4:	8afb      	ldrh	r3, [r7, #22]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d1c7      	bne.n	800ea6a <prvGetPrivatePortNumber+0x2a>
 800eada:	e000      	b.n	800eade <prvGetPrivatePortNumber+0x9e>
            break;
 800eadc:	bf00      	nop

    return usResult;
 800eade:	8abb      	ldrh	r3, [r7, #20]
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3718      	adds	r7, #24
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}
 800eae8:	20001440 	.word	0x20001440
 800eaec:	2000142c 	.word	0x2000142c

0800eaf0 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b086      	sub	sp, #24
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800eafa:	2300      	movs	r3, #0
 800eafc:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800eafe:	f7fa fe0b 	bl	8009718 <xIPIsNetworkTaskReady>
 800eb02:	4603      	mov	r3, r0
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d018      	beq.n	800eb3a <pxListFindListItemWithValue+0x4a>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d015      	beq.n	800eb3a <pxListFindListItemWithValue+0x4a>
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxList->xListEnd ) );
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	3308      	adds	r3, #8
 800eb12:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	613b      	str	r3, [r7, #16]
 800eb1a:	e00a      	b.n	800eb32 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	683a      	ldr	r2, [r7, #0]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d102      	bne.n	800eb2c <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	617b      	str	r3, [r7, #20]
                break;
 800eb2a:	e006      	b.n	800eb3a <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800eb32:	693a      	ldr	r2, [r7, #16]
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d1f0      	bne.n	800eb1c <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800eb3a:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3718      	adds	r7, #24
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800eb50:	6879      	ldr	r1, [r7, #4]
 800eb52:	480b      	ldr	r0, [pc, #44]	@ (800eb80 <pxUDPSocketLookup+0x3c>)
 800eb54:	f7ff ffcc 	bl	800eaf0 <pxListFindListItemWithValue>
 800eb58:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d00a      	beq.n	800eb76 <pxUDPSocketLookup+0x32>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem ) );
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	68db      	ldr	r3, [r3, #12]
 800eb64:	60fb      	str	r3, [r7, #12]
        configASSERT( pxSocket != NULL );
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d104      	bne.n	800eb76 <pxUDPSocketLookup+0x32>
 800eb6c:	f640 4111 	movw	r1, #3089	@ 0xc11
 800eb70:	4804      	ldr	r0, [pc, #16]	@ (800eb84 <pxUDPSocketLookup+0x40>)
 800eb72:	f7f2 fd7b 	bl	800166c <vAssertCalled>
    }

    return pxSocket;
 800eb76:	68fb      	ldr	r3, [r7, #12]
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3710      	adds	r7, #16
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}
 800eb80:	2000142c 	.word	0x2000142c
 800eb84:	08025294 	.word	0x08025294

0800eb88 <FreeRTOS_inet_ntoa>:
 * @return The pointer returned will be same as pcBuffer and will have the address
 *         stored in the location.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b08b      	sub	sp, #44	@ 0x2c
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800eb92:	2300      	movs	r3, #0
 800eb94:	623b      	str	r3, [r7, #32]
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800eb96:	1d3b      	adds	r3, r7, #4
 800eb98:	617b      	str	r3, [r7, #20]
    const char * pcResult = pcBuffer;
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	613b      	str	r3, [r7, #16]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800eb9e:	2300      	movs	r3, #0
 800eba0:	627b      	str	r3, [r7, #36]	@ 0x24
 800eba2:	e062      	b.n	800ec6a <FreeRTOS_inet_ntoa+0xe2>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800eba4:	697a      	ldr	r2, [r7, #20]
 800eba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eba8:	4413      	add	r3, r2
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	77fb      	strb	r3, [r7, #31]
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800ebae:	2302      	movs	r3, #2
 800ebb0:	61bb      	str	r3, [r7, #24]

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800ebb2:	7ffa      	ldrb	r2, [r7, #31]
 800ebb4:	4b32      	ldr	r3, [pc, #200]	@ (800ec80 <FreeRTOS_inet_ntoa+0xf8>)
 800ebb6:	fba3 1302 	umull	r1, r3, r3, r2
 800ebba:	08d9      	lsrs	r1, r3, #3
 800ebbc:	460b      	mov	r3, r1
 800ebbe:	009b      	lsls	r3, r3, #2
 800ebc0:	440b      	add	r3, r1
 800ebc2:	005b      	lsls	r3, r3, #1
 800ebc4:	1ad3      	subs	r3, r2, r3
 800ebc6:	b2d9      	uxtb	r1, r3
 800ebc8:	f107 020c 	add.w	r2, r7, #12
 800ebcc:	69bb      	ldr	r3, [r7, #24]
 800ebce:	4413      	add	r3, r2
 800ebd0:	460a      	mov	r2, r1
 800ebd2:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800ebd4:	7ffb      	ldrb	r3, [r7, #31]
 800ebd6:	4a2a      	ldr	r2, [pc, #168]	@ (800ec80 <FreeRTOS_inet_ntoa+0xf8>)
 800ebd8:	fba2 2303 	umull	r2, r3, r2, r3
 800ebdc:	08db      	lsrs	r3, r3, #3
 800ebde:	77fb      	strb	r3, [r7, #31]

            if( uxSource == 1U )
 800ebe0:	69bb      	ldr	r3, [r7, #24]
 800ebe2:	2b01      	cmp	r3, #1
 800ebe4:	d003      	beq.n	800ebee <FreeRTOS_inet_ntoa+0x66>
            {
                break;
            }

            uxSource--;
 800ebe6:	69bb      	ldr	r3, [r7, #24]
 800ebe8:	3b01      	subs	r3, #1
 800ebea:	61bb      	str	r3, [r7, #24]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800ebec:	e7e1      	b.n	800ebb2 <FreeRTOS_inet_ntoa+0x2a>
                break;
 800ebee:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800ebf0:	7ffb      	ldrb	r3, [r7, #31]
 800ebf2:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	61bb      	str	r3, [r7, #24]
 800ebf8:	e009      	b.n	800ec0e <FreeRTOS_inet_ntoa+0x86>
        {
            if( pucDigits[ uxSource ] != 0U )
 800ebfa:	f107 020c 	add.w	r2, r7, #12
 800ebfe:	69bb      	ldr	r3, [r7, #24]
 800ec00:	4413      	add	r3, r2
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d106      	bne.n	800ec16 <FreeRTOS_inet_ntoa+0x8e>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	61bb      	str	r3, [r7, #24]
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d9f2      	bls.n	800ebfa <FreeRTOS_inet_ntoa+0x72>
 800ec14:	e012      	b.n	800ec3c <FreeRTOS_inet_ntoa+0xb4>
            {
                break;
 800ec16:	bf00      	nop
            }
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800ec18:	e010      	b.n	800ec3c <FreeRTOS_inet_ntoa+0xb4>
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800ec1a:	f107 020c 	add.w	r2, r7, #12
 800ec1e:	69bb      	ldr	r3, [r7, #24]
 800ec20:	4413      	add	r3, r2
 800ec22:	781a      	ldrb	r2, [r3, #0]
 800ec24:	6839      	ldr	r1, [r7, #0]
 800ec26:	6a3b      	ldr	r3, [r7, #32]
 800ec28:	440b      	add	r3, r1
 800ec2a:	3230      	adds	r2, #48	@ 0x30
 800ec2c:	b2d2      	uxtb	r2, r2
 800ec2e:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800ec30:	6a3b      	ldr	r3, [r7, #32]
 800ec32:	3301      	adds	r3, #1
 800ec34:	623b      	str	r3, [r7, #32]
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800ec36:	69bb      	ldr	r3, [r7, #24]
 800ec38:	3301      	adds	r3, #1
 800ec3a:	61bb      	str	r3, [r7, #24]
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	2b02      	cmp	r3, #2
 800ec40:	d9eb      	bls.n	800ec1a <FreeRTOS_inet_ntoa+0x92>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800ec42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec44:	2b02      	cmp	r3, #2
 800ec46:	d805      	bhi.n	800ec54 <FreeRTOS_inet_ntoa+0xcc>
        {
            pcBuffer[ uxIndex ] = '.';
 800ec48:	683a      	ldr	r2, [r7, #0]
 800ec4a:	6a3b      	ldr	r3, [r7, #32]
 800ec4c:	4413      	add	r3, r2
 800ec4e:	222e      	movs	r2, #46	@ 0x2e
 800ec50:	701a      	strb	r2, [r3, #0]
 800ec52:	e004      	b.n	800ec5e <FreeRTOS_inet_ntoa+0xd6>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800ec54:	683a      	ldr	r2, [r7, #0]
 800ec56:	6a3b      	ldr	r3, [r7, #32]
 800ec58:	4413      	add	r3, r2
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800ec5e:	6a3b      	ldr	r3, [r7, #32]
 800ec60:	3301      	adds	r3, #1
 800ec62:	623b      	str	r3, [r7, #32]
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800ec64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec66:	3301      	adds	r3, #1
 800ec68:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec6c:	2b03      	cmp	r3, #3
 800ec6e:	d999      	bls.n	800eba4 <FreeRTOS_inet_ntoa+0x1c>
    }

    return pcResult;
 800ec70:	693b      	ldr	r3, [r7, #16]
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	372c      	adds	r7, #44	@ 0x2c
 800ec76:	46bd      	mov	sp, r7
 800ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7c:	4770      	bx	lr
 800ec7e:	bf00      	nop
 800ec80:	cccccccd 	.word	0xcccccccd

0800ec84 <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b086      	sub	sp, #24
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	607a      	str	r2, [r7, #4]
 800ec90:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2b02      	cmp	r3, #2
 800ec96:	d003      	beq.n	800eca0 <FreeRTOS_inet_ntop+0x1c>
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2b0a      	cmp	r3, #10
 800ec9c:	d007      	beq.n	800ecae <FreeRTOS_inet_ntop+0x2a>
 800ec9e:	e00d      	b.n	800ecbc <FreeRTOS_inet_ntop+0x38>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800eca0:	683a      	ldr	r2, [r7, #0]
 800eca2:	6879      	ldr	r1, [r7, #4]
 800eca4:	68b8      	ldr	r0, [r7, #8]
 800eca6:	f7fb fc8d 	bl	800a5c4 <FreeRTOS_inet_ntop4>
 800ecaa:	6178      	str	r0, [r7, #20]
                break;
 800ecac:	e009      	b.n	800ecc2 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                pcResult = FreeRTOS_inet_ntop6( pvSource, pcDestination, uxSize );
 800ecae:	683a      	ldr	r2, [r7, #0]
 800ecb0:	6879      	ldr	r1, [r7, #4]
 800ecb2:	68b8      	ldr	r0, [r7, #8]
 800ecb4:	f7fc f9c1 	bl	800b03a <FreeRTOS_inet_ntop6>
 800ecb8:	6178      	str	r0, [r7, #20]
                break;
 800ecba:	e002      	b.n	800ecc2 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	617b      	str	r3, [r7, #20]
            break;
 800ecc0:	bf00      	nop
    }

    return pcResult;
 800ecc2:	697b      	ldr	r3, [r7, #20]
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3718      	adds	r7, #24
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <FreeRTOS_GetLocalAddress>:
 *
 * @return Size of the freertos_sockaddr structure.
 */
size_t FreeRTOS_GetLocalAddress( ConstSocket_t xSocket,
                                 struct freertos_sockaddr * pxAddress )
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	6039      	str	r1, [r7, #0]
    const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	60fb      	str	r3, [r7, #12]

    switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	7a1b      	ldrb	r3, [r3, #8]
 800ecde:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d002      	beq.n	800ecee <FreeRTOS_GetLocalAddress+0x22>
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d02a      	beq.n	800ed42 <FreeRTOS_GetLocalAddress+0x76>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* MISRA 16.4 Compliance */
            break;
 800ecec:	e044      	b.n	800ed78 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET;
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	2202      	movs	r2, #2
 800ecf2:	705a      	strb	r2, [r3, #1]
                pxAddress->sin_len = ( uint8_t ) sizeof( *pxAddress );
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	2218      	movs	r2, #24
 800ecf8:	701a      	strb	r2, [r3, #0]
                pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecfe:	061a      	lsls	r2, r3, #24
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed04:	021b      	lsls	r3, r3, #8
 800ed06:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ed0a:	431a      	orrs	r2, r3
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed10:	0a1b      	lsrs	r3, r3, #8
 800ed12:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ed16:	431a      	orrs	r2, r3
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed1c:	0e1b      	lsrs	r3, r3, #24
 800ed1e:	431a      	orrs	r2, r3
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	609a      	str	r2, [r3, #8]
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ed28:	021b      	lsls	r3, r3, #8
 800ed2a:	b21a      	sxth	r2, r3
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ed30:	0a1b      	lsrs	r3, r3, #8
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	b21b      	sxth	r3, r3
 800ed36:	4313      	orrs	r3, r2
 800ed38:	b21b      	sxth	r3, r3
 800ed3a:	b29a      	uxth	r2, r3
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	805a      	strh	r2, [r3, #2]
                break;
 800ed40:	e01a      	b.n	800ed78 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	220a      	movs	r2, #10
 800ed46:	705a      	strb	r2, [r3, #1]
                ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxAddress->sin_address.xIP_IPv6.ucBytes ) );
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	f103 0008 	add.w	r0, r3, #8
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	3328      	adds	r3, #40	@ 0x28
 800ed52:	2210      	movs	r2, #16
 800ed54:	4619      	mov	r1, r3
 800ed56:	f012 ffcb 	bl	8021cf0 <memcpy>
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ed5e:	021b      	lsls	r3, r3, #8
 800ed60:	b21a      	sxth	r2, r3
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ed66:	0a1b      	lsrs	r3, r3, #8
 800ed68:	b29b      	uxth	r3, r3
 800ed6a:	b21b      	sxth	r3, r3
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	b21b      	sxth	r3, r3
 800ed70:	b29a      	uxth	r2, r3
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	805a      	strh	r2, [r3, #2]
                break;
 800ed76:	bf00      	nop
    }

    return sizeof( *pxAddress );
 800ed78:	2318      	movs	r3, #24
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3710      	adds	r7, #16
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}

0800ed82 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800ed82:	b580      	push	{r7, lr}
 800ed84:	b084      	sub	sp, #16
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	6078      	str	r0, [r7, #4]
/* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 * event or transition */
    #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
    {
        if( pxSocket->pxUserSemaphore != NULL )
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d006      	beq.n	800eda0 <vSocketWakeUpUser+0x1e>
        {
            ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ed96:	2300      	movs	r3, #0
 800ed98:	2200      	movs	r2, #0
 800ed9a:	2100      	movs	r1, #0
 800ed9c:	f7f4 f95c 	bl	8003058 <xQueueGenericSend>
    }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
    {
        if( pxSocket->pxSocketSet != NULL )
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d015      	beq.n	800edd4 <vSocketWakeUpUser+0x52>
        {
            EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	0a1b      	lsrs	r3, r3, #8
 800edae:	f003 030f 	and.w	r3, r3, #15
 800edb2:	60fb      	str	r3, [r7, #12]

            if( xSelectBits != 0U )
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d00c      	beq.n	800edd4 <vSocketWakeUpUser+0x52>
            {
                pxSocket->xSocketBits |= xSelectBits;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	431a      	orrs	r2, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	649a      	str	r2, [r3, #72]	@ 0x48
                ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	68f9      	ldr	r1, [r7, #12]
 800edce:	4618      	mov	r0, r3
 800edd0:	f7f3 fe66 	bl	8002aa0 <xEventGroupSetBits>
            }
        }

        pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	601a      	str	r2, [r3, #0]
    }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	685b      	ldr	r3, [r3, #4]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d00b      	beq.n	800ee00 <vSocketWakeUpUser+0x7e>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d007      	beq.n	800ee00 <vSocketWakeUpUser+0x7e>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	685a      	ldr	r2, [r3, #4]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4619      	mov	r1, r3
 800edfa:	4610      	mov	r0, r2
 800edfc:	f7f3 fe50 	bl	8002aa0 <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0U;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2200      	movs	r2, #0
 800ee04:	601a      	str	r2, [r3, #0]
}
 800ee06:	bf00      	nop
 800ee08:	3710      	adds	r7, #16
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}

0800ee0e <bMayConnect>:
 * @param[in] pxSocket The socket trying to connect.
 *
 * @return It may return: -EINPROGRESS, -EAGAIN, or 0 for OK.
 */
    static BaseType_t bMayConnect( FreeRTOS_Socket_t const * pxSocket )
    {
 800ee0e:	b480      	push	{r7}
 800ee10:	b085      	sub	sp, #20
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
        BaseType_t xResult;

        eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ee1c:	72fb      	strb	r3, [r7, #11]

        switch( eState )
 800ee1e:	7afb      	ldrb	r3, [r7, #11]
 800ee20:	2b08      	cmp	r3, #8
 800ee22:	d006      	beq.n	800ee32 <bMayConnect+0x24>
 800ee24:	2b08      	cmp	r3, #8
 800ee26:	dc0b      	bgt.n	800ee40 <bMayConnect+0x32>
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d002      	beq.n	800ee32 <bMayConnect+0x24>
 800ee2c:	2b02      	cmp	r3, #2
 800ee2e:	d003      	beq.n	800ee38 <bMayConnect+0x2a>
 800ee30:	e006      	b.n	800ee40 <bMayConnect+0x32>
        {
            case eCLOSED:
            case eCLOSE_WAIT:
                xResult = 0;
 800ee32:	2300      	movs	r3, #0
 800ee34:	60fb      	str	r3, [r7, #12]
                break;
 800ee36:	e007      	b.n	800ee48 <bMayConnect+0x3a>

            case eCONNECT_SYN:
                xResult = -pdFREERTOS_ERRNO_EINPROGRESS;
 800ee38:	f06f 0376 	mvn.w	r3, #118	@ 0x76
 800ee3c:	60fb      	str	r3, [r7, #12]
                break;
 800ee3e:	e003      	b.n	800ee48 <bMayConnect+0x3a>
            case eFIN_WAIT_2:
            case eCLOSING:
            case eLAST_ACK:
            case eTIME_WAIT:
            default:
                xResult = -pdFREERTOS_ERRNO_EAGAIN;
 800ee40:	f06f 030a 	mvn.w	r3, #10
 800ee44:	60fb      	str	r3, [r7, #12]
                break;
 800ee46:	bf00      	nop
        }

        return xResult;
 800ee48:	68fb      	ldr	r3, [r7, #12]
    }
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3714      	adds	r7, #20
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr
	...

0800ee58 <prvTCPConnectStart>:
 *
 * @return 0 on successful checks or a negative error code.
 */
    static BaseType_t prvTCPConnectStart( FreeRTOS_Socket_t * pxSocket,
                                          struct freertos_sockaddr const * pxAddress )
    {
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = 0;
 800ee62:	2300      	movs	r3, #0
 800ee64:	60fb      	str	r3, [r7, #12]

        if( pxAddress == NULL )
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d103      	bne.n	800ee74 <prvTCPConnectStart+0x1c>
        {
            /* NULL address passed to the function. Invalid value. */
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800ee6c:	f06f 0315 	mvn.w	r3, #21
 800ee70:	60fb      	str	r3, [r7, #12]
 800ee72:	e01f      	b.n	800eeb4 <prvTCPConnectStart+0x5c>
        }
        else if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdFALSE )
 800ee74:	2200      	movs	r2, #0
 800ee76:	2106      	movs	r1, #6
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7fe fc71 	bl	800d760 <prvValidSocket>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d103      	bne.n	800ee8c <prvTCPConnectStart+0x34>
        {
            /* Not a valid socket or wrong type */
            xResult = -pdFREERTOS_ERRNO_EBADF;
 800ee84:	f06f 0308 	mvn.w	r3, #8
 800ee88:	60fb      	str	r3, [r7, #12]
 800ee8a:	e013      	b.n	800eeb4 <prvTCPConnectStart+0x5c>
        }
        else if( FreeRTOS_issocketconnected( pxSocket ) > 0 )
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f000 ff49 	bl	800fd24 <FreeRTOS_issocketconnected>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	dd03      	ble.n	800eea0 <prvTCPConnectStart+0x48>
        {
            /* The socket is already connected. */
            xResult = -pdFREERTOS_ERRNO_EISCONN;
 800ee98:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800ee9c:	60fb      	str	r3, [r7, #12]
 800ee9e:	e009      	b.n	800eeb4 <prvTCPConnectStart+0x5c>
        }
        else if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	69db      	ldr	r3, [r3, #28]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d105      	bne.n	800eeb4 <prvTCPConnectStart+0x5c>
        {
            /* Bind the socket to the port that the client task will send from.
             * Non-standard, so the error returned is that returned by bind(). */
            xResult = FreeRTOS_bind( pxSocket, NULL, 0U );
 800eea8:	2200      	movs	r2, #0
 800eeaa:	2100      	movs	r1, #0
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f7fe ff4f 	bl	800dd50 <FreeRTOS_bind>
 800eeb2:	60f8      	str	r0, [r7, #12]
        else
        {
            /* The socket is valid, not yet connected, and already bound to a port number. */
        }

        if( xResult == 0 )
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	f040 80a6 	bne.w	800f008 <prvTCPConnectStart+0x1b0>
        {
            /* Check if it makes any sense to wait for a connect event, this condition
             * might change while sleeping, so it must be checked within each loop */
            xResult = bMayConnect( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f7ff ffa6 	bl	800ee0e <bMayConnect>
 800eec2:	60f8      	str	r0, [r7, #12]

            /* Start the connect procedure, kernel will start working on it */
            if( xResult == 0 )
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	f040 809e 	bne.w	800f008 <prvTCPConnectStart+0x1b0>
            {
                pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE;
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800eed2:	f36f 03c3 	bfc	r3, #3, #1
 800eed6:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.ucRepCount = 0U;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2200      	movs	r2, #0
 800eede:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                switch( pxAddress->sin_family )
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	785b      	ldrb	r3, [r3, #1]
 800eee6:	2b02      	cmp	r3, #2
 800eee8:	d027      	beq.n	800ef3a <prvTCPConnectStart+0xe2>
 800eeea:	2b0a      	cmp	r3, #10
 800eeec:	d168      	bne.n	800efc0 <prvTCPConnectStart+0x168>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case FREERTOS_AF_INET6:
                            pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	7a13      	ldrb	r3, [r2, #8]
 800eef2:	f043 0301 	orr.w	r3, r3, #1
 800eef6:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %pip port %u\n",
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800eefc:	4618      	mov	r0, r3
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	f103 0108 	add.w	r1, r3, #8
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	885b      	ldrh	r3, [r3, #2]
 800ef08:	021b      	lsls	r3, r3, #8
 800ef0a:	b21a      	sxth	r2, r3
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	885b      	ldrh	r3, [r3, #2]
 800ef10:	0a1b      	lsrs	r3, r3, #8
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	b21b      	sxth	r3, r3
 800ef16:	4313      	orrs	r3, r2
 800ef18:	b21b      	sxth	r3, r3
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	460a      	mov	r2, r1
 800ef1e:	4601      	mov	r1, r0
 800ef20:	483c      	ldr	r0, [pc, #240]	@ (800f014 <prvTCPConnectStart+0x1bc>)
 800ef22:	f012 fcc9 	bl	80218b8 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( void * ) pxAddress->sin_address.xIP_IPv6.ucBytes,
                                               FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            ( void ) memcpy( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	3308      	adds	r3, #8
 800ef30:	2210      	movs	r2, #16
 800ef32:	4619      	mov	r1, r3
 800ef34:	f012 fedc 	bl	8021cf0 <memcpy>
                            break;
 800ef38:	e046      	b.n	800efc8 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case FREERTOS_AF_INET4:
                            pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800ef3a:	687a      	ldr	r2, [r7, #4]
 800ef3c:	7a13      	ldrb	r3, [r2, #8]
 800ef3e:	f36f 0300 	bfc	r3, #0, #1
 800ef42:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %xip:%u\n",
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ef48:	4618      	mov	r0, r3
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	061a      	lsls	r2, r3, #24
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	689b      	ldr	r3, [r3, #8]
 800ef54:	021b      	lsls	r3, r3, #8
 800ef56:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ef5a:	431a      	orrs	r2, r3
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	689b      	ldr	r3, [r3, #8]
 800ef60:	0a1b      	lsrs	r3, r3, #8
 800ef62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ef66:	431a      	orrs	r2, r3
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	689b      	ldr	r3, [r3, #8]
 800ef6c:	0e1b      	lsrs	r3, r3, #24
 800ef6e:	ea42 0103 	orr.w	r1, r2, r3
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	885b      	ldrh	r3, [r3, #2]
 800ef76:	021b      	lsls	r3, r3, #8
 800ef78:	b21a      	sxth	r2, r3
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	885b      	ldrh	r3, [r3, #2]
 800ef7e:	0a1b      	lsrs	r3, r3, #8
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	b21b      	sxth	r3, r3
 800ef84:	4313      	orrs	r3, r2
 800ef86:	b21b      	sxth	r3, r3
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	460a      	mov	r2, r1
 800ef8c:	4601      	mov	r1, r0
 800ef8e:	4822      	ldr	r0, [pc, #136]	@ (800f018 <prvTCPConnectStart+0x1c0>)
 800ef90:	f012 fc92 	bl	80218b8 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( unsigned int ) FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 ), FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	689b      	ldr	r3, [r3, #8]
 800ef98:	061a      	lsls	r2, r3, #24
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	689b      	ldr	r3, [r3, #8]
 800ef9e:	021b      	lsls	r3, r3, #8
 800efa0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800efa4:	431a      	orrs	r2, r3
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	689b      	ldr	r3, [r3, #8]
 800efaa:	0a1b      	lsrs	r3, r3, #8
 800efac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800efb0:	431a      	orrs	r2, r3
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	689b      	ldr	r3, [r3, #8]
 800efb6:	0e1b      	lsrs	r3, r3, #24
 800efb8:	431a      	orrs	r2, r3
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	655a      	str	r2, [r3, #84]	@ 0x54
                            break;
 800efbe:	e003      	b.n	800efc8 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        FreeRTOS_debug_printf( ( "FreeRTOS_connect: Undefined sin_family \n" ) );
 800efc0:	4816      	ldr	r0, [pc, #88]	@ (800f01c <prvTCPConnectStart+0x1c4>)
 800efc2:	f012 fc79 	bl	80218b8 <lUDPLoggingPrintf>
                        break;
 800efc6:	bf00      	nop
                }

                /* Port on remote machine. */
                pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	885b      	ldrh	r3, [r3, #2]
 800efcc:	021b      	lsls	r3, r3, #8
 800efce:	b21a      	sxth	r2, r3
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	885b      	ldrh	r3, [r3, #2]
 800efd4:	0a1b      	lsrs	r3, r3, #8
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	b21b      	sxth	r3, r3
 800efda:	4313      	orrs	r3, r2
 800efdc:	b21b      	sxth	r3, r3
 800efde:	b29a      	uxth	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

                /* (client) internal state: socket wants to send a connect. */
                vTCPStateChange( pxSocket, eCONNECT_SYN );
 800efe6:	2102      	movs	r1, #2
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f001 fc59 	bl	80108a0 <vTCPStateChange>

                /* To start an active connect. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2201      	movs	r2, #1
 800eff2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
 800eff6:	2006      	movs	r0, #6
 800eff8:	f7f9 ffdc 	bl	8008fb4 <xSendEventToIPTask>
 800effc:	4603      	mov	r3, r0
 800effe:	2b01      	cmp	r3, #1
 800f000:	d002      	beq.n	800f008 <prvTCPConnectStart+0x1b0>
                {
                    xResult = -pdFREERTOS_ERRNO_ECANCELED;
 800f002:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800f006:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xResult;
 800f008:	68fb      	ldr	r3, [r7, #12]
    }
 800f00a:	4618      	mov	r0, r3
 800f00c:	3710      	adds	r7, #16
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	080255d4 	.word	0x080255d4
 800f018:	080255fc 	.word	0x080255fc
 800f01c:	08025620 	.word	0x08025620

0800f020 <FreeRTOS_connect>:
 *         error code is returned.
 */
    BaseType_t FreeRTOS_connect( Socket_t xClientSocket,
                                 const struct freertos_sockaddr * pxAddress,
                                 socklen_t xAddressLength )
    {
 800f020:	b580      	push	{r7, lr}
 800f022:	b094      	sub	sp, #80	@ 0x50
 800f024:	af02      	add	r7, sp, #8
 800f026:	60f8      	str	r0, [r7, #12]
 800f028:	60b9      	str	r1, [r7, #8]
 800f02a:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xClientSocket;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800f030:	2300      	movs	r3, #0
 800f032:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xResult = -pdFREERTOS_ERRNO_EINVAL;
 800f034:	f06f 0315 	mvn.w	r3, #21
 800f038:	643b      	str	r3, [r7, #64]	@ 0x40
        TimeOut_t xTimeOut;

        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
            struct freertos_sockaddr xTempAddress;

            if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d013      	beq.n	800f068 <FreeRTOS_connect+0x48>
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	785b      	ldrb	r3, [r3, #1]
 800f044:	2b0a      	cmp	r3, #10
 800f046:	d00f      	beq.n	800f068 <FreeRTOS_connect+0x48>
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	785b      	ldrb	r3, [r3, #1]
 800f04c:	2b02      	cmp	r3, #2
 800f04e:	d00b      	beq.n	800f068 <FreeRTOS_connect+0x48>
            {
                ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800f050:	f107 0314 	add.w	r3, r7, #20
 800f054:	2218      	movs	r2, #24
 800f056:	68b9      	ldr	r1, [r7, #8]
 800f058:	4618      	mov	r0, r3
 800f05a:	f012 fe49 	bl	8021cf0 <memcpy>

                /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
                 *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
                xTempAddress.sin_family = FREERTOS_AF_INET;
 800f05e:	2302      	movs	r3, #2
 800f060:	757b      	strb	r3, [r7, #21]
                pxAddress = &xTempAddress;
 800f062:	f107 0314 	add.w	r3, r7, #20
 800f066:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

        ( void ) xAddressLength;

        xResult = prvTCPConnectStart( pxSocket, pxAddress );
 800f068:	68b9      	ldr	r1, [r7, #8]
 800f06a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f06c:	f7ff fef4 	bl	800ee58 <prvTCPConnectStart>
 800f070:	6438      	str	r0, [r7, #64]	@ 0x40

        if( xResult == 0 )
 800f072:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f074:	2b00      	cmp	r3, #0
 800f076:	d146      	bne.n	800f106 <FreeRTOS_connect+0xe6>
            /* And wait for the result */
            for( ; ; )
            {
                EventBits_t uxEvents;

                if( xTimed == pdFALSE )
 800f078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d110      	bne.n	800f0a0 <FreeRTOS_connect+0x80>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800f07e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f080:	6a1b      	ldr	r3, [r3, #32]
 800f082:	637b      	str	r3, [r7, #52]	@ 0x34

                    if( xRemainingTime == ( TickType_t ) 0 )
 800f084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f086:	2b00      	cmp	r3, #0
 800f088:	d103      	bne.n	800f092 <FreeRTOS_connect+0x72>
                    {
                        /* Not yet connected, correct state, non-blocking. */
                        xResult = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800f08a:	f06f 030a 	mvn.w	r3, #10
 800f08e:	643b      	str	r3, [r7, #64]	@ 0x40
                        break;
 800f090:	e039      	b.n	800f106 <FreeRTOS_connect+0xe6>
                    }

                    /* Don't get here a second time. */
                    xTimed = pdTRUE;
 800f092:	2301      	movs	r3, #1
 800f094:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800f096:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7f5 fb68 	bl	8004770 <vTaskSetTimeOutState>
                }

                /* Did it get connected while sleeping ? */
                xResult = FreeRTOS_issocketconnected( pxSocket );
 800f0a0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f0a2:	f000 fe3f 	bl	800fd24 <FreeRTOS_issocketconnected>
 800f0a6:	6438      	str	r0, [r7, #64]	@ 0x40

                /* Returns positive when connected, negative means an error */
                if( xResult < 0 )
 800f0a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	db2a      	blt.n	800f104 <FreeRTOS_connect+0xe4>
                {
                    /* Return the error */
                    break;
                }

                if( xResult > 0 )
 800f0ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	dd02      	ble.n	800f0ba <FreeRTOS_connect+0x9a>
                {
                    /* Socket now connected, return a zero */
                    xResult = 0;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800f0b8:	e025      	b.n	800f106 <FreeRTOS_connect+0xe6>
                }

                /* Is it allowed to sleep more? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800f0ba:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f0be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f0c2:	4611      	mov	r1, r2
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7f5 fb8b 	bl	80047e0 <xTaskCheckForTimeOut>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d003      	beq.n	800f0d8 <FreeRTOS_connect+0xb8>
                {
                    xResult = -pdFREERTOS_ERRNO_ETIMEDOUT;
 800f0d0:	f06f 0373 	mvn.w	r3, #115	@ 0x73
 800f0d4:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800f0d6:	e016      	b.n	800f106 <FreeRTOS_connect+0xe6>
                }

                /* Go sleeping until we get any down-stream event */
                uxEvents = xEventGroupWaitBits( pxSocket->xEventGroup,
 800f0d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0da:	6858      	ldr	r0, [r3, #4]
 800f0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0de:	9300      	str	r3, [sp, #0]
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	2128      	movs	r1, #40	@ 0x28
 800f0e6:	f7f3 fbf5 	bl	80028d4 <xEventGroupWaitBits>
 800f0ea:	63b8      	str	r0, [r7, #56]	@ 0x38
                                                ( EventBits_t ) eSOCKET_CONNECT | ( EventBits_t ) eSOCKET_CLOSED,
                                                pdTRUE /*xClearOnExit*/,
                                                pdFALSE /*xWaitAllBits*/,
                                                xRemainingTime );

                if( ( uxEvents & ( EventBits_t ) eSOCKET_CLOSED ) != 0U )
 800f0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ee:	f003 0320 	and.w	r3, r3, #32
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d0c0      	beq.n	800f078 <FreeRTOS_connect+0x58>
                {
                    xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800f0f6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f0fa:	643b      	str	r3, [r7, #64]	@ 0x40
                    FreeRTOS_debug_printf( ( "FreeRTOS_connect() stopped due to an error\n" ) );
 800f0fc:	4804      	ldr	r0, [pc, #16]	@ (800f110 <FreeRTOS_connect+0xf0>)
 800f0fe:	f012 fbdb 	bl	80218b8 <lUDPLoggingPrintf>
                    break;
 800f102:	e000      	b.n	800f106 <FreeRTOS_connect+0xe6>
                    break;
 800f104:	bf00      	nop
                }
            }
        }

        return xResult;
 800f106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    }
 800f108:	4618      	mov	r0, r3
 800f10a:	3748      	adds	r7, #72	@ 0x48
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}
 800f110:	0802564c 	.word	0x0802564c

0800f114 <prvRecvData>:
 */
    static BaseType_t prvRecvData( FreeRTOS_Socket_t * pxSocket,
                                   void * pvBuffer,
                                   size_t uxBufferLength,
                                   BaseType_t xFlags )
    {
 800f114:	b580      	push	{r7, lr}
 800f116:	b08a      	sub	sp, #40	@ 0x28
 800f118:	af02      	add	r7, sp, #8
 800f11a:	60f8      	str	r0, [r7, #12]
 800f11c:	60b9      	str	r1, [r7, #8]
 800f11e:	607a      	str	r2, [r7, #4]
 800f120:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;

        if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) == 0U )
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	f003 0301 	and.w	r3, r3, #1
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d13b      	bne.n	800f1a4 <prvRecvData+0x90>
        {
            BaseType_t xIsPeek = ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_PEEK ) != 0U ) ? 1L : 0L;
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	089b      	lsrs	r3, r3, #2
 800f130:	f003 0301 	and.w	r3, r3, #1
 800f134:	61bb      	str	r3, [r7, #24]

            xByteCount = ( BaseType_t )
                         uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800f13c:	69bb      	ldr	r3, [r7, #24]
 800f13e:	9300      	str	r3, [sp, #0]
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	68ba      	ldr	r2, [r7, #8]
 800f144:	2100      	movs	r1, #0
 800f146:	f001 fa04 	bl	8010552 <uxStreamBufferGet>
 800f14a:	4603      	mov	r3, r0
            xByteCount = ( BaseType_t )
 800f14c:	61fb      	str	r3, [r7, #28]
                                            0U,
                                            ( uint8_t * ) pvBuffer,
                                            ( size_t ) uxBufferLength,
                                            xIsPeek );

            if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f154:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f158:	b2db      	uxtb	r3, r3
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d02b      	beq.n	800f1b6 <prvRecvData+0xa2>
            {
                /* We had reached the low-water mark, now see if the flag
                 * can be cleared */
                size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f164:	4618      	mov	r0, r3
 800f166:	f001 f8c5 	bl	80102f4 <uxStreamBufferFrontSpace>
 800f16a:	6178      	str	r0, [r7, #20]

                if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f172:	697a      	ldr	r2, [r7, #20]
 800f174:	429a      	cmp	r2, r3
 800f176:	d31e      	bcc.n	800f1b6 <prvRecvData+0xa2>
                {
                    pxSocket->u.xTCP.bits.bLowWater = pdFALSE_UNSIGNED;
 800f178:	68fa      	ldr	r2, [r7, #12]
 800f17a:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f17e:	f36f 13c7 	bfc	r3, #7, #1
 800f182:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                    pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800f186:	68fa      	ldr	r2, [r7, #12]
 800f188:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f18c:	f043 0301 	orr.w	r3, r3, #1
 800f190:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2201      	movs	r2, #1
 800f198:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f19c:	2006      	movs	r0, #6
 800f19e:	f7f9 ff09 	bl	8008fb4 <xSendEventToIPTask>
 800f1a2:	e008      	b.n	800f1b6 <prvRecvData+0xa2>
            }
        }
        else
        {
            /* Zero-copy reception of data: pvBuffer is a pointer to a pointer. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, ( uint8_t ** ) pvBuffer );
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f1aa:	68b9      	ldr	r1, [r7, #8]
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f001 f930 	bl	8010412 <uxStreamBufferGetPtr>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	61fb      	str	r3, [r7, #28]
        }

        return xByteCount;
 800f1b6:	69fb      	ldr	r3, [r7, #28]
    }
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3720      	adds	r7, #32
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}

0800f1c0 <prvRecvWait>:
 *            is checked in this function.
 */
    static BaseType_t prvRecvWait( const FreeRTOS_Socket_t * pxSocket,
                                   EventBits_t * pxEventBits,
                                   BaseType_t xFlags )
    {
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b08e      	sub	sp, #56	@ 0x38
 800f1c4:	af02      	add	r7, sp, #8
 800f1c6:	60f8      	str	r0, [r7, #12]
 800f1c8:	60b9      	str	r1, [r7, #8]
 800f1ca:	607a      	str	r2, [r7, #4]
        BaseType_t xByteCount = 0;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxSocket->u.xTCP.rxStream != NULL )
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d05f      	beq.n	800f2a2 <prvRecvWait+0xe2>
        {
            xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f001 f894 	bl	8010316 <uxStreamBufferGetSize>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        while( xByteCount == 0 )
 800f1f2:	e056      	b.n	800f2a2 <prvRecvWait+0xe2>
        {
            eIPTCPState_t eType = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f1fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( ( eType == eCLOSED ) ||
 800f1fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f202:	2b00      	cmp	r3, #0
 800f204:	d007      	beq.n	800f216 <prvRecvWait+0x56>
 800f206:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f20a:	2b08      	cmp	r3, #8
 800f20c:	d003      	beq.n	800f216 <prvRecvWait+0x56>
                ( eType == eCLOSE_WAIT ) || /* (server + client) waiting for a connection termination request from the local user. */
 800f20e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f212:	2b09      	cmp	r3, #9
 800f214:	d10e      	bne.n	800f234 <prvRecvWait+0x74>
                ( eType == eCLOSING ) )     /* (server + client) waiting for a connection termination request acknowledgement from the remote TCP. */
            {
                /* Return -ENOTCONN, unless there was a malloc failure. */
                xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 800f216:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f21a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800f222:	f003 0308 	and.w	r3, r3, #8
 800f226:	b2db      	uxtb	r3, r3
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d03e      	beq.n	800f2aa <prvRecvWait+0xea>
                {
                    /* The no-memory error has priority above the non-connected error.
                     * Both are fatal and will lead to closing the socket. */
                    xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
 800f22c:	f06f 030b 	mvn.w	r3, #11
 800f230:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                break;
 800f232:	e03a      	b.n	800f2aa <prvRecvWait+0xea>
            }

            if( xTimed == pdFALSE )
 800f234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f236:	2b00      	cmp	r3, #0
 800f238:	d111      	bne.n	800f25e <prvRecvWait+0x9e>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	6a1b      	ldr	r3, [r3, #32]
 800f23e:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0U )
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d033      	beq.n	800f2ae <prvRecvWait+0xee>
                    }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f003 0310 	and.w	r3, r3, #16
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d130      	bne.n	800f2b2 <prvRecvWait+0xf2>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800f250:	2301      	movs	r3, #1
 800f252:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800f254:	f107 0314 	add.w	r3, r7, #20
 800f258:	4618      	mov	r0, r3
 800f25a:	f7f5 fa89 	bl	8004770 <vTaskSetTimeOutState>
            }

            /* Has the timeout been reached? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800f25e:	f107 021c 	add.w	r2, r7, #28
 800f262:	f107 0314 	add.w	r3, r7, #20
 800f266:	4611      	mov	r1, r2
 800f268:	4618      	mov	r0, r3
 800f26a:	f7f5 fab9 	bl	80047e0 <xTaskCheckForTimeOut>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d120      	bne.n	800f2b6 <prvRecvWait+0xf6>
            {
                break;
            }

            /* Block until there is a down-stream event. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	6858      	ldr	r0, [r3, #4]
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	9300      	str	r3, [sp, #0]
 800f27c:	2300      	movs	r3, #0
 800f27e:	2201      	movs	r2, #1
 800f280:	2161      	movs	r1, #97	@ 0x61
 800f282:	f7f3 fb27 	bl	80028d4 <xEventGroupWaitBits>
 800f286:	6278      	str	r0, [r7, #36]	@ 0x24
            {
                ( void ) xEventBits;
            }
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( pxSocket->u.xTCP.rxStream != NULL )
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d007      	beq.n	800f2a2 <prvRecvWait+0xe2>
            {
                xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f298:	4618      	mov	r0, r3
 800f29a:	f001 f83c 	bl	8010316 <uxStreamBufferGetSize>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xByteCount == 0 )
 800f2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d0a5      	beq.n	800f1f4 <prvRecvWait+0x34>
 800f2a8:	e006      	b.n	800f2b8 <prvRecvWait+0xf8>
                break;
 800f2aa:	bf00      	nop
 800f2ac:	e004      	b.n	800f2b8 <prvRecvWait+0xf8>
                    break;
 800f2ae:	bf00      	nop
 800f2b0:	e002      	b.n	800f2b8 <prvRecvWait+0xf8>
                    break;
 800f2b2:	bf00      	nop
 800f2b4:	e000      	b.n	800f2b8 <prvRecvWait+0xf8>
                break;
 800f2b6:	bf00      	nop
            }
        } /* while( xByteCount == 0 ) */

        *( pxEventBits ) = xEventBits;
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2bc:	601a      	str	r2, [r3, #0]

        return xByteCount;
 800f2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3730      	adds	r7, #48	@ 0x30
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <FreeRTOS_recv>:
 */
    BaseType_t FreeRTOS_recv( Socket_t xSocket,
                              void * pvBuffer,
                              size_t uxBufferLength,
                              BaseType_t xFlags )
    {
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b088      	sub	sp, #32
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
 800f2d4:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount = 0;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	61bb      	str	r3, [r7, #24]
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	617b      	str	r3, [r7, #20]

        /* Check if the socket is valid, has type TCP and if it is bound to a
         * port. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	2106      	movs	r1, #6
 800f2e6:	69b8      	ldr	r0, [r7, #24]
 800f2e8:	f7fe fa3a 	bl	800d760 <prvValidSocket>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d103      	bne.n	800f2fa <FreeRTOS_recv+0x32>
        {
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800f2f2:	f06f 0315 	mvn.w	r3, #21
 800f2f6:	61fb      	str	r3, [r7, #28]
 800f2f8:	e01d      	b.n	800f336 <FreeRTOS_recv+0x6e>
        }
        else if( ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) != 0U ) &&
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	f003 0301 	and.w	r3, r3, #1
 800f300:	2b00      	cmp	r3, #0
 800f302:	d006      	beq.n	800f312 <FreeRTOS_recv+0x4a>
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d103      	bne.n	800f312 <FreeRTOS_recv+0x4a>
                 ( pvBuffer == NULL ) )
        {
            /* In zero-copy mode, pvBuffer is a pointer to a pointer ( not NULL ). */
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800f30a:	f06f 0315 	mvn.w	r3, #21
 800f30e:	61fb      	str	r3, [r7, #28]
 800f310:	e011      	b.n	800f336 <FreeRTOS_recv+0x6e>
        }
        else
        {
            /* The function parameters have been checked, now wait for incoming data. */
            xByteCount = prvRecvWait( pxSocket, &( xEventBits ), xFlags );
 800f312:	f107 0314 	add.w	r3, r7, #20
 800f316:	683a      	ldr	r2, [r7, #0]
 800f318:	4619      	mov	r1, r3
 800f31a:	69b8      	ldr	r0, [r7, #24]
 800f31c:	f7ff ff50 	bl	800f1c0 <prvRecvWait>
 800f320:	61f8      	str	r0, [r7, #28]
                    xByteCount = -pdFREERTOS_ERRNO_EINTR;
                }
                else
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( xByteCount > 0 )
 800f322:	69fb      	ldr	r3, [r7, #28]
 800f324:	2b00      	cmp	r3, #0
 800f326:	dd06      	ble.n	800f336 <FreeRTOS_recv+0x6e>
            {
                /* Get the actual data from the buffer, or in case of zero-copy,
                 * let *pvBuffer point to the RX-stream of the socket. */
                xByteCount = prvRecvData( pxSocket, pvBuffer, uxBufferLength, xFlags );
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	68b9      	ldr	r1, [r7, #8]
 800f32e:	69b8      	ldr	r0, [r7, #24]
 800f330:	f7ff fef0 	bl	800f114 <prvRecvData>
 800f334:	61f8      	str	r0, [r7, #28]
            }
        } /* prvValidSocket() */

        return xByteCount;
 800f336:	69fb      	ldr	r3, [r7, #28]
    }
 800f338:	4618      	mov	r0, r3
 800f33a:	3720      	adds	r7, #32
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}

0800f340 <prvTCPSendCheck>:
 *
 * @return 0: representing OK, else a negative error code will be returned.
 */
    static int32_t prvTCPSendCheck( FreeRTOS_Socket_t * pxSocket,
                                    size_t uxDataLength )
    {
 800f340:	b580      	push	{r7, lr}
 800f342:	b084      	sub	sp, #16
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]
        int32_t xResult = 1;
 800f34a:	2301      	movs	r3, #1
 800f34c:	60fb      	str	r3, [r7, #12]

        /* Is this a socket of type TCP and is it already bound to a port number ? */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f34e:	2201      	movs	r2, #1
 800f350:	2106      	movs	r1, #6
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f7fe fa04 	bl	800d760 <prvValidSocket>
 800f358:	4603      	mov	r3, r0
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d103      	bne.n	800f366 <prvTCPSendCheck+0x26>
        {
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800f35e:	f06f 0315 	mvn.w	r3, #21
 800f362:	60fb      	str	r3, [r7, #12]
 800f364:	e040      	b.n	800f3e8 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800f36c:	f003 0308 	and.w	r3, r3, #8
 800f370:	b2db      	uxtb	r3, r3
 800f372:	2b00      	cmp	r3, #0
 800f374:	d003      	beq.n	800f37e <prvTCPSendCheck+0x3e>
        {
            xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800f376:	f06f 030b 	mvn.w	r3, #11
 800f37a:	60fb      	str	r3, [r7, #12]
 800f37c:	e034      	b.n	800f3e8 <prvTCPSendCheck+0xa8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f384:	2b00      	cmp	r3, #0
 800f386:	d009      	beq.n	800f39c <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800f38e:	2b08      	cmp	r3, #8
 800f390:	d004      	beq.n	800f39c <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSING ) )
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800f398:	2b09      	cmp	r3, #9
 800f39a:	d103      	bne.n	800f3a4 <prvTCPSendCheck+0x64>
        {
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800f39c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f3a0:	60fb      	str	r3, [r7, #12]
 800f3a2:	e021      	b.n	800f3e8 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800f3aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d002      	beq.n	800f3ba <prvTCPSendCheck+0x7a>
        {
            /* This TCP connection is closing already, the FIN flag has been sent.
             * Maybe it is still delivering or receiving data.
             * Return OK in order not to get closed/deleted too quickly */
            xResult = 0;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	60fb      	str	r3, [r7, #12]
 800f3b8:	e016      	b.n	800f3e8 <prvTCPSendCheck+0xa8>
        }
        else if( uxDataLength == 0U )
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d102      	bne.n	800f3c6 <prvTCPSendCheck+0x86>
        {
            /* send() is being called to send zero bytes */
            xResult = 0;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	60fb      	str	r3, [r7, #12]
 800f3c4:	e010      	b.n	800f3e8 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.txStream == NULL )
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d10b      	bne.n	800f3e8 <prvTCPSendCheck+0xa8>
        {
            /* Create the outgoing stream only when it is needed */
            ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800f3d0:	2100      	movs	r1, #0
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f000 fac6 	bl	800f964 <prvTCPCreateStream>

            if( pxSocket->u.xTCP.txStream == NULL )
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d102      	bne.n	800f3e8 <prvTCPSendCheck+0xa8>
            {
                xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800f3e2:	f06f 030b 	mvn.w	r3, #11
 800f3e6:	60fb      	str	r3, [r7, #12]
        else
        {
            /* Nothing. */
        }

        return xResult;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
    }
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3710      	adds	r7, #16
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}

0800f3f2 <FreeRTOS_get_tx_head>:
 * @return Head of the circular transmit buffer if all checks pass. Or else, NULL
 *         is returned.
 */
    uint8_t * FreeRTOS_get_tx_head( Socket_t xSocket,
                                    BaseType_t * pxLength )
    {
 800f3f2:	b580      	push	{r7, lr}
 800f3f4:	b088      	sub	sp, #32
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]
 800f3fa:	6039      	str	r1, [r7, #0]
        uint8_t * pucReturn = NULL;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	617b      	str	r3, [r7, #20]
        StreamBuffer_t * pxBuffer = NULL;
 800f404:	2300      	movs	r3, #0
 800f406:	61bb      	str	r3, [r7, #24]

        *pxLength = 0;
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	2200      	movs	r2, #0
 800f40c:	601a      	str	r2, [r3, #0]

        /* Confirm that this is a TCP socket before dereferencing structure
         * member pointers. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdTRUE )
 800f40e:	2200      	movs	r2, #0
 800f410:	2106      	movs	r1, #6
 800f412:	6978      	ldr	r0, [r7, #20]
 800f414:	f7fe f9a4 	bl	800d760 <prvValidSocket>
 800f418:	4603      	mov	r3, r0
 800f41a:	2b01      	cmp	r3, #1
 800f41c:	d135      	bne.n	800f48a <FreeRTOS_get_tx_head+0x98>
        {
            pxBuffer = pxSocket->u.xTCP.txStream;
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f424:	61bb      	str	r3, [r7, #24]

            /* If the TX buffer hasn't been created yet,
             * and if no malloc error has occurred on this socket yet. */
            if( ( pxBuffer == NULL ) &&
 800f426:	69bb      	ldr	r3, [r7, #24]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d10f      	bne.n	800f44c <FreeRTOS_get_tx_head+0x5a>
                ( pxSocket->u.xTCP.bits.bMallocError == pdFALSE_UNSIGNED ) )
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800f432:	f003 0308 	and.w	r3, r3, #8
 800f436:	b2db      	uxtb	r3, r3
            if( ( pxBuffer == NULL ) &&
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d107      	bne.n	800f44c <FreeRTOS_get_tx_head+0x5a>
            {
                /* Create the outgoing stream only when it is needed */
                ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800f43c:	2100      	movs	r1, #0
 800f43e:	6978      	ldr	r0, [r7, #20]
 800f440:	f000 fa90 	bl	800f964 <prvTCPCreateStream>
                pxBuffer = pxSocket->u.xTCP.txStream;
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f44a:	61bb      	str	r3, [r7, #24]
            }

            if( pxBuffer != NULL )
 800f44c:	69bb      	ldr	r3, [r7, #24]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d01b      	beq.n	800f48a <FreeRTOS_get_tx_head+0x98>
            {
                size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800f452:	69b8      	ldr	r0, [r7, #24]
 800f454:	f000 ff3d 	bl	80102d2 <uxStreamBufferGetSpace>
 800f458:	6138      	str	r0, [r7, #16]
                size_t uxRemain = pxBuffer->LENGTH - pxBuffer->uxHead;
 800f45a:	69bb      	ldr	r3, [r7, #24]
 800f45c:	691a      	ldr	r2, [r3, #16]
 800f45e:	69bb      	ldr	r3, [r7, #24]
 800f460:	689b      	ldr	r3, [r3, #8]
 800f462:	1ad3      	subs	r3, r2, r3
 800f464:	60fb      	str	r3, [r7, #12]

                if( uxRemain <= uxSpace )
 800f466:	68fa      	ldr	r2, [r7, #12]
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d803      	bhi.n	800f476 <FreeRTOS_get_tx_head+0x84>
                {
                    *pxLength = ( BaseType_t ) uxRemain;
 800f46e:	68fa      	ldr	r2, [r7, #12]
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	601a      	str	r2, [r3, #0]
 800f474:	e002      	b.n	800f47c <FreeRTOS_get_tx_head+0x8a>
                }
                else
                {
                    *pxLength = ( BaseType_t ) uxSpace;
 800f476:	693a      	ldr	r2, [r7, #16]
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	601a      	str	r2, [r3, #0]
                }

                pucReturn = &( pxBuffer->ucArray[ pxBuffer->uxHead ] );
 800f47c:	69bb      	ldr	r3, [r7, #24]
 800f47e:	689b      	ldr	r3, [r3, #8]
 800f480:	3310      	adds	r3, #16
 800f482:	69ba      	ldr	r2, [r7, #24]
 800f484:	4413      	add	r3, r2
 800f486:	3304      	adds	r3, #4
 800f488:	61fb      	str	r3, [r7, #28]
            }
        }

        return pucReturn;
 800f48a:	69fb      	ldr	r3, [r7, #28]
    }
 800f48c:	4618      	mov	r0, r3
 800f48e:	3720      	adds	r7, #32
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <prvTCPSendLoop>:
 */
    static BaseType_t prvTCPSendLoop( FreeRTOS_Socket_t * pxSocket,
                                      const void * pvBuffer,
                                      size_t uxDataLength,
                                      BaseType_t xFlags )
    {
 800f494:	b580      	push	{r7, lr}
 800f496:	b090      	sub	sp, #64	@ 0x40
 800f498:	af02      	add	r7, sp, #8
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	607a      	str	r2, [r7, #4]
 800f4a0:	603b      	str	r3, [r7, #0]
        /* The number of bytes sent. */
        BaseType_t xBytesSent = 0;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	637b      	str	r3, [r7, #52]	@ 0x34
        /* xBytesLeft is the number of bytes that still must be sent. */
        BaseType_t xBytesLeft = ( BaseType_t ) uxDataLength;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	633b      	str	r3, [r7, #48]	@ 0x30
        /* xByteCount is number of bytes that can be sent now. */
        BaseType_t xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f000 ff0e 	bl	80102d2 <uxStreamBufferGetSpace>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        const uint8_t * pucSource = ( const uint8_t * ) pvBuffer;
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* While there are still bytes to be sent. */
        while( xBytesLeft > 0 )
 800f4c2:	e08f      	b.n	800f5e4 <prvTCPSendLoop+0x150>
        {
            /* If txStream has space. */
            if( xByteCount > 0 )
 800f4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	dd4b      	ble.n	800f562 <prvTCPSendLoop+0xce>
            {
                BaseType_t xCloseAfterSend = pdFALSE;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	623b      	str	r3, [r7, #32]

                /* Don't send more than necessary. */
                if( xByteCount > xBytesLeft )
 800f4ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	dd01      	ble.n	800f4da <prvTCPSendLoop+0x46>
                {
                    xByteCount = xBytesLeft;
 800f4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) &&
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f4e0:	f003 0310 	and.w	r3, r3, #16
 800f4e4:	b2db      	uxtb	r3, r3
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d00e      	beq.n	800f508 <prvTCPSendLoop+0x74>
 800f4ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d10a      	bne.n	800f508 <prvTCPSendLoop+0x74>
                    ( xByteCount == xBytesLeft ) )
                {
                    xCloseAfterSend = pdTRUE;
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	623b      	str	r3, [r7, #32]

                    /* Now suspend the scheduler: sending the last data and
                     * setting bCloseRequested must be done together */
                    vTaskSuspendAll();
 800f4f6:	f7f4 fc7f 	bl	8003df8 <vTaskSuspendAll>
                    pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE_UNSIGNED;
 800f4fa:	68fa      	ldr	r2, [r7, #12]
 800f4fc:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f504:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                     * expected.  The use of 'bCloseAfterSend' is not mandatory, it
                     * is just a faster way of transferring files (e.g. when using
                     * FTP). */
                }

                xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0U, pucSource, ( size_t ) xByteCount );
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800f50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f512:	2100      	movs	r1, #0
 800f514:	f000 ff9d 	bl	8010452 <uxStreamBufferAdd>
 800f518:	4603      	mov	r3, r0
 800f51a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( xCloseAfterSend == pdTRUE )
 800f51c:	6a3b      	ldr	r3, [r7, #32]
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d101      	bne.n	800f526 <prvTCPSendLoop+0x92>
                {
                    /* Now when the IP-task transmits the data, it will also
                     * see that bCloseRequested is true and include the FIN
                     * flag to start closure of the connection. */
                    ( void ) xTaskResumeAll();
 800f522:	f7f4 fc77 	bl	8003e14 <xTaskResumeAll>
                }

                /* Send a message to the IP-task so it can work on this
                * socket.  Data is sent, let the IP-task work on it. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	2201      	movs	r2, #1
 800f52a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xIsCallingFromIPTask() == pdFALSE )
 800f52e:	f7fa fc99 	bl	8009e64 <xIsCallingFromIPTask>
 800f532:	4603      	mov	r3, r0
 800f534:	2b00      	cmp	r3, #0
 800f536:	d102      	bne.n	800f53e <prvTCPSendLoop+0xaa>
                {
                    /* Only send a TCP timer event when not called from the
                     * IP-task. */
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f538:	2006      	movs	r0, #6
 800f53a:	f7f9 fd3b 	bl	8008fb4 <xSendEventToIPTask>
                }

                xBytesLeft -= xByteCount;
 800f53e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f542:	1ad3      	subs	r3, r2, r3
 800f544:	633b      	str	r3, [r7, #48]	@ 0x30
                xBytesSent += xByteCount;
 800f546:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f54a:	4413      	add	r3, r2
 800f54c:	637b      	str	r3, [r7, #52]	@ 0x34

                if( ( xBytesLeft == 0 ) || ( pvBuffer == NULL ) )
 800f54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f550:	2b00      	cmp	r3, #0
 800f552:	d053      	beq.n	800f5fc <prvTCPSendLoop+0x168>
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d050      	beq.n	800f5fc <prvTCPSendLoop+0x168>
                    break;
                }

                /* As there are still bytes left to be sent, increase the
                 * data pointer. */
                pucSource = &( pucSource[ xByteCount ] );
 800f55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f55c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f55e:	4413      	add	r3, r2
 800f560:	627b      	str	r3, [r7, #36]	@ 0x24
            } /* if( xByteCount > 0 ) */

            /* Not all bytes have been sent. In case the socket is marked as
             * blocking sleep for a while. */
            if( xTimed == pdFALSE )
 800f562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f564:	2b00      	cmp	r3, #0
 800f566:	d119      	bne.n	800f59c <prvTCPSendLoop+0x108>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xSendBlockTime;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f56c:	61fb      	str	r3, [r7, #28]

                if( xIsCallingFromIPTask() != pdFALSE )
 800f56e:	f7fa fc79 	bl	8009e64 <xIsCallingFromIPTask>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d001      	beq.n	800f57c <prvTCPSendLoop+0xe8>
                {
                    /* If this send function is called from within a
                     * call-back handler it may not block, otherwise
                     * chances would be big to get a deadlock: the IP-task
                     * waiting for itself. */
                    xRemainingTime = ( TickType_t ) 0U;
 800f578:	2300      	movs	r3, #0
 800f57a:	61fb      	str	r3, [r7, #28]
                }

                if( xRemainingTime == ( TickType_t ) 0U )
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d035      	beq.n	800f5ee <prvTCPSendLoop+0x15a>
                {
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	f003 0310 	and.w	r3, r3, #16
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d132      	bne.n	800f5f2 <prvTCPSendLoop+0x15e>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800f58c:	2301      	movs	r3, #1
 800f58e:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800f590:	f107 0314 	add.w	r3, r7, #20
 800f594:	4618      	mov	r0, r3
 800f596:	f7f5 f8eb 	bl	8004770 <vTaskSetTimeOutState>
 800f59a:	e00a      	b.n	800f5b2 <prvTCPSendLoop+0x11e>
            }
            else
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800f59c:	f107 021c 	add.w	r2, r7, #28
 800f5a0:	f107 0314 	add.w	r3, r7, #20
 800f5a4:	4611      	mov	r1, r2
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7f5 f91a 	bl	80047e0 <xTaskCheckForTimeOut>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d121      	bne.n	800f5f6 <prvTCPSendLoop+0x162>
                    break;
                }
            }

            /* Go sleeping until a SEND or a CLOSE event is received. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_SEND | ( EventBits_t ) eSOCKET_CLOSED,
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	6858      	ldr	r0, [r3, #4]
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	9300      	str	r3, [sp, #0]
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	2201      	movs	r2, #1
 800f5be:	2122      	movs	r1, #34	@ 0x22
 800f5c0:	f7f3 f988 	bl	80028d4 <xEventGroupWaitBits>
                                          pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

            xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800f5c4:	6879      	ldr	r1, [r7, #4]
 800f5c6:	68f8      	ldr	r0, [r7, #12]
 800f5c8:	f7ff feba 	bl	800f340 <prvTCPSendCheck>
 800f5cc:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( xByteCount < 0 )
 800f5ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	db12      	blt.n	800f5fa <prvTCPSendLoop+0x166>
                /* In a meanwhile, the connection has dropped, stop iterating. */
                break;
            }

            /* See if in a meanwhile there is space in the TX-stream. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f000 fe79 	bl	80102d2 <uxStreamBufferGetSpace>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xBytesLeft > 0 )
 800f5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	f73f af6c 	bgt.w	800f4c4 <prvTCPSendLoop+0x30>
 800f5ec:	e006      	b.n	800f5fc <prvTCPSendLoop+0x168>
                    break;
 800f5ee:	bf00      	nop
 800f5f0:	e004      	b.n	800f5fc <prvTCPSendLoop+0x168>
                    break;
 800f5f2:	bf00      	nop
 800f5f4:	e002      	b.n	800f5fc <prvTCPSendLoop+0x168>
                    break;
 800f5f6:	bf00      	nop
 800f5f8:	e000      	b.n	800f5fc <prvTCPSendLoop+0x168>
                break;
 800f5fa:	bf00      	nop
        } /* while( xBytesLeft > 0 ) */

        return xBytesSent;
 800f5fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800f5fe:	4618      	mov	r0, r3
 800f600:	3738      	adds	r7, #56	@ 0x38
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
	...

0800f608 <FreeRTOS_send>:
 */
    BaseType_t FreeRTOS_send( Socket_t xSocket,
                              const void * pvBuffer,
                              size_t uxDataLength,
                              BaseType_t xFlags )
    {
 800f608:	b580      	push	{r7, lr}
 800f60a:	b086      	sub	sp, #24
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	60f8      	str	r0, [r7, #12]
 800f610:	60b9      	str	r1, [r7, #8]
 800f612:	607a      	str	r2, [r7, #4]
 800f614:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	613b      	str	r3, [r7, #16]

        xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800f61a:	6879      	ldr	r1, [r7, #4]
 800f61c:	6938      	ldr	r0, [r7, #16]
 800f61e:	f7ff fe8f 	bl	800f340 <prvTCPSendCheck>
 800f622:	6178      	str	r0, [r7, #20]

        if( xByteCount > 0 )
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	2b00      	cmp	r3, #0
 800f628:	dd24      	ble.n	800f674 <FreeRTOS_send+0x6c>
        {
            /* prvTCPSendLoop() will try to send as many bytes as possible,
             * returning number of bytes that have been queued for transmission.. */
            xByteCount = prvTCPSendLoop( pxSocket, pvBuffer, uxDataLength, xFlags );
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	687a      	ldr	r2, [r7, #4]
 800f62e:	68b9      	ldr	r1, [r7, #8]
 800f630:	6938      	ldr	r0, [r7, #16]
 800f632:	f7ff ff2f 	bl	800f494 <prvTCPSendLoop>
 800f636:	6178      	str	r0, [r7, #20]

            if( xByteCount == 0 )
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d11a      	bne.n	800f674 <FreeRTOS_send+0x6c>
            {
                if( pxSocket->u.xTCP.eTCPState > eESTABLISHED )
 800f63e:	693b      	ldr	r3, [r7, #16]
 800f640:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f644:	2b05      	cmp	r3, #5
 800f646:	d903      	bls.n	800f650 <FreeRTOS_send+0x48>
                {
                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOTCONN;
 800f648:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f64c:	617b      	str	r3, [r7, #20]
 800f64e:	e011      	b.n	800f674 <FreeRTOS_send+0x6c>
                }
                else
                {
                    if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f654:	2b17      	cmp	r3, #23
 800f656:	d00a      	beq.n	800f66e <FreeRTOS_send+0x66>
                    {
                        FreeRTOS_debug_printf( ( "FreeRTOS_send: %u -> %xip:%d: no space\n",
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f65c:	4619      	mov	r1, r3
 800f65e:	693b      	ldr	r3, [r7, #16]
 800f660:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800f668:	4805      	ldr	r0, [pc, #20]	@ (800f680 <FreeRTOS_send+0x78>)
 800f66a:	f012 f925 	bl	80218b8 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                 pxSocket->u.xTCP.usRemotePort ) );
                    }

                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 800f66e:	f06f 031b 	mvn.w	r3, #27
 800f672:	617b      	str	r3, [r7, #20]
                }
            }
        }

        return xByteCount;
 800f674:	697b      	ldr	r3, [r7, #20]
    }
 800f676:	4618      	mov	r0, r3
 800f678:	3718      	adds	r7, #24
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	080256a4 	.word	0x080256a4

0800f684 <FreeRTOS_listen>:
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 800f684:	b580      	push	{r7, lr}
 800f686:	b084      	sub	sp, #16
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 800f68e:	2300      	movs	r3, #0
 800f690:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f696:	2201      	movs	r2, #1
 800f698:	2106      	movs	r1, #6
 800f69a:	68b8      	ldr	r0, [r7, #8]
 800f69c:	f7fe f860 	bl	800d760 <prvValidSocket>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d103      	bne.n	800f6ae <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800f6a6:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800f6aa:	60fb      	str	r3, [r7, #12]
 800f6ac:	e056      	b.n	800f75c <FreeRTOS_listen+0xd8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState != eCLOSED ) && ( pxSocket->u.xTCP.eTCPState != eCLOSE_WAIT ) )
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d008      	beq.n	800f6ca <FreeRTOS_listen+0x46>
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f6be:	2b08      	cmp	r3, #8
 800f6c0:	d003      	beq.n	800f6ca <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800f6c2:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800f6c6:	60fb      	str	r3, [r7, #12]
 800f6c8:	e048      	b.n	800f75c <FreeRTOS_listen+0xd8>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 800f6ca:	6839      	ldr	r1, [r7, #0]
 800f6cc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800f6d0:	f7fa fd78 	bl	800a1c4 <FreeRTOS_min_int32>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	b29a      	uxth	r2, r3
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f6e4:	f003 0308 	and.w	r3, r3, #8
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d032      	beq.n	800f754 <FreeRTOS_listen+0xd0>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d005      	beq.n	800f704 <FreeRTOS_listen+0x80>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f6fe:	4618      	mov	r0, r3
 800f700:	f000 fe2b 	bl	801035a <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d005      	beq.n	800f71a <FreeRTOS_listen+0x96>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f714:	4618      	mov	r0, r3
 800f716:	f000 fe20 	bl	801035a <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	33aa      	adds	r3, #170	@ 0xaa
 800f71e:	225a      	movs	r2, #90	@ 0x5a
 800f720:	2100      	movs	r1, #0
 800f722:	4618      	mov	r0, r3
 800f724:	f012 fbf1 	bl	8021f0a <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800f72e:	22c0      	movs	r2, #192	@ 0xc0
 800f730:	2100      	movs	r1, #0
 800f732:	4618      	mov	r0, r3
 800f734:	f012 fbe9 	bl	8021f0a <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	3368      	adds	r3, #104	@ 0x68
 800f73c:	2204      	movs	r2, #4
 800f73e:	2100      	movs	r1, #0
 800f740:	4618      	mov	r0, r3
 800f742:	f012 fbe2 	bl	8021f0a <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 800f746:	68ba      	ldr	r2, [r7, #8]
 800f748:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f74c:	f043 0308 	orr.w	r3, r3, #8
 800f750:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 800f754:	2101      	movs	r1, #1
 800f756:	68b8      	ldr	r0, [r7, #8]
 800f758:	f001 f8a2 	bl	80108a0 <vTCPStateChange>
        }

        return xResult;
 800f75c:	68fb      	ldr	r3, [r7, #12]
    }
 800f75e:	4618      	mov	r0, r3
 800f760:	3710      	adds	r7, #16
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}

0800f766 <FreeRTOS_shutdown>:
 *
 * @return 0 on successful shutdown or else a negative error code.
 */
    BaseType_t FreeRTOS_shutdown( Socket_t xSocket,
                                  BaseType_t xHow )
    {
 800f766:	b580      	push	{r7, lr}
 800f768:	b084      	sub	sp, #16
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
 800f76e:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	60bb      	str	r3, [r7, #8]
        BaseType_t xResult;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f774:	2201      	movs	r2, #1
 800f776:	2106      	movs	r1, #6
 800f778:	68b8      	ldr	r0, [r7, #8]
 800f77a:	f7fd fff1 	bl	800d760 <prvValidSocket>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b00      	cmp	r3, #0
 800f782:	d103      	bne.n	800f78c <FreeRTOS_shutdown+0x26>
        {
            /*_RB_ Is this comment correct?  The socket is not of a type that
             * supports the listen() operation. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800f784:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800f788:	60fb      	str	r3, [r7, #12]
 800f78a:	e018      	b.n	800f7be <FreeRTOS_shutdown+0x58>
        }
        else if( pxSocket->u.xTCP.eTCPState != eESTABLISHED )
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f792:	2b05      	cmp	r3, #5
 800f794:	d003      	beq.n	800f79e <FreeRTOS_shutdown+0x38>
        {
            /* The socket is not connected. */
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800f796:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f79a:	60fb      	str	r3, [r7, #12]
 800f79c:	e00f      	b.n	800f7be <FreeRTOS_shutdown+0x58>
        }
        else
        {
            pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 800f79e:	68ba      	ldr	r2, [r7, #8]
 800f7a0:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f7a4:	f043 0320 	orr.w	r3, r3, #32
 800f7a8:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            /* Let the IP-task perform the shutdown of the connection. */
            pxSocket->u.xTCP.usTimeout = 1U;
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	2201      	movs	r2, #1
 800f7b0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f7b4:	2006      	movs	r0, #6
 800f7b6:	f7f9 fbfd 	bl	8008fb4 <xSendEventToIPTask>
            xResult = 0;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	60fb      	str	r3, [r7, #12]
        }

        ( void ) xHow;

        return xResult;
 800f7be:	68fb      	ldr	r3, [r7, #12]
    }
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3710      	adds	r7, #16
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <xTCPTimerCheck>:
 * @param[in] xWillSleep Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b08a      	sub	sp, #40	@ 0x28
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800f7d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f7d4:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 800f7d6:	f7f4 fc21 	bl	800401c <xTaskGetTickCount>
 800f7da:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 800f7dc:	4b32      	ldr	r3, [pc, #200]	@ (800f8a8 <xTCPTimerCheck+0xe0>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	69ba      	ldr	r2, [r7, #24]
 800f7e2:	1ad3      	subs	r3, r2, r3
 800f7e4:	623b      	str	r3, [r7, #32]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800f7e6:	4b31      	ldr	r3, [pc, #196]	@ (800f8ac <xTCPTimerCheck+0xe4>)
 800f7e8:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800f7ea:	4b31      	ldr	r3, [pc, #196]	@ (800f8b0 <xTCPTimerCheck+0xe8>)
 800f7ec:	68db      	ldr	r3, [r3, #12]
 800f7ee:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 800f7f0:	4a2d      	ldr	r2, [pc, #180]	@ (800f8a8 <xTCPTimerCheck+0xe0>)
 800f7f2:	69bb      	ldr	r3, [r7, #24]
 800f7f4:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 800f7f6:	6a3b      	ldr	r3, [r7, #32]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d14b      	bne.n	800f894 <xTCPTimerCheck+0xcc>
        {
            xDelta = 1U;
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 800f800:	e048      	b.n	800f894 <xTCPTimerCheck+0xcc>
        {
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f802:	69fb      	ldr	r3, [r7, #28]
 800f804:	68db      	ldr	r3, [r3, #12]
 800f806:	613b      	str	r3, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800f808:	69fb      	ldr	r3, [r7, #28]
 800f80a:	685b      	ldr	r3, [r3, #4]
 800f80c:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f814:	2b00      	cmp	r3, #0
 800f816:	d03a      	beq.n	800f88e <xTCPTimerCheck+0xc6>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f81e:	461a      	mov	r2, r3
 800f820:	6a3b      	ldr	r3, [r7, #32]
 800f822:	4293      	cmp	r3, r2
 800f824:	d20a      	bcs.n	800f83c <xTCPTimerCheck+0x74>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 800f82c:	6a3b      	ldr	r3, [r7, #32]
 800f82e:	b29b      	uxth	r3, r3
 800f830:	1ad3      	subs	r3, r2, r3
 800f832:	b29a      	uxth	r2, r3
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 800f83a:	e00a      	b.n	800f852 <xTCPTimerCheck+0x8a>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	2200      	movs	r2, #0
 800f840:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                xRc = xTCPSocketCheck( pxSocket );
 800f844:	6938      	ldr	r0, [r7, #16]
 800f846:	f000 ff33 	bl	80106b0 <xTCPSocketCheck>
 800f84a:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	db1f      	blt.n	800f892 <xTCPTimerCheck+0xca>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d008      	beq.n	800f86c <xTCPTimerCheck+0xa4>
            {
                if( xWillSleep != pdFALSE )
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d003      	beq.n	800f868 <xTCPTimerCheck+0xa0>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 800f860:	6938      	ldr	r0, [r7, #16]
 800f862:	f7ff fa8e 	bl	800ed82 <vSocketWakeUpUser>
 800f866:	e001      	b.n	800f86c <xTCPTimerCheck+0xa4>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 800f868:	2300      	movs	r3, #0
 800f86a:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f872:	2b00      	cmp	r3, #0
 800f874:	d00e      	beq.n	800f894 <xTCPTimerCheck+0xcc>
 800f876:	693b      	ldr	r3, [r7, #16]
 800f878:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f87c:	461a      	mov	r2, r3
 800f87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f880:	4293      	cmp	r3, r2
 800f882:	d907      	bls.n	800f894 <xTCPTimerCheck+0xcc>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800f884:	693b      	ldr	r3, [r7, #16]
 800f886:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f88a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f88c:	e002      	b.n	800f894 <xTCPTimerCheck+0xcc>
                continue;
 800f88e:	bf00      	nop
 800f890:	e000      	b.n	800f894 <xTCPTimerCheck+0xcc>
                    continue;
 800f892:	bf00      	nop
        while( pxIterator != pxEnd )
 800f894:	69fa      	ldr	r2, [r7, #28]
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	429a      	cmp	r2, r3
 800f89a:	d1b2      	bne.n	800f802 <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 800f89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3728      	adds	r7, #40	@ 0x28
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}
 800f8a6:	bf00      	nop
 800f8a8:	20001454 	.word	0x20001454
 800f8ac:	20001448 	.word	0x20001448
 800f8b0:	20001440 	.word	0x20001440

0800f8b4 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           IPv46_Address_t xRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 800f8b4:	b082      	sub	sp, #8
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	b088      	sub	sp, #32
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	6078      	str	r0, [r7, #4]
 800f8be:	6039      	str	r1, [r7, #0]
 800f8c0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f8c4:	e881 000c 	stmia.w	r1, {r2, r3}
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	61bb      	str	r3, [r7, #24]
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800f8d0:	4b23      	ldr	r3, [pc, #140]	@ (800f960 <pxTCPSocketLookup+0xac>)
 800f8d2:	613b      	str	r3, [r7, #16]

        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	685b      	ldr	r3, [r3, #4]
 800f8d8:	61fb      	str	r3, [r7, #28]
 800f8da:	e02e      	b.n	800f93a <pxTCPSocketLookup+0x86>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f8dc:	69fb      	ldr	r3, [r7, #28]
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	60fb      	str	r3, [r7, #12]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	b29b      	uxth	r3, r3
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d122      	bne.n	800f934 <pxTCPSocketLookup+0x80>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	d102      	bne.n	800f8fe <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	617b      	str	r3, [r7, #20]
 800f8fc:	e01a      	b.n	800f934 <pxTCPSocketLookup+0x80>
                }
                else if( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort )
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f906:	b29b      	uxth	r3, r3
 800f908:	429a      	cmp	r2, r3
 800f90a:	d113      	bne.n	800f934 <pxTCPSocketLookup+0x80>
                {
                    if( xRemoteIP.xIs_IPv6 != pdFALSE )
 800f90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d006      	beq.n	800f920 <pxTCPSocketLookup+0x6c>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            pxResult = pxTCPSocketLookup_IPv6( pxSocket, &xRemoteIP );
 800f912:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f916:	68f8      	ldr	r0, [r7, #12]
 800f918:	f7fb f9d4 	bl	800acc4 <pxTCPSocketLookup_IPv6>
 800f91c:	61b8      	str	r0, [r7, #24]
 800f91e:	e006      	b.n	800f92e <pxTCPSocketLookup+0x7a>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
                    }
                    else
                    {
                        if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == xRemoteIP.xIPAddress.ulIP_IPv4 )
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f926:	429a      	cmp	r2, r3
 800f928:	d101      	bne.n	800f92e <pxTCPSocketLookup+0x7a>
                        {
                            /* For sockets not in listening mode, find a match with
                             * xLocalPort, ulRemoteIP AND xRemotePort. */
                            pxResult = pxSocket;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	61bb      	str	r3, [r7, #24]
                        }
                    }

                    if( pxResult != NULL )
 800f92e:	69bb      	ldr	r3, [r7, #24]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d107      	bne.n	800f944 <pxTCPSocketLookup+0x90>
             pxIterator = listGET_NEXT( pxIterator ) )
 800f934:	69fb      	ldr	r3, [r7, #28]
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEnd;
 800f93a:	69fa      	ldr	r2, [r7, #28]
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	429a      	cmp	r2, r3
 800f940:	d1cc      	bne.n	800f8dc <pxTCPSocketLookup+0x28>
 800f942:	e000      	b.n	800f946 <pxTCPSocketLookup+0x92>
                    {
                        break;
 800f944:	bf00      	nop
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 800f946:	69bb      	ldr	r3, [r7, #24]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d101      	bne.n	800f950 <pxTCPSocketLookup+0x9c>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	61bb      	str	r3, [r7, #24]
        }

        return pxResult;
 800f950:	69bb      	ldr	r3, [r7, #24]
    }
 800f952:	4618      	mov	r0, r3
 800f954:	3720      	adds	r7, #32
 800f956:	46bd      	mov	sp, r7
 800f958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f95c:	b002      	add	sp, #8
 800f95e:	4770      	bx	lr
 800f960:	20001448 	.word	0x20001448

0800f964 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 800f964:	b580      	push	{r7, lr}
 800f966:	b088      	sub	sp, #32
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d048      	beq.n	800fa06 <prvTCPCreateStream+0xa2>
        {
            size_t uxLittlePerc = sock20_PERCENT;
 800f974:	2314      	movs	r3, #20
 800f976:	61bb      	str	r3, [r7, #24]
            size_t uxEnoughPerc = sock80_PERCENT;
 800f978:	2350      	movs	r3, #80	@ 0x50
 800f97a:	617b      	str	r3, [r7, #20]
            size_t uxSegmentCount = pxSocket->u.xTCP.uxRxStreamSize / pxSocket->u.xTCP.usMSS;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f982:	687a      	ldr	r2, [r7, #4]
 800f984:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 800f988:	fbb3 f3f2 	udiv	r3, r3, r2
 800f98c:	613b      	str	r3, [r7, #16]
                { 50U, 100U }, /* 2 segments. */
                { 34U, 100U }, /* 3 segments. */
                { 25U, 100U }, /* 4 segments. */
            };

            if( ( uxSegmentCount > 0U ) &&
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d00f      	beq.n	800f9b4 <prvTCPCreateStream+0x50>
 800f994:	693b      	ldr	r3, [r7, #16]
 800f996:	2b04      	cmp	r3, #4
 800f998:	d80c      	bhi.n	800f9b4 <prvTCPCreateStream+0x50>
                ( uxSegmentCount <= ARRAY_USIZE( xPercTable ) ) )
            {
                uxLittlePerc = xPercTable[ uxSegmentCount - 1U ].uxPercLittle;
 800f99a:	693b      	ldr	r3, [r7, #16]
 800f99c:	3b01      	subs	r3, #1
 800f99e:	4a40      	ldr	r2, [pc, #256]	@ (800faa0 <prvTCPCreateStream+0x13c>)
 800f9a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f9a4:	61bb      	str	r3, [r7, #24]
                uxEnoughPerc = xPercTable[ uxSegmentCount - 1U ].uxPercEnough;
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	3b01      	subs	r3, #1
 800f9aa:	4a3d      	ldr	r2, [pc, #244]	@ (800faa0 <prvTCPCreateStream+0x13c>)
 800f9ac:	00db      	lsls	r3, r3, #3
 800f9ae:	4413      	add	r3, r2
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	617b      	str	r3, [r7, #20]
            }

            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f9ba:	61fb      	str	r3, [r7, #28]

            if( pxSocket->u.xTCP.uxLittleSpace == 0U )
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d10c      	bne.n	800f9e0 <prvTCPCreateStream+0x7c>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( uxLittlePerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f9cc:	69ba      	ldr	r2, [r7, #24]
 800f9ce:	fb02 f303 	mul.w	r3, r2, r3
 800f9d2:	4a34      	ldr	r2, [pc, #208]	@ (800faa4 <prvTCPCreateStream+0x140>)
 800f9d4:	fba2 2303 	umull	r2, r3, r2, r3
 800f9d8:	095a      	lsrs	r2, r3, #5
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0U )
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d111      	bne.n	800fa0e <prvTCPCreateStream+0xaa>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( uxEnoughPerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f9f0:	697a      	ldr	r2, [r7, #20]
 800f9f2:	fb02 f303 	mul.w	r3, r2, r3
 800f9f6:	4a2b      	ldr	r2, [pc, #172]	@ (800faa4 <prvTCPCreateStream+0x140>)
 800f9f8:	fba2 2303 	umull	r2, r3, r2, r3
 800f9fc:	095a      	lsrs	r2, r3, #5
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800fa04:	e003      	b.n	800fa0e <prvTCPCreateStream+0xaa>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800fa0c:	61fb      	str	r3, [r7, #28]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 800fa0e:	69fb      	ldr	r3, [r7, #28]
 800fa10:	3304      	adds	r3, #4
 800fa12:	61fb      	str	r3, [r7, #28]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 800fa14:	69fb      	ldr	r3, [r7, #28]
 800fa16:	f023 0303 	bic.w	r3, r3, #3
 800fa1a:	61fb      	str	r3, [r7, #28]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	3314      	adds	r3, #20
 800fa20:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxBuffer = ( ( StreamBuffer_t * ) pvPortMallocLarge( uxSize ) );
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	f7f6 f966 	bl	8005cf4 <pvPortMalloc>
 800fa28:	60b8      	str	r0, [r7, #8]

        if( pxBuffer == NULL )
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d10e      	bne.n	800fa4e <prvTCPCreateStream+0xea>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 800fa30:	481d      	ldr	r0, [pc, #116]	@ (800faa8 <prvTCPCreateStream+0x144>)
 800fa32:	f011 ff41 	bl	80218b8 <lUDPLoggingPrintf>
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800fa36:	687a      	ldr	r2, [r7, #4]
 800fa38:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800fa3c:	f043 0308 	orr.w	r3, r3, #8
 800fa40:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800fa44:	2108      	movs	r1, #8
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f000 ff2a 	bl	80108a0 <vTCPStateChange>
 800fa4c:	e022      	b.n	800fa94 <prvTCPCreateStream+0x130>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800fa4e:	2214      	movs	r2, #20
 800fa50:	2100      	movs	r1, #0
 800fa52:	68b8      	ldr	r0, [r7, #8]
 800fa54:	f012 fa59 	bl	8021f0a <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	69fa      	ldr	r2, [r7, #28]
 800fa5c:	611a      	str	r2, [r3, #16]

            if( xTCPWindowLoggingLevel != 0 )
 800fa5e:	4b13      	ldr	r3, [pc, #76]	@ (800faac <prvTCPCreateStream+0x148>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d00a      	beq.n	800fa7c <prvTCPCreateStream+0x118>
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', ( unsigned ) uxLength, ( unsigned ) uxSize ) );
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d001      	beq.n	800fa70 <prvTCPCreateStream+0x10c>
 800fa6c:	2152      	movs	r1, #82	@ 0x52
 800fa6e:	e000      	b.n	800fa72 <prvTCPCreateStream+0x10e>
 800fa70:	2154      	movs	r1, #84	@ 0x54
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	69fa      	ldr	r2, [r7, #28]
 800fa76:	480e      	ldr	r0, [pc, #56]	@ (800fab0 <prvTCPCreateStream+0x14c>)
 800fa78:	f011 ff1e 	bl	80218b8 <lUDPLoggingPrintf>
            }

            if( xIsInputStream != 0 )
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d004      	beq.n	800fa8c <prvTCPCreateStream+0x128>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	68ba      	ldr	r2, [r7, #8]
 800fa86:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800fa8a:	e003      	b.n	800fa94 <prvTCPCreateStream+0x130>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	68ba      	ldr	r2, [r7, #8]
 800fa90:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            }
        }

        return pxBuffer;
 800fa94:	68bb      	ldr	r3, [r7, #8]
    }
 800fa96:	4618      	mov	r0, r3
 800fa98:	3720      	adds	r7, #32
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}
 800fa9e:	bf00      	nop
 800faa0:	08026fd0 	.word	0x08026fd0
 800faa4:	51eb851f 	.word	0x51eb851f
 800faa8:	080256cc 	.word	0x080256cc
 800faac:	20001484 	.word	0x20001484
 800fab0:	080256f0 	.word	0x080256f0

0800fab4 <vTCPAddRxdata_Callback>:
 * @param[in] ulByteCount The number of bytes that were received.
 */
    static void vTCPAddRxdata_Callback( FreeRTOS_Socket_t * pxSocket,
                                        const uint8_t * pcData,
                                        uint32_t ulByteCount )
    {
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b08a      	sub	sp, #40	@ 0x28
 800fab8:	af02      	add	r7, sp, #8
 800faba:	60f8      	str	r0, [r7, #12]
 800fabc:	60b9      	str	r1, [r7, #8]
 800fabe:	607a      	str	r2, [r7, #4]
        const uint8_t * pucBuffer = pcData;
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	61fb      	str	r3, [r7, #28]

        /* The socket owner has installed an OnReceive handler. Pass the
         * Rx data, without copying from the rxStream, to the user. */
        for( ; ; )
        {
            uint8_t * ucReadPtr = NULL;
 800fac4:	2300      	movs	r3, #0
 800fac6:	617b      	str	r3, [r7, #20]
            uint32_t ulCount;

            if( pucBuffer != NULL )
 800fac8:	69fb      	ldr	r3, [r7, #28]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d006      	beq.n	800fadc <vTCPAddRxdata_Callback+0x28>
            {
                ucReadPtr = ( uint8_t * ) pucBuffer;
 800face:	69fb      	ldr	r3, [r7, #28]
 800fad0:	617b      	str	r3, [r7, #20]
                ulCount = ulByteCount;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	61bb      	str	r3, [r7, #24]
                pucBuffer = NULL;
 800fad6:	2300      	movs	r3, #0
 800fad8:	61fb      	str	r3, [r7, #28]
 800fada:	e009      	b.n	800faf0 <vTCPAddRxdata_Callback+0x3c>
            }
            else
            {
                ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, &( ucReadPtr ) );
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fae2:	f107 0214 	add.w	r2, r7, #20
 800fae6:	4611      	mov	r1, r2
 800fae8:	4618      	mov	r0, r3
 800faea:	f000 fc92 	bl	8010412 <uxStreamBufferGetPtr>
 800faee:	61b8      	str	r0, [r7, #24]
            }

            if( ulCount == 0U )
 800faf0:	69bb      	ldr	r3, [r7, #24]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d011      	beq.n	800fb1a <vTCPAddRxdata_Callback+0x66>
                break;
            }

            /* For advanced users only: here a pointer to the RX-stream of a socket
             * is passed to an application hook. */
            ( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fafc:	6979      	ldr	r1, [r7, #20]
 800fafe:	69ba      	ldr	r2, [r7, #24]
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	4798      	blx	r3
            /* Forward the tail in the RX stream. */
            ( void ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0U, NULL, ( size_t ) ulCount, pdFALSE );
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	9300      	str	r3, [sp, #0]
 800fb0e:	69bb      	ldr	r3, [r7, #24]
 800fb10:	2200      	movs	r2, #0
 800fb12:	2100      	movs	r1, #0
 800fb14:	f000 fd1d 	bl	8010552 <uxStreamBufferGet>
        {
 800fb18:	e7d4      	b.n	800fac4 <vTCPAddRxdata_Callback+0x10>
        }
    }
 800fb1a:	bf00      	nop
 800fb1c:	3720      	adds	r7, #32
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}

0800fb22 <vTCPAddRxdata_Stored>:
 *        RX-stream. When the space is dropped below a threshold, it may set the
 *        bit field 'bLowWater'. Also the socket's events bits for READ will be set.
 * @param[in] pxSocket the socket that has received new data.
 */
    static void vTCPAddRxdata_Stored( FreeRTOS_Socket_t * pxSocket )
    {
 800fb22:	b580      	push	{r7, lr}
 800fb24:	b084      	sub	sp, #16
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	6078      	str	r0, [r7, #4]
        /* See if running out of space. */
        if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fb30:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fb34:	b2db      	uxtb	r3, r3
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d121      	bne.n	800fb7e <vTCPAddRxdata_Stored+0x5c>
        {
            size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fb40:	4618      	mov	r0, r3
 800fb42:	f000 fbd7 	bl	80102f4 <uxStreamBufferFrontSpace>
 800fb46:	60f8      	str	r0, [r7, #12]

            if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fb4e:	68fa      	ldr	r2, [r7, #12]
 800fb50:	429a      	cmp	r2, r3
 800fb52:	d814      	bhi.n	800fb7e <vTCPAddRxdata_Stored+0x5c>
            {
                pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 800fb54:	687a      	ldr	r2, [r7, #4]
 800fb56:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800fb5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb5e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800fb62:	687a      	ldr	r2, [r7, #4]
 800fb64:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800fb68:	f043 0301 	orr.w	r3, r3, #1
 800fb6c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* bLowWater was reached, send the changed window size. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2201      	movs	r2, #1
 800fb74:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800fb78:	2006      	movs	r0, #6
 800fb7a:	f7f9 fa1b 	bl	8008fb4 <xSendEventToIPTask>
            }
        }

        /* New incoming data is available, wake up the user.   User's
         * semaphores will be set just before the IP-task goes asleep. */
        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	f043 0201 	orr.w	r2, r3, #1
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	601a      	str	r2, [r3, #0]

        #if ipconfigSUPPORT_SELECT_FUNCTION == 1
        {
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb8e:	f003 0301 	and.w	r3, r3, #1
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d005      	beq.n	800fba2 <vTCPAddRxdata_Stored+0x80>
            {
                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	601a      	str	r2, [r3, #0]
            }
        }
        #endif
    }
 800fba2:	bf00      	nop
 800fba4:	3710      	adds	r7, #16
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
	...

0800fbac <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 800fbac:	b5b0      	push	{r4, r5, r7, lr}
 800fbae:	b08c      	sub	sp, #48	@ 0x30
 800fbb0:	af04      	add	r7, sp, #16
 800fbb2:	60f8      	str	r0, [r7, #12]
 800fbb4:	60b9      	str	r1, [r7, #8]
 800fbb6:	607a      	str	r2, [r7, #4]
 800fbb8:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fbc0:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	61bb      	str	r3, [r7, #24]

        #if ( ipconfigUSE_CALLBACKS == 1 )
            BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d001      	beq.n	800fbd4 <lTCPAddRxdata+0x28>
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	e000      	b.n	800fbd6 <lTCPAddRxdata+0x2a>
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	613b      	str	r3, [r7, #16]
            const uint8_t * pucBuffer = NULL;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	617b      	str	r3, [r7, #20]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d10a      	bne.n	800fbf8 <lTCPAddRxdata+0x4c>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800fbe2:	2101      	movs	r1, #1
 800fbe4:	68f8      	ldr	r0, [r7, #12]
 800fbe6:	f7ff febd 	bl	800f964 <prvTCPCreateStream>
 800fbea:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 800fbec:	69fb      	ldr	r3, [r7, #28]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d102      	bne.n	800fbf8 <lTCPAddRxdata+0x4c>
            {
                xResult = -1;
 800fbf2:	f04f 33ff 	mov.w	r3, #4294967295
 800fbf6:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 800fbf8:	69bb      	ldr	r3, [r7, #24]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	db41      	blt.n	800fc82 <lTCPAddRxdata+0xd6>
        {
            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0U ) && ( pcData != NULL ) )
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d00f      	beq.n	800fc24 <lTCPAddRxdata+0x78>
 800fc04:	69f8      	ldr	r0, [r7, #28]
 800fc06:	f000 fb86 	bl	8010316 <uxStreamBufferGetSize>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d109      	bne.n	800fc24 <lTCPAddRxdata+0x78>
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d106      	bne.n	800fc24 <lTCPAddRxdata+0x78>
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d003      	beq.n	800fc24 <lTCPAddRxdata+0x78>
                {
                    /* Data can be passed directly to the user because there is
                     * no data in the RX-stream, it the new data must be stored
                     * at offset zero, and a buffer 'pcData' is provided.
                     */
                    pucBuffer = pcData;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	617b      	str	r3, [r7, #20]

                    /* Zero-copy for call-back: no need to add the bytes to the
                     * stream, only the pointer will be advanced by uxStreamBufferAdd(). */
                    pcData = NULL;
 800fc20:	2300      	movs	r3, #0
 800fc22:	607b      	str	r3, [r7, #4]
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	687a      	ldr	r2, [r7, #4]
 800fc28:	68b9      	ldr	r1, [r7, #8]
 800fc2a:	69f8      	ldr	r0, [r7, #28]
 800fc2c:	f000 fc11 	bl	8010452 <uxStreamBufferAdd>
 800fc30:	4603      	mov	r3, r0
 800fc32:	61bb      	str	r3, [r7, #24]

            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            {
                if( xResult != ( int32_t ) ulByteCount )
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	69ba      	ldr	r2, [r7, #24]
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d013      	beq.n	800fc64 <lTCPAddRxdata+0xb8>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	681c      	ldr	r4, [r3, #0]
 800fc40:	69fb      	ldr	r3, [r7, #28]
 800fc42:	689d      	ldr	r5, [r3, #8]
 800fc44:	69f8      	ldr	r0, [r7, #28]
 800fc46:	f000 fb55 	bl	80102f4 <uxStreamBufferFrontSpace>
 800fc4a:	4602      	mov	r2, r0
 800fc4c:	69fb      	ldr	r3, [r7, #28]
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	9303      	str	r3, [sp, #12]
 800fc52:	9202      	str	r2, [sp, #8]
 800fc54:	9501      	str	r5, [sp, #4]
 800fc56:	9400      	str	r4, [sp, #0]
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	69ba      	ldr	r2, [r7, #24]
 800fc5c:	68b9      	ldr	r1, [r7, #8]
 800fc5e:	480b      	ldr	r0, [pc, #44]	@ (800fc8c <lTCPAddRxdata+0xe0>)
 800fc60:	f011 fe2a 	bl	80218b8 <lUDPLoggingPrintf>
                                             ( unsigned int ) pxStream->uxFront ) );
                }
            }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d10b      	bne.n	800fc82 <lTCPAddRxdata+0xd6>
            {
                /* Data is being added to rxStream at the head (offs = 0) */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                    if( bHasHandler != pdFALSE )
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d005      	beq.n	800fc7c <lTCPAddRxdata+0xd0>
                    {
                        vTCPAddRxdata_Callback( pxSocket, pucBuffer, ulByteCount );
 800fc70:	683a      	ldr	r2, [r7, #0]
 800fc72:	6979      	ldr	r1, [r7, #20]
 800fc74:	68f8      	ldr	r0, [r7, #12]
 800fc76:	f7ff ff1d 	bl	800fab4 <vTCPAddRxdata_Callback>
 800fc7a:	e002      	b.n	800fc82 <lTCPAddRxdata+0xd6>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    vTCPAddRxdata_Stored( pxSocket );
 800fc7c:	68f8      	ldr	r0, [r7, #12]
 800fc7e:	f7ff ff50 	bl	800fb22 <vTCPAddRxdata_Stored>
                }
            }
        }

        return xResult;
 800fc82:	69bb      	ldr	r3, [r7, #24]
    }
 800fc84:	4618      	mov	r0, r3
 800fc86:	3720      	adds	r7, #32
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bdb0      	pop	{r4, r5, r7, pc}
 800fc8c:	0802572c 	.word	0x0802572c

0800fc90 <FreeRTOS_tx_space>:
 * @param[in] xSocket the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800fca2:	2b06      	cmp	r3, #6
 800fca4:	d003      	beq.n	800fcae <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800fca6:	f06f 0315 	mvn.w	r3, #21
 800fcaa:	60fb      	str	r3, [r7, #12]
 800fcac:	e011      	b.n	800fcd2 <FreeRTOS_tx_space+0x42>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d008      	beq.n	800fcca <FreeRTOS_tx_space+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f000 fb07 	bl	80102d2 <uxStreamBufferGetSpace>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	60fb      	str	r3, [r7, #12]
 800fcc8:	e003      	b.n	800fcd2 <FreeRTOS_tx_space+0x42>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800fcd0:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
    }
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3710      	adds	r7, #16
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}

0800fcdc <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b084      	sub	sp, #16
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800fcee:	2b06      	cmp	r3, #6
 800fcf0:	d003      	beq.n	800fcfa <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800fcf2:	f06f 0315 	mvn.w	r3, #21
 800fcf6:	60fb      	str	r3, [r7, #12]
 800fcf8:	e00f      	b.n	800fd1a <FreeRTOS_tx_size+0x3e>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d008      	beq.n	800fd16 <FreeRTOS_tx_size+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f000 fb03 	bl	8010316 <uxStreamBufferGetSize>
 800fd10:	4603      	mov	r3, r0
 800fd12:	60fb      	str	r3, [r7, #12]
 800fd14:	e001      	b.n	800fd1a <FreeRTOS_tx_size+0x3e>
            }
            else
            {
                xReturn = 0;
 800fd16:	2300      	movs	r3, #0
 800fd18:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
    }
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	3710      	adds	r7, #16
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}

0800fd24 <FreeRTOS_issocketconnected>:
 * @param[in] xSocket The socket being checked.
 *
 * @return pdTRUE if TCP socket is connected.
 */
    BaseType_t FreeRTOS_issocketconnected( ConstSocket_t xSocket )
    {
 800fd24:	b480      	push	{r7}
 800fd26:	b085      	sub	sp, #20
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800fd30:	2300      	movs	r3, #0
 800fd32:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800fd3a:	2b06      	cmp	r3, #6
 800fd3c:	d003      	beq.n	800fd46 <FreeRTOS_issocketconnected+0x22>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800fd3e:	f06f 0315 	mvn.w	r3, #21
 800fd42:	60fb      	str	r3, [r7, #12]
 800fd44:	e00b      	b.n	800fd5e <FreeRTOS_issocketconnected+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fd4c:	2b04      	cmp	r3, #4
 800fd4e:	d906      	bls.n	800fd5e <FreeRTOS_issocketconnected+0x3a>
            {
                if( pxSocket->u.xTCP.eTCPState < eCLOSE_WAIT )
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fd56:	2b07      	cmp	r3, #7
 800fd58:	d801      	bhi.n	800fd5e <FreeRTOS_issocketconnected+0x3a>
                {
                    xReturn = pdTRUE;
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xReturn;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
    }
 800fd60:	4618      	mov	r0, r3
 800fd62:	3714      	adds	r7, #20
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr

0800fd6c <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800fd7e:	2b06      	cmp	r3, #6
 800fd80:	d003      	beq.n	800fd8a <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800fd82:	f06f 0315 	mvn.w	r3, #21
 800fd86:	60fb      	str	r3, [r7, #12]
 800fd88:	e00f      	b.n	800fdaa <FreeRTOS_rx_size+0x3e>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d008      	beq.n	800fda6 <FreeRTOS_rx_size+0x3a>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f000 fabb 	bl	8010316 <uxStreamBufferGetSize>
 800fda0:	4603      	mov	r3, r0
 800fda2:	60fb      	str	r3, [r7, #12]
 800fda4:	e001      	b.n	800fdaa <FreeRTOS_rx_size+0x3e>
        }
        else
        {
            xReturn = 0;
 800fda6:	2300      	movs	r3, #0
 800fda8:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
    }
 800fdac:	4618      	mov	r0, r3
 800fdae:	3710      	adds	r7, #16
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}

0800fdb4 <xSocketValid>:
 * @param[in] xSocket The socket to be checked.
 * @return pdTRUE if the socket is valid, else pdFALSE.
 *
 */
BaseType_t xSocketValid( const ConstSocket_t xSocket )
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b085      	sub	sp, #20
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturnValue = pdFALSE;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	60fb      	str	r3, [r7, #12]
     */

    /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
    /* coverity[misra_c_2012_rule_11_4_violation] */
    if( ( xSocket != FREERTOS_INVALID_SOCKET ) && ( xSocket != NULL ) )
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdc6:	d004      	beq.n	800fdd2 <xSocketValid+0x1e>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d001      	beq.n	800fdd2 <xSocketValid+0x1e>
    {
        xReturnValue = pdTRUE;
 800fdce:	2301      	movs	r3, #1
 800fdd0:	60fb      	str	r3, [r7, #12]
    }

    return xReturnValue;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3714      	adds	r7, #20
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr

0800fde0 <vTCPNetStat_TCPSocket>:
 * @brief A helper function of vTCPNetStat(), see below.
 *
 * @param[in] pxSocket The socket that needs logging.
 */
    static void vTCPNetStat_TCPSocket( const FreeRTOS_Socket_t * pxSocket )
    {
 800fde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fde4:	b09c      	sub	sp, #112	@ 0x70
 800fde6:	af08      	add	r7, sp, #32
 800fde8:	6078      	str	r0, [r7, #4]
        char pcRemoteIp[ 40 ];
        int xIPWidth = 32;
 800fdea:	2320      	movs	r3, #32
 800fdec:	64bb      	str	r3, [r7, #72]	@ 0x48

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800fdee:	f7f4 f915 	bl	800401c <xTaskGetTickCount>
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fdfa:	1ad3      	subs	r3, r2, r3
 800fdfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
        #else
            TickType_t age = 0U;
        #endif

        char ucChildText[ 16 ] = "";
 800fdfe:	2300      	movs	r3, #0
 800fe00:	60fb      	str	r3, [r7, #12]
 800fe02:	f107 0310 	add.w	r3, r7, #16
 800fe06:	2200      	movs	r2, #0
 800fe08:	601a      	str	r2, [r3, #0]
 800fe0a:	605a      	str	r2, [r3, #4]
 800fe0c:	609a      	str	r2, [r3, #8]

        if( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eTCP_LISTEN )
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d11f      	bne.n	800fe58 <vTCPNetStat_TCPSocket+0x78>
        {
            /* Using function "snprintf". */
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                 pxSocket->u.xTCP.usChildCount,
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800fe1e:	461a      	mov	r2, r3
                                                 pxSocket->u.xTCP.usBacklog );
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800fe26:	f107 000c 	add.w	r0, r7, #12
 800fe2a:	9300      	str	r3, [sp, #0]
 800fe2c:	4613      	mov	r3, r2
 800fe2e:	4a3b      	ldr	r2, [pc, #236]	@ (800ff1c <vTCPNetStat_TCPSocket+0x13c>)
 800fe30:	2110      	movs	r1, #16
 800fe32:	f012 fd6d 	bl	8022910 <snprintf>
 800fe36:	6478      	str	r0, [r7, #68]	@ 0x44
            ( void ) copied_len;
            /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
            configASSERT( copied_len >= 0 );                                /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800fe38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	da04      	bge.n	800fe48 <vTCPNetStat_TCPSocket+0x68>
 800fe3e:	f241 61df 	movw	r1, #5855	@ 0x16df
 800fe42:	4837      	ldr	r0, [pc, #220]	@ (800ff20 <vTCPNetStat_TCPSocket+0x140>)
 800fe44:	f7f1 fc12 	bl	800166c <vAssertCalled>
            configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) ); /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800fe48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe4a:	2b0f      	cmp	r3, #15
 800fe4c:	dd04      	ble.n	800fe58 <vTCPNetStat_TCPSocket+0x78>
 800fe4e:	f44f 51b7 	mov.w	r1, #5856	@ 0x16e0
 800fe52:	4833      	ldr	r0, [pc, #204]	@ (800ff20 <vTCPNetStat_TCPSocket+0x140>)
 800fe54:	f7f1 fc0a 	bl	800166c <vAssertCalled>
        }

        if( age > 999999U )
 800fe58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe5a:	4a32      	ldr	r2, [pc, #200]	@ (800ff24 <vTCPNetStat_TCPSocket+0x144>)
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	d901      	bls.n	800fe64 <vTCPNetStat_TCPSocket+0x84>
        {
            age = 999999U;
 800fe60:	4b30      	ldr	r3, [pc, #192]	@ (800ff24 <vTCPNetStat_TCPSocket+0x144>)
 800fe62:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	7a1b      	ldrb	r3, [r3, #8]
 800fe68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fe6c:	b2db      	uxtb	r3, r3
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d002      	beq.n	800fe78 <vTCPNetStat_TCPSocket+0x98>
 800fe72:	2b01      	cmp	r3, #1
 800fe74:	d009      	beq.n	800fe8a <vTCPNetStat_TCPSocket+0xaa>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* MISRA 16.4 Compliance */
                break;
 800fe76:	e011      	b.n	800fe9c <vTCPNetStat_TCPSocket+0xbc>
                    ( void ) snprintf( pcRemoteIp, sizeof( pcRemoteIp ), "%xip", ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe7c:	f107 001c 	add.w	r0, r7, #28
 800fe80:	4a29      	ldr	r2, [pc, #164]	@ (800ff28 <vTCPNetStat_TCPSocket+0x148>)
 800fe82:	2128      	movs	r1, #40	@ 0x28
 800fe84:	f012 fd44 	bl	8022910 <snprintf>
                    break;
 800fe88:	e008      	b.n	800fe9c <vTCPNetStat_TCPSocket+0xbc>
                                       "%pip", ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes );
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	3354      	adds	r3, #84	@ 0x54
                    ( void ) snprintf( pcRemoteIp,
 800fe8e:	f107 001c 	add.w	r0, r7, #28
 800fe92:	4a26      	ldr	r2, [pc, #152]	@ (800ff2c <vTCPNetStat_TCPSocket+0x14c>)
 800fe94:	2128      	movs	r1, #40	@ 0x28
 800fe96:	f012 fd3b 	bl	8022910 <snprintf>
                    break;
 800fe9a:	bf00      	nop
        }

        FreeRTOS_printf( ( "TCP %5d %-*s:%5d %d/%d %-13.13s %6u %6u%s\n",
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fea0:	4698      	mov	r8, r3
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fea8:	461c      	mov	r4, r3
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	bf14      	ite	ne
 800feb4:	2301      	movne	r3, #1
 800feb6:	2300      	moveq	r3, #0
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	461d      	mov	r5, r3
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	bf14      	ite	ne
 800fec6:	2301      	movne	r3, #1
 800fec8:	2300      	moveq	r3, #0
 800feca:	b2db      	uxtb	r3, r3
 800fecc:	461e      	mov	r6, r3
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fed4:	4618      	mov	r0, r3
 800fed6:	f002 fbf5 	bl	80126c4 <FreeRTOS_GetTCPStateName>
 800feda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fedc:	4a11      	ldr	r2, [pc, #68]	@ (800ff24 <vTCPNetStat_TCPSocket+0x144>)
 800fede:	4293      	cmp	r3, r2
 800fee0:	bf28      	it	cs
 800fee2:	4613      	movcs	r3, r2
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
 800feea:	603a      	str	r2, [r7, #0]
 800feec:	f107 011c 	add.w	r1, r7, #28
 800fef0:	f107 020c 	add.w	r2, r7, #12
 800fef4:	9206      	str	r2, [sp, #24]
 800fef6:	683a      	ldr	r2, [r7, #0]
 800fef8:	9205      	str	r2, [sp, #20]
 800fefa:	9304      	str	r3, [sp, #16]
 800fefc:	9003      	str	r0, [sp, #12]
 800fefe:	9602      	str	r6, [sp, #8]
 800ff00:	9501      	str	r5, [sp, #4]
 800ff02:	9400      	str	r4, [sp, #0]
 800ff04:	460b      	mov	r3, r1
 800ff06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ff08:	4641      	mov	r1, r8
 800ff0a:	4809      	ldr	r0, [pc, #36]	@ (800ff30 <vTCPNetStat_TCPSocket+0x150>)
 800ff0c:	f011 fcd4 	bl	80218b8 <lUDPLoggingPrintf>
                           ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                           FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.eTCPState ),
                           ( unsigned ) ( ( age > 999999U ) ? 999999U : age ), /* Format 'age' for printing */
                           pxSocket->u.xTCP.usTimeout,
                           ucChildText ) );
    }
 800ff10:	bf00      	nop
 800ff12:	3750      	adds	r7, #80	@ 0x50
 800ff14:	46bd      	mov	sp, r7
 800ff16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff1a:	bf00      	nop
 800ff1c:	08025774 	.word	0x08025774
 800ff20:	08025294 	.word	0x08025294
 800ff24:	000f423f 	.word	0x000f423f
 800ff28:	0802577c 	.word	0x0802577c
 800ff2c:	08025784 	.word	0x08025784
 800ff30:	0802578c 	.word	0x0802578c

0800ff34 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b08a      	sub	sp, #40	@ 0x28
 800ff38:	af02      	add	r7, sp, #8
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	61bb      	str	r3, [r7, #24]
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 800ff3e:	f006 fe59 	bl	8016bf4 <uxGetMinimumFreeNetworkBuffers>
 800ff42:	6178      	str	r0, [r7, #20]
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 800ff44:	f006 fe62 	bl	8016c0c <uxGetNumberOfFreeNetworkBuffers>
 800ff48:	6138      	str	r0, [r7, #16]

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 800ff4a:	4b26      	ldr	r3, [pc, #152]	@ (800ffe4 <vTCPNetStat+0xb0>)
 800ff4c:	689b      	ldr	r3, [r3, #8]
 800ff4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff52:	d003      	beq.n	800ff5c <vTCPNetStat+0x28>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 800ff54:	4824      	ldr	r0, [pc, #144]	@ (800ffe8 <vTCPNetStat+0xb4>)
 800ff56:	f011 fcaf 	bl	80218b8 <lUDPLoggingPrintf>
                               ( int ) count,
                               ( unsigned ) uxMinimum,
                               ( unsigned ) uxCurrent,
                               ( unsigned ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 800ff5a:	e03f      	b.n	800ffdc <vTCPNetStat+0xa8>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800ff5c:	4b23      	ldr	r3, [pc, #140]	@ (800ffec <vTCPNetStat+0xb8>)
 800ff5e:	60fb      	str	r3, [r7, #12]
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 800ff60:	4b23      	ldr	r3, [pc, #140]	@ (800fff0 <vTCPNetStat+0xbc>)
 800ff62:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 800ff64:	4823      	ldr	r0, [pc, #140]	@ (800fff4 <vTCPNetStat+0xc0>)
 800ff66:	f011 fca7 	bl	80218b8 <lUDPLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800ff6a:	4b1e      	ldr	r3, [pc, #120]	@ (800ffe4 <vTCPNetStat+0xb0>)
 800ff6c:	68db      	ldr	r3, [r3, #12]
 800ff6e:	61fb      	str	r3, [r7, #28]
 800ff70:	e00b      	b.n	800ff8a <vTCPNetStat+0x56>
                const FreeRTOS_Socket_t * pxSocket = ( ( const FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ff72:	69fb      	ldr	r3, [r7, #28]
 800ff74:	68db      	ldr	r3, [r3, #12]
 800ff76:	607b      	str	r3, [r7, #4]
                vTCPNetStat_TCPSocket( pxSocket );
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f7ff ff31 	bl	800fde0 <vTCPNetStat_TCPSocket>
                count++;
 800ff7e:	69bb      	ldr	r3, [r7, #24]
 800ff80:	3301      	adds	r3, #1
 800ff82:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndTCP;
 800ff8a:	69fa      	ldr	r2, [r7, #28]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d1ef      	bne.n	800ff72 <vTCPNetStat+0x3e>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800ff92:	4b19      	ldr	r3, [pc, #100]	@ (800fff8 <vTCPNetStat+0xc4>)
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	61fb      	str	r3, [r7, #28]
 800ff98:	e014      	b.n	800ffc4 <vTCPNetStat+0x90>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 800ff9a:	69fb      	ldr	r3, [r7, #28]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	b29b      	uxth	r3, r3
 800ffa0:	021b      	lsls	r3, r3, #8
 800ffa2:	b29a      	uxth	r2, r3
 800ffa4:	69fb      	ldr	r3, [r7, #28]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	0a1b      	lsrs	r3, r3, #8
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	4313      	orrs	r3, r2
 800ffae:	b29b      	uxth	r3, r3
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	4812      	ldr	r0, [pc, #72]	@ (800fffc <vTCPNetStat+0xc8>)
 800ffb4:	f011 fc80 	bl	80218b8 <lUDPLoggingPrintf>
                count++;
 800ffb8:	69bb      	ldr	r3, [r7, #24]
 800ffba:	3301      	adds	r3, #1
 800ffbc:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 800ffbe:	69fb      	ldr	r3, [r7, #28]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndUDP;
 800ffc4:	69fa      	ldr	r2, [r7, #28]
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d1e6      	bne.n	800ff9a <vTCPNetStat+0x66>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %d sockets %u < %u < %u buffers free\n",
 800ffcc:	2340      	movs	r3, #64	@ 0x40
 800ffce:	9300      	str	r3, [sp, #0]
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	697a      	ldr	r2, [r7, #20]
 800ffd4:	69b9      	ldr	r1, [r7, #24]
 800ffd6:	480a      	ldr	r0, [pc, #40]	@ (8010000 <vTCPNetStat+0xcc>)
 800ffd8:	f011 fc6e 	bl	80218b8 <lUDPLoggingPrintf>
    }
 800ffdc:	bf00      	nop
 800ffde:	3720      	adds	r7, #32
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}
 800ffe4:	20001440 	.word	0x20001440
 800ffe8:	080257b8 	.word	0x080257b8
 800ffec:	20001448 	.word	0x20001448
 800fff0:	20001434 	.word	0x20001434
 800fff4:	080257d4 	.word	0x080257d4
 800fff8:	2000142c 	.word	0x2000142c
 800fffc:	0802581c 	.word	0x0802581c
 8010000:	0802582c 	.word	0x0802582c

08010004 <vSocketSelectTCP>:
 *
 * @param[in] pxSocket The socket which needs to be checked.
 * @return An event mask of events that are active for this socket.
 */
        static EventBits_t vSocketSelectTCP( FreeRTOS_Socket_t * pxSocket )
        {
 8010004:	b580      	push	{r7, lr}
 8010006:	b086      	sub	sp, #24
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
            /* Check if the TCP socket has already been accepted by
             * the owner.  If not, it is useless to return it from a
             * select(). */
            BaseType_t bAccepted = pdFALSE;
 801000c:	2300      	movs	r3, #0
 801000e:	617b      	str	r3, [r7, #20]
            EventBits_t xSocketBits = 0U;
 8010010:	2300      	movs	r3, #0
 8010012:	613b      	str	r3, [r7, #16]

            if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801001a:	f003 0304 	and.w	r3, r3, #4
 801001e:	b2db      	uxtb	r3, r3
 8010020:	2b00      	cmp	r3, #0
 8010022:	d109      	bne.n	8010038 <vSocketSelectTCP+0x34>
            {
                if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801002a:	f003 0302 	and.w	r3, r3, #2
 801002e:	b2db      	uxtb	r3, r3
 8010030:	2b00      	cmp	r3, #0
 8010032:	d101      	bne.n	8010038 <vSocketSelectTCP+0x34>
                {
                    bAccepted = pdTRUE;
 8010034:	2301      	movs	r3, #1
 8010036:	617b      	str	r3, [r7, #20]
                }
            }

            /* Is the set owner interested in READ events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801003c:	f003 0301 	and.w	r3, r3, #1
 8010040:	2b00      	cmp	r3, #0
 8010042:	d038      	beq.n	80100b6 <vSocketSelectTCP+0xb2>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801004a:	2b01      	cmp	r3, #1
 801004c:	d111      	bne.n	8010072 <vSocketSelectTCP+0x6e>
                {
                    if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010052:	2b00      	cmp	r3, #0
 8010054:	d02f      	beq.n	80100b6 <vSocketSelectTCP+0xb2>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801005a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801005e:	f003 0302 	and.w	r3, r3, #2
 8010062:	b2db      	uxtb	r3, r3
 8010064:	2b00      	cmp	r3, #0
 8010066:	d026      	beq.n	80100b6 <vSocketSelectTCP+0xb2>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	f043 0301 	orr.w	r3, r3, #1
 801006e:	613b      	str	r3, [r7, #16]
 8010070:	e021      	b.n	80100b6 <vSocketSelectTCP+0xb2>
                    }
                }
                else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010078:	f003 0308 	and.w	r3, r3, #8
 801007c:	b2db      	uxtb	r3, r3
 801007e:	2b00      	cmp	r3, #0
 8010080:	d00c      	beq.n	801009c <vSocketSelectTCP+0x98>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010088:	f003 0302 	and.w	r3, r3, #2
 801008c:	b2db      	uxtb	r3, r3
 801008e:	2b00      	cmp	r3, #0
 8010090:	d004      	beq.n	801009c <vSocketSelectTCP+0x98>
                {
                    /* This socket has the re-use flag. After connecting it turns into
                     * a connected socket. Set the READ event, so that accept() will be called. */
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	f043 0301 	orr.w	r3, r3, #1
 8010098:	613b      	str	r3, [r7, #16]
 801009a:	e00c      	b.n	80100b6 <vSocketSelectTCP+0xb2>
                }
                else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d009      	beq.n	80100b6 <vSocketSelectTCP+0xb2>
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f7ff fe62 	bl	800fd6c <FreeRTOS_rx_size>
 80100a8:	4603      	mov	r3, r0
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	dd03      	ble.n	80100b6 <vSocketSelectTCP+0xb2>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 80100ae:	693b      	ldr	r3, [r7, #16]
 80100b0:	f043 0301 	orr.w	r3, r3, #1
 80100b4:	613b      	str	r3, [r7, #16]
                    /* Nothing. */
                }
            }

            /* Is the set owner interested in EXCEPTION events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100ba:	f003 0304 	and.w	r3, r3, #4
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d00d      	beq.n	80100de <vSocketSelectTCP+0xda>
            {
                if( ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.eTCPState == eCLOSED ) )
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80100c8:	2b08      	cmp	r3, #8
 80100ca:	d004      	beq.n	80100d6 <vSocketSelectTCP+0xd2>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d103      	bne.n	80100de <vSocketSelectTCP+0xda>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	f043 0304 	orr.w	r3, r3, #4
 80100dc:	613b      	str	r3, [r7, #16]
                }
            }

            /* Is the set owner interested in WRITE events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100e2:	f003 0302 	and.w	r3, r3, #2
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d034      	beq.n	8010154 <vSocketSelectTCP+0x150>
            {
                BaseType_t bMatch = pdFALSE;
 80100ea:	2300      	movs	r3, #0
 80100ec:	60fb      	str	r3, [r7, #12]

                if( bAccepted != 0 )
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d007      	beq.n	8010104 <vSocketSelectTCP+0x100>
                {
                    if( FreeRTOS_tx_space( pxSocket ) > 0 )
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f7ff fdcb 	bl	800fc90 <FreeRTOS_tx_space>
 80100fa:	4603      	mov	r3, r0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	dd01      	ble.n	8010104 <vSocketSelectTCP+0x100>
                    {
                        bMatch = pdTRUE;
 8010100:	2301      	movs	r3, #1
 8010102:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch == pdFALSE )
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d11d      	bne.n	8010146 <vSocketSelectTCP+0x142>
                {
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010110:	f003 0308 	and.w	r3, r3, #8
 8010114:	b2db      	uxtb	r3, r3
 8010116:	2b00      	cmp	r3, #0
 8010118:	d015      	beq.n	8010146 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 8010120:	2b04      	cmp	r3, #4
 8010122:	d910      	bls.n	8010146 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801012a:	f003 0310 	and.w	r3, r3, #16
 801012e:	b2db      	uxtb	r3, r3
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 8010130:	2b00      	cmp	r3, #0
 8010132:	d108      	bne.n	8010146 <vSocketSelectTCP+0x142>
                    {
                        pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 8010134:	687a      	ldr	r2, [r7, #4]
 8010136:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801013a:	f043 0310 	orr.w	r3, r3, #16
 801013e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        bMatch = pdTRUE;
 8010142:	2301      	movs	r3, #1
 8010144:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch != pdFALSE )
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d003      	beq.n	8010154 <vSocketSelectTCP+0x150>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	f043 0302 	orr.w	r3, r3, #2
 8010152:	613b      	str	r3, [r7, #16]
                }
            }

            return xSocketBits;
 8010154:	693b      	ldr	r3, [r7, #16]
        }
 8010156:	4618      	mov	r0, r3
 8010158:	3718      	adds	r7, #24
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
	...

08010160 <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet The socket-set which is to be waited on for change.
 */
    void vSocketSelect( const SocketSelect_t * pxSocketSet )
    {
 8010160:	b580      	push	{r7, lr}
 8010162:	b08a      	sub	sp, #40	@ 0x28
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 8010168:	2301      	movs	r3, #1
 801016a:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 801016c:	2300      	movs	r3, #0
 801016e:	61fb      	str	r3, [r7, #28]

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 8010170:	2300      	movs	r3, #0
 8010172:	627b      	str	r3, [r7, #36]	@ 0x24
 8010174:	e043      	b.n	80101fe <vSocketSelect+0x9e>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 8010176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010178:	2b00      	cmp	r3, #0
 801017a:	d102      	bne.n	8010182 <vSocketSelect+0x22>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxEnd = ( ( const ListItem_t * ) &( xBoundUDPSocketsList.xListEnd ) );
 801017c:	4b34      	ldr	r3, [pc, #208]	@ (8010250 <vSocketSelect+0xf0>)
 801017e:	617b      	str	r3, [r7, #20]
 8010180:	e001      	b.n	8010186 <vSocketSelect+0x26>
                else
                {
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010182:	4b34      	ldr	r3, [pc, #208]	@ (8010254 <vSocketSelect+0xf4>)
 8010184:	617b      	str	r3, [r7, #20]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	61bb      	str	r3, [r7, #24]
 801018c:	e030      	b.n	80101f0 <vSocketSelect+0x90>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801018e:	69bb      	ldr	r3, [r7, #24]
 8010190:	68db      	ldr	r3, [r3, #12]
 8010192:	60bb      	str	r3, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010198:	687a      	ldr	r2, [r7, #4]
 801019a:	429a      	cmp	r2, r3
 801019c:	d124      	bne.n	80101e8 <vSocketSelect+0x88>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 801019e:	2300      	movs	r3, #0
 80101a0:	623b      	str	r3, [r7, #32]

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80101a8:	2b06      	cmp	r3, #6
 80101aa:	d107      	bne.n	80101bc <vSocketSelect+0x5c>
                    {
                        xSocketBits |= vSocketSelectTCP( pxSocket );
 80101ac:	68b8      	ldr	r0, [r7, #8]
 80101ae:	f7ff ff29 	bl	8010004 <vSocketSelectTCP>
 80101b2:	4602      	mov	r2, r0
 80101b4:	6a3b      	ldr	r3, [r7, #32]
 80101b6:	4313      	orrs	r3, r2
 80101b8:	623b      	str	r3, [r7, #32]
 80101ba:	e00d      	b.n	80101d8 <vSocketSelect+0x78>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101c0:	f003 0301 	and.w	r3, r3, #1
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d007      	beq.n	80101d8 <vSocketSelect+0x78>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d003      	beq.n	80101d8 <vSocketSelect+0x78>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 80101d0:	6a3b      	ldr	r3, [r7, #32]
 80101d2:	f043 0301 	orr.w	r3, r3, #1
 80101d6:	623b      	str	r3, [r7, #32]
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	6a3a      	ldr	r2, [r7, #32]
 80101dc:	649a      	str	r2, [r3, #72]	@ 0x48

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 80101de:	69fa      	ldr	r2, [r7, #28]
 80101e0:	6a3b      	ldr	r3, [r7, #32]
 80101e2:	4313      	orrs	r3, r2
 80101e4:	61fb      	str	r3, [r7, #28]
 80101e6:	e000      	b.n	80101ea <vSocketSelect+0x8a>
                    continue;
 80101e8:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 80101ea:	69bb      	ldr	r3, [r7, #24]
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	61bb      	str	r3, [r7, #24]
                 pxIterator != pxEnd;
 80101f0:	69ba      	ldr	r2, [r7, #24]
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d1ca      	bne.n	801018e <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 80101f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101fa:	3301      	adds	r3, #1
 80101fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80101fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	429a      	cmp	r2, r3
 8010204:	ddb7      	ble.n	8010176 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	2100      	movs	r1, #0
 801020c:	4618      	mov	r0, r3
 801020e:	f7f2 fc19 	bl	8002a44 <xEventGroupClearBits>
 8010212:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	43da      	mvns	r2, r3
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	4013      	ands	r3, r2
 801021c:	f003 030f 	and.w	r3, r3, #15
 8010220:	60fb      	str	r3, [r7, #12]
             * and cleared in FreeRTOS_select(). */
            xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d005      	beq.n	8010234 <vSocketSelect+0xd4>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	68f9      	ldr	r1, [r7, #12]
 801022e:	4618      	mov	r0, r3
 8010230:	f7f2 fc08 	bl	8002a44 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	69fb      	ldr	r3, [r7, #28]
 801023a:	f043 0310 	orr.w	r3, r3, #16
 801023e:	4619      	mov	r1, r3
 8010240:	4610      	mov	r0, r2
 8010242:	f7f2 fc2d 	bl	8002aa0 <xEventGroupSetBits>
    }
 8010246:	bf00      	nop
 8010248:	3728      	adds	r7, #40	@ 0x28
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
 801024e:	bf00      	nop
 8010250:	20001434 	.word	0x20001434
 8010254:	20001448 	.word	0x20001448

08010258 <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * const pxBuffer,
                            size_t uxLower,
                            size_t uxUpper )
{
 8010258:	b480      	push	{r7}
 801025a:	b087      	sub	sp, #28
 801025c:	af00      	add	r7, sp, #0
 801025e:	60f8      	str	r0, [r7, #12]
 8010260:	60b9      	str	r1, [r7, #8]
 8010262:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	691b      	ldr	r3, [r3, #16]
 8010268:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower - 1U;
 801026a:	693a      	ldr	r2, [r7, #16]
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	441a      	add	r2, r3
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	1ad3      	subs	r3, r2, r3
 8010274:	3b01      	subs	r3, #1
 8010276:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 8010278:	697a      	ldr	r2, [r7, #20]
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	429a      	cmp	r2, r3
 801027e:	d303      	bcc.n	8010288 <uxStreamBufferSpace+0x30>
    {
        uxCount -= uxLength;
 8010280:	697a      	ldr	r2, [r7, #20]
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	1ad3      	subs	r3, r2, r3
 8010286:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 8010288:	697b      	ldr	r3, [r7, #20]
}
 801028a:	4618      	mov	r0, r3
 801028c:	371c      	adds	r7, #28
 801028e:	46bd      	mov	sp, r7
 8010290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010294:	4770      	bx	lr

08010296 <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * const pxBuffer,
                               size_t uxLower,
                               size_t uxUpper )
{
 8010296:	b480      	push	{r7}
 8010298:	b087      	sub	sp, #28
 801029a:	af00      	add	r7, sp, #0
 801029c:	60f8      	str	r0, [r7, #12]
 801029e:	60b9      	str	r1, [r7, #8]
 80102a0:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	691b      	ldr	r3, [r3, #16]
 80102a6:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower;
 80102a8:	693a      	ldr	r2, [r7, #16]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	441a      	add	r2, r3
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	1ad3      	subs	r3, r2, r3
 80102b2:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 80102b4:	697a      	ldr	r2, [r7, #20]
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d303      	bcc.n	80102c4 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= uxLength;
 80102bc:	697a      	ldr	r2, [r7, #20]
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	1ad3      	subs	r3, r2, r3
 80102c2:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 80102c4:	697b      	ldr	r3, [r7, #20]
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	371c      	adds	r7, #28
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr

080102d2 <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * const pxBuffer )
{
 80102d2:	b580      	push	{r7, lr}
 80102d4:	b082      	sub	sp, #8
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxHead, pxBuffer->uxTail );
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	6899      	ldr	r1, [r3, #8]
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	461a      	mov	r2, r3
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f7ff ffb7 	bl	8010258 <uxStreamBufferSpace>
 80102ea:	4603      	mov	r3, r0
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * const pxBuffer )
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxFront, pxBuffer->uxTail );
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	68d9      	ldr	r1, [r3, #12]
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	461a      	mov	r2, r3
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f7ff ffa6 	bl	8010258 <uxStreamBufferSpace>
 801030c:	4603      	mov	r3, r0
}
 801030e:	4618      	mov	r0, r3
 8010310:	3708      	adds	r7, #8
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}

08010316 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * const pxBuffer )
{
 8010316:	b580      	push	{r7, lr}
 8010318:	b082      	sub	sp, #8
 801031a:	af00      	add	r7, sp, #0
 801031c:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxTail, pxBuffer->uxHead );
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6819      	ldr	r1, [r3, #0]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	689b      	ldr	r3, [r3, #8]
 8010326:	461a      	mov	r2, r3
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f7ff ffb4 	bl	8010296 <uxStreamBufferDistance>
 801032e:	4603      	mov	r3, r0
}
 8010330:	4618      	mov	r0, r3
 8010332:	3708      	adds	r7, #8
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * const pxBuffer )
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxMid, pxBuffer->uxHead );
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6859      	ldr	r1, [r3, #4]
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	689b      	ldr	r3, [r3, #8]
 8010348:	461a      	mov	r2, r3
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f7ff ffa3 	bl	8010296 <uxStreamBufferDistance>
 8010350:	4603      	mov	r3, r0
}
 8010352:	4618      	mov	r0, r3
 8010354:	3708      	adds	r7, #8
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <vStreamBufferClear>:
/**
 * @brief Clear the stream buffer.
 * @param[in] pxBuffer The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * const pxBuffer )
{
 801035a:	b480      	push	{r7}
 801035c:	b083      	sub	sp, #12
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2200      	movs	r2, #0
 8010366:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2200      	movs	r2, #0
 801036c:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2200      	movs	r2, #0
 8010372:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2200      	movs	r2, #0
 8010378:	605a      	str	r2, [r3, #4]
}
 801037a:	bf00      	nop
 801037c:	370c      	adds	r7, #12
 801037e:	46bd      	mov	sp, r7
 8010380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010384:	4770      	bx	lr

08010386 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer The circular stream buffer.
 * @param[in] uxCount The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * const pxBuffer,
                           const size_t uxCount )
{
 8010386:	b580      	push	{r7, lr}
 8010388:	b086      	sub	sp, #24
 801038a:	af00      	add	r7, sp, #0
 801038c:	6078      	str	r0, [r7, #4]
 801038e:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    const size_t uxLength = pxBuffer->LENGTH;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	691b      	ldr	r3, [r3, #16]
 8010394:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f7ff ffce 	bl	8010338 <uxStreamBufferMidSpace>
 801039c:	60b8      	str	r0, [r7, #8]
    size_t uxMid = pxBuffer->uxMid;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 80103a8:	693a      	ldr	r2, [r7, #16]
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d901      	bls.n	80103b4 <vStreamBufferMoveMid+0x2e>
    {
        uxMoveCount = uxSize;
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 80103b4:	697a      	ldr	r2, [r7, #20]
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	4413      	add	r3, r2
 80103ba:	617b      	str	r3, [r7, #20]

    if( uxMid >= uxLength )
 80103bc:	697a      	ldr	r2, [r7, #20]
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d303      	bcc.n	80103cc <vStreamBufferMoveMid+0x46>
    {
        uxMid -= uxLength;
 80103c4:	697a      	ldr	r2, [r7, #20]
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	1ad3      	subs	r3, r2, r3
 80103ca:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	697a      	ldr	r2, [r7, #20]
 80103d0:	605a      	str	r2, [r3, #4]
}
 80103d2:	bf00      	nop
 80103d4:	3718      	adds	r7, #24
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * const pxBuffer,
                                       size_t uxLeft,
                                       size_t uxRight )
{
 80103da:	b480      	push	{r7}
 80103dc:	b087      	sub	sp, #28
 80103de:	af00      	add	r7, sp, #0
 80103e0:	60f8      	str	r0, [r7, #12]
 80103e2:	60b9      	str	r1, [r7, #8]
 80103e4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80103e6:	2300      	movs	r3, #0
 80103e8:	617b      	str	r3, [r7, #20]
    const size_t uxTail = pxBuffer->uxTail;
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	613b      	str	r3, [r7, #16]

    if( ( uxLeft - uxTail ) <= ( uxRight - uxTail ) )
 80103f0:	68ba      	ldr	r2, [r7, #8]
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	1ad2      	subs	r2, r2, r3
 80103f6:	6879      	ldr	r1, [r7, #4]
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	1acb      	subs	r3, r1, r3
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d801      	bhi.n	8010404 <xStreamBufferLessThenEqual+0x2a>
    {
        xReturn = pdTRUE;
 8010400:	2301      	movs	r3, #1
 8010402:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8010404:	697b      	ldr	r3, [r7, #20]
}
 8010406:	4618      	mov	r0, r3
 8010408:	371c      	adds	r7, #28
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr

08010412 <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * const pxBuffer,
                             uint8_t ** const ppucData )
{
 8010412:	b580      	push	{r7, lr}
 8010414:	b084      	sub	sp, #16
 8010416:	af00      	add	r7, sp, #0
 8010418:	6078      	str	r0, [r7, #4]
 801041a:	6039      	str	r1, [r7, #0]
    const size_t uxNextTail = pxBuffer->uxTail;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	f7ff ff77 	bl	8010316 <uxStreamBufferGetSize>
 8010428:	60b8      	str	r0, [r7, #8]

    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
    /* coverity[misra_c_2012_rule_18_4_violation] */
    *ppucData = pxBuffer->ucArray + uxNextTail;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f103 0214 	add.w	r2, r3, #20
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	441a      	add	r2, r3
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_size_t( uxSize, pxBuffer->LENGTH - uxNextTail );
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	691a      	ldr	r2, [r3, #16]
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	1ad3      	subs	r3, r2, r3
 8010440:	4619      	mov	r1, r3
 8010442:	68b8      	ldr	r0, [r7, #8]
 8010444:	f7f9 fede 	bl	800a204 <FreeRTOS_min_size_t>
 8010448:	4603      	mov	r3, r0
}
 801044a:	4618      	mov	r0, r3
 801044c:	3710      	adds	r7, #16
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}

08010452 <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          const uint8_t * const pucData,
                          size_t uxByteCount )
{
 8010452:	b580      	push	{r7, lr}
 8010454:	b08a      	sub	sp, #40	@ 0x28
 8010456:	af00      	add	r7, sp, #0
 8010458:	60f8      	str	r0, [r7, #12]
 801045a:	60b9      	str	r1, [r7, #8]
 801045c:	607a      	str	r2, [r7, #4]
 801045e:	603b      	str	r3, [r7, #0]
    size_t uxCount;
    size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 8010460:	68f8      	ldr	r0, [r7, #12]
 8010462:	f7ff ff36 	bl	80102d2 <uxStreamBufferGetSpace>
 8010466:	6278      	str	r0, [r7, #36]	@ 0x24

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 8010468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	429a      	cmp	r2, r3
 801046e:	d904      	bls.n	801047a <uxStreamBufferAdd+0x28>
    {
        uxSpace -= uxOffset;
 8010470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	1ad3      	subs	r3, r2, r3
 8010476:	627b      	str	r3, [r7, #36]	@ 0x24
 8010478:	e001      	b.n	801047e <uxStreamBufferAdd+0x2c>
    }
    else
    {
        uxSpace = 0U;
 801047a:	2300      	movs	r3, #0
 801047c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_size_t( uxSpace, uxByteCount );
 801047e:	6839      	ldr	r1, [r7, #0]
 8010480:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010482:	f7f9 febf 	bl	800a204 <FreeRTOS_min_size_t>
 8010486:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8010488:	69fb      	ldr	r3, [r7, #28]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d05c      	beq.n	8010548 <uxStreamBufferAdd+0xf6>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	691b      	ldr	r3, [r3, #16]
 8010492:	61bb      	str	r3, [r7, #24]
        size_t uxNextHead = pxBuffer->uxHead;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	689b      	ldr	r3, [r3, #8]
 8010498:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d00b      	beq.n	80104b8 <uxStreamBufferAdd+0x66>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 80104a0:	6a3a      	ldr	r2, [r7, #32]
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	4413      	add	r3, r2
 80104a6:	623b      	str	r3, [r7, #32]

            if( uxNextHead >= uxLength )
 80104a8:	6a3a      	ldr	r2, [r7, #32]
 80104aa:	69bb      	ldr	r3, [r7, #24]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d303      	bcc.n	80104b8 <uxStreamBufferAdd+0x66>
            {
                uxNextHead -= uxLength;
 80104b0:	6a3a      	ldr	r2, [r7, #32]
 80104b2:	69bb      	ldr	r3, [r7, #24]
 80104b4:	1ad3      	subs	r3, r2, r3
 80104b6:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d021      	beq.n	8010502 <uxStreamBufferAdd+0xb0>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextHead, uxCount );
 80104be:	69ba      	ldr	r2, [r7, #24]
 80104c0:	6a3b      	ldr	r3, [r7, #32]
 80104c2:	1ad3      	subs	r3, r2, r3
 80104c4:	69f9      	ldr	r1, [r7, #28]
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7f9 fe9c 	bl	800a204 <FreeRTOS_min_size_t>
 80104cc:	6178      	str	r0, [r7, #20]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 80104ce:	6a3b      	ldr	r3, [r7, #32]
 80104d0:	3310      	adds	r3, #16
 80104d2:	68fa      	ldr	r2, [r7, #12]
 80104d4:	4413      	add	r3, r2
 80104d6:	3304      	adds	r3, #4
 80104d8:	697a      	ldr	r2, [r7, #20]
 80104da:	6879      	ldr	r1, [r7, #4]
 80104dc:	4618      	mov	r0, r3
 80104de:	f011 fc07 	bl	8021cf0 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 80104e2:	69fa      	ldr	r2, [r7, #28]
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d90b      	bls.n	8010502 <uxStreamBufferAdd+0xb0>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	f103 0014 	add.w	r0, r3, #20
 80104f0:	687a      	ldr	r2, [r7, #4]
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	18d1      	adds	r1, r2, r3
 80104f6:	69fa      	ldr	r2, [r7, #28]
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	1ad3      	subs	r3, r2, r3
 80104fc:	461a      	mov	r2, r3
 80104fe:	f011 fbf7 	bl	8021cf0 <memcpy>
            }
        }

        /* The below update to the stream buffer members must happen
         * atomically. */
        vTaskSuspendAll();
 8010502:	f7f3 fc79 	bl	8003df8 <vTaskSuspendAll>
        {
            if( uxOffset == 0U )
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d10e      	bne.n	801052a <uxStreamBufferAdd+0xd8>
            {
                /* ( uxOffset == 0 ) means: write at uxHead position */
                uxNextHead += uxCount;
 801050c:	6a3a      	ldr	r2, [r7, #32]
 801050e:	69fb      	ldr	r3, [r7, #28]
 8010510:	4413      	add	r3, r2
 8010512:	623b      	str	r3, [r7, #32]

                if( uxNextHead >= uxLength )
 8010514:	6a3a      	ldr	r2, [r7, #32]
 8010516:	69bb      	ldr	r3, [r7, #24]
 8010518:	429a      	cmp	r2, r3
 801051a:	d303      	bcc.n	8010524 <uxStreamBufferAdd+0xd2>
                {
                    uxNextHead -= uxLength;
 801051c:	6a3a      	ldr	r2, [r7, #32]
 801051e:	69bb      	ldr	r3, [r7, #24]
 8010520:	1ad3      	subs	r3, r2, r3
 8010522:	623b      	str	r3, [r7, #32]
                }

                pxBuffer->uxHead = uxNextHead;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	6a3a      	ldr	r2, [r7, #32]
 8010528:	609a      	str	r2, [r3, #8]
            }

            if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	68db      	ldr	r3, [r3, #12]
 801052e:	6a3a      	ldr	r2, [r7, #32]
 8010530:	4619      	mov	r1, r3
 8010532:	68f8      	ldr	r0, [r7, #12]
 8010534:	f7ff ff51 	bl	80103da <xStreamBufferLessThenEqual>
 8010538:	4603      	mov	r3, r0
 801053a:	2b00      	cmp	r3, #0
 801053c:	d002      	beq.n	8010544 <uxStreamBufferAdd+0xf2>
            {
                /* Advance the front pointer */
                pxBuffer->uxFront = uxNextHead;
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	6a3a      	ldr	r2, [r7, #32]
 8010542:	60da      	str	r2, [r3, #12]
            }
        }
        ( void ) xTaskResumeAll();
 8010544:	f7f3 fc66 	bl	8003e14 <xTaskResumeAll>
    }

    return uxCount;
 8010548:	69fb      	ldr	r3, [r7, #28]
}
 801054a:	4618      	mov	r0, r3
 801054c:	3728      	adds	r7, #40	@ 0x28
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}

08010552 <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          uint8_t * const pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 8010552:	b580      	push	{r7, lr}
 8010554:	b08a      	sub	sp, #40	@ 0x28
 8010556:	af00      	add	r7, sp, #0
 8010558:	60f8      	str	r0, [r7, #12]
 801055a:	60b9      	str	r1, [r7, #8]
 801055c:	607a      	str	r2, [r7, #4]
 801055e:	603b      	str	r3, [r7, #0]
    size_t uxCount;

    /* How much data is available? */
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 8010560:	68f8      	ldr	r0, [r7, #12]
 8010562:	f7ff fed8 	bl	8010316 <uxStreamBufferGetSize>
 8010566:	6278      	str	r0, [r7, #36]	@ 0x24

    if( uxSize > uxOffset )
 8010568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	429a      	cmp	r2, r3
 801056e:	d904      	bls.n	801057a <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 8010570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	1ad3      	subs	r3, r2, r3
 8010576:	627b      	str	r3, [r7, #36]	@ 0x24
 8010578:	e001      	b.n	801057e <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 801057a:	2300      	movs	r3, #0
 801057c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_size_t( uxSize, uxMaxCount );
 801057e:	6839      	ldr	r1, [r7, #0]
 8010580:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010582:	f7f9 fe3f 	bl	800a204 <FreeRTOS_min_size_t>
 8010586:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8010588:	69fb      	ldr	r3, [r7, #28]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d04e      	beq.n	801062c <uxStreamBufferGet+0xda>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	691b      	ldr	r3, [r3, #16]
 8010592:	61bb      	str	r3, [r7, #24]
        size_t uxNextTail = pxBuffer->uxTail;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d00b      	beq.n	80105b8 <uxStreamBufferGet+0x66>
        {
            uxNextTail += uxOffset;
 80105a0:	6a3a      	ldr	r2, [r7, #32]
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	4413      	add	r3, r2
 80105a6:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 80105a8:	6a3a      	ldr	r2, [r7, #32]
 80105aa:	69bb      	ldr	r3, [r7, #24]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d303      	bcc.n	80105b8 <uxStreamBufferGet+0x66>
            {
                uxNextTail -= uxLength;
 80105b0:	6a3a      	ldr	r2, [r7, #32]
 80105b2:	69bb      	ldr	r3, [r7, #24]
 80105b4:	1ad3      	subs	r3, r2, r3
 80105b6:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d021      	beq.n	8010602 <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextTail, uxCount );
 80105be:	69ba      	ldr	r2, [r7, #24]
 80105c0:	6a3b      	ldr	r3, [r7, #32]
 80105c2:	1ad3      	subs	r3, r2, r3
 80105c4:	69f9      	ldr	r1, [r7, #28]
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7f9 fe1c 	bl	800a204 <FreeRTOS_min_size_t>
 80105cc:	6178      	str	r0, [r7, #20]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 80105ce:	6a3b      	ldr	r3, [r7, #32]
 80105d0:	3310      	adds	r3, #16
 80105d2:	68fa      	ldr	r2, [r7, #12]
 80105d4:	4413      	add	r3, r2
 80105d6:	3304      	adds	r3, #4
 80105d8:	697a      	ldr	r2, [r7, #20]
 80105da:	4619      	mov	r1, r3
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f011 fb87 	bl	8021cf0 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 80105e2:	69fa      	ldr	r2, [r7, #28]
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d90b      	bls.n	8010602 <uxStreamBufferGet+0xb0>
            {
                /* ...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 80105ea:	687a      	ldr	r2, [r7, #4]
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	18d0      	adds	r0, r2, r3
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	f103 0114 	add.w	r1, r3, #20
 80105f6:	69fa      	ldr	r2, [r7, #28]
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	1ad3      	subs	r3, r2, r3
 80105fc:	461a      	mov	r2, r3
 80105fe:	f011 fb77 	bl	8021cf0 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0U ) )
 8010602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010604:	2b00      	cmp	r3, #0
 8010606:	d111      	bne.n	801062c <uxStreamBufferGet+0xda>
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d10e      	bne.n	801062c <uxStreamBufferGet+0xda>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 801060e:	6a3a      	ldr	r2, [r7, #32]
 8010610:	69fb      	ldr	r3, [r7, #28]
 8010612:	4413      	add	r3, r2
 8010614:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 8010616:	6a3a      	ldr	r2, [r7, #32]
 8010618:	69bb      	ldr	r3, [r7, #24]
 801061a:	429a      	cmp	r2, r3
 801061c:	d303      	bcc.n	8010626 <uxStreamBufferGet+0xd4>
            {
                uxNextTail -= uxLength;
 801061e:	6a3a      	ldr	r2, [r7, #32]
 8010620:	69bb      	ldr	r3, [r7, #24]
 8010622:	1ad3      	subs	r3, r2, r3
 8010624:	623b      	str	r3, [r7, #32]
            }

            pxBuffer->uxTail = uxNextTail;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	6a3a      	ldr	r2, [r7, #32]
 801062a:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 801062c:	69fb      	ldr	r3, [r7, #28]
}
 801062e:	4618      	mov	r0, r3
 8010630:	3728      	adds	r7, #40	@ 0x28
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}
	...

08010638 <vSocketCloseNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
        if( ( xSocketToClose != NULL ) && ( xSocketToClose != pxSocket ) )
 8010640:	4b0a      	ldr	r3, [pc, #40]	@ (801066c <vSocketCloseNextTime+0x34>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d009      	beq.n	801065c <vSocketCloseNextTime+0x24>
 8010648:	4b08      	ldr	r3, [pc, #32]	@ (801066c <vSocketCloseNextTime+0x34>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	687a      	ldr	r2, [r7, #4]
 801064e:	429a      	cmp	r2, r3
 8010650:	d004      	beq.n	801065c <vSocketCloseNextTime+0x24>
        {
            ( void ) vSocketClose( xSocketToClose );
 8010652:	4b06      	ldr	r3, [pc, #24]	@ (801066c <vSocketCloseNextTime+0x34>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	4618      	mov	r0, r3
 8010658:	f7fd fd98 	bl	800e18c <vSocketClose>
        }

        xSocketToClose = pxSocket;
 801065c:	4a03      	ldr	r2, [pc, #12]	@ (801066c <vSocketCloseNextTime+0x34>)
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6013      	str	r3, [r2, #0]
    }
 8010662:	bf00      	nop
 8010664:	3708      	adds	r7, #8
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}
 801066a:	bf00      	nop
 801066c:	20001458 	.word	0x20001458

08010670 <vSocketListenNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketListenNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 8010670:	b580      	push	{r7, lr}
 8010672:	b082      	sub	sp, #8
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
        if( ( xSocketToListen != NULL ) && ( xSocketToListen != pxSocket ) )
 8010678:	4b0c      	ldr	r3, [pc, #48]	@ (80106ac <vSocketListenNextTime+0x3c>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d00e      	beq.n	801069e <vSocketListenNextTime+0x2e>
 8010680:	4b0a      	ldr	r3, [pc, #40]	@ (80106ac <vSocketListenNextTime+0x3c>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	687a      	ldr	r2, [r7, #4]
 8010686:	429a      	cmp	r2, r3
 8010688:	d009      	beq.n	801069e <vSocketListenNextTime+0x2e>
        {
            ( void ) FreeRTOS_listen( ( Socket_t ) xSocketToListen, ( BaseType_t ) ( xSocketToListen->u.xTCP.usBacklog ) );
 801068a:	4b08      	ldr	r3, [pc, #32]	@ (80106ac <vSocketListenNextTime+0x3c>)
 801068c:	681a      	ldr	r2, [r3, #0]
 801068e:	4b07      	ldr	r3, [pc, #28]	@ (80106ac <vSocketListenNextTime+0x3c>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8010696:	4619      	mov	r1, r3
 8010698:	4610      	mov	r0, r2
 801069a:	f7fe fff3 	bl	800f684 <FreeRTOS_listen>
        }

        xSocketToListen = pxSocket;
 801069e:	4a03      	ldr	r2, [pc, #12]	@ (80106ac <vSocketListenNextTime+0x3c>)
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6013      	str	r3, [r2, #0]
    }
 80106a4:	bf00      	nop
 80106a6:	3708      	adds	r7, #8
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	2000145c 	.word	0x2000145c

080106b0 <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 80106b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106b4:	b086      	sub	sp, #24
 80106b6:	af02      	add	r7, sp, #8
 80106b8:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 80106ba:	2300      	movs	r3, #0
 80106bc:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 80106be:	2300      	movs	r3, #0
 80106c0:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80106c8:	2b04      	cmp	r3, #4
 80106ca:	d907      	bls.n	80106dc <xTCPSocketCheck+0x2c>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d002      	beq.n	80106dc <xTCPSocketCheck+0x2c>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f003 f834 	bl	8013744 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d05f      	beq.n	80107a6 <xTCPSocketCheck+0xf6>
            {
                /* The first task of this regular socket check is to send-out delayed
                 * ACK's. */
                if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80106ec:	f003 0320 	and.w	r3, r3, #32
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d148      	bne.n	8010788 <xTCPSocketCheck+0xd8>
                {
                    /* Earlier data was received but not yet acknowledged.  This
                     * function is called when the TCP timer for the socket expires, the
                     * ACK may be sent now. */
                    if( pxSocket->u.xTCP.eTCPState != eCLOSED )
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d03b      	beq.n	8010778 <xTCPSocketCheck+0xc8>
                    {
                        if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 8010700:	4b37      	ldr	r3, [pc, #220]	@ (80107e0 <xTCPSocketCheck+0x130>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	2b01      	cmp	r3, #1
 8010706:	dd25      	ble.n	8010754 <xTCPSocketCheck+0xa4>
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801070c:	2b17      	cmp	r3, #23
 801070e:	d021      	beq.n	8010754 <xTCPSocketCheck+0xa4>
                        {
                            FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u)\n",
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010714:	461e      	mov	r6, r3
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801071c:	4698      	mov	r8, r3
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 801072a:	1ad5      	subs	r5, r2, r3
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8010738:	1ad4      	subs	r4, r2, r3
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f7f9 f81e 	bl	800977c <uxIPHeaderSizeSocket>
 8010740:	4603      	mov	r3, r0
 8010742:	3314      	adds	r3, #20
 8010744:	9301      	str	r3, [sp, #4]
 8010746:	9400      	str	r4, [sp, #0]
 8010748:	462b      	mov	r3, r5
 801074a:	4642      	mov	r2, r8
 801074c:	4631      	mov	r1, r6
 801074e:	4825      	ldr	r0, [pc, #148]	@ (80107e4 <xTCPSocketCheck+0x134>)
 8010750:	f011 f8b2 	bl	80218b8 <lUDPLoggingPrintf>
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) );
                        }

                        prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ( uint32_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ), ipconfigZERO_COPY_TX_DRIVER );
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f7f9 f80e 	bl	800977c <uxIPHeaderSizeSocket>
 8010760:	4603      	mov	r3, r0
 8010762:	f103 0214 	add.w	r2, r3, #20
 8010766:	2301      	movs	r3, #1
 8010768:	4621      	mov	r1, r4
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f002 fac8 	bl	8012d00 <prvTCPReturnPacket>

                        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                        {
                            /* The ownership has been passed to the SEND routine,
                             * clear the pointer to it. */
                            pxSocket->u.xTCP.pxAckMessage = NULL;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2200      	movs	r2, #0
 8010774:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                        #endif /* ipconfigZERO_COPY_TX_DRIVER */
                    }

                    if( prvTCPNextTimeout( pxSocket ) > 1U )
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f000 faa1 	bl	8010cc0 <prvTCPNextTimeout>
 801077e:	4603      	mov	r3, r0
 8010780:	2b01      	cmp	r3, #1
 8010782:	d901      	bls.n	8010788 <xTCPSocketCheck+0xd8>
                    {
                        /* Tell the code below that this function is ready. */
                        xReady = pdTRUE;
 8010784:	2301      	movs	r3, #1
 8010786:	60bb      	str	r3, [r7, #8]
                    /* The user wants to perform an active shutdown(), skip sending
                     * the delayed ACK.  The function prvTCPSendPacket() will send the
                     * FIN along with the ACK's. */
                }

                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801078e:	2b00      	cmp	r3, #0
 8010790:	d009      	beq.n	80107a6 <xTCPSocketCheck+0xf6>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010798:	4618      	mov	r0, r3
 801079a:	f006 f9e5 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
                    pxSocket->u.xTCP.pxAckMessage = NULL;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2200      	movs	r2, #0
 80107a2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }
            }
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d113      	bne.n	80107d4 <xTCPSocketCheck+0x124>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80107b2:	2b04      	cmp	r3, #4
 80107b4:	d804      	bhi.n	80107c0 <xTCPSocketCheck+0x110>
                ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) )
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 80107bc:	2b02      	cmp	r3, #2
 80107be:	d102      	bne.n	80107c6 <xTCPSocketCheck+0x116>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f002 f9ff 	bl	8012bc4 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f000 fa7a 	bl	8010cc0 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                /* In all (non-connected) states in which keep-alive messages can not be sent
                 * the anti-hang protocol will close sockets that are 'hanging'. */
                xResult = prvTCPStatusAgeCheck( pxSocket );
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f001 f973 	bl	8011ab8 <prvTCPStatusAgeCheck>
 80107d2:	60f8      	str	r0, [r7, #12]
            }
            #endif
        }

        return xResult;
 80107d4:	68fb      	ldr	r3, [r7, #12]
    }
 80107d6:	4618      	mov	r0, r3
 80107d8:	3710      	adds	r7, #16
 80107da:	46bd      	mov	sp, r7
 80107dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107e0:	20001484 	.word	0x20001484
 80107e4:	08025864 	.word	0x08025864

080107e8 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    void prvTCPTouchSocket( struct xSOCKET * pxSocket )
    {
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
        {
            pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 80107f0:	f7f3 fc14 	bl	800401c <xTaskGetTickCount>
 80107f4:	4602      	mov	r2, r0
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
        {
            pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 80107fc:	687a      	ldr	r2, [r7, #4]
 80107fe:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010802:	f36f 0382 	bfc	r3, #2, #1
 8010806:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010810:	f36f 0341 	bfc	r3, #1, #1
 8010814:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.ucKeepRepCount = 0U;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2200      	movs	r2, #0
 801081c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8010820:	f7f3 fbfc 	bl	800401c <xTaskGetTickCount>
 8010824:	4602      	mov	r2, r0
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        }
        #endif

        ( void ) pxSocket;
    }
 801082c:	bf00      	nop
 801082e:	3708      	adds	r7, #8
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <vTCPRemoveTCPChild>:
    /*-----------------------------------------------------------*/

    static BaseType_t vTCPRemoveTCPChild( const FreeRTOS_Socket_t * pxChildSocket )
    {
 8010834:	b480      	push	{r7}
 8010836:	b087      	sub	sp, #28
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 801083c:	2300      	movs	r3, #0
 801083e:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010840:	4b15      	ldr	r3, [pc, #84]	@ (8010898 <vTCPRemoveTCPChild+0x64>)
 8010842:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8010844:	4b15      	ldr	r3, [pc, #84]	@ (801089c <vTCPRemoveTCPChild+0x68>)
 8010846:	68db      	ldr	r3, [r3, #12]
 8010848:	613b      	str	r3, [r7, #16]

        while( pxIterator != pxEnd )
 801084a:	e01a      	b.n	8010882 <vTCPRemoveTCPChild+0x4e>
        {
            FreeRTOS_Socket_t * pxSocket;
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801084c:	693b      	ldr	r3, [r7, #16]
 801084e:	68db      	ldr	r3, [r3, #12]
 8010850:	60bb      	str	r3, [r7, #8]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	685b      	ldr	r3, [r3, #4]
 8010856:	613b      	str	r3, [r7, #16]

            if( ( pxSocket != pxChildSocket ) && ( pxSocket->usLocalPort == pxChildSocket->usLocalPort ) )
 8010858:	68ba      	ldr	r2, [r7, #8]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	429a      	cmp	r2, r3
 801085e:	d010      	beq.n	8010882 <vTCPRemoveTCPChild+0x4e>
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010868:	429a      	cmp	r2, r3
 801086a:	d10a      	bne.n	8010882 <vTCPRemoveTCPChild+0x4e>
            {
                if( pxSocket->u.xTCP.pxPeerSocket == pxChildSocket ) /**< for server socket: child, for child socket: parent */
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010870:	687a      	ldr	r2, [r7, #4]
 8010872:	429a      	cmp	r2, r3
 8010874:	d105      	bne.n	8010882 <vTCPRemoveTCPChild+0x4e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	2200      	movs	r2, #0
 801087a:	67da      	str	r2, [r3, #124]	@ 0x7c
                    xReturn = pdTRUE;
 801087c:	2301      	movs	r3, #1
 801087e:	617b      	str	r3, [r7, #20]
                    break;
 8010880:	e003      	b.n	801088a <vTCPRemoveTCPChild+0x56>
        while( pxIterator != pxEnd )
 8010882:	693a      	ldr	r2, [r7, #16]
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	429a      	cmp	r2, r3
 8010888:	d1e0      	bne.n	801084c <vTCPRemoveTCPChild+0x18>
                }
            }
        }

        return xReturn;
 801088a:	697b      	ldr	r3, [r7, #20]
    }
 801088c:	4618      	mov	r0, r3
 801088e:	371c      	adds	r7, #28
 8010890:	46bd      	mov	sp, r7
 8010892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010896:	4770      	bx	lr
 8010898:	20001448 	.word	0x20001448
 801089c:	20001440 	.word	0x20001440

080108a0 <vTCPStateChange>:
 * @param[in] pxSocket The socket whose state we are trying to change.
 * @param[in] eTCPState The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 80108a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108a2:	b097      	sub	sp, #92	@ 0x5c
 80108a4:	af02      	add	r7, sp, #8
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	460b      	mov	r3, r1
 80108aa:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = pxSocket;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
        BaseType_t bBefore = tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.eTCPState ); /* Was it connected ? */
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80108b6:	2b04      	cmp	r3, #4
 80108b8:	d906      	bls.n	80108c8 <vTCPStateChange+0x28>
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80108c0:	2b08      	cmp	r3, #8
 80108c2:	d001      	beq.n	80108c8 <vTCPStateChange+0x28>
 80108c4:	2301      	movs	r3, #1
 80108c6:	e000      	b.n	80108ca <vTCPStateChange+0x2a>
 80108c8:	2300      	movs	r3, #0
 80108ca:	64bb      	str	r3, [r7, #72]	@ 0x48
        BaseType_t bAfter = tcpNOW_CONNECTED( ( BaseType_t ) eTCPState );                   /* Is it connected now ? */
 80108cc:	78fb      	ldrb	r3, [r7, #3]
 80108ce:	2b04      	cmp	r3, #4
 80108d0:	d904      	bls.n	80108dc <vTCPStateChange+0x3c>
 80108d2:	78fb      	ldrb	r3, [r7, #3]
 80108d4:	2b08      	cmp	r3, #8
 80108d6:	d001      	beq.n	80108dc <vTCPStateChange+0x3c>
 80108d8:	2301      	movs	r3, #1
 80108da:	e000      	b.n	80108de <vTCPStateChange+0x3e>
 80108dc:	2300      	movs	r3, #0
 80108de:	63bb      	str	r3, [r7, #56]	@ 0x38

        eIPTCPState_t xPreviousState = pxSocket->u.xTCP.eTCPState;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80108e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
 80108ea:	2300      	movs	r3, #0
 80108ec:	647b      	str	r3, [r7, #68]	@ 0x44
        #endif

        if( ( ( xPreviousState == eCONNECT_SYN ) ||
 80108ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80108f2:	2b02      	cmp	r3, #2
 80108f4:	d007      	beq.n	8010906 <vTCPStateChange+0x66>
 80108f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80108fa:	2b03      	cmp	r3, #3
 80108fc:	d003      	beq.n	8010906 <vTCPStateChange+0x66>
              ( xPreviousState == eSYN_FIRST ) ||
 80108fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010902:	2b04      	cmp	r3, #4
 8010904:	d114      	bne.n	8010930 <vTCPStateChange+0x90>
              ( xPreviousState == eSYN_RECEIVED ) ) &&
 8010906:	78fb      	ldrb	r3, [r7, #3]
 8010908:	2b08      	cmp	r3, #8
 801090a:	d111      	bne.n	8010930 <vTCPStateChange+0x90>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            /* A socket was in the connecting phase but something
             * went wrong and it should be closed. */
            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                FreeRTOS_debug_printf( ( "Move from %s to %s\n",
 801090c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010910:	4618      	mov	r0, r3
 8010912:	f001 fed7 	bl	80126c4 <FreeRTOS_GetTCPStateName>
 8010916:	4604      	mov	r4, r0
 8010918:	78fb      	ldrb	r3, [r7, #3]
 801091a:	4618      	mov	r0, r3
 801091c:	f001 fed2 	bl	80126c4 <FreeRTOS_GetTCPStateName>
 8010920:	4603      	mov	r3, r0
 8010922:	461a      	mov	r2, r3
 8010924:	4621      	mov	r1, r4
 8010926:	4875      	ldr	r0, [pc, #468]	@ (8010afc <vTCPStateChange+0x25c>)
 8010928:	f010 ffc6 	bl	80218b8 <lUDPLoggingPrintf>
            #endif

            /* Set the flag to show that it was connected before and that the
             * status has changed now. This will cause the control flow to go
             * in the below if condition.*/
            bBefore = pdTRUE;
 801092c:	2301      	movs	r3, #1
 801092e:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 8010930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010934:	429a      	cmp	r2, r3
 8010936:	f000 809f 	beq.w	8010a78 <vTCPStateChange+0x1d8>
        {
            /* if bPassQueued is true, this socket is an orphan until it gets connected. */
            if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010940:	f003 0304 	and.w	r3, r3, #4
 8010944:	b2db      	uxtb	r3, r3
 8010946:	2b00      	cmp	r3, #0
 8010948:	d012      	beq.n	8010970 <vTCPStateChange+0xd0>
            {
                /* Find it's parent if the reuse bit is not set. */
                if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010950:	f003 0308 	and.w	r3, r3, #8
 8010954:	b2db      	uxtb	r3, r3
 8010956:	2b00      	cmp	r3, #0
 8010958:	d10a      	bne.n	8010970 <vTCPStateChange+0xd0>
                {
                    xParent = pxSocket->u.xTCP.pxPeerSocket;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801095e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    configASSERT( xParent != NULL );
 8010960:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010962:	2b00      	cmp	r3, #0
 8010964:	d104      	bne.n	8010970 <vTCPStateChange+0xd0>
 8010966:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 801096a:	4865      	ldr	r0, [pc, #404]	@ (8010b00 <vTCPStateChange+0x260>)
 801096c:	f7f0 fe7e 	bl	800166c <vAssertCalled>
                }
            }

            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 8010970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010972:	2b00      	cmp	r3, #0
 8010974:	d057      	beq.n	8010a26 <vTCPStateChange+0x186>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801097c:	f003 0304 	and.w	r3, r3, #4
 8010980:	b2db      	uxtb	r3, r3
 8010982:	2b00      	cmp	r3, #0
 8010984:	d03c      	beq.n	8010a00 <vTCPStateChange+0x160>
                {
                    if( xParent != NULL )
 8010986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010988:	2b00      	cmp	r3, #0
 801098a:	d027      	beq.n	80109dc <vTCPStateChange+0x13c>
                        /* The child socket has got connected.  See if the parent
                         * ( the listening socket ) should be signalled, or if a
                         * call-back must be made, in which case 'xConnected' will
                         * be set to the parent socket. */

                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 801098c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801098e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010990:	2b00      	cmp	r3, #0
 8010992:	d102      	bne.n	801099a <vTCPStateChange+0xfa>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 8010994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010996:	687a      	ldr	r2, [r7, #4]
 8010998:	67da      	str	r2, [r3, #124]	@ 0x7c
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 801099a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	f043 0204 	orr.w	r2, r3, #4
 80109a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109a4:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            /* Library support FreeRTOS_select().  Receiving a new
                             * connection is being translated as a READ event. */
                            if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 80109a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109aa:	f003 0301 	and.w	r3, r3, #1
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d005      	beq.n	80109be <vTCPStateChange+0x11e>
                            {
                                xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 80109b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80109ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109bc:	601a      	str	r2, [r3, #0]
                        }
                        #endif

                        #if ( ipconfigUSE_CALLBACKS == 1 )
                        {
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 80109be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109c0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d009      	beq.n	80109dc <vTCPStateChange+0x13c>
                                ( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 80109c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109ca:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80109ce:	f003 0308 	and.w	r3, r3, #8
 80109d2:	b2db      	uxtb	r3, r3
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d101      	bne.n	80109dc <vTCPStateChange+0x13c>
                            {
                                /* The listening socket does not become connected itself, in stead
                                 * a child socket is created.
                                 * Postpone a call the OnConnect event until the end of this function. */
                                xConnected = xParent;
 80109d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109da:	647b      	str	r3, [r7, #68]	@ 0x44
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2200      	movs	r2, #0
 80109e0:	67da      	str	r2, [r3, #124]	@ 0x7c
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 80109e2:	687a      	ldr	r2, [r7, #4]
 80109e4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80109e8:	f36f 0382 	bfc	r3, #2, #1
 80109ec:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 80109f0:	687a      	ldr	r2, [r7, #4]
 80109f2:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80109f6:	f043 0302 	orr.w	r3, r3, #2
 80109fa:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 80109fe:	e024      	b.n	8010a4a <vTCPStateChange+0x1aa>
                else
                {
                    /* An active connect() has succeeded. In this case there is no
                     * ( listening ) parent socket. Signal the now connected socket. */

                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	f043 0208 	orr.w	r2, r3, #8
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a10:	f003 0302 	and.w	r3, r3, #2
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d018      	beq.n	8010a4a <vTCPStateChange+0x1aa>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	601a      	str	r2, [r3, #0]
 8010a24:	e011      	b.n	8010a4a <vTCPStateChange+0x1aa>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting the event bits. */
                xParent->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 8010a26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	f043 0220 	orr.w	r2, r3, #32
 8010a2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a30:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( xParent->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8010a32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a36:	f003 0304 	and.w	r3, r3, #4
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d005      	beq.n	8010a4a <vTCPStateChange+0x1aa>
                    {
                        xParent->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 8010a3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8010a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a48:	601a      	str	r2, [r3, #0]
                #endif
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d004      	beq.n	8010a5e <vTCPStateChange+0x1be>
 8010a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d101      	bne.n	8010a5e <vTCPStateChange+0x1be>
                {
                    /* The 'connected' state has changed, call the user handler. */
                    xConnected = pxSocket;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == 0 )
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010a64:	4618      	mov	r0, r3
 8010a66:	f000 ffff 	bl	8011a68 <prvTCPSocketIsActive>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d103      	bne.n	8010a78 <vTCPStateChange+0x1d8>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2200      	movs	r2, #0
 8010a74:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.eTCPState = eTCPState;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	78fa      	ldrb	r2, [r7, #3]
 8010a7c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

        if( ( eTCPState == eCLOSED ) ||
 8010a80:	78fb      	ldrb	r3, [r7, #3]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d003      	beq.n	8010a8e <vTCPStateChange+0x1ee>
 8010a86:	78fb      	ldrb	r3, [r7, #3]
 8010a88:	2b08      	cmp	r3, #8
 8010a8a:	f040 8084 	bne.w	8010b96 <vTCPStateChange+0x2f6>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            BaseType_t xMustClear = pdFALSE;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	643b      	str	r3, [r7, #64]	@ 0x40
            BaseType_t xHasCleared = pdFALSE;
 8010a92:	2300      	movs	r3, #0
 8010a94:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( ( xParent == pxSocket ) && ( pxSocket->u.xTCP.pxPeerSocket != NULL ) )
 8010a96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	d106      	bne.n	8010aac <vTCPStateChange+0x20c>
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d002      	beq.n	8010aac <vTCPStateChange+0x20c>
            {
                xParent = pxSocket->u.xTCP.pxPeerSocket;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8010aac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010aae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d006      	beq.n	8010ac2 <vTCPStateChange+0x222>
                ( xParent->u.xTCP.pxPeerSocket == pxSocket ) )
 8010ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ab6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8010ab8:	687a      	ldr	r2, [r7, #4]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d101      	bne.n	8010ac2 <vTCPStateChange+0x222>
            {
                xMustClear = pdTRUE;
 8010abe:	2301      	movs	r3, #1
 8010ac0:	643b      	str	r3, [r7, #64]	@ 0x40
                ( void ) xMustClear;
            }

            /* Socket goes to status eCLOSED because of a RST.
             * When nobody owns the socket yet, delete it. */
            FreeRTOS_printf( ( "vTCPStateChange: Closing (Queued %d, Accept %d Reuse %d)\n",
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010ac8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010acc:	b2db      	uxtb	r3, r3
 8010ace:	4619      	mov	r1, r3
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010ad6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8010ada:	b2db      	uxtb	r3, r3
 8010adc:	461a      	mov	r2, r3
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010ae4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010ae8:	b2db      	uxtb	r3, r3
 8010aea:	4806      	ldr	r0, [pc, #24]	@ (8010b04 <vTCPStateChange+0x264>)
 8010aec:	f010 fee4 	bl	80218b8 <lUDPLoggingPrintf>
                               pxSocket->u.xTCP.bits.bPassQueued,
                               pxSocket->u.xTCP.bits.bPassAccept,
                               pxSocket->u.xTCP.bits.bReuseSocket ) );
            FreeRTOS_printf( ( "vTCPStateChange: me %p parent %p peer %p clear %d\n",
 8010af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d008      	beq.n	8010b08 <vTCPStateChange+0x268>
 8010af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010af8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010afa:	e006      	b.n	8010b0a <vTCPStateChange+0x26a>
 8010afc:	08025890 	.word	0x08025890
 8010b00:	080258a4 	.word	0x080258a4
 8010b04:	080258d4 	.word	0x080258d4
 8010b08:	2300      	movs	r3, #0
 8010b0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010b0c:	9200      	str	r2, [sp, #0]
 8010b0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010b10:	6879      	ldr	r1, [r7, #4]
 8010b12:	4865      	ldr	r0, [pc, #404]	@ (8010ca8 <vTCPStateChange+0x408>)
 8010b14:	f010 fed0 	bl	80218b8 <lUDPLoggingPrintf>
                               ( void * ) pxSocket,
                               ( void * ) xParent,
                               xParent ? ( void * ) xParent->u.xTCP.pxPeerSocket : NULL,
                               ( int ) xMustClear ) );

            vTaskSuspendAll();
 8010b18:	f7f3 f96e 	bl	8003df8 <vTaskSuspendAll>
            {
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010b22:	f003 0304 	and.w	r3, r3, #4
 8010b26:	b2db      	uxtb	r3, r3
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d107      	bne.n	8010b3c <vTCPStateChange+0x29c>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010b32:	f003 0302 	and.w	r3, r3, #2
 8010b36:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d026      	beq.n	8010b8a <vTCPStateChange+0x2ea>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010b42:	f003 0308 	and.w	r3, r3, #8
 8010b46:	b2db      	uxtb	r3, r3
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d11e      	bne.n	8010b8a <vTCPStateChange+0x2ea>
                    {
                        xHasCleared = vTCPRemoveTCPChild( pxSocket );
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f7ff fe71 	bl	8010834 <vTCPRemoveTCPChild>
 8010b52:	63f8      	str	r0, [r7, #60]	@ 0x3c
                        ( void ) xHasCleared;

                        pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8010b54:	687a      	ldr	r2, [r7, #4]
 8010b56:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010b5a:	f36f 0382 	bfc	r3, #2, #1
 8010b5e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        pxSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 8010b62:	687a      	ldr	r2, [r7, #4]
 8010b64:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010b68:	f36f 0341 	bfc	r3, #1, #1
 8010b6c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 8010b70:	f7f9 f978 	bl	8009e64 <xIsCallingFromIPTask>
 8010b74:	4603      	mov	r3, r0
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d104      	bne.n	8010b84 <vTCPStateChange+0x2e4>
 8010b7a:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8010b7e:	484b      	ldr	r0, [pc, #300]	@ (8010cac <vTCPStateChange+0x40c>)
 8010b80:	f7f0 fd74 	bl	800166c <vAssertCalled>
                        vSocketCloseNextTime( pxSocket );
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f7ff fd57 	bl	8010638 <vSocketCloseNextTime>
                    }
                }
            }
            ( void ) xTaskResumeAll();
 8010b8a:	f7f3 f943 	bl	8003e14 <xTaskResumeAll>
            FreeRTOS_printf( ( "vTCPStateChange: xHasCleared = %d\n",
 8010b8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010b90:	4847      	ldr	r0, [pc, #284]	@ (8010cb0 <vTCPStateChange+0x410>)
 8010b92:	f010 fe91 	bl	80218b8 <lUDPLoggingPrintf>
                               ( int ) xHasCleared ) );
        }

        if( ( eTCPState == eCLOSE_WAIT ) && ( pxSocket->u.xTCP.bits.bReuseSocket == pdTRUE_UNSIGNED ) )
 8010b96:	78fb      	ldrb	r3, [r7, #3]
 8010b98:	2b08      	cmp	r3, #8
 8010b9a:	d11b      	bne.n	8010bd4 <vTCPStateChange+0x334>
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010ba2:	f003 0308 	and.w	r3, r3, #8
 8010ba6:	b2db      	uxtb	r3, r3
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d013      	beq.n	8010bd4 <vTCPStateChange+0x334>
        {
            switch( xPreviousState )
 8010bac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010bb0:	3b03      	subs	r3, #3
 8010bb2:	2b01      	cmp	r3, #1
 8010bb4:	d80d      	bhi.n	8010bd2 <vTCPStateChange+0x332>
            {
                case eSYN_FIRST:    /* 3 (server) Just created, must ACK the SYN request */
                case eSYN_RECEIVED: /* 4 (server) waiting for a confirming connection request */
                    FreeRTOS_debug_printf( ( "Restoring a reuse socket port %u\n", pxSocket->usLocalPort ) );
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010bba:	4619      	mov	r1, r3
 8010bbc:	483d      	ldr	r0, [pc, #244]	@ (8010cb4 <vTCPStateChange+0x414>)
 8010bbe:	f010 fe7b 	bl	80218b8 <lUDPLoggingPrintf>

                    /* Go back into listening mode. Set the TCP status to 'eCLOSED',
                     * otherwise FreeRTOS_listen() will refuse the action. */
                    pxSocket->u.xTCP.eTCPState = eCLOSED;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

                    /* vSocketListenNextTime() makes sure that FreeRTOS_listen() will be called
                     * before the IP-task handles any new message. */
                    vSocketListenNextTime( pxSocket );
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f7ff fd50 	bl	8010670 <vSocketListenNextTime>
                    break;
 8010bd0:	e000      	b.n	8010bd4 <vTCPStateChange+0x334>

                default:
                    /* Nothing to do. */
                    break;
 8010bd2:	bf00      	nop
            }
        }

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f7ff fe07 	bl	80107e8 <prvTCPTouchSocket>

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8010bda:	4b37      	ldr	r3, [pc, #220]	@ (8010cb8 <vTCPStateChange+0x418>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	db4f      	blt.n	8010c82 <vTCPStateChange+0x3e2>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010be6:	2b17      	cmp	r3, #23
 8010be8:	d04b      	beq.n	8010c82 <vTCPStateChange+0x3e2>
            {
                char pcBuffer[ 40 ];

                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	7a1b      	ldrb	r3, [r3, #8]
 8010bee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d002      	beq.n	8010bfe <vTCPStateChange+0x35e>
 8010bf8:	2b01      	cmp	r3, #1
 8010bfa:	d01d      	beq.n	8010c38 <vTCPStateChange+0x398>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:   /* LCOV_EXCL_LINE */
                        /* MISRA 16.4 Compliance */
                        break; /* LCOV_EXCL_LINE */
 8010bfc:	e026      	b.n	8010c4c <vTCPStateChange+0x3ac>
                               uint32_t ulIPAddress = FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c02:	061a      	lsls	r2, r3, #24
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c08:	021b      	lsls	r3, r3, #8
 8010c0a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010c0e:	431a      	orrs	r2, r3
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c14:	0a1b      	lsrs	r3, r3, #8
 8010c16:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010c1a:	431a      	orrs	r2, r3
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c20:	0e1b      	lsrs	r3, r3, #24
 8010c22:	4313      	orrs	r3, r2
 8010c24:	633b      	str	r3, [r7, #48]	@ 0x30
                               FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 8010c26:	f107 0208 	add.w	r2, r7, #8
 8010c2a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8010c2e:	2328      	movs	r3, #40	@ 0x28
 8010c30:	2002      	movs	r0, #2
 8010c32:	f7fe f827 	bl	800ec84 <FreeRTOS_inet_ntop>
                           break;
 8010c36:	e009      	b.n	8010c4c <vTCPStateChange+0x3ac>
                                                pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                            FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 8010c3e:	f107 0208 	add.w	r2, r7, #8
 8010c42:	2328      	movs	r3, #40	@ 0x28
 8010c44:	200a      	movs	r0, #10
 8010c46:	f7fe f81d 	bl	800ec84 <FreeRTOS_inet_ntop>
                            break;
 8010c4a:	bf00      	nop
                }

                FreeRTOS_debug_printf( ( "Socket %u -> [%s]:%u State %s->%s\n",
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010c50:	461d      	mov	r5, r3
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010c58:	461e      	mov	r6, r3
 8010c5a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f001 fd30 	bl	80126c4 <FreeRTOS_GetTCPStateName>
 8010c64:	4604      	mov	r4, r0
 8010c66:	78fb      	ldrb	r3, [r7, #3]
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f001 fd2b 	bl	80126c4 <FreeRTOS_GetTCPStateName>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	f107 0208 	add.w	r2, r7, #8
 8010c74:	9301      	str	r3, [sp, #4]
 8010c76:	9400      	str	r4, [sp, #0]
 8010c78:	4633      	mov	r3, r6
 8010c7a:	4629      	mov	r1, r5
 8010c7c:	480f      	ldr	r0, [pc, #60]	@ (8010cbc <vTCPStateChange+0x41c>)
 8010c7e:	f010 fe1b 	bl	80218b8 <lUDPLoggingPrintf>
        }
        #endif /* ipconfigHAS_DEBUG_PRINTF */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( xConnected != NULL )
 8010c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d005      	beq.n	8010c94 <vTCPStateChange+0x3f4>
            {
                /* The 'connected' state has changed, call the OnConnect handler of the parent. */
                xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 8010c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c8a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010c8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010c90:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010c92:	4798      	blx	r3
            }
        }
        #endif

        if( xParent != NULL )
 8010c94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d002      	beq.n	8010ca0 <vTCPStateChange+0x400>
        {
            vSocketWakeUpUser( xParent );
 8010c9a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010c9c:	f7fe f871 	bl	800ed82 <vSocketWakeUpUser>
        }
    }
 8010ca0:	bf00      	nop
 8010ca2:	3754      	adds	r7, #84	@ 0x54
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ca8:	08025910 	.word	0x08025910
 8010cac:	080258a4 	.word	0x080258a4
 8010cb0:	08025944 	.word	0x08025944
 8010cb4:	08025968 	.word	0x08025968
 8010cb8:	20001484 	.word	0x20001484
 8010cbc:	0802598c 	.word	0x0802598c

08010cc0 <prvTCPNextTimeout>:
 * @param[in] pxSocket The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    TickType_t prvTCPNextTimeout( struct xSOCKET * pxSocket )
    {
 8010cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010cc4:	b098      	sub	sp, #96	@ 0x60
 8010cc6:	af02      	add	r7, sp, #8
 8010cc8:	64f8      	str	r0, [r7, #76]	@ 0x4c
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8010cca:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8010cce:	653b      	str	r3, [r7, #80]	@ 0x50

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8010cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cd2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010cd6:	2b02      	cmp	r3, #2
 8010cd8:	f040 80cc 	bne.w	8010e74 <prvTCPNextTimeout+0x1b4>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 8010cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cde:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010ce2:	f003 0308 	and.w	r3, r3, #8
 8010ce6:	b2db      	uxtb	r3, r3
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d01a      	beq.n	8010d22 <prvTCPNextTimeout+0x62>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 8010cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cee:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8010cf2:	2b02      	cmp	r3, #2
 8010cf4:	d811      	bhi.n	8010d1a <prvTCPNextTimeout+0x5a>
                {
                    if( pxSocket->u.xTCP.ucRepCount == 0U )
 8010cf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cf8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d102      	bne.n	8010d06 <prvTCPNextTimeout+0x46>
                    {
                        ulDelayMs = 0U;
 8010d00:	2300      	movs	r3, #0
 8010d02:	653b      	str	r3, [r7, #80]	@ 0x50
 8010d04:	e010      	b.n	8010d28 <prvTCPNextTimeout+0x68>
                    }
                    else
                    {
                        ulDelayMs = ( ( uint32_t ) 3000U ) << ( pxSocket->u.xTCP.ucRepCount - 1U );
 8010d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d08:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8010d0c:	3b01      	subs	r3, #1
 8010d0e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8010d12:	fa02 f303 	lsl.w	r3, r2, r3
 8010d16:	653b      	str	r3, [r7, #80]	@ 0x50
 8010d18:	e006      	b.n	8010d28 <prvTCPNextTimeout+0x68>
                    }
                }
                else
                {
                    ulDelayMs = 11000U;
 8010d1a:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 8010d1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010d20:	e002      	b.n	8010d28 <prvTCPNextTimeout+0x68>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500U;
 8010d22:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8010d26:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            FreeRTOS_debug_printf( ( "Connect[%xip:%u]: next timeout %u: %u ms\n",
 8010d28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d2a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8010d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d2e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010d32:	4618      	mov	r0, r3
 8010d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d36:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d3e:	9300      	str	r3, [sp, #0]
 8010d40:	4613      	mov	r3, r2
 8010d42:	4602      	mov	r2, r0
 8010d44:	48a4      	ldr	r0, [pc, #656]	@ (8010fd8 <prvTCPNextTimeout+0x318>)
 8010d46:	f010 fdb7 	bl	80218b8 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ( unsigned ) ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 8010d4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d50:	647a      	str	r2, [r7, #68]	@ 0x44
 8010d52:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8010d56:	4622      	mov	r2, r4
 8010d58:	462b      	mov	r3, r5
 8010d5a:	f04f 0000 	mov.w	r0, #0
 8010d5e:	f04f 0100 	mov.w	r1, #0
 8010d62:	0159      	lsls	r1, r3, #5
 8010d64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010d68:	0150      	lsls	r0, r2, #5
 8010d6a:	4602      	mov	r2, r0
 8010d6c:	460b      	mov	r3, r1
 8010d6e:	4621      	mov	r1, r4
 8010d70:	1a51      	subs	r1, r2, r1
 8010d72:	6239      	str	r1, [r7, #32]
 8010d74:	4629      	mov	r1, r5
 8010d76:	eb63 0301 	sbc.w	r3, r3, r1
 8010d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d7c:	f04f 0200 	mov.w	r2, #0
 8010d80:	f04f 0300 	mov.w	r3, #0
 8010d84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8010d88:	4649      	mov	r1, r9
 8010d8a:	008b      	lsls	r3, r1, #2
 8010d8c:	4641      	mov	r1, r8
 8010d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010d92:	4641      	mov	r1, r8
 8010d94:	008a      	lsls	r2, r1, #2
 8010d96:	4610      	mov	r0, r2
 8010d98:	4619      	mov	r1, r3
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	4622      	mov	r2, r4
 8010d9e:	189b      	adds	r3, r3, r2
 8010da0:	61bb      	str	r3, [r7, #24]
 8010da2:	462b      	mov	r3, r5
 8010da4:	460a      	mov	r2, r1
 8010da6:	eb42 0303 	adc.w	r3, r2, r3
 8010daa:	61fb      	str	r3, [r7, #28]
 8010dac:	f04f 0200 	mov.w	r2, #0
 8010db0:	f04f 0300 	mov.w	r3, #0
 8010db4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8010db8:	4629      	mov	r1, r5
 8010dba:	00cb      	lsls	r3, r1, #3
 8010dbc:	4621      	mov	r1, r4
 8010dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010dc2:	4621      	mov	r1, r4
 8010dc4:	00ca      	lsls	r2, r1, #3
 8010dc6:	4610      	mov	r0, r2
 8010dc8:	4619      	mov	r1, r3
 8010dca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010dce:	f04f 0300 	mov.w	r3, #0
 8010dd2:	f7ef faed 	bl	80003b0 <__aeabi_uldivmod>
 8010dd6:	4602      	mov	r2, r0
 8010dd8:	460b      	mov	r3, r1
 8010dda:	4613      	mov	r3, r2
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d044      	beq.n	8010e6a <prvTCPNextTimeout+0x1aa>
 8010de0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010de2:	2200      	movs	r2, #0
 8010de4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010de6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8010de8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8010dec:	4622      	mov	r2, r4
 8010dee:	462b      	mov	r3, r5
 8010df0:	f04f 0000 	mov.w	r0, #0
 8010df4:	f04f 0100 	mov.w	r1, #0
 8010df8:	0159      	lsls	r1, r3, #5
 8010dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010dfe:	0150      	lsls	r0, r2, #5
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4621      	mov	r1, r4
 8010e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8010e0a:	4629      	mov	r1, r5
 8010e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8010e10:	f04f 0200 	mov.w	r2, #0
 8010e14:	f04f 0300 	mov.w	r3, #0
 8010e18:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8010e1c:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8010e20:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8010e24:	4692      	mov	sl, r2
 8010e26:	469b      	mov	fp, r3
 8010e28:	4623      	mov	r3, r4
 8010e2a:	eb1a 0303 	adds.w	r3, sl, r3
 8010e2e:	613b      	str	r3, [r7, #16]
 8010e30:	462b      	mov	r3, r5
 8010e32:	eb4b 0303 	adc.w	r3, fp, r3
 8010e36:	617b      	str	r3, [r7, #20]
 8010e38:	f04f 0200 	mov.w	r2, #0
 8010e3c:	f04f 0300 	mov.w	r3, #0
 8010e40:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010e44:	4629      	mov	r1, r5
 8010e46:	00cb      	lsls	r3, r1, #3
 8010e48:	4621      	mov	r1, r4
 8010e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010e4e:	4621      	mov	r1, r4
 8010e50:	00ca      	lsls	r2, r1, #3
 8010e52:	4610      	mov	r0, r2
 8010e54:	4619      	mov	r1, r3
 8010e56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010e5a:	f04f 0300 	mov.w	r3, #0
 8010e5e:	f7ef faa7 	bl	80003b0 <__aeabi_uldivmod>
 8010e62:	4602      	mov	r2, r0
 8010e64:	460b      	mov	r3, r1
 8010e66:	b292      	uxth	r2, r2
 8010e68:	e000      	b.n	8010e6c <prvTCPNextTimeout+0x1ac>
 8010e6a:	2201      	movs	r2, #1
 8010e6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e6e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8010e72:	e0a8      	b.n	8010fc6 <prvTCPNextTimeout+0x306>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 8010e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e76:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	f040 80a3 	bne.w	8010fc6 <prvTCPNextTimeout+0x306>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 8010e80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e82:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8010e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e88:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8010e8c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8010e90:	461a      	mov	r2, r3
 8010e92:	f004 fcbd 	bl	8015810 <xTCPWindowTxHasData>
 8010e96:	6578      	str	r0, [r7, #84]	@ 0x54

            if( ulDelayMs == 0U )
 8010e98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d108      	bne.n	8010eb0 <prvTCPNextTimeout+0x1f0>
            {
                if( xResult != ( BaseType_t ) 0 )
 8010e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d002      	beq.n	8010eaa <prvTCPNextTimeout+0x1ea>
                {
                    ulDelayMs = 1U;
 8010ea4:	2301      	movs	r3, #1
 8010ea6:	653b      	str	r3, [r7, #80]	@ 0x50
 8010ea8:	e002      	b.n	8010eb0 <prvTCPNextTimeout+0x1f0>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8010eaa:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8010eae:	653b      	str	r3, [r7, #80]	@ 0x50
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs ); /* LCOV_EXCL_BR_LINE ulDelayMs will not be smaller than 1 */
 8010eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8010eb6:	637a      	str	r2, [r7, #52]	@ 0x34
 8010eb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8010ebc:	4652      	mov	r2, sl
 8010ebe:	465b      	mov	r3, fp
 8010ec0:	f04f 0000 	mov.w	r0, #0
 8010ec4:	f04f 0100 	mov.w	r1, #0
 8010ec8:	0159      	lsls	r1, r3, #5
 8010eca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010ece:	0150      	lsls	r0, r2, #5
 8010ed0:	4602      	mov	r2, r0
 8010ed2:	460b      	mov	r3, r1
 8010ed4:	4651      	mov	r1, sl
 8010ed6:	ebb2 0801 	subs.w	r8, r2, r1
 8010eda:	4659      	mov	r1, fp
 8010edc:	eb63 0901 	sbc.w	r9, r3, r1
 8010ee0:	f04f 0200 	mov.w	r2, #0
 8010ee4:	f04f 0300 	mov.w	r3, #0
 8010ee8:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8010eec:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8010ef0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8010ef4:	4690      	mov	r8, r2
 8010ef6:	4699      	mov	r9, r3
 8010ef8:	4653      	mov	r3, sl
 8010efa:	eb18 0303 	adds.w	r3, r8, r3
 8010efe:	60bb      	str	r3, [r7, #8]
 8010f00:	465b      	mov	r3, fp
 8010f02:	eb49 0303 	adc.w	r3, r9, r3
 8010f06:	60fb      	str	r3, [r7, #12]
 8010f08:	f04f 0200 	mov.w	r2, #0
 8010f0c:	f04f 0300 	mov.w	r3, #0
 8010f10:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8010f14:	4649      	mov	r1, r9
 8010f16:	00cb      	lsls	r3, r1, #3
 8010f18:	4641      	mov	r1, r8
 8010f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010f1e:	4641      	mov	r1, r8
 8010f20:	00ca      	lsls	r2, r1, #3
 8010f22:	4610      	mov	r0, r2
 8010f24:	4619      	mov	r1, r3
 8010f26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010f2a:	f04f 0300 	mov.w	r3, #0
 8010f2e:	f7ef fa3f 	bl	80003b0 <__aeabi_uldivmod>
 8010f32:	4602      	mov	r2, r0
 8010f34:	460b      	mov	r3, r1
 8010f36:	4613      	mov	r3, r2
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d040      	beq.n	8010fbe <prvTCPNextTimeout+0x2fe>
 8010f3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f3e:	2200      	movs	r2, #0
 8010f40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010f42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010f44:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8010f48:	4642      	mov	r2, r8
 8010f4a:	464b      	mov	r3, r9
 8010f4c:	f04f 0000 	mov.w	r0, #0
 8010f50:	f04f 0100 	mov.w	r1, #0
 8010f54:	0159      	lsls	r1, r3, #5
 8010f56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010f5a:	0150      	lsls	r0, r2, #5
 8010f5c:	4602      	mov	r2, r0
 8010f5e:	460b      	mov	r3, r1
 8010f60:	4641      	mov	r1, r8
 8010f62:	1a54      	subs	r4, r2, r1
 8010f64:	4649      	mov	r1, r9
 8010f66:	eb63 0501 	sbc.w	r5, r3, r1
 8010f6a:	f04f 0200 	mov.w	r2, #0
 8010f6e:	f04f 0300 	mov.w	r3, #0
 8010f72:	00ab      	lsls	r3, r5, #2
 8010f74:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8010f78:	00a2      	lsls	r2, r4, #2
 8010f7a:	4614      	mov	r4, r2
 8010f7c:	461d      	mov	r5, r3
 8010f7e:	4643      	mov	r3, r8
 8010f80:	18e3      	adds	r3, r4, r3
 8010f82:	603b      	str	r3, [r7, #0]
 8010f84:	464b      	mov	r3, r9
 8010f86:	eb45 0303 	adc.w	r3, r5, r3
 8010f8a:	607b      	str	r3, [r7, #4]
 8010f8c:	f04f 0200 	mov.w	r2, #0
 8010f90:	f04f 0300 	mov.w	r3, #0
 8010f94:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010f98:	4629      	mov	r1, r5
 8010f9a:	00cb      	lsls	r3, r1, #3
 8010f9c:	4621      	mov	r1, r4
 8010f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010fa2:	4621      	mov	r1, r4
 8010fa4:	00ca      	lsls	r2, r1, #3
 8010fa6:	4610      	mov	r0, r2
 8010fa8:	4619      	mov	r1, r3
 8010faa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010fae:	f04f 0300 	mov.w	r3, #0
 8010fb2:	f7ef f9fd 	bl	80003b0 <__aeabi_uldivmod>
 8010fb6:	4602      	mov	r2, r0
 8010fb8:	460b      	mov	r3, r1
 8010fba:	b292      	uxth	r2, r2
 8010fbc:	e000      	b.n	8010fc0 <prvTCPNextTimeout+0x300>
 8010fbe:	2201      	movs	r2, #1
 8010fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fc2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8010fc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fc8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
    }
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3758      	adds	r7, #88	@ 0x58
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010fd6:	bf00      	nop
 8010fd8:	080259b0 	.word	0x080259b0

08010fdc <xGetSourceAddrFromBuffer>:
 * @param[in] pucEthernetBuffer The Ethernet buffer from which the source address will be retrieved.
 *
 * @return IPv46_Address_t struct containing the source IP address.
 */
    static IPv46_Address_t xGetSourceAddrFromBuffer( const uint8_t * const pucEthernetBuffer )
    {
 8010fdc:	b4b0      	push	{r4, r5, r7}
 8010fde:	b08b      	sub	sp, #44	@ 0x2c
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8010fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fec:	899b      	ldrh	r3, [r3, #12]
 8010fee:	b29b      	uxth	r3, r3
 8010ff0:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	d10e      	bne.n	8011016 <xGetSourceAddrFromBuffer+0x3a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_IPv6_t * const pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	330e      	adds	r3, #14
 8010ffc:	61fb      	str	r3, [r7, #28]
            xSourceAddr.xIs_IPv6 = pdTRUE;
 8010ffe:	2301      	movs	r3, #1
 8011000:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( xSourceAddr.xIPAddress.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, sizeof( IPv6_Address_t ) );
 8011002:	69fb      	ldr	r3, [r7, #28]
 8011004:	3308      	adds	r3, #8
 8011006:	f107 0408 	add.w	r4, r7, #8
 801100a:	6818      	ldr	r0, [r3, #0]
 801100c:	6859      	ldr	r1, [r3, #4]
 801100e:	689a      	ldr	r2, [r3, #8]
 8011010:	68db      	ldr	r3, [r3, #12]
 8011012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011014:	e018      	b.n	8011048 <xGetSourceAddrFromBuffer+0x6c>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_t * const pxIPHeader = ( ( const IPHeader_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	330e      	adds	r3, #14
 801101a:	623b      	str	r3, [r7, #32]
            xSourceAddr.xIs_IPv6 = pdFALSE;
 801101c:	2300      	movs	r3, #0
 801101e:	61bb      	str	r3, [r7, #24]
            xSourceAddr.xIPAddress.ulIP_IPv4 = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 8011020:	6a3b      	ldr	r3, [r7, #32]
 8011022:	68db      	ldr	r3, [r3, #12]
 8011024:	061a      	lsls	r2, r3, #24
 8011026:	6a3b      	ldr	r3, [r7, #32]
 8011028:	68db      	ldr	r3, [r3, #12]
 801102a:	021b      	lsls	r3, r3, #8
 801102c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011030:	431a      	orrs	r2, r3
 8011032:	6a3b      	ldr	r3, [r7, #32]
 8011034:	68db      	ldr	r3, [r3, #12]
 8011036:	0a1b      	lsrs	r3, r3, #8
 8011038:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801103c:	431a      	orrs	r2, r3
 801103e:	6a3b      	ldr	r3, [r7, #32]
 8011040:	68db      	ldr	r3, [r3, #12]
 8011042:	0e1b      	lsrs	r3, r3, #24
 8011044:	4313      	orrs	r3, r2
 8011046:	60bb      	str	r3, [r7, #8]
        }

        return xSourceAddr;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	461d      	mov	r5, r3
 801104c:	f107 0408 	add.w	r4, r7, #8
 8011050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011054:	6823      	ldr	r3, [r4, #0]
 8011056:	602b      	str	r3, [r5, #0]
    }
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	372c      	adds	r7, #44	@ 0x2c
 801105c:	46bd      	mov	sp, r7
 801105e:	bcb0      	pop	{r4, r5, r7}
 8011060:	4770      	bx	lr
	...

08011064 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 8011064:	b5b0      	push	{r4, r5, r7, lr}
 8011066:	b096      	sub	sp, #88	@ 0x58
 8011068:	af04      	add	r7, sp, #16
 801106a:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdPASS;
 801106c:	2301      	movs	r3, #1
 801106e:	647b      	str	r3, [r7, #68]	@ 0x44
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer;
        size_t uxIPHeaderOffset;

        configASSERT( pxDescriptor != NULL );
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d104      	bne.n	8011080 <xProcessReceivedTCPPacket+0x1c>
 8011076:	f240 21f7 	movw	r1, #759	@ 0x2f7
 801107a:	4898      	ldr	r0, [pc, #608]	@ (80112dc <xProcessReceivedTCPPacket+0x278>)
 801107c:	f7f0 faf6 	bl	800166c <vAssertCalled>
        configASSERT( pxDescriptor->pucEthernetBuffer != NULL );
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011084:	2b00      	cmp	r3, #0
 8011086:	d104      	bne.n	8011092 <xProcessReceivedTCPPacket+0x2e>
 8011088:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 801108c:	4893      	ldr	r0, [pc, #588]	@ (80112dc <xProcessReceivedTCPPacket+0x278>)
 801108e:	f7f0 faed 	bl	800166c <vAssertCalled>

        pxNetworkBuffer = pxDescriptor;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	61fb      	str	r3, [r7, #28]
        uxIPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8011096:	69fb      	ldr	r3, [r7, #28]
 8011098:	4618      	mov	r0, r3
 801109a:	f7f8 fb55 	bl	8009748 <uxIPHeaderSizePacket>
 801109e:	4603      	mov	r3, r0
 80110a0:	330e      	adds	r3, #14
 80110a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( uxIPHeaderOffset + ipSIZE_OF_TCP_HEADER ) )
 80110a4:	69fb      	ldr	r3, [r7, #28]
 80110a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80110a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110aa:	3314      	adds	r3, #20
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d202      	bcs.n	80110b6 <xProcessReceivedTCPPacket+0x52>
        {
            xResult = pdFAIL;
 80110b0:	2300      	movs	r3, #0
 80110b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80110b4:	e191      	b.n	80113da <xProcessReceivedTCPPacket+0x376>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
                                                &( pxNetworkBuffer->pucEthernetBuffer[ uxIPHeaderOffset ] ) );
 80110b6:	69fb      	ldr	r3, [r7, #28]
 80110b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
 80110ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110bc:	4413      	add	r3, r2
 80110be:	63bb      	str	r3, [r7, #56]	@ 0x38

            const uint16_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80110c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110c2:	7b5b      	ldrb	r3, [r3, #13]
 80110c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            const uint16_t usLocalPort = FreeRTOS_htons( pxTCPHeader->usDestinationPort );
 80110c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110c8:	885b      	ldrh	r3, [r3, #2]
 80110ca:	b29b      	uxth	r3, r3
 80110cc:	021b      	lsls	r3, r3, #8
 80110ce:	b21a      	sxth	r2, r3
 80110d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110d2:	885b      	ldrh	r3, [r3, #2]
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	0a1b      	lsrs	r3, r3, #8
 80110d8:	b29b      	uxth	r3, r3
 80110da:	b21b      	sxth	r3, r3
 80110dc:	4313      	orrs	r3, r2
 80110de:	b21b      	sxth	r3, r3
 80110e0:	86bb      	strh	r3, [r7, #52]	@ 0x34
            const uint16_t usRemotePort = FreeRTOS_htons( pxTCPHeader->usSourcePort );
 80110e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e4:	881b      	ldrh	r3, [r3, #0]
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	021b      	lsls	r3, r3, #8
 80110ea:	b21a      	sxth	r2, r3
 80110ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ee:	881b      	ldrh	r3, [r3, #0]
 80110f0:	b29b      	uxth	r3, r3
 80110f2:	0a1b      	lsrs	r3, r3, #8
 80110f4:	b29b      	uxth	r3, r3
 80110f6:	b21b      	sxth	r3, r3
 80110f8:	4313      	orrs	r3, r2
 80110fa:	b21b      	sxth	r3, r3
 80110fc:	867b      	strh	r3, [r7, #50]	@ 0x32
            const IPv46_Address_t xRemoteIP = xGetSourceAddrFromBuffer( pxNetworkBuffer->pucEthernetBuffer );
 80110fe:	69fb      	ldr	r3, [r7, #28]
 8011100:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011102:	f107 0308 	add.w	r3, r7, #8
 8011106:	4611      	mov	r1, r2
 8011108:	4618      	mov	r0, r3
 801110a:	f7ff ff67 	bl	8010fdc <xGetSourceAddrFromBuffer>

            /* Find the destination socket, and if not found: return a socket listening to
             * the destination PORT. */
            FreeRTOS_Socket_t * pxSocket = pxTCPSocketLookup( 0U, usLocalPort, xRemoteIP, usRemotePort );
 801110e:	8ebd      	ldrh	r5, [r7, #52]	@ 0x34
 8011110:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011112:	9303      	str	r3, [sp, #12]
 8011114:	466c      	mov	r4, sp
 8011116:	f107 0310 	add.w	r3, r7, #16
 801111a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801111e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011122:	f107 0308 	add.w	r3, r7, #8
 8011126:	cb0c      	ldmia	r3, {r2, r3}
 8011128:	4629      	mov	r1, r5
 801112a:	2000      	movs	r0, #0
 801112c:	f7fe fbc2 	bl	800f8b4 <pxTCPSocketLookup>
 8011130:	6438      	str	r0, [r7, #64]	@ 0x40

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == pdFALSE ) )
 8011132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011134:	2b00      	cmp	r3, #0
 8011136:	d008      	beq.n	801114a <xProcessReceivedTCPPacket+0xe6>
 8011138:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801113a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801113e:	4618      	mov	r0, r3
 8011140:	f000 fc92 	bl	8011a68 <prvTCPSocketIsActive>
 8011144:	4603      	mov	r3, r0
 8011146:	2b00      	cmp	r3, #0
 8011148:	d116      	bne.n	8011178 <xProcessReceivedTCPPacket+0x114>
                /* A TCP messages is received but either there is no socket with the
                 * given port number or the there is a socket, but it is in one of these
                 * non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
                 * eTIME_WAIT. */

                FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%d)\n", usLocalPort, usRemotePort ) );
 801114a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801114c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801114e:	4619      	mov	r1, r3
 8011150:	4863      	ldr	r0, [pc, #396]	@ (80112e0 <xProcessReceivedTCPPacket+0x27c>)
 8011152:	f010 fbb1 	bl	80218b8 <lUDPLoggingPrintf>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8011156:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011158:	f003 031f 	and.w	r3, r3, #31
 801115c:	2b10      	cmp	r3, #16
 801115e:	d008      	beq.n	8011172 <xProcessReceivedTCPPacket+0x10e>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 8011160:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011162:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8011166:	2b00      	cmp	r3, #0
 8011168:	d103      	bne.n	8011172 <xProcessReceivedTCPPacket+0x10e>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 801116a:	69fb      	ldr	r3, [r7, #28]
 801116c:	4618      	mov	r0, r3
 801116e:	f002 fd0b 	bl	8013b88 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 8011172:	2300      	movs	r3, #0
 8011174:	647b      	str	r3, [r7, #68]	@ 0x44
 8011176:	e0d6      	b.n	8011326 <xProcessReceivedTCPPacket+0x2c2>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 8011178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801117a:	2200      	movs	r2, #0
 801117c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 8011180:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011182:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011186:	2b01      	cmp	r3, #1
 8011188:	d127      	bne.n	80111da <xProcessReceivedTCPPacket+0x176>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 801118a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801118c:	f003 031f 	and.w	r3, r3, #31
 8011190:	2b02      	cmp	r3, #2
 8011192:	d015      	beq.n	80111c0 <xProcessReceivedTCPPacket+0x15c>
                        /* What happens: maybe after a reboot, a client doesn't know the
                         * connection had gone.  Send a RST in order to get a new connect
                         * request. */
                        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                        {
                            FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %u to port %u\n",
 8011194:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011196:	4618      	mov	r0, r3
 8011198:	f003 fbbe 	bl	8014918 <prvTCPFlagMeaning>
 801119c:	4601      	mov	r1, r0
 801119e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80111a0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80111a2:	4850      	ldr	r0, [pc, #320]	@ (80112e4 <xProcessReceivedTCPPacket+0x280>)
 80111a4:	f010 fb88 	bl	80218b8 <lUDPLoggingPrintf>
                                                     prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), usRemotePort, usLocalPort ) );
                        }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 80111a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80111aa:	f003 0304 	and.w	r3, r3, #4
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d103      	bne.n	80111ba <xProcessReceivedTCPPacket+0x156>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 80111b2:	69fb      	ldr	r3, [r7, #28]
 80111b4:	4618      	mov	r0, r3
 80111b6:	f002 fce7 	bl	8013b88 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 80111ba:	2300      	movs	r3, #0
 80111bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80111be:	e0b2      	b.n	8011326 <xProcessReceivedTCPPacket+0x2c2>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 80111c0:	69fb      	ldr	r3, [r7, #28]
 80111c2:	4619      	mov	r1, r3
 80111c4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80111c6:	f001 f999 	bl	80124fc <prvHandleListen>
 80111ca:	6438      	str	r0, [r7, #64]	@ 0x40

                        if( pxSocket == NULL )
 80111cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	f040 80a9 	bne.w	8011326 <xProcessReceivedTCPPacket+0x2c2>
                        {
                            xResult = pdFAIL;
 80111d4:	2300      	movs	r3, #0
 80111d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80111d8:	e0a5      	b.n	8011326 <xProcessReceivedTCPPacket+0x2c2>
                } /* if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 80111da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80111dc:	f003 0304 	and.w	r3, r3, #4
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d068      	beq.n	80112b6 <xProcessReceivedTCPPacket+0x252>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %u for %u\n", usRemotePort, usLocalPort ) );
 80111e4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80111e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80111e8:	4619      	mov	r1, r3
 80111ea:	483f      	ldr	r0, [pc, #252]	@ (80112e8 <xProcessReceivedTCPPacket+0x284>)
 80111ec:	f010 fb64 	bl	80218b8 <lUDPLoggingPrintf>

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 80111f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80111f2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80111f6:	2b02      	cmp	r3, #2
 80111f8:	d11f      	bne.n	801123a <xProcessReceivedTCPPacket+0x1d6>
                        {
                            const uint32_t ulAckNumber = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 80111fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111fc:	689b      	ldr	r3, [r3, #8]
 80111fe:	061a      	lsls	r2, r3, #24
 8011200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011202:	689b      	ldr	r3, [r3, #8]
 8011204:	021b      	lsls	r3, r3, #8
 8011206:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801120a:	431a      	orrs	r2, r3
 801120c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801120e:	689b      	ldr	r3, [r3, #8]
 8011210:	0a1b      	lsrs	r3, r3, #8
 8011212:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011216:	431a      	orrs	r2, r3
 8011218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801121a:	689b      	ldr	r3, [r3, #8]
 801121c:	0e1b      	lsrs	r3, r3, #24
 801121e:	4313      	orrs	r3, r2
 8011220:	627b      	str	r3, [r7, #36]	@ 0x24

                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1U ) )
 8011222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011224:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8011228:	3301      	adds	r3, #1
 801122a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801122c:	429a      	cmp	r2, r3
 801122e:	d13f      	bne.n	80112b0 <xProcessReceivedTCPPacket+0x24c>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 8011230:	2100      	movs	r1, #0
 8011232:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011234:	f7ff fb34 	bl	80108a0 <vTCPStateChange>
 8011238:	e03a      	b.n	80112b0 <xProcessReceivedTCPPacket+0x24c>
                            }
                        }
                        else
                        {
                            const uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 801123a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	061a      	lsls	r2, r3, #24
 8011240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011242:	685b      	ldr	r3, [r3, #4]
 8011244:	021b      	lsls	r3, r3, #8
 8011246:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801124a:	431a      	orrs	r2, r3
 801124c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801124e:	685b      	ldr	r3, [r3, #4]
 8011250:	0a1b      	lsrs	r3, r3, #8
 8011252:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011256:	431a      	orrs	r2, r3
 8011258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	0e1b      	lsrs	r3, r3, #24
 801125e:	4313      	orrs	r3, r2
 8011260:	62bb      	str	r3, [r7, #40]	@ 0x28

                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 8011262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011264:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8011268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801126a:	429a      	cmp	r2, r3
 801126c:	d104      	bne.n	8011278 <xProcessReceivedTCPPacket+0x214>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 801126e:	2100      	movs	r1, #0
 8011270:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011272:	f7ff fb15 	bl	80108a0 <vTCPStateChange>
 8011276:	e01b      	b.n	80112b0 <xProcessReceivedTCPPacket+0x24c>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8011278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801127a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 801127e:	4619      	mov	r1, r3
 8011280:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011282:	f003 fc82 	bl	8014b8a <xSequenceGreaterThan>
 8011286:	4603      	mov	r3, r0
 8011288:	2b00      	cmp	r3, #0
 801128a:	d011      	beq.n	80112b0 <xProcessReceivedTCPPacket+0x24c>
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 801128c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801128e:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
                                                          pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) != pdFALSE ) )
 8011292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011294:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8011298:	4413      	add	r3, r2
 801129a:	4619      	mov	r1, r3
 801129c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801129e:	f003 fc5e 	bl	8014b5e <xSequenceLessThan>
 80112a2:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d003      	beq.n	80112b0 <xProcessReceivedTCPPacket+0x24c>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 80112a8:	69fb      	ldr	r3, [r7, #28]
 80112aa:	4618      	mov	r0, r3
 80112ac:	f002 fc5f 	bl	8013b6e <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 80112b0:	2300      	movs	r3, #0
 80112b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80112b4:	e037      	b.n	8011326 <xProcessReceivedTCPPacket+0x2c2>
                    }
                    /* Check whether there is a pure SYN amongst the TCP flags while the connection is established. */
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) )
 80112b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80112b8:	f003 031f 	and.w	r3, r3, #31
 80112bc:	2b02      	cmp	r3, #2
 80112be:	d117      	bne.n	80112f0 <xProcessReceivedTCPPacket+0x28c>
 80112c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112c2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80112c6:	2b04      	cmp	r3, #4
 80112c8:	d912      	bls.n	80112f0 <xProcessReceivedTCPPacket+0x28c>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %u\n", usRemotePort ) );
 80112ca:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80112cc:	4619      	mov	r1, r3
 80112ce:	4807      	ldr	r0, [pc, #28]	@ (80112ec <xProcessReceivedTCPPacket+0x288>)
 80112d0:	f010 faf2 	bl	80218b8 <lUDPLoggingPrintf>

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 80112d4:	2300      	movs	r3, #0
 80112d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80112d8:	e025      	b.n	8011326 <xProcessReceivedTCPPacket+0x2c2>
 80112da:	bf00      	nop
 80112dc:	080258a4 	.word	0x080258a4
 80112e0:	080259dc 	.word	0x080259dc
 80112e4:	08025a04 	.word	0x08025a04
 80112e8:	08025a3c 	.word	0x08025a3c
 80112ec:	08025a60 	.word	0x08025a60
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 80112f0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80112f2:	f7f8 fa43 	bl	800977c <uxIPHeaderSizeSocket>
 80112f6:	4603      	mov	r3, r0
 80112f8:	330e      	adds	r3, #14
 80112fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 80112fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112fe:	33a0      	adds	r3, #160	@ 0xa0
 8011300:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011302:	4413      	add	r3, r2
 8011304:	f103 000a 	add.w	r0, r3, #10
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 8011308:	69fb      	ldr	r3, [r7, #28]
 801130a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801130c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801130e:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8011310:	2214      	movs	r2, #20
 8011312:	4619      	mov	r1, r3
 8011314:	f010 fcec 	bl	8021cf0 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 8011318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801131a:	330d      	adds	r3, #13
 801131c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801131e:	4413      	add	r3, r2
 8011320:	2210      	movs	r2, #16
 8011322:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                    }
                }
            }

            if( xResult != pdFAIL )
 8011326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011328:	2b00      	cmp	r3, #0
 801132a:	d056      	beq.n	80113da <xProcessReceivedTCPPacket+0x376>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL ); /* LCOV_EXCL_LINE ,this branch will not be hit*/
 801132c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801132e:	2b00      	cmp	r3, #0
 8011330:	d104      	bne.n	801133c <xProcessReceivedTCPPacket+0x2d8>
 8011332:	f240 319e 	movw	r1, #926	@ 0x39e
 8011336:	482b      	ldr	r0, [pc, #172]	@ (80113e4 <xProcessReceivedTCPPacket+0x380>)
 8011338:	f7f0 f998 	bl	800166c <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 801133c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801133e:	f7ff fa53 	bl	80107e8 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxTCPHeader->ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 8011342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011344:	7b1b      	ldrb	r3, [r3, #12]
 8011346:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801134a:	2b50      	cmp	r3, #80	@ 0x50
 801134c:	d905      	bls.n	801135a <xProcessReceivedTCPPacket+0x2f6>
                {
                    xResult = prvCheckOptions( pxSocket, pxNetworkBuffer );
 801134e:	69fb      	ldr	r3, [r7, #28]
 8011350:	4619      	mov	r1, r3
 8011352:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011354:	f000 f894 	bl	8011480 <prvCheckOptions>
 8011358:	6478      	str	r0, [r7, #68]	@ 0x44
                }

                if( xResult != pdFAIL )
 801135a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801135c:	2b00      	cmp	r3, #0
 801135e:	d03c      	beq.n	80113da <xProcessReceivedTCPPacket+0x376>
                {
                    usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8011360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011362:	89db      	ldrh	r3, [r3, #14]
 8011364:	b29b      	uxth	r3, r3
 8011366:	021b      	lsls	r3, r3, #8
 8011368:	b21a      	sxth	r2, r3
 801136a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801136c:	89db      	ldrh	r3, [r3, #14]
 801136e:	b29b      	uxth	r3, r3
 8011370:	0a1b      	lsrs	r3, r3, #8
 8011372:	b29b      	uxth	r3, r3
 8011374:	b21b      	sxth	r3, r3
 8011376:	4313      	orrs	r3, r2
 8011378:	b21b      	sxth	r3, r3
 801137a:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 801137c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801137e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011380:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8011384:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011386:	f003 0302 	and.w	r3, r3, #2
 801138a:	2b00      	cmp	r3, #0
 801138c:	d10a      	bne.n	80113a4 <xProcessReceivedTCPPacket+0x340>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 801138e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011390:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8011394:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011396:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 801139a:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 801139e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113a0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    }
                    #endif /* ipconfigUSE_TCP_WIN */

                    /* In prvTCPHandleState() the incoming messages will be handled
                     * depending on the current state of the connection. */
                    if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 80113a4:	f107 031c 	add.w	r3, r7, #28
 80113a8:	4619      	mov	r1, r3
 80113aa:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80113ac:	f000 ff78 	bl	80122a0 <prvTCPHandleState>
 80113b0:	4603      	mov	r3, r0
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	dd05      	ble.n	80113c2 <xProcessReceivedTCPPacket+0x35e>
                    {
                        /* prvTCPHandleState() has sent a message, see if there are more to
                         * be transmitted. */
                        #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 80113b6:	f107 031c 	add.w	r3, r7, #28
 80113ba:	4619      	mov	r1, r3
 80113bc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80113be:	f001 fc6f 	bl	8012ca0 <prvTCPSendRepeated>
                        }
                        #endif /* ipconfigUSE_TCP_WIN */
                    }

                    if( pxNetworkBuffer != NULL )
 80113c2:	69fb      	ldr	r3, [r7, #28]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d005      	beq.n	80113d4 <xProcessReceivedTCPPacket+0x370>
                    {
                        /* We must check if the buffer is unequal to NULL, because the
                         * socket might keep a reference to it in case a delayed ACK must be
                         * sent. */
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80113c8:	69fb      	ldr	r3, [r7, #28]
 80113ca:	4618      	mov	r0, r3
 80113cc:	f005 fbcc 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
                        #ifndef _lint
                            /* Clear pointers that are freed. */
                            pxNetworkBuffer = NULL;
 80113d0:	2300      	movs	r3, #0
 80113d2:	61fb      	str	r3, [r7, #28]
                        #endif
                    }

                    /* And finally, calculate when this socket wants to be woken up. */
                    ( void ) prvTCPNextTimeout( pxSocket );
 80113d4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80113d6:	f7ff fc73 	bl	8010cc0 <prvTCPNextTimeout>
                }
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 80113da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 80113dc:	4618      	mov	r0, r3
 80113de:	3748      	adds	r7, #72	@ 0x48
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bdb0      	pop	{r4, r5, r7, pc}
 80113e4:	080258a4 	.word	0x080258a4

080113e8 <xTCPCheckNewClient>:
 * @param[in] pxSocket The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b088      	sub	sp, #32
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80113f4:	021b      	lsls	r3, r3, #8
 80113f6:	b21a      	sxth	r2, r3
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80113fc:	0a1b      	lsrs	r3, r3, #8
 80113fe:	b29b      	uxth	r3, r3
 8011400:	b21b      	sxth	r3, r3
 8011402:	4313      	orrs	r3, r2
 8011404:	b21b      	sxth	r3, r3
 8011406:	b29b      	uxth	r3, r3
 8011408:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 801140a:	2300      	movs	r3, #0
 801140c:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEndTCP = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 801140e:	4b19      	ldr	r3, [pc, #100]	@ (8011474 <xTCPCheckNewClient+0x8c>)
 8011410:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8011412:	4b19      	ldr	r3, [pc, #100]	@ (8011478 <xTCPCheckNewClient+0x90>)
 8011414:	68db      	ldr	r3, [r3, #12]
 8011416:	61fb      	str	r3, [r7, #28]
 8011418:	e023      	b.n	8011462 <xTCPCheckNewClient+0x7a>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 801141a:	69fb      	ldr	r3, [r7, #28]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	697a      	ldr	r2, [r7, #20]
 8011420:	429a      	cmp	r2, r3
 8011422:	d11b      	bne.n	801145c <xTCPCheckNewClient+0x74>
            {
                pxFound = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	68db      	ldr	r3, [r3, #12]
 8011428:	60fb      	str	r3, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8011430:	2b06      	cmp	r3, #6
 8011432:	d113      	bne.n	801145c <xTCPCheckNewClient+0x74>
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801143a:	f003 0302 	and.w	r3, r3, #2
 801143e:	b2db      	uxtb	r3, r3
 8011440:	2b00      	cmp	r3, #0
 8011442:	d00b      	beq.n	801145c <xTCPCheckNewClient+0x74>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	68fa      	ldr	r2, [r7, #12]
 8011448:	67da      	str	r2, [r3, #124]	@ 0x7c
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801144e:	4619      	mov	r1, r3
 8011450:	480a      	ldr	r0, [pc, #40]	@ (801147c <xTCPCheckNewClient+0x94>)
 8011452:	f010 fa31 	bl	80218b8 <lUDPLoggingPrintf>
                    xResult = pdTRUE;
 8011456:	2301      	movs	r3, #1
 8011458:	61bb      	str	r3, [r7, #24]
                    break;
 801145a:	e006      	b.n	801146a <xTCPCheckNewClient+0x82>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 801145c:	69fb      	ldr	r3, [r7, #28]
 801145e:	685b      	ldr	r3, [r3, #4]
 8011460:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 8011462:	69fa      	ldr	r2, [r7, #28]
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	429a      	cmp	r2, r3
 8011468:	d1d7      	bne.n	801141a <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 801146a:	69bb      	ldr	r3, [r7, #24]
    }
 801146c:	4618      	mov	r0, r3
 801146e:	3720      	adds	r7, #32
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}
 8011474:	20001448 	.word	0x20001448
 8011478:	20001440 	.word	0x20001440
 801147c:	08025a80 	.word	0x08025a80

08011480 <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    BaseType_t prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8011480:	b580      	push	{r7, lr}
 8011482:	b08c      	sub	sp, #48	@ 0x30
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 801148a:	6838      	ldr	r0, [r7, #0]
 801148c:	f7f8 f95c 	bl	8009748 <uxIPHeaderSizePacket>
 8011490:	4603      	mov	r3, r0
 8011492:	330e      	adds	r3, #14
 8011494:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801149a:	69fb      	ldr	r3, [r7, #28]
 801149c:	4413      	add	r3, r2
 801149e:	61bb      	str	r3, [r7, #24]
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        BaseType_t xReturn = pdPASS;
 80114a0:	2301      	movs	r3, #1
 80114a2:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ipSIZE_OF_TCP_HEADER;
 80114a4:	69fb      	ldr	r3, [r7, #28]
 80114a6:	3314      	adds	r3, #20
 80114a8:	617b      	str	r3, [r7, #20]
        size_t uxOptionsLength;
        int32_t lResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 80114aa:	69bb      	ldr	r3, [r7, #24]
 80114ac:	613b      	str	r3, [r7, #16]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 80114ae:	693b      	ldr	r3, [r7, #16]
 80114b0:	3314      	adds	r3, #20
 80114b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	7b1b      	ldrb	r3, [r3, #12]
 80114b8:	2b50      	cmp	r3, #80	@ 0x50
 80114ba:	d93f      	bls.n	801153c <prvCheckOptions+0xbc>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( uint8_t ) ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 80114bc:	693b      	ldr	r3, [r7, #16]
 80114be:	7b1b      	ldrb	r3, [r3, #12]
 80114c0:	091b      	lsrs	r3, r3, #4
 80114c2:	b2db      	uxtb	r3, r3
 80114c4:	3b05      	subs	r3, #5
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	009b      	lsls	r3, r3, #2
 80114ca:	73fb      	strb	r3, [r7, #15]
            uxOptionsLength = ( size_t ) ucLength;
 80114cc:	7bfb      	ldrb	r3, [r7, #15]
 80114ce:	623b      	str	r3, [r7, #32]

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114d4:	697a      	ldr	r2, [r7, #20]
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d230      	bcs.n	801153c <prvCheckOptions+0xbc>
            {
                /* Validate options size calculation. */
                if( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) )
 80114da:	683b      	ldr	r3, [r7, #0]
 80114dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	1ad3      	subs	r3, r2, r3
 80114e2:	6a3a      	ldr	r2, [r7, #32]
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d829      	bhi.n	801153c <prvCheckOptions+0xbc>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 80114e8:	693b      	ldr	r3, [r7, #16]
 80114ea:	7b5b      	ldrb	r3, [r3, #13]
 80114ec:	f003 0302 	and.w	r3, r3, #2
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d002      	beq.n	80114fa <prvCheckOptions+0x7a>
                    {
                        xHasSYNFlag = pdTRUE;
 80114f4:	2301      	movs	r3, #1
 80114f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80114f8:	e001      	b.n	80114fe <prvCheckOptions+0x7e>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 80114fa:	2300      	movs	r3, #0
 80114fc:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 80114fe:	6a3b      	ldr	r3, [r7, #32]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d018      	beq.n	8011536 <prvCheckOptions+0xb6>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        lResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 8011504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011506:	687a      	ldr	r2, [r7, #4]
 8011508:	6a39      	ldr	r1, [r7, #32]
 801150a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801150c:	f000 f81c 	bl	8011548 <prvSingleStepTCPHeaderOptions>
 8011510:	60b8      	str	r0, [r7, #8]

                        if( lResult < 0 )
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	2b00      	cmp	r3, #0
 8011516:	da02      	bge.n	801151e <prvCheckOptions+0x9e>
                        {
                            xReturn = pdFAIL;
 8011518:	2300      	movs	r3, #0
 801151a:	627b      	str	r3, [r7, #36]	@ 0x24
                            break;
 801151c:	e00e      	b.n	801153c <prvCheckOptions+0xbc>
                        }

                        if( lResult == 0 )
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d00a      	beq.n	801153a <prvCheckOptions+0xba>
                        {
                            break;
                        }

                        uxOptionsLength -= ( size_t ) lResult;
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	6a3a      	ldr	r2, [r7, #32]
 8011528:	1ad3      	subs	r3, r2, r3
 801152a:	623b      	str	r3, [r7, #32]
                        pucPtr = &( pucPtr[ lResult ] );
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011530:	4413      	add	r3, r2
 8011532:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 8011534:	e7e3      	b.n	80114fe <prvCheckOptions+0x7e>
                            break;
 8011536:	bf00      	nop
 8011538:	e000      	b.n	801153c <prvCheckOptions+0xbc>
                            break;
 801153a:	bf00      	nop
                    }
                }
            }
        }

        return xReturn;
 801153c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801153e:	4618      	mov	r0, r3
 8011540:	3730      	adds	r7, #48	@ 0x30
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}
	...

08011548 <prvSingleStepTCPHeaderOptions>:
 */
    static int32_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 8011548:	b580      	push	{r7, lr}
 801154a:	b08a      	sub	sp, #40	@ 0x28
 801154c:	af00      	add	r7, sp, #0
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	60b9      	str	r1, [r7, #8]
 8011552:	607a      	str	r2, [r7, #4]
 8011554:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	617b      	str	r3, [r7, #20]
        uint8_t ucLen;
        int32_t lIndex = 0;
 801155a:	2300      	movs	r3, #0
 801155c:	61fb      	str	r3, [r7, #28]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011564:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8011566:	2300      	movs	r3, #0
 8011568:	61bb      	str	r3, [r7, #24]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	781b      	ldrb	r3, [r3, #0]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d102      	bne.n	8011578 <prvSingleStepTCPHeaderOptions+0x30>
        {
            /* End of options. */
            lIndex = 0;
 8011572:	2300      	movs	r3, #0
 8011574:	61fb      	str	r3, [r7, #28]
 8011576:	e0da      	b.n	801172e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	2b01      	cmp	r3, #1
 801157e:	d102      	bne.n	8011586 <prvSingleStepTCPHeaderOptions+0x3e>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            lIndex = 1;
 8011580:	2301      	movs	r3, #1
 8011582:	61fb      	str	r3, [r7, #28]
 8011584:	e0d3      	b.n	801172e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( uxRemainingOptionsBytes < 2U )
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	2b01      	cmp	r3, #1
 801158a:	d803      	bhi.n	8011594 <prvSingleStepTCPHeaderOptions+0x4c>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            lIndex = -1;
 801158c:	f04f 33ff 	mov.w	r3, #4294967295
 8011590:	61fb      	str	r3, [r7, #28]
 8011592:	e0cc      	b.n	801172e <prvSingleStepTCPHeaderOptions+0x1e6>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	781b      	ldrb	r3, [r3, #0]
 8011598:	2b03      	cmp	r3, #3
 801159a:	d11e      	bne.n	80115da <prvSingleStepTCPHeaderOptions+0x92>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	2b02      	cmp	r3, #2
 80115a0:	d904      	bls.n	80115ac <prvSingleStepTCPHeaderOptions+0x64>
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	3301      	adds	r3, #1
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	2b03      	cmp	r3, #3
 80115aa:	d003      	beq.n	80115b4 <prvSingleStepTCPHeaderOptions+0x6c>
                {
                    lIndex = -1;
 80115ac:	f04f 33ff 	mov.w	r3, #4294967295
 80115b0:	61fb      	str	r3, [r7, #28]
 80115b2:	e0bc      	b.n	801172e <prvSingleStepTCPHeaderOptions+0x1e6>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d00c      	beq.n	80115d4 <prvSingleStepTCPHeaderOptions+0x8c>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	3302      	adds	r3, #2
 80115be:	781a      	ldrb	r2, [r3, #0]
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 80115c6:	687a      	ldr	r2, [r7, #4]
 80115c8:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80115cc:	f043 0310 	orr.w	r3, r3, #16
 80115d0:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_WSOPT_LEN;
 80115d4:	2303      	movs	r3, #3
 80115d6:	61fb      	str	r3, [r7, #28]
 80115d8:	e0a9      	b.n	801172e <prvSingleStepTCPHeaderOptions+0x1e6>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	781b      	ldrb	r3, [r3, #0]
 80115de:	2b02      	cmp	r3, #2
 80115e0:	d16d      	bne.n	80116be <prvSingleStepTCPHeaderOptions+0x176>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 80115e2:	697b      	ldr	r3, [r7, #20]
 80115e4:	2b03      	cmp	r3, #3
 80115e6:	d904      	bls.n	80115f2 <prvSingleStepTCPHeaderOptions+0xaa>
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	3301      	adds	r3, #1
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	2b04      	cmp	r3, #4
 80115f0:	d003      	beq.n	80115fa <prvSingleStepTCPHeaderOptions+0xb2>
            {
                lIndex = -1;
 80115f2:	f04f 33ff 	mov.w	r3, #4294967295
 80115f6:	61fb      	str	r3, [r7, #28]
 80115f8:	e099      	b.n	801172e <prvSingleStepTCPHeaderOptions+0x1e6>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	3302      	adds	r3, #2
 80115fe:	4618      	mov	r0, r3
 8011600:	f7f8 fe4f 	bl	800a2a2 <usChar2u16>
 8011604:	4603      	mov	r3, r0
 8011606:	627b      	str	r3, [r7, #36]	@ 0x24

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801160e:	461a      	mov	r2, r3
 8011610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011612:	4293      	cmp	r3, r2
 8011614:	d010      	beq.n	8011638 <prvSingleStepTCPHeaderOptions+0xf0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 8011616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011618:	2b00      	cmp	r3, #0
 801161a:	d105      	bne.n	8011628 <prvSingleStepTCPHeaderOptions+0xe0>
                    {
                        lIndex = -1;
 801161c:	f04f 33ff 	mov.w	r3, #4294967295
 8011620:	61fb      	str	r3, [r7, #28]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 8011622:	2301      	movs	r3, #1
 8011624:	61bb      	str	r3, [r7, #24]
 8011626:	e007      	b.n	8011638 <prvSingleStepTCPHeaderOptions+0xf0>
                    }
                    else
                    {
                        FreeRTOS_debug_printf( ( "MSS change %u -> %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801162e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011630:	4619      	mov	r1, r3
 8011632:	4841      	ldr	r0, [pc, #260]	@ (8011738 <prvSingleStepTCPHeaderOptions+0x1f0>)
 8011634:	f010 f940 	bl	80218b8 <lUDPLoggingPrintf>
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 8011638:	69bb      	ldr	r3, [r7, #24]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d177      	bne.n	801172e <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Restrict the minimum value of segment length to the ( Minimum IP MTU (576) - IP header(20) - TCP Header(20) ).
                     * See "RFC 791 section 3.1 Total Length" for more details. */
                    if( uxNewMSS < tcpMINIMUM_SEGMENT_LENGTH )
 801163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011640:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011644:	d202      	bcs.n	801164c <prvSingleStepTCPHeaderOptions+0x104>
                    {
                        uxNewMSS = tcpMINIMUM_SEGMENT_LENGTH;
 8011646:	f44f 7306 	mov.w	r3, #536	@ 0x218
 801164a:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8011652:	461a      	mov	r2, r3
 8011654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011656:	4293      	cmp	r3, r2
 8011658:	d22e      	bcs.n	80116b8 <prvSingleStepTCPHeaderOptions+0x170>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 801165a:	687a      	ldr	r2, [r7, #4]
 801165c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011660:	f043 0301 	orr.w	r3, r3, #1
 8011664:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                        if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801166e:	461a      	mov	r2, r3
 8011670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011672:	4293      	cmp	r3, r2
 8011674:	d207      	bcs.n	8011686 <prvSingleStepTCPHeaderOptions+0x13e>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801167c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801167e:	4619      	mov	r1, r3
 8011680:	482e      	ldr	r0, [pc, #184]	@ (801173c <prvSingleStepTCPHeaderOptions+0x1f4>)
 8011682:	f010 f919 	bl	80218b8 <lUDPLoggingPrintf>
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	685a      	ldr	r2, [r3, #4]
 801168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801168c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011692:	fb03 f202 	mul.w	r2, r3, r2
 8011696:	693b      	ldr	r3, [r7, #16]
 8011698:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 801169a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801169c:	b29a      	uxth	r2, r3
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 80116a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116a6:	b29a      	uxth	r2, r3
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 80116ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116b0:	b29a      	uxth	r2, r3
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_MSS_LEN;
 80116b8:	2304      	movs	r3, #4
 80116ba:	61fb      	str	r3, [r7, #28]
 80116bc:	e037      	b.n	801172e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	3301      	adds	r3, #1
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lIndex = 0;
 80116c8:	2300      	movs	r3, #0
 80116ca:	61fb      	str	r3, [r7, #28]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 80116cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80116d0:	2b01      	cmp	r3, #1
 80116d2:	d904      	bls.n	80116de <prvSingleStepTCPHeaderOptions+0x196>
 80116d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80116d8:	697a      	ldr	r2, [r7, #20]
 80116da:	429a      	cmp	r2, r3
 80116dc:	d203      	bcs.n	80116e6 <prvSingleStepTCPHeaderOptions+0x19e>
            {
                /* If the length field is too small or too big, the options are
                 * malformed, don't process them further.
                 */
                lIndex = -1;
 80116de:	f04f 33ff 	mov.w	r3, #4294967295
 80116e2:	61fb      	str	r3, [r7, #28]
 80116e4:	e023      	b.n	801172e <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Selective ACK: the peer has received a packet but it is missing
                     * earlier packets. At least this packet does not need retransmission
                     * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                     */
                    if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	781b      	ldrb	r3, [r3, #0]
 80116ea:	2b05      	cmp	r3, #5
 80116ec:	d11a      	bne.n	8011724 <prvSingleStepTCPHeaderOptions+0x1dc>
                    {
                        ucLen = ( uint8_t ) ( ucLen - 2U );
 80116ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80116f2:	3b02      	subs	r3, #2
 80116f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        lIndex += 2;
 80116f8:	69fb      	ldr	r3, [r7, #28]
 80116fa:	3302      	adds	r3, #2
 80116fc:	61fb      	str	r3, [r7, #28]

                        while( ucLen >= ( uint8_t ) 8U )
 80116fe:	e00d      	b.n	801171c <prvSingleStepTCPHeaderOptions+0x1d4>
                        {
                            prvReadSackOption( pucPtr, ( size_t ) lIndex, pxSocket );
 8011700:	69fb      	ldr	r3, [r7, #28]
 8011702:	687a      	ldr	r2, [r7, #4]
 8011704:	4619      	mov	r1, r3
 8011706:	68f8      	ldr	r0, [r7, #12]
 8011708:	f000 f81a 	bl	8011740 <prvReadSackOption>
                            lIndex += 8;
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	3308      	adds	r3, #8
 8011710:	61fb      	str	r3, [r7, #28]
                            ucLen = ( uint8_t ) ( ucLen - 8U );
 8011712:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011716:	3b08      	subs	r3, #8
 8011718:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        while( ucLen >= ( uint8_t ) 8U )
 801171c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011720:	2b07      	cmp	r3, #7
 8011722:	d8ed      	bhi.n	8011700 <prvSingleStepTCPHeaderOptions+0x1b8>
                        /* ucLen should be 0 by now. */
                    }
                }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                lIndex += ( int32_t ) ucLen;
 8011724:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011728:	69fa      	ldr	r2, [r7, #28]
 801172a:	4413      	add	r3, r2
 801172c:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return lIndex;
 801172e:	69fb      	ldr	r3, [r7, #28]
    }
 8011730:	4618      	mov	r0, r3
 8011732:	3728      	adds	r7, #40	@ 0x28
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}
 8011738:	08025aac 	.word	0x08025aac
 801173c:	08025ac4 	.word	0x08025ac4

08011740 <prvReadSackOption>:
 * @param[in] pxSocket Socket handling the TCP connection.
 */
        static void prvReadSackOption( const uint8_t * const pucPtr,
                                       size_t uxIndex,
                                       FreeRTOS_Socket_t * const pxSocket )
        {
 8011740:	b580      	push	{r7, lr}
 8011742:	b08a      	sub	sp, #40	@ 0x28
 8011744:	af02      	add	r7, sp, #8
 8011746:	60f8      	str	r0, [r7, #12]
 8011748:	60b9      	str	r1, [r7, #8]
 801174a:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 801174c:	68fa      	ldr	r2, [r7, #12]
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	4413      	add	r3, r2
 8011752:	4618      	mov	r0, r3
 8011754:	f7f8 fd8a 	bl	800a26c <ulChar2u32>
 8011758:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	3304      	adds	r3, #4
 801175e:	68fa      	ldr	r2, [r7, #12]
 8011760:	4413      	add	r3, r2
 8011762:	4618      	mov	r0, r3
 8011764:	f7f8 fd82 	bl	800a26c <ulChar2u32>
 8011768:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011770:	69ba      	ldr	r2, [r7, #24]
 8011772:	69f9      	ldr	r1, [r7, #28]
 8011774:	4618      	mov	r0, r3
 8011776:	f004 fba3 	bl	8015ec0 <ulTCPWindowTxSack>
 801177a:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011782:	2b00      	cmp	r3, #0
 8011784:	d029      	beq.n	80117da <prvReadSackOption+0x9a>
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d026      	beq.n	80117da <prvReadSackOption+0x9a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8011792:	2300      	movs	r3, #0
 8011794:	9300      	str	r3, [sp, #0]
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	2200      	movs	r2, #0
 801179a:	2100      	movs	r1, #0
 801179c:	f7fe fed9 	bl	8010552 <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	f043 0202 	orr.w	r2, r3, #2
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                {
                    if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80117b0:	f003 0302 	and.w	r3, r3, #2
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d005      	beq.n	80117c4 <prvReadSackOption+0x84>
                    {
                        /* The field 'xEventBits' is used to store regular socket events
                         * (at most 8), as well as 'select events', which will be left-shifted.
                         */
                        pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	601a      	str	r2, [r3, #0]

                /* In case the socket owner has installed an OnSent handler,
                 * call it now. */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                {
                    if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d005      	beq.n	80117da <prvReadSackOption+0x9a>
                    {
                        pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80117d4:	6979      	ldr	r1, [r7, #20]
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	4798      	blx	r3
                    }
                }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 80117da:	bf00      	nop
 80117dc:	3720      	adds	r7, #32
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd80      	pop	{r7, pc}

080117e2 <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint8_t ** ppucRecvData )
    {
 80117e2:	b590      	push	{r4, r7, lr}
 80117e4:	b08f      	sub	sp, #60	@ 0x3c
 80117e6:	af00      	add	r7, sp, #0
 80117e8:	6078      	str	r0, [r7, #4]
 80117ea:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f7f7 ffa9 	bl	8009748 <uxIPHeaderSizePacket>
 80117f6:	4603      	mov	r3, r0
 80117f8:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80117fa:	4423      	add	r3, r4
 80117fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 80117fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011800:	62bb      	str	r3, [r7, #40]	@ 0x28
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */

        const size_t xIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f7f7 ffa0 	bl	8009748 <uxIPHeaderSizePacket>
 8011808:	6278      	str	r0, [r7, #36]	@ 0x24
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 801180a:	2300      	movs	r3, #0
 801180c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 8011810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011812:	7b1b      	ldrb	r3, [r3, #12]
 8011814:	089b      	lsrs	r3, r3, #2
 8011816:	b2db      	uxtb	r3, r3
 8011818:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 801181c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 8011820:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011824:	61fb      	str	r3, [r7, #28]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801182a:	69f9      	ldr	r1, [r7, #28]
 801182c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801182e:	440b      	add	r3, r1
 8011830:	330e      	adds	r3, #14
 8011832:	441a      	add	r2, r3
 8011834:	683b      	ldr	r3, [r7, #0]
 8011836:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ( int32_t ) pxNetworkBuffer->xDataLength;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801183c:	633b      	str	r3, [r7, #48]	@ 0x30
        lReceiveLength -= ( int32_t ) ipSIZE_OF_ETH_HEADER;
 801183e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011840:	3b0e      	subs	r3, #14
 8011842:	633b      	str	r3, [r7, #48]	@ 0x30

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        switch( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer )->usFrameType )
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011848:	899b      	ldrh	r3, [r3, #12]
 801184a:	b29b      	uxth	r3, r3
 801184c:	2b08      	cmp	r3, #8
 801184e:	d004      	beq.n	801185a <prvCheckRxData+0x78>
 8011850:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8011854:	4293      	cmp	r3, r2
 8011856:	d015      	beq.n	8011884 <prvCheckRxData+0xa2>
 8011858:	e02c      	b.n	80118b4 <prvCheckRxData+0xd2>
                case ipIPv4_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801185e:	330e      	adds	r3, #14
 8011860:	613b      	str	r3, [r7, #16]

                       usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8011862:	693b      	ldr	r3, [r7, #16]
 8011864:	885b      	ldrh	r3, [r3, #2]
 8011866:	b29b      	uxth	r3, r3
 8011868:	021b      	lsls	r3, r3, #8
 801186a:	b21a      	sxth	r2, r3
 801186c:	693b      	ldr	r3, [r7, #16]
 801186e:	885b      	ldrh	r3, [r3, #2]
 8011870:	b29b      	uxth	r3, r3
 8011872:	0a1b      	lsrs	r3, r3, #8
 8011874:	b29b      	uxth	r3, r3
 8011876:	b21b      	sxth	r3, r3
 8011878:	4313      	orrs	r3, r2
 801187a:	b21b      	sxth	r3, r3
 801187c:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 801187e:	8afb      	ldrh	r3, [r7, #22]
 8011880:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 8011882:	e01a      	b.n	80118ba <prvCheckRxData+0xd8>
                case ipIPv6_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_IPv6_t * pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011888:	330e      	adds	r3, #14
 801188a:	61bb      	str	r3, [r7, #24]

                       /* For Coverity: conversion and cast in 2 steps. */
                       usLength = FreeRTOS_htons( pxIPHeader->usPayloadLength );
 801188c:	69bb      	ldr	r3, [r7, #24]
 801188e:	889b      	ldrh	r3, [r3, #4]
 8011890:	b29b      	uxth	r3, r3
 8011892:	021b      	lsls	r3, r3, #8
 8011894:	b21a      	sxth	r2, r3
 8011896:	69bb      	ldr	r3, [r7, #24]
 8011898:	889b      	ldrh	r3, [r3, #4]
 801189a:	b29b      	uxth	r3, r3
 801189c:	0a1b      	lsrs	r3, r3, #8
 801189e:	b29b      	uxth	r3, r3
 80118a0:	b21b      	sxth	r3, r3
 80118a2:	4313      	orrs	r3, r2
 80118a4:	b21b      	sxth	r3, r3
 80118a6:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 80118a8:	8afb      	ldrh	r3, [r7, #22]
 80118aa:	637b      	str	r3, [r7, #52]	@ 0x34
                       /* Add the length of the TCP-header, because that was not included in 'usPayloadLength'. */
                       lLength += ( int32_t ) sizeof( IPHeader_IPv6_t );
 80118ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118ae:	3328      	adds	r3, #40	@ 0x28
 80118b0:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 80118b2:	e002      	b.n	80118ba <prvCheckRxData+0xd8>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                lLength = 0;
 80118b4:	2300      	movs	r3, #0
 80118b6:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 80118b8:	bf00      	nop
        }

        if( lReceiveLength > lLength )
 80118ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80118bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118be:	429a      	cmp	r2, r3
 80118c0:	dd01      	ble.n	80118c6 <prvCheckRxData+0xe4>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 80118c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118c4:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 80118c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118c8:	69fb      	ldr	r3, [r7, #28]
 80118ca:	4413      	add	r3, r2
 80118cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80118ce:	429a      	cmp	r2, r3
 80118d0:	dd06      	ble.n	80118e0 <prvCheckRxData+0xfe>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 80118d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118d4:	69fb      	ldr	r3, [r7, #28]
 80118d6:	4413      	add	r3, r2
 80118d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80118da:	1ad3      	subs	r3, r2, r3
 80118dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80118de:	e001      	b.n	80118e4 <prvCheckRxData+0x102>
        }
        else
        {
            lReceiveLength = 0;
 80118e0:	2300      	movs	r3, #0
 80118e2:	633b      	str	r3, [r7, #48]	@ 0x30
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 80118e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118e6:	7b5b      	ldrb	r3, [r3, #13]
 80118e8:	f003 0320 	and.w	r3, r3, #32
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d01c      	beq.n	801192a <prvCheckRxData+0x148>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 80118f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118f2:	8a5b      	ldrh	r3, [r3, #18]
 80118f4:	b29b      	uxth	r3, r3
 80118f6:	021b      	lsls	r3, r3, #8
 80118f8:	b21a      	sxth	r2, r3
 80118fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118fc:	8a5b      	ldrh	r3, [r3, #18]
 80118fe:	b29b      	uxth	r3, r3
 8011900:	0a1b      	lsrs	r3, r3, #8
 8011902:	b29b      	uxth	r3, r3
 8011904:	b21b      	sxth	r3, r3
 8011906:	4313      	orrs	r3, r2
 8011908:	b21b      	sxth	r3, r3
 801190a:	b29b      	uxth	r3, r3
 801190c:	60fb      	str	r3, [r7, #12]

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            *ppucRecvData += lUrgentLength;
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	681a      	ldr	r2, [r3, #0]
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	441a      	add	r2, r3
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 801191a:	68f9      	ldr	r1, [r7, #12]
 801191c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801191e:	f7f8 fc51 	bl	800a1c4 <FreeRTOS_min_int32>
 8011922:	4602      	mov	r2, r0
 8011924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011926:	1a9b      	subs	r3, r3, r2
 8011928:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        return ( BaseType_t ) lReceiveLength;
 801192a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
 801192c:	4618      	mov	r0, r3
 801192e:	373c      	adds	r7, #60	@ 0x3c
 8011930:	46bd      	mov	sp, r7
 8011932:	bd90      	pop	{r4, r7, pc}

08011934 <prvStoreRxData>:
 */
    BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                               const uint8_t * pucRecvData,
                               NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint32_t ulReceiveLength )
    {
 8011934:	b580      	push	{r7, lr}
 8011936:	b092      	sub	sp, #72	@ 0x48
 8011938:	af02      	add	r7, sp, #8
 801193a:	60f8      	str	r0, [r7, #12]
 801193c:	60b9      	str	r1, [r7, #8]
 801193e:	607a      	str	r2, [r7, #4]
 8011940:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        size_t uxIPOffset = uxIPHeaderSizePacket( pxNetworkBuffer );
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f7f7 ff00 	bl	8009748 <uxIPHeaderSizePacket>
 8011948:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPOffset ] ) );
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801194e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011950:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8011952:	4413      	add	r3, r2
 8011954:	62bb      	str	r3, [r7, #40]	@ 0x28
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011958:	627b      	str	r3, [r7, #36]	@ 0x24
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011960:	623b      	str	r3, [r7, #32]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 8011962:	2300      	movs	r3, #0
 8011964:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t ulRxLength = ulReceiveLength;
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t * pucRxBuffer = &( pucRecvData[ 0 ] );
 801196a:	68bb      	ldr	r3, [r7, #8]
 801196c:	633b      	str	r3, [r7, #48]	@ 0x30

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 801196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	061a      	lsls	r2, r3, #24
 8011974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011976:	685b      	ldr	r3, [r3, #4]
 8011978:	021b      	lsls	r3, r3, #8
 801197a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801197e:	431a      	orrs	r2, r3
 8011980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011982:	685b      	ldr	r3, [r3, #4]
 8011984:	0a1b      	lsrs	r3, r3, #8
 8011986:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801198a:	431a      	orrs	r2, r3
 801198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	0e1b      	lsrs	r3, r3, #24
 8011992:	4313      	orrs	r3, r2
 8011994:	61fb      	str	r3, [r7, #28]

        if( ( ulRxLength > 0U ) && ( pxSocket->u.xTCP.eTCPState >= eSYN_RECEIVED ) )
 8011996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011998:	2b00      	cmp	r3, #0
 801199a:	d057      	beq.n	8011a4c <prvStoreRxData+0x118>
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80119a2:	2b03      	cmp	r3, #3
 80119a4:	d952      	bls.n	8011a4c <prvStoreRxData+0x118>
        {
            uint32_t ulSkipCount = 0;
 80119a6:	2300      	movs	r3, #0
 80119a8:	613b      	str	r3, [r7, #16]
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d007      	beq.n	80119c4 <prvStoreRxData+0x90>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80119ba:	4618      	mov	r0, r3
 80119bc:	f7fe fc89 	bl	80102d2 <uxStreamBufferGetSpace>
 80119c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80119c2:	e003      	b.n	80119cc <prvStoreRxData+0x98>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80119ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulRxLength, ulSpace, &( ulSkipCount ) );
 80119cc:	f107 0310 	add.w	r3, r7, #16
 80119d0:	9300      	str	r3, [sp, #0]
 80119d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80119d6:	69f9      	ldr	r1, [r7, #28]
 80119d8:	6a38      	ldr	r0, [r7, #32]
 80119da:	f003 fd45 	bl	8015468 <lTCPWindowRxCheck>
 80119de:	61b8      	str	r0, [r7, #24]

            if( lOffset >= 0 )
 80119e0:	69bb      	ldr	r3, [r7, #24]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	db20      	blt.n	8011a28 <prvStoreRxData+0xf4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                if( ulSkipCount != 0U )
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d007      	beq.n	80119fc <prvStoreRxData+0xc8>
                {
                    /* A packet was received that starts before 'ulCurrentSequenceNumber',
                     * and that ends after it.  The first 'ulSkipCount' bytes shall be
                     * skipped. */
                    ulRxLength -= ulSkipCount;
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80119f0:	1ad3      	subs	r3, r2, r3
 80119f2:	637b      	str	r3, [r7, #52]	@ 0x34
                    pucRxBuffer = &( pucRecvData[ ulSkipCount ] );
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	68ba      	ldr	r2, [r7, #8]
 80119f8:	4413      	add	r3, r2
 80119fa:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRxBuffer, ulRxLength );
 80119fc:	69b9      	ldr	r1, [r7, #24]
 80119fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a02:	68f8      	ldr	r0, [r7, #12]
 8011a04:	f7fe f8d2 	bl	800fbac <lTCPAddRxdata>
 8011a08:	6178      	str	r0, [r7, #20]

                if( lStored != ( int32_t ) ulRxLength )
 8011a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a0c:	697a      	ldr	r2, [r7, #20]
 8011a0e:	429a      	cmp	r2, r3
 8011a10:	d00a      	beq.n	8011a28 <prvStoreRxData+0xf4>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %d / %u bytes? ?\n", ( int ) lStored, ( unsigned ) ulRxLength ) );
 8011a12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a14:	6979      	ldr	r1, [r7, #20]
 8011a16:	4813      	ldr	r0, [pc, #76]	@ (8011a64 <prvStoreRxData+0x130>)
 8011a18:	f00f ff4e 	bl	80218b8 <lUDPLoggingPrintf>

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	f002 f8b3 	bl	8013b88 <prvTCPSendReset>
                    xResult = -1;
 8011a22:	f04f 33ff 	mov.w	r3, #4294967295
 8011a26:	63bb      	str	r3, [r7, #56]	@ 0x38
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                /* Now lTCPAddRxdata() will move the rxHead pointer forward
                 * so data becomes available to the user immediately
                 * In case the low-water mark is reached, bLowWater will be set. */
                if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0U ) )
 8011a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d113      	bne.n	8011a56 <prvStoreRxData+0x122>
 8011a2e:	6a3b      	ldr	r3, [r7, #32]
 8011a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d00f      	beq.n	8011a56 <prvStoreRxData+0x122>
                {
                    ( void ) lTCPAddRxdata( pxSocket, 0U, NULL, pxTCPWindow->ulUserDataLength );
 8011a36:	6a3b      	ldr	r3, [r7, #32]
 8011a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	2100      	movs	r1, #0
 8011a3e:	68f8      	ldr	r0, [r7, #12]
 8011a40:	f7fe f8b4 	bl	800fbac <lTCPAddRxdata>
                    pxTCPWindow->ulUserDataLength = 0;
 8011a44:	6a3b      	ldr	r3, [r7, #32]
 8011a46:	2200      	movs	r2, #0
 8011a48:	631a      	str	r2, [r3, #48]	@ 0x30
        {
 8011a4a:	e004      	b.n	8011a56 <prvStoreRxData+0x122>
            }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 8011a4c:	6a3b      	ldr	r3, [r7, #32]
 8011a4e:	2200      	movs	r2, #0
 8011a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8011a54:	e000      	b.n	8011a58 <prvStoreRxData+0x124>
        {
 8011a56:	bf00      	nop
        }

        return xResult;
 8011a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	3740      	adds	r7, #64	@ 0x40
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bd80      	pop	{r7, pc}
 8011a62:	bf00      	nop
 8011a64:	08025adc 	.word	0x08025adc

08011a68 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    BaseType_t prvTCPSocketIsActive( eIPTCPState_t eStatus )
    {
 8011a68:	b480      	push	{r7}
 8011a6a:	b085      	sub	sp, #20
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	4603      	mov	r3, r0
 8011a70:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( eStatus )
 8011a72:	79fb      	ldrb	r3, [r7, #7]
 8011a74:	2b0b      	cmp	r3, #11
 8011a76:	bf8c      	ite	hi
 8011a78:	2201      	movhi	r2, #1
 8011a7a:	2200      	movls	r2, #0
 8011a7c:	b2d2      	uxtb	r2, r2
 8011a7e:	2a00      	cmp	r2, #0
 8011a80:	d10f      	bne.n	8011aa2 <prvTCPSocketIsActive+0x3a>
 8011a82:	f640 3281 	movw	r2, #2945	@ 0xb81
 8011a86:	fa22 f303 	lsr.w	r3, r2, r3
 8011a8a:	f003 0301 	and.w	r3, r3, #1
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	bf14      	ite	ne
 8011a92:	2301      	movne	r3, #1
 8011a94:	2300      	moveq	r3, #0
 8011a96:	b2db      	uxtb	r3, r3
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d002      	beq.n	8011aa2 <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	60fb      	str	r3, [r7, #12]
                break;
 8011aa0:	e002      	b.n	8011aa8 <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	60fb      	str	r3, [r7, #12]
                break;
 8011aa6:	bf00      	nop
        }

        return xResult;
 8011aa8:	68fb      	ldr	r3, [r7, #12]
    }
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3714      	adds	r7, #20
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab4:	4770      	bx	lr
	...

08011ab8 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 8011ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011aba:	b089      	sub	sp, #36	@ 0x24
 8011abc:	af02      	add	r7, sp, #8
 8011abe:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;

            eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011ac6:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 8011ac8:	7cfb      	ldrb	r3, [r7, #19]
 8011aca:	2b08      	cmp	r3, #8
 8011acc:	d00b      	beq.n	8011ae6 <prvTCPStatusAgeCheck+0x2e>
 8011ace:	2b08      	cmp	r3, #8
 8011ad0:	dc0c      	bgt.n	8011aec <prvTCPStatusAgeCheck+0x34>
 8011ad2:	2b01      	cmp	r3, #1
 8011ad4:	dc02      	bgt.n	8011adc <prvTCPStatusAgeCheck+0x24>
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	da05      	bge.n	8011ae6 <prvTCPStatusAgeCheck+0x2e>
 8011ada:	e007      	b.n	8011aec <prvTCPStatusAgeCheck+0x34>
 8011adc:	2b05      	cmp	r3, #5
 8011ade:	d105      	bne.n	8011aec <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	617b      	str	r3, [r7, #20]
                    break;
 8011ae4:	e005      	b.n	8011af2 <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	617b      	str	r3, [r7, #20]
                    break;
 8011aea:	e002      	b.n	8011af2 <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 8011aec:	2301      	movs	r3, #1
 8011aee:	617b      	str	r3, [r7, #20]
                    break;
 8011af0:	bf00      	nop
            }

            if( xResult != pdFALSE )
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d032      	beq.n	8011b5e <prvTCPStatusAgeCheck+0xa6>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 8011af8:	f7f2 fa90 	bl	800401c <xTaskGetTickCount>
 8011afc:	4602      	mov	r2, r0
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011b04:	1ad3      	subs	r3, r2, r3
 8011b06:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8011b0e:	4293      	cmp	r3, r2
 8011b10:	d925      	bls.n	8011b5e <prvTCPStatusAgeCheck+0xa6>
                {
                    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                    {
                        FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %xip:%u status %s\n",
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011b16:	461d      	mov	r5, r3
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011b22:	461e      	mov	r6, r3
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f000 fdca 	bl	80126c4 <FreeRTOS_GetTCPStateName>
 8011b30:	4603      	mov	r3, r0
 8011b32:	9300      	str	r3, [sp, #0]
 8011b34:	4633      	mov	r3, r6
 8011b36:	4622      	mov	r2, r4
 8011b38:	4629      	mov	r1, r5
 8011b3a:	480b      	ldr	r0, [pc, #44]	@ (8011b68 <prvTCPStatusAgeCheck+0xb0>)
 8011b3c:	f00f febc 	bl	80218b8 <lUDPLoggingPrintf>
                                                 FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.eTCPState ) ) );
                    }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8011b40:	2108      	movs	r1, #8
 8011b42:	6878      	ldr	r0, [r7, #4]
 8011b44:	f7fe feac 	bl	80108a0 <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011b4e:	f003 0304 	and.w	r3, r3, #4
 8011b52:	b2db      	uxtb	r3, r3
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d002      	beq.n	8011b5e <prvTCPStatusAgeCheck+0xa6>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 8011b58:	f04f 33ff 	mov.w	r3, #4294967295
 8011b5c:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 8011b5e:	697b      	ldr	r3, [r7, #20]
        }
 8011b60:	4618      	mov	r0, r3
 8011b62:	371c      	adds	r7, #28
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b68:	08025b04 	.word	0x08025b04

08011b6c <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8011b6c:	b5b0      	push	{r4, r5, r7, lr}
 8011b6e:	b08a      	sub	sp, #40	@ 0x28
 8011b70:	af02      	add	r7, sp, #8
 8011b72:	6078      	str	r0, [r7, #4]
 8011b74:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011b7a:	6838      	ldr	r0, [r7, #0]
 8011b7c:	f7f7 fde4 	bl	8009748 <uxIPHeaderSizePacket>
 8011b80:	4603      	mov	r3, r0
 8011b82:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011b84:	4423      	add	r3, r4
 8011b86:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8011b88:	69bb      	ldr	r3, [r7, #24]
 8011b8a:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	74fb      	strb	r3, [r7, #19]
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	7b5b      	ldrb	r3, [r3, #13]
 8011b94:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011b9c:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	689b      	ldr	r3, [r3, #8]
 8011ba6:	061a      	lsls	r2, r3, #24
 8011ba8:	697b      	ldr	r3, [r7, #20]
 8011baa:	689b      	ldr	r3, [r3, #8]
 8011bac:	021b      	lsls	r3, r3, #8
 8011bae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011bb2:	431a      	orrs	r2, r3
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	689b      	ldr	r3, [r3, #8]
 8011bb8:	0a1b      	lsrs	r3, r3, #8
 8011bba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011bbe:	431a      	orrs	r2, r3
 8011bc0:	697b      	ldr	r3, [r7, #20]
 8011bc2:	689b      	ldr	r3, [r3, #8]
 8011bc4:	0e1b      	lsrs	r3, r3, #24
 8011bc6:	4313      	orrs	r3, r2
 8011bc8:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 8011bca:	7cbb      	ldrb	r3, [r7, #18]
 8011bcc:	f003 0301 	and.w	r3, r3, #1
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d004      	beq.n	8011bde <prvTCPHandleFin+0x72>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	695b      	ldr	r3, [r3, #20]
 8011bd8:	1c5a      	adds	r2, r3, #1
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011be8:	b2db      	uxtb	r3, r3
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d10b      	bne.n	8011c06 <prvTCPHandleFin+0x9a>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	6a1a      	ldr	r2, [r3, #32]
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8011bf6:	687a      	ldr	r2, [r7, #4]
 8011bf8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8011bfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c00:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8011c04:	e00c      	b.n	8011c20 <prvTCPHandleFin+0xb4>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1U ) )
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c0a:	3301      	adds	r3, #1
 8011c0c:	68ba      	ldr	r2, [r7, #8]
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d106      	bne.n	8011c20 <prvTCPHandleFin+0xb4>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 8011c12:	687a      	ldr	r2, [r7, #4]
 8011c14:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8011c18:	f043 0301 	orr.w	r3, r3, #1
 8011c1c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011c26:	f003 0301 	and.w	r3, r3, #1
 8011c2a:	b2db      	uxtb	r3, r3
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d10b      	bne.n	8011c48 <prvTCPHandleFin+0xdc>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	2211      	movs	r2, #17
 8011c3c:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 8011c3e:	210a      	movs	r1, #10
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f7fe fe2d 	bl	80108a0 <vTCPStateChange>
 8011c46:	e023      	b.n	8011c90 <prvTCPHandleFin+0x124>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c4c:	1c5a      	adds	r2, r3, #1
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011c58:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011c5c:	b2db      	uxtb	r3, r3
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d103      	bne.n	8011c6a <prvTCPHandleFin+0xfe>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	2200      	movs	r2, #0
 8011c66:	735a      	strb	r2, [r3, #13]
 8011c68:	e012      	b.n	8011c90 <prvTCPHandleFin+0x124>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011c70:	f003 0302 	and.w	r3, r3, #2
 8011c74:	b2db      	uxtb	r3, r3
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d103      	bne.n	8011c82 <prvTCPHandleFin+0x116>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8011c7a:	697b      	ldr	r3, [r7, #20]
 8011c7c:	2210      	movs	r2, #16
 8011c7e:	735a      	strb	r2, [r3, #13]
 8011c80:	e002      	b.n	8011c88 <prvTCPHandleFin+0x11c>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	2200      	movs	r2, #0
 8011c86:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8011c88:	2108      	movs	r1, #8
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f7fe fe08 	bl	80108a0 <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	6a1a      	ldr	r2, [r3, #32]
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	7b5b      	ldrb	r3, [r3, #13]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d00d      	beq.n	8011cbc <prvTCPHandleFin+0x150>
        {
            ucIntermediateResult = ( uint8_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 8011ca0:	6878      	ldr	r0, [r7, #4]
 8011ca2:	f7f7 fd6b 	bl	800977c <uxIPHeaderSizeSocket>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	b2da      	uxtb	r2, r3
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011cb0:	4413      	add	r3, r2
 8011cb2:	b2db      	uxtb	r3, r3
 8011cb4:	3314      	adds	r3, #20
 8011cb6:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 8011cb8:	7cfb      	ldrb	r3, [r7, #19]
 8011cba:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011cc2:	3314      	adds	r3, #20
 8011cc4:	b2db      	uxtb	r3, r3
 8011cc6:	009b      	lsls	r3, r3, #2
 8011cc8:	b2da      	uxtb	r2, r3
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	731a      	strb	r2, [r3, #12]

        if( xTCPWindowLoggingLevel != 0 )
 8011cce:	4b14      	ldr	r3, [pc, #80]	@ (8011d20 <prvTCPHandleFin+0x1b4>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d01f      	beq.n	8011d16 <prvTCPHandleFin+0x1aa>
        {
            FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %u, cur/nxt %u/%u) ourSeqNr %u | Rx %u\n",
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	69db      	ldr	r3, [r3, #28]
 8011cda:	68ba      	ldr	r2, [r7, #8]
 8011cdc:	1ad0      	subs	r0, r2, r3
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	6a1a      	ldr	r2, [r3, #32]
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	69db      	ldr	r3, [r3, #28]
 8011ce6:	1ad4      	subs	r4, r2, r3
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	69db      	ldr	r3, [r3, #28]
 8011cf0:	1ad5      	subs	r5, r2, r3
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	69db      	ldr	r3, [r3, #28]
 8011cfa:	1ad3      	subs	r3, r2, r3
 8011cfc:	68fa      	ldr	r2, [r7, #12]
 8011cfe:	6911      	ldr	r1, [r2, #16]
 8011d00:	68fa      	ldr	r2, [r7, #12]
 8011d02:	68d2      	ldr	r2, [r2, #12]
 8011d04:	1a8a      	subs	r2, r1, r2
 8011d06:	9201      	str	r2, [sp, #4]
 8011d08:	9300      	str	r3, [sp, #0]
 8011d0a:	462b      	mov	r3, r5
 8011d0c:	4622      	mov	r2, r4
 8011d0e:	4601      	mov	r1, r0
 8011d10:	4804      	ldr	r0, [pc, #16]	@ (8011d24 <prvTCPHandleFin+0x1b8>)
 8011d12:	f00f fdd1 	bl	80218b8 <lUDPLoggingPrintf>
                                     ( unsigned ) ( pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );
        }

        return xSendLength;
 8011d16:	69fb      	ldr	r3, [r7, #28]
    }
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3720      	adds	r7, #32
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8011d20:	20001484 	.word	0x20001484
 8011d24:	08025b3c 	.word	0x08025b3c

08011d28 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8011d28:	b590      	push	{r4, r7, lr}
 8011d2a:	b09b      	sub	sp, #108	@ 0x6c
 8011d2c:	af02      	add	r7, sp, #8
 8011d2e:	60f8      	str	r0, [r7, #12]
 8011d30:	60b9      	str	r1, [r7, #8]
 8011d32:	607a      	str	r2, [r7, #4]
 8011d34:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011d3a:	68f8      	ldr	r0, [r7, #12]
 8011d3c:	f7f7 fd1e 	bl	800977c <uxIPHeaderSizeSocket>
 8011d40:	4603      	mov	r3, r0
 8011d42:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011d44:	4423      	add	r3, r4
 8011d46:	657b      	str	r3, [r7, #84]	@ 0x54
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d4a:	653b      	str	r3, [r7, #80]	@ 0x50
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011d54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d56:	7b5b      	ldrb	r3, [r3, #13]
 8011d58:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8011d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	061a      	lsls	r2, r3, #24
 8011d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	021b      	lsls	r3, r3, #8
 8011d68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011d6c:	431a      	orrs	r2, r3
 8011d6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d70:	685b      	ldr	r3, [r3, #4]
 8011d72:	0a1b      	lsrs	r3, r3, #8
 8011d74:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011d78:	431a      	orrs	r2, r3
 8011d7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	0e1b      	lsrs	r3, r3, #24
 8011d80:	4313      	orrs	r3, r2
 8011d82:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xSendLength = 0;
 8011d84:	2300      	movs	r3, #0
 8011d86:	65fb      	str	r3, [r7, #92]	@ 0x5c
        UBaseType_t uxIntermediateResult = 0U;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 8011d8c:	2310      	movs	r3, #16
 8011d8e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 8011d92:	2317      	movs	r3, #23
 8011d94:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011d9e:	2b02      	cmp	r3, #2
 8011da0:	d105      	bne.n	8011dae <prvHandleSynReceived+0x86>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 8011da2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8011da6:	f043 0302 	orr.w	r3, r3, #2
 8011daa:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 8011dae:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8011db2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011db6:	4013      	ands	r3, r2
 8011db8:	b2db      	uxtb	r3, r3
 8011dba:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	d044      	beq.n	8011e4c <prvHandleSynReceived+0x124>
        {
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011dc8:	2b04      	cmp	r3, #4
 8011dca:	d101      	bne.n	8011dd0 <prvHandleSynReceived+0xa8>
 8011dcc:	4977      	ldr	r1, [pc, #476]	@ (8011fac <prvHandleSynReceived+0x284>)
 8011dce:	e000      	b.n	8011dd2 <prvHandleSynReceived+0xaa>
 8011dd0:	4977      	ldr	r1, [pc, #476]	@ (8011fb0 <prvHandleSynReceived+0x288>)
 8011dd2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8011dd6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8011dda:	4876      	ldr	r0, [pc, #472]	@ (8011fb4 <prvHandleSynReceived+0x28c>)
 8011ddc:	f00f fd6c 	bl	80218b8 <lUDPLoggingPrintf>
                                     ( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8011de0:	2108      	movs	r1, #8
 8011de2:	68f8      	ldr	r0, [r7, #12]
 8011de4:	f7fe fd5c 	bl	80108a0 <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 8011de8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011dea:	689b      	ldr	r3, [r3, #8]
 8011dec:	061a      	lsls	r2, r3, #24
 8011dee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011df0:	689b      	ldr	r3, [r3, #8]
 8011df2:	021b      	lsls	r3, r3, #8
 8011df4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011df8:	431a      	orrs	r2, r3
 8011dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011dfc:	689b      	ldr	r3, [r3, #8]
 8011dfe:	0a1b      	lsrs	r3, r3, #8
 8011e00:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011e04:	431a      	orrs	r2, r3
 8011e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e08:	689b      	ldr	r3, [r3, #8]
 8011e0a:	0e1b      	lsrs	r3, r3, #24
 8011e0c:	431a      	orrs	r2, r3
 8011e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e10:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8011e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011e16:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 8011e18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e1a:	7b5b      	ldrb	r3, [r3, #13]
 8011e1c:	f043 0304 	orr.w	r3, r3, #4
 8011e20:	b2da      	uxtb	r2, r3
 8011e22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e24:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8011e26:	68f8      	ldr	r0, [r7, #12]
 8011e28:	f7f7 fca8 	bl	800977c <uxIPHeaderSizeSocket>
 8011e2c:	4602      	mov	r2, r0
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	4413      	add	r3, r2
 8011e32:	3314      	adds	r3, #20
 8011e34:	643b      	str	r3, [r7, #64]	@ 0x40
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 8011e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e38:	65fb      	str	r3, [r7, #92]	@ 0x5c

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	b2db      	uxtb	r3, r3
 8011e3e:	3314      	adds	r3, #20
 8011e40:	b2db      	uxtb	r3, r3
 8011e42:	009b      	lsls	r3, r3, #2
 8011e44:	b2da      	uxtb	r2, r3
 8011e46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e48:	731a      	strb	r2, [r3, #12]
 8011e4a:	e0aa      	b.n	8011fa2 <prvHandleSynReceived+0x27a>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e54:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8011e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e5e:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011e68:	2b02      	cmp	r3, #2
 8011e6a:	d12e      	bne.n	8011eca <prvHandleSynReceived+0x1a2>

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
                                                      &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8011e6c:	68f8      	ldr	r0, [r7, #12]
 8011e6e:	f7f7 fc85 	bl	800977c <uxIPHeaderSizeSocket>
 8011e72:	4603      	mov	r3, r0
 8011e74:	330e      	adds	r3, #14
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
 8011e76:	33a0      	adds	r3, #160	@ 0xa0
 8011e78:	68fa      	ldr	r2, [r7, #12]
 8011e7a:	4413      	add	r3, r2
 8011e7c:	330a      	adds	r3, #10
 8011e7e:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8011e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e82:	2210      	movs	r2, #16
 8011e84:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8011e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e88:	2210      	movs	r2, #16
 8011e8a:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8011e9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011ea0:	f003 f8ec 	bl	801507c <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8011ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ea6:	1c5a      	adds	r2, r3, #1
 8011ea8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011eaa:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8011eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011eae:	1c5a      	adds	r2, r3, #1
 8011eb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011eb2:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 8011eb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011eb6:	6a1b      	ldr	r3, [r3, #32]
 8011eb8:	1c5a      	adds	r2, r3, #1
 8011eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ebc:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 8011ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ec2:	1c5a      	adds	r2, r3, #1
 8011ec4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ec6:	635a      	str	r2, [r3, #52]	@ 0x34
 8011ec8:	e005      	b.n	8011ed6 <prvHandleSynReceived+0x1ae>
            }
            else if( ulReceiveLength == 0U )
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d102      	bne.n	8011ed6 <prvHandleSynReceived+0x1ae>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8011ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ed2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011ed4:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8011ed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ed8:	69db      	ldr	r3, [r3, #28]
 8011eda:	1c5a      	adds	r2, r3, #1
 8011edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ede:	62da      	str	r2, [r3, #44]	@ 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                char pcBuffer[ 40 ]; /* Space to print an IP-address. */
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	7a1b      	ldrb	r3, [r3, #8]
 8011ee4:	f003 0301 	and.w	r3, r3, #1
 8011ee8:	b2db      	uxtb	r3, r3
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d001      	beq.n	8011ef2 <prvHandleSynReceived+0x1ca>
 8011eee:	200a      	movs	r0, #10
 8011ef0:	e000      	b.n	8011ef4 <prvHandleSynReceived+0x1cc>
 8011ef2:	2002      	movs	r0, #2
                                             ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8011efa:	f107 0210 	add.w	r2, r7, #16
 8011efe:	2328      	movs	r3, #40	@ 0x28
 8011f00:	f7fc fec0 	bl	800ec84 <FreeRTOS_inet_ntop>
                                             pcBuffer,
                                             sizeof( pcBuffer ) );
                FreeRTOS_debug_printf( ( "TCP: %s %u => %s port %u set ESTAB (scaling %u)\n",
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011f0a:	2b02      	cmp	r3, #2
 8011f0c:	d101      	bne.n	8011f12 <prvHandleSynReceived+0x1ea>
 8011f0e:	492a      	ldr	r1, [pc, #168]	@ (8011fb8 <prvHandleSynReceived+0x290>)
 8011f10:	e000      	b.n	8011f14 <prvHandleSynReceived+0x1ec>
 8011f12:	492a      	ldr	r1, [pc, #168]	@ (8011fbc <prvHandleSynReceived+0x294>)
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011f18:	461c      	mov	r4, r3
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011f20:	461a      	mov	r2, r3
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011f28:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8011f2c:	b2db      	uxtb	r3, r3
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f107 0310 	add.w	r3, r7, #16
 8011f34:	9001      	str	r0, [sp, #4]
 8011f36:	9200      	str	r2, [sp, #0]
 8011f38:	4622      	mov	r2, r4
 8011f3a:	4821      	ldr	r0, [pc, #132]	@ (8011fc0 <prvHandleSynReceived+0x298>)
 8011f3c:	f00f fcbc 	bl	80218b8 <lUDPLoggingPrintf>
                                         pxSocket->u.xTCP.usRemotePort,
                                         ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
            }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0U ) )
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011f46:	2b02      	cmp	r3, #2
 8011f48:	d002      	beq.n	8011f50 <prvHandleSynReceived+0x228>
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d014      	beq.n	8011f7a <prvHandleSynReceived+0x252>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8011f50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f52:	2210      	movs	r2, #16
 8011f54:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8011f56:	68f8      	ldr	r0, [r7, #12]
 8011f58:	f7f7 fc10 	bl	800977c <uxIPHeaderSizeSocket>
 8011f5c:	4602      	mov	r2, r0
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	4413      	add	r3, r2
 8011f62:	3314      	adds	r3, #20
 8011f64:	643b      	str	r3, [r7, #64]	@ 0x40
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 8011f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	b2db      	uxtb	r3, r3
 8011f6e:	3314      	adds	r3, #20
 8011f70:	b2db      	uxtb	r3, r3
 8011f72:	009b      	lsls	r3, r3, #2
 8011f74:	b2da      	uxtb	r2, r3
 8011f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f78:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011f80:	f003 0310 	and.w	r3, r3, #16
 8011f84:	b2db      	uxtb	r3, r3
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d107      	bne.n	8011f9a <prvHandleSynReceived+0x272>
                {
                    /* The other party did not send a scaling factor.
                     * A shifting factor in this side must be canceled. */
                    pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
                    pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	2200      	movs	r2, #0
 8011f96:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 8011f9a:	2105      	movs	r1, #5
 8011f9c:	68f8      	ldr	r0, [r7, #12]
 8011f9e:	f7fe fc7f 	bl	80108a0 <vTCPStateChange>
        }

        return xSendLength;
 8011fa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    }
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3764      	adds	r7, #100	@ 0x64
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd90      	pop	{r4, r7, pc}
 8011fac:	08025b7c 	.word	0x08025b7c
 8011fb0:	08025b8c 	.word	0x08025b8c
 8011fb4:	08025b9c 	.word	0x08025b9c
 8011fb8:	08025bc0 	.word	0x08025bc0
 8011fbc:	08025bc8 	.word	0x08025bc8
 8011fc0:	08025bd0 	.word	0x08025bd0

08011fc4 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8011fc4:	b590      	push	{r4, r7, lr}
 8011fc6:	b097      	sub	sp, #92	@ 0x5c
 8011fc8:	af02      	add	r7, sp, #8
 8011fca:	60f8      	str	r0, [r7, #12]
 8011fcc:	60b9      	str	r1, [r7, #8]
 8011fce:	607a      	str	r2, [r7, #4]
 8011fd0:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011fd8:	68f8      	ldr	r0, [r7, #12]
 8011fda:	f7f7 fbcf 	bl	800977c <uxIPHeaderSizeSocket>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011fe2:	4423      	add	r3, r4
 8011fe4:	647b      	str	r3, [r7, #68]	@ 0x44
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011fe8:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ff4:	7b5b      	ldrb	r3, [r3, #13]
 8011ff6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 8011ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ffc:	685b      	ldr	r3, [r3, #4]
 8011ffe:	061a      	lsls	r2, r3, #24
 8012000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012002:	685b      	ldr	r3, [r3, #4]
 8012004:	021b      	lsls	r3, r3, #8
 8012006:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801200a:	431a      	orrs	r2, r3
 801200c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801200e:	685b      	ldr	r3, [r3, #4]
 8012010:	0a1b      	lsrs	r3, r3, #8
 8012012:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012016:	431a      	orrs	r2, r3
 8012018:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801201a:	685b      	ldr	r3, [r3, #4]
 801201c:	0e1b      	lsrs	r3, r3, #24
 801201e:	4313      	orrs	r3, r2
 8012020:	637b      	str	r3, [r7, #52]	@ 0x34
 8012022:	2300      	movs	r3, #0
 8012024:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 8012026:	2300      	movs	r3, #0
 8012028:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801202a:	2300      	movs	r3, #0
 801202c:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 801202e:	2300      	movs	r3, #0
 8012030:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8012032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012034:	89db      	ldrh	r3, [r3, #14]
 8012036:	b29b      	uxth	r3, r3
 8012038:	021b      	lsls	r3, r3, #8
 801203a:	b21a      	sxth	r2, r3
 801203c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801203e:	89db      	ldrh	r3, [r3, #14]
 8012040:	b29b      	uxth	r3, r3
 8012042:	0a1b      	lsrs	r3, r3, #8
 8012044:	b29b      	uxth	r3, r3
 8012046:	b21b      	sxth	r3, r3
 8012048:	4313      	orrs	r3, r2
 801204a:	b21b      	sxth	r3, r3
 801204c:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 801204e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ulWindowSize =
                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801205c:	68fa      	ldr	r2, [r7, #12]
 801205e:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8012062:	fa03 f202 	lsl.w	r2, r3, r2
            pxSocket->u.xTCP.ulWindowSize =
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) == 0U )
 801206c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8012070:	f003 0310 	and.w	r3, r3, #16
 8012074:	2b00      	cmp	r3, #0
 8012076:	f000 8106 	beq.w	8012286 <prvHandleEstablished+0x2c2>
             * be dropped
             */
        }
        else
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 801207a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801207c:	689b      	ldr	r3, [r3, #8]
 801207e:	061a      	lsls	r2, r3, #24
 8012080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012082:	689b      	ldr	r3, [r3, #8]
 8012084:	021b      	lsls	r3, r3, #8
 8012086:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801208a:	431a      	orrs	r2, r3
 801208c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801208e:	689b      	ldr	r3, [r3, #8]
 8012090:	0a1b      	lsrs	r3, r3, #8
 8012092:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012096:	431a      	orrs	r2, r3
 8012098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801209a:	689b      	ldr	r3, [r3, #8]
 801209c:	0e1b      	lsrs	r3, r3, #24
 801209e:	4313      	orrs	r3, r2
 80120a0:	4619      	mov	r1, r3
 80120a2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80120a4:	f003 feee 	bl	8015e84 <ulTCPWindowTxAck>
 80120a8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d02c      	beq.n	801210e <prvHandleEstablished+0x14a>
 80120b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d029      	beq.n	801210e <prvHandleEstablished+0x14a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80120c0:	2300      	movs	r3, #0
 80120c2:	9300      	str	r3, [sp, #0]
 80120c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120c6:	2200      	movs	r2, #0
 80120c8:	2100      	movs	r1, #0
 80120ca:	f7fe fa42 	bl	8010552 <uxStreamBufferGet>
 80120ce:	4603      	mov	r3, r0
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d01c      	beq.n	801210e <prvHandleEstablished+0x14a>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	f043 0202 	orr.w	r2, r3, #2
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80120e4:	f003 0302 	and.w	r3, r3, #2
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d005      	beq.n	80120f8 <prvHandleEstablished+0x134>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	601a      	str	r2, [r3, #0]

                    /* In case the socket owner has installed an OnSent handler,
                     * call it now. */
                    #if ( ipconfigUSE_CALLBACKS == 1 )
                    {
                        if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d005      	beq.n	801210e <prvHandleEstablished+0x14a>
                        {
                            pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012108:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801210a:	68f8      	ldr	r0, [r7, #12]
 801210c:	4798      	blx	r3
                }
            }

            /* If this socket has a stream for transmission, add the data to the
             * outgoing segment(s). */
            if( pxSocket->u.xTCP.txStream != NULL )
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012114:	2b00      	cmp	r3, #0
 8012116:	d002      	beq.n	801211e <prvHandleEstablished+0x15a>
            {
                prvTCPAddTxData( pxSocket );
 8012118:	68f8      	ldr	r0, [r7, #12]
 801211a:	f001 fb13 	bl	8013744 <prvTCPAddTxData>
            }

            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 801211e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012120:	6a1a      	ldr	r2, [r3, #32]
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801212e:	f003 0320 	and.w	r3, r3, #32
 8012132:	b2db      	uxtb	r3, r3
 8012134:	2b00      	cmp	r3, #0
 8012136:	d105      	bne.n	8012144 <prvHandleEstablished+0x180>
 8012138:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801213c:	f003 0301 	and.w	r3, r3, #1
 8012140:	2b00      	cmp	r3, #0
 8012142:	d06b      	beq.n	801221c <prvHandleEstablished+0x258>
            {
                /* Peer is requesting to stop, see if we're really finished. */
                xMayClose = pdTRUE;
 8012144:	2301      	movs	r3, #1
 8012146:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Checks are only necessary if we haven't sent a FIN yet. */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801214e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012152:	b2db      	uxtb	r3, r3
 8012154:	2b00      	cmp	r3, #0
 8012156:	d13a      	bne.n	80121ce <prvHandleEstablished+0x20a>
                {
                    /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                    bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 8012158:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801215a:	f002 fe87 	bl	8014e6c <xTCPWindowRxEmpty>
 801215e:	6238      	str	r0, [r7, #32]
                    bTxDone = xTCPWindowTxDone( pxTCPWindow );
 8012160:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012162:	f003 fafd 	bl	8015760 <xTCPWindowTxDone>
 8012166:	61f8      	str	r0, [r7, #28]

                    if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 8012168:	6a3b      	ldr	r3, [r7, #32]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d002      	beq.n	8012174 <prvHandleEstablished+0x1b0>
 801216e:	69fb      	ldr	r3, [r7, #28]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d10f      	bne.n	8012194 <prvHandleEstablished+0x1d0>
                    {
                        /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                        FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %d tx done %d\n",
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012178:	4619      	mov	r1, r3
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012180:	461a      	mov	r2, r3
 8012182:	69fb      	ldr	r3, [r7, #28]
 8012184:	9300      	str	r3, [sp, #0]
 8012186:	6a3b      	ldr	r3, [r7, #32]
 8012188:	4841      	ldr	r0, [pc, #260]	@ (8012290 <prvHandleEstablished+0x2cc>)
 801218a:	f00f fb95 	bl	80218b8 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.usRemotePort,
                                                 ( int ) bRxComplete,
                                                 ( int ) bTxDone ) );
                        xMayClose = pdFALSE;
 801218e:	2300      	movs	r3, #0
 8012190:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012192:	e01c      	b.n	80121ce <prvHandleEstablished+0x20a>
                    }
                    else
                    {
                        ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8012194:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	441a      	add	r2, r3
 801219a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801219c:	691b      	ldr	r3, [r3, #16]
 801219e:	1ad3      	subs	r3, r2, r3
 80121a0:	633b      	str	r3, [r7, #48]	@ 0x30
                        lDistance = ( int32_t ) ulIntermediateResult;
 80121a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121a4:	61bb      	str	r3, [r7, #24]

                        if( lDistance > 1 )
 80121a6:	69bb      	ldr	r3, [r7, #24]
 80121a8:	2b01      	cmp	r3, #1
 80121aa:	dd10      	ble.n	80121ce <prvHandleEstablished+0x20a>
                        {
                            FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %d (cur %u high %u)\n",
 80121ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80121ae:	691a      	ldr	r2, [r3, #16]
 80121b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80121b2:	68db      	ldr	r3, [r3, #12]
 80121b4:	1ad1      	subs	r1, r2, r3
 80121b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80121b8:	699a      	ldr	r2, [r3, #24]
 80121ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80121bc:	68db      	ldr	r3, [r3, #12]
 80121be:	1ad3      	subs	r3, r2, r3
 80121c0:	460a      	mov	r2, r1
 80121c2:	69b9      	ldr	r1, [r7, #24]
 80121c4:	4833      	ldr	r0, [pc, #204]	@ (8012294 <prvHandleEstablished+0x2d0>)
 80121c6:	f00f fb77 	bl	80218b8 <lUDPLoggingPrintf>
                                                     ( int ) lDistance,
                                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );

                            xMayClose = pdFALSE;
 80121ca:	2300      	movs	r3, #0
 80121cc:	64bb      	str	r3, [r7, #72]	@ 0x48
                        }
                    }
                }

                if( xTCPWindowLoggingLevel > 0 )
 80121ce:	4b32      	ldr	r3, [pc, #200]	@ (8012298 <prvHandleEstablished+0x2d4>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	dd11      	ble.n	80121fa <prvHandleEstablished+0x236>
                {
                    FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %d (Rx %u Len %d, Tx %u)\n",
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80121dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80121de:	1ad1      	subs	r1, r2, r3
 80121e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80121e2:	6a1a      	ldr	r2, [r3, #32]
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80121ea:	1ad3      	subs	r3, r2, r3
 80121ec:	9300      	str	r3, [sp, #0]
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	460a      	mov	r2, r1
 80121f2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80121f4:	4829      	ldr	r0, [pc, #164]	@ (801229c <prvHandleEstablished+0x2d8>)
 80121f6:	f00f fb5f 	bl	80218b8 <lUDPLoggingPrintf>
                                             ( unsigned ) ( ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulReceiveLength,
                                             ( unsigned ) ( pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) ) );
                }

                if( xMayClose != pdFALSE )
 80121fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d00d      	beq.n	801221c <prvHandleEstablished+0x258>
                {
                    pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 8012200:	68fa      	ldr	r2, [r7, #12]
 8012202:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012206:	f043 0320 	orr.w	r3, r3, #32
 801220a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 801220e:	68bb      	ldr	r3, [r7, #8]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	4619      	mov	r1, r3
 8012214:	68f8      	ldr	r0, [r7, #12]
 8012216:	f7ff fca9 	bl	8011b6c <prvTCPHandleFin>
 801221a:	64f8      	str	r0, [r7, #76]	@ 0x4c
                }
            }

            if( xMayClose == pdFALSE )
 801221c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801221e:	2b00      	cmp	r3, #0
 8012220:	d131      	bne.n	8012286 <prvHandleEstablished+0x2c2>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012224:	2210      	movs	r2, #16
 8012226:	735a      	strb	r2, [r3, #13]

                if( ulReceiveLength != 0U )
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d01d      	beq.n	801226a <prvHandleEstablished+0x2a6>
                {
                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 801222e:	68f8      	ldr	r0, [r7, #12]
 8012230:	f7f7 faa4 	bl	800977c <uxIPHeaderSizeSocket>
 8012234:	4602      	mov	r2, r0
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	4413      	add	r3, r2
 801223a:	3314      	adds	r3, #20
 801223c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 801223e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012240:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	b2db      	uxtb	r3, r3
 8012246:	3314      	adds	r3, #20
 8012248:	b2db      	uxtb	r3, r3
 801224a:	009b      	lsls	r3, r3, #2
 801224c:	b2da      	uxtb	r2, r3
 801224e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012250:	731a      	strb	r2, [r3, #12]

                    if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801225c:	b2db      	uxtb	r3, r3
 801225e:	2b00      	cmp	r3, #0
 8012260:	d003      	beq.n	801226a <prvHandleEstablished+0x2a6>
                    {
                        pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8012262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012264:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012268:	621a      	str	r2, [r3, #32]

                /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
                 * can not send-out both TCP options and also a full packet. Sending
                 * options (SACK) is always more urgent than sending data, which can be
                 * sent later. */
                if( uxOptionsLength == 0U )
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d10a      	bne.n	8012286 <prvHandleEstablished+0x2c2>
                {
                    /* prvTCPPrepareSend might allocate a bigger network buffer, if
                     * necessary. */
                    lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8012270:	683a      	ldr	r2, [r7, #0]
 8012272:	68b9      	ldr	r1, [r7, #8]
 8012274:	68f8      	ldr	r0, [r7, #12]
 8012276:	f001 f8a1 	bl	80133bc <prvTCPPrepareSend>
 801227a:	6178      	str	r0, [r7, #20]

                    if( lSendResult > 0 )
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	2b00      	cmp	r3, #0
 8012280:	dd01      	ble.n	8012286 <prvHandleEstablished+0x2c2>
                    {
                        xSendLength = ( BaseType_t ) lSendResult;
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    }
                }
            }
        }

        return xSendLength;
 8012286:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8012288:	4618      	mov	r0, r3
 801228a:	3754      	adds	r7, #84	@ 0x54
 801228c:	46bd      	mov	sp, r7
 801228e:	bd90      	pop	{r4, r7, pc}
 8012290:	08025c04 	.word	0x08025c04
 8012294:	08025c30 	.word	0x08025c30
 8012298:	20001484 	.word	0x20001484
 801229c:	08025c64 	.word	0x08025c64

080122a0 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                  NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 80122a0:	b590      	push	{r4, r7, lr}
 80122a2:	b08f      	sub	sp, #60	@ 0x3c
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
 80122a8:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80122b0:	683b      	ldr	r3, [r7, #0]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7f7 fa47 	bl	8009748 <uxIPHeaderSizePacket>
 80122ba:	4603      	mov	r3, r0
 80122bc:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80122be:	4423      	add	r3, r4
 80122c0:	633b      	str	r3, [r7, #48]	@ 0x30
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 80122c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xSendLength = 0;
 80122c6:	2300      	movs	r3, #0
 80122c8:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 80122ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122cc:	685b      	ldr	r3, [r3, #4]
 80122ce:	061a      	lsls	r2, r3, #24
 80122d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	021b      	lsls	r3, r3, #8
 80122d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80122da:	431a      	orrs	r2, r3
 80122dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122de:	685b      	ldr	r3, [r3, #4]
 80122e0:	0a1b      	lsrs	r3, r3, #8
 80122e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80122e6:	431a      	orrs	r2, r3
 80122e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122ea:	685b      	ldr	r3, [r3, #4]
 80122ec:	0e1b      	lsrs	r3, r3, #24
 80122ee:	4313      	orrs	r3, r2
 80122f0:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 80122f2:	2300      	movs	r3, #0
 80122f4:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80122f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122f8:	7b5b      	ldrb	r3, [r3, #13]
 80122fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012304:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxIntermediateResult = 0;
 8012306:	2300      	movs	r3, #0
 8012308:	61bb      	str	r3, [r7, #24]
        uint32_t ulSum;

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	f107 0208 	add.w	r2, r7, #8
 8012312:	4611      	mov	r1, r2
 8012314:	4618      	mov	r0, r3
 8012316:	f7ff fa64 	bl	80117e2 <prvCheckRxData>
 801231a:	4603      	mov	r3, r0
 801231c:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012324:	2b04      	cmp	r3, #4
 8012326:	d90c      	bls.n	8012342 <prvTCPHandleState+0xa2>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1U ) )
 8012328:	69fb      	ldr	r3, [r7, #28]
 801232a:	691a      	ldr	r2, [r3, #16]
 801232c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801232e:	3301      	adds	r3, #1
 8012330:	429a      	cmp	r2, r3
 8012332:	d106      	bne.n	8012342 <prvTCPHandleState+0xa2>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8012334:	687a      	ldr	r2, [r7, #4]
 8012336:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801233a:	f043 0301 	orr.w	r3, r3, #1
 801233e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        ulSum = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber;
 8012342:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	441a      	add	r2, r3
 8012348:	69fb      	ldr	r3, [r7, #28]
 801234a:	699b      	ldr	r3, [r3, #24]
 801234c:	1ad3      	subs	r3, r2, r3
 801234e:	613b      	str	r3, [r7, #16]

        if( ( ( int32_t ) ulSum ) > 0 )
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	2b00      	cmp	r3, #0
 8012354:	dd04      	ble.n	8012360 <prvTCPHandleState+0xc0>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8012356:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012358:	697b      	ldr	r3, [r7, #20]
 801235a:	441a      	add	r2, r3
 801235c:	69fb      	ldr	r3, [r7, #28]
 801235e:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 8012360:	68b9      	ldr	r1, [r7, #8]
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	681a      	ldr	r2, [r3, #0]
 8012366:	697b      	ldr	r3, [r7, #20]
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f7ff fae3 	bl	8011934 <prvStoreRxData>
 801236e:	4603      	mov	r3, r0
 8012370:	2b00      	cmp	r3, #0
 8012372:	da03      	bge.n	801237c <prvTCPHandleState+0xdc>
        {
            xSendLength = -1;
 8012374:	f04f 33ff 	mov.w	r3, #4294967295
 8012378:	637b      	str	r3, [r7, #52]	@ 0x34
 801237a:	e0ae      	b.n	80124da <prvTCPHandleState+0x23a>
        }
        else
        {
            eIPTCPState_t eState;

            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	4619      	mov	r1, r3
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f001 fa0c 	bl	80137a0 <prvSetOptions>
 8012388:	6278      	str	r0, [r7, #36]	@ 0x24

            if( ( pxSocket->u.xTCP.eTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012390:	2b04      	cmp	r3, #4
 8012392:	d10c      	bne.n	80123ae <prvTCPHandleState+0x10e>
 8012394:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012398:	f003 031f 	and.w	r3, r3, #31
 801239c:	2b02      	cmp	r3, #2
 801239e:	d106      	bne.n	80123ae <prvTCPHandleState+0x10e>
            {
                FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 80123a0:	4855      	ldr	r0, [pc, #340]	@ (80124f8 <prvTCPHandleState+0x258>)
 80123a2:	f00f fa89 	bl	80218b8 <lUDPLoggingPrintf>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 80123a6:	2103      	movs	r1, #3
 80123a8:	6878      	ldr	r0, [r7, #4]
 80123aa:	f7fe fa79 	bl	80108a0 <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 80123ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80123b2:	f003 0301 	and.w	r3, r3, #1
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d022      	beq.n	8012400 <prvTCPHandleState+0x160>
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80123c0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d11a      	bne.n	8012400 <prvTCPHandleState+0x160>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 80123ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	441a      	add	r2, r3
 80123d0:	69fb      	ldr	r3, [r7, #28]
 80123d2:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 80123d4:	687a      	ldr	r2, [r7, #4]
 80123d6:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80123da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123de:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80123e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123ec:	b2db      	uxtb	r3, r3
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d106      	bne.n	8012400 <prvTCPHandleState+0x160>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 80123f2:	687a      	ldr	r2, [r7, #4]
 80123f4:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80123f8:	f043 0302 	orr.w	r3, r3, #2
 80123fc:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                }
            }

            eState = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012406:	73fb      	strb	r3, [r7, #15]

            switch( eState )
 8012408:	7bfb      	ldrb	r3, [r7, #15]
 801240a:	2b0b      	cmp	r3, #11
 801240c:	d864      	bhi.n	80124d8 <prvTCPHandleState+0x238>
 801240e:	a201      	add	r2, pc, #4	@ (adr r2, 8012414 <prvTCPHandleState+0x174>)
 8012410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012414:	080124d9 	.word	0x080124d9
 8012418:	080124d9 	.word	0x080124d9
 801241c:	080124a7 	.word	0x080124a7
 8012420:	08012445 	.word	0x08012445
 8012424:	080124a7 	.word	0x080124a7
 8012428:	080124b9 	.word	0x080124b9
 801242c:	080124c9 	.word	0x080124c9
 8012430:	080124c9 	.word	0x080124c9
 8012434:	080124d9 	.word	0x080124d9
 8012438:	080124d9 	.word	0x080124d9
 801243c:	080124c9 	.word	0x080124c9
 8012440:	080124d9 	.word	0x080124d9
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 8012444:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f000 fe4e 	bl	80130e8 <prvSetSynAckOptions>
 801244c:	6278      	str	r0, [r7, #36]	@ 0x24
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 801244e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012450:	2212      	movs	r2, #18
 8012452:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f7f7 f991 	bl	800977c <uxIPHeaderSizeSocket>
 801245a:	4602      	mov	r2, r0
 801245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801245e:	4413      	add	r3, r2
 8012460:	3314      	adds	r3, #20
 8012462:	61bb      	str	r3, [r7, #24]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012464:	69bb      	ldr	r3, [r7, #24]
 8012466:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801246a:	b2db      	uxtb	r3, r3
 801246c:	3314      	adds	r3, #20
 801246e:	b2db      	uxtb	r3, r3
 8012470:	009b      	lsls	r3, r3, #2
 8012472:	b2da      	uxtb	r2, r3
 8012474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012476:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 8012478:	2104      	movs	r1, #4
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	f7fe fa10 	bl	80108a0 <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8012480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012482:	1c5a      	adds	r2, r3, #1
 8012484:	69fb      	ldr	r3, [r7, #28]
 8012486:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8012488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801248a:	1c5a      	adds	r2, r3, #1
 801248c:	69fb      	ldr	r3, [r7, #28]
 801248e:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8012490:	69fb      	ldr	r3, [r7, #28]
 8012492:	69db      	ldr	r3, [r3, #28]
 8012494:	1c5a      	adds	r2, r3, #1
 8012496:	69fb      	ldr	r3, [r7, #28]
 8012498:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U; /* because we send a TCP_SYN. */
 801249a:	69fb      	ldr	r3, [r7, #28]
 801249c:	69db      	ldr	r3, [r3, #28]
 801249e:	1c5a      	adds	r2, r3, #1
 80124a0:	69fb      	ldr	r3, [r7, #28]
 80124a2:	621a      	str	r2, [r3, #32]
                    break;
 80124a4:	e019      	b.n	80124da <prvTCPHandleState+0x23a>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	6819      	ldr	r1, [r3, #0]
 80124aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124ac:	697a      	ldr	r2, [r7, #20]
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f7ff fc3a 	bl	8011d28 <prvHandleSynReceived>
 80124b4:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 80124b6:	e010      	b.n	80124da <prvTCPHandleState+0x23a>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 80124b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124ba:	697a      	ldr	r2, [r7, #20]
 80124bc:	6839      	ldr	r1, [r7, #0]
 80124be:	6878      	ldr	r0, [r7, #4]
 80124c0:	f7ff fd80 	bl	8011fc4 <prvHandleEstablished>
 80124c4:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 80124c6:	e008      	b.n	80124da <prvTCPHandleState+0x23a>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	4619      	mov	r1, r3
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f7ff fb4c 	bl	8011b6c <prvTCPHandleFin>
 80124d4:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 80124d6:	e000      	b.n	80124da <prvTCPHandleState+0x23a>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 80124d8:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 80124da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124dc:	2b00      	cmp	r3, #0
 80124de:	dd06      	ble.n	80124ee <prvTCPHandleState+0x24e>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 80124e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124e2:	697a      	ldr	r2, [r7, #20]
 80124e4:	6839      	ldr	r1, [r7, #0]
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f001 fa1a 	bl	8013920 <prvSendData>
 80124ec:	6378      	str	r0, [r7, #52]	@ 0x34
        }

        return xSendLength;
 80124ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80124f0:	4618      	mov	r0, r3
 80124f2:	373c      	adds	r7, #60	@ 0x3c
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd90      	pop	{r4, r7, pc}
 80124f8:	08025c9c 	.word	0x08025c9c

080124fc <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b084      	sub	sp, #16
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
 8012504:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxNewSocket = NULL;
 8012506:	2300      	movs	r3, #0
 8012508:	60fb      	str	r3, [r7, #12]

        switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 801250a:	6838      	ldr	r0, [r7, #0]
 801250c:	f7f7 f91c 	bl	8009748 <uxIPHeaderSizePacket>
 8012510:	4603      	mov	r3, r0
 8012512:	2b14      	cmp	r3, #20
 8012514:	d002      	beq.n	801251c <prvHandleListen+0x20>
 8012516:	2b28      	cmp	r3, #40	@ 0x28
 8012518:	d006      	beq.n	8012528 <prvHandleListen+0x2c>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break;
 801251a:	e00b      	b.n	8012534 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV4( pxSocket, pxNetworkBuffer );
 801251c:	6839      	ldr	r1, [r7, #0]
 801251e:	6878      	ldr	r0, [r7, #4]
 8012520:	f000 f8ee 	bl	8012700 <prvHandleListen_IPV4>
 8012524:	60f8      	str	r0, [r7, #12]
                    break;
 8012526:	e005      	b.n	8012534 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV6( pxSocket, pxNetworkBuffer );
 8012528:	6839      	ldr	r1, [r7, #0]
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f000 fa10 	bl	8012950 <prvHandleListen_IPV6>
 8012530:	60f8      	str	r0, [r7, #12]
                    break;
 8012532:	bf00      	nop
        }

        return pxNewSocket;
 8012534:	68fb      	ldr	r3, [r7, #12]
    }
 8012536:	4618      	mov	r0, r3
 8012538:	3710      	adds	r7, #16
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}
	...

08012540 <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                 FreeRTOS_Socket_t * pxSocket )
    {
 8012540:	b590      	push	{r4, r7, lr}
 8012542:	b08f      	sub	sp, #60	@ 0x3c
 8012544:	af04      	add	r7, sp, #16
 8012546:	6078      	str	r0, [r7, #4]
 8012548:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	6a1a      	ldr	r2, [r3, #32]
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	621a      	str	r2, [r3, #32]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	625a      	str	r2, [r3, #36]	@ 0x24
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 8012572:	683b      	ldr	r3, [r7, #0]
 8012574:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

        #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
        {
            pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	63da      	str	r2, [r3, #60]	@ 0x3c
        #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            /* In case call-backs are used, copy them from parent to child. */
            pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            /* Child socket of listening sockets will inherit the Socket Set
             * Otherwise the owner has no chance of including it into the set. */
            if( pxSocket->pxSocketSet != NULL )
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d009      	beq.n	80125f6 <prvTCPSocketCopy+0xb6>
            {
                pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	641a      	str	r2, [r3, #64]	@ 0x40
                pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 80125ea:	683b      	ldr	r3, [r7, #0]
 80125ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80125ee:	f043 0205 	orr.w	r2, r3, #5
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        ( void ) FreeRTOS_GetLocalAddress( pxSocket, &xAddress );
 80125f6:	f107 030c 	add.w	r3, r7, #12
 80125fa:	4619      	mov	r1, r3
 80125fc:	6838      	ldr	r0, [r7, #0]
 80125fe:	f7fc fb65 	bl	800eccc <FreeRTOS_GetLocalAddress>
             * orphan temporarily.  Once this socket is really connected, the owner of
             * the server socket will be notified. */

            /* When bPassQueued is true, the socket is an orphan until it gets
             * connected. */
            pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8012602:	687a      	ldr	r2, [r7, #4]
 8012604:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8012608:	f043 0304 	orr.w	r3, r3, #4
 801260c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	683a      	ldr	r2, [r7, #0]
 8012614:	67da      	str	r2, [r3, #124]	@ 0x7c
                pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
            }
        }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801261c:	3301      	adds	r3, #1
 801261e:	b29a      	uxth	r2, r3
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

        if( pxSocket->u.xTCP.pxPeerSocket == NULL )
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801262a:	2b00      	cmp	r3, #0
 801262c:	d102      	bne.n	8012634 <prvTCPSocketCopy+0xf4>
        {
            pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	687a      	ldr	r2, [r7, #4]
 8012632:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s me: %p parent: %p peer: %p\n",
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012638:	4619      	mov	r1, r3
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012640:	4618      	mov	r0, r3
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012648:	461c      	mov	r4, r3
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012650:	2b01      	cmp	r3, #1
 8012652:	d101      	bne.n	8012658 <prvTCPSocketCopy+0x118>
 8012654:	4a17      	ldr	r2, [pc, #92]	@ (80126b4 <prvTCPSocketCopy+0x174>)
 8012656:	e000      	b.n	801265a <prvTCPSocketCopy+0x11a>
 8012658:	4a17      	ldr	r2, [pc, #92]	@ (80126b8 <prvTCPSocketCopy+0x178>)
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d002      	beq.n	8012666 <prvTCPSocketCopy+0x126>
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012664:	e000      	b.n	8012668 <prvTCPSocketCopy+0x128>
 8012666:	2300      	movs	r3, #0
 8012668:	9303      	str	r3, [sp, #12]
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	9302      	str	r3, [sp, #8]
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	9301      	str	r3, [sp, #4]
 8012672:	9200      	str	r2, [sp, #0]
 8012674:	4623      	mov	r3, r4
 8012676:	4602      	mov	r2, r0
 8012678:	4810      	ldr	r0, [pc, #64]	@ (80126bc <prvTCPSocketCopy+0x17c>)
 801267a:	f00f f91d 	bl	80218b8 <lUDPLoggingPrintf>
                                 ( void * ) pxNewSocket,
                                 ( void * ) pxSocket,
                                 pxSocket ? ( void * ) pxSocket->u.xTCP.pxPeerSocket : NULL ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 801267e:	f107 010c 	add.w	r1, r7, #12
 8012682:	2301      	movs	r3, #1
 8012684:	2218      	movs	r2, #24
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f7fb fccc 	bl	800e024 <vSocketBind>
 801268c:	4603      	mov	r3, r0
 801268e:	2b00      	cmp	r3, #0
 8012690:	d008      	beq.n	80126a4 <prvTCPSocketCopy+0x164>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 8012692:	480b      	ldr	r0, [pc, #44]	@ (80126c0 <prvTCPSocketCopy+0x180>)
 8012694:	f00f f910 	bl	80218b8 <lUDPLoggingPrintf>
            ( void ) vSocketClose( pxNewSocket );
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f7fb fd77 	bl	800e18c <vSocketClose>
            xResult = pdFALSE;
 801269e:	2300      	movs	r3, #0
 80126a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80126a2:	e001      	b.n	80126a8 <prvTCPSocketCopy+0x168>
        }
        else
        {
            xResult = pdTRUE;
 80126a4:	2301      	movs	r3, #1
 80126a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return xResult;
 80126a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80126aa:	4618      	mov	r0, r3
 80126ac:	372c      	adds	r7, #44	@ 0x2c
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bd90      	pop	{r4, r7, pc}
 80126b2:	bf00      	nop
 80126b4:	08025cdc 	.word	0x08025cdc
 80126b8:	08025ce0 	.word	0x08025ce0
 80126bc:	08025ce4 	.word	0x08025ce4
 80126c0:	08025d28 	.word	0x08025d28

080126c4 <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 80126c4:	b480      	push	{r7}
 80126c6:	b085      	sub	sp, #20
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	db02      	blt.n	80126dc <FreeRTOS_GetTCPStateName+0x18>
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	2b0c      	cmp	r3, #12
 80126da:	dd04      	ble.n	80126e6 <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 80126dc:	230d      	movs	r3, #13
 80126de:	60fb      	str	r3, [r7, #12]
                xIndex--;
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	3b01      	subs	r3, #1
 80126e4:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 80126e6:	4a05      	ldr	r2, [pc, #20]	@ (80126fc <FreeRTOS_GetTCPStateName+0x38>)
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 80126ee:	4618      	mov	r0, r3
 80126f0:	3714      	adds	r7, #20
 80126f2:	46bd      	mov	sp, r7
 80126f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f8:	4770      	bx	lr
 80126fa:	bf00      	nop
 80126fc:	08026ff0 	.word	0x08026ff0

08012700 <prvHandleListen_IPV4>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV4( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8012700:	b590      	push	{r4, r7, lr}
 8012702:	b08f      	sub	sp, #60	@ 0x3c
 8012704:	af02      	add	r7, sp, #8
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	6039      	str	r1, [r7, #0]
    /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

    const TCPPacket_t * pxTCPPacket = NULL;
 801270a:	2300      	movs	r3, #0
 801270c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 801270e:	2300      	movs	r3, #0
 8012710:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0U;
 8012712:	2300      	movs	r3, #0
 8012714:	627b      	str	r3, [r7, #36]	@ 0x24
    const NetworkEndPoint_t * pxEndpoint = NULL;
 8012716:	2300      	movs	r3, #0
 8012718:	623b      	str	r3, [r7, #32]
    BaseType_t xIsNewSocket = pdFALSE;
 801271a:	2300      	movs	r3, #0
 801271c:	61fb      	str	r3, [r7, #28]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d008      	beq.n	8012736 <prvHandleListen_IPV4+0x36>
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d005      	beq.n	8012736 <prvHandleListen_IPV4+0x36>
    {
        /* Initialize pointers if inputs are valid. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801272e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012734:	623b      	str	r3, [r7, #32]
    }

    /* Silently discard a SYN packet which was not specifically sent for this node. */
    if( ( pxEndpoint != NULL ) && ( pxTCPPacket->xIPHeader.ulDestinationIPAddress == pxEndpoint->ipv4_settings.ulIPAddress ) )
 8012736:	6a3b      	ldr	r3, [r7, #32]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d015      	beq.n	8012768 <prvHandleListen_IPV4+0x68>
 801273c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801273e:	f8d3 201e 	ldr.w	r2, [r3, #30]
 8012742:	6a3b      	ldr	r3, [r7, #32]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	429a      	cmp	r2, r3
 8012748:	d10e      	bne.n	8012768 <prvHandleListen_IPV4+0x68>
    {
        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 801274a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801274c:	f8d3 001e 	ldr.w	r0, [r3, #30]
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 8012754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012756:	f8d3 201a 	ldr.w	r2, [r3, #26]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 801275a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801275c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801275e:	b29b      	uxth	r3, r3
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 8012760:	f7ee ffa4 	bl	80016ac <ulApplicationGetNextSequenceNumber>
 8012764:	6278      	str	r0, [r7, #36]	@ 0x24
 8012766:	e001      	b.n	801276c <prvHandleListen_IPV4+0x6c>
    }
    else
    {
        /* Set the sequence number to 0 to avoid further processing. */
        ulInitialSequenceNumber = 0U;
 8012768:	2300      	movs	r3, #0
 801276a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( ulInitialSequenceNumber != 0U )
 801276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801276e:	2b00      	cmp	r3, #0
 8012770:	d059      	beq.n	8012826 <prvHandleListen_IPV4+0x126>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012778:	f003 0308 	and.w	r3, r3, #8
 801277c:	b2db      	uxtb	r3, r3
 801277e:	2b00      	cmp	r3, #0
 8012780:	d00c      	beq.n	801279c <prvHandleListen_IPV4+0x9c>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8012786:	687a      	ldr	r2, [r7, #4]
 8012788:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801278c:	f043 0304 	orr.w	r3, r3, #4
 8012790:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	687a      	ldr	r2, [r7, #4]
 8012798:	67da      	str	r2, [r3, #124]	@ 0x7c
 801279a:	e044      	b.n	8012826 <prvHandleListen_IPV4+0x126>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 801279c:	2300      	movs	r3, #0
 801279e:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80127ac:	429a      	cmp	r2, r3
 80127ae:	d31b      	bcc.n	80127e8 <prvHandleListen_IPV4+0xe8>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80127b4:	4619      	mov	r1, r3
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80127bc:	461a      	mov	r2, r3
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80127c4:	4618      	mov	r0, r3
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80127cc:	2b01      	cmp	r3, #1
 80127ce:	d101      	bne.n	80127d4 <prvHandleListen_IPV4+0xd4>
 80127d0:	4b5b      	ldr	r3, [pc, #364]	@ (8012940 <prvHandleListen_IPV4+0x240>)
 80127d2:	e000      	b.n	80127d6 <prvHandleListen_IPV4+0xd6>
 80127d4:	4b5b      	ldr	r3, [pc, #364]	@ (8012944 <prvHandleListen_IPV4+0x244>)
 80127d6:	9300      	str	r3, [sp, #0]
 80127d8:	4603      	mov	r3, r0
 80127da:	485b      	ldr	r0, [pc, #364]	@ (8012948 <prvHandleListen_IPV4+0x248>)
 80127dc:	f00f f86c 	bl	80218b8 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 80127e0:	6838      	ldr	r0, [r7, #0]
 80127e2:	f001 f9d1 	bl	8013b88 <prvTCPSendReset>
 80127e6:	e01e      	b.n	8012826 <prvHandleListen_IPV4+0x126>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 80127e8:	2206      	movs	r2, #6
 80127ea:	2101      	movs	r1, #1
 80127ec:	2002      	movs	r0, #2
 80127ee:	f7fb f8bf 	bl	800d970 <FreeRTOS_socket>
 80127f2:	6178      	str	r0, [r7, #20]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d003      	beq.n	8012802 <prvHandleListen_IPV4+0x102>
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012800:	d106      	bne.n	8012810 <prvHandleListen_IPV4+0x110>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 8012802:	4852      	ldr	r0, [pc, #328]	@ (801294c <prvHandleListen_IPV4+0x24c>)
 8012804:	f00f f858 	bl	80218b8 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012808:	6838      	ldr	r0, [r7, #0]
 801280a:	f001 f9bd 	bl	8013b88 <prvTCPSendReset>
 801280e:	e00a      	b.n	8012826 <prvHandleListen_IPV4+0x126>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 8012810:	6879      	ldr	r1, [r7, #4]
 8012812:	6978      	ldr	r0, [r7, #20]
 8012814:	f7ff fe94 	bl	8012540 <prvTCPSocketCopy>
 8012818:	4603      	mov	r3, r0
 801281a:	2b00      	cmp	r3, #0
 801281c:	d003      	beq.n	8012826 <prvHandleListen_IPV4+0x126>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8012822:	2301      	movs	r3, #1
 8012824:	61fb      	str	r3, [r7, #28]
                }
            }
        }
    }

    if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 8012826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012828:	2b00      	cmp	r3, #0
 801282a:	f000 8083 	beq.w	8012934 <prvHandleListen_IPV4+0x234>
 801282e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012830:	2b00      	cmp	r3, #0
 8012832:	d07f      	beq.n	8012934 <prvHandleListen_IPV4+0x234>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012838:	6838      	ldr	r0, [r7, #0]
 801283a:	f7f6 ff85 	bl	8009748 <uxIPHeaderSizePacket>
 801283e:	4603      	mov	r3, r0
 8012840:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8012842:	4423      	add	r3, r4
 8012844:	613b      	str	r3, [r7, #16]

            /* The endpoint in network buffer must be valid in this condition. */
            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801284a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801284c:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 801284e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012850:	7a13      	ldrb	r3, [r2, #8]
 8012852:	f36f 0300 	bfc	r3, #0, #1
 8012856:	7213      	strb	r3, [r2, #8]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8012858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801285a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801285c:	b29b      	uxth	r3, r3
 801285e:	021b      	lsls	r3, r3, #8
 8012860:	b21a      	sxth	r2, r3
 8012862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012864:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012866:	b29b      	uxth	r3, r3
 8012868:	0a1b      	lsrs	r3, r3, #8
 801286a:	b29b      	uxth	r3, r3
 801286c:	b21b      	sxth	r3, r3
 801286e:	4313      	orrs	r3, r2
 8012870:	b21b      	sxth	r3, r3
 8012872:	b29a      	uxth	r2, r3
 8012874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012876:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            pxReturn->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 801287a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801287c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012880:	061a      	lsls	r2, r3, #24
 8012882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012884:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012888:	021b      	lsls	r3, r3, #8
 801288a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801288e:	431a      	orrs	r2, r3
 8012890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012892:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012896:	0a1b      	lsrs	r3, r3, #8
 8012898:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801289c:	431a      	orrs	r2, r3
 801289e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128a0:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80128a4:	0e1b      	lsrs	r3, r3, #24
 80128a6:	431a      	orrs	r2, r3
 80128a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128aa:	655a      	str	r2, [r3, #84]	@ 0x54
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80128ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128b0:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 80128b4:	693b      	ldr	r3, [r7, #16]
 80128b6:	685b      	ldr	r3, [r3, #4]
 80128b8:	061a      	lsls	r2, r3, #24
 80128ba:	693b      	ldr	r3, [r7, #16]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	021b      	lsls	r3, r3, #8
 80128c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80128c4:	431a      	orrs	r2, r3
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	0a1b      	lsrs	r3, r3, #8
 80128cc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80128d0:	431a      	orrs	r2, r3
 80128d2:	693b      	ldr	r3, [r7, #16]
 80128d4:	685b      	ldr	r3, [r3, #4]
 80128d6:	0e1b      	lsrs	r3, r3, #24
 80128d8:	431a      	orrs	r2, r3
 80128da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128dc:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 80128e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80128e2:	f002 f877 	bl	80149d4 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 80128e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80128e8:	f000 fb66 	bl	8012fb8 <prvTCPCreateWindow>
 80128ec:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	2b01      	cmp	r3, #1
 80128f2:	d008      	beq.n	8012906 <prvHandleListen_IPV4+0x206>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 80128f4:	69fb      	ldr	r3, [r7, #28]
 80128f6:	2b01      	cmp	r3, #1
 80128f8:	d102      	bne.n	8012900 <prvHandleListen_IPV4+0x200>
                {
                    ( void ) vSocketClose( pxReturn );
 80128fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80128fc:	f7fb fc46 	bl	800e18c <vSocketClose>
                }

                pxReturn = NULL;
 8012900:	2300      	movs	r3, #0
 8012902:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 8012904:	e016      	b.n	8012934 <prvHandleListen_IPV4+0x234>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 8012906:	2103      	movs	r1, #3
 8012908:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801290a:	f7fd ffc9 	bl	80108a0 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012912:	2b5a      	cmp	r3, #90	@ 0x5a
 8012914:	d902      	bls.n	801291c <prvHandleListen_IPV4+0x21c>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 8012916:	235a      	movs	r3, #90	@ 0x5a
 8012918:	61bb      	str	r3, [r7, #24]
 801291a:	e002      	b.n	8012922 <prvHandleListen_IPV4+0x222>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012920:	61bb      	str	r3, [r7, #24]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012924:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 801292c:	69ba      	ldr	r2, [r7, #24]
 801292e:	4619      	mov	r1, r3
 8012930:	f00f f9de 	bl	8021cf0 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8012934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8012936:	4618      	mov	r0, r3
 8012938:	3734      	adds	r7, #52	@ 0x34
 801293a:	46bd      	mov	sp, r7
 801293c:	bd90      	pop	{r4, r7, pc}
 801293e:	bf00      	nop
 8012940:	08025dd0 	.word	0x08025dd0
 8012944:	08025dd4 	.word	0x08025dd4
 8012948:	08025dd8 	.word	0x08025dd8
 801294c:	08025e08 	.word	0x08025e08

08012950 <prvHandleListen_IPV6>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV6( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8012950:	b590      	push	{r4, r7, lr}
 8012952:	b08f      	sub	sp, #60	@ 0x3c
 8012954:	af02      	add	r7, sp, #8
 8012956:	6078      	str	r0, [r7, #4]
 8012958:	6039      	str	r1, [r7, #0]
    const TCPPacket_IPv6_t * pxTCPPacket = NULL;
 801295a:	2300      	movs	r3, #0
 801295c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 801295e:	2300      	movs	r3, #0
 8012960:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0;
 8012962:	2300      	movs	r3, #0
 8012964:	60bb      	str	r3, [r7, #8]
    BaseType_t xHasSequence = pdFALSE;
 8012966:	2300      	movs	r3, #0
 8012968:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xIsNewSocket = pdFALSE;
 801296a:	2300      	movs	r3, #0
 801296c:	623b      	str	r3, [r7, #32]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d024      	beq.n	80129be <prvHandleListen_IPV6+0x6e>
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d021      	beq.n	80129be <prvHandleListen_IPV6+0x6e>
        /* Map the ethernet buffer onto a TCPPacket_IPv6_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801297e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012984:	2b00      	cmp	r3, #0
 8012986:	d103      	bne.n	8012990 <prvHandleListen_IPV6+0x40>
 8012988:	215d      	movs	r1, #93	@ 0x5d
 801298a:	487b      	ldr	r0, [pc, #492]	@ (8012b78 <prvHandleListen_IPV6+0x228>)
 801298c:	f7ee fe6e 	bl	800166c <vAssertCalled>

        /* Silently discard a SYN packet which was not specifically sent for this node. */
        if( memcmp( pxTCPPacket->xIPHeader.xDestinationAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 8012990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012992:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012996:	683b      	ldr	r3, [r7, #0]
 8012998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801299a:	3338      	adds	r3, #56	@ 0x38
 801299c:	2210      	movs	r2, #16
 801299e:	4619      	mov	r1, r3
 80129a0:	f010 f93b 	bl	8022c1a <memcmp>
 80129a4:	4603      	mov	r3, r0
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d109      	bne.n	80129be <prvHandleListen_IPV6+0x6e>
        {
            /* Assume that a new Initial Sequence Number will be required. Request
             * it now in order to fail out if necessary. */
            if( xApplicationGetRandomNumber( &ulInitialSequenceNumber ) == pdPASS )
 80129aa:	f107 0308 	add.w	r3, r7, #8
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7ee ff26 	bl	8001800 <xApplicationGetRandomNumber>
 80129b4:	4603      	mov	r3, r0
 80129b6:	2b01      	cmp	r3, #1
 80129b8:	d101      	bne.n	80129be <prvHandleListen_IPV6+0x6e>
            {
                xHasSequence = pdTRUE;
 80129ba:	2301      	movs	r3, #1
 80129bc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( xHasSequence != pdFALSE )
 80129be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d059      	beq.n	8012a78 <prvHandleListen_IPV6+0x128>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80129ca:	f003 0308 	and.w	r3, r3, #8
 80129ce:	b2db      	uxtb	r3, r3
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d00c      	beq.n	80129ee <prvHandleListen_IPV6+0x9e>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 80129d8:	687a      	ldr	r2, [r7, #4]
 80129da:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80129de:	f043 0304 	orr.w	r3, r3, #4
 80129e2:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	687a      	ldr	r2, [r7, #4]
 80129ea:	67da      	str	r2, [r3, #124]	@ 0x7c
 80129ec:	e044      	b.n	8012a78 <prvHandleListen_IPV6+0x128>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 80129ee:	2300      	movs	r3, #0
 80129f0:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80129fe:	429a      	cmp	r2, r3
 8012a00:	d31b      	bcc.n	8012a3a <prvHandleListen_IPV6+0xea>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012a06:	4619      	mov	r1, r3
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012a0e:	461a      	mov	r2, r3
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012a16:	4618      	mov	r0, r3
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	d101      	bne.n	8012a26 <prvHandleListen_IPV6+0xd6>
 8012a22:	4b56      	ldr	r3, [pc, #344]	@ (8012b7c <prvHandleListen_IPV6+0x22c>)
 8012a24:	e000      	b.n	8012a28 <prvHandleListen_IPV6+0xd8>
 8012a26:	4b56      	ldr	r3, [pc, #344]	@ (8012b80 <prvHandleListen_IPV6+0x230>)
 8012a28:	9300      	str	r3, [sp, #0]
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	4855      	ldr	r0, [pc, #340]	@ (8012b84 <prvHandleListen_IPV6+0x234>)
 8012a2e:	f00e ff43 	bl	80218b8 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012a32:	6838      	ldr	r0, [r7, #0]
 8012a34:	f001 f8a8 	bl	8013b88 <prvTCPSendReset>
 8012a38:	e01e      	b.n	8012a78 <prvHandleListen_IPV6+0x128>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET6, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8012a3a:	2206      	movs	r2, #6
 8012a3c:	2101      	movs	r1, #1
 8012a3e:	200a      	movs	r0, #10
 8012a40:	f7fa ff96 	bl	800d970 <FreeRTOS_socket>
 8012a44:	61b8      	str	r0, [r7, #24]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8012a46:	69bb      	ldr	r3, [r7, #24]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d003      	beq.n	8012a54 <prvHandleListen_IPV6+0x104>
 8012a4c:	69bb      	ldr	r3, [r7, #24]
 8012a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a52:	d106      	bne.n	8012a62 <prvHandleListen_IPV6+0x112>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 8012a54:	484c      	ldr	r0, [pc, #304]	@ (8012b88 <prvHandleListen_IPV6+0x238>)
 8012a56:	f00e ff2f 	bl	80218b8 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012a5a:	6838      	ldr	r0, [r7, #0]
 8012a5c:	f001 f894 	bl	8013b88 <prvTCPSendReset>
 8012a60:	e00a      	b.n	8012a78 <prvHandleListen_IPV6+0x128>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 8012a62:	6879      	ldr	r1, [r7, #4]
 8012a64:	69b8      	ldr	r0, [r7, #24]
 8012a66:	f7ff fd6b 	bl	8012540 <prvTCPSocketCopy>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d003      	beq.n	8012a78 <prvHandleListen_IPV6+0x128>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 8012a70:	69bb      	ldr	r3, [r7, #24]
 8012a72:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8012a74:	2301      	movs	r3, #1
 8012a76:	623b      	str	r3, [r7, #32]
                }
            }
        }
    }

    if( ( xHasSequence != pdFALSE ) && ( pxReturn != NULL ) )
 8012a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d076      	beq.n	8012b6c <prvHandleListen_IPV6+0x21c>
 8012a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d073      	beq.n	8012b6c <prvHandleListen_IPV6+0x21c>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012a84:	683b      	ldr	r3, [r7, #0]
 8012a86:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012a88:	6838      	ldr	r0, [r7, #0]
 8012a8a:	f7f6 fe5d 	bl	8009748 <uxIPHeaderSizePacket>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8012a92:	4423      	add	r3, r4
 8012a94:	617b      	str	r3, [r7, #20]

            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a9c:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 8012a9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012aa0:	7a13      	ldrb	r3, [r2, #8]
 8012aa2:	f043 0301 	orr.w	r3, r3, #1
 8012aa6:	7213      	strb	r3, [r2, #8]

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012aac:	330e      	adds	r3, #14
 8012aae:	613b      	str	r3, [r7, #16]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usSourcePort );
 8012ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ab2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012ab4:	b29b      	uxth	r3, r3
 8012ab6:	021b      	lsls	r3, r3, #8
 8012ab8:	b21a      	sxth	r2, r3
 8012aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012abc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	0a1b      	lsrs	r3, r3, #8
 8012ac2:	b29b      	uxth	r3, r3
 8012ac4:	b21b      	sxth	r3, r3
 8012ac6:	4313      	orrs	r3, r2
 8012ac8:	b21b      	sxth	r3, r3
 8012aca:	b29a      	uxth	r2, r3
 8012acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ace:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            ( void ) memcpy( pxReturn->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8012ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ad4:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8012ad8:	693b      	ldr	r3, [r7, #16]
 8012ada:	3308      	adds	r3, #8
 8012adc:	2210      	movs	r2, #16
 8012ade:	4619      	mov	r1, r3
 8012ae0:	f00f f906 	bl	8021cf0 <memcpy>
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8012ae4:	68ba      	ldr	r2, [r7, #8]
 8012ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ae8:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	685b      	ldr	r3, [r3, #4]
 8012af0:	061a      	lsls	r2, r3, #24
 8012af2:	697b      	ldr	r3, [r7, #20]
 8012af4:	685b      	ldr	r3, [r3, #4]
 8012af6:	021b      	lsls	r3, r3, #8
 8012af8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012afc:	431a      	orrs	r2, r3
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	685b      	ldr	r3, [r3, #4]
 8012b02:	0a1b      	lsrs	r3, r3, #8
 8012b04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012b08:	431a      	orrs	r2, r3
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	0e1b      	lsrs	r3, r3, #24
 8012b10:	431a      	orrs	r2, r3
 8012b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b14:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 8012b18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012b1a:	f001 ff5b 	bl	80149d4 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 8012b1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012b20:	f000 fa4a 	bl	8012fb8 <prvTCPCreateWindow>
 8012b24:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	2b01      	cmp	r3, #1
 8012b2a:	d008      	beq.n	8012b3e <prvHandleListen_IPV6+0x1ee>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 8012b2c:	6a3b      	ldr	r3, [r7, #32]
 8012b2e:	2b01      	cmp	r3, #1
 8012b30:	d102      	bne.n	8012b38 <prvHandleListen_IPV6+0x1e8>
                {
                    ( void ) vSocketClose( pxReturn );
 8012b32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012b34:	f7fb fb2a 	bl	800e18c <vSocketClose>
                }

                pxReturn = NULL;
 8012b38:	2300      	movs	r3, #0
 8012b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 8012b3c:	e016      	b.n	8012b6c <prvHandleListen_IPV6+0x21c>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 8012b3e:	2103      	movs	r1, #3
 8012b40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012b42:	f7fd fead 	bl	80108a0 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 8012b46:	683b      	ldr	r3, [r7, #0]
 8012b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b4a:	2b5a      	cmp	r3, #90	@ 0x5a
 8012b4c:	d902      	bls.n	8012b54 <prvHandleListen_IPV6+0x204>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 8012b4e:	235a      	movs	r3, #90	@ 0x5a
 8012b50:	61fb      	str	r3, [r7, #28]
 8012b52:	e002      	b.n	8012b5a <prvHandleListen_IPV6+0x20a>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b58:	61fb      	str	r3, [r7, #28]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b5c:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012b64:	69fa      	ldr	r2, [r7, #28]
 8012b66:	4619      	mov	r1, r3
 8012b68:	f00f f8c2 	bl	8021cf0 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8012b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3734      	adds	r7, #52	@ 0x34
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd90      	pop	{r4, r7, pc}
 8012b76:	bf00      	nop
 8012b78:	08025e28 	.word	0x08025e28
 8012b7c:	08025e68 	.word	0x08025e68
 8012b80:	08025e6c 	.word	0x08025e6c
 8012b84:	08025e70 	.word	0x08025e70
 8012b88:	08025ea0 	.word	0x08025ea0

08012b8c <prvTCPMakeSurePrepared>:
 *         call prvTCPPrepareConnect() to continue the preparation.
 * @param[in] pxSocket The socket that wants to connect.
 * @return Returns pdTRUE if the connection is prepared, i.e. the MAC-
 *         address of the peer is already known. */
    static BaseType_t prvTCPMakeSurePrepared( FreeRTOS_Socket_t * pxSocket )
    {
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b084      	sub	sp, #16
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8012b94:	2301      	movs	r3, #1
 8012b96:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.bits.bConnPrepared == pdFALSE_UNSIGNED )
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012b9e:	f003 0308 	and.w	r3, r3, #8
 8012ba2:	b2db      	uxtb	r3, r3
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d107      	bne.n	8012bb8 <prvTCPMakeSurePrepared+0x2c>
        {
            if( prvTCPPrepareConnect( pxSocket ) != pdTRUE )
 8012ba8:	6878      	ldr	r0, [r7, #4]
 8012baa:	f000 fa51 	bl	8013050 <prvTCPPrepareConnect>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	2b01      	cmp	r3, #1
 8012bb2:	d001      	beq.n	8012bb8 <prvTCPMakeSurePrepared+0x2c>
            {
                /* The preparation of a connection ( ARP resolution ) is not yet ready. */
                xReturn = pdFALSE;
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8012bb8:	68fb      	ldr	r3, [r7, #12]
    }
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3710      	adds	r7, #16
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}
	...

08012bc4 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b088      	sub	sp, #32
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 8012bcc:	2300      	movs	r3, #0
 8012bce:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.eTCPState != eCONNECT_SYN )
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012bda:	2b02      	cmp	r3, #2
 8012bdc:	d010      	beq.n	8012c00 <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 8012bde:	2300      	movs	r3, #0
 8012be0:	60fb      	str	r3, [r7, #12]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8012be2:	f107 030c 	add.w	r3, r7, #12
 8012be6:	4619      	mov	r1, r3
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f000 f859 	bl	8012ca0 <prvTCPSendRepeated>
 8012bee:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d04d      	beq.n	8012c92 <prvTCPSendPacket+0xce>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	f003 ffb5 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
 8012bfe:	e048      	b.n	8012c92 <prvTCPSendPacket+0xce>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8012c06:	2b02      	cmp	r3, #2
 8012c08:	d90d      	bls.n	8012c26 <prvTCPSendPacket+0x62>
            {
                /* The connection is in the SYN status. The packet will be repeated
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %xip:%u\n",
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012c14:	461a      	mov	r2, r3
 8012c16:	4821      	ldr	r0, [pc, #132]	@ (8012c9c <prvTCPSendPacket+0xd8>)
 8012c18:	f00e fe4e 	bl	80218b8 <lUDPLoggingPrintf>
                                         ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012c1c:	2108      	movs	r1, #8
 8012c1e:	6878      	ldr	r0, [r7, #4]
 8012c20:	f7fd fe3e 	bl	80108a0 <vTCPStateChange>
 8012c24:	e035      	b.n	8012c92 <prvTCPSendPacket+0xce>
            }
            else if( prvTCPMakeSurePrepared( pxSocket ) == pdTRUE )
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	f7ff ffb0 	bl	8012b8c <prvTCPMakeSurePrepared>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	2b01      	cmp	r3, #1
 8012c30:	d12f      	bne.n	8012c92 <prvTCPSendPacket+0xce>
                 * the Ethernet address of the peer or the gateway is found. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	f7f6 fda2 	bl	800977c <uxIPHeaderSizeSocket>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	330e      	adds	r3, #14
 8012c3c:	33a0      	adds	r3, #160	@ 0xa0
 8012c3e:	687a      	ldr	r2, [r7, #4]
 8012c40:	4413      	add	r3, r2
 8012c42:	330a      	adds	r3, #10
 8012c44:	617b      	str	r3, [r7, #20]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 8012c46:	697b      	ldr	r3, [r7, #20]
 8012c48:	4619      	mov	r1, r3
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f000 fa4c 	bl	80130e8 <prvSetSynAckOptions>
 8012c50:	6138      	str	r0, [r7, #16]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012c52:	6878      	ldr	r0, [r7, #4]
 8012c54:	f7f6 fd92 	bl	800977c <uxIPHeaderSizeSocket>
 8012c58:	4602      	mov	r2, r0
 8012c5a:	693b      	ldr	r3, [r7, #16]
 8012c5c:	4413      	add	r3, r2
 8012c5e:	3314      	adds	r3, #20
 8012c60:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 8012c62:	69bb      	ldr	r3, [r7, #24]
 8012c64:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	b2db      	uxtb	r3, r3
 8012c6a:	3314      	adds	r3, #20
 8012c6c:	b2db      	uxtb	r3, r3
 8012c6e:	009b      	lsls	r3, r3, #2
 8012c70:	b2da      	uxtb	r2, r3
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8012c7c:	3301      	adds	r3, #1
 8012c7e:	b2da      	uxtb	r2, r3
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8012c86:	69fa      	ldr	r2, [r7, #28]
 8012c88:	2300      	movs	r3, #0
 8012c8a:	2100      	movs	r1, #0
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f000 f837 	bl	8012d00 <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8012c92:	69fb      	ldr	r3, [r7, #28]
    }
 8012c94:	4618      	mov	r0, r3
 8012c96:	3720      	adds	r7, #32
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bd80      	pop	{r7, pc}
 8012c9c:	08025ec0 	.word	0x08025ec0

08012ca0 <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b086      	sub	sp, #24
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
 8012ca8:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 8012caa:	2300      	movs	r3, #0
 8012cac:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 8012cae:	2300      	movs	r3, #0
 8012cb0:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	617b      	str	r3, [r7, #20]
 8012cb6:	e019      	b.n	8012cec <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8012cb8:	68fa      	ldr	r2, [r7, #12]
 8012cba:	6839      	ldr	r1, [r7, #0]
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f000 fb7d 	bl	80133bc <prvTCPPrepareSend>
 8012cc2:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 8012cc4:	68bb      	ldr	r3, [r7, #8]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	dd14      	ble.n	8012cf4 <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	6819      	ldr	r1, [r3, #0]
 8012cce:	68ba      	ldr	r2, [r7, #8]
 8012cd0:	2301      	movs	r3, #1
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	f000 f814 	bl	8012d00 <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                *ppxNetworkBuffer = NULL;
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	2200      	movs	r2, #0
 8012cdc:	601a      	str	r2, [r3, #0]
            }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 8012cde:	693a      	ldr	r2, [r7, #16]
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	4413      	add	r3, r2
 8012ce4:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	3301      	adds	r3, #1
 8012cea:	617b      	str	r3, [r7, #20]
 8012cec:	697b      	ldr	r3, [r7, #20]
 8012cee:	2b07      	cmp	r3, #7
 8012cf0:	d9e2      	bls.n	8012cb8 <prvTCPSendRepeated+0x18>
 8012cf2:	e000      	b.n	8012cf6 <prvTCPSendRepeated+0x56>
                break;
 8012cf4:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8012cf6:	693b      	ldr	r3, [r7, #16]
    }
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	3718      	adds	r7, #24
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}

08012d00 <prvTCPReturnPacket>:
 */
    void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                             NetworkBufferDescriptor_t * pxDescriptor,
                             uint32_t ulLen,
                             BaseType_t xReleaseAfterSend )
    {
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b086      	sub	sp, #24
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	60f8      	str	r0, [r7, #12]
 8012d08:	60b9      	str	r1, [r7, #8]
 8012d0a:	607a      	str	r2, [r7, #4]
 8012d0c:	603b      	str	r3, [r7, #0]
        const NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	613b      	str	r3, [r7, #16]
        BaseType_t xIsIPv6 = pdFALSE;
 8012d12:	2300      	movs	r3, #0
 8012d14:	617b      	str	r3, [r7, #20]

        if( pxNetworkBuffer != NULL )
 8012d16:	693b      	ldr	r3, [r7, #16]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d008      	beq.n	8012d2e <prvTCPReturnPacket+0x2e>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizePacket( pxNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER )
 8012d1c:	6938      	ldr	r0, [r7, #16]
 8012d1e:	f7f6 fd13 	bl	8009748 <uxIPHeaderSizePacket>
 8012d22:	4603      	mov	r3, r0
 8012d24:	2b28      	cmp	r3, #40	@ 0x28
 8012d26:	d113      	bne.n	8012d50 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8012d28:	2301      	movs	r3, #1
 8012d2a:	617b      	str	r3, [r7, #20]
 8012d2c:	e010      	b.n	8012d50 <prvTCPReturnPacket+0x50>
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else if( pxSocket != NULL )
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d008      	beq.n	8012d46 <prvTCPReturnPacket+0x46>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizeSocket( pxSocket ) == ipSIZE_OF_IPv6_HEADER )
 8012d34:	68f8      	ldr	r0, [r7, #12]
 8012d36:	f7f6 fd21 	bl	800977c <uxIPHeaderSizeSocket>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	2b28      	cmp	r3, #40	@ 0x28
 8012d3e:	d107      	bne.n	8012d50 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8012d40:	2301      	movs	r3, #1
 8012d42:	617b      	str	r3, [r7, #20]
 8012d44:	e004      	b.n	8012d50 <prvTCPReturnPacket+0x50>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else
        {
            /* prvTCPReturnPacket_IPVx() needs either a network buffer, or a socket. */
            configASSERT( pdFALSE );
 8012d46:	f240 1119 	movw	r1, #281	@ 0x119
 8012d4a:	480c      	ldr	r0, [pc, #48]	@ (8012d7c <prvTCPReturnPacket+0x7c>)
 8012d4c:	f7ee fc8e 	bl	800166c <vAssertCalled>
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	2b01      	cmp	r3, #1
 8012d54:	d105      	bne.n	8012d62 <prvTCPReturnPacket+0x62>
            {
                prvTCPReturnPacket_IPV6( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	687a      	ldr	r2, [r7, #4]
 8012d5a:	68b9      	ldr	r1, [r7, #8]
 8012d5c:	68f8      	ldr	r0, [r7, #12]
 8012d5e:	f001 fa61 	bl	8014224 <prvTCPReturnPacket_IPV6>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            if( xIsIPv6 == pdFALSE )
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d105      	bne.n	8012d74 <prvTCPReturnPacket+0x74>
            {
                prvTCPReturnPacket_IPV4( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	687a      	ldr	r2, [r7, #4]
 8012d6c:	68b9      	ldr	r1, [r7, #8]
 8012d6e:	68f8      	ldr	r0, [r7, #12]
 8012d70:	f000 ff18 	bl	8013ba4 <prvTCPReturnPacket_IPV4>
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
    }
 8012d74:	bf00      	nop
 8012d76:	3718      	adds	r7, #24
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}
 8012d7c:	08025edc 	.word	0x08025edc

08012d80 <prvTCPReturn_CheckTCPWindow>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_CheckTCPWindow( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      size_t uxIPHeaderSize )
    {
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b08a      	sub	sp, #40	@ 0x28
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	60f8      	str	r0, [r7, #12]
 8012d88:	60b9      	str	r1, [r7, #8]
 8012d8a:	607a      	str	r2, [r7, #4]
        /* Calculate the space in the RX buffer in order to advertise the
         * size of this socket's reception window. */
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012d92:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8012d94:	68bb      	ldr	r3, [r7, #8]
 8012d96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012d9c:	4413      	add	r3, r2
 8012d9e:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.rxStream != NULL )
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d007      	beq.n	8012dba <prvTCPReturn_CheckTCPWindow+0x3a>
        {
            /* An RX stream was created already, see how much space is
             * available. */
            ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012db0:	4618      	mov	r0, r3
 8012db2:	f7fd fa9f 	bl	80102f4 <uxStreamBufferFrontSpace>
 8012db6:	6278      	str	r0, [r7, #36]	@ 0x24
 8012db8:	e003      	b.n	8012dc2 <prvTCPReturn_CheckTCPWindow+0x42>
        }
        else
        {
            /* No RX stream has been created, the full stream size is
             * available. */
            ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012dc0:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Take the minimum of the RX buffer space and the RX window size. */
        ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 8012dc2:	69bb      	ldr	r3, [r7, #24]
 8012dc4:	685b      	ldr	r3, [r3, #4]
 8012dc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f7f7 fa0b 	bl	800a1e4 <FreeRTOS_min_uint32>
 8012dce:	6238      	str	r0, [r7, #32]

        if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012dd6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012dda:	b2db      	uxtb	r3, r3
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d107      	bne.n	8012df0 <prvTCPReturn_CheckTCPWindow+0x70>
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012de6:	f003 0304 	and.w	r3, r3, #4
 8012dea:	b2db      	uxtb	r3, r3
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d001      	beq.n	8012df4 <prvTCPReturn_CheckTCPWindow+0x74>
        {
            /* The low-water mark was reached, meaning there was little
             * space left.  The socket will wait until the application has read
             * or flushed the incoming data, and 'zero-window' will be
             * advertised. */
            ulSpace = 0U;
 8012df0:	2300      	movs	r3, #0
 8012df2:	623b      	str	r3, [r7, #32]
        }

        /* If possible, advertise an RX window size of at least 1 MSS, otherwise
         * the peer might start 'zero window probing', i.e. sending small packets
         * (1, 2, 4, 8... bytes). */
        if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	6a3b      	ldr	r3, [r7, #32]
 8012dfe:	4293      	cmp	r3, r2
 8012e00:	d20a      	bcs.n	8012e18 <prvTCPReturn_CheckTCPWindow+0x98>
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012e08:	461a      	mov	r2, r3
 8012e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e0c:	4293      	cmp	r3, r2
 8012e0e:	d303      	bcc.n	8012e18 <prvTCPReturn_CheckTCPWindow+0x98>
        {
            ulSpace = pxSocket->u.xTCP.usMSS;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012e16:	623b      	str	r3, [r7, #32]
        }

        /* Avoid overflow of the 16-bit win field. */
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8012e1e:	461a      	mov	r2, r3
 8012e20:	6a3b      	ldr	r3, [r7, #32]
 8012e22:	40d3      	lsrs	r3, r2
 8012e24:	61fb      	str	r3, [r7, #28]
        {
            ulWinSize = ulSpace;
        }
        #endif

        if( ulWinSize > 0xfffcU )
 8012e26:	69fb      	ldr	r3, [r7, #28]
 8012e28:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8012e2c:	4293      	cmp	r3, r2
 8012e2e:	d902      	bls.n	8012e36 <prvTCPReturn_CheckTCPWindow+0xb6>
        {
            ulWinSize = 0xfffcU;
 8012e30:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8012e34:	61fb      	str	r3, [r7, #28]
        }

        pxProtocolHeaders->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 8012e36:	69fb      	ldr	r3, [r7, #28]
 8012e38:	b29b      	uxth	r3, r3
 8012e3a:	021b      	lsls	r3, r3, #8
 8012e3c:	b21a      	sxth	r2, r3
 8012e3e:	69fb      	ldr	r3, [r7, #28]
 8012e40:	b29b      	uxth	r3, r3
 8012e42:	0a1b      	lsrs	r3, r3, #8
 8012e44:	b29b      	uxth	r3, r3
 8012e46:	b21b      	sxth	r3, r3
 8012e48:	4313      	orrs	r3, r2
 8012e4a:	b21b      	sxth	r3, r3
 8012e4c:	b29a      	uxth	r2, r3
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	81da      	strh	r2, [r3, #14]

        /* The new window size has been advertised, switch off the flag. */
        pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 8012e52:	68fa      	ldr	r2, [r7, #12]
 8012e54:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012e58:	f36f 0300 	bfc	r3, #0, #1
 8012e5c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Later on, when deciding to delay an ACK, a precise estimate is needed
         * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
         * highest sequence number minus 1 that the socket will accept. */
        pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 8012e60:	69bb      	ldr	r3, [r7, #24]
 8012e62:	691a      	ldr	r2, [r3, #16]
 8012e64:	6a3b      	ldr	r3, [r7, #32]
 8012e66:	441a      	add	r2, r3
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
 8012e6c:	bf00      	nop
 8012e6e:	3728      	adds	r7, #40	@ 0x28
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd80      	pop	{r7, pc}

08012e74 <prvTCPReturn_SetSequenceNumber>:
 */
    void prvTCPReturn_SetSequenceNumber( FreeRTOS_Socket_t * pxSocket,
                                         const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                         size_t uxIPHeaderSize,
                                         uint32_t ulLen )
    {
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b088      	sub	sp, #32
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	60f8      	str	r0, [r7, #12]
 8012e7c:	60b9      	str	r1, [r7, #8]
 8012e7e:	607a      	str	r2, [r7, #4]
 8012e80:	603b      	str	r3, [r7, #0]
        ProtocolHeaders_t * pxProtocolHeaders;
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012e88:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012e92:	4413      	add	r3, r2
 8012e94:	61bb      	str	r3, [r7, #24]
        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012e9c:	f003 0302 	and.w	r3, r3, #2
 8012ea0:	b2db      	uxtb	r3, r3
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d029      	beq.n	8012efa <prvTCPReturn_SetSequenceNumber+0x86>
            {
                /* Sending a keep-alive packet, send the current sequence number
                 * minus 1, which will be recognised as a keep-alive packet and
                 * responded to by acknowledging the last byte. */
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8012ea6:	68fa      	ldr	r2, [r7, #12]
 8012ea8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012eac:	f36f 0341 	bfc	r3, #1, #1
 8012eb0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 8012eb4:	68fa      	ldr	r2, [r7, #12]
 8012eb6:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012eba:	f043 0304 	orr.w	r3, r3, #4
 8012ebe:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1U;
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012ec8:	1e5a      	subs	r2, r3, #1
 8012eca:	69bb      	ldr	r3, [r7, #24]
 8012ecc:	605a      	str	r2, [r3, #4]
                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8012ece:	69bb      	ldr	r3, [r7, #24]
 8012ed0:	685b      	ldr	r3, [r3, #4]
 8012ed2:	061a      	lsls	r2, r3, #24
 8012ed4:	69bb      	ldr	r3, [r7, #24]
 8012ed6:	685b      	ldr	r3, [r3, #4]
 8012ed8:	021b      	lsls	r3, r3, #8
 8012eda:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012ede:	431a      	orrs	r2, r3
 8012ee0:	69bb      	ldr	r3, [r7, #24]
 8012ee2:	685b      	ldr	r3, [r3, #4]
 8012ee4:	0a1b      	lsrs	r3, r3, #8
 8012ee6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012eea:	431a      	orrs	r2, r3
 8012eec:	69bb      	ldr	r3, [r7, #24]
 8012eee:	685b      	ldr	r3, [r3, #4]
 8012ef0:	0e1b      	lsrs	r3, r3, #24
 8012ef2:	431a      	orrs	r2, r3
 8012ef4:	69bb      	ldr	r3, [r7, #24]
 8012ef6:	605a      	str	r2, [r3, #4]
 8012ef8:	e043      	b.n	8012f82 <prvTCPReturn_SetSequenceNumber+0x10e>
            }
            else
        #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
        {
            pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012f00:	061a      	lsls	r2, r3, #24
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012f08:	021b      	lsls	r3, r3, #8
 8012f0a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012f0e:	431a      	orrs	r2, r3
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012f16:	0a1b      	lsrs	r3, r3, #8
 8012f18:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012f1c:	431a      	orrs	r2, r3
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012f24:	0e1b      	lsrs	r3, r3, #24
 8012f26:	431a      	orrs	r2, r3
 8012f28:	69bb      	ldr	r3, [r7, #24]
 8012f2a:	605a      	str	r2, [r3, #4]

            if( ( pxProtocolHeaders->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 8012f2c:	69bb      	ldr	r3, [r7, #24]
 8012f2e:	7b5b      	ldrb	r3, [r3, #13]
 8012f30:	f003 0301 	and.w	r3, r3, #1
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d024      	beq.n	8012f82 <prvTCPReturn_SetSequenceNumber+0x10e>
            {
                /* Suppress FIN in case this packet carries earlier data to be
                 * retransmitted. */
                uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + uxIPHeaderSizeSocket( pxSocket ) ) );
 8012f38:	68f8      	ldr	r0, [r7, #12]
 8012f3a:	f7f6 fc1f 	bl	800977c <uxIPHeaderSizeSocket>
 8012f3e:	4602      	mov	r2, r0
 8012f40:	683b      	ldr	r3, [r7, #0]
 8012f42:	1a9b      	subs	r3, r3, r2
 8012f44:	3b14      	subs	r3, #20
 8012f46:	617b      	str	r3, [r7, #20]

                if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 8012f48:	69fb      	ldr	r3, [r7, #28]
 8012f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f4c:	697b      	ldr	r3, [r7, #20]
 8012f4e:	441a      	add	r2, r3
 8012f50:	69fb      	ldr	r3, [r7, #28]
 8012f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d014      	beq.n	8012f82 <prvTCPReturn_SetSequenceNumber+0x10e>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 8012f58:	69bb      	ldr	r3, [r7, #24]
 8012f5a:	7b5b      	ldrb	r3, [r3, #13]
 8012f5c:	f023 0301 	bic.w	r3, r3, #1
 8012f60:	b2da      	uxtb	r2, r3
 8012f62:	69bb      	ldr	r3, [r7, #24]
 8012f64:	735a      	strb	r2, [r3, #13]
                    FreeRTOS_debug_printf( ( "Suppress FIN for %u + %u < %u\n",
 8012f66:	69fb      	ldr	r3, [r7, #28]
 8012f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f6a:	69fb      	ldr	r3, [r7, #28]
 8012f6c:	69db      	ldr	r3, [r3, #28]
 8012f6e:	1ad1      	subs	r1, r2, r3
 8012f70:	69fb      	ldr	r3, [r7, #28]
 8012f72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012f74:	69fb      	ldr	r3, [r7, #28]
 8012f76:	69db      	ldr	r3, [r3, #28]
 8012f78:	1ad3      	subs	r3, r2, r3
 8012f7a:	697a      	ldr	r2, [r7, #20]
 8012f7c:	480d      	ldr	r0, [pc, #52]	@ (8012fb4 <prvTCPReturn_SetSequenceNumber+0x140>)
 8012f7e:	f00e fc9b 	bl	80218b8 <lUDPLoggingPrintf>
                }
            }
        }

        /* Tell which sequence number is expected next time */
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 8012f82:	69fb      	ldr	r3, [r7, #28]
 8012f84:	691b      	ldr	r3, [r3, #16]
 8012f86:	061a      	lsls	r2, r3, #24
 8012f88:	69fb      	ldr	r3, [r7, #28]
 8012f8a:	691b      	ldr	r3, [r3, #16]
 8012f8c:	021b      	lsls	r3, r3, #8
 8012f8e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012f92:	431a      	orrs	r2, r3
 8012f94:	69fb      	ldr	r3, [r7, #28]
 8012f96:	691b      	ldr	r3, [r3, #16]
 8012f98:	0a1b      	lsrs	r3, r3, #8
 8012f9a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012f9e:	431a      	orrs	r2, r3
 8012fa0:	69fb      	ldr	r3, [r7, #28]
 8012fa2:	691b      	ldr	r3, [r3, #16]
 8012fa4:	0e1b      	lsrs	r3, r3, #24
 8012fa6:	431a      	orrs	r2, r3
 8012fa8:	69bb      	ldr	r3, [r7, #24]
 8012faa:	609a      	str	r2, [r3, #8]
    }
 8012fac:	bf00      	nop
 8012fae:	3720      	adds	r7, #32
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}
 8012fb4:	08025f18 	.word	0x08025f18

08012fb8 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    BaseType_t prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 8012fb8:	b5b0      	push	{r4, r5, r7, lr}
 8012fba:	b088      	sub	sp, #32
 8012fbc:	af02      	add	r7, sp, #8
 8012fbe:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        uint32_t ulRxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxRxWinSize;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8012fc6:	617b      	str	r3, [r7, #20]
        uint32_t ulTxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxTxWinSize;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8012fce:	613b      	str	r3, [r7, #16]

        if( xTCPWindowLoggingLevel != 0 )
 8012fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8013048 <prvTCPCreateWindow+0x90>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d014      	beq.n	8013002 <prvTCPCreateWindow+0x4a>
        {
            FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8012fde:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8012fe2:	fb02 f103 	mul.w	r1, r2, r3
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012ff8:	9300      	str	r3, [sp, #0]
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	4813      	ldr	r0, [pc, #76]	@ (801304c <prvTCPCreateWindow+0x94>)
 8012ffe:	f00e fc5b 	bl	80218b8 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        xReturn = xTCPWindowCreate(
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8013008:	697b      	ldr	r3, [r7, #20]
 801300a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801300e:	fb02 f103 	mul.w	r1, r2, r3
 8013012:	693b      	ldr	r3, [r7, #16]
 8013014:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013018:	fb02 f403 	mul.w	r4, r2, r3
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	f8d3 5130 	ldr.w	r5, [r3, #304]	@ 0x130
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
            &pxSocket->u.xTCP.xTCPWindow,
            ulRxWindowSize * ipconfigTCP_MSS,
            ulTxWindowSize * ipconfigTCP_MSS,
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8013028:	687a      	ldr	r2, [r7, #4]
 801302a:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
        xReturn = xTCPWindowCreate(
 801302e:	9201      	str	r2, [sp, #4]
 8013030:	9300      	str	r3, [sp, #0]
 8013032:	462b      	mov	r3, r5
 8013034:	4622      	mov	r2, r4
 8013036:	f001 ffd7 	bl	8014fe8 <xTCPWindowCreate>
 801303a:	60f8      	str	r0, [r7, #12]

        return xReturn;
 801303c:	68fb      	ldr	r3, [r7, #12]
    }
 801303e:	4618      	mov	r0, r3
 8013040:	3718      	adds	r7, #24
 8013042:	46bd      	mov	sp, r7
 8013044:	bdb0      	pop	{r4, r5, r7, pc}
 8013046:	bf00      	nop
 8013048:	20001484 	.word	0x20001484
 801304c:	08025f38 	.word	0x08025f38

08013050 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 8013050:	b580      	push	{r7, lr}
 8013052:	b084      	sub	sp, #16
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8013058:	2301      	movs	r3, #1
 801305a:	60fb      	str	r3, [r7, #12]

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	7a1b      	ldrb	r3, [r3, #8]
 8013060:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8013064:	b2db      	uxtb	r3, r3
 8013066:	2b00      	cmp	r3, #0
 8013068:	d002      	beq.n	8013070 <prvTCPPrepareConnect+0x20>
 801306a:	2b01      	cmp	r3, #1
 801306c:	d005      	beq.n	801307a <prvTCPPrepareConnect+0x2a>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 801306e:	e009      	b.n	8013084 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV4( pxSocket );
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	f000 ff69 	bl	8013f48 <prvTCPPrepareConnect_IPV4>
 8013076:	60f8      	str	r0, [r7, #12]
                    break;
 8013078:	e004      	b.n	8013084 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV6( pxSocket );
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f001 fab4 	bl	80145e8 <prvTCPPrepareConnect_IPV6>
 8013080:	60f8      	str	r0, [r7, #12]
                    break;
 8013082:	bf00      	nop
        }

        return xReturn;
 8013084:	68fb      	ldr	r3, [r7, #12]
    }
 8013086:	4618      	mov	r0, r3
 8013088:	3710      	adds	r7, #16
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}
	...

08013090 <prvWinScaleFactor>:
 * @param[in] pxSocket The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 8013090:	b580      	push	{r7, lr}
 8013092:	b084      	sub	sp, #16
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801309e:	687a      	ldr	r2, [r7, #4]
 80130a0:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 80130a4:	fb02 f303 	mul.w	r3, r2, r3
 80130a8:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 80130aa:	2300      	movs	r3, #0
 80130ac:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffU )
 80130ae:	e005      	b.n	80130bc <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	085b      	lsrs	r3, r3, #1
 80130b4:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 80130b6:	7afb      	ldrb	r3, [r7, #11]
 80130b8:	3301      	adds	r3, #1
 80130ba:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffU )
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80130c2:	d2f5      	bcs.n	80130b0 <prvWinScaleFactor+0x20>
            }

            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80130d0:	461a      	mov	r2, r3
 80130d2:	7afb      	ldrb	r3, [r7, #11]
 80130d4:	4803      	ldr	r0, [pc, #12]	@ (80130e4 <prvWinScaleFactor+0x54>)
 80130d6:	f00e fbef 	bl	80218b8 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 80130da:	7afb      	ldrb	r3, [r7, #11]
        }
 80130dc:	4618      	mov	r0, r3
 80130de:	3710      	adds	r7, #16
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}
 80130e4:	08025f70 	.word	0x08025f70

080130e8 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                     TCPHeader_t * pxTCPHeader )
    {
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b084      	sub	sp, #16
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
 80130f0:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80130f8:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 80130fa:	683b      	ldr	r3, [r7, #0]
 80130fc:	2202      	movs	r2, #2
 80130fe:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 8013100:	683b      	ldr	r3, [r7, #0]
 8013102:	2204      	movs	r2, #4
 8013104:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 8013106:	89fb      	ldrh	r3, [r7, #14]
 8013108:	0a1b      	lsrs	r3, r3, #8
 801310a:	b29b      	uxth	r3, r3
 801310c:	b2da      	uxtb	r2, r3
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 8013112:	89fb      	ldrh	r3, [r7, #14]
 8013114:	b2da      	uxtb	r2, r3
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 801311a:	6878      	ldr	r0, [r7, #4]
 801311c:	f7ff ffb8 	bl	8013090 <prvWinScaleFactor>
 8013120:	4603      	mov	r3, r0
 8013122:	461a      	mov	r2, r3
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

            pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	2201      	movs	r2, #1
 801312e:	761a      	strb	r2, [r3, #24]
            pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	2203      	movs	r2, #3
 8013134:	765a      	strb	r2, [r3, #25]
            pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 8013136:	683b      	ldr	r3, [r7, #0]
 8013138:	2203      	movs	r2, #3
 801313a:	769a      	strb	r2, [r3, #26]
            pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	76da      	strb	r2, [r3, #27]
            uxOptionsLength = 8U;
 8013146:	2308      	movs	r3, #8
 8013148:	60bb      	str	r3, [r7, #8]
        }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 801314a:	683a      	ldr	r2, [r7, #0]
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	4413      	add	r3, r2
 8013150:	3314      	adds	r3, #20
 8013152:	2201      	movs	r2, #1
 8013154:	701a      	strb	r2, [r3, #0]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	3301      	adds	r3, #1
 801315a:	683a      	ldr	r2, [r7, #0]
 801315c:	4413      	add	r3, r2
 801315e:	2201      	movs	r2, #1
 8013160:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	3302      	adds	r3, #2
 8013166:	683a      	ldr	r2, [r7, #0]
 8013168:	4413      	add	r3, r2
 801316a:	2204      	movs	r2, #4
 801316c:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	3303      	adds	r3, #3
 8013172:	683a      	ldr	r2, [r7, #0]
 8013174:	4413      	add	r3, r2
 8013176:	2202      	movs	r2, #2
 8013178:	751a      	strb	r2, [r3, #20]
            uxOptionsLength += 4U;
 801317a:	68bb      	ldr	r3, [r7, #8]
 801317c:	3304      	adds	r3, #4
 801317e:	60bb      	str	r3, [r7, #8]
        }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 8013180:	68bb      	ldr	r3, [r7, #8]
    }
 8013182:	4618      	mov	r0, r3
 8013184:	3710      	adds	r7, #16
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
	...

0801318c <prvTCPBufferResize>:
 */
    NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                    NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                    int32_t lDataLen,
                                                    UBaseType_t uxOptionsLength )
    {
 801318c:	b580      	push	{r7, lr}
 801318e:	b088      	sub	sp, #32
 8013190:	af00      	add	r7, sp, #0
 8013192:	60f8      	str	r0, [r7, #12]
 8013194:	60b9      	str	r1, [r7, #8]
 8013196:	607a      	str	r2, [r7, #4]
 8013198:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 801319a:	4b38      	ldr	r3, [pc, #224]	@ (801327c <prvTCPBufferResize+0xf0>)
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d00b      	beq.n	80131ba <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 80131a2:	f240 53f2 	movw	r3, #1522	@ 0x5f2
 80131a6:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 80131a8:	68bb      	ldr	r3, [r7, #8]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d102      	bne.n	80131b4 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 80131ae:	2301      	movs	r3, #1
 80131b0:	617b      	str	r3, [r7, #20]
 80131b2:	e020      	b.n	80131f6 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 80131b4:	2300      	movs	r3, #0
 80131b6:	617b      	str	r3, [r7, #20]
 80131b8:	e01d      	b.n	80131f6 <prvTCPBufferResize+0x6a>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80131ba:	68f8      	ldr	r0, [r7, #12]
 80131bc:	f7f6 fade 	bl	800977c <uxIPHeaderSizeSocket>
 80131c0:	4602      	mov	r2, r0
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	4413      	add	r3, r2
 80131c6:	3322      	adds	r3, #34	@ 0x22
 80131c8:	61bb      	str	r3, [r7, #24]
            uxNeeded += ( size_t ) lDataLen;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	69ba      	ldr	r2, [r7, #24]
 80131ce:	4413      	add	r3, r2
 80131d0:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 80131d2:	69bb      	ldr	r3, [r7, #24]
 80131d4:	2b59      	cmp	r3, #89	@ 0x59
 80131d6:	d801      	bhi.n	80131dc <prvTCPBufferResize+0x50>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80131d8:	235a      	movs	r3, #90	@ 0x5a
 80131da:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 80131dc:	68bb      	ldr	r3, [r7, #8]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d004      	beq.n	80131ec <prvTCPBufferResize+0x60>
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131e6:	69ba      	ldr	r2, [r7, #24]
 80131e8:	429a      	cmp	r2, r3
 80131ea:	d902      	bls.n	80131f2 <prvTCPBufferResize+0x66>
            {
                xResize = pdTRUE;
 80131ec:	2301      	movs	r3, #1
 80131ee:	617b      	str	r3, [r7, #20]
 80131f0:	e001      	b.n	80131f6 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 80131f2:	2300      	movs	r3, #0
 80131f4:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 80131f6:	697b      	ldr	r3, [r7, #20]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d023      	beq.n	8013244 <prvTCPBufferResize+0xb8>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 80131fc:	2100      	movs	r1, #0
 80131fe:	69b8      	ldr	r0, [r7, #24]
 8013200:	f003 fc4a 	bl	8016a98 <pxGetNetworkBufferWithDescriptor>
 8013204:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 8013206:	69fb      	ldr	r3, [r7, #28]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d031      	beq.n	8013270 <prvTCPBufferResize+0xe4>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 801320c:	69fb      	ldr	r3, [r7, #28]
 801320e:	69ba      	ldr	r2, [r7, #24]
 8013210:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d00c      	beq.n	8013232 <prvTCPBufferResize+0xa6>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8013218:	69fb      	ldr	r3, [r7, #28]
 801321a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013220:	68bb      	ldr	r3, [r7, #8]
 8013222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013224:	461a      	mov	r2, r3
 8013226:	f00e fd63 	bl	8021cf0 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801322a:	68b8      	ldr	r0, [r7, #8]
 801322c:	f003 fc9c 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
 8013230:	e01e      	b.n	8013270 <prvTCPBufferResize+0xe4>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8013232:	69fb      	ldr	r3, [r7, #28]
 8013234:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	33aa      	adds	r3, #170	@ 0xaa
 801323a:	225a      	movs	r2, #90	@ 0x5a
 801323c:	4619      	mov	r1, r3
 801323e:	f00e fd57 	bl	8021cf0 <memcpy>
 8013242:	e015      	b.n	8013270 <prvTCPBufferResize+0xe4>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* LCOV_EXCL_BR_LINE this branch will not be covered, since it would never be NULL. to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 8013244:	68bb      	ldr	r3, [r7, #8]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d104      	bne.n	8013254 <prvTCPBufferResize+0xc8>
 801324a:	f240 21ca 	movw	r1, #714	@ 0x2ca
 801324e:	480c      	ldr	r0, [pc, #48]	@ (8013280 <prvTCPBufferResize+0xf4>)
 8013250:	f7ee fa0c 	bl	800166c <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 8013258:	68f8      	ldr	r0, [r7, #12]
 801325a:	f7f6 fa8f 	bl	800977c <uxIPHeaderSizeSocket>
 801325e:	4602      	mov	r2, r0
 8013260:	683b      	ldr	r3, [r7, #0]
 8013262:	441a      	add	r2, r3
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	4413      	add	r3, r2
 8013268:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        return pxReturn;
 8013270:	69fb      	ldr	r3, [r7, #28]
    }
 8013272:	4618      	mov	r0, r3
 8013274:	3720      	adds	r7, #32
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
 801327a:	bf00      	nop
 801327c:	0802703c 	.word	0x0802703c
 8013280:	08025edc 	.word	0x08025edc

08013284 <prvTCPReturn_SetEndPoint>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_SetEndPoint( const FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t * pxNetworkBuffer,
                                   size_t uxIPHeaderSize )
    {
 8013284:	b580      	push	{r7, lr}
 8013286:	b086      	sub	sp, #24
 8013288:	af00      	add	r7, sp, #0
 801328a:	60f8      	str	r0, [r7, #12]
 801328c:	60b9      	str	r1, [r7, #8]
 801328e:	607a      	str	r2, [r7, #4]
        #if ( ipconfigUSE_IPv4 != 0 )
            const IPHeader_t * pxIPHeader = NULL;
 8013290:	2300      	movs	r3, #0
 8013292:	617b      	str	r3, [r7, #20]
        #endif
        #if ( ipconfigUSE_IPv6 != 0 )
            const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 8013294:	2300      	movs	r3, #0
 8013296:	613b      	str	r3, [r7, #16]
        #endif

        if( ( pxSocket != NULL ) && ( pxSocket->pxEndPoint != NULL ) )
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d008      	beq.n	80132b0 <prvTCPReturn_SetEndPoint+0x2c>
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d004      	beq.n	80132b0 <prvTCPReturn_SetEndPoint+0x2c>
        {
            pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	631a      	str	r2, [r3, #48]	@ 0x30
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
            }
        }
    }
 80132ae:	e078      	b.n	80133a2 <prvTCPReturn_SetEndPoint+0x11e>
            FreeRTOS_printf( ( "prvTCPReturnPacket: No pxEndPoint yet?\n" ) );
 80132b0:	483e      	ldr	r0, [pc, #248]	@ (80133ac <prvTCPReturn_SetEndPoint+0x128>)
 80132b2:	f00e fb01 	bl	80218b8 <lUDPLoggingPrintf>
            switch( uxIPHeaderSize )
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	2b14      	cmp	r3, #20
 80132ba:	d003      	beq.n	80132c4 <prvTCPReturn_SetEndPoint+0x40>
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	2b28      	cmp	r3, #40	@ 0x28
 80132c0:	d03d      	beq.n	801333e <prvTCPReturn_SetEndPoint+0xba>
 80132c2:	e056      	b.n	8013372 <prvTCPReturn_SetEndPoint+0xee>
                        pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132c8:	330e      	adds	r3, #14
 80132ca:	617b      	str	r3, [r7, #20]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPHeader->ulDestinationIPAddress, 8 );
 80132cc:	697b      	ldr	r3, [r7, #20]
 80132ce:	691b      	ldr	r3, [r3, #16]
 80132d0:	2108      	movs	r1, #8
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7f9 fea8 	bl	800d028 <FreeRTOS_FindEndPointOnNetMask>
 80132d8:	4602      	mov	r2, r0
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d149      	bne.n	801337a <prvTCPReturn_SetEndPoint+0xf6>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %xip => %xip\n",
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	68db      	ldr	r3, [r3, #12]
 80132ea:	061a      	lsls	r2, r3, #24
 80132ec:	697b      	ldr	r3, [r7, #20]
 80132ee:	68db      	ldr	r3, [r3, #12]
 80132f0:	021b      	lsls	r3, r3, #8
 80132f2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80132f6:	431a      	orrs	r2, r3
 80132f8:	697b      	ldr	r3, [r7, #20]
 80132fa:	68db      	ldr	r3, [r3, #12]
 80132fc:	0a1b      	lsrs	r3, r3, #8
 80132fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013302:	431a      	orrs	r2, r3
 8013304:	697b      	ldr	r3, [r7, #20]
 8013306:	68db      	ldr	r3, [r3, #12]
 8013308:	0e1b      	lsrs	r3, r3, #24
 801330a:	ea42 0103 	orr.w	r1, r2, r3
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	691b      	ldr	r3, [r3, #16]
 8013312:	061a      	lsls	r2, r3, #24
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	691b      	ldr	r3, [r3, #16]
 8013318:	021b      	lsls	r3, r3, #8
 801331a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801331e:	431a      	orrs	r2, r3
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	691b      	ldr	r3, [r3, #16]
 8013324:	0a1b      	lsrs	r3, r3, #8
 8013326:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801332a:	431a      	orrs	r2, r3
 801332c:	697b      	ldr	r3, [r7, #20]
 801332e:	691b      	ldr	r3, [r3, #16]
 8013330:	0e1b      	lsrs	r3, r3, #24
 8013332:	4313      	orrs	r3, r2
 8013334:	461a      	mov	r2, r3
 8013336:	481e      	ldr	r0, [pc, #120]	@ (80133b0 <prvTCPReturn_SetEndPoint+0x12c>)
 8013338:	f00e fabe 	bl	80218b8 <lUDPLoggingPrintf>
                        break;
 801333c:	e01d      	b.n	801337a <prvTCPReturn_SetEndPoint+0xf6>
                        pxIPHeader_IPv6 = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013342:	330e      	adds	r3, #14
 8013344:	613b      	str	r3, [r7, #16]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( &( pxIPHeader_IPv6->xDestinationAddress ) );
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	3318      	adds	r3, #24
 801334a:	4618      	mov	r0, r3
 801334c:	f7f9 fe26 	bl	800cf9c <FreeRTOS_FindEndPointOnIP_IPv6>
 8013350:	4602      	mov	r2, r0
 8013352:	68bb      	ldr	r3, [r7, #8]
 8013354:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8013356:	68bb      	ldr	r3, [r7, #8]
 8013358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801335a:	2b00      	cmp	r3, #0
 801335c:	d10f      	bne.n	801337e <prvTCPReturn_SetEndPoint+0xfa>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %pip => %pip\n",
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	f103 0108 	add.w	r1, r3, #8
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	3318      	adds	r3, #24
 8013368:	461a      	mov	r2, r3
 801336a:	4812      	ldr	r0, [pc, #72]	@ (80133b4 <prvTCPReturn_SetEndPoint+0x130>)
 801336c:	f00e faa4 	bl	80218b8 <lUDPLoggingPrintf>
                        break;
 8013370:	e005      	b.n	801337e <prvTCPReturn_SetEndPoint+0xfa>
                    pxNetworkBuffer->pxEndPoint = NULL;
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	2200      	movs	r2, #0
 8013376:	631a      	str	r2, [r3, #48]	@ 0x30
                    break;
 8013378:	e002      	b.n	8013380 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 801337a:	bf00      	nop
 801337c:	e000      	b.n	8013380 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 801337e:	bf00      	nop
            if( pxNetworkBuffer->pxEndPoint != NULL )
 8013380:	68bb      	ldr	r3, [r7, #8]
 8013382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013384:	2b00      	cmp	r3, #0
 8013386:	d00c      	beq.n	80133a2 <prvTCPReturn_SetEndPoint+0x11e>
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
 8013388:	68bb      	ldr	r3, [r7, #8]
 801338a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801338c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8013390:	4619      	mov	r1, r3
 8013392:	68bb      	ldr	r3, [r7, #8]
 8013394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013396:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 801339a:	461a      	mov	r2, r3
 801339c:	4806      	ldr	r0, [pc, #24]	@ (80133b8 <prvTCPReturn_SetEndPoint+0x134>)
 801339e:	f00e fa8b 	bl	80218b8 <lUDPLoggingPrintf>
    }
 80133a2:	bf00      	nop
 80133a4:	3718      	adds	r7, #24
 80133a6:	46bd      	mov	sp, r7
 80133a8:	bd80      	pop	{r7, pc}
 80133aa:	bf00      	nop
 80133ac:	08025fa4 	.word	0x08025fa4
 80133b0:	08025fcc 	.word	0x08025fcc
 80133b4:	08026000 	.word	0x08026000
 80133b8:	08026034 	.word	0x08026034

080133bc <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                               NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                               UBaseType_t uxOptionsLength )
    {
 80133bc:	b580      	push	{r7, lr}
 80133be:	b096      	sub	sp, #88	@ 0x58
 80133c0:	af02      	add	r7, sp, #8
 80133c2:	60f8      	str	r0, [r7, #12]
 80133c4:	60b9      	str	r1, [r7, #8]
 80133c6:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 80133c8:	2300      	movs	r3, #0
 80133ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 80133cc:	68bb      	ldr	r3, [r7, #8]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d004      	beq.n	80133de <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 80133d4:	68bb      	ldr	r3, [r7, #8]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80133dc:	e002      	b.n	80133e4 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	33aa      	adds	r3, #170	@ 0xaa
 80133e2:	64bb      	str	r3, [r7, #72]	@ 0x48
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80133e4:	68f8      	ldr	r0, [r7, #12]
 80133e6:	f7f6 f9c9 	bl	800977c <uxIPHeaderSizeSocket>
 80133ea:	4603      	mov	r3, r0
 80133ec:	330e      	adds	r3, #14
 80133ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80133f0:	4413      	add	r3, r2
 80133f2:	647b      	str	r3, [r7, #68]	@ 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80133fa:	63bb      	str	r3, [r7, #56]	@ 0x38
        lDataLen = 0;
 80133fc:	2300      	movs	r3, #0
 80133fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
        lStreamPos = 0;
 8013400:	2300      	movs	r3, #0
 8013402:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 8013404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013406:	7b5b      	ldrb	r3, [r3, #13]
 8013408:	f043 0310 	orr.w	r3, r3, #16
 801340c:	b2da      	uxtb	r2, r3
 801340e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013410:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013418:	2b00      	cmp	r3, #0
 801341a:	f000 80a5 	beq.w	8013568 <prvTCPPrepareSend+0x1ac>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013424:	2b01      	cmp	r3, #1
 8013426:	d90a      	bls.n	801343e <prvTCPPrepareSend+0x82>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801342e:	f107 0210 	add.w	r2, r7, #16
 8013432:	4619      	mov	r1, r3
 8013434:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013436:	f002 fb13 	bl	8015a60 <ulTCPWindowTxGet>
 801343a:	4603      	mov	r3, r0
 801343c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( lDataLen > 0 )
 801343e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013440:	2b00      	cmp	r3, #0
 8013442:	f340 8091 	ble.w	8013568 <prvTCPPrepareSend+0x1ac>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	6819      	ldr	r1, [r3, #0]
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801344e:	68f8      	ldr	r0, [r7, #12]
 8013450:	f7ff fe9c 	bl	801318c <prvTCPBufferResize>
 8013454:	6378      	str	r0, [r7, #52]	@ 0x34

                if( pxNewBuffer != NULL )
 8013456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013458:	2b00      	cmp	r3, #0
 801345a:	f000 8082 	beq.w	8013562 <prvTCPPrepareSend+0x1a6>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 801345e:	68bb      	ldr	r3, [r7, #8]
 8013460:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013462:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 8013464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013468:	64bb      	str	r3, [r7, #72]	@ 0x48
                     * access to the fields. */

                    /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 801346a:	68f8      	ldr	r0, [r7, #12]
 801346c:	f7f6 f986 	bl	800977c <uxIPHeaderSizeSocket>
 8013470:	4603      	mov	r3, r0
 8013472:	330e      	adds	r3, #14
 8013474:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013476:	4413      	add	r3, r2
 8013478:	647b      	str	r3, [r7, #68]	@ 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 801347a:	68f8      	ldr	r0, [r7, #12]
 801347c:	f7f6 f97e 	bl	800977c <uxIPHeaderSizeSocket>
 8013480:	4602      	mov	r2, r0
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	4413      	add	r3, r2
 8013486:	3322      	adds	r3, #34	@ 0x22
 8013488:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801348a:	4413      	add	r3, r2
 801348c:	633b      	str	r3, [r7, #48]	@ 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	693a      	ldr	r2, [r7, #16]
 801349e:	4619      	mov	r1, r3
 80134a0:	f7fc fef9 	bl	8010296 <uxStreamBufferDistance>
 80134a4:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80134ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80134ae:	2201      	movs	r2, #1
 80134b0:	9200      	str	r2, [sp, #0]
 80134b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80134b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80134b6:	f7fd f84c 	bl	8010552 <uxStreamBufferGet>
 80134ba:	62b8      	str	r0, [r7, #40]	@ 0x28

                    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    {
                        if( ulDataGot != ( uint32_t ) lDataLen )
 80134bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80134be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80134c0:	429a      	cmp	r2, r3
 80134c2:	d007      	beq.n	80134d4 <prvTCPPrepareSend+0x118>
                        {
                            FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 80134c4:	6939      	ldr	r1, [r7, #16]
 80134c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80134c8:	9300      	str	r3, [sp, #0]
 80134ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80134ce:	4898      	ldr	r0, [pc, #608]	@ (8013730 <prvTCPPrepareSend+0x374>)
 80134d0:	f00e f9f2 	bl	80218b8 <lUDPLoggingPrintf>
                    }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80134da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80134de:	b2db      	uxtb	r3, r3
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d041      	beq.n	8013568 <prvTCPPrepareSend+0x1ac>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	4619      	mov	r1, r3
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80134f4:	689b      	ldr	r3, [r3, #8]
 80134f6:	461a      	mov	r2, r3
 80134f8:	f7fc fecd 	bl	8010296 <uxStreamBufferDistance>
 80134fc:	6278      	str	r0, [r7, #36]	@ 0x24

                        if( ulDistance == ulDataGot )
 80134fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013502:	429a      	cmp	r2, r3
 8013504:	d130      	bne.n	8013568 <prvTCPPrepareSend+0x1ac>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                /* the order of volatile accesses is undefined
                                 *  so such workaround */
                                size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801350c:	689b      	ldr	r3, [r3, #8]
 801350e:	623b      	str	r3, [r7, #32]
                                size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013516:	685b      	ldr	r3, [r3, #4]
 8013518:	61fb      	str	r3, [r7, #28]
                                size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	61bb      	str	r3, [r7, #24]

                                FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 8013524:	6a3b      	ldr	r3, [r7, #32]
 8013526:	9301      	str	r3, [sp, #4]
 8013528:	69fb      	ldr	r3, [r7, #28]
 801352a:	9300      	str	r3, [sp, #0]
 801352c:	69bb      	ldr	r3, [r7, #24]
 801352e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013530:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013532:	4880      	ldr	r0, [pc, #512]	@ (8013734 <prvTCPPrepareSend+0x378>)
 8013534:	f00e f9c0 	bl	80218b8 <lUDPLoggingPrintf>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8013538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801353a:	7b5b      	ldrb	r3, [r3, #13]
 801353c:	f043 0301 	orr.w	r3, r3, #1
 8013540:	b2da      	uxtb	r2, r3
 8013542:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013544:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8013546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801354a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801354c:	441a      	add	r2, r3
 801354e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013550:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8013552:	68fa      	ldr	r2, [r7, #12]
 8013554:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801355c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8013560:	e002      	b.n	8013568 <prvTCPPrepareSend+0x1ac>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 8013562:	f04f 33ff 	mov.w	r3, #4294967295
 8013566:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) )
 8013568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801356a:	2b00      	cmp	r3, #0
 801356c:	f2c0 8099 	blt.w	80136a2 <prvTCPPrepareSend+0x2e6>
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013576:	2b05      	cmp	r3, #5
 8013578:	f040 8093 	bne.w	80136a2 <prvTCPPrepareSend+0x2e6>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013582:	f003 0320 	and.w	r3, r3, #32
 8013586:	b2db      	uxtb	r3, r3
 8013588:	2b00      	cmp	r3, #0
 801358a:	d029      	beq.n	80135e0 <prvTCPPrepareSend+0x224>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 801358c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801358e:	f002 f8e7 	bl	8015760 <xTCPWindowTxDone>
 8013592:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8013594:	2b00      	cmp	r3, #0
 8013596:	d023      	beq.n	80135e0 <prvTCPPrepareSend+0x224>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 8013598:	68fa      	ldr	r2, [r7, #12]
 801359a:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801359e:	f36f 1345 	bfc	r3, #5, #1
 80135a2:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 80135a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80135a8:	7b5b      	ldrb	r3, [r3, #13]
 80135aa:	f043 0301 	orr.w	r3, r3, #1
 80135ae:	b2da      	uxtb	r2, r3
 80135b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80135b2:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 80135b4:	68fa      	ldr	r2, [r7, #12]
 80135b6:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80135ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80135be:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80135c2:	68fa      	ldr	r2, [r7, #12]
 80135c4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80135c8:	f043 0301 	orr.w	r3, r3, #1
 80135cc:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80135d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135d2:	6a1a      	ldr	r2, [r3, #32]
 80135d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135d6:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 80135d8:	2106      	movs	r1, #6
 80135da:	68f8      	ldr	r0, [r7, #12]
 80135dc:	f7fd f960 	bl	80108a0 <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
            {
                if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80135e6:	2b03      	cmp	r3, #3
 80135e8:	d90f      	bls.n	801360a <prvTCPPrepareSend+0x24e>
                {
                    FreeRTOS_debug_printf( ( "keep-alive: giving up %xip:%u\n",
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80135f4:	461a      	mov	r2, r3
 80135f6:	4850      	ldr	r0, [pc, #320]	@ (8013738 <prvTCPPrepareSend+0x37c>)
 80135f8:	f00e f95e 	bl	80218b8 <lUDPLoggingPrintf>
                                             ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                             pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80135fc:	2108      	movs	r1, #8
 80135fe:	68f8      	ldr	r0, [r7, #12]
 8013600:	f7fd f94e 	bl	80108a0 <vTCPStateChange>
                    lDataLen = -1;
 8013604:	f04f 33ff 	mov.w	r3, #4294967295
 8013608:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 801360a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801360c:	2b00      	cmp	r3, #0
 801360e:	d148      	bne.n	80136a2 <prvTCPPrepareSend+0x2e6>
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013616:	f003 0301 	and.w	r3, r3, #1
 801361a:	b2db      	uxtb	r3, r3
 801361c:	2b00      	cmp	r3, #0
 801361e:	d140      	bne.n	80136a2 <prvTCPPrepareSend+0x2e6>
                {
                    /* If there is no data to be sent, and no window-update message,
                     * we might want to send a keep-alive message. */
                    TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8013620:	f7f0 fcfc 	bl	800401c <xTaskGetTickCount>
 8013624:	4602      	mov	r2, r0
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801362c:	1ad3      	subs	r3, r2, r3
 801362e:	617b      	str	r3, [r7, #20]
                    TickType_t xMax;
                    xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 8013630:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8013634:	643b      	str	r3, [r7, #64]	@ 0x40

                    if( pxSocket->u.xTCP.ucKeepRepCount != 0U )
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801363c:	2b00      	cmp	r3, #0
 801363e:	d002      	beq.n	8013646 <prvTCPPrepareSend+0x28a>
                    {
                        xMax = 3U * configTICK_RATE_HZ;
 8013640:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8013644:	643b      	str	r3, [r7, #64]	@ 0x40
                    }

                    if( xAge > xMax )
 8013646:	697a      	ldr	r2, [r7, #20]
 8013648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801364a:	429a      	cmp	r2, r3
 801364c:	d929      	bls.n	80136a2 <prvTCPPrepareSend+0x2e6>
                    {
                        pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 801364e:	f7f0 fce5 	bl	800401c <xTaskGetTickCount>
 8013652:	4602      	mov	r2, r0
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        if( xTCPWindowLoggingLevel != 0 )
 801365a:	4b38      	ldr	r3, [pc, #224]	@ (801373c <prvTCPPrepareSend+0x380>)
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d00b      	beq.n	801367a <prvTCPPrepareSend+0x2be>
                        {
                            FreeRTOS_debug_printf( ( "keep-alive: %xip:%u count %u\n",
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801366c:	461a      	mov	r2, r3
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013674:	4832      	ldr	r0, [pc, #200]	@ (8013740 <prvTCPPrepareSend+0x384>)
 8013676:	f00e f91f 	bl	80218b8 <lUDPLoggingPrintf>
                                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                     pxSocket->u.xTCP.usRemotePort,
                                                     pxSocket->u.xTCP.ucKeepRepCount ) );
                        }

                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 801367a:	68fa      	ldr	r2, [r7, #12]
 801367c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013680:	f043 0302 	orr.w	r3, r3, #2
 8013684:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 801368e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                        pxSocket->u.xTCP.ucKeepRepCount++;
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013698:	3301      	adds	r3, #1
 801369a:	b2da      	uxtb	r2, r3
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                }
            }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 80136a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	db3e      	blt.n	8013726 <prvTCPPrepareSend+0x36a>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 80136a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	dc0f      	bgt.n	80136ce <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80136b4:	f003 0301 	and.w	r3, r3, #1
 80136b8:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d107      	bne.n	80136ce <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80136c4:	f003 0302 	and.w	r3, r3, #2
 80136c8:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d02b      	beq.n	8013726 <prvTCPPrepareSend+0x36a>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 80136ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136d0:	7b5b      	ldrb	r3, [r3, #13]
 80136d2:	f023 0308 	bic.w	r3, r3, #8
 80136d6:	b2da      	uxtb	r2, r3
 80136d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136da:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	b2db      	uxtb	r3, r3
 80136e0:	3314      	adds	r3, #20
 80136e2:	b2db      	uxtb	r3, r3
 80136e4:	009b      	lsls	r3, r3, #2
 80136e6:	b2da      	uxtb	r2, r3
 80136e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136ea:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 80136ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136ee:	7b5b      	ldrb	r3, [r3, #13]
 80136f0:	f043 0310 	orr.w	r3, r3, #16
 80136f4:	b2da      	uxtb	r2, r3
 80136f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136f8:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 80136fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d006      	beq.n	801370e <prvTCPPrepareSend+0x352>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 8013700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013702:	7b5b      	ldrb	r3, [r3, #13]
 8013704:	f043 0308 	orr.w	r3, r3, #8
 8013708:	b2da      	uxtb	r2, r3
 801370a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801370c:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 801370e:	68f8      	ldr	r0, [r7, #12]
 8013710:	f7f6 f834 	bl	800977c <uxIPHeaderSizeSocket>
 8013714:	4602      	mov	r2, r0
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	4413      	add	r3, r2
 801371a:	3314      	adds	r3, #20
 801371c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                lDataLen += ( int32_t ) uxIntermediateResult;
 801371e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013720:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013722:	4413      	add	r3, r2
 8013724:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

        return lDataLen;
 8013726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8013728:	4618      	mov	r0, r3
 801372a:	3750      	adds	r7, #80	@ 0x50
 801372c:	46bd      	mov	sp, r7
 801372e:	bd80      	pop	{r7, pc}
 8013730:	08026068 	.word	0x08026068
 8013734:	0802609c 	.word	0x0802609c
 8013738:	080260c4 	.word	0x080260c4
 801373c:	20001484 	.word	0x20001484
 8013740:	080260e4 	.word	0x080260e4

08013744 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket The socket owning the connection.
 */
    void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 8013744:	b580      	push	{r7, lr}
 8013746:	b084      	sub	sp, #16
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013752:	4618      	mov	r0, r3
 8013754:	f7fc fdf0 	bl	8010338 <uxStreamBufferMidSpace>
 8013758:	4603      	mov	r3, r0
 801375a:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	2b00      	cmp	r3, #0
 8013760:	dd1a      	ble.n	8013798 <prvTCPAddTxData+0x54>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8013768:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013770:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8013772:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801377a:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 801377c:	f001 ff5c 	bl	8015638 <lTCPWindowTxAdd>
 8013780:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 8013782:	68bb      	ldr	r3, [r7, #8]
 8013784:	2b00      	cmp	r3, #0
 8013786:	dd07      	ble.n	8013798 <prvTCPAddTxData+0x54>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801378e:	68ba      	ldr	r2, [r7, #8]
 8013790:	4611      	mov	r1, r2
 8013792:	4618      	mov	r0, r3
 8013794:	f7fc fdf7 	bl	8010386 <vStreamBufferMoveMid>
            }
        }
    }
 8013798:	bf00      	nop
 801379a:	3710      	adds	r7, #16
 801379c:	46bd      	mov	sp, r7
 801379e:	bd80      	pop	{r7, pc}

080137a0 <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                               const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80137a0:	b590      	push	{r4, r7, lr}
 80137a2:	b08b      	sub	sp, #44	@ 0x2c
 80137a4:	af02      	add	r7, sp, #8
 80137a6:	6078      	str	r0, [r7, #4]
 80137a8:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80137ae:	6838      	ldr	r0, [r7, #0]
 80137b0:	f7f5 ffca 	bl	8009748 <uxIPHeaderSizePacket>
 80137b4:	4603      	mov	r3, r0
 80137b6:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80137b8:	4423      	add	r3, r4
 80137ba:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80137bc:	69bb      	ldr	r3, [r7, #24]
 80137be:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80137c6:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 80137c8:	693b      	ldr	r3, [r7, #16]
 80137ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80137ce:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 80137d0:	69fb      	ldr	r3, [r7, #28]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d05c      	beq.n	8013890 <prvSetOptions+0xf0>
            {
                /* TCP options must be sent because a packet which is out-of-order
                 * was received. */
                if( xTCPWindowLoggingLevel >= 0 )
 80137d6:	4b4f      	ldr	r3, [pc, #316]	@ (8013914 <prvSetOptions+0x174>)
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	db44      	blt.n	8013868 <prvSetOptions+0xc8>
                {
                    FreeRTOS_debug_printf( ( "SACK[%u,%u]: optlen %u sending %u - %u\n",
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80137e2:	4618      	mov	r0, r3
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80137ea:	461c      	mov	r4, r3
 80137ec:	693b      	ldr	r3, [r7, #16]
 80137ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80137f2:	061a      	lsls	r2, r3, #24
 80137f4:	693b      	ldr	r3, [r7, #16]
 80137f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80137fa:	021b      	lsls	r3, r3, #8
 80137fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013800:	431a      	orrs	r2, r3
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013808:	0a1b      	lsrs	r3, r3, #8
 801380a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801380e:	431a      	orrs	r2, r3
 8013810:	693b      	ldr	r3, [r7, #16]
 8013812:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013816:	0e1b      	lsrs	r3, r3, #24
 8013818:	431a      	orrs	r2, r3
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8013820:	1ad3      	subs	r3, r2, r3
 8013822:	693a      	ldr	r2, [r7, #16]
 8013824:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013828:	0611      	lsls	r1, r2, #24
 801382a:	693a      	ldr	r2, [r7, #16]
 801382c:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013830:	0212      	lsls	r2, r2, #8
 8013832:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8013836:	4311      	orrs	r1, r2
 8013838:	693a      	ldr	r2, [r7, #16]
 801383a:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801383e:	0a12      	lsrs	r2, r2, #8
 8013840:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8013844:	4311      	orrs	r1, r2
 8013846:	693a      	ldr	r2, [r7, #16]
 8013848:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801384c:	0e12      	lsrs	r2, r2, #24
 801384e:	4311      	orrs	r1, r2
 8013850:	687a      	ldr	r2, [r7, #4]
 8013852:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8013856:	1a8a      	subs	r2, r1, r2
 8013858:	9201      	str	r2, [sp, #4]
 801385a:	9300      	str	r3, [sp, #0]
 801385c:	69fb      	ldr	r3, [r7, #28]
 801385e:	4622      	mov	r2, r4
 8013860:	4601      	mov	r1, r0
 8013862:	482d      	ldr	r0, [pc, #180]	@ (8013918 <prvSetOptions+0x178>)
 8013864:	f00e f828 	bl	80218b8 <lUDPLoggingPrintf>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 8013868:	693b      	ldr	r3, [r7, #16]
 801386a:	3380      	adds	r3, #128	@ 0x80
 801386c:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 801386e:	697b      	ldr	r3, [r7, #20]
 8013870:	3314      	adds	r3, #20
 8013872:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 8013874:	69fa      	ldr	r2, [r7, #28]
 8013876:	68f9      	ldr	r1, [r7, #12]
 8013878:	68b8      	ldr	r0, [r7, #8]
 801387a:	f00e fa39 	bl	8021cf0 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801387e:	69fb      	ldr	r3, [r7, #28]
 8013880:	b2db      	uxtb	r3, r3
 8013882:	3314      	adds	r3, #20
 8013884:	b2db      	uxtb	r3, r3
 8013886:	009b      	lsls	r3, r3, #2
 8013888:	b2da      	uxtb	r2, r3
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	731a      	strb	r2, [r3, #12]
 801388e:	e03c      	b.n	801390a <prvSetOptions+0x16a>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013896:	2b04      	cmp	r3, #4
 8013898:	d937      	bls.n	801390a <prvSetOptions+0x16a>
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80138a0:	f003 0301 	and.w	r3, r3, #1
 80138a4:	b2db      	uxtb	r3, r3
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d02f      	beq.n	801390a <prvSetOptions+0x16a>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 80138aa:	687a      	ldr	r2, [r7, #4]
 80138ac:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80138b0:	f36f 0300 	bfc	r3, #0, #1
 80138b4:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            if( xTCPWindowLoggingLevel >= 0 )
 80138b8:	4b16      	ldr	r3, [pc, #88]	@ (8013914 <prvSetOptions+0x174>)
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	db06      	blt.n	80138ce <prvSetOptions+0x12e>
            {
                FreeRTOS_debug_printf( ( "MSS: sending %u\n", pxSocket->u.xTCP.usMSS ) );
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80138c6:	4619      	mov	r1, r3
 80138c8:	4814      	ldr	r0, [pc, #80]	@ (801391c <prvSetOptions+0x17c>)
 80138ca:	f00d fff5 	bl	80218b8 <lUDPLoggingPrintf>
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	2202      	movs	r2, #2
 80138d2:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 80138d4:	697b      	ldr	r3, [r7, #20]
 80138d6:	2204      	movs	r2, #4
 80138d8:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80138e0:	0a1b      	lsrs	r3, r3, #8
 80138e2:	b29b      	uxth	r3, r3
 80138e4:	b2da      	uxtb	r2, r3
 80138e6:	697b      	ldr	r3, [r7, #20]
 80138e8:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80138f0:	b2da      	uxtb	r2, r3
 80138f2:	697b      	ldr	r3, [r7, #20]
 80138f4:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 80138f6:	2304      	movs	r3, #4
 80138f8:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80138fa:	69fb      	ldr	r3, [r7, #28]
 80138fc:	b2db      	uxtb	r3, r3
 80138fe:	3314      	adds	r3, #20
 8013900:	b2db      	uxtb	r3, r3
 8013902:	009b      	lsls	r3, r3, #2
 8013904:	b2da      	uxtb	r2, r3
 8013906:	697b      	ldr	r3, [r7, #20]
 8013908:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 801390a:	69fb      	ldr	r3, [r7, #28]
    }
 801390c:	4618      	mov	r0, r3
 801390e:	3724      	adds	r7, #36	@ 0x24
 8013910:	46bd      	mov	sp, r7
 8013912:	bd90      	pop	{r4, r7, pc}
 8013914:	20001484 	.word	0x20001484
 8013918:	08026104 	.word	0x08026104
 801391c:	0802612c 	.word	0x0802612c

08013920 <prvSendData>:
 */
    BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                            uint32_t ulReceiveLength,
                            BaseType_t xByteCount )
    {
 8013920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013922:	b093      	sub	sp, #76	@ 0x4c
 8013924:	af04      	add	r7, sp, #16
 8013926:	60f8      	str	r0, [r7, #12]
 8013928:	60b9      	str	r1, [r7, #8]
 801392a:	607a      	str	r2, [r7, #4]
 801392c:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 801392e:	68bb      	ldr	r3, [r7, #8]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013934:	68bb      	ldr	r3, [r7, #8]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	4618      	mov	r0, r3
 801393a:	f7f5 ff05 	bl	8009748 <uxIPHeaderSizePacket>
 801393e:	4603      	mov	r3, r0
 8013940:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013942:	4423      	add	r3, r4
 8013944:	633b      	str	r3, [r7, #48]	@ 0x30
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8013946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013948:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013950:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulRxBufferSpace;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* Two steps to please MISRA. */
            size_t uxSize = uxIPHeaderSizePacket( *ppxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER;
 8013956:	68bb      	ldr	r3, [r7, #8]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	4618      	mov	r0, r3
 801395c:	f7f5 fef4 	bl	8009748 <uxIPHeaderSizePacket>
 8013960:	4603      	mov	r3, r0
 8013962:	3314      	adds	r3, #20
 8013964:	627b      	str	r3, [r7, #36]	@ 0x24
            BaseType_t xSizeWithoutData = ( BaseType_t ) uxSize;
 8013966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013968:	623b      	str	r3, [r7, #32]
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801396e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013970:	691b      	ldr	r3, [r3, #16]
 8013972:	1ad3      	subs	r3, r2, r3
 8013974:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 8013976:	69fb      	ldr	r3, [r7, #28]
 8013978:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
        {
            /* An ACK may be delayed if the peer has space for at least 2 x MSS. */
            lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013980:	005b      	lsls	r3, r3, #1
 8013982:	617b      	str	r3, [r7, #20]

            /* In case we're receiving data continuously, we might postpone sending
             * an ACK to gain performance. */
            /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
            if( ( ulReceiveLength > 0U ) &&                               /* Data was sent to this socket. */
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d079      	beq.n	8013a7e <prvSendData+0x15e>
 801398a:	69ba      	ldr	r2, [r7, #24]
 801398c:	697b      	ldr	r3, [r7, #20]
 801398e:	429a      	cmp	r2, r3
 8013990:	db75      	blt.n	8013a7e <prvSendData+0x15e>
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801399c:	b2db      	uxtb	r3, r3
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d16d      	bne.n	8013a7e <prvSendData+0x15e>
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 80139a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80139a4:	6a3b      	ldr	r3, [r7, #32]
 80139a6:	429a      	cmp	r2, r3
 80139a8:	d169      	bne.n	8013a7e <prvSendData+0x15e>
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
 80139b0:	2b05      	cmp	r3, #5
 80139b2:	d164      	bne.n	8013a7e <prvSendData+0x15e>
                ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )          /* There are no other flags than an ACK. */
 80139b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139b6:	7b5b      	ldrb	r3, [r3, #13]
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 80139b8:	2b10      	cmp	r3, #16
 80139ba:	d160      	bne.n	8013a7e <prvSendData+0x15e>
            {
                uint32_t ulCurMSS = ( uint32_t ) pxSocket->u.xTCP.usMSS;
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80139c2:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80139ca:	68bb      	ldr	r3, [r7, #8]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d00f      	beq.n	80139f2 <prvSendData+0xd2>
                {
                    /* There was still a delayed in queue, delete it. */
                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d005      	beq.n	80139e8 <prvSendData+0xc8>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80139e2:	4618      	mov	r0, r3
 80139e4:	f003 f8c0 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 80139e8:	68bb      	ldr	r3, [r7, #8]
 80139ea:	681a      	ldr	r2, [r3, #0]
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }

                if( ulReceiveLength < ulCurMSS ) /* Received a small message. */
 80139f2:	687a      	ldr	r2, [r7, #4]
 80139f4:	693b      	ldr	r3, [r7, #16]
 80139f6:	429a      	cmp	r2, r3
 80139f8:	d204      	bcs.n	8013a04 <prvSendData+0xe4>
                {
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	2202      	movs	r2, #2
 80139fe:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8013a02:	e00c      	b.n	8013a1e <prvSendData+0xfe>
                else
                {
                    /* Normally a delayed ACK should wait 200 ms for a next incoming
                     * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                     * for full-size message. */
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	2214      	movs	r2, #20
 8013a08:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                    if( pxSocket->u.xTCP.usTimeout < 1U ) /* LCOV_EXCL_BR_LINE, the second branch will never be hit */
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d103      	bne.n	8013a1e <prvSendData+0xfe>
                    {
                        pxSocket->u.xTCP.usTimeout = 1U;  /* LCOV_EXCL_LINE, this line will not be reached */
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	2201      	movs	r2, #1
 8013a1a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    }
                }

                if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8013a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8013b14 <prvSendData+0x1f4>)
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	2b01      	cmp	r3, #1
 8013a24:	dd25      	ble.n	8013a72 <prvSendData+0x152>
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013a2a:	2b17      	cmp	r3, #23
 8013a2c:	d021      	beq.n	8013a72 <prvSendData+0x152>
                {
                    FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u) tmout %u d %d\n",
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013a32:	461d      	mov	r5, r3
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013a3a:	461e      	mov	r6, r3
 8013a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a3e:	691a      	ldr	r2, [r3, #16]
 8013a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a42:	68db      	ldr	r3, [r3, #12]
 8013a44:	1ad0      	subs	r0, r2, r3
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8013a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a4e:	69db      	ldr	r3, [r3, #28]
 8013a50:	1ad3      	subs	r3, r2, r3
 8013a52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013a54:	68f9      	ldr	r1, [r7, #12]
 8013a56:	f8b1 1070 	ldrh.w	r1, [r1, #112]	@ 0x70
 8013a5a:	460c      	mov	r4, r1
 8013a5c:	69b9      	ldr	r1, [r7, #24]
 8013a5e:	9103      	str	r1, [sp, #12]
 8013a60:	9402      	str	r4, [sp, #8]
 8013a62:	9201      	str	r2, [sp, #4]
 8013a64:	9300      	str	r3, [sp, #0]
 8013a66:	4603      	mov	r3, r0
 8013a68:	4632      	mov	r2, r6
 8013a6a:	4629      	mov	r1, r5
 8013a6c:	482a      	ldr	r0, [pc, #168]	@ (8013b18 <prvSendData+0x1f8>)
 8013a6e:	f00d ff23 	bl	80218b8 <lUDPLoggingPrintf>
                                             ( unsigned ) xSendLength,
                                             pxSocket->u.xTCP.usTimeout,
                                             ( int ) lRxSpace ) );
                }

                *ppxNetworkBuffer = NULL;
 8013a72:	68bb      	ldr	r3, [r7, #8]
 8013a74:	2200      	movs	r2, #0
 8013a76:	601a      	str	r2, [r3, #0]
                xSendLength = 0;
 8013a78:	2300      	movs	r3, #0
 8013a7a:	637b      	str	r3, [r7, #52]	@ 0x34
            {
 8013a7c:	e015      	b.n	8013aaa <prvSendData+0x18a>
            }
            else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d010      	beq.n	8013aaa <prvSendData+0x18a>
            {
                /* As an ACK is not being delayed, remove any earlier delayed ACK
                 * message. */
                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8013a8e:	68bb      	ldr	r3, [r7, #8]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	429a      	cmp	r2, r3
 8013a94:	d005      	beq.n	8013aa2 <prvSendData+0x182>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f003 f863 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
                }

                pxSocket->u.xTCP.pxAckMessage = NULL;
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            ( void ) pxTCPHeader;
            ( void ) lRxSpace;
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 8013aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d02b      	beq.n	8013b08 <prvSendData+0x1e8>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8013ab0:	4b18      	ldr	r3, [pc, #96]	@ (8013b14 <prvSendData+0x1f4>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	2b01      	cmp	r3, #1
 8013ab6:	dd1d      	ble.n	8013af4 <prvSendData+0x1d4>
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013abc:	2b17      	cmp	r3, #23
 8013abe:	d019      	beq.n	8013af4 <prvSendData+0x1d4>
            {
                FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %u SEQ %u (len %u)\n",
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013acc:	461c      	mov	r4, r3
 8013ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ad0:	691a      	ldr	r2, [r3, #16]
 8013ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ad4:	68db      	ldr	r3, [r3, #12]
 8013ad6:	1ad1      	subs	r1, r2, r3
 8013ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ade:	69db      	ldr	r3, [r3, #28]
 8013ae0:	1ad3      	subs	r3, r2, r3
 8013ae2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ae4:	9201      	str	r2, [sp, #4]
 8013ae6:	9300      	str	r3, [sp, #0]
 8013ae8:	460b      	mov	r3, r1
 8013aea:	4622      	mov	r2, r4
 8013aec:	4601      	mov	r1, r0
 8013aee:	480b      	ldr	r0, [pc, #44]	@ (8013b1c <prvSendData+0x1fc>)
 8013af0:	f00d fee2 	bl	80218b8 <lUDPLoggingPrintf>
                                         ( unsigned ) xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8013af4:	68bb      	ldr	r3, [r7, #8]
 8013af6:	6819      	ldr	r1, [r3, #0]
 8013af8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013afa:	2301      	movs	r3, #1
 8013afc:	68f8      	ldr	r0, [r7, #12]
 8013afe:	f7ff f8ff 	bl	8012d00 <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                /* The driver has taken ownership of the Network Buffer. */
                *ppxNetworkBuffer = NULL;
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	2200      	movs	r2, #0
 8013b06:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        return xSendLength;
 8013b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	373c      	adds	r7, #60	@ 0x3c
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b12:	bf00      	nop
 8013b14:	20001484 	.word	0x20001484
 8013b18:	08026140 	.word	0x08026140
 8013b1c:	08026178 	.word	0x08026178

08013b20 <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                              uint8_t ucTCPFlags )
    {
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b084      	sub	sp, #16
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
 8013b28:	460b      	mov	r3, r1
 8013b2a:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdTRUE;
 8013b2c:	2301      	movs	r3, #1
 8013b2e:	60fb      	str	r3, [r7, #12]
            /* Configured to ignore unknown packets just suppress a compiler warning. */
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
        {
            switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8013b30:	6878      	ldr	r0, [r7, #4]
 8013b32:	f7f5 fe09 	bl	8009748 <uxIPHeaderSizePacket>
 8013b36:	4603      	mov	r3, r0
 8013b38:	2b14      	cmp	r3, #20
 8013b3a:	d002      	beq.n	8013b42 <prvTCPSendSpecialPacketHelper+0x22>
 8013b3c:	2b28      	cmp	r3, #40	@ 0x28
 8013b3e:	d007      	beq.n	8013b50 <prvTCPSendSpecialPacketHelper+0x30>
 8013b40:	e00d      	b.n	8013b5e <prvTCPSendSpecialPacketHelper+0x3e>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipSIZE_OF_IPv4_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV4( pxNetworkBuffer, ucTCPFlags );
 8013b42:	78fb      	ldrb	r3, [r7, #3]
 8013b44:	4619      	mov	r1, r3
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	f000 fb18 	bl	801417c <prvTCPSendSpecialPktHelper_IPV4>
 8013b4c:	60f8      	str	r0, [r7, #12]
                        break;
 8013b4e:	e009      	b.n	8013b64 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case ipSIZE_OF_IPv6_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV6( pxNetworkBuffer, ucTCPFlags );
 8013b50:	78fb      	ldrb	r3, [r7, #3]
 8013b52:	4619      	mov	r1, r3
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	f000 fe8b 	bl	8014870 <prvTCPSendSpecialPktHelper_IPV6>
 8013b5a:	60f8      	str	r0, [r7, #12]
                        break;
 8013b5c:	e002      	b.n	8013b64 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    xReturn = pdFAIL;
 8013b5e:	2300      	movs	r3, #0
 8013b60:	60fb      	str	r3, [r7, #12]
                    break;
 8013b62:	bf00      	nop
            }
        }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return xReturn;
 8013b64:	68fb      	ldr	r3, [r7, #12]
    }
 8013b66:	4618      	mov	r0, r3
 8013b68:	3710      	adds	r7, #16
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	bd80      	pop	{r7, pc}

08013b6e <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013b6e:	b580      	push	{r7, lr}
 8013b70:	b082      	sub	sp, #8
 8013b72:	af00      	add	r7, sp, #0
 8013b74:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 8013b76:	2110      	movs	r1, #16
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f7ff ffd1 	bl	8013b20 <prvTCPSendSpecialPacketHelper>
 8013b7e:	4603      	mov	r3, r0
    }
 8013b80:	4618      	mov	r0, r3
 8013b82:	3708      	adds	r7, #8
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}

08013b88 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b082      	sub	sp, #8
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 8013b90:	2114      	movs	r1, #20
 8013b92:	6878      	ldr	r0, [r7, #4]
 8013b94:	f7ff ffc4 	bl	8013b20 <prvTCPSendSpecialPacketHelper>
 8013b98:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3708      	adds	r7, #8
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}
	...

08013ba4 <prvTCPReturnPacket_IPV4>:
 */
void prvTCPReturnPacket_IPV4( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b0a6      	sub	sp, #152	@ 0x98
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	60f8      	str	r0, [r7, #12]
 8013bac:	60b9      	str	r1, [r7, #8]
 8013bae:	607a      	str	r2, [r7, #4]
 8013bb0:	603b      	str	r3, [r7, #0]
    TCPPacket_t * pxTCPPacket = NULL;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8013bb8:	2300      	movs	r3, #0
 8013bba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPHeader_t * pxIPHeader = NULL;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8013bc2:	683b      	ldr	r3, [r7, #0]
 8013bc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    EthernetHeader_t * pxEthernetHeader = NULL;
 8013bc8:	2300      	movs	r3, #0
 8013bca:	67bb      	str	r3, [r7, #120]	@ 0x78
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    void * pvCopyDest = NULL;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	677b      	str	r3, [r7, #116]	@ 0x74
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv4_HEADER;
 8013bdc:	2314      	movs	r3, #20
 8013bde:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t ulDestinationIPAddress;
    eARPLookupResult_t eResult;
    NetworkEndPoint_t * pxEndPoint = NULL;
 8013be0:	2300      	movs	r3, #0
 8013be2:	617b      	str	r3, [r7, #20]

    do
    {
        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8013be4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d117      	bne.n	8013c1c <prvTCPReturnPacket_IPV4+0x78>
        {
            pxNetworkBuffer = &xTempBuffer;
 8013bec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013bf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8013bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013bf8:	2238      	movs	r2, #56	@ 0x38
 8013bfa:	2100      	movs	r1, #0
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f00e f984 	bl	8021f0a <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8013c08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c0c:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8013c0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c12:	225a      	movs	r2, #90	@ 0x5a
 8013c14:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8013c16:	2300      	movs	r3, #0
 8013c18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 8013c1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d114      	bne.n	8013c4e <prvTCPReturnPacket_IPV4+0xaa>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8013c24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c2a:	4619      	mov	r1, r3
 8013c2c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8013c30:	f7f6 f83c 	bl	8009cac <pxDuplicateNetworkBufferWithDescriptor>
 8013c34:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

                if( pxNetworkBuffer != NULL )
 8013c38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d003      	beq.n	8013c48 <prvTCPReturnPacket_IPV4+0xa4>
                {
                    xDoRelease = pdTRUE;
 8013c40:	2301      	movs	r3, #1
 8013c42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013c46:	e002      	b.n	8013c4e <prvTCPReturnPacket_IPV4+0xaa>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8013c48:	48bc      	ldr	r0, [pc, #752]	@ (8013f3c <prvTCPReturnPacket_IPV4+0x398>)
 8013c4a:	f00d fe35 	bl	80218b8 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 8013c4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	f000 8166 	beq.w	8013f24 <prvTCPReturnPacket_IPV4+0x380>
            NetworkInterface_t * pxInterface;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8013c58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c5e:	330e      	adds	r3, #14
 8013c60:	67fb      	str	r3, [r7, #124]	@ 0x7c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8013c62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8013c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013c70:	67bb      	str	r3, [r7, #120]	@ 0x78
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 8013c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013c78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013c7a:	330e      	adds	r3, #14
 8013c7c:	4413      	add	r3, r2
 8013c7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8013c82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d10b      	bne.n	8013ca4 <prvTCPReturnPacket_IPV4+0x100>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8013c8c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013c8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013c92:	68f8      	ldr	r0, [r7, #12]
 8013c94:	f7ff faf6 	bl	8013284 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8013c98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	f000 813d 	beq.w	8013f1e <prvTCPReturnPacket_IPV4+0x37a>
                    break;
                }
            }

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d028      	beq.n	8013cfc <prvTCPReturnPacket_IPV4+0x158>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8013caa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013cac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013cb0:	68f8      	ldr	r0, [r7, #12]
 8013cb2:	f7ff f865 	bl	8012d80 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013cba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013cbe:	68f8      	ldr	r0, [r7, #12]
 8013cc0:	f7ff f8d8 	bl	8012e74 <prvTCPReturn_SetSequenceNumber>
                pxIPHeader->ulDestinationIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013cc8:	061a      	lsls	r2, r3, #24
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013cce:	021b      	lsls	r3, r3, #8
 8013cd0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013cd4:	431a      	orrs	r2, r3
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013cda:	0a1b      	lsrs	r3, r3, #8
 8013cdc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013ce0:	431a      	orrs	r2, r3
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013ce6:	0e1b      	lsrs	r3, r3, #24
 8013ce8:	431a      	orrs	r2, r3
 8013cea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013cec:	611a      	str	r2, [r3, #16]
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8013cee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013cf4:	681a      	ldr	r2, [r3, #0]
 8013cf6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013cf8:	60da      	str	r2, [r3, #12]
 8013cfa:	e017      	b.n	8013d2c <prvTCPReturnPacket_IPV4+0x188>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 8013cfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013d00:	685b      	ldr	r3, [r3, #4]
 8013d02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013d08:	689a      	ldr	r2, [r3, #8]
 8013d0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013d0e:	605a      	str	r2, [r3, #4]
 8013d10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013d14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013d16:	609a      	str	r2, [r3, #8]
                vFlip_32( pxIPHeader->ulDestinationIPAddress, pxIPHeader->ulSourceIPAddress );
 8013d18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d1a:	691b      	ldr	r3, [r3, #16]
 8013d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013d1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d20:	68da      	ldr	r2, [r3, #12]
 8013d22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d24:	611a      	str	r2, [r3, #16]
 8013d26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d28:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013d2a:	60da      	str	r2, [r3, #12]
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8013d2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d2e:	2280      	movs	r2, #128	@ 0x80
 8013d30:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	b29b      	uxth	r3, r3
 8013d36:	021b      	lsls	r3, r3, #8
 8013d38:	b29a      	uxth	r2, r3
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	0a1b      	lsrs	r3, r3, #8
 8013d3e:	b29b      	uxth	r3, r3
 8013d40:	4313      	orrs	r3, r2
 8013d42:	b29a      	uxth	r2, r3
 8013d44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d46:	805a      	strh	r2, [r3, #2]

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8013d48:	4b7d      	ldr	r3, [pc, #500]	@ (8013f40 <prvTCPReturnPacket_IPV4+0x39c>)
 8013d4a:	881b      	ldrh	r3, [r3, #0]
 8013d4c:	021b      	lsls	r3, r3, #8
 8013d4e:	b21a      	sxth	r2, r3
 8013d50:	4b7b      	ldr	r3, [pc, #492]	@ (8013f40 <prvTCPReturnPacket_IPV4+0x39c>)
 8013d52:	881b      	ldrh	r3, [r3, #0]
 8013d54:	0a1b      	lsrs	r3, r3, #8
 8013d56:	b29b      	uxth	r3, r3
 8013d58:	b21b      	sxth	r3, r3
 8013d5a:	4313      	orrs	r3, r2
 8013d5c:	b21b      	sxth	r3, r3
 8013d5e:	b29a      	uxth	r2, r3
 8013d60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d62:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 8013d64:	4b76      	ldr	r3, [pc, #472]	@ (8013f40 <prvTCPReturnPacket_IPV4+0x39c>)
 8013d66:	881b      	ldrh	r3, [r3, #0]
 8013d68:	3301      	adds	r3, #1
 8013d6a:	b29a      	uxth	r2, r3
 8013d6c:	4b74      	ldr	r3, [pc, #464]	@ (8013f40 <prvTCPReturnPacket_IPV4+0x39c>)
 8013d6e:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8013d70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d72:	2200      	movs	r2, #0
 8013d74:	719a      	strb	r2, [r3, #6]
 8013d76:	2200      	movs	r2, #0
 8013d78:	71da      	strb	r2, [r3, #7]
                /* calculate the TCP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8013d7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013d7e:	781a      	ldrb	r2, [r3, #0]
 8013d80:	785b      	ldrb	r3, [r3, #1]
 8013d82:	021b      	lsls	r3, r3, #8
 8013d84:	4313      	orrs	r3, r2
 8013d86:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8013d8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013d8e:	885b      	ldrh	r3, [r3, #2]
 8013d90:	b29a      	uxth	r2, r3
 8013d92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013d96:	801a      	strh	r2, [r3, #0]
 8013d98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013d9c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8013da0:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8013da2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013da6:	687a      	ldr	r2, [r7, #4]
 8013da8:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8013daa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013db0:	f103 020e 	add.w	r2, r3, #14
 8013db4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013db8:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            pvCopySource = &pxEthernetHeader->xSourceAddress;
 8013dba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013dbc:	3306      	adds	r3, #6
 8013dbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 8013dc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013dc4:	691b      	ldr	r3, [r3, #16]
 8013dc6:	61bb      	str	r3, [r7, #24]

            eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &pxEndPoint );
 8013dc8:	f107 0214 	add.w	r2, r7, #20
 8013dcc:	f107 011c 	add.w	r1, r7, #28
 8013dd0:	f107 0318 	add.w	r3, r7, #24
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f7f2 fe9d 	bl	8006b14 <eARPGetCacheEntry>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

            if( eResult == eARPCacheHit )
 8013de0:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8013de4:	2b01      	cmp	r3, #1
 8013de6:	d108      	bne.n	8013dfa <prvTCPReturnPacket_IPV4+0x256>
            {
                pvCopySource = &xMACAddress;
 8013de8:	f107 031c 	add.w	r3, r7, #28
 8013dec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8013df0:	697a      	ldr	r2, [r7, #20]
 8013df2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013df6:	631a      	str	r2, [r3, #48]	@ 0x30
 8013df8:	e003      	b.n	8013e02 <prvTCPReturnPacket_IPV4+0x25e>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8013dfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013dfc:	3306      	adds	r3, #6
 8013dfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            }

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8013e02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	f000 808a 	beq.w	8013f22 <prvTCPReturnPacket_IPV4+0x37e>
            {
                break;
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8013e0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013e10:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8013e12:	2206      	movs	r2, #6
 8013e14:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8013e18:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8013e1a:	f00d ff69 	bl	8021cf0 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8013e1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e24:	33e8      	adds	r3, #232	@ 0xe8
 8013e26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8013e2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013e2c:	3306      	adds	r3, #6
 8013e2e:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8013e30:	2206      	movs	r2, #6
 8013e32:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8013e36:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8013e38:	f00d ff5a 	bl	8021cf0 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8013e3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e42:	2b3b      	cmp	r3, #59	@ 0x3b
 8013e44:	d81a      	bhi.n	8013e7c <prvTCPReturnPacket_IPV4+0x2d8>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8013e46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013e50:	e00c      	b.n	8013e6c <prvTCPReturnPacket_IPV4+0x2c8>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8013e52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013e5c:	4413      	add	r3, r2
 8013e5e:	2200      	movs	r2, #0
 8013e60:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8013e62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013e66:	3301      	adds	r3, #1
 8013e68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013e70:	2b3b      	cmp	r3, #59	@ 0x3b
 8013e72:	ddee      	ble.n	8013e52 <prvTCPReturnPacket_IPV4+0x2ae>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8013e74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e78:	223c      	movs	r2, #60	@ 0x3c
 8013e7a:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 8013e7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e82:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d104      	bne.n	8013e94 <prvTCPReturnPacket_IPV4+0x2f0>
 8013e8a:	f240 111d 	movw	r1, #285	@ 0x11d
 8013e8e:	482d      	ldr	r0, [pc, #180]	@ (8013f44 <prvTCPReturnPacket_IPV4+0x3a0>)
 8013e90:	f7ed fbec 	bl	800166c <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8013e94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e9a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013e9e:	68db      	ldr	r3, [r3, #12]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d104      	bne.n	8013eae <prvTCPReturnPacket_IPV4+0x30a>
 8013ea4:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8013ea8:	4826      	ldr	r0, [pc, #152]	@ (8013f44 <prvTCPReturnPacket_IPV4+0x3a0>)
 8013eaa:	f7ed fbdf 	bl	800166c <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8013eae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013eb4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013eb8:	663b      	str	r3, [r7, #96]	@ 0x60
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8013eba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013ebc:	68db      	ldr	r3, [r3, #12]
 8013ebe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013ec2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013ec6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8013ec8:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8013eca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d121      	bne.n	8013f16 <prvTCPReturnPacket_IPV4+0x372>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8013ed2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013ed6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8013eda:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8013ede:	021b      	lsls	r3, r3, #8
 8013ee0:	4313      	orrs	r3, r2
 8013ee2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8013ee6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013eea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013eec:	b29a      	uxth	r2, r3
 8013eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013ef2:	845a      	strh	r2, [r3, #34]	@ 0x22
 8013ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013ef8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8013efc:	849a      	strh	r2, [r3, #36]	@ 0x24

                pxIPHeader->ulSourceIPAddress = pxIPHeader->ulDestinationIPAddress;
 8013efe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013f00:	691a      	ldr	r2, [r3, #16]
 8013f02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013f04:	60da      	str	r2, [r3, #12]

                ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8013f06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f08:	3306      	adds	r3, #6
 8013f0a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8013f0c:	2206      	movs	r2, #6
 8013f0e:	4618      	mov	r0, r3
 8013f10:	f00d feee 	bl	8021cf0 <memcpy>
 8013f14:	e006      	b.n	8013f24 <prvTCPReturnPacket_IPV4+0x380>
            }
            else
            {
                xDoRelease = pdFALSE;
 8013f16:	2300      	movs	r3, #0
 8013f18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013f1c:	e002      	b.n	8013f24 <prvTCPReturnPacket_IPV4+0x380>
                    break;
 8013f1e:	bf00      	nop
 8013f20:	e000      	b.n	8013f24 <prvTCPReturnPacket_IPV4+0x380>
                break;
 8013f22:	bf00      	nop
                /* The buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );

    if( xDoRelease == pdTRUE )
 8013f24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013f28:	2b01      	cmp	r3, #1
 8013f2a:	d103      	bne.n	8013f34 <prvTCPReturnPacket_IPV4+0x390>
    {
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8013f2c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8013f30:	f002 fe1a 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
    }
}
 8013f34:	bf00      	nop
 8013f36:	3798      	adds	r7, #152	@ 0x98
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}
 8013f3c:	080261a4 	.word	0x080261a4
 8013f40:	20000fdc 	.word	0x20000fdc
 8013f44:	080261cc 	.word	0x080261cc

08013f48 <prvTCPPrepareConnect_IPV4>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8013f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f4a:	b093      	sub	sp, #76	@ 0x4c
 8013f4c:	af06      	add	r7, sp, #24
 8013f4e:	6078      	str	r0, [r7, #4]
    TCPPacket_t * pxTCPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8013f50:	2301      	movs	r3, #1
 8013f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t ulInitialSequenceNumber = 0;
 8013f54:	2300      	movs	r3, #0
 8013f56:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8013f58:	f107 030c 	add.w	r3, r7, #12
 8013f5c:	2206      	movs	r2, #6
 8013f5e:	2100      	movs	r1, #0
 8013f60:	4618      	mov	r0, r3
 8013f62:	f00d ffd2 	bl	8021f0a <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013f6a:	061a      	lsls	r2, r3, #24
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013f70:	021b      	lsls	r3, r3, #8
 8013f72:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013f76:	431a      	orrs	r2, r3
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013f7c:	0a1b      	lsrs	r3, r3, #8
 8013f7e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013f82:	431a      	orrs	r2, r3
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013f88:	0e1b      	lsrs	r3, r3, #24
 8013f8a:	4313      	orrs	r3, r2
 8013f8c:	617b      	str	r3, [r7, #20]
    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ), &( pxSocket->pxEndPoint ) );
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8013f94:	f107 010c 	add.w	r1, r7, #12
 8013f98:	f107 0314 	add.w	r3, r7, #20
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f7f2 fdb9 	bl	8006b14 <eARPGetCacheEntry>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch( eReturned )
 8013fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013fac:	2b01      	cmp	r3, #1
 8013fae:	d037      	beq.n	8014020 <prvTCPPrepareConnect_IPV4+0xd8>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013fb6:	3301      	adds	r3, #1
 8013fb8:	b2da      	uxtb	r2, r3
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_debug_printf( ( "ARP for %xip (using %xip): rc=%d %02x-%02x-%02x-%02x-%02x-%02x\n",
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013fc4:	697b      	ldr	r3, [r7, #20]
 8013fc6:	061a      	lsls	r2, r3, #24
 8013fc8:	697b      	ldr	r3, [r7, #20]
 8013fca:	021b      	lsls	r3, r3, #8
 8013fcc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013fd0:	431a      	orrs	r2, r3
 8013fd2:	697b      	ldr	r3, [r7, #20]
 8013fd4:	0a1b      	lsrs	r3, r3, #8
 8013fd6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013fda:	431a      	orrs	r2, r3
 8013fdc:	697b      	ldr	r3, [r7, #20]
 8013fde:	0e1b      	lsrs	r3, r3, #24
 8013fe0:	431a      	orrs	r2, r3
 8013fe2:	f897 e027 	ldrb.w	lr, [r7, #39]	@ 0x27
 8013fe6:	7b38      	ldrb	r0, [r7, #12]
 8013fe8:	7b7c      	ldrb	r4, [r7, #13]
 8013fea:	7bbd      	ldrb	r5, [r7, #14]
 8013fec:	7bfe      	ldrb	r6, [r7, #15]
 8013fee:	f897 c010 	ldrb.w	ip, [r7, #16]
 8013ff2:	f8c7 c000 	str.w	ip, [r7]
 8013ff6:	f897 c011 	ldrb.w	ip, [r7, #17]
 8013ffa:	4663      	mov	r3, ip
 8013ffc:	9305      	str	r3, [sp, #20]
 8013ffe:	683b      	ldr	r3, [r7, #0]
 8014000:	9304      	str	r3, [sp, #16]
 8014002:	9603      	str	r6, [sp, #12]
 8014004:	9502      	str	r5, [sp, #8]
 8014006:	9401      	str	r4, [sp, #4]
 8014008:	9000      	str	r0, [sp, #0]
 801400a:	4673      	mov	r3, lr
 801400c:	485a      	ldr	r0, [pc, #360]	@ (8014178 <prvTCPPrepareConnect_IPV4+0x230>)
 801400e:	f00d fc53 	bl	80218b8 <lUDPLoggingPrintf>
                                     xEthAddress.ucBytes[ 3 ],
                                     xEthAddress.ucBytes[ 4 ],
                                     xEthAddress.ucBytes[ 5 ] ) );

            /* And issue a (new) ARP request */
            FreeRTOS_OutputARPRequest( ulRemoteIP );
 8014012:	697b      	ldr	r3, [r7, #20]
 8014014:	4618      	mov	r0, r3
 8014016:	f7f2 ffd1 	bl	8006fbc <FreeRTOS_OutputARPRequest>
            xReturn = pdFALSE;
 801401a:	2300      	movs	r3, #0
 801401c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 801401e:	e000      	b.n	8014022 <prvTCPPrepareConnect_IPV4+0xda>
            break;            /* We can now prepare the SYN packet. */
 8014020:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8014022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014024:	2b00      	cmp	r3, #0
 8014026:	d010      	beq.n	801404a <prvTCPPrepareConnect_IPV4+0x102>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801403a:	f7ed fb37 	bl	80016ac <ulApplicationGetNextSequenceNumber>
 801403e:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8014040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014042:	2b00      	cmp	r3, #0
 8014044:	d101      	bne.n	801404a <prvTCPPrepareConnect_IPV4+0x102>
        {
            xReturn = pdFALSE;
 8014046:	2300      	movs	r3, #0
 8014048:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if( xReturn != pdFALSE )
 801404a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801404c:	2b00      	cmp	r3, #0
 801404e:	f000 808d 	beq.w	801416c <prvTCPPrepareConnect_IPV4+0x224>
         * the buffer onto the TCPPacket_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	33aa      	adds	r3, #170	@ 0xaa
 8014056:	623b      	str	r3, [r7, #32]
        pxIPHeader = &pxTCPPacket->xIPHeader;
 8014058:	6a3b      	ldr	r3, [r7, #32]
 801405a:	330e      	adds	r3, #14
 801405c:	61fb      	str	r3, [r7, #28]

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	2200      	movs	r2, #0
 8014062:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8014066:	687a      	ldr	r2, [r7, #4]
 8014068:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801406c:	f043 0308 	orr.w	r3, r3, #8
 8014070:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	33aa      	adds	r3, #170	@ 0xaa
 8014078:	225a      	movs	r2, #90	@ 0x5a
 801407a:	2100      	movs	r1, #0
 801407c:	4618      	mov	r0, r3
 801407e:	f00d ff44 	bl	8021f0a <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8014082:	6a3b      	ldr	r3, [r7, #32]
 8014084:	3306      	adds	r3, #6
 8014086:	461a      	mov	r2, r3
 8014088:	f107 030c 	add.w	r3, r7, #12
 801408c:	6818      	ldr	r0, [r3, #0]
 801408e:	6010      	str	r0, [r2, #0]
 8014090:	889b      	ldrh	r3, [r3, #4]
 8014092:	8093      	strh	r3, [r2, #4]

        /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
        pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8014094:	6a3b      	ldr	r3, [r7, #32]
 8014096:	2200      	movs	r2, #0
 8014098:	f042 0208 	orr.w	r2, r2, #8
 801409c:	731a      	strb	r2, [r3, #12]
 801409e:	2200      	movs	r2, #0
 80140a0:	735a      	strb	r2, [r3, #13]

        pxIPHeader->ucVersionHeaderLength = 0x45U;
 80140a2:	69fb      	ldr	r3, [r7, #28]
 80140a4:	2245      	movs	r2, #69	@ 0x45
 80140a6:	701a      	strb	r2, [r3, #0]
        usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 80140a8:	2338      	movs	r3, #56	@ 0x38
 80140aa:	837b      	strh	r3, [r7, #26]
        pxIPHeader->usLength = FreeRTOS_htons( usLength );
 80140ac:	8b7b      	ldrh	r3, [r7, #26]
 80140ae:	021b      	lsls	r3, r3, #8
 80140b0:	b21a      	sxth	r2, r3
 80140b2:	8b7b      	ldrh	r3, [r7, #26]
 80140b4:	0a1b      	lsrs	r3, r3, #8
 80140b6:	b29b      	uxth	r3, r3
 80140b8:	b21b      	sxth	r3, r3
 80140ba:	4313      	orrs	r3, r2
 80140bc:	b21b      	sxth	r3, r3
 80140be:	b29a      	uxth	r2, r3
 80140c0:	69fb      	ldr	r3, [r7, #28]
 80140c2:	805a      	strh	r2, [r3, #2]
        pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 80140c4:	69fb      	ldr	r3, [r7, #28]
 80140c6:	2280      	movs	r2, #128	@ 0x80
 80140c8:	721a      	strb	r2, [r3, #8]

        pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 80140ca:	69fb      	ldr	r3, [r7, #28]
 80140cc:	2206      	movs	r2, #6
 80140ce:	725a      	strb	r2, [r3, #9]

        /* Addresses and ports will be stored swapped because prvTCPReturnPacket
         * will swap them back while replying. */
        pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140d4:	061a      	lsls	r2, r3, #24
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140da:	021b      	lsls	r3, r3, #8
 80140dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80140e0:	431a      	orrs	r2, r3
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140e6:	0a1b      	lsrs	r3, r3, #8
 80140e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80140ec:	431a      	orrs	r2, r3
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140f2:	0e1b      	lsrs	r3, r3, #24
 80140f4:	431a      	orrs	r2, r3
 80140f6:	69fb      	ldr	r3, [r7, #28]
 80140f8:	60da      	str	r2, [r3, #12]

        pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014100:	021b      	lsls	r3, r3, #8
 8014102:	b21a      	sxth	r2, r3
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801410a:	0a1b      	lsrs	r3, r3, #8
 801410c:	b29b      	uxth	r3, r3
 801410e:	b21b      	sxth	r3, r3
 8014110:	4313      	orrs	r3, r2
 8014112:	b21b      	sxth	r3, r3
 8014114:	b29a      	uxth	r2, r3
 8014116:	6a3b      	ldr	r3, [r7, #32]
 8014118:	845a      	strh	r2, [r3, #34]	@ 0x22
        pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801411e:	021b      	lsls	r3, r3, #8
 8014120:	b21a      	sxth	r2, r3
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014126:	0a1b      	lsrs	r3, r3, #8
 8014128:	b29b      	uxth	r3, r3
 801412a:	b21b      	sxth	r3, r3
 801412c:	4313      	orrs	r3, r2
 801412e:	b21b      	sxth	r3, r3
 8014130:	b29a      	uxth	r2, r3
 8014132:	6a3b      	ldr	r3, [r7, #32]
 8014134:	849a      	strh	r2, [r3, #36]	@ 0x24

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	2200      	movs	r2, #0
 801413a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014142:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 8014146:	6a3b      	ldr	r3, [r7, #32]
 8014148:	2250      	movs	r2, #80	@ 0x50
 801414a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        /* Only set the SYN flag. */
        pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 801414e:	6a3b      	ldr	r3, [r7, #32]
 8014150:	2202      	movs	r2, #2
 8014152:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f000 fc3c 	bl	80149d4 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f7fe ff2b 	bl	8012fb8 <prvTCPCreateWindow>
 8014162:	4603      	mov	r3, r0
 8014164:	2b01      	cmp	r3, #1
 8014166:	d001      	beq.n	801416c <prvTCPPrepareConnect_IPV4+0x224>
        {
            xReturn = pdFALSE;
 8014168:	2300      	movs	r3, #0
 801416a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return xReturn;
 801416c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801416e:	4618      	mov	r0, r3
 8014170:	3734      	adds	r7, #52	@ 0x34
 8014172:	46bd      	mov	sp, r7
 8014174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014176:	bf00      	nop
 8014178:	0802620c 	.word	0x0802620c

0801417c <prvTCPSendSpecialPktHelper_IPV4>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b086      	sub	sp, #24
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
 8014184:	460b      	mov	r3, r1
 8014186:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_t * pxTCPPacket = ( ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801418c:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 801418e:	2328      	movs	r3, #40	@ 0x28
 8014190:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8014192:	697b      	ldr	r3, [r7, #20]
 8014194:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014198:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	78fa      	ldrb	r2, [r7, #3]
 801419e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 80141a2:	697b      	ldr	r3, [r7, #20]
 80141a4:	2250      	movs	r2, #80	@ 0x50
 80141a6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 80141aa:	7bfb      	ldrb	r3, [r7, #15]
 80141ac:	f003 0302 	and.w	r3, r3, #2
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d02c      	beq.n	801420e <prvTCPSendSpecialPktHelper_IPV4+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 80141b4:	697b      	ldr	r3, [r7, #20]
 80141b6:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80141ba:	061a      	lsls	r2, r3, #24
 80141bc:	697b      	ldr	r3, [r7, #20]
 80141be:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80141c2:	021b      	lsls	r3, r3, #8
 80141c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80141c8:	431a      	orrs	r2, r3
 80141ca:	697b      	ldr	r3, [r7, #20]
 80141cc:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80141d0:	0a1b      	lsrs	r3, r3, #8
 80141d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80141d6:	431a      	orrs	r2, r3
 80141d8:	697b      	ldr	r3, [r7, #20]
 80141da:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80141de:	0e1b      	lsrs	r3, r3, #24
 80141e0:	4313      	orrs	r3, r2
 80141e2:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 80141e4:	68bb      	ldr	r3, [r7, #8]
 80141e6:	3301      	adds	r3, #1
 80141e8:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 80141ea:	68bb      	ldr	r3, [r7, #8]
 80141ec:	061a      	lsls	r2, r3, #24
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	021b      	lsls	r3, r3, #8
 80141f2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80141f6:	431a      	orrs	r2, r3
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	0a1b      	lsrs	r3, r3, #8
 80141fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014200:	431a      	orrs	r2, r3
 8014202:	68bb      	ldr	r3, [r7, #8]
 8014204:	0e1b      	lsrs	r3, r3, #24
 8014206:	431a      	orrs	r2, r3
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 801420e:	2300      	movs	r3, #0
 8014210:	693a      	ldr	r2, [r7, #16]
 8014212:	6879      	ldr	r1, [r7, #4]
 8014214:	2000      	movs	r0, #0
 8014216:	f7fe fd73 	bl	8012d00 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 801421a:	2300      	movs	r3, #0
}
 801421c:	4618      	mov	r0, r3
 801421e:	3718      	adds	r7, #24
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}

08014224 <prvTCPReturnPacket_IPV6>:
 */
void prvTCPReturnPacket_IPV6( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8014224:	b5b0      	push	{r4, r5, r7, lr}
 8014226:	b0aa      	sub	sp, #168	@ 0xa8
 8014228:	af00      	add	r7, sp, #0
 801422a:	60f8      	str	r0, [r7, #12]
 801422c:	60b9      	str	r1, [r7, #8]
 801422e:	607a      	str	r2, [r7, #4]
 8014230:	603b      	str	r3, [r7, #0]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8014232:	2300      	movs	r3, #0
 8014234:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014238:	2300      	movs	r3, #0
 801423a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    IPHeader_IPv6_t * pxIPHeader = NULL;
 801423e:	2300      	movs	r3, #0
 8014240:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8014244:	683b      	ldr	r3, [r7, #0]
 8014246:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    EthernetHeader_t * pxEthernetHeader = NULL;
 801424a:	2300      	movs	r3, #0
 801424c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8014256:	2300      	movs	r3, #0
 8014258:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    void * pvCopyDest = NULL;
 801425c:	2300      	movs	r3, #0
 801425e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv6_HEADER;
 8014262:	2328      	movs	r3, #40	@ 0x28
 8014264:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPv6_Address_t xDestinationIPAddress;

    do
    {
        /* Use do/while to be able to break out of the flow */
        if( ( pxNetworkBuffer == NULL ) && ( pxSocket == NULL ) )
 8014268:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801426c:	2b00      	cmp	r3, #0
 801426e:	d103      	bne.n	8014278 <prvTCPReturnPacket_IPV6+0x54>
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	2b00      	cmp	r3, #0
 8014274:	f000 81ae 	beq.w	80145d4 <prvTCPReturnPacket_IPV6+0x3b0>
            break;
        }

        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8014278:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801427c:	2b00      	cmp	r3, #0
 801427e:	d117      	bne.n	80142b0 <prvTCPReturnPacket_IPV6+0x8c>
        {
            pxNetworkBuffer = &xTempBuffer;
 8014280:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8014284:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8014288:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801428c:	2238      	movs	r2, #56	@ 0x38
 801428e:	2100      	movs	r1, #0
 8014290:	4618      	mov	r0, r3
 8014292:	f00d fe3a 	bl	8021f0a <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 801429c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80142a0:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80142a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80142a6:	225a      	movs	r2, #90	@ 0x5a
 80142a8:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 80142aa:	2300      	movs	r3, #0
 80142ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 80142b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d114      	bne.n	80142e2 <prvTCPReturnPacket_IPV6+0xbe>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 80142b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80142bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142be:	4619      	mov	r1, r3
 80142c0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80142c4:	f7f5 fcf2 	bl	8009cac <pxDuplicateNetworkBufferWithDescriptor>
 80142c8:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

                if( pxNetworkBuffer != NULL )
 80142cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d003      	beq.n	80142dc <prvTCPReturnPacket_IPV6+0xb8>
                {
                    xDoRelease = pdTRUE;
 80142d4:	2301      	movs	r3, #1
 80142d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80142da:	e002      	b.n	80142e2 <prvTCPReturnPacket_IPV6+0xbe>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 80142dc:	48c0      	ldr	r0, [pc, #768]	@ (80145e0 <prvTCPReturnPacket_IPV6+0x3bc>)
 80142de:	f00d faeb 	bl	80218b8 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 80142e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	f000 8175 	beq.w	80145d6 <prvTCPReturnPacket_IPV6+0x3b2>
        #endif
        {
            eARPLookupResult_t eResult;
            NetworkInterface_t * pxInterface;

            configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80142ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80142f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d103      	bne.n	80142fe <prvTCPReturnPacket_IPV6+0xda>
 80142f6:	219d      	movs	r1, #157	@ 0x9d
 80142f8:	48ba      	ldr	r0, [pc, #744]	@ (80145e4 <prvTCPReturnPacket_IPV6+0x3c0>)
 80142fa:	f7ed f9b7 	bl	800166c <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80142fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014304:	330e      	adds	r3, #14
 8014306:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer;
 801430a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014310:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8014314:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014318:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 801431c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014320:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014322:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014326:	330e      	adds	r3, #14
 8014328:	4413      	add	r3, r2
 801432a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            if( pxNetworkBuffer->pxEndPoint == NULL )
 801432e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014334:	2b00      	cmp	r3, #0
 8014336:	d117      	bne.n	8014368 <prvTCPReturnPacket_IPV6+0x144>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8014338:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801433c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014340:	68f8      	ldr	r0, [r7, #12]
 8014342:	f7fe ff9f 	bl	8013284 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8014346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801434a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801434c:	2b00      	cmp	r3, #0
 801434e:	d10b      	bne.n	8014368 <prvTCPReturnPacket_IPV6+0x144>
                {
                    if( xDoRelease != pdFALSE )
 8014350:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014354:	2b00      	cmp	r3, #0
 8014356:	d003      	beq.n	8014360 <prvTCPReturnPacket_IPV6+0x13c>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8014358:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 801435c:	f002 fc04 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxNetworkBuffer = NULL;
 8014360:	2300      	movs	r3, #0
 8014362:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8014366:	e136      	b.n	80145d6 <prvTCPReturnPacket_IPV6+0x3b2>
                }
            }

            /* Fill the packet, swapping from- and to-addresses. */
            if( pxSocket != NULL )
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d025      	beq.n	80143ba <prvTCPReturnPacket_IPV6+0x196>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 801436e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014372:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014376:	68f8      	ldr	r0, [r7, #12]
 8014378:	f7fe fd02 	bl	8012d80 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014382:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014386:	68f8      	ldr	r0, [r7, #12]
 8014388:	f7fe fd74 	bl	8012e74 <prvTCPReturn_SetSequenceNumber>
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801438c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014390:	f103 0018 	add.w	r0, r3, #24
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	3354      	adds	r3, #84	@ 0x54
 8014398:	2210      	movs	r2, #16
 801439a:	4619      	mov	r1, r3
 801439c:	f00d fca8 	bl	8021cf0 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80143a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80143a4:	f103 0008 	add.w	r0, r3, #8
 80143a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80143ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143ae:	3338      	adds	r3, #56	@ 0x38
 80143b0:	2210      	movs	r2, #16
 80143b2:	4619      	mov	r1, r3
 80143b4:	f00d fc9c 	bl	8021cf0 <memcpy>
 80143b8:	e02d      	b.n	8014416 <prvTCPReturnPacket_IPV6+0x1f2>
            {
                IPv6_Address_t xTempAddress;

                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 80143ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80143be:	685b      	ldr	r3, [r3, #4]
 80143c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80143c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80143c6:	689a      	ldr	r2, [r3, #8]
 80143c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80143cc:	605a      	str	r2, [r3, #4]
 80143ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80143d2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80143d4:	609a      	str	r2, [r3, #8]
                ( void ) memcpy( xTempAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80143d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80143da:	3318      	adds	r3, #24
 80143dc:	f107 0410 	add.w	r4, r7, #16
 80143e0:	6818      	ldr	r0, [r3, #0]
 80143e2:	6859      	ldr	r1, [r3, #4]
 80143e4:	689a      	ldr	r2, [r3, #8]
 80143e6:	68db      	ldr	r3, [r3, #12]
 80143e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80143ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80143ee:	f103 0018 	add.w	r0, r3, #24
 80143f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80143f6:	3308      	adds	r3, #8
 80143f8:	2210      	movs	r2, #16
 80143fa:	4619      	mov	r1, r3
 80143fc:	f00d fc78 	bl	8021cf0 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, xTempAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014400:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014404:	3308      	adds	r3, #8
 8014406:	461d      	mov	r5, r3
 8014408:	f107 0410 	add.w	r4, r7, #16
 801440c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801440e:	6028      	str	r0, [r5, #0]
 8014410:	6069      	str	r1, [r5, #4]
 8014412:	60aa      	str	r2, [r5, #8]
 8014414:	60eb      	str	r3, [r5, #12]
            }

            /* In IPv6, the "payload length" does not include the size of the IP-header */
            pxIPHeader->usPayloadLength = FreeRTOS_htons( ulLen - sizeof( IPHeader_IPv6_t ) );
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	b29b      	uxth	r3, r3
 801441a:	3b28      	subs	r3, #40	@ 0x28
 801441c:	b29b      	uxth	r3, r3
 801441e:	021b      	lsls	r3, r3, #8
 8014420:	b29a      	uxth	r2, r3
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	3b28      	subs	r3, #40	@ 0x28
 8014426:	0a1b      	lsrs	r3, r3, #8
 8014428:	b29b      	uxth	r3, r3
 801442a:	4313      	orrs	r3, r2
 801442c:	b29a      	uxth	r2, r3
 801442e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014432:	809a      	strh	r2, [r3, #4]
                uint32_t ulTotalLength = ulLen + ipSIZE_OF_ETH_HEADER;
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxNetworkBuffer->pucEthernetBuffer, ulTotalLength, pdTRUE );
            }
            #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8014434:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014438:	781a      	ldrb	r2, [r3, #0]
 801443a:	785b      	ldrb	r3, [r3, #1]
 801443c:	021b      	lsls	r3, r3, #8
 801443e:	4313      	orrs	r3, r2
 8014440:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8014444:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014448:	885b      	ldrh	r3, [r3, #2]
 801444a:	b29a      	uxth	r2, r3
 801444c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014450:	801a      	strh	r2, [r3, #0]
 8014452:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014456:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 801445a:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 801445c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014460:	687a      	ldr	r2, [r7, #4]
 8014462:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8014464:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801446a:	f103 020e 	add.w	r2, r3, #14
 801446e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014472:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            ( void ) memcpy( xDestinationIPAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014474:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014478:	3318      	adds	r3, #24
 801447a:	f107 0420 	add.w	r4, r7, #32
 801447e:	6818      	ldr	r0, [r3, #0]
 8014480:	6859      	ldr	r1, [r3, #4]
 8014482:	689a      	ldr	r2, [r3, #8]
 8014484:	68db      	ldr	r3, [r3, #12]
 8014486:	c40f      	stmia	r4!, {r0, r1, r2, r3}

            eResult = eNDGetCacheEntry( &xDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8014488:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801448c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014490:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8014494:	f107 0320 	add.w	r3, r7, #32
 8014498:	4618      	mov	r0, r3
 801449a:	f7f6 ffa7 	bl	800b3ec <eNDGetCacheEntry>
 801449e:	4603      	mov	r3, r0
 80144a0:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

            if( eResult == eARPCacheHit )
 80144a4:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80144a8:	2b01      	cmp	r3, #1
 80144aa:	d104      	bne.n	80144b6 <prvTCPReturnPacket_IPV6+0x292>
            {
                pvCopySource = &xMACAddress;
 80144ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80144b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80144b4:	e004      	b.n	80144c0 <prvTCPReturnPacket_IPV6+0x29c>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 80144b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80144ba:	3306      	adds	r3, #6
 80144bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 80144c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80144c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 80144c8:	2206      	movs	r2, #6
 80144ca:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80144ce:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80144d2:	f00d fc0d 	bl	8021cf0 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 80144d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80144da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144dc:	33e8      	adds	r3, #232	@ 0xe8
 80144de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 80144e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80144e6:	3306      	adds	r3, #6
 80144e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80144ec:	2206      	movs	r2, #6
 80144ee:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80144f2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80144f6:	f00d fbfb 	bl	8021cf0 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80144fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80144fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014500:	2b3b      	cmp	r3, #59	@ 0x3b
 8014502:	d81a      	bhi.n	801453a <prvTCPReturnPacket_IPV6+0x316>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014504:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801450a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801450e:	e00c      	b.n	801452a <prvTCPReturnPacket_IPV6+0x306>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8014510:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014514:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014516:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801451a:	4413      	add	r3, r2
 801451c:	2200      	movs	r2, #0
 801451e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014520:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014524:	3301      	adds	r3, #1
 8014526:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801452a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801452e:	2b3b      	cmp	r3, #59	@ 0x3b
 8014530:	ddee      	ble.n	8014510 <prvTCPReturnPacket_IPV6+0x2ec>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8014532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014536:	223c      	movs	r2, #60	@ 0x3c
 8014538:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 801453a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801453e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014540:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014544:	2b00      	cmp	r3, #0
 8014546:	d104      	bne.n	8014552 <prvTCPReturnPacket_IPV6+0x32e>
 8014548:	f44f 718c 	mov.w	r1, #280	@ 0x118
 801454c:	4825      	ldr	r0, [pc, #148]	@ (80145e4 <prvTCPReturnPacket_IPV6+0x3c0>)
 801454e:	f7ed f88d 	bl	800166c <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8014552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014558:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801455c:	68db      	ldr	r3, [r3, #12]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d104      	bne.n	801456c <prvTCPReturnPacket_IPV6+0x348>
 8014562:	f240 1119 	movw	r1, #281	@ 0x119
 8014566:	481f      	ldr	r0, [pc, #124]	@ (80145e4 <prvTCPReturnPacket_IPV6+0x3c0>)
 8014568:	f7ed f880 	bl	800166c <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 801456c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014572:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014576:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8014578:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801457a:	68db      	ldr	r3, [r3, #12]
 801457c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8014580:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014584:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8014586:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8014588:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801458c:	2b00      	cmp	r3, #0
 801458e:	d122      	bne.n	80145d6 <prvTCPReturnPacket_IPV6+0x3b2>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8014590:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014594:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 8014598:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 801459c:	021b      	lsls	r3, r3, #8
 801459e:	4313      	orrs	r3, r2
 80145a0:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 80145a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80145a8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80145aa:	b29a      	uxth	r2, r3
 80145ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80145b0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80145b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80145b6:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 80145ba:	871a      	strh	r2, [r3, #56]	@ 0x38

                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80145bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80145c0:	f103 0008 	add.w	r0, r3, #8
 80145c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80145c8:	3318      	adds	r3, #24
 80145ca:	2210      	movs	r2, #16
 80145cc:	4619      	mov	r1, r3
 80145ce:	f00d fb8f 	bl	8021cf0 <memcpy>
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );
}
 80145d2:	e000      	b.n	80145d6 <prvTCPReturnPacket_IPV6+0x3b2>
            break;
 80145d4:	bf00      	nop
}
 80145d6:	bf00      	nop
 80145d8:	37a8      	adds	r7, #168	@ 0xa8
 80145da:	46bd      	mov	sp, r7
 80145dc:	bdb0      	pop	{r4, r5, r7, pc}
 80145de:	bf00      	nop
 80145e0:	0802624c 	.word	0x0802624c
 80145e4:	08026274 	.word	0x08026274

080145e8 <prvTCPPrepareConnect_IPV6>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 80145e8:	b590      	push	{r4, r7, lr}
 80145ea:	b093      	sub	sp, #76	@ 0x4c
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 80145f0:	2300      	movs	r3, #0
 80145f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    IPHeader_IPv6_t * pxIPHeader = NULL;
 80145f4:	2300      	movs	r3, #0
 80145f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    eARPLookupResult_t eReturned;
    IP_Address_t xRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 80145f8:	2301      	movs	r3, #1
 80145fa:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t ulInitialSequenceNumber = 0;
 80145fc:	2300      	movs	r3, #0
 80145fe:	643b      	str	r3, [r7, #64]	@ 0x40
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014600:	2300      	movs	r3, #0
 8014602:	637b      	str	r3, [r7, #52]	@ 0x34
    NetworkEndPoint_t * pxEndPoint = NULL;
 8014604:	2300      	movs	r3, #0
 8014606:	60fb      	str	r3, [r7, #12]

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8014608:	f107 0310 	add.w	r3, r7, #16
 801460c:	2206      	movs	r2, #6
 801460e:	2100      	movs	r1, #0
 8014610:	4618      	mov	r0, r3
 8014612:	f00d fc7a 	bl	8021f0a <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ( void ) memset( xRemoteIP.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 8014616:	f107 0318 	add.w	r3, r7, #24
 801461a:	2210      	movs	r2, #16
 801461c:	2100      	movs	r1, #0
 801461e:	4618      	mov	r0, r3
 8014620:	f00d fc73 	bl	8021f0a <memset>
    ( void ) memcpy( xRemoteIP.xIP_IPv6.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	3354      	adds	r3, #84	@ 0x54
 8014628:	f107 0418 	add.w	r4, r7, #24
 801462c:	6818      	ldr	r0, [r3, #0]
 801462e:	6859      	ldr	r1, [r3, #4]
 8014630:	689a      	ldr	r2, [r3, #8]
 8014632:	68db      	ldr	r3, [r3, #12]
 8014634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    eReturned = eNDGetCacheEntry( &( xRemoteIP.xIP_IPv6 ), &( xEthAddress ), &( pxEndPoint ) );
 8014636:	f107 020c 	add.w	r2, r7, #12
 801463a:	f107 0110 	add.w	r1, r7, #16
 801463e:	f107 0318 	add.w	r3, r7, #24
 8014642:	4618      	mov	r0, r3
 8014644:	f7f6 fed2 	bl	800b3ec <eNDGetCacheEntry>
 8014648:	4603      	mov	r3, r0
 801464a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    FreeRTOS_printf( ( "eNDGetCacheEntry: %d with end-point %p\n", eReturned, ( void * ) pxEndPoint ) );
 801464e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014652:	68fa      	ldr	r2, [r7, #12]
 8014654:	4619      	mov	r1, r3
 8014656:	4881      	ldr	r0, [pc, #516]	@ (801485c <prvTCPPrepareConnect_IPV6+0x274>)
 8014658:	f00d f92e 	bl	80218b8 <lUDPLoggingPrintf>

    if( pxEndPoint != NULL )
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d002      	beq.n	8014668 <prvTCPPrepareConnect_IPV6+0x80>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 8014662:	68fa      	ldr	r2, [r7, #12]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                          &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8014668:	6878      	ldr	r0, [r7, #4]
 801466a:	f7f5 f887 	bl	800977c <uxIPHeaderSizeSocket>
 801466e:	4603      	mov	r3, r0
 8014670:	330e      	adds	r3, #14
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8014672:	33a0      	adds	r3, #160	@ 0xa0
 8014674:	687a      	ldr	r2, [r7, #4]
 8014676:	4413      	add	r3, r2
 8014678:	330a      	adds	r3, #10
 801467a:	637b      	str	r3, [r7, #52]	@ 0x34

    switch( eReturned )
 801467c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014680:	2b01      	cmp	r3, #1
 8014682:	d02c      	beq.n	80146de <prvTCPPrepareConnect_IPV6+0xf6>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801468a:	3301      	adds	r3, #1
 801468c:	b2da      	uxtb	r2, r3
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_printf( ( "Looking up %pip with%s end-point\n", ( void * ) xRemoteIP.xIP_IPv6.ucBytes, ( pxEndPoint != NULL ) ? "" : "out" ) );
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d001      	beq.n	801469e <prvTCPPrepareConnect_IPV6+0xb6>
 801469a:	4a71      	ldr	r2, [pc, #452]	@ (8014860 <prvTCPPrepareConnect_IPV6+0x278>)
 801469c:	e000      	b.n	80146a0 <prvTCPPrepareConnect_IPV6+0xb8>
 801469e:	4a71      	ldr	r2, [pc, #452]	@ (8014864 <prvTCPPrepareConnect_IPV6+0x27c>)
 80146a0:	f107 0318 	add.w	r3, r7, #24
 80146a4:	4619      	mov	r1, r3
 80146a6:	4870      	ldr	r0, [pc, #448]	@ (8014868 <prvTCPPrepareConnect_IPV6+0x280>)
 80146a8:	f00d f906 	bl	80218b8 <lUDPLoggingPrintf>

            if( pxEndPoint != NULL )
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d012      	beq.n	80146d8 <prvTCPPrepareConnect_IPV6+0xf0>
            {
                size_t uxNeededSize;
                NetworkBufferDescriptor_t * pxNetworkBuffer;

                uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 80146b2:	2356      	movs	r3, #86	@ 0x56
 80146b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 80146b6:	2100      	movs	r1, #0
 80146b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80146ba:	f002 f9ed 	bl	8016a98 <pxGetNetworkBufferWithDescriptor>
 80146be:	62b8      	str	r0, [r7, #40]	@ 0x28

                if( pxNetworkBuffer != NULL )
 80146c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d008      	beq.n	80146d8 <prvTCPPrepareConnect_IPV6+0xf0>
                {
                    pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80146c6:	68fa      	ldr	r2, [r7, #12]
 80146c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146ca:	631a      	str	r2, [r3, #48]	@ 0x30
                    vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xRemoteIP.xIP_IPv6 ) );
 80146cc:	f107 0318 	add.w	r3, r7, #24
 80146d0:	4619      	mov	r1, r3
 80146d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80146d4:	f7f7 f8f6 	bl	800b8c4 <vNDSendNeighbourSolicitation>
                }
            }

            xReturn = pdFALSE;
 80146d8:	2300      	movs	r3, #0
 80146da:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 80146dc:	e000      	b.n	80146e0 <prvTCPPrepareConnect_IPV6+0xf8>
            break;            /* We can now prepare the SYN packet. */
 80146de:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 80146e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d010      	beq.n	8014708 <prvTCPPrepareConnect_IPV6+0x120>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80146f8:	f7ec ffd8 	bl	80016ac <ulApplicationGetNextSequenceNumber>
 80146fc:	6438      	str	r0, [r7, #64]	@ 0x40
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 80146fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014700:	2b00      	cmp	r3, #0
 8014702:	d101      	bne.n	8014708 <prvTCPPrepareConnect_IPV6+0x120>
        {
            xReturn = pdFALSE;
 8014704:	2300      	movs	r3, #0
 8014706:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    if( xReturn != pdFALSE )
 8014708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801470a:	2b00      	cmp	r3, #0
 801470c:	d05d      	beq.n	80147ca <prvTCPPrepareConnect_IPV6+0x1e2>
         * the buffer onto the TCPPacket_IPv6_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	33aa      	adds	r3, #170	@ 0xaa
 8014712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxIPHeader = &( pxTCPPacket->xIPHeader );
 8014714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014716:	330e      	adds	r3, #14
 8014718:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	2200      	movs	r2, #0
 801471e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8014722:	687a      	ldr	r2, [r7, #4]
 8014724:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014728:	f043 0308 	orr.w	r3, r3, #8
 801472c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	33aa      	adds	r3, #170	@ 0xaa
 8014734:	225a      	movs	r2, #90	@ 0x5a
 8014736:	2100      	movs	r1, #0
 8014738:	4618      	mov	r0, r3
 801473a:	f00d fbe6 	bl	8021f0a <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &( pxTCPPacket->xEthernetHeader.xSourceAddress ) ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 801473e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014740:	3306      	adds	r3, #6
 8014742:	461a      	mov	r2, r3
 8014744:	f107 0310 	add.w	r3, r7, #16
 8014748:	6818      	ldr	r0, [r3, #0]
 801474a:	6010      	str	r0, [r2, #0]
 801474c:	889b      	ldrh	r3, [r3, #4]
 801474e:	8093      	strh	r3, [r2, #4]

        if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	7a1b      	ldrb	r3, [r3, #8]
 8014754:	f003 0301 	and.w	r3, r3, #1
 8014758:	b2db      	uxtb	r3, r3
 801475a:	2b00      	cmp	r3, #0
 801475c:	d035      	beq.n	80147ca <prvTCPPrepareConnect_IPV6+0x1e2>
        {
            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 801475e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014760:	2200      	movs	r2, #0
 8014762:	f062 0279 	orn	r2, r2, #121	@ 0x79
 8014766:	731a      	strb	r2, [r3, #12]
 8014768:	2200      	movs	r2, #0
 801476a:	f062 0222 	orn	r2, r2, #34	@ 0x22
 801476e:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionTrafficClass = ( uint8_t ) 0x60U;
 8014770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014772:	2260      	movs	r2, #96	@ 0x60
 8014774:	701a      	strb	r2, [r3, #0]
            pxIPHeader->ucTrafficClassFlow = ( uint8_t ) 0x00;
 8014776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014778:	2200      	movs	r2, #0
 801477a:	705a      	strb	r2, [r3, #1]
            pxIPHeader->usFlowLabel = ( uint16_t ) 0x0000U;
 801477c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801477e:	2200      	movs	r2, #0
 8014780:	709a      	strb	r2, [r3, #2]
 8014782:	2200      	movs	r2, #0
 8014784:	70da      	strb	r2, [r3, #3]
            pxIPHeader->usPayloadLength = FreeRTOS_htons( sizeof( TCPHeader_t ) );
 8014786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014788:	2200      	movs	r2, #0
 801478a:	711a      	strb	r2, [r3, #4]
 801478c:	2200      	movs	r2, #0
 801478e:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 8014792:	715a      	strb	r2, [r3, #5]
            pxIPHeader->ucNextHeader = ( uint8_t ) ipPROTOCOL_TCP;
 8014794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014796:	2206      	movs	r2, #6
 8014798:	719a      	strb	r2, [r3, #6]
            pxIPHeader->ucHopLimit = 128;
 801479a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801479c:	2280      	movs	r2, #128	@ 0x80
 801479e:	71da      	strb	r2, [r3, #7]
            /* The Source and Destination addresses will be swapped later. */
            ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xSourceAddress.ucBytes ) );
 80147a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147a2:	f103 0008 	add.w	r0, r3, #8
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	3354      	adds	r3, #84	@ 0x54
 80147aa:	2210      	movs	r2, #16
 80147ac:	4619      	mov	r1, r3
 80147ae:	f00d fa9f 	bl	8021cf0 <memcpy>
            ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xDestinationAddress.ucBytes ) );
 80147b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147b4:	f103 0018 	add.w	r0, r3, #24
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	3328      	adds	r3, #40	@ 0x28
 80147bc:	2210      	movs	r2, #16
 80147be:	4619      	mov	r1, r3
 80147c0:	f00d fa96 	bl	8021cf0 <memcpy>
            pxEndPoint = pxSocket->pxEndPoint;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80147c8:	60fb      	str	r3, [r7, #12]
        }
    }

    if( pxEndPoint != NULL )
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d03a      	beq.n	8014846 <prvTCPPrepareConnect_IPV6+0x25e>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 80147d0:	68fa      	ldr	r2, [r7, #12]
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	64da      	str	r2, [r3, #76]	@ 0x4c

        pxProtocolHeaders->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80147dc:	021b      	lsls	r3, r3, #8
 80147de:	b21a      	sxth	r2, r3
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80147e6:	0a1b      	lsrs	r3, r3, #8
 80147e8:	b29b      	uxth	r3, r3
 80147ea:	b21b      	sxth	r3, r3
 80147ec:	4313      	orrs	r3, r2
 80147ee:	b21b      	sxth	r3, r3
 80147f0:	b29a      	uxth	r2, r3
 80147f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147f4:	801a      	strh	r2, [r3, #0]
        pxProtocolHeaders->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80147fa:	021b      	lsls	r3, r3, #8
 80147fc:	b21a      	sxth	r2, r3
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014802:	0a1b      	lsrs	r3, r3, #8
 8014804:	b29b      	uxth	r3, r3
 8014806:	b21b      	sxth	r3, r3
 8014808:	4313      	orrs	r3, r2
 801480a:	b21b      	sxth	r3, r3
 801480c:	b29a      	uxth	r2, r3
 801480e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014810:	805a      	strh	r2, [r3, #2]

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	2200      	movs	r2, #0
 8014816:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801481e:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxProtocolHeaders->xTCPHeader.ucTCPOffset = 0x50U;
 8014822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014824:	2250      	movs	r2, #80	@ 0x50
 8014826:	731a      	strb	r2, [r3, #12]

        /* Only set the SYN flag. */
        pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 8014828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801482a:	2202      	movs	r2, #2
 801482c:	735a      	strb	r2, [r3, #13]

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 801482e:	6878      	ldr	r0, [r7, #4]
 8014830:	f000 f8d0 	bl	80149d4 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f7fe fbbf 	bl	8012fb8 <prvTCPCreateWindow>
 801483a:	4603      	mov	r3, r0
 801483c:	2b01      	cmp	r3, #1
 801483e:	d007      	beq.n	8014850 <prvTCPPrepareConnect_IPV6+0x268>
        {
            xReturn = pdFAIL;
 8014840:	2300      	movs	r3, #0
 8014842:	647b      	str	r3, [r7, #68]	@ 0x44
 8014844:	e004      	b.n	8014850 <prvTCPPrepareConnect_IPV6+0x268>
        }
    }
    else
    {
        FreeRTOS_printf( ( "prvTCPPrepareConnect: No pxEndPoint yet?\n" ) );
 8014846:	4809      	ldr	r0, [pc, #36]	@ (801486c <prvTCPPrepareConnect_IPV6+0x284>)
 8014848:	f00d f836 	bl	80218b8 <lUDPLoggingPrintf>
        xReturn = pdFAIL;
 801484c:	2300      	movs	r3, #0
 801484e:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    return xReturn;
 8014850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8014852:	4618      	mov	r0, r3
 8014854:	374c      	adds	r7, #76	@ 0x4c
 8014856:	46bd      	mov	sp, r7
 8014858:	bd90      	pop	{r4, r7, pc}
 801485a:	bf00      	nop
 801485c:	080262b4 	.word	0x080262b4
 8014860:	080262dc 	.word	0x080262dc
 8014864:	080262e0 	.word	0x080262e0
 8014868:	080262e4 	.word	0x080262e4
 801486c:	08026308 	.word	0x08026308

08014870 <prvTCPSendSpecialPktHelper_IPV6>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b086      	sub	sp, #24
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
 8014878:	460b      	mov	r3, r1
 801487a:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_IPv6_t * pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014880:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 8014882:	233c      	movs	r3, #60	@ 0x3c
 8014884:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8014886:	697b      	ldr	r3, [r7, #20]
 8014888:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801488c:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 801488e:	697b      	ldr	r3, [r7, #20]
 8014890:	78fa      	ldrb	r2, [r7, #3]
 8014892:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8014896:	697b      	ldr	r3, [r7, #20]
 8014898:	2250      	movs	r2, #80	@ 0x50
 801489a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 801489e:	7bfb      	ldrb	r3, [r7, #15]
 80148a0:	f003 0302 	and.w	r3, r3, #2
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d02c      	beq.n	8014902 <prvTCPSendSpecialPktHelper_IPV6+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80148ae:	061a      	lsls	r2, r3, #24
 80148b0:	697b      	ldr	r3, [r7, #20]
 80148b2:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80148b6:	021b      	lsls	r3, r3, #8
 80148b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80148bc:	431a      	orrs	r2, r3
 80148be:	697b      	ldr	r3, [r7, #20]
 80148c0:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80148c4:	0a1b      	lsrs	r3, r3, #8
 80148c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80148ca:	431a      	orrs	r2, r3
 80148cc:	697b      	ldr	r3, [r7, #20]
 80148ce:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80148d2:	0e1b      	lsrs	r3, r3, #24
 80148d4:	4313      	orrs	r3, r2
 80148d6:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	3301      	adds	r3, #1
 80148dc:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 80148de:	68bb      	ldr	r3, [r7, #8]
 80148e0:	061a      	lsls	r2, r3, #24
 80148e2:	68bb      	ldr	r3, [r7, #8]
 80148e4:	021b      	lsls	r3, r3, #8
 80148e6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80148ea:	431a      	orrs	r2, r3
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	0a1b      	lsrs	r3, r3, #8
 80148f0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80148f4:	431a      	orrs	r2, r3
 80148f6:	68bb      	ldr	r3, [r7, #8]
 80148f8:	0e1b      	lsrs	r3, r3, #24
 80148fa:	431a      	orrs	r2, r3
 80148fc:	697b      	ldr	r3, [r7, #20]
 80148fe:	f8c3 203a 	str.w	r2, [r3, #58]	@ 0x3a
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8014902:	2300      	movs	r3, #0
 8014904:	693a      	ldr	r2, [r7, #16]
 8014906:	6879      	ldr	r1, [r7, #4]
 8014908:	2000      	movs	r0, #0
 801490a:	f7fe f9f9 	bl	8012d00 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 801490e:	2300      	movs	r3, #0
}
 8014910:	4618      	mov	r0, r3
 8014912:	3718      	adds	r7, #24
 8014914:	46bd      	mov	sp, r7
 8014916:	bd80      	pop	{r7, pc}

08014918 <prvTCPFlagMeaning>:
 * @param[in] xFlags The TCP flags.
 *
 * @return The string containing the flags.
 */
        const char * prvTCPFlagMeaning( UBaseType_t xFlags )
        {
 8014918:	b5f0      	push	{r4, r5, r6, r7, lr}
 801491a:	b08d      	sub	sp, #52	@ 0x34
 801491c:	af08      	add	r7, sp, #32
 801491e:	6078      	str	r0, [r7, #4]
            size_t uxFlags = ( size_t ) xFlags;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	60fb      	str	r3, [r7, #12]

            ( void ) snprintf( retString,
                               sizeof( retString ), "%c%c%c%c%c%c%c%c",
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_FIN ) != 0 ) ? 'F' : '.',   /* 0x0001: No more data from sender */
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	f003 0301 	and.w	r3, r3, #1
            ( void ) snprintf( retString,
 801492a:	2b00      	cmp	r3, #0
 801492c:	d002      	beq.n	8014934 <prvTCPFlagMeaning+0x1c>
 801492e:	f04f 0c46 	mov.w	ip, #70	@ 0x46
 8014932:	e001      	b.n	8014938 <prvTCPFlagMeaning+0x20>
 8014934:	f04f 0c2e 	mov.w	ip, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_SYN ) != 0 ) ? 'S' : '.',   /* 0x0002: Synchronize sequence numbers */
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	f003 0302 	and.w	r3, r3, #2
            ( void ) snprintf( retString,
 801493e:	2b00      	cmp	r3, #0
 8014940:	d001      	beq.n	8014946 <prvTCPFlagMeaning+0x2e>
 8014942:	2353      	movs	r3, #83	@ 0x53
 8014944:	e000      	b.n	8014948 <prvTCPFlagMeaning+0x30>
 8014946:	232e      	movs	r3, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_RST ) != 0 ) ? 'R' : '.',   /* 0x0004: Reset the connection */
 8014948:	68fa      	ldr	r2, [r7, #12]
 801494a:	f002 0204 	and.w	r2, r2, #4
            ( void ) snprintf( retString,
 801494e:	2a00      	cmp	r2, #0
 8014950:	d001      	beq.n	8014956 <prvTCPFlagMeaning+0x3e>
 8014952:	2252      	movs	r2, #82	@ 0x52
 8014954:	e000      	b.n	8014958 <prvTCPFlagMeaning+0x40>
 8014956:	222e      	movs	r2, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 ) ? 'P' : '.',   /* 0x0008: Push function: please push buffered data to the recv application */
 8014958:	68f9      	ldr	r1, [r7, #12]
 801495a:	f001 0108 	and.w	r1, r1, #8
            ( void ) snprintf( retString,
 801495e:	2900      	cmp	r1, #0
 8014960:	d001      	beq.n	8014966 <prvTCPFlagMeaning+0x4e>
 8014962:	2150      	movs	r1, #80	@ 0x50
 8014964:	e000      	b.n	8014968 <prvTCPFlagMeaning+0x50>
 8014966:	212e      	movs	r1, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ACK ) != 0 ) ? 'A' : '.',   /* 0x0010: Acknowledgment field is significant */
 8014968:	68f8      	ldr	r0, [r7, #12]
 801496a:	f000 0010 	and.w	r0, r0, #16
            ( void ) snprintf( retString,
 801496e:	2800      	cmp	r0, #0
 8014970:	d001      	beq.n	8014976 <prvTCPFlagMeaning+0x5e>
 8014972:	2041      	movs	r0, #65	@ 0x41
 8014974:	e000      	b.n	8014978 <prvTCPFlagMeaning+0x60>
 8014976:	202e      	movs	r0, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_URG ) != 0 ) ? 'U' : '.',   /* 0x0020: Urgent pointer field is significant */
 8014978:	68fc      	ldr	r4, [r7, #12]
 801497a:	f004 0420 	and.w	r4, r4, #32
            ( void ) snprintf( retString,
 801497e:	2c00      	cmp	r4, #0
 8014980:	d001      	beq.n	8014986 <prvTCPFlagMeaning+0x6e>
 8014982:	2455      	movs	r4, #85	@ 0x55
 8014984:	e000      	b.n	8014988 <prvTCPFlagMeaning+0x70>
 8014986:	242e      	movs	r4, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 ) ? 'E' : '.',   /* 0x0040: ECN-Echo */
 8014988:	68fd      	ldr	r5, [r7, #12]
 801498a:	f005 0540 	and.w	r5, r5, #64	@ 0x40
            ( void ) snprintf( retString,
 801498e:	2d00      	cmp	r5, #0
 8014990:	d001      	beq.n	8014996 <prvTCPFlagMeaning+0x7e>
 8014992:	2545      	movs	r5, #69	@ 0x45
 8014994:	e000      	b.n	8014998 <prvTCPFlagMeaning+0x80>
 8014996:	252e      	movs	r5, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_CWR ) != 0 ) ? 'C' : '.' ); /* 0x0080: Congestion Window Reduced */
 8014998:	68fe      	ldr	r6, [r7, #12]
 801499a:	f006 0680 	and.w	r6, r6, #128	@ 0x80
            ( void ) snprintf( retString,
 801499e:	2e00      	cmp	r6, #0
 80149a0:	d001      	beq.n	80149a6 <prvTCPFlagMeaning+0x8e>
 80149a2:	2643      	movs	r6, #67	@ 0x43
 80149a4:	e000      	b.n	80149a8 <prvTCPFlagMeaning+0x90>
 80149a6:	262e      	movs	r6, #46	@ 0x2e
 80149a8:	9606      	str	r6, [sp, #24]
 80149aa:	9505      	str	r5, [sp, #20]
 80149ac:	9404      	str	r4, [sp, #16]
 80149ae:	9003      	str	r0, [sp, #12]
 80149b0:	9102      	str	r1, [sp, #8]
 80149b2:	9201      	str	r2, [sp, #4]
 80149b4:	9300      	str	r3, [sp, #0]
 80149b6:	4663      	mov	r3, ip
 80149b8:	4a04      	ldr	r2, [pc, #16]	@ (80149cc <prvTCPFlagMeaning+0xb4>)
 80149ba:	210a      	movs	r1, #10
 80149bc:	4804      	ldr	r0, [pc, #16]	@ (80149d0 <prvTCPFlagMeaning+0xb8>)
 80149be:	f00d ffa7 	bl	8022910 <snprintf>
            return retString;
 80149c2:	4b03      	ldr	r3, [pc, #12]	@ (80149d0 <prvTCPFlagMeaning+0xb8>)
        }
 80149c4:	4618      	mov	r0, r3
 80149c6:	3714      	adds	r7, #20
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149cc:	08026334 	.word	0x08026334
 80149d0:	20001460 	.word	0x20001460

080149d4 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
    void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b082      	sub	sp, #8
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	7a1b      	ldrb	r3, [r3, #8]
 80149e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80149e4:	b2db      	uxtb	r3, r3
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d002      	beq.n	80149f0 <prvSocketSetMSS+0x1c>
 80149ea:	2b01      	cmp	r3, #1
 80149ec:	d004      	beq.n	80149f8 <prvSocketSetMSS+0x24>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default: /* LCOV_EXCL_LINE */
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 80149ee:	e007      	b.n	8014a00 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV4( pxSocket );
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f000 f809 	bl	8014a08 <prvSocketSetMSS_IPV4>
                    break;
 80149f6:	e003      	b.n	8014a00 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV6( pxSocket );
 80149f8:	6878      	ldr	r0, [r7, #4]
 80149fa:	f000 f84b 	bl	8014a94 <prvSocketSetMSS_IPV6>
                    break;
 80149fe:	bf00      	nop
        }
    }
 8014a00:	bf00      	nop
 8014a02:	3708      	adds	r7, #8
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}

08014a08 <prvSocketSetMSS_IPV4>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b084      	sub	sp, #16
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 8014a10:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014a14:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxSocket->pxEndPoint;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014a1a:	60bb      	str	r3, [r7, #8]

    if( pxEndPoint != NULL )
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d023      	beq.n	8014a6a <prvSocketSetMSS_IPV4+0x62>
    {
        /* Do not allow MSS smaller than tcpMINIMUM_SEGMENT_LENGTH. */
        #if ( ipconfigTCP_MSS >= tcpMINIMUM_SEGMENT_LENGTH )
        {
            ulMSS = ipconfigTCP_MSS;
 8014a22:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014a26:	60fb      	str	r3, [r7, #12]
            ulMSS = tcpMINIMUM_SEGMENT_LENGTH;
        }
        #endif

        /* Check if the remote IP-address belongs to the same netmask. */
        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 ) ^ pxEndPoint->ipv4_settings.ulIPAddress ) & pxEndPoint->ipv4_settings.ulNetMask ) != 0U )
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a2c:	061a      	lsls	r2, r3, #24
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a32:	021b      	lsls	r3, r3, #8
 8014a34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014a38:	431a      	orrs	r2, r3
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a3e:	0a1b      	lsrs	r3, r3, #8
 8014a40:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014a44:	431a      	orrs	r2, r3
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a4a:	0e1b      	lsrs	r3, r3, #24
 8014a4c:	431a      	orrs	r2, r3
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	405a      	eors	r2, r3
 8014a54:	68bb      	ldr	r3, [r7, #8]
 8014a56:	685b      	ldr	r3, [r3, #4]
 8014a58:	4013      	ands	r3, r2
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d005      	beq.n	8014a6a <prvSocketSetMSS_IPV4+0x62>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8014a5e:	68f9      	ldr	r1, [r7, #12]
 8014a60:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8014a64:	f7f5 fbbe 	bl	800a1e4 <FreeRTOS_min_uint32>
 8014a68:	60f8      	str	r0, [r7, #12]
        }
    }

    FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %xip port %u\n", ( unsigned ) ulMSS, ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort ) );
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014a74:	68f9      	ldr	r1, [r7, #12]
 8014a76:	4806      	ldr	r0, [pc, #24]	@ (8014a90 <prvSocketSetMSS_IPV4+0x88>)
 8014a78:	f00c ff1e 	bl	80218b8 <lUDPLoggingPrintf>

    pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	b29a      	uxth	r2, r3
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8014a86:	bf00      	nop
 8014a88:	3710      	adds	r7, #16
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	bd80      	pop	{r7, pc}
 8014a8e:	bf00      	nop
 8014a90:	08026348 	.word	0x08026348

08014a94 <prvSocketSetMSS_IPV6>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b090      	sub	sp, #64	@ 0x40
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 8014a9c:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c

    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        char cIPv6Address[ 40 ];
    #endif

    const NetworkEndPoint_t * pxEndPoint = NULL;
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	63bb      	str	r3, [r7, #56]	@ 0x38

    do
    {
        if( pxSocket == NULL )
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d103      	bne.n	8014ab4 <prvSocketSetMSS_IPV6+0x20>
        {
            /* If NULL socket handler, skip all following steps. */
            FreeRTOS_debug_printf( ( "prvSocketSetMSS_IPV6: NULL socket handler\n" ) );
 8014aac:	481f      	ldr	r0, [pc, #124]	@ (8014b2c <prvSocketSetMSS_IPV6+0x98>)
 8014aae:	f00c ff03 	bl	80218b8 <lUDPLoggingPrintf>

            break;
 8014ab2:	e036      	b.n	8014b22 <prvSocketSetMSS_IPV6+0x8e>
        }

        pxEndPoint = pxSocket->pxEndPoint;
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014ab8:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( pxEndPoint != NULL )
 8014aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d018      	beq.n	8014af2 <prvSocketSetMSS_IPV6+0x5e>
        {
            IPv6_Type_t eType;

            /* Compared to IPv4, an IPv6 header is 20 bytes longer.
             * It must be subtracted from the MSS. */
            size_t uxDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 8014ac0:	2314      	movs	r3, #20
 8014ac2:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
             * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
            ulMSS = ( uint32_t ) ( ipconfigTCP_MSS - uxDifference );
 8014ac4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014ac6:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014aca:	1a9b      	subs	r3, r3, r2
 8014acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
            eType = xIPv6_GetIPType( &( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6 ) );
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	3354      	adds	r3, #84	@ 0x54
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f7f8 fdb4 	bl	800d640 <xIPv6_GetIPType>
 8014ad8:	4603      	mov	r3, r0
 8014ada:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if( eType == eIPv6_Global )
 8014ade:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d105      	bne.n	8014af2 <prvSocketSetMSS_IPV6+0x5e>
            {
                /* The packet will travel through Internet, make the MSS
                 * smaller. */
                ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8014ae6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014ae8:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8014aec:	f7f5 fb7a 	bl	800a1e4 <FreeRTOS_min_uint32>
 8014af0:	63f8      	str	r0, [r7, #60]	@ 0x3c
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, cIPv6Address, sizeof( cIPv6Address ) );
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8014af8:	f107 0208 	add.w	r2, r7, #8
 8014afc:	2328      	movs	r3, #40	@ 0x28
 8014afe:	200a      	movs	r0, #10
 8014b00:	f7fa f8c0 	bl	800ec84 <FreeRTOS_inet_ntop>
            FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %s ip port %u\n", ( unsigned ) ulMSS, cIPv6Address, pxSocket->u.xTCP.usRemotePort ) );
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014b0a:	f107 0208 	add.w	r2, r7, #8
 8014b0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014b10:	4807      	ldr	r0, [pc, #28]	@ (8014b30 <prvSocketSetMSS_IPV6+0x9c>)
 8014b12:	f00c fed1 	bl	80218b8 <lUDPLoggingPrintf>
        }
        #endif

        pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8014b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b18:	b29a      	uxth	r2, r3
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    } while( ipFALSE_BOOL );
}
 8014b20:	bf00      	nop
 8014b22:	bf00      	nop
 8014b24:	3740      	adds	r7, #64	@ 0x40
 8014b26:	46bd      	mov	sp, r7
 8014b28:	bd80      	pop	{r7, pc}
 8014b2a:	bf00      	nop
 8014b2c:	08026374 	.word	0x08026374
 8014b30:	080263a0 	.word	0x080263a0

08014b34 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 8014b34:	b480      	push	{r7}
 8014b36:	b085      	sub	sp, #20
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
 8014b3c:	6039      	str	r1, [r7, #0]
            BaseType_t xResult = pdFALSE;
 8014b3e:	2300      	movs	r3, #0
 8014b40:	60fb      	str	r3, [r7, #12]

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000U ) == 0U )
 8014b42:	683a      	ldr	r2, [r7, #0]
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	1ad3      	subs	r3, r2, r3
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	db01      	blt.n	8014b50 <xSequenceLessThanOrEqual+0x1c>
            {
                xResult = pdTRUE;
 8014b4c:	2301      	movs	r3, #1
 8014b4e:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 8014b50:	68fb      	ldr	r3, [r7, #12]
        }
 8014b52:	4618      	mov	r0, r3
 8014b54:	3714      	adds	r7, #20
 8014b56:	46bd      	mov	sp, r7
 8014b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b5c:	4770      	bx	lr

08014b5e <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 8014b5e:	b480      	push	{r7}
 8014b60:	b085      	sub	sp, #20
 8014b62:	af00      	add	r7, sp, #0
 8014b64:	6078      	str	r0, [r7, #4]
 8014b66:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8014b68:	2300      	movs	r3, #0
 8014b6a:	60fb      	str	r3, [r7, #12]

        /* Test if a < b */
        if( ( ( b - ( a + 1U ) ) & 0x80000000U ) == 0U )
 8014b6c:	683a      	ldr	r2, [r7, #0]
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	1ad3      	subs	r3, r2, r3
 8014b72:	3b01      	subs	r3, #1
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	db01      	blt.n	8014b7c <xSequenceLessThan+0x1e>
        {
            xResult = pdTRUE;
 8014b78:	2301      	movs	r3, #1
 8014b7a:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
    }
 8014b7e:	4618      	mov	r0, r3
 8014b80:	3714      	adds	r7, #20
 8014b82:	46bd      	mov	sp, r7
 8014b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b88:	4770      	bx	lr

08014b8a <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 8014b8a:	b480      	push	{r7}
 8014b8c:	b085      	sub	sp, #20
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	6078      	str	r0, [r7, #4]
 8014b92:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8014b94:	2300      	movs	r3, #0
 8014b96:	60fb      	str	r3, [r7, #12]

        /* Test if a > b */
        if( ( ( a - ( b + 1U ) ) & 0x80000000U ) == 0U )
 8014b98:	687a      	ldr	r2, [r7, #4]
 8014b9a:	683b      	ldr	r3, [r7, #0]
 8014b9c:	1ad3      	subs	r3, r2, r3
 8014b9e:	3b01      	subs	r3, #1
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	db01      	blt.n	8014ba8 <xSequenceGreaterThan+0x1e>
        {
            xResult = pdTRUE;
 8014ba4:	2301      	movs	r3, #1
 8014ba6:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8014ba8:	68fb      	ldr	r3, [r7, #12]
    }
 8014baa:	4618      	mov	r0, r3
 8014bac:	3714      	adds	r7, #20
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb4:	4770      	bx	lr

08014bb6 <xSequenceGreaterThanOrEqual>:
 *
 * @return pdTRUE if a>=b, else pdFALSE.
 */
    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 8014bb6:	b480      	push	{r7}
 8014bb8:	b085      	sub	sp, #20
 8014bba:	af00      	add	r7, sp, #0
 8014bbc:	6078      	str	r0, [r7, #4]
 8014bbe:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	60fb      	str	r3, [r7, #12]

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000U ) == 0U )
 8014bc4:	687a      	ldr	r2, [r7, #4]
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	1ad3      	subs	r3, r2, r3
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	db01      	blt.n	8014bd2 <xSequenceGreaterThanOrEqual+0x1c>
        {
            xResult = pdTRUE;
 8014bce:	2301      	movs	r3, #1
 8014bd0:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8014bd2:	68fb      	ldr	r3, [r7, #12]
    }
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	3714      	adds	r7, #20
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bde:	4770      	bx	lr

08014be0 <vListInsertFifo>:
 * @param[in] pxList The list in which the item is to inserted.
 * @param[in] pxNewListItem The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b082      	sub	sp, #8
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	3308      	adds	r3, #8
 8014bee:	461a      	mov	r2, r3
 8014bf0:	6839      	ldr	r1, [r7, #0]
 8014bf2:	6878      	ldr	r0, [r7, #4]
 8014bf4:	f000 f822 	bl	8014c3c <vListInsertGeneric>
        }
 8014bf8:	bf00      	nop
 8014bfa:	3708      	adds	r7, #8
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}

08014c00 <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b082      	sub	sp, #8
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	6078      	str	r0, [r7, #4]
        pxTimer->uxBorn = xTaskGetTickCount();
 8014c08:	f7ef fa08 	bl	800401c <xTaskGetTickCount>
 8014c0c:	4602      	mov	r2, r0
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	601a      	str	r2, [r3, #0]
    }
 8014c12:	bf00      	nop
 8014c14:	3708      	adds	r7, #8
 8014c16:	46bd      	mov	sp, r7
 8014c18:	bd80      	pop	{r7, pc}

08014c1a <ulTimerGetAge>:
 * @param[in] pxTimer The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 8014c1a:	b580      	push	{r7, lr}
 8014c1c:	b084      	sub	sp, #16
 8014c1e:	af00      	add	r7, sp, #0
 8014c20:	6078      	str	r0, [r7, #4]
        TickType_t uxNow = xTaskGetTickCount();
 8014c22:	f7ef f9fb 	bl	800401c <xTaskGetTickCount>
 8014c26:	60f8      	str	r0, [r7, #12]
        TickType_t uxDiff = uxNow - pxTimer->uxBorn;
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	68fa      	ldr	r2, [r7, #12]
 8014c2e:	1ad3      	subs	r3, r2, r3
 8014c30:	60bb      	str	r3, [r7, #8]

        return ( uint32_t ) ( uxDiff * portTICK_PERIOD_MS );
 8014c32:	68bb      	ldr	r3, [r7, #8]
    }
 8014c34:	4618      	mov	r0, r3
 8014c36:	3710      	adds	r7, #16
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	bd80      	pop	{r7, pc}

08014c3c <vListInsertGeneric>:
 */
    #if ( ipconfigUSE_TCP_WIN == 1 )
        static void vListInsertGeneric( List_t * const pxList,
                                        ListItem_t * const pxNewListItem,
                                        MiniListItem_t * pxWhere )
        {
 8014c3c:	b480      	push	{r7}
 8014c3e:	b085      	sub	sp, #20
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	60f8      	str	r0, [r7, #12]
 8014c44:	60b9      	str	r1, [r7, #8]
 8014c46:	607a      	str	r2, [r7, #4]
             * returned by listGET_HEAD_ENTRY() */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewListItem->pxNext = ( ( ListItem_t * ) pxWhere );
 8014c48:	68bb      	ldr	r3, [r7, #8]
 8014c4a:	687a      	ldr	r2, [r7, #4]
 8014c4c:	605a      	str	r2, [r3, #4]

            pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	689a      	ldr	r2, [r3, #8]
 8014c52:	68bb      	ldr	r3, [r7, #8]
 8014c54:	609a      	str	r2, [r3, #8]
            pxWhere->pxPrevious->pxNext = pxNewListItem;
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	689b      	ldr	r3, [r3, #8]
 8014c5a:	68ba      	ldr	r2, [r7, #8]
 8014c5c:	605a      	str	r2, [r3, #4]
            pxWhere->pxPrevious = pxNewListItem;
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	68ba      	ldr	r2, [r7, #8]
 8014c62:	609a      	str	r2, [r3, #8]

            /* Remember which list the item is in. */
            listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8014c64:	68bb      	ldr	r3, [r7, #8]
 8014c66:	68fa      	ldr	r2, [r7, #12]
 8014c68:	611a      	str	r2, [r3, #16]

            ( pxList->uxNumberOfItems )++;
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	1c5a      	adds	r2, r3, #1
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	601a      	str	r2, [r3, #0]
        }
 8014c74:	bf00      	nop
 8014c76:	3714      	adds	r7, #20
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7e:	4770      	bx	lr

08014c80 <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b082      	sub	sp, #8
 8014c84:	af00      	add	r7, sp, #0
            BaseType_t xIndex;
            BaseType_t xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 8014c86:	4827      	ldr	r0, [pc, #156]	@ (8014d24 <prvCreateSectors+0xa4>)
 8014c88:	f7ed ffe2 	bl	8002c50 <vListInitialise>
            xTCPSegments = ( ( TCPSegment_t * ) pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 8014c8c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8014c90:	f7f1 f830 	bl	8005cf4 <pvPortMalloc>
 8014c94:	4603      	mov	r3, r0
 8014c96:	4a24      	ldr	r2, [pc, #144]	@ (8014d28 <prvCreateSectors+0xa8>)
 8014c98:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 8014c9a:	4b23      	ldr	r3, [pc, #140]	@ (8014d28 <prvCreateSectors+0xa8>)
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d107      	bne.n	8014cb2 <prvCreateSectors+0x32>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 8014ca2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8014ca6:	4821      	ldr	r0, [pc, #132]	@ (8014d2c <prvCreateSectors+0xac>)
 8014ca8:	f00c fe06 	bl	80218b8 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) ) );

                xReturn = pdFAIL;
 8014cac:	2300      	movs	r3, #0
 8014cae:	603b      	str	r3, [r7, #0]
 8014cb0:	e032      	b.n	8014d18 <prvCreateSectors+0x98>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 8014cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8014d28 <prvCreateSectors+0xa8>)
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8014cba:	2100      	movs	r1, #0
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	f00d f924 	bl	8021f0a <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	607b      	str	r3, [r7, #4]
 8014cc6:	e022      	b.n	8014d0e <prvCreateSectors+0x8e>
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xSegmentItem ) );
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xQueueItem ) );
                    }
                    #endif

                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8014cc8:	4b17      	ldr	r3, [pc, #92]	@ (8014d28 <prvCreateSectors+0xa8>)
 8014cca:	6819      	ldr	r1, [r3, #0]
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	019a      	lsls	r2, r3, #6
 8014cd0:	4b15      	ldr	r3, [pc, #84]	@ (8014d28 <prvCreateSectors+0xa8>)
 8014cd2:	6818      	ldr	r0, [r3, #0]
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	019b      	lsls	r3, r3, #6
 8014cd8:	4403      	add	r3, r0
 8014cda:	440a      	add	r2, r1
 8014cdc:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8014cde:	4b12      	ldr	r3, [pc, #72]	@ (8014d28 <prvCreateSectors+0xa8>)
 8014ce0:	6819      	ldr	r1, [r3, #0]
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	019a      	lsls	r2, r3, #6
 8014ce6:	4b10      	ldr	r3, [pc, #64]	@ (8014d28 <prvCreateSectors+0xa8>)
 8014ce8:	6818      	ldr	r0, [r3, #0]
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	019b      	lsls	r3, r3, #6
 8014cee:	4403      	add	r3, r0
 8014cf0:	440a      	add	r2, r1
 8014cf2:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 8014cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8014d28 <prvCreateSectors+0xa8>)
 8014cf6:	681a      	ldr	r2, [r3, #0]
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	019b      	lsls	r3, r3, #6
 8014cfc:	4413      	add	r3, r2
 8014cfe:	332c      	adds	r3, #44	@ 0x2c
 8014d00:	4619      	mov	r1, r3
 8014d02:	4808      	ldr	r0, [pc, #32]	@ (8014d24 <prvCreateSectors+0xa4>)
 8014d04:	f7ff ff6c 	bl	8014be0 <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	3301      	adds	r3, #1
 8014d0c:	607b      	str	r3, [r7, #4]
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	2b3f      	cmp	r3, #63	@ 0x3f
 8014d12:	ddd9      	ble.n	8014cc8 <prvCreateSectors+0x48>
                }

                xReturn = pdPASS;
 8014d14:	2301      	movs	r3, #1
 8014d16:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 8014d18:	683b      	ldr	r3, [r7, #0]
        }
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	3708      	adds	r7, #8
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	bd80      	pop	{r7, pc}
 8014d22:	bf00      	nop
 8014d24:	20001470 	.word	0x20001470
 8014d28:	2000146c 	.word	0x2000146c
 8014d2c:	080263d0 	.word	0x080263d0

08014d30 <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 8014d30:	b480      	push	{r7}
 8014d32:	b087      	sub	sp, #28
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
 8014d38:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	613b      	str	r3, [r7, #16]
             * segments. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	33ac      	adds	r3, #172	@ 0xac
 8014d42:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	685b      	ldr	r3, [r3, #4]
 8014d48:	617b      	str	r3, [r7, #20]
 8014d4a:	e00d      	b.n	8014d68 <xTCPWindowRxFind+0x38>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8014d4c:	697b      	ldr	r3, [r7, #20]
 8014d4e:	68db      	ldr	r3, [r3, #12]
 8014d50:	60bb      	str	r3, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 8014d52:	68bb      	ldr	r3, [r7, #8]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	683a      	ldr	r2, [r7, #0]
 8014d58:	429a      	cmp	r2, r3
 8014d5a:	d102      	bne.n	8014d62 <xTCPWindowRxFind+0x32>
                {
                    pxReturn = pxSegment;
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	613b      	str	r3, [r7, #16]
                    break;
 8014d60:	e006      	b.n	8014d70 <xTCPWindowRxFind+0x40>
                 pxIterator = listGET_NEXT( pxIterator ) )
 8014d62:	697b      	ldr	r3, [r7, #20]
 8014d64:	685b      	ldr	r3, [r3, #4]
 8014d66:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 8014d68:	697a      	ldr	r2, [r7, #20]
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	d1ed      	bne.n	8014d4c <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 8014d70:	693b      	ldr	r3, [r7, #16]
        }
 8014d72:	4618      	mov	r0, r3
 8014d74:	371c      	adds	r7, #28
 8014d76:	46bd      	mov	sp, r7
 8014d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7c:	4770      	bx	lr
	...

08014d80 <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b088      	sub	sp, #32
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	60f8      	str	r0, [r7, #12]
 8014d88:	60b9      	str	r1, [r7, #8]
 8014d8a:	607a      	str	r2, [r7, #4]
 8014d8c:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8014d8e:	4b33      	ldr	r3, [pc, #204]	@ (8014e5c <xTCPWindowNew+0xdc>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d10c      	bne.n	8014db0 <xTCPWindowNew+0x30>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 8014d96:	683b      	ldr	r3, [r7, #0]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d001      	beq.n	8014da0 <xTCPWindowNew+0x20>
 8014d9c:	2352      	movs	r3, #82	@ 0x52
 8014d9e:	e000      	b.n	8014da2 <xTCPWindowNew+0x22>
 8014da0:	2354      	movs	r3, #84	@ 0x54
 8014da2:	4619      	mov	r1, r3
 8014da4:	482e      	ldr	r0, [pc, #184]	@ (8014e60 <xTCPWindowNew+0xe0>)
 8014da6:	f00c fd87 	bl	80218b8 <lUDPLoggingPrintf>
                pxSegment = NULL;
 8014daa:	2300      	movs	r3, #0
 8014dac:	61fb      	str	r3, [r7, #28]
 8014dae:	e04f      	b.n	8014e50 <xTCPWindowNew+0xd0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 8014db0:	4b2a      	ldr	r3, [pc, #168]	@ (8014e5c <xTCPWindowNew+0xdc>)
 8014db2:	68db      	ldr	r3, [r3, #12]
 8014db4:	61bb      	str	r3, [r7, #24]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8014db6:	69bb      	ldr	r3, [r7, #24]
 8014db8:	68db      	ldr	r3, [r3, #12]
 8014dba:	61fb      	str	r3, [r7, #28]

                configASSERT( pxItem != NULL );
 8014dbc:	69bb      	ldr	r3, [r7, #24]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d104      	bne.n	8014dcc <xTCPWindowNew+0x4c>
 8014dc2:	f240 2125 	movw	r1, #549	@ 0x225
 8014dc6:	4827      	ldr	r0, [pc, #156]	@ (8014e64 <xTCPWindowNew+0xe4>)
 8014dc8:	f7ec fc50 	bl	800166c <vAssertCalled>
                configASSERT( pxSegment != NULL );
 8014dcc:	69fb      	ldr	r3, [r7, #28]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d104      	bne.n	8014ddc <xTCPWindowNew+0x5c>
 8014dd2:	f240 2126 	movw	r1, #550	@ 0x226
 8014dd6:	4823      	ldr	r0, [pc, #140]	@ (8014e64 <xTCPWindowNew+0xe4>)
 8014dd8:	f7ec fc48 	bl	800166c <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 8014ddc:	69b8      	ldr	r0, [r7, #24]
 8014dde:	f7ed ffc1 	bl	8002d64 <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 8014de2:	683b      	ldr	r3, [r7, #0]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d006      	beq.n	8014df6 <xTCPWindowNew+0x76>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	33a4      	adds	r3, #164	@ 0xa4
 8014dec:	69b9      	ldr	r1, [r7, #24]
 8014dee:	4618      	mov	r0, r3
 8014df0:	f7ff fef6 	bl	8014be0 <vListInsertFifo>
 8014df4:	e005      	b.n	8014e02 <xTCPWindowNew+0x82>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	3390      	adds	r3, #144	@ 0x90
 8014dfa:	69b9      	ldr	r1, [r7, #24]
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f7ff feef 	bl	8014be0 <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 8014e02:	69fb      	ldr	r3, [r7, #28]
 8014e04:	3310      	adds	r3, #16
 8014e06:	4618      	mov	r0, r3
 8014e08:	f7ff fefa 	bl	8014c00 <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 8014e0c:	69fb      	ldr	r3, [r7, #28]
 8014e0e:	2200      	movs	r2, #0
 8014e10:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8014e12:	683b      	ldr	r3, [r7, #0]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d001      	beq.n	8014e1c <xTCPWindowNew+0x9c>
 8014e18:	2101      	movs	r1, #1
 8014e1a:	e000      	b.n	8014e1e <xTCPWindowNew+0x9e>
 8014e1c:	2100      	movs	r1, #0
 8014e1e:	69fa      	ldr	r2, [r7, #28]
 8014e20:	7d93      	ldrb	r3, [r2, #22]
 8014e22:	f361 0382 	bfi	r3, r1, #2, #1
 8014e26:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 8014e28:	69fb      	ldr	r3, [r7, #28]
 8014e2a:	687a      	ldr	r2, [r7, #4]
 8014e2c:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 8014e2e:	69fb      	ldr	r3, [r7, #28]
 8014e30:	687a      	ldr	r2, [r7, #4]
 8014e32:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 8014e34:	69fb      	ldr	r3, [r7, #28]
 8014e36:	68ba      	ldr	r2, [r7, #8]
 8014e38:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                    UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 8014e3a:	4b08      	ldr	r3, [pc, #32]	@ (8014e5c <xTCPWindowNew+0xdc>)
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	617b      	str	r3, [r7, #20]

                    if( xLowestLength > xLength )
 8014e40:	4b09      	ldr	r3, [pc, #36]	@ (8014e68 <xTCPWindowNew+0xe8>)
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	697a      	ldr	r2, [r7, #20]
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d202      	bcs.n	8014e50 <xTCPWindowNew+0xd0>
                    {
                        xLowestLength = xLength;
 8014e4a:	4a07      	ldr	r2, [pc, #28]	@ (8014e68 <xTCPWindowNew+0xe8>)
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	6013      	str	r3, [r2, #0]
                    }
                }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 8014e50:	69fb      	ldr	r3, [r7, #28]
        }
 8014e52:	4618      	mov	r0, r3
 8014e54:	3720      	adds	r7, #32
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}
 8014e5a:	bf00      	nop
 8014e5c:	20001470 	.word	0x20001470
 8014e60:	080263f4 	.word	0x080263f4
 8014e64:	08026424 	.word	0x08026424
 8014e68:	2000001c 	.word	0x2000001c

08014e6c <xTCPWindowRxEmpty>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b084      	sub	sp, #16
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d002      	beq.n	8014e84 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 8014e7e:	2300      	movs	r3, #0
 8014e80:	60fb      	str	r3, [r7, #12]
 8014e82:	e01e      	b.n	8014ec2 <xTCPWindowRxEmpty+0x56>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber + 1U, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	691b      	ldr	r3, [r3, #16]
 8014e88:	1c5a      	adds	r2, r3, #1
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	699b      	ldr	r3, [r3, #24]
 8014e8e:	4619      	mov	r1, r3
 8014e90:	4610      	mov	r0, r2
 8014e92:	f7ff fe90 	bl	8014bb6 <xSequenceGreaterThanOrEqual>
 8014e96:	4603      	mov	r3, r0
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d002      	beq.n	8014ea2 <xTCPWindowRxEmpty+0x36>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	60fb      	str	r3, [r7, #12]
 8014ea0:	e00f      	b.n	8014ec2 <xTCPWindowRxEmpty+0x56>
            }
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %u highest %u (empty)\n",
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	691a      	ldr	r2, [r3, #16]
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	68db      	ldr	r3, [r3, #12]
 8014eaa:	1ad1      	subs	r1, r2, r3
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	699a      	ldr	r2, [r3, #24]
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	68db      	ldr	r3, [r3, #12]
 8014eb4:	1ad3      	subs	r3, r2, r3
 8014eb6:	461a      	mov	r2, r3
 8014eb8:	4804      	ldr	r0, [pc, #16]	@ (8014ecc <xTCPWindowRxEmpty+0x60>)
 8014eba:	f00c fcfd 	bl	80218b8 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 8014ec2:	68fb      	ldr	r3, [r7, #12]
        }
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3710      	adds	r7, #16
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}
 8014ecc:	08026454 	.word	0x08026454

08014ed0 <xTCPWindowGetHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b084      	sub	sp, #16
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d102      	bne.n	8014ee6 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	60fb      	str	r3, [r7, #12]
 8014ee4:	e008      	b.n	8014ef8 <xTCPWindowGetHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	68db      	ldr	r3, [r3, #12]
 8014eea:	60bb      	str	r3, [r7, #8]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8014eec:	68bb      	ldr	r3, [r7, #8]
 8014eee:	68db      	ldr	r3, [r3, #12]
 8014ef0:	60fb      	str	r3, [r7, #12]

                ( void ) uxListRemove( pxItem );
 8014ef2:	68b8      	ldr	r0, [r7, #8]
 8014ef4:	f7ed ff36 	bl	8002d64 <uxListRemove>
            }

            return pxSegment;
 8014ef8:	68fb      	ldr	r3, [r7, #12]
        }
 8014efa:	4618      	mov	r0, r3
 8014efc:	3710      	adds	r7, #16
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}

08014f02 <xTCPWindowPeekHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 8014f02:	b480      	push	{r7}
 8014f04:	b085      	sub	sp, #20
 8014f06:	af00      	add	r7, sp, #0
 8014f08:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d102      	bne.n	8014f18 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 8014f12:	2300      	movs	r3, #0
 8014f14:	60fb      	str	r3, [r7, #12]
 8014f16:	e005      	b.n	8014f24 <xTCPWindowPeekHead+0x22>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	68db      	ldr	r3, [r3, #12]
 8014f1c:	60bb      	str	r3, [r7, #8]
                pxReturn = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8014f1e:	68bb      	ldr	r3, [r7, #8]
 8014f20:	68db      	ldr	r3, [r3, #12]
 8014f22:	60fb      	str	r3, [r7, #12]
            }

            return pxReturn;
 8014f24:	68fb      	ldr	r3, [r7, #12]
        }
 8014f26:	4618      	mov	r0, r3
 8014f28:	3714      	adds	r7, #20
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f30:	4770      	bx	lr
	...

08014f34 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b082      	sub	sp, #8
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d004      	beq.n	8014f4e <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	3318      	adds	r3, #24
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f7ed ff0b 	bl	8002d64 <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0U;
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	2200      	movs	r2, #0
 8014f52:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	2200      	movs	r2, #0
 8014f58:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0U;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d004      	beq.n	8014f72 <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	332c      	adds	r3, #44	@ 0x2c
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f7ed fef9 	bl	8002d64 <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	332c      	adds	r3, #44	@ 0x2c
 8014f76:	4619      	mov	r1, r3
 8014f78:	4803      	ldr	r0, [pc, #12]	@ (8014f88 <vTCPWindowFree+0x54>)
 8014f7a:	f7ff fe31 	bl	8014be0 <vListInsertFifo>
        }
 8014f7e:	bf00      	nop
 8014f80:	3708      	adds	r7, #8
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd80      	pop	{r7, pc}
 8014f86:	bf00      	nop
 8014f88:	20001470 	.word	0x20001470

08014f8c <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b086      	sub	sp, #24
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 8014f94:	2300      	movs	r3, #0
 8014f96:	613b      	str	r3, [r7, #16]
 8014f98:	e01d      	b.n	8014fd6 <vTCPWindowDestroy+0x4a>
            {
                if( xRound != 0 )
 8014f9a:	693b      	ldr	r3, [r7, #16]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d003      	beq.n	8014fa8 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	33a4      	adds	r3, #164	@ 0xa4
 8014fa4:	617b      	str	r3, [r7, #20]
 8014fa6:	e002      	b.n	8014fae <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	3390      	adds	r3, #144	@ 0x90
 8014fac:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 8014fae:	697b      	ldr	r3, [r7, #20]
 8014fb0:	689b      	ldr	r3, [r3, #8]
 8014fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fb6:	d10b      	bne.n	8014fd0 <vTCPWindowDestroy+0x44>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8014fb8:	e006      	b.n	8014fc8 <vTCPWindowDestroy+0x3c>
                    {
                        pxSegment = ( ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 8014fba:	697b      	ldr	r3, [r7, #20]
 8014fbc:	68db      	ldr	r3, [r3, #12]
 8014fbe:	68db      	ldr	r3, [r3, #12]
 8014fc0:	60fb      	str	r3, [r7, #12]
                        vTCPWindowFree( pxSegment );
 8014fc2:	68f8      	ldr	r0, [r7, #12]
 8014fc4:	f7ff ffb6 	bl	8014f34 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8014fc8:	697b      	ldr	r3, [r7, #20]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d1f4      	bne.n	8014fba <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 8014fd0:	693b      	ldr	r3, [r7, #16]
 8014fd2:	3301      	adds	r3, #1
 8014fd4:	613b      	str	r3, [r7, #16]
 8014fd6:	693b      	ldr	r3, [r7, #16]
 8014fd8:	2b01      	cmp	r3, #1
 8014fda:	ddde      	ble.n	8014f9a <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 8014fdc:	bf00      	nop
 8014fde:	bf00      	nop
 8014fe0:	3718      	adds	r7, #24
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	bd80      	pop	{r7, pc}
	...

08014fe8 <xTCPWindowCreate>:
                                 uint32_t ulRxWindowLength,
                                 uint32_t ulTxWindowLength,
                                 uint32_t ulAckNumber,
                                 uint32_t ulSequenceNumber,
                                 uint32_t ulMSS )
    {
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b086      	sub	sp, #24
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	60f8      	str	r0, [r7, #12]
 8014ff0:	60b9      	str	r1, [r7, #8]
 8014ff2:	607a      	str	r2, [r7, #4]
 8014ff4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdPASS;
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	617b      	str	r3, [r7, #20]

        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( xTCPSegments == NULL )
 8014ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8015070 <xTCPWindowCreate+0x88>)
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d102      	bne.n	8015008 <xTCPWindowCreate+0x20>
            {
                xReturn = prvCreateSectors();
 8015002:	f7ff fe3d 	bl	8014c80 <prvCreateSectors>
 8015006:	6178      	str	r0, [r7, #20]
            }

            vListInitialise( &( pxWindow->xTxSegments ) );
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	3390      	adds	r3, #144	@ 0x90
 801500c:	4618      	mov	r0, r3
 801500e:	f7ed fe1f 	bl	8002c50 <vListInitialise>
            vListInitialise( &( pxWindow->xRxSegments ) );
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	33a4      	adds	r3, #164	@ 0xa4
 8015016:	4618      	mov	r0, r3
 8015018:	f7ed fe1a 	bl	8002c50 <vListInitialise>

            vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	3340      	adds	r3, #64	@ 0x40
 8015020:	4618      	mov	r0, r3
 8015022:	f7ed fe15 	bl	8002c50 <vListInitialise>
            vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	3354      	adds	r3, #84	@ 0x54
 801502a:	4618      	mov	r0, r3
 801502c:	f7ed fe10 	bl	8002c50 <vListInitialise>
            vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	3368      	adds	r3, #104	@ 0x68
 8015034:	4618      	mov	r0, r3
 8015036:	f7ed fe0b 	bl	8002c50 <vListInitialise>
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        if( xTCPWindowLoggingLevel != 0 )
 801503a:	4b0e      	ldr	r3, [pc, #56]	@ (8015074 <xTCPWindowCreate+0x8c>)
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d004      	beq.n	801504c <xTCPWindowCreate+0x64>
        {
            FreeRTOS_debug_printf( ( "xTCPWindowCreate: for WinLen = Rx/Tx: %u/%u\n",
 8015042:	687a      	ldr	r2, [r7, #4]
 8015044:	68b9      	ldr	r1, [r7, #8]
 8015046:	480c      	ldr	r0, [pc, #48]	@ (8015078 <xTCPWindowCreate+0x90>)
 8015048:	f00c fc36 	bl	80218b8 <lUDPLoggingPrintf>
                                     ( unsigned ) ulRxWindowLength, ( unsigned ) ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	68ba      	ldr	r2, [r7, #8]
 8015050:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	687a      	ldr	r2, [r7, #4]
 8015056:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 8015058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801505a:	6a3a      	ldr	r2, [r7, #32]
 801505c:	6839      	ldr	r1, [r7, #0]
 801505e:	68f8      	ldr	r0, [r7, #12]
 8015060:	f000 f80c 	bl	801507c <vTCPWindowInit>

        return xReturn;
 8015064:	697b      	ldr	r3, [r7, #20]
    }
 8015066:	4618      	mov	r0, r3
 8015068:	3718      	adds	r7, #24
 801506a:	46bd      	mov	sp, r7
 801506c:	bd80      	pop	{r7, pc}
 801506e:	bf00      	nop
 8015070:	2000146c 	.word	0x2000146c
 8015074:	20001484 	.word	0x20001484
 8015078:	08026484 	.word	0x08026484

0801507c <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 801507c:	b480      	push	{r7}
 801507e:	b087      	sub	sp, #28
 8015080:	af00      	add	r7, sp, #0
 8015082:	60f8      	str	r0, [r7, #12]
 8015084:	60b9      	str	r1, [r7, #8]
 8015086:	607a      	str	r2, [r7, #4]
 8015088:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 801508a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801508e:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0U;
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	2200      	movs	r2, #0
 8015094:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 8015096:	68fa      	ldr	r2, [r7, #12]
 8015098:	7813      	ldrb	r3, [r2, #0]
 801509a:	f043 0301 	orr.w	r3, r3, #1
 801509e:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0U )
 80150a0:	683b      	ldr	r3, [r7, #0]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d024      	beq.n	80150f0 <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d004      	beq.n	80150ba <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	b29a      	uxth	r2, r3
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80150c0:	461a      	mov	r2, r3
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	4293      	cmp	r3, r2
 80150c6:	d304      	bcc.n	80150d2 <vTCPWindowInit+0x56>
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d10e      	bne.n	80150f0 <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	685a      	ldr	r2, [r3, #4]
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80150dc:	683a      	ldr	r2, [r7, #0]
 80150de:	fb03 f202 	mul.w	r2, r3, r2
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 80150e6:	683b      	ldr	r3, [r7, #0]
 80150e8:	b29a      	uxth	r2, r3
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
            pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	697a      	ldr	r2, [r7, #20]
 80150f4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	68ba      	ldr	r2, [r7, #8]
 80150fa:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	68ba      	ldr	r2, [r7, #8]
 8015100:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	68ba      	ldr	r2, [r7, #8]
 8015106:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	687a      	ldr	r2, [r7, #4]
 801510c:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	687a      	ldr	r2, [r7, #4]
 8015112:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	687a      	ldr	r2, [r7, #4]
 8015118:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	687a      	ldr	r2, [r7, #4]
 801511e:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	687a      	ldr	r2, [r7, #4]
 8015124:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 8015126:	bf00      	nop
 8015128:	371c      	adds	r7, #28
 801512a:	46bd      	mov	sp, r7
 801512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015130:	4770      	bx	lr
	...

08015134 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 8015134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015136:	b08f      	sub	sp, #60	@ 0x3c
 8015138:	af04      	add	r7, sp, #16
 801513a:	60f8      	str	r0, [r7, #12]
 801513c:	60b9      	str	r1, [r7, #8]
 801513e:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 8015140:	2300      	movs	r3, #0
 8015142:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 8015144:	68ba      	ldr	r2, [r7, #8]
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	4413      	add	r3, r2
 801514a:	61fb      	str	r3, [r7, #28]

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	33ac      	adds	r3, #172	@ 0xac
 8015150:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 8015152:	69bb      	ldr	r3, [r7, #24]
 8015154:	685b      	ldr	r3, [r3, #4]
 8015156:	623b      	str	r3, [r7, #32]
 8015158:	e027      	b.n	80151aa <xTCPWindowRxConfirm+0x76>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801515a:	6a3b      	ldr	r3, [r7, #32]
 801515c:	68db      	ldr	r3, [r3, #12]
 801515e:	617b      	str	r3, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8015160:	697b      	ldr	r3, [r7, #20]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	68b9      	ldr	r1, [r7, #8]
 8015166:	4618      	mov	r0, r3
 8015168:	f7ff fd25 	bl	8014bb6 <xSequenceGreaterThanOrEqual>
 801516c:	4603      	mov	r3, r0
 801516e:	2b00      	cmp	r3, #0
 8015170:	d018      	beq.n	80151a4 <xTCPWindowRxConfirm+0x70>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 8015172:	697b      	ldr	r3, [r7, #20]
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	69f9      	ldr	r1, [r7, #28]
 8015178:	4618      	mov	r0, r3
 801517a:	f7ff fcf0 	bl	8014b5e <xSequenceLessThan>
 801517e:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8015180:	2b00      	cmp	r3, #0
 8015182:	d00f      	beq.n	80151a4 <xTCPWindowRxConfirm+0x70>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 8015184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015186:	2b00      	cmp	r3, #0
 8015188:	d00a      	beq.n	80151a0 <xTCPWindowRxConfirm+0x6c>
 801518a:	697b      	ldr	r3, [r7, #20]
 801518c:	681a      	ldr	r2, [r3, #0]
 801518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	4619      	mov	r1, r3
 8015194:	4610      	mov	r0, r2
 8015196:	f7ff fce2 	bl	8014b5e <xSequenceLessThan>
 801519a:	4603      	mov	r3, r0
 801519c:	2b00      	cmp	r3, #0
 801519e:	d001      	beq.n	80151a4 <xTCPWindowRxConfirm+0x70>
                    {
                        pxBest = pxSegment;
 80151a0:	697b      	ldr	r3, [r7, #20]
 80151a2:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 80151a4:	6a3b      	ldr	r3, [r7, #32]
 80151a6:	685b      	ldr	r3, [r3, #4]
 80151a8:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 80151aa:	6a3a      	ldr	r2, [r7, #32]
 80151ac:	69bb      	ldr	r3, [r7, #24]
 80151ae:	429a      	cmp	r2, r3
 80151b0:	d1d3      	bne.n	801515a <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 80151b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d030      	beq.n	801521a <xTCPWindowRxConfirm+0xe6>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 80151b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151ba:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 80151bc:	68ba      	ldr	r2, [r7, #8]
 80151be:	429a      	cmp	r2, r3
 80151c0:	d104      	bne.n	80151cc <xTCPWindowRxConfirm+0x98>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 80151c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151c4:	689a      	ldr	r2, [r3, #8]
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d026      	beq.n	801521a <xTCPWindowRxConfirm+0xe6>
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %u (+%u=%u) found %u (+%d=%u)\n",
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80151d2:	461e      	mov	r6, r3
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	68db      	ldr	r3, [r3, #12]
 80151d8:	68ba      	ldr	r2, [r7, #8]
 80151da:	1ad5      	subs	r5, r2, r3
 80151dc:	68ba      	ldr	r2, [r7, #8]
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	441a      	add	r2, r3
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	68db      	ldr	r3, [r3, #12]
 80151e6:	1ad3      	subs	r3, r2, r3
 80151e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151ea:	6811      	ldr	r1, [r2, #0]
 80151ec:	68fa      	ldr	r2, [r7, #12]
 80151ee:	68d2      	ldr	r2, [r2, #12]
 80151f0:	1a8a      	subs	r2, r1, r2
 80151f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80151f4:	6889      	ldr	r1, [r1, #8]
 80151f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80151f8:	6800      	ldr	r0, [r0, #0]
 80151fa:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80151fc:	68a4      	ldr	r4, [r4, #8]
 80151fe:	4404      	add	r4, r0
 8015200:	68f8      	ldr	r0, [r7, #12]
 8015202:	68c0      	ldr	r0, [r0, #12]
 8015204:	1a20      	subs	r0, r4, r0
 8015206:	9003      	str	r0, [sp, #12]
 8015208:	9102      	str	r1, [sp, #8]
 801520a:	9201      	str	r2, [sp, #4]
 801520c:	9300      	str	r3, [sp, #0]
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	462a      	mov	r2, r5
 8015212:	4631      	mov	r1, r6
 8015214:	4803      	ldr	r0, [pc, #12]	@ (8015224 <xTCPWindowRxConfirm+0xf0>)
 8015216:	f00c fb4f 	bl	80218b8 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) pxBest->lDataLength,
                                         ( unsigned ) ( pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            return pxBest;
 801521a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 801521c:	4618      	mov	r0, r3
 801521e:	372c      	adds	r7, #44	@ 0x2c
 8015220:	46bd      	mov	sp, r7
 8015222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015224:	080264b4 	.word	0x080264b4

08015228 <prvTCPWindowRx_ExpectedRX>:
 * @param[in] pxWindow The TCP sliding window data of the socket.
 * @param[in] ulLength The number of bytes that can be added.
 */
        static void prvTCPWindowRx_ExpectedRX( TCPWindow_t * pxWindow,
                                               uint32_t ulLength )
        {
 8015228:	b5b0      	push	{r4, r5, r7, lr}
 801522a:	b08a      	sub	sp, #40	@ 0x28
 801522c:	af04      	add	r7, sp, #16
 801522e:	6078      	str	r0, [r7, #4]
 8015230:	6039      	str	r1, [r7, #0]
            uint32_t ulSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	691b      	ldr	r3, [r3, #16]
 8015236:	613b      	str	r3, [r7, #16]
            uint32_t ulCurrentSequenceNumber = ulSequenceNumber + ulLength;
 8015238:	693a      	ldr	r2, [r7, #16]
 801523a:	683b      	ldr	r3, [r7, #0]
 801523c:	4413      	add	r3, r2
 801523e:	617b      	str	r3, [r7, #20]

            if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015246:	2b00      	cmp	r3, #0
 8015248:	d04e      	beq.n	80152e8 <prvTCPWindowRx_ExpectedRX+0xc0>
            {
                uint32_t ulSavedSequenceNumber = ulCurrentSequenceNumber;
 801524a:	697b      	ldr	r3, [r7, #20]
 801524c:	60fb      	str	r3, [r7, #12]
                 * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                 * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                 * clean them out. */
                do
                {
                    pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 801524e:	683a      	ldr	r2, [r7, #0]
 8015250:	6939      	ldr	r1, [r7, #16]
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f7ff ff6e 	bl	8015134 <xTCPWindowRxConfirm>
 8015258:	60b8      	str	r0, [r7, #8]

                    if( pxFound != NULL )
 801525a:	68bb      	ldr	r3, [r7, #8]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d002      	beq.n	8015266 <prvTCPWindowRx_ExpectedRX+0x3e>
                    {
                        /* Remove it because it will be passed to user directly. */
                        vTCPWindowFree( pxFound );
 8015260:	68b8      	ldr	r0, [r7, #8]
 8015262:	f7ff fe67 	bl	8014f34 <vTCPWindowFree>
                    }
                } while( pxFound != NULL );
 8015266:	68bb      	ldr	r3, [r7, #8]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d1f0      	bne.n	801524e <prvTCPWindowRx_ExpectedRX+0x26>

                /*  Check for following segments that are already in the
                 * queue and increment ulCurrentSequenceNumber. */
                for( ; ; )
                {
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 801526c:	6979      	ldr	r1, [r7, #20]
 801526e:	6878      	ldr	r0, [r7, #4]
 8015270:	f7ff fd5e 	bl	8014d30 <xTCPWindowRxFind>
 8015274:	60b8      	str	r0, [r7, #8]

                    if( pxFound == NULL )
 8015276:	68bb      	ldr	r3, [r7, #8]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d009      	beq.n	8015290 <prvTCPWindowRx_ExpectedRX+0x68>
                    {
                        break;
                    }

                    ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 801527c:	68bb      	ldr	r3, [r7, #8]
 801527e:	689b      	ldr	r3, [r3, #8]
 8015280:	461a      	mov	r2, r3
 8015282:	697b      	ldr	r3, [r7, #20]
 8015284:	4413      	add	r3, r2
 8015286:	617b      	str	r3, [r7, #20]

                    /* As all packet below this one have been passed to the
                     * user it can be discarded. */
                    vTCPWindowFree( pxFound );
 8015288:	68b8      	ldr	r0, [r7, #8]
 801528a:	f7ff fe53 	bl	8014f34 <vTCPWindowFree>
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 801528e:	e7ed      	b.n	801526c <prvTCPWindowRx_ExpectedRX+0x44>
                        break;
 8015290:	bf00      	nop
                }

                if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 8015292:	68fa      	ldr	r2, [r7, #12]
 8015294:	697b      	ldr	r3, [r7, #20]
 8015296:	429a      	cmp	r2, r3
 8015298:	d026      	beq.n	80152e8 <prvTCPWindowRx_ExpectedRX+0xc0>
                {
                    /*  After the current data-package, there is more data
                     * to be popped. */
                    pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 801529a:	697a      	ldr	r2, [r7, #20]
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	1ad2      	subs	r2, r2, r3
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	631a      	str	r2, [r3, #48]	@ 0x30

                    if( xTCPWindowLoggingLevel >= 1 )
 80152a4:	4b14      	ldr	r3, [pc, #80]	@ (80152f8 <prvTCPWindowRx_ExpectedRX+0xd0>)
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	dd1d      	ble.n	80152e8 <prvTCPWindowRx_ExpectedRX+0xc0>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: retran %u (Found %u bytes at %u cnt %d)\n",
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80152b2:	461c      	mov	r4, r3
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80152ba:	461d      	mov	r5, r3
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	68db      	ldr	r3, [r3, #12]
 80152c0:	693a      	ldr	r2, [r7, #16]
 80152c2:	1ad0      	subs	r0, r2, r3
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152c8:	687a      	ldr	r2, [r7, #4]
 80152ca:	68d2      	ldr	r2, [r2, #12]
 80152cc:	68f9      	ldr	r1, [r7, #12]
 80152ce:	1a8a      	subs	r2, r1, r2
 80152d0:	6879      	ldr	r1, [r7, #4]
 80152d2:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
 80152d6:	9102      	str	r1, [sp, #8]
 80152d8:	9201      	str	r2, [sp, #4]
 80152da:	9300      	str	r3, [sp, #0]
 80152dc:	4603      	mov	r3, r0
 80152de:	462a      	mov	r2, r5
 80152e0:	4621      	mov	r1, r4
 80152e2:	4806      	ldr	r0, [pc, #24]	@ (80152fc <prvTCPWindowRx_ExpectedRX+0xd4>)
 80152e4:	f00c fae8 	bl	80218b8 <lUDPLoggingPrintf>
                                                 ( int ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }
                }
            }

            pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	697a      	ldr	r2, [r7, #20]
 80152ec:	611a      	str	r2, [r3, #16]
        }
 80152ee:	bf00      	nop
 80152f0:	3718      	adds	r7, #24
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bdb0      	pop	{r4, r5, r7, pc}
 80152f6:	bf00      	nop
 80152f8:	20001484 	.word	0x20001484
 80152fc:	080264f4 	.word	0x080264f4

08015300 <prvTCPWindowRx_UnexpectedRX>:
 *         offset ( from the head ) at which the data can be placed.
 */
        static int32_t prvTCPWindowRx_UnexpectedRX( TCPWindow_t * pxWindow,
                                                    uint32_t ulSequenceNumber,
                                                    uint32_t ulLength )
        {
 8015300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015302:	b08f      	sub	sp, #60	@ 0x3c
 8015304:	af04      	add	r7, sp, #16
 8015306:	60f8      	str	r0, [r7, #12]
 8015308:	60b9      	str	r1, [r7, #8]
 801530a:	607a      	str	r2, [r7, #4]
            int32_t lReturn = -1;
 801530c:	f04f 33ff 	mov.w	r3, #4294967295
 8015310:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t ulLast = ulSequenceNumber + ulLength;
 8015312:	68ba      	ldr	r2, [r7, #8]
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	4413      	add	r3, r2
 8015318:	623b      	str	r3, [r7, #32]
            uint32_t ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	691b      	ldr	r3, [r3, #16]
 801531e:	61fb      	str	r3, [r7, #28]
             * This is useful because subsequent packets will be SACK'd with
             * single one message
             */
            for( ; ; )
            {
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8015320:	6a39      	ldr	r1, [r7, #32]
 8015322:	68f8      	ldr	r0, [r7, #12]
 8015324:	f7ff fd04 	bl	8014d30 <xTCPWindowRxFind>
 8015328:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 801532a:	69bb      	ldr	r3, [r7, #24]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d006      	beq.n	801533e <prvTCPWindowRx_UnexpectedRX+0x3e>
                {
                    break;
                }

                ulLast += ( uint32_t ) pxFound->lDataLength;
 8015330:	69bb      	ldr	r3, [r7, #24]
 8015332:	689b      	ldr	r3, [r3, #8]
 8015334:	461a      	mov	r2, r3
 8015336:	6a3b      	ldr	r3, [r7, #32]
 8015338:	4413      	add	r3, r2
 801533a:	623b      	str	r3, [r7, #32]
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 801533c:	e7f0      	b.n	8015320 <prvTCPWindowRx_UnexpectedRX+0x20>
                    break;
 801533e:	bf00      	nop
            }

            if( xTCPWindowLoggingLevel >= 1 )
 8015340:	4b45      	ldr	r3, [pc, #276]	@ (8015458 <prvTCPWindowRx_UnexpectedRX+0x158>)
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	2b00      	cmp	r3, #0
 8015346:	dd20      	ble.n	801538a <prvTCPWindowRx_UnexpectedRX+0x8a>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801534e:	461d      	mov	r5, r3
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015356:	461e      	mov	r6, r3
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	68db      	ldr	r3, [r3, #12]
 801535c:	68ba      	ldr	r2, [r7, #8]
 801535e:	1ad0      	subs	r0, r2, r3
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	68db      	ldr	r3, [r3, #12]
 8015364:	69fa      	ldr	r2, [r7, #28]
 8015366:	1ad3      	subs	r3, r2, r3
 8015368:	68b9      	ldr	r1, [r7, #8]
 801536a:	69fa      	ldr	r2, [r7, #28]
 801536c:	1a8a      	subs	r2, r1, r2
 801536e:	4614      	mov	r4, r2
 8015370:	68fa      	ldr	r2, [r7, #12]
 8015372:	68d2      	ldr	r2, [r2, #12]
 8015374:	6a39      	ldr	r1, [r7, #32]
 8015376:	1a8a      	subs	r2, r1, r2
 8015378:	9202      	str	r2, [sp, #8]
 801537a:	9401      	str	r4, [sp, #4]
 801537c:	9300      	str	r3, [sp, #0]
 801537e:	4603      	mov	r3, r0
 8015380:	4632      	mov	r2, r6
 8015382:	4629      	mov	r1, r5
 8015384:	4835      	ldr	r0, [pc, #212]	@ (801545c <prvTCPWindowRx_UnexpectedRX+0x15c>)
 8015386:	f00c fa97 	bl	80218b8 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            /* Now prepare the SACK message.
             * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
            pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	4a34      	ldr	r2, [pc, #208]	@ (8015460 <prvTCPWindowRx_UnexpectedRX+0x160>)
 801538e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* First sequence number that we received. */
            pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 8015392:	68bb      	ldr	r3, [r7, #8]
 8015394:	061a      	lsls	r2, r3, #24
 8015396:	68bb      	ldr	r3, [r7, #8]
 8015398:	021b      	lsls	r3, r3, #8
 801539a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801539e:	431a      	orrs	r2, r3
 80153a0:	68bb      	ldr	r3, [r7, #8]
 80153a2:	0a1b      	lsrs	r3, r3, #8
 80153a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80153a8:	431a      	orrs	r2, r3
 80153aa:	68bb      	ldr	r3, [r7, #8]
 80153ac:	0e1b      	lsrs	r3, r3, #24
 80153ae:	431a      	orrs	r2, r3
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Last + 1 */
            pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 80153b6:	6a3b      	ldr	r3, [r7, #32]
 80153b8:	061a      	lsls	r2, r3, #24
 80153ba:	6a3b      	ldr	r3, [r7, #32]
 80153bc:	021b      	lsls	r3, r3, #8
 80153be:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80153c2:	431a      	orrs	r2, r3
 80153c4:	6a3b      	ldr	r3, [r7, #32]
 80153c6:	0a1b      	lsrs	r3, r3, #8
 80153c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80153cc:	431a      	orrs	r2, r3
 80153ce:	6a3b      	ldr	r3, [r7, #32]
 80153d0:	0e1b      	lsrs	r3, r3, #24
 80153d2:	431a      	orrs	r2, r3
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* Which make 12 (3*4) option bytes. */
            pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	220c      	movs	r2, #12
 80153de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 80153e2:	68b9      	ldr	r1, [r7, #8]
 80153e4:	68f8      	ldr	r0, [r7, #12]
 80153e6:	f7ff fca3 	bl	8014d30 <xTCPWindowRxFind>
 80153ea:	61b8      	str	r0, [r7, #24]

            if( pxFound != NULL )
 80153ec:	69bb      	ldr	r3, [r7, #24]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d12d      	bne.n	801544e <prvTCPWindowRx_UnexpectedRX+0x14e>
                 * again. */
                /* A negative value will be returned to indicate than error. */
            }
            else
            {
                pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 80153f2:	687a      	ldr	r2, [r7, #4]
 80153f4:	2301      	movs	r3, #1
 80153f6:	68b9      	ldr	r1, [r7, #8]
 80153f8:	68f8      	ldr	r0, [r7, #12]
 80153fa:	f7ff fcc1 	bl	8014d80 <xTCPWindowNew>
 80153fe:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 8015400:	69bb      	ldr	r3, [r7, #24]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d104      	bne.n	8015410 <prvTCPWindowRx_UnexpectedRX+0x110>
                {
                    /* Can not send a SACK, because the segment cannot be
                     * stored. */
                    pxWindow->ucOptionLength = 0U;
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	2200      	movs	r2, #0
 801540a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801540e:	e01e      	b.n	801544e <prvTCPWindowRx_UnexpectedRX+0x14e>
                }
                else
                {
                    uint32_t ulIntermediateResult;

                    if( xTCPWindowLoggingLevel != 0 )
 8015410:	4b11      	ldr	r3, [pc, #68]	@ (8015458 <prvTCPWindowRx_UnexpectedRX+0x158>)
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d014      	beq.n	8015442 <prvTCPWindowRx_UnexpectedRX+0x142>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %u (cnt %u)\n",
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801541e:	4619      	mov	r1, r3
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015426:	4618      	mov	r0, r3
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	68db      	ldr	r3, [r3, #12]
 801542c:	68ba      	ldr	r2, [r7, #8]
 801542e:	1ad2      	subs	r2, r2, r3
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015436:	9300      	str	r3, [sp, #0]
 8015438:	4613      	mov	r3, r2
 801543a:	4602      	mov	r2, r0
 801543c:	4809      	ldr	r0, [pc, #36]	@ (8015464 <prvTCPWindowRx_UnexpectedRX+0x164>)
 801543e:	f00c fa3b 	bl	80218b8 <lUDPLoggingPrintf>
                                                 ( unsigned ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }

                    /* Return a positive value.  The packet may be accepted
                    * and stored but an earlier packet is still missing. */
                    ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 8015442:	68ba      	ldr	r2, [r7, #8]
 8015444:	69fb      	ldr	r3, [r7, #28]
 8015446:	1ad3      	subs	r3, r2, r3
 8015448:	617b      	str	r3, [r7, #20]
                    lReturn = ( int32_t ) ulIntermediateResult;
 801544a:	697b      	ldr	r3, [r7, #20]
 801544c:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            return lReturn;
 801544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8015450:	4618      	mov	r0, r3
 8015452:	372c      	adds	r7, #44	@ 0x2c
 8015454:	46bd      	mov	sp, r7
 8015456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015458:	20001484 	.word	0x20001484
 801545c:	08026538 	.word	0x08026538
 8015460:	0a050101 	.word	0x0a050101
 8015464:	08026578 	.word	0x08026578

08015468 <lTCPWindowRxCheck>:
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace,
                                   uint32_t * pulSkipCount )
        {
 8015468:	b580      	push	{r7, lr}
 801546a:	b08c      	sub	sp, #48	@ 0x30
 801546c:	af00      	add	r7, sp, #0
 801546e:	60f8      	str	r0, [r7, #12]
 8015470:	60b9      	str	r1, [r7, #8]
 8015472:	607a      	str	r2, [r7, #4]
 8015474:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber;
            uint32_t ulIntermediateResult;
            int32_t lReturn = -1;
 8015476:	f04f 33ff 	mov.w	r3, #4294967295
 801547a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t lStartDistance;
            int32_t lLastDistance;
            uint32_t ulLast;
            uint32_t ulRxSequenceNumber = ulSequenceNumber;
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t ulRxLength = ulLength;
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Only in an exceptional case, where a packet starts before
             * ulCurrentSequenceNumber, and ends after it, the skip-count
             * will be set. See below. */

            *( pulSkipCount ) = 0U;
 8015484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015486:	2200      	movs	r2, #0
 8015488:	601a      	str	r2, [r3, #0]

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	691b      	ldr	r3, [r3, #16]
 801548e:	623b      	str	r3, [r7, #32]

            ulLast = ulRxSequenceNumber + ulRxLength;
 8015490:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015494:	4413      	add	r3, r2
 8015496:	61fb      	str	r3, [r7, #28]
            ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 8015498:	69fa      	ldr	r2, [r7, #28]
 801549a:	6a3b      	ldr	r3, [r7, #32]
 801549c:	1ad3      	subs	r3, r2, r3
 801549e:	61bb      	str	r3, [r7, #24]
            /* The cast from unsigned long to signed long is on purpose. */
            lLastDistance = ( int32_t ) ulIntermediateResult;
 80154a0:	69bb      	ldr	r3, [r7, #24]
 80154a2:	617b      	str	r3, [r7, #20]

            ulIntermediateResult = ulRxSequenceNumber - ulCurrentSequenceNumber;
 80154a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80154a6:	6a3b      	ldr	r3, [r7, #32]
 80154a8:	1ad3      	subs	r3, r2, r3
 80154aa:	61bb      	str	r3, [r7, #24]
            lStartDistance = ( int32_t ) ulIntermediateResult;
 80154ac:	69bb      	ldr	r3, [r7, #24]
 80154ae:	613b      	str	r3, [r7, #16]

            if( ( lStartDistance < 0 ) && ( lLastDistance > 0 ) )
 80154b0:	693b      	ldr	r3, [r7, #16]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	da18      	bge.n	80154e8 <lTCPWindowRxCheck+0x80>
 80154b6:	697b      	ldr	r3, [r7, #20]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	dd15      	ble.n	80154e8 <lTCPWindowRxCheck+0x80>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Received +%u bytes for %u, only using %d\n",
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	68db      	ldr	r3, [r3, #12]
 80154c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80154c2:	1ad2      	subs	r2, r2, r3
 80154c4:	697b      	ldr	r3, [r7, #20]
 80154c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80154c8:	4824      	ldr	r0, [pc, #144]	@ (801555c <lTCPWindowRxCheck+0xf4>)
 80154ca:	f00c f9f5 	bl	80218b8 <lUDPLoggingPrintf>
                                         ( unsigned ) ulRxLength,
                                         ( unsigned ) ( ulRxSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) lLastDistance ) );
                /* Increase the sequence number, decrease the length. */
                ulRxSequenceNumber += ( uint32_t ) ( -lStartDistance );
 80154ce:	693b      	ldr	r3, [r7, #16]
 80154d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80154d2:	1ad3      	subs	r3, r2, r3
 80154d4:	62bb      	str	r3, [r7, #40]	@ 0x28
                ulRxLength += ( uint32_t ) lStartDistance;
 80154d6:	693b      	ldr	r3, [r7, #16]
 80154d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80154da:	4413      	add	r3, r2
 80154dc:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Tell the caller that the first 'pulSkipCount' bytes don't
                 * need to be stored. */
                *( pulSkipCount ) = ( uint32_t ) ( -lStartDistance );
 80154de:	693b      	ldr	r3, [r7, #16]
 80154e0:	425b      	negs	r3, r3
 80154e2:	461a      	mov	r2, r3
 80154e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154e6:	601a      	str	r2, [r3, #0]
            }

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	2200      	movs	r2, #0
 80154ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0U;
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	2200      	movs	r2, #0
 80154f4:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulRxSequenceNumber )
 80154f6:	6a3a      	ldr	r2, [r7, #32]
 80154f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154fa:	429a      	cmp	r2, r3
 80154fc:	d110      	bne.n	8015520 <lTCPWindowRxCheck+0xb8>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulRxLength > ulSpace )
 80154fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	429a      	cmp	r2, r3
 8015504:	d905      	bls.n	8015512 <lTCPWindowRxCheck+0xaa>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %u bytes, due to lack of space (%u)\n", ( unsigned ) ulRxLength, ( unsigned ) ulSpace ) );
 8015506:	683a      	ldr	r2, [r7, #0]
 8015508:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801550a:	4815      	ldr	r0, [pc, #84]	@ (8015560 <lTCPWindowRxCheck+0xf8>)
 801550c:	f00c f9d4 	bl	80218b8 <lUDPLoggingPrintf>
 8015510:	e01f      	b.n	8015552 <lTCPWindowRxCheck+0xea>
                }
                else
                {
                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    prvTCPWindowRx_ExpectedRX( pxWindow, ulRxLength );
 8015512:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015514:	68f8      	ldr	r0, [r7, #12]
 8015516:	f7ff fe87 	bl	8015228 <prvTCPWindowRx_ExpectedRX>
                    lReturn = 0;
 801551a:	2300      	movs	r3, #0
 801551c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801551e:	e018      	b.n	8015552 <lTCPWindowRxCheck+0xea>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulRxSequenceNumber + 1U ) )
 8015520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015522:	3301      	adds	r3, #1
 8015524:	6a3a      	ldr	r2, [r7, #32]
 8015526:	429a      	cmp	r2, r3
 8015528:	d013      	beq.n	8015552 <lTCPWindowRxCheck+0xea>
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */

                if( lLastDistance <= 0 )
 801552a:	697b      	ldr	r3, [r7, #20]
 801552c:	2b00      	cmp	r3, #0
 801552e:	dd10      	ble.n	8015552 <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier packet has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                }
                else if( lLastDistance > ( int32_t ) ulSpace )
 8015530:	683b      	ldr	r3, [r7, #0]
 8015532:	697a      	ldr	r2, [r7, #20]
 8015534:	429a      	cmp	r2, r3
 8015536:	dd06      	ble.n	8015546 <lTCPWindowRxCheck+0xde>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %d+%u bytes, due to lack of space (%u)\n",
 8015538:	683b      	ldr	r3, [r7, #0]
 801553a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801553c:	6979      	ldr	r1, [r7, #20]
 801553e:	4809      	ldr	r0, [pc, #36]	@ (8015564 <lTCPWindowRxCheck+0xfc>)
 8015540:	f00c f9ba 	bl	80218b8 <lUDPLoggingPrintf>
 8015544:	e005      	b.n	8015552 <lTCPWindowRxCheck+0xea>
                                             ( unsigned ) ulRxLength,
                                             ( unsigned ) ulSpace ) );
                }
                else
                {
                    lReturn = prvTCPWindowRx_UnexpectedRX( pxWindow, ulRxSequenceNumber, ulRxLength );
 8015546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015548:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801554a:	68f8      	ldr	r0, [r7, #12]
 801554c:	f7ff fed8 	bl	8015300 <prvTCPWindowRx_UnexpectedRX>
 8015550:	62f8      	str	r0, [r7, #44]	@ 0x2c
                }
            }

            return lReturn;
 8015552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8015554:	4618      	mov	r0, r3
 8015556:	3730      	adds	r7, #48	@ 0x30
 8015558:	46bd      	mov	sp, r7
 801555a:	bd80      	pop	{r7, pc}
 801555c:	080265a8 	.word	0x080265a8
 8015560:	080265e8 	.word	0x080265e8
 8015564:	08026628 	.word	0x08026628

08015568 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 8015568:	b480      	push	{r7}
 801556a:	b087      	sub	sp, #28
 801556c:	af00      	add	r7, sp, #0
 801556e:	60f8      	str	r0, [r7, #12]
 8015570:	60b9      	str	r1, [r7, #8]
 8015572:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 8015574:	68fa      	ldr	r2, [r7, #12]
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	4413      	add	r3, r2
 801557a:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 801557c:	697a      	ldr	r2, [r7, #20]
 801557e:	68bb      	ldr	r3, [r7, #8]
 8015580:	429a      	cmp	r2, r3
 8015582:	db03      	blt.n	801558c <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 8015584:	697a      	ldr	r2, [r7, #20]
 8015586:	68bb      	ldr	r3, [r7, #8]
 8015588:	1ad3      	subs	r3, r2, r3
 801558a:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 801558c:	697b      	ldr	r3, [r7, #20]
        }
 801558e:	4618      	mov	r0, r3
 8015590:	371c      	adds	r7, #28
 8015592:	46bd      	mov	sp, r7
 8015594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015598:	4770      	bx	lr
	...

0801559c <prvTCPWindowTxAdd_FrontSegment>:
 * @return lToWrite: the number of bytes added to the segment.
 */
        static int32_t prvTCPWindowTxAdd_FrontSegment( TCPWindow_t * pxWindow,
                                                       TCPSegment_t * pxSegment,
                                                       int32_t lBytesLeft )
        {
 801559c:	b580      	push	{r7, lr}
 801559e:	b088      	sub	sp, #32
 80155a0:	af02      	add	r7, sp, #8
 80155a2:	60f8      	str	r0, [r7, #12]
 80155a4:	60b9      	str	r1, [r7, #8]
 80155a6:	607a      	str	r2, [r7, #4]
            int32_t lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 80155a8:	68bb      	ldr	r3, [r7, #8]
 80155aa:	685a      	ldr	r2, [r3, #4]
 80155ac:	68bb      	ldr	r3, [r7, #8]
 80155ae:	689b      	ldr	r3, [r3, #8]
 80155b0:	1ad3      	subs	r3, r2, r3
 80155b2:	4619      	mov	r1, r3
 80155b4:	6878      	ldr	r0, [r7, #4]
 80155b6:	f7f4 fe05 	bl	800a1c4 <FreeRTOS_min_int32>
 80155ba:	6178      	str	r0, [r7, #20]

            pxSegment->lDataLength += lToWrite;
 80155bc:	68bb      	ldr	r3, [r7, #8]
 80155be:	689a      	ldr	r2, [r3, #8]
 80155c0:	697b      	ldr	r3, [r7, #20]
 80155c2:	441a      	add	r2, r3
 80155c4:	68bb      	ldr	r3, [r7, #8]
 80155c6:	609a      	str	r2, [r3, #8]

            if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 80155c8:	68bb      	ldr	r3, [r7, #8]
 80155ca:	689a      	ldr	r2, [r3, #8]
 80155cc:	68bb      	ldr	r3, [r7, #8]
 80155ce:	685b      	ldr	r3, [r3, #4]
 80155d0:	429a      	cmp	r2, r3
 80155d2:	db02      	blt.n	80155da <prvTCPWindowTxAdd_FrontSegment+0x3e>
            {
                /* This segment is full, don't add more bytes. */
                pxWindow->pxHeadSegment = NULL;
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	2200      	movs	r2, #0
 80155d8:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            /* ulNextTxSequenceNumber is the sequence number of the next byte to
             * be stored for transmission. */
            pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80155de:	697b      	ldr	r3, [r7, #20]
 80155e0:	441a      	add	r2, r3
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Some detailed logging, for those who're interested. */
            if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 80155e6:	4b12      	ldr	r3, [pc, #72]	@ (8015630 <prvTCPWindowTxAdd_FrontSegment+0x94>)
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	2b01      	cmp	r3, #1
 80155ec:	dd1a      	ble.n	8015624 <prvTCPWindowTxAdd_FrontSegment+0x88>
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80155f4:	2b17      	cmp	r3, #23
 80155f6:	d015      	beq.n	8015624 <prvTCPWindowTxAdd_FrontSegment+0x88>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4d bytes for seqNr %u len %4d (nxt %u) pos %d\n",
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	681a      	ldr	r2, [r3, #0]
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	69db      	ldr	r3, [r3, #28]
 8015600:	1ad1      	subs	r1, r2, r3
 8015602:	68bb      	ldr	r3, [r7, #8]
 8015604:	6898      	ldr	r0, [r3, #8]
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	69db      	ldr	r3, [r3, #28]
 801560e:	1ad3      	subs	r3, r2, r3
 8015610:	68ba      	ldr	r2, [r7, #8]
 8015612:	68d2      	ldr	r2, [r2, #12]
 8015614:	9201      	str	r2, [sp, #4]
 8015616:	9300      	str	r3, [sp, #0]
 8015618:	4603      	mov	r3, r0
 801561a:	460a      	mov	r2, r1
 801561c:	6879      	ldr	r1, [r7, #4]
 801561e:	4805      	ldr	r0, [pc, #20]	@ (8015634 <prvTCPWindowTxAdd_FrontSegment+0x98>)
 8015620:	f00c f94a 	bl	80218b8 <lUDPLoggingPrintf>
                                         ( int ) pxSegment->lDataLength,
                                         ( unsigned ) ( pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( int ) pxSegment->lStreamPos ) );
            }

            return lToWrite;
 8015624:	697b      	ldr	r3, [r7, #20]
        }
 8015626:	4618      	mov	r0, r3
 8015628:	3718      	adds	r7, #24
 801562a:	46bd      	mov	sp, r7
 801562c:	bd80      	pop	{r7, pc}
 801562e:	bf00      	nop
 8015630:	20001484 	.word	0x20001484
 8015634:	0802666c 	.word	0x0802666c

08015638 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 8015638:	b580      	push	{r7, lr}
 801563a:	b08a      	sub	sp, #40	@ 0x28
 801563c:	af00      	add	r7, sp, #0
 801563e:	60f8      	str	r0, [r7, #12]
 8015640:	60b9      	str	r1, [r7, #8]
 8015642:	607a      	str	r2, [r7, #4]
 8015644:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength;
 8015646:	68bb      	ldr	r3, [r7, #8]
 8015648:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lToWrite;
            int32_t lDone = 0;
 801564a:	2300      	movs	r3, #0
 801564c:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015656:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( ( pxSegment != NULL ) &&
 8015658:	69bb      	ldr	r3, [r7, #24]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d073      	beq.n	8015746 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 801565e:	69bb      	ldr	r3, [r7, #24]
 8015660:	689a      	ldr	r2, [r3, #8]
 8015662:	69bb      	ldr	r3, [r7, #24]
 8015664:	685b      	ldr	r3, [r3, #4]
            if( ( pxSegment != NULL ) &&
 8015666:	429a      	cmp	r2, r3
 8015668:	da6d      	bge.n	8015746 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 801566a:	69bb      	ldr	r3, [r7, #24]
 801566c:	7d9b      	ldrb	r3, [r3, #22]
 801566e:	f003 0301 	and.w	r3, r3, #1
 8015672:	b2db      	uxtb	r3, r3
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8015674:	2b00      	cmp	r3, #0
 8015676:	d166      	bne.n	8015746 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength != 0 ) )
 8015678:	69bb      	ldr	r3, [r7, #24]
 801567a:	689b      	ldr	r3, [r3, #8]
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 801567c:	2b00      	cmp	r3, #0
 801567e:	d062      	beq.n	8015746 <lTCPWindowTxAdd+0x10e>
            {
                lToWrite = prvTCPWindowTxAdd_FrontSegment( pxWindow, pxSegment, lBytesLeft );
 8015680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015682:	69b9      	ldr	r1, [r7, #24]
 8015684:	68f8      	ldr	r0, [r7, #12]
 8015686:	f7ff ff89 	bl	801559c <prvTCPWindowTxAdd_FrontSegment>
 801568a:	6178      	str	r0, [r7, #20]
                lBytesLeft -= lToWrite;
 801568c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801568e:	697b      	ldr	r3, [r7, #20]
 8015690:	1ad3      	subs	r3, r2, r3
 8015692:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Increased the return value. */
                lDone += lToWrite;
 8015694:	6a3a      	ldr	r2, [r7, #32]
 8015696:	697b      	ldr	r3, [r7, #20]
 8015698:	4413      	add	r3, r2
 801569a:	623b      	str	r3, [r7, #32]

                /* Calculate the next position in the circular data buffer, knowing
                 * its maximum length 'lMax'. */
                lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 801569c:	697a      	ldr	r2, [r7, #20]
 801569e:	6839      	ldr	r1, [r7, #0]
 80156a0:	69f8      	ldr	r0, [r7, #28]
 80156a2:	f7ff ff61 	bl	8015568 <lTCPIncrementTxPosition>
 80156a6:	61f8      	str	r0, [r7, #28]
            }

            while( lBytesLeft > 0 )
 80156a8:	e04d      	b.n	8015746 <lTCPWindowTxAdd+0x10e>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80156b4:	461a      	mov	r2, r3
 80156b6:	2300      	movs	r3, #0
 80156b8:	68f8      	ldr	r0, [r7, #12]
 80156ba:	f7ff fb61 	bl	8014d80 <xTCPWindowNew>
 80156be:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 80156c0:	69bb      	ldr	r3, [r7, #24]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d037      	beq.n	8015736 <lTCPWindowTxAdd+0xfe>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 80156c6:	69bb      	ldr	r3, [r7, #24]
 80156c8:	685b      	ldr	r3, [r3, #4]
 80156ca:	4619      	mov	r1, r3
 80156cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80156ce:	f7f4 fd79 	bl	800a1c4 <FreeRTOS_min_int32>
 80156d2:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 80156d4:	69bb      	ldr	r3, [r7, #24]
 80156d6:	697a      	ldr	r2, [r7, #20]
 80156d8:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 80156da:	69bb      	ldr	r3, [r7, #24]
 80156dc:	69fa      	ldr	r2, [r7, #28]
 80156de:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 80156e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156e2:	697b      	ldr	r3, [r7, #20]
 80156e4:	1ad3      	subs	r3, r2, r3
 80156e6:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 80156e8:	697a      	ldr	r2, [r7, #20]
 80156ea:	6839      	ldr	r1, [r7, #0]
 80156ec:	69f8      	ldr	r0, [r7, #28]
 80156ee:	f7ff ff3b 	bl	8015568 <lTCPIncrementTxPosition>
 80156f2:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	441a      	add	r2, r3
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 8015700:	6a3a      	ldr	r2, [r7, #32]
 8015702:	697b      	ldr	r3, [r7, #20]
 8015704:	4413      	add	r3, r2
 8015706:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 801570e:	69bb      	ldr	r3, [r7, #24]
 8015710:	3318      	adds	r3, #24
 8015712:	4619      	mov	r1, r3
 8015714:	4610      	mov	r0, r2
 8015716:	f7ff fa63 	bl	8014be0 <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 801571a:	69bb      	ldr	r3, [r7, #24]
 801571c:	689a      	ldr	r2, [r3, #8]
 801571e:	69bb      	ldr	r3, [r7, #24]
 8015720:	685b      	ldr	r3, [r3, #4]
 8015722:	429a      	cmp	r2, r3
 8015724:	da03      	bge.n	801572e <lTCPWindowTxAdd+0xf6>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	69ba      	ldr	r2, [r7, #24]
 801572a:	67da      	str	r2, [r3, #124]	@ 0x7c
 801572c:	e00b      	b.n	8015746 <lTCPWindowTxAdd+0x10e>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	2200      	movs	r2, #0
 8015732:	67da      	str	r2, [r3, #124]	@ 0x7c
 8015734:	e007      	b.n	8015746 <lTCPWindowTxAdd+0x10e>
                }
                else
                {
                    /* A sever situation: running out of segments for transmission.
                     * No more data can be sent at the moment. */
                    if( lDone != 0 )
 8015736:	6a3b      	ldr	r3, [r7, #32]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d008      	beq.n	801574e <lTCPWindowTxAdd+0x116>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %d bytes)\n", ( int ) lBytesLeft ) );
 801573c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801573e:	4807      	ldr	r0, [pc, #28]	@ (801575c <lTCPWindowTxAdd+0x124>)
 8015740:	f00c f8ba 	bl	80218b8 <lUDPLoggingPrintf>
                    }

                    break;
 8015744:	e003      	b.n	801574e <lTCPWindowTxAdd+0x116>
            while( lBytesLeft > 0 )
 8015746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015748:	2b00      	cmp	r3, #0
 801574a:	dcae      	bgt.n	80156aa <lTCPWindowTxAdd+0x72>
 801574c:	e000      	b.n	8015750 <lTCPWindowTxAdd+0x118>
                    break;
 801574e:	bf00      	nop
                }
            }

            return lDone;
 8015750:	6a3b      	ldr	r3, [r7, #32]
        }
 8015752:	4618      	mov	r0, r3
 8015754:	3728      	adds	r7, #40	@ 0x28
 8015756:	46bd      	mov	sp, r7
 8015758:	bd80      	pop	{r7, pc}
 801575a:	bf00      	nop
 801575c:	080266b4 	.word	0x080266b4

08015760 <xTCPWindowTxDone>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 8015760:	b480      	push	{r7}
 8015762:	b083      	sub	sp, #12
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801576e:	2b00      	cmp	r3, #0
 8015770:	d101      	bne.n	8015776 <xTCPWindowTxDone+0x16>
 8015772:	2301      	movs	r3, #1
 8015774:	e000      	b.n	8015778 <xTCPWindowTxDone+0x18>
 8015776:	2300      	movs	r3, #0
        }
 8015778:	4618      	mov	r0, r3
 801577a:	370c      	adds	r7, #12
 801577c:	46bd      	mov	sp, r7
 801577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015782:	4770      	bx	lr

08015784 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 8015784:	b580      	push	{r7, lr}
 8015786:	b086      	sub	sp, #24
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
 801578c:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	3354      	adds	r3, #84	@ 0x54
 8015792:	4618      	mov	r0, r3
 8015794:	f7ff fbb5 	bl	8014f02 <xTCPWindowPeekHead>
 8015798:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d102      	bne.n	80157a6 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 80157a0:	2300      	movs	r3, #0
 80157a2:	613b      	str	r3, [r7, #16]
 80157a4:	e02f      	b.n	8015806 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	6a1b      	ldr	r3, [r3, #32]
 80157ae:	429a      	cmp	r2, r3
 80157b0:	d306      	bcc.n	80157c0 <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	6a1b      	ldr	r3, [r3, #32]
 80157ba:	1ad3      	subs	r3, r2, r3
 80157bc:	617b      	str	r3, [r7, #20]
 80157be:	e001      	b.n	80157c4 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0U;
 80157c0:	2300      	movs	r3, #0
 80157c2:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 80157c4:	6979      	ldr	r1, [r7, #20]
 80157c6:	6838      	ldr	r0, [r7, #0]
 80157c8:	f7f4 fd0c 	bl	800a1e4 <FreeRTOS_min_uint32>
 80157cc:	4602      	mov	r2, r0
 80157ce:	683b      	ldr	r3, [r7, #0]
 80157d0:	1a9b      	subs	r3, r3, r2
 80157d2:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	689b      	ldr	r3, [r3, #8]
 80157d8:	461a      	mov	r2, r3
 80157da:	68bb      	ldr	r3, [r7, #8]
 80157dc:	4293      	cmp	r3, r2
 80157de:	d302      	bcc.n	80157e6 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 80157e0:	2301      	movs	r3, #1
 80157e2:	613b      	str	r3, [r7, #16]
 80157e4:	e001      	b.n	80157ea <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 80157e6:	2300      	movs	r3, #0
 80157e8:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0U ) &&
 80157ea:	697b      	ldr	r3, [r7, #20]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d00a      	beq.n	8015806 <prvTCPWindowTxHasSpace+0x82>
                    ( pxWindow->xSize.ulTxWindowLength <
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	689a      	ldr	r2, [r3, #8]
                      ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	689b      	ldr	r3, [r3, #8]
 80157f8:	4619      	mov	r1, r3
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	440b      	add	r3, r1
                if( ( ulTxOutstanding != 0U ) &&
 80157fe:	429a      	cmp	r2, r3
 8015800:	d201      	bcs.n	8015806 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 8015802:	2300      	movs	r3, #0
 8015804:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 8015806:	693b      	ldr	r3, [r7, #16]
        }
 8015808:	4618      	mov	r0, r3
 801580a:	3718      	adds	r7, #24
 801580c:	46bd      	mov	sp, r7
 801580e:	bd80      	pop	{r7, pc}

08015810 <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 8015810:	b580      	push	{r7, lr}
 8015812:	b08a      	sub	sp, #40	@ 0x28
 8015814:	af00      	add	r7, sp, #0
 8015816:	60f8      	str	r0, [r7, #12]
 8015818:	60b9      	str	r1, [r7, #8]
 801581a:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	2200      	movs	r2, #0
 8015820:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015826:	2b00      	cmp	r3, #0
 8015828:	d002      	beq.n	8015830 <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 801582a:	2301      	movs	r3, #1
 801582c:	627b      	str	r3, [r7, #36]	@ 0x24
 801582e:	e050      	b.n	80158d2 <xTCPWindowTxHasData+0xc2>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	3368      	adds	r3, #104	@ 0x68
 8015834:	4618      	mov	r0, r3
 8015836:	f7ff fb64 	bl	8014f02 <xTCPWindowPeekHead>
 801583a:	6238      	str	r0, [r7, #32]

                if( pxSegment != NULL )
 801583c:	6a3b      	ldr	r3, [r7, #32]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d01f      	beq.n	8015882 <xTCPWindowTxHasData+0x72>
                {
                    uint32_t ulSRTT = ( uint32_t ) pxWindow->lSRTT;
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015846:	61fb      	str	r3, [r7, #28]

                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 8015848:	6a3b      	ldr	r3, [r7, #32]
 801584a:	3310      	adds	r3, #16
 801584c:	4618      	mov	r0, r3
 801584e:	f7ff f9e4 	bl	8014c1a <ulTimerGetAge>
 8015852:	61b8      	str	r0, [r7, #24]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * ulSRTT' ms for an ACK. A second time it will wait '2 * ulSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( ( uint32_t ) 1U << pxSegment->u.bits.ucTransmitCount );
 8015854:	6a3b      	ldr	r3, [r7, #32]
 8015856:	7d1b      	ldrb	r3, [r3, #20]
 8015858:	461a      	mov	r2, r3
 801585a:	2301      	movs	r3, #1
 801585c:	4093      	lsls	r3, r2
 801585e:	617b      	str	r3, [r7, #20]
                    ulMaxAge *= ulSRTT;
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	69fa      	ldr	r2, [r7, #28]
 8015864:	fb02 f303 	mul.w	r3, r2, r3
 8015868:	617b      	str	r3, [r7, #20]

                    if( ulMaxAge > ulAge )
 801586a:	697a      	ldr	r2, [r7, #20]
 801586c:	69bb      	ldr	r3, [r7, #24]
 801586e:	429a      	cmp	r2, r3
 8015870:	d904      	bls.n	801587c <xTCPWindowTxHasData+0x6c>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 8015872:	697a      	ldr	r2, [r7, #20]
 8015874:	69bb      	ldr	r3, [r7, #24]
 8015876:	1ad2      	subs	r2, r2, r3
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 801587c:	2301      	movs	r3, #1
 801587e:	627b      	str	r3, [r7, #36]	@ 0x24
 8015880:	e027      	b.n	80158d2 <xTCPWindowTxHasData+0xc2>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	3354      	adds	r3, #84	@ 0x54
 8015886:	4618      	mov	r0, r3
 8015888:	f7ff fb3b 	bl	8014f02 <xTCPWindowPeekHead>
 801588c:	6238      	str	r0, [r7, #32]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 801588e:	6a3b      	ldr	r3, [r7, #32]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d102      	bne.n	801589a <xTCPWindowTxHasData+0x8a>
                    {
                        xReturn = pdFALSE;
 8015894:	2300      	movs	r3, #0
 8015896:	627b      	str	r3, [r7, #36]	@ 0x24
 8015898:	e01b      	b.n	80158d2 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 801589a:	68b9      	ldr	r1, [r7, #8]
 801589c:	68f8      	ldr	r0, [r7, #12]
 801589e:	f7ff ff71 	bl	8015784 <prvTCPWindowTxHasSpace>
 80158a2:	4603      	mov	r3, r0
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d102      	bne.n	80158ae <xTCPWindowTxHasData+0x9e>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 80158a8:	2300      	movs	r3, #0
 80158aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80158ac:	e011      	b.n	80158d2 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	781b      	ldrb	r3, [r3, #0]
 80158b2:	f003 0302 	and.w	r3, r3, #2
 80158b6:	b2db      	uxtb	r3, r3
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d008      	beq.n	80158ce <xTCPWindowTxHasData+0xbe>
                             ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 80158bc:	6a3b      	ldr	r3, [r7, #32]
 80158be:	689a      	ldr	r2, [r3, #8]
 80158c0:	6a3b      	ldr	r3, [r7, #32]
 80158c2:	685b      	ldr	r3, [r3, #4]
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80158c4:	429a      	cmp	r2, r3
 80158c6:	da02      	bge.n	80158ce <xTCPWindowTxHasData+0xbe>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 80158c8:	2300      	movs	r3, #0
 80158ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80158cc:	e001      	b.n	80158d2 <xTCPWindowTxHasData+0xc2>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 80158ce:	2301      	movs	r3, #1
 80158d0:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }
            }

            return xReturn;
 80158d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80158d4:	4618      	mov	r0, r3
 80158d6:	3728      	adds	r7, #40	@ 0x28
 80158d8:	46bd      	mov	sp, r7
 80158da:	bd80      	pop	{r7, pc}

080158dc <pxTCPWindowTx_GetWaitQueue>:
 *        the normal TX queue of unsent data.  Message in the waiting queue will
 *        be sent when their timer has expired.
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        static TCPSegment_t * pxTCPWindowTx_GetWaitQueue( const TCPWindow_t * pxWindow )
        {
 80158dc:	b590      	push	{r4, r7, lr}
 80158de:	b087      	sub	sp, #28
 80158e0:	af02      	add	r7, sp, #8
 80158e2:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	3368      	adds	r3, #104	@ 0x68
 80158e8:	4618      	mov	r0, r3
 80158ea:	f7ff fb0a 	bl	8014f02 <xTCPWindowPeekHead>
 80158ee:	60f8      	str	r0, [r7, #12]

            if( pxSegment != NULL )
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d043      	beq.n	801597e <pxTCPWindowTx_GetWaitQueue+0xa2>
            {
                /* Do check the timing. */
                uint32_t ulMaxTime;

                ulMaxTime = ( ( uint32_t ) 1U ) << pxSegment->u.bits.ucTransmitCount;
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	7d1b      	ldrb	r3, [r3, #20]
 80158fa:	461a      	mov	r2, r3
 80158fc:	2301      	movs	r3, #1
 80158fe:	4093      	lsls	r3, r2
 8015900:	60bb      	str	r3, [r7, #8]
                ulMaxTime *= ( uint32_t ) pxWindow->lSRTT;
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015906:	461a      	mov	r2, r3
 8015908:	68bb      	ldr	r3, [r7, #8]
 801590a:	fb02 f303 	mul.w	r3, r2, r3
 801590e:	60bb      	str	r3, [r7, #8]

                if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	3310      	adds	r3, #16
 8015914:	4618      	mov	r0, r3
 8015916:	f7ff f980 	bl	8014c1a <ulTimerGetAge>
 801591a:	4602      	mov	r2, r0
 801591c:	68bb      	ldr	r3, [r7, #8]
 801591e:	4293      	cmp	r3, r2
 8015920:	d22b      	bcs.n	801597a <pxTCPWindowTx_GetWaitQueue+0x9e>
                {
                    /* A normal (non-fast) retransmission.  Move it from the
                     * head of the waiting queue. */
                    pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	3368      	adds	r3, #104	@ 0x68
 8015926:	4618      	mov	r0, r3
 8015928:	f7ff fad2 	bl	8014ed0 <xTCPWindowGetHead>
 801592c:	60f8      	str	r0, [r7, #12]
                    pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	2200      	movs	r2, #0
 8015932:	755a      	strb	r2, [r3, #21]

                    /* Some detailed logging. */
                    if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015934:	4b14      	ldr	r3, [pc, #80]	@ (8015988 <pxTCPWindowTx_GetWaitQueue+0xac>)
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d020      	beq.n	801597e <pxTCPWindowTx_GetWaitQueue+0xa2>
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015942:	2b17      	cmp	r3, #23
 8015944:	d01b      	beq.n	801597e <pxTCPWindowTx_GetWaitQueue+0xa2>
                    {
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %d bytes for sequence number %u (0x%X)\n",
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801594c:	4618      	mov	r0, r3
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015954:	461c      	mov	r4, r3
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	6899      	ldr	r1, [r3, #8]
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	681a      	ldr	r2, [r3, #0]
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	69db      	ldr	r3, [r3, #28]
 8015962:	1ad3      	subs	r3, r2, r3
 8015964:	68fa      	ldr	r2, [r7, #12]
 8015966:	6812      	ldr	r2, [r2, #0]
 8015968:	9201      	str	r2, [sp, #4]
 801596a:	9300      	str	r3, [sp, #0]
 801596c:	460b      	mov	r3, r1
 801596e:	4622      	mov	r2, r4
 8015970:	4601      	mov	r1, r0
 8015972:	4806      	ldr	r0, [pc, #24]	@ (801598c <pxTCPWindowTx_GetWaitQueue+0xb0>)
 8015974:	f00b ffa0 	bl	80218b8 <lUDPLoggingPrintf>
 8015978:	e001      	b.n	801597e <pxTCPWindowTx_GetWaitQueue+0xa2>
                                                 ( unsigned ) pxSegment->ulSequenceNumber ) );
                    }
                }
                else
                {
                    pxSegment = NULL;
 801597a:	2300      	movs	r3, #0
 801597c:	60fb      	str	r3, [r7, #12]
                }
            }

            return pxSegment;
 801597e:	68fb      	ldr	r3, [r7, #12]
        }
 8015980:	4618      	mov	r0, r3
 8015982:	3714      	adds	r7, #20
 8015984:	46bd      	mov	sp, r7
 8015986:	bd90      	pop	{r4, r7, pc}
 8015988:	20001484 	.word	0x20001484
 801598c:	080266f0 	.word	0x080266f0

08015990 <pxTCPWindowTx_GetTXQueue>:
 *                          reception window.
 * @return Either a segment that has to be sent, or NULL.
 */
        static TCPSegment_t * pxTCPWindowTx_GetTXQueue( TCPWindow_t * pxWindow,
                                                        uint32_t ulWindowSize )
        {
 8015990:	b590      	push	{r4, r7, lr}
 8015992:	b087      	sub	sp, #28
 8015994:	af02      	add	r7, sp, #8
 8015996:	6078      	str	r0, [r7, #4]
 8015998:	6039      	str	r1, [r7, #0]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	3354      	adds	r3, #84	@ 0x54
 801599e:	4618      	mov	r0, r3
 80159a0:	f7ff faaf 	bl	8014f02 <xTCPWindowPeekHead>
 80159a4:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d04f      	beq.n	8015a4c <pxTCPWindowTx_GetTXQueue+0xbc>
            {
                /* No segments queued. */
            }
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	781b      	ldrb	r3, [r3, #0]
 80159b0:	f003 0302 	and.w	r3, r3, #2
 80159b4:	b2db      	uxtb	r3, r3
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d008      	beq.n	80159cc <pxTCPWindowTx_GetTXQueue+0x3c>
                     ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	689a      	ldr	r2, [r3, #8]
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	685b      	ldr	r3, [r3, #4]
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80159c2:	429a      	cmp	r2, r3
 80159c4:	da02      	bge.n	80159cc <pxTCPWindowTx_GetTXQueue+0x3c>
            {
                /* A segment has been queued but the driver waits until it
                 * has a full size of MSS. */
                pxSegment = NULL;
 80159c6:	2300      	movs	r3, #0
 80159c8:	60fb      	str	r3, [r7, #12]
 80159ca:	e03f      	b.n	8015a4c <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 80159cc:	6839      	ldr	r1, [r7, #0]
 80159ce:	6878      	ldr	r0, [r7, #4]
 80159d0:	f7ff fed8 	bl	8015784 <prvTCPWindowTxHasSpace>
 80159d4:	4603      	mov	r3, r0
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d102      	bne.n	80159e0 <pxTCPWindowTx_GetTXQueue+0x50>
            {
                /* Peer has no more space at this moment. */
                pxSegment = NULL;
 80159da:	2300      	movs	r3, #0
 80159dc:	60fb      	str	r3, [r7, #12]
 80159de:	e035      	b.n	8015a4c <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else
            {
                /* pxSegment was just obtained with a peek function,
                 * now remove it from of the Tx queue. */
                pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	3354      	adds	r3, #84	@ 0x54
 80159e4:	4618      	mov	r0, r3
 80159e6:	f7ff fa73 	bl	8014ed0 <xTCPWindowGetHead>
 80159ea:	60f8      	str	r0, [r7, #12]

                /* Don't let pxHeadSegment point to this segment any more,
                 * so no more data will be added. */
                if( pxWindow->pxHeadSegment == pxSegment )
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80159f0:	68fa      	ldr	r2, [r7, #12]
 80159f2:	429a      	cmp	r2, r3
 80159f4:	d102      	bne.n	80159fc <pxTCPWindowTx_GetTXQueue+0x6c>
                {
                    pxWindow->pxHeadSegment = NULL;
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	2200      	movs	r2, #0
 80159fa:	67da      	str	r2, [r3, #124]	@ 0x7c
                }

                /* pxWindow->tx.highest registers the highest sequence
                 * number in our transmission window. */
                pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	68fa      	ldr	r2, [r7, #12]
 8015a02:	6892      	ldr	r2, [r2, #8]
 8015a04:	441a      	add	r2, r3
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	629a      	str	r2, [r3, #40]	@ 0x28

                /* ...and more detailed logging */
                if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015a0a:	4b13      	ldr	r3, [pc, #76]	@ (8015a58 <pxTCPWindowTx_GetTXQueue+0xc8>)
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	2b01      	cmp	r3, #1
 8015a10:	dd1c      	ble.n	8015a4c <pxTCPWindowTx_GetTXQueue+0xbc>
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015a18:	2b17      	cmp	r3, #23
 8015a1a:	d017      	beq.n	8015a4c <pxTCPWindowTx_GetTXQueue+0xbc>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %d bytes for sequence number %u (ws %u)\n",
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015a22:	4618      	mov	r0, r3
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015a2a:	461c      	mov	r4, r3
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	6899      	ldr	r1, [r3, #8]
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	681a      	ldr	r2, [r3, #0]
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	69db      	ldr	r3, [r3, #28]
 8015a38:	1ad3      	subs	r3, r2, r3
 8015a3a:	683a      	ldr	r2, [r7, #0]
 8015a3c:	9201      	str	r2, [sp, #4]
 8015a3e:	9300      	str	r3, [sp, #0]
 8015a40:	460b      	mov	r3, r1
 8015a42:	4622      	mov	r2, r4
 8015a44:	4601      	mov	r1, r0
 8015a46:	4805      	ldr	r0, [pc, #20]	@ (8015a5c <pxTCPWindowTx_GetTXQueue+0xcc>)
 8015a48:	f00b ff36 	bl	80218b8 <lUDPLoggingPrintf>
                                             ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulWindowSize ) );
                }
            }

            return pxSegment;
 8015a4c:	68fb      	ldr	r3, [r7, #12]
        }
 8015a4e:	4618      	mov	r0, r3
 8015a50:	3714      	adds	r7, #20
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd90      	pop	{r4, r7, pc}
 8015a56:	bf00      	nop
 8015a58:	20001484 	.word	0x20001484
 8015a5c:	0802673c 	.word	0x0802673c

08015a60 <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 8015a60:	b590      	push	{r4, r7, lr}
 8015a62:	b08b      	sub	sp, #44	@ 0x2c
 8015a64:	af02      	add	r7, sp, #8
 8015a66:	60f8      	str	r0, [r7, #12]
 8015a68:	60b9      	str	r1, [r7, #8]
 8015a6a:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulReturn = 0U;
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	3340      	adds	r3, #64	@ 0x40
 8015a74:	4618      	mov	r0, r3
 8015a76:	f7ff fa2b 	bl	8014ed0 <xTCPWindowGetHead>
 8015a7a:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment != NULL )
 8015a84:	69fb      	ldr	r3, [r7, #28]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d01c      	beq.n	8015ac4 <ulTCPWindowTxGet+0x64>
            {
                /* There is a priority segment. It doesn't need any checking for
                 * space or timeouts. */
                if( xTCPWindowLoggingLevel != 0 )
 8015a8a:	4b41      	ldr	r3, [pc, #260]	@ (8015b90 <ulTCPWindowTxGet+0x130>)
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d024      	beq.n	8015adc <ulTCPWindowTxGet+0x7c>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %d bytes for sequence number %u (ws %u)\n",
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015a98:	4618      	mov	r0, r3
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015aa0:	461c      	mov	r4, r3
 8015aa2:	69fb      	ldr	r3, [r7, #28]
 8015aa4:	6899      	ldr	r1, [r3, #8]
 8015aa6:	69fb      	ldr	r3, [r7, #28]
 8015aa8:	681a      	ldr	r2, [r3, #0]
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	69db      	ldr	r3, [r3, #28]
 8015aae:	1ad3      	subs	r3, r2, r3
 8015ab0:	68ba      	ldr	r2, [r7, #8]
 8015ab2:	9201      	str	r2, [sp, #4]
 8015ab4:	9300      	str	r3, [sp, #0]
 8015ab6:	460b      	mov	r3, r1
 8015ab8:	4622      	mov	r2, r4
 8015aba:	4601      	mov	r1, r0
 8015abc:	4835      	ldr	r0, [pc, #212]	@ (8015b94 <ulTCPWindowTxGet+0x134>)
 8015abe:	f00b fefb 	bl	80218b8 <lUDPLoggingPrintf>
 8015ac2:	e00b      	b.n	8015adc <ulTCPWindowTxGet+0x7c>
            else
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = pxTCPWindowTx_GetWaitQueue( pxWindow );
 8015ac4:	68f8      	ldr	r0, [r7, #12]
 8015ac6:	f7ff ff09 	bl	80158dc <pxTCPWindowTx_GetWaitQueue>
 8015aca:	61f8      	str	r0, [r7, #28]

                if( pxSegment == NULL )
 8015acc:	69fb      	ldr	r3, [r7, #28]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d104      	bne.n	8015adc <ulTCPWindowTxGet+0x7c>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = pxTCPWindowTx_GetTXQueue( pxWindow, ulWindowSize );
 8015ad2:	68b9      	ldr	r1, [r7, #8]
 8015ad4:	68f8      	ldr	r0, [r7, #12]
 8015ad6:	f7ff ff5b 	bl	8015990 <pxTCPWindowTx_GetTXQueue>
 8015ada:	61f8      	str	r0, [r7, #28]
                }
            }

            /* See if it has already been determined to return 0. */
            if( pxSegment != NULL )
 8015adc:	69fb      	ldr	r3, [r7, #28]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d051      	beq.n	8015b86 <ulTCPWindowTxGet+0x126>
            {
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 8015ae2:	69fb      	ldr	r3, [r7, #28]
 8015ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d004      	beq.n	8015af4 <ulTCPWindowTxGet+0x94>
 8015aea:	f240 7136 	movw	r1, #1846	@ 0x736
 8015aee:	482a      	ldr	r0, [pc, #168]	@ (8015b98 <ulTCPWindowTxGet+0x138>)
 8015af0:	f7eb fdbc 	bl	800166c <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015afa:	69fb      	ldr	r3, [r7, #28]
 8015afc:	3318      	adds	r3, #24
 8015afe:	4619      	mov	r1, r3
 8015b00:	4610      	mov	r0, r2
 8015b02:	f7ff f86d 	bl	8014be0 <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8015b06:	69fa      	ldr	r2, [r7, #28]
 8015b08:	7d93      	ldrb	r3, [r2, #22]
 8015b0a:	f043 0301 	orr.w	r3, r3, #1
 8015b0e:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 8015b10:	69fb      	ldr	r3, [r7, #28]
 8015b12:	7d1b      	ldrb	r3, [r3, #20]
 8015b14:	3301      	adds	r3, #1
 8015b16:	b2da      	uxtb	r2, r3
 8015b18:	69fb      	ldr	r3, [r7, #28]
 8015b1a:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8015b1c:	69fb      	ldr	r3, [r7, #28]
 8015b1e:	7d1b      	ldrb	r3, [r3, #20]
 8015b20:	2b04      	cmp	r3, #4
 8015b22:	d120      	bne.n	8015b66 <ulTCPWindowTxGet+0x106>
                    ( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) ) )
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	689a      	ldr	r2, [r3, #8]
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015b2e:	005b      	lsls	r3, r3, #1
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8015b30:	429a      	cmp	r2, r3
 8015b32:	d918      	bls.n	8015b66 <ulTCPWindowTxGet+0x106>
                {
                    uint16_t usMSS2 = ( uint16_t ) ( pxWindow->usMSS * 2U );
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015b3a:	005b      	lsls	r3, r3, #1
 8015b3c:	82fb      	strh	r3, [r7, #22]
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %u]: Change Tx window: %u -> %u\n",
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015b44:	4619      	mov	r1, r3
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	689a      	ldr	r2, [r3, #8]
 8015b52:	8afb      	ldrh	r3, [r7, #22]
 8015b54:	9300      	str	r3, [sp, #0]
 8015b56:	4613      	mov	r3, r2
 8015b58:	4602      	mov	r2, r0
 8015b5a:	4810      	ldr	r0, [pc, #64]	@ (8015b9c <ulTCPWindowTxGet+0x13c>)
 8015b5c:	f00b feac 	bl	80218b8 <lUDPLoggingPrintf>
                                             pxWindow->usPeerPortNumber,
                                             pxWindow->usOurPortNumber,
                                             ( unsigned ) pxWindow->xSize.ulTxWindowLength,
                                             usMSS2 ) );
                    pxWindow->xSize.ulTxWindowLength = usMSS2;
 8015b60:	8afa      	ldrh	r2, [r7, #22]
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	609a      	str	r2, [r3, #8]
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 8015b66:	69fb      	ldr	r3, [r7, #28]
 8015b68:	3310      	adds	r3, #16
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	f7ff f848 	bl	8014c00 <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8015b70:	69fb      	ldr	r3, [r7, #28]
 8015b72:	681a      	ldr	r2, [r3, #0]
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 8015b78:	69fb      	ldr	r3, [r7, #28]
 8015b7a:	68da      	ldr	r2, [r3, #12]
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8015b80:	69fb      	ldr	r3, [r7, #28]
 8015b82:	689b      	ldr	r3, [r3, #8]
 8015b84:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 8015b86:	69bb      	ldr	r3, [r7, #24]
        }
 8015b88:	4618      	mov	r0, r3
 8015b8a:	3724      	adds	r7, #36	@ 0x24
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bd90      	pop	{r4, r7, pc}
 8015b90:	20001484 	.word	0x20001484
 8015b94:	08026788 	.word	0x08026788
 8015b98:	08026424 	.word	0x08026424
 8015b9c:	080267d4 	.word	0x080267d4

08015ba0 <prvTCPWindowTxCheckAck_CalcSRTT>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 * @param[in] pxSegment The segment that was just acknowledged.
 */
        static void prvTCPWindowTxCheckAck_CalcSRTT( TCPWindow_t * pxWindow,
                                                     const TCPSegment_t * pxSegment )
        {
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b084      	sub	sp, #16
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
 8015ba8:	6039      	str	r1, [r7, #0]
            int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	3310      	adds	r3, #16
 8015bae:	4618      	mov	r0, r3
 8015bb0:	f7ff f833 	bl	8014c1a <ulTimerGetAge>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	60fb      	str	r3, [r7, #12]

            if( pxWindow->lSRTT >= mS )
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015bbc:	68fa      	ldr	r2, [r7, #12]
 8015bbe:	429a      	cmp	r2, r3
 8015bc0:	dc0e      	bgt.n	8015be0 <prvTCPWindowTxCheckAck_CalcSRTT+0x40>
            {
                /* RTT becomes smaller: adapt slowly. */
                pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015bc6:	4613      	mov	r3, r2
 8015bc8:	00db      	lsls	r3, r3, #3
 8015bca:	1a9a      	subs	r2, r3, r2
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	4413      	add	r3, r2
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	da00      	bge.n	8015bd6 <prvTCPWindowTxCheckAck_CalcSRTT+0x36>
 8015bd4:	3307      	adds	r3, #7
 8015bd6:	10db      	asrs	r3, r3, #3
 8015bd8:	461a      	mov	r2, r3
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	639a      	str	r2, [r3, #56]	@ 0x38
 8015bde:	e00d      	b.n	8015bfc <prvTCPWindowTxCheckAck_CalcSRTT+0x5c>
            }
            else
            {
                /* RTT becomes larger: adapt quicker */
                pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015be4:	4613      	mov	r3, r2
 8015be6:	005b      	lsls	r3, r3, #1
 8015be8:	441a      	add	r2, r3
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	4413      	add	r3, r2
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	da00      	bge.n	8015bf4 <prvTCPWindowTxCheckAck_CalcSRTT+0x54>
 8015bf2:	3303      	adds	r3, #3
 8015bf4:	109b      	asrs	r3, r3, #2
 8015bf6:	461a      	mov	r2, r3
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* Cap to the minimum of 50ms. */
            if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c00:	2b31      	cmp	r3, #49	@ 0x31
 8015c02:	dc02      	bgt.n	8015c0a <prvTCPWindowTxCheckAck_CalcSRTT+0x6a>
            {
                pxWindow->lSRTT = winSRTT_CAP_mS;
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	2232      	movs	r2, #50	@ 0x32
 8015c08:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }
 8015c0a:	bf00      	nop
 8015c0c:	3710      	adds	r7, #16
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bd80      	pop	{r7, pc}
	...

08015c14 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 8015c14:	b5b0      	push	{r4, r5, r7, lr}
 8015c16:	b090      	sub	sp, #64	@ 0x40
 8015c18:	af04      	add	r7, sp, #16
 8015c1a:	60f8      	str	r0, [r7, #12]
 8015c1c:	60b9      	str	r1, [r7, #8]
 8015c1e:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 8015c20:	2300      	movs	r3, #0
 8015c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst;
 8015c24:	68bb      	ldr	r3, [r7, #8]
 8015c26:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xTxSegments.xListEnd ) );
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	3398      	adds	r3, #152	@ 0x98
 8015c2c:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 8015c2e:	69fb      	ldr	r3, [r7, #28]
 8015c30:	685b      	ldr	r3, [r3, #4]
 8015c32:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8015c34:	e0a6      	b.n	8015d84 <prvTCPWindowTxCheckAck+0x170>
            {
                xDoUnlink = pdFALSE;
 8015c36:	2300      	movs	r3, #0
 8015c38:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c3c:	68db      	ldr	r3, [r3, #12]
 8015c3e:	61bb      	str	r3, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8015c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c42:	685b      	ldr	r3, [r3, #4]
 8015c44:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8015c46:	69bb      	ldr	r3, [r7, #24]
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	4619      	mov	r1, r3
 8015c4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015c4e:	f7fe ff9c 	bl	8014b8a <xSequenceGreaterThan>
 8015c52:	4603      	mov	r3, r0
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	f040 8094 	bne.w	8015d82 <prvTCPWindowTxCheckAck+0x16e>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 8015c5a:	69bb      	ldr	r3, [r7, #24]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015c60:	429a      	cmp	r2, r3
 8015c62:	f040 809c 	bne.w	8015d9e <prvTCPWindowTxCheckAck+0x18a>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 8015c66:	69bb      	ldr	r3, [r7, #24]
 8015c68:	689b      	ldr	r3, [r3, #8]
 8015c6a:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8015c6c:	69bb      	ldr	r3, [r7, #24]
 8015c6e:	7d9b      	ldrb	r3, [r3, #22]
 8015c70:	f003 0302 	and.w	r3, r3, #2
 8015c74:	b2db      	uxtb	r3, r3
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d144      	bne.n	8015d04 <prvTCPWindowTxCheckAck+0xf0>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 8015c7a:	69bb      	ldr	r3, [r7, #24]
 8015c7c:	681a      	ldr	r2, [r3, #0]
 8015c7e:	697b      	ldr	r3, [r7, #20]
 8015c80:	4413      	add	r3, r2
 8015c82:	6879      	ldr	r1, [r7, #4]
 8015c84:	4618      	mov	r0, r3
 8015c86:	f7fe ff80 	bl	8014b8a <xSequenceGreaterThan>
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d023      	beq.n	8015cd8 <prvTCPWindowTxCheckAck+0xc4>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8015c90:	69bb      	ldr	r3, [r7, #24]
 8015c92:	681a      	ldr	r2, [r3, #0]
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	69db      	ldr	r3, [r3, #28]
 8015c98:	1ad3      	subs	r3, r2, r3
 8015c9a:	613b      	str	r3, [r7, #16]
                            FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %u - %u Partial sequence number %u - %u\n",
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015ca2:	461c      	mov	r4, r3
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015caa:	461d      	mov	r5, r3
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	69db      	ldr	r3, [r3, #28]
 8015cb0:	693a      	ldr	r2, [r7, #16]
 8015cb2:	1ad0      	subs	r0, r2, r3
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	69db      	ldr	r3, [r3, #28]
 8015cb8:	687a      	ldr	r2, [r7, #4]
 8015cba:	1ad3      	subs	r3, r2, r3
 8015cbc:	6939      	ldr	r1, [r7, #16]
 8015cbe:	697a      	ldr	r2, [r7, #20]
 8015cc0:	440a      	add	r2, r1
 8015cc2:	9202      	str	r2, [sp, #8]
 8015cc4:	693a      	ldr	r2, [r7, #16]
 8015cc6:	9201      	str	r2, [sp, #4]
 8015cc8:	9300      	str	r3, [sp, #0]
 8015cca:	4603      	mov	r3, r0
 8015ccc:	462a      	mov	r2, r5
 8015cce:	4621      	mov	r1, r4
 8015cd0:	4836      	ldr	r0, [pc, #216]	@ (8015dac <prvTCPWindowTxCheckAck+0x198>)
 8015cd2:	f00b fdf1 	bl	80218b8 <lUDPLoggingPrintf>
                                                     ( unsigned ) ulFirstSeq,
                                                     ( unsigned ) ( ulFirstSeq + ulDataLength ) ) );
                        }
                        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                        break;
 8015cd6:	e063      	b.n	8015da0 <prvTCPWindowTxCheckAck+0x18c>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 8015cd8:	69ba      	ldr	r2, [r7, #24]
 8015cda:	7d93      	ldrb	r3, [r2, #22]
 8015cdc:	f043 0302 	orr.w	r3, r3, #2
 8015ce0:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8015ce2:	69bb      	ldr	r3, [r7, #24]
 8015ce4:	7d1b      	ldrb	r3, [r3, #20]
 8015ce6:	2b01      	cmp	r3, #1
 8015ce8:	d10a      	bne.n	8015d00 <prvTCPWindowTxCheckAck+0xec>
                        ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8015cea:	69bb      	ldr	r3, [r7, #24]
 8015cec:	681a      	ldr	r2, [r3, #0]
 8015cee:	697b      	ldr	r3, [r7, #20]
 8015cf0:	4413      	add	r3, r2
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8015cf2:	687a      	ldr	r2, [r7, #4]
 8015cf4:	429a      	cmp	r2, r3
 8015cf6:	d103      	bne.n	8015d00 <prvTCPWindowTxCheckAck+0xec>
                    {
                        prvTCPWindowTxCheckAck_CalcSRTT( pxWindow, pxSegment );
 8015cf8:	69b9      	ldr	r1, [r7, #24]
 8015cfa:	68f8      	ldr	r0, [r7, #12]
 8015cfc:	f7ff ff50 	bl	8015ba0 <prvTCPWindowTxCheckAck_CalcSRTT>
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 8015d00:	2301      	movs	r3, #1
 8015d02:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	6a1b      	ldr	r3, [r3, #32]
 8015d08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d0a:	429a      	cmp	r2, r3
 8015d0c:	d128      	bne.n	8015d60 <prvTCPWindowTxCheckAck+0x14c>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015d0e:	4b28      	ldr	r3, [pc, #160]	@ (8015db0 <prvTCPWindowTxCheckAck+0x19c>)
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	2b01      	cmp	r3, #1
 8015d14:	dd15      	ble.n	8015d42 <prvTCPWindowTxCheckAck+0x12e>
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015d1c:	2b17      	cmp	r3, #23
 8015d1e:	d010      	beq.n	8015d42 <prvTCPWindowTxCheckAck+0x12e>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %u - %u Ready sequence number %u\n",
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	69db      	ldr	r3, [r3, #28]
 8015d24:	68ba      	ldr	r2, [r7, #8]
 8015d26:	1ad1      	subs	r1, r2, r3
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	69db      	ldr	r3, [r3, #28]
 8015d2c:	687a      	ldr	r2, [r7, #4]
 8015d2e:	1ad0      	subs	r0, r2, r3
 8015d30:	69bb      	ldr	r3, [r7, #24]
 8015d32:	681a      	ldr	r2, [r3, #0]
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	69db      	ldr	r3, [r3, #28]
 8015d38:	1ad3      	subs	r3, r2, r3
 8015d3a:	4602      	mov	r2, r0
 8015d3c:	481d      	ldr	r0, [pc, #116]	@ (8015db4 <prvTCPWindowTxCheckAck+0x1a0>)
 8015d3e:	f00b fdbb 	bl	80218b8 <lUDPLoggingPrintf>
                                                 ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	6a1a      	ldr	r2, [r3, #32]
 8015d46:	697b      	ldr	r3, [r7, #20]
 8015d48:	441a      	add	r2, r3
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 8015d4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015d50:	697b      	ldr	r3, [r7, #20]
 8015d52:	4413      	add	r3, r2
 8015d54:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 8015d56:	69b8      	ldr	r0, [r7, #24]
 8015d58:	f7ff f8ec 	bl	8014f34 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8015d60:	6a3b      	ldr	r3, [r7, #32]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d008      	beq.n	8015d78 <prvTCPWindowTxCheckAck+0x164>
 8015d66:	69bb      	ldr	r3, [r7, #24]
 8015d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d004      	beq.n	8015d78 <prvTCPWindowTxCheckAck+0x164>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 8015d6e:	69bb      	ldr	r3, [r7, #24]
 8015d70:	3318      	adds	r3, #24
 8015d72:	4618      	mov	r0, r3
 8015d74:	f7ec fff6 	bl	8002d64 <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 8015d78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d7a:	697b      	ldr	r3, [r7, #20]
 8015d7c:	4413      	add	r3, r2
 8015d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015d80:	e000      	b.n	8015d84 <prvTCPWindowTxCheckAck+0x170>
                    continue;
 8015d82:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8015d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015d86:	69fb      	ldr	r3, [r7, #28]
 8015d88:	429a      	cmp	r2, r3
 8015d8a:	d009      	beq.n	8015da0 <prvTCPWindowTxCheckAck+0x18c>
 8015d8c:	6879      	ldr	r1, [r7, #4]
 8015d8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015d90:	f7fe fee5 	bl	8014b5e <xSequenceLessThan>
 8015d94:	4603      	mov	r3, r0
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	f47f af4d 	bne.w	8015c36 <prvTCPWindowTxCheckAck+0x22>
 8015d9c:	e000      	b.n	8015da0 <prvTCPWindowTxCheckAck+0x18c>
                    break;
 8015d9e:	bf00      	nop
            }

            return ulBytesConfirmed;
 8015da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8015da2:	4618      	mov	r0, r3
 8015da4:	3730      	adds	r7, #48	@ 0x30
 8015da6:	46bd      	mov	sp, r7
 8015da8:	bdb0      	pop	{r4, r5, r7, pc}
 8015daa:	bf00      	nop
 8015dac:	0802680c 	.word	0x0802680c
 8015db0:	20001484 	.word	0x20001484
 8015db4:	08026854 	.word	0x08026854

08015db8 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b086      	sub	sp, #24
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]
 8015dc0:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0U;
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	613b      	str	r3, [r7, #16]
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xWaitQueue.xListEnd ) );
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	3370      	adds	r3, #112	@ 0x70
 8015dca:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	685b      	ldr	r3, [r3, #4]
 8015dd0:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 8015dd2:	e049      	b.n	8015e68 <prvTCPWindowFastRetransmit+0xb0>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015dd4:	697b      	ldr	r3, [r7, #20]
 8015dd6:	68db      	ldr	r3, [r3, #12]
 8015dd8:	60bb      	str	r3, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 8015dda:	697b      	ldr	r3, [r7, #20]
 8015ddc:	685b      	ldr	r3, [r3, #4]
 8015dde:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8015de0:	68bb      	ldr	r3, [r7, #8]
 8015de2:	7d9b      	ldrb	r3, [r3, #22]
 8015de4:	f003 0302 	and.w	r3, r3, #2
 8015de8:	b2db      	uxtb	r3, r3
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d13c      	bne.n	8015e68 <prvTCPWindowFastRetransmit+0xb0>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 8015dee:	68bb      	ldr	r3, [r7, #8]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	6839      	ldr	r1, [r7, #0]
 8015df4:	4618      	mov	r0, r3
 8015df6:	f7fe feb2 	bl	8014b5e <xSequenceLessThan>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d033      	beq.n	8015e68 <prvTCPWindowFastRetransmit+0xb0>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 8015e00:	68bb      	ldr	r3, [r7, #8]
 8015e02:	7d5b      	ldrb	r3, [r3, #21]
 8015e04:	3301      	adds	r3, #1
 8015e06:	b2da      	uxtb	r2, r3
 8015e08:	68bb      	ldr	r3, [r7, #8]
 8015e0a:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 8015e0c:	68bb      	ldr	r3, [r7, #8]
 8015e0e:	7d5b      	ldrb	r3, [r3, #21]
 8015e10:	2b03      	cmp	r3, #3
 8015e12:	d129      	bne.n	8015e68 <prvTCPWindowFastRetransmit+0xb0>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8015e14:	68bb      	ldr	r3, [r7, #8]
 8015e16:	2200      	movs	r2, #0
 8015e18:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015e1a:	4b18      	ldr	r3, [pc, #96]	@ (8015e7c <prvTCPWindowFastRetransmit+0xc4>)
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	db11      	blt.n	8015e46 <prvTCPWindowFastRetransmit+0x8e>
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015e28:	2b17      	cmp	r3, #23
 8015e2a:	d00c      	beq.n	8015e46 <prvTCPWindowFastRetransmit+0x8e>
                            {
                                FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %u < %u\n",
 8015e2c:	68bb      	ldr	r3, [r7, #8]
 8015e2e:	681a      	ldr	r2, [r3, #0]
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	69db      	ldr	r3, [r3, #28]
 8015e34:	1ad1      	subs	r1, r2, r3
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	69db      	ldr	r3, [r3, #28]
 8015e3a:	683a      	ldr	r2, [r7, #0]
 8015e3c:	1ad3      	subs	r3, r2, r3
 8015e3e:	461a      	mov	r2, r3
 8015e40:	480f      	ldr	r0, [pc, #60]	@ (8015e80 <prvTCPWindowFastRetransmit+0xc8>)
 8015e42:	f00b fd39 	bl	80218b8 <lUDPLoggingPrintf>
                                                         ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ) ) );
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 8015e46:	68bb      	ldr	r3, [r7, #8]
 8015e48:	3318      	adds	r3, #24
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	f7ec ff8a 	bl	8002d64 <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8015e56:	68bb      	ldr	r3, [r7, #8]
 8015e58:	3318      	adds	r3, #24
 8015e5a:	4619      	mov	r1, r3
 8015e5c:	4610      	mov	r0, r2
 8015e5e:	f7fe febf 	bl	8014be0 <vListInsertFifo>
                            ulCount++;
 8015e62:	693b      	ldr	r3, [r7, #16]
 8015e64:	3301      	adds	r3, #1
 8015e66:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 8015e68:	697a      	ldr	r2, [r7, #20]
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	429a      	cmp	r2, r3
 8015e6e:	d1b1      	bne.n	8015dd4 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 8015e70:	693b      	ldr	r3, [r7, #16]
        }
 8015e72:	4618      	mov	r0, r3
 8015e74:	3718      	adds	r7, #24
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bd80      	pop	{r7, pc}
 8015e7a:	bf00      	nop
 8015e7c:	20001484 	.word	0x20001484
 8015e80:	08026890 	.word	0x08026890

08015e84 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b084      	sub	sp, #16
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]
 8015e8c:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence;
            uint32_t ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	6a1b      	ldr	r3, [r3, #32]
 8015e92:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8015e94:	68b9      	ldr	r1, [r7, #8]
 8015e96:	6838      	ldr	r0, [r7, #0]
 8015e98:	f7fe fe4c 	bl	8014b34 <xSequenceLessThanOrEqual>
 8015e9c:	4603      	mov	r3, r0
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d002      	beq.n	8015ea8 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0U;
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	60fb      	str	r3, [r7, #12]
 8015ea6:	e005      	b.n	8015eb4 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8015ea8:	683a      	ldr	r2, [r7, #0]
 8015eaa:	68b9      	ldr	r1, [r7, #8]
 8015eac:	6878      	ldr	r0, [r7, #4]
 8015eae:	f7ff feb1 	bl	8015c14 <prvTCPWindowTxCheckAck>
 8015eb2:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 8015eb4:	68fb      	ldr	r3, [r7, #12]
        }
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	3710      	adds	r7, #16
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	bd80      	pop	{r7, pc}
	...

08015ec0 <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 8015ec0:	b5b0      	push	{r4, r5, r7, lr}
 8015ec2:	b088      	sub	sp, #32
 8015ec4:	af02      	add	r7, sp, #8
 8015ec6:	60f8      	str	r0, [r7, #12]
 8015ec8:	60b9      	str	r1, [r7, #8]
 8015eca:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	6a1b      	ldr	r3, [r3, #32]
 8015ed0:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8015ed2:	687a      	ldr	r2, [r7, #4]
 8015ed4:	68b9      	ldr	r1, [r7, #8]
 8015ed6:	68f8      	ldr	r0, [r7, #12]
 8015ed8:	f7ff fe9c 	bl	8015c14 <prvTCPWindowTxCheckAck>
 8015edc:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 8015ede:	68b9      	ldr	r1, [r7, #8]
 8015ee0:	68f8      	ldr	r0, [r7, #12]
 8015ee2:	f7ff ff69 	bl	8015db8 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8015ee6:	4b16      	ldr	r3, [pc, #88]	@ (8015f40 <ulTCPWindowTxSack+0x80>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	dd23      	ble.n	8015f36 <ulTCPWindowTxSack+0x76>
 8015eee:	6979      	ldr	r1, [r7, #20]
 8015ef0:	68b8      	ldr	r0, [r7, #8]
 8015ef2:	f7fe fe4a 	bl	8014b8a <xSequenceGreaterThan>
 8015ef6:	4603      	mov	r3, r0
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d01c      	beq.n	8015f36 <ulTCPWindowTxSack+0x76>
            {
                FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %u to %u (ack = %u)\n",
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015f02:	461c      	mov	r4, r3
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015f0a:	461d      	mov	r5, r3
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	69db      	ldr	r3, [r3, #28]
 8015f10:	68ba      	ldr	r2, [r7, #8]
 8015f12:	1ad0      	subs	r0, r2, r3
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	69db      	ldr	r3, [r3, #28]
 8015f18:	687a      	ldr	r2, [r7, #4]
 8015f1a:	1ad3      	subs	r3, r2, r3
 8015f1c:	68fa      	ldr	r2, [r7, #12]
 8015f1e:	6a11      	ldr	r1, [r2, #32]
 8015f20:	68fa      	ldr	r2, [r7, #12]
 8015f22:	69d2      	ldr	r2, [r2, #28]
 8015f24:	1a8a      	subs	r2, r1, r2
 8015f26:	9201      	str	r2, [sp, #4]
 8015f28:	9300      	str	r3, [sp, #0]
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	462a      	mov	r2, r5
 8015f2e:	4621      	mov	r1, r4
 8015f30:	4804      	ldr	r0, [pc, #16]	@ (8015f44 <ulTCPWindowTxSack+0x84>)
 8015f32:	f00b fcc1 	bl	80218b8 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
            }

            return ulAckCount;
 8015f36:	693b      	ldr	r3, [r7, #16]
        }
 8015f38:	4618      	mov	r0, r3
 8015f3a:	3718      	adds	r7, #24
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8015f40:	20001484 	.word	0x20001484
 8015f44:	080268d0 	.word	0x080268d0

08015f48 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b084      	sub	sp, #16
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	6078      	str	r0, [r7, #4]
    const UDPPacket_t * pxUDPPacket;

    if( pxNetworkBuffer != NULL )
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d014      	beq.n	8015f80 <vProcessGeneratedUDPPacket+0x38>
        /* Map the UDP packet onto the start of the frame. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f5a:	60fb      	str	r3, [r7, #12]

        switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	899b      	ldrh	r3, [r3, #12]
 8015f60:	b29b      	uxth	r3, r3
 8015f62:	2b08      	cmp	r3, #8
 8015f64:	d004      	beq.n	8015f70 <vProcessGeneratedUDPPacket+0x28>
 8015f66:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8015f6a:	4293      	cmp	r3, r2
 8015f6c:	d004      	beq.n	8015f78 <vProcessGeneratedUDPPacket+0x30>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
                    break;
            #endif
            default:
                /* do nothing, coverity happy */
                break;
 8015f6e:	e007      	b.n	8015f80 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv4( pxNetworkBuffer );
 8015f70:	6878      	ldr	r0, [r7, #4]
 8015f72:	f000 f845 	bl	8016000 <vProcessGeneratedUDPPacket_IPv4>
                    break;
 8015f76:	e003      	b.n	8015f80 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
 8015f78:	6878      	ldr	r0, [r7, #4]
 8015f7a:	f000 fae3 	bl	8016544 <vProcessGeneratedUDPPacket_IPv6>
                    break;
 8015f7e:	bf00      	nop
        }
    }
}
 8015f80:	bf00      	nop
 8015f82:	3710      	adds	r7, #16
 8015f84:	46bd      	mov	sp, r7
 8015f86:	bd80      	pop	{r7, pc}

08015f88 <xProcessReceivedUDPPacket>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort,
                                      BaseType_t * pxIsWaitingForARPResolution )
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b086      	sub	sp, #24
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	60f8      	str	r0, [r7, #12]
 8015f90:	460b      	mov	r3, r1
 8015f92:	607a      	str	r2, [r7, #4]
 8015f94:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdFAIL;
 8015f96:	2300      	movs	r3, #0
 8015f98:	617b      	str	r3, [r7, #20]
    const UDPPacket_t * pxUDPPacket;

    configASSERT( pxNetworkBuffer != NULL );
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d103      	bne.n	8015fa8 <xProcessReceivedUDPPacket+0x20>
 8015fa0:	2178      	movs	r1, #120	@ 0x78
 8015fa2:	4816      	ldr	r0, [pc, #88]	@ (8015ffc <xProcessReceivedUDPPacket+0x74>)
 8015fa4:	f7eb fb62 	bl	800166c <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d103      	bne.n	8015fb8 <xProcessReceivedUDPPacket+0x30>
 8015fb0:	2179      	movs	r1, #121	@ 0x79
 8015fb2:	4812      	ldr	r0, [pc, #72]	@ (8015ffc <xProcessReceivedUDPPacket+0x74>)
 8015fb4:	f7eb fb5a 	bl	800166c <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( const UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fbc:	613b      	str	r3, [r7, #16]

    switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8015fbe:	693b      	ldr	r3, [r7, #16]
 8015fc0:	899b      	ldrh	r3, [r3, #12]
 8015fc2:	b29b      	uxth	r3, r3
 8015fc4:	2b08      	cmp	r3, #8
 8015fc6:	d004      	beq.n	8015fd2 <xProcessReceivedUDPPacket+0x4a>
 8015fc8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8015fcc:	4293      	cmp	r3, r2
 8015fce:	d008      	beq.n	8015fe2 <xProcessReceivedUDPPacket+0x5a>
                                                          usPort, pxIsWaitingForARPResolution );
                break;
        #endif
        default:
            /* do nothing, coverity happy */
            break;
 8015fd0:	e00f      	b.n	8015ff2 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv4( pxNetworkBuffer,
 8015fd2:	897b      	ldrh	r3, [r7, #10]
 8015fd4:	687a      	ldr	r2, [r7, #4]
 8015fd6:	4619      	mov	r1, r3
 8015fd8:	68f8      	ldr	r0, [r7, #12]
 8015fda:	f000 f92f 	bl	801623c <xProcessReceivedUDPPacket_IPv4>
 8015fde:	6178      	str	r0, [r7, #20]
                break;
 8015fe0:	e007      	b.n	8015ff2 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv6( pxNetworkBuffer,
 8015fe2:	897b      	ldrh	r3, [r7, #10]
 8015fe4:	687a      	ldr	r2, [r7, #4]
 8015fe6:	4619      	mov	r1, r3
 8015fe8:	68f8      	ldr	r0, [r7, #12]
 8015fea:	f000 fbdd 	bl	80167a8 <xProcessReceivedUDPPacket_IPv6>
 8015fee:	6178      	str	r0, [r7, #20]
                break;
 8015ff0:	bf00      	nop
    }

    return xReturn;
 8015ff2:	697b      	ldr	r3, [r7, #20]
}
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	3718      	adds	r7, #24
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	bd80      	pop	{r7, pc}
 8015ffc:	08026904 	.word	0x08026904

08016000 <vProcessGeneratedUDPPacket_IPv4>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv4( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016000:	b580      	push	{r7, lr}
 8016002:	b08e      	sub	sp, #56	@ 0x38
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	695b      	ldr	r3, [r3, #20]
 801600c:	60fb      	str	r3, [r7, #12]
    NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016012:	60bb      	str	r3, [r7, #8]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016018:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801601e:	2b00      	cmp	r3, #0
 8016020:	d104      	bne.n	801602c <vProcessGeneratedUDPPacket_IPv4+0x2c>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016026:	3b2a      	subs	r3, #42	@ 0x2a
 8016028:	633b      	str	r3, [r7, #48]	@ 0x30
 801602a:	e003      	b.n	8016034 <vProcessGeneratedUDPPacket_IPv4+0x34>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016030:	3b2a      	subs	r3, #42	@ 0x2a
 8016032:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ), &( pxEndPoint ) );
 8016034:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016036:	f107 0208 	add.w	r2, r7, #8
 801603a:	f107 030c 	add.w	r3, r7, #12
 801603e:	4618      	mov	r0, r3
 8016040:	f7f0 fd68 	bl	8006b14 <eARPGetCacheEntry>
 8016044:	4603      	mov	r3, r0
 8016046:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( pxNetworkBuffer->pxEndPoint == NULL )
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801604e:	2b00      	cmp	r3, #0
 8016050:	d102      	bne.n	8016058 <vProcessGeneratedUDPPacket_IPv4+0x58>
    {
        pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8016052:	68ba      	ldr	r2, [r7, #8]
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    if( eReturned != eCantSendPacket )
 8016058:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801605c:	2b02      	cmp	r3, #2
 801605e:	f000 80a0 	beq.w	80161a2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
    {
        if( eReturned == eARPCacheHit )
 8016062:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016066:	2b01      	cmp	r3, #1
 8016068:	d176      	bne.n	8016158 <vProcessGeneratedUDPPacket_IPv4+0x158>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 801606a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801606c:	330e      	adds	r3, #14
 801606e:	627b      	str	r3, [r7, #36]	@ 0x24

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016074:	2b00      	cmp	r3, #0
 8016076:	d025      	beq.n	80160c4 <vProcessGeneratedUDPPacket_IPv4+0xc4>
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8016078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801607a:	3322      	adds	r3, #34	@ 0x22
 801607c:	623b      	str	r3, [r7, #32]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8016082:	6a3b      	ldr	r3, [r7, #32]
 8016084:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 801608a:	6a3b      	ldr	r3, [r7, #32]
 801608c:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 801608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016090:	b29b      	uxth	r3, r3
 8016092:	3308      	adds	r3, #8
 8016094:	b29a      	uxth	r2, r3
 8016096:	6a3b      	ldr	r3, [r7, #32]
 8016098:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 801609a:	6a3b      	ldr	r3, [r7, #32]
 801609c:	889b      	ldrh	r3, [r3, #4]
 801609e:	b29b      	uxth	r3, r3
 80160a0:	021b      	lsls	r3, r3, #8
 80160a2:	b21a      	sxth	r2, r3
 80160a4:	6a3b      	ldr	r3, [r7, #32]
 80160a6:	889b      	ldrh	r3, [r3, #4]
 80160a8:	b29b      	uxth	r3, r3
 80160aa:	0a1b      	lsrs	r3, r3, #8
 80160ac:	b29b      	uxth	r3, r3
 80160ae:	b21b      	sxth	r3, r3
 80160b0:	4313      	orrs	r3, r2
 80160b2:	b21b      	sxth	r3, r3
 80160b4:	b29a      	uxth	r2, r3
 80160b6:	6a3b      	ldr	r3, [r7, #32]
 80160b8:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 80160ba:	6a3b      	ldr	r3, [r7, #32]
 80160bc:	2200      	movs	r2, #0
 80160be:	719a      	strb	r2, [r3, #6]
 80160c0:	2200      	movs	r2, #0
 80160c2:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = ucDefaultPartUDPPacketHeader;
 80160c4:	4b5b      	ldr	r3, [pc, #364]	@ (8016234 <vProcessGeneratedUDPPacket_IPv4+0x234>)
 80160c6:	61fb      	str	r3, [r7, #28]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160cc:	3306      	adds	r3, #6
 80160ce:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ucDefaultPartUDPPacketHeader ) );
 80160d0:	2218      	movs	r2, #24
 80160d2:	69f9      	ldr	r1, [r7, #28]
 80160d4:	69b8      	ldr	r0, [r7, #24]
 80160d6:	f00b fe0b 	bl	8021cf0 <memcpy>

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d109      	bne.n	80160f6 <vProcessGeneratedUDPPacket_IPv4+0xf6>
                {
                    pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 80160e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160e4:	2201      	movs	r2, #1
 80160e6:	725a      	strb	r2, [r3, #9]
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 80160e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160ea:	b29b      	uxth	r3, r3
 80160ec:	331c      	adds	r3, #28
 80160ee:	b29a      	uxth	r2, r3
 80160f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160f2:	805a      	strh	r2, [r3, #2]
 80160f4:	e005      	b.n	8016102 <vProcessGeneratedUDPPacket_IPv4+0x102>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 80160f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160f8:	b29b      	uxth	r3, r3
 80160fa:	331c      	adds	r3, #28
 80160fc:	b29a      	uxth	r2, r3
 80160fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016100:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8016102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016104:	885b      	ldrh	r3, [r3, #2]
 8016106:	b29b      	uxth	r3, r3
 8016108:	021b      	lsls	r3, r3, #8
 801610a:	b21a      	sxth	r2, r3
 801610c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801610e:	885b      	ldrh	r3, [r3, #2]
 8016110:	b29b      	uxth	r3, r3
 8016112:	0a1b      	lsrs	r3, r3, #8
 8016114:	b29b      	uxth	r3, r3
 8016116:	b21b      	sxth	r3, r3
 8016118:	4313      	orrs	r3, r2
 801611a:	b21b      	sxth	r3, r3
 801611c:	b29a      	uxth	r2, r3
 801611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016120:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	695a      	ldr	r2, [r3, #20]
 8016126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016128:	611a      	str	r2, [r3, #16]

            if( pxNetworkBuffer->pxEndPoint != NULL )
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801612e:	2b00      	cmp	r3, #0
 8016130:	d004      	beq.n	801613c <vProcessGeneratedUDPPacket_IPv4+0x13c>
            {
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016136:	681a      	ldr	r2, [r3, #0]
 8016138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801613a:	60da      	str	r2, [r3, #12]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 801613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801613e:	2200      	movs	r2, #0
 8016140:	719a      	strb	r2, [r3, #6]
 8016142:	2200      	movs	r2, #0
 8016144:	71da      	strb	r2, [r3, #7]

            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* LLMNR messages are typically used on a LAN and they're
                 * not supposed to cross routers */
                if( pxNetworkBuffer->xIPAddress.ulIP_IPv4 == ipLLMNR_IP_ADDR )
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	695b      	ldr	r3, [r3, #20]
 801614a:	4a3b      	ldr	r2, [pc, #236]	@ (8016238 <vProcessGeneratedUDPPacket_IPv4+0x238>)
 801614c:	4293      	cmp	r3, r2
 801614e:	d128      	bne.n	80161a2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                {
                    pxIPHeader->ucTimeToLive = 0x01;
 8016150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016152:	2201      	movs	r2, #1
 8016154:	721a      	strb	r2, [r3, #8]
 8016156:	e024      	b.n	80161a2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                    pxUDPPacket->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 8016158:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801615c:	2b00      	cmp	r3, #0
 801615e:	d11d      	bne.n	801619c <vProcessGeneratedUDPPacket_IPv4+0x19c>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress, NULL );
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	2200      	movs	r2, #0
 8016164:	4619      	mov	r1, r3
 8016166:	2000      	movs	r0, #0
 8016168:	f7f0 fbc0 	bl	80068ec <vARPRefreshCacheEntry>
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* 'ulIPAddress' might have become the address of the Gateway.
             * Find the route again. */

            pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxNetworkBuffer->xIPAddress.ulIP_IPv4, 11 );
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	695b      	ldr	r3, [r3, #20]
 8016170:	210b      	movs	r1, #11
 8016172:	4618      	mov	r0, r3
 8016174:	f7f6 ff58 	bl	800d028 <FreeRTOS_FindEndPointOnNetMask>
 8016178:	4602      	mov	r2, r0
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	631a      	str	r2, [r3, #48]	@ 0x30

            if( pxNetworkBuffer->pxEndPoint == NULL )
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016182:	2b00      	cmp	r3, #0
 8016184:	d103      	bne.n	801618e <vProcessGeneratedUDPPacket_IPv4+0x18e>
            {
                eReturned = eCantSendPacket;
 8016186:	2302      	movs	r3, #2
 8016188:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801618c:	e009      	b.n	80161a2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
            }
            else
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 801618e:	68fa      	ldr	r2, [r7, #12]
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	615a      	str	r2, [r3, #20]
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f7f0 ff25 	bl	8006fe4 <vARPGenerateRequestPacket>
 801619a:	e002      	b.n	80161a2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 801619c:	2302      	movs	r3, #2
 801619e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( eReturned != eCantSendPacket )
 80161a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80161a6:	2b02      	cmp	r3, #2
 80161a8:	d03d      	beq.n	8016226 <vProcessGeneratedUDPPacket_IPv4+0x226>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d035      	beq.n	801621e <vProcessGeneratedUDPPacket_IPv4+0x21e>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80161b6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80161ba:	617b      	str	r3, [r7, #20]
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            EthernetHeader_t * pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161c0:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80161c2:	693b      	ldr	r3, [r7, #16]
 80161c4:	1d98      	adds	r0, r3, #6
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80161ca:	33e8      	adds	r3, #232	@ 0xe8
 80161cc:	2206      	movs	r2, #6
 80161ce:	4619      	mov	r1, r3
 80161d0:	f00b fd8e 	bl	8021cf0 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80161d8:	2b3b      	cmp	r3, #59	@ 0x3b
 80161da:	d812      	bhi.n	8016202 <vProcessGeneratedUDPPacket_IPv4+0x202>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80161e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80161e2:	e008      	b.n	80161f6 <vProcessGeneratedUDPPacket_IPv4+0x1f6>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80161e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161ea:	4413      	add	r3, r2
 80161ec:	2200      	movs	r2, #0
 80161ee:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80161f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161f2:	3301      	adds	r3, #1
 80161f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80161f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161f8:	2b3b      	cmp	r3, #59	@ 0x3b
 80161fa:	ddf3      	ble.n	80161e4 <vProcessGeneratedUDPPacket_IPv4+0x1e4>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	223c      	movs	r2, #60	@ 0x3c
 8016200:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            if( ( pxInterface != NULL ) && ( pxInterface->pfOutput != NULL ) )
 8016202:	697b      	ldr	r3, [r7, #20]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d011      	beq.n	801622c <vProcessGeneratedUDPPacket_IPv4+0x22c>
 8016208:	697b      	ldr	r3, [r7, #20]
 801620a:	68db      	ldr	r3, [r3, #12]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d00d      	beq.n	801622c <vProcessGeneratedUDPPacket_IPv4+0x22c>
            {
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8016210:	697b      	ldr	r3, [r7, #20]
 8016212:	68db      	ldr	r3, [r3, #12]
 8016214:	2201      	movs	r2, #1
 8016216:	6879      	ldr	r1, [r7, #4]
 8016218:	6978      	ldr	r0, [r7, #20]
 801621a:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 801621c:	e006      	b.n	801622c <vProcessGeneratedUDPPacket_IPv4+0x22c>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801621e:	6878      	ldr	r0, [r7, #4]
 8016220:	f000 fca2 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
}
 8016224:	e002      	b.n	801622c <vProcessGeneratedUDPPacket_IPv4+0x22c>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016226:	6878      	ldr	r0, [r7, #4]
 8016228:	f000 fc9e 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
}
 801622c:	bf00      	nop
 801622e:	3738      	adds	r7, #56	@ 0x38
 8016230:	46bd      	mov	sp, r7
 8016232:	bd80      	pop	{r7, pc}
 8016234:	08027024 	.word	0x08027024
 8016238:	fc0000e0 	.word	0xfc0000e0

0801623c <xProcessReceivedUDPPacket_IPv4>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 801623c:	b590      	push	{r4, r7, lr}
 801623e:	b099      	sub	sp, #100	@ 0x64
 8016240:	af02      	add	r7, sp, #8
 8016242:	60f8      	str	r0, [r7, #12]
 8016244:	460b      	mov	r3, r1
 8016246:	607a      	str	r2, [r7, #4]
 8016248:	817b      	strh	r3, [r7, #10]
    BaseType_t xReturn = pdPASS;
 801624a:	2301      	movs	r3, #1
 801624c:	657b      	str	r3, [r7, #84]	@ 0x54
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_t * pxUDPPacket;
    const NetworkEndPoint_t * pxEndpoint;

    configASSERT( pxNetworkBuffer != NULL );
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d104      	bne.n	801625e <xProcessReceivedUDPPacket_IPv4+0x22>
 8016254:	f240 116f 	movw	r1, #367	@ 0x16f
 8016258:	4872      	ldr	r0, [pc, #456]	@ (8016424 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 801625a:	f7eb fa07 	bl	800166c <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016262:	2b00      	cmp	r3, #0
 8016264:	d104      	bne.n	8016270 <xProcessReceivedUDPPacket_IPv4+0x34>
 8016266:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 801626a:	486e      	ldr	r0, [pc, #440]	@ (8016424 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 801626c:	f7eb f9fe 	bl	800166c <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016274:	653b      	str	r3, [r7, #80]	@ 0x50
    pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801627a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 801627c:	897b      	ldrh	r3, [r7, #10]
 801627e:	4618      	mov	r0, r3
 8016280:	f7f8 fc60 	bl	800eb44 <pxUDPSocketLookup>
 8016284:	64b8      	str	r0, [r7, #72]	@ 0x48

    *pxIsWaitingForARPResolution = pdFALSE;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2200      	movs	r2, #0
 801628a:	601a      	str	r2, [r3, #0]

    do
    {
        if( pxSocket != NULL )
 801628c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801628e:	2b00      	cmp	r3, #0
 8016290:	f000 8085 	beq.w	801639e <xProcessReceivedUDPPacket_IPv4+0x162>
        {
            if( ( pxEndpoint != NULL ) && ( pxEndpoint->ipv4_settings.ulIPAddress != 0U ) )
 8016294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016296:	2b00      	cmp	r3, #0
 8016298:	d018      	beq.n	80162cc <xProcessReceivedUDPPacket_IPv4+0x90>
 801629a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d014      	beq.n	80162cc <xProcessReceivedUDPPacket_IPv4+0x90>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 80162a2:	68f8      	ldr	r0, [r7, #12]
 80162a4:	f7f0 fa0c 	bl	80066c0 <xCheckRequiresARPResolution>
 80162a8:	4603      	mov	r3, r0
 80162aa:	2b01      	cmp	r3, #1
 80162ac:	d105      	bne.n	80162ba <xProcessReceivedUDPPacket_IPv4+0x7e>
                {
                    /* Mark this packet as waiting for ARP resolution. */
                    *pxIsWaitingForARPResolution = pdTRUE;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	2201      	movs	r2, #1
 80162b2:	601a      	str	r2, [r3, #0]

                    /* Return a fail to show that the frame will not be processed right now. */
                    xReturn = pdFAIL;
 80162b4:	2300      	movs	r3, #0
 80162b6:	657b      	str	r3, [r7, #84]	@ 0x54
                    break;
 80162b8:	e0ae      	b.n	8016418 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                }
                else
                {
                    /* Update the age of this cache entry since a packet was received. */
                    vARPRefreshCacheEntryAge( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 80162ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80162bc:	1d9a      	adds	r2, r3, #6
 80162be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80162c0:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80162c4:	4619      	mov	r1, r3
 80162c6:	4610      	mov	r0, r2
 80162c8:	f7f0 fada 	bl	8006880 <vARPRefreshCacheEntryAge>
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 80162cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80162ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d02f      	beq.n	8016334 <xProcessReceivedUDPPacket_IPv4+0xf8>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162d8:	332a      	adds	r3, #42	@ 0x2a
 80162da:	647b      	str	r3, [r7, #68]	@ 0x44
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 80162dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80162de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80162e0:	643b      	str	r3, [r7, #64]	@ 0x40

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80162e6:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    xSourceAddress.sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	695b      	ldr	r3, [r3, #20]
 80162ec:	633b      	str	r3, [r7, #48]	@ 0x30
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 80162ee:	2302      	movs	r3, #2
 80162f0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 80162f4:	2318      	movs	r3, #24
 80162f6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    destinationAddress.sin_port = usPort;
 80162fa:	897b      	ldrh	r3, [r7, #10]
 80162fc:	827b      	strh	r3, [r7, #18]
                    destinationAddress.sin_address.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 80162fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016300:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8016304:	61bb      	str	r3, [r7, #24]
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 8016306:	2302      	movs	r3, #2
 8016308:	747b      	strb	r3, [r7, #17]
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 801630a:	2318      	movs	r3, #24
 801630c:	743b      	strb	r3, [r7, #16]

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
                                  ( void * ) pcData,
                                  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016312:	f1a3 022a 	sub.w	r2, r3, #42	@ 0x2a
                    if( xHandler( ( Socket_t ) pxSocket,
 8016316:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801631a:	f107 0310 	add.w	r3, r7, #16
 801631e:	9300      	str	r3, [sp, #0]
 8016320:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8016322:	460b      	mov	r3, r1
 8016324:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016326:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8016328:	47a0      	blx	r4
 801632a:	4603      	mov	r3, r0
 801632c:	2b00      	cmp	r3, #0
 801632e:	d001      	beq.n	8016334 <xProcessReceivedUDPPacket_IPv4+0xf8>
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 8016330:	2300      	movs	r3, #0
 8016332:	657b      	str	r3, [r7, #84]	@ 0x54
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 8016334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016336:	2b01      	cmp	r3, #1
 8016338:	d16e      	bne.n	8016418 <xProcessReceivedUDPPacket_IPv4+0x1dc>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 801633a:	f7ed fd5d 	bl	8003df8 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 801633e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016340:	3354      	adds	r3, #84	@ 0x54
 8016342:	68fa      	ldr	r2, [r7, #12]
 8016344:	4611      	mov	r1, r2
 8016346:	4618      	mov	r0, r3
 8016348:	f7ec fcaf 	bl	8002caa <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 801634c:	f7ed fd62 	bl	8003e14 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 8016350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016352:	685b      	ldr	r3, [r3, #4]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d005      	beq.n	8016364 <xProcessReceivedUDPPacket_IPv4+0x128>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8016358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801635a:	685b      	ldr	r3, [r3, #4]
 801635c:	2101      	movs	r1, #1
 801635e:	4618      	mov	r0, r3
 8016360:	f7ec fb9e 	bl	8002aa0 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8016364:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016368:	2b00      	cmp	r3, #0
 801636a:	d00c      	beq.n	8016386 <xProcessReceivedUDPPacket_IPv4+0x14a>
 801636c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801636e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016370:	f003 0301 	and.w	r3, r3, #1
 8016374:	2b00      	cmp	r3, #0
 8016376:	d006      	beq.n	8016386 <xProcessReceivedUDPPacket_IPv4+0x14a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8016378:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801637a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	2101      	movs	r1, #1
 8016380:	4618      	mov	r0, r3
 8016382:	f7ec fb8d 	bl	8002aa0 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8016386:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801638a:	2b00      	cmp	r3, #0
 801638c:	d044      	beq.n	8016418 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 801638e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016390:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016392:	2300      	movs	r3, #0
 8016394:	2200      	movs	r2, #0
 8016396:	2100      	movs	r1, #0
 8016398:	f7ec fe5e 	bl	8003058 <xQueueGenericSend>
 801639c:	e03c      	b.n	8016418 <xProcessReceivedUDPPacket_IPv4+0x1dc>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 801639e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163a0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80163a2:	b29b      	uxth	r3, r3
 80163a4:	021b      	lsls	r3, r3, #8
 80163a6:	b21a      	sxth	r2, r3
 80163a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163aa:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80163ac:	b29b      	uxth	r3, r3
 80163ae:	0a1b      	lsrs	r3, r3, #8
 80163b0:	b29b      	uxth	r3, r3
 80163b2:	b21b      	sxth	r3, r3
 80163b4:	4313      	orrs	r3, r2
 80163b6:	b21b      	sxth	r3, r3
 80163b8:	2b35      	cmp	r3, #53	@ 0x35
 80163ba:	d10f      	bne.n	80163dc <xProcessReceivedUDPPacket_IPv4+0x1a0>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 80163bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163be:	1d98      	adds	r0, r3, #6
 80163c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163c2:	f8d3 101a 	ldr.w	r1, [r3, #26]
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80163ca:	461a      	mov	r2, r3
 80163cc:	f7f0 fa8e 	bl	80068ec <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80163d0:	68f8      	ldr	r0, [r7, #12]
 80163d2:	f7f0 ff20 	bl	8007216 <ulDNSHandlePacket>
 80163d6:	4603      	mov	r3, r0
 80163d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80163da:	e01d      	b.n	8016418 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 80163dc:	897b      	ldrh	r3, [r7, #10]
 80163de:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 80163e2:	4293      	cmp	r3, r2
 80163e4:	d006      	beq.n	80163f4 <xProcessReceivedUDPPacket_IPv4+0x1b8>
                    ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 80163e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163e8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80163ea:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 80163ec:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 80163f0:	4293      	cmp	r3, r2
 80163f2:	d10f      	bne.n	8016414 <xProcessReceivedUDPPacket_IPv4+0x1d8>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 80163f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163f6:	1d98      	adds	r0, r3, #6
 80163f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163fa:	f8d3 101a 	ldr.w	r1, [r3, #26]
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016402:	461a      	mov	r2, r3
 8016404:	f7f0 fa72 	bl	80068ec <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016408:	68f8      	ldr	r0, [r7, #12]
 801640a:	f7f0 ff04 	bl	8007216 <ulDNSHandlePacket>
 801640e:	4603      	mov	r3, r0
 8016410:	657b      	str	r3, [r7, #84]	@ 0x54
 8016412:	e001      	b.n	8016418 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8016414:	2300      	movs	r3, #0
 8016416:	657b      	str	r3, [r7, #84]	@ 0x54
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8016418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 801641a:	4618      	mov	r0, r3
 801641c:	375c      	adds	r7, #92	@ 0x5c
 801641e:	46bd      	mov	sp, r7
 8016420:	bd90      	pop	{r4, r7, pc}
 8016422:	bf00      	nop
 8016424:	08026934 	.word	0x08026934

08016428 <pxGetEndpoint>:
 * @returns Pointer to the first end point of the given IP type from the
 *          list of end points.
 */
static NetworkEndPoint_t * pxGetEndpoint( BaseType_t xIPType,
                                          BaseType_t xIsGlobal )
{
 8016428:	b580      	push	{r7, lr}
 801642a:	b086      	sub	sp, #24
 801642c:	af00      	add	r7, sp, #0
 801642e:	6078      	str	r0, [r7, #4]
 8016430:	6039      	str	r1, [r7, #0]
    NetworkEndPoint_t * pxEndPoint;

    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8016432:	2000      	movs	r0, #0
 8016434:	f7f6 fd20 	bl	800ce78 <FreeRTOS_FirstEndPoint>
 8016438:	6178      	str	r0, [r7, #20]
 801643a:	e021      	b.n	8016480 <pxGetEndpoint+0x58>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
    {
        if( xIPType == ( BaseType_t ) ipTYPE_IPv6 )
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	2b60      	cmp	r3, #96	@ 0x60
 8016440:	d119      	bne.n	8016476 <pxGetEndpoint+0x4e>
        {
            if( pxEndPoint->bits.bIPv6 != 0U )
 8016442:	697b      	ldr	r3, [r7, #20]
 8016444:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8016448:	f003 0304 	and.w	r3, r3, #4
 801644c:	b2db      	uxtb	r3, r3
 801644e:	2b00      	cmp	r3, #0
 8016450:	d011      	beq.n	8016476 <pxGetEndpoint+0x4e>
            {
                IPv6_Type_t eEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 8016452:	697b      	ldr	r3, [r7, #20]
 8016454:	3338      	adds	r3, #56	@ 0x38
 8016456:	4618      	mov	r0, r3
 8016458:	f7f7 f8f2 	bl	800d640 <xIPv6_GetIPType>
 801645c:	4603      	mov	r3, r0
 801645e:	74fb      	strb	r3, [r7, #19]
                BaseType_t xEndpointGlobal = ( eEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 8016460:	7cfb      	ldrb	r3, [r7, #19]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d101      	bne.n	801646a <pxGetEndpoint+0x42>
 8016466:	2301      	movs	r3, #1
 8016468:	e000      	b.n	801646c <pxGetEndpoint+0x44>
 801646a:	2300      	movs	r3, #0
 801646c:	60fb      	str	r3, [r7, #12]

                if( xEndpointGlobal == xIsGlobal )
 801646e:	68fa      	ldr	r2, [r7, #12]
 8016470:	683b      	ldr	r3, [r7, #0]
 8016472:	429a      	cmp	r2, r3
 8016474:	d008      	beq.n	8016488 <pxGetEndpoint+0x60>
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8016476:	6979      	ldr	r1, [r7, #20]
 8016478:	2000      	movs	r0, #0
 801647a:	f7f6 fd1f 	bl	800cebc <FreeRTOS_NextEndPoint>
 801647e:	6178      	str	r0, [r7, #20]
         pxEndPoint != NULL;
 8016480:	697b      	ldr	r3, [r7, #20]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d1da      	bne.n	801643c <pxGetEndpoint+0x14>
 8016486:	e000      	b.n	801648a <pxGetEndpoint+0x62>
                {
                    break;
 8016488:	bf00      	nop
                }
            }
        }
    }

    return pxEndPoint;
 801648a:	697b      	ldr	r3, [r7, #20]
}
 801648c:	4618      	mov	r0, r3
 801648e:	3718      	adds	r7, #24
 8016490:	46bd      	mov	sp, r7
 8016492:	bd80      	pop	{r7, pc}

08016494 <prvStartLookup>:
 * @param[out] pxLostBuffer  The pointee will be set to true in case the network packet got released
 *                            ( the ownership was taken ).
 */
static eARPLookupResult_t prvStartLookup( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                          BaseType_t * pxLostBuffer )
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b084      	sub	sp, #16
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
 801649c:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturned = eARPCacheMiss;
 801649e:	2300      	movs	r3, #0
 80164a0:	73fb      	strb	r3, [r7, #15]

    FreeRTOS_printf( ( "Looking up %pip with%s end-point\n",
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	f103 0114 	add.w	r1, r3, #20
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d001      	beq.n	80164b4 <prvStartLookup+0x20>
 80164b0:	4b1e      	ldr	r3, [pc, #120]	@ (801652c <prvStartLookup+0x98>)
 80164b2:	e000      	b.n	80164b6 <prvStartLookup+0x22>
 80164b4:	4b1e      	ldr	r3, [pc, #120]	@ (8016530 <prvStartLookup+0x9c>)
 80164b6:	461a      	mov	r2, r3
 80164b8:	481e      	ldr	r0, [pc, #120]	@ (8016534 <prvStartLookup+0xa0>)
 80164ba:	f00b f9fd 	bl	80218b8 <lUDPLoggingPrintf>
                       ( void * ) pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes,
                       ( pxNetworkBuffer->pxEndPoint != NULL ) ? "" : "out" ) );

    if( pxNetworkBuffer->pxEndPoint == NULL )
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d11f      	bne.n	8016506 <prvStartLookup+0x72>
    {
        IPv6_Type_t eTargetType = xIPv6_GetIPType( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	3314      	adds	r3, #20
 80164ca:	4618      	mov	r0, r3
 80164cc:	f7f7 f8b8 	bl	800d640 <xIPv6_GetIPType>
 80164d0:	4603      	mov	r3, r0
 80164d2:	73bb      	strb	r3, [r7, #14]
        BaseType_t xIsGlobal = ( eTargetType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 80164d4:	7bbb      	ldrb	r3, [r7, #14]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d101      	bne.n	80164de <prvStartLookup+0x4a>
 80164da:	2301      	movs	r3, #1
 80164dc:	e000      	b.n	80164e0 <prvStartLookup+0x4c>
 80164de:	2300      	movs	r3, #0
 80164e0:	60bb      	str	r3, [r7, #8]
        pxNetworkBuffer->pxEndPoint = pxGetEndpoint( ( BaseType_t ) ipTYPE_IPv6, xIsGlobal );
 80164e2:	68b9      	ldr	r1, [r7, #8]
 80164e4:	2060      	movs	r0, #96	@ 0x60
 80164e6:	f7ff ff9f 	bl	8016428 <pxGetEndpoint>
 80164ea:	4602      	mov	r2, r0
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	631a      	str	r2, [r3, #48]	@ 0x30
        FreeRTOS_printf( ( "prvStartLookup: Got an end-point: %s\n", pxNetworkBuffer->pxEndPoint ? "yes" : "no" ) );
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d001      	beq.n	80164fc <prvStartLookup+0x68>
 80164f8:	4b0f      	ldr	r3, [pc, #60]	@ (8016538 <prvStartLookup+0xa4>)
 80164fa:	e000      	b.n	80164fe <prvStartLookup+0x6a>
 80164fc:	4b0f      	ldr	r3, [pc, #60]	@ (801653c <prvStartLookup+0xa8>)
 80164fe:	4619      	mov	r1, r3
 8016500:	480f      	ldr	r0, [pc, #60]	@ (8016540 <prvStartLookup+0xac>)
 8016502:	f00b f9d9 	bl	80218b8 <lUDPLoggingPrintf>
    }

    if( pxNetworkBuffer->pxEndPoint != NULL )
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801650a:	2b00      	cmp	r3, #0
 801650c:	d008      	beq.n	8016520 <prvStartLookup+0x8c>
    {
        vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	3314      	adds	r3, #20
 8016512:	4619      	mov	r1, r3
 8016514:	6878      	ldr	r0, [r7, #4]
 8016516:	f7f5 f9d5 	bl	800b8c4 <vNDSendNeighbourSolicitation>

        /* pxNetworkBuffer has been sent and released.
         * Make sure it won't be used again.. */
        *pxLostBuffer = pdTRUE;
 801651a:	683b      	ldr	r3, [r7, #0]
 801651c:	2201      	movs	r2, #1
 801651e:	601a      	str	r2, [r3, #0]
    }

    return eReturned;
 8016520:	7bfb      	ldrb	r3, [r7, #15]
}
 8016522:	4618      	mov	r0, r3
 8016524:	3710      	adds	r7, #16
 8016526:	46bd      	mov	sp, r7
 8016528:	bd80      	pop	{r7, pc}
 801652a:	bf00      	nop
 801652c:	08026968 	.word	0x08026968
 8016530:	0802696c 	.word	0x0802696c
 8016534:	08026970 	.word	0x08026970
 8016538:	08026994 	.word	0x08026994
 801653c:	08026998 	.word	0x08026998
 8016540:	0802699c 	.word	0x0802699c

08016544 <vProcessGeneratedUDPPacket_IPv6>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016544:	b590      	push	{r4, r7, lr}
 8016546:	b093      	sub	sp, #76	@ 0x4c
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
    UDPPacket_IPv6_t * pxUDPPacket_IPv6;
    IPHeader_IPv6_t * pxIPHeader_IPv6;
    eARPLookupResult_t eReturned;
    size_t uxPayloadSize;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    NetworkInterface_t * pxInterface = NULL;
 801654c:	2300      	movs	r3, #0
 801654e:	63bb      	str	r3, [r7, #56]	@ 0x38
    EthernetHeader_t * pxEthernetHeader = NULL;
 8016550:	2300      	movs	r3, #0
 8016552:	637b      	str	r3, [r7, #52]	@ 0x34
    BaseType_t xLostBuffer = pdFALSE;
 8016554:	2300      	movs	r3, #0
 8016556:	623b      	str	r3, [r7, #32]
    NetworkEndPoint_t * pxEndPoint = NULL;
 8016558:	2300      	movs	r3, #0
 801655a:	61fb      	str	r3, [r7, #28]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016560:	633b      	str	r3, [r7, #48]	@ 0x30
    pxIPHeader_IPv6 = &( pxUDPPacket_IPv6->xIPHeader );
 8016562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016564:	330e      	adds	r3, #14
 8016566:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Remember the original address. It might get replaced with
     * the address of the gateway. */
    ( void ) memcpy( xIPv6Address.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, sizeof( xIPv6Address.ucBytes ) );
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	3314      	adds	r3, #20
 801656c:	f107 040c 	add.w	r4, r7, #12
 8016570:	6818      	ldr	r0, [r3, #0]
 8016572:	6859      	ldr	r1, [r3, #4]
 8016574:	689a      	ldr	r2, [r3, #8]
 8016576:	68db      	ldr	r3, [r3, #12]
 8016578:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801657e:	2b00      	cmp	r3, #0
 8016580:	d107      	bne.n	8016592 <vProcessGeneratedUDPPacket_IPv6+0x4e>
        {
            size_t uxHeadersSize = sizeof( EthernetHeader_t ) + sizeof( IPHeader_IPv6_t ) + sizeof( ICMPHeader_t );
 8016582:	233e      	movs	r3, #62	@ 0x3e
 8016584:	62bb      	str	r3, [r7, #40]	@ 0x28
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxHeadersSize;
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801658a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801658c:	1ad3      	subs	r3, r2, r3
 801658e:	643b      	str	r3, [r7, #64]	@ 0x40
 8016590:	e003      	b.n	801659a <vProcessGeneratedUDPPacket_IPv6+0x56>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_IPv6_t );
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016596:	3b3e      	subs	r3, #62	@ 0x3e
 8016598:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Look in the IPv6 MAC-address cache for the target IP-address. */
    eReturned = eNDGetCacheEntry( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ), &( pxUDPPacket_IPv6->xEthernetHeader.xDestinationAddress ),
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	3314      	adds	r3, #20
 801659e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80165a0:	f107 021c 	add.w	r2, r7, #28
 80165a4:	4618      	mov	r0, r3
 80165a6:	f7f4 ff21 	bl	800b3ec <eNDGetCacheEntry>
 80165aa:	4603      	mov	r3, r0
 80165ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                  &( pxEndPoint ) );

    if( eReturned != eCantSendPacket )
 80165b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80165b4:	2b02      	cmp	r3, #2
 80165b6:	f000 80b1 	beq.w	801671c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
    {
        if( eReturned == eARPCacheHit )
 80165ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80165be:	2b01      	cmp	r3, #1
 80165c0:	f040 8095 	bne.w	80166ee <vProcessGeneratedUDPPacket_IPv6+0x1aa>
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80165c4:	69fa      	ldr	r2, [r7, #28]
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d109      	bne.n	80165e6 <vProcessGeneratedUDPPacket_IPv6+0xa2>
                {
                    pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 80165d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165d4:	2260      	movs	r2, #96	@ 0x60
 80165d6:	701a      	strb	r2, [r3, #0]
                    pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 80165d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165da:	223a      	movs	r2, #58	@ 0x3a
 80165dc:	719a      	strb	r2, [r3, #6]
                    pxIPHeader_IPv6->ucHopLimit = 128;
 80165de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165e0:	2280      	movs	r2, #128	@ 0x80
 80165e2:	71da      	strb	r2, [r3, #7]
 80165e4:	e05e      	b.n	80166a4 <vProcessGeneratedUDPPacket_IPv6+0x160>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader = NULL;
 80165e6:	2300      	movs	r3, #0
 80165e8:	627b      	str	r3, [r7, #36]	@ 0x24

                pxUDPHeader = &( pxUDPPacket_IPv6->xUDPHeader );
 80165ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165ec:	3336      	adds	r3, #54	@ 0x36
 80165ee:	627b      	str	r3, [r7, #36]	@ 0x24

                pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 80165f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165f2:	2260      	movs	r2, #96	@ 0x60
 80165f4:	701a      	strb	r2, [r3, #0]
                pxIPHeader_IPv6->ucTrafficClassFlow = 0;
 80165f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165f8:	2200      	movs	r2, #0
 80165fa:	705a      	strb	r2, [r3, #1]
                pxIPHeader_IPv6->usFlowLabel = 0;
 80165fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165fe:	2200      	movs	r2, #0
 8016600:	709a      	strb	r2, [r3, #2]
 8016602:	2200      	movs	r2, #0
 8016604:	70da      	strb	r2, [r3, #3]
                pxIPHeader_IPv6->ucHopLimit = 255;
 8016606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016608:	22ff      	movs	r2, #255	@ 0xff
 801660a:	71da      	strb	r2, [r3, #7]
                pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) );
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016610:	b29b      	uxth	r3, r3
 8016612:	3b36      	subs	r3, #54	@ 0x36
 8016614:	b29a      	uxth	r2, r3
 8016616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016618:	809a      	strh	r2, [r3, #4]

                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 801661a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801661c:	2211      	movs	r2, #17
 801661e:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - sizeof( IPPacket_IPv6_t ) );
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016624:	b29b      	uxth	r3, r3
 8016626:	3b36      	subs	r3, #54	@ 0x36
 8016628:	b29a      	uxth	r2, r3
 801662a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801662c:	809a      	strh	r2, [r3, #4]
                /* The total transmit size adds on the Ethernet header. */
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( pxIPHeader_IPv6->usPayloadLength );
 801662e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016630:	889b      	ldrh	r3, [r3, #4]
 8016632:	b29b      	uxth	r3, r3
 8016634:	021b      	lsls	r3, r3, #8
 8016636:	b21a      	sxth	r2, r3
 8016638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801663a:	889b      	ldrh	r3, [r3, #4]
 801663c:	b29b      	uxth	r3, r3
 801663e:	0a1b      	lsrs	r3, r3, #8
 8016640:	b29b      	uxth	r3, r3
 8016642:	b21b      	sxth	r3, r3
 8016644:	4313      	orrs	r3, r2
 8016646:	b21b      	sxth	r3, r3
 8016648:	b29a      	uxth	r2, r3
 801664a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801664c:	809a      	strh	r2, [r3, #4]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8016652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016654:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 801665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801665c:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 801665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016660:	889b      	ldrh	r3, [r3, #4]
 8016662:	b29b      	uxth	r3, r3
 8016664:	021b      	lsls	r3, r3, #8
 8016666:	b21a      	sxth	r2, r3
 8016668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801666a:	889b      	ldrh	r3, [r3, #4]
 801666c:	b29b      	uxth	r3, r3
 801666e:	0a1b      	lsrs	r3, r3, #8
 8016670:	b29b      	uxth	r3, r3
 8016672:	b21b      	sxth	r3, r3
 8016674:	4313      	orrs	r3, r2
 8016676:	b21b      	sxth	r3, r3
 8016678:	b29a      	uxth	r2, r3
 801667a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801667c:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 801667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016680:	2200      	movs	r2, #0
 8016682:	719a      	strb	r2, [r3, #6]
 8016684:	2200      	movs	r2, #0
 8016686:	71da      	strb	r2, [r3, #7]

                if( pxNetworkBuffer->pxEndPoint != NULL )
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801668c:	2b00      	cmp	r3, #0
 801668e:	d009      	beq.n	80166a4 <vProcessGeneratedUDPPacket_IPv6+0x160>
                {
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 8016690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016692:	f103 0008 	add.w	r0, r3, #8
                                     pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801669a:	3338      	adds	r3, #56	@ 0x38
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 801669c:	2210      	movs	r2, #16
 801669e:	4619      	mov	r1, r3
 80166a0:	f00b fb26 	bl	8021cf0 <memcpy>
                ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
            }
            #endif

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d10e      	bne.n	80166ca <vProcessGeneratedUDPPacket_IPv6+0x186>
                {
                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( ICMPEcho_IPv6_t ) + uxPayloadSize );
 80166ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80166ae:	b29b      	uxth	r3, r3
 80166b0:	3308      	adds	r3, #8
 80166b2:	b29b      	uxth	r3, r3
 80166b4:	021b      	lsls	r3, r3, #8
 80166b6:	b29a      	uxth	r2, r3
 80166b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80166ba:	3308      	adds	r3, #8
 80166bc:	0a1b      	lsrs	r3, r3, #8
 80166be:	b29b      	uxth	r3, r3
 80166c0:	4313      	orrs	r3, r2
 80166c2:	b29a      	uxth	r2, r3
 80166c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166c6:	809a      	strh	r2, [r3, #4]
 80166c8:	e028      	b.n	801671c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 80166ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166cc:	2211      	movs	r2, #17
 80166ce:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( UDPHeader_t ) + uxPayloadSize );
 80166d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80166d2:	b29b      	uxth	r3, r3
 80166d4:	3308      	adds	r3, #8
 80166d6:	b29b      	uxth	r3, r3
 80166d8:	021b      	lsls	r3, r3, #8
 80166da:	b29a      	uxth	r2, r3
 80166dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80166de:	3308      	adds	r3, #8
 80166e0:	0a1b      	lsrs	r3, r3, #8
 80166e2:	b29b      	uxth	r3, r3
 80166e4:	4313      	orrs	r3, r2
 80166e6:	b29a      	uxth	r2, r3
 80166e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166ea:	809a      	strh	r2, [r3, #4]
 80166ec:	e016      	b.n	801671c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                    pxUDPPacket_IPv6->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 80166ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d10f      	bne.n	8016716 <vProcessGeneratedUDPPacket_IPv6+0x1d2>
        {
            if( pxEndPoint != NULL )
 80166f6:	69fb      	ldr	r3, [r7, #28]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d002      	beq.n	8016702 <vProcessGeneratedUDPPacket_IPv6+0x1be>
            {
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80166fc:	69fa      	ldr	r2, [r7, #28]
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            eReturned = prvStartLookup( pxNetworkBuffer, &( xLostBuffer ) );
 8016702:	f107 0320 	add.w	r3, r7, #32
 8016706:	4619      	mov	r1, r3
 8016708:	6878      	ldr	r0, [r7, #4]
 801670a:	f7ff fec3 	bl	8016494 <prvStartLookup>
 801670e:	4603      	mov	r3, r0
 8016710:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8016714:	e002      	b.n	801671c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 8016716:	2302      	movs	r3, #2
 8016718:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( xLostBuffer == pdTRUE )
 801671c:	6a3b      	ldr	r3, [r7, #32]
 801671e:	2b01      	cmp	r3, #1
 8016720:	d03d      	beq.n	801679e <vProcessGeneratedUDPPacket_IPv6+0x25a>
    {
        /* An ND solicitation or ARP request has been sent. */
    }
    else if( eReturned != eCantSendPacket )
 8016722:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016726:	2b02      	cmp	r3, #2
 8016728:	d036      	beq.n	8016798 <vProcessGeneratedUDPPacket_IPv6+0x254>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801672e:	2b00      	cmp	r3, #0
 8016730:	d02e      	beq.n	8016790 <vProcessGeneratedUDPPacket_IPv6+0x24c>
        {
            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016736:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801673a:	63bb      	str	r3, [r7, #56]	@ 0x38
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016740:	637b      	str	r3, [r7, #52]	@ 0x34
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 8016742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016744:	1d98      	adds	r0, r3, #6
                             pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes,
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801674a:	33e8      	adds	r3, #232	@ 0xe8
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 801674c:	2206      	movs	r2, #6
 801674e:	4619      	mov	r1, r3
 8016750:	f00b face 	bl	8021cf0 <memcpy>
                             ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016758:	2b3b      	cmp	r3, #59	@ 0x3b
 801675a:	d812      	bhi.n	8016782 <vProcessGeneratedUDPPacket_IPv6+0x23e>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016760:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016762:	e008      	b.n	8016776 <vProcessGeneratedUDPPacket_IPv6+0x232>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801676a:	4413      	add	r3, r2
 801676c:	2200      	movs	r2, #0
 801676e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8016770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016772:	3301      	adds	r3, #1
 8016774:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016778:	2b3b      	cmp	r3, #59	@ 0x3b
 801677a:	ddf3      	ble.n	8016764 <vProcessGeneratedUDPPacket_IPv6+0x220>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	223c      	movs	r2, #60	@ 0x3c
 8016780:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8016782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016784:	68db      	ldr	r3, [r3, #12]
 8016786:	2201      	movs	r2, #1
 8016788:	6879      	ldr	r1, [r7, #4]
 801678a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801678c:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 801678e:	e006      	b.n	801679e <vProcessGeneratedUDPPacket_IPv6+0x25a>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016790:	6878      	ldr	r0, [r7, #4]
 8016792:	f000 f9e9 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
}
 8016796:	e002      	b.n	801679e <vProcessGeneratedUDPPacket_IPv6+0x25a>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016798:	6878      	ldr	r0, [r7, #4]
 801679a:	f000 f9e5 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
}
 801679e:	bf00      	nop
 80167a0:	374c      	adds	r7, #76	@ 0x4c
 80167a2:	46bd      	mov	sp, r7
 80167a4:	bd90      	pop	{r4, r7, pc}
	...

080167a8 <xProcessReceivedUDPPacket_IPv6>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 80167a8:	b590      	push	{r4, r7, lr}
 80167aa:	b09b      	sub	sp, #108	@ 0x6c
 80167ac:	af02      	add	r7, sp, #8
 80167ae:	60f8      	str	r0, [r7, #12]
 80167b0:	460b      	mov	r3, r1
 80167b2:	607a      	str	r2, [r7, #4]
 80167b4:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdPASS;
 80167b6:	2301      	movs	r3, #1
 80167b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_IPv6_t * pxUDPPacket_IPv6;

    configASSERT( pxNetworkBuffer != NULL );
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d104      	bne.n	80167ca <xProcessReceivedUDPPacket_IPv6+0x22>
 80167c0:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 80167c4:	4874      	ldr	r0, [pc, #464]	@ (8016998 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 80167c6:	f7ea ff51 	bl	800166c <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d104      	bne.n	80167dc <xProcessReceivedUDPPacket_IPv6+0x34>
 80167d2:	f240 1187 	movw	r1, #391	@ 0x187
 80167d6:	4870      	ldr	r0, [pc, #448]	@ (8016998 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 80167d8:	f7ea ff48 	bl	800166c <vAssertCalled>
     * handling them, no use to fill the cache with those IP addresses. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80167e0:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 80167e2:	897b      	ldrh	r3, [r7, #10]
 80167e4:	4618      	mov	r0, r3
 80167e6:	f7f8 f9ad 	bl	800eb44 <pxUDPSocketLookup>
 80167ea:	6578      	str	r0, [r7, #84]	@ 0x54

    *pxIsWaitingForARPResolution = pdFALSE;
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	2200      	movs	r2, #0
 80167f0:	601a      	str	r2, [r3, #0]

    do
    {
        /* UDPv6 doesn't allow zero-checksum, refer to RFC2460 - section 8.1.
         * Some platforms (such as Zynq) pass the packet to upper layer for flexibility to allow zero-checksum. */
        if( pxUDPPacket_IPv6->xUDPHeader.usChecksum == 0U )
 80167f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80167f4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80167f6:	b29b      	uxth	r3, r3
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d109      	bne.n	8016810 <xProcessReceivedUDPPacket_IPv6+0x68>
        {
            FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket_IPv6: Drop packets with checksum %d\n",
 80167fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80167fe:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8016800:	b29b      	uxth	r3, r3
 8016802:	4619      	mov	r1, r3
 8016804:	4865      	ldr	r0, [pc, #404]	@ (801699c <xProcessReceivedUDPPacket_IPv6+0x1f4>)
 8016806:	f00b f857 	bl	80218b8 <lUDPLoggingPrintf>
                                     pxUDPPacket_IPv6->xUDPHeader.usChecksum ) );

            xReturn = pdFAIL;
 801680a:	2300      	movs	r3, #0
 801680c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801680e:	e0bd      	b.n	801698c <xProcessReceivedUDPPacket_IPv6+0x1e4>
        }

        if( pxSocket != NULL )
 8016810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016812:	2b00      	cmp	r3, #0
 8016814:	f000 8091 	beq.w	801693a <xProcessReceivedUDPPacket_IPv6+0x192>
        {
            if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8016818:	68f8      	ldr	r0, [r7, #12]
 801681a:	f7ef ff51 	bl	80066c0 <xCheckRequiresARPResolution>
 801681e:	4603      	mov	r3, r0
 8016820:	2b01      	cmp	r3, #1
 8016822:	d105      	bne.n	8016830 <xProcessReceivedUDPPacket_IPv6+0x88>
            {
                /* Mark this packet as waiting for ARP resolution. */
                *pxIsWaitingForARPResolution = pdTRUE;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	2201      	movs	r2, #1
 8016828:	601a      	str	r2, [r3, #0]

                /* Return a fail to show that the frame will not be processed right now. */
                xReturn = pdFAIL;
 801682a:	2300      	movs	r3, #0
 801682c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                break;
 801682e:	e0ad      	b.n	801698c <xProcessReceivedUDPPacket_IPv6+0x1e4>
            }

            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 8016830:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016832:	1d98      	adds	r0, r3, #6
 8016834:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016836:	f103 0116 	add.w	r1, r3, #22
                                  pxNetworkBuffer->pxEndPoint );
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 801683e:	461a      	mov	r2, r3
 8016840:	f7f4 fe82 	bl	800b548 <vNDRefreshCacheEntry>

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                size_t uxIPLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8016844:	68f8      	ldr	r0, [r7, #12]
 8016846:	f7f2 ff7f 	bl	8009748 <uxIPHeaderSizePacket>
 801684a:	6538      	str	r0, [r7, #80]	@ 0x50
                size_t uxPayloadSize;

                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 801684c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801684e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016850:	2b00      	cmp	r3, #0
 8016852:	d03d      	beq.n	80168d0 <xProcessReceivedUDPPacket_IPv6+0x128>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    /* The application hook needs to know the from- and to-addresses. */

                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPLength + ipSIZE_OF_UDP_HEADER ] );
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016858:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801685a:	3316      	adds	r3, #22
 801685c:	4413      	add	r3, r2
 801685e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 8016860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016862:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016864:	64bb      	str	r3, [r7, #72]	@ 0x48

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801686a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    destinationAddress.sin_port = usPort;
 801686c:	897b      	ldrh	r3, [r7, #10]
 801686e:	82fb      	strh	r3, [r7, #22]
                    ( void ) memcpy( xSourceAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8016870:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016872:	3316      	adds	r3, #22
 8016874:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8016878:	6818      	ldr	r0, [r3, #0]
 801687a:	6859      	ldr	r1, [r3, #4]
 801687c:	689a      	ldr	r2, [r3, #8]
 801687e:	68db      	ldr	r3, [r3, #12]
 8016880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    ( void ) memcpy( destinationAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8016882:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016884:	3326      	adds	r3, #38	@ 0x26
 8016886:	f107 041c 	add.w	r4, r7, #28
 801688a:	6818      	ldr	r0, [r3, #0]
 801688c:	6859      	ldr	r1, [r3, #4]
 801688e:	689a      	ldr	r2, [r3, #8]
 8016890:	68db      	ldr	r3, [r3, #12]
 8016892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 8016894:	230a      	movs	r3, #10
 8016896:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 801689a:	230a      	movs	r3, #10
 801689c:	757b      	strb	r3, [r7, #21]
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 801689e:	2318      	movs	r3, #24
 80168a0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 80168a4:	2318      	movs	r3, #24
 80168a6:	753b      	strb	r3, [r7, #20]
                    uxPayloadSize = pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER + ( size_t ) ipSIZE_OF_IPv6_HEADER );
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80168ac:	3b3e      	subs	r3, #62	@ 0x3e
 80168ae:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
 80168b0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80168b4:	f107 0314 	add.w	r3, r7, #20
 80168b8:	9300      	str	r3, [sp, #0]
 80168ba:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 80168bc:	4613      	mov	r3, r2
 80168be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80168c0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80168c2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80168c4:	47a0      	blx	r4
 80168c6:	4603      	mov	r3, r0
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d001      	beq.n	80168d0 <xProcessReceivedUDPPacket_IPv6+0x128>
                                  ( void * ) pcData,
                                  uxPayloadSize,
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 80168cc:	2300      	movs	r3, #0
 80168ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 80168d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80168d2:	2b01      	cmp	r3, #1
 80168d4:	d15a      	bne.n	801698c <xProcessReceivedUDPPacket_IPv6+0x1e4>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 80168d6:	f7ed fa8f 	bl	8003df8 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 80168da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168dc:	3354      	adds	r3, #84	@ 0x54
 80168de:	68fa      	ldr	r2, [r7, #12]
 80168e0:	4611      	mov	r1, r2
 80168e2:	4618      	mov	r0, r3
 80168e4:	f7ec f9e1 	bl	8002caa <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 80168e8:	f7ed fa94 	bl	8003e14 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 80168ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168ee:	685b      	ldr	r3, [r3, #4]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d005      	beq.n	8016900 <xProcessReceivedUDPPacket_IPv6+0x158>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 80168f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168f6:	685b      	ldr	r3, [r3, #4]
 80168f8:	2101      	movs	r1, #1
 80168fa:	4618      	mov	r0, r3
 80168fc:	f7ec f8d0 	bl	8002aa0 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8016900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016904:	2b00      	cmp	r3, #0
 8016906:	d00c      	beq.n	8016922 <xProcessReceivedUDPPacket_IPv6+0x17a>
 8016908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801690a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801690c:	f003 0301 	and.w	r3, r3, #1
 8016910:	2b00      	cmp	r3, #0
 8016912:	d006      	beq.n	8016922 <xProcessReceivedUDPPacket_IPv6+0x17a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8016914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	2101      	movs	r1, #1
 801691c:	4618      	mov	r0, r3
 801691e:	f7ec f8bf 	bl	8002aa0 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8016922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016926:	2b00      	cmp	r3, #0
 8016928:	d030      	beq.n	801698c <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 801692a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801692c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801692e:	2300      	movs	r3, #0
 8016930:	2200      	movs	r2, #0
 8016932:	2100      	movs	r1, #0
 8016934:	f7ec fb90 	bl	8003058 <xQueueGenericSend>
 8016938:	e028      	b.n	801698c <xProcessReceivedUDPPacket_IPv6+0x1e4>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket_IPv6->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 801693a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801693c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801693e:	b29b      	uxth	r3, r3
 8016940:	021b      	lsls	r3, r3, #8
 8016942:	b21a      	sxth	r2, r3
 8016944:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016946:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016948:	b29b      	uxth	r3, r3
 801694a:	0a1b      	lsrs	r3, r3, #8
 801694c:	b29b      	uxth	r3, r3
 801694e:	b21b      	sxth	r3, r3
 8016950:	4313      	orrs	r3, r2
 8016952:	b21b      	sxth	r3, r3
 8016954:	2b35      	cmp	r3, #53	@ 0x35
 8016956:	d105      	bne.n	8016964 <xProcessReceivedUDPPacket_IPv6+0x1bc>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016958:	68f8      	ldr	r0, [r7, #12]
 801695a:	f7f0 fc5c 	bl	8007216 <ulDNSHandlePacket>
 801695e:	4603      	mov	r3, r0
 8016960:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016962:	e013      	b.n	801698c <xProcessReceivedUDPPacket_IPv6+0x1e4>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8016964:	897b      	ldrh	r3, [r7, #10]
 8016966:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 801696a:	4293      	cmp	r3, r2
 801696c:	d006      	beq.n	801697c <xProcessReceivedUDPPacket_IPv6+0x1d4>
                    ( pxUDPPacket_IPv6->xUDPHeader.usSourcePort == FreeRTOS_htons( ipLLMNR_PORT ) ) )
 801696e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016970:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016972:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8016974:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8016978:	4293      	cmp	r3, r2
 801697a:	d105      	bne.n	8016988 <xProcessReceivedUDPPacket_IPv6+0x1e0>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 801697c:	68f8      	ldr	r0, [r7, #12]
 801697e:	f7f0 fc4a 	bl	8007216 <ulDNSHandlePacket>
 8016982:	4603      	mov	r3, r0
 8016984:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016986:	e001      	b.n	801698c <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8016988:	2300      	movs	r3, #0
 801698a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 801698c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 801698e:	4618      	mov	r0, r3
 8016990:	3764      	adds	r7, #100	@ 0x64
 8016992:	46bd      	mov	sp, r7
 8016994:	bd90      	pop	{r4, r7, pc}
 8016996:	bf00      	nop
 8016998:	080269c4 	.word	0x080269c4
 801699c:	080269f8 	.word	0x080269f8

080169a0 <bIsValidNetworkDescriptor>:
    }
    /*-----------------------------------------------------------*/

#else /* if ( ipconfigTCP_IP_SANITY != 0 ) */
    static UBaseType_t bIsValidNetworkDescriptor( const NetworkBufferDescriptor_t * pxDesc )
    {
 80169a0:	b480      	push	{r7}
 80169a2:	b083      	sub	sp, #12
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
        ( void ) pxDesc;
        return ( UBaseType_t ) pdTRUE;
 80169a8:	2301      	movs	r3, #1
    }
 80169aa:	4618      	mov	r0, r3
 80169ac:	370c      	adds	r7, #12
 80169ae:	46bd      	mov	sp, r7
 80169b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b4:	4770      	bx	lr

080169b6 <prvShowWarnings>:
    /*-----------------------------------------------------------*/

    static void prvShowWarnings( void )
    {
 80169b6:	b480      	push	{r7}
 80169b8:	af00      	add	r7, sp, #0
    }
 80169ba:	bf00      	nop
 80169bc:	46bd      	mov	sp, r7
 80169be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c2:	4770      	bx	lr

080169c4 <xNetworkBuffersInitialise>:
    /*-----------------------------------------------------------*/

#endif /* ipconfigTCP_IP_SANITY */

BaseType_t xNetworkBuffersInitialise( void )
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b082      	sub	sp, #8
 80169c8:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 80169ca:	4b2e      	ldr	r3, [pc, #184]	@ (8016a84 <xNetworkBuffersInitialise+0xc0>)
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d149      	bne.n	8016a66 <xNetworkBuffersInitialise+0xa2>
                ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS,
                &xNetworkBufferSemaphoreBuffer );
        }
        #else
        {
            xNetworkBufferSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 80169d2:	2140      	movs	r1, #64	@ 0x40
 80169d4:	2040      	movs	r0, #64	@ 0x40
 80169d6:	f7ec fb15 	bl	8003004 <xQueueCreateCountingSemaphore>
 80169da:	4603      	mov	r3, r0
 80169dc:	4a29      	ldr	r2, [pc, #164]	@ (8016a84 <xNetworkBuffersInitialise+0xc0>)
 80169de:	6013      	str	r3, [r2, #0]
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 80169e0:	4b28      	ldr	r3, [pc, #160]	@ (8016a84 <xNetworkBuffersInitialise+0xc0>)
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d103      	bne.n	80169f0 <xNetworkBuffersInitialise+0x2c>
 80169e8:	21c3      	movs	r1, #195	@ 0xc3
 80169ea:	4827      	ldr	r0, [pc, #156]	@ (8016a88 <xNetworkBuffersInitialise+0xc4>)
 80169ec:	f7ea fe3e 	bl	800166c <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 80169f0:	4b24      	ldr	r3, [pc, #144]	@ (8016a84 <xNetworkBuffersInitialise+0xc0>)
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d036      	beq.n	8016a66 <xNetworkBuffersInitialise+0xa2>
        {
            vListInitialise( &xFreeBuffersList );
 80169f8:	4824      	ldr	r0, [pc, #144]	@ (8016a8c <xNetworkBuffersInitialise+0xc8>)
 80169fa:	f7ec f929 	bl	8002c50 <vListInitialise>

            /* Initialise all the network buffers.  The buffer storage comes
             * from the network interface, and different hardware has different
             * requirements. */
            vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 80169fe:	4824      	ldr	r0, [pc, #144]	@ (8016a90 <xNetworkBuffersInitialise+0xcc>)
 8016a00:	f001 fa24 	bl	8017e4c <vNetworkInterfaceAllocateRAMToBuffers>

            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8016a04:	2300      	movs	r3, #0
 8016a06:	603b      	str	r3, [r7, #0]
 8016a08:	e027      	b.n	8016a5a <xNetworkBuffersInitialise+0x96>
            {
                /* Initialise and set the owner of the buffer list items. */
                vListInitialiseItem( &( xNetworkBuffers[ x ].xBufferListItem ) );
 8016a0a:	683a      	ldr	r2, [r7, #0]
 8016a0c:	4613      	mov	r3, r2
 8016a0e:	00db      	lsls	r3, r3, #3
 8016a10:	1a9b      	subs	r3, r3, r2
 8016a12:	00db      	lsls	r3, r3, #3
 8016a14:	4a1e      	ldr	r2, [pc, #120]	@ (8016a90 <xNetworkBuffersInitialise+0xcc>)
 8016a16:	4413      	add	r3, r2
 8016a18:	4618      	mov	r0, r3
 8016a1a:	f7ec f939 	bl	8002c90 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBuffers[ x ].xBufferListItem ), &xNetworkBuffers[ x ] );
 8016a1e:	683a      	ldr	r2, [r7, #0]
 8016a20:	4613      	mov	r3, r2
 8016a22:	00db      	lsls	r3, r3, #3
 8016a24:	1a9b      	subs	r3, r3, r2
 8016a26:	00db      	lsls	r3, r3, #3
 8016a28:	4a19      	ldr	r2, [pc, #100]	@ (8016a90 <xNetworkBuffersInitialise+0xcc>)
 8016a2a:	1899      	adds	r1, r3, r2
 8016a2c:	4818      	ldr	r0, [pc, #96]	@ (8016a90 <xNetworkBuffersInitialise+0xcc>)
 8016a2e:	683a      	ldr	r2, [r7, #0]
 8016a30:	4613      	mov	r3, r2
 8016a32:	00db      	lsls	r3, r3, #3
 8016a34:	1a9b      	subs	r3, r3, r2
 8016a36:	00db      	lsls	r3, r3, #3
 8016a38:	4403      	add	r3, r0
 8016a3a:	330c      	adds	r3, #12
 8016a3c:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 8016a3e:	683a      	ldr	r2, [r7, #0]
 8016a40:	4613      	mov	r3, r2
 8016a42:	00db      	lsls	r3, r3, #3
 8016a44:	1a9b      	subs	r3, r3, r2
 8016a46:	00db      	lsls	r3, r3, #3
 8016a48:	4a11      	ldr	r2, [pc, #68]	@ (8016a90 <xNetworkBuffersInitialise+0xcc>)
 8016a4a:	4413      	add	r3, r2
 8016a4c:	4619      	mov	r1, r3
 8016a4e:	480f      	ldr	r0, [pc, #60]	@ (8016a8c <xNetworkBuffersInitialise+0xc8>)
 8016a50:	f7ec f94f 	bl	8002cf2 <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8016a54:	683b      	ldr	r3, [r7, #0]
 8016a56:	3301      	adds	r3, #1
 8016a58:	603b      	str	r3, [r7, #0]
 8016a5a:	683b      	ldr	r3, [r7, #0]
 8016a5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8016a5e:	d9d4      	bls.n	8016a0a <xNetworkBuffersInitialise+0x46>
            }

            uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 8016a60:	4b0c      	ldr	r3, [pc, #48]	@ (8016a94 <xNetworkBuffersInitialise+0xd0>)
 8016a62:	2240      	movs	r2, #64	@ 0x40
 8016a64:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 8016a66:	4b07      	ldr	r3, [pc, #28]	@ (8016a84 <xNetworkBuffersInitialise+0xc0>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d102      	bne.n	8016a74 <xNetworkBuffersInitialise+0xb0>
    {
        xReturn = pdFAIL;
 8016a6e:	2300      	movs	r3, #0
 8016a70:	607b      	str	r3, [r7, #4]
 8016a72:	e001      	b.n	8016a78 <xNetworkBuffersInitialise+0xb4>
    }
    else
    {
        xReturn = pdPASS;
 8016a74:	2301      	movs	r3, #1
 8016a76:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 8016a78:	687b      	ldr	r3, [r7, #4]
}
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	3708      	adds	r7, #8
 8016a7e:	46bd      	mov	sp, r7
 8016a80:	bd80      	pop	{r7, pc}
 8016a82:	bf00      	nop
 8016a84:	200022a0 	.word	0x200022a0
 8016a88:	08026a38 	.word	0x08026a38
 8016a8c:	20001488 	.word	0x20001488
 8016a90:	200014a0 	.word	0x200014a0
 8016a94:	2000149c 	.word	0x2000149c

08016a98 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b086      	sub	sp, #24
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
 8016aa0:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	617b      	str	r3, [r7, #20]
    BaseType_t xInvalid = pdFALSE;
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	613b      	str	r3, [r7, #16]

    /* The current implementation only has a single size memory block, so
     * the requested size parameter is not used (yet). */
    ( void ) xRequestedSizeBytes;

    if( xNetworkBufferSemaphore != NULL )
 8016aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8016b54 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d04b      	beq.n	8016b4a <pxGetNetworkBufferWithDescriptor+0xb2>
    {
        /* If there is a semaphore available, there is a network buffer
         * available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8016ab2:	4b28      	ldr	r3, [pc, #160]	@ (8016b54 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	6839      	ldr	r1, [r7, #0]
 8016ab8:	4618      	mov	r0, r3
 8016aba:	f7ec fc85 	bl	80033c8 <xQueueSemaphoreTake>
 8016abe:	4603      	mov	r3, r0
 8016ac0:	2b01      	cmp	r3, #1
 8016ac2:	d13d      	bne.n	8016b40 <pxGetNetworkBufferWithDescriptor+0xa8>
        {
            /* Protect the structure as it is accessed from tasks and
             * interrupts. */
            ipconfigBUFFER_ALLOC_LOCK();
 8016ac4:	f7ef f814 	bl	8005af0 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8016ac8:	4b23      	ldr	r3, [pc, #140]	@ (8016b58 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8016aca:	68db      	ldr	r3, [r3, #12]
 8016acc:	68db      	ldr	r3, [r3, #12]
 8016ace:	617b      	str	r3, [r7, #20]

                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8016ad0:	6978      	ldr	r0, [r7, #20]
 8016ad2:	f7ff ff65 	bl	80169a0 <bIsValidNetworkDescriptor>
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d009      	beq.n	8016af0 <pxGetNetworkBufferWithDescriptor+0x58>
                    listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxReturn->xBufferListItem ) ) )
 8016adc:	697b      	ldr	r3, [r7, #20]
 8016ade:	691b      	ldr	r3, [r3, #16]
                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8016ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8016b58 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8016ae2:	4293      	cmp	r3, r2
 8016ae4:	d104      	bne.n	8016af0 <pxGetNetworkBufferWithDescriptor+0x58>
                {
                    ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 8016ae6:	697b      	ldr	r3, [r7, #20]
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f7ec f93b 	bl	8002d64 <uxListRemove>
 8016aee:	e001      	b.n	8016af4 <pxGetNetworkBufferWithDescriptor+0x5c>
                }
                else
                {
                    xInvalid = pdTRUE;
 8016af0:	2301      	movs	r3, #1
 8016af2:	613b      	str	r3, [r7, #16]
                }
            }
            ipconfigBUFFER_ALLOC_UNLOCK();
 8016af4:	f7ef f828 	bl	8005b48 <vPortExitCritical>

            if( xInvalid == pdTRUE )
 8016af8:	693b      	ldr	r3, [r7, #16]
 8016afa:	2b01      	cmp	r3, #1
 8016afc:	d10b      	bne.n	8016b16 <pxGetNetworkBufferWithDescriptor+0x7e>
                 * above says this can be called from an interrupt too) */

                /* _HT_ The function shall not be called from an ISR. Comment
                 * was indeed misleading. Hopefully clear now?
                 * So the printf()is OK here. */
                FreeRTOS_debug_printf( ( "pxGetNetworkBufferWithDescriptor: INVALID BUFFER: %p (valid %lu)\n",
 8016afe:	6978      	ldr	r0, [r7, #20]
 8016b00:	f7ff ff4e 	bl	80169a0 <bIsValidNetworkDescriptor>
 8016b04:	4603      	mov	r3, r0
 8016b06:	461a      	mov	r2, r3
 8016b08:	6979      	ldr	r1, [r7, #20]
 8016b0a:	4814      	ldr	r0, [pc, #80]	@ (8016b5c <pxGetNetworkBufferWithDescriptor+0xc4>)
 8016b0c:	f00a fed4 	bl	80218b8 <lUDPLoggingPrintf>
                                         pxReturn, bIsValidNetworkDescriptor( pxReturn ) ) );
                pxReturn = NULL;
 8016b10:	2300      	movs	r3, #0
 8016b12:	617b      	str	r3, [r7, #20]
 8016b14:	e019      	b.n	8016b4a <pxGetNetworkBufferWithDescriptor+0xb2>
            }
            else
            {
                /* Reading UBaseType_t, no critical section needed. */
                uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8016b16:	4b10      	ldr	r3, [pc, #64]	@ (8016b58 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	60fb      	str	r3, [r7, #12]

                /* For stats, latch the lowest number of network buffers since
                 * booting. */
                if( uxMinimumFreeNetworkBuffers > uxCount )
 8016b1c:	4b10      	ldr	r3, [pc, #64]	@ (8016b60 <pxGetNetworkBufferWithDescriptor+0xc8>)
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	68fa      	ldr	r2, [r7, #12]
 8016b22:	429a      	cmp	r2, r3
 8016b24:	d202      	bcs.n	8016b2c <pxGetNetworkBufferWithDescriptor+0x94>
                {
                    uxMinimumFreeNetworkBuffers = uxCount;
 8016b26:	4a0e      	ldr	r2, [pc, #56]	@ (8016b60 <pxGetNetworkBufferWithDescriptor+0xc8>)
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	6013      	str	r3, [r2, #0]
                }

                pxReturn->xDataLength = xRequestedSizeBytes;
 8016b2c:	697b      	ldr	r3, [r7, #20]
 8016b2e:	687a      	ldr	r2, [r7, #4]
 8016b30:	629a      	str	r2, [r3, #40]	@ 0x28
                pxReturn->pxInterface = NULL;
 8016b32:	697b      	ldr	r3, [r7, #20]
 8016b34:	2200      	movs	r2, #0
 8016b36:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReturn->pxEndPoint = NULL;
 8016b38:	697b      	ldr	r3, [r7, #20]
 8016b3a:	2200      	movs	r2, #0
 8016b3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8016b3e:	e004      	b.n	8016b4a <pxGetNetworkBufferWithDescriptor+0xb2>
            iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
        }
        else
        {
            /* lint wants to see at least a comment. */
            iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
 8016b40:	f240 113b 	movw	r1, #315	@ 0x13b
 8016b44:	4807      	ldr	r0, [pc, #28]	@ (8016b64 <pxGetNetworkBufferWithDescriptor+0xcc>)
 8016b46:	f7ea fd91 	bl	800166c <vAssertCalled>
        }
    }

    return pxReturn;
 8016b4a:	697b      	ldr	r3, [r7, #20]
}
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	3718      	adds	r7, #24
 8016b50:	46bd      	mov	sp, r7
 8016b52:	bd80      	pop	{r7, pc}
 8016b54:	200022a0 	.word	0x200022a0
 8016b58:	20001488 	.word	0x20001488
 8016b5c:	08026a84 	.word	0x08026a84
 8016b60:	2000149c 	.word	0x2000149c
 8016b64:	08026a38 	.word	0x08026a38

08016b68 <vReleaseNetworkBufferAndDescriptor>:
    return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b084      	sub	sp, #16
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
    BaseType_t xListItemAlreadyInFreeList;

    if( bIsValidNetworkDescriptor( pxNetworkBuffer ) == pdFALSE_UNSIGNED )
 8016b70:	6878      	ldr	r0, [r7, #4]
 8016b72:	f7ff ff15 	bl	80169a0 <bIsValidNetworkDescriptor>
 8016b76:	4603      	mov	r3, r0
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d104      	bne.n	8016b86 <vReleaseNetworkBufferAndDescriptor+0x1e>
    {
        FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: Invalid buffer %p\n", pxNetworkBuffer ) );
 8016b7c:	6879      	ldr	r1, [r7, #4]
 8016b7e:	4819      	ldr	r0, [pc, #100]	@ (8016be4 <vReleaseNetworkBufferAndDescriptor+0x7c>)
 8016b80:	f00a fe9a 	bl	80218b8 <lUDPLoggingPrintf>
            prvShowWarnings();
        }

        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 8016b84:	e029      	b.n	8016bda <vReleaseNetworkBufferAndDescriptor+0x72>
        ipconfigBUFFER_ALLOC_LOCK();
 8016b86:	f7ee ffb3 	bl	8005af0 <vPortEnterCritical>
                xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	691b      	ldr	r3, [r3, #16]
 8016b8e:	4a16      	ldr	r2, [pc, #88]	@ (8016be8 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8016b90:	4293      	cmp	r3, r2
 8016b92:	d101      	bne.n	8016b98 <vReleaseNetworkBufferAndDescriptor+0x30>
 8016b94:	2301      	movs	r3, #1
 8016b96:	e000      	b.n	8016b9a <vReleaseNetworkBufferAndDescriptor+0x32>
 8016b98:	2300      	movs	r3, #0
 8016b9a:	60fb      	str	r3, [r7, #12]
                if( xListItemAlreadyInFreeList == pdFALSE )
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d104      	bne.n	8016bac <vReleaseNetworkBufferAndDescriptor+0x44>
                    vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	4619      	mov	r1, r3
 8016ba6:	4810      	ldr	r0, [pc, #64]	@ (8016be8 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8016ba8:	f7ec f87f 	bl	8002caa <vListInsertEnd>
        ipconfigBUFFER_ALLOC_UNLOCK();
 8016bac:	f7ee ffcc 	bl	8005b48 <vPortExitCritical>
        if( xListItemAlreadyInFreeList )
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d008      	beq.n	8016bc8 <vReleaseNetworkBufferAndDescriptor+0x60>
            FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 8016bb6:	f000 f829 	bl	8016c0c <uxGetNumberOfFreeNetworkBuffers>
 8016bba:	4603      	mov	r3, r0
 8016bbc:	461a      	mov	r2, r3
 8016bbe:	6879      	ldr	r1, [r7, #4]
 8016bc0:	480a      	ldr	r0, [pc, #40]	@ (8016bec <vReleaseNetworkBufferAndDescriptor+0x84>)
 8016bc2:	f00a fe79 	bl	80218b8 <lUDPLoggingPrintf>
}
 8016bc6:	e008      	b.n	8016bda <vReleaseNetworkBufferAndDescriptor+0x72>
            ( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 8016bc8:	4b09      	ldr	r3, [pc, #36]	@ (8016bf0 <vReleaseNetworkBufferAndDescriptor+0x88>)
 8016bca:	6818      	ldr	r0, [r3, #0]
 8016bcc:	2300      	movs	r3, #0
 8016bce:	2200      	movs	r2, #0
 8016bd0:	2100      	movs	r1, #0
 8016bd2:	f7ec fa41 	bl	8003058 <xQueueGenericSend>
            prvShowWarnings();
 8016bd6:	f7ff feee 	bl	80169b6 <prvShowWarnings>
}
 8016bda:	bf00      	nop
 8016bdc:	3710      	adds	r7, #16
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bd80      	pop	{r7, pc}
 8016be2:	bf00      	nop
 8016be4:	08026ac8 	.word	0x08026ac8
 8016be8:	20001488 	.word	0x20001488
 8016bec:	08026b00 	.word	0x08026b00
 8016bf0:	200022a0 	.word	0x200022a0

08016bf4 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8016bf4:	b480      	push	{r7}
 8016bf6:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 8016bf8:	4b03      	ldr	r3, [pc, #12]	@ (8016c08 <uxGetMinimumFreeNetworkBuffers+0x14>)
 8016bfa:	681b      	ldr	r3, [r3, #0]
}
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	46bd      	mov	sp, r7
 8016c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c04:	4770      	bx	lr
 8016c06:	bf00      	nop
 8016c08:	2000149c 	.word	0x2000149c

08016c0c <uxGetNumberOfFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 8016c0c:	b480      	push	{r7}
 8016c0e:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8016c10:	4b03      	ldr	r3, [pc, #12]	@ (8016c20 <uxGetNumberOfFreeNetworkBuffers+0x14>)
 8016c12:	681b      	ldr	r3, [r3, #0]
}
 8016c14:	4618      	mov	r0, r3
 8016c16:	46bd      	mov	sp, r7
 8016c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c1c:	4770      	bx	lr
 8016c1e:	bf00      	nop
 8016c20:	20001488 	.word	0x20001488

08016c24 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8016c24:	b480      	push	{r7}
 8016c26:	b085      	sub	sp, #20
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	4a11      	ldr	r2, [pc, #68]	@ (8016c78 <xHas_1F_PHYSPCS+0x54>)
 8016c34:	4293      	cmp	r3, r2
 8016c36:	d016      	beq.n	8016c66 <xHas_1F_PHYSPCS+0x42>
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8016c78 <xHas_1F_PHYSPCS+0x54>)
 8016c3c:	4293      	cmp	r3, r2
 8016c3e:	d80f      	bhi.n	8016c60 <xHas_1F_PHYSPCS+0x3c>
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	4a0e      	ldr	r2, [pc, #56]	@ (8016c7c <xHas_1F_PHYSPCS+0x58>)
 8016c44:	4293      	cmp	r3, r2
 8016c46:	d00e      	beq.n	8016c66 <xHas_1F_PHYSPCS+0x42>
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	4a0c      	ldr	r2, [pc, #48]	@ (8016c7c <xHas_1F_PHYSPCS+0x58>)
 8016c4c:	4293      	cmp	r3, r2
 8016c4e:	d807      	bhi.n	8016c60 <xHas_1F_PHYSPCS+0x3c>
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	4a0b      	ldr	r2, [pc, #44]	@ (8016c80 <xHas_1F_PHYSPCS+0x5c>)
 8016c54:	4293      	cmp	r3, r2
 8016c56:	d006      	beq.n	8016c66 <xHas_1F_PHYSPCS+0x42>
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8016c84 <xHas_1F_PHYSPCS+0x60>)
 8016c5c:	4293      	cmp	r3, r2
 8016c5e:	d002      	beq.n	8016c66 <xHas_1F_PHYSPCS+0x42>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 8016c60:	2301      	movs	r3, #1
 8016c62:	60fb      	str	r3, [r7, #12]
            break;
 8016c64:	e000      	b.n	8016c68 <xHas_1F_PHYSPCS+0x44>
        case PHY_ID_DP83848I:
        case PHY_ID_DP83TC811S:
        case PHY_ID_TM4C129X:
        case PHY_ID_MV88E6071:
            /* Has no 0x1F register "PHY Special Control Status". */
            break;
 8016c66:	bf00      	nop
    }

    return xResult;
 8016c68:	68fb      	ldr	r3, [r7, #12]
}
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	3714      	adds	r7, #20
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c74:	4770      	bx	lr
 8016c76:	bf00      	nop
 8016c78:	ff000710 	.word	0xff000710
 8016c7c:	2000a250 	.word	0x2000a250
 8016c80:	20005c90 	.word	0x20005c90
 8016c84:	2000a221 	.word	0x2000a221

08016c88 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 8016c88:	b480      	push	{r7}
 8016c8a:	b085      	sub	sp, #20
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8016c90:	2300      	movs	r3, #0
 8016c92:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	4a0d      	ldr	r2, [pc, #52]	@ (8016ccc <xHas_19_PHYCR+0x44>)
 8016c98:	4293      	cmp	r3, r2
 8016c9a:	d00b      	beq.n	8016cb4 <xHas_19_PHYCR+0x2c>
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8016ccc <xHas_19_PHYCR+0x44>)
 8016ca0:	4293      	cmp	r3, r2
 8016ca2:	d80a      	bhi.n	8016cba <xHas_19_PHYCR+0x32>
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8016cd0 <xHas_19_PHYCR+0x48>)
 8016ca8:	4293      	cmp	r3, r2
 8016caa:	d003      	beq.n	8016cb4 <xHas_19_PHYCR+0x2c>
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	4a09      	ldr	r2, [pc, #36]	@ (8016cd4 <xHas_19_PHYCR+0x4c>)
 8016cb0:	4293      	cmp	r3, r2
 8016cb2:	d102      	bne.n	8016cba <xHas_19_PHYCR+0x32>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
        case PHY_ID_TM4C129X:
            xResult = pdTRUE;
 8016cb4:	2301      	movs	r3, #1
 8016cb6:	60fb      	str	r3, [r7, #12]
            break;
 8016cb8:	e000      	b.n	8016cbc <xHas_19_PHYCR+0x34>

        case PHY_ID_MV88E6071: /* Marvell 88E6071 */
        default:
            /* Most PHY's do not have a 19_PHYCR */
            break;
 8016cba:	bf00      	nop
    }

    return xResult;
 8016cbc:	68fb      	ldr	r3, [r7, #12]
}
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	3714      	adds	r7, #20
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc8:	4770      	bx	lr
 8016cca:	bf00      	nop
 8016ccc:	2000a221 	.word	0x2000a221
 8016cd0:	0007c130 	.word	0x0007c130
 8016cd4:	20005c90 	.word	0x20005c90

08016cd8 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b084      	sub	sp, #16
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	60f8      	str	r0, [r7, #12]
 8016ce0:	60b9      	str	r1, [r7, #8]
 8016ce2:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8016ce4:	2240      	movs	r2, #64	@ 0x40
 8016ce6:	2100      	movs	r1, #0
 8016ce8:	68f8      	ldr	r0, [r7, #12]
 8016cea:	f00b f90e 	bl	8021f0a <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	68ba      	ldr	r2, [r7, #8]
 8016cf2:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	687a      	ldr	r2, [r7, #4]
 8016cf8:	605a      	str	r2, [r3, #4]
}
 8016cfa:	bf00      	nop
 8016cfc:	3710      	adds	r7, #16
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	bd80      	pop	{r7, pc}
	...

08016d04 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b086      	sub	sp, #24
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	2200      	movs	r2, #0
 8016d10:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8016d12:	2300      	movs	r3, #0
 8016d14:	617b      	str	r3, [r7, #20]
 8016d16:	e03a      	b.n	8016d8e <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0U;
 8016d18:	2300      	movs	r3, #0
 8016d1a:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	f107 020c 	add.w	r2, r7, #12
 8016d24:	2103      	movs	r1, #3
 8016d26:	6978      	ldr	r0, [r7, #20]
 8016d28:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016d30:	4293      	cmp	r3, r2
 8016d32:	d029      	beq.n	8016d88 <xPhyDiscover+0x84>
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d026      	beq.n	8016d88 <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	f107 0208 	add.w	r2, r7, #8
 8016d42:	2102      	movs	r1, #2
 8016d44:	6978      	ldr	r0, [r7, #20]
 8016d46:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0U );
 8016d48:	68bb      	ldr	r3, [r7, #8]
 8016d4a:	041a      	lsls	r2, r3, #16
 8016d4c:	68f9      	ldr	r1, [r7, #12]
 8016d4e:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8016d52:	400b      	ands	r3, r1
 8016d54:	4313      	orrs	r3, r2
 8016d56:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = ( uint8_t ) xPhyAddress;
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d5c:	697a      	ldr	r2, [r7, #20]
 8016d5e:	b2d1      	uxtb	r1, r2
 8016d60:	687a      	ldr	r2, [r7, #4]
 8016d62:	4413      	add	r3, r2
 8016d64:	460a      	mov	r2, r1
 8016d66:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	3202      	adds	r2, #2
 8016d70:	6939      	ldr	r1, [r7, #16]
 8016d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d7a:	1c5a      	adds	r2, r3, #1
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d84:	2b04      	cmp	r3, #4
 8016d86:	d005      	beq.n	8016d94 <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8016d88:	697b      	ldr	r3, [r7, #20]
 8016d8a:	3301      	adds	r3, #1
 8016d8c:	617b      	str	r3, [r7, #20]
 8016d8e:	697b      	ldr	r3, [r7, #20]
 8016d90:	2b1f      	cmp	r3, #31
 8016d92:	ddc1      	ble.n	8016d18 <xPhyDiscover+0x14>
                break;
            }
        }
    }

    if( pxPhyObject->xPortCount > 0 )
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	dd05      	ble.n	8016da8 <xPhyDiscover+0xa4>
    {
        FreeRTOS_printf( ( "PHY ID %X\n", ( unsigned int ) pxPhyObject->ulPhyIDs[ 0 ] ) );
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	689b      	ldr	r3, [r3, #8]
 8016da0:	4619      	mov	r1, r3
 8016da2:	4804      	ldr	r0, [pc, #16]	@ (8016db4 <xPhyDiscover+0xb0>)
 8016da4:	f00a fd88 	bl	80218b8 <lUDPLoggingPrintf>
    }

    return pxPhyObject->xPortCount;
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8016dac:	4618      	mov	r0, r3
 8016dae:	3718      	adds	r7, #24
 8016db0:	46bd      	mov	sp, r7
 8016db2:	bd80      	pop	{r7, pc}
 8016db4:	08026b44 	.word	0x08026b44

08016db8 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b08c      	sub	sp, #48	@ 0x30
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	6078      	str	r0, [r7, #4]
 8016dc0:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0U;
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016dca:	e017      	b.n	8016dfc <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016dcc:	687a      	ldr	r2, [r7, #4]
 8016dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dd0:	4413      	add	r3, r2
 8016dd2:	3318      	adds	r3, #24
 8016dd4:	781b      	ldrb	r3, [r3, #0]
 8016dd6:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	f107 0218 	add.w	r2, r7, #24
 8016de0:	2100      	movs	r1, #0
 8016de2:	69f8      	ldr	r0, [r7, #28]
 8016de4:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	685b      	ldr	r3, [r3, #4]
 8016dea:	69ba      	ldr	r2, [r7, #24]
 8016dec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8016df0:	2100      	movs	r1, #0
 8016df2:	69f8      	ldr	r0, [r7, #28]
 8016df4:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016df8:	3301      	adds	r3, #1
 8016dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016e02:	429a      	cmp	r2, r3
 8016e04:	dbe2      	blt.n	8016dcc <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8016e06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016e0a:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 8016e0c:	f107 030c 	add.w	r3, r7, #12
 8016e10:	4618      	mov	r0, r3
 8016e12:	f7ed fcad 	bl	8004770 <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016e16:	2300      	movs	r3, #0
 8016e18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016e1a:	e01f      	b.n	8016e5c <xPhyReset+0xa4>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016e1c:	687a      	ldr	r2, [r7, #4]
 8016e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e20:	4413      	add	r3, r2
 8016e22:	3318      	adds	r3, #24
 8016e24:	781b      	ldrb	r3, [r3, #0]
 8016e26:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	f107 0218 	add.w	r2, r7, #24
 8016e30:	2100      	movs	r1, #0
 8016e32:	6a38      	ldr	r0, [r7, #32]
 8016e34:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8016e36:	69bb      	ldr	r3, [r7, #24]
 8016e38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d10a      	bne.n	8016e56 <xPhyReset+0x9e>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
 8016e40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016e42:	482d      	ldr	r0, [pc, #180]	@ (8016ef8 <xPhyReset+0x140>)
 8016e44:	f00a fd38 	bl	80218b8 <lUDPLoggingPrintf>
                ulDoneMask |= ( 1U << xPhyIndex );
 8016e48:	2201      	movs	r2, #1
 8016e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8016e50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016e52:	4313      	orrs	r3, r2
 8016e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e58:	3301      	adds	r3, #1
 8016e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016e62:	429a      	cmp	r2, r3
 8016e64:	dbda      	blt.n	8016e1c <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 8016e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016e68:	683b      	ldr	r3, [r7, #0]
 8016e6a:	429a      	cmp	r2, r3
 8016e6c:	d013      	beq.n	8016e96 <xPhyReset+0xde>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8016e6e:	f107 0214 	add.w	r2, r7, #20
 8016e72:	f107 030c 	add.w	r3, r7, #12
 8016e76:	4611      	mov	r1, r2
 8016e78:	4618      	mov	r0, r3
 8016e7a:	f7ed fcb1 	bl	80047e0 <xTaskCheckForTimeOut>
 8016e7e:	4603      	mov	r3, r0
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d004      	beq.n	8016e8e <xPhyReset+0xd6>
        {
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8016e84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016e86:	481d      	ldr	r0, [pc, #116]	@ (8016efc <xPhyReset+0x144>)
 8016e88:	f00a fd16 	bl	80218b8 <lUDPLoggingPrintf>
            break;
 8016e8c:	e004      	b.n	8016e98 <xPhyReset+0xe0>
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8016e8e:	2032      	movs	r0, #50	@ 0x32
 8016e90:	f7ec fefa 	bl	8003c88 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016e94:	e7bf      	b.n	8016e16 <xPhyReset+0x5e>
            break;
 8016e96:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016e98:	2300      	movs	r3, #0
 8016e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016e9c:	e01e      	b.n	8016edc <xPhyReset+0x124>
    {
        if( ( ulDoneMask & ( 1U << xPhyIndex ) ) == 0U )
 8016e9e:	2201      	movs	r2, #1
 8016ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ea2:	409a      	lsls	r2, r3
 8016ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ea6:	4013      	ands	r3, r2
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d114      	bne.n	8016ed6 <xPhyReset+0x11e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016eac:	687a      	ldr	r2, [r7, #4]
 8016eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016eb0:	4413      	add	r3, r2
 8016eb2:	3318      	adds	r3, #24
 8016eb4:	781b      	ldrb	r3, [r3, #0]
 8016eb6:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	f107 0218 	add.w	r2, r7, #24
 8016ec0:	2100      	movs	r1, #0
 8016ec2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016ec4:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	685b      	ldr	r3, [r3, #4]
 8016eca:	69ba      	ldr	r2, [r7, #24]
 8016ecc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8016ed0:	2100      	movs	r1, #0
 8016ed2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016ed4:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ed8:	3301      	adds	r3, #1
 8016eda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ee0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016ee2:	429a      	cmp	r2, r3
 8016ee4:	dbdb      	blt.n	8016e9e <xPhyReset+0xe6>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8016ee6:	2032      	movs	r0, #50	@ 0x32
 8016ee8:	f7ec fece 	bl	8003c88 <vTaskDelay>

    return ulDoneMask;
 8016eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8016eee:	4618      	mov	r0, r3
 8016ef0:	3730      	adds	r7, #48	@ 0x30
 8016ef2:	46bd      	mov	sp, r7
 8016ef4:	bd80      	pop	{r7, pc}
 8016ef6:	bf00      	nop
 8016ef8:	08026b50 	.word	0x08026b50
 8016efc:	08026b74 	.word	0x08026b74

08016f00 <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b088      	sub	sp, #32
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	6078      	str	r0, [r7, #4]
 8016f08:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	dc05      	bgt.n	8016f1e <xPhyConfigure+0x1e>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8016f12:	487c      	ldr	r0, [pc, #496]	@ (8017104 <xPhyConfigure+0x204>)
 8016f14:	f00a fcd0 	bl	80218b8 <lUDPLoggingPrintf>
        return -1;
 8016f18:	f04f 33ff 	mov.w	r3, #4294967295
 8016f1c:	e0ed      	b.n	80170fa <xPhyConfigure+0x1fa>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8016f1e:	683b      	ldr	r3, [r7, #0]
 8016f20:	781b      	ldrb	r3, [r3, #0]
 8016f22:	2b03      	cmp	r3, #3
 8016f24:	d107      	bne.n	8016f36 <xPhyConfigure+0x36>
 8016f26:	683b      	ldr	r3, [r7, #0]
 8016f28:	789b      	ldrb	r3, [r3, #2]
 8016f2a:	2b03      	cmp	r3, #3
 8016f2c:	d103      	bne.n	8016f36 <xPhyConfigure+0x36>
    {
        ulAdvertise = phyADVERTISE_ALL;
 8016f2e:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8016f32:	61fb      	str	r3, [r7, #28]
 8016f34:	e044      	b.n	8016fc0 <xPhyConfigure+0xc0>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8016f36:	2301      	movs	r3, #1
 8016f38:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 8016f3a:	683b      	ldr	r3, [r7, #0]
 8016f3c:	781b      	ldrb	r3, [r3, #0]
 8016f3e:	2b03      	cmp	r3, #3
 8016f40:	d10d      	bne.n	8016f5e <xPhyConfigure+0x5e>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8016f42:	683b      	ldr	r3, [r7, #0]
 8016f44:	789b      	ldrb	r3, [r3, #2]
 8016f46:	2b02      	cmp	r3, #2
 8016f48:	d104      	bne.n	8016f54 <xPhyConfigure+0x54>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 8016f4a:	69fb      	ldr	r3, [r7, #28]
 8016f4c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8016f50:	61fb      	str	r3, [r7, #28]
 8016f52:	e035      	b.n	8016fc0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8016f54:	69fb      	ldr	r3, [r7, #28]
 8016f56:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8016f5a:	61fb      	str	r3, [r7, #28]
 8016f5c:	e030      	b.n	8016fc0 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 8016f5e:	683b      	ldr	r3, [r7, #0]
 8016f60:	789b      	ldrb	r3, [r3, #2]
 8016f62:	2b03      	cmp	r3, #3
 8016f64:	d10d      	bne.n	8016f82 <xPhyConfigure+0x82>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8016f66:	683b      	ldr	r3, [r7, #0]
 8016f68:	781b      	ldrb	r3, [r3, #0]
 8016f6a:	2b01      	cmp	r3, #1
 8016f6c:	d104      	bne.n	8016f78 <xPhyConfigure+0x78>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 8016f6e:	69fb      	ldr	r3, [r7, #28]
 8016f70:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8016f74:	61fb      	str	r3, [r7, #28]
 8016f76:	e023      	b.n	8016fc0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8016f78:	69fb      	ldr	r3, [r7, #28]
 8016f7a:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8016f7e:	61fb      	str	r3, [r7, #28]
 8016f80:	e01e      	b.n	8016fc0 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 8016f82:	683b      	ldr	r3, [r7, #0]
 8016f84:	781b      	ldrb	r3, [r3, #0]
 8016f86:	2b02      	cmp	r3, #2
 8016f88:	d10d      	bne.n	8016fa6 <xPhyConfigure+0xa6>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8016f8a:	683b      	ldr	r3, [r7, #0]
 8016f8c:	789b      	ldrb	r3, [r3, #2]
 8016f8e:	2b02      	cmp	r3, #2
 8016f90:	d104      	bne.n	8016f9c <xPhyConfigure+0x9c>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 8016f92:	69fb      	ldr	r3, [r7, #28]
 8016f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016f98:	61fb      	str	r3, [r7, #28]
 8016f9a:	e011      	b.n	8016fc0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 8016f9c:	69fb      	ldr	r3, [r7, #28]
 8016f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016fa2:	61fb      	str	r3, [r7, #28]
 8016fa4:	e00c      	b.n	8016fc0 <xPhyConfigure+0xc0>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8016fa6:	683b      	ldr	r3, [r7, #0]
 8016fa8:	789b      	ldrb	r3, [r3, #2]
 8016faa:	2b02      	cmp	r3, #2
 8016fac:	d104      	bne.n	8016fb8 <xPhyConfigure+0xb8>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 8016fae:	69fb      	ldr	r3, [r7, #28]
 8016fb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016fb4:	61fb      	str	r3, [r7, #28]
 8016fb6:	e003      	b.n	8016fc0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 8016fb8:	69fb      	ldr	r3, [r7, #28]
 8016fba:	f043 0320 	orr.w	r3, r3, #32
 8016fbe:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016fc4:	2201      	movs	r2, #1
 8016fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8016fca:	3b01      	subs	r3, #1
 8016fcc:	4619      	mov	r1, r3
 8016fce:	6878      	ldr	r0, [r7, #4]
 8016fd0:	f7ff fef2 	bl	8016db8 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	61bb      	str	r3, [r7, #24]
 8016fd8:	e080      	b.n	80170dc <xPhyConfigure+0x1dc>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016fda:	687a      	ldr	r2, [r7, #4]
 8016fdc:	69bb      	ldr	r3, [r7, #24]
 8016fde:	4413      	add	r3, r2
 8016fe0:	3318      	adds	r3, #24
 8016fe2:	781b      	ldrb	r3, [r3, #0]
 8016fe4:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	69ba      	ldr	r2, [r7, #24]
 8016fea:	3202      	adds	r2, #2
 8016fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ff0:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	685b      	ldr	r3, [r3, #4]
 8016ff6:	69fa      	ldr	r2, [r7, #28]
 8016ff8:	2104      	movs	r1, #4
 8016ffa:	6978      	ldr	r0, [r7, #20]
 8016ffc:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	f107 020c 	add.w	r2, r7, #12
 8017006:	2100      	movs	r1, #0
 8017008:	6978      	ldr	r0, [r7, #20]
 801700a:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 8017012:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801701a:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 801701c:	683b      	ldr	r3, [r7, #0]
 801701e:	781b      	ldrb	r3, [r3, #0]
 8017020:	2b02      	cmp	r3, #2
 8017022:	d003      	beq.n	801702c <xPhyConfigure+0x12c>
 8017024:	683b      	ldr	r3, [r7, #0]
 8017026:	781b      	ldrb	r3, [r3, #0]
 8017028:	2b03      	cmp	r3, #3
 801702a:	d104      	bne.n	8017036 <xPhyConfigure+0x136>
        {
            ulConfig |= phyBMCR_SPEED_100;
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017032:	60fb      	str	r3, [r7, #12]
 8017034:	e007      	b.n	8017046 <xPhyConfigure+0x146>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8017036:	683b      	ldr	r3, [r7, #0]
 8017038:	781b      	ldrb	r3, [r3, #0]
 801703a:	2b01      	cmp	r3, #1
 801703c:	d103      	bne.n	8017046 <xPhyConfigure+0x146>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017044:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8017046:	683b      	ldr	r3, [r7, #0]
 8017048:	789b      	ldrb	r3, [r3, #2]
 801704a:	2b02      	cmp	r3, #2
 801704c:	d003      	beq.n	8017056 <xPhyConfigure+0x156>
 801704e:	683b      	ldr	r3, [r7, #0]
 8017050:	789b      	ldrb	r3, [r3, #2]
 8017052:	2b03      	cmp	r3, #3
 8017054:	d104      	bne.n	8017060 <xPhyConfigure+0x160>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801705c:	60fb      	str	r3, [r7, #12]
 801705e:	e007      	b.n	8017070 <xPhyConfigure+0x170>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 8017060:	683b      	ldr	r3, [r7, #0]
 8017062:	789b      	ldrb	r3, [r3, #2]
 8017064:	2b01      	cmp	r3, #1
 8017066:	d103      	bne.n	8017070 <xPhyConfigure+0x170>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801706e:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 8017070:	6938      	ldr	r0, [r7, #16]
 8017072:	f7ff fe09 	bl	8016c88 <xHas_19_PHYCR>
 8017076:	4603      	mov	r3, r0
 8017078:	2b00      	cmp	r3, #0
 801707a:	d026      	beq.n	80170ca <xPhyConfigure+0x1ca>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	f107 0208 	add.w	r2, r7, #8
 8017084:	2119      	movs	r1, #25
 8017086:	6978      	ldr	r0, [r7, #20]
 8017088:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 801708a:	68bb      	ldr	r3, [r7, #8]
 801708c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8017090:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8017092:	683b      	ldr	r3, [r7, #0]
 8017094:	785b      	ldrb	r3, [r3, #1]
 8017096:	2b03      	cmp	r3, #3
 8017098:	d104      	bne.n	80170a4 <xPhyConfigure+0x1a4>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 801709a:	68bb      	ldr	r3, [r7, #8]
 801709c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80170a0:	60bb      	str	r3, [r7, #8]
 80170a2:	e00c      	b.n	80170be <xPhyConfigure+0x1be>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 80170a4:	683b      	ldr	r3, [r7, #0]
 80170a6:	785b      	ldrb	r3, [r3, #1]
 80170a8:	2b02      	cmp	r3, #2
 80170aa:	d104      	bne.n	80170b6 <xPhyConfigure+0x1b6>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 80170ac:	68bb      	ldr	r3, [r7, #8]
 80170ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80170b2:	60bb      	str	r3, [r7, #8]
 80170b4:	e003      	b.n	80170be <xPhyConfigure+0x1be>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 80170b6:	68bb      	ldr	r3, [r7, #8]
 80170b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80170bc:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	685b      	ldr	r3, [r3, #4]
 80170c2:	68ba      	ldr	r2, [r7, #8]
 80170c4:	2119      	movs	r1, #25
 80170c6:	6978      	ldr	r0, [r7, #20]
 80170c8:	4798      	blx	r3
        }

        FreeRTOS_printf( ( "+TCP: advertise: %04X config %04X\n", ( unsigned int ) ulAdvertise, ( unsigned int ) ulConfig ) );
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	461a      	mov	r2, r3
 80170ce:	69f9      	ldr	r1, [r7, #28]
 80170d0:	480d      	ldr	r0, [pc, #52]	@ (8017108 <xPhyConfigure+0x208>)
 80170d2:	f00a fbf1 	bl	80218b8 <lUDPLoggingPrintf>
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80170d6:	69bb      	ldr	r3, [r7, #24]
 80170d8:	3301      	adds	r3, #1
 80170da:	61bb      	str	r3, [r7, #24]
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170e0:	69ba      	ldr	r2, [r7, #24]
 80170e2:	429a      	cmp	r2, r3
 80170e4:	f6ff af79 	blt.w	8016fda <xPhyConfigure+0xda>
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	69fa      	ldr	r2, [r7, #28]
 80170f6:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 80170f8:	2300      	movs	r3, #0
}
 80170fa:	4618      	mov	r0, r3
 80170fc:	3720      	adds	r7, #32
 80170fe:	46bd      	mov	sp, r7
 8017100:	bd80      	pop	{r7, pc}
 8017102:	bf00      	nop
 8017104:	08026ba8 	.word	0x08026ba8
 8017108:	08026bcc 	.word	0x08026bcc

0801710c <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 801710c:	b590      	push	{r4, r7, lr}
 801710e:	b095      	sub	sp, #84	@ 0x54
 8017110:	af02      	add	r7, sp, #8
 8017112:	6078      	str	r0, [r7, #4]
 8017114:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 8017116:	683b      	ldr	r3, [r7, #0]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d101      	bne.n	8017120 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 801711c:	2300      	movs	r3, #0
 801711e:	e18d      	b.n	801743c <xPhyStartAutoNegotiation+0x330>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8017120:	2300      	movs	r3, #0
 8017122:	647b      	str	r3, [r7, #68]	@ 0x44
 8017124:	e020      	b.n	8017168 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8017126:	683a      	ldr	r2, [r7, #0]
 8017128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801712a:	fa22 f303 	lsr.w	r3, r2, r3
 801712e:	f003 0301 	and.w	r3, r3, #1
 8017132:	2b00      	cmp	r3, #0
 8017134:	d015      	beq.n	8017162 <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017136:	687a      	ldr	r2, [r7, #4]
 8017138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801713a:	4413      	add	r3, r2
 801713c:	3318      	adds	r3, #24
 801713e:	781b      	ldrb	r3, [r3, #0]
 8017140:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	685b      	ldr	r3, [r3, #4]
 8017146:	687a      	ldr	r2, [r7, #4]
 8017148:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801714a:	2104      	movs	r1, #4
 801714c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801714e:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	685b      	ldr	r3, [r3, #4]
 8017154:	687a      	ldr	r2, [r7, #4]
 8017156:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8017158:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801715c:	2100      	movs	r1, #0
 801715e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017160:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8017162:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017164:	3301      	adds	r3, #1
 8017166:	647b      	str	r3, [r7, #68]	@ 0x44
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801716c:	461a      	mov	r2, r3
 801716e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017170:	4293      	cmp	r3, r2
 8017172:	d3d8      	bcc.n	8017126 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8017174:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8017178:	623b      	str	r3, [r7, #32]
    vTaskSetTimeOutState( &xTimer );
 801717a:	f107 0318 	add.w	r3, r7, #24
 801717e:	4618      	mov	r0, r3
 8017180:	f7ed faf6 	bl	8004770 <vTaskSetTimeOutState>
    ulDoneMask = 0;
 8017184:	2300      	movs	r3, #0
 8017186:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 8017188:	2301      	movs	r3, #1
 801718a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801718c:	2300      	movs	r3, #0
 801718e:	647b      	str	r3, [r7, #68]	@ 0x44
 8017190:	e025      	b.n	80171de <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 8017192:	683a      	ldr	r2, [r7, #0]
 8017194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017196:	4013      	ands	r3, r2
 8017198:	2b00      	cmp	r3, #0
 801719a:	d01a      	beq.n	80171d2 <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 801719c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801719e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171a0:	4013      	ands	r3, r2
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d115      	bne.n	80171d2 <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80171a6:	687a      	ldr	r2, [r7, #4]
 80171a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80171aa:	4413      	add	r3, r2
 80171ac:	3318      	adds	r3, #24
 80171ae:	781b      	ldrb	r3, [r3, #0]
 80171b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80171ba:	2101      	movs	r1, #1
 80171bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80171be:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 80171c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171c2:	f003 0320 	and.w	r3, r3, #32
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d003      	beq.n	80171d2 <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 80171ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80171cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171ce:	4313      	orrs	r3, r2
 80171d0:	643b      	str	r3, [r7, #64]	@ 0x40
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80171d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80171d4:	3301      	adds	r3, #1
 80171d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80171d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171da:	005b      	lsls	r3, r3, #1
 80171dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80171e2:	461a      	mov	r2, r3
 80171e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80171e6:	4293      	cmp	r3, r2
 80171e8:	d3d3      	bcc.n	8017192 <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 80171ea:	683a      	ldr	r2, [r7, #0]
 80171ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d013      	beq.n	801721a <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 80171f2:	f107 0220 	add.w	r2, r7, #32
 80171f6:	f107 0318 	add.w	r3, r7, #24
 80171fa:	4611      	mov	r1, r2
 80171fc:	4618      	mov	r0, r3
 80171fe:	f7ed faef 	bl	80047e0 <xTaskCheckForTimeOut>
 8017202:	4603      	mov	r3, r0
 8017204:	2b00      	cmp	r3, #0
 8017206:	d004      	beq.n	8017212 <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMSR_AN_COMPLETE timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8017208:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801720a:	488e      	ldr	r0, [pc, #568]	@ (8017444 <xPhyStartAutoNegotiation+0x338>)
 801720c:	f00a fb54 	bl	80218b8 <lUDPLoggingPrintf>
            break;
 8017210:	e004      	b.n	801721c <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017212:	2032      	movs	r0, #50	@ 0x32
 8017214:	f7ec fd38 	bl	8003c88 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 8017218:	e7b6      	b.n	8017188 <xPhyStartAutoNegotiation+0x7c>
            break;
 801721a:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 801721c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801721e:	2b00      	cmp	r3, #0
 8017220:	f000 810b 	beq.w	801743a <xPhyStartAutoNegotiation+0x32e>
    {
        ulBitMask = ( uint32_t ) 1U;
 8017224:	2301      	movs	r3, #1
 8017226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801722c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801722e:	43db      	mvns	r3, r3
 8017230:	401a      	ands	r2, r3
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017236:	2300      	movs	r3, #0
 8017238:	647b      	str	r3, [r7, #68]	@ 0x44
 801723a:	e0f7      	b.n	801742c <xPhyStartAutoNegotiation+0x320>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801723c:	687a      	ldr	r2, [r7, #4]
 801723e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017240:	4413      	add	r3, r2
 8017242:	3318      	adds	r3, #24
 8017244:	781b      	ldrb	r3, [r3, #0]
 8017246:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801724c:	3202      	adds	r2, #2
 801724e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017252:	637b      	str	r3, [r7, #52]	@ 0x34

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8017254:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017258:	4013      	ands	r3, r2
 801725a:	2b00      	cmp	r3, #0
 801725c:	f000 80df 	beq.w	801741e <xPhyStartAutoNegotiation+0x312>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	685b      	ldr	r3, [r3, #4]
 8017264:	687a      	ldr	r2, [r7, #4]
 8017266:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8017268:	2100      	movs	r1, #0
 801726a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801726c:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8017276:	2101      	movs	r1, #1
 8017278:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801727a:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0U )
 801727c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801727e:	f003 0304 	and.w	r3, r3, #4
 8017282:	2b00      	cmp	r3, #0
 8017284:	d005      	beq.n	8017292 <xPhyStartAutoNegotiation+0x186>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801728a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801728c:	431a      	orrs	r2, r3
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8017292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017294:	4a6c      	ldr	r2, [pc, #432]	@ (8017448 <xPhyStartAutoNegotiation+0x33c>)
 8017296:	4293      	cmp	r3, r2
 8017298:	d130      	bne.n	80172fc <xPhyStartAutoNegotiation+0x1f0>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	f107 0214 	add.w	r2, r7, #20
 80172a2:	211e      	movs	r1, #30
 80172a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80172a6:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 80172a8:	697b      	ldr	r3, [r7, #20]
 80172aa:	f003 0307 	and.w	r3, r3, #7
 80172ae:	3b01      	subs	r3, #1
 80172b0:	2b05      	cmp	r3, #5
 80172b2:	d814      	bhi.n	80172de <xPhyStartAutoNegotiation+0x1d2>
 80172b4:	a201      	add	r2, pc, #4	@ (adr r2, 80172bc <xPhyStartAutoNegotiation+0x1b0>)
 80172b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172ba:	bf00      	nop
 80172bc:	080172d5 	.word	0x080172d5
 80172c0:	080172df 	.word	0x080172df
 80172c4:	080172df 	.word	0x080172df
 80172c8:	080172df 	.word	0x080172df
 80172cc:	080172d5 	.word	0x080172d5
 80172d0:	080172df 	.word	0x080172df
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 80172d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172d6:	f043 0302 	orr.w	r3, r3, #2
 80172da:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 80172dc:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 80172de:	697b      	ldr	r3, [r7, #20]
 80172e0:	f003 0307 	and.w	r3, r3, #7
 80172e4:	2b02      	cmp	r3, #2
 80172e6:	d801      	bhi.n	80172ec <xPhyStartAutoNegotiation+0x1e0>
 80172e8:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 80172ea:	e05b      	b.n	80173a4 <xPhyStartAutoNegotiation+0x298>
 80172ec:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 80172ee:	2b01      	cmp	r3, #1
 80172f0:	d858      	bhi.n	80173a4 <xPhyStartAutoNegotiation+0x298>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 80172f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172f4:	f043 0304 	orr.w	r3, r3, #4
 80172f8:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 80172fa:	e053      	b.n	80173a4 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( ulPhyID == PHY_ID_KSZ8795 )
 80172fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172fe:	4a53      	ldr	r2, [pc, #332]	@ (801744c <xPhyStartAutoNegotiation+0x340>)
 8017300:	4293      	cmp	r3, r2
 8017302:	d126      	bne.n	8017352 <xPhyStartAutoNegotiation+0x246>
                 *     010 = 10BASE-T half-duplex
                 *     101 = 10BASE-T full-duplex
                 *     011 = 100BASE-TX half-duplex
                 *     110 = 100BASE-TX full-duplex
                 */
                uint32_t ulControlStatus = 0u;
 8017304:	2300      	movs	r3, #0
 8017306:	613b      	str	r3, [r7, #16]
                uint32_t ulPortOperationMode = 0u;
 8017308:	2300      	movs	r3, #0
 801730a:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	f107 0210 	add.w	r2, r7, #16
 8017314:	211f      	movs	r1, #31
 8017316:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017318:	4798      	blx	r3
                ulPortOperationMode = ( ulControlStatus >> 8u ) & 0x07u;
 801731a:	693b      	ldr	r3, [r7, #16]
 801731c:	0a1b      	lsrs	r3, r3, #8
 801731e:	f003 0307 	and.w	r3, r3, #7
 8017322:	633b      	str	r3, [r7, #48]	@ 0x30

                ulRegValue = 0;
 8017324:	2300      	movs	r3, #0
 8017326:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Detect 10baseT operation */
                if( ( 0x02u == ulPortOperationMode ) || ( 0x05u == ulPortOperationMode ) )
 8017328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801732a:	2b02      	cmp	r3, #2
 801732c:	d002      	beq.n	8017334 <xPhyStartAutoNegotiation+0x228>
 801732e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017330:	2b05      	cmp	r3, #5
 8017332:	d103      	bne.n	801733c <xPhyStartAutoNegotiation+0x230>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8017334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017336:	f043 0302 	orr.w	r3, r3, #2
 801733a:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Detect full duplex operation */
                if( ( 0x05u == ulPortOperationMode ) || ( 0x06u == ulPortOperationMode ) )
 801733c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801733e:	2b05      	cmp	r3, #5
 8017340:	d002      	beq.n	8017348 <xPhyStartAutoNegotiation+0x23c>
 8017342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017344:	2b06      	cmp	r3, #6
 8017346:	d12d      	bne.n	80173a4 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8017348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801734a:	f043 0304 	orr.w	r3, r3, #4
 801734e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017350:	e028      	b.n	80173a4 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 8017352:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8017354:	f7ff fc66 	bl	8016c24 <xHas_1F_PHYSPCS>
 8017358:	4603      	mov	r3, r0
 801735a:	2b00      	cmp	r3, #0
 801735c:	d01b      	beq.n	8017396 <xPhyStartAutoNegotiation+0x28a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	681b      	ldr	r3, [r3, #0]
 8017362:	f107 020c 	add.w	r2, r7, #12
 8017366:	211f      	movs	r1, #31
 8017368:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801736a:	4798      	blx	r3
                ulRegValue = 0;
 801736c:	2300      	movs	r3, #0
 801736e:	627b      	str	r3, [r7, #36]	@ 0x24

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	f003 0310 	and.w	r3, r3, #16
 8017376:	2b00      	cmp	r3, #0
 8017378:	d003      	beq.n	8017382 <xPhyStartAutoNegotiation+0x276>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 801737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801737c:	f043 0304 	orr.w	r3, r3, #4
 8017380:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	f003 030c 	and.w	r3, r3, #12
 8017388:	2b04      	cmp	r3, #4
 801738a:	d10b      	bne.n	80173a4 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 801738c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801738e:	f043 0302 	orr.w	r3, r3, #2
 8017392:	627b      	str	r3, [r7, #36]	@ 0x24
 8017394:	e006      	b.n	80173a4 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801739e:	2110      	movs	r1, #16
 80173a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80173a2:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08x: %s duplex %u mbit %s status\n",
 80173a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80173a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173a8:	f003 0304 	and.w	r3, r3, #4
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d001      	beq.n	80173b4 <xPhyStartAutoNegotiation+0x2a8>
 80173b0:	4827      	ldr	r0, [pc, #156]	@ (8017450 <xPhyStartAutoNegotiation+0x344>)
 80173b2:	e000      	b.n	80173b6 <xPhyStartAutoNegotiation+0x2aa>
 80173b4:	4827      	ldr	r0, [pc, #156]	@ (8017454 <xPhyStartAutoNegotiation+0x348>)
 80173b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173b8:	f003 0302 	and.w	r3, r3, #2
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d001      	beq.n	80173c4 <xPhyStartAutoNegotiation+0x2b8>
 80173c0:	240a      	movs	r4, #10
 80173c2:	e000      	b.n	80173c6 <xPhyStartAutoNegotiation+0x2ba>
 80173c4:	2464      	movs	r4, #100	@ 0x64
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80173ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80173cc:	4013      	ands	r3, r2
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d001      	beq.n	80173d6 <xPhyStartAutoNegotiation+0x2ca>
 80173d2:	4b21      	ldr	r3, [pc, #132]	@ (8017458 <xPhyStartAutoNegotiation+0x34c>)
 80173d4:	e000      	b.n	80173d8 <xPhyStartAutoNegotiation+0x2cc>
 80173d6:	4b21      	ldr	r3, [pc, #132]	@ (801745c <xPhyStartAutoNegotiation+0x350>)
 80173d8:	9300      	str	r3, [sp, #0]
 80173da:	4623      	mov	r3, r4
 80173dc:	4602      	mov	r2, r0
 80173de:	4820      	ldr	r0, [pc, #128]	@ (8017460 <xPhyStartAutoNegotiation+0x354>)
 80173e0:	f00a fa6a 	bl	80218b8 <lUDPLoggingPrintf>
                               ( unsigned int ) ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) != 0U ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 80173e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173e6:	f003 0304 	and.w	r3, r3, #4
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d004      	beq.n	80173f8 <xPhyStartAutoNegotiation+0x2ec>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	2202      	movs	r2, #2
 80173f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80173f6:	e003      	b.n	8017400 <xPhyStartAutoNegotiation+0x2f4>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	2201      	movs	r2, #1
 80173fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 8017400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017402:	f003 0302 	and.w	r3, r3, #2
 8017406:	2b00      	cmp	r3, #0
 8017408:	d004      	beq.n	8017414 <xPhyStartAutoNegotiation+0x308>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	2201      	movs	r2, #1
 801740e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8017412:	e005      	b.n	8017420 <xPhyStartAutoNegotiation+0x314>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	2202      	movs	r2, #2
 8017418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801741c:	e000      	b.n	8017420 <xPhyStartAutoNegotiation+0x314>
                continue;
 801741e:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017422:	3301      	adds	r3, #1
 8017424:	647b      	str	r3, [r7, #68]	@ 0x44
 8017426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017428:	005b      	lsls	r3, r3, #1
 801742a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017430:	461a      	mov	r2, r3
 8017432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017434:	4293      	cmp	r3, r2
 8017436:	f4ff af01 	bcc.w	801723c <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 801743a:	2300      	movs	r3, #0
}
 801743c:	4618      	mov	r0, r3
 801743e:	374c      	adds	r7, #76	@ 0x4c
 8017440:	46bd      	mov	sp, r7
 8017442:	bd90      	pop	{r4, r7, pc}
 8017444:	08026bf0 	.word	0x08026bf0
 8017448:	00221560 	.word	0x00221560
 801744c:	00221550 	.word	0x00221550
 8017450:	08026c3c 	.word	0x08026c3c
 8017454:	08026c44 	.word	0x08026c44
 8017458:	08026c4c 	.word	0x08026c4c
 801745c:	08026c54 	.word	0x08026c54
 8017460:	08026c58 	.word	0x08026c58

08017464 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 8017464:	b580      	push	{r7, lr}
 8017466:	b088      	sub	sp, #32
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
 801746c:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 801746e:	2301      	movs	r3, #1
 8017470:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 8017472:	2300      	movs	r3, #0
 8017474:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 8017476:	683b      	ldr	r3, [r7, #0]
 8017478:	2b00      	cmp	r3, #0
 801747a:	dd2b      	ble.n	80174d4 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	331c      	adds	r3, #28
 8017480:	4618      	mov	r0, r3
 8017482:	f7ed f975 	bl	8004770 <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	f643 2298 	movw	r2, #15000	@ 0x3a98
 801748c:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801748e:	2300      	movs	r3, #0
 8017490:	61bb      	str	r3, [r7, #24]
 8017492:	e019      	b.n	80174c8 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017498:	69fb      	ldr	r3, [r7, #28]
 801749a:	4013      	ands	r3, r2
 801749c:	2b00      	cmp	r3, #0
 801749e:	d10d      	bne.n	80174bc <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80174a4:	69fb      	ldr	r3, [r7, #28]
 80174a6:	431a      	orrs	r2, r3
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80174b0:	4619      	mov	r1, r3
 80174b2:	4842      	ldr	r0, [pc, #264]	@ (80175bc <xPhyCheckLinkStatus+0x158>)
 80174b4:	f00a fa00 	bl	80218b8 <lUDPLoggingPrintf>
                xNeedCheck = pdTRUE;
 80174b8:	2301      	movs	r3, #1
 80174ba:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80174bc:	69bb      	ldr	r3, [r7, #24]
 80174be:	3301      	adds	r3, #1
 80174c0:	61bb      	str	r3, [r7, #24]
 80174c2:	69fb      	ldr	r3, [r7, #28]
 80174c4:	005b      	lsls	r3, r3, #1
 80174c6:	61fb      	str	r3, [r7, #28]
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174cc:	69ba      	ldr	r2, [r7, #24]
 80174ce:	429a      	cmp	r2, r3
 80174d0:	dbe0      	blt.n	8017494 <xPhyCheckLinkStatus+0x30>
 80174d2:	e06e      	b.n	80175b2 <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	f103 021c 	add.w	r2, r3, #28
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	3324      	adds	r3, #36	@ 0x24
 80174de:	4619      	mov	r1, r3
 80174e0:	4610      	mov	r0, r2
 80174e2:	f7ed f97d 	bl	80047e0 <xTaskCheckForTimeOut>
 80174e6:	4603      	mov	r3, r0
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d062      	beq.n	80175b2 <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80174ec:	2300      	movs	r3, #0
 80174ee:	61bb      	str	r3, [r7, #24]
 80174f0:	e045      	b.n	801757e <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80174f2:	687a      	ldr	r2, [r7, #4]
 80174f4:	69bb      	ldr	r3, [r7, #24]
 80174f6:	4413      	add	r3, r2
 80174f8:	3318      	adds	r3, #24
 80174fa:	781b      	ldrb	r3, [r3, #0]
 80174fc:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	f107 020c 	add.w	r2, r7, #12
 8017506:	2101      	movs	r1, #1
 8017508:	6938      	ldr	r0, [r7, #16]
 801750a:	4798      	blx	r3
 801750c:	4603      	mov	r3, r0
 801750e:	2b00      	cmp	r3, #0
 8017510:	d12f      	bne.n	8017572 <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017516:	69fb      	ldr	r3, [r7, #28]
 8017518:	4013      	ands	r3, r2
 801751a:	2b00      	cmp	r3, #0
 801751c:	bf14      	ite	ne
 801751e:	2301      	movne	r3, #1
 8017520:	2300      	moveq	r3, #0
 8017522:	b2da      	uxtb	r2, r3
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	f003 0304 	and.w	r3, r3, #4
 801752a:	2b00      	cmp	r3, #0
 801752c:	bf14      	ite	ne
 801752e:	2301      	movne	r3, #1
 8017530:	2300      	moveq	r3, #0
 8017532:	b2db      	uxtb	r3, r3
 8017534:	4053      	eors	r3, r2
 8017536:	b2db      	uxtb	r3, r3
 8017538:	2b00      	cmp	r3, #0
 801753a:	d01a      	beq.n	8017572 <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	f003 0304 	and.w	r3, r3, #4
 8017542:	2b00      	cmp	r3, #0
 8017544:	d006      	beq.n	8017554 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801754a:	69fb      	ldr	r3, [r7, #28]
 801754c:	431a      	orrs	r2, r3
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	635a      	str	r2, [r3, #52]	@ 0x34
 8017552:	e006      	b.n	8017562 <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017558:	69fb      	ldr	r3, [r7, #28]
 801755a:	43db      	mvns	r3, r3
 801755c:	401a      	ands	r2, r3
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017566:	4619      	mov	r1, r3
 8017568:	4814      	ldr	r0, [pc, #80]	@ (80175bc <xPhyCheckLinkStatus+0x158>)
 801756a:	f00a f9a5 	bl	80218b8 <lUDPLoggingPrintf>
                    xNeedCheck = pdTRUE;
 801756e:	2301      	movs	r3, #1
 8017570:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017572:	69bb      	ldr	r3, [r7, #24]
 8017574:	3301      	adds	r3, #1
 8017576:	61bb      	str	r3, [r7, #24]
 8017578:	69fb      	ldr	r3, [r7, #28]
 801757a:	005b      	lsls	r3, r3, #1
 801757c:	61fb      	str	r3, [r7, #28]
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017582:	69ba      	ldr	r2, [r7, #24]
 8017584:	429a      	cmp	r2, r3
 8017586:	dbb4      	blt.n	80174f2 <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	331c      	adds	r3, #28
 801758c:	4618      	mov	r0, r3
 801758e:	f7ed f8ef 	bl	8004770 <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017596:	69fb      	ldr	r3, [r7, #28]
 8017598:	085b      	lsrs	r3, r3, #1
 801759a:	4013      	ands	r3, r2
 801759c:	2b00      	cmp	r3, #0
 801759e:	d004      	beq.n	80175aa <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80175a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80175a8:	e003      	b.n	80175b2 <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80175b0:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 80175b2:	697b      	ldr	r3, [r7, #20]
}
 80175b4:	4618      	mov	r0, r3
 80175b6:	3720      	adds	r7, #32
 80175b8:	46bd      	mov	sp, r7
 80175ba:	bd80      	pop	{r7, pc}
 80175bc:	08026c8c 	.word	0x08026c8c

080175c0 <prvRevBits32>:
};
/*-----------------------------------------------------------*/

/* Reverse the bits of a 32 bit unsigned integer */
static uint32_t prvRevBits32( uint32_t ulValue )
{
 80175c0:	b480      	push	{r7}
 80175c2:	b085      	sub	sp, #20
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]
    uint32_t ulRev32;
    int iIndex;

    ulRev32 = 0;
 80175c8:	2300      	movs	r3, #0
 80175ca:	60fb      	str	r3, [r7, #12]

    for( iIndex = 0; iIndex < 32; iIndex++ )
 80175cc:	2300      	movs	r3, #0
 80175ce:	60bb      	str	r3, [r7, #8]
 80175d0:	e013      	b.n	80175fa <prvRevBits32+0x3a>
    {
        if( ulValue & ( 1 << iIndex ) )
 80175d2:	2201      	movs	r2, #1
 80175d4:	68bb      	ldr	r3, [r7, #8]
 80175d6:	fa02 f303 	lsl.w	r3, r2, r3
 80175da:	461a      	mov	r2, r3
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	4013      	ands	r3, r2
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d007      	beq.n	80175f4 <prvRevBits32+0x34>
        {
            {
                ulRev32 |= 1 << ( 31 - iIndex );
 80175e4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80175e8:	68bb      	ldr	r3, [r7, #8]
 80175ea:	fa22 f303 	lsr.w	r3, r2, r3
 80175ee:	68fa      	ldr	r2, [r7, #12]
 80175f0:	4313      	orrs	r3, r2
 80175f2:	60fb      	str	r3, [r7, #12]
    for( iIndex = 0; iIndex < 32; iIndex++ )
 80175f4:	68bb      	ldr	r3, [r7, #8]
 80175f6:	3301      	adds	r3, #1
 80175f8:	60bb      	str	r3, [r7, #8]
 80175fa:	68bb      	ldr	r3, [r7, #8]
 80175fc:	2b1f      	cmp	r3, #31
 80175fe:	dde8      	ble.n	80175d2 <prvRevBits32+0x12>
            }
        }
    }

    return ulRev32;
 8017600:	68fb      	ldr	r3, [r7, #12]
}
 8017602:	4618      	mov	r0, r3
 8017604:	3714      	adds	r7, #20
 8017606:	46bd      	mov	sp, r7
 8017608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760c:	4770      	bx	lr
	...

08017610 <prvComputeCRC32_MAC>:

/* Compute the CRC32 of the given MAC address as per IEEE 802.3 CRC32 */
static uint32_t prvComputeCRC32_MAC( const uint8_t * pucMAC )
{
 8017610:	b590      	push	{r4, r7, lr}
 8017612:	b087      	sub	sp, #28
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
    int iiIndex, ijIndex;
    uint32_t ulCRC32 = 0xFFFFFFFF;
 8017618:	f04f 33ff 	mov.w	r3, #4294967295
 801761c:	60fb      	str	r3, [r7, #12]

    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 801761e:	2300      	movs	r3, #0
 8017620:	613b      	str	r3, [r7, #16]
 8017622:	e024      	b.n	801766e <prvComputeCRC32_MAC+0x5e>
    {
        ulCRC32 = ulCRC32 ^ ( uint32_t ) pucMAC[ ijIndex ];
 8017624:	693b      	ldr	r3, [r7, #16]
 8017626:	687a      	ldr	r2, [r7, #4]
 8017628:	4413      	add	r3, r2
 801762a:	781b      	ldrb	r3, [r3, #0]
 801762c:	461a      	mov	r2, r3
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	4053      	eors	r3, r2
 8017632:	60fb      	str	r3, [r7, #12]

        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 8017634:	2300      	movs	r3, #0
 8017636:	617b      	str	r3, [r7, #20]
 8017638:	e013      	b.n	8017662 <prvComputeCRC32_MAC+0x52>
        {
            if( ulCRC32 & 1 )
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	f003 0301 	and.w	r3, r3, #1
 8017640:	2b00      	cmp	r3, #0
 8017642:	d008      	beq.n	8017656 <prvComputeCRC32_MAC+0x46>
            {
                ulCRC32 = ( ulCRC32 >> 1 ) ^ prvRevBits32( 0x04C11DB7 ); /* IEEE 802.3 CRC32 polynomial - 0x04C11DB7 */
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	085c      	lsrs	r4, r3, #1
 8017648:	480e      	ldr	r0, [pc, #56]	@ (8017684 <prvComputeCRC32_MAC+0x74>)
 801764a:	f7ff ffb9 	bl	80175c0 <prvRevBits32>
 801764e:	4603      	mov	r3, r0
 8017650:	4063      	eors	r3, r4
 8017652:	60fb      	str	r3, [r7, #12]
 8017654:	e002      	b.n	801765c <prvComputeCRC32_MAC+0x4c>
            }
            else
            {
                ulCRC32 = ( ulCRC32 >> 1 );
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	085b      	lsrs	r3, r3, #1
 801765a:	60fb      	str	r3, [r7, #12]
        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 801765c:	697b      	ldr	r3, [r7, #20]
 801765e:	3301      	adds	r3, #1
 8017660:	617b      	str	r3, [r7, #20]
 8017662:	697b      	ldr	r3, [r7, #20]
 8017664:	2b07      	cmp	r3, #7
 8017666:	dde8      	ble.n	801763a <prvComputeCRC32_MAC+0x2a>
    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 8017668:	693b      	ldr	r3, [r7, #16]
 801766a:	3301      	adds	r3, #1
 801766c:	613b      	str	r3, [r7, #16]
 801766e:	693b      	ldr	r3, [r7, #16]
 8017670:	2b05      	cmp	r3, #5
 8017672:	ddd7      	ble.n	8017624 <prvComputeCRC32_MAC+0x14>
            }
        }
    }

    ulCRC32 = ~( ulCRC32 );
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	43db      	mvns	r3, r3
 8017678:	60fb      	str	r3, [r7, #12]
    return ulCRC32;
 801767a:	68fb      	ldr	r3, [r7, #12]
}
 801767c:	4618      	mov	r0, r3
 801767e:	371c      	adds	r7, #28
 8017680:	46bd      	mov	sp, r7
 8017682:	bd90      	pop	{r4, r7, pc}
 8017684:	04c11db7 	.word	0x04c11db7

08017688 <prvComputeEthernet_MACHash>:

/* Compute the hash value of a given MAC address to index the bits in the Hash Table
 * Registers (ETH_MACHT0R and ETH_MACHT1R) */
static uint32_t prvComputeEthernet_MACHash( const uint8_t * pucMAC )
{
 8017688:	b580      	push	{r7, lr}
 801768a:	b084      	sub	sp, #16
 801768c:	af00      	add	r7, sp, #0
 801768e:	6078      	str	r0, [r7, #4]
    uint32_t ulCRC32;
    uint32_t ulHash;

    /*  Calculate the 32-bit CRC for the MAC */
    ulCRC32 = prvComputeCRC32_MAC( pucMAC );
 8017690:	6878      	ldr	r0, [r7, #4]
 8017692:	f7ff ffbd 	bl	8017610 <prvComputeCRC32_MAC>
 8017696:	60f8      	str	r0, [r7, #12]

    /* Perform bitwise reversal on the CRC32 */
    ulHash = prvRevBits32( ulCRC32 );
 8017698:	68f8      	ldr	r0, [r7, #12]
 801769a:	f7ff ff91 	bl	80175c0 <prvRevBits32>
 801769e:	60b8      	str	r0, [r7, #8]

    /* Take the upper 6 bits of the above result */
    return( ulHash >> 26 );
 80176a0:	68bb      	ldr	r3, [r7, #8]
 80176a2:	0e9b      	lsrs	r3, r3, #26
}
 80176a4:	4618      	mov	r0, r3
 80176a6:	3710      	adds	r7, #16
 80176a8:	46bd      	mov	sp, r7
 80176aa:	bd80      	pop	{r7, pc}

080176ac <prvSetMAC_HashFilter>:

/* Update the Hash Table Registers
 * (ETH_MACHT0R and ETH_MACHT1R) with hash value of the given MAC address */
static void prvSetMAC_HashFilter( ETH_HandleTypeDef * pxEthHandle,
                                  const uint8_t * pucMAC )
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b084      	sub	sp, #16
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
 80176b4:	6039      	str	r1, [r7, #0]
    uint32_t ulHash;

    /* Compute the hash */
    ulHash = prvComputeEthernet_MACHash( pucMAC );
 80176b6:	6838      	ldr	r0, [r7, #0]
 80176b8:	f7ff ffe6 	bl	8017688 <prvComputeEthernet_MACHash>
 80176bc:	60f8      	str	r0, [r7, #12]

    /* Use the upper (MACHT1R) or lower (MACHT0R) Hash Table Registers
     * to set the required bit based on the ulHash */
    if( ulHash < 32 )
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	2b1f      	cmp	r3, #31
 80176c2:	d80c      	bhi.n	80176de <prvSetMAC_HashFilter+0x32>
    {
        pxEthHandle->Instance->MACHT0R |= ( 1 << ulHash );
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	691a      	ldr	r2, [r3, #16]
 80176ca:	2101      	movs	r1, #1
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	fa01 f303 	lsl.w	r3, r1, r3
 80176d2:	4619      	mov	r1, r3
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	430a      	orrs	r2, r1
 80176da:	611a      	str	r2, [r3, #16]
    }
    else
    {
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
    }
}
 80176dc:	e00d      	b.n	80176fa <prvSetMAC_HashFilter+0x4e>
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	695a      	ldr	r2, [r3, #20]
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	f003 031f 	and.w	r3, r3, #31
 80176ea:	2101      	movs	r1, #1
 80176ec:	fa01 f303 	lsl.w	r3, r1, r3
 80176f0:	4619      	mov	r1, r3
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	430a      	orrs	r2, r1
 80176f8:	615a      	str	r2, [r3, #20]
}
 80176fa:	bf00      	nop
 80176fc:	3710      	adds	r7, #16
 80176fe:	46bd      	mov	sp, r7
 8017700:	bd80      	pop	{r7, pc}

08017702 <pucGetRXBuffer>:
/*******************************************************************************
*                      Network Interface API Functions
*******************************************************************************/

static uint8_t * pucGetRXBuffer( size_t uxSize )
{
 8017702:	b580      	push	{r7, lr}
 8017704:	b086      	sub	sp, #24
 8017706:	af00      	add	r7, sp, #0
 8017708:	6078      	str	r0, [r7, #4]
    TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 10U );
 801770a:	230a      	movs	r3, #10
 801770c:	613b      	str	r3, [r7, #16]
    NetworkBufferDescriptor_t * pxBufferDescriptor;
    uint8_t * pucReturn = NULL;
 801770e:	2300      	movs	r3, #0
 8017710:	617b      	str	r3, [r7, #20]

    pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxSize, uxBlockTimeTicks );
 8017712:	6939      	ldr	r1, [r7, #16]
 8017714:	6878      	ldr	r0, [r7, #4]
 8017716:	f7ff f9bf 	bl	8016a98 <pxGetNetworkBufferWithDescriptor>
 801771a:	60f8      	str	r0, [r7, #12]

    if( pxBufferDescriptor != NULL )
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d002      	beq.n	8017728 <pucGetRXBuffer+0x26>
    {
        pucReturn = pxBufferDescriptor->pucEthernetBuffer;
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017726:	617b      	str	r3, [r7, #20]
    }

    return pucReturn;
 8017728:	697b      	ldr	r3, [r7, #20]
}
 801772a:	4618      	mov	r0, r3
 801772c:	3718      	adds	r7, #24
 801772e:	46bd      	mov	sp, r7
 8017730:	bd80      	pop	{r7, pc}
	...

08017734 <xSTM32H_NetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceInitialise( NetworkInterface_t * pxInterface )
{
 8017734:	b580      	push	{r7, lr}
 8017736:	b08e      	sub	sp, #56	@ 0x38
 8017738:	af02      	add	r7, sp, #8
 801773a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFAIL;
 801773c:	2300      	movs	r3, #0
 801773e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NetworkEndPoint_t * pxEndPoint;
    HAL_StatusTypeDef xHalEthInitStatus;
    size_t uxIndex = 0;
 8017740:	2300      	movs	r3, #0
 8017742:	627b      	str	r3, [r7, #36]	@ 0x24

    if( xMacInitStatus == eMACInit )
 8017744:	4b8d      	ldr	r3, [pc, #564]	@ (801797c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017746:	781b      	ldrb	r3, [r3, #0]
 8017748:	2b00      	cmp	r3, #0
 801774a:	f040 8104 	bne.w	8017956 <xSTM32H_NetworkInterfaceInitialise+0x222>
    {
        pxMyInterface = pxInterface;
 801774e:	4a8c      	ldr	r2, [pc, #560]	@ (8017980 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	6013      	str	r3, [r2, #0]

        pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8017754:	6878      	ldr	r0, [r7, #4]
 8017756:	f7f5 fb8f 	bl	800ce78 <FreeRTOS_FirstEndPoint>
 801775a:	62b8      	str	r0, [r7, #40]	@ 0x28
        configASSERT( pxEndPoint != NULL );
 801775c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801775e:	2b00      	cmp	r3, #0
 8017760:	d104      	bne.n	801776c <xSTM32H_NetworkInterfaceInitialise+0x38>
 8017762:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8017766:	4887      	ldr	r0, [pc, #540]	@ (8017984 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017768:	f7e9 ff80 	bl	800166c <vAssertCalled>
        /*
         * Initialize ETH Handler
         * It assumes that Ethernet GPIO and clock configuration
         * are already done in the ETH_MspInit()
         */
        xEthHandle.Instance = ETH;
 801776c:	4b86      	ldr	r3, [pc, #536]	@ (8017988 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801776e:	4a87      	ldr	r2, [pc, #540]	@ (801798c <xSTM32H_NetworkInterfaceInitialise+0x258>)
 8017770:	601a      	str	r2, [r3, #0]
        xEthHandle.Init.MACAddr = ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes;
 8017772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017774:	33e8      	adds	r3, #232	@ 0xe8
 8017776:	4a84      	ldr	r2, [pc, #528]	@ (8017988 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017778:	6053      	str	r3, [r2, #4]
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 801777a:	4b83      	ldr	r3, [pc, #524]	@ (8017988 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801777c:	2201      	movs	r2, #1
 801777e:	721a      	strb	r2, [r3, #8]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 8017780:	4b81      	ldr	r3, [pc, #516]	@ (8017988 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017782:	4a83      	ldr	r2, [pc, #524]	@ (8017990 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8017784:	60da      	str	r2, [r3, #12]
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 8017786:	4b80      	ldr	r3, [pc, #512]	@ (8017988 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017788:	4a82      	ldr	r2, [pc, #520]	@ (8017994 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 801778a:	611a      	str	r2, [r3, #16]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 801778c:	4b7e      	ldr	r3, [pc, #504]	@ (8017988 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801778e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8017792:	615a      	str	r2, [r3, #20]

        /* Make sure that all unused fields are cleared. */
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8017794:	2260      	movs	r2, #96	@ 0x60
 8017796:	2100      	movs	r1, #0
 8017798:	487d      	ldr	r0, [pc, #500]	@ (8017990 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 801779a:	f00a fbb6 	bl	8021f0a <memset>
        memset( &( DMARxDscrTab ), '\0', sizeof( DMARxDscrTab ) );
 801779e:	2260      	movs	r2, #96	@ 0x60
 80177a0:	2100      	movs	r1, #0
 80177a2:	487c      	ldr	r0, [pc, #496]	@ (8017994 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 80177a4:	f00a fbb1 	bl	8021f0a <memset>

        xHalEthInitStatus = HAL_ETH_Init( &( xEthHandle ) );
 80177a8:	4877      	ldr	r0, [pc, #476]	@ (8017988 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80177aa:	f000 fc71 	bl	8018090 <HAL_ETH_Init>
 80177ae:	4603      	mov	r3, r0
 80177b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        if( xHalEthInitStatus == HAL_OK )
 80177b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	f040 80c9 	bne.w	8017950 <xSTM32H_NetworkInterfaceInitialise+0x21c>
        {
            /* Update MAC filter settings */
            xEthHandle.Instance->MACPFR |= ENABLE_HASH_FILTER_SETTINGS;
 80177be:	4b72      	ldr	r3, [pc, #456]	@ (8017988 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	6899      	ldr	r1, [r3, #8]
 80177c4:	4b70      	ldr	r3, [pc, #448]	@ (8017988 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80177c6:	681a      	ldr	r2, [r3, #0]
 80177c8:	f240 4316 	movw	r3, #1046	@ 0x416
 80177cc:	430b      	orrs	r3, r1
 80177ce:	6093      	str	r3, [r2, #8]

            /* Configuration for HAL_ETH_Transmit(_IT). */
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 80177d0:	2234      	movs	r2, #52	@ 0x34
 80177d2:	2100      	movs	r1, #0
 80177d4:	4870      	ldr	r0, [pc, #448]	@ (8017998 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80177d6:	f00a fb98 	bl	8021f0a <memset>
            xTxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD;
 80177da:	4b6f      	ldr	r3, [pc, #444]	@ (8017998 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80177dc:	2220      	movs	r2, #32
 80177de:	601a      	str	r2, [r3, #0]

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
            {
                /*xTxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC; */
                xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 80177e0:	4b6d      	ldr	r3, [pc, #436]	@ (8017998 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	f043 0301 	orr.w	r3, r3, #1
 80177e8:	4a6b      	ldr	r2, [pc, #428]	@ (8017998 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80177ea:	6013      	str	r3, [r2, #0]
                xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80177ec:	4b6a      	ldr	r3, [pc, #424]	@ (8017998 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80177ee:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80177f2:	615a      	str	r2, [r3, #20]
            #else
            {
                xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
            }
            #endif
            xTxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80177f4:	4b68      	ldr	r3, [pc, #416]	@ (8017998 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80177f6:	2200      	movs	r2, #0
 80177f8:	611a      	str	r2, [r3, #16]

            /* This counting semaphore will count the number of free TX DMA descriptors. */
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 80177fa:	2104      	movs	r1, #4
 80177fc:	2004      	movs	r0, #4
 80177fe:	f7eb fc01 	bl	8003004 <xQueueCreateCountingSemaphore>
 8017802:	4603      	mov	r3, r0
 8017804:	4a65      	ldr	r2, [pc, #404]	@ (801799c <xSTM32H_NetworkInterfaceInitialise+0x268>)
 8017806:	6013      	str	r3, [r2, #0]
            configASSERT( xTXDescriptorSemaphore );
 8017808:	4b64      	ldr	r3, [pc, #400]	@ (801799c <xSTM32H_NetworkInterfaceInitialise+0x268>)
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d104      	bne.n	801781a <xSTM32H_NetworkInterfaceInitialise+0xe6>
 8017810:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8017814:	485b      	ldr	r0, [pc, #364]	@ (8017984 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017816:	f7e9 ff29 	bl	800166c <vAssertCalled>

            xTransmissionMutex = xSemaphoreCreateMutex();
 801781a:	2001      	movs	r0, #1
 801781c:	f7eb fbd9 	bl	8002fd2 <xQueueCreateMutex>
 8017820:	4603      	mov	r3, r0
 8017822:	4a5f      	ldr	r2, [pc, #380]	@ (80179a0 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8017824:	6013      	str	r3, [r2, #0]
            configASSERT( xTransmissionMutex );
 8017826:	4b5e      	ldr	r3, [pc, #376]	@ (80179a0 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d104      	bne.n	8017838 <xSTM32H_NetworkInterfaceInitialise+0x104>
 801782e:	f240 117f 	movw	r1, #383	@ 0x17f
 8017832:	4854      	ldr	r0, [pc, #336]	@ (8017984 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017834:	f7e9 ff1a 	bl	800166c <vAssertCalled>

            /* Assign Rx memory buffers to a DMA Rx descriptor */
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8017838:	2300      	movs	r3, #0
 801783a:	627b      	str	r3, [r7, #36]	@ 0x24
 801783c:	e015      	b.n	801786a <xSTM32H_NetworkInterfaceInitialise+0x136>
            {
                uint8_t * pucBuffer;

                #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
                {
                    pucBuffer = pucGetRXBuffer( ETH_RX_BUF_SIZE );
 801783e:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8017842:	f7ff ff5e 	bl	8017702 <pucGetRXBuffer>
 8017846:	61f8      	str	r0, [r7, #28]
                    configASSERT( pucBuffer != NULL );
 8017848:	69fb      	ldr	r3, [r7, #28]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d104      	bne.n	8017858 <xSTM32H_NetworkInterfaceInitialise+0x124>
 801784e:	f240 1189 	movw	r1, #393	@ 0x189
 8017852:	484c      	ldr	r0, [pc, #304]	@ (8017984 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017854:	f7e9 ff0a 	bl	800166c <vAssertCalled>
                {
                    pucBuffer = Rx_Buff[ uxIndex ];
                }
                #endif

                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 8017858:	2300      	movs	r3, #0
 801785a:	69fa      	ldr	r2, [r7, #28]
 801785c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801785e:	484a      	ldr	r0, [pc, #296]	@ (8017988 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017860:	f000 fd02 	bl	8018268 <HAL_ETH_DescAssignMemory>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8017864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017866:	3301      	adds	r3, #1
 8017868:	627b      	str	r3, [r7, #36]	@ 0x24
 801786a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801786c:	2b03      	cmp	r3, #3
 801786e:	d9e6      	bls.n	801783e <xSTM32H_NetworkInterfaceInitialise+0x10a>
            }
            #endif
            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* Program the LLMNR address. */
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddress.ucBytes );
 8017870:	494c      	ldr	r1, [pc, #304]	@ (80179a4 <xSTM32H_NetworkInterfaceInitialise+0x270>)
 8017872:	4845      	ldr	r0, [pc, #276]	@ (8017988 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017874:	f7ff ff1a 	bl	80176ac <prvSetMAC_HashFilter>
            }
            #endif
            #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
            {
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddressIPv6.ucBytes );
 8017878:	494b      	ldr	r1, [pc, #300]	@ (80179a8 <xSTM32H_NetworkInterfaceInitialise+0x274>)
 801787a:	4843      	ldr	r0, [pc, #268]	@ (8017988 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801787c:	f7ff ff16 	bl	80176ac <prvSetMAC_HashFilter>
            }
            #endif

            {
                /* The EMAC address of the first end-point has been registered in HAL_ETH_Init(). */
                for( ;
 8017880:	e03a      	b.n	80178f8 <xSTM32H_NetworkInterfaceInitialise+0x1c4>
                     pxEndPoint != NULL;
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
                {
                    switch( pxEndPoint->bits.bIPv6 )
 8017882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017884:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8017888:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801788c:	b2db      	uxtb	r3, r3
 801788e:	2b00      	cmp	r3, #0
 8017890:	d002      	beq.n	8017898 <xSTM32H_NetworkInterfaceInitialise+0x164>
 8017892:	2b01      	cmp	r3, #1
 8017894:	d00d      	beq.n	80178b2 <xSTM32H_NetworkInterfaceInitialise+0x17e>
                               break;
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default:
                            /* MISRA 16.4 Compliance */
                            break;
 8017896:	e028      	b.n	80178ea <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                if( xEthHandle.Init.MACAddr != ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes )
 8017898:	4b3b      	ldr	r3, [pc, #236]	@ (8017988 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801789a:	685a      	ldr	r2, [r3, #4]
 801789c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801789e:	33e8      	adds	r3, #232	@ 0xe8
 80178a0:	429a      	cmp	r2, r3
 80178a2:	d021      	beq.n	80178e8 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                    prvSetMAC_HashFilter( &xEthHandle, pxEndPoint->xMACAddress.ucBytes );
 80178a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178a6:	33e8      	adds	r3, #232	@ 0xe8
 80178a8:	4619      	mov	r1, r3
 80178aa:	4837      	ldr	r0, [pc, #220]	@ (8017988 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80178ac:	f7ff fefe 	bl	80176ac <prvSetMAC_HashFilter>
                                break;
 80178b0:	e01a      	b.n	80178e8 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                   uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0xff, 0, 0, 0 };
 80178b2:	4a3e      	ldr	r2, [pc, #248]	@ (80179ac <xSTM32H_NetworkInterfaceInitialise+0x278>)
 80178b4:	f107 0314 	add.w	r3, r7, #20
 80178b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80178bc:	6018      	str	r0, [r3, #0]
 80178be:	3304      	adds	r3, #4
 80178c0:	8019      	strh	r1, [r3, #0]
                                   ucMACAddress[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 80178c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80178c8:	75fb      	strb	r3, [r7, #23]
                                   ucMACAddress[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 80178ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178cc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80178d0:	763b      	strb	r3, [r7, #24]
                                   ucMACAddress[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 80178d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178d4:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80178d8:	767b      	strb	r3, [r7, #25]
                                   prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 80178da:	f107 0314 	add.w	r3, r7, #20
 80178de:	4619      	mov	r1, r3
 80178e0:	4829      	ldr	r0, [pc, #164]	@ (8017988 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80178e2:	f7ff fee3 	bl	80176ac <prvSetMAC_HashFilter>
                               break;
 80178e6:	e000      	b.n	80178ea <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                break;
 80178e8:	bf00      	nop
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
 80178ea:	4b25      	ldr	r3, [pc, #148]	@ (8017980 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80178f0:	4618      	mov	r0, r3
 80178f2:	f7f5 fae3 	bl	800cebc <FreeRTOS_NextEndPoint>
 80178f6:	62b8      	str	r0, [r7, #40]	@ 0x28
                     pxEndPoint != NULL;
 80178f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d1c1      	bne.n	8017882 <xSTM32H_NetworkInterfaceInitialise+0x14e>
            }

            #if ( ipconfigUSE_IPv6 != 0 )
            {
                /* Allow traffic destined to IPv6 all nodes multicast MAC 33:33:00:00:00:01 */
                const uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0, 0, 0, 0x01 };
 80178fe:	4a2c      	ldr	r2, [pc, #176]	@ (80179b0 <xSTM32H_NetworkInterfaceInitialise+0x27c>)
 8017900:	f107 030c 	add.w	r3, r7, #12
 8017904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017908:	6018      	str	r0, [r3, #0]
 801790a:	3304      	adds	r3, #4
 801790c:	8019      	strh	r1, [r3, #0]
                prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 801790e:	f107 030c 	add.w	r3, r7, #12
 8017912:	4619      	mov	r1, r3
 8017914:	481c      	ldr	r0, [pc, #112]	@ (8017988 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017916:	f7ff fec9 	bl	80176ac <prvSetMAC_HashFilter>
            }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Initialize the MACB and set all PHY properties */
            prvMACBProbePhy();
 801791a:	f000 f911 	bl	8017b40 <prvMACBProbePhy>

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 801791e:	2001      	movs	r0, #1
 8017920:	f000 f926 	bl	8017b70 <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             *  possible priority to ensure the interrupt handler can return directly
             *  to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             *  notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &( xEMACTaskHandle ) ) == pdPASS )
 8017924:	4b23      	ldr	r3, [pc, #140]	@ (80179b4 <xSTM32H_NetworkInterfaceInitialise+0x280>)
 8017926:	9301      	str	r3, [sp, #4]
 8017928:	2305      	movs	r3, #5
 801792a:	9300      	str	r3, [sp, #0]
 801792c:	2300      	movs	r3, #0
 801792e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8017932:	4921      	ldr	r1, [pc, #132]	@ (80179b8 <xSTM32H_NetworkInterfaceInitialise+0x284>)
 8017934:	4821      	ldr	r0, [pc, #132]	@ (80179bc <xSTM32H_NetworkInterfaceInitialise+0x288>)
 8017936:	f7ec f867 	bl	8003a08 <xTaskCreate>
 801793a:	4603      	mov	r3, r0
 801793c:	2b01      	cmp	r3, #1
 801793e:	d103      	bne.n	8017948 <xSTM32H_NetworkInterfaceInitialise+0x214>
            {
                /* The task was created successfully. */
                xMacInitStatus = eMACPass;
 8017940:	4b0e      	ldr	r3, [pc, #56]	@ (801797c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017942:	2201      	movs	r2, #1
 8017944:	701a      	strb	r2, [r3, #0]
 8017946:	e006      	b.n	8017956 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 8017948:	4b0c      	ldr	r3, [pc, #48]	@ (801797c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 801794a:	2202      	movs	r2, #2
 801794c:	701a      	strb	r2, [r3, #0]
 801794e:	e002      	b.n	8017956 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
        }
        else
        {
            /* HAL_ETH_Init() returned an error, the driver gets into a fatal error sate. */
            xMacInitStatus = eMACFailed;
 8017950:	4b0a      	ldr	r3, [pc, #40]	@ (801797c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017952:	2202      	movs	r2, #2
 8017954:	701a      	strb	r2, [r3, #0]
        }
    } /* ( xMacInitStatus == eMACInit ) */

    if( xMacInitStatus == eMACPass )
 8017956:	4b09      	ldr	r3, [pc, #36]	@ (801797c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017958:	781b      	ldrb	r3, [r3, #0]
 801795a:	2b01      	cmp	r3, #1
 801795c:	d108      	bne.n	8017970 <xSTM32H_NetworkInterfaceInitialise+0x23c>
    {
        if( xPhyObject.ulLinkStatusMask != 0U )
 801795e:	4b18      	ldr	r3, [pc, #96]	@ (80179c0 <xSTM32H_NetworkInterfaceInitialise+0x28c>)
 8017960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017962:	2b00      	cmp	r3, #0
 8017964:	d004      	beq.n	8017970 <xSTM32H_NetworkInterfaceInitialise+0x23c>
        {
            xResult = pdPASS;
 8017966:	2301      	movs	r3, #1
 8017968:	62fb      	str	r3, [r7, #44]	@ 0x2c
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 801796a:	4816      	ldr	r0, [pc, #88]	@ (80179c4 <xSTM32H_NetworkInterfaceInitialise+0x290>)
 801796c:	f009 ffa4 	bl	80218b8 <lUDPLoggingPrintf>
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
        }
    }

    return xResult;
 8017970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8017972:	4618      	mov	r0, r3
 8017974:	3730      	adds	r7, #48	@ 0x30
 8017976:	46bd      	mov	sp, r7
 8017978:	bd80      	pop	{r7, pc}
 801797a:	bf00      	nop
 801797c:	200022a8 	.word	0x200022a8
 8017980:	2000235c 	.word	0x2000235c
 8017984:	08026cb4 	.word	0x08026cb4
 8017988:	200022b4 	.word	0x200022b4
 801798c:	40028000 	.word	0x40028000
 8017990:	24040060 	.word	0x24040060
 8017994:	24040000 	.word	0x24040000
 8017998:	20002328 	.word	0x20002328
 801799c:	200022ac 	.word	0x200022ac
 80179a0:	200022b0 	.word	0x200022b0
 80179a4:	08026f40 	.word	0x08026f40
 80179a8:	08026f48 	.word	0x08026f48
 80179ac:	08026d2c 	.word	0x08026d2c
 80179b0:	08026d34 	.word	0x08026d34
 80179b4:	20002360 	.word	0x20002360
 80179b8:	08026d08 	.word	0x08026d08
 80179bc:	08017f25 	.word	0x08017f25
 80179c0:	20002364 	.word	0x20002364
 80179c4:	08026d14 	.word	0x08026d14

080179c8 <xSTM32H_GetPhyLinkStatus>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_GetPhyLinkStatus( NetworkInterface_t * pxInterface )
{
 80179c8:	b480      	push	{r7}
 80179ca:	b085      	sub	sp, #20
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( xPhyObject.ulLinkStatusMask != 0U )
 80179d0:	4b07      	ldr	r3, [pc, #28]	@ (80179f0 <xSTM32H_GetPhyLinkStatus+0x28>)
 80179d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d002      	beq.n	80179de <xSTM32H_GetPhyLinkStatus+0x16>
    {
        xReturn = pdPASS;
 80179d8:	2301      	movs	r3, #1
 80179da:	60fb      	str	r3, [r7, #12]
 80179dc:	e001      	b.n	80179e2 <xSTM32H_GetPhyLinkStatus+0x1a>
    }
    else
    {
        xReturn = pdFAIL;
 80179de:	2300      	movs	r3, #0
 80179e0:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 80179e2:	68fb      	ldr	r3, [r7, #12]
}
 80179e4:	4618      	mov	r0, r3
 80179e6:	3714      	adds	r7, #20
 80179e8:	46bd      	mov	sp, r7
 80179ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ee:	4770      	bx	lr
 80179f0:	20002364 	.word	0x20002364

080179f4 <pxSTM32H_FillInterfaceDescriptor>:
#endif
/*-----------------------------------------------------------*/

NetworkInterface_t * pxSTM32H_FillInterfaceDescriptor( BaseType_t xEMACIndex,
                                                       NetworkInterface_t * pxInterface )
{
 80179f4:	b580      	push	{r7, lr}
 80179f6:	b082      	sub	sp, #8
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	6078      	str	r0, [r7, #4]
 80179fc:	6039      	str	r1, [r7, #0]

/* This function pxSTM32Hxx_FillInterfaceDescriptor() adds a network-interface.
 * Make sure that the object pointed to by 'pxInterface'
 * is declared static or global, and that it will remain to exist. */

    snprintf( pcName, sizeof( pcName ), "eth%u", ( unsigned ) xEMACIndex );
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	4a10      	ldr	r2, [pc, #64]	@ (8017a44 <pxSTM32H_FillInterfaceDescriptor+0x50>)
 8017a02:	2111      	movs	r1, #17
 8017a04:	4810      	ldr	r0, [pc, #64]	@ (8017a48 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8017a06:	f00a ff83 	bl	8022910 <snprintf>

    memset( pxInterface, '\0', sizeof( *pxInterface ) );
 8017a0a:	2228      	movs	r2, #40	@ 0x28
 8017a0c:	2100      	movs	r1, #0
 8017a0e:	6838      	ldr	r0, [r7, #0]
 8017a10:	f00a fa7b 	bl	8021f0a <memset>
    pxInterface->pcName = pcName;                    /* Just for logging, debugging. */
 8017a14:	683b      	ldr	r3, [r7, #0]
 8017a16:	4a0c      	ldr	r2, [pc, #48]	@ (8017a48 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8017a18:	601a      	str	r2, [r3, #0]
    pxInterface->pvArgument = ( void * ) xEMACIndex; /* Has only meaning for the driver functions. */
 8017a1a:	687a      	ldr	r2, [r7, #4]
 8017a1c:	683b      	ldr	r3, [r7, #0]
 8017a1e:	605a      	str	r2, [r3, #4]
    pxInterface->pfInitialise = xSTM32H_NetworkInterfaceInitialise;
 8017a20:	683b      	ldr	r3, [r7, #0]
 8017a22:	4a0a      	ldr	r2, [pc, #40]	@ (8017a4c <pxSTM32H_FillInterfaceDescriptor+0x58>)
 8017a24:	609a      	str	r2, [r3, #8]
    pxInterface->pfOutput = xSTM32H_NetworkInterfaceOutput;
 8017a26:	683b      	ldr	r3, [r7, #0]
 8017a28:	4a09      	ldr	r2, [pc, #36]	@ (8017a50 <pxSTM32H_FillInterfaceDescriptor+0x5c>)
 8017a2a:	60da      	str	r2, [r3, #12]
    pxInterface->pfGetPhyLinkStatus = xSTM32H_GetPhyLinkStatus;
 8017a2c:	683b      	ldr	r3, [r7, #0]
 8017a2e:	4a09      	ldr	r2, [pc, #36]	@ (8017a54 <pxSTM32H_FillInterfaceDescriptor+0x60>)
 8017a30:	611a      	str	r2, [r3, #16]

    FreeRTOS_AddNetworkInterface( pxInterface );
 8017a32:	6838      	ldr	r0, [r7, #0]
 8017a34:	f7f5 f94c 	bl	800ccd0 <FreeRTOS_AddNetworkInterface>

    return pxInterface;
 8017a38:	683b      	ldr	r3, [r7, #0]
}
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	3708      	adds	r7, #8
 8017a3e:	46bd      	mov	sp, r7
 8017a40:	bd80      	pop	{r7, pc}
 8017a42:	bf00      	nop
 8017a44:	08026d3c 	.word	0x08026d3c
 8017a48:	200023a4 	.word	0x200023a4
 8017a4c:	08017735 	.word	0x08017735
 8017a50:	08017a59 	.word	0x08017a59
 8017a54:	080179c9 	.word	0x080179c9

08017a58 <xSTM32H_NetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceOutput( NetworkInterface_t * pxInterface,
                                                  NetworkBufferDescriptor_t * const pxBuffer,
                                                  BaseType_t xReleaseAfterSend )
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b08a      	sub	sp, #40	@ 0x28
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	60f8      	str	r0, [r7, #12]
 8017a60:	60b9      	str	r1, [r7, #8]
 8017a62:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8017a64:	2300      	movs	r3, #0
 8017a66:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 100U );
 8017a68:	2364      	movs	r3, #100	@ 0x64
 8017a6a:	623b      	str	r3, [r7, #32]
    uint8_t * pucTXBuffer;

    if( xSTM32H_GetPhyLinkStatus( pxInterface ) == pdPASS )
 8017a6c:	68f8      	ldr	r0, [r7, #12]
 8017a6e:	f7ff ffab 	bl	80179c8 <xSTM32H_GetPhyLinkStatus>
 8017a72:	4603      	mov	r3, r0
 8017a74:	2b01      	cmp	r3, #1
 8017a76:	d14c      	bne.n	8017b12 <xSTM32H_NetworkInterfaceOutput+0xba>
    {
        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            /* Zero-copy method, pass the buffer. */
            pucTXBuffer = pxBuffer->pucEthernetBuffer;
 8017a78:	68bb      	ldr	r3, [r7, #8]
 8017a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a7c:	61fb      	str	r3, [r7, #28]

            /* As the buffer is passed to the driver, it must exist.
             * The library takes care of this. */
            configASSERT( xReleaseAfterSend != pdFALSE );
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d104      	bne.n	8017a8e <xSTM32H_NetworkInterfaceOutput+0x36>
 8017a84:	f44f 7114 	mov.w	r1, #592	@ 0x250
 8017a88:	4827      	ldr	r0, [pc, #156]	@ (8017b28 <xSTM32H_NetworkInterfaceOutput+0xd0>)
 8017a8a:	f7e9 fdef 	bl	800166c <vAssertCalled>
            pucTXBuffer = Tx_Buff[ xEthHandle.TxDescList.CurTxDesc ];
            /* The copy method, left here for educational purposes. */
            configASSERT( pxBuffer->xDataLength <= sizeof( Tx_Buff[ 0 ] ) );
        #endif

        ETH_BufferTypeDef xTransmitBuffer =
 8017a8e:	69fb      	ldr	r3, [r7, #28]
 8017a90:	613b      	str	r3, [r7, #16]
        {
            .buffer = pucTXBuffer,
            .len    = pxBuffer->xDataLength,
 8017a92:	68bb      	ldr	r3, [r7, #8]
 8017a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        ETH_BufferTypeDef xTransmitBuffer =
 8017a96:	617b      	str	r3, [r7, #20]
 8017a98:	2300      	movs	r3, #0
 8017a9a:	61bb      	str	r3, [r7, #24]
            .next   = NULL /* FreeRTOS+TCP does not use linked buffers. */
        };
        /* This is the total length, which is equal to the buffer. */
        xTxConfig.Length = pxBuffer->xDataLength;
 8017a9c:	68bb      	ldr	r3, [r7, #8]
 8017a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017aa0:	4a22      	ldr	r2, [pc, #136]	@ (8017b2c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017aa2:	6053      	str	r3, [r2, #4]
        xTxConfig.TxBuffer = &( xTransmitBuffer );
 8017aa4:	4a21      	ldr	r2, [pc, #132]	@ (8017b2c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017aa6:	f107 0310 	add.w	r3, r7, #16
 8017aaa:	6093      	str	r3, [r2, #8]

        /* This counting semaphore counts the number of free TX DMA descriptors. */
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 8017aac:	4b20      	ldr	r3, [pc, #128]	@ (8017b30 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	6a39      	ldr	r1, [r7, #32]
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f7eb fc88 	bl	80033c8 <xQueueSemaphoreTake>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	2b01      	cmp	r3, #1
 8017abc:	d003      	beq.n	8017ac6 <xSTM32H_NetworkInterfaceOutput+0x6e>
        {
            /* If the logging routine is using the network, the following message
             * may cause a new error message. */
            FreeRTOS_printf( ( "emacps_send_message: Time-out waiting for TX buffer\n" ) );
 8017abe:	481d      	ldr	r0, [pc, #116]	@ (8017b34 <xSTM32H_NetworkInterfaceOutput+0xdc>)
 8017ac0:	f009 fefa 	bl	80218b8 <lUDPLoggingPrintf>
 8017ac4:	e025      	b.n	8017b12 <xSTM32H_NetworkInterfaceOutput+0xba>
  __ASM volatile ("dsb 0xF":::"memory");
 8017ac6:	f3bf 8f4f 	dsb	sy
}
 8017aca:	bf00      	nop
            /* Memory barrier: Make sure that the data written to the packet buffer got written. */
            __DSB();

            /* Get exclusive access to the TX process.
             * Both the IP-task and the EMAC task will work on the TX process. */
            if( xSemaphoreTake( xTransmissionMutex, xBlockTimeTicks ) != pdFAIL )
 8017acc:	4b1a      	ldr	r3, [pc, #104]	@ (8017b38 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	6a39      	ldr	r1, [r7, #32]
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	f7eb fc78 	bl	80033c8 <xQueueSemaphoreTake>
 8017ad8:	4603      	mov	r3, r0
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d019      	beq.n	8017b12 <xSTM32H_NetworkInterfaceOutput+0xba>
            {
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* Do not release the buffer. */
                    xReleaseAfterSend = pdFALSE;
 8017ade:	2300      	movs	r3, #0
 8017ae0:	607b      	str	r3, [r7, #4]
                     * to the physical memory. */
                    __DSB();
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 8017ae2:	4912      	ldr	r1, [pc, #72]	@ (8017b2c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017ae4:	4815      	ldr	r0, [pc, #84]	@ (8017b3c <xSTM32H_NetworkInterfaceOutput+0xe4>)
 8017ae6:	f000 fcef 	bl	80184c8 <HAL_ETH_Transmit_IT>
 8017aea:	4603      	mov	r3, r0
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d102      	bne.n	8017af6 <xSTM32H_NetworkInterfaceOutput+0x9e>
                {
                    xResult = pdPASS;
 8017af0:	2301      	movs	r3, #1
 8017af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8017af4:	e006      	b.n	8017b04 <xSTM32H_NetworkInterfaceOutput+0xac>
                }
                else
                {
                    /* As the transmission packet was not queued,
                     * the counting semaphore should be given. */
                    xSemaphoreGive( xTXDescriptorSemaphore );
 8017af6:	4b0e      	ldr	r3, [pc, #56]	@ (8017b30 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 8017af8:	6818      	ldr	r0, [r3, #0]
 8017afa:	2300      	movs	r3, #0
 8017afc:	2200      	movs	r2, #0
 8017afe:	2100      	movs	r1, #0
 8017b00:	f7eb faaa 	bl	8003058 <xQueueGenericSend>
                }

                /* And release the mutex. */
                xSemaphoreGive( xTransmissionMutex );
 8017b04:	4b0c      	ldr	r3, [pc, #48]	@ (8017b38 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 8017b06:	6818      	ldr	r0, [r3, #0]
 8017b08:	2300      	movs	r3, #0
 8017b0a:	2200      	movs	r2, #0
 8017b0c:	2100      	movs	r1, #0
 8017b0e:	f7eb faa3 	bl	8003058 <xQueueGenericSend>
            /* Call the standard trace macro to log the send event. */
            iptraceNETWORK_INTERFACE_TRANSMIT();
        }
    }

    if( xReleaseAfterSend != pdFALSE )
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d002      	beq.n	8017b1e <xSTM32H_NetworkInterfaceOutput+0xc6>
    {
        vReleaseNetworkBufferAndDescriptor( pxBuffer );
 8017b18:	68b8      	ldr	r0, [r7, #8]
 8017b1a:	f7ff f825 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
    }

    return xResult;
 8017b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017b20:	4618      	mov	r0, r3
 8017b22:	3728      	adds	r7, #40	@ 0x28
 8017b24:	46bd      	mov	sp, r7
 8017b26:	bd80      	pop	{r7, pc}
 8017b28:	08026cb4 	.word	0x08026cb4
 8017b2c:	20002328 	.word	0x20002328
 8017b30:	200022ac 	.word	0x200022ac
 8017b34:	08026d44 	.word	0x08026d44
 8017b38:	200022b0 	.word	0x200022b0
 8017b3c:	200022b4 	.word	0x200022b4

08017b40 <prvMACBProbePhy>:
/*******************************************************************************
*                      Network Interface Static Functions
*******************************************************************************/

static void prvMACBProbePhy( void )
{
 8017b40:	b580      	push	{r7, lr}
 8017b42:	af00      	add	r7, sp, #0
    /* Bind the write and read access functions. */
    vPhyInitialise( &( xPhyObject ),
 8017b44:	4a06      	ldr	r2, [pc, #24]	@ (8017b60 <prvMACBProbePhy+0x20>)
 8017b46:	4907      	ldr	r1, [pc, #28]	@ (8017b64 <prvMACBProbePhy+0x24>)
 8017b48:	4807      	ldr	r0, [pc, #28]	@ (8017b68 <prvMACBProbePhy+0x28>)
 8017b4a:	f7ff f8c5 	bl	8016cd8 <vPhyInitialise>
                    ( xApplicationPhyReadHook_t ) ETH_PHY_IO_ReadReg,
                    ( xApplicationPhyWriteHook_t ) ETH_PHY_IO_WriteReg );
    /* Poll the bus for all connected PHY's. */
    xPhyDiscover( &( xPhyObject ) );
 8017b4e:	4806      	ldr	r0, [pc, #24]	@ (8017b68 <prvMACBProbePhy+0x28>)
 8017b50:	f7ff f8d8 	bl	8016d04 <xPhyDiscover>
    /* Configure them using the properties provided. */
    xPhyConfigure( &( xPhyObject ), &( xPHYProperties ) );
 8017b54:	4905      	ldr	r1, [pc, #20]	@ (8017b6c <prvMACBProbePhy+0x2c>)
 8017b56:	4804      	ldr	r0, [pc, #16]	@ (8017b68 <prvMACBProbePhy+0x28>)
 8017b58:	f7ff f9d2 	bl	8016f00 <xPhyConfigure>
}
 8017b5c:	bf00      	nop
 8017b5e:	bd80      	pop	{r7, pc}
 8017b60:	08017d61 	.word	0x08017d61
 8017b64:	08017d29 	.word	0x08017d29
 8017b68:	20002364 	.word	0x20002364
 8017b6c:	08027040 	.word	0x08027040

08017b70 <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b09e      	sub	sp, #120	@ 0x78
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	6078      	str	r0, [r7, #4]
    ETH_MACConfigTypeDef MACConf;
    uint32_t speed = 0, duplex = 0;
 8017b78:	2300      	movs	r3, #0
 8017b7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	673b      	str	r3, [r7, #112]	@ 0x70

    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 8017b80:	4b25      	ldr	r3, [pc, #148]	@ (8017c18 <prvEthernetUpdateConfig+0xa8>)
 8017b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017b84:	687a      	ldr	r2, [r7, #4]
 8017b86:	4619      	mov	r1, r3
 8017b88:	4824      	ldr	r0, [pc, #144]	@ (8017c1c <prvEthernetUpdateConfig+0xac>)
 8017b8a:	f009 fe95 	bl	80218b8 <lUDPLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d103      	bne.n	8017b9c <prvEthernetUpdateConfig+0x2c>
 8017b94:	4b20      	ldr	r3, [pc, #128]	@ (8017c18 <prvEthernetUpdateConfig+0xa8>)
 8017b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d035      	beq.n	8017c08 <prvEthernetUpdateConfig+0x98>
    {
        /* Restart the auto-negotiation. */
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &( xPhyObject ) ) );
 8017b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8017c18 <prvEthernetUpdateConfig+0xa8>)
 8017b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ba0:	2201      	movs	r2, #1
 8017ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8017ba6:	3b01      	subs	r3, #1
 8017ba8:	4619      	mov	r1, r3
 8017baa:	481b      	ldr	r0, [pc, #108]	@ (8017c18 <prvEthernetUpdateConfig+0xa8>)
 8017bac:	f7ff faae 	bl	801710c <xPhyStartAutoNegotiation>

        /* Configure the MAC with the Duplex Mode fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8017bb0:	4b19      	ldr	r3, [pc, #100]	@ (8017c18 <prvEthernetUpdateConfig+0xa8>)
 8017bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8017bb6:	2b02      	cmp	r3, #2
 8017bb8:	d103      	bne.n	8017bc2 <prvEthernetUpdateConfig+0x52>
        {
            duplex = ETH_FULLDUPLEX_MODE;
 8017bba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8017bbe:	673b      	str	r3, [r7, #112]	@ 0x70
 8017bc0:	e001      	b.n	8017bc6 <prvEthernetUpdateConfig+0x56>
        }
        else
        {
            duplex = ETH_HALFDUPLEX_MODE;
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        /* Configure the MAC with the speed fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8017bc6:	4b14      	ldr	r3, [pc, #80]	@ (8017c18 <prvEthernetUpdateConfig+0xa8>)
 8017bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017bcc:	2b01      	cmp	r3, #1
 8017bce:	d102      	bne.n	8017bd6 <prvEthernetUpdateConfig+0x66>
        {
            speed = ETH_SPEED_10M;
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	677b      	str	r3, [r7, #116]	@ 0x74
 8017bd4:	e002      	b.n	8017bdc <prvEthernetUpdateConfig+0x6c>
        }
        else
        {
            speed = ETH_SPEED_100M;
 8017bd6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8017bda:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        /* Get MAC and configure it */
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 8017bdc:	f107 030c 	add.w	r3, r7, #12
 8017be0:	4619      	mov	r1, r3
 8017be2:	480f      	ldr	r0, [pc, #60]	@ (8017c20 <prvEthernetUpdateConfig+0xb0>)
 8017be4:	f000 ffcc 	bl	8018b80 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8017be8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017bea:	627b      	str	r3, [r7, #36]	@ 0x24
        MACConf.Speed = speed;
 8017bec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017bee:	623b      	str	r3, [r7, #32]
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 8017bf0:	f107 030c 	add.w	r3, r7, #12
 8017bf4:	4619      	mov	r1, r3
 8017bf6:	480a      	ldr	r0, [pc, #40]	@ (8017c20 <prvEthernetUpdateConfig+0xb0>)
 8017bf8:	f001 f996 	bl	8018f28 <HAL_ETH_SetMACConfig>
        #if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 )
        {
            MACConf.ChecksumOffload = ENABLE;
 8017bfc:	2301      	movs	r3, #1
 8017bfe:	743b      	strb	r3, [r7, #16]
            MACConf.ChecksumOffload = DISABLE;
        }
        #endif /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 ) */

        /* Restart MAC interface */
        HAL_ETH_Start_IT( &( xEthHandle ) );
 8017c00:	4807      	ldr	r0, [pc, #28]	@ (8017c20 <prvEthernetUpdateConfig+0xb0>)
 8017c02:	f000 fb64 	bl	80182ce <HAL_ETH_Start_IT>
 8017c06:	e003      	b.n	8017c10 <prvEthernetUpdateConfig+0xa0>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 8017c08:	4805      	ldr	r0, [pc, #20]	@ (8017c20 <prvEthernetUpdateConfig+0xb0>)
 8017c0a:	f000 fbe5 	bl	80183d8 <HAL_ETH_Stop_IT>
    }
}
 8017c0e:	bf00      	nop
 8017c10:	bf00      	nop
 8017c12:	3778      	adds	r7, #120	@ 0x78
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bd80      	pop	{r7, pc}
 8017c18:	20002364 	.word	0x20002364
 8017c1c:	08026d7c 	.word	0x08026d7c
 8017c20:	200022b4 	.word	0x200022b4

08017c24 <prvNetworkInterfaceInput>:
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b08c      	sub	sp, #48	@ 0x30
 8017c28:	af00      	add	r7, sp, #0
    BaseType_t xReturn = 0;
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* For as long as a packet is immediately available. */
    for( ; ; )
    {
        NetworkBufferDescriptor_t * pxBufferDescriptor;
        NetworkBufferDescriptor_t * pxReceivedBuffer = NULL;
 8017c2e:	2300      	movs	r3, #0
 8017c30:	62bb      	str	r3, [r7, #40]	@ 0x28
        ETH_BufferTypeDef data_buffer;
        size_t uxDataLength;
        size_t uxLength;

        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 8017c32:	f107 0308 	add.w	r3, r7, #8
 8017c36:	4619      	mov	r1, r3
 8017c38:	4838      	ldr	r0, [pc, #224]	@ (8017d1c <prvNetworkInterfaceInput+0xf8>)
 8017c3a:	f000 fd19 	bl	8018670 <HAL_ETH_GetRxData>
 8017c3e:	61f8      	str	r0, [r7, #28]

        if( uxDataLength == 0U )
 8017c40:	69fb      	ldr	r3, [r7, #28]
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d101      	bne.n	8017c4a <prvNetworkInterfaceInput+0x26>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
            }
        }
    }

    return xReturn;
 8017c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c48:	e064      	b.n	8017d14 <prvNetworkInterfaceInput+0xf0>
        xReturn++;
 8017c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c4c:	3301      	adds	r3, #1
 8017c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uxLength = ETH_RX_BUF_SIZE;
 8017c50:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8017c54:	61bb      	str	r3, [r7, #24]
            if( data_buffer.buffer != NULL )
 8017c56:	68bb      	ldr	r3, [r7, #8]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d004      	beq.n	8017c66 <prvNetworkInterfaceInput+0x42>
                pxReceivedBuffer = pxPacketBuffer_to_NetworkBuffer( data_buffer.buffer );
 8017c5c:	68bb      	ldr	r3, [r7, #8]
 8017c5e:	4618      	mov	r0, r3
 8017c60:	f7f2 f8ab 	bl	8009dba <pxPacketBuffer_to_NetworkBuffer>
 8017c64:	62b8      	str	r0, [r7, #40]	@ 0x28
            if( pxReceivedBuffer == NULL )
 8017c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d102      	bne.n	8017c72 <prvNetworkInterfaceInput+0x4e>
                FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 8017c6c:	482c      	ldr	r0, [pc, #176]	@ (8017d20 <prvNetworkInterfaceInput+0xfc>)
 8017c6e:	f009 fe23 	bl	80218b8 <lUDPLoggingPrintf>
        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 8017c72:	2100      	movs	r1, #0
 8017c74:	69b8      	ldr	r0, [r7, #24]
 8017c76:	f7fe ff0f 	bl	8016a98 <pxGetNetworkBufferWithDescriptor>
 8017c7a:	6178      	str	r0, [r7, #20]
            if( pxBufferDescriptor == NULL )
 8017c7c:	697b      	ldr	r3, [r7, #20]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d102      	bne.n	8017c88 <prvNetworkInterfaceInput+0x64>
                pxReceivedBuffer = NULL;
 8017c82:	2300      	movs	r3, #0
 8017c84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017c86:	e005      	b.n	8017c94 <prvNetworkInterfaceInput+0x70>
            else if( pxReceivedBuffer != NULL )
 8017c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d002      	beq.n	8017c94 <prvNetworkInterfaceInput+0x70>
                pxReceivedBuffer->xDataLength = uxDataLength;
 8017c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c90:	69fa      	ldr	r2, [r7, #28]
 8017c92:	629a      	str	r2, [r3, #40]	@ 0x28
            uint8_t * pucBuffer = NULL;
 8017c94:	2300      	movs	r3, #0
 8017c96:	627b      	str	r3, [r7, #36]	@ 0x24
            if( pxBufferDescriptor != NULL )
 8017c98:	697b      	ldr	r3, [r7, #20]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d002      	beq.n	8017ca4 <prvNetworkInterfaceInput+0x80>
                pucBuffer = pxBufferDescriptor->pucEthernetBuffer;
 8017c9e:	697b      	ldr	r3, [r7, #20]
 8017ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ca2:	627b      	str	r3, [r7, #36]	@ 0x24
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 8017ca4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017ca6:	481d      	ldr	r0, [pc, #116]	@ (8017d1c <prvNetworkInterfaceInput+0xf8>)
 8017ca8:	f000 fd2a 	bl	8018700 <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 8017cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d0bd      	beq.n	8017c2e <prvNetworkInterfaceInput+0xa>
            BaseType_t xDoRelease = pdFALSE;
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	623b      	str	r3, [r7, #32]
            if( eConsiderFrameForProcessing( pxReceivedBuffer->pucEthernetBuffer ) != eProcessBuffer )
 8017cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017cba:	4618      	mov	r0, r3
 8017cbc:	f7f1 f9e4 	bl	8009088 <eConsiderFrameForProcessing>
 8017cc0:	4603      	mov	r3, r0
 8017cc2:	2b01      	cmp	r3, #1
 8017cc4:	d002      	beq.n	8017ccc <prvNetworkInterfaceInput+0xa8>
                xDoRelease = pdTRUE;
 8017cc6:	2301      	movs	r3, #1
 8017cc8:	623b      	str	r3, [r7, #32]
 8017cca:	e01c      	b.n	8017d06 <prvNetworkInterfaceInput+0xe2>
                IPStackEvent_t xRxEvent =
 8017ccc:	2301      	movs	r3, #1
 8017cce:	703b      	strb	r3, [r7, #0]
 8017cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cd2:	607b      	str	r3, [r7, #4]
                pxReceivedBuffer->pxInterface = pxMyInterface;
 8017cd4:	4b13      	ldr	r3, [pc, #76]	@ (8017d24 <prvNetworkInterfaceInput+0x100>)
 8017cd6:	681a      	ldr	r2, [r3, #0]
 8017cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cda:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReceivedBuffer->pxEndPoint = FreeRTOS_MatchingEndpoint( pxMyInterface, pxReceivedBuffer->pucEthernetBuffer );
 8017cdc:	4b11      	ldr	r3, [pc, #68]	@ (8017d24 <prvNetworkInterfaceInput+0x100>)
 8017cde:	681a      	ldr	r2, [r3, #0]
 8017ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ce4:	4619      	mov	r1, r3
 8017ce6:	4610      	mov	r0, r2
 8017ce8:	f7f5 fb96 	bl	800d418 <FreeRTOS_MatchingEndpoint>
 8017cec:	4602      	mov	r2, r0
 8017cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cf0:	631a      	str	r2, [r3, #48]	@ 0x30
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 8017cf2:	463b      	mov	r3, r7
 8017cf4:	2100      	movs	r1, #0
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	f7f1 f972 	bl	8008fe0 <xSendEventStructToIPTask>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d101      	bne.n	8017d06 <prvNetworkInterfaceInput+0xe2>
                    xDoRelease = pdTRUE;
 8017d02:	2301      	movs	r3, #1
 8017d04:	623b      	str	r3, [r7, #32]
            if( xDoRelease != pdFALSE )
 8017d06:	6a3b      	ldr	r3, [r7, #32]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d090      	beq.n	8017c2e <prvNetworkInterfaceInput+0xa>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
 8017d0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017d0e:	f7fe ff2b 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
    {
 8017d12:	e78c      	b.n	8017c2e <prvNetworkInterfaceInput+0xa>
}
 8017d14:	4618      	mov	r0, r3
 8017d16:	3730      	adds	r7, #48	@ 0x30
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}
 8017d1c:	200022b4 	.word	0x200022b4
 8017d20:	08026db0 	.word	0x08026db0
 8017d24:	2000235c 	.word	0x2000235c

08017d28 <ETH_PHY_IO_ReadReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_ReadReg( uint32_t ulDevAddr,
                                   uint32_t ulRegAddr,
                                   uint32_t * pulRegVal )
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b086      	sub	sp, #24
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	60f8      	str	r0, [r7, #12]
 8017d30:	60b9      	str	r1, [r7, #8]
 8017d32:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8017d34:	f04f 33ff 	mov.w	r3, #4294967295
 8017d38:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	68ba      	ldr	r2, [r7, #8]
 8017d3e:	68f9      	ldr	r1, [r7, #12]
 8017d40:	4806      	ldr	r0, [pc, #24]	@ (8017d5c <ETH_PHY_IO_ReadReg+0x34>)
 8017d42:	f000 fe75 	bl	8018a30 <HAL_ETH_ReadPHYRegister>
 8017d46:	4603      	mov	r3, r0
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d101      	bne.n	8017d50 <ETH_PHY_IO_ReadReg+0x28>
    {
        iResult = 0;
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8017d50:	697b      	ldr	r3, [r7, #20]
}
 8017d52:	4618      	mov	r0, r3
 8017d54:	3718      	adds	r7, #24
 8017d56:	46bd      	mov	sp, r7
 8017d58:	bd80      	pop	{r7, pc}
 8017d5a:	bf00      	nop
 8017d5c:	200022b4 	.word	0x200022b4

08017d60 <ETH_PHY_IO_WriteReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_WriteReg( uint32_t ulDevAddr,
                                    uint32_t ulRegAddr,
                                    uint32_t pulRegVal )
{
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b086      	sub	sp, #24
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	60f8      	str	r0, [r7, #12]
 8017d68:	60b9      	str	r1, [r7, #8]
 8017d6a:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8017d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8017d70:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	68ba      	ldr	r2, [r7, #8]
 8017d76:	68f9      	ldr	r1, [r7, #12]
 8017d78:	4806      	ldr	r0, [pc, #24]	@ (8017d94 <ETH_PHY_IO_WriteReg+0x34>)
 8017d7a:	f000 fead 	bl	8018ad8 <HAL_ETH_WritePHYRegister>
 8017d7e:	4603      	mov	r3, r0
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d101      	bne.n	8017d88 <ETH_PHY_IO_WriteReg+0x28>
    {
        iResult = 0;
 8017d84:	2300      	movs	r3, #0
 8017d86:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8017d88:	697b      	ldr	r3, [r7, #20]
}
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	3718      	adds	r7, #24
 8017d8e:	46bd      	mov	sp, r7
 8017d90:	bd80      	pop	{r7, pc}
 8017d92:	bf00      	nop
 8017d94:	200022b4 	.word	0x200022b4

08017d98 <ETH_IRQHandler>:
/*******************************************************************************
*                   Ethernet Handling Functions
*******************************************************************************/

void ETH_IRQHandler( void )
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &( xEthHandle ) );
 8017d9c:	4802      	ldr	r0, [pc, #8]	@ (8017da8 <ETH_IRQHandler+0x10>)
 8017d9e:	f000 fd27 	bl	80187f0 <HAL_ETH_IRQHandler>
}
 8017da2:	bf00      	nop
 8017da4:	bd80      	pop	{r7, pc}
 8017da6:	bf00      	nop
 8017da8:	200022b4 	.word	0x200022b4

08017dac <prvSetFlagsAndNotify>:
/*-----------------------------------------------------------*/

static void prvSetFlagsAndNotify( uint32_t ulFlags )
{
 8017dac:	b580      	push	{r7, lr}
 8017dae:	b084      	sub	sp, #16
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8017db4:	2300      	movs	r3, #0
 8017db6:	60fb      	str	r3, [r7, #12]

    /* Ethernet RX-Complete callback function, elsewhere declared as weak.
     * No critical section needed, this function is called from an ISR. */
    ulISREvents |= ulFlags;
 8017db8:	4b10      	ldr	r3, [pc, #64]	@ (8017dfc <prvSetFlagsAndNotify+0x50>)
 8017dba:	681a      	ldr	r2, [r3, #0]
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	4313      	orrs	r3, r2
 8017dc0:	4a0e      	ldr	r2, [pc, #56]	@ (8017dfc <prvSetFlagsAndNotify+0x50>)
 8017dc2:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 8017dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8017e00 <prvSetFlagsAndNotify+0x54>)
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d012      	beq.n	8017df2 <prvSetFlagsAndNotify+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 8017dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8017e00 <prvSetFlagsAndNotify+0x54>)
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	f107 020c 	add.w	r2, r7, #12
 8017dd4:	2100      	movs	r1, #0
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	f7ed fbd6 	bl	8005588 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d007      	beq.n	8017df2 <prvSetFlagsAndNotify+0x46>
 8017de2:	4b08      	ldr	r3, [pc, #32]	@ (8017e04 <prvSetFlagsAndNotify+0x58>)
 8017de4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017de8:	601a      	str	r2, [r3, #0]
 8017dea:	f3bf 8f4f 	dsb	sy
 8017dee:	f3bf 8f6f 	isb	sy
    }
}
 8017df2:	bf00      	nop
 8017df4:	3710      	adds	r7, #16
 8017df6:	46bd      	mov	sp, r7
 8017df8:	bd80      	pop	{r7, pc}
 8017dfa:	bf00      	nop
 8017dfc:	200022a4 	.word	0x200022a4
 8017e00:	20002360 	.word	0x20002360
 8017e04:	e000ed04 	.word	0xe000ed04

08017e08 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	b082      	sub	sp, #8
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_TX_EVENT );
 8017e10:	2002      	movs	r0, #2
 8017e12:	f7ff ffcb 	bl	8017dac <prvSetFlagsAndNotify>
}
 8017e16:	bf00      	nop
 8017e18:	3708      	adds	r7, #8
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	bd80      	pop	{r7, pc}

08017e1e <HAL_ETH_RxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 8017e1e:	b580      	push	{r7, lr}
 8017e20:	b082      	sub	sp, #8
 8017e22:	af00      	add	r7, sp, #0
 8017e24:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_RX_EVENT );
 8017e26:	2001      	movs	r0, #1
 8017e28:	f7ff ffc0 	bl	8017dac <prvSetFlagsAndNotify>
}
 8017e2c:	bf00      	nop
 8017e2e:	3708      	adds	r7, #8
 8017e30:	46bd      	mov	sp, r7
 8017e32:	bd80      	pop	{r7, pc}

08017e34 <HAL_ETH_DMAErrorCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_DMAErrorCallback( ETH_HandleTypeDef * heth )
{
 8017e34:	b580      	push	{r7, lr}
 8017e36:	b082      	sub	sp, #8
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_ERR_EVENT );
 8017e3c:	2004      	movs	r0, #4
 8017e3e:	f7ff ffb5 	bl	8017dac <prvSetFlagsAndNotify>
}
 8017e42:	bf00      	nop
 8017e44:	3708      	adds	r7, #8
 8017e46:	46bd      	mov	sp, r7
 8017e48:	bd80      	pop	{r7, pc}
	...

08017e4c <vNetworkInterfaceAllocateRAMToBuffers>:
    __attribute__( ( section( ".ethernet_data" ) ) )
#endif /* ( ipconfigZERO_COPY_RX_DRIVER != 0 || ipconfigZERO_COPY_TX_DRIVER != 0 ) */
__attribute__( ( aligned( 32 ) ) );

void vNetworkInterfaceAllocateRAMToBuffers( NetworkBufferDescriptor_t pxNetworkBuffers[ ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ] )
{
 8017e4c:	b480      	push	{r7}
 8017e4e:	b085      	sub	sp, #20
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	6078      	str	r0, [r7, #4]
    uint8_t * ucRAMBuffer = ucNetworkPackets;
 8017e54:	4b15      	ldr	r3, [pc, #84]	@ (8017eac <vNetworkInterfaceAllocateRAMToBuffers+0x60>)
 8017e56:	60fb      	str	r3, [r7, #12]
    uint32_t ul;

    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8017e58:	2300      	movs	r3, #0
 8017e5a:	60bb      	str	r3, [r7, #8]
 8017e5c:	e01c      	b.n	8017e98 <vNetworkInterfaceAllocateRAMToBuffers+0x4c>
    {
        pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 8017e5e:	68ba      	ldr	r2, [r7, #8]
 8017e60:	4613      	mov	r3, r2
 8017e62:	00db      	lsls	r3, r3, #3
 8017e64:	1a9b      	subs	r3, r3, r2
 8017e66:	00db      	lsls	r3, r3, #3
 8017e68:	461a      	mov	r2, r3
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	4413      	add	r3, r2
 8017e6e:	68fa      	ldr	r2, [r7, #12]
 8017e70:	320a      	adds	r2, #10
 8017e72:	625a      	str	r2, [r3, #36]	@ 0x24
        *( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 8017e74:	68ba      	ldr	r2, [r7, #8]
 8017e76:	4613      	mov	r3, r2
 8017e78:	00db      	lsls	r3, r3, #3
 8017e7a:	1a9b      	subs	r3, r3, r2
 8017e7c:	00db      	lsls	r3, r3, #3
 8017e7e:	461a      	mov	r2, r3
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	4413      	add	r3, r2
 8017e84:	461a      	mov	r2, r3
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	601a      	str	r2, [r3, #0]
        ucRAMBuffer += ETH_RX_BUF_SIZE;
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8017e90:	60fb      	str	r3, [r7, #12]
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8017e92:	68bb      	ldr	r3, [r7, #8]
 8017e94:	3301      	adds	r3, #1
 8017e96:	60bb      	str	r3, [r7, #8]
 8017e98:	68bb      	ldr	r3, [r7, #8]
 8017e9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8017e9c:	d9df      	bls.n	8017e5e <vNetworkInterfaceAllocateRAMToBuffers+0x12>
    }
}
 8017e9e:	bf00      	nop
 8017ea0:	bf00      	nop
 8017ea2:	3714      	adds	r7, #20
 8017ea4:	46bd      	mov	sp, r7
 8017ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eaa:	4770      	bx	lr
 8017eac:	240400c0 	.word	0x240400c0

08017eb0 <vClearOptionBit>:
/*-----------------------------------------------------------*/

static void vClearOptionBit( volatile uint32_t * pulValue,
                             uint32_t ulValue )
{
 8017eb0:	b580      	push	{r7, lr}
 8017eb2:	b082      	sub	sp, #8
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	6078      	str	r0, [r7, #4]
 8017eb8:	6039      	str	r1, [r7, #0]
    portENTER_CRITICAL();
 8017eba:	f7ed fe19 	bl	8005af0 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	681a      	ldr	r2, [r3, #0]
 8017ec2:	683b      	ldr	r3, [r7, #0]
 8017ec4:	43db      	mvns	r3, r3
 8017ec6:	401a      	ands	r2, r3
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	601a      	str	r2, [r3, #0]
    portEXIT_CRITICAL();
 8017ecc:	f7ed fe3c 	bl	8005b48 <vPortExitCritical>
}
 8017ed0:	bf00      	nop
 8017ed2:	3708      	adds	r7, #8
 8017ed4:	46bd      	mov	sp, r7
 8017ed6:	bd80      	pop	{r7, pc}

08017ed8 <uxGetOwnCount>:
/*-----------------------------------------------------------*/

#if ( ipconfigHAS_PRINTF != 0 )
    static size_t uxGetOwnCount( ETH_HandleTypeDef * heth )
    {
 8017ed8:	b480      	push	{r7}
 8017eda:	b087      	sub	sp, #28
 8017edc:	af00      	add	r7, sp, #0
 8017ede:	6078      	str	r0, [r7, #4]
        BaseType_t xIndex;
        BaseType_t xCount = 0;
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	613b      	str	r3, [r7, #16]
        ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	3330      	adds	r3, #48	@ 0x30
 8017ee8:	60fb      	str	r3, [r7, #12]

        /* Count the number of RX descriptors that are owned by DMA. */
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8017eea:	2300      	movs	r3, #0
 8017eec:	617b      	str	r3, [r7, #20]
 8017eee:	e00e      	b.n	8017f0e <uxGetOwnCount+0x36>
        {
            __IO const ETH_DMADescTypeDef * dmarxdesc =
                ( __IO const ETH_DMADescTypeDef * )dmarxdesclist->RxDesc[ xIndex ];
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	697a      	ldr	r2, [r7, #20]
 8017ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            __IO const ETH_DMADescTypeDef * dmarxdesc =
 8017ef8:	60bb      	str	r3, [r7, #8]

            if( ( dmarxdesc->DESC3 & ETH_DMARXNDESCWBF_OWN ) != 0U )
 8017efa:	68bb      	ldr	r3, [r7, #8]
 8017efc:	68db      	ldr	r3, [r3, #12]
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	da02      	bge.n	8017f08 <uxGetOwnCount+0x30>
            {
                xCount++;
 8017f02:	693b      	ldr	r3, [r7, #16]
 8017f04:	3301      	adds	r3, #1
 8017f06:	613b      	str	r3, [r7, #16]
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8017f08:	697b      	ldr	r3, [r7, #20]
 8017f0a:	3301      	adds	r3, #1
 8017f0c:	617b      	str	r3, [r7, #20]
 8017f0e:	697b      	ldr	r3, [r7, #20]
 8017f10:	2b03      	cmp	r3, #3
 8017f12:	d9ed      	bls.n	8017ef0 <uxGetOwnCount+0x18>
            }
        }

        return xCount;
 8017f14:	693b      	ldr	r3, [r7, #16]
    }
 8017f16:	4618      	mov	r0, r3
 8017f18:	371c      	adds	r7, #28
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f20:	4770      	bx	lr
	...

08017f24 <prvEMACHandlerTask>:
#endif /* if ( ipconfigHAS_PRINTF != 0 ) */
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b088      	sub	sp, #32
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
/* When sending a packet, all descriptors in the transmission channel may
 * be occupied.  In stat case, the program will wait (block) for the counting
 * semaphore. */
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100U );
 8017f2c:	2364      	movs	r3, #100	@ 0x64
 8017f2e:	613b      	str	r3, [r7, #16]

    #if ( ipconfigHAS_PRINTF != 0 )
        size_t uxTXDescriptorsUsed = 0U;
 8017f30:	2300      	movs	r3, #0
 8017f32:	61fb      	str	r3, [r7, #28]
        size_t uxRXDescriptorsUsed = ETH_RX_DESC_CNT;
 8017f34:	2304      	movs	r3, #4
 8017f36:	61bb      	str	r3, [r7, #24]

    ( void ) pvParameters;

    for( ; ; )
    {
        BaseType_t xResult = 0;
 8017f38:	2300      	movs	r3, #0
 8017f3a:	617b      	str	r3, [r7, #20]
            size_t uxOwnCount;

            /* Call a function that monitors resources: the amount of free network
             * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
             * for more detailed comments. */
            vPrintResourceStats();
 8017f3c:	f7f2 f8d6 	bl	800a0ec <vPrintResourceStats>

            /* Some more statistics: number of free descriptors. */
            uxUsed = ETH_TX_DESC_CNT - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8017f40:	4b43      	ldr	r3, [pc, #268]	@ (8018050 <prvEMACHandlerTask+0x12c>)
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	4618      	mov	r0, r3
 8017f46:	f7eb fb2d 	bl	80035a4 <uxQueueMessagesWaiting>
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	f1c3 0304 	rsb	r3, r3, #4
 8017f50:	60fb      	str	r3, [r7, #12]

            if( uxTXDescriptorsUsed < uxUsed )
 8017f52:	69fa      	ldr	r2, [r7, #28]
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	429a      	cmp	r2, r3
 8017f58:	d206      	bcs.n	8017f68 <prvEMACHandlerTask+0x44>
            {
                uxTXDescriptorsUsed = uxUsed;
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "TX descriptors %u/%u\n",
 8017f5e:	2204      	movs	r2, #4
 8017f60:	69f9      	ldr	r1, [r7, #28]
 8017f62:	483c      	ldr	r0, [pc, #240]	@ (8018054 <prvEMACHandlerTask+0x130>)
 8017f64:	f009 fca8 	bl	80218b8 <lUDPLoggingPrintf>
                                   uxTXDescriptorsUsed,
                                   ETH_TX_DESC_CNT ) );
            }

            uxOwnCount = uxGetOwnCount( &( xEthHandle ) );
 8017f68:	483b      	ldr	r0, [pc, #236]	@ (8018058 <prvEMACHandlerTask+0x134>)
 8017f6a:	f7ff ffb5 	bl	8017ed8 <uxGetOwnCount>
 8017f6e:	60b8      	str	r0, [r7, #8]

            if( uxRXDescriptorsUsed > uxOwnCount )
 8017f70:	69ba      	ldr	r2, [r7, #24]
 8017f72:	68bb      	ldr	r3, [r7, #8]
 8017f74:	429a      	cmp	r2, r3
 8017f76:	d906      	bls.n	8017f86 <prvEMACHandlerTask+0x62>
            {
                uxRXDescriptorsUsed = uxOwnCount;
 8017f78:	68bb      	ldr	r3, [r7, #8]
 8017f7a:	61bb      	str	r3, [r7, #24]
                FreeRTOS_printf( ( "RX descriptors %u/%u\n",
 8017f7c:	2204      	movs	r2, #4
 8017f7e:	69b9      	ldr	r1, [r7, #24]
 8017f80:	4836      	ldr	r0, [pc, #216]	@ (801805c <prvEMACHandlerTask+0x138>)
 8017f82:	f009 fc99 	bl	80218b8 <lUDPLoggingPrintf>
                                   ETH_RX_DESC_CNT ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 8017f86:	693a      	ldr	r2, [r7, #16]
 8017f88:	2100      	movs	r1, #0
 8017f8a:	2000      	movs	r0, #0
 8017f8c:	f7ec ff8c 	bl	8004ea8 <ulTaskGenericNotifyTake>

        /* Wait for the Ethernet MAC interrupt to indicate that another packet
         * has been received. */
        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0U )
 8017f90:	4b33      	ldr	r3, [pc, #204]	@ (8018060 <prvEMACHandlerTask+0x13c>)
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	f003 0301 	and.w	r3, r3, #1
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d006      	beq.n	8017faa <prvEMACHandlerTask+0x86>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_RX_EVENT );
 8017f9c:	2101      	movs	r1, #1
 8017f9e:	4830      	ldr	r0, [pc, #192]	@ (8018060 <prvEMACHandlerTask+0x13c>)
 8017fa0:	f7ff ff86 	bl	8017eb0 <vClearOptionBit>
            xResult = prvNetworkInterfaceInput();
 8017fa4:	f7ff fe3e 	bl	8017c24 <prvNetworkInterfaceInput>
 8017fa8:	6178      	str	r0, [r7, #20]
        /* When a packet has been transmitted, the descriptor must be
         * prepared for a next transmission.
         * When using zero-copy, the network buffer must be released
         * ( i.e. returned to the pool of network buffers ). */

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0U )
 8017faa:	4b2d      	ldr	r3, [pc, #180]	@ (8018060 <prvEMACHandlerTask+0x13c>)
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	f003 0302 	and.w	r3, r3, #2
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d017      	beq.n	8017fe6 <prvEMACHandlerTask+0xc2>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_TX_EVENT );
 8017fb6:	2102      	movs	r1, #2
 8017fb8:	4829      	ldr	r0, [pc, #164]	@ (8018060 <prvEMACHandlerTask+0x13c>)
 8017fba:	f7ff ff79 	bl	8017eb0 <vClearOptionBit>

            if( xSemaphoreTake( xTransmissionMutex, 10000U ) != pdFAIL )
 8017fbe:	4b29      	ldr	r3, [pc, #164]	@ (8018064 <prvEMACHandlerTask+0x140>)
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	f242 7110 	movw	r1, #10000	@ 0x2710
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	f7eb f9fe 	bl	80033c8 <xQueueSemaphoreTake>
 8017fcc:	4603      	mov	r3, r0
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d009      	beq.n	8017fe6 <prvEMACHandlerTask+0xc2>
            {
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8017fd2:	4821      	ldr	r0, [pc, #132]	@ (8018058 <prvEMACHandlerTask+0x134>)
 8017fd4:	f001 fb04 	bl	80195e0 <ETH_Clear_Tx_Descriptors>
                xSemaphoreGive( xTransmissionMutex );
 8017fd8:	4b22      	ldr	r3, [pc, #136]	@ (8018064 <prvEMACHandlerTask+0x140>)
 8017fda:	6818      	ldr	r0, [r3, #0]
 8017fdc:	2300      	movs	r3, #0
 8017fde:	2200      	movs	r2, #0
 8017fe0:	2100      	movs	r1, #0
 8017fe2:	f7eb f839 	bl	8003058 <xQueueGenericSend>
            }
        }

        /* Some error has occurred, possibly an overflow or an underflow. */
        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0U )
 8017fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8018060 <prvEMACHandlerTask+0x13c>)
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	f003 0304 	and.w	r3, r3, #4
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d00f      	beq.n	8018012 <prvEMACHandlerTask+0xee>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_ERR_EVENT );
 8017ff2:	2104      	movs	r1, #4
 8017ff4:	481a      	ldr	r0, [pc, #104]	@ (8018060 <prvEMACHandlerTask+0x13c>)
 8017ff6:	f7ff ff5b 	bl	8017eb0 <vClearOptionBit>

            xEthHandle.gState = HAL_ETH_STATE_READY;
 8017ffa:	4b17      	ldr	r3, [pc, #92]	@ (8018058 <prvEMACHandlerTask+0x134>)
 8017ffc:	2210      	movs	r2, #16
 8017ffe:	659a      	str	r2, [r3, #88]	@ 0x58
            /* Enable all interrupts */
            HAL_ETH_Start_IT( &( xEthHandle ) );
 8018000:	4815      	ldr	r0, [pc, #84]	@ (8018058 <prvEMACHandlerTask+0x134>)
 8018002:	f000 f964 	bl	80182ce <HAL_ETH_Start_IT>
            xResult += prvNetworkInterfaceInput();
 8018006:	f7ff fe0d 	bl	8017c24 <prvNetworkInterfaceInput>
 801800a:	4602      	mov	r2, r0
 801800c:	697b      	ldr	r3, [r7, #20]
 801800e:	4413      	add	r3, r2
 8018010:	617b      	str	r3, [r7, #20]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != pdFALSE )
 8018012:	6979      	ldr	r1, [r7, #20]
 8018014:	4814      	ldr	r0, [pc, #80]	@ (8018068 <prvEMACHandlerTask+0x144>)
 8018016:	f7ff fa25 	bl	8017464 <xPhyCheckLinkStatus>
 801801a:	4603      	mov	r3, r0
 801801c:	2b00      	cmp	r3, #0
 801801e:	d08b      	beq.n	8017f38 <prvEMACHandlerTask+0x14>
        {
            /*
             * The function xPhyCheckLinkStatus() returns pdTRUE if the
             * Link Status has changes since it was called the last time.
             */
            if( xSTM32H_GetPhyLinkStatus( pxMyInterface ) == pdFALSE )
 8018020:	4b12      	ldr	r3, [pc, #72]	@ (801806c <prvEMACHandlerTask+0x148>)
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	4618      	mov	r0, r3
 8018026:	f7ff fccf 	bl	80179c8 <xSTM32H_GetPhyLinkStatus>
 801802a:	4603      	mov	r3, r0
 801802c:	2b00      	cmp	r3, #0
 801802e:	d10b      	bne.n	8018048 <prvEMACHandlerTask+0x124>
            {
                /* Stop the DMA transfer. */
                HAL_ETH_Stop_IT( &( xEthHandle ) );
 8018030:	4809      	ldr	r0, [pc, #36]	@ (8018058 <prvEMACHandlerTask+0x134>)
 8018032:	f000 f9d1 	bl	80183d8 <HAL_ETH_Stop_IT>
                /* Clear the Transmit buffers. */
                memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8018036:	2260      	movs	r2, #96	@ 0x60
 8018038:	2100      	movs	r1, #0
 801803a:	480d      	ldr	r0, [pc, #52]	@ (8018070 <prvEMACHandlerTask+0x14c>)
 801803c:	f009 ff65 	bl	8021f0a <memset>
                /* Since the link is down, clear the descriptors. */
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8018040:	4805      	ldr	r0, [pc, #20]	@ (8018058 <prvEMACHandlerTask+0x134>)
 8018042:	f001 facd 	bl	80195e0 <ETH_Clear_Tx_Descriptors>
 8018046:	e777      	b.n	8017f38 <prvEMACHandlerTask+0x14>
            }
            else
            {
                /* Something has changed to a Link Status, need re-check. */
                prvEthernetUpdateConfig( pdFALSE );
 8018048:	2000      	movs	r0, #0
 801804a:	f7ff fd91 	bl	8017b70 <prvEthernetUpdateConfig>
    {
 801804e:	e773      	b.n	8017f38 <prvEMACHandlerTask+0x14>
 8018050:	200022ac 	.word	0x200022ac
 8018054:	08026dd4 	.word	0x08026dd4
 8018058:	200022b4 	.word	0x200022b4
 801805c:	08026dec 	.word	0x08026dec
 8018060:	200022a4 	.word	0x200022a4
 8018064:	200022b0 	.word	0x200022b0
 8018068:	20002364 	.word	0x20002364
 801806c:	2000235c 	.word	0x2000235c
 8018070:	24040060 	.word	0x24040060

08018074 <set_error_state>:
 */
#ifdef HAL_ETH_MODULE_ENABLED

    static void set_error_state( ETH_HandleTypeDef * heth,
                                 uint32_t ulState )
    {
 8018074:	b480      	push	{r7}
 8018076:	b083      	sub	sp, #12
 8018078:	af00      	add	r7, sp, #0
 801807a:	6078      	str	r0, [r7, #4]
 801807c:	6039      	str	r1, [r7, #0]
        heth->gState = ulState;
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	683a      	ldr	r2, [r7, #0]
 8018082:	659a      	str	r2, [r3, #88]	@ 0x58
    }
 8018084:	bf00      	nop
 8018086:	370c      	adds	r7, #12
 8018088:	46bd      	mov	sp, r7
 801808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801808e:	4770      	bx	lr

08018090 <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 8018090:	b580      	push	{r7, lr}
 8018092:	b084      	sub	sp, #16
 8018094:	af00      	add	r7, sp, #0
 8018096:	6078      	str	r0, [r7, #4]
            uint32_t tickstart;

            if( heth == NULL )
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	2b00      	cmp	r3, #0
 801809c:	d101      	bne.n	80180a2 <HAL_ETH_Init+0x12>
            {
                return HAL_ERROR;
 801809e:	2301      	movs	r3, #1
 80180a0:	e0d4      	b.n	801824c <HAL_ETH_Init+0x1bc>
                    /* Init the low level hardware */
                    heth->MspInitCallback( heth );
                }
            #else /* if ( USE_HAL_ETH_REGISTER_CALLBACKS == 1 ) */
                /* Check the ETH peripheral state */
                if( heth->gState == HAL_ETH_STATE_RESET )
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d102      	bne.n	80180b0 <HAL_ETH_Init+0x20>
                {
                    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                    HAL_ETH_MspInit( heth );
 80180aa:	6878      	ldr	r0, [r7, #4]
 80180ac:	f7e9 fd1c 	bl	8001ae8 <HAL_ETH_MspInit>
                }
            #endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

            heth->gState = HAL_ETH_STATE_BUSY;
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	2223      	movs	r2, #35	@ 0x23
 80180b4:	659a      	str	r2, [r3, #88]	@ 0x58

            __HAL_RCC_SYSCFG_CLK_ENABLE();
 80180b6:	4b67      	ldr	r3, [pc, #412]	@ (8018254 <HAL_ETH_Init+0x1c4>)
 80180b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80180bc:	4a65      	ldr	r2, [pc, #404]	@ (8018254 <HAL_ETH_Init+0x1c4>)
 80180be:	f043 0302 	orr.w	r3, r3, #2
 80180c2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80180c6:	4b63      	ldr	r3, [pc, #396]	@ (8018254 <HAL_ETH_Init+0x1c4>)
 80180c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80180cc:	f003 0302 	and.w	r3, r3, #2
 80180d0:	60bb      	str	r3, [r7, #8]
 80180d2:	68bb      	ldr	r3, [r7, #8]

            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	7a1b      	ldrb	r3, [r3, #8]
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d103      	bne.n	80180e4 <HAL_ETH_Init+0x54>
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_MII );
 80180dc:	2000      	movs	r0, #0
 80180de:	f001 fc17 	bl	8019910 <HAL_SYSCFG_ETHInterfaceSelect>
 80180e2:	e003      	b.n	80180ec <HAL_ETH_Init+0x5c>
            }
            else
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 80180e4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80180e8:	f001 fc12 	bl	8019910 <HAL_SYSCFG_ETHInterfaceSelect>
            }

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	687a      	ldr	r2, [r7, #4]
 80180f8:	6812      	ldr	r2, [r2, #0]
 80180fa:	f043 0301 	orr.w	r3, r3, #1
 80180fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018102:	6013      	str	r3, [r2, #0]

            /* Get tick */
            tickstart = HAL_GetTick();
 8018104:	f001 fbc8 	bl	8019898 <HAL_GetTick>
 8018108:	60f8      	str	r0, [r7, #12]

            /* Wait for software reset */
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 801810a:	e010      	b.n	801812e <HAL_ETH_Init+0x9e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 801810c:	f001 fbc4 	bl	8019898 <HAL_GetTick>
 8018110:	4602      	mov	r2, r0
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	1ad3      	subs	r3, r2, r3
 8018116:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801811a:	d908      	bls.n	801812e <HAL_ETH_Init+0x9e>
                {
                    /* Set Error Code */
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	2204      	movs	r2, #4
 8018120:	661a      	str	r2, [r3, #96]	@ 0x60
                    /* Set State as Error */
                    set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018122:	21e0      	movs	r1, #224	@ 0xe0
 8018124:	6878      	ldr	r0, [r7, #4]
 8018126:	f7ff ffa5 	bl	8018074 <set_error_state>
                    /* Return Error */
                    return HAL_ERROR;
 801812a:	2301      	movs	r3, #1
 801812c:	e08e      	b.n	801824c <HAL_ETH_Init+0x1bc>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	f003 0301 	and.w	r3, r3, #1
 801813c:	2b00      	cmp	r3, #0
 801813e:	d1e5      	bne.n	801810c <HAL_ETH_Init+0x7c>
                }
            }

            /*------------------ MDIO CSR Clock Range Configuration --------------------*/
            ETH_MAC_MDIO_ClkConfig( heth );
 8018140:	6878      	ldr	r0, [r7, #4]
 8018142:	f001 f94b 	bl	80193dc <ETH_MAC_MDIO_ClkConfig>

            /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 8018146:	f004 ff49 	bl	801cfdc <HAL_RCC_GetHCLKFreq>
 801814a:	4603      	mov	r3, r0
 801814c:	4a42      	ldr	r2, [pc, #264]	@ (8018258 <HAL_ETH_Init+0x1c8>)
 801814e:	fba2 2303 	umull	r2, r3, r2, r3
 8018152:	0c9a      	lsrs	r2, r3, #18
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	3a01      	subs	r2, #1
 801815a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

            /*------------------ MAC, MTL and DMA default Configuration ----------------*/
            ETH_MACDMAConfig( heth );
 801815e:	6878      	ldr	r0, [r7, #4]
 8018160:	f001 f89e 	bl	80192a0 <ETH_MACDMAConfig>

            /* SET DSL to 64 bit */
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801816c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8018170:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8018174:	687a      	ldr	r2, [r7, #4]
 8018176:	6812      	ldr	r2, [r2, #0]
 8018178:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801817c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018180:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /* Set Receive Buffers Length (must be a multiple of 4) */
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	695b      	ldr	r3, [r3, #20]
 8018188:	f003 0303 	and.w	r3, r3, #3
 801818c:	2b00      	cmp	r3, #0
 801818e:	d008      	beq.n	80181a2 <HAL_ETH_Init+0x112>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	2201      	movs	r2, #1
 8018194:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Set State as Error */
                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018196:	21e0      	movs	r1, #224	@ 0xe0
 8018198:	6878      	ldr	r0, [r7, #4]
 801819a:	f7ff ff6b 	bl	8018074 <set_error_state>
                /* Return Error */
                return HAL_ERROR;
 801819e:	2301      	movs	r3, #1
 80181a0:	e054      	b.n	801824c <HAL_ETH_Init+0x1bc>
            }
            else
            {
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80181aa:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80181ae:	4b2b      	ldr	r3, [pc, #172]	@ (801825c <HAL_ETH_Init+0x1cc>)
 80181b0:	4013      	ands	r3, r2
 80181b2:	687a      	ldr	r2, [r7, #4]
 80181b4:	6952      	ldr	r2, [r2, #20]
 80181b6:	0051      	lsls	r1, r2, #1
 80181b8:	687a      	ldr	r2, [r7, #4]
 80181ba:	6812      	ldr	r2, [r2, #0]
 80181bc:	430b      	orrs	r3, r1
 80181be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80181c2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
            }

            /*------------------ DMA Tx Descriptors Configuration ----------------------*/
            ETH_DMATxDescListInit( heth );
 80181c6:	6878      	ldr	r0, [r7, #4]
 80181c8:	f001 f960 	bl	801948c <ETH_DMATxDescListInit>

            /*------------------ DMA Rx Descriptors Configuration ----------------------*/
            ETH_DMARxDescListInit( heth );
 80181cc:	6878      	ldr	r0, [r7, #4]
 80181ce:	f001 f9a9 	bl	8019524 <ETH_DMARxDescListInit>

            /*--------------------- ETHERNET MAC Address Configuration ------------------*/
            /* Set MAC addr bits 32 to 47 */
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	685b      	ldr	r3, [r3, #4]
 80181d6:	3305      	adds	r3, #5
 80181d8:	781b      	ldrb	r3, [r3, #0]
 80181da:	021a      	lsls	r2, r3, #8
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	685b      	ldr	r3, [r3, #4]
 80181e0:	3304      	adds	r3, #4
 80181e2:	781b      	ldrb	r3, [r3, #0]
 80181e4:	4619      	mov	r1, r3
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	430a      	orrs	r2, r1
 80181ec:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
            /* Set MAC addr bits 0 to 31 */
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	685b      	ldr	r3, [r3, #4]
 80181f4:	3303      	adds	r3, #3
 80181f6:	781b      	ldrb	r3, [r3, #0]
 80181f8:	061a      	lsls	r2, r3, #24
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	685b      	ldr	r3, [r3, #4]
 80181fe:	3302      	adds	r3, #2
 8018200:	781b      	ldrb	r3, [r3, #0]
 8018202:	041b      	lsls	r3, r3, #16
 8018204:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	685b      	ldr	r3, [r3, #4]
 801820a:	3301      	adds	r3, #1
 801820c:	781b      	ldrb	r3, [r3, #0]
 801820e:	021b      	lsls	r3, r3, #8
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018210:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	685b      	ldr	r3, [r3, #4]
 8018216:	781b      	ldrb	r3, [r3, #0]
 8018218:	4619      	mov	r1, r3
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	681b      	ldr	r3, [r3, #0]
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 801821e:	430a      	orrs	r2, r1
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018220:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	2200      	movs	r2, #0
 8018228:	661a      	str	r2, [r3, #96]	@ 0x60
            heth->gState = HAL_ETH_STATE_READY;
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	2210      	movs	r2, #16
 801822e:	659a      	str	r2, [r3, #88]	@ 0x58
            heth->RxState = HAL_ETH_STATE_READY;
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	2210      	movs	r2, #16
 8018234:	65da      	str	r2, [r3, #92]	@ 0x5c
             * Disable the interrupts that are related to the MMC counters.
             * These interrupts are enabled by default. The interrupt can
             * only be acknowledged by reading the corresponding counter.
             */

            heth->Instance->MMCRIMR =
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	4a09      	ldr	r2, [pc, #36]	@ (8018260 <HAL_ETH_Init+0x1d0>)
 801823c:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
                ETH_MMCRIMR_RXLPIUSCIM |  /* RXLPIUSC */
                ETH_MMCRIMR_RXUCGPIM |    /* RXUCASTG */
                ETH_MMCRIMR_RXALGNERPIM | /* RXALGNERR */
                ETH_MMCRIMR_RXCRCERPIM;   /* RXCRCERR */

            heth->Instance->MMCTIMR =
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	4a07      	ldr	r2, [pc, #28]	@ (8018264 <HAL_ETH_Init+0x1d4>)
 8018246:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
                ETH_MMCTIMR_TXLPIUSCIM | /* TXLPIUSC */
                ETH_MMCTIMR_TXGPKTIM |   /* TXPKTG */
                ETH_MMCTIMR_TXMCOLGPIM | /* TXMULTCOLG */
                ETH_MMCTIMR_TXSCOLGPIM;  /* TXSNGLCOLG */

            return HAL_OK;
 801824a:	2300      	movs	r3, #0
        }
 801824c:	4618      	mov	r0, r3
 801824e:	3710      	adds	r7, #16
 8018250:	46bd      	mov	sp, r7
 8018252:	bd80      	pop	{r7, pc}
 8018254:	58024400 	.word	0x58024400
 8018258:	431bde83 	.word	0x431bde83
 801825c:	ffff8001 	.word	0xffff8001
 8018260:	0c020060 	.word	0x0c020060
 8018264:	0c20c000 	.word	0x0c20c000

08018268 <HAL_ETH_DescAssignMemory>:
 */
        HAL_StatusTypeDef HAL_ETH_DescAssignMemory( ETH_HandleTypeDef * heth,
                                                    uint32_t Index,
                                                    uint8_t * pBuffer1,
                                                    uint8_t * pBuffer2 )
        {
 8018268:	b480      	push	{r7}
 801826a:	b087      	sub	sp, #28
 801826c:	af00      	add	r7, sp, #0
 801826e:	60f8      	str	r0, [r7, #12]
 8018270:	60b9      	str	r1, [r7, #8]
 8018272:	607a      	str	r2, [r7, #4]
 8018274:	603b      	str	r3, [r7, #0]
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 8018276:	68fb      	ldr	r3, [r7, #12]
 8018278:	68ba      	ldr	r2, [r7, #8]
 801827a:	320c      	adds	r2, #12
 801827c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018280:	617b      	str	r3, [r7, #20]

            if( ( pBuffer1 == NULL ) || ( Index >= ( uint32_t ) ETH_RX_DESC_CNT ) )
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d002      	beq.n	801828e <HAL_ETH_DescAssignMemory+0x26>
 8018288:	68bb      	ldr	r3, [r7, #8]
 801828a:	2b03      	cmp	r3, #3
 801828c:	d904      	bls.n	8018298 <HAL_ETH_DescAssignMemory+0x30>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	2201      	movs	r2, #1
 8018292:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Return Error */
                return HAL_ERROR;
 8018294:	2301      	movs	r3, #1
 8018296:	e014      	b.n	80182c2 <HAL_ETH_DescAssignMemory+0x5a>
            }

            /* write buffer address to RDES0 */
            WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pBuffer1 );
 8018298:	687a      	ldr	r2, [r7, #4]
 801829a:	697b      	ldr	r3, [r7, #20]
 801829c:	601a      	str	r2, [r3, #0]
            /* store buffer address */
            WRITE_REG( dmarxdesc->BackupAddr0, ( uint32_t ) pBuffer1 );
 801829e:	687a      	ldr	r2, [r7, #4]
 80182a0:	697b      	ldr	r3, [r7, #20]
 80182a2:	611a      	str	r2, [r3, #16]
            /* set buffer address valid bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 80182a4:	697b      	ldr	r3, [r7, #20]
 80182a6:	68db      	ldr	r3, [r3, #12]
 80182a8:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80182ac:	697b      	ldr	r3, [r7, #20]
 80182ae:	60da      	str	r2, [r3, #12]
/*		/ * set buffer 2 address valid bit to RDES3 * / */
/*		SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V); */
/*	} */

            /* set OWN bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 80182b0:	697b      	ldr	r3, [r7, #20]
 80182b2:	68db      	ldr	r3, [r3, #12]
 80182b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80182b8:	697b      	ldr	r3, [r7, #20]
 80182ba:	60da      	str	r2, [r3, #12]
            ( void ) dmarxdesc->DESC3;
 80182bc:	697b      	ldr	r3, [r7, #20]
 80182be:	68db      	ldr	r3, [r3, #12]

            return HAL_OK;
 80182c0:	2300      	movs	r3, #0
        }
 80182c2:	4618      	mov	r0, r3
 80182c4:	371c      	adds	r7, #28
 80182c6:	46bd      	mov	sp, r7
 80182c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182cc:	4770      	bx	lr

080182ce <HAL_ETH_Start_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start_IT( ETH_HandleTypeDef * heth )
        {
 80182ce:	b480      	push	{r7}
 80182d0:	b085      	sub	sp, #20
 80182d2:	af00      	add	r7, sp, #0
 80182d4:	6078      	str	r0, [r7, #4]
            uint32_t desc_index;

            if( heth->gState == HAL_ETH_STATE_READY )
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80182da:	2b10      	cmp	r3, #16
 80182dc:	d175      	bne.n	80183ca <HAL_ETH_Start_IT+0xfc>
            {
                heth->gState = HAL_ETH_STATE_BUSY;
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	2223      	movs	r2, #35	@ 0x23
 80182e2:	659a      	str	r2, [r3, #88]	@ 0x58

                /* Set IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 80182e4:	2300      	movs	r3, #0
 80182e6:	60fb      	str	r3, [r7, #12]
 80182e8:	e00e      	b.n	8018308 <HAL_ETH_Start_IT+0x3a>
                {
                    ETH_DMADescTypeDef * dma_rx_desc;

                    dma_rx_desc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ desc_index ];
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	68fa      	ldr	r2, [r7, #12]
 80182ee:	320c      	adds	r2, #12
 80182f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80182f4:	60bb      	str	r3, [r7, #8]
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 80182f6:	68bb      	ldr	r3, [r7, #8]
 80182f8:	68db      	ldr	r3, [r3, #12]
 80182fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80182fe:	68bb      	ldr	r3, [r7, #8]
 8018300:	60da      	str	r2, [r3, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	3301      	adds	r3, #1
 8018306:	60fb      	str	r3, [r7, #12]
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	2b03      	cmp	r3, #3
 801830c:	d9ed      	bls.n	80182ea <HAL_ETH_Start_IT+0x1c>
                }

                /* save IT mode to ETH Handle */
                heth->RxDescList.ItMode = 1U;
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	2201      	movs	r2, #1
 8018312:	651a      	str	r2, [r3, #80]	@ 0x50

                /* Enable the MAC transmission */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	681a      	ldr	r2, [r3, #0]
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	f042 0202 	orr.w	r2, r2, #2
 8018322:	601a      	str	r2, [r3, #0]

                /* Enable the MAC reception */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	681a      	ldr	r2, [r3, #0]
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	f042 0201 	orr.w	r2, r2, #1
 8018332:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	f042 0201 	orr.w	r2, r2, #1
 8018344:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Enable the DMA transmission */
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018350:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8018354:	687a      	ldr	r2, [r7, #4]
 8018356:	6812      	ldr	r2, [r2, #0]
 8018358:	f043 0301 	orr.w	r3, r3, #1
 801835c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018360:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Enable the DMA reception */
                SET_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801836c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8018370:	687a      	ldr	r2, [r7, #4]
 8018372:	6812      	ldr	r2, [r2, #0]
 8018374:	f043 0301 	orr.w	r3, r3, #1
 8018378:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801837c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Clear Tx and Rx process stopped flags */
                heth->Instance->DMACSR |= ( ETH_DMACSR_TPS | ETH_DMACSR_RPS );
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018388:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801838c:	687a      	ldr	r2, [r7, #4]
 801838e:	6812      	ldr	r2, [r2, #0]
 8018390:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8018394:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018398:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                /* Enable ETH DMA interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_ENABLE_IT( heth,
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80183a4:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	681a      	ldr	r2, [r3, #0]
 80183ac:	f24d 0341 	movw	r3, #53313	@ 0xd041
 80183b0:	430b      	orrs	r3, r1
 80183b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80183b6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                         ETH_DMACIER_RIE |  /* Receive Interrupt Enable */
                                         ETH_DMACIER_TIE |  /* Transmit Interrupt Enable */
                                         ETH_DMACIER_FBEE | /* Fatal Bus Error Enable */
                                         ETH_DMACIER_AIE ); /* Abnormal Interrupt Summary Enable */

                heth->gState = HAL_ETH_STATE_READY;
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	2210      	movs	r2, #16
 80183be:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	2222      	movs	r2, #34	@ 0x22
 80183c4:	65da      	str	r2, [r3, #92]	@ 0x5c

                return HAL_OK;
 80183c6:	2300      	movs	r3, #0
 80183c8:	e000      	b.n	80183cc <HAL_ETH_Start_IT+0xfe>
            }
            else
            {
                return HAL_ERROR;
 80183ca:	2301      	movs	r3, #1
            }
        }
 80183cc:	4618      	mov	r0, r3
 80183ce:	3714      	adds	r7, #20
 80183d0:	46bd      	mov	sp, r7
 80183d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183d6:	4770      	bx	lr

080183d8 <HAL_ETH_Stop_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop_IT( ETH_HandleTypeDef * heth )
        {
 80183d8:	b480      	push	{r7}
 80183da:	b085      	sub	sp, #20
 80183dc:	af00      	add	r7, sp, #0
 80183de:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t descindex;

            if( heth->gState != HAL_ETH_STATE_RESET )
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d066      	beq.n	80184b6 <HAL_ETH_Stop_IT+0xde>
            {
                /* Set the ETH peripheral state to BUSY */
                heth->gState = HAL_ETH_STATE_BUSY;
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	2223      	movs	r2, #35	@ 0x23
 80183ec:	659a      	str	r2, [r3, #88]	@ 0x58
                /* Disable interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80183f6:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	681a      	ldr	r2, [r3, #0]
 80183fe:	4b31      	ldr	r3, [pc, #196]	@ (80184c4 <HAL_ETH_Stop_IT+0xec>)
 8018400:	400b      	ands	r3, r1
 8018402:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018406:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                                  ETH_DMACIER_FBEE | ETH_DMACIER_AIE ) );

                /* Disable the DMA transmission */
                CLEAR_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018412:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8018416:	687a      	ldr	r2, [r7, #4]
 8018418:	6812      	ldr	r2, [r2, #0]
 801841a:	f023 0301 	bic.w	r3, r3, #1
 801841e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018422:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Disable the DMA reception */
                CLEAR_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801842e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8018432:	687a      	ldr	r2, [r7, #4]
 8018434:	6812      	ldr	r2, [r2, #0]
 8018436:	f023 0301 	bic.w	r3, r3, #1
 801843a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801843e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Disable the MAC reception */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	681a      	ldr	r2, [r3, #0]
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	f022 0201 	bic.w	r2, r2, #1
 8018450:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	f042 0201 	orr.w	r2, r2, #1
 8018462:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Disable the MAC transmission */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	681a      	ldr	r2, [r3, #0]
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	f022 0202 	bic.w	r2, r2, #2
 8018474:	601a      	str	r2, [r3, #0]

                /* Clear IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8018476:	2300      	movs	r3, #0
 8018478:	60fb      	str	r3, [r7, #12]
 801847a:	e00e      	b.n	801849a <HAL_ETH_Stop_IT+0xc2>
                {
                    dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ descindex ];
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	68fa      	ldr	r2, [r7, #12]
 8018480:	320c      	adds	r2, #12
 8018482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018486:	60bb      	str	r3, [r7, #8]
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 8018488:	68bb      	ldr	r3, [r7, #8]
 801848a:	68db      	ldr	r3, [r3, #12]
 801848c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8018490:	68bb      	ldr	r3, [r7, #8]
 8018492:	60da      	str	r2, [r3, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	3301      	adds	r3, #1
 8018498:	60fb      	str	r3, [r7, #12]
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	2b03      	cmp	r3, #3
 801849e:	d9ed      	bls.n	801847c <HAL_ETH_Stop_IT+0xa4>
                }

                heth->RxDescList.ItMode = 0U;
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	2200      	movs	r2, #0
 80184a4:	651a      	str	r2, [r3, #80]	@ 0x50

                heth->gState = HAL_ETH_STATE_READY;
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	2210      	movs	r2, #16
 80184aa:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_READY;
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	2210      	movs	r2, #16
 80184b0:	65da      	str	r2, [r3, #92]	@ 0x5c

                /* Return function status */
                return HAL_OK;
 80184b2:	2300      	movs	r3, #0
 80184b4:	e000      	b.n	80184b8 <HAL_ETH_Stop_IT+0xe0>
            }
            else
            {
                return HAL_ERROR;
 80184b6:	2301      	movs	r3, #1
            }
        }
 80184b8:	4618      	mov	r0, r3
 80184ba:	3714      	adds	r7, #20
 80184bc:	46bd      	mov	sp, r7
 80184be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184c2:	4770      	bx	lr
 80184c4:	ffff2fbe 	.word	0xffff2fbe

080184c8 <HAL_ETH_Transmit_IT>:
 * @param  pTxConfig: Hold the configuration of packet to be transmitted
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Transmit_IT( ETH_HandleTypeDef * heth,
                                               ETH_TxPacketConfig * pTxConfig )
        {
 80184c8:	b580      	push	{r7, lr}
 80184ca:	b082      	sub	sp, #8
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	6078      	str	r0, [r7, #4]
 80184d0:	6039      	str	r1, [r7, #0]
            if( pTxConfig == NULL )
 80184d2:	683b      	ldr	r3, [r7, #0]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d107      	bne.n	80184e8 <HAL_ETH_Transmit_IT+0x20>
            {
                heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80184dc:	f043 0201 	orr.w	r2, r3, #1
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	661a      	str	r2, [r3, #96]	@ 0x60
                return HAL_ERROR;
 80184e4:	2301      	movs	r3, #1
 80184e6:	e039      	b.n	801855c <HAL_ETH_Transmit_IT+0x94>
            }

            if( heth->gState == HAL_ETH_STATE_READY )
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80184ec:	2b10      	cmp	r3, #16
 80184ee:	d134      	bne.n	801855a <HAL_ETH_Transmit_IT+0x92>
            {
                /* Config DMA Tx descriptor by Tx Packet info */
                if( ETH_Prepare_Tx_Descriptors( heth, pTxConfig, 1 ) != HAL_ETH_ERROR_NONE )
 80184f0:	2201      	movs	r2, #1
 80184f2:	6839      	ldr	r1, [r7, #0]
 80184f4:	6878      	ldr	r0, [r7, #4]
 80184f6:	f001 f8c1 	bl	801967c <ETH_Prepare_Tx_Descriptors>
 80184fa:	4603      	mov	r3, r0
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d007      	beq.n	8018510 <HAL_ETH_Transmit_IT+0x48>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018504:	f043 0202 	orr.w	r2, r3, #2
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	661a      	str	r2, [r3, #96]	@ 0x60
                    return HAL_ERROR;
 801850c:	2301      	movs	r3, #1
 801850e:	e025      	b.n	801855c <HAL_ETH_Transmit_IT+0x94>
                }

                /* Incr current tx desc index */
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018514:	1c5a      	adds	r2, r3, #1
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	629a      	str	r2, [r3, #40]	@ 0x28
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801851e:	2b03      	cmp	r3, #3
 8018520:	d904      	bls.n	801852c <HAL_ETH_Transmit_IT+0x64>
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018526:	1f1a      	subs	r2, r3, #4
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	629a      	str	r2, [r3, #40]	@ 0x28
                 * DMACTDTPR: "Channel Tx descriptor tail pointer register (ETH_DMACTXDTPR)
                 * The hardware tries to transmit all packets referenced by the
                 * descriptors between the head and the tail pointer registers.
                 */

                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	681a      	ldr	r2, [r3, #0]
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	3106      	adds	r1, #6
 8018538:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801853c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018540:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  __ASM volatile ("dsb 0xF":::"memory");
 8018544:	f3bf 8f4f 	dsb	sy
}
 8018548:	bf00      	nop
                /* Memory barrier. */
                __DSB();
                /* Read-back the value just written. */
                ( void ) heth->Instance->DMACTDTPR;
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018552:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120

                return HAL_OK;
 8018556:	2300      	movs	r3, #0
 8018558:	e000      	b.n	801855c <HAL_ETH_Transmit_IT+0x94>
            }
            else
            {
                return HAL_ERROR;
 801855a:	2301      	movs	r3, #1
            }
        }
 801855c:	4618      	mov	r0, r3
 801855e:	3708      	adds	r7, #8
 8018560:	46bd      	mov	sp, r7
 8018562:	bd80      	pop	{r7, pc}

08018564 <HAL_ETH_IsRxDataAvailable>:
 *         the configuration information for ETHERNET module
 * @retval  1: A Packet is received
 *          0: no Packet received
 */
        uint8_t HAL_ETH_IsRxDataAvailable( ETH_HandleTypeDef * heth )
        {
 8018564:	b580      	push	{r7, lr}
 8018566:	b08a      	sub	sp, #40	@ 0x28
 8018568:	af00      	add	r7, sp, #0
 801856a:	6078      	str	r0, [r7, #4]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	3330      	adds	r3, #48	@ 0x30
 8018570:	61bb      	str	r3, [r7, #24]
            uint32_t desc_index = dmarxdesclist->CurRxDesc;
 8018572:	69bb      	ldr	r3, [r7, #24]
 8018574:	691b      	ldr	r3, [r3, #16]
 8018576:	627b      	str	r3, [r7, #36]	@ 0x24
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018578:	69bb      	ldr	r3, [r7, #24]
 801857a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801857c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018580:	617b      	str	r3, [r7, #20]
            uint32_t desc_scan_count = 0;
 8018582:	2300      	movs	r3, #0
 8018584:	623b      	str	r3, [r7, #32]
            uint32_t app_desc_count = 0;       /* Number of descriptors in received packet. */
 8018586:	2300      	movs	r3, #0
 8018588:	613b      	str	r3, [r7, #16]
            uint32_t first_app_desc_index = 0; /* Index of the first descriptor of received packet.. */
 801858a:	2300      	movs	r3, #0
 801858c:	61fb      	str	r3, [r7, #28]

            /* Check if descriptor is not owned by DMA */
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 801858e:	e055      	b.n	801863c <HAL_ETH_IsRxDataAvailable+0xd8>
                   ( desc_scan_count < ( uint32_t ) ETH_RX_DESC_CNT ) )
            {
                uint32_t ulDesc3 = dmarxdesc->DESC3;
 8018590:	697b      	ldr	r3, [r7, #20]
 8018592:	68db      	ldr	r3, [r3, #12]
 8018594:	60fb      	str	r3, [r7, #12]
                desc_scan_count++;
 8018596:	6a3b      	ldr	r3, [r7, #32]
 8018598:	3301      	adds	r3, #1
 801859a:	623b      	str	r3, [r7, #32]

                /* FreeRTOS+TCP only handles packets that fit in 1 descriptor. */
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d006      	beq.n	80185b4 <HAL_ETH_IsRxDataAvailable+0x50>
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d001      	beq.n	80185b4 <HAL_ETH_IsRxDataAvailable+0x50>
 80185b0:	2301      	movs	r3, #1
 80185b2:	e000      	b.n	80185b6 <HAL_ETH_IsRxDataAvailable+0x52>
 80185b4:	2300      	movs	r3, #0
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d104      	bne.n	80185c4 <HAL_ETH_IsRxDataAvailable+0x60>
 80185ba:	f240 4195 	movw	r1, #1173	@ 0x495
 80185be:	482b      	ldr	r0, [pc, #172]	@ (801866c <HAL_ETH_IsRxDataAvailable+0x108>)
 80185c0:	f7e9 f854 	bl	800166c <vAssertCalled>

                /* Check if last descriptor */
                if( READ_BIT( ulDesc3, ETH_DMARXNDESCWBF_LD ) != ( uint32_t ) RESET )
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d036      	beq.n	801863c <HAL_ETH_IsRxDataAvailable+0xd8>
                {
                    /* Increment the number of descriptors to be passed to the application */
                    app_desc_count += 1U;
 80185ce:	693b      	ldr	r3, [r7, #16]
 80185d0:	3301      	adds	r3, #1
 80185d2:	613b      	str	r3, [r7, #16]

                    if( app_desc_count == 1U )
 80185d4:	693b      	ldr	r3, [r7, #16]
 80185d6:	2b01      	cmp	r3, #1
 80185d8:	d101      	bne.n	80185de <HAL_ETH_IsRxDataAvailable+0x7a>
                    {
                        first_app_desc_index = desc_index;
 80185da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185dc:	61fb      	str	r3, [r7, #28]
                    }

                    /* Increment current rx descriptor index */
                    INCR_RX_DESC_INDEX( desc_index, 1U );
 80185de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185e0:	3301      	adds	r3, #1
 80185e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80185e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185e6:	2b03      	cmp	r3, #3
 80185e8:	d902      	bls.n	80185f0 <HAL_ETH_IsRxDataAvailable+0x8c>
 80185ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185ec:	3b04      	subs	r3, #4
 80185ee:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* Check for Context descriptor */
                    /* Get current descriptor address */
                    dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80185f0:	69bb      	ldr	r3, [r7, #24]
 80185f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80185f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185f8:	617b      	str	r3, [r7, #20]

                    if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET )
 80185fa:	697b      	ldr	r3, [r7, #20]
 80185fc:	68db      	ldr	r3, [r3, #12]
 80185fe:	2b00      	cmp	r3, #0
 8018600:	db11      	blt.n	8018626 <HAL_ETH_IsRxDataAvailable+0xc2>
                    {
                        /* If IEEE 1588 timestamp feature is enabled, the DMA stores the timestamp
                        * (if available). The DMA writes the context descriptor after the last
                        * descriptor for the current packet (in the next available descriptor). */
                        if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_CTXT ) != ( uint32_t ) RESET )
 8018602:	697b      	ldr	r3, [r7, #20]
 8018604:	68db      	ldr	r3, [r3, #12]
 8018606:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801860a:	2b00      	cmp	r3, #0
 801860c:	d00b      	beq.n	8018626 <HAL_ETH_IsRxDataAvailable+0xc2>
                        {
                            /* Increment the number of descriptors to be passed to the application */
                            dmarxdesclist->AppContextDesc = 1;
 801860e:	69bb      	ldr	r3, [r7, #24]
 8018610:	2201      	movs	r2, #1
 8018612:	61da      	str	r2, [r3, #28]
                            /* Increment current rx descriptor index */
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 8018614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018616:	3301      	adds	r3, #1
 8018618:	627b      	str	r3, [r7, #36]	@ 0x24
 801861a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801861c:	2b03      	cmp	r3, #3
 801861e:	d902      	bls.n	8018626 <HAL_ETH_IsRxDataAvailable+0xc2>
 8018620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018622:	3b04      	subs	r3, #4
 8018624:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                    }

                    /* Fill information to Rx descriptors list */
                    dmarxdesclist->CurRxDesc = desc_index;
 8018626:	69bb      	ldr	r3, [r7, #24]
 8018628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801862a:	611a      	str	r2, [r3, #16]
                    dmarxdesclist->FirstAppDesc = first_app_desc_index;
 801862c:	69bb      	ldr	r3, [r7, #24]
 801862e:	69fa      	ldr	r2, [r7, #28]
 8018630:	615a      	str	r2, [r3, #20]
                    dmarxdesclist->AppDescNbr = app_desc_count;
 8018632:	69bb      	ldr	r3, [r7, #24]
 8018634:	693a      	ldr	r2, [r7, #16]
 8018636:	619a      	str	r2, [r3, #24]

                    /* Return function status */
                    return 1;
 8018638:	2301      	movs	r3, #1
 801863a:	e012      	b.n	8018662 <HAL_ETH_IsRxDataAvailable+0xfe>
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 801863c:	697b      	ldr	r3, [r7, #20]
 801863e:	68db      	ldr	r3, [r3, #12]
 8018640:	2b00      	cmp	r3, #0
 8018642:	db02      	blt.n	801864a <HAL_ETH_IsRxDataAvailable+0xe6>
 8018644:	6a3b      	ldr	r3, [r7, #32]
 8018646:	2b03      	cmp	r3, #3
 8018648:	d9a2      	bls.n	8018590 <HAL_ETH_IsRxDataAvailable+0x2c>
/*			/ * Get current descriptor address * / */
/*			dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[desc_index]; */
/*		} */
            } /* while ( OWN == 0 ) */

            configASSERT( app_desc_count == 0 );
 801864a:	693b      	ldr	r3, [r7, #16]
 801864c:	2b00      	cmp	r3, #0
 801864e:	d004      	beq.n	801865a <HAL_ETH_IsRxDataAvailable+0xf6>
 8018650:	f240 41db 	movw	r1, #1243	@ 0x4db
 8018654:	4805      	ldr	r0, [pc, #20]	@ (801866c <HAL_ETH_IsRxDataAvailable+0x108>)
 8018656:	f7e9 f809 	bl	800166c <vAssertCalled>
/*		/ * Set the Tail pointer address to the last rx descriptor hold by the app * / */
/*		WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc); */
/*	} */

            /* Fill information to Rx descriptors list: No received Packet */
            dmarxdesclist->AppDescNbr = 0U;
 801865a:	69bb      	ldr	r3, [r7, #24]
 801865c:	2200      	movs	r2, #0
 801865e:	619a      	str	r2, [r3, #24]

            return 0;
 8018660:	2300      	movs	r3, #0
        }
 8018662:	4618      	mov	r0, r3
 8018664:	3728      	adds	r7, #40	@ 0x28
 8018666:	46bd      	mov	sp, r7
 8018668:	bd80      	pop	{r7, pc}
 801866a:	bf00      	nop
 801866c:	08026e04 	.word	0x08026e04

08018670 <HAL_ETH_GetRxData>:
 * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
 * @retval HAL status
 */
        size_t HAL_ETH_GetRxData( ETH_HandleTypeDef * heth,
                                  ETH_BufferTypeDef * RxBuffer )
        {
 8018670:	b580      	push	{r7, lr}
 8018672:	b086      	sub	sp, #24
 8018674:	af00      	add	r7, sp, #0
 8018676:	6078      	str	r0, [r7, #4]
 8018678:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &( heth->RxDescList );
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	3330      	adds	r3, #48	@ 0x30
 801867e:	617b      	str	r3, [r7, #20]
            uint32_t desc_index;
            uint32_t packet_length;
            __IO const ETH_DMADescTypeDef * dma_rx_desc;

            configASSERT( RxBuffer != NULL );
 8018680:	683b      	ldr	r3, [r7, #0]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d104      	bne.n	8018690 <HAL_ETH_GetRxData+0x20>
 8018686:	f240 511f 	movw	r1, #1311	@ 0x51f
 801868a:	481c      	ldr	r0, [pc, #112]	@ (80186fc <HAL_ETH_GetRxData+0x8c>)
 801868c:	f7e8 ffee 	bl	800166c <vAssertCalled>

            if( HAL_ETH_IsRxDataAvailable( heth ) == 0U )
 8018690:	6878      	ldr	r0, [r7, #4]
 8018692:	f7ff ff67 	bl	8018564 <HAL_ETH_IsRxDataAvailable>
 8018696:	4603      	mov	r3, r0
 8018698:	2b00      	cmp	r3, #0
 801869a:	d101      	bne.n	80186a0 <HAL_ETH_GetRxData+0x30>
            {
                /* No data to be transferred to the application */
                return 0U;
 801869c:	2300      	movs	r3, #0
 801869e:	e028      	b.n	80186f2 <HAL_ETH_GetRxData+0x82>
            }

            desc_index = dmarxdesclist->FirstAppDesc;
 80186a0:	697b      	ldr	r3, [r7, #20]
 80186a2:	695b      	ldr	r3, [r3, #20]
 80186a4:	613b      	str	r3, [r7, #16]
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80186a6:	697b      	ldr	r3, [r7, #20]
 80186a8:	693a      	ldr	r2, [r7, #16]
 80186aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186ae:	60fb      	str	r3, [r7, #12]

            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 80186b0:	697b      	ldr	r3, [r7, #20]
 80186b2:	699b      	ldr	r3, [r3, #24]
 80186b4:	2b01      	cmp	r3, #1
 80186b6:	d004      	beq.n	80186c2 <HAL_ETH_GetRxData+0x52>
 80186b8:	f240 512a 	movw	r1, #1322	@ 0x52a
 80186bc:	480f      	ldr	r0, [pc, #60]	@ (80186fc <HAL_ETH_GetRxData+0x8c>)
 80186be:	f7e8 ffd5 	bl	800166c <vAssertCalled>

            /* last descriptor data length */
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	68db      	ldr	r3, [r3, #12]
 80186c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80186ca:	60bb      	str	r3, [r7, #8]

            RxBuffer->buffer = ( uint8_t * ) dma_rx_desc->BackupAddr0;
 80186cc:	68fb      	ldr	r3, [r7, #12]
 80186ce:	691b      	ldr	r3, [r3, #16]
 80186d0:	461a      	mov	r2, r3
 80186d2:	683b      	ldr	r3, [r7, #0]
 80186d4:	601a      	str	r2, [r3, #0]
            RxBuffer->len = packet_length;
 80186d6:	683b      	ldr	r3, [r7, #0]
 80186d8:	68ba      	ldr	r2, [r7, #8]
 80186da:	605a      	str	r2, [r3, #4]

            /* data is in only one buffer */
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	695b      	ldr	r3, [r3, #20]
 80186e0:	68ba      	ldr	r2, [r7, #8]
 80186e2:	429a      	cmp	r2, r3
 80186e4:	d904      	bls.n	80186f0 <HAL_ETH_GetRxData+0x80>
 80186e6:	f240 5133 	movw	r1, #1331	@ 0x533
 80186ea:	4804      	ldr	r0, [pc, #16]	@ (80186fc <HAL_ETH_GetRxData+0x8c>)
 80186ec:	f7e8 ffbe 	bl	800166c <vAssertCalled>

            return packet_length;
 80186f0:	68bb      	ldr	r3, [r7, #8]
        }
 80186f2:	4618      	mov	r0, r3
 80186f4:	3718      	adds	r7, #24
 80186f6:	46bd      	mov	sp, r7
 80186f8:	bd80      	pop	{r7, pc}
 80186fa:	bf00      	nop
 80186fc:	08026e04 	.word	0x08026e04

08018700 <HAL_ETH_BuildRxDescriptors>:
 *         the configuration information for ETHERNET module
 * @retval HAL status.
 */
        HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors( ETH_HandleTypeDef * heth,
                                                      uint8_t * pucNewBuffer )
        {
 8018700:	b480      	push	{r7}
 8018702:	b08b      	sub	sp, #44	@ 0x2c
 8018704:	af00      	add	r7, sp, #0
 8018706:	6078      	str	r0, [r7, #4]
 8018708:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	3330      	adds	r3, #48	@ 0x30
 801870e:	60fb      	str	r3, [r7, #12]
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	695b      	ldr	r3, [r3, #20]
 8018714:	627b      	str	r3, [r7, #36]	@ 0x24
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801871a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801871e:	623b      	str	r3, [r7, #32]
            uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	699b      	ldr	r3, [r3, #24]
 8018724:	61fb      	str	r3, [r7, #28]
            uint32_t descscan;

            if( dmarxdesclist->AppDescNbr == 0U )
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	699b      	ldr	r3, [r3, #24]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d101      	bne.n	8018732 <HAL_ETH_BuildRxDescriptors+0x32>
            {
                /* No Rx descriptors to build */
                return HAL_ERROR;
 801872e:	2301      	movs	r3, #1
 8018730:	e057      	b.n	80187e2 <HAL_ETH_BuildRxDescriptors+0xe2>
            }

            if( dmarxdesclist->AppContextDesc != 0U )
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	69db      	ldr	r3, [r3, #28]
 8018736:	2b00      	cmp	r3, #0
 8018738:	d002      	beq.n	8018740 <HAL_ETH_BuildRxDescriptors+0x40>
            {
                /* A context descriptor is available */
                totalappdescnbr += 1U;
 801873a:	69fb      	ldr	r3, [r7, #28]
 801873c:	3301      	adds	r3, #1
 801873e:	61fb      	str	r3, [r7, #28]
            }

            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8018740:	2300      	movs	r3, #0
 8018742:	61bb      	str	r3, [r7, #24]
            {
                uint32_t DESC3;
                uint8_t * pucBuffer;

                if( pucNewBuffer != NULL )
 8018744:	683b      	ldr	r3, [r7, #0]
 8018746:	2b00      	cmp	r3, #0
 8018748:	d005      	beq.n	8018756 <HAL_ETH_BuildRxDescriptors+0x56>
                {
                    /* Earlier zero-copy RX only: buffer was passed to the application. */
                    pucBuffer = pucNewBuffer;
 801874a:	683b      	ldr	r3, [r7, #0]
 801874c:	613b      	str	r3, [r7, #16]
                    dmarxdesc->BackupAddr0 = ( uint32_t ) pucNewBuffer;
 801874e:	683a      	ldr	r2, [r7, #0]
 8018750:	6a3b      	ldr	r3, [r7, #32]
 8018752:	611a      	str	r2, [r3, #16]
 8018754:	e002      	b.n	801875c <HAL_ETH_BuildRxDescriptors+0x5c>
                }
                else
                {
                    /* Keep on using the same buffer as before. */
                    pucBuffer = ( uint8_t * ) dmarxdesc->BackupAddr0;
 8018756:	6a3b      	ldr	r3, [r7, #32]
 8018758:	691b      	ldr	r3, [r3, #16]
 801875a:	613b      	str	r3, [r7, #16]
                }

                WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pucBuffer );
 801875c:	693a      	ldr	r2, [r7, #16]
 801875e:	6a3b      	ldr	r3, [r7, #32]
 8018760:	601a      	str	r2, [r3, #0]
                /* Buffer 1 Address Valid */

                DESC3 = READ_REG( dmarxdesc->DESC3 );
 8018762:	6a3b      	ldr	r3, [r7, #32]
 8018764:	68db      	ldr	r3, [r3, #12]
 8018766:	617b      	str	r3, [r7, #20]
                WRITE_REG( DESC3, ETH_DMARXNDESCRF_BUF1V );
 8018768:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801876c:	617b      	str	r3, [r7, #20]
/*		} */

                /* Should be the last change. */
/*		SET_BIT(DESC3, ETH_DMARXNDESCRF_OWN); */

                if( dmarxdesclist->ItMode != 0U )
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	6a1b      	ldr	r3, [r3, #32]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d003      	beq.n	801877e <HAL_ETH_BuildRxDescriptors+0x7e>
                {
                    /* Interrupt Enabled on Completion */
                    SET_BIT( DESC3, ETH_DMARXNDESCRF_IOC );
 8018776:	697b      	ldr	r3, [r7, #20]
 8018778:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801877c:	617b      	str	r3, [r7, #20]
                }

                /* Now all is ready.. */
                SET_BIT( DESC3, ETH_DMARXNDESCRF_OWN );
 801877e:	697b      	ldr	r3, [r7, #20]
 8018780:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8018784:	617b      	str	r3, [r7, #20]

                WRITE_REG( dmarxdesc->DESC3, DESC3 );
 8018786:	6a3b      	ldr	r3, [r7, #32]
 8018788:	697a      	ldr	r2, [r7, #20]
 801878a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801878c:	f3bf 8f4f 	dsb	sy
}
 8018790:	bf00      	nop

                __DSB();

                /* And read it back. */
                ( void ) dmarxdesc->DESC3;
 8018792:	6a3b      	ldr	r3, [r7, #32]
 8018794:	68db      	ldr	r3, [r3, #12]

                if( descscan >= ( totalappdescnbr - 1U ) )
 8018796:	69fb      	ldr	r3, [r7, #28]
 8018798:	3b01      	subs	r3, #1
 801879a:	69ba      	ldr	r2, [r7, #24]
 801879c:	429a      	cmp	r2, r3
 801879e:	d211      	bcs.n	80187c4 <HAL_ETH_BuildRxDescriptors+0xc4>
                {
                    break;
                }

                /* Increment rx descriptor index */
                INCR_RX_DESC_INDEX( desc_index, 1U );
 80187a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187a2:	3301      	adds	r3, #1
 80187a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80187a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187a8:	2b03      	cmp	r3, #3
 80187aa:	d902      	bls.n	80187b2 <HAL_ETH_BuildRxDescriptors+0xb2>
 80187ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187ae:	3b04      	subs	r3, #4
 80187b0:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Get descriptor address */
                dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80187b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80187ba:	623b      	str	r3, [r7, #32]
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 80187bc:	69bb      	ldr	r3, [r7, #24]
 80187be:	3301      	adds	r3, #1
 80187c0:	61bb      	str	r3, [r7, #24]
            {
 80187c2:	e7bf      	b.n	8018744 <HAL_ETH_BuildRxDescriptors+0x44>
                    break;
 80187c4:	bf00      	nop
            }

            /* Set the Tail pointer address to the last rx descriptor hold by the app */
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	681a      	ldr	r2, [r3, #0]
 80187ca:	6a3b      	ldr	r3, [r7, #32]
 80187cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80187d0:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

            /* reset the Application desc number */
            dmarxdesclist->AppDescNbr = 0;
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	2200      	movs	r2, #0
 80187d8:	619a      	str	r2, [r3, #24]

            /*  reset the application context descriptor */
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	2200      	movs	r2, #0
 80187de:	64da      	str	r2, [r3, #76]	@ 0x4c

            return HAL_OK;
 80187e0:	2300      	movs	r3, #0
        }
 80187e2:	4618      	mov	r0, r3
 80187e4:	372c      	adds	r7, #44	@ 0x2c
 80187e6:	46bd      	mov	sp, r7
 80187e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ec:	4770      	bx	lr
	...

080187f0 <HAL_ETH_IRQHandler>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 80187f0:	b580      	push	{r7, lr}
 80187f2:	b082      	sub	sp, #8
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	6078      	str	r0, [r7, #4]
            /* ETH interrupt. See heth->DMACSR for details.
             */

            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018800:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018808:	2b40      	cmp	r3, #64	@ 0x40
 801880a:	d115      	bne.n	8018838 <HAL_ETH_IRQHandler+0x48>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018814:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801881c:	2b40      	cmp	r3, #64	@ 0x40
 801881e:	d10b      	bne.n	8018838 <HAL_ETH_IRQHandler+0x48>
                        heth->RxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Receive complete callback */
                        HAL_ETH_RxCpltCallback( heth );
 8018820:	6878      	ldr	r0, [r7, #4]
 8018822:	f7ff fafc 	bl	8017e1e <HAL_ETH_RxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Rx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801882e:	461a      	mov	r2, r3
 8018830:	f248 0340 	movw	r3, #32832	@ 0x8040
 8018834:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* Packet transmitted */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018840:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018844:	f003 0301 	and.w	r3, r3, #1
 8018848:	2b01      	cmp	r3, #1
 801884a:	d115      	bne.n	8018878 <HAL_ETH_IRQHandler+0x88>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018854:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018858:	f003 0301 	and.w	r3, r3, #1
 801885c:	2b01      	cmp	r3, #1
 801885e:	d10b      	bne.n	8018878 <HAL_ETH_IRQHandler+0x88>
                        heth->TxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Transfer complete callback */
                        HAL_ETH_TxCpltCallback( heth );
 8018860:	6878      	ldr	r0, [r7, #4]
 8018862:	f7ff fad1 	bl	8017e08 <HAL_ETH_TxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Tx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801886e:	461a      	mov	r2, r3
 8018870:	f248 0301 	movw	r3, #32769	@ 0x8001
 8018874:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* ETH DMA Error */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018880:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018888:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801888c:	d14f      	bne.n	801892e <HAL_ETH_IRQHandler+0x13e>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018896:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801889a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801889e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80188a2:	d144      	bne.n	801892e <HAL_ETH_IRQHandler+0x13e>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80188a8:	f043 0208 	orr.w	r2, r3, #8
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	661a      	str	r2, [r3, #96]	@ 0x60

                    /* if fatal bus error occurred */
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80188b8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80188bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80188c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80188c4:	d11d      	bne.n	8018902 <HAL_ETH_IRQHandler+0x112>
                    {
                        /* Get DMA error code  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80188ce:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80188d2:	f241 1302 	movw	r3, #4354	@ 0x1102
 80188d6:	4013      	ands	r3, r2
 80188d8:	687a      	ldr	r2, [r7, #4]
 80188da:	6653      	str	r3, [r2, #100]	@ 0x64

                        /* Disable all interrupts */
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80188e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80188e8:	687a      	ldr	r2, [r7, #4]
 80188ea:	6812      	ldr	r2, [r2, #0]
 80188ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80188f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80188f4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

                        /* Set HAL state to ERROR */
                        set_error_state( heth, HAL_ETH_STATE_ERROR );
 80188f8:	21e0      	movs	r1, #224	@ 0xe0
 80188fa:	6878      	ldr	r0, [r7, #4]
 80188fc:	f7ff fbba 	bl	8018074 <set_error_state>
 8018900:	e012      	b.n	8018928 <HAL_ETH_IRQHandler+0x138>
                    }
                    else
                    {
                        /* Get DMA error status  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801890a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801890e:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	665a      	str	r2, [r3, #100]	@ 0x64
                                                                                 ETH_DMACSR_RBU | ETH_DMACSR_AIS ) );

                        /* Clear the interrupt summary flag */
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801891e:	461a      	mov	r2, r3
 8018920:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8018924:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                        heth->DMAErrorCallback( heth );
                    }
                    #else
                    {
                        /* Ethernet DMA Error callback */
                        HAL_ETH_DMAErrorCallback( heth );
 8018928:	6878      	ldr	r0, [r7, #4]
 801892a:	f7ff fa83 	bl	8017e34 <HAL_ETH_DMAErrorCallback>
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
                }
            }

            /* ETH MAC Error IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018936:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 801893a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801893e:	d10f      	bne.n	8018960 <HAL_ETH_IRQHandler+0x170>
            {
                /* Get MAC Rx Tx status and clear Status register pending bit */
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	669a      	str	r2, [r3, #104]	@ 0x68

                set_error_state( heth, HAL_ETH_STATE_ERROR );
 801894c:	21e0      	movs	r1, #224	@ 0xe0
 801894e:	6878      	ldr	r0, [r7, #4]
 8018950:	f7ff fb90 	bl	8018074 <set_error_state>
                    heth->DMAErrorCallback( heth );
                }
                #else
                {
                    /* Ethernet MAC Error callback */
                    HAL_ETH_MACErrorCallback( heth );
 8018954:	6878      	ldr	r0, [r7, #4]
 8018956:	f000 f843 	bl	80189e0 <HAL_ETH_MACErrorCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	2200      	movs	r2, #0
 801895e:	669a      	str	r2, [r3, #104]	@ 0x68
            }

            /* ETH PMT IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018968:	f003 0310 	and.w	r3, r3, #16
 801896c:	2b10      	cmp	r3, #16
 801896e:	d10d      	bne.n	801898c <HAL_ETH_IRQHandler+0x19c>
            {
                /* Get MAC Wake-up source and clear the status register pending bit */
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8018978:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	66da      	str	r2, [r3, #108]	@ 0x6c
                    heth->PMTCallback( heth );
                }
                #else
                {
                    /* Ethernet PMT callback */
                    HAL_ETH_PMTCallback( heth );
 8018980:	6878      	ldr	r0, [r7, #4]
 8018982:	f000 f837 	bl	80189f4 <HAL_ETH_PMTCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	2200      	movs	r2, #0
 801898a:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            /* ETH EEE IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018994:	f003 0320 	and.w	r3, r3, #32
 8018998:	2b20      	cmp	r3, #32
 801899a:	d10d      	bne.n	80189b8 <HAL_ETH_IRQHandler+0x1c8>
            {
                /* Get MAC LPI interrupt source and clear the status register pending bit */
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80189a4:	f003 020f 	and.w	r2, r3, #15
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	671a      	str	r2, [r3, #112]	@ 0x70
                    heth->EEECallback( heth );
                }
                #else
                {
                    /* Ethernet EEE callback */
                    HAL_ETH_EEECallback( heth );
 80189ac:	6878      	ldr	r0, [r7, #4]
 80189ae:	f000 f82b 	bl	8018a08 <HAL_ETH_EEECallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	2200      	movs	r2, #0
 80189b6:	671a      	str	r2, [r3, #112]	@ 0x70
                        #endif
                    }
                }
            #else /* #if defined(DUAL_CORE) */
                /* check ETH WAKEUP exti flag */
                if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 80189b8:	4b08      	ldr	r3, [pc, #32]	@ (80189dc <HAL_ETH_IRQHandler+0x1ec>)
 80189ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d006      	beq.n	80189d2 <HAL_ETH_IRQHandler+0x1e2>
                {
                    /* Clear ETH WAKEUP Exti pending bit */
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 80189c4:	4b05      	ldr	r3, [pc, #20]	@ (80189dc <HAL_ETH_IRQHandler+0x1ec>)
 80189c6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80189ca:	629a      	str	r2, [r3, #40]	@ 0x28
                        heth->WakeUpCallback( heth );
                    }
                    #else
                    {
                        /* ETH WAKEUP callback */
                        HAL_ETH_WakeUpCallback( heth );
 80189cc:	6878      	ldr	r0, [r7, #4]
 80189ce:	f000 f825 	bl	8018a1c <HAL_ETH_WakeUpCallback>
                    }
                    #endif
                }
            #endif /* #if defined(DUAL_CORE) */
        }
 80189d2:	bf00      	nop
 80189d4:	3708      	adds	r7, #8
 80189d6:	46bd      	mov	sp, r7
 80189d8:	bd80      	pop	{r7, pc}
 80189da:	bf00      	nop
 80189dc:	58000080 	.word	0x58000080

080189e0 <HAL_ETH_MACErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
        {
 80189e0:	b480      	push	{r7}
 80189e2:	b083      	sub	sp, #12
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_MACErrorCallback could be implemented in the user file
             */
        }
 80189e8:	bf00      	nop
 80189ea:	370c      	adds	r7, #12
 80189ec:	46bd      	mov	sp, r7
 80189ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189f2:	4770      	bx	lr

080189f4 <HAL_ETH_PMTCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
        {
 80189f4:	b480      	push	{r7}
 80189f6:	b083      	sub	sp, #12
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_PMTCallback could be implemented in the user file
             */
        }
 80189fc:	bf00      	nop
 80189fe:	370c      	adds	r7, #12
 8018a00:	46bd      	mov	sp, r7
 8018a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a06:	4770      	bx	lr

08018a08 <HAL_ETH_EEECallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
        {
 8018a08:	b480      	push	{r7}
 8018a0a:	b083      	sub	sp, #12
 8018a0c:	af00      	add	r7, sp, #0
 8018a0e:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_EEECallback could be implemented in the user file
             */
        }
 8018a10:	bf00      	nop
 8018a12:	370c      	adds	r7, #12
 8018a14:	46bd      	mov	sp, r7
 8018a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1a:	4770      	bx	lr

08018a1c <HAL_ETH_WakeUpCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
        {
 8018a1c:	b480      	push	{r7}
 8018a1e:	b083      	sub	sp, #12
 8018a20:	af00      	add	r7, sp, #0
 8018a22:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             *        the HAL_ETH_WakeUpCallback could be implemented in the user file
             */
        }
 8018a24:	bf00      	nop
 8018a26:	370c      	adds	r7, #12
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a2e:	4770      	bx	lr

08018a30 <HAL_ETH_ReadPHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint32_t PHYAddr,
                                                   uint32_t PHYReg,
                                                   uint32_t * pRegValue )
        {
 8018a30:	b580      	push	{r7, lr}
 8018a32:	b086      	sub	sp, #24
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	60f8      	str	r0, [r7, #12]
 8018a38:	60b9      	str	r1, [r7, #8]
 8018a3a:	607a      	str	r2, [r7, #4]
 8018a3c:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8018a3e:	68fb      	ldr	r3, [r7, #12]
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018a46:	f003 0301 	and.w	r3, r3, #1
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d001      	beq.n	8018a52 <HAL_ETH_ReadPHYRegister+0x22>
            {
                return HAL_ERROR;
 8018a4e:	2301      	movs	r3, #1
 8018a50:	e03e      	b.n	8018ad0 <HAL_ETH_ReadPHYRegister+0xa0>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018a5a:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the read mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8018a5c:	697b      	ldr	r3, [r7, #20]
 8018a5e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8018a62:	68bb      	ldr	r3, [r7, #8]
 8018a64:	055b      	lsls	r3, r3, #21
 8018a66:	4313      	orrs	r3, r2
 8018a68:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8018a6a:	697b      	ldr	r3, [r7, #20]
 8018a6c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	041b      	lsls	r3, r3, #16
 8018a74:	4313      	orrs	r3, r2
 8018a76:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD );
 8018a78:	697b      	ldr	r3, [r7, #20]
 8018a7a:	f043 030c 	orr.w	r3, r3, #12
 8018a7e:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8018a80:	697b      	ldr	r3, [r7, #20]
 8018a82:	f043 0301 	orr.w	r3, r3, #1
 8018a86:	617b      	str	r3, [r7, #20]

            /* Write the result value into the MDII Address register */
            WRITE_REG( heth->Instance->MACMDIOAR, tmpreg );
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	697a      	ldr	r2, [r7, #20]
 8018a8e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

            tickstart = HAL_GetTick();
 8018a92:	f000 ff01 	bl	8019898 <HAL_GetTick>
 8018a96:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018a98:	e009      	b.n	8018aae <HAL_ETH_ReadPHYRegister+0x7e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8018a9a:	f000 fefd 	bl	8019898 <HAL_GetTick>
 8018a9e:	4602      	mov	r2, r0
 8018aa0:	693b      	ldr	r3, [r7, #16]
 8018aa2:	1ad3      	subs	r3, r2, r3
 8018aa4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018aa8:	d901      	bls.n	8018aae <HAL_ETH_ReadPHYRegister+0x7e>
                {
                    return HAL_ERROR;
 8018aaa:	2301      	movs	r3, #1
 8018aac:	e010      	b.n	8018ad0 <HAL_ETH_ReadPHYRegister+0xa0>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018ab6:	f003 0301 	and.w	r3, r3, #1
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d1ed      	bne.n	8018a9a <HAL_ETH_ReadPHYRegister+0x6a>
                }
            }

            /* Get MACMIIDR value */
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8018ac6:	b29b      	uxth	r3, r3
 8018ac8:	461a      	mov	r2, r3
 8018aca:	683b      	ldr	r3, [r7, #0]
 8018acc:	601a      	str	r2, [r3, #0]

            return HAL_OK;
 8018ace:	2300      	movs	r3, #0
        }
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	3718      	adds	r7, #24
 8018ad4:	46bd      	mov	sp, r7
 8018ad6:	bd80      	pop	{r7, pc}

08018ad8 <HAL_ETH_WritePHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint32_t PHYAddr,
                                                    uint32_t PHYReg,
                                                    uint32_t RegValue )
        {
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b086      	sub	sp, #24
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	60f8      	str	r0, [r7, #12]
 8018ae0:	60b9      	str	r1, [r7, #8]
 8018ae2:	607a      	str	r2, [r7, #4]
 8018ae4:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018aee:	f003 0301 	and.w	r3, r3, #1
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d001      	beq.n	8018afa <HAL_ETH_WritePHYRegister+0x22>
            {
                return HAL_ERROR;
 8018af6:	2301      	movs	r3, #1
 8018af8:	e03c      	b.n	8018b74 <HAL_ETH_WritePHYRegister+0x9c>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018b02:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the write mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8018b04:	697b      	ldr	r3, [r7, #20]
 8018b06:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8018b0a:	68bb      	ldr	r3, [r7, #8]
 8018b0c:	055b      	lsls	r3, r3, #21
 8018b0e:	4313      	orrs	r3, r2
 8018b10:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8018b12:	697b      	ldr	r3, [r7, #20]
 8018b14:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	041b      	lsls	r3, r3, #16
 8018b1c:	4313      	orrs	r3, r2
 8018b1e:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR );
 8018b20:	697b      	ldr	r3, [r7, #20]
 8018b22:	f023 030c 	bic.w	r3, r3, #12
 8018b26:	f043 0304 	orr.w	r3, r3, #4
 8018b2a:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8018b2c:	697b      	ldr	r3, [r7, #20]
 8018b2e:	f043 0301 	orr.w	r3, r3, #1
 8018b32:	617b      	str	r3, [r7, #20]


            /* Give the value to the MII data register */
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 8018b34:	683b      	ldr	r3, [r7, #0]
 8018b36:	b29a      	uxth	r2, r3
 8018b38:	4b10      	ldr	r3, [pc, #64]	@ (8018b7c <HAL_ETH_WritePHYRegister+0xa4>)
 8018b3a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

            /* Write the result value into the MII Address register */
            WRITE_REG( ETH->MACMDIOAR, tmpreg );
 8018b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8018b7c <HAL_ETH_WritePHYRegister+0xa4>)
 8018b40:	697b      	ldr	r3, [r7, #20]
 8018b42:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

            tickstart = HAL_GetTick();
 8018b46:	f000 fea7 	bl	8019898 <HAL_GetTick>
 8018b4a:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018b4c:	e009      	b.n	8018b62 <HAL_ETH_WritePHYRegister+0x8a>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8018b4e:	f000 fea3 	bl	8019898 <HAL_GetTick>
 8018b52:	4602      	mov	r2, r0
 8018b54:	693b      	ldr	r3, [r7, #16]
 8018b56:	1ad3      	subs	r3, r2, r3
 8018b58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018b5c:	d901      	bls.n	8018b62 <HAL_ETH_WritePHYRegister+0x8a>
                {
                    return HAL_ERROR;
 8018b5e:	2301      	movs	r3, #1
 8018b60:	e008      	b.n	8018b74 <HAL_ETH_WritePHYRegister+0x9c>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018b62:	68fb      	ldr	r3, [r7, #12]
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018b6a:	f003 0301 	and.w	r3, r3, #1
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d1ed      	bne.n	8018b4e <HAL_ETH_WritePHYRegister+0x76>
                }
            }

            return HAL_OK;
 8018b72:	2300      	movs	r3, #0
        }
 8018b74:	4618      	mov	r0, r3
 8018b76:	3718      	adds	r7, #24
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd80      	pop	{r7, pc}
 8018b7c:	40028000 	.word	0x40028000

08018b80 <HAL_ETH_GetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL Status
 */
        HAL_StatusTypeDef HAL_ETH_GetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8018b80:	b480      	push	{r7}
 8018b82:	b083      	sub	sp, #12
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	6078      	str	r0, [r7, #4]
 8018b88:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8018b8a:	683b      	ldr	r3, [r7, #0]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d101      	bne.n	8018b94 <HAL_ETH_GetMACConfig+0x14>
            {
                return HAL_ERROR;
 8018b90:	2301      	movs	r3, #1
 8018b92:	e1c3      	b.n	8018f1c <HAL_ETH_GetMACConfig+0x39c>
            }

            /* Get MAC parameters */
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	f003 020c 	and.w	r2, r3, #12
 8018b9e:	683b      	ldr	r3, [r7, #0]
 8018ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	f003 0310 	and.w	r3, r3, #16
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	bf14      	ite	ne
 8018bb0:	2301      	movne	r3, #1
 8018bb2:	2300      	moveq	r3, #0
 8018bb4:	b2db      	uxtb	r3, r3
 8018bb6:	461a      	mov	r2, r3
 8018bb8:	683b      	ldr	r3, [r7, #0]
 8018bba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8018bc8:	683b      	ldr	r3, [r7, #0]
 8018bca:	625a      	str	r2, [r3, #36]	@ 0x24
            macconf->RetryTransmission = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DR ) >> 8 ) == 0U ) ? ENABLE : DISABLE;
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	bf0c      	ite	eq
 8018bda:	2301      	moveq	r3, #1
 8018bdc:	2300      	movne	r3, #0
 8018bde:	b2db      	uxtb	r3, r3
 8018be0:	461a      	mov	r2, r3
 8018be2:	683b      	ldr	r3, [r7, #0]
 8018be4:	f883 2020 	strb.w	r2, [r3, #32]
            macconf->CarrierSenseDuringTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DCRS ) >> 9 ) > 0U ) ? ENABLE : DISABLE;
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	bf14      	ite	ne
 8018bf6:	2301      	movne	r3, #1
 8018bf8:	2300      	moveq	r3, #0
 8018bfa:	b2db      	uxtb	r3, r3
 8018bfc:	461a      	mov	r2, r3
 8018bfe:	683b      	ldr	r3, [r7, #0]
 8018c00:	77da      	strb	r2, [r3, #31]
            macconf->ReceiveOwn = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DO ) >> 10 ) == 0U ) ? ENABLE : DISABLE;
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	bf0c      	ite	eq
 8018c10:	2301      	moveq	r3, #1
 8018c12:	2300      	movne	r3, #0
 8018c14:	b2db      	uxtb	r3, r3
 8018c16:	461a      	mov	r2, r3
 8018c18:	683b      	ldr	r3, [r7, #0]
 8018c1a:	779a      	strb	r2, [r3, #30]
            macconf->CarrierSenseBeforeTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ECRSFD ) >> 11 ) > 0U ) ? ENABLE : DISABLE;
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	bf14      	ite	ne
 8018c2a:	2301      	movne	r3, #1
 8018c2c:	2300      	moveq	r3, #0
 8018c2e:	b2db      	uxtb	r3, r3
 8018c30:	461a      	mov	r2, r3
 8018c32:	683b      	ldr	r3, [r7, #0]
 8018c34:	775a      	strb	r2, [r3, #29]
            macconf->LoopbackMode = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_LM ) >> 12 ) > 0U ) ? ENABLE : DISABLE;
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	bf14      	ite	ne
 8018c44:	2301      	movne	r3, #1
 8018c46:	2300      	moveq	r3, #0
 8018c48:	b2db      	uxtb	r3, r3
 8018c4a:	461a      	mov	r2, r3
 8018c4c:	683b      	ldr	r3, [r7, #0]
 8018c4e:	771a      	strb	r2, [r3, #28]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8018c5a:	683b      	ldr	r3, [r7, #0]
 8018c5c:	619a      	str	r2, [r3, #24]
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8018c68:	683b      	ldr	r3, [r7, #0]
 8018c6a:	615a      	str	r2, [r3, #20]
            macconf->JumboPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JE ) >> 16 ) > 0U ) ? ENABLE : DISABLE;
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	bf14      	ite	ne
 8018c7a:	2301      	movne	r3, #1
 8018c7c:	2300      	moveq	r3, #0
 8018c7e:	b2db      	uxtb	r3, r3
 8018c80:	461a      	mov	r2, r3
 8018c82:	683b      	ldr	r3, [r7, #0]
 8018c84:	749a      	strb	r2, [r3, #18]
            macconf->Jabber = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JD ) >> 17 ) == 0U ) ? ENABLE : DISABLE;
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	bf0c      	ite	eq
 8018c94:	2301      	moveq	r3, #1
 8018c96:	2300      	movne	r3, #0
 8018c98:	b2db      	uxtb	r3, r3
 8018c9a:	461a      	mov	r2, r3
 8018c9c:	683b      	ldr	r3, [r7, #0]
 8018c9e:	745a      	strb	r2, [r3, #17]
            macconf->Watchdog = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_WD ) >> 19 ) == 0U ) ? ENABLE : DISABLE;
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	bf0c      	ite	eq
 8018cae:	2301      	moveq	r3, #1
 8018cb0:	2300      	movne	r3, #0
 8018cb2:	b2db      	uxtb	r3, r3
 8018cb4:	461a      	mov	r2, r3
 8018cb6:	683b      	ldr	r3, [r7, #0]
 8018cb8:	741a      	strb	r2, [r3, #16]
            macconf->AutomaticPadCRCStrip = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ACS ) >> 20 ) > 0U ) ? ENABLE : DISABLE;
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	bf14      	ite	ne
 8018cc8:	2301      	movne	r3, #1
 8018cca:	2300      	moveq	r3, #0
 8018ccc:	b2db      	uxtb	r3, r3
 8018cce:	461a      	mov	r2, r3
 8018cd0:	683b      	ldr	r3, [r7, #0]
 8018cd2:	73da      	strb	r2, [r3, #15]
            macconf->CRCStripTypePacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_CST ) >> 21 ) > 0U ) ? ENABLE : DISABLE;
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	bf14      	ite	ne
 8018ce2:	2301      	movne	r3, #1
 8018ce4:	2300      	moveq	r3, #0
 8018ce6:	b2db      	uxtb	r3, r3
 8018ce8:	461a      	mov	r2, r3
 8018cea:	683b      	ldr	r3, [r7, #0]
 8018cec:	739a      	strb	r2, [r3, #14]
            macconf->Support2KPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_S2KP ) >> 22 ) > 0U ) ? ENABLE : DISABLE;
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	bf14      	ite	ne
 8018cfc:	2301      	movne	r3, #1
 8018cfe:	2300      	moveq	r3, #0
 8018d00:	b2db      	uxtb	r3, r3
 8018d02:	461a      	mov	r2, r3
 8018d04:	683b      	ldr	r3, [r7, #0]
 8018d06:	735a      	strb	r2, [r3, #13]
            macconf->GiantPacketSizeLimitControl = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_GPSLCE ) >> 23 ) > 0U ) ? ENABLE : DISABLE;
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	bf14      	ite	ne
 8018d16:	2301      	movne	r3, #1
 8018d18:	2300      	moveq	r3, #0
 8018d1a:	b2db      	uxtb	r3, r3
 8018d1c:	461a      	mov	r2, r3
 8018d1e:	683b      	ldr	r3, [r7, #0]
 8018d20:	731a      	strb	r2, [r3, #12]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8018d2c:	683b      	ldr	r3, [r7, #0]
 8018d2e:	609a      	str	r2, [r3, #8]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	bf14      	ite	ne
 8018d3e:	2301      	movne	r3, #1
 8018d40:	2300      	moveq	r3, #0
 8018d42:	b2db      	uxtb	r3, r3
 8018d44:	461a      	mov	r2, r3
 8018d46:	683b      	ldr	r3, [r7, #0]
 8018d48:	711a      	strb	r2, [r3, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8018d54:	683b      	ldr	r3, [r7, #0]
 8018d56:	601a      	str	r2, [r3, #0]

            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	685b      	ldr	r3, [r3, #4]
 8018d5e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8018d62:	683b      	ldr	r3, [r7, #0]
 8018d64:	635a      	str	r2, [r3, #52]	@ 0x34
            macconf->CRCCheckingRxPackets = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_DCRCC ) >> 16 ) == 0U ) ? ENABLE : DISABLE;
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	685b      	ldr	r3, [r3, #4]
 8018d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	bf0c      	ite	eq
 8018d74:	2301      	moveq	r3, #1
 8018d76:	2300      	movne	r3, #0
 8018d78:	b2db      	uxtb	r3, r3
 8018d7a:	461a      	mov	r2, r3
 8018d7c:	683b      	ldr	r3, [r7, #0]
 8018d7e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            macconf->SlowProtocolDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_SPEN ) >> 17 ) > 0U ) ? ENABLE : DISABLE;
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	685b      	ldr	r3, [r3, #4]
 8018d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	bf14      	ite	ne
 8018d90:	2301      	movne	r3, #1
 8018d92:	2300      	moveq	r3, #0
 8018d94:	b2db      	uxtb	r3, r3
 8018d96:	461a      	mov	r2, r3
 8018d98:	683b      	ldr	r3, [r7, #0]
 8018d9a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            macconf->UnicastSlowProtocolPacketDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_USP ) >> 18 ) > 0U ) ? ENABLE : DISABLE;
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	685b      	ldr	r3, [r3, #4]
 8018da4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	bf14      	ite	ne
 8018dac:	2301      	movne	r3, #1
 8018dae:	2300      	moveq	r3, #0
 8018db0:	b2db      	uxtb	r3, r3
 8018db2:	461a      	mov	r2, r3
 8018db4:	683b      	ldr	r3, [r7, #0]
 8018db6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            macconf->ExtendedInterPacketGap = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPGEN ) >> 24 ) > 0U ) ? ENABLE : DISABLE;
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	685b      	ldr	r3, [r3, #4]
 8018dc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	bf14      	ite	ne
 8018dc8:	2301      	movne	r3, #1
 8018dca:	2300      	moveq	r3, #0
 8018dcc:	b2db      	uxtb	r3, r3
 8018dce:	461a      	mov	r2, r3
 8018dd0:	683b      	ldr	r3, [r7, #0]
 8018dd2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	685b      	ldr	r3, [r3, #4]
 8018ddc:	0e5b      	lsrs	r3, r3, #25
 8018dde:	f003 021f 	and.w	r2, r3, #31
 8018de2:	683b      	ldr	r3, [r7, #0]
 8018de4:	63da      	str	r2, [r3, #60]	@ 0x3c


            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	68db      	ldr	r3, [r3, #12]
 8018dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	bf14      	ite	ne
 8018df4:	2301      	movne	r3, #1
 8018df6:	2300      	moveq	r3, #0
 8018df8:	b2db      	uxtb	r3, r3
 8018dfa:	461a      	mov	r2, r3
 8018dfc:	683b      	ldr	r3, [r7, #0]
 8018dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	68db      	ldr	r3, [r3, #12]
 8018e08:	f003 020f 	and.w	r2, r3, #15
 8018e0c:	683b      	ldr	r3, [r7, #0]
 8018e0e:	645a      	str	r2, [r3, #68]	@ 0x44

            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018e16:	f003 0302 	and.w	r3, r3, #2
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	bf14      	ite	ne
 8018e1e:	2301      	movne	r3, #1
 8018e20:	2300      	moveq	r3, #0
 8018e22:	b2db      	uxtb	r3, r3
 8018e24:	461a      	mov	r2, r3
 8018e26:	683b      	ldr	r3, [r7, #0]
 8018e28:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            macconf->ZeroQuantaPause = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ ) >> 7 ) == 0U ) ? ENABLE : DISABLE;
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	bf0c      	ite	eq
 8018e3a:	2301      	moveq	r3, #1
 8018e3c:	2300      	movne	r3, #0
 8018e3e:	b2db      	uxtb	r3, r3
 8018e40:	461a      	mov	r2, r3
 8018e42:	683b      	ldr	r3, [r7, #0]
 8018e44:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018e4e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8018e52:	683b      	ldr	r3, [r7, #0]
 8018e54:	651a      	str	r2, [r3, #80]	@ 0x50
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018e5c:	0c1b      	lsrs	r3, r3, #16
 8018e5e:	b29a      	uxth	r2, r3
 8018e60:	683b      	ldr	r3, [r7, #0]
 8018e62:	649a      	str	r2, [r3, #72]	@ 0x48


            macconf->ReceiveFlowControl = ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_RFE ) > 0U ) ? ENABLE : DISABLE;
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018e6c:	f003 0301 	and.w	r3, r3, #1
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	bf14      	ite	ne
 8018e74:	2301      	movne	r3, #1
 8018e76:	2300      	moveq	r3, #0
 8018e78:	b2db      	uxtb	r3, r3
 8018e7a:	461a      	mov	r2, r3
 8018e7c:	683b      	ldr	r3, [r7, #0]
 8018e7e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
            macconf->UnicastPausePacketDetect = ( ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_UP ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018e8a:	f003 0302 	and.w	r3, r3, #2
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	bf14      	ite	ne
 8018e92:	2301      	movne	r3, #1
 8018e94:	2300      	moveq	r3, #0
 8018e96:	b2db      	uxtb	r3, r3
 8018e98:	461a      	mov	r2, r3
 8018e9a:	683b      	ldr	r3, [r7, #0]
 8018e9c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8018ea8:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8018eac:	683b      	ldr	r3, [r7, #0]
 8018eae:	659a      	str	r2, [r3, #88]	@ 0x58

            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018eb8:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8018ebc:	683b      	ldr	r3, [r7, #0]
 8018ebe:	65da      	str	r2, [r3, #92]	@ 0x5c
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018ec8:	f003 0308 	and.w	r3, r3, #8
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	bf14      	ite	ne
 8018ed0:	2301      	movne	r3, #1
 8018ed2:	2300      	moveq	r3, #0
 8018ed4:	b2db      	uxtb	r3, r3
 8018ed6:	461a      	mov	r2, r3
 8018ed8:	683b      	ldr	r3, [r7, #0]
 8018eda:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
            macconf->ForwardRxErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018ee6:	f003 0310 	and.w	r3, r3, #16
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	bf14      	ite	ne
 8018eee:	2301      	movne	r3, #1
 8018ef0:	2300      	moveq	r3, #0
 8018ef2:	b2db      	uxtb	r3, r3
 8018ef4:	461a      	mov	r2, r3
 8018ef6:	683b      	ldr	r3, [r7, #0]
 8018ef8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
            macconf->DropTCPIPChecksumErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF ) >> 6 ) == 0U ) ? ENABLE : DISABLE;
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	bf0c      	ite	eq
 8018f0c:	2301      	moveq	r3, #1
 8018f0e:	2300      	movne	r3, #0
 8018f10:	b2db      	uxtb	r3, r3
 8018f12:	461a      	mov	r2, r3
 8018f14:	683b      	ldr	r3, [r7, #0]
 8018f16:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            return HAL_OK;
 8018f1a:	2300      	movs	r3, #0
        }
 8018f1c:	4618      	mov	r0, r3
 8018f1e:	370c      	adds	r7, #12
 8018f20:	46bd      	mov	sp, r7
 8018f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f26:	4770      	bx	lr

08018f28 <HAL_ETH_SetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8018f28:	b580      	push	{r7, lr}
 8018f2a:	b082      	sub	sp, #8
 8018f2c:	af00      	add	r7, sp, #0
 8018f2e:	6078      	str	r0, [r7, #4]
 8018f30:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8018f32:	683b      	ldr	r3, [r7, #0]
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d101      	bne.n	8018f3c <HAL_ETH_SetMACConfig+0x14>
            {
                return HAL_ERROR;
 8018f38:	2301      	movs	r3, #1
 8018f3a:	e00a      	b.n	8018f52 <HAL_ETH_SetMACConfig+0x2a>
            }

            if( heth->RxState == HAL_ETH_STATE_READY )
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018f40:	2b10      	cmp	r3, #16
 8018f42:	d105      	bne.n	8018f50 <HAL_ETH_SetMACConfig+0x28>
            {
                ETH_SetMACConfig( heth, macconf );
 8018f44:	6839      	ldr	r1, [r7, #0]
 8018f46:	6878      	ldr	r0, [r7, #4]
 8018f48:	f000 f808 	bl	8018f5c <ETH_SetMACConfig>

                return HAL_OK;
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	e000      	b.n	8018f52 <HAL_ETH_SetMACConfig+0x2a>
            }
            else
            {
                return HAL_ERROR;
 8018f50:	2301      	movs	r3, #1
            }
        }
 8018f52:	4618      	mov	r0, r3
 8018f54:	3708      	adds	r7, #8
 8018f56:	46bd      	mov	sp, r7
 8018f58:	bd80      	pop	{r7, pc}
	...

08018f5c <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 8018f5c:	b480      	push	{r7}
 8018f5e:	b085      	sub	sp, #20
 8018f60:	af00      	add	r7, sp, #0
 8018f62:	6078      	str	r0, [r7, #4]
 8018f64:	6039      	str	r1, [r7, #0]
            uint32_t macregval;

            /*------------------------ MACCR Configuration --------------------*/
            macregval = ( macconf->InterPacketGapVal |
 8018f66:	683b      	ldr	r3, [r7, #0]
 8018f68:	689a      	ldr	r2, [r3, #8]
                          macconf->SourceAddrControl |
 8018f6a:	683b      	ldr	r3, [r7, #0]
 8018f6c:	681b      	ldr	r3, [r3, #0]
            macregval = ( macconf->InterPacketGapVal |
 8018f6e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8018f70:	683b      	ldr	r3, [r7, #0]
 8018f72:	791b      	ldrb	r3, [r3, #4]
 8018f74:	06db      	lsls	r3, r3, #27
                          macconf->SourceAddrControl |
 8018f76:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8018f78:	683b      	ldr	r3, [r7, #0]
 8018f7a:	7b1b      	ldrb	r3, [r3, #12]
 8018f7c:	05db      	lsls	r3, r3, #23
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8018f7e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8018f80:	683b      	ldr	r3, [r7, #0]
 8018f82:	7b5b      	ldrb	r3, [r3, #13]
 8018f84:	059b      	lsls	r3, r3, #22
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8018f86:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8018f88:	683b      	ldr	r3, [r7, #0]
 8018f8a:	7b9b      	ldrb	r3, [r3, #14]
 8018f8c:	055b      	lsls	r3, r3, #21
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8018f8e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8018f90:	683b      	ldr	r3, [r7, #0]
 8018f92:	7bdb      	ldrb	r3, [r3, #15]
 8018f94:	051b      	lsls	r3, r3, #20
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8018f96:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8018f98:	683a      	ldr	r2, [r7, #0]
 8018f9a:	7c12      	ldrb	r2, [r2, #16]
 8018f9c:	2a00      	cmp	r2, #0
 8018f9e:	d102      	bne.n	8018fa6 <ETH_SetMACConfig+0x4a>
 8018fa0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8018fa4:	e000      	b.n	8018fa8 <ETH_SetMACConfig+0x4c>
 8018fa6:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8018fa8:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8018faa:	683a      	ldr	r2, [r7, #0]
 8018fac:	7c52      	ldrb	r2, [r2, #17]
 8018fae:	2a00      	cmp	r2, #0
 8018fb0:	d102      	bne.n	8018fb8 <ETH_SetMACConfig+0x5c>
 8018fb2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8018fb6:	e000      	b.n	8018fba <ETH_SetMACConfig+0x5e>
 8018fb8:	2200      	movs	r2, #0
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8018fba:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8018fbc:	683b      	ldr	r3, [r7, #0]
 8018fbe:	7c9b      	ldrb	r3, [r3, #18]
 8018fc0:	041b      	lsls	r3, r3, #16
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8018fc2:	431a      	orrs	r2, r3
                          macconf->Speed |
 8018fc4:	683b      	ldr	r3, [r7, #0]
 8018fc6:	695b      	ldr	r3, [r3, #20]
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8018fc8:	431a      	orrs	r2, r3
                          macconf->DuplexMode |
 8018fca:	683b      	ldr	r3, [r7, #0]
 8018fcc:	699b      	ldr	r3, [r3, #24]
                          macconf->Speed |
 8018fce:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8018fd0:	683b      	ldr	r3, [r7, #0]
 8018fd2:	7f1b      	ldrb	r3, [r3, #28]
 8018fd4:	031b      	lsls	r3, r3, #12
                          macconf->DuplexMode |
 8018fd6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8018fd8:	683b      	ldr	r3, [r7, #0]
 8018fda:	7f5b      	ldrb	r3, [r3, #29]
 8018fdc:	02db      	lsls	r3, r3, #11
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8018fde:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8018fe0:	683a      	ldr	r2, [r7, #0]
 8018fe2:	7f92      	ldrb	r2, [r2, #30]
 8018fe4:	2a00      	cmp	r2, #0
 8018fe6:	d102      	bne.n	8018fee <ETH_SetMACConfig+0x92>
 8018fe8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018fec:	e000      	b.n	8018ff0 <ETH_SetMACConfig+0x94>
 8018fee:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8018ff0:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8018ff2:	683b      	ldr	r3, [r7, #0]
 8018ff4:	7fdb      	ldrb	r3, [r3, #31]
 8018ff6:	025b      	lsls	r3, r3, #9
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8018ff8:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8018ffa:	683a      	ldr	r2, [r7, #0]
 8018ffc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8019000:	2a00      	cmp	r2, #0
 8019002:	d102      	bne.n	801900a <ETH_SetMACConfig+0xae>
 8019004:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019008:	e000      	b.n	801900c <ETH_SetMACConfig+0xb0>
 801900a:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 801900c:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 801900e:	683b      	ldr	r3, [r7, #0]
 8019010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8019012:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 8019014:	683b      	ldr	r3, [r7, #0]
 8019016:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801901a:	011b      	lsls	r3, r3, #4
                          macconf->BackOffLimit |
 801901c:	431a      	orrs	r2, r3
                          macconf->PreambleLength );
 801901e:	683b      	ldr	r3, [r7, #0]
 8019020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            macregval = ( macconf->InterPacketGapVal |
 8019022:	4313      	orrs	r3, r2
 8019024:	60fb      	str	r3, [r7, #12]

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	681a      	ldr	r2, [r3, #0]
 801902c:	4b56      	ldr	r3, [pc, #344]	@ (8019188 <ETH_SetMACConfig+0x22c>)
 801902e:	4013      	ands	r3, r2
 8019030:	687a      	ldr	r2, [r7, #4]
 8019032:	6812      	ldr	r2, [r2, #0]
 8019034:	68f9      	ldr	r1, [r7, #12]
 8019036:	430b      	orrs	r3, r1
 8019038:	6013      	str	r3, [r2, #0]

            /*------------------------ MACECR Configuration --------------------*/
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 801903a:	683b      	ldr	r3, [r7, #0]
 801903c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801903e:	065a      	lsls	r2, r3, #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019040:	683b      	ldr	r3, [r7, #0]
 8019042:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019046:	061b      	lsls	r3, r3, #24
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019048:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 801904a:	683b      	ldr	r3, [r7, #0]
 801904c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019050:	049b      	lsls	r3, r3, #18
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019052:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8019054:	683b      	ldr	r3, [r7, #0]
 8019056:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801905a:	045b      	lsls	r3, r3, #17
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 801905c:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 801905e:	683a      	ldr	r2, [r7, #0]
 8019060:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8019064:	2a00      	cmp	r2, #0
 8019066:	d102      	bne.n	801906e <ETH_SetMACConfig+0x112>
 8019068:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801906c:	e000      	b.n	8019070 <ETH_SetMACConfig+0x114>
 801906e:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8019070:	431a      	orrs	r2, r3
                          macconf->GiantPacketSizeLimit );
 8019072:	683b      	ldr	r3, [r7, #0]
 8019074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019076:	4313      	orrs	r3, r2
 8019078:	60fb      	str	r3, [r7, #12]

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	685a      	ldr	r2, [r3, #4]
 8019080:	4b42      	ldr	r3, [pc, #264]	@ (801918c <ETH_SetMACConfig+0x230>)
 8019082:	4013      	ands	r3, r2
 8019084:	687a      	ldr	r2, [r7, #4]
 8019086:	6812      	ldr	r2, [r2, #0]
 8019088:	68f9      	ldr	r1, [r7, #12]
 801908a:	430b      	orrs	r3, r1
 801908c:	6053      	str	r3, [r2, #4]

            /*------------------------ MACWTR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 801908e:	683b      	ldr	r3, [r7, #0]
 8019090:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8019094:	021a      	lsls	r2, r3, #8
                          macconf->WatchdogTimeout );
 8019096:	683b      	ldr	r3, [r7, #0]
 8019098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 801909a:	4313      	orrs	r3, r2
 801909c:	60fb      	str	r3, [r7, #12]

            /* Write to MACWTR */
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	68da      	ldr	r2, [r3, #12]
 80190a4:	4b3a      	ldr	r3, [pc, #232]	@ (8019190 <ETH_SetMACConfig+0x234>)
 80190a6:	4013      	ands	r3, r2
 80190a8:	687a      	ldr	r2, [r7, #4]
 80190aa:	6812      	ldr	r2, [r2, #0]
 80190ac:	68f9      	ldr	r1, [r7, #12]
 80190ae:	430b      	orrs	r3, r1
 80190b0:	60d3      	str	r3, [r2, #12]

            /*------------------------ MACTFCR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80190b2:	683b      	ldr	r3, [r7, #0]
 80190b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80190b8:	005a      	lsls	r2, r3, #1
                          macconf->PauseLowThreshold |
 80190ba:	683b      	ldr	r3, [r7, #0]
 80190bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80190be:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 80190c0:	683a      	ldr	r2, [r7, #0]
 80190c2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80190c6:	2a00      	cmp	r2, #0
 80190c8:	d101      	bne.n	80190ce <ETH_SetMACConfig+0x172>
 80190ca:	2280      	movs	r2, #128	@ 0x80
 80190cc:	e000      	b.n	80190d0 <ETH_SetMACConfig+0x174>
 80190ce:	2200      	movs	r2, #0
                          macconf->PauseLowThreshold |
 80190d0:	431a      	orrs	r2, r3
                          ( macconf->PauseTime << 16 ) );
 80190d2:	683b      	ldr	r3, [r7, #0]
 80190d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80190d6:	041b      	lsls	r3, r3, #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80190d8:	4313      	orrs	r3, r2
 80190da:	60fb      	str	r3, [r7, #12]

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80190e2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80190e6:	4013      	ands	r3, r2
 80190e8:	687a      	ldr	r2, [r7, #4]
 80190ea:	6812      	ldr	r2, [r2, #0]
 80190ec:	68f9      	ldr	r1, [r7, #12]
 80190ee:	430b      	orrs	r3, r1
 80190f0:	6713      	str	r3, [r2, #112]	@ 0x70

            /*------------------------ MACRFCR Configuration --------------------*/
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 80190f2:	683b      	ldr	r3, [r7, #0]
 80190f4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80190f8:	461a      	mov	r2, r3
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 80190fa:	683b      	ldr	r3, [r7, #0]
 80190fc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8019100:	005b      	lsls	r3, r3, #1
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8019102:	4313      	orrs	r3, r2
 8019104:	60fb      	str	r3, [r7, #12]

            /* Write to MACRFCR */
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801910e:	f023 0103 	bic.w	r1, r3, #3
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	681b      	ldr	r3, [r3, #0]
 8019116:	68fa      	ldr	r2, [r7, #12]
 8019118:	430a      	orrs	r2, r1
 801911a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

            /*------------------------ MTLTQOMR Configuration --------------------*/
            /* Write to MTLTQOMR */
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8019126:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 801912a:	683b      	ldr	r3, [r7, #0]
 801912c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	430a      	orrs	r2, r1
 8019134:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

            /*------------------------ MTLRQOMR Configuration --------------------*/
            macregval = ( macconf->ReceiveQueueMode |
 8019138:	683b      	ldr	r3, [r7, #0]
 801913a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 801913c:	683a      	ldr	r2, [r7, #0]
 801913e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8019142:	2a00      	cmp	r2, #0
 8019144:	d101      	bne.n	801914a <ETH_SetMACConfig+0x1ee>
 8019146:	2240      	movs	r2, #64	@ 0x40
 8019148:	e000      	b.n	801914c <ETH_SetMACConfig+0x1f0>
 801914a:	2200      	movs	r2, #0
            macregval = ( macconf->ReceiveQueueMode |
 801914c:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 801914e:	683b      	ldr	r3, [r7, #0]
 8019150:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8019154:	011b      	lsls	r3, r3, #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 8019156:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 8019158:	683b      	ldr	r3, [r7, #0]
 801915a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 801915e:	00db      	lsls	r3, r3, #3
            macregval = ( macconf->ReceiveQueueMode |
 8019160:	4313      	orrs	r3, r2
 8019162:	60fb      	str	r3, [r7, #12]

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 801916c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	68fa      	ldr	r2, [r7, #12]
 8019176:	430a      	orrs	r2, r1
 8019178:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
        }
 801917c:	bf00      	nop
 801917e:	3714      	adds	r7, #20
 8019180:	46bd      	mov	sp, r7
 8019182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019186:	4770      	bx	lr
 8019188:	00048083 	.word	0x00048083
 801918c:	c0f88000 	.word	0xc0f88000
 8019190:	fffffef0 	.word	0xfffffef0

08019194 <ETH_SetDMAConfig>:

        static void ETH_SetDMAConfig( ETH_HandleTypeDef * heth,
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
 8019194:	b480      	push	{r7}
 8019196:	b085      	sub	sp, #20
 8019198:	af00      	add	r7, sp, #0
 801919a:	6078      	str	r0, [r7, #4]
 801919c:	6039      	str	r1, [r7, #0]
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80191a6:	681a      	ldr	r2, [r3, #0]
 80191a8:	4b38      	ldr	r3, [pc, #224]	@ (801928c <ETH_SetDMAConfig+0xf8>)
 80191aa:	4013      	ands	r3, r2
 80191ac:	683a      	ldr	r2, [r7, #0]
 80191ae:	6811      	ldr	r1, [r2, #0]
 80191b0:	687a      	ldr	r2, [r7, #4]
 80191b2:	6812      	ldr	r2, [r2, #0]
 80191b4:	430b      	orrs	r3, r1
 80191b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80191ba:	6013      	str	r3, [r2, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80191bc:	683b      	ldr	r3, [r7, #0]
 80191be:	791b      	ldrb	r3, [r3, #4]
 80191c0:	031a      	lsls	r2, r3, #12
                          dmaconf->BurstMode |
 80191c2:	683b      	ldr	r3, [r7, #0]
 80191c4:	689b      	ldr	r3, [r3, #8]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80191c6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 80191c8:	683b      	ldr	r3, [r7, #0]
 80191ca:	7b1b      	ldrb	r3, [r3, #12]
 80191cc:	03db      	lsls	r3, r3, #15
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80191ce:	4313      	orrs	r3, r2
 80191d0:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80191da:	685a      	ldr	r2, [r3, #4]
 80191dc:	4b2c      	ldr	r3, [pc, #176]	@ (8019290 <ETH_SetDMAConfig+0xfc>)
 80191de:	4013      	ands	r3, r2
 80191e0:	687a      	ldr	r2, [r7, #4]
 80191e2:	6812      	ldr	r2, [r2, #0]
 80191e4:	68f9      	ldr	r1, [r7, #12]
 80191e6:	430b      	orrs	r3, r1
 80191e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80191ec:	6053      	str	r3, [r2, #4]

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 80191ee:	683b      	ldr	r3, [r7, #0]
 80191f0:	7b5b      	ldrb	r3, [r3, #13]
 80191f2:	041a      	lsls	r2, r3, #16
                          dmaconf->MaximumSegmentSize );
 80191f4:	683b      	ldr	r3, [r7, #0]
 80191f6:	6a1b      	ldr	r3, [r3, #32]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 80191f8:	4313      	orrs	r3, r2
 80191fa:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019204:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8019208:	4b22      	ldr	r3, [pc, #136]	@ (8019294 <ETH_SetDMAConfig+0x100>)
 801920a:	4013      	ands	r3, r2
 801920c:	687a      	ldr	r2, [r7, #4]
 801920e:	6812      	ldr	r2, [r2, #0]
 8019210:	68f9      	ldr	r1, [r7, #12]
 8019212:	430b      	orrs	r3, r1
 8019214:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019218:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
 801921c:	683b      	ldr	r3, [r7, #0]
 801921e:	691a      	ldr	r2, [r3, #16]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 8019220:	683b      	ldr	r3, [r7, #0]
 8019222:	7d1b      	ldrb	r3, [r3, #20]
 8019224:	011b      	lsls	r3, r3, #4
            dmaregval = ( dmaconf->TxDMABurstLength |
 8019226:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 8019228:	683b      	ldr	r3, [r7, #0]
 801922a:	7f5b      	ldrb	r3, [r3, #29]
 801922c:	031b      	lsls	r3, r3, #12
            dmaregval = ( dmaconf->TxDMABurstLength |
 801922e:	4313      	orrs	r3, r2
 8019230:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801923a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 801923e:	4b16      	ldr	r3, [pc, #88]	@ (8019298 <ETH_SetDMAConfig+0x104>)
 8019240:	4013      	ands	r3, r2
 8019242:	687a      	ldr	r2, [r7, #4]
 8019244:	6812      	ldr	r2, [r2, #0]
 8019246:	68f9      	ldr	r1, [r7, #12]
 8019248:	430b      	orrs	r3, r1
 801924a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801924e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8019252:	683b      	ldr	r3, [r7, #0]
 8019254:	7f1b      	ldrb	r3, [r3, #28]
 8019256:	07da      	lsls	r2, r3, #31
                          dmaconf->RxDMABurstLength );
 8019258:	683b      	ldr	r3, [r7, #0]
 801925a:	699b      	ldr	r3, [r3, #24]
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 801925c:	4313      	orrs	r3, r2
 801925e:	60fb      	str	r3, [r7, #12]

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019268:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801926c:	4b0b      	ldr	r3, [pc, #44]	@ (801929c <ETH_SetDMAConfig+0x108>)
 801926e:	4013      	ands	r3, r2
 8019270:	687a      	ldr	r2, [r7, #4]
 8019272:	6812      	ldr	r2, [r2, #0]
 8019274:	68f9      	ldr	r1, [r7, #12]
 8019276:	430b      	orrs	r3, r1
 8019278:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801927c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        }
 8019280:	bf00      	nop
 8019282:	3714      	adds	r7, #20
 8019284:	46bd      	mov	sp, r7
 8019286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801928a:	4770      	bx	lr
 801928c:	ffff87fd 	.word	0xffff87fd
 8019290:	ffff2ffe 	.word	0xffff2ffe
 8019294:	fffec000 	.word	0xfffec000
 8019298:	ffc0efef 	.word	0xffc0efef
 801929c:	7fc0ffff 	.word	0x7fc0ffff

080192a0 <ETH_MACDMAConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth )
        {
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b0a4      	sub	sp, #144	@ 0x90
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	6078      	str	r0, [r7, #4]
            ETH_MACConfigTypeDef macDefaultConf;
            ETH_DMAConfigTypeDef dmaDefaultConf;

            /*--------------- ETHERNET MAC registers default Configuration --------------*/
            macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80192a8:	2301      	movs	r3, #1
 80192aa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80192ae:	2300      	movs	r3, #0
 80192b0:	653b      	str	r3, [r7, #80]	@ 0x50
            macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80192b2:	2300      	movs	r3, #0
 80192b4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
            macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80192b8:	2300      	movs	r3, #0
 80192ba:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            macDefaultConf.ChecksumOffload = ENABLE;
 80192be:	2301      	movs	r3, #1
 80192c0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80192c4:	2301      	movs	r3, #1
 80192c6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            macDefaultConf.CRCStripTypePacket = ENABLE;
 80192ca:	2301      	movs	r3, #1
 80192cc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            macDefaultConf.DeferralCheck = DISABLE;
 80192d0:	2300      	movs	r3, #0
 80192d2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80192d6:	2301      	movs	r3, #1
 80192d8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80192dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80192e0:	647b      	str	r3, [r7, #68]	@ 0x44
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80192e2:	2300      	movs	r3, #0
 80192e4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80192e8:	2300      	movs	r3, #0
 80192ea:	66bb      	str	r3, [r7, #104]	@ 0x68
            macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80192ec:	2300      	movs	r3, #0
 80192ee:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80192f2:	2300      	movs	r3, #0
 80192f4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 80192f8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80192fc:	663b      	str	r3, [r7, #96]	@ 0x60
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80192fe:	2300      	movs	r3, #0
 8019300:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8019304:	2300      	movs	r3, #0
 8019306:	637b      	str	r3, [r7, #52]	@ 0x34
            macDefaultConf.Jabber = ENABLE;
 8019308:	2301      	movs	r3, #1
 801930a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            macDefaultConf.JumboPacket = DISABLE;
 801930e:	2300      	movs	r3, #0
 8019310:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            macDefaultConf.LoopbackMode = DISABLE;
 8019314:	2300      	movs	r3, #0
 8019316:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 801931a:	2300      	movs	r3, #0
 801931c:	67fb      	str	r3, [r7, #124]	@ 0x7c
            macDefaultConf.PauseTime = 0x0;
 801931e:	2300      	movs	r3, #0
 8019320:	677b      	str	r3, [r7, #116]	@ 0x74
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8019322:	2300      	movs	r3, #0
 8019324:	65bb      	str	r3, [r7, #88]	@ 0x58
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 8019326:	2300      	movs	r3, #0
 8019328:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
            macDefaultConf.ReceiveFlowControl = DISABLE;
 801932c:	2300      	movs	r3, #0
 801932e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
            macDefaultConf.ReceiveOwn = ENABLE;
 8019332:	2301      	movs	r3, #1
 8019334:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8019338:	2320      	movs	r3, #32
 801933a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            macDefaultConf.RetryTransmission = ENABLE;
 801933e:	2301      	movs	r3, #1
 8019340:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            macDefaultConf.SlowProtocolDetect = DISABLE;
 8019344:	2300      	movs	r3, #0
 8019346:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 801934a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 801934e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 8019350:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8019354:	643b      	str	r3, [r7, #64]	@ 0x40
            macDefaultConf.Support2KPacket = DISABLE;
 8019356:	2300      	movs	r3, #0
 8019358:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 801935c:	2302      	movs	r3, #2
 801935e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            macDefaultConf.TransmitFlowControl = DISABLE;
 8019362:	2300      	movs	r3, #0
 8019364:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8019368:	2300      	movs	r3, #0
 801936a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 801936e:	2300      	movs	r3, #0
 8019370:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
            macDefaultConf.Watchdog = ENABLE;
 8019374:	2301      	movs	r3, #1
 8019376:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 801937a:	2300      	movs	r3, #0
 801937c:	673b      	str	r3, [r7, #112]	@ 0x70
            macDefaultConf.ZeroQuantaPause = ENABLE;
 801937e:	2301      	movs	r3, #1
 8019380:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

            /* MAC default configuration */
            ETH_SetMACConfig( heth, &macDefaultConf );
 8019384:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019388:	4619      	mov	r1, r3
 801938a:	6878      	ldr	r0, [r7, #4]
 801938c:	f7ff fde6 	bl	8018f5c <ETH_SetMACConfig>

            /*--------------- ETHERNET DMA registers default Configuration --------------*/
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8019390:	2301      	movs	r3, #1
 8019392:	733b      	strb	r3, [r7, #12]
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8019394:	2301      	movs	r3, #1
 8019396:	613b      	str	r3, [r7, #16]
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8019398:	2300      	movs	r3, #0
 801939a:	60bb      	str	r3, [r7, #8]
            dmaDefaultConf.FlushRxPacket = DISABLE;
 801939c:	2300      	movs	r3, #0
 801939e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            dmaDefaultConf.PBLx8Mode = DISABLE;
 80193a2:	2300      	movs	r3, #0
 80193a4:	757b      	strb	r3, [r7, #21]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80193a6:	2300      	movs	r3, #0
 80193a8:	753b      	strb	r3, [r7, #20]
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80193aa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80193ae:	623b      	str	r3, [r7, #32]
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 80193b0:	2300      	movs	r3, #0
 80193b2:	773b      	strb	r3, [r7, #28]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80193b4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80193b8:	61bb      	str	r3, [r7, #24]
            dmaDefaultConf.TCPSegmentation = DISABLE;
 80193ba:	2300      	movs	r3, #0
 80193bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            dmaDefaultConf.MaximumSegmentSize = 536;
 80193c0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80193c4:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* DMA default configuration */
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 80193c6:	f107 0308 	add.w	r3, r7, #8
 80193ca:	4619      	mov	r1, r3
 80193cc:	6878      	ldr	r0, [r7, #4]
 80193ce:	f7ff fee1 	bl	8019194 <ETH_SetDMAConfig>
        }
 80193d2:	bf00      	nop
 80193d4:	3790      	adds	r7, #144	@ 0x90
 80193d6:	46bd      	mov	sp, r7
 80193d8:	bd80      	pop	{r7, pc}
	...

080193dc <ETH_MAC_MDIO_ClkConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MAC_MDIO_ClkConfig( ETH_HandleTypeDef * heth )
        {
 80193dc:	b580      	push	{r7, lr}
 80193de:	b084      	sub	sp, #16
 80193e0:	af00      	add	r7, sp, #0
 80193e2:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg, hclk;

            /* Get the ETHERNET MACMDIOAR value */
            tmpreg = ( heth->Instance )->MACMDIOAR;
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80193ec:	60fb      	str	r3, [r7, #12]

            /* Clear CSR Clock Range bits */
            tmpreg &= ~ETH_MACMDIOAR_CR;
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80193f4:	60fb      	str	r3, [r7, #12]

            /* Get hclk frequency value */
            hclk = HAL_RCC_GetHCLKFreq();
 80193f6:	f003 fdf1 	bl	801cfdc <HAL_RCC_GetHCLKFreq>
 80193fa:	60b8      	str	r0, [r7, #8]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 80193fc:	68bb      	ldr	r3, [r7, #8]
 80193fe:	4a1e      	ldr	r2, [pc, #120]	@ (8019478 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8019400:	4293      	cmp	r3, r2
 8019402:	d908      	bls.n	8019416 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8019404:	68bb      	ldr	r3, [r7, #8]
 8019406:	4a1d      	ldr	r2, [pc, #116]	@ (801947c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8019408:	4293      	cmp	r3, r2
 801940a:	d804      	bhi.n	8019416 <ETH_MAC_MDIO_ClkConfig+0x3a>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8019412:	60fb      	str	r3, [r7, #12]
 8019414:	e027      	b.n	8019466 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 8019416:	68bb      	ldr	r3, [r7, #8]
 8019418:	4a18      	ldr	r2, [pc, #96]	@ (801947c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 801941a:	4293      	cmp	r3, r2
 801941c:	d908      	bls.n	8019430 <ETH_MAC_MDIO_ClkConfig+0x54>
 801941e:	68bb      	ldr	r3, [r7, #8]
 8019420:	4a17      	ldr	r2, [pc, #92]	@ (8019480 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8019422:	4293      	cmp	r3, r2
 8019424:	d204      	bcs.n	8019430 <ETH_MAC_MDIO_ClkConfig+0x54>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 8019426:	68fb      	ldr	r3, [r7, #12]
 8019428:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801942c:	60fb      	str	r3, [r7, #12]
 801942e:	e01a      	b.n	8019466 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 8019430:	68bb      	ldr	r3, [r7, #8]
 8019432:	4a13      	ldr	r2, [pc, #76]	@ (8019480 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8019434:	4293      	cmp	r3, r2
 8019436:	d303      	bcc.n	8019440 <ETH_MAC_MDIO_ClkConfig+0x64>
 8019438:	68bb      	ldr	r3, [r7, #8]
 801943a:	4a12      	ldr	r2, [pc, #72]	@ (8019484 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 801943c:	4293      	cmp	r3, r2
 801943e:	d911      	bls.n	8019464 <ETH_MAC_MDIO_ClkConfig+0x88>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
            }
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 8019440:	68bb      	ldr	r3, [r7, #8]
 8019442:	4a10      	ldr	r2, [pc, #64]	@ (8019484 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8019444:	4293      	cmp	r3, r2
 8019446:	d908      	bls.n	801945a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8019448:	68bb      	ldr	r3, [r7, #8]
 801944a:	4a0f      	ldr	r2, [pc, #60]	@ (8019488 <ETH_MAC_MDIO_ClkConfig+0xac>)
 801944c:	4293      	cmp	r3, r2
 801944e:	d804      	bhi.n	801945a <ETH_MAC_MDIO_ClkConfig+0x7e>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019456:	60fb      	str	r3, [r7, #12]
 8019458:	e005      	b.n	8019466 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else /* (hclk >= 150000000)&&(hclk <= 200000000) */
            {
                /* CSR Clock Range between 150-200 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8019460:	60fb      	str	r3, [r7, #12]
 8019462:	e000      	b.n	8019466 <ETH_MAC_MDIO_ClkConfig+0x8a>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
 8019464:	bf00      	nop
            }

            /* Configure the CSR Clock Range */
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	68fa      	ldr	r2, [r7, #12]
 801946c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        }
 8019470:	bf00      	nop
 8019472:	3710      	adds	r7, #16
 8019474:	46bd      	mov	sp, r7
 8019476:	bd80      	pop	{r7, pc}
 8019478:	01312cff 	.word	0x01312cff
 801947c:	02160ebf 	.word	0x02160ebf
 8019480:	03938700 	.word	0x03938700
 8019484:	05f5e0ff 	.word	0x05f5e0ff
 8019488:	08f0d17f 	.word	0x08f0d17f

0801948c <ETH_DMATxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATxDescListInit( ETH_HandleTypeDef * heth )
        {
 801948c:	b480      	push	{r7}
 801948e:	b085      	sub	sp, #20
 8019490:	af00      	add	r7, sp, #0
 8019492:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmatxdesc;
            uint32_t i;

            /* Fill each DMATxDesc descriptor with the right values */
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8019494:	2300      	movs	r3, #0
 8019496:	60fb      	str	r3, [r7, #12]
 8019498:	e01d      	b.n	80194d6 <ETH_DMATxDescListInit+0x4a>
            {
                dmatxdesc = heth->Init.TxDesc + i;
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	68d9      	ldr	r1, [r3, #12]
 801949e:	68fa      	ldr	r2, [r7, #12]
 80194a0:	4613      	mov	r3, r2
 80194a2:	005b      	lsls	r3, r3, #1
 80194a4:	4413      	add	r3, r2
 80194a6:	00db      	lsls	r3, r3, #3
 80194a8:	440b      	add	r3, r1
 80194aa:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 80194ac:	68bb      	ldr	r3, [r7, #8]
 80194ae:	2200      	movs	r2, #0
 80194b0:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 80194b2:	68bb      	ldr	r3, [r7, #8]
 80194b4:	2200      	movs	r2, #0
 80194b6:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 80194b8:	68bb      	ldr	r3, [r7, #8]
 80194ba:	2200      	movs	r2, #0
 80194bc:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 80194be:	68bb      	ldr	r3, [r7, #8]
 80194c0:	2200      	movs	r2, #0
 80194c2:	60da      	str	r2, [r3, #12]

                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 80194c4:	68b9      	ldr	r1, [r7, #8]
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	68fa      	ldr	r2, [r7, #12]
 80194ca:	3206      	adds	r2, #6
 80194cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	3301      	adds	r3, #1
 80194d4:	60fb      	str	r3, [r7, #12]
 80194d6:	68fb      	ldr	r3, [r7, #12]
 80194d8:	2b03      	cmp	r3, #3
 80194da:	d9de      	bls.n	801949a <ETH_DMATxDescListInit+0xe>
            }

            heth->TxDescList.CurTxDesc = 0;
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	2200      	movs	r2, #0
 80194e0:	629a      	str	r2, [r3, #40]	@ 0x28
            heth->TxDescList.TailTxDesc = 0;
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	2200      	movs	r2, #0
 80194e6:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set Transmit Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80194f0:	461a      	mov	r2, r3
 80194f2:	2303      	movs	r3, #3
 80194f4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

            /* Set Transmit Descriptor List Address */
            /* Channel Tx descriptor list address register (ETH_DMACTXDLAR)). */
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	68da      	ldr	r2, [r3, #12]
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019504:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

            /* Set Transmit Descriptor Tail pointer */
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	68da      	ldr	r2, [r3, #12]
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019514:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        }
 8019518:	bf00      	nop
 801951a:	3714      	adds	r7, #20
 801951c:	46bd      	mov	sp, r7
 801951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019522:	4770      	bx	lr

08019524 <ETH_DMARxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMARxDescListInit( ETH_HandleTypeDef * heth )
        {
 8019524:	b480      	push	{r7}
 8019526:	b085      	sub	sp, #20
 8019528:	af00      	add	r7, sp, #0
 801952a:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t i;

            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 801952c:	2300      	movs	r3, #0
 801952e:	60fb      	str	r3, [r7, #12]
 8019530:	e023      	b.n	801957a <ETH_DMARxDescListInit+0x56>
            {
                dmarxdesc = heth->Init.RxDesc + i;
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	6919      	ldr	r1, [r3, #16]
 8019536:	68fa      	ldr	r2, [r7, #12]
 8019538:	4613      	mov	r3, r2
 801953a:	005b      	lsls	r3, r3, #1
 801953c:	4413      	add	r3, r2
 801953e:	00db      	lsls	r3, r3, #3
 8019540:	440b      	add	r3, r1
 8019542:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 8019544:	68bb      	ldr	r3, [r7, #8]
 8019546:	2200      	movs	r2, #0
 8019548:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 801954a:	68bb      	ldr	r3, [r7, #8]
 801954c:	2200      	movs	r2, #0
 801954e:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 8019550:	68bb      	ldr	r3, [r7, #8]
 8019552:	2200      	movs	r2, #0
 8019554:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 8019556:	68bb      	ldr	r3, [r7, #8]
 8019558:	2200      	movs	r2, #0
 801955a:	60da      	str	r2, [r3, #12]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 801955c:	68bb      	ldr	r3, [r7, #8]
 801955e:	2200      	movs	r2, #0
 8019560:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 8019562:	68bb      	ldr	r3, [r7, #8]
 8019564:	2200      	movs	r2, #0
 8019566:	615a      	str	r2, [r3, #20]

                /* Set Rx descritors addresses */
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 8019568:	68b9      	ldr	r1, [r7, #8]
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	68fa      	ldr	r2, [r7, #12]
 801956e:	320c      	adds	r2, #12
 8019570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	3301      	adds	r3, #1
 8019578:	60fb      	str	r3, [r7, #12]
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	2b03      	cmp	r3, #3
 801957e:	d9d8      	bls.n	8019532 <ETH_DMARxDescListInit+0xe>
            }

            WRITE_REG( heth->RxDescList.CurRxDesc, 0 );
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	2200      	movs	r2, #0
 8019584:	641a      	str	r2, [r3, #64]	@ 0x40
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	2200      	movs	r2, #0
 801958a:	645a      	str	r2, [r3, #68]	@ 0x44
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	2200      	movs	r2, #0
 8019590:	649a      	str	r2, [r3, #72]	@ 0x48
            WRITE_REG( heth->RxDescList.ItMode, 0 );
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	2200      	movs	r2, #0
 8019596:	651a      	str	r2, [r3, #80]	@ 0x50
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	2200      	movs	r2, #0
 801959c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Set Receive Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80195a6:	461a      	mov	r2, r3
 80195a8:	2303      	movs	r3, #3
 80195aa:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

            /* Set Receive Descriptor List Address */
            /* Channel Rx descriptor list address register (ETH_DMACRXDLAR)). */
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	691a      	ldr	r2, [r3, #16]
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80195ba:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

            /* Set Receive Descriptor Tail pointer Address */
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	691b      	ldr	r3, [r3, #16]
 80195c2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80195ce:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        }
 80195d2:	bf00      	nop
 80195d4:	3714      	adds	r7, #20
 80195d6:	46bd      	mov	sp, r7
 80195d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195dc:	4770      	bx	lr
	...

080195e0 <ETH_Clear_Tx_Descriptors>:

        void ETH_Clear_Tx_Descriptors( ETH_HandleTypeDef * heth )
        {
 80195e0:	b580      	push	{r7, lr}
 80195e2:	b086      	sub	sp, #24
 80195e4:	af00      	add	r7, sp, #0
 80195e6:	6078      	str	r0, [r7, #4]
            uint32_t ulTailTxDesc = heth->TxDescList.TailTxDesc;
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80195ec:	617b      	str	r3, [r7, #20]

            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 80195ee:	e032      	b.n	8019656 <ETH_Clear_Tx_Descriptors+0x76>
            {
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	697a      	ldr	r2, [r7, #20]
 80195f4:	3206      	adds	r2, #6
 80195f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80195fa:	613b      	str	r3, [r7, #16]

                if( ( xDMATxDescriptor->DESC3 & ETH_DMATXNDESCRF_OWN ) != 0 )
 80195fc:	693b      	ldr	r3, [r7, #16]
 80195fe:	68db      	ldr	r3, [r3, #12]
 8019600:	2b00      	cmp	r3, #0
 8019602:	db31      	blt.n	8019668 <ETH_Clear_Tx_Descriptors+0x88>
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    NetworkBufferDescriptor_t * pxNetworkBuffer;
                    uint8_t * ucPayLoad;

                    ucPayLoad = ( uint8_t * ) xDMATxDescriptor->DESC0;
 8019604:	693b      	ldr	r3, [r7, #16]
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	60fb      	str	r3, [r7, #12]

                    if( ucPayLoad == NULL )
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	2b00      	cmp	r3, #0
 801960e:	d02d      	beq.n	801966c <ETH_Clear_Tx_Descriptors+0x8c>
                    {
                        /* No buffer is assigned or DMA still OWNs this descriptor. */
                        break;
                    }

                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 8019610:	68f8      	ldr	r0, [r7, #12]
 8019612:	f7f0 fbd2 	bl	8009dba <pxPacketBuffer_to_NetworkBuffer>
 8019616:	60b8      	str	r0, [r7, #8]

                    if( pxNetworkBuffer != NULL )
 8019618:	68bb      	ldr	r3, [r7, #8]
 801961a:	2b00      	cmp	r3, #0
 801961c:	d002      	beq.n	8019624 <ETH_Clear_Tx_Descriptors+0x44>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801961e:	68b8      	ldr	r0, [r7, #8]
 8019620:	f7fd faa2 	bl	8016b68 <vReleaseNetworkBufferAndDescriptor>
                    }
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 8019624:	693b      	ldr	r3, [r7, #16]
 8019626:	2200      	movs	r2, #0
 8019628:	601a      	str	r2, [r3, #0]

                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 801962a:	697b      	ldr	r3, [r7, #20]
 801962c:	3301      	adds	r3, #1
 801962e:	617b      	str	r3, [r7, #20]
 8019630:	697b      	ldr	r3, [r7, #20]
 8019632:	2b03      	cmp	r3, #3
 8019634:	d902      	bls.n	801963c <ETH_Clear_Tx_Descriptors+0x5c>
 8019636:	697b      	ldr	r3, [r7, #20]
 8019638:	3b04      	subs	r3, #4
 801963a:	617b      	str	r3, [r7, #20]
                heth->TxDescList.TailTxDesc = ulTailTxDesc;
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	697a      	ldr	r2, [r7, #20]
 8019640:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("dsb 0xF":::"memory");
 8019642:	f3bf 8f4f 	dsb	sy
}
 8019646:	bf00      	nop

                __DSB();

                xSemaphoreGive( xTXDescriptorSemaphore );
 8019648:	4b0b      	ldr	r3, [pc, #44]	@ (8019678 <ETH_Clear_Tx_Descriptors+0x98>)
 801964a:	6818      	ldr	r0, [r3, #0]
 801964c:	2300      	movs	r3, #0
 801964e:	2200      	movs	r2, #0
 8019650:	2100      	movs	r1, #0
 8019652:	f7e9 fd01 	bl	8003058 <xQueueGenericSend>
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 8019656:	4b08      	ldr	r3, [pc, #32]	@ (8019678 <ETH_Clear_Tx_Descriptors+0x98>)
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	4618      	mov	r0, r3
 801965c:	f7e9 ffa2 	bl	80035a4 <uxQueueMessagesWaiting>
 8019660:	4603      	mov	r3, r0
 8019662:	2b04      	cmp	r3, #4
 8019664:	d1c4      	bne.n	80195f0 <ETH_Clear_Tx_Descriptors+0x10>
            }
        }
 8019666:	e002      	b.n	801966e <ETH_Clear_Tx_Descriptors+0x8e>
                    break;
 8019668:	bf00      	nop
 801966a:	e000      	b.n	801966e <ETH_Clear_Tx_Descriptors+0x8e>
                        break;
 801966c:	bf00      	nop
        }
 801966e:	bf00      	nop
 8019670:	3718      	adds	r7, #24
 8019672:	46bd      	mov	sp, r7
 8019674:	bd80      	pop	{r7, pc}
 8019676:	bf00      	nop
 8019678:	200022ac 	.word	0x200022ac

0801967c <ETH_Prepare_Tx_Descriptors>:
 * @retval Status
 */
        static uint32_t ETH_Prepare_Tx_Descriptors( ETH_HandleTypeDef * heth,
                                                    ETH_TxPacketConfig * pTxConfig,
                                                    uint32_t ItMode )
        {
 801967c:	b480      	push	{r7}
 801967e:	b08b      	sub	sp, #44	@ 0x2c
 8019680:	af00      	add	r7, sp, #0
 8019682:	60f8      	str	r0, [r7, #12]
 8019684:	60b9      	str	r1, [r7, #8]
 8019686:	607a      	str	r2, [r7, #4]
            ETH_TxDescListTypeDef * dmatxdesclist = &heth->TxDescList;
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	3318      	adds	r3, #24
 801968c:	623b      	str	r3, [r7, #32]
            uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 801968e:	6a3b      	ldr	r3, [r7, #32]
 8019690:	691b      	ldr	r3, [r3, #16]
 8019692:	61fb      	str	r3, [r7, #28]
            uint32_t DESC3;
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 8019694:	6a3b      	ldr	r3, [r7, #32]
 8019696:	69fa      	ldr	r2, [r7, #28]
 8019698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801969c:	61bb      	str	r3, [r7, #24]
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;
 801969e:	68bb      	ldr	r3, [r7, #8]
 80196a0:	689b      	ldr	r3, [r3, #8]
 80196a2:	617b      	str	r3, [r7, #20]

            /* FreeRTOS+TCP doesn't support linked buffers. */
            txbuffer->next = NULL;
 80196a4:	697b      	ldr	r3, [r7, #20]
 80196a6:	2200      	movs	r2, #0
 80196a8:	609a      	str	r2, [r3, #8]
            DESC3 = READ_REG( dmatxdesc->DESC3 );
 80196aa:	69bb      	ldr	r3, [r7, #24]
 80196ac:	68db      	ldr	r3, [r3, #12]
 80196ae:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Current TX Descriptor Owned by DMA: cannot be used by the application  */
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 80196b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	da01      	bge.n	80196ba <ETH_Prepare_Tx_Descriptors+0x3e>
            {
                /* Should not get here because TX descriptors are protected by a counting semaphore. */
                return HAL_ETH_ERROR_BUSY;
 80196b6:	2302      	movs	r3, #2
 80196b8:	e05c      	b.n	8019774 <ETH_Prepare_Tx_Descriptors+0xf8>
            /***************************************************************************/
            /*****************    Normal descriptors configuration     *****************/
            /***************************************************************************/

            /* Set header or buffer 1 address */
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 80196ba:	697b      	ldr	r3, [r7, #20]
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	461a      	mov	r2, r3
 80196c0:	69bb      	ldr	r3, [r7, #24]
 80196c2:	601a      	str	r2, [r3, #0]
            /* Set header or buffer 1 Length */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 80196c4:	69bb      	ldr	r3, [r7, #24]
 80196c6:	689a      	ldr	r2, [r3, #8]
 80196c8:	4b2d      	ldr	r3, [pc, #180]	@ (8019780 <ETH_Prepare_Tx_Descriptors+0x104>)
 80196ca:	4013      	ands	r3, r2
 80196cc:	697a      	ldr	r2, [r7, #20]
 80196ce:	6852      	ldr	r2, [r2, #4]
 80196d0:	431a      	orrs	r2, r3
 80196d2:	69bb      	ldr	r3, [r7, #24]
 80196d4:	609a      	str	r2, [r3, #8]

            WRITE_REG( dmatxdesc->DESC1, 0x0 );
 80196d6:	69bb      	ldr	r3, [r7, #24]
 80196d8:	2200      	movs	r2, #0
 80196da:	605a      	str	r2, [r3, #4]
            /* Set buffer 2 Length to zero */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 80196dc:	69bb      	ldr	r3, [r7, #24]
 80196de:	689a      	ldr	r2, [r3, #8]
 80196e0:	4b28      	ldr	r3, [pc, #160]	@ (8019784 <ETH_Prepare_Tx_Descriptors+0x108>)
 80196e2:	4013      	ands	r3, r2
 80196e4:	69ba      	ldr	r2, [r7, #24]
 80196e6:	6093      	str	r3, [r2, #8]

            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 80196e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80196ea:	4b27      	ldr	r3, [pc, #156]	@ (8019788 <ETH_Prepare_Tx_Descriptors+0x10c>)
 80196ec:	4013      	ands	r3, r2
 80196ee:	68ba      	ldr	r2, [r7, #8]
 80196f0:	6852      	ldr	r2, [r2, #4]
 80196f2:	4313      	orrs	r3, r2
 80196f4:	627b      	str	r3, [r7, #36]	@ 0x24

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM ) != 0U )
 80196f6:	68bb      	ldr	r3, [r7, #8]
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	f003 0301 	and.w	r3, r3, #1
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d006      	beq.n	8019710 <ETH_Prepare_Tx_Descriptors+0x94>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl );
 8019702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019704:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8019708:	68bb      	ldr	r3, [r7, #8]
 801970a:	695b      	ldr	r3, [r3, #20]
 801970c:	4313      	orrs	r3, r2
 801970e:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD ) != 0U )
 8019710:	68bb      	ldr	r3, [r7, #8]
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	f003 0320 	and.w	r3, r3, #32
 8019718:	2b00      	cmp	r3, #0
 801971a:	d006      	beq.n	801972a <ETH_Prepare_Tx_Descriptors+0xae>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl );
 801971c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801971e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8019722:	68bb      	ldr	r3, [r7, #8]
 8019724:	691b      	ldr	r3, [r3, #16]
 8019726:	4313      	orrs	r3, r2
 8019728:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Mark it as First and the last Descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_FD | ETH_DMATXNDESCRF_LD );
 801972a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801972c:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8019730:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark it as NORMAL descriptor */
            CLEAR_BIT( DESC3, ETH_DMATXNDESCRF_CTXT );
 8019732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019734:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8019738:	627b      	str	r3, [r7, #36]	@ 0x24

            /* set OWN bit of FIRST descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );
 801973a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801973c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8019740:	627b      	str	r3, [r7, #36]	@ 0x24

            if( ItMode != ( ( uint32_t ) RESET ) )
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	2b00      	cmp	r3, #0
 8019746:	d006      	beq.n	8019756 <ETH_Prepare_Tx_Descriptors+0xda>
            {
                /* Set Interrupt on competition bit */
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8019748:	69bb      	ldr	r3, [r7, #24]
 801974a:	689b      	ldr	r3, [r3, #8]
 801974c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8019750:	69bb      	ldr	r3, [r7, #24]
 8019752:	609a      	str	r2, [r3, #8]
 8019754:	e005      	b.n	8019762 <ETH_Prepare_Tx_Descriptors+0xe6>
            }
            else
            {
                /* Clear Interrupt on competition bit */
                CLEAR_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8019756:	69bb      	ldr	r3, [r7, #24]
 8019758:	689b      	ldr	r3, [r3, #8]
 801975a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801975e:	69bb      	ldr	r3, [r7, #24]
 8019760:	609a      	str	r2, [r3, #8]
            }

            WRITE_REG( dmatxdesc->DESC3, DESC3 );
 8019762:	69bb      	ldr	r3, [r7, #24]
 8019764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019766:	60da      	str	r2, [r3, #12]

            /* Read back the value. */
            if( READ_REG( dmatxdesc->DESC3 ) )
 8019768:	69bb      	ldr	r3, [r7, #24]
 801976a:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801976c:	f3bf 8f4f 	dsb	sy
}
 8019770:	bf00      	nop
            }

            __DSB();

            /* Return function status */
            return HAL_ETH_ERROR_NONE;
 8019772:	2300      	movs	r3, #0
        }
 8019774:	4618      	mov	r0, r3
 8019776:	372c      	adds	r7, #44	@ 0x2c
 8019778:	46bd      	mov	sp, r7
 801977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801977e:	4770      	bx	lr
 8019780:	ffffc000 	.word	0xffffc000
 8019784:	c000ffff 	.word	0xc000ffff
 8019788:	ffff8000 	.word	0xffff8000

0801978c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801978c:	b580      	push	{r7, lr}
 801978e:	b082      	sub	sp, #8
 8019790:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8019792:	2003      	movs	r0, #3
 8019794:	f000 f9a0 	bl	8019ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8019798:	f003 faa6 	bl	801cce8 <HAL_RCC_GetSysClockFreq>
 801979c:	4602      	mov	r2, r0
 801979e:	4b15      	ldr	r3, [pc, #84]	@ (80197f4 <HAL_Init+0x68>)
 80197a0:	699b      	ldr	r3, [r3, #24]
 80197a2:	0a1b      	lsrs	r3, r3, #8
 80197a4:	f003 030f 	and.w	r3, r3, #15
 80197a8:	4913      	ldr	r1, [pc, #76]	@ (80197f8 <HAL_Init+0x6c>)
 80197aa:	5ccb      	ldrb	r3, [r1, r3]
 80197ac:	f003 031f 	and.w	r3, r3, #31
 80197b0:	fa22 f303 	lsr.w	r3, r2, r3
 80197b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80197b6:	4b0f      	ldr	r3, [pc, #60]	@ (80197f4 <HAL_Init+0x68>)
 80197b8:	699b      	ldr	r3, [r3, #24]
 80197ba:	f003 030f 	and.w	r3, r3, #15
 80197be:	4a0e      	ldr	r2, [pc, #56]	@ (80197f8 <HAL_Init+0x6c>)
 80197c0:	5cd3      	ldrb	r3, [r2, r3]
 80197c2:	f003 031f 	and.w	r3, r3, #31
 80197c6:	687a      	ldr	r2, [r7, #4]
 80197c8:	fa22 f303 	lsr.w	r3, r2, r3
 80197cc:	4a0b      	ldr	r2, [pc, #44]	@ (80197fc <HAL_Init+0x70>)
 80197ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80197d0:	4a0b      	ldr	r2, [pc, #44]	@ (8019800 <HAL_Init+0x74>)
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80197d6:	200f      	movs	r0, #15
 80197d8:	f000 f814 	bl	8019804 <HAL_InitTick>
 80197dc:	4603      	mov	r3, r0
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d001      	beq.n	80197e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80197e2:	2301      	movs	r3, #1
 80197e4:	e002      	b.n	80197ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80197e6:	f7e8 f965 	bl	8001ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80197ea:	2300      	movs	r3, #0
}
 80197ec:	4618      	mov	r0, r3
 80197ee:	3708      	adds	r7, #8
 80197f0:	46bd      	mov	sp, r7
 80197f2:	bd80      	pop	{r7, pc}
 80197f4:	58024400 	.word	0x58024400
 80197f8:	08026f08 	.word	0x08026f08
 80197fc:	20000004 	.word	0x20000004
 8019800:	20000000 	.word	0x20000000

08019804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8019804:	b580      	push	{r7, lr}
 8019806:	b082      	sub	sp, #8
 8019808:	af00      	add	r7, sp, #0
 801980a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 801980c:	4b15      	ldr	r3, [pc, #84]	@ (8019864 <HAL_InitTick+0x60>)
 801980e:	781b      	ldrb	r3, [r3, #0]
 8019810:	2b00      	cmp	r3, #0
 8019812:	d101      	bne.n	8019818 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8019814:	2301      	movs	r3, #1
 8019816:	e021      	b.n	801985c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8019818:	4b13      	ldr	r3, [pc, #76]	@ (8019868 <HAL_InitTick+0x64>)
 801981a:	681a      	ldr	r2, [r3, #0]
 801981c:	4b11      	ldr	r3, [pc, #68]	@ (8019864 <HAL_InitTick+0x60>)
 801981e:	781b      	ldrb	r3, [r3, #0]
 8019820:	4619      	mov	r1, r3
 8019822:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019826:	fbb3 f3f1 	udiv	r3, r3, r1
 801982a:	fbb2 f3f3 	udiv	r3, r2, r3
 801982e:	4618      	mov	r0, r3
 8019830:	f000 f985 	bl	8019b3e <HAL_SYSTICK_Config>
 8019834:	4603      	mov	r3, r0
 8019836:	2b00      	cmp	r3, #0
 8019838:	d001      	beq.n	801983e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801983a:	2301      	movs	r3, #1
 801983c:	e00e      	b.n	801985c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	2b0f      	cmp	r3, #15
 8019842:	d80a      	bhi.n	801985a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8019844:	2200      	movs	r2, #0
 8019846:	6879      	ldr	r1, [r7, #4]
 8019848:	f04f 30ff 	mov.w	r0, #4294967295
 801984c:	f000 f94f 	bl	8019aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8019850:	4a06      	ldr	r2, [pc, #24]	@ (801986c <HAL_InitTick+0x68>)
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8019856:	2300      	movs	r3, #0
 8019858:	e000      	b.n	801985c <HAL_InitTick+0x58>
    return HAL_ERROR;
 801985a:	2301      	movs	r3, #1
}
 801985c:	4618      	mov	r0, r3
 801985e:	3708      	adds	r7, #8
 8019860:	46bd      	mov	sp, r7
 8019862:	bd80      	pop	{r7, pc}
 8019864:	20000024 	.word	0x20000024
 8019868:	20000000 	.word	0x20000000
 801986c:	20000020 	.word	0x20000020

08019870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8019870:	b480      	push	{r7}
 8019872:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8019874:	4b06      	ldr	r3, [pc, #24]	@ (8019890 <HAL_IncTick+0x20>)
 8019876:	781b      	ldrb	r3, [r3, #0]
 8019878:	461a      	mov	r2, r3
 801987a:	4b06      	ldr	r3, [pc, #24]	@ (8019894 <HAL_IncTick+0x24>)
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	4413      	add	r3, r2
 8019880:	4a04      	ldr	r2, [pc, #16]	@ (8019894 <HAL_IncTick+0x24>)
 8019882:	6013      	str	r3, [r2, #0]
}
 8019884:	bf00      	nop
 8019886:	46bd      	mov	sp, r7
 8019888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801988c:	4770      	bx	lr
 801988e:	bf00      	nop
 8019890:	20000024 	.word	0x20000024
 8019894:	200023b8 	.word	0x200023b8

08019898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8019898:	b480      	push	{r7}
 801989a:	af00      	add	r7, sp, #0
  return uwTick;
 801989c:	4b03      	ldr	r3, [pc, #12]	@ (80198ac <HAL_GetTick+0x14>)
 801989e:	681b      	ldr	r3, [r3, #0]
}
 80198a0:	4618      	mov	r0, r3
 80198a2:	46bd      	mov	sp, r7
 80198a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198a8:	4770      	bx	lr
 80198aa:	bf00      	nop
 80198ac:	200023b8 	.word	0x200023b8

080198b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80198b0:	b580      	push	{r7, lr}
 80198b2:	b084      	sub	sp, #16
 80198b4:	af00      	add	r7, sp, #0
 80198b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80198b8:	f7ff ffee 	bl	8019898 <HAL_GetTick>
 80198bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198c8:	d005      	beq.n	80198d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80198ca:	4b0a      	ldr	r3, [pc, #40]	@ (80198f4 <HAL_Delay+0x44>)
 80198cc:	781b      	ldrb	r3, [r3, #0]
 80198ce:	461a      	mov	r2, r3
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	4413      	add	r3, r2
 80198d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80198d6:	bf00      	nop
 80198d8:	f7ff ffde 	bl	8019898 <HAL_GetTick>
 80198dc:	4602      	mov	r2, r0
 80198de:	68bb      	ldr	r3, [r7, #8]
 80198e0:	1ad3      	subs	r3, r2, r3
 80198e2:	68fa      	ldr	r2, [r7, #12]
 80198e4:	429a      	cmp	r2, r3
 80198e6:	d8f7      	bhi.n	80198d8 <HAL_Delay+0x28>
  {
  }
}
 80198e8:	bf00      	nop
 80198ea:	bf00      	nop
 80198ec:	3710      	adds	r7, #16
 80198ee:	46bd      	mov	sp, r7
 80198f0:	bd80      	pop	{r7, pc}
 80198f2:	bf00      	nop
 80198f4:	20000024 	.word	0x20000024

080198f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80198f8:	b480      	push	{r7}
 80198fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80198fc:	4b03      	ldr	r3, [pc, #12]	@ (801990c <HAL_GetREVID+0x14>)
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	0c1b      	lsrs	r3, r3, #16
}
 8019902:	4618      	mov	r0, r3
 8019904:	46bd      	mov	sp, r7
 8019906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801990a:	4770      	bx	lr
 801990c:	5c001000 	.word	0x5c001000

08019910 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8019910:	b480      	push	{r7}
 8019912:	b083      	sub	sp, #12
 8019914:	af00      	add	r7, sp, #0
 8019916:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8019918:	4b06      	ldr	r3, [pc, #24]	@ (8019934 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801991a:	685b      	ldr	r3, [r3, #4]
 801991c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8019920:	4904      	ldr	r1, [pc, #16]	@ (8019934 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	4313      	orrs	r3, r2
 8019926:	604b      	str	r3, [r1, #4]
}
 8019928:	bf00      	nop
 801992a:	370c      	adds	r7, #12
 801992c:	46bd      	mov	sp, r7
 801992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019932:	4770      	bx	lr
 8019934:	58000400 	.word	0x58000400

08019938 <__NVIC_SetPriorityGrouping>:
{
 8019938:	b480      	push	{r7}
 801993a:	b085      	sub	sp, #20
 801993c:	af00      	add	r7, sp, #0
 801993e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	f003 0307 	and.w	r3, r3, #7
 8019946:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8019948:	4b0b      	ldr	r3, [pc, #44]	@ (8019978 <__NVIC_SetPriorityGrouping+0x40>)
 801994a:	68db      	ldr	r3, [r3, #12]
 801994c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801994e:	68ba      	ldr	r2, [r7, #8]
 8019950:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8019954:	4013      	ands	r3, r2
 8019956:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801995c:	68bb      	ldr	r3, [r7, #8]
 801995e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8019960:	4b06      	ldr	r3, [pc, #24]	@ (801997c <__NVIC_SetPriorityGrouping+0x44>)
 8019962:	4313      	orrs	r3, r2
 8019964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8019966:	4a04      	ldr	r2, [pc, #16]	@ (8019978 <__NVIC_SetPriorityGrouping+0x40>)
 8019968:	68bb      	ldr	r3, [r7, #8]
 801996a:	60d3      	str	r3, [r2, #12]
}
 801996c:	bf00      	nop
 801996e:	3714      	adds	r7, #20
 8019970:	46bd      	mov	sp, r7
 8019972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019976:	4770      	bx	lr
 8019978:	e000ed00 	.word	0xe000ed00
 801997c:	05fa0000 	.word	0x05fa0000

08019980 <__NVIC_GetPriorityGrouping>:
{
 8019980:	b480      	push	{r7}
 8019982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8019984:	4b04      	ldr	r3, [pc, #16]	@ (8019998 <__NVIC_GetPriorityGrouping+0x18>)
 8019986:	68db      	ldr	r3, [r3, #12]
 8019988:	0a1b      	lsrs	r3, r3, #8
 801998a:	f003 0307 	and.w	r3, r3, #7
}
 801998e:	4618      	mov	r0, r3
 8019990:	46bd      	mov	sp, r7
 8019992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019996:	4770      	bx	lr
 8019998:	e000ed00 	.word	0xe000ed00

0801999c <__NVIC_EnableIRQ>:
{
 801999c:	b480      	push	{r7}
 801999e:	b083      	sub	sp, #12
 80199a0:	af00      	add	r7, sp, #0
 80199a2:	4603      	mov	r3, r0
 80199a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80199a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	db0b      	blt.n	80199c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80199ae:	88fb      	ldrh	r3, [r7, #6]
 80199b0:	f003 021f 	and.w	r2, r3, #31
 80199b4:	4907      	ldr	r1, [pc, #28]	@ (80199d4 <__NVIC_EnableIRQ+0x38>)
 80199b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80199ba:	095b      	lsrs	r3, r3, #5
 80199bc:	2001      	movs	r0, #1
 80199be:	fa00 f202 	lsl.w	r2, r0, r2
 80199c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80199c6:	bf00      	nop
 80199c8:	370c      	adds	r7, #12
 80199ca:	46bd      	mov	sp, r7
 80199cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199d0:	4770      	bx	lr
 80199d2:	bf00      	nop
 80199d4:	e000e100 	.word	0xe000e100

080199d8 <__NVIC_SetPriority>:
{
 80199d8:	b480      	push	{r7}
 80199da:	b083      	sub	sp, #12
 80199dc:	af00      	add	r7, sp, #0
 80199de:	4603      	mov	r3, r0
 80199e0:	6039      	str	r1, [r7, #0]
 80199e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80199e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	db0a      	blt.n	8019a02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80199ec:	683b      	ldr	r3, [r7, #0]
 80199ee:	b2da      	uxtb	r2, r3
 80199f0:	490c      	ldr	r1, [pc, #48]	@ (8019a24 <__NVIC_SetPriority+0x4c>)
 80199f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80199f6:	0112      	lsls	r2, r2, #4
 80199f8:	b2d2      	uxtb	r2, r2
 80199fa:	440b      	add	r3, r1
 80199fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8019a00:	e00a      	b.n	8019a18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019a02:	683b      	ldr	r3, [r7, #0]
 8019a04:	b2da      	uxtb	r2, r3
 8019a06:	4908      	ldr	r1, [pc, #32]	@ (8019a28 <__NVIC_SetPriority+0x50>)
 8019a08:	88fb      	ldrh	r3, [r7, #6]
 8019a0a:	f003 030f 	and.w	r3, r3, #15
 8019a0e:	3b04      	subs	r3, #4
 8019a10:	0112      	lsls	r2, r2, #4
 8019a12:	b2d2      	uxtb	r2, r2
 8019a14:	440b      	add	r3, r1
 8019a16:	761a      	strb	r2, [r3, #24]
}
 8019a18:	bf00      	nop
 8019a1a:	370c      	adds	r7, #12
 8019a1c:	46bd      	mov	sp, r7
 8019a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a22:	4770      	bx	lr
 8019a24:	e000e100 	.word	0xe000e100
 8019a28:	e000ed00 	.word	0xe000ed00

08019a2c <NVIC_EncodePriority>:
{
 8019a2c:	b480      	push	{r7}
 8019a2e:	b089      	sub	sp, #36	@ 0x24
 8019a30:	af00      	add	r7, sp, #0
 8019a32:	60f8      	str	r0, [r7, #12]
 8019a34:	60b9      	str	r1, [r7, #8]
 8019a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	f003 0307 	and.w	r3, r3, #7
 8019a3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8019a40:	69fb      	ldr	r3, [r7, #28]
 8019a42:	f1c3 0307 	rsb	r3, r3, #7
 8019a46:	2b04      	cmp	r3, #4
 8019a48:	bf28      	it	cs
 8019a4a:	2304      	movcs	r3, #4
 8019a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8019a4e:	69fb      	ldr	r3, [r7, #28]
 8019a50:	3304      	adds	r3, #4
 8019a52:	2b06      	cmp	r3, #6
 8019a54:	d902      	bls.n	8019a5c <NVIC_EncodePriority+0x30>
 8019a56:	69fb      	ldr	r3, [r7, #28]
 8019a58:	3b03      	subs	r3, #3
 8019a5a:	e000      	b.n	8019a5e <NVIC_EncodePriority+0x32>
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019a60:	f04f 32ff 	mov.w	r2, #4294967295
 8019a64:	69bb      	ldr	r3, [r7, #24]
 8019a66:	fa02 f303 	lsl.w	r3, r2, r3
 8019a6a:	43da      	mvns	r2, r3
 8019a6c:	68bb      	ldr	r3, [r7, #8]
 8019a6e:	401a      	ands	r2, r3
 8019a70:	697b      	ldr	r3, [r7, #20]
 8019a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019a74:	f04f 31ff 	mov.w	r1, #4294967295
 8019a78:	697b      	ldr	r3, [r7, #20]
 8019a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8019a7e:	43d9      	mvns	r1, r3
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019a84:	4313      	orrs	r3, r2
}
 8019a86:	4618      	mov	r0, r3
 8019a88:	3724      	adds	r7, #36	@ 0x24
 8019a8a:	46bd      	mov	sp, r7
 8019a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a90:	4770      	bx	lr
	...

08019a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8019a94:	b580      	push	{r7, lr}
 8019a96:	b082      	sub	sp, #8
 8019a98:	af00      	add	r7, sp, #0
 8019a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	3b01      	subs	r3, #1
 8019aa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8019aa4:	d301      	bcc.n	8019aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8019aa6:	2301      	movs	r3, #1
 8019aa8:	e00f      	b.n	8019aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8019aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8019ad4 <SysTick_Config+0x40>)
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	3b01      	subs	r3, #1
 8019ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8019ab2:	210f      	movs	r1, #15
 8019ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8019ab8:	f7ff ff8e 	bl	80199d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8019abc:	4b05      	ldr	r3, [pc, #20]	@ (8019ad4 <SysTick_Config+0x40>)
 8019abe:	2200      	movs	r2, #0
 8019ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8019ac2:	4b04      	ldr	r3, [pc, #16]	@ (8019ad4 <SysTick_Config+0x40>)
 8019ac4:	2207      	movs	r2, #7
 8019ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8019ac8:	2300      	movs	r3, #0
}
 8019aca:	4618      	mov	r0, r3
 8019acc:	3708      	adds	r7, #8
 8019ace:	46bd      	mov	sp, r7
 8019ad0:	bd80      	pop	{r7, pc}
 8019ad2:	bf00      	nop
 8019ad4:	e000e010 	.word	0xe000e010

08019ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019ad8:	b580      	push	{r7, lr}
 8019ada:	b082      	sub	sp, #8
 8019adc:	af00      	add	r7, sp, #0
 8019ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8019ae0:	6878      	ldr	r0, [r7, #4]
 8019ae2:	f7ff ff29 	bl	8019938 <__NVIC_SetPriorityGrouping>
}
 8019ae6:	bf00      	nop
 8019ae8:	3708      	adds	r7, #8
 8019aea:	46bd      	mov	sp, r7
 8019aec:	bd80      	pop	{r7, pc}

08019aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8019aee:	b580      	push	{r7, lr}
 8019af0:	b086      	sub	sp, #24
 8019af2:	af00      	add	r7, sp, #0
 8019af4:	4603      	mov	r3, r0
 8019af6:	60b9      	str	r1, [r7, #8]
 8019af8:	607a      	str	r2, [r7, #4]
 8019afa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8019afc:	f7ff ff40 	bl	8019980 <__NVIC_GetPriorityGrouping>
 8019b00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8019b02:	687a      	ldr	r2, [r7, #4]
 8019b04:	68b9      	ldr	r1, [r7, #8]
 8019b06:	6978      	ldr	r0, [r7, #20]
 8019b08:	f7ff ff90 	bl	8019a2c <NVIC_EncodePriority>
 8019b0c:	4602      	mov	r2, r0
 8019b0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019b12:	4611      	mov	r1, r2
 8019b14:	4618      	mov	r0, r3
 8019b16:	f7ff ff5f 	bl	80199d8 <__NVIC_SetPriority>
}
 8019b1a:	bf00      	nop
 8019b1c:	3718      	adds	r7, #24
 8019b1e:	46bd      	mov	sp, r7
 8019b20:	bd80      	pop	{r7, pc}

08019b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019b22:	b580      	push	{r7, lr}
 8019b24:	b082      	sub	sp, #8
 8019b26:	af00      	add	r7, sp, #0
 8019b28:	4603      	mov	r3, r0
 8019b2a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8019b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019b30:	4618      	mov	r0, r3
 8019b32:	f7ff ff33 	bl	801999c <__NVIC_EnableIRQ>
}
 8019b36:	bf00      	nop
 8019b38:	3708      	adds	r7, #8
 8019b3a:	46bd      	mov	sp, r7
 8019b3c:	bd80      	pop	{r7, pc}

08019b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8019b3e:	b580      	push	{r7, lr}
 8019b40:	b082      	sub	sp, #8
 8019b42:	af00      	add	r7, sp, #0
 8019b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8019b46:	6878      	ldr	r0, [r7, #4]
 8019b48:	f7ff ffa4 	bl	8019a94 <SysTick_Config>
 8019b4c:	4603      	mov	r3, r0
}
 8019b4e:	4618      	mov	r0, r3
 8019b50:	3708      	adds	r7, #8
 8019b52:	46bd      	mov	sp, r7
 8019b54:	bd80      	pop	{r7, pc}
	...

08019b58 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8019b58:	b480      	push	{r7}
 8019b5a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8019b5c:	f3bf 8f5f 	dmb	sy
}
 8019b60:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8019b62:	4b07      	ldr	r3, [pc, #28]	@ (8019b80 <HAL_MPU_Disable+0x28>)
 8019b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b66:	4a06      	ldr	r2, [pc, #24]	@ (8019b80 <HAL_MPU_Disable+0x28>)
 8019b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8019b6c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8019b6e:	4b05      	ldr	r3, [pc, #20]	@ (8019b84 <HAL_MPU_Disable+0x2c>)
 8019b70:	2200      	movs	r2, #0
 8019b72:	605a      	str	r2, [r3, #4]
}
 8019b74:	bf00      	nop
 8019b76:	46bd      	mov	sp, r7
 8019b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b7c:	4770      	bx	lr
 8019b7e:	bf00      	nop
 8019b80:	e000ed00 	.word	0xe000ed00
 8019b84:	e000ed90 	.word	0xe000ed90

08019b88 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8019b88:	b480      	push	{r7}
 8019b8a:	b083      	sub	sp, #12
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8019b90:	4a0b      	ldr	r2, [pc, #44]	@ (8019bc0 <HAL_MPU_Enable+0x38>)
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	f043 0301 	orr.w	r3, r3, #1
 8019b98:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8019b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8019bc4 <HAL_MPU_Enable+0x3c>)
 8019b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b9e:	4a09      	ldr	r2, [pc, #36]	@ (8019bc4 <HAL_MPU_Enable+0x3c>)
 8019ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8019ba4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8019ba6:	f3bf 8f4f 	dsb	sy
}
 8019baa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8019bac:	f3bf 8f6f 	isb	sy
}
 8019bb0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8019bb2:	bf00      	nop
 8019bb4:	370c      	adds	r7, #12
 8019bb6:	46bd      	mov	sp, r7
 8019bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bbc:	4770      	bx	lr
 8019bbe:	bf00      	nop
 8019bc0:	e000ed90 	.word	0xe000ed90
 8019bc4:	e000ed00 	.word	0xe000ed00

08019bc8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8019bc8:	b480      	push	{r7}
 8019bca:	b083      	sub	sp, #12
 8019bcc:	af00      	add	r7, sp, #0
 8019bce:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	785a      	ldrb	r2, [r3, #1]
 8019bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8019c44 <HAL_MPU_ConfigRegion+0x7c>)
 8019bd6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8019bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8019c44 <HAL_MPU_ConfigRegion+0x7c>)
 8019bda:	691b      	ldr	r3, [r3, #16]
 8019bdc:	4a19      	ldr	r2, [pc, #100]	@ (8019c44 <HAL_MPU_ConfigRegion+0x7c>)
 8019bde:	f023 0301 	bic.w	r3, r3, #1
 8019be2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8019be4:	4a17      	ldr	r2, [pc, #92]	@ (8019c44 <HAL_MPU_ConfigRegion+0x7c>)
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	685b      	ldr	r3, [r3, #4]
 8019bea:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	7b1b      	ldrb	r3, [r3, #12]
 8019bf0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	7adb      	ldrb	r3, [r3, #11]
 8019bf6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019bf8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	7a9b      	ldrb	r3, [r3, #10]
 8019bfe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8019c00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	7b5b      	ldrb	r3, [r3, #13]
 8019c06:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019c08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	7b9b      	ldrb	r3, [r3, #14]
 8019c0e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019c10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	7bdb      	ldrb	r3, [r3, #15]
 8019c16:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019c18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	7a5b      	ldrb	r3, [r3, #9]
 8019c1e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019c20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	7a1b      	ldrb	r3, [r3, #8]
 8019c26:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019c28:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8019c2a:	687a      	ldr	r2, [r7, #4]
 8019c2c:	7812      	ldrb	r2, [r2, #0]
 8019c2e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019c30:	4a04      	ldr	r2, [pc, #16]	@ (8019c44 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8019c32:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019c34:	6113      	str	r3, [r2, #16]
}
 8019c36:	bf00      	nop
 8019c38:	370c      	adds	r7, #12
 8019c3a:	46bd      	mov	sp, r7
 8019c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c40:	4770      	bx	lr
 8019c42:	bf00      	nop
 8019c44:	e000ed90 	.word	0xe000ed90

08019c48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8019c48:	b580      	push	{r7, lr}
 8019c4a:	b086      	sub	sp, #24
 8019c4c:	af00      	add	r7, sp, #0
 8019c4e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8019c50:	f7ff fe22 	bl	8019898 <HAL_GetTick>
 8019c54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d101      	bne.n	8019c60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8019c5c:	2301      	movs	r3, #1
 8019c5e:	e316      	b.n	801a28e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	4a66      	ldr	r2, [pc, #408]	@ (8019e00 <HAL_DMA_Init+0x1b8>)
 8019c66:	4293      	cmp	r3, r2
 8019c68:	d04a      	beq.n	8019d00 <HAL_DMA_Init+0xb8>
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	4a65      	ldr	r2, [pc, #404]	@ (8019e04 <HAL_DMA_Init+0x1bc>)
 8019c70:	4293      	cmp	r3, r2
 8019c72:	d045      	beq.n	8019d00 <HAL_DMA_Init+0xb8>
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	4a63      	ldr	r2, [pc, #396]	@ (8019e08 <HAL_DMA_Init+0x1c0>)
 8019c7a:	4293      	cmp	r3, r2
 8019c7c:	d040      	beq.n	8019d00 <HAL_DMA_Init+0xb8>
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	681b      	ldr	r3, [r3, #0]
 8019c82:	4a62      	ldr	r2, [pc, #392]	@ (8019e0c <HAL_DMA_Init+0x1c4>)
 8019c84:	4293      	cmp	r3, r2
 8019c86:	d03b      	beq.n	8019d00 <HAL_DMA_Init+0xb8>
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	4a60      	ldr	r2, [pc, #384]	@ (8019e10 <HAL_DMA_Init+0x1c8>)
 8019c8e:	4293      	cmp	r3, r2
 8019c90:	d036      	beq.n	8019d00 <HAL_DMA_Init+0xb8>
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	4a5f      	ldr	r2, [pc, #380]	@ (8019e14 <HAL_DMA_Init+0x1cc>)
 8019c98:	4293      	cmp	r3, r2
 8019c9a:	d031      	beq.n	8019d00 <HAL_DMA_Init+0xb8>
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	4a5d      	ldr	r2, [pc, #372]	@ (8019e18 <HAL_DMA_Init+0x1d0>)
 8019ca2:	4293      	cmp	r3, r2
 8019ca4:	d02c      	beq.n	8019d00 <HAL_DMA_Init+0xb8>
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	681b      	ldr	r3, [r3, #0]
 8019caa:	4a5c      	ldr	r2, [pc, #368]	@ (8019e1c <HAL_DMA_Init+0x1d4>)
 8019cac:	4293      	cmp	r3, r2
 8019cae:	d027      	beq.n	8019d00 <HAL_DMA_Init+0xb8>
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	4a5a      	ldr	r2, [pc, #360]	@ (8019e20 <HAL_DMA_Init+0x1d8>)
 8019cb6:	4293      	cmp	r3, r2
 8019cb8:	d022      	beq.n	8019d00 <HAL_DMA_Init+0xb8>
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	4a59      	ldr	r2, [pc, #356]	@ (8019e24 <HAL_DMA_Init+0x1dc>)
 8019cc0:	4293      	cmp	r3, r2
 8019cc2:	d01d      	beq.n	8019d00 <HAL_DMA_Init+0xb8>
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	4a57      	ldr	r2, [pc, #348]	@ (8019e28 <HAL_DMA_Init+0x1e0>)
 8019cca:	4293      	cmp	r3, r2
 8019ccc:	d018      	beq.n	8019d00 <HAL_DMA_Init+0xb8>
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	4a56      	ldr	r2, [pc, #344]	@ (8019e2c <HAL_DMA_Init+0x1e4>)
 8019cd4:	4293      	cmp	r3, r2
 8019cd6:	d013      	beq.n	8019d00 <HAL_DMA_Init+0xb8>
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	4a54      	ldr	r2, [pc, #336]	@ (8019e30 <HAL_DMA_Init+0x1e8>)
 8019cde:	4293      	cmp	r3, r2
 8019ce0:	d00e      	beq.n	8019d00 <HAL_DMA_Init+0xb8>
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	4a53      	ldr	r2, [pc, #332]	@ (8019e34 <HAL_DMA_Init+0x1ec>)
 8019ce8:	4293      	cmp	r3, r2
 8019cea:	d009      	beq.n	8019d00 <HAL_DMA_Init+0xb8>
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	4a51      	ldr	r2, [pc, #324]	@ (8019e38 <HAL_DMA_Init+0x1f0>)
 8019cf2:	4293      	cmp	r3, r2
 8019cf4:	d004      	beq.n	8019d00 <HAL_DMA_Init+0xb8>
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	4a50      	ldr	r2, [pc, #320]	@ (8019e3c <HAL_DMA_Init+0x1f4>)
 8019cfc:	4293      	cmp	r3, r2
 8019cfe:	d101      	bne.n	8019d04 <HAL_DMA_Init+0xbc>
 8019d00:	2301      	movs	r3, #1
 8019d02:	e000      	b.n	8019d06 <HAL_DMA_Init+0xbe>
 8019d04:	2300      	movs	r3, #0
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	f000 813b 	beq.w	8019f82 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	2202      	movs	r2, #2
 8019d10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	2200      	movs	r2, #0
 8019d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	4a37      	ldr	r2, [pc, #220]	@ (8019e00 <HAL_DMA_Init+0x1b8>)
 8019d22:	4293      	cmp	r3, r2
 8019d24:	d04a      	beq.n	8019dbc <HAL_DMA_Init+0x174>
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	4a36      	ldr	r2, [pc, #216]	@ (8019e04 <HAL_DMA_Init+0x1bc>)
 8019d2c:	4293      	cmp	r3, r2
 8019d2e:	d045      	beq.n	8019dbc <HAL_DMA_Init+0x174>
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	4a34      	ldr	r2, [pc, #208]	@ (8019e08 <HAL_DMA_Init+0x1c0>)
 8019d36:	4293      	cmp	r3, r2
 8019d38:	d040      	beq.n	8019dbc <HAL_DMA_Init+0x174>
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	4a33      	ldr	r2, [pc, #204]	@ (8019e0c <HAL_DMA_Init+0x1c4>)
 8019d40:	4293      	cmp	r3, r2
 8019d42:	d03b      	beq.n	8019dbc <HAL_DMA_Init+0x174>
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	4a31      	ldr	r2, [pc, #196]	@ (8019e10 <HAL_DMA_Init+0x1c8>)
 8019d4a:	4293      	cmp	r3, r2
 8019d4c:	d036      	beq.n	8019dbc <HAL_DMA_Init+0x174>
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	4a30      	ldr	r2, [pc, #192]	@ (8019e14 <HAL_DMA_Init+0x1cc>)
 8019d54:	4293      	cmp	r3, r2
 8019d56:	d031      	beq.n	8019dbc <HAL_DMA_Init+0x174>
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8019e18 <HAL_DMA_Init+0x1d0>)
 8019d5e:	4293      	cmp	r3, r2
 8019d60:	d02c      	beq.n	8019dbc <HAL_DMA_Init+0x174>
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	4a2d      	ldr	r2, [pc, #180]	@ (8019e1c <HAL_DMA_Init+0x1d4>)
 8019d68:	4293      	cmp	r3, r2
 8019d6a:	d027      	beq.n	8019dbc <HAL_DMA_Init+0x174>
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	4a2b      	ldr	r2, [pc, #172]	@ (8019e20 <HAL_DMA_Init+0x1d8>)
 8019d72:	4293      	cmp	r3, r2
 8019d74:	d022      	beq.n	8019dbc <HAL_DMA_Init+0x174>
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8019e24 <HAL_DMA_Init+0x1dc>)
 8019d7c:	4293      	cmp	r3, r2
 8019d7e:	d01d      	beq.n	8019dbc <HAL_DMA_Init+0x174>
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	4a28      	ldr	r2, [pc, #160]	@ (8019e28 <HAL_DMA_Init+0x1e0>)
 8019d86:	4293      	cmp	r3, r2
 8019d88:	d018      	beq.n	8019dbc <HAL_DMA_Init+0x174>
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	4a27      	ldr	r2, [pc, #156]	@ (8019e2c <HAL_DMA_Init+0x1e4>)
 8019d90:	4293      	cmp	r3, r2
 8019d92:	d013      	beq.n	8019dbc <HAL_DMA_Init+0x174>
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	4a25      	ldr	r2, [pc, #148]	@ (8019e30 <HAL_DMA_Init+0x1e8>)
 8019d9a:	4293      	cmp	r3, r2
 8019d9c:	d00e      	beq.n	8019dbc <HAL_DMA_Init+0x174>
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	4a24      	ldr	r2, [pc, #144]	@ (8019e34 <HAL_DMA_Init+0x1ec>)
 8019da4:	4293      	cmp	r3, r2
 8019da6:	d009      	beq.n	8019dbc <HAL_DMA_Init+0x174>
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	4a22      	ldr	r2, [pc, #136]	@ (8019e38 <HAL_DMA_Init+0x1f0>)
 8019dae:	4293      	cmp	r3, r2
 8019db0:	d004      	beq.n	8019dbc <HAL_DMA_Init+0x174>
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	4a21      	ldr	r2, [pc, #132]	@ (8019e3c <HAL_DMA_Init+0x1f4>)
 8019db8:	4293      	cmp	r3, r2
 8019dba:	d108      	bne.n	8019dce <HAL_DMA_Init+0x186>
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	681a      	ldr	r2, [r3, #0]
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	f022 0201 	bic.w	r2, r2, #1
 8019dca:	601a      	str	r2, [r3, #0]
 8019dcc:	e007      	b.n	8019dde <HAL_DMA_Init+0x196>
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	681a      	ldr	r2, [r3, #0]
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	f022 0201 	bic.w	r2, r2, #1
 8019ddc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8019dde:	e02f      	b.n	8019e40 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8019de0:	f7ff fd5a 	bl	8019898 <HAL_GetTick>
 8019de4:	4602      	mov	r2, r0
 8019de6:	693b      	ldr	r3, [r7, #16]
 8019de8:	1ad3      	subs	r3, r2, r3
 8019dea:	2b05      	cmp	r3, #5
 8019dec:	d928      	bls.n	8019e40 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	2220      	movs	r2, #32
 8019df2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	2203      	movs	r2, #3
 8019df8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8019dfc:	2301      	movs	r3, #1
 8019dfe:	e246      	b.n	801a28e <HAL_DMA_Init+0x646>
 8019e00:	40020010 	.word	0x40020010
 8019e04:	40020028 	.word	0x40020028
 8019e08:	40020040 	.word	0x40020040
 8019e0c:	40020058 	.word	0x40020058
 8019e10:	40020070 	.word	0x40020070
 8019e14:	40020088 	.word	0x40020088
 8019e18:	400200a0 	.word	0x400200a0
 8019e1c:	400200b8 	.word	0x400200b8
 8019e20:	40020410 	.word	0x40020410
 8019e24:	40020428 	.word	0x40020428
 8019e28:	40020440 	.word	0x40020440
 8019e2c:	40020458 	.word	0x40020458
 8019e30:	40020470 	.word	0x40020470
 8019e34:	40020488 	.word	0x40020488
 8019e38:	400204a0 	.word	0x400204a0
 8019e3c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	f003 0301 	and.w	r3, r3, #1
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d1c8      	bne.n	8019de0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8019e56:	697a      	ldr	r2, [r7, #20]
 8019e58:	4b83      	ldr	r3, [pc, #524]	@ (801a068 <HAL_DMA_Init+0x420>)
 8019e5a:	4013      	ands	r3, r2
 8019e5c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8019e66:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	691b      	ldr	r3, [r3, #16]
 8019e6c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019e72:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	699b      	ldr	r3, [r3, #24]
 8019e78:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019e7e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	6a1b      	ldr	r3, [r3, #32]
 8019e84:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8019e86:	697a      	ldr	r2, [r7, #20]
 8019e88:	4313      	orrs	r3, r2
 8019e8a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019e90:	2b04      	cmp	r3, #4
 8019e92:	d107      	bne.n	8019ea4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019e9c:	4313      	orrs	r3, r2
 8019e9e:	697a      	ldr	r2, [r7, #20]
 8019ea0:	4313      	orrs	r3, r2
 8019ea2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8019ea4:	4b71      	ldr	r3, [pc, #452]	@ (801a06c <HAL_DMA_Init+0x424>)
 8019ea6:	681a      	ldr	r2, [r3, #0]
 8019ea8:	4b71      	ldr	r3, [pc, #452]	@ (801a070 <HAL_DMA_Init+0x428>)
 8019eaa:	4013      	ands	r3, r2
 8019eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019eb0:	d328      	bcc.n	8019f04 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	685b      	ldr	r3, [r3, #4]
 8019eb6:	2b28      	cmp	r3, #40	@ 0x28
 8019eb8:	d903      	bls.n	8019ec2 <HAL_DMA_Init+0x27a>
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	685b      	ldr	r3, [r3, #4]
 8019ebe:	2b2e      	cmp	r3, #46	@ 0x2e
 8019ec0:	d917      	bls.n	8019ef2 <HAL_DMA_Init+0x2aa>
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	685b      	ldr	r3, [r3, #4]
 8019ec6:	2b3e      	cmp	r3, #62	@ 0x3e
 8019ec8:	d903      	bls.n	8019ed2 <HAL_DMA_Init+0x28a>
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	685b      	ldr	r3, [r3, #4]
 8019ece:	2b42      	cmp	r3, #66	@ 0x42
 8019ed0:	d90f      	bls.n	8019ef2 <HAL_DMA_Init+0x2aa>
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	685b      	ldr	r3, [r3, #4]
 8019ed6:	2b46      	cmp	r3, #70	@ 0x46
 8019ed8:	d903      	bls.n	8019ee2 <HAL_DMA_Init+0x29a>
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	685b      	ldr	r3, [r3, #4]
 8019ede:	2b48      	cmp	r3, #72	@ 0x48
 8019ee0:	d907      	bls.n	8019ef2 <HAL_DMA_Init+0x2aa>
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	685b      	ldr	r3, [r3, #4]
 8019ee6:	2b4e      	cmp	r3, #78	@ 0x4e
 8019ee8:	d905      	bls.n	8019ef6 <HAL_DMA_Init+0x2ae>
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	685b      	ldr	r3, [r3, #4]
 8019eee:	2b52      	cmp	r3, #82	@ 0x52
 8019ef0:	d801      	bhi.n	8019ef6 <HAL_DMA_Init+0x2ae>
 8019ef2:	2301      	movs	r3, #1
 8019ef4:	e000      	b.n	8019ef8 <HAL_DMA_Init+0x2b0>
 8019ef6:	2300      	movs	r3, #0
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d003      	beq.n	8019f04 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8019efc:	697b      	ldr	r3, [r7, #20]
 8019efe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019f02:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	697a      	ldr	r2, [r7, #20]
 8019f0a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	695b      	ldr	r3, [r3, #20]
 8019f12:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8019f14:	697b      	ldr	r3, [r7, #20]
 8019f16:	f023 0307 	bic.w	r3, r3, #7
 8019f1a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f20:	697a      	ldr	r2, [r7, #20]
 8019f22:	4313      	orrs	r3, r2
 8019f24:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f2a:	2b04      	cmp	r3, #4
 8019f2c:	d117      	bne.n	8019f5e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019f32:	697a      	ldr	r2, [r7, #20]
 8019f34:	4313      	orrs	r3, r2
 8019f36:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d00e      	beq.n	8019f5e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8019f40:	6878      	ldr	r0, [r7, #4]
 8019f42:	f001 fbff 	bl	801b744 <DMA_CheckFifoParam>
 8019f46:	4603      	mov	r3, r0
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d008      	beq.n	8019f5e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	2240      	movs	r2, #64	@ 0x40
 8019f50:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	2201      	movs	r2, #1
 8019f56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8019f5a:	2301      	movs	r3, #1
 8019f5c:	e197      	b.n	801a28e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	697a      	ldr	r2, [r7, #20]
 8019f64:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8019f66:	6878      	ldr	r0, [r7, #4]
 8019f68:	f001 fb3a 	bl	801b5e0 <DMA_CalcBaseAndBitshift>
 8019f6c:	4603      	mov	r3, r0
 8019f6e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019f74:	f003 031f 	and.w	r3, r3, #31
 8019f78:	223f      	movs	r2, #63	@ 0x3f
 8019f7a:	409a      	lsls	r2, r3
 8019f7c:	68bb      	ldr	r3, [r7, #8]
 8019f7e:	609a      	str	r2, [r3, #8]
 8019f80:	e0cd      	b.n	801a11e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	4a3b      	ldr	r2, [pc, #236]	@ (801a074 <HAL_DMA_Init+0x42c>)
 8019f88:	4293      	cmp	r3, r2
 8019f8a:	d022      	beq.n	8019fd2 <HAL_DMA_Init+0x38a>
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	4a39      	ldr	r2, [pc, #228]	@ (801a078 <HAL_DMA_Init+0x430>)
 8019f92:	4293      	cmp	r3, r2
 8019f94:	d01d      	beq.n	8019fd2 <HAL_DMA_Init+0x38a>
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	4a38      	ldr	r2, [pc, #224]	@ (801a07c <HAL_DMA_Init+0x434>)
 8019f9c:	4293      	cmp	r3, r2
 8019f9e:	d018      	beq.n	8019fd2 <HAL_DMA_Init+0x38a>
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	4a36      	ldr	r2, [pc, #216]	@ (801a080 <HAL_DMA_Init+0x438>)
 8019fa6:	4293      	cmp	r3, r2
 8019fa8:	d013      	beq.n	8019fd2 <HAL_DMA_Init+0x38a>
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	4a35      	ldr	r2, [pc, #212]	@ (801a084 <HAL_DMA_Init+0x43c>)
 8019fb0:	4293      	cmp	r3, r2
 8019fb2:	d00e      	beq.n	8019fd2 <HAL_DMA_Init+0x38a>
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	4a33      	ldr	r2, [pc, #204]	@ (801a088 <HAL_DMA_Init+0x440>)
 8019fba:	4293      	cmp	r3, r2
 8019fbc:	d009      	beq.n	8019fd2 <HAL_DMA_Init+0x38a>
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	4a32      	ldr	r2, [pc, #200]	@ (801a08c <HAL_DMA_Init+0x444>)
 8019fc4:	4293      	cmp	r3, r2
 8019fc6:	d004      	beq.n	8019fd2 <HAL_DMA_Init+0x38a>
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	4a30      	ldr	r2, [pc, #192]	@ (801a090 <HAL_DMA_Init+0x448>)
 8019fce:	4293      	cmp	r3, r2
 8019fd0:	d101      	bne.n	8019fd6 <HAL_DMA_Init+0x38e>
 8019fd2:	2301      	movs	r3, #1
 8019fd4:	e000      	b.n	8019fd8 <HAL_DMA_Init+0x390>
 8019fd6:	2300      	movs	r3, #0
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	f000 8097 	beq.w	801a10c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	4a24      	ldr	r2, [pc, #144]	@ (801a074 <HAL_DMA_Init+0x42c>)
 8019fe4:	4293      	cmp	r3, r2
 8019fe6:	d021      	beq.n	801a02c <HAL_DMA_Init+0x3e4>
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	4a22      	ldr	r2, [pc, #136]	@ (801a078 <HAL_DMA_Init+0x430>)
 8019fee:	4293      	cmp	r3, r2
 8019ff0:	d01c      	beq.n	801a02c <HAL_DMA_Init+0x3e4>
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	4a21      	ldr	r2, [pc, #132]	@ (801a07c <HAL_DMA_Init+0x434>)
 8019ff8:	4293      	cmp	r3, r2
 8019ffa:	d017      	beq.n	801a02c <HAL_DMA_Init+0x3e4>
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	681b      	ldr	r3, [r3, #0]
 801a000:	4a1f      	ldr	r2, [pc, #124]	@ (801a080 <HAL_DMA_Init+0x438>)
 801a002:	4293      	cmp	r3, r2
 801a004:	d012      	beq.n	801a02c <HAL_DMA_Init+0x3e4>
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	681b      	ldr	r3, [r3, #0]
 801a00a:	4a1e      	ldr	r2, [pc, #120]	@ (801a084 <HAL_DMA_Init+0x43c>)
 801a00c:	4293      	cmp	r3, r2
 801a00e:	d00d      	beq.n	801a02c <HAL_DMA_Init+0x3e4>
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	681b      	ldr	r3, [r3, #0]
 801a014:	4a1c      	ldr	r2, [pc, #112]	@ (801a088 <HAL_DMA_Init+0x440>)
 801a016:	4293      	cmp	r3, r2
 801a018:	d008      	beq.n	801a02c <HAL_DMA_Init+0x3e4>
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	4a1b      	ldr	r2, [pc, #108]	@ (801a08c <HAL_DMA_Init+0x444>)
 801a020:	4293      	cmp	r3, r2
 801a022:	d003      	beq.n	801a02c <HAL_DMA_Init+0x3e4>
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	4a19      	ldr	r2, [pc, #100]	@ (801a090 <HAL_DMA_Init+0x448>)
 801a02a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	2202      	movs	r2, #2
 801a030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	2200      	movs	r2, #0
 801a038:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 801a044:	697a      	ldr	r2, [r7, #20]
 801a046:	4b13      	ldr	r3, [pc, #76]	@ (801a094 <HAL_DMA_Init+0x44c>)
 801a048:	4013      	ands	r3, r2
 801a04a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	689b      	ldr	r3, [r3, #8]
 801a050:	2b40      	cmp	r3, #64	@ 0x40
 801a052:	d021      	beq.n	801a098 <HAL_DMA_Init+0x450>
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	689b      	ldr	r3, [r3, #8]
 801a058:	2b80      	cmp	r3, #128	@ 0x80
 801a05a:	d102      	bne.n	801a062 <HAL_DMA_Init+0x41a>
 801a05c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801a060:	e01b      	b.n	801a09a <HAL_DMA_Init+0x452>
 801a062:	2300      	movs	r3, #0
 801a064:	e019      	b.n	801a09a <HAL_DMA_Init+0x452>
 801a066:	bf00      	nop
 801a068:	fe10803f 	.word	0xfe10803f
 801a06c:	5c001000 	.word	0x5c001000
 801a070:	ffff0000 	.word	0xffff0000
 801a074:	58025408 	.word	0x58025408
 801a078:	5802541c 	.word	0x5802541c
 801a07c:	58025430 	.word	0x58025430
 801a080:	58025444 	.word	0x58025444
 801a084:	58025458 	.word	0x58025458
 801a088:	5802546c 	.word	0x5802546c
 801a08c:	58025480 	.word	0x58025480
 801a090:	58025494 	.word	0x58025494
 801a094:	fffe000f 	.word	0xfffe000f
 801a098:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801a09a:	687a      	ldr	r2, [r7, #4]
 801a09c:	68d2      	ldr	r2, [r2, #12]
 801a09e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a0a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	691b      	ldr	r3, [r3, #16]
 801a0a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801a0a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	695b      	ldr	r3, [r3, #20]
 801a0ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801a0b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	699b      	ldr	r3, [r3, #24]
 801a0b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801a0b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	69db      	ldr	r3, [r3, #28]
 801a0be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801a0c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	6a1b      	ldr	r3, [r3, #32]
 801a0c6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801a0c8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a0ca:	697a      	ldr	r2, [r7, #20]
 801a0cc:	4313      	orrs	r3, r2
 801a0ce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	681b      	ldr	r3, [r3, #0]
 801a0d4:	697a      	ldr	r2, [r7, #20]
 801a0d6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	461a      	mov	r2, r3
 801a0de:	4b6e      	ldr	r3, [pc, #440]	@ (801a298 <HAL_DMA_Init+0x650>)
 801a0e0:	4413      	add	r3, r2
 801a0e2:	4a6e      	ldr	r2, [pc, #440]	@ (801a29c <HAL_DMA_Init+0x654>)
 801a0e4:	fba2 2303 	umull	r2, r3, r2, r3
 801a0e8:	091b      	lsrs	r3, r3, #4
 801a0ea:	009a      	lsls	r2, r3, #2
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801a0f0:	6878      	ldr	r0, [r7, #4]
 801a0f2:	f001 fa75 	bl	801b5e0 <DMA_CalcBaseAndBitshift>
 801a0f6:	4603      	mov	r3, r0
 801a0f8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a0fe:	f003 031f 	and.w	r3, r3, #31
 801a102:	2201      	movs	r2, #1
 801a104:	409a      	lsls	r2, r3
 801a106:	68fb      	ldr	r3, [r7, #12]
 801a108:	605a      	str	r2, [r3, #4]
 801a10a:	e008      	b.n	801a11e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	2240      	movs	r2, #64	@ 0x40
 801a110:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	2203      	movs	r2, #3
 801a116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 801a11a:	2301      	movs	r3, #1
 801a11c:	e0b7      	b.n	801a28e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	4a5f      	ldr	r2, [pc, #380]	@ (801a2a0 <HAL_DMA_Init+0x658>)
 801a124:	4293      	cmp	r3, r2
 801a126:	d072      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	4a5d      	ldr	r2, [pc, #372]	@ (801a2a4 <HAL_DMA_Init+0x65c>)
 801a12e:	4293      	cmp	r3, r2
 801a130:	d06d      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	4a5c      	ldr	r2, [pc, #368]	@ (801a2a8 <HAL_DMA_Init+0x660>)
 801a138:	4293      	cmp	r3, r2
 801a13a:	d068      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	4a5a      	ldr	r2, [pc, #360]	@ (801a2ac <HAL_DMA_Init+0x664>)
 801a142:	4293      	cmp	r3, r2
 801a144:	d063      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	4a59      	ldr	r2, [pc, #356]	@ (801a2b0 <HAL_DMA_Init+0x668>)
 801a14c:	4293      	cmp	r3, r2
 801a14e:	d05e      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	4a57      	ldr	r2, [pc, #348]	@ (801a2b4 <HAL_DMA_Init+0x66c>)
 801a156:	4293      	cmp	r3, r2
 801a158:	d059      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	4a56      	ldr	r2, [pc, #344]	@ (801a2b8 <HAL_DMA_Init+0x670>)
 801a160:	4293      	cmp	r3, r2
 801a162:	d054      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	4a54      	ldr	r2, [pc, #336]	@ (801a2bc <HAL_DMA_Init+0x674>)
 801a16a:	4293      	cmp	r3, r2
 801a16c:	d04f      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	681b      	ldr	r3, [r3, #0]
 801a172:	4a53      	ldr	r2, [pc, #332]	@ (801a2c0 <HAL_DMA_Init+0x678>)
 801a174:	4293      	cmp	r3, r2
 801a176:	d04a      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	4a51      	ldr	r2, [pc, #324]	@ (801a2c4 <HAL_DMA_Init+0x67c>)
 801a17e:	4293      	cmp	r3, r2
 801a180:	d045      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	681b      	ldr	r3, [r3, #0]
 801a186:	4a50      	ldr	r2, [pc, #320]	@ (801a2c8 <HAL_DMA_Init+0x680>)
 801a188:	4293      	cmp	r3, r2
 801a18a:	d040      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	681b      	ldr	r3, [r3, #0]
 801a190:	4a4e      	ldr	r2, [pc, #312]	@ (801a2cc <HAL_DMA_Init+0x684>)
 801a192:	4293      	cmp	r3, r2
 801a194:	d03b      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	4a4d      	ldr	r2, [pc, #308]	@ (801a2d0 <HAL_DMA_Init+0x688>)
 801a19c:	4293      	cmp	r3, r2
 801a19e:	d036      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	4a4b      	ldr	r2, [pc, #300]	@ (801a2d4 <HAL_DMA_Init+0x68c>)
 801a1a6:	4293      	cmp	r3, r2
 801a1a8:	d031      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	4a4a      	ldr	r2, [pc, #296]	@ (801a2d8 <HAL_DMA_Init+0x690>)
 801a1b0:	4293      	cmp	r3, r2
 801a1b2:	d02c      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	4a48      	ldr	r2, [pc, #288]	@ (801a2dc <HAL_DMA_Init+0x694>)
 801a1ba:	4293      	cmp	r3, r2
 801a1bc:	d027      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	4a47      	ldr	r2, [pc, #284]	@ (801a2e0 <HAL_DMA_Init+0x698>)
 801a1c4:	4293      	cmp	r3, r2
 801a1c6:	d022      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	4a45      	ldr	r2, [pc, #276]	@ (801a2e4 <HAL_DMA_Init+0x69c>)
 801a1ce:	4293      	cmp	r3, r2
 801a1d0:	d01d      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	4a44      	ldr	r2, [pc, #272]	@ (801a2e8 <HAL_DMA_Init+0x6a0>)
 801a1d8:	4293      	cmp	r3, r2
 801a1da:	d018      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	4a42      	ldr	r2, [pc, #264]	@ (801a2ec <HAL_DMA_Init+0x6a4>)
 801a1e2:	4293      	cmp	r3, r2
 801a1e4:	d013      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	4a41      	ldr	r2, [pc, #260]	@ (801a2f0 <HAL_DMA_Init+0x6a8>)
 801a1ec:	4293      	cmp	r3, r2
 801a1ee:	d00e      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	4a3f      	ldr	r2, [pc, #252]	@ (801a2f4 <HAL_DMA_Init+0x6ac>)
 801a1f6:	4293      	cmp	r3, r2
 801a1f8:	d009      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	4a3e      	ldr	r2, [pc, #248]	@ (801a2f8 <HAL_DMA_Init+0x6b0>)
 801a200:	4293      	cmp	r3, r2
 801a202:	d004      	beq.n	801a20e <HAL_DMA_Init+0x5c6>
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	4a3c      	ldr	r2, [pc, #240]	@ (801a2fc <HAL_DMA_Init+0x6b4>)
 801a20a:	4293      	cmp	r3, r2
 801a20c:	d101      	bne.n	801a212 <HAL_DMA_Init+0x5ca>
 801a20e:	2301      	movs	r3, #1
 801a210:	e000      	b.n	801a214 <HAL_DMA_Init+0x5cc>
 801a212:	2300      	movs	r3, #0
 801a214:	2b00      	cmp	r3, #0
 801a216:	d032      	beq.n	801a27e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801a218:	6878      	ldr	r0, [r7, #4]
 801a21a:	f001 fb0f 	bl	801b83c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	689b      	ldr	r3, [r3, #8]
 801a222:	2b80      	cmp	r3, #128	@ 0x80
 801a224:	d102      	bne.n	801a22c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	2200      	movs	r2, #0
 801a22a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	685a      	ldr	r2, [r3, #4]
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a234:	b2d2      	uxtb	r2, r2
 801a236:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a23c:	687a      	ldr	r2, [r7, #4]
 801a23e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801a240:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	685b      	ldr	r3, [r3, #4]
 801a246:	2b00      	cmp	r3, #0
 801a248:	d010      	beq.n	801a26c <HAL_DMA_Init+0x624>
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	685b      	ldr	r3, [r3, #4]
 801a24e:	2b08      	cmp	r3, #8
 801a250:	d80c      	bhi.n	801a26c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801a252:	6878      	ldr	r0, [r7, #4]
 801a254:	f001 fb8c 	bl	801b970 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a25c:	2200      	movs	r2, #0
 801a25e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a264:	687a      	ldr	r2, [r7, #4]
 801a266:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801a268:	605a      	str	r2, [r3, #4]
 801a26a:	e008      	b.n	801a27e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	2200      	movs	r2, #0
 801a270:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	2200      	movs	r2, #0
 801a276:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	2200      	movs	r2, #0
 801a27c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	2200      	movs	r2, #0
 801a282:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	2201      	movs	r2, #1
 801a288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801a28c:	2300      	movs	r3, #0
}
 801a28e:	4618      	mov	r0, r3
 801a290:	3718      	adds	r7, #24
 801a292:	46bd      	mov	sp, r7
 801a294:	bd80      	pop	{r7, pc}
 801a296:	bf00      	nop
 801a298:	a7fdabf8 	.word	0xa7fdabf8
 801a29c:	cccccccd 	.word	0xcccccccd
 801a2a0:	40020010 	.word	0x40020010
 801a2a4:	40020028 	.word	0x40020028
 801a2a8:	40020040 	.word	0x40020040
 801a2ac:	40020058 	.word	0x40020058
 801a2b0:	40020070 	.word	0x40020070
 801a2b4:	40020088 	.word	0x40020088
 801a2b8:	400200a0 	.word	0x400200a0
 801a2bc:	400200b8 	.word	0x400200b8
 801a2c0:	40020410 	.word	0x40020410
 801a2c4:	40020428 	.word	0x40020428
 801a2c8:	40020440 	.word	0x40020440
 801a2cc:	40020458 	.word	0x40020458
 801a2d0:	40020470 	.word	0x40020470
 801a2d4:	40020488 	.word	0x40020488
 801a2d8:	400204a0 	.word	0x400204a0
 801a2dc:	400204b8 	.word	0x400204b8
 801a2e0:	58025408 	.word	0x58025408
 801a2e4:	5802541c 	.word	0x5802541c
 801a2e8:	58025430 	.word	0x58025430
 801a2ec:	58025444 	.word	0x58025444
 801a2f0:	58025458 	.word	0x58025458
 801a2f4:	5802546c 	.word	0x5802546c
 801a2f8:	58025480 	.word	0x58025480
 801a2fc:	58025494 	.word	0x58025494

0801a300 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801a300:	b580      	push	{r7, lr}
 801a302:	b084      	sub	sp, #16
 801a304:	af00      	add	r7, sp, #0
 801a306:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d101      	bne.n	801a312 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801a30e:	2301      	movs	r3, #1
 801a310:	e237      	b.n	801a782 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a318:	b2db      	uxtb	r3, r3
 801a31a:	2b02      	cmp	r3, #2
 801a31c:	d004      	beq.n	801a328 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	2280      	movs	r2, #128	@ 0x80
 801a322:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801a324:	2301      	movs	r3, #1
 801a326:	e22c      	b.n	801a782 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	4a5c      	ldr	r2, [pc, #368]	@ (801a4a0 <HAL_DMA_Abort_IT+0x1a0>)
 801a32e:	4293      	cmp	r3, r2
 801a330:	d04a      	beq.n	801a3c8 <HAL_DMA_Abort_IT+0xc8>
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	4a5b      	ldr	r2, [pc, #364]	@ (801a4a4 <HAL_DMA_Abort_IT+0x1a4>)
 801a338:	4293      	cmp	r3, r2
 801a33a:	d045      	beq.n	801a3c8 <HAL_DMA_Abort_IT+0xc8>
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	4a59      	ldr	r2, [pc, #356]	@ (801a4a8 <HAL_DMA_Abort_IT+0x1a8>)
 801a342:	4293      	cmp	r3, r2
 801a344:	d040      	beq.n	801a3c8 <HAL_DMA_Abort_IT+0xc8>
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	4a58      	ldr	r2, [pc, #352]	@ (801a4ac <HAL_DMA_Abort_IT+0x1ac>)
 801a34c:	4293      	cmp	r3, r2
 801a34e:	d03b      	beq.n	801a3c8 <HAL_DMA_Abort_IT+0xc8>
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	681b      	ldr	r3, [r3, #0]
 801a354:	4a56      	ldr	r2, [pc, #344]	@ (801a4b0 <HAL_DMA_Abort_IT+0x1b0>)
 801a356:	4293      	cmp	r3, r2
 801a358:	d036      	beq.n	801a3c8 <HAL_DMA_Abort_IT+0xc8>
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	4a55      	ldr	r2, [pc, #340]	@ (801a4b4 <HAL_DMA_Abort_IT+0x1b4>)
 801a360:	4293      	cmp	r3, r2
 801a362:	d031      	beq.n	801a3c8 <HAL_DMA_Abort_IT+0xc8>
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	4a53      	ldr	r2, [pc, #332]	@ (801a4b8 <HAL_DMA_Abort_IT+0x1b8>)
 801a36a:	4293      	cmp	r3, r2
 801a36c:	d02c      	beq.n	801a3c8 <HAL_DMA_Abort_IT+0xc8>
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	681b      	ldr	r3, [r3, #0]
 801a372:	4a52      	ldr	r2, [pc, #328]	@ (801a4bc <HAL_DMA_Abort_IT+0x1bc>)
 801a374:	4293      	cmp	r3, r2
 801a376:	d027      	beq.n	801a3c8 <HAL_DMA_Abort_IT+0xc8>
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	4a50      	ldr	r2, [pc, #320]	@ (801a4c0 <HAL_DMA_Abort_IT+0x1c0>)
 801a37e:	4293      	cmp	r3, r2
 801a380:	d022      	beq.n	801a3c8 <HAL_DMA_Abort_IT+0xc8>
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	681b      	ldr	r3, [r3, #0]
 801a386:	4a4f      	ldr	r2, [pc, #316]	@ (801a4c4 <HAL_DMA_Abort_IT+0x1c4>)
 801a388:	4293      	cmp	r3, r2
 801a38a:	d01d      	beq.n	801a3c8 <HAL_DMA_Abort_IT+0xc8>
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	4a4d      	ldr	r2, [pc, #308]	@ (801a4c8 <HAL_DMA_Abort_IT+0x1c8>)
 801a392:	4293      	cmp	r3, r2
 801a394:	d018      	beq.n	801a3c8 <HAL_DMA_Abort_IT+0xc8>
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	4a4c      	ldr	r2, [pc, #304]	@ (801a4cc <HAL_DMA_Abort_IT+0x1cc>)
 801a39c:	4293      	cmp	r3, r2
 801a39e:	d013      	beq.n	801a3c8 <HAL_DMA_Abort_IT+0xc8>
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	4a4a      	ldr	r2, [pc, #296]	@ (801a4d0 <HAL_DMA_Abort_IT+0x1d0>)
 801a3a6:	4293      	cmp	r3, r2
 801a3a8:	d00e      	beq.n	801a3c8 <HAL_DMA_Abort_IT+0xc8>
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	4a49      	ldr	r2, [pc, #292]	@ (801a4d4 <HAL_DMA_Abort_IT+0x1d4>)
 801a3b0:	4293      	cmp	r3, r2
 801a3b2:	d009      	beq.n	801a3c8 <HAL_DMA_Abort_IT+0xc8>
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	681b      	ldr	r3, [r3, #0]
 801a3b8:	4a47      	ldr	r2, [pc, #284]	@ (801a4d8 <HAL_DMA_Abort_IT+0x1d8>)
 801a3ba:	4293      	cmp	r3, r2
 801a3bc:	d004      	beq.n	801a3c8 <HAL_DMA_Abort_IT+0xc8>
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	4a46      	ldr	r2, [pc, #280]	@ (801a4dc <HAL_DMA_Abort_IT+0x1dc>)
 801a3c4:	4293      	cmp	r3, r2
 801a3c6:	d101      	bne.n	801a3cc <HAL_DMA_Abort_IT+0xcc>
 801a3c8:	2301      	movs	r3, #1
 801a3ca:	e000      	b.n	801a3ce <HAL_DMA_Abort_IT+0xce>
 801a3cc:	2300      	movs	r3, #0
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	f000 8086 	beq.w	801a4e0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	2204      	movs	r2, #4
 801a3d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	4a2f      	ldr	r2, [pc, #188]	@ (801a4a0 <HAL_DMA_Abort_IT+0x1a0>)
 801a3e2:	4293      	cmp	r3, r2
 801a3e4:	d04a      	beq.n	801a47c <HAL_DMA_Abort_IT+0x17c>
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	4a2e      	ldr	r2, [pc, #184]	@ (801a4a4 <HAL_DMA_Abort_IT+0x1a4>)
 801a3ec:	4293      	cmp	r3, r2
 801a3ee:	d045      	beq.n	801a47c <HAL_DMA_Abort_IT+0x17c>
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	4a2c      	ldr	r2, [pc, #176]	@ (801a4a8 <HAL_DMA_Abort_IT+0x1a8>)
 801a3f6:	4293      	cmp	r3, r2
 801a3f8:	d040      	beq.n	801a47c <HAL_DMA_Abort_IT+0x17c>
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	4a2b      	ldr	r2, [pc, #172]	@ (801a4ac <HAL_DMA_Abort_IT+0x1ac>)
 801a400:	4293      	cmp	r3, r2
 801a402:	d03b      	beq.n	801a47c <HAL_DMA_Abort_IT+0x17c>
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	681b      	ldr	r3, [r3, #0]
 801a408:	4a29      	ldr	r2, [pc, #164]	@ (801a4b0 <HAL_DMA_Abort_IT+0x1b0>)
 801a40a:	4293      	cmp	r3, r2
 801a40c:	d036      	beq.n	801a47c <HAL_DMA_Abort_IT+0x17c>
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	4a28      	ldr	r2, [pc, #160]	@ (801a4b4 <HAL_DMA_Abort_IT+0x1b4>)
 801a414:	4293      	cmp	r3, r2
 801a416:	d031      	beq.n	801a47c <HAL_DMA_Abort_IT+0x17c>
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	4a26      	ldr	r2, [pc, #152]	@ (801a4b8 <HAL_DMA_Abort_IT+0x1b8>)
 801a41e:	4293      	cmp	r3, r2
 801a420:	d02c      	beq.n	801a47c <HAL_DMA_Abort_IT+0x17c>
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	4a25      	ldr	r2, [pc, #148]	@ (801a4bc <HAL_DMA_Abort_IT+0x1bc>)
 801a428:	4293      	cmp	r3, r2
 801a42a:	d027      	beq.n	801a47c <HAL_DMA_Abort_IT+0x17c>
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	4a23      	ldr	r2, [pc, #140]	@ (801a4c0 <HAL_DMA_Abort_IT+0x1c0>)
 801a432:	4293      	cmp	r3, r2
 801a434:	d022      	beq.n	801a47c <HAL_DMA_Abort_IT+0x17c>
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	4a22      	ldr	r2, [pc, #136]	@ (801a4c4 <HAL_DMA_Abort_IT+0x1c4>)
 801a43c:	4293      	cmp	r3, r2
 801a43e:	d01d      	beq.n	801a47c <HAL_DMA_Abort_IT+0x17c>
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	4a20      	ldr	r2, [pc, #128]	@ (801a4c8 <HAL_DMA_Abort_IT+0x1c8>)
 801a446:	4293      	cmp	r3, r2
 801a448:	d018      	beq.n	801a47c <HAL_DMA_Abort_IT+0x17c>
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	4a1f      	ldr	r2, [pc, #124]	@ (801a4cc <HAL_DMA_Abort_IT+0x1cc>)
 801a450:	4293      	cmp	r3, r2
 801a452:	d013      	beq.n	801a47c <HAL_DMA_Abort_IT+0x17c>
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	4a1d      	ldr	r2, [pc, #116]	@ (801a4d0 <HAL_DMA_Abort_IT+0x1d0>)
 801a45a:	4293      	cmp	r3, r2
 801a45c:	d00e      	beq.n	801a47c <HAL_DMA_Abort_IT+0x17c>
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	4a1c      	ldr	r2, [pc, #112]	@ (801a4d4 <HAL_DMA_Abort_IT+0x1d4>)
 801a464:	4293      	cmp	r3, r2
 801a466:	d009      	beq.n	801a47c <HAL_DMA_Abort_IT+0x17c>
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	4a1a      	ldr	r2, [pc, #104]	@ (801a4d8 <HAL_DMA_Abort_IT+0x1d8>)
 801a46e:	4293      	cmp	r3, r2
 801a470:	d004      	beq.n	801a47c <HAL_DMA_Abort_IT+0x17c>
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	4a19      	ldr	r2, [pc, #100]	@ (801a4dc <HAL_DMA_Abort_IT+0x1dc>)
 801a478:	4293      	cmp	r3, r2
 801a47a:	d108      	bne.n	801a48e <HAL_DMA_Abort_IT+0x18e>
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	681a      	ldr	r2, [r3, #0]
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	f022 0201 	bic.w	r2, r2, #1
 801a48a:	601a      	str	r2, [r3, #0]
 801a48c:	e178      	b.n	801a780 <HAL_DMA_Abort_IT+0x480>
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	681a      	ldr	r2, [r3, #0]
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	f022 0201 	bic.w	r2, r2, #1
 801a49c:	601a      	str	r2, [r3, #0]
 801a49e:	e16f      	b.n	801a780 <HAL_DMA_Abort_IT+0x480>
 801a4a0:	40020010 	.word	0x40020010
 801a4a4:	40020028 	.word	0x40020028
 801a4a8:	40020040 	.word	0x40020040
 801a4ac:	40020058 	.word	0x40020058
 801a4b0:	40020070 	.word	0x40020070
 801a4b4:	40020088 	.word	0x40020088
 801a4b8:	400200a0 	.word	0x400200a0
 801a4bc:	400200b8 	.word	0x400200b8
 801a4c0:	40020410 	.word	0x40020410
 801a4c4:	40020428 	.word	0x40020428
 801a4c8:	40020440 	.word	0x40020440
 801a4cc:	40020458 	.word	0x40020458
 801a4d0:	40020470 	.word	0x40020470
 801a4d4:	40020488 	.word	0x40020488
 801a4d8:	400204a0 	.word	0x400204a0
 801a4dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	681a      	ldr	r2, [r3, #0]
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	f022 020e 	bic.w	r2, r2, #14
 801a4ee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	4a6c      	ldr	r2, [pc, #432]	@ (801a6a8 <HAL_DMA_Abort_IT+0x3a8>)
 801a4f6:	4293      	cmp	r3, r2
 801a4f8:	d04a      	beq.n	801a590 <HAL_DMA_Abort_IT+0x290>
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	4a6b      	ldr	r2, [pc, #428]	@ (801a6ac <HAL_DMA_Abort_IT+0x3ac>)
 801a500:	4293      	cmp	r3, r2
 801a502:	d045      	beq.n	801a590 <HAL_DMA_Abort_IT+0x290>
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	681b      	ldr	r3, [r3, #0]
 801a508:	4a69      	ldr	r2, [pc, #420]	@ (801a6b0 <HAL_DMA_Abort_IT+0x3b0>)
 801a50a:	4293      	cmp	r3, r2
 801a50c:	d040      	beq.n	801a590 <HAL_DMA_Abort_IT+0x290>
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	4a68      	ldr	r2, [pc, #416]	@ (801a6b4 <HAL_DMA_Abort_IT+0x3b4>)
 801a514:	4293      	cmp	r3, r2
 801a516:	d03b      	beq.n	801a590 <HAL_DMA_Abort_IT+0x290>
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	4a66      	ldr	r2, [pc, #408]	@ (801a6b8 <HAL_DMA_Abort_IT+0x3b8>)
 801a51e:	4293      	cmp	r3, r2
 801a520:	d036      	beq.n	801a590 <HAL_DMA_Abort_IT+0x290>
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	4a65      	ldr	r2, [pc, #404]	@ (801a6bc <HAL_DMA_Abort_IT+0x3bc>)
 801a528:	4293      	cmp	r3, r2
 801a52a:	d031      	beq.n	801a590 <HAL_DMA_Abort_IT+0x290>
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	4a63      	ldr	r2, [pc, #396]	@ (801a6c0 <HAL_DMA_Abort_IT+0x3c0>)
 801a532:	4293      	cmp	r3, r2
 801a534:	d02c      	beq.n	801a590 <HAL_DMA_Abort_IT+0x290>
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	4a62      	ldr	r2, [pc, #392]	@ (801a6c4 <HAL_DMA_Abort_IT+0x3c4>)
 801a53c:	4293      	cmp	r3, r2
 801a53e:	d027      	beq.n	801a590 <HAL_DMA_Abort_IT+0x290>
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	4a60      	ldr	r2, [pc, #384]	@ (801a6c8 <HAL_DMA_Abort_IT+0x3c8>)
 801a546:	4293      	cmp	r3, r2
 801a548:	d022      	beq.n	801a590 <HAL_DMA_Abort_IT+0x290>
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	4a5f      	ldr	r2, [pc, #380]	@ (801a6cc <HAL_DMA_Abort_IT+0x3cc>)
 801a550:	4293      	cmp	r3, r2
 801a552:	d01d      	beq.n	801a590 <HAL_DMA_Abort_IT+0x290>
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	4a5d      	ldr	r2, [pc, #372]	@ (801a6d0 <HAL_DMA_Abort_IT+0x3d0>)
 801a55a:	4293      	cmp	r3, r2
 801a55c:	d018      	beq.n	801a590 <HAL_DMA_Abort_IT+0x290>
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	4a5c      	ldr	r2, [pc, #368]	@ (801a6d4 <HAL_DMA_Abort_IT+0x3d4>)
 801a564:	4293      	cmp	r3, r2
 801a566:	d013      	beq.n	801a590 <HAL_DMA_Abort_IT+0x290>
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	4a5a      	ldr	r2, [pc, #360]	@ (801a6d8 <HAL_DMA_Abort_IT+0x3d8>)
 801a56e:	4293      	cmp	r3, r2
 801a570:	d00e      	beq.n	801a590 <HAL_DMA_Abort_IT+0x290>
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	4a59      	ldr	r2, [pc, #356]	@ (801a6dc <HAL_DMA_Abort_IT+0x3dc>)
 801a578:	4293      	cmp	r3, r2
 801a57a:	d009      	beq.n	801a590 <HAL_DMA_Abort_IT+0x290>
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	4a57      	ldr	r2, [pc, #348]	@ (801a6e0 <HAL_DMA_Abort_IT+0x3e0>)
 801a582:	4293      	cmp	r3, r2
 801a584:	d004      	beq.n	801a590 <HAL_DMA_Abort_IT+0x290>
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	4a56      	ldr	r2, [pc, #344]	@ (801a6e4 <HAL_DMA_Abort_IT+0x3e4>)
 801a58c:	4293      	cmp	r3, r2
 801a58e:	d108      	bne.n	801a5a2 <HAL_DMA_Abort_IT+0x2a2>
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	681b      	ldr	r3, [r3, #0]
 801a594:	681a      	ldr	r2, [r3, #0]
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	681b      	ldr	r3, [r3, #0]
 801a59a:	f022 0201 	bic.w	r2, r2, #1
 801a59e:	601a      	str	r2, [r3, #0]
 801a5a0:	e007      	b.n	801a5b2 <HAL_DMA_Abort_IT+0x2b2>
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	681a      	ldr	r2, [r3, #0]
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	f022 0201 	bic.w	r2, r2, #1
 801a5b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	4a3c      	ldr	r2, [pc, #240]	@ (801a6a8 <HAL_DMA_Abort_IT+0x3a8>)
 801a5b8:	4293      	cmp	r3, r2
 801a5ba:	d072      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	4a3a      	ldr	r2, [pc, #232]	@ (801a6ac <HAL_DMA_Abort_IT+0x3ac>)
 801a5c2:	4293      	cmp	r3, r2
 801a5c4:	d06d      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	4a39      	ldr	r2, [pc, #228]	@ (801a6b0 <HAL_DMA_Abort_IT+0x3b0>)
 801a5cc:	4293      	cmp	r3, r2
 801a5ce:	d068      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	4a37      	ldr	r2, [pc, #220]	@ (801a6b4 <HAL_DMA_Abort_IT+0x3b4>)
 801a5d6:	4293      	cmp	r3, r2
 801a5d8:	d063      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	4a36      	ldr	r2, [pc, #216]	@ (801a6b8 <HAL_DMA_Abort_IT+0x3b8>)
 801a5e0:	4293      	cmp	r3, r2
 801a5e2:	d05e      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	4a34      	ldr	r2, [pc, #208]	@ (801a6bc <HAL_DMA_Abort_IT+0x3bc>)
 801a5ea:	4293      	cmp	r3, r2
 801a5ec:	d059      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	681b      	ldr	r3, [r3, #0]
 801a5f2:	4a33      	ldr	r2, [pc, #204]	@ (801a6c0 <HAL_DMA_Abort_IT+0x3c0>)
 801a5f4:	4293      	cmp	r3, r2
 801a5f6:	d054      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	4a31      	ldr	r2, [pc, #196]	@ (801a6c4 <HAL_DMA_Abort_IT+0x3c4>)
 801a5fe:	4293      	cmp	r3, r2
 801a600:	d04f      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	4a30      	ldr	r2, [pc, #192]	@ (801a6c8 <HAL_DMA_Abort_IT+0x3c8>)
 801a608:	4293      	cmp	r3, r2
 801a60a:	d04a      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	681b      	ldr	r3, [r3, #0]
 801a610:	4a2e      	ldr	r2, [pc, #184]	@ (801a6cc <HAL_DMA_Abort_IT+0x3cc>)
 801a612:	4293      	cmp	r3, r2
 801a614:	d045      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	4a2d      	ldr	r2, [pc, #180]	@ (801a6d0 <HAL_DMA_Abort_IT+0x3d0>)
 801a61c:	4293      	cmp	r3, r2
 801a61e:	d040      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	4a2b      	ldr	r2, [pc, #172]	@ (801a6d4 <HAL_DMA_Abort_IT+0x3d4>)
 801a626:	4293      	cmp	r3, r2
 801a628:	d03b      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	4a2a      	ldr	r2, [pc, #168]	@ (801a6d8 <HAL_DMA_Abort_IT+0x3d8>)
 801a630:	4293      	cmp	r3, r2
 801a632:	d036      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	4a28      	ldr	r2, [pc, #160]	@ (801a6dc <HAL_DMA_Abort_IT+0x3dc>)
 801a63a:	4293      	cmp	r3, r2
 801a63c:	d031      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	4a27      	ldr	r2, [pc, #156]	@ (801a6e0 <HAL_DMA_Abort_IT+0x3e0>)
 801a644:	4293      	cmp	r3, r2
 801a646:	d02c      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	4a25      	ldr	r2, [pc, #148]	@ (801a6e4 <HAL_DMA_Abort_IT+0x3e4>)
 801a64e:	4293      	cmp	r3, r2
 801a650:	d027      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	4a24      	ldr	r2, [pc, #144]	@ (801a6e8 <HAL_DMA_Abort_IT+0x3e8>)
 801a658:	4293      	cmp	r3, r2
 801a65a:	d022      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	4a22      	ldr	r2, [pc, #136]	@ (801a6ec <HAL_DMA_Abort_IT+0x3ec>)
 801a662:	4293      	cmp	r3, r2
 801a664:	d01d      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	4a21      	ldr	r2, [pc, #132]	@ (801a6f0 <HAL_DMA_Abort_IT+0x3f0>)
 801a66c:	4293      	cmp	r3, r2
 801a66e:	d018      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	681b      	ldr	r3, [r3, #0]
 801a674:	4a1f      	ldr	r2, [pc, #124]	@ (801a6f4 <HAL_DMA_Abort_IT+0x3f4>)
 801a676:	4293      	cmp	r3, r2
 801a678:	d013      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	4a1e      	ldr	r2, [pc, #120]	@ (801a6f8 <HAL_DMA_Abort_IT+0x3f8>)
 801a680:	4293      	cmp	r3, r2
 801a682:	d00e      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	681b      	ldr	r3, [r3, #0]
 801a688:	4a1c      	ldr	r2, [pc, #112]	@ (801a6fc <HAL_DMA_Abort_IT+0x3fc>)
 801a68a:	4293      	cmp	r3, r2
 801a68c:	d009      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	4a1b      	ldr	r2, [pc, #108]	@ (801a700 <HAL_DMA_Abort_IT+0x400>)
 801a694:	4293      	cmp	r3, r2
 801a696:	d004      	beq.n	801a6a2 <HAL_DMA_Abort_IT+0x3a2>
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	4a19      	ldr	r2, [pc, #100]	@ (801a704 <HAL_DMA_Abort_IT+0x404>)
 801a69e:	4293      	cmp	r3, r2
 801a6a0:	d132      	bne.n	801a708 <HAL_DMA_Abort_IT+0x408>
 801a6a2:	2301      	movs	r3, #1
 801a6a4:	e031      	b.n	801a70a <HAL_DMA_Abort_IT+0x40a>
 801a6a6:	bf00      	nop
 801a6a8:	40020010 	.word	0x40020010
 801a6ac:	40020028 	.word	0x40020028
 801a6b0:	40020040 	.word	0x40020040
 801a6b4:	40020058 	.word	0x40020058
 801a6b8:	40020070 	.word	0x40020070
 801a6bc:	40020088 	.word	0x40020088
 801a6c0:	400200a0 	.word	0x400200a0
 801a6c4:	400200b8 	.word	0x400200b8
 801a6c8:	40020410 	.word	0x40020410
 801a6cc:	40020428 	.word	0x40020428
 801a6d0:	40020440 	.word	0x40020440
 801a6d4:	40020458 	.word	0x40020458
 801a6d8:	40020470 	.word	0x40020470
 801a6dc:	40020488 	.word	0x40020488
 801a6e0:	400204a0 	.word	0x400204a0
 801a6e4:	400204b8 	.word	0x400204b8
 801a6e8:	58025408 	.word	0x58025408
 801a6ec:	5802541c 	.word	0x5802541c
 801a6f0:	58025430 	.word	0x58025430
 801a6f4:	58025444 	.word	0x58025444
 801a6f8:	58025458 	.word	0x58025458
 801a6fc:	5802546c 	.word	0x5802546c
 801a700:	58025480 	.word	0x58025480
 801a704:	58025494 	.word	0x58025494
 801a708:	2300      	movs	r3, #0
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d028      	beq.n	801a760 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a712:	681a      	ldr	r2, [r3, #0]
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a718:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801a71c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a722:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a728:	f003 031f 	and.w	r3, r3, #31
 801a72c:	2201      	movs	r2, #1
 801a72e:	409a      	lsls	r2, r3
 801a730:	68fb      	ldr	r3, [r7, #12]
 801a732:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a738:	687a      	ldr	r2, [r7, #4]
 801a73a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801a73c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a742:	2b00      	cmp	r3, #0
 801a744:	d00c      	beq.n	801a760 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a74a:	681a      	ldr	r2, [r3, #0]
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a750:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801a754:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a75a:	687a      	ldr	r2, [r7, #4]
 801a75c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801a75e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	2201      	movs	r2, #1
 801a764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	2200      	movs	r2, #0
 801a76c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a774:	2b00      	cmp	r3, #0
 801a776:	d003      	beq.n	801a780 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a77c:	6878      	ldr	r0, [r7, #4]
 801a77e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 801a780:	2300      	movs	r3, #0
}
 801a782:	4618      	mov	r0, r3
 801a784:	3710      	adds	r7, #16
 801a786:	46bd      	mov	sp, r7
 801a788:	bd80      	pop	{r7, pc}
 801a78a:	bf00      	nop

0801a78c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801a78c:	b580      	push	{r7, lr}
 801a78e:	b08a      	sub	sp, #40	@ 0x28
 801a790:	af00      	add	r7, sp, #0
 801a792:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 801a794:	2300      	movs	r3, #0
 801a796:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 801a798:	4b67      	ldr	r3, [pc, #412]	@ (801a938 <HAL_DMA_IRQHandler+0x1ac>)
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	4a67      	ldr	r2, [pc, #412]	@ (801a93c <HAL_DMA_IRQHandler+0x1b0>)
 801a79e:	fba2 2303 	umull	r2, r3, r2, r3
 801a7a2:	0a9b      	lsrs	r3, r3, #10
 801a7a4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a7aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a7b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 801a7b2:	6a3b      	ldr	r3, [r7, #32]
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 801a7b8:	69fb      	ldr	r3, [r7, #28]
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	4a5f      	ldr	r2, [pc, #380]	@ (801a940 <HAL_DMA_IRQHandler+0x1b4>)
 801a7c4:	4293      	cmp	r3, r2
 801a7c6:	d04a      	beq.n	801a85e <HAL_DMA_IRQHandler+0xd2>
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	4a5d      	ldr	r2, [pc, #372]	@ (801a944 <HAL_DMA_IRQHandler+0x1b8>)
 801a7ce:	4293      	cmp	r3, r2
 801a7d0:	d045      	beq.n	801a85e <HAL_DMA_IRQHandler+0xd2>
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	4a5c      	ldr	r2, [pc, #368]	@ (801a948 <HAL_DMA_IRQHandler+0x1bc>)
 801a7d8:	4293      	cmp	r3, r2
 801a7da:	d040      	beq.n	801a85e <HAL_DMA_IRQHandler+0xd2>
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	681b      	ldr	r3, [r3, #0]
 801a7e0:	4a5a      	ldr	r2, [pc, #360]	@ (801a94c <HAL_DMA_IRQHandler+0x1c0>)
 801a7e2:	4293      	cmp	r3, r2
 801a7e4:	d03b      	beq.n	801a85e <HAL_DMA_IRQHandler+0xd2>
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	4a59      	ldr	r2, [pc, #356]	@ (801a950 <HAL_DMA_IRQHandler+0x1c4>)
 801a7ec:	4293      	cmp	r3, r2
 801a7ee:	d036      	beq.n	801a85e <HAL_DMA_IRQHandler+0xd2>
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	4a57      	ldr	r2, [pc, #348]	@ (801a954 <HAL_DMA_IRQHandler+0x1c8>)
 801a7f6:	4293      	cmp	r3, r2
 801a7f8:	d031      	beq.n	801a85e <HAL_DMA_IRQHandler+0xd2>
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	681b      	ldr	r3, [r3, #0]
 801a7fe:	4a56      	ldr	r2, [pc, #344]	@ (801a958 <HAL_DMA_IRQHandler+0x1cc>)
 801a800:	4293      	cmp	r3, r2
 801a802:	d02c      	beq.n	801a85e <HAL_DMA_IRQHandler+0xd2>
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	4a54      	ldr	r2, [pc, #336]	@ (801a95c <HAL_DMA_IRQHandler+0x1d0>)
 801a80a:	4293      	cmp	r3, r2
 801a80c:	d027      	beq.n	801a85e <HAL_DMA_IRQHandler+0xd2>
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	681b      	ldr	r3, [r3, #0]
 801a812:	4a53      	ldr	r2, [pc, #332]	@ (801a960 <HAL_DMA_IRQHandler+0x1d4>)
 801a814:	4293      	cmp	r3, r2
 801a816:	d022      	beq.n	801a85e <HAL_DMA_IRQHandler+0xd2>
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	4a51      	ldr	r2, [pc, #324]	@ (801a964 <HAL_DMA_IRQHandler+0x1d8>)
 801a81e:	4293      	cmp	r3, r2
 801a820:	d01d      	beq.n	801a85e <HAL_DMA_IRQHandler+0xd2>
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	4a50      	ldr	r2, [pc, #320]	@ (801a968 <HAL_DMA_IRQHandler+0x1dc>)
 801a828:	4293      	cmp	r3, r2
 801a82a:	d018      	beq.n	801a85e <HAL_DMA_IRQHandler+0xd2>
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	4a4e      	ldr	r2, [pc, #312]	@ (801a96c <HAL_DMA_IRQHandler+0x1e0>)
 801a832:	4293      	cmp	r3, r2
 801a834:	d013      	beq.n	801a85e <HAL_DMA_IRQHandler+0xd2>
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	4a4d      	ldr	r2, [pc, #308]	@ (801a970 <HAL_DMA_IRQHandler+0x1e4>)
 801a83c:	4293      	cmp	r3, r2
 801a83e:	d00e      	beq.n	801a85e <HAL_DMA_IRQHandler+0xd2>
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	4a4b      	ldr	r2, [pc, #300]	@ (801a974 <HAL_DMA_IRQHandler+0x1e8>)
 801a846:	4293      	cmp	r3, r2
 801a848:	d009      	beq.n	801a85e <HAL_DMA_IRQHandler+0xd2>
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	4a4a      	ldr	r2, [pc, #296]	@ (801a978 <HAL_DMA_IRQHandler+0x1ec>)
 801a850:	4293      	cmp	r3, r2
 801a852:	d004      	beq.n	801a85e <HAL_DMA_IRQHandler+0xd2>
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	4a48      	ldr	r2, [pc, #288]	@ (801a97c <HAL_DMA_IRQHandler+0x1f0>)
 801a85a:	4293      	cmp	r3, r2
 801a85c:	d101      	bne.n	801a862 <HAL_DMA_IRQHandler+0xd6>
 801a85e:	2301      	movs	r3, #1
 801a860:	e000      	b.n	801a864 <HAL_DMA_IRQHandler+0xd8>
 801a862:	2300      	movs	r3, #0
 801a864:	2b00      	cmp	r3, #0
 801a866:	f000 842b 	beq.w	801b0c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a86e:	f003 031f 	and.w	r3, r3, #31
 801a872:	2208      	movs	r2, #8
 801a874:	409a      	lsls	r2, r3
 801a876:	69bb      	ldr	r3, [r7, #24]
 801a878:	4013      	ands	r3, r2
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	f000 80a2 	beq.w	801a9c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	4a2e      	ldr	r2, [pc, #184]	@ (801a940 <HAL_DMA_IRQHandler+0x1b4>)
 801a886:	4293      	cmp	r3, r2
 801a888:	d04a      	beq.n	801a920 <HAL_DMA_IRQHandler+0x194>
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	4a2d      	ldr	r2, [pc, #180]	@ (801a944 <HAL_DMA_IRQHandler+0x1b8>)
 801a890:	4293      	cmp	r3, r2
 801a892:	d045      	beq.n	801a920 <HAL_DMA_IRQHandler+0x194>
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	4a2b      	ldr	r2, [pc, #172]	@ (801a948 <HAL_DMA_IRQHandler+0x1bc>)
 801a89a:	4293      	cmp	r3, r2
 801a89c:	d040      	beq.n	801a920 <HAL_DMA_IRQHandler+0x194>
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	4a2a      	ldr	r2, [pc, #168]	@ (801a94c <HAL_DMA_IRQHandler+0x1c0>)
 801a8a4:	4293      	cmp	r3, r2
 801a8a6:	d03b      	beq.n	801a920 <HAL_DMA_IRQHandler+0x194>
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	4a28      	ldr	r2, [pc, #160]	@ (801a950 <HAL_DMA_IRQHandler+0x1c4>)
 801a8ae:	4293      	cmp	r3, r2
 801a8b0:	d036      	beq.n	801a920 <HAL_DMA_IRQHandler+0x194>
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	4a27      	ldr	r2, [pc, #156]	@ (801a954 <HAL_DMA_IRQHandler+0x1c8>)
 801a8b8:	4293      	cmp	r3, r2
 801a8ba:	d031      	beq.n	801a920 <HAL_DMA_IRQHandler+0x194>
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	4a25      	ldr	r2, [pc, #148]	@ (801a958 <HAL_DMA_IRQHandler+0x1cc>)
 801a8c2:	4293      	cmp	r3, r2
 801a8c4:	d02c      	beq.n	801a920 <HAL_DMA_IRQHandler+0x194>
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	4a24      	ldr	r2, [pc, #144]	@ (801a95c <HAL_DMA_IRQHandler+0x1d0>)
 801a8cc:	4293      	cmp	r3, r2
 801a8ce:	d027      	beq.n	801a920 <HAL_DMA_IRQHandler+0x194>
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	4a22      	ldr	r2, [pc, #136]	@ (801a960 <HAL_DMA_IRQHandler+0x1d4>)
 801a8d6:	4293      	cmp	r3, r2
 801a8d8:	d022      	beq.n	801a920 <HAL_DMA_IRQHandler+0x194>
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	4a21      	ldr	r2, [pc, #132]	@ (801a964 <HAL_DMA_IRQHandler+0x1d8>)
 801a8e0:	4293      	cmp	r3, r2
 801a8e2:	d01d      	beq.n	801a920 <HAL_DMA_IRQHandler+0x194>
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	4a1f      	ldr	r2, [pc, #124]	@ (801a968 <HAL_DMA_IRQHandler+0x1dc>)
 801a8ea:	4293      	cmp	r3, r2
 801a8ec:	d018      	beq.n	801a920 <HAL_DMA_IRQHandler+0x194>
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	4a1e      	ldr	r2, [pc, #120]	@ (801a96c <HAL_DMA_IRQHandler+0x1e0>)
 801a8f4:	4293      	cmp	r3, r2
 801a8f6:	d013      	beq.n	801a920 <HAL_DMA_IRQHandler+0x194>
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	4a1c      	ldr	r2, [pc, #112]	@ (801a970 <HAL_DMA_IRQHandler+0x1e4>)
 801a8fe:	4293      	cmp	r3, r2
 801a900:	d00e      	beq.n	801a920 <HAL_DMA_IRQHandler+0x194>
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	4a1b      	ldr	r2, [pc, #108]	@ (801a974 <HAL_DMA_IRQHandler+0x1e8>)
 801a908:	4293      	cmp	r3, r2
 801a90a:	d009      	beq.n	801a920 <HAL_DMA_IRQHandler+0x194>
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	4a19      	ldr	r2, [pc, #100]	@ (801a978 <HAL_DMA_IRQHandler+0x1ec>)
 801a912:	4293      	cmp	r3, r2
 801a914:	d004      	beq.n	801a920 <HAL_DMA_IRQHandler+0x194>
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	4a18      	ldr	r2, [pc, #96]	@ (801a97c <HAL_DMA_IRQHandler+0x1f0>)
 801a91c:	4293      	cmp	r3, r2
 801a91e:	d12f      	bne.n	801a980 <HAL_DMA_IRQHandler+0x1f4>
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	f003 0304 	and.w	r3, r3, #4
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	bf14      	ite	ne
 801a92e:	2301      	movne	r3, #1
 801a930:	2300      	moveq	r3, #0
 801a932:	b2db      	uxtb	r3, r3
 801a934:	e02e      	b.n	801a994 <HAL_DMA_IRQHandler+0x208>
 801a936:	bf00      	nop
 801a938:	20000000 	.word	0x20000000
 801a93c:	1b4e81b5 	.word	0x1b4e81b5
 801a940:	40020010 	.word	0x40020010
 801a944:	40020028 	.word	0x40020028
 801a948:	40020040 	.word	0x40020040
 801a94c:	40020058 	.word	0x40020058
 801a950:	40020070 	.word	0x40020070
 801a954:	40020088 	.word	0x40020088
 801a958:	400200a0 	.word	0x400200a0
 801a95c:	400200b8 	.word	0x400200b8
 801a960:	40020410 	.word	0x40020410
 801a964:	40020428 	.word	0x40020428
 801a968:	40020440 	.word	0x40020440
 801a96c:	40020458 	.word	0x40020458
 801a970:	40020470 	.word	0x40020470
 801a974:	40020488 	.word	0x40020488
 801a978:	400204a0 	.word	0x400204a0
 801a97c:	400204b8 	.word	0x400204b8
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	f003 0308 	and.w	r3, r3, #8
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	bf14      	ite	ne
 801a98e:	2301      	movne	r3, #1
 801a990:	2300      	moveq	r3, #0
 801a992:	b2db      	uxtb	r3, r3
 801a994:	2b00      	cmp	r3, #0
 801a996:	d015      	beq.n	801a9c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	681a      	ldr	r2, [r3, #0]
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	f022 0204 	bic.w	r2, r2, #4
 801a9a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a9ac:	f003 031f 	and.w	r3, r3, #31
 801a9b0:	2208      	movs	r2, #8
 801a9b2:	409a      	lsls	r2, r3
 801a9b4:	6a3b      	ldr	r3, [r7, #32]
 801a9b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a9bc:	f043 0201 	orr.w	r2, r3, #1
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a9c8:	f003 031f 	and.w	r3, r3, #31
 801a9cc:	69ba      	ldr	r2, [r7, #24]
 801a9ce:	fa22 f303 	lsr.w	r3, r2, r3
 801a9d2:	f003 0301 	and.w	r3, r3, #1
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d06e      	beq.n	801aab8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	681b      	ldr	r3, [r3, #0]
 801a9de:	4a69      	ldr	r2, [pc, #420]	@ (801ab84 <HAL_DMA_IRQHandler+0x3f8>)
 801a9e0:	4293      	cmp	r3, r2
 801a9e2:	d04a      	beq.n	801aa7a <HAL_DMA_IRQHandler+0x2ee>
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	4a67      	ldr	r2, [pc, #412]	@ (801ab88 <HAL_DMA_IRQHandler+0x3fc>)
 801a9ea:	4293      	cmp	r3, r2
 801a9ec:	d045      	beq.n	801aa7a <HAL_DMA_IRQHandler+0x2ee>
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	4a66      	ldr	r2, [pc, #408]	@ (801ab8c <HAL_DMA_IRQHandler+0x400>)
 801a9f4:	4293      	cmp	r3, r2
 801a9f6:	d040      	beq.n	801aa7a <HAL_DMA_IRQHandler+0x2ee>
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	4a64      	ldr	r2, [pc, #400]	@ (801ab90 <HAL_DMA_IRQHandler+0x404>)
 801a9fe:	4293      	cmp	r3, r2
 801aa00:	d03b      	beq.n	801aa7a <HAL_DMA_IRQHandler+0x2ee>
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	4a63      	ldr	r2, [pc, #396]	@ (801ab94 <HAL_DMA_IRQHandler+0x408>)
 801aa08:	4293      	cmp	r3, r2
 801aa0a:	d036      	beq.n	801aa7a <HAL_DMA_IRQHandler+0x2ee>
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	4a61      	ldr	r2, [pc, #388]	@ (801ab98 <HAL_DMA_IRQHandler+0x40c>)
 801aa12:	4293      	cmp	r3, r2
 801aa14:	d031      	beq.n	801aa7a <HAL_DMA_IRQHandler+0x2ee>
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	681b      	ldr	r3, [r3, #0]
 801aa1a:	4a60      	ldr	r2, [pc, #384]	@ (801ab9c <HAL_DMA_IRQHandler+0x410>)
 801aa1c:	4293      	cmp	r3, r2
 801aa1e:	d02c      	beq.n	801aa7a <HAL_DMA_IRQHandler+0x2ee>
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	681b      	ldr	r3, [r3, #0]
 801aa24:	4a5e      	ldr	r2, [pc, #376]	@ (801aba0 <HAL_DMA_IRQHandler+0x414>)
 801aa26:	4293      	cmp	r3, r2
 801aa28:	d027      	beq.n	801aa7a <HAL_DMA_IRQHandler+0x2ee>
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	4a5d      	ldr	r2, [pc, #372]	@ (801aba4 <HAL_DMA_IRQHandler+0x418>)
 801aa30:	4293      	cmp	r3, r2
 801aa32:	d022      	beq.n	801aa7a <HAL_DMA_IRQHandler+0x2ee>
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	4a5b      	ldr	r2, [pc, #364]	@ (801aba8 <HAL_DMA_IRQHandler+0x41c>)
 801aa3a:	4293      	cmp	r3, r2
 801aa3c:	d01d      	beq.n	801aa7a <HAL_DMA_IRQHandler+0x2ee>
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	4a5a      	ldr	r2, [pc, #360]	@ (801abac <HAL_DMA_IRQHandler+0x420>)
 801aa44:	4293      	cmp	r3, r2
 801aa46:	d018      	beq.n	801aa7a <HAL_DMA_IRQHandler+0x2ee>
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	681b      	ldr	r3, [r3, #0]
 801aa4c:	4a58      	ldr	r2, [pc, #352]	@ (801abb0 <HAL_DMA_IRQHandler+0x424>)
 801aa4e:	4293      	cmp	r3, r2
 801aa50:	d013      	beq.n	801aa7a <HAL_DMA_IRQHandler+0x2ee>
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	4a57      	ldr	r2, [pc, #348]	@ (801abb4 <HAL_DMA_IRQHandler+0x428>)
 801aa58:	4293      	cmp	r3, r2
 801aa5a:	d00e      	beq.n	801aa7a <HAL_DMA_IRQHandler+0x2ee>
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	4a55      	ldr	r2, [pc, #340]	@ (801abb8 <HAL_DMA_IRQHandler+0x42c>)
 801aa62:	4293      	cmp	r3, r2
 801aa64:	d009      	beq.n	801aa7a <HAL_DMA_IRQHandler+0x2ee>
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	681b      	ldr	r3, [r3, #0]
 801aa6a:	4a54      	ldr	r2, [pc, #336]	@ (801abbc <HAL_DMA_IRQHandler+0x430>)
 801aa6c:	4293      	cmp	r3, r2
 801aa6e:	d004      	beq.n	801aa7a <HAL_DMA_IRQHandler+0x2ee>
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	4a52      	ldr	r2, [pc, #328]	@ (801abc0 <HAL_DMA_IRQHandler+0x434>)
 801aa76:	4293      	cmp	r3, r2
 801aa78:	d10a      	bne.n	801aa90 <HAL_DMA_IRQHandler+0x304>
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	695b      	ldr	r3, [r3, #20]
 801aa80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	bf14      	ite	ne
 801aa88:	2301      	movne	r3, #1
 801aa8a:	2300      	moveq	r3, #0
 801aa8c:	b2db      	uxtb	r3, r3
 801aa8e:	e003      	b.n	801aa98 <HAL_DMA_IRQHandler+0x30c>
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	681b      	ldr	r3, [r3, #0]
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	2300      	movs	r3, #0
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d00d      	beq.n	801aab8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aaa0:	f003 031f 	and.w	r3, r3, #31
 801aaa4:	2201      	movs	r2, #1
 801aaa6:	409a      	lsls	r2, r3
 801aaa8:	6a3b      	ldr	r3, [r7, #32]
 801aaaa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801aab0:	f043 0202 	orr.w	r2, r3, #2
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aabc:	f003 031f 	and.w	r3, r3, #31
 801aac0:	2204      	movs	r2, #4
 801aac2:	409a      	lsls	r2, r3
 801aac4:	69bb      	ldr	r3, [r7, #24]
 801aac6:	4013      	ands	r3, r2
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	f000 808f 	beq.w	801abec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	681b      	ldr	r3, [r3, #0]
 801aad2:	4a2c      	ldr	r2, [pc, #176]	@ (801ab84 <HAL_DMA_IRQHandler+0x3f8>)
 801aad4:	4293      	cmp	r3, r2
 801aad6:	d04a      	beq.n	801ab6e <HAL_DMA_IRQHandler+0x3e2>
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	681b      	ldr	r3, [r3, #0]
 801aadc:	4a2a      	ldr	r2, [pc, #168]	@ (801ab88 <HAL_DMA_IRQHandler+0x3fc>)
 801aade:	4293      	cmp	r3, r2
 801aae0:	d045      	beq.n	801ab6e <HAL_DMA_IRQHandler+0x3e2>
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	4a29      	ldr	r2, [pc, #164]	@ (801ab8c <HAL_DMA_IRQHandler+0x400>)
 801aae8:	4293      	cmp	r3, r2
 801aaea:	d040      	beq.n	801ab6e <HAL_DMA_IRQHandler+0x3e2>
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	681b      	ldr	r3, [r3, #0]
 801aaf0:	4a27      	ldr	r2, [pc, #156]	@ (801ab90 <HAL_DMA_IRQHandler+0x404>)
 801aaf2:	4293      	cmp	r3, r2
 801aaf4:	d03b      	beq.n	801ab6e <HAL_DMA_IRQHandler+0x3e2>
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	4a26      	ldr	r2, [pc, #152]	@ (801ab94 <HAL_DMA_IRQHandler+0x408>)
 801aafc:	4293      	cmp	r3, r2
 801aafe:	d036      	beq.n	801ab6e <HAL_DMA_IRQHandler+0x3e2>
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	4a24      	ldr	r2, [pc, #144]	@ (801ab98 <HAL_DMA_IRQHandler+0x40c>)
 801ab06:	4293      	cmp	r3, r2
 801ab08:	d031      	beq.n	801ab6e <HAL_DMA_IRQHandler+0x3e2>
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	4a23      	ldr	r2, [pc, #140]	@ (801ab9c <HAL_DMA_IRQHandler+0x410>)
 801ab10:	4293      	cmp	r3, r2
 801ab12:	d02c      	beq.n	801ab6e <HAL_DMA_IRQHandler+0x3e2>
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	4a21      	ldr	r2, [pc, #132]	@ (801aba0 <HAL_DMA_IRQHandler+0x414>)
 801ab1a:	4293      	cmp	r3, r2
 801ab1c:	d027      	beq.n	801ab6e <HAL_DMA_IRQHandler+0x3e2>
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	4a20      	ldr	r2, [pc, #128]	@ (801aba4 <HAL_DMA_IRQHandler+0x418>)
 801ab24:	4293      	cmp	r3, r2
 801ab26:	d022      	beq.n	801ab6e <HAL_DMA_IRQHandler+0x3e2>
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	4a1e      	ldr	r2, [pc, #120]	@ (801aba8 <HAL_DMA_IRQHandler+0x41c>)
 801ab2e:	4293      	cmp	r3, r2
 801ab30:	d01d      	beq.n	801ab6e <HAL_DMA_IRQHandler+0x3e2>
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	4a1d      	ldr	r2, [pc, #116]	@ (801abac <HAL_DMA_IRQHandler+0x420>)
 801ab38:	4293      	cmp	r3, r2
 801ab3a:	d018      	beq.n	801ab6e <HAL_DMA_IRQHandler+0x3e2>
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	681b      	ldr	r3, [r3, #0]
 801ab40:	4a1b      	ldr	r2, [pc, #108]	@ (801abb0 <HAL_DMA_IRQHandler+0x424>)
 801ab42:	4293      	cmp	r3, r2
 801ab44:	d013      	beq.n	801ab6e <HAL_DMA_IRQHandler+0x3e2>
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	4a1a      	ldr	r2, [pc, #104]	@ (801abb4 <HAL_DMA_IRQHandler+0x428>)
 801ab4c:	4293      	cmp	r3, r2
 801ab4e:	d00e      	beq.n	801ab6e <HAL_DMA_IRQHandler+0x3e2>
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	4a18      	ldr	r2, [pc, #96]	@ (801abb8 <HAL_DMA_IRQHandler+0x42c>)
 801ab56:	4293      	cmp	r3, r2
 801ab58:	d009      	beq.n	801ab6e <HAL_DMA_IRQHandler+0x3e2>
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	4a17      	ldr	r2, [pc, #92]	@ (801abbc <HAL_DMA_IRQHandler+0x430>)
 801ab60:	4293      	cmp	r3, r2
 801ab62:	d004      	beq.n	801ab6e <HAL_DMA_IRQHandler+0x3e2>
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	4a15      	ldr	r2, [pc, #84]	@ (801abc0 <HAL_DMA_IRQHandler+0x434>)
 801ab6a:	4293      	cmp	r3, r2
 801ab6c:	d12a      	bne.n	801abc4 <HAL_DMA_IRQHandler+0x438>
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	f003 0302 	and.w	r3, r3, #2
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	bf14      	ite	ne
 801ab7c:	2301      	movne	r3, #1
 801ab7e:	2300      	moveq	r3, #0
 801ab80:	b2db      	uxtb	r3, r3
 801ab82:	e023      	b.n	801abcc <HAL_DMA_IRQHandler+0x440>
 801ab84:	40020010 	.word	0x40020010
 801ab88:	40020028 	.word	0x40020028
 801ab8c:	40020040 	.word	0x40020040
 801ab90:	40020058 	.word	0x40020058
 801ab94:	40020070 	.word	0x40020070
 801ab98:	40020088 	.word	0x40020088
 801ab9c:	400200a0 	.word	0x400200a0
 801aba0:	400200b8 	.word	0x400200b8
 801aba4:	40020410 	.word	0x40020410
 801aba8:	40020428 	.word	0x40020428
 801abac:	40020440 	.word	0x40020440
 801abb0:	40020458 	.word	0x40020458
 801abb4:	40020470 	.word	0x40020470
 801abb8:	40020488 	.word	0x40020488
 801abbc:	400204a0 	.word	0x400204a0
 801abc0:	400204b8 	.word	0x400204b8
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	2300      	movs	r3, #0
 801abcc:	2b00      	cmp	r3, #0
 801abce:	d00d      	beq.n	801abec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801abd4:	f003 031f 	and.w	r3, r3, #31
 801abd8:	2204      	movs	r2, #4
 801abda:	409a      	lsls	r2, r3
 801abdc:	6a3b      	ldr	r3, [r7, #32]
 801abde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801abe4:	f043 0204 	orr.w	r2, r3, #4
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801abf0:	f003 031f 	and.w	r3, r3, #31
 801abf4:	2210      	movs	r2, #16
 801abf6:	409a      	lsls	r2, r3
 801abf8:	69bb      	ldr	r3, [r7, #24]
 801abfa:	4013      	ands	r3, r2
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	f000 80a6 	beq.w	801ad4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	4a85      	ldr	r2, [pc, #532]	@ (801ae1c <HAL_DMA_IRQHandler+0x690>)
 801ac08:	4293      	cmp	r3, r2
 801ac0a:	d04a      	beq.n	801aca2 <HAL_DMA_IRQHandler+0x516>
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	681b      	ldr	r3, [r3, #0]
 801ac10:	4a83      	ldr	r2, [pc, #524]	@ (801ae20 <HAL_DMA_IRQHandler+0x694>)
 801ac12:	4293      	cmp	r3, r2
 801ac14:	d045      	beq.n	801aca2 <HAL_DMA_IRQHandler+0x516>
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	4a82      	ldr	r2, [pc, #520]	@ (801ae24 <HAL_DMA_IRQHandler+0x698>)
 801ac1c:	4293      	cmp	r3, r2
 801ac1e:	d040      	beq.n	801aca2 <HAL_DMA_IRQHandler+0x516>
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	4a80      	ldr	r2, [pc, #512]	@ (801ae28 <HAL_DMA_IRQHandler+0x69c>)
 801ac26:	4293      	cmp	r3, r2
 801ac28:	d03b      	beq.n	801aca2 <HAL_DMA_IRQHandler+0x516>
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	4a7f      	ldr	r2, [pc, #508]	@ (801ae2c <HAL_DMA_IRQHandler+0x6a0>)
 801ac30:	4293      	cmp	r3, r2
 801ac32:	d036      	beq.n	801aca2 <HAL_DMA_IRQHandler+0x516>
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	681b      	ldr	r3, [r3, #0]
 801ac38:	4a7d      	ldr	r2, [pc, #500]	@ (801ae30 <HAL_DMA_IRQHandler+0x6a4>)
 801ac3a:	4293      	cmp	r3, r2
 801ac3c:	d031      	beq.n	801aca2 <HAL_DMA_IRQHandler+0x516>
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	4a7c      	ldr	r2, [pc, #496]	@ (801ae34 <HAL_DMA_IRQHandler+0x6a8>)
 801ac44:	4293      	cmp	r3, r2
 801ac46:	d02c      	beq.n	801aca2 <HAL_DMA_IRQHandler+0x516>
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	4a7a      	ldr	r2, [pc, #488]	@ (801ae38 <HAL_DMA_IRQHandler+0x6ac>)
 801ac4e:	4293      	cmp	r3, r2
 801ac50:	d027      	beq.n	801aca2 <HAL_DMA_IRQHandler+0x516>
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	4a79      	ldr	r2, [pc, #484]	@ (801ae3c <HAL_DMA_IRQHandler+0x6b0>)
 801ac58:	4293      	cmp	r3, r2
 801ac5a:	d022      	beq.n	801aca2 <HAL_DMA_IRQHandler+0x516>
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	4a77      	ldr	r2, [pc, #476]	@ (801ae40 <HAL_DMA_IRQHandler+0x6b4>)
 801ac62:	4293      	cmp	r3, r2
 801ac64:	d01d      	beq.n	801aca2 <HAL_DMA_IRQHandler+0x516>
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	4a76      	ldr	r2, [pc, #472]	@ (801ae44 <HAL_DMA_IRQHandler+0x6b8>)
 801ac6c:	4293      	cmp	r3, r2
 801ac6e:	d018      	beq.n	801aca2 <HAL_DMA_IRQHandler+0x516>
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	4a74      	ldr	r2, [pc, #464]	@ (801ae48 <HAL_DMA_IRQHandler+0x6bc>)
 801ac76:	4293      	cmp	r3, r2
 801ac78:	d013      	beq.n	801aca2 <HAL_DMA_IRQHandler+0x516>
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	4a73      	ldr	r2, [pc, #460]	@ (801ae4c <HAL_DMA_IRQHandler+0x6c0>)
 801ac80:	4293      	cmp	r3, r2
 801ac82:	d00e      	beq.n	801aca2 <HAL_DMA_IRQHandler+0x516>
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	4a71      	ldr	r2, [pc, #452]	@ (801ae50 <HAL_DMA_IRQHandler+0x6c4>)
 801ac8a:	4293      	cmp	r3, r2
 801ac8c:	d009      	beq.n	801aca2 <HAL_DMA_IRQHandler+0x516>
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	4a70      	ldr	r2, [pc, #448]	@ (801ae54 <HAL_DMA_IRQHandler+0x6c8>)
 801ac94:	4293      	cmp	r3, r2
 801ac96:	d004      	beq.n	801aca2 <HAL_DMA_IRQHandler+0x516>
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	4a6e      	ldr	r2, [pc, #440]	@ (801ae58 <HAL_DMA_IRQHandler+0x6cc>)
 801ac9e:	4293      	cmp	r3, r2
 801aca0:	d10a      	bne.n	801acb8 <HAL_DMA_IRQHandler+0x52c>
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	f003 0308 	and.w	r3, r3, #8
 801acac:	2b00      	cmp	r3, #0
 801acae:	bf14      	ite	ne
 801acb0:	2301      	movne	r3, #1
 801acb2:	2300      	moveq	r3, #0
 801acb4:	b2db      	uxtb	r3, r3
 801acb6:	e009      	b.n	801accc <HAL_DMA_IRQHandler+0x540>
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	681b      	ldr	r3, [r3, #0]
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	f003 0304 	and.w	r3, r3, #4
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	bf14      	ite	ne
 801acc6:	2301      	movne	r3, #1
 801acc8:	2300      	moveq	r3, #0
 801acca:	b2db      	uxtb	r3, r3
 801accc:	2b00      	cmp	r3, #0
 801acce:	d03e      	beq.n	801ad4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801acd4:	f003 031f 	and.w	r3, r3, #31
 801acd8:	2210      	movs	r2, #16
 801acda:	409a      	lsls	r2, r3
 801acdc:	6a3b      	ldr	r3, [r7, #32]
 801acde:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	681b      	ldr	r3, [r3, #0]
 801ace6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801acea:	2b00      	cmp	r3, #0
 801acec:	d018      	beq.n	801ad20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	d108      	bne.n	801ad0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d024      	beq.n	801ad4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ad08:	6878      	ldr	r0, [r7, #4]
 801ad0a:	4798      	blx	r3
 801ad0c:	e01f      	b.n	801ad4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d01b      	beq.n	801ad4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ad1a:	6878      	ldr	r0, [r7, #4]
 801ad1c:	4798      	blx	r3
 801ad1e:	e016      	b.n	801ad4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	681b      	ldr	r3, [r3, #0]
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d107      	bne.n	801ad3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	681b      	ldr	r3, [r3, #0]
 801ad32:	681a      	ldr	r2, [r3, #0]
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	f022 0208 	bic.w	r2, r2, #8
 801ad3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d003      	beq.n	801ad4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ad4a:	6878      	ldr	r0, [r7, #4]
 801ad4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ad52:	f003 031f 	and.w	r3, r3, #31
 801ad56:	2220      	movs	r2, #32
 801ad58:	409a      	lsls	r2, r3
 801ad5a:	69bb      	ldr	r3, [r7, #24]
 801ad5c:	4013      	ands	r3, r2
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	f000 8110 	beq.w	801af84 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	4a2c      	ldr	r2, [pc, #176]	@ (801ae1c <HAL_DMA_IRQHandler+0x690>)
 801ad6a:	4293      	cmp	r3, r2
 801ad6c:	d04a      	beq.n	801ae04 <HAL_DMA_IRQHandler+0x678>
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	4a2b      	ldr	r2, [pc, #172]	@ (801ae20 <HAL_DMA_IRQHandler+0x694>)
 801ad74:	4293      	cmp	r3, r2
 801ad76:	d045      	beq.n	801ae04 <HAL_DMA_IRQHandler+0x678>
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	681b      	ldr	r3, [r3, #0]
 801ad7c:	4a29      	ldr	r2, [pc, #164]	@ (801ae24 <HAL_DMA_IRQHandler+0x698>)
 801ad7e:	4293      	cmp	r3, r2
 801ad80:	d040      	beq.n	801ae04 <HAL_DMA_IRQHandler+0x678>
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	4a28      	ldr	r2, [pc, #160]	@ (801ae28 <HAL_DMA_IRQHandler+0x69c>)
 801ad88:	4293      	cmp	r3, r2
 801ad8a:	d03b      	beq.n	801ae04 <HAL_DMA_IRQHandler+0x678>
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	4a26      	ldr	r2, [pc, #152]	@ (801ae2c <HAL_DMA_IRQHandler+0x6a0>)
 801ad92:	4293      	cmp	r3, r2
 801ad94:	d036      	beq.n	801ae04 <HAL_DMA_IRQHandler+0x678>
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	681b      	ldr	r3, [r3, #0]
 801ad9a:	4a25      	ldr	r2, [pc, #148]	@ (801ae30 <HAL_DMA_IRQHandler+0x6a4>)
 801ad9c:	4293      	cmp	r3, r2
 801ad9e:	d031      	beq.n	801ae04 <HAL_DMA_IRQHandler+0x678>
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	4a23      	ldr	r2, [pc, #140]	@ (801ae34 <HAL_DMA_IRQHandler+0x6a8>)
 801ada6:	4293      	cmp	r3, r2
 801ada8:	d02c      	beq.n	801ae04 <HAL_DMA_IRQHandler+0x678>
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	4a22      	ldr	r2, [pc, #136]	@ (801ae38 <HAL_DMA_IRQHandler+0x6ac>)
 801adb0:	4293      	cmp	r3, r2
 801adb2:	d027      	beq.n	801ae04 <HAL_DMA_IRQHandler+0x678>
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	4a20      	ldr	r2, [pc, #128]	@ (801ae3c <HAL_DMA_IRQHandler+0x6b0>)
 801adba:	4293      	cmp	r3, r2
 801adbc:	d022      	beq.n	801ae04 <HAL_DMA_IRQHandler+0x678>
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	681b      	ldr	r3, [r3, #0]
 801adc2:	4a1f      	ldr	r2, [pc, #124]	@ (801ae40 <HAL_DMA_IRQHandler+0x6b4>)
 801adc4:	4293      	cmp	r3, r2
 801adc6:	d01d      	beq.n	801ae04 <HAL_DMA_IRQHandler+0x678>
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	4a1d      	ldr	r2, [pc, #116]	@ (801ae44 <HAL_DMA_IRQHandler+0x6b8>)
 801adce:	4293      	cmp	r3, r2
 801add0:	d018      	beq.n	801ae04 <HAL_DMA_IRQHandler+0x678>
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	4a1c      	ldr	r2, [pc, #112]	@ (801ae48 <HAL_DMA_IRQHandler+0x6bc>)
 801add8:	4293      	cmp	r3, r2
 801adda:	d013      	beq.n	801ae04 <HAL_DMA_IRQHandler+0x678>
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	681b      	ldr	r3, [r3, #0]
 801ade0:	4a1a      	ldr	r2, [pc, #104]	@ (801ae4c <HAL_DMA_IRQHandler+0x6c0>)
 801ade2:	4293      	cmp	r3, r2
 801ade4:	d00e      	beq.n	801ae04 <HAL_DMA_IRQHandler+0x678>
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	4a19      	ldr	r2, [pc, #100]	@ (801ae50 <HAL_DMA_IRQHandler+0x6c4>)
 801adec:	4293      	cmp	r3, r2
 801adee:	d009      	beq.n	801ae04 <HAL_DMA_IRQHandler+0x678>
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	4a17      	ldr	r2, [pc, #92]	@ (801ae54 <HAL_DMA_IRQHandler+0x6c8>)
 801adf6:	4293      	cmp	r3, r2
 801adf8:	d004      	beq.n	801ae04 <HAL_DMA_IRQHandler+0x678>
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	4a16      	ldr	r2, [pc, #88]	@ (801ae58 <HAL_DMA_IRQHandler+0x6cc>)
 801ae00:	4293      	cmp	r3, r2
 801ae02:	d12b      	bne.n	801ae5c <HAL_DMA_IRQHandler+0x6d0>
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	f003 0310 	and.w	r3, r3, #16
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	bf14      	ite	ne
 801ae12:	2301      	movne	r3, #1
 801ae14:	2300      	moveq	r3, #0
 801ae16:	b2db      	uxtb	r3, r3
 801ae18:	e02a      	b.n	801ae70 <HAL_DMA_IRQHandler+0x6e4>
 801ae1a:	bf00      	nop
 801ae1c:	40020010 	.word	0x40020010
 801ae20:	40020028 	.word	0x40020028
 801ae24:	40020040 	.word	0x40020040
 801ae28:	40020058 	.word	0x40020058
 801ae2c:	40020070 	.word	0x40020070
 801ae30:	40020088 	.word	0x40020088
 801ae34:	400200a0 	.word	0x400200a0
 801ae38:	400200b8 	.word	0x400200b8
 801ae3c:	40020410 	.word	0x40020410
 801ae40:	40020428 	.word	0x40020428
 801ae44:	40020440 	.word	0x40020440
 801ae48:	40020458 	.word	0x40020458
 801ae4c:	40020470 	.word	0x40020470
 801ae50:	40020488 	.word	0x40020488
 801ae54:	400204a0 	.word	0x400204a0
 801ae58:	400204b8 	.word	0x400204b8
 801ae5c:	687b      	ldr	r3, [r7, #4]
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	f003 0302 	and.w	r3, r3, #2
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	bf14      	ite	ne
 801ae6a:	2301      	movne	r3, #1
 801ae6c:	2300      	moveq	r3, #0
 801ae6e:	b2db      	uxtb	r3, r3
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	f000 8087 	beq.w	801af84 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ae7a:	f003 031f 	and.w	r3, r3, #31
 801ae7e:	2220      	movs	r2, #32
 801ae80:	409a      	lsls	r2, r3
 801ae82:	6a3b      	ldr	r3, [r7, #32]
 801ae84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801ae8c:	b2db      	uxtb	r3, r3
 801ae8e:	2b04      	cmp	r3, #4
 801ae90:	d139      	bne.n	801af06 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	681a      	ldr	r2, [r3, #0]
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	f022 0216 	bic.w	r2, r2, #22
 801aea0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	681b      	ldr	r3, [r3, #0]
 801aea6:	695a      	ldr	r2, [r3, #20]
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801aeb0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d103      	bne.n	801aec2 <HAL_DMA_IRQHandler+0x736>
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d007      	beq.n	801aed2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	681a      	ldr	r2, [r3, #0]
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	f022 0208 	bic.w	r2, r2, #8
 801aed0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aed6:	f003 031f 	and.w	r3, r3, #31
 801aeda:	223f      	movs	r2, #63	@ 0x3f
 801aedc:	409a      	lsls	r2, r3
 801aede:	6a3b      	ldr	r3, [r7, #32]
 801aee0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	2201      	movs	r2, #1
 801aee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	2200      	movs	r2, #0
 801aeee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	f000 834a 	beq.w	801b590 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801af00:	6878      	ldr	r0, [r7, #4]
 801af02:	4798      	blx	r3
          }
          return;
 801af04:	e344      	b.n	801b590 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801af10:	2b00      	cmp	r3, #0
 801af12:	d018      	beq.n	801af46 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801af1e:	2b00      	cmp	r3, #0
 801af20:	d108      	bne.n	801af34 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801af26:	2b00      	cmp	r3, #0
 801af28:	d02c      	beq.n	801af84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801af2e:	6878      	ldr	r0, [r7, #4]
 801af30:	4798      	blx	r3
 801af32:	e027      	b.n	801af84 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d023      	beq.n	801af84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801af40:	6878      	ldr	r0, [r7, #4]
 801af42:	4798      	blx	r3
 801af44:	e01e      	b.n	801af84 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801af50:	2b00      	cmp	r3, #0
 801af52:	d10f      	bne.n	801af74 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	681a      	ldr	r2, [r3, #0]
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	f022 0210 	bic.w	r2, r2, #16
 801af62:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	2201      	movs	r2, #1
 801af68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	2200      	movs	r2, #0
 801af70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d003      	beq.n	801af84 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801af80:	6878      	ldr	r0, [r7, #4]
 801af82:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801af88:	2b00      	cmp	r3, #0
 801af8a:	f000 8306 	beq.w	801b59a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801af92:	f003 0301 	and.w	r3, r3, #1
 801af96:	2b00      	cmp	r3, #0
 801af98:	f000 8088 	beq.w	801b0ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	2204      	movs	r2, #4
 801afa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	681b      	ldr	r3, [r3, #0]
 801afa8:	4a7a      	ldr	r2, [pc, #488]	@ (801b194 <HAL_DMA_IRQHandler+0xa08>)
 801afaa:	4293      	cmp	r3, r2
 801afac:	d04a      	beq.n	801b044 <HAL_DMA_IRQHandler+0x8b8>
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	681b      	ldr	r3, [r3, #0]
 801afb2:	4a79      	ldr	r2, [pc, #484]	@ (801b198 <HAL_DMA_IRQHandler+0xa0c>)
 801afb4:	4293      	cmp	r3, r2
 801afb6:	d045      	beq.n	801b044 <HAL_DMA_IRQHandler+0x8b8>
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	4a77      	ldr	r2, [pc, #476]	@ (801b19c <HAL_DMA_IRQHandler+0xa10>)
 801afbe:	4293      	cmp	r3, r2
 801afc0:	d040      	beq.n	801b044 <HAL_DMA_IRQHandler+0x8b8>
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	4a76      	ldr	r2, [pc, #472]	@ (801b1a0 <HAL_DMA_IRQHandler+0xa14>)
 801afc8:	4293      	cmp	r3, r2
 801afca:	d03b      	beq.n	801b044 <HAL_DMA_IRQHandler+0x8b8>
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	4a74      	ldr	r2, [pc, #464]	@ (801b1a4 <HAL_DMA_IRQHandler+0xa18>)
 801afd2:	4293      	cmp	r3, r2
 801afd4:	d036      	beq.n	801b044 <HAL_DMA_IRQHandler+0x8b8>
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	4a73      	ldr	r2, [pc, #460]	@ (801b1a8 <HAL_DMA_IRQHandler+0xa1c>)
 801afdc:	4293      	cmp	r3, r2
 801afde:	d031      	beq.n	801b044 <HAL_DMA_IRQHandler+0x8b8>
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	681b      	ldr	r3, [r3, #0]
 801afe4:	4a71      	ldr	r2, [pc, #452]	@ (801b1ac <HAL_DMA_IRQHandler+0xa20>)
 801afe6:	4293      	cmp	r3, r2
 801afe8:	d02c      	beq.n	801b044 <HAL_DMA_IRQHandler+0x8b8>
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	4a70      	ldr	r2, [pc, #448]	@ (801b1b0 <HAL_DMA_IRQHandler+0xa24>)
 801aff0:	4293      	cmp	r3, r2
 801aff2:	d027      	beq.n	801b044 <HAL_DMA_IRQHandler+0x8b8>
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	4a6e      	ldr	r2, [pc, #440]	@ (801b1b4 <HAL_DMA_IRQHandler+0xa28>)
 801affa:	4293      	cmp	r3, r2
 801affc:	d022      	beq.n	801b044 <HAL_DMA_IRQHandler+0x8b8>
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	681b      	ldr	r3, [r3, #0]
 801b002:	4a6d      	ldr	r2, [pc, #436]	@ (801b1b8 <HAL_DMA_IRQHandler+0xa2c>)
 801b004:	4293      	cmp	r3, r2
 801b006:	d01d      	beq.n	801b044 <HAL_DMA_IRQHandler+0x8b8>
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	4a6b      	ldr	r2, [pc, #428]	@ (801b1bc <HAL_DMA_IRQHandler+0xa30>)
 801b00e:	4293      	cmp	r3, r2
 801b010:	d018      	beq.n	801b044 <HAL_DMA_IRQHandler+0x8b8>
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	4a6a      	ldr	r2, [pc, #424]	@ (801b1c0 <HAL_DMA_IRQHandler+0xa34>)
 801b018:	4293      	cmp	r3, r2
 801b01a:	d013      	beq.n	801b044 <HAL_DMA_IRQHandler+0x8b8>
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	4a68      	ldr	r2, [pc, #416]	@ (801b1c4 <HAL_DMA_IRQHandler+0xa38>)
 801b022:	4293      	cmp	r3, r2
 801b024:	d00e      	beq.n	801b044 <HAL_DMA_IRQHandler+0x8b8>
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	4a67      	ldr	r2, [pc, #412]	@ (801b1c8 <HAL_DMA_IRQHandler+0xa3c>)
 801b02c:	4293      	cmp	r3, r2
 801b02e:	d009      	beq.n	801b044 <HAL_DMA_IRQHandler+0x8b8>
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	4a65      	ldr	r2, [pc, #404]	@ (801b1cc <HAL_DMA_IRQHandler+0xa40>)
 801b036:	4293      	cmp	r3, r2
 801b038:	d004      	beq.n	801b044 <HAL_DMA_IRQHandler+0x8b8>
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	4a64      	ldr	r2, [pc, #400]	@ (801b1d0 <HAL_DMA_IRQHandler+0xa44>)
 801b040:	4293      	cmp	r3, r2
 801b042:	d108      	bne.n	801b056 <HAL_DMA_IRQHandler+0x8ca>
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	681a      	ldr	r2, [r3, #0]
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	f022 0201 	bic.w	r2, r2, #1
 801b052:	601a      	str	r2, [r3, #0]
 801b054:	e007      	b.n	801b066 <HAL_DMA_IRQHandler+0x8da>
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	681a      	ldr	r2, [r3, #0]
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	f022 0201 	bic.w	r2, r2, #1
 801b064:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 801b066:	68fb      	ldr	r3, [r7, #12]
 801b068:	3301      	adds	r3, #1
 801b06a:	60fb      	str	r3, [r7, #12]
 801b06c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b06e:	429a      	cmp	r2, r3
 801b070:	d307      	bcc.n	801b082 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	f003 0301 	and.w	r3, r3, #1
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d1f2      	bne.n	801b066 <HAL_DMA_IRQHandler+0x8da>
 801b080:	e000      	b.n	801b084 <HAL_DMA_IRQHandler+0x8f8>
            break;
 801b082:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	681b      	ldr	r3, [r3, #0]
 801b08a:	f003 0301 	and.w	r3, r3, #1
 801b08e:	2b00      	cmp	r3, #0
 801b090:	d004      	beq.n	801b09c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	2203      	movs	r2, #3
 801b096:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801b09a:	e003      	b.n	801b0a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	2201      	movs	r2, #1
 801b0a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	2200      	movs	r2, #0
 801b0a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	f000 8272 	beq.w	801b59a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b0ba:	6878      	ldr	r0, [r7, #4]
 801b0bc:	4798      	blx	r3
 801b0be:	e26c      	b.n	801b59a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	4a43      	ldr	r2, [pc, #268]	@ (801b1d4 <HAL_DMA_IRQHandler+0xa48>)
 801b0c6:	4293      	cmp	r3, r2
 801b0c8:	d022      	beq.n	801b110 <HAL_DMA_IRQHandler+0x984>
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	681b      	ldr	r3, [r3, #0]
 801b0ce:	4a42      	ldr	r2, [pc, #264]	@ (801b1d8 <HAL_DMA_IRQHandler+0xa4c>)
 801b0d0:	4293      	cmp	r3, r2
 801b0d2:	d01d      	beq.n	801b110 <HAL_DMA_IRQHandler+0x984>
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	4a40      	ldr	r2, [pc, #256]	@ (801b1dc <HAL_DMA_IRQHandler+0xa50>)
 801b0da:	4293      	cmp	r3, r2
 801b0dc:	d018      	beq.n	801b110 <HAL_DMA_IRQHandler+0x984>
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	681b      	ldr	r3, [r3, #0]
 801b0e2:	4a3f      	ldr	r2, [pc, #252]	@ (801b1e0 <HAL_DMA_IRQHandler+0xa54>)
 801b0e4:	4293      	cmp	r3, r2
 801b0e6:	d013      	beq.n	801b110 <HAL_DMA_IRQHandler+0x984>
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	4a3d      	ldr	r2, [pc, #244]	@ (801b1e4 <HAL_DMA_IRQHandler+0xa58>)
 801b0ee:	4293      	cmp	r3, r2
 801b0f0:	d00e      	beq.n	801b110 <HAL_DMA_IRQHandler+0x984>
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	4a3c      	ldr	r2, [pc, #240]	@ (801b1e8 <HAL_DMA_IRQHandler+0xa5c>)
 801b0f8:	4293      	cmp	r3, r2
 801b0fa:	d009      	beq.n	801b110 <HAL_DMA_IRQHandler+0x984>
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	4a3a      	ldr	r2, [pc, #232]	@ (801b1ec <HAL_DMA_IRQHandler+0xa60>)
 801b102:	4293      	cmp	r3, r2
 801b104:	d004      	beq.n	801b110 <HAL_DMA_IRQHandler+0x984>
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	4a39      	ldr	r2, [pc, #228]	@ (801b1f0 <HAL_DMA_IRQHandler+0xa64>)
 801b10c:	4293      	cmp	r3, r2
 801b10e:	d101      	bne.n	801b114 <HAL_DMA_IRQHandler+0x988>
 801b110:	2301      	movs	r3, #1
 801b112:	e000      	b.n	801b116 <HAL_DMA_IRQHandler+0x98a>
 801b114:	2300      	movs	r3, #0
 801b116:	2b00      	cmp	r3, #0
 801b118:	f000 823f 	beq.w	801b59a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	681b      	ldr	r3, [r3, #0]
 801b120:	681b      	ldr	r3, [r3, #0]
 801b122:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b128:	f003 031f 	and.w	r3, r3, #31
 801b12c:	2204      	movs	r2, #4
 801b12e:	409a      	lsls	r2, r3
 801b130:	697b      	ldr	r3, [r7, #20]
 801b132:	4013      	ands	r3, r2
 801b134:	2b00      	cmp	r3, #0
 801b136:	f000 80cd 	beq.w	801b2d4 <HAL_DMA_IRQHandler+0xb48>
 801b13a:	693b      	ldr	r3, [r7, #16]
 801b13c:	f003 0304 	and.w	r3, r3, #4
 801b140:	2b00      	cmp	r3, #0
 801b142:	f000 80c7 	beq.w	801b2d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b14a:	f003 031f 	and.w	r3, r3, #31
 801b14e:	2204      	movs	r2, #4
 801b150:	409a      	lsls	r2, r3
 801b152:	69fb      	ldr	r3, [r7, #28]
 801b154:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b156:	693b      	ldr	r3, [r7, #16]
 801b158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d049      	beq.n	801b1f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801b160:	693b      	ldr	r3, [r7, #16]
 801b162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b166:	2b00      	cmp	r3, #0
 801b168:	d109      	bne.n	801b17e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b16e:	2b00      	cmp	r3, #0
 801b170:	f000 8210 	beq.w	801b594 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b178:	6878      	ldr	r0, [r7, #4]
 801b17a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b17c:	e20a      	b.n	801b594 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b182:	2b00      	cmp	r3, #0
 801b184:	f000 8206 	beq.w	801b594 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b18c:	6878      	ldr	r0, [r7, #4]
 801b18e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b190:	e200      	b.n	801b594 <HAL_DMA_IRQHandler+0xe08>
 801b192:	bf00      	nop
 801b194:	40020010 	.word	0x40020010
 801b198:	40020028 	.word	0x40020028
 801b19c:	40020040 	.word	0x40020040
 801b1a0:	40020058 	.word	0x40020058
 801b1a4:	40020070 	.word	0x40020070
 801b1a8:	40020088 	.word	0x40020088
 801b1ac:	400200a0 	.word	0x400200a0
 801b1b0:	400200b8 	.word	0x400200b8
 801b1b4:	40020410 	.word	0x40020410
 801b1b8:	40020428 	.word	0x40020428
 801b1bc:	40020440 	.word	0x40020440
 801b1c0:	40020458 	.word	0x40020458
 801b1c4:	40020470 	.word	0x40020470
 801b1c8:	40020488 	.word	0x40020488
 801b1cc:	400204a0 	.word	0x400204a0
 801b1d0:	400204b8 	.word	0x400204b8
 801b1d4:	58025408 	.word	0x58025408
 801b1d8:	5802541c 	.word	0x5802541c
 801b1dc:	58025430 	.word	0x58025430
 801b1e0:	58025444 	.word	0x58025444
 801b1e4:	58025458 	.word	0x58025458
 801b1e8:	5802546c 	.word	0x5802546c
 801b1ec:	58025480 	.word	0x58025480
 801b1f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801b1f4:	693b      	ldr	r3, [r7, #16]
 801b1f6:	f003 0320 	and.w	r3, r3, #32
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d160      	bne.n	801b2c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	4a7f      	ldr	r2, [pc, #508]	@ (801b400 <HAL_DMA_IRQHandler+0xc74>)
 801b204:	4293      	cmp	r3, r2
 801b206:	d04a      	beq.n	801b29e <HAL_DMA_IRQHandler+0xb12>
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	4a7d      	ldr	r2, [pc, #500]	@ (801b404 <HAL_DMA_IRQHandler+0xc78>)
 801b20e:	4293      	cmp	r3, r2
 801b210:	d045      	beq.n	801b29e <HAL_DMA_IRQHandler+0xb12>
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	681b      	ldr	r3, [r3, #0]
 801b216:	4a7c      	ldr	r2, [pc, #496]	@ (801b408 <HAL_DMA_IRQHandler+0xc7c>)
 801b218:	4293      	cmp	r3, r2
 801b21a:	d040      	beq.n	801b29e <HAL_DMA_IRQHandler+0xb12>
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	681b      	ldr	r3, [r3, #0]
 801b220:	4a7a      	ldr	r2, [pc, #488]	@ (801b40c <HAL_DMA_IRQHandler+0xc80>)
 801b222:	4293      	cmp	r3, r2
 801b224:	d03b      	beq.n	801b29e <HAL_DMA_IRQHandler+0xb12>
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	681b      	ldr	r3, [r3, #0]
 801b22a:	4a79      	ldr	r2, [pc, #484]	@ (801b410 <HAL_DMA_IRQHandler+0xc84>)
 801b22c:	4293      	cmp	r3, r2
 801b22e:	d036      	beq.n	801b29e <HAL_DMA_IRQHandler+0xb12>
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	4a77      	ldr	r2, [pc, #476]	@ (801b414 <HAL_DMA_IRQHandler+0xc88>)
 801b236:	4293      	cmp	r3, r2
 801b238:	d031      	beq.n	801b29e <HAL_DMA_IRQHandler+0xb12>
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	4a76      	ldr	r2, [pc, #472]	@ (801b418 <HAL_DMA_IRQHandler+0xc8c>)
 801b240:	4293      	cmp	r3, r2
 801b242:	d02c      	beq.n	801b29e <HAL_DMA_IRQHandler+0xb12>
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	4a74      	ldr	r2, [pc, #464]	@ (801b41c <HAL_DMA_IRQHandler+0xc90>)
 801b24a:	4293      	cmp	r3, r2
 801b24c:	d027      	beq.n	801b29e <HAL_DMA_IRQHandler+0xb12>
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	681b      	ldr	r3, [r3, #0]
 801b252:	4a73      	ldr	r2, [pc, #460]	@ (801b420 <HAL_DMA_IRQHandler+0xc94>)
 801b254:	4293      	cmp	r3, r2
 801b256:	d022      	beq.n	801b29e <HAL_DMA_IRQHandler+0xb12>
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	4a71      	ldr	r2, [pc, #452]	@ (801b424 <HAL_DMA_IRQHandler+0xc98>)
 801b25e:	4293      	cmp	r3, r2
 801b260:	d01d      	beq.n	801b29e <HAL_DMA_IRQHandler+0xb12>
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	4a70      	ldr	r2, [pc, #448]	@ (801b428 <HAL_DMA_IRQHandler+0xc9c>)
 801b268:	4293      	cmp	r3, r2
 801b26a:	d018      	beq.n	801b29e <HAL_DMA_IRQHandler+0xb12>
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	4a6e      	ldr	r2, [pc, #440]	@ (801b42c <HAL_DMA_IRQHandler+0xca0>)
 801b272:	4293      	cmp	r3, r2
 801b274:	d013      	beq.n	801b29e <HAL_DMA_IRQHandler+0xb12>
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	681b      	ldr	r3, [r3, #0]
 801b27a:	4a6d      	ldr	r2, [pc, #436]	@ (801b430 <HAL_DMA_IRQHandler+0xca4>)
 801b27c:	4293      	cmp	r3, r2
 801b27e:	d00e      	beq.n	801b29e <HAL_DMA_IRQHandler+0xb12>
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	681b      	ldr	r3, [r3, #0]
 801b284:	4a6b      	ldr	r2, [pc, #428]	@ (801b434 <HAL_DMA_IRQHandler+0xca8>)
 801b286:	4293      	cmp	r3, r2
 801b288:	d009      	beq.n	801b29e <HAL_DMA_IRQHandler+0xb12>
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	4a6a      	ldr	r2, [pc, #424]	@ (801b438 <HAL_DMA_IRQHandler+0xcac>)
 801b290:	4293      	cmp	r3, r2
 801b292:	d004      	beq.n	801b29e <HAL_DMA_IRQHandler+0xb12>
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	681b      	ldr	r3, [r3, #0]
 801b298:	4a68      	ldr	r2, [pc, #416]	@ (801b43c <HAL_DMA_IRQHandler+0xcb0>)
 801b29a:	4293      	cmp	r3, r2
 801b29c:	d108      	bne.n	801b2b0 <HAL_DMA_IRQHandler+0xb24>
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	681b      	ldr	r3, [r3, #0]
 801b2a2:	681a      	ldr	r2, [r3, #0]
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	f022 0208 	bic.w	r2, r2, #8
 801b2ac:	601a      	str	r2, [r3, #0]
 801b2ae:	e007      	b.n	801b2c0 <HAL_DMA_IRQHandler+0xb34>
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	681a      	ldr	r2, [r3, #0]
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	f022 0204 	bic.w	r2, r2, #4
 801b2be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	f000 8165 	beq.w	801b594 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b2ce:	6878      	ldr	r0, [r7, #4]
 801b2d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b2d2:	e15f      	b.n	801b594 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b2d8:	f003 031f 	and.w	r3, r3, #31
 801b2dc:	2202      	movs	r2, #2
 801b2de:	409a      	lsls	r2, r3
 801b2e0:	697b      	ldr	r3, [r7, #20]
 801b2e2:	4013      	ands	r3, r2
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	f000 80c5 	beq.w	801b474 <HAL_DMA_IRQHandler+0xce8>
 801b2ea:	693b      	ldr	r3, [r7, #16]
 801b2ec:	f003 0302 	and.w	r3, r3, #2
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	f000 80bf 	beq.w	801b474 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b2fa:	f003 031f 	and.w	r3, r3, #31
 801b2fe:	2202      	movs	r2, #2
 801b300:	409a      	lsls	r2, r3
 801b302:	69fb      	ldr	r3, [r7, #28]
 801b304:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b306:	693b      	ldr	r3, [r7, #16]
 801b308:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d018      	beq.n	801b342 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801b310:	693b      	ldr	r3, [r7, #16]
 801b312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b316:	2b00      	cmp	r3, #0
 801b318:	d109      	bne.n	801b32e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b31e:	2b00      	cmp	r3, #0
 801b320:	f000 813a 	beq.w	801b598 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b328:	6878      	ldr	r0, [r7, #4]
 801b32a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b32c:	e134      	b.n	801b598 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b332:	2b00      	cmp	r3, #0
 801b334:	f000 8130 	beq.w	801b598 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b33c:	6878      	ldr	r0, [r7, #4]
 801b33e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b340:	e12a      	b.n	801b598 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801b342:	693b      	ldr	r3, [r7, #16]
 801b344:	f003 0320 	and.w	r3, r3, #32
 801b348:	2b00      	cmp	r3, #0
 801b34a:	f040 8089 	bne.w	801b460 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	681b      	ldr	r3, [r3, #0]
 801b352:	4a2b      	ldr	r2, [pc, #172]	@ (801b400 <HAL_DMA_IRQHandler+0xc74>)
 801b354:	4293      	cmp	r3, r2
 801b356:	d04a      	beq.n	801b3ee <HAL_DMA_IRQHandler+0xc62>
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	4a29      	ldr	r2, [pc, #164]	@ (801b404 <HAL_DMA_IRQHandler+0xc78>)
 801b35e:	4293      	cmp	r3, r2
 801b360:	d045      	beq.n	801b3ee <HAL_DMA_IRQHandler+0xc62>
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	4a28      	ldr	r2, [pc, #160]	@ (801b408 <HAL_DMA_IRQHandler+0xc7c>)
 801b368:	4293      	cmp	r3, r2
 801b36a:	d040      	beq.n	801b3ee <HAL_DMA_IRQHandler+0xc62>
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	4a26      	ldr	r2, [pc, #152]	@ (801b40c <HAL_DMA_IRQHandler+0xc80>)
 801b372:	4293      	cmp	r3, r2
 801b374:	d03b      	beq.n	801b3ee <HAL_DMA_IRQHandler+0xc62>
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	4a25      	ldr	r2, [pc, #148]	@ (801b410 <HAL_DMA_IRQHandler+0xc84>)
 801b37c:	4293      	cmp	r3, r2
 801b37e:	d036      	beq.n	801b3ee <HAL_DMA_IRQHandler+0xc62>
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	4a23      	ldr	r2, [pc, #140]	@ (801b414 <HAL_DMA_IRQHandler+0xc88>)
 801b386:	4293      	cmp	r3, r2
 801b388:	d031      	beq.n	801b3ee <HAL_DMA_IRQHandler+0xc62>
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	681b      	ldr	r3, [r3, #0]
 801b38e:	4a22      	ldr	r2, [pc, #136]	@ (801b418 <HAL_DMA_IRQHandler+0xc8c>)
 801b390:	4293      	cmp	r3, r2
 801b392:	d02c      	beq.n	801b3ee <HAL_DMA_IRQHandler+0xc62>
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	4a20      	ldr	r2, [pc, #128]	@ (801b41c <HAL_DMA_IRQHandler+0xc90>)
 801b39a:	4293      	cmp	r3, r2
 801b39c:	d027      	beq.n	801b3ee <HAL_DMA_IRQHandler+0xc62>
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	681b      	ldr	r3, [r3, #0]
 801b3a2:	4a1f      	ldr	r2, [pc, #124]	@ (801b420 <HAL_DMA_IRQHandler+0xc94>)
 801b3a4:	4293      	cmp	r3, r2
 801b3a6:	d022      	beq.n	801b3ee <HAL_DMA_IRQHandler+0xc62>
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	681b      	ldr	r3, [r3, #0]
 801b3ac:	4a1d      	ldr	r2, [pc, #116]	@ (801b424 <HAL_DMA_IRQHandler+0xc98>)
 801b3ae:	4293      	cmp	r3, r2
 801b3b0:	d01d      	beq.n	801b3ee <HAL_DMA_IRQHandler+0xc62>
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	681b      	ldr	r3, [r3, #0]
 801b3b6:	4a1c      	ldr	r2, [pc, #112]	@ (801b428 <HAL_DMA_IRQHandler+0xc9c>)
 801b3b8:	4293      	cmp	r3, r2
 801b3ba:	d018      	beq.n	801b3ee <HAL_DMA_IRQHandler+0xc62>
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	4a1a      	ldr	r2, [pc, #104]	@ (801b42c <HAL_DMA_IRQHandler+0xca0>)
 801b3c2:	4293      	cmp	r3, r2
 801b3c4:	d013      	beq.n	801b3ee <HAL_DMA_IRQHandler+0xc62>
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	681b      	ldr	r3, [r3, #0]
 801b3ca:	4a19      	ldr	r2, [pc, #100]	@ (801b430 <HAL_DMA_IRQHandler+0xca4>)
 801b3cc:	4293      	cmp	r3, r2
 801b3ce:	d00e      	beq.n	801b3ee <HAL_DMA_IRQHandler+0xc62>
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	4a17      	ldr	r2, [pc, #92]	@ (801b434 <HAL_DMA_IRQHandler+0xca8>)
 801b3d6:	4293      	cmp	r3, r2
 801b3d8:	d009      	beq.n	801b3ee <HAL_DMA_IRQHandler+0xc62>
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	4a16      	ldr	r2, [pc, #88]	@ (801b438 <HAL_DMA_IRQHandler+0xcac>)
 801b3e0:	4293      	cmp	r3, r2
 801b3e2:	d004      	beq.n	801b3ee <HAL_DMA_IRQHandler+0xc62>
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	681b      	ldr	r3, [r3, #0]
 801b3e8:	4a14      	ldr	r2, [pc, #80]	@ (801b43c <HAL_DMA_IRQHandler+0xcb0>)
 801b3ea:	4293      	cmp	r3, r2
 801b3ec:	d128      	bne.n	801b440 <HAL_DMA_IRQHandler+0xcb4>
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	681b      	ldr	r3, [r3, #0]
 801b3f2:	681a      	ldr	r2, [r3, #0]
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	f022 0214 	bic.w	r2, r2, #20
 801b3fc:	601a      	str	r2, [r3, #0]
 801b3fe:	e027      	b.n	801b450 <HAL_DMA_IRQHandler+0xcc4>
 801b400:	40020010 	.word	0x40020010
 801b404:	40020028 	.word	0x40020028
 801b408:	40020040 	.word	0x40020040
 801b40c:	40020058 	.word	0x40020058
 801b410:	40020070 	.word	0x40020070
 801b414:	40020088 	.word	0x40020088
 801b418:	400200a0 	.word	0x400200a0
 801b41c:	400200b8 	.word	0x400200b8
 801b420:	40020410 	.word	0x40020410
 801b424:	40020428 	.word	0x40020428
 801b428:	40020440 	.word	0x40020440
 801b42c:	40020458 	.word	0x40020458
 801b430:	40020470 	.word	0x40020470
 801b434:	40020488 	.word	0x40020488
 801b438:	400204a0 	.word	0x400204a0
 801b43c:	400204b8 	.word	0x400204b8
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	681a      	ldr	r2, [r3, #0]
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	f022 020a 	bic.w	r2, r2, #10
 801b44e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	2201      	movs	r2, #1
 801b454:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	2200      	movs	r2, #0
 801b45c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b464:	2b00      	cmp	r3, #0
 801b466:	f000 8097 	beq.w	801b598 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b46e:	6878      	ldr	r0, [r7, #4]
 801b470:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b472:	e091      	b.n	801b598 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b478:	f003 031f 	and.w	r3, r3, #31
 801b47c:	2208      	movs	r2, #8
 801b47e:	409a      	lsls	r2, r3
 801b480:	697b      	ldr	r3, [r7, #20]
 801b482:	4013      	ands	r3, r2
 801b484:	2b00      	cmp	r3, #0
 801b486:	f000 8088 	beq.w	801b59a <HAL_DMA_IRQHandler+0xe0e>
 801b48a:	693b      	ldr	r3, [r7, #16]
 801b48c:	f003 0308 	and.w	r3, r3, #8
 801b490:	2b00      	cmp	r3, #0
 801b492:	f000 8082 	beq.w	801b59a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	4a41      	ldr	r2, [pc, #260]	@ (801b5a0 <HAL_DMA_IRQHandler+0xe14>)
 801b49c:	4293      	cmp	r3, r2
 801b49e:	d04a      	beq.n	801b536 <HAL_DMA_IRQHandler+0xdaa>
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	681b      	ldr	r3, [r3, #0]
 801b4a4:	4a3f      	ldr	r2, [pc, #252]	@ (801b5a4 <HAL_DMA_IRQHandler+0xe18>)
 801b4a6:	4293      	cmp	r3, r2
 801b4a8:	d045      	beq.n	801b536 <HAL_DMA_IRQHandler+0xdaa>
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	681b      	ldr	r3, [r3, #0]
 801b4ae:	4a3e      	ldr	r2, [pc, #248]	@ (801b5a8 <HAL_DMA_IRQHandler+0xe1c>)
 801b4b0:	4293      	cmp	r3, r2
 801b4b2:	d040      	beq.n	801b536 <HAL_DMA_IRQHandler+0xdaa>
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	4a3c      	ldr	r2, [pc, #240]	@ (801b5ac <HAL_DMA_IRQHandler+0xe20>)
 801b4ba:	4293      	cmp	r3, r2
 801b4bc:	d03b      	beq.n	801b536 <HAL_DMA_IRQHandler+0xdaa>
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	681b      	ldr	r3, [r3, #0]
 801b4c2:	4a3b      	ldr	r2, [pc, #236]	@ (801b5b0 <HAL_DMA_IRQHandler+0xe24>)
 801b4c4:	4293      	cmp	r3, r2
 801b4c6:	d036      	beq.n	801b536 <HAL_DMA_IRQHandler+0xdaa>
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	4a39      	ldr	r2, [pc, #228]	@ (801b5b4 <HAL_DMA_IRQHandler+0xe28>)
 801b4ce:	4293      	cmp	r3, r2
 801b4d0:	d031      	beq.n	801b536 <HAL_DMA_IRQHandler+0xdaa>
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	4a38      	ldr	r2, [pc, #224]	@ (801b5b8 <HAL_DMA_IRQHandler+0xe2c>)
 801b4d8:	4293      	cmp	r3, r2
 801b4da:	d02c      	beq.n	801b536 <HAL_DMA_IRQHandler+0xdaa>
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	4a36      	ldr	r2, [pc, #216]	@ (801b5bc <HAL_DMA_IRQHandler+0xe30>)
 801b4e2:	4293      	cmp	r3, r2
 801b4e4:	d027      	beq.n	801b536 <HAL_DMA_IRQHandler+0xdaa>
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	4a35      	ldr	r2, [pc, #212]	@ (801b5c0 <HAL_DMA_IRQHandler+0xe34>)
 801b4ec:	4293      	cmp	r3, r2
 801b4ee:	d022      	beq.n	801b536 <HAL_DMA_IRQHandler+0xdaa>
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	4a33      	ldr	r2, [pc, #204]	@ (801b5c4 <HAL_DMA_IRQHandler+0xe38>)
 801b4f6:	4293      	cmp	r3, r2
 801b4f8:	d01d      	beq.n	801b536 <HAL_DMA_IRQHandler+0xdaa>
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	4a32      	ldr	r2, [pc, #200]	@ (801b5c8 <HAL_DMA_IRQHandler+0xe3c>)
 801b500:	4293      	cmp	r3, r2
 801b502:	d018      	beq.n	801b536 <HAL_DMA_IRQHandler+0xdaa>
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	681b      	ldr	r3, [r3, #0]
 801b508:	4a30      	ldr	r2, [pc, #192]	@ (801b5cc <HAL_DMA_IRQHandler+0xe40>)
 801b50a:	4293      	cmp	r3, r2
 801b50c:	d013      	beq.n	801b536 <HAL_DMA_IRQHandler+0xdaa>
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	681b      	ldr	r3, [r3, #0]
 801b512:	4a2f      	ldr	r2, [pc, #188]	@ (801b5d0 <HAL_DMA_IRQHandler+0xe44>)
 801b514:	4293      	cmp	r3, r2
 801b516:	d00e      	beq.n	801b536 <HAL_DMA_IRQHandler+0xdaa>
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	4a2d      	ldr	r2, [pc, #180]	@ (801b5d4 <HAL_DMA_IRQHandler+0xe48>)
 801b51e:	4293      	cmp	r3, r2
 801b520:	d009      	beq.n	801b536 <HAL_DMA_IRQHandler+0xdaa>
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	681b      	ldr	r3, [r3, #0]
 801b526:	4a2c      	ldr	r2, [pc, #176]	@ (801b5d8 <HAL_DMA_IRQHandler+0xe4c>)
 801b528:	4293      	cmp	r3, r2
 801b52a:	d004      	beq.n	801b536 <HAL_DMA_IRQHandler+0xdaa>
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	4a2a      	ldr	r2, [pc, #168]	@ (801b5dc <HAL_DMA_IRQHandler+0xe50>)
 801b532:	4293      	cmp	r3, r2
 801b534:	d108      	bne.n	801b548 <HAL_DMA_IRQHandler+0xdbc>
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	681a      	ldr	r2, [r3, #0]
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	681b      	ldr	r3, [r3, #0]
 801b540:	f022 021c 	bic.w	r2, r2, #28
 801b544:	601a      	str	r2, [r3, #0]
 801b546:	e007      	b.n	801b558 <HAL_DMA_IRQHandler+0xdcc>
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	681a      	ldr	r2, [r3, #0]
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	f022 020e 	bic.w	r2, r2, #14
 801b556:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b55c:	f003 031f 	and.w	r3, r3, #31
 801b560:	2201      	movs	r2, #1
 801b562:	409a      	lsls	r2, r3
 801b564:	69fb      	ldr	r3, [r7, #28]
 801b566:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	2201      	movs	r2, #1
 801b56c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	2201      	movs	r2, #1
 801b572:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	2200      	movs	r2, #0
 801b57a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b582:	2b00      	cmp	r3, #0
 801b584:	d009      	beq.n	801b59a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b58a:	6878      	ldr	r0, [r7, #4]
 801b58c:	4798      	blx	r3
 801b58e:	e004      	b.n	801b59a <HAL_DMA_IRQHandler+0xe0e>
          return;
 801b590:	bf00      	nop
 801b592:	e002      	b.n	801b59a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b594:	bf00      	nop
 801b596:	e000      	b.n	801b59a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b598:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801b59a:	3728      	adds	r7, #40	@ 0x28
 801b59c:	46bd      	mov	sp, r7
 801b59e:	bd80      	pop	{r7, pc}
 801b5a0:	40020010 	.word	0x40020010
 801b5a4:	40020028 	.word	0x40020028
 801b5a8:	40020040 	.word	0x40020040
 801b5ac:	40020058 	.word	0x40020058
 801b5b0:	40020070 	.word	0x40020070
 801b5b4:	40020088 	.word	0x40020088
 801b5b8:	400200a0 	.word	0x400200a0
 801b5bc:	400200b8 	.word	0x400200b8
 801b5c0:	40020410 	.word	0x40020410
 801b5c4:	40020428 	.word	0x40020428
 801b5c8:	40020440 	.word	0x40020440
 801b5cc:	40020458 	.word	0x40020458
 801b5d0:	40020470 	.word	0x40020470
 801b5d4:	40020488 	.word	0x40020488
 801b5d8:	400204a0 	.word	0x400204a0
 801b5dc:	400204b8 	.word	0x400204b8

0801b5e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801b5e0:	b480      	push	{r7}
 801b5e2:	b085      	sub	sp, #20
 801b5e4:	af00      	add	r7, sp, #0
 801b5e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	681b      	ldr	r3, [r3, #0]
 801b5ec:	4a42      	ldr	r2, [pc, #264]	@ (801b6f8 <DMA_CalcBaseAndBitshift+0x118>)
 801b5ee:	4293      	cmp	r3, r2
 801b5f0:	d04a      	beq.n	801b688 <DMA_CalcBaseAndBitshift+0xa8>
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	681b      	ldr	r3, [r3, #0]
 801b5f6:	4a41      	ldr	r2, [pc, #260]	@ (801b6fc <DMA_CalcBaseAndBitshift+0x11c>)
 801b5f8:	4293      	cmp	r3, r2
 801b5fa:	d045      	beq.n	801b688 <DMA_CalcBaseAndBitshift+0xa8>
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	681b      	ldr	r3, [r3, #0]
 801b600:	4a3f      	ldr	r2, [pc, #252]	@ (801b700 <DMA_CalcBaseAndBitshift+0x120>)
 801b602:	4293      	cmp	r3, r2
 801b604:	d040      	beq.n	801b688 <DMA_CalcBaseAndBitshift+0xa8>
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	681b      	ldr	r3, [r3, #0]
 801b60a:	4a3e      	ldr	r2, [pc, #248]	@ (801b704 <DMA_CalcBaseAndBitshift+0x124>)
 801b60c:	4293      	cmp	r3, r2
 801b60e:	d03b      	beq.n	801b688 <DMA_CalcBaseAndBitshift+0xa8>
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	4a3c      	ldr	r2, [pc, #240]	@ (801b708 <DMA_CalcBaseAndBitshift+0x128>)
 801b616:	4293      	cmp	r3, r2
 801b618:	d036      	beq.n	801b688 <DMA_CalcBaseAndBitshift+0xa8>
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	4a3b      	ldr	r2, [pc, #236]	@ (801b70c <DMA_CalcBaseAndBitshift+0x12c>)
 801b620:	4293      	cmp	r3, r2
 801b622:	d031      	beq.n	801b688 <DMA_CalcBaseAndBitshift+0xa8>
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	681b      	ldr	r3, [r3, #0]
 801b628:	4a39      	ldr	r2, [pc, #228]	@ (801b710 <DMA_CalcBaseAndBitshift+0x130>)
 801b62a:	4293      	cmp	r3, r2
 801b62c:	d02c      	beq.n	801b688 <DMA_CalcBaseAndBitshift+0xa8>
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	4a38      	ldr	r2, [pc, #224]	@ (801b714 <DMA_CalcBaseAndBitshift+0x134>)
 801b634:	4293      	cmp	r3, r2
 801b636:	d027      	beq.n	801b688 <DMA_CalcBaseAndBitshift+0xa8>
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	681b      	ldr	r3, [r3, #0]
 801b63c:	4a36      	ldr	r2, [pc, #216]	@ (801b718 <DMA_CalcBaseAndBitshift+0x138>)
 801b63e:	4293      	cmp	r3, r2
 801b640:	d022      	beq.n	801b688 <DMA_CalcBaseAndBitshift+0xa8>
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	681b      	ldr	r3, [r3, #0]
 801b646:	4a35      	ldr	r2, [pc, #212]	@ (801b71c <DMA_CalcBaseAndBitshift+0x13c>)
 801b648:	4293      	cmp	r3, r2
 801b64a:	d01d      	beq.n	801b688 <DMA_CalcBaseAndBitshift+0xa8>
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	4a33      	ldr	r2, [pc, #204]	@ (801b720 <DMA_CalcBaseAndBitshift+0x140>)
 801b652:	4293      	cmp	r3, r2
 801b654:	d018      	beq.n	801b688 <DMA_CalcBaseAndBitshift+0xa8>
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	681b      	ldr	r3, [r3, #0]
 801b65a:	4a32      	ldr	r2, [pc, #200]	@ (801b724 <DMA_CalcBaseAndBitshift+0x144>)
 801b65c:	4293      	cmp	r3, r2
 801b65e:	d013      	beq.n	801b688 <DMA_CalcBaseAndBitshift+0xa8>
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	681b      	ldr	r3, [r3, #0]
 801b664:	4a30      	ldr	r2, [pc, #192]	@ (801b728 <DMA_CalcBaseAndBitshift+0x148>)
 801b666:	4293      	cmp	r3, r2
 801b668:	d00e      	beq.n	801b688 <DMA_CalcBaseAndBitshift+0xa8>
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	681b      	ldr	r3, [r3, #0]
 801b66e:	4a2f      	ldr	r2, [pc, #188]	@ (801b72c <DMA_CalcBaseAndBitshift+0x14c>)
 801b670:	4293      	cmp	r3, r2
 801b672:	d009      	beq.n	801b688 <DMA_CalcBaseAndBitshift+0xa8>
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	681b      	ldr	r3, [r3, #0]
 801b678:	4a2d      	ldr	r2, [pc, #180]	@ (801b730 <DMA_CalcBaseAndBitshift+0x150>)
 801b67a:	4293      	cmp	r3, r2
 801b67c:	d004      	beq.n	801b688 <DMA_CalcBaseAndBitshift+0xa8>
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	681b      	ldr	r3, [r3, #0]
 801b682:	4a2c      	ldr	r2, [pc, #176]	@ (801b734 <DMA_CalcBaseAndBitshift+0x154>)
 801b684:	4293      	cmp	r3, r2
 801b686:	d101      	bne.n	801b68c <DMA_CalcBaseAndBitshift+0xac>
 801b688:	2301      	movs	r3, #1
 801b68a:	e000      	b.n	801b68e <DMA_CalcBaseAndBitshift+0xae>
 801b68c:	2300      	movs	r3, #0
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d024      	beq.n	801b6dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	b2db      	uxtb	r3, r3
 801b698:	3b10      	subs	r3, #16
 801b69a:	4a27      	ldr	r2, [pc, #156]	@ (801b738 <DMA_CalcBaseAndBitshift+0x158>)
 801b69c:	fba2 2303 	umull	r2, r3, r2, r3
 801b6a0:	091b      	lsrs	r3, r3, #4
 801b6a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801b6a4:	68fb      	ldr	r3, [r7, #12]
 801b6a6:	f003 0307 	and.w	r3, r3, #7
 801b6aa:	4a24      	ldr	r2, [pc, #144]	@ (801b73c <DMA_CalcBaseAndBitshift+0x15c>)
 801b6ac:	5cd3      	ldrb	r3, [r2, r3]
 801b6ae:	461a      	mov	r2, r3
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801b6b4:	68fb      	ldr	r3, [r7, #12]
 801b6b6:	2b03      	cmp	r3, #3
 801b6b8:	d908      	bls.n	801b6cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	681b      	ldr	r3, [r3, #0]
 801b6be:	461a      	mov	r2, r3
 801b6c0:	4b1f      	ldr	r3, [pc, #124]	@ (801b740 <DMA_CalcBaseAndBitshift+0x160>)
 801b6c2:	4013      	ands	r3, r2
 801b6c4:	1d1a      	adds	r2, r3, #4
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	659a      	str	r2, [r3, #88]	@ 0x58
 801b6ca:	e00d      	b.n	801b6e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	681b      	ldr	r3, [r3, #0]
 801b6d0:	461a      	mov	r2, r3
 801b6d2:	4b1b      	ldr	r3, [pc, #108]	@ (801b740 <DMA_CalcBaseAndBitshift+0x160>)
 801b6d4:	4013      	ands	r3, r2
 801b6d6:	687a      	ldr	r2, [r7, #4]
 801b6d8:	6593      	str	r3, [r2, #88]	@ 0x58
 801b6da:	e005      	b.n	801b6e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801b6ec:	4618      	mov	r0, r3
 801b6ee:	3714      	adds	r7, #20
 801b6f0:	46bd      	mov	sp, r7
 801b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6f6:	4770      	bx	lr
 801b6f8:	40020010 	.word	0x40020010
 801b6fc:	40020028 	.word	0x40020028
 801b700:	40020040 	.word	0x40020040
 801b704:	40020058 	.word	0x40020058
 801b708:	40020070 	.word	0x40020070
 801b70c:	40020088 	.word	0x40020088
 801b710:	400200a0 	.word	0x400200a0
 801b714:	400200b8 	.word	0x400200b8
 801b718:	40020410 	.word	0x40020410
 801b71c:	40020428 	.word	0x40020428
 801b720:	40020440 	.word	0x40020440
 801b724:	40020458 	.word	0x40020458
 801b728:	40020470 	.word	0x40020470
 801b72c:	40020488 	.word	0x40020488
 801b730:	400204a0 	.word	0x400204a0
 801b734:	400204b8 	.word	0x400204b8
 801b738:	aaaaaaab 	.word	0xaaaaaaab
 801b73c:	08027044 	.word	0x08027044
 801b740:	fffffc00 	.word	0xfffffc00

0801b744 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801b744:	b480      	push	{r7}
 801b746:	b085      	sub	sp, #20
 801b748:	af00      	add	r7, sp, #0
 801b74a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b74c:	2300      	movs	r3, #0
 801b74e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	699b      	ldr	r3, [r3, #24]
 801b754:	2b00      	cmp	r3, #0
 801b756:	d120      	bne.n	801b79a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b75c:	2b03      	cmp	r3, #3
 801b75e:	d858      	bhi.n	801b812 <DMA_CheckFifoParam+0xce>
 801b760:	a201      	add	r2, pc, #4	@ (adr r2, 801b768 <DMA_CheckFifoParam+0x24>)
 801b762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b766:	bf00      	nop
 801b768:	0801b779 	.word	0x0801b779
 801b76c:	0801b78b 	.word	0x0801b78b
 801b770:	0801b779 	.word	0x0801b779
 801b774:	0801b813 	.word	0x0801b813
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b77c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801b780:	2b00      	cmp	r3, #0
 801b782:	d048      	beq.n	801b816 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801b784:	2301      	movs	r3, #1
 801b786:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b788:	e045      	b.n	801b816 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b78e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801b792:	d142      	bne.n	801b81a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801b794:	2301      	movs	r3, #1
 801b796:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b798:	e03f      	b.n	801b81a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	699b      	ldr	r3, [r3, #24]
 801b79e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801b7a2:	d123      	bne.n	801b7ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b7a8:	2b03      	cmp	r3, #3
 801b7aa:	d838      	bhi.n	801b81e <DMA_CheckFifoParam+0xda>
 801b7ac:	a201      	add	r2, pc, #4	@ (adr r2, 801b7b4 <DMA_CheckFifoParam+0x70>)
 801b7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b7b2:	bf00      	nop
 801b7b4:	0801b7c5 	.word	0x0801b7c5
 801b7b8:	0801b7cb 	.word	0x0801b7cb
 801b7bc:	0801b7c5 	.word	0x0801b7c5
 801b7c0:	0801b7dd 	.word	0x0801b7dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801b7c4:	2301      	movs	r3, #1
 801b7c6:	73fb      	strb	r3, [r7, #15]
        break;
 801b7c8:	e030      	b.n	801b82c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b7ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	d025      	beq.n	801b822 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801b7d6:	2301      	movs	r3, #1
 801b7d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b7da:	e022      	b.n	801b822 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b7e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801b7e4:	d11f      	bne.n	801b826 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801b7e6:	2301      	movs	r3, #1
 801b7e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b7ea:	e01c      	b.n	801b826 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b7f0:	2b02      	cmp	r3, #2
 801b7f2:	d902      	bls.n	801b7fa <DMA_CheckFifoParam+0xb6>
 801b7f4:	2b03      	cmp	r3, #3
 801b7f6:	d003      	beq.n	801b800 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801b7f8:	e018      	b.n	801b82c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801b7fa:	2301      	movs	r3, #1
 801b7fc:	73fb      	strb	r3, [r7, #15]
        break;
 801b7fe:	e015      	b.n	801b82c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b800:	687b      	ldr	r3, [r7, #4]
 801b802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b804:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d00e      	beq.n	801b82a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801b80c:	2301      	movs	r3, #1
 801b80e:	73fb      	strb	r3, [r7, #15]
    break;
 801b810:	e00b      	b.n	801b82a <DMA_CheckFifoParam+0xe6>
        break;
 801b812:	bf00      	nop
 801b814:	e00a      	b.n	801b82c <DMA_CheckFifoParam+0xe8>
        break;
 801b816:	bf00      	nop
 801b818:	e008      	b.n	801b82c <DMA_CheckFifoParam+0xe8>
        break;
 801b81a:	bf00      	nop
 801b81c:	e006      	b.n	801b82c <DMA_CheckFifoParam+0xe8>
        break;
 801b81e:	bf00      	nop
 801b820:	e004      	b.n	801b82c <DMA_CheckFifoParam+0xe8>
        break;
 801b822:	bf00      	nop
 801b824:	e002      	b.n	801b82c <DMA_CheckFifoParam+0xe8>
        break;
 801b826:	bf00      	nop
 801b828:	e000      	b.n	801b82c <DMA_CheckFifoParam+0xe8>
    break;
 801b82a:	bf00      	nop
    }
  }

  return status;
 801b82c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b82e:	4618      	mov	r0, r3
 801b830:	3714      	adds	r7, #20
 801b832:	46bd      	mov	sp, r7
 801b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b838:	4770      	bx	lr
 801b83a:	bf00      	nop

0801b83c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b83c:	b480      	push	{r7}
 801b83e:	b085      	sub	sp, #20
 801b840:	af00      	add	r7, sp, #0
 801b842:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	681b      	ldr	r3, [r3, #0]
 801b848:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801b84a:	687b      	ldr	r3, [r7, #4]
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	4a38      	ldr	r2, [pc, #224]	@ (801b930 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801b850:	4293      	cmp	r3, r2
 801b852:	d022      	beq.n	801b89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	4a36      	ldr	r2, [pc, #216]	@ (801b934 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801b85a:	4293      	cmp	r3, r2
 801b85c:	d01d      	beq.n	801b89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	681b      	ldr	r3, [r3, #0]
 801b862:	4a35      	ldr	r2, [pc, #212]	@ (801b938 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801b864:	4293      	cmp	r3, r2
 801b866:	d018      	beq.n	801b89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	681b      	ldr	r3, [r3, #0]
 801b86c:	4a33      	ldr	r2, [pc, #204]	@ (801b93c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801b86e:	4293      	cmp	r3, r2
 801b870:	d013      	beq.n	801b89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	4a32      	ldr	r2, [pc, #200]	@ (801b940 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801b878:	4293      	cmp	r3, r2
 801b87a:	d00e      	beq.n	801b89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	681b      	ldr	r3, [r3, #0]
 801b880:	4a30      	ldr	r2, [pc, #192]	@ (801b944 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801b882:	4293      	cmp	r3, r2
 801b884:	d009      	beq.n	801b89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	681b      	ldr	r3, [r3, #0]
 801b88a:	4a2f      	ldr	r2, [pc, #188]	@ (801b948 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801b88c:	4293      	cmp	r3, r2
 801b88e:	d004      	beq.n	801b89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	4a2d      	ldr	r2, [pc, #180]	@ (801b94c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801b896:	4293      	cmp	r3, r2
 801b898:	d101      	bne.n	801b89e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801b89a:	2301      	movs	r3, #1
 801b89c:	e000      	b.n	801b8a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801b89e:	2300      	movs	r3, #0
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d01a      	beq.n	801b8da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	681b      	ldr	r3, [r3, #0]
 801b8a8:	b2db      	uxtb	r3, r3
 801b8aa:	3b08      	subs	r3, #8
 801b8ac:	4a28      	ldr	r2, [pc, #160]	@ (801b950 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801b8ae:	fba2 2303 	umull	r2, r3, r2, r3
 801b8b2:	091b      	lsrs	r3, r3, #4
 801b8b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801b8b6:	68fa      	ldr	r2, [r7, #12]
 801b8b8:	4b26      	ldr	r3, [pc, #152]	@ (801b954 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801b8ba:	4413      	add	r3, r2
 801b8bc:	009b      	lsls	r3, r3, #2
 801b8be:	461a      	mov	r2, r3
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	4a24      	ldr	r2, [pc, #144]	@ (801b958 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801b8c8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801b8ca:	68fb      	ldr	r3, [r7, #12]
 801b8cc:	f003 031f 	and.w	r3, r3, #31
 801b8d0:	2201      	movs	r2, #1
 801b8d2:	409a      	lsls	r2, r3
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801b8d8:	e024      	b.n	801b924 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	681b      	ldr	r3, [r3, #0]
 801b8de:	b2db      	uxtb	r3, r3
 801b8e0:	3b10      	subs	r3, #16
 801b8e2:	4a1e      	ldr	r2, [pc, #120]	@ (801b95c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801b8e4:	fba2 2303 	umull	r2, r3, r2, r3
 801b8e8:	091b      	lsrs	r3, r3, #4
 801b8ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801b8ec:	68bb      	ldr	r3, [r7, #8]
 801b8ee:	4a1c      	ldr	r2, [pc, #112]	@ (801b960 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801b8f0:	4293      	cmp	r3, r2
 801b8f2:	d806      	bhi.n	801b902 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801b8f4:	68bb      	ldr	r3, [r7, #8]
 801b8f6:	4a1b      	ldr	r2, [pc, #108]	@ (801b964 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801b8f8:	4293      	cmp	r3, r2
 801b8fa:	d902      	bls.n	801b902 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801b8fc:	68fb      	ldr	r3, [r7, #12]
 801b8fe:	3308      	adds	r3, #8
 801b900:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801b902:	68fa      	ldr	r2, [r7, #12]
 801b904:	4b18      	ldr	r3, [pc, #96]	@ (801b968 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801b906:	4413      	add	r3, r2
 801b908:	009b      	lsls	r3, r3, #2
 801b90a:	461a      	mov	r2, r3
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	4a16      	ldr	r2, [pc, #88]	@ (801b96c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801b914:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801b916:	68fb      	ldr	r3, [r7, #12]
 801b918:	f003 031f 	and.w	r3, r3, #31
 801b91c:	2201      	movs	r2, #1
 801b91e:	409a      	lsls	r2, r3
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801b924:	bf00      	nop
 801b926:	3714      	adds	r7, #20
 801b928:	46bd      	mov	sp, r7
 801b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b92e:	4770      	bx	lr
 801b930:	58025408 	.word	0x58025408
 801b934:	5802541c 	.word	0x5802541c
 801b938:	58025430 	.word	0x58025430
 801b93c:	58025444 	.word	0x58025444
 801b940:	58025458 	.word	0x58025458
 801b944:	5802546c 	.word	0x5802546c
 801b948:	58025480 	.word	0x58025480
 801b94c:	58025494 	.word	0x58025494
 801b950:	cccccccd 	.word	0xcccccccd
 801b954:	16009600 	.word	0x16009600
 801b958:	58025880 	.word	0x58025880
 801b95c:	aaaaaaab 	.word	0xaaaaaaab
 801b960:	400204b8 	.word	0x400204b8
 801b964:	4002040f 	.word	0x4002040f
 801b968:	10008200 	.word	0x10008200
 801b96c:	40020880 	.word	0x40020880

0801b970 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b970:	b480      	push	{r7}
 801b972:	b085      	sub	sp, #20
 801b974:	af00      	add	r7, sp, #0
 801b976:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	685b      	ldr	r3, [r3, #4]
 801b97c:	b2db      	uxtb	r3, r3
 801b97e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801b980:	68fb      	ldr	r3, [r7, #12]
 801b982:	2b00      	cmp	r3, #0
 801b984:	d04a      	beq.n	801ba1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801b986:	68fb      	ldr	r3, [r7, #12]
 801b988:	2b08      	cmp	r3, #8
 801b98a:	d847      	bhi.n	801ba1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	681b      	ldr	r3, [r3, #0]
 801b990:	4a25      	ldr	r2, [pc, #148]	@ (801ba28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801b992:	4293      	cmp	r3, r2
 801b994:	d022      	beq.n	801b9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	4a24      	ldr	r2, [pc, #144]	@ (801ba2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801b99c:	4293      	cmp	r3, r2
 801b99e:	d01d      	beq.n	801b9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	4a22      	ldr	r2, [pc, #136]	@ (801ba30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801b9a6:	4293      	cmp	r3, r2
 801b9a8:	d018      	beq.n	801b9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	4a21      	ldr	r2, [pc, #132]	@ (801ba34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801b9b0:	4293      	cmp	r3, r2
 801b9b2:	d013      	beq.n	801b9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	4a1f      	ldr	r2, [pc, #124]	@ (801ba38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801b9ba:	4293      	cmp	r3, r2
 801b9bc:	d00e      	beq.n	801b9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	681b      	ldr	r3, [r3, #0]
 801b9c2:	4a1e      	ldr	r2, [pc, #120]	@ (801ba3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801b9c4:	4293      	cmp	r3, r2
 801b9c6:	d009      	beq.n	801b9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	4a1c      	ldr	r2, [pc, #112]	@ (801ba40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801b9ce:	4293      	cmp	r3, r2
 801b9d0:	d004      	beq.n	801b9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	4a1b      	ldr	r2, [pc, #108]	@ (801ba44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801b9d8:	4293      	cmp	r3, r2
 801b9da:	d101      	bne.n	801b9e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801b9dc:	2301      	movs	r3, #1
 801b9de:	e000      	b.n	801b9e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801b9e0:	2300      	movs	r3, #0
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d00a      	beq.n	801b9fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801b9e6:	68fa      	ldr	r2, [r7, #12]
 801b9e8:	4b17      	ldr	r3, [pc, #92]	@ (801ba48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801b9ea:	4413      	add	r3, r2
 801b9ec:	009b      	lsls	r3, r3, #2
 801b9ee:	461a      	mov	r2, r3
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801b9f4:	687b      	ldr	r3, [r7, #4]
 801b9f6:	4a15      	ldr	r2, [pc, #84]	@ (801ba4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801b9f8:	671a      	str	r2, [r3, #112]	@ 0x70
 801b9fa:	e009      	b.n	801ba10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b9fc:	68fa      	ldr	r2, [r7, #12]
 801b9fe:	4b14      	ldr	r3, [pc, #80]	@ (801ba50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801ba00:	4413      	add	r3, r2
 801ba02:	009b      	lsls	r3, r3, #2
 801ba04:	461a      	mov	r2, r3
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	4a11      	ldr	r2, [pc, #68]	@ (801ba54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801ba0e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801ba10:	68fb      	ldr	r3, [r7, #12]
 801ba12:	3b01      	subs	r3, #1
 801ba14:	2201      	movs	r2, #1
 801ba16:	409a      	lsls	r2, r3
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801ba1c:	bf00      	nop
 801ba1e:	3714      	adds	r7, #20
 801ba20:	46bd      	mov	sp, r7
 801ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba26:	4770      	bx	lr
 801ba28:	58025408 	.word	0x58025408
 801ba2c:	5802541c 	.word	0x5802541c
 801ba30:	58025430 	.word	0x58025430
 801ba34:	58025444 	.word	0x58025444
 801ba38:	58025458 	.word	0x58025458
 801ba3c:	5802546c 	.word	0x5802546c
 801ba40:	58025480 	.word	0x58025480
 801ba44:	58025494 	.word	0x58025494
 801ba48:	1600963f 	.word	0x1600963f
 801ba4c:	58025940 	.word	0x58025940
 801ba50:	1000823f 	.word	0x1000823f
 801ba54:	40020940 	.word	0x40020940

0801ba58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801ba58:	b480      	push	{r7}
 801ba5a:	b089      	sub	sp, #36	@ 0x24
 801ba5c:	af00      	add	r7, sp, #0
 801ba5e:	6078      	str	r0, [r7, #4]
 801ba60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801ba62:	2300      	movs	r3, #0
 801ba64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801ba66:	4b89      	ldr	r3, [pc, #548]	@ (801bc8c <HAL_GPIO_Init+0x234>)
 801ba68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801ba6a:	e194      	b.n	801bd96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801ba6c:	683b      	ldr	r3, [r7, #0]
 801ba6e:	681a      	ldr	r2, [r3, #0]
 801ba70:	2101      	movs	r1, #1
 801ba72:	69fb      	ldr	r3, [r7, #28]
 801ba74:	fa01 f303 	lsl.w	r3, r1, r3
 801ba78:	4013      	ands	r3, r2
 801ba7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801ba7c:	693b      	ldr	r3, [r7, #16]
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	f000 8186 	beq.w	801bd90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801ba84:	683b      	ldr	r3, [r7, #0]
 801ba86:	685b      	ldr	r3, [r3, #4]
 801ba88:	f003 0303 	and.w	r3, r3, #3
 801ba8c:	2b01      	cmp	r3, #1
 801ba8e:	d005      	beq.n	801ba9c <HAL_GPIO_Init+0x44>
 801ba90:	683b      	ldr	r3, [r7, #0]
 801ba92:	685b      	ldr	r3, [r3, #4]
 801ba94:	f003 0303 	and.w	r3, r3, #3
 801ba98:	2b02      	cmp	r3, #2
 801ba9a:	d130      	bne.n	801bafe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	689b      	ldr	r3, [r3, #8]
 801baa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801baa2:	69fb      	ldr	r3, [r7, #28]
 801baa4:	005b      	lsls	r3, r3, #1
 801baa6:	2203      	movs	r2, #3
 801baa8:	fa02 f303 	lsl.w	r3, r2, r3
 801baac:	43db      	mvns	r3, r3
 801baae:	69ba      	ldr	r2, [r7, #24]
 801bab0:	4013      	ands	r3, r2
 801bab2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801bab4:	683b      	ldr	r3, [r7, #0]
 801bab6:	68da      	ldr	r2, [r3, #12]
 801bab8:	69fb      	ldr	r3, [r7, #28]
 801baba:	005b      	lsls	r3, r3, #1
 801babc:	fa02 f303 	lsl.w	r3, r2, r3
 801bac0:	69ba      	ldr	r2, [r7, #24]
 801bac2:	4313      	orrs	r3, r2
 801bac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	69ba      	ldr	r2, [r7, #24]
 801baca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	685b      	ldr	r3, [r3, #4]
 801bad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801bad2:	2201      	movs	r2, #1
 801bad4:	69fb      	ldr	r3, [r7, #28]
 801bad6:	fa02 f303 	lsl.w	r3, r2, r3
 801bada:	43db      	mvns	r3, r3
 801badc:	69ba      	ldr	r2, [r7, #24]
 801bade:	4013      	ands	r3, r2
 801bae0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801bae2:	683b      	ldr	r3, [r7, #0]
 801bae4:	685b      	ldr	r3, [r3, #4]
 801bae6:	091b      	lsrs	r3, r3, #4
 801bae8:	f003 0201 	and.w	r2, r3, #1
 801baec:	69fb      	ldr	r3, [r7, #28]
 801baee:	fa02 f303 	lsl.w	r3, r2, r3
 801baf2:	69ba      	ldr	r2, [r7, #24]
 801baf4:	4313      	orrs	r3, r2
 801baf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	69ba      	ldr	r2, [r7, #24]
 801bafc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801bafe:	683b      	ldr	r3, [r7, #0]
 801bb00:	685b      	ldr	r3, [r3, #4]
 801bb02:	f003 0303 	and.w	r3, r3, #3
 801bb06:	2b03      	cmp	r3, #3
 801bb08:	d017      	beq.n	801bb3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	68db      	ldr	r3, [r3, #12]
 801bb0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801bb10:	69fb      	ldr	r3, [r7, #28]
 801bb12:	005b      	lsls	r3, r3, #1
 801bb14:	2203      	movs	r2, #3
 801bb16:	fa02 f303 	lsl.w	r3, r2, r3
 801bb1a:	43db      	mvns	r3, r3
 801bb1c:	69ba      	ldr	r2, [r7, #24]
 801bb1e:	4013      	ands	r3, r2
 801bb20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801bb22:	683b      	ldr	r3, [r7, #0]
 801bb24:	689a      	ldr	r2, [r3, #8]
 801bb26:	69fb      	ldr	r3, [r7, #28]
 801bb28:	005b      	lsls	r3, r3, #1
 801bb2a:	fa02 f303 	lsl.w	r3, r2, r3
 801bb2e:	69ba      	ldr	r2, [r7, #24]
 801bb30:	4313      	orrs	r3, r2
 801bb32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	69ba      	ldr	r2, [r7, #24]
 801bb38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801bb3a:	683b      	ldr	r3, [r7, #0]
 801bb3c:	685b      	ldr	r3, [r3, #4]
 801bb3e:	f003 0303 	and.w	r3, r3, #3
 801bb42:	2b02      	cmp	r3, #2
 801bb44:	d123      	bne.n	801bb8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801bb46:	69fb      	ldr	r3, [r7, #28]
 801bb48:	08da      	lsrs	r2, r3, #3
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	3208      	adds	r2, #8
 801bb4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bb52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801bb54:	69fb      	ldr	r3, [r7, #28]
 801bb56:	f003 0307 	and.w	r3, r3, #7
 801bb5a:	009b      	lsls	r3, r3, #2
 801bb5c:	220f      	movs	r2, #15
 801bb5e:	fa02 f303 	lsl.w	r3, r2, r3
 801bb62:	43db      	mvns	r3, r3
 801bb64:	69ba      	ldr	r2, [r7, #24]
 801bb66:	4013      	ands	r3, r2
 801bb68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801bb6a:	683b      	ldr	r3, [r7, #0]
 801bb6c:	691a      	ldr	r2, [r3, #16]
 801bb6e:	69fb      	ldr	r3, [r7, #28]
 801bb70:	f003 0307 	and.w	r3, r3, #7
 801bb74:	009b      	lsls	r3, r3, #2
 801bb76:	fa02 f303 	lsl.w	r3, r2, r3
 801bb7a:	69ba      	ldr	r2, [r7, #24]
 801bb7c:	4313      	orrs	r3, r2
 801bb7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801bb80:	69fb      	ldr	r3, [r7, #28]
 801bb82:	08da      	lsrs	r2, r3, #3
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	3208      	adds	r2, #8
 801bb88:	69b9      	ldr	r1, [r7, #24]
 801bb8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801bb94:	69fb      	ldr	r3, [r7, #28]
 801bb96:	005b      	lsls	r3, r3, #1
 801bb98:	2203      	movs	r2, #3
 801bb9a:	fa02 f303 	lsl.w	r3, r2, r3
 801bb9e:	43db      	mvns	r3, r3
 801bba0:	69ba      	ldr	r2, [r7, #24]
 801bba2:	4013      	ands	r3, r2
 801bba4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801bba6:	683b      	ldr	r3, [r7, #0]
 801bba8:	685b      	ldr	r3, [r3, #4]
 801bbaa:	f003 0203 	and.w	r2, r3, #3
 801bbae:	69fb      	ldr	r3, [r7, #28]
 801bbb0:	005b      	lsls	r3, r3, #1
 801bbb2:	fa02 f303 	lsl.w	r3, r2, r3
 801bbb6:	69ba      	ldr	r2, [r7, #24]
 801bbb8:	4313      	orrs	r3, r2
 801bbba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	69ba      	ldr	r2, [r7, #24]
 801bbc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801bbc2:	683b      	ldr	r3, [r7, #0]
 801bbc4:	685b      	ldr	r3, [r3, #4]
 801bbc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	f000 80e0 	beq.w	801bd90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bbd0:	4b2f      	ldr	r3, [pc, #188]	@ (801bc90 <HAL_GPIO_Init+0x238>)
 801bbd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801bbd6:	4a2e      	ldr	r2, [pc, #184]	@ (801bc90 <HAL_GPIO_Init+0x238>)
 801bbd8:	f043 0302 	orr.w	r3, r3, #2
 801bbdc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801bbe0:	4b2b      	ldr	r3, [pc, #172]	@ (801bc90 <HAL_GPIO_Init+0x238>)
 801bbe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801bbe6:	f003 0302 	and.w	r3, r3, #2
 801bbea:	60fb      	str	r3, [r7, #12]
 801bbec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801bbee:	4a29      	ldr	r2, [pc, #164]	@ (801bc94 <HAL_GPIO_Init+0x23c>)
 801bbf0:	69fb      	ldr	r3, [r7, #28]
 801bbf2:	089b      	lsrs	r3, r3, #2
 801bbf4:	3302      	adds	r3, #2
 801bbf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bbfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801bbfc:	69fb      	ldr	r3, [r7, #28]
 801bbfe:	f003 0303 	and.w	r3, r3, #3
 801bc02:	009b      	lsls	r3, r3, #2
 801bc04:	220f      	movs	r2, #15
 801bc06:	fa02 f303 	lsl.w	r3, r2, r3
 801bc0a:	43db      	mvns	r3, r3
 801bc0c:	69ba      	ldr	r2, [r7, #24]
 801bc0e:	4013      	ands	r3, r2
 801bc10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	4a20      	ldr	r2, [pc, #128]	@ (801bc98 <HAL_GPIO_Init+0x240>)
 801bc16:	4293      	cmp	r3, r2
 801bc18:	d052      	beq.n	801bcc0 <HAL_GPIO_Init+0x268>
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	4a1f      	ldr	r2, [pc, #124]	@ (801bc9c <HAL_GPIO_Init+0x244>)
 801bc1e:	4293      	cmp	r3, r2
 801bc20:	d031      	beq.n	801bc86 <HAL_GPIO_Init+0x22e>
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	4a1e      	ldr	r2, [pc, #120]	@ (801bca0 <HAL_GPIO_Init+0x248>)
 801bc26:	4293      	cmp	r3, r2
 801bc28:	d02b      	beq.n	801bc82 <HAL_GPIO_Init+0x22a>
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	4a1d      	ldr	r2, [pc, #116]	@ (801bca4 <HAL_GPIO_Init+0x24c>)
 801bc2e:	4293      	cmp	r3, r2
 801bc30:	d025      	beq.n	801bc7e <HAL_GPIO_Init+0x226>
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	4a1c      	ldr	r2, [pc, #112]	@ (801bca8 <HAL_GPIO_Init+0x250>)
 801bc36:	4293      	cmp	r3, r2
 801bc38:	d01f      	beq.n	801bc7a <HAL_GPIO_Init+0x222>
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	4a1b      	ldr	r2, [pc, #108]	@ (801bcac <HAL_GPIO_Init+0x254>)
 801bc3e:	4293      	cmp	r3, r2
 801bc40:	d019      	beq.n	801bc76 <HAL_GPIO_Init+0x21e>
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	4a1a      	ldr	r2, [pc, #104]	@ (801bcb0 <HAL_GPIO_Init+0x258>)
 801bc46:	4293      	cmp	r3, r2
 801bc48:	d013      	beq.n	801bc72 <HAL_GPIO_Init+0x21a>
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	4a19      	ldr	r2, [pc, #100]	@ (801bcb4 <HAL_GPIO_Init+0x25c>)
 801bc4e:	4293      	cmp	r3, r2
 801bc50:	d00d      	beq.n	801bc6e <HAL_GPIO_Init+0x216>
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	4a18      	ldr	r2, [pc, #96]	@ (801bcb8 <HAL_GPIO_Init+0x260>)
 801bc56:	4293      	cmp	r3, r2
 801bc58:	d007      	beq.n	801bc6a <HAL_GPIO_Init+0x212>
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	4a17      	ldr	r2, [pc, #92]	@ (801bcbc <HAL_GPIO_Init+0x264>)
 801bc5e:	4293      	cmp	r3, r2
 801bc60:	d101      	bne.n	801bc66 <HAL_GPIO_Init+0x20e>
 801bc62:	2309      	movs	r3, #9
 801bc64:	e02d      	b.n	801bcc2 <HAL_GPIO_Init+0x26a>
 801bc66:	230a      	movs	r3, #10
 801bc68:	e02b      	b.n	801bcc2 <HAL_GPIO_Init+0x26a>
 801bc6a:	2308      	movs	r3, #8
 801bc6c:	e029      	b.n	801bcc2 <HAL_GPIO_Init+0x26a>
 801bc6e:	2307      	movs	r3, #7
 801bc70:	e027      	b.n	801bcc2 <HAL_GPIO_Init+0x26a>
 801bc72:	2306      	movs	r3, #6
 801bc74:	e025      	b.n	801bcc2 <HAL_GPIO_Init+0x26a>
 801bc76:	2305      	movs	r3, #5
 801bc78:	e023      	b.n	801bcc2 <HAL_GPIO_Init+0x26a>
 801bc7a:	2304      	movs	r3, #4
 801bc7c:	e021      	b.n	801bcc2 <HAL_GPIO_Init+0x26a>
 801bc7e:	2303      	movs	r3, #3
 801bc80:	e01f      	b.n	801bcc2 <HAL_GPIO_Init+0x26a>
 801bc82:	2302      	movs	r3, #2
 801bc84:	e01d      	b.n	801bcc2 <HAL_GPIO_Init+0x26a>
 801bc86:	2301      	movs	r3, #1
 801bc88:	e01b      	b.n	801bcc2 <HAL_GPIO_Init+0x26a>
 801bc8a:	bf00      	nop
 801bc8c:	58000080 	.word	0x58000080
 801bc90:	58024400 	.word	0x58024400
 801bc94:	58000400 	.word	0x58000400
 801bc98:	58020000 	.word	0x58020000
 801bc9c:	58020400 	.word	0x58020400
 801bca0:	58020800 	.word	0x58020800
 801bca4:	58020c00 	.word	0x58020c00
 801bca8:	58021000 	.word	0x58021000
 801bcac:	58021400 	.word	0x58021400
 801bcb0:	58021800 	.word	0x58021800
 801bcb4:	58021c00 	.word	0x58021c00
 801bcb8:	58022000 	.word	0x58022000
 801bcbc:	58022400 	.word	0x58022400
 801bcc0:	2300      	movs	r3, #0
 801bcc2:	69fa      	ldr	r2, [r7, #28]
 801bcc4:	f002 0203 	and.w	r2, r2, #3
 801bcc8:	0092      	lsls	r2, r2, #2
 801bcca:	4093      	lsls	r3, r2
 801bccc:	69ba      	ldr	r2, [r7, #24]
 801bcce:	4313      	orrs	r3, r2
 801bcd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801bcd2:	4938      	ldr	r1, [pc, #224]	@ (801bdb4 <HAL_GPIO_Init+0x35c>)
 801bcd4:	69fb      	ldr	r3, [r7, #28]
 801bcd6:	089b      	lsrs	r3, r3, #2
 801bcd8:	3302      	adds	r3, #2
 801bcda:	69ba      	ldr	r2, [r7, #24]
 801bcdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801bce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801bce4:	681b      	ldr	r3, [r3, #0]
 801bce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801bce8:	693b      	ldr	r3, [r7, #16]
 801bcea:	43db      	mvns	r3, r3
 801bcec:	69ba      	ldr	r2, [r7, #24]
 801bcee:	4013      	ands	r3, r2
 801bcf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801bcf2:	683b      	ldr	r3, [r7, #0]
 801bcf4:	685b      	ldr	r3, [r3, #4]
 801bcf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d003      	beq.n	801bd06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801bcfe:	69ba      	ldr	r2, [r7, #24]
 801bd00:	693b      	ldr	r3, [r7, #16]
 801bd02:	4313      	orrs	r3, r2
 801bd04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801bd06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801bd0a:	69bb      	ldr	r3, [r7, #24]
 801bd0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801bd0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801bd12:	685b      	ldr	r3, [r3, #4]
 801bd14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801bd16:	693b      	ldr	r3, [r7, #16]
 801bd18:	43db      	mvns	r3, r3
 801bd1a:	69ba      	ldr	r2, [r7, #24]
 801bd1c:	4013      	ands	r3, r2
 801bd1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801bd20:	683b      	ldr	r3, [r7, #0]
 801bd22:	685b      	ldr	r3, [r3, #4]
 801bd24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d003      	beq.n	801bd34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801bd2c:	69ba      	ldr	r2, [r7, #24]
 801bd2e:	693b      	ldr	r3, [r7, #16]
 801bd30:	4313      	orrs	r3, r2
 801bd32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801bd34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801bd38:	69bb      	ldr	r3, [r7, #24]
 801bd3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801bd3c:	697b      	ldr	r3, [r7, #20]
 801bd3e:	685b      	ldr	r3, [r3, #4]
 801bd40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801bd42:	693b      	ldr	r3, [r7, #16]
 801bd44:	43db      	mvns	r3, r3
 801bd46:	69ba      	ldr	r2, [r7, #24]
 801bd48:	4013      	ands	r3, r2
 801bd4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801bd4c:	683b      	ldr	r3, [r7, #0]
 801bd4e:	685b      	ldr	r3, [r3, #4]
 801bd50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d003      	beq.n	801bd60 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801bd58:	69ba      	ldr	r2, [r7, #24]
 801bd5a:	693b      	ldr	r3, [r7, #16]
 801bd5c:	4313      	orrs	r3, r2
 801bd5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801bd60:	697b      	ldr	r3, [r7, #20]
 801bd62:	69ba      	ldr	r2, [r7, #24]
 801bd64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801bd66:	697b      	ldr	r3, [r7, #20]
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801bd6c:	693b      	ldr	r3, [r7, #16]
 801bd6e:	43db      	mvns	r3, r3
 801bd70:	69ba      	ldr	r2, [r7, #24]
 801bd72:	4013      	ands	r3, r2
 801bd74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801bd76:	683b      	ldr	r3, [r7, #0]
 801bd78:	685b      	ldr	r3, [r3, #4]
 801bd7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d003      	beq.n	801bd8a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801bd82:	69ba      	ldr	r2, [r7, #24]
 801bd84:	693b      	ldr	r3, [r7, #16]
 801bd86:	4313      	orrs	r3, r2
 801bd88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801bd8a:	697b      	ldr	r3, [r7, #20]
 801bd8c:	69ba      	ldr	r2, [r7, #24]
 801bd8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801bd90:	69fb      	ldr	r3, [r7, #28]
 801bd92:	3301      	adds	r3, #1
 801bd94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801bd96:	683b      	ldr	r3, [r7, #0]
 801bd98:	681a      	ldr	r2, [r3, #0]
 801bd9a:	69fb      	ldr	r3, [r7, #28]
 801bd9c:	fa22 f303 	lsr.w	r3, r2, r3
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	f47f ae63 	bne.w	801ba6c <HAL_GPIO_Init+0x14>
  }
}
 801bda6:	bf00      	nop
 801bda8:	bf00      	nop
 801bdaa:	3724      	adds	r7, #36	@ 0x24
 801bdac:	46bd      	mov	sp, r7
 801bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdb2:	4770      	bx	lr
 801bdb4:	58000400 	.word	0x58000400

0801bdb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801bdb8:	b480      	push	{r7}
 801bdba:	b083      	sub	sp, #12
 801bdbc:	af00      	add	r7, sp, #0
 801bdbe:	6078      	str	r0, [r7, #4]
 801bdc0:	460b      	mov	r3, r1
 801bdc2:	807b      	strh	r3, [r7, #2]
 801bdc4:	4613      	mov	r3, r2
 801bdc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801bdc8:	787b      	ldrb	r3, [r7, #1]
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d003      	beq.n	801bdd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801bdce:	887a      	ldrh	r2, [r7, #2]
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801bdd4:	e003      	b.n	801bdde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801bdd6:	887b      	ldrh	r3, [r7, #2]
 801bdd8:	041a      	lsls	r2, r3, #16
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	619a      	str	r2, [r3, #24]
}
 801bdde:	bf00      	nop
 801bde0:	370c      	adds	r7, #12
 801bde2:	46bd      	mov	sp, r7
 801bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bde8:	4770      	bx	lr
	...

0801bdec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801bdec:	b580      	push	{r7, lr}
 801bdee:	b082      	sub	sp, #8
 801bdf0:	af00      	add	r7, sp, #0
 801bdf2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	d101      	bne.n	801bdfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801bdfa:	2301      	movs	r3, #1
 801bdfc:	e08b      	b.n	801bf16 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801be04:	b2db      	uxtb	r3, r3
 801be06:	2b00      	cmp	r3, #0
 801be08:	d106      	bne.n	801be18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	2200      	movs	r2, #0
 801be0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801be12:	6878      	ldr	r0, [r7, #4]
 801be14:	f7e5 ff44 	bl	8001ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	2224      	movs	r2, #36	@ 0x24
 801be1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	681b      	ldr	r3, [r3, #0]
 801be24:	681a      	ldr	r2, [r3, #0]
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	681b      	ldr	r3, [r3, #0]
 801be2a:	f022 0201 	bic.w	r2, r2, #1
 801be2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	685a      	ldr	r2, [r3, #4]
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	681b      	ldr	r3, [r3, #0]
 801be38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 801be3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	681b      	ldr	r3, [r3, #0]
 801be42:	689a      	ldr	r2, [r3, #8]
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	681b      	ldr	r3, [r3, #0]
 801be48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801be4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	68db      	ldr	r3, [r3, #12]
 801be52:	2b01      	cmp	r3, #1
 801be54:	d107      	bne.n	801be66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	689a      	ldr	r2, [r3, #8]
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801be62:	609a      	str	r2, [r3, #8]
 801be64:	e006      	b.n	801be74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	689a      	ldr	r2, [r3, #8]
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	681b      	ldr	r3, [r3, #0]
 801be6e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 801be72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	68db      	ldr	r3, [r3, #12]
 801be78:	2b02      	cmp	r3, #2
 801be7a:	d108      	bne.n	801be8e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	681b      	ldr	r3, [r3, #0]
 801be80:	685a      	ldr	r2, [r3, #4]
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	681b      	ldr	r3, [r3, #0]
 801be86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801be8a:	605a      	str	r2, [r3, #4]
 801be8c:	e007      	b.n	801be9e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	685a      	ldr	r2, [r3, #4]
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	681b      	ldr	r3, [r3, #0]
 801be98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801be9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	681b      	ldr	r3, [r3, #0]
 801bea2:	6859      	ldr	r1, [r3, #4]
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	681a      	ldr	r2, [r3, #0]
 801bea8:	4b1d      	ldr	r3, [pc, #116]	@ (801bf20 <HAL_I2C_Init+0x134>)
 801beaa:	430b      	orrs	r3, r1
 801beac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	681b      	ldr	r3, [r3, #0]
 801beb2:	68da      	ldr	r2, [r3, #12]
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801bebc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	691a      	ldr	r2, [r3, #16]
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	695b      	ldr	r3, [r3, #20]
 801bec6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	699b      	ldr	r3, [r3, #24]
 801bece:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	430a      	orrs	r2, r1
 801bed6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	69d9      	ldr	r1, [r3, #28]
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	6a1a      	ldr	r2, [r3, #32]
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	430a      	orrs	r2, r1
 801bee6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	681b      	ldr	r3, [r3, #0]
 801beec:	681a      	ldr	r2, [r3, #0]
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	681b      	ldr	r3, [r3, #0]
 801bef2:	f042 0201 	orr.w	r2, r2, #1
 801bef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	2200      	movs	r2, #0
 801befc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	2220      	movs	r2, #32
 801bf02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	2200      	movs	r2, #0
 801bf0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	2200      	movs	r2, #0
 801bf10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 801bf14:	2300      	movs	r3, #0
}
 801bf16:	4618      	mov	r0, r3
 801bf18:	3708      	adds	r7, #8
 801bf1a:	46bd      	mov	sp, r7
 801bf1c:	bd80      	pop	{r7, pc}
 801bf1e:	bf00      	nop
 801bf20:	02008000 	.word	0x02008000

0801bf24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801bf24:	b480      	push	{r7}
 801bf26:	b083      	sub	sp, #12
 801bf28:	af00      	add	r7, sp, #0
 801bf2a:	6078      	str	r0, [r7, #4]
 801bf2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801bf34:	b2db      	uxtb	r3, r3
 801bf36:	2b20      	cmp	r3, #32
 801bf38:	d138      	bne.n	801bfac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801bf40:	2b01      	cmp	r3, #1
 801bf42:	d101      	bne.n	801bf48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801bf44:	2302      	movs	r3, #2
 801bf46:	e032      	b.n	801bfae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	2201      	movs	r2, #1
 801bf4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	2224      	movs	r2, #36	@ 0x24
 801bf54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	681b      	ldr	r3, [r3, #0]
 801bf5c:	681a      	ldr	r2, [r3, #0]
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	f022 0201 	bic.w	r2, r2, #1
 801bf66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	681a      	ldr	r2, [r3, #0]
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801bf76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	681b      	ldr	r3, [r3, #0]
 801bf7c:	6819      	ldr	r1, [r3, #0]
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	683a      	ldr	r2, [r7, #0]
 801bf84:	430a      	orrs	r2, r1
 801bf86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	681a      	ldr	r2, [r3, #0]
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	681b      	ldr	r3, [r3, #0]
 801bf92:	f042 0201 	orr.w	r2, r2, #1
 801bf96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	2220      	movs	r2, #32
 801bf9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	2200      	movs	r2, #0
 801bfa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801bfa8:	2300      	movs	r3, #0
 801bfaa:	e000      	b.n	801bfae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801bfac:	2302      	movs	r3, #2
  }
}
 801bfae:	4618      	mov	r0, r3
 801bfb0:	370c      	adds	r7, #12
 801bfb2:	46bd      	mov	sp, r7
 801bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfb8:	4770      	bx	lr

0801bfba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801bfba:	b480      	push	{r7}
 801bfbc:	b085      	sub	sp, #20
 801bfbe:	af00      	add	r7, sp, #0
 801bfc0:	6078      	str	r0, [r7, #4]
 801bfc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801bfca:	b2db      	uxtb	r3, r3
 801bfcc:	2b20      	cmp	r3, #32
 801bfce:	d139      	bne.n	801c044 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801bfd6:	2b01      	cmp	r3, #1
 801bfd8:	d101      	bne.n	801bfde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801bfda:	2302      	movs	r3, #2
 801bfdc:	e033      	b.n	801c046 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	2201      	movs	r2, #1
 801bfe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	2224      	movs	r2, #36	@ 0x24
 801bfea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	681b      	ldr	r3, [r3, #0]
 801bff2:	681a      	ldr	r2, [r3, #0]
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	681b      	ldr	r3, [r3, #0]
 801bff8:	f022 0201 	bic.w	r2, r2, #1
 801bffc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	681b      	ldr	r3, [r3, #0]
 801c004:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801c006:	68fb      	ldr	r3, [r7, #12]
 801c008:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801c00c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801c00e:	683b      	ldr	r3, [r7, #0]
 801c010:	021b      	lsls	r3, r3, #8
 801c012:	68fa      	ldr	r2, [r7, #12]
 801c014:	4313      	orrs	r3, r2
 801c016:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	681b      	ldr	r3, [r3, #0]
 801c01c:	68fa      	ldr	r2, [r7, #12]
 801c01e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	681a      	ldr	r2, [r3, #0]
 801c026:	687b      	ldr	r3, [r7, #4]
 801c028:	681b      	ldr	r3, [r3, #0]
 801c02a:	f042 0201 	orr.w	r2, r2, #1
 801c02e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	2220      	movs	r2, #32
 801c034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	2200      	movs	r2, #0
 801c03c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801c040:	2300      	movs	r3, #0
 801c042:	e000      	b.n	801c046 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801c044:	2302      	movs	r3, #2
  }
}
 801c046:	4618      	mov	r0, r3
 801c048:	3714      	adds	r7, #20
 801c04a:	46bd      	mov	sp, r7
 801c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c050:	4770      	bx	lr
	...

0801c054 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801c054:	b580      	push	{r7, lr}
 801c056:	b084      	sub	sp, #16
 801c058:	af00      	add	r7, sp, #0
 801c05a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801c05c:	4b19      	ldr	r3, [pc, #100]	@ (801c0c4 <HAL_PWREx_ConfigSupply+0x70>)
 801c05e:	68db      	ldr	r3, [r3, #12]
 801c060:	f003 0304 	and.w	r3, r3, #4
 801c064:	2b04      	cmp	r3, #4
 801c066:	d00a      	beq.n	801c07e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801c068:	4b16      	ldr	r3, [pc, #88]	@ (801c0c4 <HAL_PWREx_ConfigSupply+0x70>)
 801c06a:	68db      	ldr	r3, [r3, #12]
 801c06c:	f003 0307 	and.w	r3, r3, #7
 801c070:	687a      	ldr	r2, [r7, #4]
 801c072:	429a      	cmp	r2, r3
 801c074:	d001      	beq.n	801c07a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801c076:	2301      	movs	r3, #1
 801c078:	e01f      	b.n	801c0ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801c07a:	2300      	movs	r3, #0
 801c07c:	e01d      	b.n	801c0ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801c07e:	4b11      	ldr	r3, [pc, #68]	@ (801c0c4 <HAL_PWREx_ConfigSupply+0x70>)
 801c080:	68db      	ldr	r3, [r3, #12]
 801c082:	f023 0207 	bic.w	r2, r3, #7
 801c086:	490f      	ldr	r1, [pc, #60]	@ (801c0c4 <HAL_PWREx_ConfigSupply+0x70>)
 801c088:	687b      	ldr	r3, [r7, #4]
 801c08a:	4313      	orrs	r3, r2
 801c08c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801c08e:	f7fd fc03 	bl	8019898 <HAL_GetTick>
 801c092:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c094:	e009      	b.n	801c0aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801c096:	f7fd fbff 	bl	8019898 <HAL_GetTick>
 801c09a:	4602      	mov	r2, r0
 801c09c:	68fb      	ldr	r3, [r7, #12]
 801c09e:	1ad3      	subs	r3, r2, r3
 801c0a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c0a4:	d901      	bls.n	801c0aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801c0a6:	2301      	movs	r3, #1
 801c0a8:	e007      	b.n	801c0ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c0aa:	4b06      	ldr	r3, [pc, #24]	@ (801c0c4 <HAL_PWREx_ConfigSupply+0x70>)
 801c0ac:	685b      	ldr	r3, [r3, #4]
 801c0ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c0b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c0b6:	d1ee      	bne.n	801c096 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801c0b8:	2300      	movs	r3, #0
}
 801c0ba:	4618      	mov	r0, r3
 801c0bc:	3710      	adds	r7, #16
 801c0be:	46bd      	mov	sp, r7
 801c0c0:	bd80      	pop	{r7, pc}
 801c0c2:	bf00      	nop
 801c0c4:	58024800 	.word	0x58024800

0801c0c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c0c8:	b580      	push	{r7, lr}
 801c0ca:	b08c      	sub	sp, #48	@ 0x30
 801c0cc:	af00      	add	r7, sp, #0
 801c0ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d102      	bne.n	801c0dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801c0d6:	2301      	movs	r3, #1
 801c0d8:	f000 bc48 	b.w	801c96c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	681b      	ldr	r3, [r3, #0]
 801c0e0:	f003 0301 	and.w	r3, r3, #1
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	f000 8088 	beq.w	801c1fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c0ea:	4b99      	ldr	r3, [pc, #612]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c0ec:	691b      	ldr	r3, [r3, #16]
 801c0ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c0f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c0f4:	4b96      	ldr	r3, [pc, #600]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c0f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c0f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801c0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0fc:	2b10      	cmp	r3, #16
 801c0fe:	d007      	beq.n	801c110 <HAL_RCC_OscConfig+0x48>
 801c100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c102:	2b18      	cmp	r3, #24
 801c104:	d111      	bne.n	801c12a <HAL_RCC_OscConfig+0x62>
 801c106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c108:	f003 0303 	and.w	r3, r3, #3
 801c10c:	2b02      	cmp	r3, #2
 801c10e:	d10c      	bne.n	801c12a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c110:	4b8f      	ldr	r3, [pc, #572]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c112:	681b      	ldr	r3, [r3, #0]
 801c114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d06d      	beq.n	801c1f8 <HAL_RCC_OscConfig+0x130>
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	685b      	ldr	r3, [r3, #4]
 801c120:	2b00      	cmp	r3, #0
 801c122:	d169      	bne.n	801c1f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801c124:	2301      	movs	r3, #1
 801c126:	f000 bc21 	b.w	801c96c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	685b      	ldr	r3, [r3, #4]
 801c12e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c132:	d106      	bne.n	801c142 <HAL_RCC_OscConfig+0x7a>
 801c134:	4b86      	ldr	r3, [pc, #536]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c136:	681b      	ldr	r3, [r3, #0]
 801c138:	4a85      	ldr	r2, [pc, #532]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c13a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c13e:	6013      	str	r3, [r2, #0]
 801c140:	e02e      	b.n	801c1a0 <HAL_RCC_OscConfig+0xd8>
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	685b      	ldr	r3, [r3, #4]
 801c146:	2b00      	cmp	r3, #0
 801c148:	d10c      	bne.n	801c164 <HAL_RCC_OscConfig+0x9c>
 801c14a:	4b81      	ldr	r3, [pc, #516]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c14c:	681b      	ldr	r3, [r3, #0]
 801c14e:	4a80      	ldr	r2, [pc, #512]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c150:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c154:	6013      	str	r3, [r2, #0]
 801c156:	4b7e      	ldr	r3, [pc, #504]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c158:	681b      	ldr	r3, [r3, #0]
 801c15a:	4a7d      	ldr	r2, [pc, #500]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c15c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c160:	6013      	str	r3, [r2, #0]
 801c162:	e01d      	b.n	801c1a0 <HAL_RCC_OscConfig+0xd8>
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	685b      	ldr	r3, [r3, #4]
 801c168:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801c16c:	d10c      	bne.n	801c188 <HAL_RCC_OscConfig+0xc0>
 801c16e:	4b78      	ldr	r3, [pc, #480]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	4a77      	ldr	r2, [pc, #476]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c174:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c178:	6013      	str	r3, [r2, #0]
 801c17a:	4b75      	ldr	r3, [pc, #468]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	4a74      	ldr	r2, [pc, #464]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c184:	6013      	str	r3, [r2, #0]
 801c186:	e00b      	b.n	801c1a0 <HAL_RCC_OscConfig+0xd8>
 801c188:	4b71      	ldr	r3, [pc, #452]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c18a:	681b      	ldr	r3, [r3, #0]
 801c18c:	4a70      	ldr	r2, [pc, #448]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c18e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c192:	6013      	str	r3, [r2, #0]
 801c194:	4b6e      	ldr	r3, [pc, #440]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c196:	681b      	ldr	r3, [r3, #0]
 801c198:	4a6d      	ldr	r2, [pc, #436]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c19a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c19e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	685b      	ldr	r3, [r3, #4]
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	d013      	beq.n	801c1d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c1a8:	f7fd fb76 	bl	8019898 <HAL_GetTick>
 801c1ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c1ae:	e008      	b.n	801c1c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c1b0:	f7fd fb72 	bl	8019898 <HAL_GetTick>
 801c1b4:	4602      	mov	r2, r0
 801c1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1b8:	1ad3      	subs	r3, r2, r3
 801c1ba:	2b64      	cmp	r3, #100	@ 0x64
 801c1bc:	d901      	bls.n	801c1c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801c1be:	2303      	movs	r3, #3
 801c1c0:	e3d4      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c1c2:	4b63      	ldr	r3, [pc, #396]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d0f0      	beq.n	801c1b0 <HAL_RCC_OscConfig+0xe8>
 801c1ce:	e014      	b.n	801c1fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c1d0:	f7fd fb62 	bl	8019898 <HAL_GetTick>
 801c1d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801c1d6:	e008      	b.n	801c1ea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c1d8:	f7fd fb5e 	bl	8019898 <HAL_GetTick>
 801c1dc:	4602      	mov	r2, r0
 801c1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1e0:	1ad3      	subs	r3, r2, r3
 801c1e2:	2b64      	cmp	r3, #100	@ 0x64
 801c1e4:	d901      	bls.n	801c1ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801c1e6:	2303      	movs	r3, #3
 801c1e8:	e3c0      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801c1ea:	4b59      	ldr	r3, [pc, #356]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d1f0      	bne.n	801c1d8 <HAL_RCC_OscConfig+0x110>
 801c1f6:	e000      	b.n	801c1fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c1f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c1fa:	687b      	ldr	r3, [r7, #4]
 801c1fc:	681b      	ldr	r3, [r3, #0]
 801c1fe:	f003 0302 	and.w	r3, r3, #2
 801c202:	2b00      	cmp	r3, #0
 801c204:	f000 80ca 	beq.w	801c39c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c208:	4b51      	ldr	r3, [pc, #324]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c20a:	691b      	ldr	r3, [r3, #16]
 801c20c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c210:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c212:	4b4f      	ldr	r3, [pc, #316]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c216:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801c218:	6a3b      	ldr	r3, [r7, #32]
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d007      	beq.n	801c22e <HAL_RCC_OscConfig+0x166>
 801c21e:	6a3b      	ldr	r3, [r7, #32]
 801c220:	2b18      	cmp	r3, #24
 801c222:	d156      	bne.n	801c2d2 <HAL_RCC_OscConfig+0x20a>
 801c224:	69fb      	ldr	r3, [r7, #28]
 801c226:	f003 0303 	and.w	r3, r3, #3
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d151      	bne.n	801c2d2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c22e:	4b48      	ldr	r3, [pc, #288]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c230:	681b      	ldr	r3, [r3, #0]
 801c232:	f003 0304 	and.w	r3, r3, #4
 801c236:	2b00      	cmp	r3, #0
 801c238:	d005      	beq.n	801c246 <HAL_RCC_OscConfig+0x17e>
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	68db      	ldr	r3, [r3, #12]
 801c23e:	2b00      	cmp	r3, #0
 801c240:	d101      	bne.n	801c246 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801c242:	2301      	movs	r3, #1
 801c244:	e392      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801c246:	4b42      	ldr	r3, [pc, #264]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c248:	681b      	ldr	r3, [r3, #0]
 801c24a:	f023 0219 	bic.w	r2, r3, #25
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	68db      	ldr	r3, [r3, #12]
 801c252:	493f      	ldr	r1, [pc, #252]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c254:	4313      	orrs	r3, r2
 801c256:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c258:	f7fd fb1e 	bl	8019898 <HAL_GetTick>
 801c25c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c25e:	e008      	b.n	801c272 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c260:	f7fd fb1a 	bl	8019898 <HAL_GetTick>
 801c264:	4602      	mov	r2, r0
 801c266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c268:	1ad3      	subs	r3, r2, r3
 801c26a:	2b02      	cmp	r3, #2
 801c26c:	d901      	bls.n	801c272 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801c26e:	2303      	movs	r3, #3
 801c270:	e37c      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c272:	4b37      	ldr	r3, [pc, #220]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	f003 0304 	and.w	r3, r3, #4
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d0f0      	beq.n	801c260 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c27e:	f7fd fb3b 	bl	80198f8 <HAL_GetREVID>
 801c282:	4603      	mov	r3, r0
 801c284:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c288:	4293      	cmp	r3, r2
 801c28a:	d817      	bhi.n	801c2bc <HAL_RCC_OscConfig+0x1f4>
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	691b      	ldr	r3, [r3, #16]
 801c290:	2b40      	cmp	r3, #64	@ 0x40
 801c292:	d108      	bne.n	801c2a6 <HAL_RCC_OscConfig+0x1de>
 801c294:	4b2e      	ldr	r3, [pc, #184]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c296:	685b      	ldr	r3, [r3, #4]
 801c298:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801c29c:	4a2c      	ldr	r2, [pc, #176]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c29e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c2a2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c2a4:	e07a      	b.n	801c39c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c2a6:	4b2a      	ldr	r3, [pc, #168]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c2a8:	685b      	ldr	r3, [r3, #4]
 801c2aa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	691b      	ldr	r3, [r3, #16]
 801c2b2:	031b      	lsls	r3, r3, #12
 801c2b4:	4926      	ldr	r1, [pc, #152]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c2b6:	4313      	orrs	r3, r2
 801c2b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c2ba:	e06f      	b.n	801c39c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c2bc:	4b24      	ldr	r3, [pc, #144]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c2be:	685b      	ldr	r3, [r3, #4]
 801c2c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	691b      	ldr	r3, [r3, #16]
 801c2c8:	061b      	lsls	r3, r3, #24
 801c2ca:	4921      	ldr	r1, [pc, #132]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c2cc:	4313      	orrs	r3, r2
 801c2ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c2d0:	e064      	b.n	801c39c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	68db      	ldr	r3, [r3, #12]
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d047      	beq.n	801c36a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801c2da:	4b1d      	ldr	r3, [pc, #116]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	f023 0219 	bic.w	r2, r3, #25
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	68db      	ldr	r3, [r3, #12]
 801c2e6:	491a      	ldr	r1, [pc, #104]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c2e8:	4313      	orrs	r3, r2
 801c2ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c2ec:	f7fd fad4 	bl	8019898 <HAL_GetTick>
 801c2f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c2f2:	e008      	b.n	801c306 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c2f4:	f7fd fad0 	bl	8019898 <HAL_GetTick>
 801c2f8:	4602      	mov	r2, r0
 801c2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2fc:	1ad3      	subs	r3, r2, r3
 801c2fe:	2b02      	cmp	r3, #2
 801c300:	d901      	bls.n	801c306 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801c302:	2303      	movs	r3, #3
 801c304:	e332      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c306:	4b12      	ldr	r3, [pc, #72]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c308:	681b      	ldr	r3, [r3, #0]
 801c30a:	f003 0304 	and.w	r3, r3, #4
 801c30e:	2b00      	cmp	r3, #0
 801c310:	d0f0      	beq.n	801c2f4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c312:	f7fd faf1 	bl	80198f8 <HAL_GetREVID>
 801c316:	4603      	mov	r3, r0
 801c318:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c31c:	4293      	cmp	r3, r2
 801c31e:	d819      	bhi.n	801c354 <HAL_RCC_OscConfig+0x28c>
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	691b      	ldr	r3, [r3, #16]
 801c324:	2b40      	cmp	r3, #64	@ 0x40
 801c326:	d108      	bne.n	801c33a <HAL_RCC_OscConfig+0x272>
 801c328:	4b09      	ldr	r3, [pc, #36]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c32a:	685b      	ldr	r3, [r3, #4]
 801c32c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801c330:	4a07      	ldr	r2, [pc, #28]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c332:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c336:	6053      	str	r3, [r2, #4]
 801c338:	e030      	b.n	801c39c <HAL_RCC_OscConfig+0x2d4>
 801c33a:	4b05      	ldr	r3, [pc, #20]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c33c:	685b      	ldr	r3, [r3, #4]
 801c33e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	691b      	ldr	r3, [r3, #16]
 801c346:	031b      	lsls	r3, r3, #12
 801c348:	4901      	ldr	r1, [pc, #4]	@ (801c350 <HAL_RCC_OscConfig+0x288>)
 801c34a:	4313      	orrs	r3, r2
 801c34c:	604b      	str	r3, [r1, #4]
 801c34e:	e025      	b.n	801c39c <HAL_RCC_OscConfig+0x2d4>
 801c350:	58024400 	.word	0x58024400
 801c354:	4b9a      	ldr	r3, [pc, #616]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c356:	685b      	ldr	r3, [r3, #4]
 801c358:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	691b      	ldr	r3, [r3, #16]
 801c360:	061b      	lsls	r3, r3, #24
 801c362:	4997      	ldr	r1, [pc, #604]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c364:	4313      	orrs	r3, r2
 801c366:	604b      	str	r3, [r1, #4]
 801c368:	e018      	b.n	801c39c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c36a:	4b95      	ldr	r3, [pc, #596]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c36c:	681b      	ldr	r3, [r3, #0]
 801c36e:	4a94      	ldr	r2, [pc, #592]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c370:	f023 0301 	bic.w	r3, r3, #1
 801c374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c376:	f7fd fa8f 	bl	8019898 <HAL_GetTick>
 801c37a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801c37c:	e008      	b.n	801c390 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c37e:	f7fd fa8b 	bl	8019898 <HAL_GetTick>
 801c382:	4602      	mov	r2, r0
 801c384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c386:	1ad3      	subs	r3, r2, r3
 801c388:	2b02      	cmp	r3, #2
 801c38a:	d901      	bls.n	801c390 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801c38c:	2303      	movs	r3, #3
 801c38e:	e2ed      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801c390:	4b8b      	ldr	r3, [pc, #556]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	f003 0304 	and.w	r3, r3, #4
 801c398:	2b00      	cmp	r3, #0
 801c39a:	d1f0      	bne.n	801c37e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	681b      	ldr	r3, [r3, #0]
 801c3a0:	f003 0310 	and.w	r3, r3, #16
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	f000 80a9 	beq.w	801c4fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c3aa:	4b85      	ldr	r3, [pc, #532]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c3ac:	691b      	ldr	r3, [r3, #16]
 801c3ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c3b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c3b4:	4b82      	ldr	r3, [pc, #520]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c3b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801c3ba:	69bb      	ldr	r3, [r7, #24]
 801c3bc:	2b08      	cmp	r3, #8
 801c3be:	d007      	beq.n	801c3d0 <HAL_RCC_OscConfig+0x308>
 801c3c0:	69bb      	ldr	r3, [r7, #24]
 801c3c2:	2b18      	cmp	r3, #24
 801c3c4:	d13a      	bne.n	801c43c <HAL_RCC_OscConfig+0x374>
 801c3c6:	697b      	ldr	r3, [r7, #20]
 801c3c8:	f003 0303 	and.w	r3, r3, #3
 801c3cc:	2b01      	cmp	r3, #1
 801c3ce:	d135      	bne.n	801c43c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c3d0:	4b7b      	ldr	r3, [pc, #492]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	d005      	beq.n	801c3e8 <HAL_RCC_OscConfig+0x320>
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	69db      	ldr	r3, [r3, #28]
 801c3e0:	2b80      	cmp	r3, #128	@ 0x80
 801c3e2:	d001      	beq.n	801c3e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801c3e4:	2301      	movs	r3, #1
 801c3e6:	e2c1      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c3e8:	f7fd fa86 	bl	80198f8 <HAL_GetREVID>
 801c3ec:	4603      	mov	r3, r0
 801c3ee:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c3f2:	4293      	cmp	r3, r2
 801c3f4:	d817      	bhi.n	801c426 <HAL_RCC_OscConfig+0x35e>
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	6a1b      	ldr	r3, [r3, #32]
 801c3fa:	2b20      	cmp	r3, #32
 801c3fc:	d108      	bne.n	801c410 <HAL_RCC_OscConfig+0x348>
 801c3fe:	4b70      	ldr	r3, [pc, #448]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c400:	685b      	ldr	r3, [r3, #4]
 801c402:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801c406:	4a6e      	ldr	r2, [pc, #440]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c408:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c40c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c40e:	e075      	b.n	801c4fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c410:	4b6b      	ldr	r3, [pc, #428]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c412:	685b      	ldr	r3, [r3, #4]
 801c414:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	6a1b      	ldr	r3, [r3, #32]
 801c41c:	069b      	lsls	r3, r3, #26
 801c41e:	4968      	ldr	r1, [pc, #416]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c420:	4313      	orrs	r3, r2
 801c422:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c424:	e06a      	b.n	801c4fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c426:	4b66      	ldr	r3, [pc, #408]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c428:	68db      	ldr	r3, [r3, #12]
 801c42a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	6a1b      	ldr	r3, [r3, #32]
 801c432:	061b      	lsls	r3, r3, #24
 801c434:	4962      	ldr	r1, [pc, #392]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c436:	4313      	orrs	r3, r2
 801c438:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c43a:	e05f      	b.n	801c4fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	69db      	ldr	r3, [r3, #28]
 801c440:	2b00      	cmp	r3, #0
 801c442:	d042      	beq.n	801c4ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801c444:	4b5e      	ldr	r3, [pc, #376]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c446:	681b      	ldr	r3, [r3, #0]
 801c448:	4a5d      	ldr	r2, [pc, #372]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c44a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c44e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c450:	f7fd fa22 	bl	8019898 <HAL_GetTick>
 801c454:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c456:	e008      	b.n	801c46a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801c458:	f7fd fa1e 	bl	8019898 <HAL_GetTick>
 801c45c:	4602      	mov	r2, r0
 801c45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c460:	1ad3      	subs	r3, r2, r3
 801c462:	2b02      	cmp	r3, #2
 801c464:	d901      	bls.n	801c46a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801c466:	2303      	movs	r3, #3
 801c468:	e280      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c46a:	4b55      	ldr	r3, [pc, #340]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c472:	2b00      	cmp	r3, #0
 801c474:	d0f0      	beq.n	801c458 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c476:	f7fd fa3f 	bl	80198f8 <HAL_GetREVID>
 801c47a:	4603      	mov	r3, r0
 801c47c:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c480:	4293      	cmp	r3, r2
 801c482:	d817      	bhi.n	801c4b4 <HAL_RCC_OscConfig+0x3ec>
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	6a1b      	ldr	r3, [r3, #32]
 801c488:	2b20      	cmp	r3, #32
 801c48a:	d108      	bne.n	801c49e <HAL_RCC_OscConfig+0x3d6>
 801c48c:	4b4c      	ldr	r3, [pc, #304]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c48e:	685b      	ldr	r3, [r3, #4]
 801c490:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801c494:	4a4a      	ldr	r2, [pc, #296]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c496:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c49a:	6053      	str	r3, [r2, #4]
 801c49c:	e02e      	b.n	801c4fc <HAL_RCC_OscConfig+0x434>
 801c49e:	4b48      	ldr	r3, [pc, #288]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c4a0:	685b      	ldr	r3, [r3, #4]
 801c4a2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	6a1b      	ldr	r3, [r3, #32]
 801c4aa:	069b      	lsls	r3, r3, #26
 801c4ac:	4944      	ldr	r1, [pc, #272]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c4ae:	4313      	orrs	r3, r2
 801c4b0:	604b      	str	r3, [r1, #4]
 801c4b2:	e023      	b.n	801c4fc <HAL_RCC_OscConfig+0x434>
 801c4b4:	4b42      	ldr	r3, [pc, #264]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c4b6:	68db      	ldr	r3, [r3, #12]
 801c4b8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	6a1b      	ldr	r3, [r3, #32]
 801c4c0:	061b      	lsls	r3, r3, #24
 801c4c2:	493f      	ldr	r1, [pc, #252]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c4c4:	4313      	orrs	r3, r2
 801c4c6:	60cb      	str	r3, [r1, #12]
 801c4c8:	e018      	b.n	801c4fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801c4ca:	4b3d      	ldr	r3, [pc, #244]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c4cc:	681b      	ldr	r3, [r3, #0]
 801c4ce:	4a3c      	ldr	r2, [pc, #240]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c4d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801c4d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c4d6:	f7fd f9df 	bl	8019898 <HAL_GetTick>
 801c4da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801c4dc:	e008      	b.n	801c4f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801c4de:	f7fd f9db 	bl	8019898 <HAL_GetTick>
 801c4e2:	4602      	mov	r2, r0
 801c4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4e6:	1ad3      	subs	r3, r2, r3
 801c4e8:	2b02      	cmp	r3, #2
 801c4ea:	d901      	bls.n	801c4f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801c4ec:	2303      	movs	r3, #3
 801c4ee:	e23d      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801c4f0:	4b33      	ldr	r3, [pc, #204]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c4f2:	681b      	ldr	r3, [r3, #0]
 801c4f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	d1f0      	bne.n	801c4de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	681b      	ldr	r3, [r3, #0]
 801c500:	f003 0308 	and.w	r3, r3, #8
 801c504:	2b00      	cmp	r3, #0
 801c506:	d036      	beq.n	801c576 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	695b      	ldr	r3, [r3, #20]
 801c50c:	2b00      	cmp	r3, #0
 801c50e:	d019      	beq.n	801c544 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c510:	4b2b      	ldr	r3, [pc, #172]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c514:	4a2a      	ldr	r2, [pc, #168]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c516:	f043 0301 	orr.w	r3, r3, #1
 801c51a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c51c:	f7fd f9bc 	bl	8019898 <HAL_GetTick>
 801c520:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801c522:	e008      	b.n	801c536 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c524:	f7fd f9b8 	bl	8019898 <HAL_GetTick>
 801c528:	4602      	mov	r2, r0
 801c52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c52c:	1ad3      	subs	r3, r2, r3
 801c52e:	2b02      	cmp	r3, #2
 801c530:	d901      	bls.n	801c536 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801c532:	2303      	movs	r3, #3
 801c534:	e21a      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801c536:	4b22      	ldr	r3, [pc, #136]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c53a:	f003 0302 	and.w	r3, r3, #2
 801c53e:	2b00      	cmp	r3, #0
 801c540:	d0f0      	beq.n	801c524 <HAL_RCC_OscConfig+0x45c>
 801c542:	e018      	b.n	801c576 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c544:	4b1e      	ldr	r3, [pc, #120]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c548:	4a1d      	ldr	r2, [pc, #116]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c54a:	f023 0301 	bic.w	r3, r3, #1
 801c54e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c550:	f7fd f9a2 	bl	8019898 <HAL_GetTick>
 801c554:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801c556:	e008      	b.n	801c56a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c558:	f7fd f99e 	bl	8019898 <HAL_GetTick>
 801c55c:	4602      	mov	r2, r0
 801c55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c560:	1ad3      	subs	r3, r2, r3
 801c562:	2b02      	cmp	r3, #2
 801c564:	d901      	bls.n	801c56a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801c566:	2303      	movs	r3, #3
 801c568:	e200      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801c56a:	4b15      	ldr	r3, [pc, #84]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c56c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c56e:	f003 0302 	and.w	r3, r3, #2
 801c572:	2b00      	cmp	r3, #0
 801c574:	d1f0      	bne.n	801c558 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	681b      	ldr	r3, [r3, #0]
 801c57a:	f003 0320 	and.w	r3, r3, #32
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d039      	beq.n	801c5f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801c582:	687b      	ldr	r3, [r7, #4]
 801c584:	699b      	ldr	r3, [r3, #24]
 801c586:	2b00      	cmp	r3, #0
 801c588:	d01c      	beq.n	801c5c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801c58a:	4b0d      	ldr	r3, [pc, #52]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c58c:	681b      	ldr	r3, [r3, #0]
 801c58e:	4a0c      	ldr	r2, [pc, #48]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c590:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801c594:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801c596:	f7fd f97f 	bl	8019898 <HAL_GetTick>
 801c59a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801c59c:	e008      	b.n	801c5b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c59e:	f7fd f97b 	bl	8019898 <HAL_GetTick>
 801c5a2:	4602      	mov	r2, r0
 801c5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5a6:	1ad3      	subs	r3, r2, r3
 801c5a8:	2b02      	cmp	r3, #2
 801c5aa:	d901      	bls.n	801c5b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801c5ac:	2303      	movs	r3, #3
 801c5ae:	e1dd      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801c5b0:	4b03      	ldr	r3, [pc, #12]	@ (801c5c0 <HAL_RCC_OscConfig+0x4f8>)
 801c5b2:	681b      	ldr	r3, [r3, #0]
 801c5b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d0f0      	beq.n	801c59e <HAL_RCC_OscConfig+0x4d6>
 801c5bc:	e01b      	b.n	801c5f6 <HAL_RCC_OscConfig+0x52e>
 801c5be:	bf00      	nop
 801c5c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801c5c4:	4b9b      	ldr	r3, [pc, #620]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	4a9a      	ldr	r2, [pc, #616]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c5ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c5ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801c5d0:	f7fd f962 	bl	8019898 <HAL_GetTick>
 801c5d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801c5d6:	e008      	b.n	801c5ea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c5d8:	f7fd f95e 	bl	8019898 <HAL_GetTick>
 801c5dc:	4602      	mov	r2, r0
 801c5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5e0:	1ad3      	subs	r3, r2, r3
 801c5e2:	2b02      	cmp	r3, #2
 801c5e4:	d901      	bls.n	801c5ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801c5e6:	2303      	movs	r3, #3
 801c5e8:	e1c0      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801c5ea:	4b92      	ldr	r3, [pc, #584]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c5ec:	681b      	ldr	r3, [r3, #0]
 801c5ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d1f0      	bne.n	801c5d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	681b      	ldr	r3, [r3, #0]
 801c5fa:	f003 0304 	and.w	r3, r3, #4
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	f000 8081 	beq.w	801c706 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801c604:	4b8c      	ldr	r3, [pc, #560]	@ (801c838 <HAL_RCC_OscConfig+0x770>)
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	4a8b      	ldr	r2, [pc, #556]	@ (801c838 <HAL_RCC_OscConfig+0x770>)
 801c60a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c60e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c610:	f7fd f942 	bl	8019898 <HAL_GetTick>
 801c614:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c616:	e008      	b.n	801c62a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c618:	f7fd f93e 	bl	8019898 <HAL_GetTick>
 801c61c:	4602      	mov	r2, r0
 801c61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c620:	1ad3      	subs	r3, r2, r3
 801c622:	2b64      	cmp	r3, #100	@ 0x64
 801c624:	d901      	bls.n	801c62a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801c626:	2303      	movs	r3, #3
 801c628:	e1a0      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c62a:	4b83      	ldr	r3, [pc, #524]	@ (801c838 <HAL_RCC_OscConfig+0x770>)
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c632:	2b00      	cmp	r3, #0
 801c634:	d0f0      	beq.n	801c618 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	689b      	ldr	r3, [r3, #8]
 801c63a:	2b01      	cmp	r3, #1
 801c63c:	d106      	bne.n	801c64c <HAL_RCC_OscConfig+0x584>
 801c63e:	4b7d      	ldr	r3, [pc, #500]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c642:	4a7c      	ldr	r2, [pc, #496]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c644:	f043 0301 	orr.w	r3, r3, #1
 801c648:	6713      	str	r3, [r2, #112]	@ 0x70
 801c64a:	e02d      	b.n	801c6a8 <HAL_RCC_OscConfig+0x5e0>
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	689b      	ldr	r3, [r3, #8]
 801c650:	2b00      	cmp	r3, #0
 801c652:	d10c      	bne.n	801c66e <HAL_RCC_OscConfig+0x5a6>
 801c654:	4b77      	ldr	r3, [pc, #476]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c658:	4a76      	ldr	r2, [pc, #472]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c65a:	f023 0301 	bic.w	r3, r3, #1
 801c65e:	6713      	str	r3, [r2, #112]	@ 0x70
 801c660:	4b74      	ldr	r3, [pc, #464]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c664:	4a73      	ldr	r2, [pc, #460]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c666:	f023 0304 	bic.w	r3, r3, #4
 801c66a:	6713      	str	r3, [r2, #112]	@ 0x70
 801c66c:	e01c      	b.n	801c6a8 <HAL_RCC_OscConfig+0x5e0>
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	689b      	ldr	r3, [r3, #8]
 801c672:	2b05      	cmp	r3, #5
 801c674:	d10c      	bne.n	801c690 <HAL_RCC_OscConfig+0x5c8>
 801c676:	4b6f      	ldr	r3, [pc, #444]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c67a:	4a6e      	ldr	r2, [pc, #440]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c67c:	f043 0304 	orr.w	r3, r3, #4
 801c680:	6713      	str	r3, [r2, #112]	@ 0x70
 801c682:	4b6c      	ldr	r3, [pc, #432]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c686:	4a6b      	ldr	r2, [pc, #428]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c688:	f043 0301 	orr.w	r3, r3, #1
 801c68c:	6713      	str	r3, [r2, #112]	@ 0x70
 801c68e:	e00b      	b.n	801c6a8 <HAL_RCC_OscConfig+0x5e0>
 801c690:	4b68      	ldr	r3, [pc, #416]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c694:	4a67      	ldr	r2, [pc, #412]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c696:	f023 0301 	bic.w	r3, r3, #1
 801c69a:	6713      	str	r3, [r2, #112]	@ 0x70
 801c69c:	4b65      	ldr	r3, [pc, #404]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c69e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c6a0:	4a64      	ldr	r2, [pc, #400]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c6a2:	f023 0304 	bic.w	r3, r3, #4
 801c6a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	689b      	ldr	r3, [r3, #8]
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	d015      	beq.n	801c6dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c6b0:	f7fd f8f2 	bl	8019898 <HAL_GetTick>
 801c6b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c6b6:	e00a      	b.n	801c6ce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c6b8:	f7fd f8ee 	bl	8019898 <HAL_GetTick>
 801c6bc:	4602      	mov	r2, r0
 801c6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6c0:	1ad3      	subs	r3, r2, r3
 801c6c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c6c6:	4293      	cmp	r3, r2
 801c6c8:	d901      	bls.n	801c6ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801c6ca:	2303      	movs	r3, #3
 801c6cc:	e14e      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c6ce:	4b59      	ldr	r3, [pc, #356]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c6d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c6d2:	f003 0302 	and.w	r3, r3, #2
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d0ee      	beq.n	801c6b8 <HAL_RCC_OscConfig+0x5f0>
 801c6da:	e014      	b.n	801c706 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c6dc:	f7fd f8dc 	bl	8019898 <HAL_GetTick>
 801c6e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801c6e2:	e00a      	b.n	801c6fa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c6e4:	f7fd f8d8 	bl	8019898 <HAL_GetTick>
 801c6e8:	4602      	mov	r2, r0
 801c6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6ec:	1ad3      	subs	r3, r2, r3
 801c6ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c6f2:	4293      	cmp	r3, r2
 801c6f4:	d901      	bls.n	801c6fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801c6f6:	2303      	movs	r3, #3
 801c6f8:	e138      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801c6fa:	4b4e      	ldr	r3, [pc, #312]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c6fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c6fe:	f003 0302 	and.w	r3, r3, #2
 801c702:	2b00      	cmp	r3, #0
 801c704:	d1ee      	bne.n	801c6e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	f000 812d 	beq.w	801c96a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801c710:	4b48      	ldr	r3, [pc, #288]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c712:	691b      	ldr	r3, [r3, #16]
 801c714:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c718:	2b18      	cmp	r3, #24
 801c71a:	f000 80bd 	beq.w	801c898 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801c71e:	687b      	ldr	r3, [r7, #4]
 801c720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c722:	2b02      	cmp	r3, #2
 801c724:	f040 809e 	bne.w	801c864 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c728:	4b42      	ldr	r3, [pc, #264]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	4a41      	ldr	r2, [pc, #260]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c72e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c734:	f7fd f8b0 	bl	8019898 <HAL_GetTick>
 801c738:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c73a:	e008      	b.n	801c74e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c73c:	f7fd f8ac 	bl	8019898 <HAL_GetTick>
 801c740:	4602      	mov	r2, r0
 801c742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c744:	1ad3      	subs	r3, r2, r3
 801c746:	2b02      	cmp	r3, #2
 801c748:	d901      	bls.n	801c74e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801c74a:	2303      	movs	r3, #3
 801c74c:	e10e      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c74e:	4b39      	ldr	r3, [pc, #228]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c750:	681b      	ldr	r3, [r3, #0]
 801c752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c756:	2b00      	cmp	r3, #0
 801c758:	d1f0      	bne.n	801c73c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c75a:	4b36      	ldr	r3, [pc, #216]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c75c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c75e:	4b37      	ldr	r3, [pc, #220]	@ (801c83c <HAL_RCC_OscConfig+0x774>)
 801c760:	4013      	ands	r3, r2
 801c762:	687a      	ldr	r2, [r7, #4]
 801c764:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801c766:	687a      	ldr	r2, [r7, #4]
 801c768:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801c76a:	0112      	lsls	r2, r2, #4
 801c76c:	430a      	orrs	r2, r1
 801c76e:	4931      	ldr	r1, [pc, #196]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c770:	4313      	orrs	r3, r2
 801c772:	628b      	str	r3, [r1, #40]	@ 0x28
 801c774:	687b      	ldr	r3, [r7, #4]
 801c776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c778:	3b01      	subs	r3, #1
 801c77a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c77e:	687b      	ldr	r3, [r7, #4]
 801c780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c782:	3b01      	subs	r3, #1
 801c784:	025b      	lsls	r3, r3, #9
 801c786:	b29b      	uxth	r3, r3
 801c788:	431a      	orrs	r2, r3
 801c78a:	687b      	ldr	r3, [r7, #4]
 801c78c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c78e:	3b01      	subs	r3, #1
 801c790:	041b      	lsls	r3, r3, #16
 801c792:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801c796:	431a      	orrs	r2, r3
 801c798:	687b      	ldr	r3, [r7, #4]
 801c79a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c79c:	3b01      	subs	r3, #1
 801c79e:	061b      	lsls	r3, r3, #24
 801c7a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801c7a4:	4923      	ldr	r1, [pc, #140]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c7a6:	4313      	orrs	r3, r2
 801c7a8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801c7aa:	4b22      	ldr	r3, [pc, #136]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c7ae:	4a21      	ldr	r2, [pc, #132]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c7b0:	f023 0301 	bic.w	r3, r3, #1
 801c7b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801c7b6:	4b1f      	ldr	r3, [pc, #124]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c7b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c7ba:	4b21      	ldr	r3, [pc, #132]	@ (801c840 <HAL_RCC_OscConfig+0x778>)
 801c7bc:	4013      	ands	r3, r2
 801c7be:	687a      	ldr	r2, [r7, #4]
 801c7c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801c7c2:	00d2      	lsls	r2, r2, #3
 801c7c4:	491b      	ldr	r1, [pc, #108]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c7c6:	4313      	orrs	r3, r2
 801c7c8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801c7ca:	4b1a      	ldr	r3, [pc, #104]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c7cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c7ce:	f023 020c 	bic.w	r2, r3, #12
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c7d6:	4917      	ldr	r1, [pc, #92]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c7d8:	4313      	orrs	r3, r2
 801c7da:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801c7dc:	4b15      	ldr	r3, [pc, #84]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c7de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c7e0:	f023 0202 	bic.w	r2, r3, #2
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c7e8:	4912      	ldr	r1, [pc, #72]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c7ea:	4313      	orrs	r3, r2
 801c7ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801c7ee:	4b11      	ldr	r3, [pc, #68]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c7f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c7f2:	4a10      	ldr	r2, [pc, #64]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c7f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c7f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c7fa:	4b0e      	ldr	r3, [pc, #56]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c7fe:	4a0d      	ldr	r2, [pc, #52]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c804:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801c806:	4b0b      	ldr	r3, [pc, #44]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c80a:	4a0a      	ldr	r2, [pc, #40]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c80c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c810:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801c812:	4b08      	ldr	r3, [pc, #32]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c816:	4a07      	ldr	r2, [pc, #28]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c818:	f043 0301 	orr.w	r3, r3, #1
 801c81c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c81e:	4b05      	ldr	r3, [pc, #20]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c820:	681b      	ldr	r3, [r3, #0]
 801c822:	4a04      	ldr	r2, [pc, #16]	@ (801c834 <HAL_RCC_OscConfig+0x76c>)
 801c824:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801c828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c82a:	f7fd f835 	bl	8019898 <HAL_GetTick>
 801c82e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c830:	e011      	b.n	801c856 <HAL_RCC_OscConfig+0x78e>
 801c832:	bf00      	nop
 801c834:	58024400 	.word	0x58024400
 801c838:	58024800 	.word	0x58024800
 801c83c:	fffffc0c 	.word	0xfffffc0c
 801c840:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c844:	f7fd f828 	bl	8019898 <HAL_GetTick>
 801c848:	4602      	mov	r2, r0
 801c84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c84c:	1ad3      	subs	r3, r2, r3
 801c84e:	2b02      	cmp	r3, #2
 801c850:	d901      	bls.n	801c856 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801c852:	2303      	movs	r3, #3
 801c854:	e08a      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c856:	4b47      	ldr	r3, [pc, #284]	@ (801c974 <HAL_RCC_OscConfig+0x8ac>)
 801c858:	681b      	ldr	r3, [r3, #0]
 801c85a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d0f0      	beq.n	801c844 <HAL_RCC_OscConfig+0x77c>
 801c862:	e082      	b.n	801c96a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c864:	4b43      	ldr	r3, [pc, #268]	@ (801c974 <HAL_RCC_OscConfig+0x8ac>)
 801c866:	681b      	ldr	r3, [r3, #0]
 801c868:	4a42      	ldr	r2, [pc, #264]	@ (801c974 <HAL_RCC_OscConfig+0x8ac>)
 801c86a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c86e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c870:	f7fd f812 	bl	8019898 <HAL_GetTick>
 801c874:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c876:	e008      	b.n	801c88a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c878:	f7fd f80e 	bl	8019898 <HAL_GetTick>
 801c87c:	4602      	mov	r2, r0
 801c87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c880:	1ad3      	subs	r3, r2, r3
 801c882:	2b02      	cmp	r3, #2
 801c884:	d901      	bls.n	801c88a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801c886:	2303      	movs	r3, #3
 801c888:	e070      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c88a:	4b3a      	ldr	r3, [pc, #232]	@ (801c974 <HAL_RCC_OscConfig+0x8ac>)
 801c88c:	681b      	ldr	r3, [r3, #0]
 801c88e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c892:	2b00      	cmp	r3, #0
 801c894:	d1f0      	bne.n	801c878 <HAL_RCC_OscConfig+0x7b0>
 801c896:	e068      	b.n	801c96a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801c898:	4b36      	ldr	r3, [pc, #216]	@ (801c974 <HAL_RCC_OscConfig+0x8ac>)
 801c89a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c89c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801c89e:	4b35      	ldr	r3, [pc, #212]	@ (801c974 <HAL_RCC_OscConfig+0x8ac>)
 801c8a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c8a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c8a8:	2b01      	cmp	r3, #1
 801c8aa:	d031      	beq.n	801c910 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c8ac:	693b      	ldr	r3, [r7, #16]
 801c8ae:	f003 0203 	and.w	r2, r3, #3
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c8b6:	429a      	cmp	r2, r3
 801c8b8:	d12a      	bne.n	801c910 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801c8ba:	693b      	ldr	r3, [r7, #16]
 801c8bc:	091b      	lsrs	r3, r3, #4
 801c8be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801c8c2:	687b      	ldr	r3, [r7, #4]
 801c8c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c8c6:	429a      	cmp	r2, r3
 801c8c8:	d122      	bne.n	801c910 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c8d0:	687b      	ldr	r3, [r7, #4]
 801c8d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c8d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801c8d6:	429a      	cmp	r2, r3
 801c8d8:	d11a      	bne.n	801c910 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	0a5b      	lsrs	r3, r3, #9
 801c8de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c8e2:	687b      	ldr	r3, [r7, #4]
 801c8e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c8e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801c8e8:	429a      	cmp	r2, r3
 801c8ea:	d111      	bne.n	801c910 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801c8ec:	68fb      	ldr	r3, [r7, #12]
 801c8ee:	0c1b      	lsrs	r3, r3, #16
 801c8f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c8f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801c8fa:	429a      	cmp	r2, r3
 801c8fc:	d108      	bne.n	801c910 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801c8fe:	68fb      	ldr	r3, [r7, #12]
 801c900:	0e1b      	lsrs	r3, r3, #24
 801c902:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c90a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801c90c:	429a      	cmp	r2, r3
 801c90e:	d001      	beq.n	801c914 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801c910:	2301      	movs	r3, #1
 801c912:	e02b      	b.n	801c96c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801c914:	4b17      	ldr	r3, [pc, #92]	@ (801c974 <HAL_RCC_OscConfig+0x8ac>)
 801c916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c918:	08db      	lsrs	r3, r3, #3
 801c91a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c91e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c924:	693a      	ldr	r2, [r7, #16]
 801c926:	429a      	cmp	r2, r3
 801c928:	d01f      	beq.n	801c96a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801c92a:	4b12      	ldr	r3, [pc, #72]	@ (801c974 <HAL_RCC_OscConfig+0x8ac>)
 801c92c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c92e:	4a11      	ldr	r2, [pc, #68]	@ (801c974 <HAL_RCC_OscConfig+0x8ac>)
 801c930:	f023 0301 	bic.w	r3, r3, #1
 801c934:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801c936:	f7fc ffaf 	bl	8019898 <HAL_GetTick>
 801c93a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801c93c:	bf00      	nop
 801c93e:	f7fc ffab 	bl	8019898 <HAL_GetTick>
 801c942:	4602      	mov	r2, r0
 801c944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c946:	4293      	cmp	r3, r2
 801c948:	d0f9      	beq.n	801c93e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801c94a:	4b0a      	ldr	r3, [pc, #40]	@ (801c974 <HAL_RCC_OscConfig+0x8ac>)
 801c94c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c94e:	4b0a      	ldr	r3, [pc, #40]	@ (801c978 <HAL_RCC_OscConfig+0x8b0>)
 801c950:	4013      	ands	r3, r2
 801c952:	687a      	ldr	r2, [r7, #4]
 801c954:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801c956:	00d2      	lsls	r2, r2, #3
 801c958:	4906      	ldr	r1, [pc, #24]	@ (801c974 <HAL_RCC_OscConfig+0x8ac>)
 801c95a:	4313      	orrs	r3, r2
 801c95c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801c95e:	4b05      	ldr	r3, [pc, #20]	@ (801c974 <HAL_RCC_OscConfig+0x8ac>)
 801c960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c962:	4a04      	ldr	r2, [pc, #16]	@ (801c974 <HAL_RCC_OscConfig+0x8ac>)
 801c964:	f043 0301 	orr.w	r3, r3, #1
 801c968:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801c96a:	2300      	movs	r3, #0
}
 801c96c:	4618      	mov	r0, r3
 801c96e:	3730      	adds	r7, #48	@ 0x30
 801c970:	46bd      	mov	sp, r7
 801c972:	bd80      	pop	{r7, pc}
 801c974:	58024400 	.word	0x58024400
 801c978:	ffff0007 	.word	0xffff0007

0801c97c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801c97c:	b580      	push	{r7, lr}
 801c97e:	b086      	sub	sp, #24
 801c980:	af00      	add	r7, sp, #0
 801c982:	6078      	str	r0, [r7, #4]
 801c984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	2b00      	cmp	r3, #0
 801c98a:	d101      	bne.n	801c990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801c98c:	2301      	movs	r3, #1
 801c98e:	e19c      	b.n	801ccca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801c990:	4b8a      	ldr	r3, [pc, #552]	@ (801cbbc <HAL_RCC_ClockConfig+0x240>)
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	f003 030f 	and.w	r3, r3, #15
 801c998:	683a      	ldr	r2, [r7, #0]
 801c99a:	429a      	cmp	r2, r3
 801c99c:	d910      	bls.n	801c9c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c99e:	4b87      	ldr	r3, [pc, #540]	@ (801cbbc <HAL_RCC_ClockConfig+0x240>)
 801c9a0:	681b      	ldr	r3, [r3, #0]
 801c9a2:	f023 020f 	bic.w	r2, r3, #15
 801c9a6:	4985      	ldr	r1, [pc, #532]	@ (801cbbc <HAL_RCC_ClockConfig+0x240>)
 801c9a8:	683b      	ldr	r3, [r7, #0]
 801c9aa:	4313      	orrs	r3, r2
 801c9ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c9ae:	4b83      	ldr	r3, [pc, #524]	@ (801cbbc <HAL_RCC_ClockConfig+0x240>)
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	f003 030f 	and.w	r3, r3, #15
 801c9b6:	683a      	ldr	r2, [r7, #0]
 801c9b8:	429a      	cmp	r2, r3
 801c9ba:	d001      	beq.n	801c9c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801c9bc:	2301      	movs	r3, #1
 801c9be:	e184      	b.n	801ccca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	681b      	ldr	r3, [r3, #0]
 801c9c4:	f003 0304 	and.w	r3, r3, #4
 801c9c8:	2b00      	cmp	r3, #0
 801c9ca:	d010      	beq.n	801c9ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	691a      	ldr	r2, [r3, #16]
 801c9d0:	4b7b      	ldr	r3, [pc, #492]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801c9d2:	699b      	ldr	r3, [r3, #24]
 801c9d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c9d8:	429a      	cmp	r2, r3
 801c9da:	d908      	bls.n	801c9ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801c9dc:	4b78      	ldr	r3, [pc, #480]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801c9de:	699b      	ldr	r3, [r3, #24]
 801c9e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	691b      	ldr	r3, [r3, #16]
 801c9e8:	4975      	ldr	r1, [pc, #468]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801c9ea:	4313      	orrs	r3, r2
 801c9ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	681b      	ldr	r3, [r3, #0]
 801c9f2:	f003 0308 	and.w	r3, r3, #8
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d010      	beq.n	801ca1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	695a      	ldr	r2, [r3, #20]
 801c9fe:	4b70      	ldr	r3, [pc, #448]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801ca00:	69db      	ldr	r3, [r3, #28]
 801ca02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801ca06:	429a      	cmp	r2, r3
 801ca08:	d908      	bls.n	801ca1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801ca0a:	4b6d      	ldr	r3, [pc, #436]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801ca0c:	69db      	ldr	r3, [r3, #28]
 801ca0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801ca12:	687b      	ldr	r3, [r7, #4]
 801ca14:	695b      	ldr	r3, [r3, #20]
 801ca16:	496a      	ldr	r1, [pc, #424]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801ca18:	4313      	orrs	r3, r2
 801ca1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	f003 0310 	and.w	r3, r3, #16
 801ca24:	2b00      	cmp	r3, #0
 801ca26:	d010      	beq.n	801ca4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	699a      	ldr	r2, [r3, #24]
 801ca2c:	4b64      	ldr	r3, [pc, #400]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801ca2e:	69db      	ldr	r3, [r3, #28]
 801ca30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801ca34:	429a      	cmp	r2, r3
 801ca36:	d908      	bls.n	801ca4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801ca38:	4b61      	ldr	r3, [pc, #388]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801ca3a:	69db      	ldr	r3, [r3, #28]
 801ca3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	699b      	ldr	r3, [r3, #24]
 801ca44:	495e      	ldr	r1, [pc, #376]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801ca46:	4313      	orrs	r3, r2
 801ca48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	681b      	ldr	r3, [r3, #0]
 801ca4e:	f003 0320 	and.w	r3, r3, #32
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d010      	beq.n	801ca78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	69da      	ldr	r2, [r3, #28]
 801ca5a:	4b59      	ldr	r3, [pc, #356]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801ca5c:	6a1b      	ldr	r3, [r3, #32]
 801ca5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801ca62:	429a      	cmp	r2, r3
 801ca64:	d908      	bls.n	801ca78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801ca66:	4b56      	ldr	r3, [pc, #344]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801ca68:	6a1b      	ldr	r3, [r3, #32]
 801ca6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	69db      	ldr	r3, [r3, #28]
 801ca72:	4953      	ldr	r1, [pc, #332]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801ca74:	4313      	orrs	r3, r2
 801ca76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	f003 0302 	and.w	r3, r3, #2
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	d010      	beq.n	801caa6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	68da      	ldr	r2, [r3, #12]
 801ca88:	4b4d      	ldr	r3, [pc, #308]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801ca8a:	699b      	ldr	r3, [r3, #24]
 801ca8c:	f003 030f 	and.w	r3, r3, #15
 801ca90:	429a      	cmp	r2, r3
 801ca92:	d908      	bls.n	801caa6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ca94:	4b4a      	ldr	r3, [pc, #296]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801ca96:	699b      	ldr	r3, [r3, #24]
 801ca98:	f023 020f 	bic.w	r2, r3, #15
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	68db      	ldr	r3, [r3, #12]
 801caa0:	4947      	ldr	r1, [pc, #284]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801caa2:	4313      	orrs	r3, r2
 801caa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801caa6:	687b      	ldr	r3, [r7, #4]
 801caa8:	681b      	ldr	r3, [r3, #0]
 801caaa:	f003 0301 	and.w	r3, r3, #1
 801caae:	2b00      	cmp	r3, #0
 801cab0:	d055      	beq.n	801cb5e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801cab2:	4b43      	ldr	r3, [pc, #268]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801cab4:	699b      	ldr	r3, [r3, #24]
 801cab6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	689b      	ldr	r3, [r3, #8]
 801cabe:	4940      	ldr	r1, [pc, #256]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801cac0:	4313      	orrs	r3, r2
 801cac2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	685b      	ldr	r3, [r3, #4]
 801cac8:	2b02      	cmp	r3, #2
 801caca:	d107      	bne.n	801cadc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801cacc:	4b3c      	ldr	r3, [pc, #240]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801cace:	681b      	ldr	r3, [r3, #0]
 801cad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d121      	bne.n	801cb1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cad8:	2301      	movs	r3, #1
 801cada:	e0f6      	b.n	801ccca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	685b      	ldr	r3, [r3, #4]
 801cae0:	2b03      	cmp	r3, #3
 801cae2:	d107      	bne.n	801caf4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801cae4:	4b36      	ldr	r3, [pc, #216]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801cae6:	681b      	ldr	r3, [r3, #0]
 801cae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801caec:	2b00      	cmp	r3, #0
 801caee:	d115      	bne.n	801cb1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801caf0:	2301      	movs	r3, #1
 801caf2:	e0ea      	b.n	801ccca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	685b      	ldr	r3, [r3, #4]
 801caf8:	2b01      	cmp	r3, #1
 801cafa:	d107      	bne.n	801cb0c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801cafc:	4b30      	ldr	r3, [pc, #192]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	d109      	bne.n	801cb1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cb08:	2301      	movs	r3, #1
 801cb0a:	e0de      	b.n	801ccca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801cb0c:	4b2c      	ldr	r3, [pc, #176]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801cb0e:	681b      	ldr	r3, [r3, #0]
 801cb10:	f003 0304 	and.w	r3, r3, #4
 801cb14:	2b00      	cmp	r3, #0
 801cb16:	d101      	bne.n	801cb1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cb18:	2301      	movs	r3, #1
 801cb1a:	e0d6      	b.n	801ccca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801cb1c:	4b28      	ldr	r3, [pc, #160]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801cb1e:	691b      	ldr	r3, [r3, #16]
 801cb20:	f023 0207 	bic.w	r2, r3, #7
 801cb24:	687b      	ldr	r3, [r7, #4]
 801cb26:	685b      	ldr	r3, [r3, #4]
 801cb28:	4925      	ldr	r1, [pc, #148]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801cb2a:	4313      	orrs	r3, r2
 801cb2c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801cb2e:	f7fc feb3 	bl	8019898 <HAL_GetTick>
 801cb32:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cb34:	e00a      	b.n	801cb4c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801cb36:	f7fc feaf 	bl	8019898 <HAL_GetTick>
 801cb3a:	4602      	mov	r2, r0
 801cb3c:	697b      	ldr	r3, [r7, #20]
 801cb3e:	1ad3      	subs	r3, r2, r3
 801cb40:	f241 3288 	movw	r2, #5000	@ 0x1388
 801cb44:	4293      	cmp	r3, r2
 801cb46:	d901      	bls.n	801cb4c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801cb48:	2303      	movs	r3, #3
 801cb4a:	e0be      	b.n	801ccca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cb4c:	4b1c      	ldr	r3, [pc, #112]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801cb4e:	691b      	ldr	r3, [r3, #16]
 801cb50:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	685b      	ldr	r3, [r3, #4]
 801cb58:	00db      	lsls	r3, r3, #3
 801cb5a:	429a      	cmp	r2, r3
 801cb5c:	d1eb      	bne.n	801cb36 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801cb5e:	687b      	ldr	r3, [r7, #4]
 801cb60:	681b      	ldr	r3, [r3, #0]
 801cb62:	f003 0302 	and.w	r3, r3, #2
 801cb66:	2b00      	cmp	r3, #0
 801cb68:	d010      	beq.n	801cb8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	68da      	ldr	r2, [r3, #12]
 801cb6e:	4b14      	ldr	r3, [pc, #80]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801cb70:	699b      	ldr	r3, [r3, #24]
 801cb72:	f003 030f 	and.w	r3, r3, #15
 801cb76:	429a      	cmp	r2, r3
 801cb78:	d208      	bcs.n	801cb8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801cb7a:	4b11      	ldr	r3, [pc, #68]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801cb7c:	699b      	ldr	r3, [r3, #24]
 801cb7e:	f023 020f 	bic.w	r2, r3, #15
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	68db      	ldr	r3, [r3, #12]
 801cb86:	490e      	ldr	r1, [pc, #56]	@ (801cbc0 <HAL_RCC_ClockConfig+0x244>)
 801cb88:	4313      	orrs	r3, r2
 801cb8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801cb8c:	4b0b      	ldr	r3, [pc, #44]	@ (801cbbc <HAL_RCC_ClockConfig+0x240>)
 801cb8e:	681b      	ldr	r3, [r3, #0]
 801cb90:	f003 030f 	and.w	r3, r3, #15
 801cb94:	683a      	ldr	r2, [r7, #0]
 801cb96:	429a      	cmp	r2, r3
 801cb98:	d214      	bcs.n	801cbc4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801cb9a:	4b08      	ldr	r3, [pc, #32]	@ (801cbbc <HAL_RCC_ClockConfig+0x240>)
 801cb9c:	681b      	ldr	r3, [r3, #0]
 801cb9e:	f023 020f 	bic.w	r2, r3, #15
 801cba2:	4906      	ldr	r1, [pc, #24]	@ (801cbbc <HAL_RCC_ClockConfig+0x240>)
 801cba4:	683b      	ldr	r3, [r7, #0]
 801cba6:	4313      	orrs	r3, r2
 801cba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801cbaa:	4b04      	ldr	r3, [pc, #16]	@ (801cbbc <HAL_RCC_ClockConfig+0x240>)
 801cbac:	681b      	ldr	r3, [r3, #0]
 801cbae:	f003 030f 	and.w	r3, r3, #15
 801cbb2:	683a      	ldr	r2, [r7, #0]
 801cbb4:	429a      	cmp	r2, r3
 801cbb6:	d005      	beq.n	801cbc4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801cbb8:	2301      	movs	r3, #1
 801cbba:	e086      	b.n	801ccca <HAL_RCC_ClockConfig+0x34e>
 801cbbc:	52002000 	.word	0x52002000
 801cbc0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	f003 0304 	and.w	r3, r3, #4
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d010      	beq.n	801cbf2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	691a      	ldr	r2, [r3, #16]
 801cbd4:	4b3f      	ldr	r3, [pc, #252]	@ (801ccd4 <HAL_RCC_ClockConfig+0x358>)
 801cbd6:	699b      	ldr	r3, [r3, #24]
 801cbd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cbdc:	429a      	cmp	r2, r3
 801cbde:	d208      	bcs.n	801cbf2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801cbe0:	4b3c      	ldr	r3, [pc, #240]	@ (801ccd4 <HAL_RCC_ClockConfig+0x358>)
 801cbe2:	699b      	ldr	r3, [r3, #24]
 801cbe4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	691b      	ldr	r3, [r3, #16]
 801cbec:	4939      	ldr	r1, [pc, #228]	@ (801ccd4 <HAL_RCC_ClockConfig+0x358>)
 801cbee:	4313      	orrs	r3, r2
 801cbf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	681b      	ldr	r3, [r3, #0]
 801cbf6:	f003 0308 	and.w	r3, r3, #8
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	d010      	beq.n	801cc20 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	695a      	ldr	r2, [r3, #20]
 801cc02:	4b34      	ldr	r3, [pc, #208]	@ (801ccd4 <HAL_RCC_ClockConfig+0x358>)
 801cc04:	69db      	ldr	r3, [r3, #28]
 801cc06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cc0a:	429a      	cmp	r2, r3
 801cc0c:	d208      	bcs.n	801cc20 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801cc0e:	4b31      	ldr	r3, [pc, #196]	@ (801ccd4 <HAL_RCC_ClockConfig+0x358>)
 801cc10:	69db      	ldr	r3, [r3, #28]
 801cc12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	695b      	ldr	r3, [r3, #20]
 801cc1a:	492e      	ldr	r1, [pc, #184]	@ (801ccd4 <HAL_RCC_ClockConfig+0x358>)
 801cc1c:	4313      	orrs	r3, r2
 801cc1e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	f003 0310 	and.w	r3, r3, #16
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d010      	beq.n	801cc4e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	699a      	ldr	r2, [r3, #24]
 801cc30:	4b28      	ldr	r3, [pc, #160]	@ (801ccd4 <HAL_RCC_ClockConfig+0x358>)
 801cc32:	69db      	ldr	r3, [r3, #28]
 801cc34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801cc38:	429a      	cmp	r2, r3
 801cc3a:	d208      	bcs.n	801cc4e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801cc3c:	4b25      	ldr	r3, [pc, #148]	@ (801ccd4 <HAL_RCC_ClockConfig+0x358>)
 801cc3e:	69db      	ldr	r3, [r3, #28]
 801cc40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801cc44:	687b      	ldr	r3, [r7, #4]
 801cc46:	699b      	ldr	r3, [r3, #24]
 801cc48:	4922      	ldr	r1, [pc, #136]	@ (801ccd4 <HAL_RCC_ClockConfig+0x358>)
 801cc4a:	4313      	orrs	r3, r2
 801cc4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	681b      	ldr	r3, [r3, #0]
 801cc52:	f003 0320 	and.w	r3, r3, #32
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	d010      	beq.n	801cc7c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801cc5a:	687b      	ldr	r3, [r7, #4]
 801cc5c:	69da      	ldr	r2, [r3, #28]
 801cc5e:	4b1d      	ldr	r3, [pc, #116]	@ (801ccd4 <HAL_RCC_ClockConfig+0x358>)
 801cc60:	6a1b      	ldr	r3, [r3, #32]
 801cc62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cc66:	429a      	cmp	r2, r3
 801cc68:	d208      	bcs.n	801cc7c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801cc6a:	4b1a      	ldr	r3, [pc, #104]	@ (801ccd4 <HAL_RCC_ClockConfig+0x358>)
 801cc6c:	6a1b      	ldr	r3, [r3, #32]
 801cc6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	69db      	ldr	r3, [r3, #28]
 801cc76:	4917      	ldr	r1, [pc, #92]	@ (801ccd4 <HAL_RCC_ClockConfig+0x358>)
 801cc78:	4313      	orrs	r3, r2
 801cc7a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801cc7c:	f000 f834 	bl	801cce8 <HAL_RCC_GetSysClockFreq>
 801cc80:	4602      	mov	r2, r0
 801cc82:	4b14      	ldr	r3, [pc, #80]	@ (801ccd4 <HAL_RCC_ClockConfig+0x358>)
 801cc84:	699b      	ldr	r3, [r3, #24]
 801cc86:	0a1b      	lsrs	r3, r3, #8
 801cc88:	f003 030f 	and.w	r3, r3, #15
 801cc8c:	4912      	ldr	r1, [pc, #72]	@ (801ccd8 <HAL_RCC_ClockConfig+0x35c>)
 801cc8e:	5ccb      	ldrb	r3, [r1, r3]
 801cc90:	f003 031f 	and.w	r3, r3, #31
 801cc94:	fa22 f303 	lsr.w	r3, r2, r3
 801cc98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801cc9a:	4b0e      	ldr	r3, [pc, #56]	@ (801ccd4 <HAL_RCC_ClockConfig+0x358>)
 801cc9c:	699b      	ldr	r3, [r3, #24]
 801cc9e:	f003 030f 	and.w	r3, r3, #15
 801cca2:	4a0d      	ldr	r2, [pc, #52]	@ (801ccd8 <HAL_RCC_ClockConfig+0x35c>)
 801cca4:	5cd3      	ldrb	r3, [r2, r3]
 801cca6:	f003 031f 	and.w	r3, r3, #31
 801ccaa:	693a      	ldr	r2, [r7, #16]
 801ccac:	fa22 f303 	lsr.w	r3, r2, r3
 801ccb0:	4a0a      	ldr	r2, [pc, #40]	@ (801ccdc <HAL_RCC_ClockConfig+0x360>)
 801ccb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801ccb4:	4a0a      	ldr	r2, [pc, #40]	@ (801cce0 <HAL_RCC_ClockConfig+0x364>)
 801ccb6:	693b      	ldr	r3, [r7, #16]
 801ccb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801ccba:	4b0a      	ldr	r3, [pc, #40]	@ (801cce4 <HAL_RCC_ClockConfig+0x368>)
 801ccbc:	681b      	ldr	r3, [r3, #0]
 801ccbe:	4618      	mov	r0, r3
 801ccc0:	f7fc fda0 	bl	8019804 <HAL_InitTick>
 801ccc4:	4603      	mov	r3, r0
 801ccc6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801ccc8:	7bfb      	ldrb	r3, [r7, #15]
}
 801ccca:	4618      	mov	r0, r3
 801cccc:	3718      	adds	r7, #24
 801ccce:	46bd      	mov	sp, r7
 801ccd0:	bd80      	pop	{r7, pc}
 801ccd2:	bf00      	nop
 801ccd4:	58024400 	.word	0x58024400
 801ccd8:	08026f08 	.word	0x08026f08
 801ccdc:	20000004 	.word	0x20000004
 801cce0:	20000000 	.word	0x20000000
 801cce4:	20000020 	.word	0x20000020

0801cce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801cce8:	b480      	push	{r7}
 801ccea:	b089      	sub	sp, #36	@ 0x24
 801ccec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801ccee:	4bb3      	ldr	r3, [pc, #716]	@ (801cfbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ccf0:	691b      	ldr	r3, [r3, #16]
 801ccf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801ccf6:	2b18      	cmp	r3, #24
 801ccf8:	f200 8155 	bhi.w	801cfa6 <HAL_RCC_GetSysClockFreq+0x2be>
 801ccfc:	a201      	add	r2, pc, #4	@ (adr r2, 801cd04 <HAL_RCC_GetSysClockFreq+0x1c>)
 801ccfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cd02:	bf00      	nop
 801cd04:	0801cd69 	.word	0x0801cd69
 801cd08:	0801cfa7 	.word	0x0801cfa7
 801cd0c:	0801cfa7 	.word	0x0801cfa7
 801cd10:	0801cfa7 	.word	0x0801cfa7
 801cd14:	0801cfa7 	.word	0x0801cfa7
 801cd18:	0801cfa7 	.word	0x0801cfa7
 801cd1c:	0801cfa7 	.word	0x0801cfa7
 801cd20:	0801cfa7 	.word	0x0801cfa7
 801cd24:	0801cd8f 	.word	0x0801cd8f
 801cd28:	0801cfa7 	.word	0x0801cfa7
 801cd2c:	0801cfa7 	.word	0x0801cfa7
 801cd30:	0801cfa7 	.word	0x0801cfa7
 801cd34:	0801cfa7 	.word	0x0801cfa7
 801cd38:	0801cfa7 	.word	0x0801cfa7
 801cd3c:	0801cfa7 	.word	0x0801cfa7
 801cd40:	0801cfa7 	.word	0x0801cfa7
 801cd44:	0801cd95 	.word	0x0801cd95
 801cd48:	0801cfa7 	.word	0x0801cfa7
 801cd4c:	0801cfa7 	.word	0x0801cfa7
 801cd50:	0801cfa7 	.word	0x0801cfa7
 801cd54:	0801cfa7 	.word	0x0801cfa7
 801cd58:	0801cfa7 	.word	0x0801cfa7
 801cd5c:	0801cfa7 	.word	0x0801cfa7
 801cd60:	0801cfa7 	.word	0x0801cfa7
 801cd64:	0801cd9b 	.word	0x0801cd9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801cd68:	4b94      	ldr	r3, [pc, #592]	@ (801cfbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cd6a:	681b      	ldr	r3, [r3, #0]
 801cd6c:	f003 0320 	and.w	r3, r3, #32
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d009      	beq.n	801cd88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801cd74:	4b91      	ldr	r3, [pc, #580]	@ (801cfbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cd76:	681b      	ldr	r3, [r3, #0]
 801cd78:	08db      	lsrs	r3, r3, #3
 801cd7a:	f003 0303 	and.w	r3, r3, #3
 801cd7e:	4a90      	ldr	r2, [pc, #576]	@ (801cfc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801cd80:	fa22 f303 	lsr.w	r3, r2, r3
 801cd84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801cd86:	e111      	b.n	801cfac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801cd88:	4b8d      	ldr	r3, [pc, #564]	@ (801cfc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801cd8a:	61bb      	str	r3, [r7, #24]
      break;
 801cd8c:	e10e      	b.n	801cfac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801cd8e:	4b8d      	ldr	r3, [pc, #564]	@ (801cfc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801cd90:	61bb      	str	r3, [r7, #24]
      break;
 801cd92:	e10b      	b.n	801cfac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801cd94:	4b8c      	ldr	r3, [pc, #560]	@ (801cfc8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801cd96:	61bb      	str	r3, [r7, #24]
      break;
 801cd98:	e108      	b.n	801cfac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801cd9a:	4b88      	ldr	r3, [pc, #544]	@ (801cfbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cd9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cd9e:	f003 0303 	and.w	r3, r3, #3
 801cda2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801cda4:	4b85      	ldr	r3, [pc, #532]	@ (801cfbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cda6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cda8:	091b      	lsrs	r3, r3, #4
 801cdaa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cdae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801cdb0:	4b82      	ldr	r3, [pc, #520]	@ (801cfbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cdb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cdb4:	f003 0301 	and.w	r3, r3, #1
 801cdb8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801cdba:	4b80      	ldr	r3, [pc, #512]	@ (801cfbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cdbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cdbe:	08db      	lsrs	r3, r3, #3
 801cdc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cdc4:	68fa      	ldr	r2, [r7, #12]
 801cdc6:	fb02 f303 	mul.w	r3, r2, r3
 801cdca:	ee07 3a90 	vmov	s15, r3
 801cdce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cdd2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801cdd6:	693b      	ldr	r3, [r7, #16]
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	f000 80e1 	beq.w	801cfa0 <HAL_RCC_GetSysClockFreq+0x2b8>
 801cdde:	697b      	ldr	r3, [r7, #20]
 801cde0:	2b02      	cmp	r3, #2
 801cde2:	f000 8083 	beq.w	801ceec <HAL_RCC_GetSysClockFreq+0x204>
 801cde6:	697b      	ldr	r3, [r7, #20]
 801cde8:	2b02      	cmp	r3, #2
 801cdea:	f200 80a1 	bhi.w	801cf30 <HAL_RCC_GetSysClockFreq+0x248>
 801cdee:	697b      	ldr	r3, [r7, #20]
 801cdf0:	2b00      	cmp	r3, #0
 801cdf2:	d003      	beq.n	801cdfc <HAL_RCC_GetSysClockFreq+0x114>
 801cdf4:	697b      	ldr	r3, [r7, #20]
 801cdf6:	2b01      	cmp	r3, #1
 801cdf8:	d056      	beq.n	801cea8 <HAL_RCC_GetSysClockFreq+0x1c0>
 801cdfa:	e099      	b.n	801cf30 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801cdfc:	4b6f      	ldr	r3, [pc, #444]	@ (801cfbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cdfe:	681b      	ldr	r3, [r3, #0]
 801ce00:	f003 0320 	and.w	r3, r3, #32
 801ce04:	2b00      	cmp	r3, #0
 801ce06:	d02d      	beq.n	801ce64 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ce08:	4b6c      	ldr	r3, [pc, #432]	@ (801cfbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ce0a:	681b      	ldr	r3, [r3, #0]
 801ce0c:	08db      	lsrs	r3, r3, #3
 801ce0e:	f003 0303 	and.w	r3, r3, #3
 801ce12:	4a6b      	ldr	r2, [pc, #428]	@ (801cfc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801ce14:	fa22 f303 	lsr.w	r3, r2, r3
 801ce18:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ce1a:	687b      	ldr	r3, [r7, #4]
 801ce1c:	ee07 3a90 	vmov	s15, r3
 801ce20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ce24:	693b      	ldr	r3, [r7, #16]
 801ce26:	ee07 3a90 	vmov	s15, r3
 801ce2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ce2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ce32:	4b62      	ldr	r3, [pc, #392]	@ (801cfbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ce34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ce36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ce3a:	ee07 3a90 	vmov	s15, r3
 801ce3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ce42:	ed97 6a02 	vldr	s12, [r7, #8]
 801ce46:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801cfcc <HAL_RCC_GetSysClockFreq+0x2e4>
 801ce4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ce4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ce52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ce56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ce5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ce5e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801ce62:	e087      	b.n	801cf74 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ce64:	693b      	ldr	r3, [r7, #16]
 801ce66:	ee07 3a90 	vmov	s15, r3
 801ce6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ce6e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801cfd0 <HAL_RCC_GetSysClockFreq+0x2e8>
 801ce72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ce76:	4b51      	ldr	r3, [pc, #324]	@ (801cfbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ce78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ce7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ce7e:	ee07 3a90 	vmov	s15, r3
 801ce82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ce86:	ed97 6a02 	vldr	s12, [r7, #8]
 801ce8a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801cfcc <HAL_RCC_GetSysClockFreq+0x2e4>
 801ce8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ce92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ce96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ce9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ce9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cea2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801cea6:	e065      	b.n	801cf74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801cea8:	693b      	ldr	r3, [r7, #16]
 801ceaa:	ee07 3a90 	vmov	s15, r3
 801ceae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ceb2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801cfd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801ceb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ceba:	4b40      	ldr	r3, [pc, #256]	@ (801cfbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cec2:	ee07 3a90 	vmov	s15, r3
 801cec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ceca:	ed97 6a02 	vldr	s12, [r7, #8]
 801cece:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801cfcc <HAL_RCC_GetSysClockFreq+0x2e4>
 801ced2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ced6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ceda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cee6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801ceea:	e043      	b.n	801cf74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ceec:	693b      	ldr	r3, [r7, #16]
 801ceee:	ee07 3a90 	vmov	s15, r3
 801cef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cef6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801cfd8 <HAL_RCC_GetSysClockFreq+0x2f0>
 801cefa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cefe:	4b2f      	ldr	r3, [pc, #188]	@ (801cfbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cf00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cf02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cf06:	ee07 3a90 	vmov	s15, r3
 801cf0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cf0e:	ed97 6a02 	vldr	s12, [r7, #8]
 801cf12:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801cfcc <HAL_RCC_GetSysClockFreq+0x2e4>
 801cf16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801cf1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cf1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cf22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cf26:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cf2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801cf2e:	e021      	b.n	801cf74 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801cf30:	693b      	ldr	r3, [r7, #16]
 801cf32:	ee07 3a90 	vmov	s15, r3
 801cf36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cf3a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801cfd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801cf3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cf42:	4b1e      	ldr	r3, [pc, #120]	@ (801cfbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cf44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cf46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cf4a:	ee07 3a90 	vmov	s15, r3
 801cf4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cf52:	ed97 6a02 	vldr	s12, [r7, #8]
 801cf56:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801cfcc <HAL_RCC_GetSysClockFreq+0x2e4>
 801cf5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801cf5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cf62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cf66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cf6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cf6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801cf72:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801cf74:	4b11      	ldr	r3, [pc, #68]	@ (801cfbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cf76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cf78:	0a5b      	lsrs	r3, r3, #9
 801cf7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801cf7e:	3301      	adds	r3, #1
 801cf80:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801cf82:	683b      	ldr	r3, [r7, #0]
 801cf84:	ee07 3a90 	vmov	s15, r3
 801cf88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801cf8c:	edd7 6a07 	vldr	s13, [r7, #28]
 801cf90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801cf94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cf98:	ee17 3a90 	vmov	r3, s15
 801cf9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801cf9e:	e005      	b.n	801cfac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801cfa0:	2300      	movs	r3, #0
 801cfa2:	61bb      	str	r3, [r7, #24]
      break;
 801cfa4:	e002      	b.n	801cfac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801cfa6:	4b07      	ldr	r3, [pc, #28]	@ (801cfc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801cfa8:	61bb      	str	r3, [r7, #24]
      break;
 801cfaa:	bf00      	nop
  }

  return sysclockfreq;
 801cfac:	69bb      	ldr	r3, [r7, #24]
}
 801cfae:	4618      	mov	r0, r3
 801cfb0:	3724      	adds	r7, #36	@ 0x24
 801cfb2:	46bd      	mov	sp, r7
 801cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfb8:	4770      	bx	lr
 801cfba:	bf00      	nop
 801cfbc:	58024400 	.word	0x58024400
 801cfc0:	03d09000 	.word	0x03d09000
 801cfc4:	003d0900 	.word	0x003d0900
 801cfc8:	017d7840 	.word	0x017d7840
 801cfcc:	46000000 	.word	0x46000000
 801cfd0:	4c742400 	.word	0x4c742400
 801cfd4:	4a742400 	.word	0x4a742400
 801cfd8:	4bbebc20 	.word	0x4bbebc20

0801cfdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801cfdc:	b580      	push	{r7, lr}
 801cfde:	b082      	sub	sp, #8
 801cfe0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801cfe2:	f7ff fe81 	bl	801cce8 <HAL_RCC_GetSysClockFreq>
 801cfe6:	4602      	mov	r2, r0
 801cfe8:	4b10      	ldr	r3, [pc, #64]	@ (801d02c <HAL_RCC_GetHCLKFreq+0x50>)
 801cfea:	699b      	ldr	r3, [r3, #24]
 801cfec:	0a1b      	lsrs	r3, r3, #8
 801cfee:	f003 030f 	and.w	r3, r3, #15
 801cff2:	490f      	ldr	r1, [pc, #60]	@ (801d030 <HAL_RCC_GetHCLKFreq+0x54>)
 801cff4:	5ccb      	ldrb	r3, [r1, r3]
 801cff6:	f003 031f 	and.w	r3, r3, #31
 801cffa:	fa22 f303 	lsr.w	r3, r2, r3
 801cffe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801d000:	4b0a      	ldr	r3, [pc, #40]	@ (801d02c <HAL_RCC_GetHCLKFreq+0x50>)
 801d002:	699b      	ldr	r3, [r3, #24]
 801d004:	f003 030f 	and.w	r3, r3, #15
 801d008:	4a09      	ldr	r2, [pc, #36]	@ (801d030 <HAL_RCC_GetHCLKFreq+0x54>)
 801d00a:	5cd3      	ldrb	r3, [r2, r3]
 801d00c:	f003 031f 	and.w	r3, r3, #31
 801d010:	687a      	ldr	r2, [r7, #4]
 801d012:	fa22 f303 	lsr.w	r3, r2, r3
 801d016:	4a07      	ldr	r2, [pc, #28]	@ (801d034 <HAL_RCC_GetHCLKFreq+0x58>)
 801d018:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801d01a:	4a07      	ldr	r2, [pc, #28]	@ (801d038 <HAL_RCC_GetHCLKFreq+0x5c>)
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801d020:	4b04      	ldr	r3, [pc, #16]	@ (801d034 <HAL_RCC_GetHCLKFreq+0x58>)
 801d022:	681b      	ldr	r3, [r3, #0]
}
 801d024:	4618      	mov	r0, r3
 801d026:	3708      	adds	r7, #8
 801d028:	46bd      	mov	sp, r7
 801d02a:	bd80      	pop	{r7, pc}
 801d02c:	58024400 	.word	0x58024400
 801d030:	08026f08 	.word	0x08026f08
 801d034:	20000004 	.word	0x20000004
 801d038:	20000000 	.word	0x20000000

0801d03c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801d03c:	b580      	push	{r7, lr}
 801d03e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801d040:	f7ff ffcc 	bl	801cfdc <HAL_RCC_GetHCLKFreq>
 801d044:	4602      	mov	r2, r0
 801d046:	4b06      	ldr	r3, [pc, #24]	@ (801d060 <HAL_RCC_GetPCLK1Freq+0x24>)
 801d048:	69db      	ldr	r3, [r3, #28]
 801d04a:	091b      	lsrs	r3, r3, #4
 801d04c:	f003 0307 	and.w	r3, r3, #7
 801d050:	4904      	ldr	r1, [pc, #16]	@ (801d064 <HAL_RCC_GetPCLK1Freq+0x28>)
 801d052:	5ccb      	ldrb	r3, [r1, r3]
 801d054:	f003 031f 	and.w	r3, r3, #31
 801d058:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801d05c:	4618      	mov	r0, r3
 801d05e:	bd80      	pop	{r7, pc}
 801d060:	58024400 	.word	0x58024400
 801d064:	08026f08 	.word	0x08026f08

0801d068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801d068:	b580      	push	{r7, lr}
 801d06a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801d06c:	f7ff ffb6 	bl	801cfdc <HAL_RCC_GetHCLKFreq>
 801d070:	4602      	mov	r2, r0
 801d072:	4b06      	ldr	r3, [pc, #24]	@ (801d08c <HAL_RCC_GetPCLK2Freq+0x24>)
 801d074:	69db      	ldr	r3, [r3, #28]
 801d076:	0a1b      	lsrs	r3, r3, #8
 801d078:	f003 0307 	and.w	r3, r3, #7
 801d07c:	4904      	ldr	r1, [pc, #16]	@ (801d090 <HAL_RCC_GetPCLK2Freq+0x28>)
 801d07e:	5ccb      	ldrb	r3, [r1, r3]
 801d080:	f003 031f 	and.w	r3, r3, #31
 801d084:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801d088:	4618      	mov	r0, r3
 801d08a:	bd80      	pop	{r7, pc}
 801d08c:	58024400 	.word	0x58024400
 801d090:	08026f08 	.word	0x08026f08

0801d094 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801d094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d098:	b0ca      	sub	sp, #296	@ 0x128
 801d09a:	af00      	add	r7, sp, #0
 801d09c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801d0a0:	2300      	movs	r3, #0
 801d0a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801d0a6:	2300      	movs	r3, #0
 801d0a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801d0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0b4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801d0b8:	2500      	movs	r5, #0
 801d0ba:	ea54 0305 	orrs.w	r3, r4, r5
 801d0be:	d049      	beq.n	801d154 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801d0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d0c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d0ca:	d02f      	beq.n	801d12c <HAL_RCCEx_PeriphCLKConfig+0x98>
 801d0cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d0d0:	d828      	bhi.n	801d124 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d0d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d0d6:	d01a      	beq.n	801d10e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801d0d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d0dc:	d822      	bhi.n	801d124 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	d003      	beq.n	801d0ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 801d0e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801d0e6:	d007      	beq.n	801d0f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801d0e8:	e01c      	b.n	801d124 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d0ea:	4bb8      	ldr	r3, [pc, #736]	@ (801d3cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d0ee:	4ab7      	ldr	r2, [pc, #732]	@ (801d3cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d0f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d0f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d0f6:	e01a      	b.n	801d12e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0fc:	3308      	adds	r3, #8
 801d0fe:	2102      	movs	r1, #2
 801d100:	4618      	mov	r0, r3
 801d102:	f001 fc8f 	bl	801ea24 <RCCEx_PLL2_Config>
 801d106:	4603      	mov	r3, r0
 801d108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d10c:	e00f      	b.n	801d12e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d112:	3328      	adds	r3, #40	@ 0x28
 801d114:	2102      	movs	r1, #2
 801d116:	4618      	mov	r0, r3
 801d118:	f001 fd36 	bl	801eb88 <RCCEx_PLL3_Config>
 801d11c:	4603      	mov	r3, r0
 801d11e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d122:	e004      	b.n	801d12e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d124:	2301      	movs	r3, #1
 801d126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d12a:	e000      	b.n	801d12e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801d12c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d12e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d132:	2b00      	cmp	r3, #0
 801d134:	d10a      	bne.n	801d14c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801d136:	4ba5      	ldr	r3, [pc, #660]	@ (801d3cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d13a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801d13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d142:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d144:	4aa1      	ldr	r2, [pc, #644]	@ (801d3cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d146:	430b      	orrs	r3, r1
 801d148:	6513      	str	r3, [r2, #80]	@ 0x50
 801d14a:	e003      	b.n	801d154 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d14c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801d154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d15c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801d160:	f04f 0900 	mov.w	r9, #0
 801d164:	ea58 0309 	orrs.w	r3, r8, r9
 801d168:	d047      	beq.n	801d1fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801d16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d16e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d170:	2b04      	cmp	r3, #4
 801d172:	d82a      	bhi.n	801d1ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 801d174:	a201      	add	r2, pc, #4	@ (adr r2, 801d17c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801d176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d17a:	bf00      	nop
 801d17c:	0801d191 	.word	0x0801d191
 801d180:	0801d19f 	.word	0x0801d19f
 801d184:	0801d1b5 	.word	0x0801d1b5
 801d188:	0801d1d3 	.word	0x0801d1d3
 801d18c:	0801d1d3 	.word	0x0801d1d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d190:	4b8e      	ldr	r3, [pc, #568]	@ (801d3cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d194:	4a8d      	ldr	r2, [pc, #564]	@ (801d3cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d19a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d19c:	e01a      	b.n	801d1d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1a2:	3308      	adds	r3, #8
 801d1a4:	2100      	movs	r1, #0
 801d1a6:	4618      	mov	r0, r3
 801d1a8:	f001 fc3c 	bl	801ea24 <RCCEx_PLL2_Config>
 801d1ac:	4603      	mov	r3, r0
 801d1ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d1b2:	e00f      	b.n	801d1d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d1b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1b8:	3328      	adds	r3, #40	@ 0x28
 801d1ba:	2100      	movs	r1, #0
 801d1bc:	4618      	mov	r0, r3
 801d1be:	f001 fce3 	bl	801eb88 <RCCEx_PLL3_Config>
 801d1c2:	4603      	mov	r3, r0
 801d1c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d1c8:	e004      	b.n	801d1d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d1ca:	2301      	movs	r3, #1
 801d1cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d1d0:	e000      	b.n	801d1d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801d1d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d1d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d1d8:	2b00      	cmp	r3, #0
 801d1da:	d10a      	bne.n	801d1f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d1dc:	4b7b      	ldr	r3, [pc, #492]	@ (801d3cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d1de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d1e0:	f023 0107 	bic.w	r1, r3, #7
 801d1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d1ea:	4a78      	ldr	r2, [pc, #480]	@ (801d3cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d1ec:	430b      	orrs	r3, r1
 801d1ee:	6513      	str	r3, [r2, #80]	@ 0x50
 801d1f0:	e003      	b.n	801d1fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d1f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d1f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801d1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d202:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801d206:	f04f 0b00 	mov.w	fp, #0
 801d20a:	ea5a 030b 	orrs.w	r3, sl, fp
 801d20e:	d04c      	beq.n	801d2aa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801d210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d21a:	d030      	beq.n	801d27e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801d21c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d220:	d829      	bhi.n	801d276 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d222:	2bc0      	cmp	r3, #192	@ 0xc0
 801d224:	d02d      	beq.n	801d282 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801d226:	2bc0      	cmp	r3, #192	@ 0xc0
 801d228:	d825      	bhi.n	801d276 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d22a:	2b80      	cmp	r3, #128	@ 0x80
 801d22c:	d018      	beq.n	801d260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801d22e:	2b80      	cmp	r3, #128	@ 0x80
 801d230:	d821      	bhi.n	801d276 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d232:	2b00      	cmp	r3, #0
 801d234:	d002      	beq.n	801d23c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801d236:	2b40      	cmp	r3, #64	@ 0x40
 801d238:	d007      	beq.n	801d24a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801d23a:	e01c      	b.n	801d276 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d23c:	4b63      	ldr	r3, [pc, #396]	@ (801d3cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d240:	4a62      	ldr	r2, [pc, #392]	@ (801d3cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d248:	e01c      	b.n	801d284 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d24a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d24e:	3308      	adds	r3, #8
 801d250:	2100      	movs	r1, #0
 801d252:	4618      	mov	r0, r3
 801d254:	f001 fbe6 	bl	801ea24 <RCCEx_PLL2_Config>
 801d258:	4603      	mov	r3, r0
 801d25a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d25e:	e011      	b.n	801d284 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d264:	3328      	adds	r3, #40	@ 0x28
 801d266:	2100      	movs	r1, #0
 801d268:	4618      	mov	r0, r3
 801d26a:	f001 fc8d 	bl	801eb88 <RCCEx_PLL3_Config>
 801d26e:	4603      	mov	r3, r0
 801d270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d274:	e006      	b.n	801d284 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d276:	2301      	movs	r3, #1
 801d278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d27c:	e002      	b.n	801d284 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801d27e:	bf00      	nop
 801d280:	e000      	b.n	801d284 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801d282:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d288:	2b00      	cmp	r3, #0
 801d28a:	d10a      	bne.n	801d2a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801d28c:	4b4f      	ldr	r3, [pc, #316]	@ (801d3cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d28e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d290:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801d294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d29a:	4a4c      	ldr	r2, [pc, #304]	@ (801d3cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d29c:	430b      	orrs	r3, r1
 801d29e:	6513      	str	r3, [r2, #80]	@ 0x50
 801d2a0:	e003      	b.n	801d2aa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d2a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d2a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801d2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2b2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801d2b6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801d2ba:	2300      	movs	r3, #0
 801d2bc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801d2c0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801d2c4:	460b      	mov	r3, r1
 801d2c6:	4313      	orrs	r3, r2
 801d2c8:	d053      	beq.n	801d372 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801d2ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d2d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d2d6:	d035      	beq.n	801d344 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801d2d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d2dc:	d82e      	bhi.n	801d33c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d2de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801d2e2:	d031      	beq.n	801d348 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801d2e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801d2e8:	d828      	bhi.n	801d33c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d2ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801d2ee:	d01a      	beq.n	801d326 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801d2f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801d2f4:	d822      	bhi.n	801d33c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d2f6:	2b00      	cmp	r3, #0
 801d2f8:	d003      	beq.n	801d302 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801d2fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d2fe:	d007      	beq.n	801d310 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801d300:	e01c      	b.n	801d33c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d302:	4b32      	ldr	r3, [pc, #200]	@ (801d3cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d306:	4a31      	ldr	r2, [pc, #196]	@ (801d3cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d30c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d30e:	e01c      	b.n	801d34a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d314:	3308      	adds	r3, #8
 801d316:	2100      	movs	r1, #0
 801d318:	4618      	mov	r0, r3
 801d31a:	f001 fb83 	bl	801ea24 <RCCEx_PLL2_Config>
 801d31e:	4603      	mov	r3, r0
 801d320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801d324:	e011      	b.n	801d34a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d32a:	3328      	adds	r3, #40	@ 0x28
 801d32c:	2100      	movs	r1, #0
 801d32e:	4618      	mov	r0, r3
 801d330:	f001 fc2a 	bl	801eb88 <RCCEx_PLL3_Config>
 801d334:	4603      	mov	r3, r0
 801d336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d33a:	e006      	b.n	801d34a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801d33c:	2301      	movs	r3, #1
 801d33e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d342:	e002      	b.n	801d34a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801d344:	bf00      	nop
 801d346:	e000      	b.n	801d34a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801d348:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d34a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d34e:	2b00      	cmp	r3, #0
 801d350:	d10b      	bne.n	801d36a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801d352:	4b1e      	ldr	r3, [pc, #120]	@ (801d3cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d356:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801d35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d35e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d362:	4a1a      	ldr	r2, [pc, #104]	@ (801d3cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d364:	430b      	orrs	r3, r1
 801d366:	6593      	str	r3, [r2, #88]	@ 0x58
 801d368:	e003      	b.n	801d372 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d36a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d36e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801d372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d37a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801d37e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801d382:	2300      	movs	r3, #0
 801d384:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801d388:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801d38c:	460b      	mov	r3, r1
 801d38e:	4313      	orrs	r3, r2
 801d390:	d056      	beq.n	801d440 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801d392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d396:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801d39a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d39e:	d038      	beq.n	801d412 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801d3a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d3a4:	d831      	bhi.n	801d40a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d3a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d3aa:	d034      	beq.n	801d416 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801d3ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d3b0:	d82b      	bhi.n	801d40a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d3b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d3b6:	d01d      	beq.n	801d3f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801d3b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d3bc:	d825      	bhi.n	801d40a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	d006      	beq.n	801d3d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801d3c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d3c6:	d00a      	beq.n	801d3de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801d3c8:	e01f      	b.n	801d40a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d3ca:	bf00      	nop
 801d3cc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d3d0:	4ba2      	ldr	r3, [pc, #648]	@ (801d65c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d3d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d3d4:	4aa1      	ldr	r2, [pc, #644]	@ (801d65c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d3d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d3da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d3dc:	e01c      	b.n	801d418 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3e2:	3308      	adds	r3, #8
 801d3e4:	2100      	movs	r1, #0
 801d3e6:	4618      	mov	r0, r3
 801d3e8:	f001 fb1c 	bl	801ea24 <RCCEx_PLL2_Config>
 801d3ec:	4603      	mov	r3, r0
 801d3ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801d3f2:	e011      	b.n	801d418 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3f8:	3328      	adds	r3, #40	@ 0x28
 801d3fa:	2100      	movs	r1, #0
 801d3fc:	4618      	mov	r0, r3
 801d3fe:	f001 fbc3 	bl	801eb88 <RCCEx_PLL3_Config>
 801d402:	4603      	mov	r3, r0
 801d404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d408:	e006      	b.n	801d418 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801d40a:	2301      	movs	r3, #1
 801d40c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d410:	e002      	b.n	801d418 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801d412:	bf00      	nop
 801d414:	e000      	b.n	801d418 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801d416:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	d10b      	bne.n	801d438 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801d420:	4b8e      	ldr	r3, [pc, #568]	@ (801d65c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d424:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801d428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d42c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801d430:	4a8a      	ldr	r2, [pc, #552]	@ (801d65c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d432:	430b      	orrs	r3, r1
 801d434:	6593      	str	r3, [r2, #88]	@ 0x58
 801d436:	e003      	b.n	801d440 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d438:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d43c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801d440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d444:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d448:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801d44c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801d450:	2300      	movs	r3, #0
 801d452:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801d456:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801d45a:	460b      	mov	r3, r1
 801d45c:	4313      	orrs	r3, r2
 801d45e:	d03a      	beq.n	801d4d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801d460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d466:	2b30      	cmp	r3, #48	@ 0x30
 801d468:	d01f      	beq.n	801d4aa <HAL_RCCEx_PeriphCLKConfig+0x416>
 801d46a:	2b30      	cmp	r3, #48	@ 0x30
 801d46c:	d819      	bhi.n	801d4a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801d46e:	2b20      	cmp	r3, #32
 801d470:	d00c      	beq.n	801d48c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801d472:	2b20      	cmp	r3, #32
 801d474:	d815      	bhi.n	801d4a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801d476:	2b00      	cmp	r3, #0
 801d478:	d019      	beq.n	801d4ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801d47a:	2b10      	cmp	r3, #16
 801d47c:	d111      	bne.n	801d4a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d47e:	4b77      	ldr	r3, [pc, #476]	@ (801d65c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d482:	4a76      	ldr	r2, [pc, #472]	@ (801d65c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d488:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801d48a:	e011      	b.n	801d4b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d490:	3308      	adds	r3, #8
 801d492:	2102      	movs	r1, #2
 801d494:	4618      	mov	r0, r3
 801d496:	f001 fac5 	bl	801ea24 <RCCEx_PLL2_Config>
 801d49a:	4603      	mov	r3, r0
 801d49c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801d4a0:	e006      	b.n	801d4b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801d4a2:	2301      	movs	r3, #1
 801d4a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d4a8:	e002      	b.n	801d4b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801d4aa:	bf00      	nop
 801d4ac:	e000      	b.n	801d4b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801d4ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d4b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	d10a      	bne.n	801d4ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801d4b8:	4b68      	ldr	r3, [pc, #416]	@ (801d65c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d4ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d4bc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801d4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d4c6:	4a65      	ldr	r2, [pc, #404]	@ (801d65c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d4c8:	430b      	orrs	r3, r1
 801d4ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801d4cc:	e003      	b.n	801d4d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d4ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d4d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801d4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4de:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801d4e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801d4e6:	2300      	movs	r3, #0
 801d4e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801d4ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801d4f0:	460b      	mov	r3, r1
 801d4f2:	4313      	orrs	r3, r2
 801d4f4:	d051      	beq.n	801d59a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801d4f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d4fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d500:	d035      	beq.n	801d56e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801d502:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d506:	d82e      	bhi.n	801d566 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d508:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801d50c:	d031      	beq.n	801d572 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801d50e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801d512:	d828      	bhi.n	801d566 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d518:	d01a      	beq.n	801d550 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801d51a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d51e:	d822      	bhi.n	801d566 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d520:	2b00      	cmp	r3, #0
 801d522:	d003      	beq.n	801d52c <HAL_RCCEx_PeriphCLKConfig+0x498>
 801d524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d528:	d007      	beq.n	801d53a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801d52a:	e01c      	b.n	801d566 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d52c:	4b4b      	ldr	r3, [pc, #300]	@ (801d65c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d530:	4a4a      	ldr	r2, [pc, #296]	@ (801d65c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d536:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d538:	e01c      	b.n	801d574 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d53a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d53e:	3308      	adds	r3, #8
 801d540:	2100      	movs	r1, #0
 801d542:	4618      	mov	r0, r3
 801d544:	f001 fa6e 	bl	801ea24 <RCCEx_PLL2_Config>
 801d548:	4603      	mov	r3, r0
 801d54a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d54e:	e011      	b.n	801d574 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d554:	3328      	adds	r3, #40	@ 0x28
 801d556:	2100      	movs	r1, #0
 801d558:	4618      	mov	r0, r3
 801d55a:	f001 fb15 	bl	801eb88 <RCCEx_PLL3_Config>
 801d55e:	4603      	mov	r3, r0
 801d560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d564:	e006      	b.n	801d574 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d566:	2301      	movs	r3, #1
 801d568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d56c:	e002      	b.n	801d574 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801d56e:	bf00      	nop
 801d570:	e000      	b.n	801d574 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801d572:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d10a      	bne.n	801d592 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801d57c:	4b37      	ldr	r3, [pc, #220]	@ (801d65c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d57e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d580:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801d584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d58a:	4a34      	ldr	r2, [pc, #208]	@ (801d65c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d58c:	430b      	orrs	r3, r1
 801d58e:	6513      	str	r3, [r2, #80]	@ 0x50
 801d590:	e003      	b.n	801d59a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d596:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801d59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5a2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801d5a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801d5aa:	2300      	movs	r3, #0
 801d5ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801d5b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801d5b4:	460b      	mov	r3, r1
 801d5b6:	4313      	orrs	r3, r2
 801d5b8:	d056      	beq.n	801d668 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801d5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d5c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d5c4:	d033      	beq.n	801d62e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801d5c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d5ca:	d82c      	bhi.n	801d626 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d5cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801d5d0:	d02f      	beq.n	801d632 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801d5d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801d5d6:	d826      	bhi.n	801d626 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d5d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801d5dc:	d02b      	beq.n	801d636 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801d5de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801d5e2:	d820      	bhi.n	801d626 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d5e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d5e8:	d012      	beq.n	801d610 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801d5ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d5ee:	d81a      	bhi.n	801d626 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	d022      	beq.n	801d63a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801d5f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d5f8:	d115      	bne.n	801d626 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5fe:	3308      	adds	r3, #8
 801d600:	2101      	movs	r1, #1
 801d602:	4618      	mov	r0, r3
 801d604:	f001 fa0e 	bl	801ea24 <RCCEx_PLL2_Config>
 801d608:	4603      	mov	r3, r0
 801d60a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801d60e:	e015      	b.n	801d63c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d614:	3328      	adds	r3, #40	@ 0x28
 801d616:	2101      	movs	r1, #1
 801d618:	4618      	mov	r0, r3
 801d61a:	f001 fab5 	bl	801eb88 <RCCEx_PLL3_Config>
 801d61e:	4603      	mov	r3, r0
 801d620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801d624:	e00a      	b.n	801d63c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d626:	2301      	movs	r3, #1
 801d628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d62c:	e006      	b.n	801d63c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d62e:	bf00      	nop
 801d630:	e004      	b.n	801d63c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d632:	bf00      	nop
 801d634:	e002      	b.n	801d63c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d636:	bf00      	nop
 801d638:	e000      	b.n	801d63c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d63a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d63c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d640:	2b00      	cmp	r3, #0
 801d642:	d10d      	bne.n	801d660 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801d644:	4b05      	ldr	r3, [pc, #20]	@ (801d65c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d648:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801d64c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d650:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d652:	4a02      	ldr	r2, [pc, #8]	@ (801d65c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d654:	430b      	orrs	r3, r1
 801d656:	6513      	str	r3, [r2, #80]	@ 0x50
 801d658:	e006      	b.n	801d668 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801d65a:	bf00      	nop
 801d65c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d664:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801d668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d670:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801d674:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801d678:	2300      	movs	r3, #0
 801d67a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801d67e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801d682:	460b      	mov	r3, r1
 801d684:	4313      	orrs	r3, r2
 801d686:	d055      	beq.n	801d734 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801d688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d68c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d690:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d694:	d033      	beq.n	801d6fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801d696:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d69a:	d82c      	bhi.n	801d6f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d69c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d6a0:	d02f      	beq.n	801d702 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801d6a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d6a6:	d826      	bhi.n	801d6f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d6a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d6ac:	d02b      	beq.n	801d706 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801d6ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d6b2:	d820      	bhi.n	801d6f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d6b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d6b8:	d012      	beq.n	801d6e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801d6ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d6be:	d81a      	bhi.n	801d6f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d6c0:	2b00      	cmp	r3, #0
 801d6c2:	d022      	beq.n	801d70a <HAL_RCCEx_PeriphCLKConfig+0x676>
 801d6c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d6c8:	d115      	bne.n	801d6f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6ce:	3308      	adds	r3, #8
 801d6d0:	2101      	movs	r1, #1
 801d6d2:	4618      	mov	r0, r3
 801d6d4:	f001 f9a6 	bl	801ea24 <RCCEx_PLL2_Config>
 801d6d8:	4603      	mov	r3, r0
 801d6da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801d6de:	e015      	b.n	801d70c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d6e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6e4:	3328      	adds	r3, #40	@ 0x28
 801d6e6:	2101      	movs	r1, #1
 801d6e8:	4618      	mov	r0, r3
 801d6ea:	f001 fa4d 	bl	801eb88 <RCCEx_PLL3_Config>
 801d6ee:	4603      	mov	r3, r0
 801d6f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801d6f4:	e00a      	b.n	801d70c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801d6f6:	2301      	movs	r3, #1
 801d6f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d6fc:	e006      	b.n	801d70c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d6fe:	bf00      	nop
 801d700:	e004      	b.n	801d70c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d702:	bf00      	nop
 801d704:	e002      	b.n	801d70c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d706:	bf00      	nop
 801d708:	e000      	b.n	801d70c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d70a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d70c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d710:	2b00      	cmp	r3, #0
 801d712:	d10b      	bne.n	801d72c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801d714:	4ba3      	ldr	r3, [pc, #652]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d718:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801d71c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d720:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d724:	4a9f      	ldr	r2, [pc, #636]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d726:	430b      	orrs	r3, r1
 801d728:	6593      	str	r3, [r2, #88]	@ 0x58
 801d72a:	e003      	b.n	801d734 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d72c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d730:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801d734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d73c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801d740:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801d744:	2300      	movs	r3, #0
 801d746:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801d74a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801d74e:	460b      	mov	r3, r1
 801d750:	4313      	orrs	r3, r2
 801d752:	d037      	beq.n	801d7c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801d754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d75a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d75e:	d00e      	beq.n	801d77e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801d760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d764:	d816      	bhi.n	801d794 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801d766:	2b00      	cmp	r3, #0
 801d768:	d018      	beq.n	801d79c <HAL_RCCEx_PeriphCLKConfig+0x708>
 801d76a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d76e:	d111      	bne.n	801d794 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d770:	4b8c      	ldr	r3, [pc, #560]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d774:	4a8b      	ldr	r2, [pc, #556]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d776:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d77a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801d77c:	e00f      	b.n	801d79e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d782:	3308      	adds	r3, #8
 801d784:	2101      	movs	r1, #1
 801d786:	4618      	mov	r0, r3
 801d788:	f001 f94c 	bl	801ea24 <RCCEx_PLL2_Config>
 801d78c:	4603      	mov	r3, r0
 801d78e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801d792:	e004      	b.n	801d79e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d794:	2301      	movs	r3, #1
 801d796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d79a:	e000      	b.n	801d79e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801d79c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d79e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	d10a      	bne.n	801d7bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801d7a6:	4b7f      	ldr	r3, [pc, #508]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d7a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d7aa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801d7ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d7b4:	4a7b      	ldr	r2, [pc, #492]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d7b6:	430b      	orrs	r3, r1
 801d7b8:	6513      	str	r3, [r2, #80]	@ 0x50
 801d7ba:	e003      	b.n	801d7c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d7bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d7c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801d7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7cc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801d7d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801d7d4:	2300      	movs	r3, #0
 801d7d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801d7da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801d7de:	460b      	mov	r3, r1
 801d7e0:	4313      	orrs	r3, r2
 801d7e2:	d039      	beq.n	801d858 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801d7e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d7ea:	2b03      	cmp	r3, #3
 801d7ec:	d81c      	bhi.n	801d828 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801d7ee:	a201      	add	r2, pc, #4	@ (adr r2, 801d7f4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801d7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d7f4:	0801d831 	.word	0x0801d831
 801d7f8:	0801d805 	.word	0x0801d805
 801d7fc:	0801d813 	.word	0x0801d813
 801d800:	0801d831 	.word	0x0801d831
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d804:	4b67      	ldr	r3, [pc, #412]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d808:	4a66      	ldr	r2, [pc, #408]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d80a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d80e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801d810:	e00f      	b.n	801d832 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d816:	3308      	adds	r3, #8
 801d818:	2102      	movs	r1, #2
 801d81a:	4618      	mov	r0, r3
 801d81c:	f001 f902 	bl	801ea24 <RCCEx_PLL2_Config>
 801d820:	4603      	mov	r3, r0
 801d822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801d826:	e004      	b.n	801d832 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801d828:	2301      	movs	r3, #1
 801d82a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d82e:	e000      	b.n	801d832 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801d830:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d836:	2b00      	cmp	r3, #0
 801d838:	d10a      	bne.n	801d850 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801d83a:	4b5a      	ldr	r3, [pc, #360]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d83c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d83e:	f023 0103 	bic.w	r1, r3, #3
 801d842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d848:	4a56      	ldr	r2, [pc, #344]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d84a:	430b      	orrs	r3, r1
 801d84c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801d84e:	e003      	b.n	801d858 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d854:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801d858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d860:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801d864:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801d868:	2300      	movs	r3, #0
 801d86a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801d86e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801d872:	460b      	mov	r3, r1
 801d874:	4313      	orrs	r3, r2
 801d876:	f000 809f 	beq.w	801d9b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801d87a:	4b4b      	ldr	r3, [pc, #300]	@ (801d9a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d87c:	681b      	ldr	r3, [r3, #0]
 801d87e:	4a4a      	ldr	r2, [pc, #296]	@ (801d9a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d884:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d886:	f7fc f807 	bl	8019898 <HAL_GetTick>
 801d88a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d88e:	e00b      	b.n	801d8a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d890:	f7fc f802 	bl	8019898 <HAL_GetTick>
 801d894:	4602      	mov	r2, r0
 801d896:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801d89a:	1ad3      	subs	r3, r2, r3
 801d89c:	2b64      	cmp	r3, #100	@ 0x64
 801d89e:	d903      	bls.n	801d8a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801d8a0:	2303      	movs	r3, #3
 801d8a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d8a6:	e005      	b.n	801d8b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d8a8:	4b3f      	ldr	r3, [pc, #252]	@ (801d9a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d8aa:	681b      	ldr	r3, [r3, #0]
 801d8ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d0ed      	beq.n	801d890 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801d8b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d8b8:	2b00      	cmp	r3, #0
 801d8ba:	d179      	bne.n	801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801d8bc:	4b39      	ldr	r3, [pc, #228]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d8be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801d8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d8c8:	4053      	eors	r3, r2
 801d8ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	d015      	beq.n	801d8fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801d8d2:	4b34      	ldr	r3, [pc, #208]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d8d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d8d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801d8da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801d8de:	4b31      	ldr	r3, [pc, #196]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d8e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d8e2:	4a30      	ldr	r2, [pc, #192]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d8e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d8e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801d8ea:	4b2e      	ldr	r3, [pc, #184]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d8ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d8ee:	4a2d      	ldr	r2, [pc, #180]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d8f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d8f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801d8f6:	4a2b      	ldr	r2, [pc, #172]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d8f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801d8fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801d8fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d902:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d90a:	d118      	bne.n	801d93e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d90c:	f7fb ffc4 	bl	8019898 <HAL_GetTick>
 801d910:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d914:	e00d      	b.n	801d932 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d916:	f7fb ffbf 	bl	8019898 <HAL_GetTick>
 801d91a:	4602      	mov	r2, r0
 801d91c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801d920:	1ad2      	subs	r2, r2, r3
 801d922:	f241 3388 	movw	r3, #5000	@ 0x1388
 801d926:	429a      	cmp	r2, r3
 801d928:	d903      	bls.n	801d932 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801d92a:	2303      	movs	r3, #3
 801d92c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801d930:	e005      	b.n	801d93e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d932:	4b1c      	ldr	r3, [pc, #112]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d936:	f003 0302 	and.w	r3, r3, #2
 801d93a:	2b00      	cmp	r3, #0
 801d93c:	d0eb      	beq.n	801d916 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801d93e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d942:	2b00      	cmp	r3, #0
 801d944:	d129      	bne.n	801d99a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d94a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d94e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801d952:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d956:	d10e      	bne.n	801d976 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801d958:	4b12      	ldr	r3, [pc, #72]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d95a:	691b      	ldr	r3, [r3, #16]
 801d95c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801d960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d964:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d968:	091a      	lsrs	r2, r3, #4
 801d96a:	4b10      	ldr	r3, [pc, #64]	@ (801d9ac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801d96c:	4013      	ands	r3, r2
 801d96e:	4a0d      	ldr	r2, [pc, #52]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d970:	430b      	orrs	r3, r1
 801d972:	6113      	str	r3, [r2, #16]
 801d974:	e005      	b.n	801d982 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801d976:	4b0b      	ldr	r3, [pc, #44]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d978:	691b      	ldr	r3, [r3, #16]
 801d97a:	4a0a      	ldr	r2, [pc, #40]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d97c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801d980:	6113      	str	r3, [r2, #16]
 801d982:	4b08      	ldr	r3, [pc, #32]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d984:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801d986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d98a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d98e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d992:	4a04      	ldr	r2, [pc, #16]	@ (801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d994:	430b      	orrs	r3, r1
 801d996:	6713      	str	r3, [r2, #112]	@ 0x70
 801d998:	e00e      	b.n	801d9b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801d99a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d99e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801d9a2:	e009      	b.n	801d9b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801d9a4:	58024400 	.word	0x58024400
 801d9a8:	58024800 	.word	0x58024800
 801d9ac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d9b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d9b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801d9b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9c0:	f002 0301 	and.w	r3, r2, #1
 801d9c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801d9c8:	2300      	movs	r3, #0
 801d9ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801d9ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801d9d2:	460b      	mov	r3, r1
 801d9d4:	4313      	orrs	r3, r2
 801d9d6:	f000 8089 	beq.w	801daec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801d9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d9e0:	2b28      	cmp	r3, #40	@ 0x28
 801d9e2:	d86b      	bhi.n	801dabc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801d9e4:	a201      	add	r2, pc, #4	@ (adr r2, 801d9ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801d9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d9ea:	bf00      	nop
 801d9ec:	0801dac5 	.word	0x0801dac5
 801d9f0:	0801dabd 	.word	0x0801dabd
 801d9f4:	0801dabd 	.word	0x0801dabd
 801d9f8:	0801dabd 	.word	0x0801dabd
 801d9fc:	0801dabd 	.word	0x0801dabd
 801da00:	0801dabd 	.word	0x0801dabd
 801da04:	0801dabd 	.word	0x0801dabd
 801da08:	0801dabd 	.word	0x0801dabd
 801da0c:	0801da91 	.word	0x0801da91
 801da10:	0801dabd 	.word	0x0801dabd
 801da14:	0801dabd 	.word	0x0801dabd
 801da18:	0801dabd 	.word	0x0801dabd
 801da1c:	0801dabd 	.word	0x0801dabd
 801da20:	0801dabd 	.word	0x0801dabd
 801da24:	0801dabd 	.word	0x0801dabd
 801da28:	0801dabd 	.word	0x0801dabd
 801da2c:	0801daa7 	.word	0x0801daa7
 801da30:	0801dabd 	.word	0x0801dabd
 801da34:	0801dabd 	.word	0x0801dabd
 801da38:	0801dabd 	.word	0x0801dabd
 801da3c:	0801dabd 	.word	0x0801dabd
 801da40:	0801dabd 	.word	0x0801dabd
 801da44:	0801dabd 	.word	0x0801dabd
 801da48:	0801dabd 	.word	0x0801dabd
 801da4c:	0801dac5 	.word	0x0801dac5
 801da50:	0801dabd 	.word	0x0801dabd
 801da54:	0801dabd 	.word	0x0801dabd
 801da58:	0801dabd 	.word	0x0801dabd
 801da5c:	0801dabd 	.word	0x0801dabd
 801da60:	0801dabd 	.word	0x0801dabd
 801da64:	0801dabd 	.word	0x0801dabd
 801da68:	0801dabd 	.word	0x0801dabd
 801da6c:	0801dac5 	.word	0x0801dac5
 801da70:	0801dabd 	.word	0x0801dabd
 801da74:	0801dabd 	.word	0x0801dabd
 801da78:	0801dabd 	.word	0x0801dabd
 801da7c:	0801dabd 	.word	0x0801dabd
 801da80:	0801dabd 	.word	0x0801dabd
 801da84:	0801dabd 	.word	0x0801dabd
 801da88:	0801dabd 	.word	0x0801dabd
 801da8c:	0801dac5 	.word	0x0801dac5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801da90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da94:	3308      	adds	r3, #8
 801da96:	2101      	movs	r1, #1
 801da98:	4618      	mov	r0, r3
 801da9a:	f000 ffc3 	bl	801ea24 <RCCEx_PLL2_Config>
 801da9e:	4603      	mov	r3, r0
 801daa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801daa4:	e00f      	b.n	801dac6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801daa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801daaa:	3328      	adds	r3, #40	@ 0x28
 801daac:	2101      	movs	r1, #1
 801daae:	4618      	mov	r0, r3
 801dab0:	f001 f86a 	bl	801eb88 <RCCEx_PLL3_Config>
 801dab4:	4603      	mov	r3, r0
 801dab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801daba:	e004      	b.n	801dac6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dabc:	2301      	movs	r3, #1
 801dabe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dac2:	e000      	b.n	801dac6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801dac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801daca:	2b00      	cmp	r3, #0
 801dacc:	d10a      	bne.n	801dae4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801dace:	4bbf      	ldr	r3, [pc, #764]	@ (801ddcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dad2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801dad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dada:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801dadc:	4abb      	ldr	r2, [pc, #748]	@ (801ddcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dade:	430b      	orrs	r3, r1
 801dae0:	6553      	str	r3, [r2, #84]	@ 0x54
 801dae2:	e003      	b.n	801daec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801daec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801daf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801daf4:	f002 0302 	and.w	r3, r2, #2
 801daf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801dafc:	2300      	movs	r3, #0
 801dafe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801db02:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801db06:	460b      	mov	r3, r1
 801db08:	4313      	orrs	r3, r2
 801db0a:	d041      	beq.n	801db90 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801db0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801db12:	2b05      	cmp	r3, #5
 801db14:	d824      	bhi.n	801db60 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801db16:	a201      	add	r2, pc, #4	@ (adr r2, 801db1c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801db18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801db1c:	0801db69 	.word	0x0801db69
 801db20:	0801db35 	.word	0x0801db35
 801db24:	0801db4b 	.word	0x0801db4b
 801db28:	0801db69 	.word	0x0801db69
 801db2c:	0801db69 	.word	0x0801db69
 801db30:	0801db69 	.word	0x0801db69
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801db34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db38:	3308      	adds	r3, #8
 801db3a:	2101      	movs	r1, #1
 801db3c:	4618      	mov	r0, r3
 801db3e:	f000 ff71 	bl	801ea24 <RCCEx_PLL2_Config>
 801db42:	4603      	mov	r3, r0
 801db44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801db48:	e00f      	b.n	801db6a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801db4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db4e:	3328      	adds	r3, #40	@ 0x28
 801db50:	2101      	movs	r1, #1
 801db52:	4618      	mov	r0, r3
 801db54:	f001 f818 	bl	801eb88 <RCCEx_PLL3_Config>
 801db58:	4603      	mov	r3, r0
 801db5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801db5e:	e004      	b.n	801db6a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801db60:	2301      	movs	r3, #1
 801db62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801db66:	e000      	b.n	801db6a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801db68:	bf00      	nop
    }

    if (ret == HAL_OK)
 801db6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d10a      	bne.n	801db88 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801db72:	4b96      	ldr	r3, [pc, #600]	@ (801ddcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801db74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801db76:	f023 0107 	bic.w	r1, r3, #7
 801db7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801db80:	4a92      	ldr	r2, [pc, #584]	@ (801ddcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801db82:	430b      	orrs	r3, r1
 801db84:	6553      	str	r3, [r2, #84]	@ 0x54
 801db86:	e003      	b.n	801db90 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801db88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801db90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db98:	f002 0304 	and.w	r3, r2, #4
 801db9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801dba0:	2300      	movs	r3, #0
 801dba2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801dba6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801dbaa:	460b      	mov	r3, r1
 801dbac:	4313      	orrs	r3, r2
 801dbae:	d044      	beq.n	801dc3a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801dbb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801dbb8:	2b05      	cmp	r3, #5
 801dbba:	d825      	bhi.n	801dc08 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801dbbc:	a201      	add	r2, pc, #4	@ (adr r2, 801dbc4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801dbbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dbc2:	bf00      	nop
 801dbc4:	0801dc11 	.word	0x0801dc11
 801dbc8:	0801dbdd 	.word	0x0801dbdd
 801dbcc:	0801dbf3 	.word	0x0801dbf3
 801dbd0:	0801dc11 	.word	0x0801dc11
 801dbd4:	0801dc11 	.word	0x0801dc11
 801dbd8:	0801dc11 	.word	0x0801dc11
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801dbdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbe0:	3308      	adds	r3, #8
 801dbe2:	2101      	movs	r1, #1
 801dbe4:	4618      	mov	r0, r3
 801dbe6:	f000 ff1d 	bl	801ea24 <RCCEx_PLL2_Config>
 801dbea:	4603      	mov	r3, r0
 801dbec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801dbf0:	e00f      	b.n	801dc12 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801dbf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbf6:	3328      	adds	r3, #40	@ 0x28
 801dbf8:	2101      	movs	r1, #1
 801dbfa:	4618      	mov	r0, r3
 801dbfc:	f000 ffc4 	bl	801eb88 <RCCEx_PLL3_Config>
 801dc00:	4603      	mov	r3, r0
 801dc02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801dc06:	e004      	b.n	801dc12 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dc08:	2301      	movs	r3, #1
 801dc0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dc0e:	e000      	b.n	801dc12 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801dc10:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dc12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	d10b      	bne.n	801dc32 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801dc1a:	4b6c      	ldr	r3, [pc, #432]	@ (801ddcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dc1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dc1e:	f023 0107 	bic.w	r1, r3, #7
 801dc22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801dc2a:	4a68      	ldr	r2, [pc, #416]	@ (801ddcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dc2c:	430b      	orrs	r3, r1
 801dc2e:	6593      	str	r3, [r2, #88]	@ 0x58
 801dc30:	e003      	b.n	801dc3a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dc32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dc36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801dc3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc42:	f002 0320 	and.w	r3, r2, #32
 801dc46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801dc4a:	2300      	movs	r3, #0
 801dc4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801dc50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801dc54:	460b      	mov	r3, r1
 801dc56:	4313      	orrs	r3, r2
 801dc58:	d055      	beq.n	801dd06 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801dc5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801dc62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801dc66:	d033      	beq.n	801dcd0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801dc68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801dc6c:	d82c      	bhi.n	801dcc8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801dc6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801dc72:	d02f      	beq.n	801dcd4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801dc74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801dc78:	d826      	bhi.n	801dcc8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801dc7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801dc7e:	d02b      	beq.n	801dcd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801dc80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801dc84:	d820      	bhi.n	801dcc8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801dc86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801dc8a:	d012      	beq.n	801dcb2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801dc8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801dc90:	d81a      	bhi.n	801dcc8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	d022      	beq.n	801dcdc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801dc96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801dc9a:	d115      	bne.n	801dcc8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dc9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dca0:	3308      	adds	r3, #8
 801dca2:	2100      	movs	r1, #0
 801dca4:	4618      	mov	r0, r3
 801dca6:	f000 febd 	bl	801ea24 <RCCEx_PLL2_Config>
 801dcaa:	4603      	mov	r3, r0
 801dcac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801dcb0:	e015      	b.n	801dcde <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801dcb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcb6:	3328      	adds	r3, #40	@ 0x28
 801dcb8:	2102      	movs	r1, #2
 801dcba:	4618      	mov	r0, r3
 801dcbc:	f000 ff64 	bl	801eb88 <RCCEx_PLL3_Config>
 801dcc0:	4603      	mov	r3, r0
 801dcc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801dcc6:	e00a      	b.n	801dcde <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dcc8:	2301      	movs	r3, #1
 801dcca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dcce:	e006      	b.n	801dcde <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801dcd0:	bf00      	nop
 801dcd2:	e004      	b.n	801dcde <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801dcd4:	bf00      	nop
 801dcd6:	e002      	b.n	801dcde <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801dcd8:	bf00      	nop
 801dcda:	e000      	b.n	801dcde <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801dcdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dcde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d10b      	bne.n	801dcfe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801dce6:	4b39      	ldr	r3, [pc, #228]	@ (801ddcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dcea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801dcee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801dcf6:	4a35      	ldr	r2, [pc, #212]	@ (801ddcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dcf8:	430b      	orrs	r3, r1
 801dcfa:	6553      	str	r3, [r2, #84]	@ 0x54
 801dcfc:	e003      	b.n	801dd06 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dcfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801dd06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd0e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801dd12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801dd16:	2300      	movs	r3, #0
 801dd18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801dd1c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801dd20:	460b      	mov	r3, r1
 801dd22:	4313      	orrs	r3, r2
 801dd24:	d058      	beq.n	801ddd8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801dd26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801dd2e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801dd32:	d033      	beq.n	801dd9c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801dd34:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801dd38:	d82c      	bhi.n	801dd94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801dd3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801dd3e:	d02f      	beq.n	801dda0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801dd40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801dd44:	d826      	bhi.n	801dd94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801dd46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801dd4a:	d02b      	beq.n	801dda4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801dd4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801dd50:	d820      	bhi.n	801dd94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801dd52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801dd56:	d012      	beq.n	801dd7e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801dd58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801dd5c:	d81a      	bhi.n	801dd94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801dd5e:	2b00      	cmp	r3, #0
 801dd60:	d022      	beq.n	801dda8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801dd62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801dd66:	d115      	bne.n	801dd94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dd68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd6c:	3308      	adds	r3, #8
 801dd6e:	2100      	movs	r1, #0
 801dd70:	4618      	mov	r0, r3
 801dd72:	f000 fe57 	bl	801ea24 <RCCEx_PLL2_Config>
 801dd76:	4603      	mov	r3, r0
 801dd78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801dd7c:	e015      	b.n	801ddaa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801dd7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd82:	3328      	adds	r3, #40	@ 0x28
 801dd84:	2102      	movs	r1, #2
 801dd86:	4618      	mov	r0, r3
 801dd88:	f000 fefe 	bl	801eb88 <RCCEx_PLL3_Config>
 801dd8c:	4603      	mov	r3, r0
 801dd8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801dd92:	e00a      	b.n	801ddaa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dd94:	2301      	movs	r3, #1
 801dd96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dd9a:	e006      	b.n	801ddaa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801dd9c:	bf00      	nop
 801dd9e:	e004      	b.n	801ddaa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801dda0:	bf00      	nop
 801dda2:	e002      	b.n	801ddaa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801dda4:	bf00      	nop
 801dda6:	e000      	b.n	801ddaa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801dda8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ddaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	d10e      	bne.n	801ddd0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801ddb2:	4b06      	ldr	r3, [pc, #24]	@ (801ddcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ddb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ddb6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801ddba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801ddc2:	4a02      	ldr	r2, [pc, #8]	@ (801ddcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ddc4:	430b      	orrs	r3, r1
 801ddc6:	6593      	str	r3, [r2, #88]	@ 0x58
 801ddc8:	e006      	b.n	801ddd8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801ddca:	bf00      	nop
 801ddcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ddd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ddd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801ddd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dde0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801dde4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801dde8:	2300      	movs	r3, #0
 801ddea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801ddee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801ddf2:	460b      	mov	r3, r1
 801ddf4:	4313      	orrs	r3, r2
 801ddf6:	d055      	beq.n	801dea4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801ddf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801de00:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801de04:	d033      	beq.n	801de6e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801de06:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801de0a:	d82c      	bhi.n	801de66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801de0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801de10:	d02f      	beq.n	801de72 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801de12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801de16:	d826      	bhi.n	801de66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801de18:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801de1c:	d02b      	beq.n	801de76 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801de1e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801de22:	d820      	bhi.n	801de66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801de24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801de28:	d012      	beq.n	801de50 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801de2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801de2e:	d81a      	bhi.n	801de66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801de30:	2b00      	cmp	r3, #0
 801de32:	d022      	beq.n	801de7a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801de34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801de38:	d115      	bne.n	801de66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801de3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de3e:	3308      	adds	r3, #8
 801de40:	2100      	movs	r1, #0
 801de42:	4618      	mov	r0, r3
 801de44:	f000 fdee 	bl	801ea24 <RCCEx_PLL2_Config>
 801de48:	4603      	mov	r3, r0
 801de4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801de4e:	e015      	b.n	801de7c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801de50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de54:	3328      	adds	r3, #40	@ 0x28
 801de56:	2102      	movs	r1, #2
 801de58:	4618      	mov	r0, r3
 801de5a:	f000 fe95 	bl	801eb88 <RCCEx_PLL3_Config>
 801de5e:	4603      	mov	r3, r0
 801de60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801de64:	e00a      	b.n	801de7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801de66:	2301      	movs	r3, #1
 801de68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801de6c:	e006      	b.n	801de7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801de6e:	bf00      	nop
 801de70:	e004      	b.n	801de7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801de72:	bf00      	nop
 801de74:	e002      	b.n	801de7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801de76:	bf00      	nop
 801de78:	e000      	b.n	801de7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801de7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801de7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de80:	2b00      	cmp	r3, #0
 801de82:	d10b      	bne.n	801de9c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801de84:	4ba1      	ldr	r3, [pc, #644]	@ (801e10c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801de86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801de88:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801de8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801de94:	4a9d      	ldr	r2, [pc, #628]	@ (801e10c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801de96:	430b      	orrs	r3, r1
 801de98:	6593      	str	r3, [r2, #88]	@ 0x58
 801de9a:	e003      	b.n	801dea4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801de9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dea0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801dea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801deac:	f002 0308 	and.w	r3, r2, #8
 801deb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801deb4:	2300      	movs	r3, #0
 801deb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801deba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801debe:	460b      	mov	r3, r1
 801dec0:	4313      	orrs	r3, r2
 801dec2:	d01e      	beq.n	801df02 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801dec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801decc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ded0:	d10c      	bne.n	801deec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801ded2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ded6:	3328      	adds	r3, #40	@ 0x28
 801ded8:	2102      	movs	r1, #2
 801deda:	4618      	mov	r0, r3
 801dedc:	f000 fe54 	bl	801eb88 <RCCEx_PLL3_Config>
 801dee0:	4603      	mov	r3, r0
 801dee2:	2b00      	cmp	r3, #0
 801dee4:	d002      	beq.n	801deec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801dee6:	2301      	movs	r3, #1
 801dee8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801deec:	4b87      	ldr	r3, [pc, #540]	@ (801e10c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801deee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801def0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801def4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801def8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801defc:	4a83      	ldr	r2, [pc, #524]	@ (801e10c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801defe:	430b      	orrs	r3, r1
 801df00:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801df02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df0a:	f002 0310 	and.w	r3, r2, #16
 801df0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801df12:	2300      	movs	r3, #0
 801df14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801df18:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801df1c:	460b      	mov	r3, r1
 801df1e:	4313      	orrs	r3, r2
 801df20:	d01e      	beq.n	801df60 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801df22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801df2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801df2e:	d10c      	bne.n	801df4a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801df30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df34:	3328      	adds	r3, #40	@ 0x28
 801df36:	2102      	movs	r1, #2
 801df38:	4618      	mov	r0, r3
 801df3a:	f000 fe25 	bl	801eb88 <RCCEx_PLL3_Config>
 801df3e:	4603      	mov	r3, r0
 801df40:	2b00      	cmp	r3, #0
 801df42:	d002      	beq.n	801df4a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801df44:	2301      	movs	r3, #1
 801df46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801df4a:	4b70      	ldr	r3, [pc, #448]	@ (801e10c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801df4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801df4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801df52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801df5a:	4a6c      	ldr	r2, [pc, #432]	@ (801e10c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801df5c:	430b      	orrs	r3, r1
 801df5e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801df60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df68:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801df6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801df70:	2300      	movs	r3, #0
 801df72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801df76:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801df7a:	460b      	mov	r3, r1
 801df7c:	4313      	orrs	r3, r2
 801df7e:	d03e      	beq.n	801dffe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801df80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801df88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801df8c:	d022      	beq.n	801dfd4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801df8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801df92:	d81b      	bhi.n	801dfcc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801df94:	2b00      	cmp	r3, #0
 801df96:	d003      	beq.n	801dfa0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801df98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801df9c:	d00b      	beq.n	801dfb6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801df9e:	e015      	b.n	801dfcc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dfa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfa4:	3308      	adds	r3, #8
 801dfa6:	2100      	movs	r1, #0
 801dfa8:	4618      	mov	r0, r3
 801dfaa:	f000 fd3b 	bl	801ea24 <RCCEx_PLL2_Config>
 801dfae:	4603      	mov	r3, r0
 801dfb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801dfb4:	e00f      	b.n	801dfd6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801dfb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfba:	3328      	adds	r3, #40	@ 0x28
 801dfbc:	2102      	movs	r1, #2
 801dfbe:	4618      	mov	r0, r3
 801dfc0:	f000 fde2 	bl	801eb88 <RCCEx_PLL3_Config>
 801dfc4:	4603      	mov	r3, r0
 801dfc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801dfca:	e004      	b.n	801dfd6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dfcc:	2301      	movs	r3, #1
 801dfce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dfd2:	e000      	b.n	801dfd6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801dfd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dfd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	d10b      	bne.n	801dff6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801dfde:	4b4b      	ldr	r3, [pc, #300]	@ (801e10c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dfe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dfe2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801dfe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801dfee:	4a47      	ldr	r2, [pc, #284]	@ (801e10c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dff0:	430b      	orrs	r3, r1
 801dff2:	6593      	str	r3, [r2, #88]	@ 0x58
 801dff4:	e003      	b.n	801dffe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dffa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801dffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e002:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e006:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801e00a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801e00c:	2300      	movs	r3, #0
 801e00e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801e010:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801e014:	460b      	mov	r3, r1
 801e016:	4313      	orrs	r3, r2
 801e018:	d03b      	beq.n	801e092 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801e01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e01e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e022:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e026:	d01f      	beq.n	801e068 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801e028:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e02c:	d818      	bhi.n	801e060 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801e02e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801e032:	d003      	beq.n	801e03c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801e034:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e038:	d007      	beq.n	801e04a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801e03a:	e011      	b.n	801e060 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e03c:	4b33      	ldr	r3, [pc, #204]	@ (801e10c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e040:	4a32      	ldr	r2, [pc, #200]	@ (801e10c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e046:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801e048:	e00f      	b.n	801e06a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e04e:	3328      	adds	r3, #40	@ 0x28
 801e050:	2101      	movs	r1, #1
 801e052:	4618      	mov	r0, r3
 801e054:	f000 fd98 	bl	801eb88 <RCCEx_PLL3_Config>
 801e058:	4603      	mov	r3, r0
 801e05a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801e05e:	e004      	b.n	801e06a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e060:	2301      	movs	r3, #1
 801e062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e066:	e000      	b.n	801e06a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801e068:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e06a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e06e:	2b00      	cmp	r3, #0
 801e070:	d10b      	bne.n	801e08a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801e072:	4b26      	ldr	r3, [pc, #152]	@ (801e10c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e076:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801e07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e07e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e082:	4a22      	ldr	r2, [pc, #136]	@ (801e10c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e084:	430b      	orrs	r3, r1
 801e086:	6553      	str	r3, [r2, #84]	@ 0x54
 801e088:	e003      	b.n	801e092 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e08a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e08e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801e092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e09a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801e09e:	673b      	str	r3, [r7, #112]	@ 0x70
 801e0a0:	2300      	movs	r3, #0
 801e0a2:	677b      	str	r3, [r7, #116]	@ 0x74
 801e0a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801e0a8:	460b      	mov	r3, r1
 801e0aa:	4313      	orrs	r3, r2
 801e0ac:	d034      	beq.n	801e118 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801e0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	d003      	beq.n	801e0c0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801e0b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e0bc:	d007      	beq.n	801e0ce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801e0be:	e011      	b.n	801e0e4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e0c0:	4b12      	ldr	r3, [pc, #72]	@ (801e10c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e0c4:	4a11      	ldr	r2, [pc, #68]	@ (801e10c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e0c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e0ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e0cc:	e00e      	b.n	801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0d2:	3308      	adds	r3, #8
 801e0d4:	2102      	movs	r1, #2
 801e0d6:	4618      	mov	r0, r3
 801e0d8:	f000 fca4 	bl	801ea24 <RCCEx_PLL2_Config>
 801e0dc:	4603      	mov	r3, r0
 801e0de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e0e2:	e003      	b.n	801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801e0e4:	2301      	movs	r3, #1
 801e0e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e0ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e0ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0f0:	2b00      	cmp	r3, #0
 801e0f2:	d10d      	bne.n	801e110 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801e0f4:	4b05      	ldr	r3, [pc, #20]	@ (801e10c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e0f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e0f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801e0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e102:	4a02      	ldr	r2, [pc, #8]	@ (801e10c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e104:	430b      	orrs	r3, r1
 801e106:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e108:	e006      	b.n	801e118 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801e10a:	bf00      	nop
 801e10c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e114:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801e118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e120:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801e124:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e126:	2300      	movs	r3, #0
 801e128:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801e12a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801e12e:	460b      	mov	r3, r1
 801e130:	4313      	orrs	r3, r2
 801e132:	d00c      	beq.n	801e14e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e138:	3328      	adds	r3, #40	@ 0x28
 801e13a:	2102      	movs	r1, #2
 801e13c:	4618      	mov	r0, r3
 801e13e:	f000 fd23 	bl	801eb88 <RCCEx_PLL3_Config>
 801e142:	4603      	mov	r3, r0
 801e144:	2b00      	cmp	r3, #0
 801e146:	d002      	beq.n	801e14e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801e148:	2301      	movs	r3, #1
 801e14a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801e14e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e152:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e156:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801e15a:	663b      	str	r3, [r7, #96]	@ 0x60
 801e15c:	2300      	movs	r3, #0
 801e15e:	667b      	str	r3, [r7, #100]	@ 0x64
 801e160:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801e164:	460b      	mov	r3, r1
 801e166:	4313      	orrs	r3, r2
 801e168:	d038      	beq.n	801e1dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801e16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e16e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e172:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e176:	d018      	beq.n	801e1aa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801e178:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e17c:	d811      	bhi.n	801e1a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801e17e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e182:	d014      	beq.n	801e1ae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801e184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e188:	d80b      	bhi.n	801e1a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	d011      	beq.n	801e1b2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801e18e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e192:	d106      	bne.n	801e1a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e194:	4bc3      	ldr	r3, [pc, #780]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e198:	4ac2      	ldr	r2, [pc, #776]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e19a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e19e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801e1a0:	e008      	b.n	801e1b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e1a2:	2301      	movs	r3, #1
 801e1a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e1a8:	e004      	b.n	801e1b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e1aa:	bf00      	nop
 801e1ac:	e002      	b.n	801e1b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e1ae:	bf00      	nop
 801e1b0:	e000      	b.n	801e1b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e1b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e1b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1b8:	2b00      	cmp	r3, #0
 801e1ba:	d10b      	bne.n	801e1d4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801e1bc:	4bb9      	ldr	r3, [pc, #740]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e1be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e1c0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e1cc:	4ab5      	ldr	r2, [pc, #724]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e1ce:	430b      	orrs	r3, r1
 801e1d0:	6553      	str	r3, [r2, #84]	@ 0x54
 801e1d2:	e003      	b.n	801e1dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e1d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801e1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1e4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801e1e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e1ea:	2300      	movs	r3, #0
 801e1ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e1ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801e1f2:	460b      	mov	r3, r1
 801e1f4:	4313      	orrs	r3, r2
 801e1f6:	d009      	beq.n	801e20c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801e1f8:	4baa      	ldr	r3, [pc, #680]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e1fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e1fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e206:	4aa7      	ldr	r2, [pc, #668]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e208:	430b      	orrs	r3, r1
 801e20a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801e20c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e210:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e214:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801e218:	653b      	str	r3, [r7, #80]	@ 0x50
 801e21a:	2300      	movs	r3, #0
 801e21c:	657b      	str	r3, [r7, #84]	@ 0x54
 801e21e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801e222:	460b      	mov	r3, r1
 801e224:	4313      	orrs	r3, r2
 801e226:	d00a      	beq.n	801e23e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801e228:	4b9e      	ldr	r3, [pc, #632]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e22a:	691b      	ldr	r3, [r3, #16]
 801e22c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801e230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e234:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801e238:	4a9a      	ldr	r2, [pc, #616]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e23a:	430b      	orrs	r3, r1
 801e23c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801e23e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e242:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e246:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801e24a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e24c:	2300      	movs	r3, #0
 801e24e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e250:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801e254:	460b      	mov	r3, r1
 801e256:	4313      	orrs	r3, r2
 801e258:	d009      	beq.n	801e26e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801e25a:	4b92      	ldr	r3, [pc, #584]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e25c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e25e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801e262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e268:	4a8e      	ldr	r2, [pc, #568]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e26a:	430b      	orrs	r3, r1
 801e26c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801e26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e272:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e276:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801e27a:	643b      	str	r3, [r7, #64]	@ 0x40
 801e27c:	2300      	movs	r3, #0
 801e27e:	647b      	str	r3, [r7, #68]	@ 0x44
 801e280:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801e284:	460b      	mov	r3, r1
 801e286:	4313      	orrs	r3, r2
 801e288:	d00e      	beq.n	801e2a8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801e28a:	4b86      	ldr	r3, [pc, #536]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e28c:	691b      	ldr	r3, [r3, #16]
 801e28e:	4a85      	ldr	r2, [pc, #532]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e290:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801e294:	6113      	str	r3, [r2, #16]
 801e296:	4b83      	ldr	r3, [pc, #524]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e298:	6919      	ldr	r1, [r3, #16]
 801e29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e29e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801e2a2:	4a80      	ldr	r2, [pc, #512]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e2a4:	430b      	orrs	r3, r1
 801e2a6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801e2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2b0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801e2b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e2b6:	2300      	movs	r3, #0
 801e2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e2ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801e2be:	460b      	mov	r3, r1
 801e2c0:	4313      	orrs	r3, r2
 801e2c2:	d009      	beq.n	801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801e2c4:	4b77      	ldr	r3, [pc, #476]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e2c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e2c8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801e2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e2d2:	4a74      	ldr	r2, [pc, #464]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e2d4:	430b      	orrs	r3, r1
 801e2d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801e2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2e0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801e2e4:	633b      	str	r3, [r7, #48]	@ 0x30
 801e2e6:	2300      	movs	r3, #0
 801e2e8:	637b      	str	r3, [r7, #52]	@ 0x34
 801e2ea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801e2ee:	460b      	mov	r3, r1
 801e2f0:	4313      	orrs	r3, r2
 801e2f2:	d00a      	beq.n	801e30a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801e2f4:	4b6b      	ldr	r3, [pc, #428]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e2f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e2f8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801e2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801e304:	4a67      	ldr	r2, [pc, #412]	@ (801e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e306:	430b      	orrs	r3, r1
 801e308:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801e30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e312:	2100      	movs	r1, #0
 801e314:	62b9      	str	r1, [r7, #40]	@ 0x28
 801e316:	f003 0301 	and.w	r3, r3, #1
 801e31a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e31c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801e320:	460b      	mov	r3, r1
 801e322:	4313      	orrs	r3, r2
 801e324:	d011      	beq.n	801e34a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e32a:	3308      	adds	r3, #8
 801e32c:	2100      	movs	r1, #0
 801e32e:	4618      	mov	r0, r3
 801e330:	f000 fb78 	bl	801ea24 <RCCEx_PLL2_Config>
 801e334:	4603      	mov	r3, r0
 801e336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e33a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e33e:	2b00      	cmp	r3, #0
 801e340:	d003      	beq.n	801e34a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e346:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801e34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e352:	2100      	movs	r1, #0
 801e354:	6239      	str	r1, [r7, #32]
 801e356:	f003 0302 	and.w	r3, r3, #2
 801e35a:	627b      	str	r3, [r7, #36]	@ 0x24
 801e35c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801e360:	460b      	mov	r3, r1
 801e362:	4313      	orrs	r3, r2
 801e364:	d011      	beq.n	801e38a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e36a:	3308      	adds	r3, #8
 801e36c:	2101      	movs	r1, #1
 801e36e:	4618      	mov	r0, r3
 801e370:	f000 fb58 	bl	801ea24 <RCCEx_PLL2_Config>
 801e374:	4603      	mov	r3, r0
 801e376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e37a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e37e:	2b00      	cmp	r3, #0
 801e380:	d003      	beq.n	801e38a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e386:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801e38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e392:	2100      	movs	r1, #0
 801e394:	61b9      	str	r1, [r7, #24]
 801e396:	f003 0304 	and.w	r3, r3, #4
 801e39a:	61fb      	str	r3, [r7, #28]
 801e39c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801e3a0:	460b      	mov	r3, r1
 801e3a2:	4313      	orrs	r3, r2
 801e3a4:	d011      	beq.n	801e3ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3aa:	3308      	adds	r3, #8
 801e3ac:	2102      	movs	r1, #2
 801e3ae:	4618      	mov	r0, r3
 801e3b0:	f000 fb38 	bl	801ea24 <RCCEx_PLL2_Config>
 801e3b4:	4603      	mov	r3, r0
 801e3b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e3ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3be:	2b00      	cmp	r3, #0
 801e3c0:	d003      	beq.n	801e3ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e3c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801e3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3d2:	2100      	movs	r1, #0
 801e3d4:	6139      	str	r1, [r7, #16]
 801e3d6:	f003 0308 	and.w	r3, r3, #8
 801e3da:	617b      	str	r3, [r7, #20]
 801e3dc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801e3e0:	460b      	mov	r3, r1
 801e3e2:	4313      	orrs	r3, r2
 801e3e4:	d011      	beq.n	801e40a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3ea:	3328      	adds	r3, #40	@ 0x28
 801e3ec:	2100      	movs	r1, #0
 801e3ee:	4618      	mov	r0, r3
 801e3f0:	f000 fbca 	bl	801eb88 <RCCEx_PLL3_Config>
 801e3f4:	4603      	mov	r3, r0
 801e3f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801e3fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3fe:	2b00      	cmp	r3, #0
 801e400:	d003      	beq.n	801e40a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e406:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801e40a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e412:	2100      	movs	r1, #0
 801e414:	60b9      	str	r1, [r7, #8]
 801e416:	f003 0310 	and.w	r3, r3, #16
 801e41a:	60fb      	str	r3, [r7, #12]
 801e41c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801e420:	460b      	mov	r3, r1
 801e422:	4313      	orrs	r3, r2
 801e424:	d011      	beq.n	801e44a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e42a:	3328      	adds	r3, #40	@ 0x28
 801e42c:	2101      	movs	r1, #1
 801e42e:	4618      	mov	r0, r3
 801e430:	f000 fbaa 	bl	801eb88 <RCCEx_PLL3_Config>
 801e434:	4603      	mov	r3, r0
 801e436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e43a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e43e:	2b00      	cmp	r3, #0
 801e440:	d003      	beq.n	801e44a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e446:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801e44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e452:	2100      	movs	r1, #0
 801e454:	6039      	str	r1, [r7, #0]
 801e456:	f003 0320 	and.w	r3, r3, #32
 801e45a:	607b      	str	r3, [r7, #4]
 801e45c:	e9d7 1200 	ldrd	r1, r2, [r7]
 801e460:	460b      	mov	r3, r1
 801e462:	4313      	orrs	r3, r2
 801e464:	d011      	beq.n	801e48a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e46a:	3328      	adds	r3, #40	@ 0x28
 801e46c:	2102      	movs	r1, #2
 801e46e:	4618      	mov	r0, r3
 801e470:	f000 fb8a 	bl	801eb88 <RCCEx_PLL3_Config>
 801e474:	4603      	mov	r3, r0
 801e476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e47a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e47e:	2b00      	cmp	r3, #0
 801e480:	d003      	beq.n	801e48a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e486:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801e48a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801e48e:	2b00      	cmp	r3, #0
 801e490:	d101      	bne.n	801e496 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801e492:	2300      	movs	r3, #0
 801e494:	e000      	b.n	801e498 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801e496:	2301      	movs	r3, #1
}
 801e498:	4618      	mov	r0, r3
 801e49a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801e49e:	46bd      	mov	sp, r7
 801e4a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e4a4:	58024400 	.word	0x58024400

0801e4a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801e4a8:	b580      	push	{r7, lr}
 801e4aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801e4ac:	f7fe fd96 	bl	801cfdc <HAL_RCC_GetHCLKFreq>
 801e4b0:	4602      	mov	r2, r0
 801e4b2:	4b06      	ldr	r3, [pc, #24]	@ (801e4cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801e4b4:	6a1b      	ldr	r3, [r3, #32]
 801e4b6:	091b      	lsrs	r3, r3, #4
 801e4b8:	f003 0307 	and.w	r3, r3, #7
 801e4bc:	4904      	ldr	r1, [pc, #16]	@ (801e4d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801e4be:	5ccb      	ldrb	r3, [r1, r3]
 801e4c0:	f003 031f 	and.w	r3, r3, #31
 801e4c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801e4c8:	4618      	mov	r0, r3
 801e4ca:	bd80      	pop	{r7, pc}
 801e4cc:	58024400 	.word	0x58024400
 801e4d0:	08026f08 	.word	0x08026f08

0801e4d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801e4d4:	b480      	push	{r7}
 801e4d6:	b089      	sub	sp, #36	@ 0x24
 801e4d8:	af00      	add	r7, sp, #0
 801e4da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e4dc:	4ba1      	ldr	r3, [pc, #644]	@ (801e764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e4de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e4e0:	f003 0303 	and.w	r3, r3, #3
 801e4e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801e4e6:	4b9f      	ldr	r3, [pc, #636]	@ (801e764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e4ea:	0b1b      	lsrs	r3, r3, #12
 801e4ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e4f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801e4f2:	4b9c      	ldr	r3, [pc, #624]	@ (801e764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e4f6:	091b      	lsrs	r3, r3, #4
 801e4f8:	f003 0301 	and.w	r3, r3, #1
 801e4fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801e4fe:	4b99      	ldr	r3, [pc, #612]	@ (801e764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e502:	08db      	lsrs	r3, r3, #3
 801e504:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e508:	693a      	ldr	r2, [r7, #16]
 801e50a:	fb02 f303 	mul.w	r3, r2, r3
 801e50e:	ee07 3a90 	vmov	s15, r3
 801e512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e516:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801e51a:	697b      	ldr	r3, [r7, #20]
 801e51c:	2b00      	cmp	r3, #0
 801e51e:	f000 8111 	beq.w	801e744 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801e522:	69bb      	ldr	r3, [r7, #24]
 801e524:	2b02      	cmp	r3, #2
 801e526:	f000 8083 	beq.w	801e630 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801e52a:	69bb      	ldr	r3, [r7, #24]
 801e52c:	2b02      	cmp	r3, #2
 801e52e:	f200 80a1 	bhi.w	801e674 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801e532:	69bb      	ldr	r3, [r7, #24]
 801e534:	2b00      	cmp	r3, #0
 801e536:	d003      	beq.n	801e540 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801e538:	69bb      	ldr	r3, [r7, #24]
 801e53a:	2b01      	cmp	r3, #1
 801e53c:	d056      	beq.n	801e5ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801e53e:	e099      	b.n	801e674 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e540:	4b88      	ldr	r3, [pc, #544]	@ (801e764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e542:	681b      	ldr	r3, [r3, #0]
 801e544:	f003 0320 	and.w	r3, r3, #32
 801e548:	2b00      	cmp	r3, #0
 801e54a:	d02d      	beq.n	801e5a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e54c:	4b85      	ldr	r3, [pc, #532]	@ (801e764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e54e:	681b      	ldr	r3, [r3, #0]
 801e550:	08db      	lsrs	r3, r3, #3
 801e552:	f003 0303 	and.w	r3, r3, #3
 801e556:	4a84      	ldr	r2, [pc, #528]	@ (801e768 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801e558:	fa22 f303 	lsr.w	r3, r2, r3
 801e55c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e55e:	68bb      	ldr	r3, [r7, #8]
 801e560:	ee07 3a90 	vmov	s15, r3
 801e564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e568:	697b      	ldr	r3, [r7, #20]
 801e56a:	ee07 3a90 	vmov	s15, r3
 801e56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e576:	4b7b      	ldr	r3, [pc, #492]	@ (801e764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e57a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e57e:	ee07 3a90 	vmov	s15, r3
 801e582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e586:	ed97 6a03 	vldr	s12, [r7, #12]
 801e58a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801e76c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e58e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e59a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e59e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e5a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e5a6:	e087      	b.n	801e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e5a8:	697b      	ldr	r3, [r7, #20]
 801e5aa:	ee07 3a90 	vmov	s15, r3
 801e5ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e5b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801e770 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801e5b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e5ba:	4b6a      	ldr	r3, [pc, #424]	@ (801e764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e5bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e5be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e5c2:	ee07 3a90 	vmov	s15, r3
 801e5c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e5ca:	ed97 6a03 	vldr	s12, [r7, #12]
 801e5ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801e76c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e5d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e5d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e5da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e5de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e5e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e5e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e5ea:	e065      	b.n	801e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e5ec:	697b      	ldr	r3, [r7, #20]
 801e5ee:	ee07 3a90 	vmov	s15, r3
 801e5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e5f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801e774 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801e5fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e5fe:	4b59      	ldr	r3, [pc, #356]	@ (801e764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e606:	ee07 3a90 	vmov	s15, r3
 801e60a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e60e:	ed97 6a03 	vldr	s12, [r7, #12]
 801e612:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801e76c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e61a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e61e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e626:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e62a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e62e:	e043      	b.n	801e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e630:	697b      	ldr	r3, [r7, #20]
 801e632:	ee07 3a90 	vmov	s15, r3
 801e636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e63a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801e778 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801e63e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e642:	4b48      	ldr	r3, [pc, #288]	@ (801e764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e64a:	ee07 3a90 	vmov	s15, r3
 801e64e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e652:	ed97 6a03 	vldr	s12, [r7, #12]
 801e656:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801e76c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e65a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e65e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e66a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e66e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e672:	e021      	b.n	801e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e674:	697b      	ldr	r3, [r7, #20]
 801e676:	ee07 3a90 	vmov	s15, r3
 801e67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e67e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801e774 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801e682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e686:	4b37      	ldr	r3, [pc, #220]	@ (801e764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e68e:	ee07 3a90 	vmov	s15, r3
 801e692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e696:	ed97 6a03 	vldr	s12, [r7, #12]
 801e69a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801e76c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e69e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e6a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e6a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e6aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e6ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e6b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e6b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801e6b8:	4b2a      	ldr	r3, [pc, #168]	@ (801e764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e6ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e6bc:	0a5b      	lsrs	r3, r3, #9
 801e6be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e6c2:	ee07 3a90 	vmov	s15, r3
 801e6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e6ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e6ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e6d2:	edd7 6a07 	vldr	s13, [r7, #28]
 801e6d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e6da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e6de:	ee17 2a90 	vmov	r2, s15
 801e6e2:	687b      	ldr	r3, [r7, #4]
 801e6e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801e6e6:	4b1f      	ldr	r3, [pc, #124]	@ (801e764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e6e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e6ea:	0c1b      	lsrs	r3, r3, #16
 801e6ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e6f0:	ee07 3a90 	vmov	s15, r3
 801e6f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e6f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e6fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e700:	edd7 6a07 	vldr	s13, [r7, #28]
 801e704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e70c:	ee17 2a90 	vmov	r2, s15
 801e710:	687b      	ldr	r3, [r7, #4]
 801e712:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801e714:	4b13      	ldr	r3, [pc, #76]	@ (801e764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e718:	0e1b      	lsrs	r3, r3, #24
 801e71a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e71e:	ee07 3a90 	vmov	s15, r3
 801e722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e726:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e72a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e72e:	edd7 6a07 	vldr	s13, [r7, #28]
 801e732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e73a:	ee17 2a90 	vmov	r2, s15
 801e73e:	687b      	ldr	r3, [r7, #4]
 801e740:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801e742:	e008      	b.n	801e756 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801e744:	687b      	ldr	r3, [r7, #4]
 801e746:	2200      	movs	r2, #0
 801e748:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801e74a:	687b      	ldr	r3, [r7, #4]
 801e74c:	2200      	movs	r2, #0
 801e74e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801e750:	687b      	ldr	r3, [r7, #4]
 801e752:	2200      	movs	r2, #0
 801e754:	609a      	str	r2, [r3, #8]
}
 801e756:	bf00      	nop
 801e758:	3724      	adds	r7, #36	@ 0x24
 801e75a:	46bd      	mov	sp, r7
 801e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e760:	4770      	bx	lr
 801e762:	bf00      	nop
 801e764:	58024400 	.word	0x58024400
 801e768:	03d09000 	.word	0x03d09000
 801e76c:	46000000 	.word	0x46000000
 801e770:	4c742400 	.word	0x4c742400
 801e774:	4a742400 	.word	0x4a742400
 801e778:	4bbebc20 	.word	0x4bbebc20

0801e77c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801e77c:	b480      	push	{r7}
 801e77e:	b089      	sub	sp, #36	@ 0x24
 801e780:	af00      	add	r7, sp, #0
 801e782:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e784:	4ba1      	ldr	r3, [pc, #644]	@ (801ea0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e788:	f003 0303 	and.w	r3, r3, #3
 801e78c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801e78e:	4b9f      	ldr	r3, [pc, #636]	@ (801ea0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e792:	0d1b      	lsrs	r3, r3, #20
 801e794:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e798:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801e79a:	4b9c      	ldr	r3, [pc, #624]	@ (801ea0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e79c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e79e:	0a1b      	lsrs	r3, r3, #8
 801e7a0:	f003 0301 	and.w	r3, r3, #1
 801e7a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801e7a6:	4b99      	ldr	r3, [pc, #612]	@ (801ea0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e7a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e7aa:	08db      	lsrs	r3, r3, #3
 801e7ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e7b0:	693a      	ldr	r2, [r7, #16]
 801e7b2:	fb02 f303 	mul.w	r3, r2, r3
 801e7b6:	ee07 3a90 	vmov	s15, r3
 801e7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e7be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801e7c2:	697b      	ldr	r3, [r7, #20]
 801e7c4:	2b00      	cmp	r3, #0
 801e7c6:	f000 8111 	beq.w	801e9ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801e7ca:	69bb      	ldr	r3, [r7, #24]
 801e7cc:	2b02      	cmp	r3, #2
 801e7ce:	f000 8083 	beq.w	801e8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801e7d2:	69bb      	ldr	r3, [r7, #24]
 801e7d4:	2b02      	cmp	r3, #2
 801e7d6:	f200 80a1 	bhi.w	801e91c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801e7da:	69bb      	ldr	r3, [r7, #24]
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	d003      	beq.n	801e7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801e7e0:	69bb      	ldr	r3, [r7, #24]
 801e7e2:	2b01      	cmp	r3, #1
 801e7e4:	d056      	beq.n	801e894 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801e7e6:	e099      	b.n	801e91c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e7e8:	4b88      	ldr	r3, [pc, #544]	@ (801ea0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e7ea:	681b      	ldr	r3, [r3, #0]
 801e7ec:	f003 0320 	and.w	r3, r3, #32
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	d02d      	beq.n	801e850 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e7f4:	4b85      	ldr	r3, [pc, #532]	@ (801ea0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e7f6:	681b      	ldr	r3, [r3, #0]
 801e7f8:	08db      	lsrs	r3, r3, #3
 801e7fa:	f003 0303 	and.w	r3, r3, #3
 801e7fe:	4a84      	ldr	r2, [pc, #528]	@ (801ea10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801e800:	fa22 f303 	lsr.w	r3, r2, r3
 801e804:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e806:	68bb      	ldr	r3, [r7, #8]
 801e808:	ee07 3a90 	vmov	s15, r3
 801e80c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e810:	697b      	ldr	r3, [r7, #20]
 801e812:	ee07 3a90 	vmov	s15, r3
 801e816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e81a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e81e:	4b7b      	ldr	r3, [pc, #492]	@ (801ea0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e826:	ee07 3a90 	vmov	s15, r3
 801e82a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e82e:	ed97 6a03 	vldr	s12, [r7, #12]
 801e832:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801ea14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e83a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e83e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e846:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e84a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e84e:	e087      	b.n	801e960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e850:	697b      	ldr	r3, [r7, #20]
 801e852:	ee07 3a90 	vmov	s15, r3
 801e856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e85a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801ea18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801e85e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e862:	4b6a      	ldr	r3, [pc, #424]	@ (801ea0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e86a:	ee07 3a90 	vmov	s15, r3
 801e86e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e872:	ed97 6a03 	vldr	s12, [r7, #12]
 801e876:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801ea14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e87a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e87e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e88a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e88e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e892:	e065      	b.n	801e960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e894:	697b      	ldr	r3, [r7, #20]
 801e896:	ee07 3a90 	vmov	s15, r3
 801e89a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e89e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801ea1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801e8a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e8a6:	4b59      	ldr	r3, [pc, #356]	@ (801ea0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e8a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e8aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e8ae:	ee07 3a90 	vmov	s15, r3
 801e8b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e8b6:	ed97 6a03 	vldr	s12, [r7, #12]
 801e8ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801ea14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e8be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e8c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e8c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e8ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e8ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e8d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e8d6:	e043      	b.n	801e960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e8d8:	697b      	ldr	r3, [r7, #20]
 801e8da:	ee07 3a90 	vmov	s15, r3
 801e8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e8e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801ea20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801e8e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e8ea:	4b48      	ldr	r3, [pc, #288]	@ (801ea0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e8ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e8f2:	ee07 3a90 	vmov	s15, r3
 801e8f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e8fa:	ed97 6a03 	vldr	s12, [r7, #12]
 801e8fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801ea14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e90a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e90e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e912:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e91a:	e021      	b.n	801e960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e91c:	697b      	ldr	r3, [r7, #20]
 801e91e:	ee07 3a90 	vmov	s15, r3
 801e922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e926:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801ea1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801e92a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e92e:	4b37      	ldr	r3, [pc, #220]	@ (801ea0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e936:	ee07 3a90 	vmov	s15, r3
 801e93a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e93e:	ed97 6a03 	vldr	s12, [r7, #12]
 801e942:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801ea14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e94a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e94e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e956:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e95a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e95e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801e960:	4b2a      	ldr	r3, [pc, #168]	@ (801ea0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e964:	0a5b      	lsrs	r3, r3, #9
 801e966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e96a:	ee07 3a90 	vmov	s15, r3
 801e96e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e972:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e976:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e97a:	edd7 6a07 	vldr	s13, [r7, #28]
 801e97e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e986:	ee17 2a90 	vmov	r2, s15
 801e98a:	687b      	ldr	r3, [r7, #4]
 801e98c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801e98e:	4b1f      	ldr	r3, [pc, #124]	@ (801ea0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e992:	0c1b      	lsrs	r3, r3, #16
 801e994:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e998:	ee07 3a90 	vmov	s15, r3
 801e99c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e9a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e9a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e9a8:	edd7 6a07 	vldr	s13, [r7, #28]
 801e9ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e9b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e9b4:	ee17 2a90 	vmov	r2, s15
 801e9b8:	687b      	ldr	r3, [r7, #4]
 801e9ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801e9bc:	4b13      	ldr	r3, [pc, #76]	@ (801ea0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e9be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e9c0:	0e1b      	lsrs	r3, r3, #24
 801e9c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e9c6:	ee07 3a90 	vmov	s15, r3
 801e9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e9ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e9d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e9d6:	edd7 6a07 	vldr	s13, [r7, #28]
 801e9da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e9de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e9e2:	ee17 2a90 	vmov	r2, s15
 801e9e6:	687b      	ldr	r3, [r7, #4]
 801e9e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801e9ea:	e008      	b.n	801e9fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	2200      	movs	r2, #0
 801e9f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801e9f2:	687b      	ldr	r3, [r7, #4]
 801e9f4:	2200      	movs	r2, #0
 801e9f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801e9f8:	687b      	ldr	r3, [r7, #4]
 801e9fa:	2200      	movs	r2, #0
 801e9fc:	609a      	str	r2, [r3, #8]
}
 801e9fe:	bf00      	nop
 801ea00:	3724      	adds	r7, #36	@ 0x24
 801ea02:	46bd      	mov	sp, r7
 801ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea08:	4770      	bx	lr
 801ea0a:	bf00      	nop
 801ea0c:	58024400 	.word	0x58024400
 801ea10:	03d09000 	.word	0x03d09000
 801ea14:	46000000 	.word	0x46000000
 801ea18:	4c742400 	.word	0x4c742400
 801ea1c:	4a742400 	.word	0x4a742400
 801ea20:	4bbebc20 	.word	0x4bbebc20

0801ea24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801ea24:	b580      	push	{r7, lr}
 801ea26:	b084      	sub	sp, #16
 801ea28:	af00      	add	r7, sp, #0
 801ea2a:	6078      	str	r0, [r7, #4]
 801ea2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801ea2e:	2300      	movs	r3, #0
 801ea30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801ea32:	4b53      	ldr	r3, [pc, #332]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801ea34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ea36:	f003 0303 	and.w	r3, r3, #3
 801ea3a:	2b03      	cmp	r3, #3
 801ea3c:	d101      	bne.n	801ea42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801ea3e:	2301      	movs	r3, #1
 801ea40:	e099      	b.n	801eb76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801ea42:	4b4f      	ldr	r3, [pc, #316]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801ea44:	681b      	ldr	r3, [r3, #0]
 801ea46:	4a4e      	ldr	r2, [pc, #312]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801ea48:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801ea4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ea4e:	f7fa ff23 	bl	8019898 <HAL_GetTick>
 801ea52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801ea54:	e008      	b.n	801ea68 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801ea56:	f7fa ff1f 	bl	8019898 <HAL_GetTick>
 801ea5a:	4602      	mov	r2, r0
 801ea5c:	68bb      	ldr	r3, [r7, #8]
 801ea5e:	1ad3      	subs	r3, r2, r3
 801ea60:	2b02      	cmp	r3, #2
 801ea62:	d901      	bls.n	801ea68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801ea64:	2303      	movs	r3, #3
 801ea66:	e086      	b.n	801eb76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801ea68:	4b45      	ldr	r3, [pc, #276]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801ea6a:	681b      	ldr	r3, [r3, #0]
 801ea6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801ea70:	2b00      	cmp	r3, #0
 801ea72:	d1f0      	bne.n	801ea56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801ea74:	4b42      	ldr	r3, [pc, #264]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801ea76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ea78:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801ea7c:	687b      	ldr	r3, [r7, #4]
 801ea7e:	681b      	ldr	r3, [r3, #0]
 801ea80:	031b      	lsls	r3, r3, #12
 801ea82:	493f      	ldr	r1, [pc, #252]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801ea84:	4313      	orrs	r3, r2
 801ea86:	628b      	str	r3, [r1, #40]	@ 0x28
 801ea88:	687b      	ldr	r3, [r7, #4]
 801ea8a:	685b      	ldr	r3, [r3, #4]
 801ea8c:	3b01      	subs	r3, #1
 801ea8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801ea92:	687b      	ldr	r3, [r7, #4]
 801ea94:	689b      	ldr	r3, [r3, #8]
 801ea96:	3b01      	subs	r3, #1
 801ea98:	025b      	lsls	r3, r3, #9
 801ea9a:	b29b      	uxth	r3, r3
 801ea9c:	431a      	orrs	r2, r3
 801ea9e:	687b      	ldr	r3, [r7, #4]
 801eaa0:	68db      	ldr	r3, [r3, #12]
 801eaa2:	3b01      	subs	r3, #1
 801eaa4:	041b      	lsls	r3, r3, #16
 801eaa6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801eaaa:	431a      	orrs	r2, r3
 801eaac:	687b      	ldr	r3, [r7, #4]
 801eaae:	691b      	ldr	r3, [r3, #16]
 801eab0:	3b01      	subs	r3, #1
 801eab2:	061b      	lsls	r3, r3, #24
 801eab4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801eab8:	4931      	ldr	r1, [pc, #196]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eaba:	4313      	orrs	r3, r2
 801eabc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801eabe:	4b30      	ldr	r3, [pc, #192]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eac2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801eac6:	687b      	ldr	r3, [r7, #4]
 801eac8:	695b      	ldr	r3, [r3, #20]
 801eaca:	492d      	ldr	r1, [pc, #180]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eacc:	4313      	orrs	r3, r2
 801eace:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801ead0:	4b2b      	ldr	r3, [pc, #172]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801ead2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ead4:	f023 0220 	bic.w	r2, r3, #32
 801ead8:	687b      	ldr	r3, [r7, #4]
 801eada:	699b      	ldr	r3, [r3, #24]
 801eadc:	4928      	ldr	r1, [pc, #160]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eade:	4313      	orrs	r3, r2
 801eae0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801eae2:	4b27      	ldr	r3, [pc, #156]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eae6:	4a26      	ldr	r2, [pc, #152]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eae8:	f023 0310 	bic.w	r3, r3, #16
 801eaec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801eaee:	4b24      	ldr	r3, [pc, #144]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eaf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801eaf2:	4b24      	ldr	r3, [pc, #144]	@ (801eb84 <RCCEx_PLL2_Config+0x160>)
 801eaf4:	4013      	ands	r3, r2
 801eaf6:	687a      	ldr	r2, [r7, #4]
 801eaf8:	69d2      	ldr	r2, [r2, #28]
 801eafa:	00d2      	lsls	r2, r2, #3
 801eafc:	4920      	ldr	r1, [pc, #128]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eafe:	4313      	orrs	r3, r2
 801eb00:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801eb02:	4b1f      	ldr	r3, [pc, #124]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eb04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eb06:	4a1e      	ldr	r2, [pc, #120]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eb08:	f043 0310 	orr.w	r3, r3, #16
 801eb0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801eb0e:	683b      	ldr	r3, [r7, #0]
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	d106      	bne.n	801eb22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801eb14:	4b1a      	ldr	r3, [pc, #104]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eb16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eb18:	4a19      	ldr	r2, [pc, #100]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eb1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801eb1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801eb20:	e00f      	b.n	801eb42 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801eb22:	683b      	ldr	r3, [r7, #0]
 801eb24:	2b01      	cmp	r3, #1
 801eb26:	d106      	bne.n	801eb36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801eb28:	4b15      	ldr	r3, [pc, #84]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eb2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eb2c:	4a14      	ldr	r2, [pc, #80]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eb2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801eb32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801eb34:	e005      	b.n	801eb42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801eb36:	4b12      	ldr	r3, [pc, #72]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eb38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eb3a:	4a11      	ldr	r2, [pc, #68]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eb3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801eb40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801eb42:	4b0f      	ldr	r3, [pc, #60]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eb44:	681b      	ldr	r3, [r3, #0]
 801eb46:	4a0e      	ldr	r2, [pc, #56]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eb48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801eb4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801eb4e:	f7fa fea3 	bl	8019898 <HAL_GetTick>
 801eb52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801eb54:	e008      	b.n	801eb68 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801eb56:	f7fa fe9f 	bl	8019898 <HAL_GetTick>
 801eb5a:	4602      	mov	r2, r0
 801eb5c:	68bb      	ldr	r3, [r7, #8]
 801eb5e:	1ad3      	subs	r3, r2, r3
 801eb60:	2b02      	cmp	r3, #2
 801eb62:	d901      	bls.n	801eb68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801eb64:	2303      	movs	r3, #3
 801eb66:	e006      	b.n	801eb76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801eb68:	4b05      	ldr	r3, [pc, #20]	@ (801eb80 <RCCEx_PLL2_Config+0x15c>)
 801eb6a:	681b      	ldr	r3, [r3, #0]
 801eb6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801eb70:	2b00      	cmp	r3, #0
 801eb72:	d0f0      	beq.n	801eb56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801eb74:	7bfb      	ldrb	r3, [r7, #15]
}
 801eb76:	4618      	mov	r0, r3
 801eb78:	3710      	adds	r7, #16
 801eb7a:	46bd      	mov	sp, r7
 801eb7c:	bd80      	pop	{r7, pc}
 801eb7e:	bf00      	nop
 801eb80:	58024400 	.word	0x58024400
 801eb84:	ffff0007 	.word	0xffff0007

0801eb88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801eb88:	b580      	push	{r7, lr}
 801eb8a:	b084      	sub	sp, #16
 801eb8c:	af00      	add	r7, sp, #0
 801eb8e:	6078      	str	r0, [r7, #4]
 801eb90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801eb92:	2300      	movs	r3, #0
 801eb94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801eb96:	4b53      	ldr	r3, [pc, #332]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801eb98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb9a:	f003 0303 	and.w	r3, r3, #3
 801eb9e:	2b03      	cmp	r3, #3
 801eba0:	d101      	bne.n	801eba6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801eba2:	2301      	movs	r3, #1
 801eba4:	e099      	b.n	801ecda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801eba6:	4b4f      	ldr	r3, [pc, #316]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801eba8:	681b      	ldr	r3, [r3, #0]
 801ebaa:	4a4e      	ldr	r2, [pc, #312]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ebac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801ebb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ebb2:	f7fa fe71 	bl	8019898 <HAL_GetTick>
 801ebb6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801ebb8:	e008      	b.n	801ebcc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801ebba:	f7fa fe6d 	bl	8019898 <HAL_GetTick>
 801ebbe:	4602      	mov	r2, r0
 801ebc0:	68bb      	ldr	r3, [r7, #8]
 801ebc2:	1ad3      	subs	r3, r2, r3
 801ebc4:	2b02      	cmp	r3, #2
 801ebc6:	d901      	bls.n	801ebcc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801ebc8:	2303      	movs	r3, #3
 801ebca:	e086      	b.n	801ecda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801ebcc:	4b45      	ldr	r3, [pc, #276]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ebce:	681b      	ldr	r3, [r3, #0]
 801ebd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801ebd4:	2b00      	cmp	r3, #0
 801ebd6:	d1f0      	bne.n	801ebba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801ebd8:	4b42      	ldr	r3, [pc, #264]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ebda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ebdc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801ebe0:	687b      	ldr	r3, [r7, #4]
 801ebe2:	681b      	ldr	r3, [r3, #0]
 801ebe4:	051b      	lsls	r3, r3, #20
 801ebe6:	493f      	ldr	r1, [pc, #252]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ebe8:	4313      	orrs	r3, r2
 801ebea:	628b      	str	r3, [r1, #40]	@ 0x28
 801ebec:	687b      	ldr	r3, [r7, #4]
 801ebee:	685b      	ldr	r3, [r3, #4]
 801ebf0:	3b01      	subs	r3, #1
 801ebf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801ebf6:	687b      	ldr	r3, [r7, #4]
 801ebf8:	689b      	ldr	r3, [r3, #8]
 801ebfa:	3b01      	subs	r3, #1
 801ebfc:	025b      	lsls	r3, r3, #9
 801ebfe:	b29b      	uxth	r3, r3
 801ec00:	431a      	orrs	r2, r3
 801ec02:	687b      	ldr	r3, [r7, #4]
 801ec04:	68db      	ldr	r3, [r3, #12]
 801ec06:	3b01      	subs	r3, #1
 801ec08:	041b      	lsls	r3, r3, #16
 801ec0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801ec0e:	431a      	orrs	r2, r3
 801ec10:	687b      	ldr	r3, [r7, #4]
 801ec12:	691b      	ldr	r3, [r3, #16]
 801ec14:	3b01      	subs	r3, #1
 801ec16:	061b      	lsls	r3, r3, #24
 801ec18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801ec1c:	4931      	ldr	r1, [pc, #196]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ec1e:	4313      	orrs	r3, r2
 801ec20:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801ec22:	4b30      	ldr	r3, [pc, #192]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ec24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801ec2a:	687b      	ldr	r3, [r7, #4]
 801ec2c:	695b      	ldr	r3, [r3, #20]
 801ec2e:	492d      	ldr	r1, [pc, #180]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ec30:	4313      	orrs	r3, r2
 801ec32:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801ec34:	4b2b      	ldr	r3, [pc, #172]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ec36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec38:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801ec3c:	687b      	ldr	r3, [r7, #4]
 801ec3e:	699b      	ldr	r3, [r3, #24]
 801ec40:	4928      	ldr	r1, [pc, #160]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ec42:	4313      	orrs	r3, r2
 801ec44:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801ec46:	4b27      	ldr	r3, [pc, #156]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ec48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec4a:	4a26      	ldr	r2, [pc, #152]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ec4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801ec50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801ec52:	4b24      	ldr	r3, [pc, #144]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ec54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801ec56:	4b24      	ldr	r3, [pc, #144]	@ (801ece8 <RCCEx_PLL3_Config+0x160>)
 801ec58:	4013      	ands	r3, r2
 801ec5a:	687a      	ldr	r2, [r7, #4]
 801ec5c:	69d2      	ldr	r2, [r2, #28]
 801ec5e:	00d2      	lsls	r2, r2, #3
 801ec60:	4920      	ldr	r1, [pc, #128]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ec62:	4313      	orrs	r3, r2
 801ec64:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801ec66:	4b1f      	ldr	r3, [pc, #124]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ec68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec6a:	4a1e      	ldr	r2, [pc, #120]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ec6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801ec70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801ec72:	683b      	ldr	r3, [r7, #0]
 801ec74:	2b00      	cmp	r3, #0
 801ec76:	d106      	bne.n	801ec86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801ec78:	4b1a      	ldr	r3, [pc, #104]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ec7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec7c:	4a19      	ldr	r2, [pc, #100]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ec7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801ec82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801ec84:	e00f      	b.n	801eca6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801ec86:	683b      	ldr	r3, [r7, #0]
 801ec88:	2b01      	cmp	r3, #1
 801ec8a:	d106      	bne.n	801ec9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801ec8c:	4b15      	ldr	r3, [pc, #84]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ec8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec90:	4a14      	ldr	r2, [pc, #80]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ec92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801ec96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801ec98:	e005      	b.n	801eca6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801ec9a:	4b12      	ldr	r3, [pc, #72]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ec9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec9e:	4a11      	ldr	r2, [pc, #68]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801eca0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801eca4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801eca6:	4b0f      	ldr	r3, [pc, #60]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801eca8:	681b      	ldr	r3, [r3, #0]
 801ecaa:	4a0e      	ldr	r2, [pc, #56]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ecac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801ecb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ecb2:	f7fa fdf1 	bl	8019898 <HAL_GetTick>
 801ecb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801ecb8:	e008      	b.n	801eccc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801ecba:	f7fa fded 	bl	8019898 <HAL_GetTick>
 801ecbe:	4602      	mov	r2, r0
 801ecc0:	68bb      	ldr	r3, [r7, #8]
 801ecc2:	1ad3      	subs	r3, r2, r3
 801ecc4:	2b02      	cmp	r3, #2
 801ecc6:	d901      	bls.n	801eccc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801ecc8:	2303      	movs	r3, #3
 801ecca:	e006      	b.n	801ecda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801eccc:	4b05      	ldr	r3, [pc, #20]	@ (801ece4 <RCCEx_PLL3_Config+0x15c>)
 801ecce:	681b      	ldr	r3, [r3, #0]
 801ecd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801ecd4:	2b00      	cmp	r3, #0
 801ecd6:	d0f0      	beq.n	801ecba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801ecd8:	7bfb      	ldrb	r3, [r7, #15]
}
 801ecda:	4618      	mov	r0, r3
 801ecdc:	3710      	adds	r7, #16
 801ecde:	46bd      	mov	sp, r7
 801ece0:	bd80      	pop	{r7, pc}
 801ece2:	bf00      	nop
 801ece4:	58024400 	.word	0x58024400
 801ece8:	ffff0007 	.word	0xffff0007

0801ecec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801ecec:	b580      	push	{r7, lr}
 801ecee:	b084      	sub	sp, #16
 801ecf0:	af00      	add	r7, sp, #0
 801ecf2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801ecf4:	687b      	ldr	r3, [r7, #4]
 801ecf6:	2b00      	cmp	r3, #0
 801ecf8:	d101      	bne.n	801ecfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801ecfa:	2301      	movs	r3, #1
 801ecfc:	e10f      	b.n	801ef1e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801ecfe:	687b      	ldr	r3, [r7, #4]
 801ed00:	2200      	movs	r2, #0
 801ed02:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801ed04:	687b      	ldr	r3, [r7, #4]
 801ed06:	681b      	ldr	r3, [r3, #0]
 801ed08:	4a87      	ldr	r2, [pc, #540]	@ (801ef28 <HAL_SPI_Init+0x23c>)
 801ed0a:	4293      	cmp	r3, r2
 801ed0c:	d00f      	beq.n	801ed2e <HAL_SPI_Init+0x42>
 801ed0e:	687b      	ldr	r3, [r7, #4]
 801ed10:	681b      	ldr	r3, [r3, #0]
 801ed12:	4a86      	ldr	r2, [pc, #536]	@ (801ef2c <HAL_SPI_Init+0x240>)
 801ed14:	4293      	cmp	r3, r2
 801ed16:	d00a      	beq.n	801ed2e <HAL_SPI_Init+0x42>
 801ed18:	687b      	ldr	r3, [r7, #4]
 801ed1a:	681b      	ldr	r3, [r3, #0]
 801ed1c:	4a84      	ldr	r2, [pc, #528]	@ (801ef30 <HAL_SPI_Init+0x244>)
 801ed1e:	4293      	cmp	r3, r2
 801ed20:	d005      	beq.n	801ed2e <HAL_SPI_Init+0x42>
 801ed22:	687b      	ldr	r3, [r7, #4]
 801ed24:	68db      	ldr	r3, [r3, #12]
 801ed26:	2b0f      	cmp	r3, #15
 801ed28:	d901      	bls.n	801ed2e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801ed2a:	2301      	movs	r3, #1
 801ed2c:	e0f7      	b.n	801ef1e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801ed2e:	6878      	ldr	r0, [r7, #4]
 801ed30:	f000 fbba 	bl	801f4a8 <SPI_GetPacketSize>
 801ed34:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801ed36:	687b      	ldr	r3, [r7, #4]
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	4a7b      	ldr	r2, [pc, #492]	@ (801ef28 <HAL_SPI_Init+0x23c>)
 801ed3c:	4293      	cmp	r3, r2
 801ed3e:	d00c      	beq.n	801ed5a <HAL_SPI_Init+0x6e>
 801ed40:	687b      	ldr	r3, [r7, #4]
 801ed42:	681b      	ldr	r3, [r3, #0]
 801ed44:	4a79      	ldr	r2, [pc, #484]	@ (801ef2c <HAL_SPI_Init+0x240>)
 801ed46:	4293      	cmp	r3, r2
 801ed48:	d007      	beq.n	801ed5a <HAL_SPI_Init+0x6e>
 801ed4a:	687b      	ldr	r3, [r7, #4]
 801ed4c:	681b      	ldr	r3, [r3, #0]
 801ed4e:	4a78      	ldr	r2, [pc, #480]	@ (801ef30 <HAL_SPI_Init+0x244>)
 801ed50:	4293      	cmp	r3, r2
 801ed52:	d002      	beq.n	801ed5a <HAL_SPI_Init+0x6e>
 801ed54:	68fb      	ldr	r3, [r7, #12]
 801ed56:	2b08      	cmp	r3, #8
 801ed58:	d811      	bhi.n	801ed7e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801ed5a:	687b      	ldr	r3, [r7, #4]
 801ed5c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801ed5e:	4a72      	ldr	r2, [pc, #456]	@ (801ef28 <HAL_SPI_Init+0x23c>)
 801ed60:	4293      	cmp	r3, r2
 801ed62:	d009      	beq.n	801ed78 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801ed64:	687b      	ldr	r3, [r7, #4]
 801ed66:	681b      	ldr	r3, [r3, #0]
 801ed68:	4a70      	ldr	r2, [pc, #448]	@ (801ef2c <HAL_SPI_Init+0x240>)
 801ed6a:	4293      	cmp	r3, r2
 801ed6c:	d004      	beq.n	801ed78 <HAL_SPI_Init+0x8c>
 801ed6e:	687b      	ldr	r3, [r7, #4]
 801ed70:	681b      	ldr	r3, [r3, #0]
 801ed72:	4a6f      	ldr	r2, [pc, #444]	@ (801ef30 <HAL_SPI_Init+0x244>)
 801ed74:	4293      	cmp	r3, r2
 801ed76:	d104      	bne.n	801ed82 <HAL_SPI_Init+0x96>
 801ed78:	68fb      	ldr	r3, [r7, #12]
 801ed7a:	2b10      	cmp	r3, #16
 801ed7c:	d901      	bls.n	801ed82 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801ed7e:	2301      	movs	r3, #1
 801ed80:	e0cd      	b.n	801ef1e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801ed82:	687b      	ldr	r3, [r7, #4]
 801ed84:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801ed88:	b2db      	uxtb	r3, r3
 801ed8a:	2b00      	cmp	r3, #0
 801ed8c:	d106      	bne.n	801ed9c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801ed8e:	687b      	ldr	r3, [r7, #4]
 801ed90:	2200      	movs	r2, #0
 801ed92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801ed96:	6878      	ldr	r0, [r7, #4]
 801ed98:	f7e2 ffec 	bl	8001d74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801ed9c:	687b      	ldr	r3, [r7, #4]
 801ed9e:	2202      	movs	r2, #2
 801eda0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801eda4:	687b      	ldr	r3, [r7, #4]
 801eda6:	681b      	ldr	r3, [r3, #0]
 801eda8:	681a      	ldr	r2, [r3, #0]
 801edaa:	687b      	ldr	r3, [r7, #4]
 801edac:	681b      	ldr	r3, [r3, #0]
 801edae:	f022 0201 	bic.w	r2, r2, #1
 801edb2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	681b      	ldr	r3, [r3, #0]
 801edb8:	689b      	ldr	r3, [r3, #8]
 801edba:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801edbe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801edc0:	687b      	ldr	r3, [r7, #4]
 801edc2:	699b      	ldr	r3, [r3, #24]
 801edc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801edc8:	d119      	bne.n	801edfe <HAL_SPI_Init+0x112>
 801edca:	687b      	ldr	r3, [r7, #4]
 801edcc:	685b      	ldr	r3, [r3, #4]
 801edce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801edd2:	d103      	bne.n	801eddc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801edd4:	687b      	ldr	r3, [r7, #4]
 801edd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801edd8:	2b00      	cmp	r3, #0
 801edda:	d008      	beq.n	801edee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801eddc:	687b      	ldr	r3, [r7, #4]
 801edde:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801ede0:	2b00      	cmp	r3, #0
 801ede2:	d10c      	bne.n	801edfe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801ede4:	687b      	ldr	r3, [r7, #4]
 801ede6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801ede8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801edec:	d107      	bne.n	801edfe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801edee:	687b      	ldr	r3, [r7, #4]
 801edf0:	681b      	ldr	r3, [r3, #0]
 801edf2:	681a      	ldr	r2, [r3, #0]
 801edf4:	687b      	ldr	r3, [r7, #4]
 801edf6:	681b      	ldr	r3, [r3, #0]
 801edf8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801edfc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	685b      	ldr	r3, [r3, #4]
 801ee02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801ee06:	2b00      	cmp	r3, #0
 801ee08:	d00f      	beq.n	801ee2a <HAL_SPI_Init+0x13e>
 801ee0a:	687b      	ldr	r3, [r7, #4]
 801ee0c:	68db      	ldr	r3, [r3, #12]
 801ee0e:	2b06      	cmp	r3, #6
 801ee10:	d90b      	bls.n	801ee2a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801ee12:	687b      	ldr	r3, [r7, #4]
 801ee14:	681b      	ldr	r3, [r3, #0]
 801ee16:	681b      	ldr	r3, [r3, #0]
 801ee18:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801ee1c:	687b      	ldr	r3, [r7, #4]
 801ee1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ee20:	687b      	ldr	r3, [r7, #4]
 801ee22:	681b      	ldr	r3, [r3, #0]
 801ee24:	430a      	orrs	r2, r1
 801ee26:	601a      	str	r2, [r3, #0]
 801ee28:	e007      	b.n	801ee3a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801ee2a:	687b      	ldr	r3, [r7, #4]
 801ee2c:	681b      	ldr	r3, [r3, #0]
 801ee2e:	681a      	ldr	r2, [r3, #0]
 801ee30:	687b      	ldr	r3, [r7, #4]
 801ee32:	681b      	ldr	r3, [r3, #0]
 801ee34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801ee38:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801ee3a:	687b      	ldr	r3, [r7, #4]
 801ee3c:	69da      	ldr	r2, [r3, #28]
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ee42:	431a      	orrs	r2, r3
 801ee44:	68bb      	ldr	r3, [r7, #8]
 801ee46:	431a      	orrs	r2, r3
 801ee48:	687b      	ldr	r3, [r7, #4]
 801ee4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ee4c:	ea42 0103 	orr.w	r1, r2, r3
 801ee50:	687b      	ldr	r3, [r7, #4]
 801ee52:	68da      	ldr	r2, [r3, #12]
 801ee54:	687b      	ldr	r3, [r7, #4]
 801ee56:	681b      	ldr	r3, [r3, #0]
 801ee58:	430a      	orrs	r2, r1
 801ee5a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ee60:	687b      	ldr	r3, [r7, #4]
 801ee62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ee64:	431a      	orrs	r2, r3
 801ee66:	687b      	ldr	r3, [r7, #4]
 801ee68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ee6a:	431a      	orrs	r2, r3
 801ee6c:	687b      	ldr	r3, [r7, #4]
 801ee6e:	699b      	ldr	r3, [r3, #24]
 801ee70:	431a      	orrs	r2, r3
 801ee72:	687b      	ldr	r3, [r7, #4]
 801ee74:	691b      	ldr	r3, [r3, #16]
 801ee76:	431a      	orrs	r2, r3
 801ee78:	687b      	ldr	r3, [r7, #4]
 801ee7a:	695b      	ldr	r3, [r3, #20]
 801ee7c:	431a      	orrs	r2, r3
 801ee7e:	687b      	ldr	r3, [r7, #4]
 801ee80:	6a1b      	ldr	r3, [r3, #32]
 801ee82:	431a      	orrs	r2, r3
 801ee84:	687b      	ldr	r3, [r7, #4]
 801ee86:	685b      	ldr	r3, [r3, #4]
 801ee88:	431a      	orrs	r2, r3
 801ee8a:	687b      	ldr	r3, [r7, #4]
 801ee8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ee8e:	431a      	orrs	r2, r3
 801ee90:	687b      	ldr	r3, [r7, #4]
 801ee92:	689b      	ldr	r3, [r3, #8]
 801ee94:	431a      	orrs	r2, r3
 801ee96:	687b      	ldr	r3, [r7, #4]
 801ee98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ee9a:	ea42 0103 	orr.w	r1, r2, r3
 801ee9e:	687b      	ldr	r3, [r7, #4]
 801eea0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801eea2:	687b      	ldr	r3, [r7, #4]
 801eea4:	681b      	ldr	r3, [r3, #0]
 801eea6:	430a      	orrs	r2, r1
 801eea8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	685b      	ldr	r3, [r3, #4]
 801eeae:	2b00      	cmp	r3, #0
 801eeb0:	d113      	bne.n	801eeda <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801eeb2:	687b      	ldr	r3, [r7, #4]
 801eeb4:	681b      	ldr	r3, [r3, #0]
 801eeb6:	689b      	ldr	r3, [r3, #8]
 801eeb8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801eebc:	687b      	ldr	r3, [r7, #4]
 801eebe:	681b      	ldr	r3, [r3, #0]
 801eec0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801eec4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	681b      	ldr	r3, [r3, #0]
 801eeca:	689b      	ldr	r3, [r3, #8]
 801eecc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801eed0:	687b      	ldr	r3, [r7, #4]
 801eed2:	681b      	ldr	r3, [r3, #0]
 801eed4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801eed8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801eeda:	687b      	ldr	r3, [r7, #4]
 801eedc:	681b      	ldr	r3, [r3, #0]
 801eede:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801eee0:	687b      	ldr	r3, [r7, #4]
 801eee2:	681b      	ldr	r3, [r3, #0]
 801eee4:	f022 0201 	bic.w	r2, r2, #1
 801eee8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801eeea:	687b      	ldr	r3, [r7, #4]
 801eeec:	685b      	ldr	r3, [r3, #4]
 801eeee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801eef2:	2b00      	cmp	r3, #0
 801eef4:	d00a      	beq.n	801ef0c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801eef6:	687b      	ldr	r3, [r7, #4]
 801eef8:	681b      	ldr	r3, [r3, #0]
 801eefa:	68db      	ldr	r3, [r3, #12]
 801eefc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801ef04:	687b      	ldr	r3, [r7, #4]
 801ef06:	681b      	ldr	r3, [r3, #0]
 801ef08:	430a      	orrs	r2, r1
 801ef0a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801ef0c:	687b      	ldr	r3, [r7, #4]
 801ef0e:	2200      	movs	r2, #0
 801ef10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801ef14:	687b      	ldr	r3, [r7, #4]
 801ef16:	2201      	movs	r2, #1
 801ef18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801ef1c:	2300      	movs	r3, #0
}
 801ef1e:	4618      	mov	r0, r3
 801ef20:	3710      	adds	r7, #16
 801ef22:	46bd      	mov	sp, r7
 801ef24:	bd80      	pop	{r7, pc}
 801ef26:	bf00      	nop
 801ef28:	40013000 	.word	0x40013000
 801ef2c:	40003800 	.word	0x40003800
 801ef30:	40003c00 	.word	0x40003c00

0801ef34 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801ef34:	b580      	push	{r7, lr}
 801ef36:	b08a      	sub	sp, #40	@ 0x28
 801ef38:	af00      	add	r7, sp, #0
 801ef3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801ef3c:	687b      	ldr	r3, [r7, #4]
 801ef3e:	681b      	ldr	r3, [r3, #0]
 801ef40:	691b      	ldr	r3, [r3, #16]
 801ef42:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	681b      	ldr	r3, [r3, #0]
 801ef48:	695b      	ldr	r3, [r3, #20]
 801ef4a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801ef4c:	6a3a      	ldr	r2, [r7, #32]
 801ef4e:	69fb      	ldr	r3, [r7, #28]
 801ef50:	4013      	ands	r3, r2
 801ef52:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	681b      	ldr	r3, [r3, #0]
 801ef58:	689b      	ldr	r3, [r3, #8]
 801ef5a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801ef5c:	2300      	movs	r3, #0
 801ef5e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801ef66:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801ef68:	687b      	ldr	r3, [r7, #4]
 801ef6a:	681b      	ldr	r3, [r3, #0]
 801ef6c:	3330      	adds	r3, #48	@ 0x30
 801ef6e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801ef70:	69fb      	ldr	r3, [r7, #28]
 801ef72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801ef76:	2b00      	cmp	r3, #0
 801ef78:	d010      	beq.n	801ef9c <HAL_SPI_IRQHandler+0x68>
 801ef7a:	6a3b      	ldr	r3, [r7, #32]
 801ef7c:	f003 0308 	and.w	r3, r3, #8
 801ef80:	2b00      	cmp	r3, #0
 801ef82:	d00b      	beq.n	801ef9c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801ef84:	687b      	ldr	r3, [r7, #4]
 801ef86:	681b      	ldr	r3, [r3, #0]
 801ef88:	699a      	ldr	r2, [r3, #24]
 801ef8a:	687b      	ldr	r3, [r7, #4]
 801ef8c:	681b      	ldr	r3, [r3, #0]
 801ef8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801ef92:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801ef94:	6878      	ldr	r0, [r7, #4]
 801ef96:	f000 f9c3 	bl	801f320 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801ef9a:	e192      	b.n	801f2c2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801ef9c:	69bb      	ldr	r3, [r7, #24]
 801ef9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801efa2:	2b00      	cmp	r3, #0
 801efa4:	d113      	bne.n	801efce <HAL_SPI_IRQHandler+0x9a>
 801efa6:	69bb      	ldr	r3, [r7, #24]
 801efa8:	f003 0320 	and.w	r3, r3, #32
 801efac:	2b00      	cmp	r3, #0
 801efae:	d10e      	bne.n	801efce <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801efb0:	69bb      	ldr	r3, [r7, #24]
 801efb2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801efb6:	2b00      	cmp	r3, #0
 801efb8:	d009      	beq.n	801efce <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801efba:	687b      	ldr	r3, [r7, #4]
 801efbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801efbe:	6878      	ldr	r0, [r7, #4]
 801efc0:	4798      	blx	r3
    hspi->RxISR(hspi);
 801efc2:	687b      	ldr	r3, [r7, #4]
 801efc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801efc6:	6878      	ldr	r0, [r7, #4]
 801efc8:	4798      	blx	r3
    handled = 1UL;
 801efca:	2301      	movs	r3, #1
 801efcc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801efce:	69bb      	ldr	r3, [r7, #24]
 801efd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801efd4:	2b00      	cmp	r3, #0
 801efd6:	d10f      	bne.n	801eff8 <HAL_SPI_IRQHandler+0xc4>
 801efd8:	69bb      	ldr	r3, [r7, #24]
 801efda:	f003 0301 	and.w	r3, r3, #1
 801efde:	2b00      	cmp	r3, #0
 801efe0:	d00a      	beq.n	801eff8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801efe2:	69bb      	ldr	r3, [r7, #24]
 801efe4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801efe8:	2b00      	cmp	r3, #0
 801efea:	d105      	bne.n	801eff8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801efec:	687b      	ldr	r3, [r7, #4]
 801efee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801eff0:	6878      	ldr	r0, [r7, #4]
 801eff2:	4798      	blx	r3
    handled = 1UL;
 801eff4:	2301      	movs	r3, #1
 801eff6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801eff8:	69bb      	ldr	r3, [r7, #24]
 801effa:	f003 0320 	and.w	r3, r3, #32
 801effe:	2b00      	cmp	r3, #0
 801f000:	d10f      	bne.n	801f022 <HAL_SPI_IRQHandler+0xee>
 801f002:	69bb      	ldr	r3, [r7, #24]
 801f004:	f003 0302 	and.w	r3, r3, #2
 801f008:	2b00      	cmp	r3, #0
 801f00a:	d00a      	beq.n	801f022 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801f00c:	69bb      	ldr	r3, [r7, #24]
 801f00e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801f012:	2b00      	cmp	r3, #0
 801f014:	d105      	bne.n	801f022 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801f016:	687b      	ldr	r3, [r7, #4]
 801f018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f01a:	6878      	ldr	r0, [r7, #4]
 801f01c:	4798      	blx	r3
    handled = 1UL;
 801f01e:	2301      	movs	r3, #1
 801f020:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801f022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f024:	2b00      	cmp	r3, #0
 801f026:	f040 8147 	bne.w	801f2b8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801f02a:	69bb      	ldr	r3, [r7, #24]
 801f02c:	f003 0308 	and.w	r3, r3, #8
 801f030:	2b00      	cmp	r3, #0
 801f032:	f000 808b 	beq.w	801f14c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801f036:	687b      	ldr	r3, [r7, #4]
 801f038:	681b      	ldr	r3, [r3, #0]
 801f03a:	699a      	ldr	r2, [r3, #24]
 801f03c:	687b      	ldr	r3, [r7, #4]
 801f03e:	681b      	ldr	r3, [r3, #0]
 801f040:	f042 0208 	orr.w	r2, r2, #8
 801f044:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801f046:	687b      	ldr	r3, [r7, #4]
 801f048:	681b      	ldr	r3, [r3, #0]
 801f04a:	699a      	ldr	r2, [r3, #24]
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	681b      	ldr	r3, [r3, #0]
 801f050:	f042 0210 	orr.w	r2, r2, #16
 801f054:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801f056:	687b      	ldr	r3, [r7, #4]
 801f058:	681b      	ldr	r3, [r3, #0]
 801f05a:	699a      	ldr	r2, [r3, #24]
 801f05c:	687b      	ldr	r3, [r7, #4]
 801f05e:	681b      	ldr	r3, [r3, #0]
 801f060:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f064:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	681b      	ldr	r3, [r3, #0]
 801f06a:	691a      	ldr	r2, [r3, #16]
 801f06c:	687b      	ldr	r3, [r7, #4]
 801f06e:	681b      	ldr	r3, [r3, #0]
 801f070:	f022 0208 	bic.w	r2, r2, #8
 801f074:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801f076:	687b      	ldr	r3, [r7, #4]
 801f078:	681b      	ldr	r3, [r3, #0]
 801f07a:	689b      	ldr	r3, [r3, #8]
 801f07c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801f080:	2b00      	cmp	r3, #0
 801f082:	d13d      	bne.n	801f100 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801f084:	e036      	b.n	801f0f4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801f086:	687b      	ldr	r3, [r7, #4]
 801f088:	68db      	ldr	r3, [r3, #12]
 801f08a:	2b0f      	cmp	r3, #15
 801f08c:	d90b      	bls.n	801f0a6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801f08e:	687b      	ldr	r3, [r7, #4]
 801f090:	681a      	ldr	r2, [r3, #0]
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f096:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801f098:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f09e:	1d1a      	adds	r2, r3, #4
 801f0a0:	687b      	ldr	r3, [r7, #4]
 801f0a2:	665a      	str	r2, [r3, #100]	@ 0x64
 801f0a4:	e01d      	b.n	801f0e2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801f0a6:	687b      	ldr	r3, [r7, #4]
 801f0a8:	68db      	ldr	r3, [r3, #12]
 801f0aa:	2b07      	cmp	r3, #7
 801f0ac:	d90b      	bls.n	801f0c6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801f0ae:	687b      	ldr	r3, [r7, #4]
 801f0b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f0b2:	68fa      	ldr	r2, [r7, #12]
 801f0b4:	8812      	ldrh	r2, [r2, #0]
 801f0b6:	b292      	uxth	r2, r2
 801f0b8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801f0ba:	687b      	ldr	r3, [r7, #4]
 801f0bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f0be:	1c9a      	adds	r2, r3, #2
 801f0c0:	687b      	ldr	r3, [r7, #4]
 801f0c2:	665a      	str	r2, [r3, #100]	@ 0x64
 801f0c4:	e00d      	b.n	801f0e2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801f0c6:	687b      	ldr	r3, [r7, #4]
 801f0c8:	681b      	ldr	r3, [r3, #0]
 801f0ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801f0ce:	687b      	ldr	r3, [r7, #4]
 801f0d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f0d2:	7812      	ldrb	r2, [r2, #0]
 801f0d4:	b2d2      	uxtb	r2, r2
 801f0d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801f0d8:	687b      	ldr	r3, [r7, #4]
 801f0da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f0dc:	1c5a      	adds	r2, r3, #1
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801f0e8:	b29b      	uxth	r3, r3
 801f0ea:	3b01      	subs	r3, #1
 801f0ec:	b29a      	uxth	r2, r3
 801f0ee:	687b      	ldr	r3, [r7, #4]
 801f0f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 801f0f4:	687b      	ldr	r3, [r7, #4]
 801f0f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801f0fa:	b29b      	uxth	r3, r3
 801f0fc:	2b00      	cmp	r3, #0
 801f0fe:	d1c2      	bne.n	801f086 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801f100:	6878      	ldr	r0, [r7, #4]
 801f102:	f000 f931 	bl	801f368 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801f106:	687b      	ldr	r3, [r7, #4]
 801f108:	2201      	movs	r2, #1
 801f10a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801f10e:	687b      	ldr	r3, [r7, #4]
 801f110:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f114:	2b00      	cmp	r3, #0
 801f116:	d003      	beq.n	801f120 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801f118:	6878      	ldr	r0, [r7, #4]
 801f11a:	f000 f8f7 	bl	801f30c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801f11e:	e0d0      	b.n	801f2c2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801f120:	7cfb      	ldrb	r3, [r7, #19]
 801f122:	2b05      	cmp	r3, #5
 801f124:	d103      	bne.n	801f12e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801f126:	6878      	ldr	r0, [r7, #4]
 801f128:	f000 f8e6 	bl	801f2f8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801f12c:	e0c6      	b.n	801f2bc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801f12e:	7cfb      	ldrb	r3, [r7, #19]
 801f130:	2b04      	cmp	r3, #4
 801f132:	d103      	bne.n	801f13c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801f134:	6878      	ldr	r0, [r7, #4]
 801f136:	f000 f8d5 	bl	801f2e4 <HAL_SPI_RxCpltCallback>
    return;
 801f13a:	e0bf      	b.n	801f2bc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 801f13c:	7cfb      	ldrb	r3, [r7, #19]
 801f13e:	2b03      	cmp	r3, #3
 801f140:	f040 80bc 	bne.w	801f2bc <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801f144:	6878      	ldr	r0, [r7, #4]
 801f146:	f000 f8c3 	bl	801f2d0 <HAL_SPI_TxCpltCallback>
    return;
 801f14a:	e0b7      	b.n	801f2bc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801f14c:	69bb      	ldr	r3, [r7, #24]
 801f14e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 801f152:	2b00      	cmp	r3, #0
 801f154:	f000 80b5 	beq.w	801f2c2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801f158:	69bb      	ldr	r3, [r7, #24]
 801f15a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f15e:	2b00      	cmp	r3, #0
 801f160:	d00f      	beq.n	801f182 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801f162:	687b      	ldr	r3, [r7, #4]
 801f164:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f168:	f043 0204 	orr.w	r2, r3, #4
 801f16c:	687b      	ldr	r3, [r7, #4]
 801f16e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	681b      	ldr	r3, [r3, #0]
 801f176:	699a      	ldr	r2, [r3, #24]
 801f178:	687b      	ldr	r3, [r7, #4]
 801f17a:	681b      	ldr	r3, [r3, #0]
 801f17c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801f180:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801f182:	69bb      	ldr	r3, [r7, #24]
 801f184:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801f188:	2b00      	cmp	r3, #0
 801f18a:	d00f      	beq.n	801f1ac <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801f18c:	687b      	ldr	r3, [r7, #4]
 801f18e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f192:	f043 0201 	orr.w	r2, r3, #1
 801f196:	687b      	ldr	r3, [r7, #4]
 801f198:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801f19c:	687b      	ldr	r3, [r7, #4]
 801f19e:	681b      	ldr	r3, [r3, #0]
 801f1a0:	699a      	ldr	r2, [r3, #24]
 801f1a2:	687b      	ldr	r3, [r7, #4]
 801f1a4:	681b      	ldr	r3, [r3, #0]
 801f1a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801f1aa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801f1ac:	69bb      	ldr	r3, [r7, #24]
 801f1ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f1b2:	2b00      	cmp	r3, #0
 801f1b4:	d00f      	beq.n	801f1d6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801f1b6:	687b      	ldr	r3, [r7, #4]
 801f1b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f1bc:	f043 0208 	orr.w	r2, r3, #8
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801f1c6:	687b      	ldr	r3, [r7, #4]
 801f1c8:	681b      	ldr	r3, [r3, #0]
 801f1ca:	699a      	ldr	r2, [r3, #24]
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	681b      	ldr	r3, [r3, #0]
 801f1d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801f1d4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 801f1d6:	69bb      	ldr	r3, [r7, #24]
 801f1d8:	f003 0320 	and.w	r3, r3, #32
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	d00f      	beq.n	801f200 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f1e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801f1ea:	687b      	ldr	r3, [r7, #4]
 801f1ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801f1f0:	687b      	ldr	r3, [r7, #4]
 801f1f2:	681b      	ldr	r3, [r3, #0]
 801f1f4:	699a      	ldr	r2, [r3, #24]
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	f042 0220 	orr.w	r2, r2, #32
 801f1fe:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f206:	2b00      	cmp	r3, #0
 801f208:	d05a      	beq.n	801f2c0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801f20a:	687b      	ldr	r3, [r7, #4]
 801f20c:	681b      	ldr	r3, [r3, #0]
 801f20e:	681a      	ldr	r2, [r3, #0]
 801f210:	687b      	ldr	r3, [r7, #4]
 801f212:	681b      	ldr	r3, [r3, #0]
 801f214:	f022 0201 	bic.w	r2, r2, #1
 801f218:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801f21a:	687b      	ldr	r3, [r7, #4]
 801f21c:	681b      	ldr	r3, [r3, #0]
 801f21e:	6919      	ldr	r1, [r3, #16]
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	681a      	ldr	r2, [r3, #0]
 801f224:	4b28      	ldr	r3, [pc, #160]	@ (801f2c8 <HAL_SPI_IRQHandler+0x394>)
 801f226:	400b      	ands	r3, r1
 801f228:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801f22a:	697b      	ldr	r3, [r7, #20]
 801f22c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801f230:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801f234:	d138      	bne.n	801f2a8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801f236:	687b      	ldr	r3, [r7, #4]
 801f238:	681b      	ldr	r3, [r3, #0]
 801f23a:	689a      	ldr	r2, [r3, #8]
 801f23c:	687b      	ldr	r3, [r7, #4]
 801f23e:	681b      	ldr	r3, [r3, #0]
 801f240:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801f244:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801f246:	687b      	ldr	r3, [r7, #4]
 801f248:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f24a:	2b00      	cmp	r3, #0
 801f24c:	d013      	beq.n	801f276 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801f24e:	687b      	ldr	r3, [r7, #4]
 801f250:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f252:	4a1e      	ldr	r2, [pc, #120]	@ (801f2cc <HAL_SPI_IRQHandler+0x398>)
 801f254:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801f256:	687b      	ldr	r3, [r7, #4]
 801f258:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f25a:	4618      	mov	r0, r3
 801f25c:	f7fb f850 	bl	801a300 <HAL_DMA_Abort_IT>
 801f260:	4603      	mov	r3, r0
 801f262:	2b00      	cmp	r3, #0
 801f264:	d007      	beq.n	801f276 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801f266:	687b      	ldr	r3, [r7, #4]
 801f268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f26c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801f270:	687b      	ldr	r3, [r7, #4]
 801f272:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f27a:	2b00      	cmp	r3, #0
 801f27c:	d020      	beq.n	801f2c0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801f27e:	687b      	ldr	r3, [r7, #4]
 801f280:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f282:	4a12      	ldr	r2, [pc, #72]	@ (801f2cc <HAL_SPI_IRQHandler+0x398>)
 801f284:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801f286:	687b      	ldr	r3, [r7, #4]
 801f288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f28a:	4618      	mov	r0, r3
 801f28c:	f7fb f838 	bl	801a300 <HAL_DMA_Abort_IT>
 801f290:	4603      	mov	r3, r0
 801f292:	2b00      	cmp	r3, #0
 801f294:	d014      	beq.n	801f2c0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801f296:	687b      	ldr	r3, [r7, #4]
 801f298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f29c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801f2a0:	687b      	ldr	r3, [r7, #4]
 801f2a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801f2a6:	e00b      	b.n	801f2c0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 801f2a8:	687b      	ldr	r3, [r7, #4]
 801f2aa:	2201      	movs	r2, #1
 801f2ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 801f2b0:	6878      	ldr	r0, [r7, #4]
 801f2b2:	f000 f82b 	bl	801f30c <HAL_SPI_ErrorCallback>
    return;
 801f2b6:	e003      	b.n	801f2c0 <HAL_SPI_IRQHandler+0x38c>
    return;
 801f2b8:	bf00      	nop
 801f2ba:	e002      	b.n	801f2c2 <HAL_SPI_IRQHandler+0x38e>
    return;
 801f2bc:	bf00      	nop
 801f2be:	e000      	b.n	801f2c2 <HAL_SPI_IRQHandler+0x38e>
    return;
 801f2c0:	bf00      	nop
  }
}
 801f2c2:	3728      	adds	r7, #40	@ 0x28
 801f2c4:	46bd      	mov	sp, r7
 801f2c6:	bd80      	pop	{r7, pc}
 801f2c8:	fffffc94 	.word	0xfffffc94
 801f2cc:	0801f335 	.word	0x0801f335

0801f2d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f2d0:	b480      	push	{r7}
 801f2d2:	b083      	sub	sp, #12
 801f2d4:	af00      	add	r7, sp, #0
 801f2d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 801f2d8:	bf00      	nop
 801f2da:	370c      	adds	r7, #12
 801f2dc:	46bd      	mov	sp, r7
 801f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2e2:	4770      	bx	lr

0801f2e4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f2e4:	b480      	push	{r7}
 801f2e6:	b083      	sub	sp, #12
 801f2e8:	af00      	add	r7, sp, #0
 801f2ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801f2ec:	bf00      	nop
 801f2ee:	370c      	adds	r7, #12
 801f2f0:	46bd      	mov	sp, r7
 801f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2f6:	4770      	bx	lr

0801f2f8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f2f8:	b480      	push	{r7}
 801f2fa:	b083      	sub	sp, #12
 801f2fc:	af00      	add	r7, sp, #0
 801f2fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801f300:	bf00      	nop
 801f302:	370c      	adds	r7, #12
 801f304:	46bd      	mov	sp, r7
 801f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f30a:	4770      	bx	lr

0801f30c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f30c:	b480      	push	{r7}
 801f30e:	b083      	sub	sp, #12
 801f310:	af00      	add	r7, sp, #0
 801f312:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801f314:	bf00      	nop
 801f316:	370c      	adds	r7, #12
 801f318:	46bd      	mov	sp, r7
 801f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f31e:	4770      	bx	lr

0801f320 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f320:	b480      	push	{r7}
 801f322:	b083      	sub	sp, #12
 801f324:	af00      	add	r7, sp, #0
 801f326:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801f328:	bf00      	nop
 801f32a:	370c      	adds	r7, #12
 801f32c:	46bd      	mov	sp, r7
 801f32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f332:	4770      	bx	lr

0801f334 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801f334:	b580      	push	{r7, lr}
 801f336:	b084      	sub	sp, #16
 801f338:	af00      	add	r7, sp, #0
 801f33a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801f33c:	687b      	ldr	r3, [r7, #4]
 801f33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f340:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801f342:	68fb      	ldr	r3, [r7, #12]
 801f344:	2200      	movs	r2, #0
 801f346:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801f34a:	68fb      	ldr	r3, [r7, #12]
 801f34c:	2200      	movs	r2, #0
 801f34e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801f352:	68fb      	ldr	r3, [r7, #12]
 801f354:	2201      	movs	r2, #1
 801f356:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801f35a:	68f8      	ldr	r0, [r7, #12]
 801f35c:	f7ff ffd6 	bl	801f30c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801f360:	bf00      	nop
 801f362:	3710      	adds	r7, #16
 801f364:	46bd      	mov	sp, r7
 801f366:	bd80      	pop	{r7, pc}

0801f368 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801f368:	b480      	push	{r7}
 801f36a:	b085      	sub	sp, #20
 801f36c:	af00      	add	r7, sp, #0
 801f36e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801f370:	687b      	ldr	r3, [r7, #4]
 801f372:	681b      	ldr	r3, [r3, #0]
 801f374:	695b      	ldr	r3, [r3, #20]
 801f376:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801f378:	687b      	ldr	r3, [r7, #4]
 801f37a:	681b      	ldr	r3, [r3, #0]
 801f37c:	699a      	ldr	r2, [r3, #24]
 801f37e:	687b      	ldr	r3, [r7, #4]
 801f380:	681b      	ldr	r3, [r3, #0]
 801f382:	f042 0208 	orr.w	r2, r2, #8
 801f386:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801f388:	687b      	ldr	r3, [r7, #4]
 801f38a:	681b      	ldr	r3, [r3, #0]
 801f38c:	699a      	ldr	r2, [r3, #24]
 801f38e:	687b      	ldr	r3, [r7, #4]
 801f390:	681b      	ldr	r3, [r3, #0]
 801f392:	f042 0210 	orr.w	r2, r2, #16
 801f396:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801f398:	687b      	ldr	r3, [r7, #4]
 801f39a:	681b      	ldr	r3, [r3, #0]
 801f39c:	681a      	ldr	r2, [r3, #0]
 801f39e:	687b      	ldr	r3, [r7, #4]
 801f3a0:	681b      	ldr	r3, [r3, #0]
 801f3a2:	f022 0201 	bic.w	r2, r2, #1
 801f3a6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801f3a8:	687b      	ldr	r3, [r7, #4]
 801f3aa:	681b      	ldr	r3, [r3, #0]
 801f3ac:	6919      	ldr	r1, [r3, #16]
 801f3ae:	687b      	ldr	r3, [r7, #4]
 801f3b0:	681a      	ldr	r2, [r3, #0]
 801f3b2:	4b3c      	ldr	r3, [pc, #240]	@ (801f4a4 <SPI_CloseTransfer+0x13c>)
 801f3b4:	400b      	ands	r3, r1
 801f3b6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801f3b8:	687b      	ldr	r3, [r7, #4]
 801f3ba:	681b      	ldr	r3, [r3, #0]
 801f3bc:	689a      	ldr	r2, [r3, #8]
 801f3be:	687b      	ldr	r3, [r7, #4]
 801f3c0:	681b      	ldr	r3, [r3, #0]
 801f3c2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801f3c6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801f3c8:	687b      	ldr	r3, [r7, #4]
 801f3ca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f3ce:	b2db      	uxtb	r3, r3
 801f3d0:	2b04      	cmp	r3, #4
 801f3d2:	d014      	beq.n	801f3fe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801f3d4:	68fb      	ldr	r3, [r7, #12]
 801f3d6:	f003 0320 	and.w	r3, r3, #32
 801f3da:	2b00      	cmp	r3, #0
 801f3dc:	d00f      	beq.n	801f3fe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801f3de:	687b      	ldr	r3, [r7, #4]
 801f3e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f3e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801f3e8:	687b      	ldr	r3, [r7, #4]
 801f3ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801f3ee:	687b      	ldr	r3, [r7, #4]
 801f3f0:	681b      	ldr	r3, [r3, #0]
 801f3f2:	699a      	ldr	r2, [r3, #24]
 801f3f4:	687b      	ldr	r3, [r7, #4]
 801f3f6:	681b      	ldr	r3, [r3, #0]
 801f3f8:	f042 0220 	orr.w	r2, r2, #32
 801f3fc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801f3fe:	687b      	ldr	r3, [r7, #4]
 801f400:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f404:	b2db      	uxtb	r3, r3
 801f406:	2b03      	cmp	r3, #3
 801f408:	d014      	beq.n	801f434 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801f40a:	68fb      	ldr	r3, [r7, #12]
 801f40c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f410:	2b00      	cmp	r3, #0
 801f412:	d00f      	beq.n	801f434 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801f414:	687b      	ldr	r3, [r7, #4]
 801f416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f41a:	f043 0204 	orr.w	r2, r3, #4
 801f41e:	687b      	ldr	r3, [r7, #4]
 801f420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801f424:	687b      	ldr	r3, [r7, #4]
 801f426:	681b      	ldr	r3, [r3, #0]
 801f428:	699a      	ldr	r2, [r3, #24]
 801f42a:	687b      	ldr	r3, [r7, #4]
 801f42c:	681b      	ldr	r3, [r3, #0]
 801f42e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801f432:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801f434:	68fb      	ldr	r3, [r7, #12]
 801f436:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801f43a:	2b00      	cmp	r3, #0
 801f43c:	d00f      	beq.n	801f45e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801f43e:	687b      	ldr	r3, [r7, #4]
 801f440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f444:	f043 0201 	orr.w	r2, r3, #1
 801f448:	687b      	ldr	r3, [r7, #4]
 801f44a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801f44e:	687b      	ldr	r3, [r7, #4]
 801f450:	681b      	ldr	r3, [r3, #0]
 801f452:	699a      	ldr	r2, [r3, #24]
 801f454:	687b      	ldr	r3, [r7, #4]
 801f456:	681b      	ldr	r3, [r3, #0]
 801f458:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801f45c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801f45e:	68fb      	ldr	r3, [r7, #12]
 801f460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f464:	2b00      	cmp	r3, #0
 801f466:	d00f      	beq.n	801f488 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801f468:	687b      	ldr	r3, [r7, #4]
 801f46a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f46e:	f043 0208 	orr.w	r2, r3, #8
 801f472:	687b      	ldr	r3, [r7, #4]
 801f474:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801f478:	687b      	ldr	r3, [r7, #4]
 801f47a:	681b      	ldr	r3, [r3, #0]
 801f47c:	699a      	ldr	r2, [r3, #24]
 801f47e:	687b      	ldr	r3, [r7, #4]
 801f480:	681b      	ldr	r3, [r3, #0]
 801f482:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801f486:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801f488:	687b      	ldr	r3, [r7, #4]
 801f48a:	2200      	movs	r2, #0
 801f48c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801f490:	687b      	ldr	r3, [r7, #4]
 801f492:	2200      	movs	r2, #0
 801f494:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 801f498:	bf00      	nop
 801f49a:	3714      	adds	r7, #20
 801f49c:	46bd      	mov	sp, r7
 801f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4a2:	4770      	bx	lr
 801f4a4:	fffffc90 	.word	0xfffffc90

0801f4a8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801f4a8:	b480      	push	{r7}
 801f4aa:	b085      	sub	sp, #20
 801f4ac:	af00      	add	r7, sp, #0
 801f4ae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801f4b0:	687b      	ldr	r3, [r7, #4]
 801f4b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f4b4:	095b      	lsrs	r3, r3, #5
 801f4b6:	3301      	adds	r3, #1
 801f4b8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801f4ba:	687b      	ldr	r3, [r7, #4]
 801f4bc:	68db      	ldr	r3, [r3, #12]
 801f4be:	3301      	adds	r3, #1
 801f4c0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801f4c2:	68bb      	ldr	r3, [r7, #8]
 801f4c4:	3307      	adds	r3, #7
 801f4c6:	08db      	lsrs	r3, r3, #3
 801f4c8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801f4ca:	68bb      	ldr	r3, [r7, #8]
 801f4cc:	68fa      	ldr	r2, [r7, #12]
 801f4ce:	fb02 f303 	mul.w	r3, r2, r3
}
 801f4d2:	4618      	mov	r0, r3
 801f4d4:	3714      	adds	r7, #20
 801f4d6:	46bd      	mov	sp, r7
 801f4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4dc:	4770      	bx	lr

0801f4de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801f4de:	b580      	push	{r7, lr}
 801f4e0:	b082      	sub	sp, #8
 801f4e2:	af00      	add	r7, sp, #0
 801f4e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f4e6:	687b      	ldr	r3, [r7, #4]
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	d101      	bne.n	801f4f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801f4ec:	2301      	movs	r3, #1
 801f4ee:	e049      	b.n	801f584 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f4f0:	687b      	ldr	r3, [r7, #4]
 801f4f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f4f6:	b2db      	uxtb	r3, r3
 801f4f8:	2b00      	cmp	r3, #0
 801f4fa:	d106      	bne.n	801f50a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f4fc:	687b      	ldr	r3, [r7, #4]
 801f4fe:	2200      	movs	r2, #0
 801f500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801f504:	6878      	ldr	r0, [r7, #4]
 801f506:	f7e2 fdc7 	bl	8002098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f50a:	687b      	ldr	r3, [r7, #4]
 801f50c:	2202      	movs	r2, #2
 801f50e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f512:	687b      	ldr	r3, [r7, #4]
 801f514:	681a      	ldr	r2, [r3, #0]
 801f516:	687b      	ldr	r3, [r7, #4]
 801f518:	3304      	adds	r3, #4
 801f51a:	4619      	mov	r1, r3
 801f51c:	4610      	mov	r0, r2
 801f51e:	f000 fb1b 	bl	801fb58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f522:	687b      	ldr	r3, [r7, #4]
 801f524:	2201      	movs	r2, #1
 801f526:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	2201      	movs	r2, #1
 801f52e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801f532:	687b      	ldr	r3, [r7, #4]
 801f534:	2201      	movs	r2, #1
 801f536:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801f53a:	687b      	ldr	r3, [r7, #4]
 801f53c:	2201      	movs	r2, #1
 801f53e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801f542:	687b      	ldr	r3, [r7, #4]
 801f544:	2201      	movs	r2, #1
 801f546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801f54a:	687b      	ldr	r3, [r7, #4]
 801f54c:	2201      	movs	r2, #1
 801f54e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801f552:	687b      	ldr	r3, [r7, #4]
 801f554:	2201      	movs	r2, #1
 801f556:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f55a:	687b      	ldr	r3, [r7, #4]
 801f55c:	2201      	movs	r2, #1
 801f55e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801f562:	687b      	ldr	r3, [r7, #4]
 801f564:	2201      	movs	r2, #1
 801f566:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801f56a:	687b      	ldr	r3, [r7, #4]
 801f56c:	2201      	movs	r2, #1
 801f56e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801f572:	687b      	ldr	r3, [r7, #4]
 801f574:	2201      	movs	r2, #1
 801f576:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f57a:	687b      	ldr	r3, [r7, #4]
 801f57c:	2201      	movs	r2, #1
 801f57e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801f582:	2300      	movs	r3, #0
}
 801f584:	4618      	mov	r0, r3
 801f586:	3708      	adds	r7, #8
 801f588:	46bd      	mov	sp, r7
 801f58a:	bd80      	pop	{r7, pc}

0801f58c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801f58c:	b480      	push	{r7}
 801f58e:	b085      	sub	sp, #20
 801f590:	af00      	add	r7, sp, #0
 801f592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801f594:	687b      	ldr	r3, [r7, #4]
 801f596:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f59a:	b2db      	uxtb	r3, r3
 801f59c:	2b01      	cmp	r3, #1
 801f59e:	d001      	beq.n	801f5a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801f5a0:	2301      	movs	r3, #1
 801f5a2:	e054      	b.n	801f64e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f5a4:	687b      	ldr	r3, [r7, #4]
 801f5a6:	2202      	movs	r2, #2
 801f5a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801f5ac:	687b      	ldr	r3, [r7, #4]
 801f5ae:	681b      	ldr	r3, [r3, #0]
 801f5b0:	68da      	ldr	r2, [r3, #12]
 801f5b2:	687b      	ldr	r3, [r7, #4]
 801f5b4:	681b      	ldr	r3, [r3, #0]
 801f5b6:	f042 0201 	orr.w	r2, r2, #1
 801f5ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f5bc:	687b      	ldr	r3, [r7, #4]
 801f5be:	681b      	ldr	r3, [r3, #0]
 801f5c0:	4a26      	ldr	r2, [pc, #152]	@ (801f65c <HAL_TIM_Base_Start_IT+0xd0>)
 801f5c2:	4293      	cmp	r3, r2
 801f5c4:	d022      	beq.n	801f60c <HAL_TIM_Base_Start_IT+0x80>
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	681b      	ldr	r3, [r3, #0]
 801f5ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f5ce:	d01d      	beq.n	801f60c <HAL_TIM_Base_Start_IT+0x80>
 801f5d0:	687b      	ldr	r3, [r7, #4]
 801f5d2:	681b      	ldr	r3, [r3, #0]
 801f5d4:	4a22      	ldr	r2, [pc, #136]	@ (801f660 <HAL_TIM_Base_Start_IT+0xd4>)
 801f5d6:	4293      	cmp	r3, r2
 801f5d8:	d018      	beq.n	801f60c <HAL_TIM_Base_Start_IT+0x80>
 801f5da:	687b      	ldr	r3, [r7, #4]
 801f5dc:	681b      	ldr	r3, [r3, #0]
 801f5de:	4a21      	ldr	r2, [pc, #132]	@ (801f664 <HAL_TIM_Base_Start_IT+0xd8>)
 801f5e0:	4293      	cmp	r3, r2
 801f5e2:	d013      	beq.n	801f60c <HAL_TIM_Base_Start_IT+0x80>
 801f5e4:	687b      	ldr	r3, [r7, #4]
 801f5e6:	681b      	ldr	r3, [r3, #0]
 801f5e8:	4a1f      	ldr	r2, [pc, #124]	@ (801f668 <HAL_TIM_Base_Start_IT+0xdc>)
 801f5ea:	4293      	cmp	r3, r2
 801f5ec:	d00e      	beq.n	801f60c <HAL_TIM_Base_Start_IT+0x80>
 801f5ee:	687b      	ldr	r3, [r7, #4]
 801f5f0:	681b      	ldr	r3, [r3, #0]
 801f5f2:	4a1e      	ldr	r2, [pc, #120]	@ (801f66c <HAL_TIM_Base_Start_IT+0xe0>)
 801f5f4:	4293      	cmp	r3, r2
 801f5f6:	d009      	beq.n	801f60c <HAL_TIM_Base_Start_IT+0x80>
 801f5f8:	687b      	ldr	r3, [r7, #4]
 801f5fa:	681b      	ldr	r3, [r3, #0]
 801f5fc:	4a1c      	ldr	r2, [pc, #112]	@ (801f670 <HAL_TIM_Base_Start_IT+0xe4>)
 801f5fe:	4293      	cmp	r3, r2
 801f600:	d004      	beq.n	801f60c <HAL_TIM_Base_Start_IT+0x80>
 801f602:	687b      	ldr	r3, [r7, #4]
 801f604:	681b      	ldr	r3, [r3, #0]
 801f606:	4a1b      	ldr	r2, [pc, #108]	@ (801f674 <HAL_TIM_Base_Start_IT+0xe8>)
 801f608:	4293      	cmp	r3, r2
 801f60a:	d115      	bne.n	801f638 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801f60c:	687b      	ldr	r3, [r7, #4]
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	689a      	ldr	r2, [r3, #8]
 801f612:	4b19      	ldr	r3, [pc, #100]	@ (801f678 <HAL_TIM_Base_Start_IT+0xec>)
 801f614:	4013      	ands	r3, r2
 801f616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f618:	68fb      	ldr	r3, [r7, #12]
 801f61a:	2b06      	cmp	r3, #6
 801f61c:	d015      	beq.n	801f64a <HAL_TIM_Base_Start_IT+0xbe>
 801f61e:	68fb      	ldr	r3, [r7, #12]
 801f620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f624:	d011      	beq.n	801f64a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	681b      	ldr	r3, [r3, #0]
 801f62a:	681a      	ldr	r2, [r3, #0]
 801f62c:	687b      	ldr	r3, [r7, #4]
 801f62e:	681b      	ldr	r3, [r3, #0]
 801f630:	f042 0201 	orr.w	r2, r2, #1
 801f634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f636:	e008      	b.n	801f64a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801f638:	687b      	ldr	r3, [r7, #4]
 801f63a:	681b      	ldr	r3, [r3, #0]
 801f63c:	681a      	ldr	r2, [r3, #0]
 801f63e:	687b      	ldr	r3, [r7, #4]
 801f640:	681b      	ldr	r3, [r3, #0]
 801f642:	f042 0201 	orr.w	r2, r2, #1
 801f646:	601a      	str	r2, [r3, #0]
 801f648:	e000      	b.n	801f64c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f64a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801f64c:	2300      	movs	r3, #0
}
 801f64e:	4618      	mov	r0, r3
 801f650:	3714      	adds	r7, #20
 801f652:	46bd      	mov	sp, r7
 801f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f658:	4770      	bx	lr
 801f65a:	bf00      	nop
 801f65c:	40010000 	.word	0x40010000
 801f660:	40000400 	.word	0x40000400
 801f664:	40000800 	.word	0x40000800
 801f668:	40000c00 	.word	0x40000c00
 801f66c:	40010400 	.word	0x40010400
 801f670:	40001800 	.word	0x40001800
 801f674:	40014000 	.word	0x40014000
 801f678:	00010007 	.word	0x00010007

0801f67c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801f67c:	b580      	push	{r7, lr}
 801f67e:	b082      	sub	sp, #8
 801f680:	af00      	add	r7, sp, #0
 801f682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f684:	687b      	ldr	r3, [r7, #4]
 801f686:	2b00      	cmp	r3, #0
 801f688:	d101      	bne.n	801f68e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801f68a:	2301      	movs	r3, #1
 801f68c:	e049      	b.n	801f722 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f68e:	687b      	ldr	r3, [r7, #4]
 801f690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f694:	b2db      	uxtb	r3, r3
 801f696:	2b00      	cmp	r3, #0
 801f698:	d106      	bne.n	801f6a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f69a:	687b      	ldr	r3, [r7, #4]
 801f69c:	2200      	movs	r2, #0
 801f69e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801f6a2:	6878      	ldr	r0, [r7, #4]
 801f6a4:	f000 f841 	bl	801f72a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f6a8:	687b      	ldr	r3, [r7, #4]
 801f6aa:	2202      	movs	r2, #2
 801f6ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f6b0:	687b      	ldr	r3, [r7, #4]
 801f6b2:	681a      	ldr	r2, [r3, #0]
 801f6b4:	687b      	ldr	r3, [r7, #4]
 801f6b6:	3304      	adds	r3, #4
 801f6b8:	4619      	mov	r1, r3
 801f6ba:	4610      	mov	r0, r2
 801f6bc:	f000 fa4c 	bl	801fb58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f6c0:	687b      	ldr	r3, [r7, #4]
 801f6c2:	2201      	movs	r2, #1
 801f6c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f6c8:	687b      	ldr	r3, [r7, #4]
 801f6ca:	2201      	movs	r2, #1
 801f6cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801f6d0:	687b      	ldr	r3, [r7, #4]
 801f6d2:	2201      	movs	r2, #1
 801f6d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801f6d8:	687b      	ldr	r3, [r7, #4]
 801f6da:	2201      	movs	r2, #1
 801f6dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801f6e0:	687b      	ldr	r3, [r7, #4]
 801f6e2:	2201      	movs	r2, #1
 801f6e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801f6e8:	687b      	ldr	r3, [r7, #4]
 801f6ea:	2201      	movs	r2, #1
 801f6ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801f6f0:	687b      	ldr	r3, [r7, #4]
 801f6f2:	2201      	movs	r2, #1
 801f6f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f6f8:	687b      	ldr	r3, [r7, #4]
 801f6fa:	2201      	movs	r2, #1
 801f6fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801f700:	687b      	ldr	r3, [r7, #4]
 801f702:	2201      	movs	r2, #1
 801f704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801f708:	687b      	ldr	r3, [r7, #4]
 801f70a:	2201      	movs	r2, #1
 801f70c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801f710:	687b      	ldr	r3, [r7, #4]
 801f712:	2201      	movs	r2, #1
 801f714:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f718:	687b      	ldr	r3, [r7, #4]
 801f71a:	2201      	movs	r2, #1
 801f71c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801f720:	2300      	movs	r3, #0
}
 801f722:	4618      	mov	r0, r3
 801f724:	3708      	adds	r7, #8
 801f726:	46bd      	mov	sp, r7
 801f728:	bd80      	pop	{r7, pc}

0801f72a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801f72a:	b480      	push	{r7}
 801f72c:	b083      	sub	sp, #12
 801f72e:	af00      	add	r7, sp, #0
 801f730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801f732:	bf00      	nop
 801f734:	370c      	adds	r7, #12
 801f736:	46bd      	mov	sp, r7
 801f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f73c:	4770      	bx	lr
	...

0801f740 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801f740:	b580      	push	{r7, lr}
 801f742:	b086      	sub	sp, #24
 801f744:	af00      	add	r7, sp, #0
 801f746:	60f8      	str	r0, [r7, #12]
 801f748:	60b9      	str	r1, [r7, #8]
 801f74a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f74c:	2300      	movs	r3, #0
 801f74e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f750:	68fb      	ldr	r3, [r7, #12]
 801f752:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801f756:	2b01      	cmp	r3, #1
 801f758:	d101      	bne.n	801f75e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801f75a:	2302      	movs	r3, #2
 801f75c:	e0ff      	b.n	801f95e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801f75e:	68fb      	ldr	r3, [r7, #12]
 801f760:	2201      	movs	r2, #1
 801f762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801f766:	687b      	ldr	r3, [r7, #4]
 801f768:	2b14      	cmp	r3, #20
 801f76a:	f200 80f0 	bhi.w	801f94e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801f76e:	a201      	add	r2, pc, #4	@ (adr r2, 801f774 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801f770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f774:	0801f7c9 	.word	0x0801f7c9
 801f778:	0801f94f 	.word	0x0801f94f
 801f77c:	0801f94f 	.word	0x0801f94f
 801f780:	0801f94f 	.word	0x0801f94f
 801f784:	0801f809 	.word	0x0801f809
 801f788:	0801f94f 	.word	0x0801f94f
 801f78c:	0801f94f 	.word	0x0801f94f
 801f790:	0801f94f 	.word	0x0801f94f
 801f794:	0801f84b 	.word	0x0801f84b
 801f798:	0801f94f 	.word	0x0801f94f
 801f79c:	0801f94f 	.word	0x0801f94f
 801f7a0:	0801f94f 	.word	0x0801f94f
 801f7a4:	0801f88b 	.word	0x0801f88b
 801f7a8:	0801f94f 	.word	0x0801f94f
 801f7ac:	0801f94f 	.word	0x0801f94f
 801f7b0:	0801f94f 	.word	0x0801f94f
 801f7b4:	0801f8cd 	.word	0x0801f8cd
 801f7b8:	0801f94f 	.word	0x0801f94f
 801f7bc:	0801f94f 	.word	0x0801f94f
 801f7c0:	0801f94f 	.word	0x0801f94f
 801f7c4:	0801f90d 	.word	0x0801f90d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801f7c8:	68fb      	ldr	r3, [r7, #12]
 801f7ca:	681b      	ldr	r3, [r3, #0]
 801f7cc:	68b9      	ldr	r1, [r7, #8]
 801f7ce:	4618      	mov	r0, r3
 801f7d0:	f000 fa68 	bl	801fca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801f7d4:	68fb      	ldr	r3, [r7, #12]
 801f7d6:	681b      	ldr	r3, [r3, #0]
 801f7d8:	699a      	ldr	r2, [r3, #24]
 801f7da:	68fb      	ldr	r3, [r7, #12]
 801f7dc:	681b      	ldr	r3, [r3, #0]
 801f7de:	f042 0208 	orr.w	r2, r2, #8
 801f7e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801f7e4:	68fb      	ldr	r3, [r7, #12]
 801f7e6:	681b      	ldr	r3, [r3, #0]
 801f7e8:	699a      	ldr	r2, [r3, #24]
 801f7ea:	68fb      	ldr	r3, [r7, #12]
 801f7ec:	681b      	ldr	r3, [r3, #0]
 801f7ee:	f022 0204 	bic.w	r2, r2, #4
 801f7f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801f7f4:	68fb      	ldr	r3, [r7, #12]
 801f7f6:	681b      	ldr	r3, [r3, #0]
 801f7f8:	6999      	ldr	r1, [r3, #24]
 801f7fa:	68bb      	ldr	r3, [r7, #8]
 801f7fc:	691a      	ldr	r2, [r3, #16]
 801f7fe:	68fb      	ldr	r3, [r7, #12]
 801f800:	681b      	ldr	r3, [r3, #0]
 801f802:	430a      	orrs	r2, r1
 801f804:	619a      	str	r2, [r3, #24]
      break;
 801f806:	e0a5      	b.n	801f954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801f808:	68fb      	ldr	r3, [r7, #12]
 801f80a:	681b      	ldr	r3, [r3, #0]
 801f80c:	68b9      	ldr	r1, [r7, #8]
 801f80e:	4618      	mov	r0, r3
 801f810:	f000 fad8 	bl	801fdc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801f814:	68fb      	ldr	r3, [r7, #12]
 801f816:	681b      	ldr	r3, [r3, #0]
 801f818:	699a      	ldr	r2, [r3, #24]
 801f81a:	68fb      	ldr	r3, [r7, #12]
 801f81c:	681b      	ldr	r3, [r3, #0]
 801f81e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801f824:	68fb      	ldr	r3, [r7, #12]
 801f826:	681b      	ldr	r3, [r3, #0]
 801f828:	699a      	ldr	r2, [r3, #24]
 801f82a:	68fb      	ldr	r3, [r7, #12]
 801f82c:	681b      	ldr	r3, [r3, #0]
 801f82e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801f832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801f834:	68fb      	ldr	r3, [r7, #12]
 801f836:	681b      	ldr	r3, [r3, #0]
 801f838:	6999      	ldr	r1, [r3, #24]
 801f83a:	68bb      	ldr	r3, [r7, #8]
 801f83c:	691b      	ldr	r3, [r3, #16]
 801f83e:	021a      	lsls	r2, r3, #8
 801f840:	68fb      	ldr	r3, [r7, #12]
 801f842:	681b      	ldr	r3, [r3, #0]
 801f844:	430a      	orrs	r2, r1
 801f846:	619a      	str	r2, [r3, #24]
      break;
 801f848:	e084      	b.n	801f954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801f84a:	68fb      	ldr	r3, [r7, #12]
 801f84c:	681b      	ldr	r3, [r3, #0]
 801f84e:	68b9      	ldr	r1, [r7, #8]
 801f850:	4618      	mov	r0, r3
 801f852:	f000 fb41 	bl	801fed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801f856:	68fb      	ldr	r3, [r7, #12]
 801f858:	681b      	ldr	r3, [r3, #0]
 801f85a:	69da      	ldr	r2, [r3, #28]
 801f85c:	68fb      	ldr	r3, [r7, #12]
 801f85e:	681b      	ldr	r3, [r3, #0]
 801f860:	f042 0208 	orr.w	r2, r2, #8
 801f864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801f866:	68fb      	ldr	r3, [r7, #12]
 801f868:	681b      	ldr	r3, [r3, #0]
 801f86a:	69da      	ldr	r2, [r3, #28]
 801f86c:	68fb      	ldr	r3, [r7, #12]
 801f86e:	681b      	ldr	r3, [r3, #0]
 801f870:	f022 0204 	bic.w	r2, r2, #4
 801f874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801f876:	68fb      	ldr	r3, [r7, #12]
 801f878:	681b      	ldr	r3, [r3, #0]
 801f87a:	69d9      	ldr	r1, [r3, #28]
 801f87c:	68bb      	ldr	r3, [r7, #8]
 801f87e:	691a      	ldr	r2, [r3, #16]
 801f880:	68fb      	ldr	r3, [r7, #12]
 801f882:	681b      	ldr	r3, [r3, #0]
 801f884:	430a      	orrs	r2, r1
 801f886:	61da      	str	r2, [r3, #28]
      break;
 801f888:	e064      	b.n	801f954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801f88a:	68fb      	ldr	r3, [r7, #12]
 801f88c:	681b      	ldr	r3, [r3, #0]
 801f88e:	68b9      	ldr	r1, [r7, #8]
 801f890:	4618      	mov	r0, r3
 801f892:	f000 fba9 	bl	801ffe8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801f896:	68fb      	ldr	r3, [r7, #12]
 801f898:	681b      	ldr	r3, [r3, #0]
 801f89a:	69da      	ldr	r2, [r3, #28]
 801f89c:	68fb      	ldr	r3, [r7, #12]
 801f89e:	681b      	ldr	r3, [r3, #0]
 801f8a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f8a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801f8a6:	68fb      	ldr	r3, [r7, #12]
 801f8a8:	681b      	ldr	r3, [r3, #0]
 801f8aa:	69da      	ldr	r2, [r3, #28]
 801f8ac:	68fb      	ldr	r3, [r7, #12]
 801f8ae:	681b      	ldr	r3, [r3, #0]
 801f8b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801f8b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801f8b6:	68fb      	ldr	r3, [r7, #12]
 801f8b8:	681b      	ldr	r3, [r3, #0]
 801f8ba:	69d9      	ldr	r1, [r3, #28]
 801f8bc:	68bb      	ldr	r3, [r7, #8]
 801f8be:	691b      	ldr	r3, [r3, #16]
 801f8c0:	021a      	lsls	r2, r3, #8
 801f8c2:	68fb      	ldr	r3, [r7, #12]
 801f8c4:	681b      	ldr	r3, [r3, #0]
 801f8c6:	430a      	orrs	r2, r1
 801f8c8:	61da      	str	r2, [r3, #28]
      break;
 801f8ca:	e043      	b.n	801f954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801f8cc:	68fb      	ldr	r3, [r7, #12]
 801f8ce:	681b      	ldr	r3, [r3, #0]
 801f8d0:	68b9      	ldr	r1, [r7, #8]
 801f8d2:	4618      	mov	r0, r3
 801f8d4:	f000 fbf2 	bl	80200bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801f8d8:	68fb      	ldr	r3, [r7, #12]
 801f8da:	681b      	ldr	r3, [r3, #0]
 801f8dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f8de:	68fb      	ldr	r3, [r7, #12]
 801f8e0:	681b      	ldr	r3, [r3, #0]
 801f8e2:	f042 0208 	orr.w	r2, r2, #8
 801f8e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801f8e8:	68fb      	ldr	r3, [r7, #12]
 801f8ea:	681b      	ldr	r3, [r3, #0]
 801f8ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f8ee:	68fb      	ldr	r3, [r7, #12]
 801f8f0:	681b      	ldr	r3, [r3, #0]
 801f8f2:	f022 0204 	bic.w	r2, r2, #4
 801f8f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801f8f8:	68fb      	ldr	r3, [r7, #12]
 801f8fa:	681b      	ldr	r3, [r3, #0]
 801f8fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801f8fe:	68bb      	ldr	r3, [r7, #8]
 801f900:	691a      	ldr	r2, [r3, #16]
 801f902:	68fb      	ldr	r3, [r7, #12]
 801f904:	681b      	ldr	r3, [r3, #0]
 801f906:	430a      	orrs	r2, r1
 801f908:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801f90a:	e023      	b.n	801f954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801f90c:	68fb      	ldr	r3, [r7, #12]
 801f90e:	681b      	ldr	r3, [r3, #0]
 801f910:	68b9      	ldr	r1, [r7, #8]
 801f912:	4618      	mov	r0, r3
 801f914:	f000 fc36 	bl	8020184 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801f918:	68fb      	ldr	r3, [r7, #12]
 801f91a:	681b      	ldr	r3, [r3, #0]
 801f91c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f91e:	68fb      	ldr	r3, [r7, #12]
 801f920:	681b      	ldr	r3, [r3, #0]
 801f922:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f926:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801f928:	68fb      	ldr	r3, [r7, #12]
 801f92a:	681b      	ldr	r3, [r3, #0]
 801f92c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f92e:	68fb      	ldr	r3, [r7, #12]
 801f930:	681b      	ldr	r3, [r3, #0]
 801f932:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801f936:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801f938:	68fb      	ldr	r3, [r7, #12]
 801f93a:	681b      	ldr	r3, [r3, #0]
 801f93c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801f93e:	68bb      	ldr	r3, [r7, #8]
 801f940:	691b      	ldr	r3, [r3, #16]
 801f942:	021a      	lsls	r2, r3, #8
 801f944:	68fb      	ldr	r3, [r7, #12]
 801f946:	681b      	ldr	r3, [r3, #0]
 801f948:	430a      	orrs	r2, r1
 801f94a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801f94c:	e002      	b.n	801f954 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801f94e:	2301      	movs	r3, #1
 801f950:	75fb      	strb	r3, [r7, #23]
      break;
 801f952:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801f954:	68fb      	ldr	r3, [r7, #12]
 801f956:	2200      	movs	r2, #0
 801f958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801f95c:	7dfb      	ldrb	r3, [r7, #23]
}
 801f95e:	4618      	mov	r0, r3
 801f960:	3718      	adds	r7, #24
 801f962:	46bd      	mov	sp, r7
 801f964:	bd80      	pop	{r7, pc}
 801f966:	bf00      	nop

0801f968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801f968:	b580      	push	{r7, lr}
 801f96a:	b084      	sub	sp, #16
 801f96c:	af00      	add	r7, sp, #0
 801f96e:	6078      	str	r0, [r7, #4]
 801f970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801f972:	2300      	movs	r3, #0
 801f974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801f976:	687b      	ldr	r3, [r7, #4]
 801f978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801f97c:	2b01      	cmp	r3, #1
 801f97e:	d101      	bne.n	801f984 <HAL_TIM_ConfigClockSource+0x1c>
 801f980:	2302      	movs	r3, #2
 801f982:	e0dc      	b.n	801fb3e <HAL_TIM_ConfigClockSource+0x1d6>
 801f984:	687b      	ldr	r3, [r7, #4]
 801f986:	2201      	movs	r2, #1
 801f988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801f98c:	687b      	ldr	r3, [r7, #4]
 801f98e:	2202      	movs	r2, #2
 801f990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801f994:	687b      	ldr	r3, [r7, #4]
 801f996:	681b      	ldr	r3, [r3, #0]
 801f998:	689b      	ldr	r3, [r3, #8]
 801f99a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801f99c:	68ba      	ldr	r2, [r7, #8]
 801f99e:	4b6a      	ldr	r3, [pc, #424]	@ (801fb48 <HAL_TIM_ConfigClockSource+0x1e0>)
 801f9a0:	4013      	ands	r3, r2
 801f9a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801f9a4:	68bb      	ldr	r3, [r7, #8]
 801f9a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801f9aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801f9ac:	687b      	ldr	r3, [r7, #4]
 801f9ae:	681b      	ldr	r3, [r3, #0]
 801f9b0:	68ba      	ldr	r2, [r7, #8]
 801f9b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801f9b4:	683b      	ldr	r3, [r7, #0]
 801f9b6:	681b      	ldr	r3, [r3, #0]
 801f9b8:	4a64      	ldr	r2, [pc, #400]	@ (801fb4c <HAL_TIM_ConfigClockSource+0x1e4>)
 801f9ba:	4293      	cmp	r3, r2
 801f9bc:	f000 80a9 	beq.w	801fb12 <HAL_TIM_ConfigClockSource+0x1aa>
 801f9c0:	4a62      	ldr	r2, [pc, #392]	@ (801fb4c <HAL_TIM_ConfigClockSource+0x1e4>)
 801f9c2:	4293      	cmp	r3, r2
 801f9c4:	f200 80ae 	bhi.w	801fb24 <HAL_TIM_ConfigClockSource+0x1bc>
 801f9c8:	4a61      	ldr	r2, [pc, #388]	@ (801fb50 <HAL_TIM_ConfigClockSource+0x1e8>)
 801f9ca:	4293      	cmp	r3, r2
 801f9cc:	f000 80a1 	beq.w	801fb12 <HAL_TIM_ConfigClockSource+0x1aa>
 801f9d0:	4a5f      	ldr	r2, [pc, #380]	@ (801fb50 <HAL_TIM_ConfigClockSource+0x1e8>)
 801f9d2:	4293      	cmp	r3, r2
 801f9d4:	f200 80a6 	bhi.w	801fb24 <HAL_TIM_ConfigClockSource+0x1bc>
 801f9d8:	4a5e      	ldr	r2, [pc, #376]	@ (801fb54 <HAL_TIM_ConfigClockSource+0x1ec>)
 801f9da:	4293      	cmp	r3, r2
 801f9dc:	f000 8099 	beq.w	801fb12 <HAL_TIM_ConfigClockSource+0x1aa>
 801f9e0:	4a5c      	ldr	r2, [pc, #368]	@ (801fb54 <HAL_TIM_ConfigClockSource+0x1ec>)
 801f9e2:	4293      	cmp	r3, r2
 801f9e4:	f200 809e 	bhi.w	801fb24 <HAL_TIM_ConfigClockSource+0x1bc>
 801f9e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801f9ec:	f000 8091 	beq.w	801fb12 <HAL_TIM_ConfigClockSource+0x1aa>
 801f9f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801f9f4:	f200 8096 	bhi.w	801fb24 <HAL_TIM_ConfigClockSource+0x1bc>
 801f9f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801f9fc:	f000 8089 	beq.w	801fb12 <HAL_TIM_ConfigClockSource+0x1aa>
 801fa00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801fa04:	f200 808e 	bhi.w	801fb24 <HAL_TIM_ConfigClockSource+0x1bc>
 801fa08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801fa0c:	d03e      	beq.n	801fa8c <HAL_TIM_ConfigClockSource+0x124>
 801fa0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801fa12:	f200 8087 	bhi.w	801fb24 <HAL_TIM_ConfigClockSource+0x1bc>
 801fa16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801fa1a:	f000 8086 	beq.w	801fb2a <HAL_TIM_ConfigClockSource+0x1c2>
 801fa1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801fa22:	d87f      	bhi.n	801fb24 <HAL_TIM_ConfigClockSource+0x1bc>
 801fa24:	2b70      	cmp	r3, #112	@ 0x70
 801fa26:	d01a      	beq.n	801fa5e <HAL_TIM_ConfigClockSource+0xf6>
 801fa28:	2b70      	cmp	r3, #112	@ 0x70
 801fa2a:	d87b      	bhi.n	801fb24 <HAL_TIM_ConfigClockSource+0x1bc>
 801fa2c:	2b60      	cmp	r3, #96	@ 0x60
 801fa2e:	d050      	beq.n	801fad2 <HAL_TIM_ConfigClockSource+0x16a>
 801fa30:	2b60      	cmp	r3, #96	@ 0x60
 801fa32:	d877      	bhi.n	801fb24 <HAL_TIM_ConfigClockSource+0x1bc>
 801fa34:	2b50      	cmp	r3, #80	@ 0x50
 801fa36:	d03c      	beq.n	801fab2 <HAL_TIM_ConfigClockSource+0x14a>
 801fa38:	2b50      	cmp	r3, #80	@ 0x50
 801fa3a:	d873      	bhi.n	801fb24 <HAL_TIM_ConfigClockSource+0x1bc>
 801fa3c:	2b40      	cmp	r3, #64	@ 0x40
 801fa3e:	d058      	beq.n	801faf2 <HAL_TIM_ConfigClockSource+0x18a>
 801fa40:	2b40      	cmp	r3, #64	@ 0x40
 801fa42:	d86f      	bhi.n	801fb24 <HAL_TIM_ConfigClockSource+0x1bc>
 801fa44:	2b30      	cmp	r3, #48	@ 0x30
 801fa46:	d064      	beq.n	801fb12 <HAL_TIM_ConfigClockSource+0x1aa>
 801fa48:	2b30      	cmp	r3, #48	@ 0x30
 801fa4a:	d86b      	bhi.n	801fb24 <HAL_TIM_ConfigClockSource+0x1bc>
 801fa4c:	2b20      	cmp	r3, #32
 801fa4e:	d060      	beq.n	801fb12 <HAL_TIM_ConfigClockSource+0x1aa>
 801fa50:	2b20      	cmp	r3, #32
 801fa52:	d867      	bhi.n	801fb24 <HAL_TIM_ConfigClockSource+0x1bc>
 801fa54:	2b00      	cmp	r3, #0
 801fa56:	d05c      	beq.n	801fb12 <HAL_TIM_ConfigClockSource+0x1aa>
 801fa58:	2b10      	cmp	r3, #16
 801fa5a:	d05a      	beq.n	801fb12 <HAL_TIM_ConfigClockSource+0x1aa>
 801fa5c:	e062      	b.n	801fb24 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801fa5e:	687b      	ldr	r3, [r7, #4]
 801fa60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801fa62:	683b      	ldr	r3, [r7, #0]
 801fa64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801fa66:	683b      	ldr	r3, [r7, #0]
 801fa68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801fa6a:	683b      	ldr	r3, [r7, #0]
 801fa6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801fa6e:	f000 fc6d 	bl	802034c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801fa72:	687b      	ldr	r3, [r7, #4]
 801fa74:	681b      	ldr	r3, [r3, #0]
 801fa76:	689b      	ldr	r3, [r3, #8]
 801fa78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801fa7a:	68bb      	ldr	r3, [r7, #8]
 801fa7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801fa80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801fa82:	687b      	ldr	r3, [r7, #4]
 801fa84:	681b      	ldr	r3, [r3, #0]
 801fa86:	68ba      	ldr	r2, [r7, #8]
 801fa88:	609a      	str	r2, [r3, #8]
      break;
 801fa8a:	e04f      	b.n	801fb2c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801fa8c:	687b      	ldr	r3, [r7, #4]
 801fa8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801fa90:	683b      	ldr	r3, [r7, #0]
 801fa92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801fa94:	683b      	ldr	r3, [r7, #0]
 801fa96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801fa98:	683b      	ldr	r3, [r7, #0]
 801fa9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801fa9c:	f000 fc56 	bl	802034c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801faa0:	687b      	ldr	r3, [r7, #4]
 801faa2:	681b      	ldr	r3, [r3, #0]
 801faa4:	689a      	ldr	r2, [r3, #8]
 801faa6:	687b      	ldr	r3, [r7, #4]
 801faa8:	681b      	ldr	r3, [r3, #0]
 801faaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801faae:	609a      	str	r2, [r3, #8]
      break;
 801fab0:	e03c      	b.n	801fb2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801fab2:	687b      	ldr	r3, [r7, #4]
 801fab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801fab6:	683b      	ldr	r3, [r7, #0]
 801fab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801faba:	683b      	ldr	r3, [r7, #0]
 801fabc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801fabe:	461a      	mov	r2, r3
 801fac0:	f000 fbc6 	bl	8020250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801fac4:	687b      	ldr	r3, [r7, #4]
 801fac6:	681b      	ldr	r3, [r3, #0]
 801fac8:	2150      	movs	r1, #80	@ 0x50
 801faca:	4618      	mov	r0, r3
 801facc:	f000 fc20 	bl	8020310 <TIM_ITRx_SetConfig>
      break;
 801fad0:	e02c      	b.n	801fb2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801fad2:	687b      	ldr	r3, [r7, #4]
 801fad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801fad6:	683b      	ldr	r3, [r7, #0]
 801fad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801fada:	683b      	ldr	r3, [r7, #0]
 801fadc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801fade:	461a      	mov	r2, r3
 801fae0:	f000 fbe5 	bl	80202ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	681b      	ldr	r3, [r3, #0]
 801fae8:	2160      	movs	r1, #96	@ 0x60
 801faea:	4618      	mov	r0, r3
 801faec:	f000 fc10 	bl	8020310 <TIM_ITRx_SetConfig>
      break;
 801faf0:	e01c      	b.n	801fb2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801faf2:	687b      	ldr	r3, [r7, #4]
 801faf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801faf6:	683b      	ldr	r3, [r7, #0]
 801faf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801fafa:	683b      	ldr	r3, [r7, #0]
 801fafc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801fafe:	461a      	mov	r2, r3
 801fb00:	f000 fba6 	bl	8020250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801fb04:	687b      	ldr	r3, [r7, #4]
 801fb06:	681b      	ldr	r3, [r3, #0]
 801fb08:	2140      	movs	r1, #64	@ 0x40
 801fb0a:	4618      	mov	r0, r3
 801fb0c:	f000 fc00 	bl	8020310 <TIM_ITRx_SetConfig>
      break;
 801fb10:	e00c      	b.n	801fb2c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801fb12:	687b      	ldr	r3, [r7, #4]
 801fb14:	681a      	ldr	r2, [r3, #0]
 801fb16:	683b      	ldr	r3, [r7, #0]
 801fb18:	681b      	ldr	r3, [r3, #0]
 801fb1a:	4619      	mov	r1, r3
 801fb1c:	4610      	mov	r0, r2
 801fb1e:	f000 fbf7 	bl	8020310 <TIM_ITRx_SetConfig>
      break;
 801fb22:	e003      	b.n	801fb2c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801fb24:	2301      	movs	r3, #1
 801fb26:	73fb      	strb	r3, [r7, #15]
      break;
 801fb28:	e000      	b.n	801fb2c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801fb2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801fb2c:	687b      	ldr	r3, [r7, #4]
 801fb2e:	2201      	movs	r2, #1
 801fb30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801fb34:	687b      	ldr	r3, [r7, #4]
 801fb36:	2200      	movs	r2, #0
 801fb38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801fb3c:	7bfb      	ldrb	r3, [r7, #15]
}
 801fb3e:	4618      	mov	r0, r3
 801fb40:	3710      	adds	r7, #16
 801fb42:	46bd      	mov	sp, r7
 801fb44:	bd80      	pop	{r7, pc}
 801fb46:	bf00      	nop
 801fb48:	ffceff88 	.word	0xffceff88
 801fb4c:	00100040 	.word	0x00100040
 801fb50:	00100030 	.word	0x00100030
 801fb54:	00100020 	.word	0x00100020

0801fb58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801fb58:	b480      	push	{r7}
 801fb5a:	b085      	sub	sp, #20
 801fb5c:	af00      	add	r7, sp, #0
 801fb5e:	6078      	str	r0, [r7, #4]
 801fb60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801fb62:	687b      	ldr	r3, [r7, #4]
 801fb64:	681b      	ldr	r3, [r3, #0]
 801fb66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801fb68:	687b      	ldr	r3, [r7, #4]
 801fb6a:	4a46      	ldr	r2, [pc, #280]	@ (801fc84 <TIM_Base_SetConfig+0x12c>)
 801fb6c:	4293      	cmp	r3, r2
 801fb6e:	d013      	beq.n	801fb98 <TIM_Base_SetConfig+0x40>
 801fb70:	687b      	ldr	r3, [r7, #4]
 801fb72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801fb76:	d00f      	beq.n	801fb98 <TIM_Base_SetConfig+0x40>
 801fb78:	687b      	ldr	r3, [r7, #4]
 801fb7a:	4a43      	ldr	r2, [pc, #268]	@ (801fc88 <TIM_Base_SetConfig+0x130>)
 801fb7c:	4293      	cmp	r3, r2
 801fb7e:	d00b      	beq.n	801fb98 <TIM_Base_SetConfig+0x40>
 801fb80:	687b      	ldr	r3, [r7, #4]
 801fb82:	4a42      	ldr	r2, [pc, #264]	@ (801fc8c <TIM_Base_SetConfig+0x134>)
 801fb84:	4293      	cmp	r3, r2
 801fb86:	d007      	beq.n	801fb98 <TIM_Base_SetConfig+0x40>
 801fb88:	687b      	ldr	r3, [r7, #4]
 801fb8a:	4a41      	ldr	r2, [pc, #260]	@ (801fc90 <TIM_Base_SetConfig+0x138>)
 801fb8c:	4293      	cmp	r3, r2
 801fb8e:	d003      	beq.n	801fb98 <TIM_Base_SetConfig+0x40>
 801fb90:	687b      	ldr	r3, [r7, #4]
 801fb92:	4a40      	ldr	r2, [pc, #256]	@ (801fc94 <TIM_Base_SetConfig+0x13c>)
 801fb94:	4293      	cmp	r3, r2
 801fb96:	d108      	bne.n	801fbaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801fb98:	68fb      	ldr	r3, [r7, #12]
 801fb9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801fb9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801fba0:	683b      	ldr	r3, [r7, #0]
 801fba2:	685b      	ldr	r3, [r3, #4]
 801fba4:	68fa      	ldr	r2, [r7, #12]
 801fba6:	4313      	orrs	r3, r2
 801fba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801fbaa:	687b      	ldr	r3, [r7, #4]
 801fbac:	4a35      	ldr	r2, [pc, #212]	@ (801fc84 <TIM_Base_SetConfig+0x12c>)
 801fbae:	4293      	cmp	r3, r2
 801fbb0:	d01f      	beq.n	801fbf2 <TIM_Base_SetConfig+0x9a>
 801fbb2:	687b      	ldr	r3, [r7, #4]
 801fbb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801fbb8:	d01b      	beq.n	801fbf2 <TIM_Base_SetConfig+0x9a>
 801fbba:	687b      	ldr	r3, [r7, #4]
 801fbbc:	4a32      	ldr	r2, [pc, #200]	@ (801fc88 <TIM_Base_SetConfig+0x130>)
 801fbbe:	4293      	cmp	r3, r2
 801fbc0:	d017      	beq.n	801fbf2 <TIM_Base_SetConfig+0x9a>
 801fbc2:	687b      	ldr	r3, [r7, #4]
 801fbc4:	4a31      	ldr	r2, [pc, #196]	@ (801fc8c <TIM_Base_SetConfig+0x134>)
 801fbc6:	4293      	cmp	r3, r2
 801fbc8:	d013      	beq.n	801fbf2 <TIM_Base_SetConfig+0x9a>
 801fbca:	687b      	ldr	r3, [r7, #4]
 801fbcc:	4a30      	ldr	r2, [pc, #192]	@ (801fc90 <TIM_Base_SetConfig+0x138>)
 801fbce:	4293      	cmp	r3, r2
 801fbd0:	d00f      	beq.n	801fbf2 <TIM_Base_SetConfig+0x9a>
 801fbd2:	687b      	ldr	r3, [r7, #4]
 801fbd4:	4a2f      	ldr	r2, [pc, #188]	@ (801fc94 <TIM_Base_SetConfig+0x13c>)
 801fbd6:	4293      	cmp	r3, r2
 801fbd8:	d00b      	beq.n	801fbf2 <TIM_Base_SetConfig+0x9a>
 801fbda:	687b      	ldr	r3, [r7, #4]
 801fbdc:	4a2e      	ldr	r2, [pc, #184]	@ (801fc98 <TIM_Base_SetConfig+0x140>)
 801fbde:	4293      	cmp	r3, r2
 801fbe0:	d007      	beq.n	801fbf2 <TIM_Base_SetConfig+0x9a>
 801fbe2:	687b      	ldr	r3, [r7, #4]
 801fbe4:	4a2d      	ldr	r2, [pc, #180]	@ (801fc9c <TIM_Base_SetConfig+0x144>)
 801fbe6:	4293      	cmp	r3, r2
 801fbe8:	d003      	beq.n	801fbf2 <TIM_Base_SetConfig+0x9a>
 801fbea:	687b      	ldr	r3, [r7, #4]
 801fbec:	4a2c      	ldr	r2, [pc, #176]	@ (801fca0 <TIM_Base_SetConfig+0x148>)
 801fbee:	4293      	cmp	r3, r2
 801fbf0:	d108      	bne.n	801fc04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801fbf2:	68fb      	ldr	r3, [r7, #12]
 801fbf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801fbf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801fbfa:	683b      	ldr	r3, [r7, #0]
 801fbfc:	68db      	ldr	r3, [r3, #12]
 801fbfe:	68fa      	ldr	r2, [r7, #12]
 801fc00:	4313      	orrs	r3, r2
 801fc02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801fc04:	68fb      	ldr	r3, [r7, #12]
 801fc06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801fc0a:	683b      	ldr	r3, [r7, #0]
 801fc0c:	695b      	ldr	r3, [r3, #20]
 801fc0e:	4313      	orrs	r3, r2
 801fc10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801fc12:	687b      	ldr	r3, [r7, #4]
 801fc14:	68fa      	ldr	r2, [r7, #12]
 801fc16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801fc18:	683b      	ldr	r3, [r7, #0]
 801fc1a:	689a      	ldr	r2, [r3, #8]
 801fc1c:	687b      	ldr	r3, [r7, #4]
 801fc1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801fc20:	683b      	ldr	r3, [r7, #0]
 801fc22:	681a      	ldr	r2, [r3, #0]
 801fc24:	687b      	ldr	r3, [r7, #4]
 801fc26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801fc28:	687b      	ldr	r3, [r7, #4]
 801fc2a:	4a16      	ldr	r2, [pc, #88]	@ (801fc84 <TIM_Base_SetConfig+0x12c>)
 801fc2c:	4293      	cmp	r3, r2
 801fc2e:	d00f      	beq.n	801fc50 <TIM_Base_SetConfig+0xf8>
 801fc30:	687b      	ldr	r3, [r7, #4]
 801fc32:	4a18      	ldr	r2, [pc, #96]	@ (801fc94 <TIM_Base_SetConfig+0x13c>)
 801fc34:	4293      	cmp	r3, r2
 801fc36:	d00b      	beq.n	801fc50 <TIM_Base_SetConfig+0xf8>
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	4a17      	ldr	r2, [pc, #92]	@ (801fc98 <TIM_Base_SetConfig+0x140>)
 801fc3c:	4293      	cmp	r3, r2
 801fc3e:	d007      	beq.n	801fc50 <TIM_Base_SetConfig+0xf8>
 801fc40:	687b      	ldr	r3, [r7, #4]
 801fc42:	4a16      	ldr	r2, [pc, #88]	@ (801fc9c <TIM_Base_SetConfig+0x144>)
 801fc44:	4293      	cmp	r3, r2
 801fc46:	d003      	beq.n	801fc50 <TIM_Base_SetConfig+0xf8>
 801fc48:	687b      	ldr	r3, [r7, #4]
 801fc4a:	4a15      	ldr	r2, [pc, #84]	@ (801fca0 <TIM_Base_SetConfig+0x148>)
 801fc4c:	4293      	cmp	r3, r2
 801fc4e:	d103      	bne.n	801fc58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801fc50:	683b      	ldr	r3, [r7, #0]
 801fc52:	691a      	ldr	r2, [r3, #16]
 801fc54:	687b      	ldr	r3, [r7, #4]
 801fc56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801fc58:	687b      	ldr	r3, [r7, #4]
 801fc5a:	2201      	movs	r2, #1
 801fc5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801fc5e:	687b      	ldr	r3, [r7, #4]
 801fc60:	691b      	ldr	r3, [r3, #16]
 801fc62:	f003 0301 	and.w	r3, r3, #1
 801fc66:	2b01      	cmp	r3, #1
 801fc68:	d105      	bne.n	801fc76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801fc6a:	687b      	ldr	r3, [r7, #4]
 801fc6c:	691b      	ldr	r3, [r3, #16]
 801fc6e:	f023 0201 	bic.w	r2, r3, #1
 801fc72:	687b      	ldr	r3, [r7, #4]
 801fc74:	611a      	str	r2, [r3, #16]
  }
}
 801fc76:	bf00      	nop
 801fc78:	3714      	adds	r7, #20
 801fc7a:	46bd      	mov	sp, r7
 801fc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc80:	4770      	bx	lr
 801fc82:	bf00      	nop
 801fc84:	40010000 	.word	0x40010000
 801fc88:	40000400 	.word	0x40000400
 801fc8c:	40000800 	.word	0x40000800
 801fc90:	40000c00 	.word	0x40000c00
 801fc94:	40010400 	.word	0x40010400
 801fc98:	40014000 	.word	0x40014000
 801fc9c:	40014400 	.word	0x40014400
 801fca0:	40014800 	.word	0x40014800

0801fca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fca4:	b480      	push	{r7}
 801fca6:	b087      	sub	sp, #28
 801fca8:	af00      	add	r7, sp, #0
 801fcaa:	6078      	str	r0, [r7, #4]
 801fcac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fcae:	687b      	ldr	r3, [r7, #4]
 801fcb0:	6a1b      	ldr	r3, [r3, #32]
 801fcb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801fcb4:	687b      	ldr	r3, [r7, #4]
 801fcb6:	6a1b      	ldr	r3, [r3, #32]
 801fcb8:	f023 0201 	bic.w	r2, r3, #1
 801fcbc:	687b      	ldr	r3, [r7, #4]
 801fcbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fcc0:	687b      	ldr	r3, [r7, #4]
 801fcc2:	685b      	ldr	r3, [r3, #4]
 801fcc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801fcc6:	687b      	ldr	r3, [r7, #4]
 801fcc8:	699b      	ldr	r3, [r3, #24]
 801fcca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801fccc:	68fa      	ldr	r2, [r7, #12]
 801fcce:	4b37      	ldr	r3, [pc, #220]	@ (801fdac <TIM_OC1_SetConfig+0x108>)
 801fcd0:	4013      	ands	r3, r2
 801fcd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801fcd4:	68fb      	ldr	r3, [r7, #12]
 801fcd6:	f023 0303 	bic.w	r3, r3, #3
 801fcda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801fcdc:	683b      	ldr	r3, [r7, #0]
 801fcde:	681b      	ldr	r3, [r3, #0]
 801fce0:	68fa      	ldr	r2, [r7, #12]
 801fce2:	4313      	orrs	r3, r2
 801fce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801fce6:	697b      	ldr	r3, [r7, #20]
 801fce8:	f023 0302 	bic.w	r3, r3, #2
 801fcec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801fcee:	683b      	ldr	r3, [r7, #0]
 801fcf0:	689b      	ldr	r3, [r3, #8]
 801fcf2:	697a      	ldr	r2, [r7, #20]
 801fcf4:	4313      	orrs	r3, r2
 801fcf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801fcf8:	687b      	ldr	r3, [r7, #4]
 801fcfa:	4a2d      	ldr	r2, [pc, #180]	@ (801fdb0 <TIM_OC1_SetConfig+0x10c>)
 801fcfc:	4293      	cmp	r3, r2
 801fcfe:	d00f      	beq.n	801fd20 <TIM_OC1_SetConfig+0x7c>
 801fd00:	687b      	ldr	r3, [r7, #4]
 801fd02:	4a2c      	ldr	r2, [pc, #176]	@ (801fdb4 <TIM_OC1_SetConfig+0x110>)
 801fd04:	4293      	cmp	r3, r2
 801fd06:	d00b      	beq.n	801fd20 <TIM_OC1_SetConfig+0x7c>
 801fd08:	687b      	ldr	r3, [r7, #4]
 801fd0a:	4a2b      	ldr	r2, [pc, #172]	@ (801fdb8 <TIM_OC1_SetConfig+0x114>)
 801fd0c:	4293      	cmp	r3, r2
 801fd0e:	d007      	beq.n	801fd20 <TIM_OC1_SetConfig+0x7c>
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	4a2a      	ldr	r2, [pc, #168]	@ (801fdbc <TIM_OC1_SetConfig+0x118>)
 801fd14:	4293      	cmp	r3, r2
 801fd16:	d003      	beq.n	801fd20 <TIM_OC1_SetConfig+0x7c>
 801fd18:	687b      	ldr	r3, [r7, #4]
 801fd1a:	4a29      	ldr	r2, [pc, #164]	@ (801fdc0 <TIM_OC1_SetConfig+0x11c>)
 801fd1c:	4293      	cmp	r3, r2
 801fd1e:	d10c      	bne.n	801fd3a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801fd20:	697b      	ldr	r3, [r7, #20]
 801fd22:	f023 0308 	bic.w	r3, r3, #8
 801fd26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801fd28:	683b      	ldr	r3, [r7, #0]
 801fd2a:	68db      	ldr	r3, [r3, #12]
 801fd2c:	697a      	ldr	r2, [r7, #20]
 801fd2e:	4313      	orrs	r3, r2
 801fd30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801fd32:	697b      	ldr	r3, [r7, #20]
 801fd34:	f023 0304 	bic.w	r3, r3, #4
 801fd38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fd3a:	687b      	ldr	r3, [r7, #4]
 801fd3c:	4a1c      	ldr	r2, [pc, #112]	@ (801fdb0 <TIM_OC1_SetConfig+0x10c>)
 801fd3e:	4293      	cmp	r3, r2
 801fd40:	d00f      	beq.n	801fd62 <TIM_OC1_SetConfig+0xbe>
 801fd42:	687b      	ldr	r3, [r7, #4]
 801fd44:	4a1b      	ldr	r2, [pc, #108]	@ (801fdb4 <TIM_OC1_SetConfig+0x110>)
 801fd46:	4293      	cmp	r3, r2
 801fd48:	d00b      	beq.n	801fd62 <TIM_OC1_SetConfig+0xbe>
 801fd4a:	687b      	ldr	r3, [r7, #4]
 801fd4c:	4a1a      	ldr	r2, [pc, #104]	@ (801fdb8 <TIM_OC1_SetConfig+0x114>)
 801fd4e:	4293      	cmp	r3, r2
 801fd50:	d007      	beq.n	801fd62 <TIM_OC1_SetConfig+0xbe>
 801fd52:	687b      	ldr	r3, [r7, #4]
 801fd54:	4a19      	ldr	r2, [pc, #100]	@ (801fdbc <TIM_OC1_SetConfig+0x118>)
 801fd56:	4293      	cmp	r3, r2
 801fd58:	d003      	beq.n	801fd62 <TIM_OC1_SetConfig+0xbe>
 801fd5a:	687b      	ldr	r3, [r7, #4]
 801fd5c:	4a18      	ldr	r2, [pc, #96]	@ (801fdc0 <TIM_OC1_SetConfig+0x11c>)
 801fd5e:	4293      	cmp	r3, r2
 801fd60:	d111      	bne.n	801fd86 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801fd62:	693b      	ldr	r3, [r7, #16]
 801fd64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801fd68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801fd6a:	693b      	ldr	r3, [r7, #16]
 801fd6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801fd70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801fd72:	683b      	ldr	r3, [r7, #0]
 801fd74:	695b      	ldr	r3, [r3, #20]
 801fd76:	693a      	ldr	r2, [r7, #16]
 801fd78:	4313      	orrs	r3, r2
 801fd7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801fd7c:	683b      	ldr	r3, [r7, #0]
 801fd7e:	699b      	ldr	r3, [r3, #24]
 801fd80:	693a      	ldr	r2, [r7, #16]
 801fd82:	4313      	orrs	r3, r2
 801fd84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fd86:	687b      	ldr	r3, [r7, #4]
 801fd88:	693a      	ldr	r2, [r7, #16]
 801fd8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	68fa      	ldr	r2, [r7, #12]
 801fd90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801fd92:	683b      	ldr	r3, [r7, #0]
 801fd94:	685a      	ldr	r2, [r3, #4]
 801fd96:	687b      	ldr	r3, [r7, #4]
 801fd98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	697a      	ldr	r2, [r7, #20]
 801fd9e:	621a      	str	r2, [r3, #32]
}
 801fda0:	bf00      	nop
 801fda2:	371c      	adds	r7, #28
 801fda4:	46bd      	mov	sp, r7
 801fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdaa:	4770      	bx	lr
 801fdac:	fffeff8f 	.word	0xfffeff8f
 801fdb0:	40010000 	.word	0x40010000
 801fdb4:	40010400 	.word	0x40010400
 801fdb8:	40014000 	.word	0x40014000
 801fdbc:	40014400 	.word	0x40014400
 801fdc0:	40014800 	.word	0x40014800

0801fdc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fdc4:	b480      	push	{r7}
 801fdc6:	b087      	sub	sp, #28
 801fdc8:	af00      	add	r7, sp, #0
 801fdca:	6078      	str	r0, [r7, #4]
 801fdcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fdce:	687b      	ldr	r3, [r7, #4]
 801fdd0:	6a1b      	ldr	r3, [r3, #32]
 801fdd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801fdd4:	687b      	ldr	r3, [r7, #4]
 801fdd6:	6a1b      	ldr	r3, [r3, #32]
 801fdd8:	f023 0210 	bic.w	r2, r3, #16
 801fddc:	687b      	ldr	r3, [r7, #4]
 801fdde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fde0:	687b      	ldr	r3, [r7, #4]
 801fde2:	685b      	ldr	r3, [r3, #4]
 801fde4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801fde6:	687b      	ldr	r3, [r7, #4]
 801fde8:	699b      	ldr	r3, [r3, #24]
 801fdea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801fdec:	68fa      	ldr	r2, [r7, #12]
 801fdee:	4b34      	ldr	r3, [pc, #208]	@ (801fec0 <TIM_OC2_SetConfig+0xfc>)
 801fdf0:	4013      	ands	r3, r2
 801fdf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801fdf4:	68fb      	ldr	r3, [r7, #12]
 801fdf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801fdfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fdfc:	683b      	ldr	r3, [r7, #0]
 801fdfe:	681b      	ldr	r3, [r3, #0]
 801fe00:	021b      	lsls	r3, r3, #8
 801fe02:	68fa      	ldr	r2, [r7, #12]
 801fe04:	4313      	orrs	r3, r2
 801fe06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801fe08:	697b      	ldr	r3, [r7, #20]
 801fe0a:	f023 0320 	bic.w	r3, r3, #32
 801fe0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801fe10:	683b      	ldr	r3, [r7, #0]
 801fe12:	689b      	ldr	r3, [r3, #8]
 801fe14:	011b      	lsls	r3, r3, #4
 801fe16:	697a      	ldr	r2, [r7, #20]
 801fe18:	4313      	orrs	r3, r2
 801fe1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801fe1c:	687b      	ldr	r3, [r7, #4]
 801fe1e:	4a29      	ldr	r2, [pc, #164]	@ (801fec4 <TIM_OC2_SetConfig+0x100>)
 801fe20:	4293      	cmp	r3, r2
 801fe22:	d003      	beq.n	801fe2c <TIM_OC2_SetConfig+0x68>
 801fe24:	687b      	ldr	r3, [r7, #4]
 801fe26:	4a28      	ldr	r2, [pc, #160]	@ (801fec8 <TIM_OC2_SetConfig+0x104>)
 801fe28:	4293      	cmp	r3, r2
 801fe2a:	d10d      	bne.n	801fe48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801fe2c:	697b      	ldr	r3, [r7, #20]
 801fe2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801fe32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801fe34:	683b      	ldr	r3, [r7, #0]
 801fe36:	68db      	ldr	r3, [r3, #12]
 801fe38:	011b      	lsls	r3, r3, #4
 801fe3a:	697a      	ldr	r2, [r7, #20]
 801fe3c:	4313      	orrs	r3, r2
 801fe3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801fe40:	697b      	ldr	r3, [r7, #20]
 801fe42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801fe46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	4a1e      	ldr	r2, [pc, #120]	@ (801fec4 <TIM_OC2_SetConfig+0x100>)
 801fe4c:	4293      	cmp	r3, r2
 801fe4e:	d00f      	beq.n	801fe70 <TIM_OC2_SetConfig+0xac>
 801fe50:	687b      	ldr	r3, [r7, #4]
 801fe52:	4a1d      	ldr	r2, [pc, #116]	@ (801fec8 <TIM_OC2_SetConfig+0x104>)
 801fe54:	4293      	cmp	r3, r2
 801fe56:	d00b      	beq.n	801fe70 <TIM_OC2_SetConfig+0xac>
 801fe58:	687b      	ldr	r3, [r7, #4]
 801fe5a:	4a1c      	ldr	r2, [pc, #112]	@ (801fecc <TIM_OC2_SetConfig+0x108>)
 801fe5c:	4293      	cmp	r3, r2
 801fe5e:	d007      	beq.n	801fe70 <TIM_OC2_SetConfig+0xac>
 801fe60:	687b      	ldr	r3, [r7, #4]
 801fe62:	4a1b      	ldr	r2, [pc, #108]	@ (801fed0 <TIM_OC2_SetConfig+0x10c>)
 801fe64:	4293      	cmp	r3, r2
 801fe66:	d003      	beq.n	801fe70 <TIM_OC2_SetConfig+0xac>
 801fe68:	687b      	ldr	r3, [r7, #4]
 801fe6a:	4a1a      	ldr	r2, [pc, #104]	@ (801fed4 <TIM_OC2_SetConfig+0x110>)
 801fe6c:	4293      	cmp	r3, r2
 801fe6e:	d113      	bne.n	801fe98 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801fe70:	693b      	ldr	r3, [r7, #16]
 801fe72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801fe76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801fe78:	693b      	ldr	r3, [r7, #16]
 801fe7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801fe7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801fe80:	683b      	ldr	r3, [r7, #0]
 801fe82:	695b      	ldr	r3, [r3, #20]
 801fe84:	009b      	lsls	r3, r3, #2
 801fe86:	693a      	ldr	r2, [r7, #16]
 801fe88:	4313      	orrs	r3, r2
 801fe8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801fe8c:	683b      	ldr	r3, [r7, #0]
 801fe8e:	699b      	ldr	r3, [r3, #24]
 801fe90:	009b      	lsls	r3, r3, #2
 801fe92:	693a      	ldr	r2, [r7, #16]
 801fe94:	4313      	orrs	r3, r2
 801fe96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fe98:	687b      	ldr	r3, [r7, #4]
 801fe9a:	693a      	ldr	r2, [r7, #16]
 801fe9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801fe9e:	687b      	ldr	r3, [r7, #4]
 801fea0:	68fa      	ldr	r2, [r7, #12]
 801fea2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801fea4:	683b      	ldr	r3, [r7, #0]
 801fea6:	685a      	ldr	r2, [r3, #4]
 801fea8:	687b      	ldr	r3, [r7, #4]
 801feaa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801feac:	687b      	ldr	r3, [r7, #4]
 801feae:	697a      	ldr	r2, [r7, #20]
 801feb0:	621a      	str	r2, [r3, #32]
}
 801feb2:	bf00      	nop
 801feb4:	371c      	adds	r7, #28
 801feb6:	46bd      	mov	sp, r7
 801feb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801febc:	4770      	bx	lr
 801febe:	bf00      	nop
 801fec0:	feff8fff 	.word	0xfeff8fff
 801fec4:	40010000 	.word	0x40010000
 801fec8:	40010400 	.word	0x40010400
 801fecc:	40014000 	.word	0x40014000
 801fed0:	40014400 	.word	0x40014400
 801fed4:	40014800 	.word	0x40014800

0801fed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fed8:	b480      	push	{r7}
 801feda:	b087      	sub	sp, #28
 801fedc:	af00      	add	r7, sp, #0
 801fede:	6078      	str	r0, [r7, #4]
 801fee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fee2:	687b      	ldr	r3, [r7, #4]
 801fee4:	6a1b      	ldr	r3, [r3, #32]
 801fee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	6a1b      	ldr	r3, [r3, #32]
 801feec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801fef0:	687b      	ldr	r3, [r7, #4]
 801fef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fef4:	687b      	ldr	r3, [r7, #4]
 801fef6:	685b      	ldr	r3, [r3, #4]
 801fef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801fefa:	687b      	ldr	r3, [r7, #4]
 801fefc:	69db      	ldr	r3, [r3, #28]
 801fefe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801ff00:	68fa      	ldr	r2, [r7, #12]
 801ff02:	4b33      	ldr	r3, [pc, #204]	@ (801ffd0 <TIM_OC3_SetConfig+0xf8>)
 801ff04:	4013      	ands	r3, r2
 801ff06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801ff08:	68fb      	ldr	r3, [r7, #12]
 801ff0a:	f023 0303 	bic.w	r3, r3, #3
 801ff0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ff10:	683b      	ldr	r3, [r7, #0]
 801ff12:	681b      	ldr	r3, [r3, #0]
 801ff14:	68fa      	ldr	r2, [r7, #12]
 801ff16:	4313      	orrs	r3, r2
 801ff18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801ff1a:	697b      	ldr	r3, [r7, #20]
 801ff1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801ff20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801ff22:	683b      	ldr	r3, [r7, #0]
 801ff24:	689b      	ldr	r3, [r3, #8]
 801ff26:	021b      	lsls	r3, r3, #8
 801ff28:	697a      	ldr	r2, [r7, #20]
 801ff2a:	4313      	orrs	r3, r2
 801ff2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801ff2e:	687b      	ldr	r3, [r7, #4]
 801ff30:	4a28      	ldr	r2, [pc, #160]	@ (801ffd4 <TIM_OC3_SetConfig+0xfc>)
 801ff32:	4293      	cmp	r3, r2
 801ff34:	d003      	beq.n	801ff3e <TIM_OC3_SetConfig+0x66>
 801ff36:	687b      	ldr	r3, [r7, #4]
 801ff38:	4a27      	ldr	r2, [pc, #156]	@ (801ffd8 <TIM_OC3_SetConfig+0x100>)
 801ff3a:	4293      	cmp	r3, r2
 801ff3c:	d10d      	bne.n	801ff5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801ff3e:	697b      	ldr	r3, [r7, #20]
 801ff40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801ff44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801ff46:	683b      	ldr	r3, [r7, #0]
 801ff48:	68db      	ldr	r3, [r3, #12]
 801ff4a:	021b      	lsls	r3, r3, #8
 801ff4c:	697a      	ldr	r2, [r7, #20]
 801ff4e:	4313      	orrs	r3, r2
 801ff50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801ff52:	697b      	ldr	r3, [r7, #20]
 801ff54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801ff58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ff5a:	687b      	ldr	r3, [r7, #4]
 801ff5c:	4a1d      	ldr	r2, [pc, #116]	@ (801ffd4 <TIM_OC3_SetConfig+0xfc>)
 801ff5e:	4293      	cmp	r3, r2
 801ff60:	d00f      	beq.n	801ff82 <TIM_OC3_SetConfig+0xaa>
 801ff62:	687b      	ldr	r3, [r7, #4]
 801ff64:	4a1c      	ldr	r2, [pc, #112]	@ (801ffd8 <TIM_OC3_SetConfig+0x100>)
 801ff66:	4293      	cmp	r3, r2
 801ff68:	d00b      	beq.n	801ff82 <TIM_OC3_SetConfig+0xaa>
 801ff6a:	687b      	ldr	r3, [r7, #4]
 801ff6c:	4a1b      	ldr	r2, [pc, #108]	@ (801ffdc <TIM_OC3_SetConfig+0x104>)
 801ff6e:	4293      	cmp	r3, r2
 801ff70:	d007      	beq.n	801ff82 <TIM_OC3_SetConfig+0xaa>
 801ff72:	687b      	ldr	r3, [r7, #4]
 801ff74:	4a1a      	ldr	r2, [pc, #104]	@ (801ffe0 <TIM_OC3_SetConfig+0x108>)
 801ff76:	4293      	cmp	r3, r2
 801ff78:	d003      	beq.n	801ff82 <TIM_OC3_SetConfig+0xaa>
 801ff7a:	687b      	ldr	r3, [r7, #4]
 801ff7c:	4a19      	ldr	r2, [pc, #100]	@ (801ffe4 <TIM_OC3_SetConfig+0x10c>)
 801ff7e:	4293      	cmp	r3, r2
 801ff80:	d113      	bne.n	801ffaa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801ff82:	693b      	ldr	r3, [r7, #16]
 801ff84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ff88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801ff8a:	693b      	ldr	r3, [r7, #16]
 801ff8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801ff90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801ff92:	683b      	ldr	r3, [r7, #0]
 801ff94:	695b      	ldr	r3, [r3, #20]
 801ff96:	011b      	lsls	r3, r3, #4
 801ff98:	693a      	ldr	r2, [r7, #16]
 801ff9a:	4313      	orrs	r3, r2
 801ff9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801ff9e:	683b      	ldr	r3, [r7, #0]
 801ffa0:	699b      	ldr	r3, [r3, #24]
 801ffa2:	011b      	lsls	r3, r3, #4
 801ffa4:	693a      	ldr	r2, [r7, #16]
 801ffa6:	4313      	orrs	r3, r2
 801ffa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ffaa:	687b      	ldr	r3, [r7, #4]
 801ffac:	693a      	ldr	r2, [r7, #16]
 801ffae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ffb0:	687b      	ldr	r3, [r7, #4]
 801ffb2:	68fa      	ldr	r2, [r7, #12]
 801ffb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801ffb6:	683b      	ldr	r3, [r7, #0]
 801ffb8:	685a      	ldr	r2, [r3, #4]
 801ffba:	687b      	ldr	r3, [r7, #4]
 801ffbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ffbe:	687b      	ldr	r3, [r7, #4]
 801ffc0:	697a      	ldr	r2, [r7, #20]
 801ffc2:	621a      	str	r2, [r3, #32]
}
 801ffc4:	bf00      	nop
 801ffc6:	371c      	adds	r7, #28
 801ffc8:	46bd      	mov	sp, r7
 801ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffce:	4770      	bx	lr
 801ffd0:	fffeff8f 	.word	0xfffeff8f
 801ffd4:	40010000 	.word	0x40010000
 801ffd8:	40010400 	.word	0x40010400
 801ffdc:	40014000 	.word	0x40014000
 801ffe0:	40014400 	.word	0x40014400
 801ffe4:	40014800 	.word	0x40014800

0801ffe8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801ffe8:	b480      	push	{r7}
 801ffea:	b087      	sub	sp, #28
 801ffec:	af00      	add	r7, sp, #0
 801ffee:	6078      	str	r0, [r7, #4]
 801fff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fff2:	687b      	ldr	r3, [r7, #4]
 801fff4:	6a1b      	ldr	r3, [r3, #32]
 801fff6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801fff8:	687b      	ldr	r3, [r7, #4]
 801fffa:	6a1b      	ldr	r3, [r3, #32]
 801fffc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8020000:	687b      	ldr	r3, [r7, #4]
 8020002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020004:	687b      	ldr	r3, [r7, #4]
 8020006:	685b      	ldr	r3, [r3, #4]
 8020008:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802000a:	687b      	ldr	r3, [r7, #4]
 802000c:	69db      	ldr	r3, [r3, #28]
 802000e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8020010:	68fa      	ldr	r2, [r7, #12]
 8020012:	4b24      	ldr	r3, [pc, #144]	@ (80200a4 <TIM_OC4_SetConfig+0xbc>)
 8020014:	4013      	ands	r3, r2
 8020016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8020018:	68fb      	ldr	r3, [r7, #12]
 802001a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802001e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020020:	683b      	ldr	r3, [r7, #0]
 8020022:	681b      	ldr	r3, [r3, #0]
 8020024:	021b      	lsls	r3, r3, #8
 8020026:	68fa      	ldr	r2, [r7, #12]
 8020028:	4313      	orrs	r3, r2
 802002a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802002c:	693b      	ldr	r3, [r7, #16]
 802002e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020032:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8020034:	683b      	ldr	r3, [r7, #0]
 8020036:	689b      	ldr	r3, [r3, #8]
 8020038:	031b      	lsls	r3, r3, #12
 802003a:	693a      	ldr	r2, [r7, #16]
 802003c:	4313      	orrs	r3, r2
 802003e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020040:	687b      	ldr	r3, [r7, #4]
 8020042:	4a19      	ldr	r2, [pc, #100]	@ (80200a8 <TIM_OC4_SetConfig+0xc0>)
 8020044:	4293      	cmp	r3, r2
 8020046:	d00f      	beq.n	8020068 <TIM_OC4_SetConfig+0x80>
 8020048:	687b      	ldr	r3, [r7, #4]
 802004a:	4a18      	ldr	r2, [pc, #96]	@ (80200ac <TIM_OC4_SetConfig+0xc4>)
 802004c:	4293      	cmp	r3, r2
 802004e:	d00b      	beq.n	8020068 <TIM_OC4_SetConfig+0x80>
 8020050:	687b      	ldr	r3, [r7, #4]
 8020052:	4a17      	ldr	r2, [pc, #92]	@ (80200b0 <TIM_OC4_SetConfig+0xc8>)
 8020054:	4293      	cmp	r3, r2
 8020056:	d007      	beq.n	8020068 <TIM_OC4_SetConfig+0x80>
 8020058:	687b      	ldr	r3, [r7, #4]
 802005a:	4a16      	ldr	r2, [pc, #88]	@ (80200b4 <TIM_OC4_SetConfig+0xcc>)
 802005c:	4293      	cmp	r3, r2
 802005e:	d003      	beq.n	8020068 <TIM_OC4_SetConfig+0x80>
 8020060:	687b      	ldr	r3, [r7, #4]
 8020062:	4a15      	ldr	r2, [pc, #84]	@ (80200b8 <TIM_OC4_SetConfig+0xd0>)
 8020064:	4293      	cmp	r3, r2
 8020066:	d109      	bne.n	802007c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8020068:	697b      	ldr	r3, [r7, #20]
 802006a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 802006e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8020070:	683b      	ldr	r3, [r7, #0]
 8020072:	695b      	ldr	r3, [r3, #20]
 8020074:	019b      	lsls	r3, r3, #6
 8020076:	697a      	ldr	r2, [r7, #20]
 8020078:	4313      	orrs	r3, r2
 802007a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802007c:	687b      	ldr	r3, [r7, #4]
 802007e:	697a      	ldr	r2, [r7, #20]
 8020080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020082:	687b      	ldr	r3, [r7, #4]
 8020084:	68fa      	ldr	r2, [r7, #12]
 8020086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020088:	683b      	ldr	r3, [r7, #0]
 802008a:	685a      	ldr	r2, [r3, #4]
 802008c:	687b      	ldr	r3, [r7, #4]
 802008e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020090:	687b      	ldr	r3, [r7, #4]
 8020092:	693a      	ldr	r2, [r7, #16]
 8020094:	621a      	str	r2, [r3, #32]
}
 8020096:	bf00      	nop
 8020098:	371c      	adds	r7, #28
 802009a:	46bd      	mov	sp, r7
 802009c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200a0:	4770      	bx	lr
 80200a2:	bf00      	nop
 80200a4:	feff8fff 	.word	0xfeff8fff
 80200a8:	40010000 	.word	0x40010000
 80200ac:	40010400 	.word	0x40010400
 80200b0:	40014000 	.word	0x40014000
 80200b4:	40014400 	.word	0x40014400
 80200b8:	40014800 	.word	0x40014800

080200bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80200bc:	b480      	push	{r7}
 80200be:	b087      	sub	sp, #28
 80200c0:	af00      	add	r7, sp, #0
 80200c2:	6078      	str	r0, [r7, #4]
 80200c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80200c6:	687b      	ldr	r3, [r7, #4]
 80200c8:	6a1b      	ldr	r3, [r3, #32]
 80200ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80200cc:	687b      	ldr	r3, [r7, #4]
 80200ce:	6a1b      	ldr	r3, [r3, #32]
 80200d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80200d4:	687b      	ldr	r3, [r7, #4]
 80200d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80200d8:	687b      	ldr	r3, [r7, #4]
 80200da:	685b      	ldr	r3, [r3, #4]
 80200dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80200de:	687b      	ldr	r3, [r7, #4]
 80200e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80200e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80200e4:	68fa      	ldr	r2, [r7, #12]
 80200e6:	4b21      	ldr	r3, [pc, #132]	@ (802016c <TIM_OC5_SetConfig+0xb0>)
 80200e8:	4013      	ands	r3, r2
 80200ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80200ec:	683b      	ldr	r3, [r7, #0]
 80200ee:	681b      	ldr	r3, [r3, #0]
 80200f0:	68fa      	ldr	r2, [r7, #12]
 80200f2:	4313      	orrs	r3, r2
 80200f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80200f6:	693b      	ldr	r3, [r7, #16]
 80200f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80200fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80200fe:	683b      	ldr	r3, [r7, #0]
 8020100:	689b      	ldr	r3, [r3, #8]
 8020102:	041b      	lsls	r3, r3, #16
 8020104:	693a      	ldr	r2, [r7, #16]
 8020106:	4313      	orrs	r3, r2
 8020108:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802010a:	687b      	ldr	r3, [r7, #4]
 802010c:	4a18      	ldr	r2, [pc, #96]	@ (8020170 <TIM_OC5_SetConfig+0xb4>)
 802010e:	4293      	cmp	r3, r2
 8020110:	d00f      	beq.n	8020132 <TIM_OC5_SetConfig+0x76>
 8020112:	687b      	ldr	r3, [r7, #4]
 8020114:	4a17      	ldr	r2, [pc, #92]	@ (8020174 <TIM_OC5_SetConfig+0xb8>)
 8020116:	4293      	cmp	r3, r2
 8020118:	d00b      	beq.n	8020132 <TIM_OC5_SetConfig+0x76>
 802011a:	687b      	ldr	r3, [r7, #4]
 802011c:	4a16      	ldr	r2, [pc, #88]	@ (8020178 <TIM_OC5_SetConfig+0xbc>)
 802011e:	4293      	cmp	r3, r2
 8020120:	d007      	beq.n	8020132 <TIM_OC5_SetConfig+0x76>
 8020122:	687b      	ldr	r3, [r7, #4]
 8020124:	4a15      	ldr	r2, [pc, #84]	@ (802017c <TIM_OC5_SetConfig+0xc0>)
 8020126:	4293      	cmp	r3, r2
 8020128:	d003      	beq.n	8020132 <TIM_OC5_SetConfig+0x76>
 802012a:	687b      	ldr	r3, [r7, #4]
 802012c:	4a14      	ldr	r2, [pc, #80]	@ (8020180 <TIM_OC5_SetConfig+0xc4>)
 802012e:	4293      	cmp	r3, r2
 8020130:	d109      	bne.n	8020146 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8020132:	697b      	ldr	r3, [r7, #20]
 8020134:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8020138:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 802013a:	683b      	ldr	r3, [r7, #0]
 802013c:	695b      	ldr	r3, [r3, #20]
 802013e:	021b      	lsls	r3, r3, #8
 8020140:	697a      	ldr	r2, [r7, #20]
 8020142:	4313      	orrs	r3, r2
 8020144:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020146:	687b      	ldr	r3, [r7, #4]
 8020148:	697a      	ldr	r2, [r7, #20]
 802014a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 802014c:	687b      	ldr	r3, [r7, #4]
 802014e:	68fa      	ldr	r2, [r7, #12]
 8020150:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8020152:	683b      	ldr	r3, [r7, #0]
 8020154:	685a      	ldr	r2, [r3, #4]
 8020156:	687b      	ldr	r3, [r7, #4]
 8020158:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802015a:	687b      	ldr	r3, [r7, #4]
 802015c:	693a      	ldr	r2, [r7, #16]
 802015e:	621a      	str	r2, [r3, #32]
}
 8020160:	bf00      	nop
 8020162:	371c      	adds	r7, #28
 8020164:	46bd      	mov	sp, r7
 8020166:	f85d 7b04 	ldr.w	r7, [sp], #4
 802016a:	4770      	bx	lr
 802016c:	fffeff8f 	.word	0xfffeff8f
 8020170:	40010000 	.word	0x40010000
 8020174:	40010400 	.word	0x40010400
 8020178:	40014000 	.word	0x40014000
 802017c:	40014400 	.word	0x40014400
 8020180:	40014800 	.word	0x40014800

08020184 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8020184:	b480      	push	{r7}
 8020186:	b087      	sub	sp, #28
 8020188:	af00      	add	r7, sp, #0
 802018a:	6078      	str	r0, [r7, #4]
 802018c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802018e:	687b      	ldr	r3, [r7, #4]
 8020190:	6a1b      	ldr	r3, [r3, #32]
 8020192:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8020194:	687b      	ldr	r3, [r7, #4]
 8020196:	6a1b      	ldr	r3, [r3, #32]
 8020198:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 802019c:	687b      	ldr	r3, [r7, #4]
 802019e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80201a0:	687b      	ldr	r3, [r7, #4]
 80201a2:	685b      	ldr	r3, [r3, #4]
 80201a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80201a6:	687b      	ldr	r3, [r7, #4]
 80201a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80201aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80201ac:	68fa      	ldr	r2, [r7, #12]
 80201ae:	4b22      	ldr	r3, [pc, #136]	@ (8020238 <TIM_OC6_SetConfig+0xb4>)
 80201b0:	4013      	ands	r3, r2
 80201b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80201b4:	683b      	ldr	r3, [r7, #0]
 80201b6:	681b      	ldr	r3, [r3, #0]
 80201b8:	021b      	lsls	r3, r3, #8
 80201ba:	68fa      	ldr	r2, [r7, #12]
 80201bc:	4313      	orrs	r3, r2
 80201be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80201c0:	693b      	ldr	r3, [r7, #16]
 80201c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80201c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80201c8:	683b      	ldr	r3, [r7, #0]
 80201ca:	689b      	ldr	r3, [r3, #8]
 80201cc:	051b      	lsls	r3, r3, #20
 80201ce:	693a      	ldr	r2, [r7, #16]
 80201d0:	4313      	orrs	r3, r2
 80201d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80201d4:	687b      	ldr	r3, [r7, #4]
 80201d6:	4a19      	ldr	r2, [pc, #100]	@ (802023c <TIM_OC6_SetConfig+0xb8>)
 80201d8:	4293      	cmp	r3, r2
 80201da:	d00f      	beq.n	80201fc <TIM_OC6_SetConfig+0x78>
 80201dc:	687b      	ldr	r3, [r7, #4]
 80201de:	4a18      	ldr	r2, [pc, #96]	@ (8020240 <TIM_OC6_SetConfig+0xbc>)
 80201e0:	4293      	cmp	r3, r2
 80201e2:	d00b      	beq.n	80201fc <TIM_OC6_SetConfig+0x78>
 80201e4:	687b      	ldr	r3, [r7, #4]
 80201e6:	4a17      	ldr	r2, [pc, #92]	@ (8020244 <TIM_OC6_SetConfig+0xc0>)
 80201e8:	4293      	cmp	r3, r2
 80201ea:	d007      	beq.n	80201fc <TIM_OC6_SetConfig+0x78>
 80201ec:	687b      	ldr	r3, [r7, #4]
 80201ee:	4a16      	ldr	r2, [pc, #88]	@ (8020248 <TIM_OC6_SetConfig+0xc4>)
 80201f0:	4293      	cmp	r3, r2
 80201f2:	d003      	beq.n	80201fc <TIM_OC6_SetConfig+0x78>
 80201f4:	687b      	ldr	r3, [r7, #4]
 80201f6:	4a15      	ldr	r2, [pc, #84]	@ (802024c <TIM_OC6_SetConfig+0xc8>)
 80201f8:	4293      	cmp	r3, r2
 80201fa:	d109      	bne.n	8020210 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80201fc:	697b      	ldr	r3, [r7, #20]
 80201fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8020202:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8020204:	683b      	ldr	r3, [r7, #0]
 8020206:	695b      	ldr	r3, [r3, #20]
 8020208:	029b      	lsls	r3, r3, #10
 802020a:	697a      	ldr	r2, [r7, #20]
 802020c:	4313      	orrs	r3, r2
 802020e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020210:	687b      	ldr	r3, [r7, #4]
 8020212:	697a      	ldr	r2, [r7, #20]
 8020214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8020216:	687b      	ldr	r3, [r7, #4]
 8020218:	68fa      	ldr	r2, [r7, #12]
 802021a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 802021c:	683b      	ldr	r3, [r7, #0]
 802021e:	685a      	ldr	r2, [r3, #4]
 8020220:	687b      	ldr	r3, [r7, #4]
 8020222:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	693a      	ldr	r2, [r7, #16]
 8020228:	621a      	str	r2, [r3, #32]
}
 802022a:	bf00      	nop
 802022c:	371c      	adds	r7, #28
 802022e:	46bd      	mov	sp, r7
 8020230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020234:	4770      	bx	lr
 8020236:	bf00      	nop
 8020238:	feff8fff 	.word	0xfeff8fff
 802023c:	40010000 	.word	0x40010000
 8020240:	40010400 	.word	0x40010400
 8020244:	40014000 	.word	0x40014000
 8020248:	40014400 	.word	0x40014400
 802024c:	40014800 	.word	0x40014800

08020250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020250:	b480      	push	{r7}
 8020252:	b087      	sub	sp, #28
 8020254:	af00      	add	r7, sp, #0
 8020256:	60f8      	str	r0, [r7, #12]
 8020258:	60b9      	str	r1, [r7, #8]
 802025a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802025c:	68fb      	ldr	r3, [r7, #12]
 802025e:	6a1b      	ldr	r3, [r3, #32]
 8020260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020262:	68fb      	ldr	r3, [r7, #12]
 8020264:	6a1b      	ldr	r3, [r3, #32]
 8020266:	f023 0201 	bic.w	r2, r3, #1
 802026a:	68fb      	ldr	r3, [r7, #12]
 802026c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802026e:	68fb      	ldr	r3, [r7, #12]
 8020270:	699b      	ldr	r3, [r3, #24]
 8020272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8020274:	693b      	ldr	r3, [r7, #16]
 8020276:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 802027a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802027c:	687b      	ldr	r3, [r7, #4]
 802027e:	011b      	lsls	r3, r3, #4
 8020280:	693a      	ldr	r2, [r7, #16]
 8020282:	4313      	orrs	r3, r2
 8020284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8020286:	697b      	ldr	r3, [r7, #20]
 8020288:	f023 030a 	bic.w	r3, r3, #10
 802028c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802028e:	697a      	ldr	r2, [r7, #20]
 8020290:	68bb      	ldr	r3, [r7, #8]
 8020292:	4313      	orrs	r3, r2
 8020294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8020296:	68fb      	ldr	r3, [r7, #12]
 8020298:	693a      	ldr	r2, [r7, #16]
 802029a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802029c:	68fb      	ldr	r3, [r7, #12]
 802029e:	697a      	ldr	r2, [r7, #20]
 80202a0:	621a      	str	r2, [r3, #32]
}
 80202a2:	bf00      	nop
 80202a4:	371c      	adds	r7, #28
 80202a6:	46bd      	mov	sp, r7
 80202a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202ac:	4770      	bx	lr

080202ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80202ae:	b480      	push	{r7}
 80202b0:	b087      	sub	sp, #28
 80202b2:	af00      	add	r7, sp, #0
 80202b4:	60f8      	str	r0, [r7, #12]
 80202b6:	60b9      	str	r1, [r7, #8]
 80202b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80202ba:	68fb      	ldr	r3, [r7, #12]
 80202bc:	6a1b      	ldr	r3, [r3, #32]
 80202be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80202c0:	68fb      	ldr	r3, [r7, #12]
 80202c2:	6a1b      	ldr	r3, [r3, #32]
 80202c4:	f023 0210 	bic.w	r2, r3, #16
 80202c8:	68fb      	ldr	r3, [r7, #12]
 80202ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80202cc:	68fb      	ldr	r3, [r7, #12]
 80202ce:	699b      	ldr	r3, [r3, #24]
 80202d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80202d2:	693b      	ldr	r3, [r7, #16]
 80202d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80202d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	031b      	lsls	r3, r3, #12
 80202de:	693a      	ldr	r2, [r7, #16]
 80202e0:	4313      	orrs	r3, r2
 80202e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80202e4:	697b      	ldr	r3, [r7, #20]
 80202e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80202ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80202ec:	68bb      	ldr	r3, [r7, #8]
 80202ee:	011b      	lsls	r3, r3, #4
 80202f0:	697a      	ldr	r2, [r7, #20]
 80202f2:	4313      	orrs	r3, r2
 80202f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80202f6:	68fb      	ldr	r3, [r7, #12]
 80202f8:	693a      	ldr	r2, [r7, #16]
 80202fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80202fc:	68fb      	ldr	r3, [r7, #12]
 80202fe:	697a      	ldr	r2, [r7, #20]
 8020300:	621a      	str	r2, [r3, #32]
}
 8020302:	bf00      	nop
 8020304:	371c      	adds	r7, #28
 8020306:	46bd      	mov	sp, r7
 8020308:	f85d 7b04 	ldr.w	r7, [sp], #4
 802030c:	4770      	bx	lr
	...

08020310 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8020310:	b480      	push	{r7}
 8020312:	b085      	sub	sp, #20
 8020314:	af00      	add	r7, sp, #0
 8020316:	6078      	str	r0, [r7, #4]
 8020318:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802031a:	687b      	ldr	r3, [r7, #4]
 802031c:	689b      	ldr	r3, [r3, #8]
 802031e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8020320:	68fa      	ldr	r2, [r7, #12]
 8020322:	4b09      	ldr	r3, [pc, #36]	@ (8020348 <TIM_ITRx_SetConfig+0x38>)
 8020324:	4013      	ands	r3, r2
 8020326:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8020328:	683a      	ldr	r2, [r7, #0]
 802032a:	68fb      	ldr	r3, [r7, #12]
 802032c:	4313      	orrs	r3, r2
 802032e:	f043 0307 	orr.w	r3, r3, #7
 8020332:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020334:	687b      	ldr	r3, [r7, #4]
 8020336:	68fa      	ldr	r2, [r7, #12]
 8020338:	609a      	str	r2, [r3, #8]
}
 802033a:	bf00      	nop
 802033c:	3714      	adds	r7, #20
 802033e:	46bd      	mov	sp, r7
 8020340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020344:	4770      	bx	lr
 8020346:	bf00      	nop
 8020348:	ffcfff8f 	.word	0xffcfff8f

0802034c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802034c:	b480      	push	{r7}
 802034e:	b087      	sub	sp, #28
 8020350:	af00      	add	r7, sp, #0
 8020352:	60f8      	str	r0, [r7, #12]
 8020354:	60b9      	str	r1, [r7, #8]
 8020356:	607a      	str	r2, [r7, #4]
 8020358:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802035a:	68fb      	ldr	r3, [r7, #12]
 802035c:	689b      	ldr	r3, [r3, #8]
 802035e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020360:	697b      	ldr	r3, [r7, #20]
 8020362:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8020366:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8020368:	683b      	ldr	r3, [r7, #0]
 802036a:	021a      	lsls	r2, r3, #8
 802036c:	687b      	ldr	r3, [r7, #4]
 802036e:	431a      	orrs	r2, r3
 8020370:	68bb      	ldr	r3, [r7, #8]
 8020372:	4313      	orrs	r3, r2
 8020374:	697a      	ldr	r2, [r7, #20]
 8020376:	4313      	orrs	r3, r2
 8020378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802037a:	68fb      	ldr	r3, [r7, #12]
 802037c:	697a      	ldr	r2, [r7, #20]
 802037e:	609a      	str	r2, [r3, #8]
}
 8020380:	bf00      	nop
 8020382:	371c      	adds	r7, #28
 8020384:	46bd      	mov	sp, r7
 8020386:	f85d 7b04 	ldr.w	r7, [sp], #4
 802038a:	4770      	bx	lr

0802038c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 802038c:	b480      	push	{r7}
 802038e:	b085      	sub	sp, #20
 8020390:	af00      	add	r7, sp, #0
 8020392:	6078      	str	r0, [r7, #4]
 8020394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8020396:	687b      	ldr	r3, [r7, #4]
 8020398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 802039c:	2b01      	cmp	r3, #1
 802039e:	d101      	bne.n	80203a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80203a0:	2302      	movs	r3, #2
 80203a2:	e06d      	b.n	8020480 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80203a4:	687b      	ldr	r3, [r7, #4]
 80203a6:	2201      	movs	r2, #1
 80203a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80203ac:	687b      	ldr	r3, [r7, #4]
 80203ae:	2202      	movs	r2, #2
 80203b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80203b4:	687b      	ldr	r3, [r7, #4]
 80203b6:	681b      	ldr	r3, [r3, #0]
 80203b8:	685b      	ldr	r3, [r3, #4]
 80203ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80203bc:	687b      	ldr	r3, [r7, #4]
 80203be:	681b      	ldr	r3, [r3, #0]
 80203c0:	689b      	ldr	r3, [r3, #8]
 80203c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80203c4:	687b      	ldr	r3, [r7, #4]
 80203c6:	681b      	ldr	r3, [r3, #0]
 80203c8:	4a30      	ldr	r2, [pc, #192]	@ (802048c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80203ca:	4293      	cmp	r3, r2
 80203cc:	d004      	beq.n	80203d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80203ce:	687b      	ldr	r3, [r7, #4]
 80203d0:	681b      	ldr	r3, [r3, #0]
 80203d2:	4a2f      	ldr	r2, [pc, #188]	@ (8020490 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80203d4:	4293      	cmp	r3, r2
 80203d6:	d108      	bne.n	80203ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80203d8:	68fb      	ldr	r3, [r7, #12]
 80203da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80203de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80203e0:	683b      	ldr	r3, [r7, #0]
 80203e2:	685b      	ldr	r3, [r3, #4]
 80203e4:	68fa      	ldr	r2, [r7, #12]
 80203e6:	4313      	orrs	r3, r2
 80203e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80203ea:	68fb      	ldr	r3, [r7, #12]
 80203ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80203f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80203f2:	683b      	ldr	r3, [r7, #0]
 80203f4:	681b      	ldr	r3, [r3, #0]
 80203f6:	68fa      	ldr	r2, [r7, #12]
 80203f8:	4313      	orrs	r3, r2
 80203fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80203fc:	687b      	ldr	r3, [r7, #4]
 80203fe:	681b      	ldr	r3, [r3, #0]
 8020400:	68fa      	ldr	r2, [r7, #12]
 8020402:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020404:	687b      	ldr	r3, [r7, #4]
 8020406:	681b      	ldr	r3, [r3, #0]
 8020408:	4a20      	ldr	r2, [pc, #128]	@ (802048c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 802040a:	4293      	cmp	r3, r2
 802040c:	d022      	beq.n	8020454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802040e:	687b      	ldr	r3, [r7, #4]
 8020410:	681b      	ldr	r3, [r3, #0]
 8020412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020416:	d01d      	beq.n	8020454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020418:	687b      	ldr	r3, [r7, #4]
 802041a:	681b      	ldr	r3, [r3, #0]
 802041c:	4a1d      	ldr	r2, [pc, #116]	@ (8020494 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 802041e:	4293      	cmp	r3, r2
 8020420:	d018      	beq.n	8020454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020422:	687b      	ldr	r3, [r7, #4]
 8020424:	681b      	ldr	r3, [r3, #0]
 8020426:	4a1c      	ldr	r2, [pc, #112]	@ (8020498 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8020428:	4293      	cmp	r3, r2
 802042a:	d013      	beq.n	8020454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802042c:	687b      	ldr	r3, [r7, #4]
 802042e:	681b      	ldr	r3, [r3, #0]
 8020430:	4a1a      	ldr	r2, [pc, #104]	@ (802049c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8020432:	4293      	cmp	r3, r2
 8020434:	d00e      	beq.n	8020454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020436:	687b      	ldr	r3, [r7, #4]
 8020438:	681b      	ldr	r3, [r3, #0]
 802043a:	4a15      	ldr	r2, [pc, #84]	@ (8020490 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 802043c:	4293      	cmp	r3, r2
 802043e:	d009      	beq.n	8020454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020440:	687b      	ldr	r3, [r7, #4]
 8020442:	681b      	ldr	r3, [r3, #0]
 8020444:	4a16      	ldr	r2, [pc, #88]	@ (80204a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8020446:	4293      	cmp	r3, r2
 8020448:	d004      	beq.n	8020454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802044a:	687b      	ldr	r3, [r7, #4]
 802044c:	681b      	ldr	r3, [r3, #0]
 802044e:	4a15      	ldr	r2, [pc, #84]	@ (80204a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8020450:	4293      	cmp	r3, r2
 8020452:	d10c      	bne.n	802046e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020454:	68bb      	ldr	r3, [r7, #8]
 8020456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802045a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802045c:	683b      	ldr	r3, [r7, #0]
 802045e:	689b      	ldr	r3, [r3, #8]
 8020460:	68ba      	ldr	r2, [r7, #8]
 8020462:	4313      	orrs	r3, r2
 8020464:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8020466:	687b      	ldr	r3, [r7, #4]
 8020468:	681b      	ldr	r3, [r3, #0]
 802046a:	68ba      	ldr	r2, [r7, #8]
 802046c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802046e:	687b      	ldr	r3, [r7, #4]
 8020470:	2201      	movs	r2, #1
 8020472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8020476:	687b      	ldr	r3, [r7, #4]
 8020478:	2200      	movs	r2, #0
 802047a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 802047e:	2300      	movs	r3, #0
}
 8020480:	4618      	mov	r0, r3
 8020482:	3714      	adds	r7, #20
 8020484:	46bd      	mov	sp, r7
 8020486:	f85d 7b04 	ldr.w	r7, [sp], #4
 802048a:	4770      	bx	lr
 802048c:	40010000 	.word	0x40010000
 8020490:	40010400 	.word	0x40010400
 8020494:	40000400 	.word	0x40000400
 8020498:	40000800 	.word	0x40000800
 802049c:	40000c00 	.word	0x40000c00
 80204a0:	40001800 	.word	0x40001800
 80204a4:	40014000 	.word	0x40014000

080204a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80204a8:	b580      	push	{r7, lr}
 80204aa:	b082      	sub	sp, #8
 80204ac:	af00      	add	r7, sp, #0
 80204ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80204b0:	687b      	ldr	r3, [r7, #4]
 80204b2:	2b00      	cmp	r3, #0
 80204b4:	d101      	bne.n	80204ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80204b6:	2301      	movs	r3, #1
 80204b8:	e042      	b.n	8020540 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80204ba:	687b      	ldr	r3, [r7, #4]
 80204bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80204c0:	2b00      	cmp	r3, #0
 80204c2:	d106      	bne.n	80204d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80204c4:	687b      	ldr	r3, [r7, #4]
 80204c6:	2200      	movs	r2, #0
 80204c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80204cc:	6878      	ldr	r0, [r7, #4]
 80204ce:	f7e1 ff4d 	bl	800236c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80204d2:	687b      	ldr	r3, [r7, #4]
 80204d4:	2224      	movs	r2, #36	@ 0x24
 80204d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80204da:	687b      	ldr	r3, [r7, #4]
 80204dc:	681b      	ldr	r3, [r3, #0]
 80204de:	681a      	ldr	r2, [r3, #0]
 80204e0:	687b      	ldr	r3, [r7, #4]
 80204e2:	681b      	ldr	r3, [r3, #0]
 80204e4:	f022 0201 	bic.w	r2, r2, #1
 80204e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80204ea:	687b      	ldr	r3, [r7, #4]
 80204ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80204ee:	2b00      	cmp	r3, #0
 80204f0:	d002      	beq.n	80204f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80204f2:	6878      	ldr	r0, [r7, #4]
 80204f4:	f000 fd90 	bl	8021018 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80204f8:	6878      	ldr	r0, [r7, #4]
 80204fa:	f000 f825 	bl	8020548 <UART_SetConfig>
 80204fe:	4603      	mov	r3, r0
 8020500:	2b01      	cmp	r3, #1
 8020502:	d101      	bne.n	8020508 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8020504:	2301      	movs	r3, #1
 8020506:	e01b      	b.n	8020540 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8020508:	687b      	ldr	r3, [r7, #4]
 802050a:	681b      	ldr	r3, [r3, #0]
 802050c:	685a      	ldr	r2, [r3, #4]
 802050e:	687b      	ldr	r3, [r7, #4]
 8020510:	681b      	ldr	r3, [r3, #0]
 8020512:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8020516:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8020518:	687b      	ldr	r3, [r7, #4]
 802051a:	681b      	ldr	r3, [r3, #0]
 802051c:	689a      	ldr	r2, [r3, #8]
 802051e:	687b      	ldr	r3, [r7, #4]
 8020520:	681b      	ldr	r3, [r3, #0]
 8020522:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8020526:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8020528:	687b      	ldr	r3, [r7, #4]
 802052a:	681b      	ldr	r3, [r3, #0]
 802052c:	681a      	ldr	r2, [r3, #0]
 802052e:	687b      	ldr	r3, [r7, #4]
 8020530:	681b      	ldr	r3, [r3, #0]
 8020532:	f042 0201 	orr.w	r2, r2, #1
 8020536:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8020538:	6878      	ldr	r0, [r7, #4]
 802053a:	f000 fe0f 	bl	802115c <UART_CheckIdleState>
 802053e:	4603      	mov	r3, r0
}
 8020540:	4618      	mov	r0, r3
 8020542:	3708      	adds	r7, #8
 8020544:	46bd      	mov	sp, r7
 8020546:	bd80      	pop	{r7, pc}

08020548 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8020548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802054c:	b092      	sub	sp, #72	@ 0x48
 802054e:	af00      	add	r7, sp, #0
 8020550:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8020552:	2300      	movs	r3, #0
 8020554:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8020558:	697b      	ldr	r3, [r7, #20]
 802055a:	689a      	ldr	r2, [r3, #8]
 802055c:	697b      	ldr	r3, [r7, #20]
 802055e:	691b      	ldr	r3, [r3, #16]
 8020560:	431a      	orrs	r2, r3
 8020562:	697b      	ldr	r3, [r7, #20]
 8020564:	695b      	ldr	r3, [r3, #20]
 8020566:	431a      	orrs	r2, r3
 8020568:	697b      	ldr	r3, [r7, #20]
 802056a:	69db      	ldr	r3, [r3, #28]
 802056c:	4313      	orrs	r3, r2
 802056e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8020570:	697b      	ldr	r3, [r7, #20]
 8020572:	681b      	ldr	r3, [r3, #0]
 8020574:	681a      	ldr	r2, [r3, #0]
 8020576:	4bbe      	ldr	r3, [pc, #760]	@ (8020870 <UART_SetConfig+0x328>)
 8020578:	4013      	ands	r3, r2
 802057a:	697a      	ldr	r2, [r7, #20]
 802057c:	6812      	ldr	r2, [r2, #0]
 802057e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8020580:	430b      	orrs	r3, r1
 8020582:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8020584:	697b      	ldr	r3, [r7, #20]
 8020586:	681b      	ldr	r3, [r3, #0]
 8020588:	685b      	ldr	r3, [r3, #4]
 802058a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 802058e:	697b      	ldr	r3, [r7, #20]
 8020590:	68da      	ldr	r2, [r3, #12]
 8020592:	697b      	ldr	r3, [r7, #20]
 8020594:	681b      	ldr	r3, [r3, #0]
 8020596:	430a      	orrs	r2, r1
 8020598:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 802059a:	697b      	ldr	r3, [r7, #20]
 802059c:	699b      	ldr	r3, [r3, #24]
 802059e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80205a0:	697b      	ldr	r3, [r7, #20]
 80205a2:	681b      	ldr	r3, [r3, #0]
 80205a4:	4ab3      	ldr	r2, [pc, #716]	@ (8020874 <UART_SetConfig+0x32c>)
 80205a6:	4293      	cmp	r3, r2
 80205a8:	d004      	beq.n	80205b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80205aa:	697b      	ldr	r3, [r7, #20]
 80205ac:	6a1b      	ldr	r3, [r3, #32]
 80205ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80205b0:	4313      	orrs	r3, r2
 80205b2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80205b4:	697b      	ldr	r3, [r7, #20]
 80205b6:	681b      	ldr	r3, [r3, #0]
 80205b8:	689a      	ldr	r2, [r3, #8]
 80205ba:	4baf      	ldr	r3, [pc, #700]	@ (8020878 <UART_SetConfig+0x330>)
 80205bc:	4013      	ands	r3, r2
 80205be:	697a      	ldr	r2, [r7, #20]
 80205c0:	6812      	ldr	r2, [r2, #0]
 80205c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80205c4:	430b      	orrs	r3, r1
 80205c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80205c8:	697b      	ldr	r3, [r7, #20]
 80205ca:	681b      	ldr	r3, [r3, #0]
 80205cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80205ce:	f023 010f 	bic.w	r1, r3, #15
 80205d2:	697b      	ldr	r3, [r7, #20]
 80205d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80205d6:	697b      	ldr	r3, [r7, #20]
 80205d8:	681b      	ldr	r3, [r3, #0]
 80205da:	430a      	orrs	r2, r1
 80205dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80205de:	697b      	ldr	r3, [r7, #20]
 80205e0:	681b      	ldr	r3, [r3, #0]
 80205e2:	4aa6      	ldr	r2, [pc, #664]	@ (802087c <UART_SetConfig+0x334>)
 80205e4:	4293      	cmp	r3, r2
 80205e6:	d177      	bne.n	80206d8 <UART_SetConfig+0x190>
 80205e8:	4ba5      	ldr	r3, [pc, #660]	@ (8020880 <UART_SetConfig+0x338>)
 80205ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80205ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80205f0:	2b28      	cmp	r3, #40	@ 0x28
 80205f2:	d86d      	bhi.n	80206d0 <UART_SetConfig+0x188>
 80205f4:	a201      	add	r2, pc, #4	@ (adr r2, 80205fc <UART_SetConfig+0xb4>)
 80205f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80205fa:	bf00      	nop
 80205fc:	080206a1 	.word	0x080206a1
 8020600:	080206d1 	.word	0x080206d1
 8020604:	080206d1 	.word	0x080206d1
 8020608:	080206d1 	.word	0x080206d1
 802060c:	080206d1 	.word	0x080206d1
 8020610:	080206d1 	.word	0x080206d1
 8020614:	080206d1 	.word	0x080206d1
 8020618:	080206d1 	.word	0x080206d1
 802061c:	080206a9 	.word	0x080206a9
 8020620:	080206d1 	.word	0x080206d1
 8020624:	080206d1 	.word	0x080206d1
 8020628:	080206d1 	.word	0x080206d1
 802062c:	080206d1 	.word	0x080206d1
 8020630:	080206d1 	.word	0x080206d1
 8020634:	080206d1 	.word	0x080206d1
 8020638:	080206d1 	.word	0x080206d1
 802063c:	080206b1 	.word	0x080206b1
 8020640:	080206d1 	.word	0x080206d1
 8020644:	080206d1 	.word	0x080206d1
 8020648:	080206d1 	.word	0x080206d1
 802064c:	080206d1 	.word	0x080206d1
 8020650:	080206d1 	.word	0x080206d1
 8020654:	080206d1 	.word	0x080206d1
 8020658:	080206d1 	.word	0x080206d1
 802065c:	080206b9 	.word	0x080206b9
 8020660:	080206d1 	.word	0x080206d1
 8020664:	080206d1 	.word	0x080206d1
 8020668:	080206d1 	.word	0x080206d1
 802066c:	080206d1 	.word	0x080206d1
 8020670:	080206d1 	.word	0x080206d1
 8020674:	080206d1 	.word	0x080206d1
 8020678:	080206d1 	.word	0x080206d1
 802067c:	080206c1 	.word	0x080206c1
 8020680:	080206d1 	.word	0x080206d1
 8020684:	080206d1 	.word	0x080206d1
 8020688:	080206d1 	.word	0x080206d1
 802068c:	080206d1 	.word	0x080206d1
 8020690:	080206d1 	.word	0x080206d1
 8020694:	080206d1 	.word	0x080206d1
 8020698:	080206d1 	.word	0x080206d1
 802069c:	080206c9 	.word	0x080206c9
 80206a0:	2301      	movs	r3, #1
 80206a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80206a6:	e222      	b.n	8020aee <UART_SetConfig+0x5a6>
 80206a8:	2304      	movs	r3, #4
 80206aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80206ae:	e21e      	b.n	8020aee <UART_SetConfig+0x5a6>
 80206b0:	2308      	movs	r3, #8
 80206b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80206b6:	e21a      	b.n	8020aee <UART_SetConfig+0x5a6>
 80206b8:	2310      	movs	r3, #16
 80206ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80206be:	e216      	b.n	8020aee <UART_SetConfig+0x5a6>
 80206c0:	2320      	movs	r3, #32
 80206c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80206c6:	e212      	b.n	8020aee <UART_SetConfig+0x5a6>
 80206c8:	2340      	movs	r3, #64	@ 0x40
 80206ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80206ce:	e20e      	b.n	8020aee <UART_SetConfig+0x5a6>
 80206d0:	2380      	movs	r3, #128	@ 0x80
 80206d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80206d6:	e20a      	b.n	8020aee <UART_SetConfig+0x5a6>
 80206d8:	697b      	ldr	r3, [r7, #20]
 80206da:	681b      	ldr	r3, [r3, #0]
 80206dc:	4a69      	ldr	r2, [pc, #420]	@ (8020884 <UART_SetConfig+0x33c>)
 80206de:	4293      	cmp	r3, r2
 80206e0:	d130      	bne.n	8020744 <UART_SetConfig+0x1fc>
 80206e2:	4b67      	ldr	r3, [pc, #412]	@ (8020880 <UART_SetConfig+0x338>)
 80206e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80206e6:	f003 0307 	and.w	r3, r3, #7
 80206ea:	2b05      	cmp	r3, #5
 80206ec:	d826      	bhi.n	802073c <UART_SetConfig+0x1f4>
 80206ee:	a201      	add	r2, pc, #4	@ (adr r2, 80206f4 <UART_SetConfig+0x1ac>)
 80206f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80206f4:	0802070d 	.word	0x0802070d
 80206f8:	08020715 	.word	0x08020715
 80206fc:	0802071d 	.word	0x0802071d
 8020700:	08020725 	.word	0x08020725
 8020704:	0802072d 	.word	0x0802072d
 8020708:	08020735 	.word	0x08020735
 802070c:	2300      	movs	r3, #0
 802070e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020712:	e1ec      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020714:	2304      	movs	r3, #4
 8020716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802071a:	e1e8      	b.n	8020aee <UART_SetConfig+0x5a6>
 802071c:	2308      	movs	r3, #8
 802071e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020722:	e1e4      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020724:	2310      	movs	r3, #16
 8020726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802072a:	e1e0      	b.n	8020aee <UART_SetConfig+0x5a6>
 802072c:	2320      	movs	r3, #32
 802072e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020732:	e1dc      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020734:	2340      	movs	r3, #64	@ 0x40
 8020736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802073a:	e1d8      	b.n	8020aee <UART_SetConfig+0x5a6>
 802073c:	2380      	movs	r3, #128	@ 0x80
 802073e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020742:	e1d4      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020744:	697b      	ldr	r3, [r7, #20]
 8020746:	681b      	ldr	r3, [r3, #0]
 8020748:	4a4f      	ldr	r2, [pc, #316]	@ (8020888 <UART_SetConfig+0x340>)
 802074a:	4293      	cmp	r3, r2
 802074c:	d130      	bne.n	80207b0 <UART_SetConfig+0x268>
 802074e:	4b4c      	ldr	r3, [pc, #304]	@ (8020880 <UART_SetConfig+0x338>)
 8020750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020752:	f003 0307 	and.w	r3, r3, #7
 8020756:	2b05      	cmp	r3, #5
 8020758:	d826      	bhi.n	80207a8 <UART_SetConfig+0x260>
 802075a:	a201      	add	r2, pc, #4	@ (adr r2, 8020760 <UART_SetConfig+0x218>)
 802075c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020760:	08020779 	.word	0x08020779
 8020764:	08020781 	.word	0x08020781
 8020768:	08020789 	.word	0x08020789
 802076c:	08020791 	.word	0x08020791
 8020770:	08020799 	.word	0x08020799
 8020774:	080207a1 	.word	0x080207a1
 8020778:	2300      	movs	r3, #0
 802077a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802077e:	e1b6      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020780:	2304      	movs	r3, #4
 8020782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020786:	e1b2      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020788:	2308      	movs	r3, #8
 802078a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802078e:	e1ae      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020790:	2310      	movs	r3, #16
 8020792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020796:	e1aa      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020798:	2320      	movs	r3, #32
 802079a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802079e:	e1a6      	b.n	8020aee <UART_SetConfig+0x5a6>
 80207a0:	2340      	movs	r3, #64	@ 0x40
 80207a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207a6:	e1a2      	b.n	8020aee <UART_SetConfig+0x5a6>
 80207a8:	2380      	movs	r3, #128	@ 0x80
 80207aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207ae:	e19e      	b.n	8020aee <UART_SetConfig+0x5a6>
 80207b0:	697b      	ldr	r3, [r7, #20]
 80207b2:	681b      	ldr	r3, [r3, #0]
 80207b4:	4a35      	ldr	r2, [pc, #212]	@ (802088c <UART_SetConfig+0x344>)
 80207b6:	4293      	cmp	r3, r2
 80207b8:	d130      	bne.n	802081c <UART_SetConfig+0x2d4>
 80207ba:	4b31      	ldr	r3, [pc, #196]	@ (8020880 <UART_SetConfig+0x338>)
 80207bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80207be:	f003 0307 	and.w	r3, r3, #7
 80207c2:	2b05      	cmp	r3, #5
 80207c4:	d826      	bhi.n	8020814 <UART_SetConfig+0x2cc>
 80207c6:	a201      	add	r2, pc, #4	@ (adr r2, 80207cc <UART_SetConfig+0x284>)
 80207c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80207cc:	080207e5 	.word	0x080207e5
 80207d0:	080207ed 	.word	0x080207ed
 80207d4:	080207f5 	.word	0x080207f5
 80207d8:	080207fd 	.word	0x080207fd
 80207dc:	08020805 	.word	0x08020805
 80207e0:	0802080d 	.word	0x0802080d
 80207e4:	2300      	movs	r3, #0
 80207e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207ea:	e180      	b.n	8020aee <UART_SetConfig+0x5a6>
 80207ec:	2304      	movs	r3, #4
 80207ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207f2:	e17c      	b.n	8020aee <UART_SetConfig+0x5a6>
 80207f4:	2308      	movs	r3, #8
 80207f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207fa:	e178      	b.n	8020aee <UART_SetConfig+0x5a6>
 80207fc:	2310      	movs	r3, #16
 80207fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020802:	e174      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020804:	2320      	movs	r3, #32
 8020806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802080a:	e170      	b.n	8020aee <UART_SetConfig+0x5a6>
 802080c:	2340      	movs	r3, #64	@ 0x40
 802080e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020812:	e16c      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020814:	2380      	movs	r3, #128	@ 0x80
 8020816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802081a:	e168      	b.n	8020aee <UART_SetConfig+0x5a6>
 802081c:	697b      	ldr	r3, [r7, #20]
 802081e:	681b      	ldr	r3, [r3, #0]
 8020820:	4a1b      	ldr	r2, [pc, #108]	@ (8020890 <UART_SetConfig+0x348>)
 8020822:	4293      	cmp	r3, r2
 8020824:	d142      	bne.n	80208ac <UART_SetConfig+0x364>
 8020826:	4b16      	ldr	r3, [pc, #88]	@ (8020880 <UART_SetConfig+0x338>)
 8020828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802082a:	f003 0307 	and.w	r3, r3, #7
 802082e:	2b05      	cmp	r3, #5
 8020830:	d838      	bhi.n	80208a4 <UART_SetConfig+0x35c>
 8020832:	a201      	add	r2, pc, #4	@ (adr r2, 8020838 <UART_SetConfig+0x2f0>)
 8020834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020838:	08020851 	.word	0x08020851
 802083c:	08020859 	.word	0x08020859
 8020840:	08020861 	.word	0x08020861
 8020844:	08020869 	.word	0x08020869
 8020848:	08020895 	.word	0x08020895
 802084c:	0802089d 	.word	0x0802089d
 8020850:	2300      	movs	r3, #0
 8020852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020856:	e14a      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020858:	2304      	movs	r3, #4
 802085a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802085e:	e146      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020860:	2308      	movs	r3, #8
 8020862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020866:	e142      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020868:	2310      	movs	r3, #16
 802086a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802086e:	e13e      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020870:	cfff69f3 	.word	0xcfff69f3
 8020874:	58000c00 	.word	0x58000c00
 8020878:	11fff4ff 	.word	0x11fff4ff
 802087c:	40011000 	.word	0x40011000
 8020880:	58024400 	.word	0x58024400
 8020884:	40004400 	.word	0x40004400
 8020888:	40004800 	.word	0x40004800
 802088c:	40004c00 	.word	0x40004c00
 8020890:	40005000 	.word	0x40005000
 8020894:	2320      	movs	r3, #32
 8020896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802089a:	e128      	b.n	8020aee <UART_SetConfig+0x5a6>
 802089c:	2340      	movs	r3, #64	@ 0x40
 802089e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80208a2:	e124      	b.n	8020aee <UART_SetConfig+0x5a6>
 80208a4:	2380      	movs	r3, #128	@ 0x80
 80208a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80208aa:	e120      	b.n	8020aee <UART_SetConfig+0x5a6>
 80208ac:	697b      	ldr	r3, [r7, #20]
 80208ae:	681b      	ldr	r3, [r3, #0]
 80208b0:	4acb      	ldr	r2, [pc, #812]	@ (8020be0 <UART_SetConfig+0x698>)
 80208b2:	4293      	cmp	r3, r2
 80208b4:	d176      	bne.n	80209a4 <UART_SetConfig+0x45c>
 80208b6:	4bcb      	ldr	r3, [pc, #812]	@ (8020be4 <UART_SetConfig+0x69c>)
 80208b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80208ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80208be:	2b28      	cmp	r3, #40	@ 0x28
 80208c0:	d86c      	bhi.n	802099c <UART_SetConfig+0x454>
 80208c2:	a201      	add	r2, pc, #4	@ (adr r2, 80208c8 <UART_SetConfig+0x380>)
 80208c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80208c8:	0802096d 	.word	0x0802096d
 80208cc:	0802099d 	.word	0x0802099d
 80208d0:	0802099d 	.word	0x0802099d
 80208d4:	0802099d 	.word	0x0802099d
 80208d8:	0802099d 	.word	0x0802099d
 80208dc:	0802099d 	.word	0x0802099d
 80208e0:	0802099d 	.word	0x0802099d
 80208e4:	0802099d 	.word	0x0802099d
 80208e8:	08020975 	.word	0x08020975
 80208ec:	0802099d 	.word	0x0802099d
 80208f0:	0802099d 	.word	0x0802099d
 80208f4:	0802099d 	.word	0x0802099d
 80208f8:	0802099d 	.word	0x0802099d
 80208fc:	0802099d 	.word	0x0802099d
 8020900:	0802099d 	.word	0x0802099d
 8020904:	0802099d 	.word	0x0802099d
 8020908:	0802097d 	.word	0x0802097d
 802090c:	0802099d 	.word	0x0802099d
 8020910:	0802099d 	.word	0x0802099d
 8020914:	0802099d 	.word	0x0802099d
 8020918:	0802099d 	.word	0x0802099d
 802091c:	0802099d 	.word	0x0802099d
 8020920:	0802099d 	.word	0x0802099d
 8020924:	0802099d 	.word	0x0802099d
 8020928:	08020985 	.word	0x08020985
 802092c:	0802099d 	.word	0x0802099d
 8020930:	0802099d 	.word	0x0802099d
 8020934:	0802099d 	.word	0x0802099d
 8020938:	0802099d 	.word	0x0802099d
 802093c:	0802099d 	.word	0x0802099d
 8020940:	0802099d 	.word	0x0802099d
 8020944:	0802099d 	.word	0x0802099d
 8020948:	0802098d 	.word	0x0802098d
 802094c:	0802099d 	.word	0x0802099d
 8020950:	0802099d 	.word	0x0802099d
 8020954:	0802099d 	.word	0x0802099d
 8020958:	0802099d 	.word	0x0802099d
 802095c:	0802099d 	.word	0x0802099d
 8020960:	0802099d 	.word	0x0802099d
 8020964:	0802099d 	.word	0x0802099d
 8020968:	08020995 	.word	0x08020995
 802096c:	2301      	movs	r3, #1
 802096e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020972:	e0bc      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020974:	2304      	movs	r3, #4
 8020976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802097a:	e0b8      	b.n	8020aee <UART_SetConfig+0x5a6>
 802097c:	2308      	movs	r3, #8
 802097e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020982:	e0b4      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020984:	2310      	movs	r3, #16
 8020986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802098a:	e0b0      	b.n	8020aee <UART_SetConfig+0x5a6>
 802098c:	2320      	movs	r3, #32
 802098e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020992:	e0ac      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020994:	2340      	movs	r3, #64	@ 0x40
 8020996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802099a:	e0a8      	b.n	8020aee <UART_SetConfig+0x5a6>
 802099c:	2380      	movs	r3, #128	@ 0x80
 802099e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209a2:	e0a4      	b.n	8020aee <UART_SetConfig+0x5a6>
 80209a4:	697b      	ldr	r3, [r7, #20]
 80209a6:	681b      	ldr	r3, [r3, #0]
 80209a8:	4a8f      	ldr	r2, [pc, #572]	@ (8020be8 <UART_SetConfig+0x6a0>)
 80209aa:	4293      	cmp	r3, r2
 80209ac:	d130      	bne.n	8020a10 <UART_SetConfig+0x4c8>
 80209ae:	4b8d      	ldr	r3, [pc, #564]	@ (8020be4 <UART_SetConfig+0x69c>)
 80209b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80209b2:	f003 0307 	and.w	r3, r3, #7
 80209b6:	2b05      	cmp	r3, #5
 80209b8:	d826      	bhi.n	8020a08 <UART_SetConfig+0x4c0>
 80209ba:	a201      	add	r2, pc, #4	@ (adr r2, 80209c0 <UART_SetConfig+0x478>)
 80209bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80209c0:	080209d9 	.word	0x080209d9
 80209c4:	080209e1 	.word	0x080209e1
 80209c8:	080209e9 	.word	0x080209e9
 80209cc:	080209f1 	.word	0x080209f1
 80209d0:	080209f9 	.word	0x080209f9
 80209d4:	08020a01 	.word	0x08020a01
 80209d8:	2300      	movs	r3, #0
 80209da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209de:	e086      	b.n	8020aee <UART_SetConfig+0x5a6>
 80209e0:	2304      	movs	r3, #4
 80209e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209e6:	e082      	b.n	8020aee <UART_SetConfig+0x5a6>
 80209e8:	2308      	movs	r3, #8
 80209ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209ee:	e07e      	b.n	8020aee <UART_SetConfig+0x5a6>
 80209f0:	2310      	movs	r3, #16
 80209f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209f6:	e07a      	b.n	8020aee <UART_SetConfig+0x5a6>
 80209f8:	2320      	movs	r3, #32
 80209fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209fe:	e076      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020a00:	2340      	movs	r3, #64	@ 0x40
 8020a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a06:	e072      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020a08:	2380      	movs	r3, #128	@ 0x80
 8020a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a0e:	e06e      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020a10:	697b      	ldr	r3, [r7, #20]
 8020a12:	681b      	ldr	r3, [r3, #0]
 8020a14:	4a75      	ldr	r2, [pc, #468]	@ (8020bec <UART_SetConfig+0x6a4>)
 8020a16:	4293      	cmp	r3, r2
 8020a18:	d130      	bne.n	8020a7c <UART_SetConfig+0x534>
 8020a1a:	4b72      	ldr	r3, [pc, #456]	@ (8020be4 <UART_SetConfig+0x69c>)
 8020a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020a1e:	f003 0307 	and.w	r3, r3, #7
 8020a22:	2b05      	cmp	r3, #5
 8020a24:	d826      	bhi.n	8020a74 <UART_SetConfig+0x52c>
 8020a26:	a201      	add	r2, pc, #4	@ (adr r2, 8020a2c <UART_SetConfig+0x4e4>)
 8020a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020a2c:	08020a45 	.word	0x08020a45
 8020a30:	08020a4d 	.word	0x08020a4d
 8020a34:	08020a55 	.word	0x08020a55
 8020a38:	08020a5d 	.word	0x08020a5d
 8020a3c:	08020a65 	.word	0x08020a65
 8020a40:	08020a6d 	.word	0x08020a6d
 8020a44:	2300      	movs	r3, #0
 8020a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a4a:	e050      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020a4c:	2304      	movs	r3, #4
 8020a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a52:	e04c      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020a54:	2308      	movs	r3, #8
 8020a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a5a:	e048      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020a5c:	2310      	movs	r3, #16
 8020a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a62:	e044      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020a64:	2320      	movs	r3, #32
 8020a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a6a:	e040      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020a6c:	2340      	movs	r3, #64	@ 0x40
 8020a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a72:	e03c      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020a74:	2380      	movs	r3, #128	@ 0x80
 8020a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a7a:	e038      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020a7c:	697b      	ldr	r3, [r7, #20]
 8020a7e:	681b      	ldr	r3, [r3, #0]
 8020a80:	4a5b      	ldr	r2, [pc, #364]	@ (8020bf0 <UART_SetConfig+0x6a8>)
 8020a82:	4293      	cmp	r3, r2
 8020a84:	d130      	bne.n	8020ae8 <UART_SetConfig+0x5a0>
 8020a86:	4b57      	ldr	r3, [pc, #348]	@ (8020be4 <UART_SetConfig+0x69c>)
 8020a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020a8a:	f003 0307 	and.w	r3, r3, #7
 8020a8e:	2b05      	cmp	r3, #5
 8020a90:	d826      	bhi.n	8020ae0 <UART_SetConfig+0x598>
 8020a92:	a201      	add	r2, pc, #4	@ (adr r2, 8020a98 <UART_SetConfig+0x550>)
 8020a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020a98:	08020ab1 	.word	0x08020ab1
 8020a9c:	08020ab9 	.word	0x08020ab9
 8020aa0:	08020ac1 	.word	0x08020ac1
 8020aa4:	08020ac9 	.word	0x08020ac9
 8020aa8:	08020ad1 	.word	0x08020ad1
 8020aac:	08020ad9 	.word	0x08020ad9
 8020ab0:	2302      	movs	r3, #2
 8020ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ab6:	e01a      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020ab8:	2304      	movs	r3, #4
 8020aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020abe:	e016      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020ac0:	2308      	movs	r3, #8
 8020ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ac6:	e012      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020ac8:	2310      	movs	r3, #16
 8020aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ace:	e00e      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020ad0:	2320      	movs	r3, #32
 8020ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ad6:	e00a      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020ad8:	2340      	movs	r3, #64	@ 0x40
 8020ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ade:	e006      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020ae0:	2380      	movs	r3, #128	@ 0x80
 8020ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ae6:	e002      	b.n	8020aee <UART_SetConfig+0x5a6>
 8020ae8:	2380      	movs	r3, #128	@ 0x80
 8020aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8020aee:	697b      	ldr	r3, [r7, #20]
 8020af0:	681b      	ldr	r3, [r3, #0]
 8020af2:	4a3f      	ldr	r2, [pc, #252]	@ (8020bf0 <UART_SetConfig+0x6a8>)
 8020af4:	4293      	cmp	r3, r2
 8020af6:	f040 80f8 	bne.w	8020cea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8020afa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8020afe:	2b20      	cmp	r3, #32
 8020b00:	dc46      	bgt.n	8020b90 <UART_SetConfig+0x648>
 8020b02:	2b02      	cmp	r3, #2
 8020b04:	f2c0 8082 	blt.w	8020c0c <UART_SetConfig+0x6c4>
 8020b08:	3b02      	subs	r3, #2
 8020b0a:	2b1e      	cmp	r3, #30
 8020b0c:	d87e      	bhi.n	8020c0c <UART_SetConfig+0x6c4>
 8020b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8020b14 <UART_SetConfig+0x5cc>)
 8020b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020b14:	08020b97 	.word	0x08020b97
 8020b18:	08020c0d 	.word	0x08020c0d
 8020b1c:	08020b9f 	.word	0x08020b9f
 8020b20:	08020c0d 	.word	0x08020c0d
 8020b24:	08020c0d 	.word	0x08020c0d
 8020b28:	08020c0d 	.word	0x08020c0d
 8020b2c:	08020baf 	.word	0x08020baf
 8020b30:	08020c0d 	.word	0x08020c0d
 8020b34:	08020c0d 	.word	0x08020c0d
 8020b38:	08020c0d 	.word	0x08020c0d
 8020b3c:	08020c0d 	.word	0x08020c0d
 8020b40:	08020c0d 	.word	0x08020c0d
 8020b44:	08020c0d 	.word	0x08020c0d
 8020b48:	08020c0d 	.word	0x08020c0d
 8020b4c:	08020bbf 	.word	0x08020bbf
 8020b50:	08020c0d 	.word	0x08020c0d
 8020b54:	08020c0d 	.word	0x08020c0d
 8020b58:	08020c0d 	.word	0x08020c0d
 8020b5c:	08020c0d 	.word	0x08020c0d
 8020b60:	08020c0d 	.word	0x08020c0d
 8020b64:	08020c0d 	.word	0x08020c0d
 8020b68:	08020c0d 	.word	0x08020c0d
 8020b6c:	08020c0d 	.word	0x08020c0d
 8020b70:	08020c0d 	.word	0x08020c0d
 8020b74:	08020c0d 	.word	0x08020c0d
 8020b78:	08020c0d 	.word	0x08020c0d
 8020b7c:	08020c0d 	.word	0x08020c0d
 8020b80:	08020c0d 	.word	0x08020c0d
 8020b84:	08020c0d 	.word	0x08020c0d
 8020b88:	08020c0d 	.word	0x08020c0d
 8020b8c:	08020bff 	.word	0x08020bff
 8020b90:	2b40      	cmp	r3, #64	@ 0x40
 8020b92:	d037      	beq.n	8020c04 <UART_SetConfig+0x6bc>
 8020b94:	e03a      	b.n	8020c0c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8020b96:	f7fd fc87 	bl	801e4a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8020b9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020b9c:	e03c      	b.n	8020c18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020ba2:	4618      	mov	r0, r3
 8020ba4:	f7fd fc96 	bl	801e4d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8020ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020bac:	e034      	b.n	8020c18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020bae:	f107 0318 	add.w	r3, r7, #24
 8020bb2:	4618      	mov	r0, r3
 8020bb4:	f7fd fde2 	bl	801e77c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8020bb8:	69fb      	ldr	r3, [r7, #28]
 8020bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020bbc:	e02c      	b.n	8020c18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8020bbe:	4b09      	ldr	r3, [pc, #36]	@ (8020be4 <UART_SetConfig+0x69c>)
 8020bc0:	681b      	ldr	r3, [r3, #0]
 8020bc2:	f003 0320 	and.w	r3, r3, #32
 8020bc6:	2b00      	cmp	r3, #0
 8020bc8:	d016      	beq.n	8020bf8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020bca:	4b06      	ldr	r3, [pc, #24]	@ (8020be4 <UART_SetConfig+0x69c>)
 8020bcc:	681b      	ldr	r3, [r3, #0]
 8020bce:	08db      	lsrs	r3, r3, #3
 8020bd0:	f003 0303 	and.w	r3, r3, #3
 8020bd4:	4a07      	ldr	r2, [pc, #28]	@ (8020bf4 <UART_SetConfig+0x6ac>)
 8020bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8020bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020bdc:	e01c      	b.n	8020c18 <UART_SetConfig+0x6d0>
 8020bde:	bf00      	nop
 8020be0:	40011400 	.word	0x40011400
 8020be4:	58024400 	.word	0x58024400
 8020be8:	40007800 	.word	0x40007800
 8020bec:	40007c00 	.word	0x40007c00
 8020bf0:	58000c00 	.word	0x58000c00
 8020bf4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8020bf8:	4b9d      	ldr	r3, [pc, #628]	@ (8020e70 <UART_SetConfig+0x928>)
 8020bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020bfc:	e00c      	b.n	8020c18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8020bfe:	4b9d      	ldr	r3, [pc, #628]	@ (8020e74 <UART_SetConfig+0x92c>)
 8020c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020c02:	e009      	b.n	8020c18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020c04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020c0a:	e005      	b.n	8020c18 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8020c0c:	2300      	movs	r3, #0
 8020c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8020c10:	2301      	movs	r3, #1
 8020c12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8020c16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8020c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020c1a:	2b00      	cmp	r3, #0
 8020c1c:	f000 81de 	beq.w	8020fdc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8020c20:	697b      	ldr	r3, [r7, #20]
 8020c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020c24:	4a94      	ldr	r2, [pc, #592]	@ (8020e78 <UART_SetConfig+0x930>)
 8020c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020c2a:	461a      	mov	r2, r3
 8020c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020c2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8020c32:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8020c34:	697b      	ldr	r3, [r7, #20]
 8020c36:	685a      	ldr	r2, [r3, #4]
 8020c38:	4613      	mov	r3, r2
 8020c3a:	005b      	lsls	r3, r3, #1
 8020c3c:	4413      	add	r3, r2
 8020c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020c40:	429a      	cmp	r2, r3
 8020c42:	d305      	bcc.n	8020c50 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8020c44:	697b      	ldr	r3, [r7, #20]
 8020c46:	685b      	ldr	r3, [r3, #4]
 8020c48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8020c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020c4c:	429a      	cmp	r2, r3
 8020c4e:	d903      	bls.n	8020c58 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8020c50:	2301      	movs	r3, #1
 8020c52:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8020c56:	e1c1      	b.n	8020fdc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020c5a:	2200      	movs	r2, #0
 8020c5c:	60bb      	str	r3, [r7, #8]
 8020c5e:	60fa      	str	r2, [r7, #12]
 8020c60:	697b      	ldr	r3, [r7, #20]
 8020c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020c64:	4a84      	ldr	r2, [pc, #528]	@ (8020e78 <UART_SetConfig+0x930>)
 8020c66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020c6a:	b29b      	uxth	r3, r3
 8020c6c:	2200      	movs	r2, #0
 8020c6e:	603b      	str	r3, [r7, #0]
 8020c70:	607a      	str	r2, [r7, #4]
 8020c72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020c76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8020c7a:	f7df fb99 	bl	80003b0 <__aeabi_uldivmod>
 8020c7e:	4602      	mov	r2, r0
 8020c80:	460b      	mov	r3, r1
 8020c82:	4610      	mov	r0, r2
 8020c84:	4619      	mov	r1, r3
 8020c86:	f04f 0200 	mov.w	r2, #0
 8020c8a:	f04f 0300 	mov.w	r3, #0
 8020c8e:	020b      	lsls	r3, r1, #8
 8020c90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8020c94:	0202      	lsls	r2, r0, #8
 8020c96:	6979      	ldr	r1, [r7, #20]
 8020c98:	6849      	ldr	r1, [r1, #4]
 8020c9a:	0849      	lsrs	r1, r1, #1
 8020c9c:	2000      	movs	r0, #0
 8020c9e:	460c      	mov	r4, r1
 8020ca0:	4605      	mov	r5, r0
 8020ca2:	eb12 0804 	adds.w	r8, r2, r4
 8020ca6:	eb43 0905 	adc.w	r9, r3, r5
 8020caa:	697b      	ldr	r3, [r7, #20]
 8020cac:	685b      	ldr	r3, [r3, #4]
 8020cae:	2200      	movs	r2, #0
 8020cb0:	469a      	mov	sl, r3
 8020cb2:	4693      	mov	fp, r2
 8020cb4:	4652      	mov	r2, sl
 8020cb6:	465b      	mov	r3, fp
 8020cb8:	4640      	mov	r0, r8
 8020cba:	4649      	mov	r1, r9
 8020cbc:	f7df fb78 	bl	80003b0 <__aeabi_uldivmod>
 8020cc0:	4602      	mov	r2, r0
 8020cc2:	460b      	mov	r3, r1
 8020cc4:	4613      	mov	r3, r2
 8020cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8020cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020cca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020cce:	d308      	bcc.n	8020ce2 <UART_SetConfig+0x79a>
 8020cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020cd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020cd6:	d204      	bcs.n	8020ce2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8020cd8:	697b      	ldr	r3, [r7, #20]
 8020cda:	681b      	ldr	r3, [r3, #0]
 8020cdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8020cde:	60da      	str	r2, [r3, #12]
 8020ce0:	e17c      	b.n	8020fdc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8020ce2:	2301      	movs	r3, #1
 8020ce4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8020ce8:	e178      	b.n	8020fdc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8020cea:	697b      	ldr	r3, [r7, #20]
 8020cec:	69db      	ldr	r3, [r3, #28]
 8020cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020cf2:	f040 80c5 	bne.w	8020e80 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8020cf6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8020cfa:	2b20      	cmp	r3, #32
 8020cfc:	dc48      	bgt.n	8020d90 <UART_SetConfig+0x848>
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	db7b      	blt.n	8020dfa <UART_SetConfig+0x8b2>
 8020d02:	2b20      	cmp	r3, #32
 8020d04:	d879      	bhi.n	8020dfa <UART_SetConfig+0x8b2>
 8020d06:	a201      	add	r2, pc, #4	@ (adr r2, 8020d0c <UART_SetConfig+0x7c4>)
 8020d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020d0c:	08020d97 	.word	0x08020d97
 8020d10:	08020d9f 	.word	0x08020d9f
 8020d14:	08020dfb 	.word	0x08020dfb
 8020d18:	08020dfb 	.word	0x08020dfb
 8020d1c:	08020da7 	.word	0x08020da7
 8020d20:	08020dfb 	.word	0x08020dfb
 8020d24:	08020dfb 	.word	0x08020dfb
 8020d28:	08020dfb 	.word	0x08020dfb
 8020d2c:	08020db7 	.word	0x08020db7
 8020d30:	08020dfb 	.word	0x08020dfb
 8020d34:	08020dfb 	.word	0x08020dfb
 8020d38:	08020dfb 	.word	0x08020dfb
 8020d3c:	08020dfb 	.word	0x08020dfb
 8020d40:	08020dfb 	.word	0x08020dfb
 8020d44:	08020dfb 	.word	0x08020dfb
 8020d48:	08020dfb 	.word	0x08020dfb
 8020d4c:	08020dc7 	.word	0x08020dc7
 8020d50:	08020dfb 	.word	0x08020dfb
 8020d54:	08020dfb 	.word	0x08020dfb
 8020d58:	08020dfb 	.word	0x08020dfb
 8020d5c:	08020dfb 	.word	0x08020dfb
 8020d60:	08020dfb 	.word	0x08020dfb
 8020d64:	08020dfb 	.word	0x08020dfb
 8020d68:	08020dfb 	.word	0x08020dfb
 8020d6c:	08020dfb 	.word	0x08020dfb
 8020d70:	08020dfb 	.word	0x08020dfb
 8020d74:	08020dfb 	.word	0x08020dfb
 8020d78:	08020dfb 	.word	0x08020dfb
 8020d7c:	08020dfb 	.word	0x08020dfb
 8020d80:	08020dfb 	.word	0x08020dfb
 8020d84:	08020dfb 	.word	0x08020dfb
 8020d88:	08020dfb 	.word	0x08020dfb
 8020d8c:	08020ded 	.word	0x08020ded
 8020d90:	2b40      	cmp	r3, #64	@ 0x40
 8020d92:	d02e      	beq.n	8020df2 <UART_SetConfig+0x8aa>
 8020d94:	e031      	b.n	8020dfa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8020d96:	f7fc f951 	bl	801d03c <HAL_RCC_GetPCLK1Freq>
 8020d9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020d9c:	e033      	b.n	8020e06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8020d9e:	f7fc f963 	bl	801d068 <HAL_RCC_GetPCLK2Freq>
 8020da2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020da4:	e02f      	b.n	8020e06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020daa:	4618      	mov	r0, r3
 8020dac:	f7fd fb92 	bl	801e4d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8020db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020db4:	e027      	b.n	8020e06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020db6:	f107 0318 	add.w	r3, r7, #24
 8020dba:	4618      	mov	r0, r3
 8020dbc:	f7fd fcde 	bl	801e77c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8020dc0:	69fb      	ldr	r3, [r7, #28]
 8020dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020dc4:	e01f      	b.n	8020e06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8020dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8020e7c <UART_SetConfig+0x934>)
 8020dc8:	681b      	ldr	r3, [r3, #0]
 8020dca:	f003 0320 	and.w	r3, r3, #32
 8020dce:	2b00      	cmp	r3, #0
 8020dd0:	d009      	beq.n	8020de6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8020e7c <UART_SetConfig+0x934>)
 8020dd4:	681b      	ldr	r3, [r3, #0]
 8020dd6:	08db      	lsrs	r3, r3, #3
 8020dd8:	f003 0303 	and.w	r3, r3, #3
 8020ddc:	4a24      	ldr	r2, [pc, #144]	@ (8020e70 <UART_SetConfig+0x928>)
 8020dde:	fa22 f303 	lsr.w	r3, r2, r3
 8020de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020de4:	e00f      	b.n	8020e06 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8020de6:	4b22      	ldr	r3, [pc, #136]	@ (8020e70 <UART_SetConfig+0x928>)
 8020de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020dea:	e00c      	b.n	8020e06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8020dec:	4b21      	ldr	r3, [pc, #132]	@ (8020e74 <UART_SetConfig+0x92c>)
 8020dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020df0:	e009      	b.n	8020e06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020df8:	e005      	b.n	8020e06 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8020dfa:	2300      	movs	r3, #0
 8020dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8020dfe:	2301      	movs	r3, #1
 8020e00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8020e04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8020e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020e08:	2b00      	cmp	r3, #0
 8020e0a:	f000 80e7 	beq.w	8020fdc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020e0e:	697b      	ldr	r3, [r7, #20]
 8020e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020e12:	4a19      	ldr	r2, [pc, #100]	@ (8020e78 <UART_SetConfig+0x930>)
 8020e14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020e18:	461a      	mov	r2, r3
 8020e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8020e20:	005a      	lsls	r2, r3, #1
 8020e22:	697b      	ldr	r3, [r7, #20]
 8020e24:	685b      	ldr	r3, [r3, #4]
 8020e26:	085b      	lsrs	r3, r3, #1
 8020e28:	441a      	add	r2, r3
 8020e2a:	697b      	ldr	r3, [r7, #20]
 8020e2c:	685b      	ldr	r3, [r3, #4]
 8020e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8020e32:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020e36:	2b0f      	cmp	r3, #15
 8020e38:	d916      	bls.n	8020e68 <UART_SetConfig+0x920>
 8020e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020e40:	d212      	bcs.n	8020e68 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8020e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020e44:	b29b      	uxth	r3, r3
 8020e46:	f023 030f 	bic.w	r3, r3, #15
 8020e4a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8020e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020e4e:	085b      	lsrs	r3, r3, #1
 8020e50:	b29b      	uxth	r3, r3
 8020e52:	f003 0307 	and.w	r3, r3, #7
 8020e56:	b29a      	uxth	r2, r3
 8020e58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8020e5a:	4313      	orrs	r3, r2
 8020e5c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8020e5e:	697b      	ldr	r3, [r7, #20]
 8020e60:	681b      	ldr	r3, [r3, #0]
 8020e62:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8020e64:	60da      	str	r2, [r3, #12]
 8020e66:	e0b9      	b.n	8020fdc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8020e68:	2301      	movs	r3, #1
 8020e6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8020e6e:	e0b5      	b.n	8020fdc <UART_SetConfig+0xa94>
 8020e70:	03d09000 	.word	0x03d09000
 8020e74:	003d0900 	.word	0x003d0900
 8020e78:	0802704c 	.word	0x0802704c
 8020e7c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8020e80:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8020e84:	2b20      	cmp	r3, #32
 8020e86:	dc49      	bgt.n	8020f1c <UART_SetConfig+0x9d4>
 8020e88:	2b00      	cmp	r3, #0
 8020e8a:	db7c      	blt.n	8020f86 <UART_SetConfig+0xa3e>
 8020e8c:	2b20      	cmp	r3, #32
 8020e8e:	d87a      	bhi.n	8020f86 <UART_SetConfig+0xa3e>
 8020e90:	a201      	add	r2, pc, #4	@ (adr r2, 8020e98 <UART_SetConfig+0x950>)
 8020e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020e96:	bf00      	nop
 8020e98:	08020f23 	.word	0x08020f23
 8020e9c:	08020f2b 	.word	0x08020f2b
 8020ea0:	08020f87 	.word	0x08020f87
 8020ea4:	08020f87 	.word	0x08020f87
 8020ea8:	08020f33 	.word	0x08020f33
 8020eac:	08020f87 	.word	0x08020f87
 8020eb0:	08020f87 	.word	0x08020f87
 8020eb4:	08020f87 	.word	0x08020f87
 8020eb8:	08020f43 	.word	0x08020f43
 8020ebc:	08020f87 	.word	0x08020f87
 8020ec0:	08020f87 	.word	0x08020f87
 8020ec4:	08020f87 	.word	0x08020f87
 8020ec8:	08020f87 	.word	0x08020f87
 8020ecc:	08020f87 	.word	0x08020f87
 8020ed0:	08020f87 	.word	0x08020f87
 8020ed4:	08020f87 	.word	0x08020f87
 8020ed8:	08020f53 	.word	0x08020f53
 8020edc:	08020f87 	.word	0x08020f87
 8020ee0:	08020f87 	.word	0x08020f87
 8020ee4:	08020f87 	.word	0x08020f87
 8020ee8:	08020f87 	.word	0x08020f87
 8020eec:	08020f87 	.word	0x08020f87
 8020ef0:	08020f87 	.word	0x08020f87
 8020ef4:	08020f87 	.word	0x08020f87
 8020ef8:	08020f87 	.word	0x08020f87
 8020efc:	08020f87 	.word	0x08020f87
 8020f00:	08020f87 	.word	0x08020f87
 8020f04:	08020f87 	.word	0x08020f87
 8020f08:	08020f87 	.word	0x08020f87
 8020f0c:	08020f87 	.word	0x08020f87
 8020f10:	08020f87 	.word	0x08020f87
 8020f14:	08020f87 	.word	0x08020f87
 8020f18:	08020f79 	.word	0x08020f79
 8020f1c:	2b40      	cmp	r3, #64	@ 0x40
 8020f1e:	d02e      	beq.n	8020f7e <UART_SetConfig+0xa36>
 8020f20:	e031      	b.n	8020f86 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8020f22:	f7fc f88b 	bl	801d03c <HAL_RCC_GetPCLK1Freq>
 8020f26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020f28:	e033      	b.n	8020f92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8020f2a:	f7fc f89d 	bl	801d068 <HAL_RCC_GetPCLK2Freq>
 8020f2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020f30:	e02f      	b.n	8020f92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020f32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020f36:	4618      	mov	r0, r3
 8020f38:	f7fd facc 	bl	801e4d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8020f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f40:	e027      	b.n	8020f92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020f42:	f107 0318 	add.w	r3, r7, #24
 8020f46:	4618      	mov	r0, r3
 8020f48:	f7fd fc18 	bl	801e77c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8020f4c:	69fb      	ldr	r3, [r7, #28]
 8020f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f50:	e01f      	b.n	8020f92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8020f52:	4b2d      	ldr	r3, [pc, #180]	@ (8021008 <UART_SetConfig+0xac0>)
 8020f54:	681b      	ldr	r3, [r3, #0]
 8020f56:	f003 0320 	and.w	r3, r3, #32
 8020f5a:	2b00      	cmp	r3, #0
 8020f5c:	d009      	beq.n	8020f72 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8021008 <UART_SetConfig+0xac0>)
 8020f60:	681b      	ldr	r3, [r3, #0]
 8020f62:	08db      	lsrs	r3, r3, #3
 8020f64:	f003 0303 	and.w	r3, r3, #3
 8020f68:	4a28      	ldr	r2, [pc, #160]	@ (802100c <UART_SetConfig+0xac4>)
 8020f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8020f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020f70:	e00f      	b.n	8020f92 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8020f72:	4b26      	ldr	r3, [pc, #152]	@ (802100c <UART_SetConfig+0xac4>)
 8020f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f76:	e00c      	b.n	8020f92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8020f78:	4b25      	ldr	r3, [pc, #148]	@ (8021010 <UART_SetConfig+0xac8>)
 8020f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f7c:	e009      	b.n	8020f92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f84:	e005      	b.n	8020f92 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8020f86:	2300      	movs	r3, #0
 8020f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8020f8a:	2301      	movs	r3, #1
 8020f8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8020f90:	bf00      	nop
    }

    if (pclk != 0U)
 8020f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020f94:	2b00      	cmp	r3, #0
 8020f96:	d021      	beq.n	8020fdc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020f98:	697b      	ldr	r3, [r7, #20]
 8020f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8021014 <UART_SetConfig+0xacc>)
 8020f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020fa2:	461a      	mov	r2, r3
 8020fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020fa6:	fbb3 f2f2 	udiv	r2, r3, r2
 8020faa:	697b      	ldr	r3, [r7, #20]
 8020fac:	685b      	ldr	r3, [r3, #4]
 8020fae:	085b      	lsrs	r3, r3, #1
 8020fb0:	441a      	add	r2, r3
 8020fb2:	697b      	ldr	r3, [r7, #20]
 8020fb4:	685b      	ldr	r3, [r3, #4]
 8020fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8020fba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020fbe:	2b0f      	cmp	r3, #15
 8020fc0:	d909      	bls.n	8020fd6 <UART_SetConfig+0xa8e>
 8020fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020fc8:	d205      	bcs.n	8020fd6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8020fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020fcc:	b29a      	uxth	r2, r3
 8020fce:	697b      	ldr	r3, [r7, #20]
 8020fd0:	681b      	ldr	r3, [r3, #0]
 8020fd2:	60da      	str	r2, [r3, #12]
 8020fd4:	e002      	b.n	8020fdc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8020fd6:	2301      	movs	r3, #1
 8020fd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8020fdc:	697b      	ldr	r3, [r7, #20]
 8020fde:	2201      	movs	r2, #1
 8020fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8020fe4:	697b      	ldr	r3, [r7, #20]
 8020fe6:	2201      	movs	r2, #1
 8020fe8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8020fec:	697b      	ldr	r3, [r7, #20]
 8020fee:	2200      	movs	r2, #0
 8020ff0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8020ff2:	697b      	ldr	r3, [r7, #20]
 8020ff4:	2200      	movs	r2, #0
 8020ff6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8020ff8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8020ffc:	4618      	mov	r0, r3
 8020ffe:	3748      	adds	r7, #72	@ 0x48
 8021000:	46bd      	mov	sp, r7
 8021002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021006:	bf00      	nop
 8021008:	58024400 	.word	0x58024400
 802100c:	03d09000 	.word	0x03d09000
 8021010:	003d0900 	.word	0x003d0900
 8021014:	0802704c 	.word	0x0802704c

08021018 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8021018:	b480      	push	{r7}
 802101a:	b083      	sub	sp, #12
 802101c:	af00      	add	r7, sp, #0
 802101e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8021020:	687b      	ldr	r3, [r7, #4]
 8021022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021024:	f003 0308 	and.w	r3, r3, #8
 8021028:	2b00      	cmp	r3, #0
 802102a:	d00a      	beq.n	8021042 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802102c:	687b      	ldr	r3, [r7, #4]
 802102e:	681b      	ldr	r3, [r3, #0]
 8021030:	685b      	ldr	r3, [r3, #4]
 8021032:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8021036:	687b      	ldr	r3, [r7, #4]
 8021038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802103a:	687b      	ldr	r3, [r7, #4]
 802103c:	681b      	ldr	r3, [r3, #0]
 802103e:	430a      	orrs	r2, r1
 8021040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8021042:	687b      	ldr	r3, [r7, #4]
 8021044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021046:	f003 0301 	and.w	r3, r3, #1
 802104a:	2b00      	cmp	r3, #0
 802104c:	d00a      	beq.n	8021064 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 802104e:	687b      	ldr	r3, [r7, #4]
 8021050:	681b      	ldr	r3, [r3, #0]
 8021052:	685b      	ldr	r3, [r3, #4]
 8021054:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8021058:	687b      	ldr	r3, [r7, #4]
 802105a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802105c:	687b      	ldr	r3, [r7, #4]
 802105e:	681b      	ldr	r3, [r3, #0]
 8021060:	430a      	orrs	r2, r1
 8021062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8021064:	687b      	ldr	r3, [r7, #4]
 8021066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021068:	f003 0302 	and.w	r3, r3, #2
 802106c:	2b00      	cmp	r3, #0
 802106e:	d00a      	beq.n	8021086 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8021070:	687b      	ldr	r3, [r7, #4]
 8021072:	681b      	ldr	r3, [r3, #0]
 8021074:	685b      	ldr	r3, [r3, #4]
 8021076:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 802107a:	687b      	ldr	r3, [r7, #4]
 802107c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802107e:	687b      	ldr	r3, [r7, #4]
 8021080:	681b      	ldr	r3, [r3, #0]
 8021082:	430a      	orrs	r2, r1
 8021084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8021086:	687b      	ldr	r3, [r7, #4]
 8021088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802108a:	f003 0304 	and.w	r3, r3, #4
 802108e:	2b00      	cmp	r3, #0
 8021090:	d00a      	beq.n	80210a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	681b      	ldr	r3, [r3, #0]
 8021096:	685b      	ldr	r3, [r3, #4]
 8021098:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 802109c:	687b      	ldr	r3, [r7, #4]
 802109e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	681b      	ldr	r3, [r3, #0]
 80210a4:	430a      	orrs	r2, r1
 80210a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80210a8:	687b      	ldr	r3, [r7, #4]
 80210aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80210ac:	f003 0310 	and.w	r3, r3, #16
 80210b0:	2b00      	cmp	r3, #0
 80210b2:	d00a      	beq.n	80210ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80210b4:	687b      	ldr	r3, [r7, #4]
 80210b6:	681b      	ldr	r3, [r3, #0]
 80210b8:	689b      	ldr	r3, [r3, #8]
 80210ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80210be:	687b      	ldr	r3, [r7, #4]
 80210c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80210c2:	687b      	ldr	r3, [r7, #4]
 80210c4:	681b      	ldr	r3, [r3, #0]
 80210c6:	430a      	orrs	r2, r1
 80210c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80210ca:	687b      	ldr	r3, [r7, #4]
 80210cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80210ce:	f003 0320 	and.w	r3, r3, #32
 80210d2:	2b00      	cmp	r3, #0
 80210d4:	d00a      	beq.n	80210ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80210d6:	687b      	ldr	r3, [r7, #4]
 80210d8:	681b      	ldr	r3, [r3, #0]
 80210da:	689b      	ldr	r3, [r3, #8]
 80210dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80210e0:	687b      	ldr	r3, [r7, #4]
 80210e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80210e4:	687b      	ldr	r3, [r7, #4]
 80210e6:	681b      	ldr	r3, [r3, #0]
 80210e8:	430a      	orrs	r2, r1
 80210ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80210ec:	687b      	ldr	r3, [r7, #4]
 80210ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80210f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80210f4:	2b00      	cmp	r3, #0
 80210f6:	d01a      	beq.n	802112e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80210f8:	687b      	ldr	r3, [r7, #4]
 80210fa:	681b      	ldr	r3, [r3, #0]
 80210fc:	685b      	ldr	r3, [r3, #4]
 80210fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8021102:	687b      	ldr	r3, [r7, #4]
 8021104:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8021106:	687b      	ldr	r3, [r7, #4]
 8021108:	681b      	ldr	r3, [r3, #0]
 802110a:	430a      	orrs	r2, r1
 802110c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802110e:	687b      	ldr	r3, [r7, #4]
 8021110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021112:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8021116:	d10a      	bne.n	802112e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8021118:	687b      	ldr	r3, [r7, #4]
 802111a:	681b      	ldr	r3, [r3, #0]
 802111c:	685b      	ldr	r3, [r3, #4]
 802111e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8021122:	687b      	ldr	r3, [r7, #4]
 8021124:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8021126:	687b      	ldr	r3, [r7, #4]
 8021128:	681b      	ldr	r3, [r3, #0]
 802112a:	430a      	orrs	r2, r1
 802112c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802112e:	687b      	ldr	r3, [r7, #4]
 8021130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8021136:	2b00      	cmp	r3, #0
 8021138:	d00a      	beq.n	8021150 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 802113a:	687b      	ldr	r3, [r7, #4]
 802113c:	681b      	ldr	r3, [r3, #0]
 802113e:	685b      	ldr	r3, [r3, #4]
 8021140:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8021144:	687b      	ldr	r3, [r7, #4]
 8021146:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8021148:	687b      	ldr	r3, [r7, #4]
 802114a:	681b      	ldr	r3, [r3, #0]
 802114c:	430a      	orrs	r2, r1
 802114e:	605a      	str	r2, [r3, #4]
  }
}
 8021150:	bf00      	nop
 8021152:	370c      	adds	r7, #12
 8021154:	46bd      	mov	sp, r7
 8021156:	f85d 7b04 	ldr.w	r7, [sp], #4
 802115a:	4770      	bx	lr

0802115c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 802115c:	b580      	push	{r7, lr}
 802115e:	b098      	sub	sp, #96	@ 0x60
 8021160:	af02      	add	r7, sp, #8
 8021162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021164:	687b      	ldr	r3, [r7, #4]
 8021166:	2200      	movs	r2, #0
 8021168:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 802116c:	f7f8 fb94 	bl	8019898 <HAL_GetTick>
 8021170:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8021172:	687b      	ldr	r3, [r7, #4]
 8021174:	681b      	ldr	r3, [r3, #0]
 8021176:	681b      	ldr	r3, [r3, #0]
 8021178:	f003 0308 	and.w	r3, r3, #8
 802117c:	2b08      	cmp	r3, #8
 802117e:	d12f      	bne.n	80211e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8021180:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8021184:	9300      	str	r3, [sp, #0]
 8021186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021188:	2200      	movs	r2, #0
 802118a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 802118e:	6878      	ldr	r0, [r7, #4]
 8021190:	f000 f88e 	bl	80212b0 <UART_WaitOnFlagUntilTimeout>
 8021194:	4603      	mov	r3, r0
 8021196:	2b00      	cmp	r3, #0
 8021198:	d022      	beq.n	80211e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 802119a:	687b      	ldr	r3, [r7, #4]
 802119c:	681b      	ldr	r3, [r3, #0]
 802119e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80211a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80211a2:	e853 3f00 	ldrex	r3, [r3]
 80211a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80211a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80211aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80211ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80211b0:	687b      	ldr	r3, [r7, #4]
 80211b2:	681b      	ldr	r3, [r3, #0]
 80211b4:	461a      	mov	r2, r3
 80211b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80211b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80211ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80211bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80211be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80211c0:	e841 2300 	strex	r3, r2, [r1]
 80211c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80211c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80211c8:	2b00      	cmp	r3, #0
 80211ca:	d1e6      	bne.n	802119a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80211cc:	687b      	ldr	r3, [r7, #4]
 80211ce:	2220      	movs	r2, #32
 80211d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80211d4:	687b      	ldr	r3, [r7, #4]
 80211d6:	2200      	movs	r2, #0
 80211d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80211dc:	2303      	movs	r3, #3
 80211de:	e063      	b.n	80212a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80211e0:	687b      	ldr	r3, [r7, #4]
 80211e2:	681b      	ldr	r3, [r3, #0]
 80211e4:	681b      	ldr	r3, [r3, #0]
 80211e6:	f003 0304 	and.w	r3, r3, #4
 80211ea:	2b04      	cmp	r3, #4
 80211ec:	d149      	bne.n	8021282 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80211ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80211f2:	9300      	str	r3, [sp, #0]
 80211f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80211f6:	2200      	movs	r2, #0
 80211f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80211fc:	6878      	ldr	r0, [r7, #4]
 80211fe:	f000 f857 	bl	80212b0 <UART_WaitOnFlagUntilTimeout>
 8021202:	4603      	mov	r3, r0
 8021204:	2b00      	cmp	r3, #0
 8021206:	d03c      	beq.n	8021282 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8021208:	687b      	ldr	r3, [r7, #4]
 802120a:	681b      	ldr	r3, [r3, #0]
 802120c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021210:	e853 3f00 	ldrex	r3, [r3]
 8021214:	623b      	str	r3, [r7, #32]
   return(result);
 8021216:	6a3b      	ldr	r3, [r7, #32]
 8021218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802121c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	681b      	ldr	r3, [r3, #0]
 8021222:	461a      	mov	r2, r3
 8021224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021226:	633b      	str	r3, [r7, #48]	@ 0x30
 8021228:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802122a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802122c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802122e:	e841 2300 	strex	r3, r2, [r1]
 8021232:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8021234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021236:	2b00      	cmp	r3, #0
 8021238:	d1e6      	bne.n	8021208 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802123a:	687b      	ldr	r3, [r7, #4]
 802123c:	681b      	ldr	r3, [r3, #0]
 802123e:	3308      	adds	r3, #8
 8021240:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021242:	693b      	ldr	r3, [r7, #16]
 8021244:	e853 3f00 	ldrex	r3, [r3]
 8021248:	60fb      	str	r3, [r7, #12]
   return(result);
 802124a:	68fb      	ldr	r3, [r7, #12]
 802124c:	f023 0301 	bic.w	r3, r3, #1
 8021250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8021252:	687b      	ldr	r3, [r7, #4]
 8021254:	681b      	ldr	r3, [r3, #0]
 8021256:	3308      	adds	r3, #8
 8021258:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802125a:	61fa      	str	r2, [r7, #28]
 802125c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802125e:	69b9      	ldr	r1, [r7, #24]
 8021260:	69fa      	ldr	r2, [r7, #28]
 8021262:	e841 2300 	strex	r3, r2, [r1]
 8021266:	617b      	str	r3, [r7, #20]
   return(result);
 8021268:	697b      	ldr	r3, [r7, #20]
 802126a:	2b00      	cmp	r3, #0
 802126c:	d1e5      	bne.n	802123a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 802126e:	687b      	ldr	r3, [r7, #4]
 8021270:	2220      	movs	r2, #32
 8021272:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8021276:	687b      	ldr	r3, [r7, #4]
 8021278:	2200      	movs	r2, #0
 802127a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802127e:	2303      	movs	r3, #3
 8021280:	e012      	b.n	80212a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8021282:	687b      	ldr	r3, [r7, #4]
 8021284:	2220      	movs	r2, #32
 8021286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 802128a:	687b      	ldr	r3, [r7, #4]
 802128c:	2220      	movs	r2, #32
 802128e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021292:	687b      	ldr	r3, [r7, #4]
 8021294:	2200      	movs	r2, #0
 8021296:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8021298:	687b      	ldr	r3, [r7, #4]
 802129a:	2200      	movs	r2, #0
 802129c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 802129e:	687b      	ldr	r3, [r7, #4]
 80212a0:	2200      	movs	r2, #0
 80212a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80212a6:	2300      	movs	r3, #0
}
 80212a8:	4618      	mov	r0, r3
 80212aa:	3758      	adds	r7, #88	@ 0x58
 80212ac:	46bd      	mov	sp, r7
 80212ae:	bd80      	pop	{r7, pc}

080212b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80212b0:	b580      	push	{r7, lr}
 80212b2:	b084      	sub	sp, #16
 80212b4:	af00      	add	r7, sp, #0
 80212b6:	60f8      	str	r0, [r7, #12]
 80212b8:	60b9      	str	r1, [r7, #8]
 80212ba:	603b      	str	r3, [r7, #0]
 80212bc:	4613      	mov	r3, r2
 80212be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80212c0:	e04f      	b.n	8021362 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80212c2:	69bb      	ldr	r3, [r7, #24]
 80212c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80212c8:	d04b      	beq.n	8021362 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80212ca:	f7f8 fae5 	bl	8019898 <HAL_GetTick>
 80212ce:	4602      	mov	r2, r0
 80212d0:	683b      	ldr	r3, [r7, #0]
 80212d2:	1ad3      	subs	r3, r2, r3
 80212d4:	69ba      	ldr	r2, [r7, #24]
 80212d6:	429a      	cmp	r2, r3
 80212d8:	d302      	bcc.n	80212e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80212da:	69bb      	ldr	r3, [r7, #24]
 80212dc:	2b00      	cmp	r3, #0
 80212de:	d101      	bne.n	80212e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80212e0:	2303      	movs	r3, #3
 80212e2:	e04e      	b.n	8021382 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80212e4:	68fb      	ldr	r3, [r7, #12]
 80212e6:	681b      	ldr	r3, [r3, #0]
 80212e8:	681b      	ldr	r3, [r3, #0]
 80212ea:	f003 0304 	and.w	r3, r3, #4
 80212ee:	2b00      	cmp	r3, #0
 80212f0:	d037      	beq.n	8021362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80212f2:	68bb      	ldr	r3, [r7, #8]
 80212f4:	2b80      	cmp	r3, #128	@ 0x80
 80212f6:	d034      	beq.n	8021362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80212f8:	68bb      	ldr	r3, [r7, #8]
 80212fa:	2b40      	cmp	r3, #64	@ 0x40
 80212fc:	d031      	beq.n	8021362 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80212fe:	68fb      	ldr	r3, [r7, #12]
 8021300:	681b      	ldr	r3, [r3, #0]
 8021302:	69db      	ldr	r3, [r3, #28]
 8021304:	f003 0308 	and.w	r3, r3, #8
 8021308:	2b08      	cmp	r3, #8
 802130a:	d110      	bne.n	802132e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 802130c:	68fb      	ldr	r3, [r7, #12]
 802130e:	681b      	ldr	r3, [r3, #0]
 8021310:	2208      	movs	r2, #8
 8021312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8021314:	68f8      	ldr	r0, [r7, #12]
 8021316:	f000 f839 	bl	802138c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 802131a:	68fb      	ldr	r3, [r7, #12]
 802131c:	2208      	movs	r2, #8
 802131e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8021322:	68fb      	ldr	r3, [r7, #12]
 8021324:	2200      	movs	r2, #0
 8021326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 802132a:	2301      	movs	r3, #1
 802132c:	e029      	b.n	8021382 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802132e:	68fb      	ldr	r3, [r7, #12]
 8021330:	681b      	ldr	r3, [r3, #0]
 8021332:	69db      	ldr	r3, [r3, #28]
 8021334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8021338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802133c:	d111      	bne.n	8021362 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802133e:	68fb      	ldr	r3, [r7, #12]
 8021340:	681b      	ldr	r3, [r3, #0]
 8021342:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8021346:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8021348:	68f8      	ldr	r0, [r7, #12]
 802134a:	f000 f81f 	bl	802138c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802134e:	68fb      	ldr	r3, [r7, #12]
 8021350:	2220      	movs	r2, #32
 8021352:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8021356:	68fb      	ldr	r3, [r7, #12]
 8021358:	2200      	movs	r2, #0
 802135a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 802135e:	2303      	movs	r3, #3
 8021360:	e00f      	b.n	8021382 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021362:	68fb      	ldr	r3, [r7, #12]
 8021364:	681b      	ldr	r3, [r3, #0]
 8021366:	69da      	ldr	r2, [r3, #28]
 8021368:	68bb      	ldr	r3, [r7, #8]
 802136a:	4013      	ands	r3, r2
 802136c:	68ba      	ldr	r2, [r7, #8]
 802136e:	429a      	cmp	r2, r3
 8021370:	bf0c      	ite	eq
 8021372:	2301      	moveq	r3, #1
 8021374:	2300      	movne	r3, #0
 8021376:	b2db      	uxtb	r3, r3
 8021378:	461a      	mov	r2, r3
 802137a:	79fb      	ldrb	r3, [r7, #7]
 802137c:	429a      	cmp	r2, r3
 802137e:	d0a0      	beq.n	80212c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8021380:	2300      	movs	r3, #0
}
 8021382:	4618      	mov	r0, r3
 8021384:	3710      	adds	r7, #16
 8021386:	46bd      	mov	sp, r7
 8021388:	bd80      	pop	{r7, pc}
	...

0802138c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802138c:	b480      	push	{r7}
 802138e:	b095      	sub	sp, #84	@ 0x54
 8021390:	af00      	add	r7, sp, #0
 8021392:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8021394:	687b      	ldr	r3, [r7, #4]
 8021396:	681b      	ldr	r3, [r3, #0]
 8021398:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802139a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802139c:	e853 3f00 	ldrex	r3, [r3]
 80213a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80213a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80213a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80213a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80213aa:	687b      	ldr	r3, [r7, #4]
 80213ac:	681b      	ldr	r3, [r3, #0]
 80213ae:	461a      	mov	r2, r3
 80213b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80213b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80213b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80213b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80213b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80213ba:	e841 2300 	strex	r3, r2, [r1]
 80213be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80213c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80213c2:	2b00      	cmp	r3, #0
 80213c4:	d1e6      	bne.n	8021394 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80213c6:	687b      	ldr	r3, [r7, #4]
 80213c8:	681b      	ldr	r3, [r3, #0]
 80213ca:	3308      	adds	r3, #8
 80213cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80213ce:	6a3b      	ldr	r3, [r7, #32]
 80213d0:	e853 3f00 	ldrex	r3, [r3]
 80213d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80213d6:	69fa      	ldr	r2, [r7, #28]
 80213d8:	4b1e      	ldr	r3, [pc, #120]	@ (8021454 <UART_EndRxTransfer+0xc8>)
 80213da:	4013      	ands	r3, r2
 80213dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80213de:	687b      	ldr	r3, [r7, #4]
 80213e0:	681b      	ldr	r3, [r3, #0]
 80213e2:	3308      	adds	r3, #8
 80213e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80213e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80213e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80213ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80213ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80213ee:	e841 2300 	strex	r3, r2, [r1]
 80213f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80213f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213f6:	2b00      	cmp	r3, #0
 80213f8:	d1e5      	bne.n	80213c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80213fa:	687b      	ldr	r3, [r7, #4]
 80213fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80213fe:	2b01      	cmp	r3, #1
 8021400:	d118      	bne.n	8021434 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021402:	687b      	ldr	r3, [r7, #4]
 8021404:	681b      	ldr	r3, [r3, #0]
 8021406:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021408:	68fb      	ldr	r3, [r7, #12]
 802140a:	e853 3f00 	ldrex	r3, [r3]
 802140e:	60bb      	str	r3, [r7, #8]
   return(result);
 8021410:	68bb      	ldr	r3, [r7, #8]
 8021412:	f023 0310 	bic.w	r3, r3, #16
 8021416:	647b      	str	r3, [r7, #68]	@ 0x44
 8021418:	687b      	ldr	r3, [r7, #4]
 802141a:	681b      	ldr	r3, [r3, #0]
 802141c:	461a      	mov	r2, r3
 802141e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021420:	61bb      	str	r3, [r7, #24]
 8021422:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021424:	6979      	ldr	r1, [r7, #20]
 8021426:	69ba      	ldr	r2, [r7, #24]
 8021428:	e841 2300 	strex	r3, r2, [r1]
 802142c:	613b      	str	r3, [r7, #16]
   return(result);
 802142e:	693b      	ldr	r3, [r7, #16]
 8021430:	2b00      	cmp	r3, #0
 8021432:	d1e6      	bne.n	8021402 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8021434:	687b      	ldr	r3, [r7, #4]
 8021436:	2220      	movs	r2, #32
 8021438:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802143c:	687b      	ldr	r3, [r7, #4]
 802143e:	2200      	movs	r2, #0
 8021440:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8021442:	687b      	ldr	r3, [r7, #4]
 8021444:	2200      	movs	r2, #0
 8021446:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8021448:	bf00      	nop
 802144a:	3754      	adds	r7, #84	@ 0x54
 802144c:	46bd      	mov	sp, r7
 802144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021452:	4770      	bx	lr
 8021454:	effffffe 	.word	0xeffffffe

08021458 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8021458:	b480      	push	{r7}
 802145a:	b085      	sub	sp, #20
 802145c:	af00      	add	r7, sp, #0
 802145e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021460:	687b      	ldr	r3, [r7, #4]
 8021462:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8021466:	2b01      	cmp	r3, #1
 8021468:	d101      	bne.n	802146e <HAL_UARTEx_DisableFifoMode+0x16>
 802146a:	2302      	movs	r3, #2
 802146c:	e027      	b.n	80214be <HAL_UARTEx_DisableFifoMode+0x66>
 802146e:	687b      	ldr	r3, [r7, #4]
 8021470:	2201      	movs	r2, #1
 8021472:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8021476:	687b      	ldr	r3, [r7, #4]
 8021478:	2224      	movs	r2, #36	@ 0x24
 802147a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802147e:	687b      	ldr	r3, [r7, #4]
 8021480:	681b      	ldr	r3, [r3, #0]
 8021482:	681b      	ldr	r3, [r3, #0]
 8021484:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8021486:	687b      	ldr	r3, [r7, #4]
 8021488:	681b      	ldr	r3, [r3, #0]
 802148a:	681a      	ldr	r2, [r3, #0]
 802148c:	687b      	ldr	r3, [r7, #4]
 802148e:	681b      	ldr	r3, [r3, #0]
 8021490:	f022 0201 	bic.w	r2, r2, #1
 8021494:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8021496:	68fb      	ldr	r3, [r7, #12]
 8021498:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 802149c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 802149e:	687b      	ldr	r3, [r7, #4]
 80214a0:	2200      	movs	r2, #0
 80214a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80214a4:	687b      	ldr	r3, [r7, #4]
 80214a6:	681b      	ldr	r3, [r3, #0]
 80214a8:	68fa      	ldr	r2, [r7, #12]
 80214aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80214ac:	687b      	ldr	r3, [r7, #4]
 80214ae:	2220      	movs	r2, #32
 80214b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80214b4:	687b      	ldr	r3, [r7, #4]
 80214b6:	2200      	movs	r2, #0
 80214b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80214bc:	2300      	movs	r3, #0
}
 80214be:	4618      	mov	r0, r3
 80214c0:	3714      	adds	r7, #20
 80214c2:	46bd      	mov	sp, r7
 80214c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214c8:	4770      	bx	lr

080214ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80214ca:	b580      	push	{r7, lr}
 80214cc:	b084      	sub	sp, #16
 80214ce:	af00      	add	r7, sp, #0
 80214d0:	6078      	str	r0, [r7, #4]
 80214d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80214d4:	687b      	ldr	r3, [r7, #4]
 80214d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80214da:	2b01      	cmp	r3, #1
 80214dc:	d101      	bne.n	80214e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80214de:	2302      	movs	r3, #2
 80214e0:	e02d      	b.n	802153e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80214e2:	687b      	ldr	r3, [r7, #4]
 80214e4:	2201      	movs	r2, #1
 80214e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80214ea:	687b      	ldr	r3, [r7, #4]
 80214ec:	2224      	movs	r2, #36	@ 0x24
 80214ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80214f2:	687b      	ldr	r3, [r7, #4]
 80214f4:	681b      	ldr	r3, [r3, #0]
 80214f6:	681b      	ldr	r3, [r3, #0]
 80214f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80214fa:	687b      	ldr	r3, [r7, #4]
 80214fc:	681b      	ldr	r3, [r3, #0]
 80214fe:	681a      	ldr	r2, [r3, #0]
 8021500:	687b      	ldr	r3, [r7, #4]
 8021502:	681b      	ldr	r3, [r3, #0]
 8021504:	f022 0201 	bic.w	r2, r2, #1
 8021508:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 802150a:	687b      	ldr	r3, [r7, #4]
 802150c:	681b      	ldr	r3, [r3, #0]
 802150e:	689b      	ldr	r3, [r3, #8]
 8021510:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	681b      	ldr	r3, [r3, #0]
 8021518:	683a      	ldr	r2, [r7, #0]
 802151a:	430a      	orrs	r2, r1
 802151c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802151e:	6878      	ldr	r0, [r7, #4]
 8021520:	f000 f850 	bl	80215c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021524:	687b      	ldr	r3, [r7, #4]
 8021526:	681b      	ldr	r3, [r3, #0]
 8021528:	68fa      	ldr	r2, [r7, #12]
 802152a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802152c:	687b      	ldr	r3, [r7, #4]
 802152e:	2220      	movs	r2, #32
 8021530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021534:	687b      	ldr	r3, [r7, #4]
 8021536:	2200      	movs	r2, #0
 8021538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 802153c:	2300      	movs	r3, #0
}
 802153e:	4618      	mov	r0, r3
 8021540:	3710      	adds	r7, #16
 8021542:	46bd      	mov	sp, r7
 8021544:	bd80      	pop	{r7, pc}

08021546 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8021546:	b580      	push	{r7, lr}
 8021548:	b084      	sub	sp, #16
 802154a:	af00      	add	r7, sp, #0
 802154c:	6078      	str	r0, [r7, #4]
 802154e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021550:	687b      	ldr	r3, [r7, #4]
 8021552:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8021556:	2b01      	cmp	r3, #1
 8021558:	d101      	bne.n	802155e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 802155a:	2302      	movs	r3, #2
 802155c:	e02d      	b.n	80215ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 802155e:	687b      	ldr	r3, [r7, #4]
 8021560:	2201      	movs	r2, #1
 8021562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8021566:	687b      	ldr	r3, [r7, #4]
 8021568:	2224      	movs	r2, #36	@ 0x24
 802156a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802156e:	687b      	ldr	r3, [r7, #4]
 8021570:	681b      	ldr	r3, [r3, #0]
 8021572:	681b      	ldr	r3, [r3, #0]
 8021574:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8021576:	687b      	ldr	r3, [r7, #4]
 8021578:	681b      	ldr	r3, [r3, #0]
 802157a:	681a      	ldr	r2, [r3, #0]
 802157c:	687b      	ldr	r3, [r7, #4]
 802157e:	681b      	ldr	r3, [r3, #0]
 8021580:	f022 0201 	bic.w	r2, r2, #1
 8021584:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8021586:	687b      	ldr	r3, [r7, #4]
 8021588:	681b      	ldr	r3, [r3, #0]
 802158a:	689b      	ldr	r3, [r3, #8]
 802158c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8021590:	687b      	ldr	r3, [r7, #4]
 8021592:	681b      	ldr	r3, [r3, #0]
 8021594:	683a      	ldr	r2, [r7, #0]
 8021596:	430a      	orrs	r2, r1
 8021598:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802159a:	6878      	ldr	r0, [r7, #4]
 802159c:	f000 f812 	bl	80215c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80215a0:	687b      	ldr	r3, [r7, #4]
 80215a2:	681b      	ldr	r3, [r3, #0]
 80215a4:	68fa      	ldr	r2, [r7, #12]
 80215a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80215a8:	687b      	ldr	r3, [r7, #4]
 80215aa:	2220      	movs	r2, #32
 80215ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80215b0:	687b      	ldr	r3, [r7, #4]
 80215b2:	2200      	movs	r2, #0
 80215b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80215b8:	2300      	movs	r3, #0
}
 80215ba:	4618      	mov	r0, r3
 80215bc:	3710      	adds	r7, #16
 80215be:	46bd      	mov	sp, r7
 80215c0:	bd80      	pop	{r7, pc}
	...

080215c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80215c4:	b480      	push	{r7}
 80215c6:	b085      	sub	sp, #20
 80215c8:	af00      	add	r7, sp, #0
 80215ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80215cc:	687b      	ldr	r3, [r7, #4]
 80215ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80215d0:	2b00      	cmp	r3, #0
 80215d2:	d108      	bne.n	80215e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80215d4:	687b      	ldr	r3, [r7, #4]
 80215d6:	2201      	movs	r2, #1
 80215d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80215dc:	687b      	ldr	r3, [r7, #4]
 80215de:	2201      	movs	r2, #1
 80215e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80215e4:	e031      	b.n	802164a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80215e6:	2310      	movs	r3, #16
 80215e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80215ea:	2310      	movs	r3, #16
 80215ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80215ee:	687b      	ldr	r3, [r7, #4]
 80215f0:	681b      	ldr	r3, [r3, #0]
 80215f2:	689b      	ldr	r3, [r3, #8]
 80215f4:	0e5b      	lsrs	r3, r3, #25
 80215f6:	b2db      	uxtb	r3, r3
 80215f8:	f003 0307 	and.w	r3, r3, #7
 80215fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80215fe:	687b      	ldr	r3, [r7, #4]
 8021600:	681b      	ldr	r3, [r3, #0]
 8021602:	689b      	ldr	r3, [r3, #8]
 8021604:	0f5b      	lsrs	r3, r3, #29
 8021606:	b2db      	uxtb	r3, r3
 8021608:	f003 0307 	and.w	r3, r3, #7
 802160c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802160e:	7bbb      	ldrb	r3, [r7, #14]
 8021610:	7b3a      	ldrb	r2, [r7, #12]
 8021612:	4911      	ldr	r1, [pc, #68]	@ (8021658 <UARTEx_SetNbDataToProcess+0x94>)
 8021614:	5c8a      	ldrb	r2, [r1, r2]
 8021616:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 802161a:	7b3a      	ldrb	r2, [r7, #12]
 802161c:	490f      	ldr	r1, [pc, #60]	@ (802165c <UARTEx_SetNbDataToProcess+0x98>)
 802161e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8021620:	fb93 f3f2 	sdiv	r3, r3, r2
 8021624:	b29a      	uxth	r2, r3
 8021626:	687b      	ldr	r3, [r7, #4]
 8021628:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802162c:	7bfb      	ldrb	r3, [r7, #15]
 802162e:	7b7a      	ldrb	r2, [r7, #13]
 8021630:	4909      	ldr	r1, [pc, #36]	@ (8021658 <UARTEx_SetNbDataToProcess+0x94>)
 8021632:	5c8a      	ldrb	r2, [r1, r2]
 8021634:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8021638:	7b7a      	ldrb	r2, [r7, #13]
 802163a:	4908      	ldr	r1, [pc, #32]	@ (802165c <UARTEx_SetNbDataToProcess+0x98>)
 802163c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802163e:	fb93 f3f2 	sdiv	r3, r3, r2
 8021642:	b29a      	uxth	r2, r3
 8021644:	687b      	ldr	r3, [r7, #4]
 8021646:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 802164a:	bf00      	nop
 802164c:	3714      	adds	r7, #20
 802164e:	46bd      	mov	sp, r7
 8021650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021654:	4770      	bx	lr
 8021656:	bf00      	nop
 8021658:	08027064 	.word	0x08027064
 802165c:	0802706c 	.word	0x0802706c

08021660 <prvInitialiseLogging>:

extern NetworkInterface_t xInterfaces[ 1 ];
/*-----------------------------------------------------------*/

static BaseType_t prvInitialiseLogging( void )
{
 8021660:	b580      	push	{r7, lr}
 8021662:	b082      	sub	sp, #8
 8021664:	af00      	add	r7, sp, #0
size_t xSize;
static BaseType_t xLoggingInitialised = pdFALSE;

	if( xLoggingInitialised == pdFALSE )
 8021666:	4b15      	ldr	r3, [pc, #84]	@ (80216bc <prvInitialiseLogging+0x5c>)
 8021668:	681b      	ldr	r3, [r3, #0]
 802166a:	2b00      	cmp	r3, #0
 802166c:	d120      	bne.n	80216b0 <prvInitialiseLogging+0x50>
	{
		/* Don't attempt to log unless the scheduler is running. */
		if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 802166e:	f7e3 f9e1 	bl	8004a34 <xTaskGetSchedulerState>
 8021672:	4603      	mov	r3, r0
 8021674:	2b02      	cmp	r3, #2
 8021676:	d11b      	bne.n	80216b0 <prvInitialiseLogging+0x50>
		{
			/* Create a stream buffer large enough for the maximum number of
			bytes + 1. */ /*_RB_ Why is the size of pxStreamBuffer->ucArray
			subtracted here? */
			xSize = sizeof( StreamBuffer_t ) - sizeof( pxStreamBuffer->ucArray ) + logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8021678:	f640 73b5 	movw	r3, #4021	@ 0xfb5
 802167c:	607b      	str	r3, [r7, #4]
			pxStreamBuffer = pvPortMalloc( xSize );
 802167e:	6878      	ldr	r0, [r7, #4]
 8021680:	f7e4 fb38 	bl	8005cf4 <pvPortMalloc>
 8021684:	4603      	mov	r3, r0
 8021686:	4a0e      	ldr	r2, [pc, #56]	@ (80216c0 <prvInitialiseLogging+0x60>)
 8021688:	6013      	str	r3, [r2, #0]

			if( pxStreamBuffer != NULL )
 802168a:	4b0d      	ldr	r3, [pc, #52]	@ (80216c0 <prvInitialiseLogging+0x60>)
 802168c:	681b      	ldr	r3, [r3, #0]
 802168e:	2b00      	cmp	r3, #0
 8021690:	d00e      	beq.n	80216b0 <prvInitialiseLogging+0x50>
			{
				memset( pxStreamBuffer, '\0', xSize );
 8021692:	4b0b      	ldr	r3, [pc, #44]	@ (80216c0 <prvInitialiseLogging+0x60>)
 8021694:	681b      	ldr	r3, [r3, #0]
 8021696:	687a      	ldr	r2, [r7, #4]
 8021698:	2100      	movs	r1, #0
 802169a:	4618      	mov	r0, r3
 802169c:	f000 fc35 	bl	8021f0a <memset>
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 80216a0:	4b07      	ldr	r3, [pc, #28]	@ (80216c0 <prvInitialiseLogging+0x60>)
 80216a2:	681b      	ldr	r3, [r3, #0]
 80216a4:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 80216a8:	611a      	str	r2, [r3, #16]

				xLoggingInitialised = pdTRUE;
 80216aa:	4b04      	ldr	r3, [pc, #16]	@ (80216bc <prvInitialiseLogging+0x5c>)
 80216ac:	2201      	movs	r2, #1
 80216ae:	601a      	str	r2, [r3, #0]
			}
		}
	}

	return xLoggingInitialised;
 80216b0:	4b02      	ldr	r3, [pc, #8]	@ (80216bc <prvInitialiseLogging+0x5c>)
 80216b2:	681b      	ldr	r3, [r3, #0]
}
 80216b4:	4618      	mov	r0, r3
 80216b6:	3708      	adds	r7, #8
 80216b8:	46bd      	mov	sp, r7
 80216ba:	bd80      	pop	{r7, pc}
 80216bc:	200024a0 	.word	0x200024a0
 80216c0:	20002490 	.word	0x20002490

080216c4 <prvGetMessageFromStreamBuffer>:
/*-----------------------------------------------------------*/

static size_t prvGetMessageFromStreamBuffer( char* pcBuffer, size_t xBufferLength )
{
 80216c4:	b580      	push	{r7, lr}
 80216c6:	b086      	sub	sp, #24
 80216c8:	af02      	add	r7, sp, #8
 80216ca:	6078      	str	r0, [r7, #4]
 80216cc:	6039      	str	r1, [r7, #0]
size_t uxLength;
size_t xMessageLength = 0;
 80216ce:	2300      	movs	r3, #0
 80216d0:	60bb      	str	r3, [r7, #8]

	if( pxStreamBuffer != NULL )
 80216d2:	4b24      	ldr	r3, [pc, #144]	@ (8021764 <prvGetMessageFromStreamBuffer+0xa0>)
 80216d4:	681b      	ldr	r3, [r3, #0]
 80216d6:	2b00      	cmp	r3, #0
 80216d8:	d03f      	beq.n	802175a <prvGetMessageFromStreamBuffer+0x96>
	{
		/* Is there data in the stream buffer? */
		uxLength = uxStreamBufferGetSize( pxStreamBuffer );
 80216da:	4b22      	ldr	r3, [pc, #136]	@ (8021764 <prvGetMessageFromStreamBuffer+0xa0>)
 80216dc:	681b      	ldr	r3, [r3, #0]
 80216de:	4618      	mov	r0, r3
 80216e0:	f7ee fe19 	bl	8010316 <uxStreamBufferGetSize>
 80216e4:	60f8      	str	r0, [r7, #12]
		if( uxLength > sizeof( size_t ) )
 80216e6:	68fb      	ldr	r3, [r7, #12]
 80216e8:	2b04      	cmp	r3, #4
 80216ea:	d936      	bls.n	802175a <prvGetMessageFromStreamBuffer+0x96>
		{
			/* Avoid concurrent access to the buffer. */
			vTaskSuspendAll();
 80216ec:	f7e2 fb84 	bl	8003df8 <vTaskSuspendAll>
			{
				/* Every message is stored as a length followed by the string.
				Obtain the length of the data first. */
				uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) &xMessageLength, sizeof( xMessageLength ), pdFALSE );
 80216f0:	4b1c      	ldr	r3, [pc, #112]	@ (8021764 <prvGetMessageFromStreamBuffer+0xa0>)
 80216f2:	6818      	ldr	r0, [r3, #0]
 80216f4:	f107 0208 	add.w	r2, r7, #8
 80216f8:	2300      	movs	r3, #0
 80216fa:	9300      	str	r3, [sp, #0]
 80216fc:	2304      	movs	r3, #4
 80216fe:	2100      	movs	r1, #0
 8021700:	f7ee ff27 	bl	8010552 <uxStreamBufferGet>

				if( xBufferLength < xMessageLength )
 8021704:	68bb      	ldr	r3, [r7, #8]
 8021706:	683a      	ldr	r2, [r7, #0]
 8021708:	429a      	cmp	r2, r3
 802170a:	d216      	bcs.n	802173a <prvGetMessageFromStreamBuffer+0x76>
				{
					/* The 'pcBuffer' provided by the caller is too small.  Load
					the message first into 'xLogEntry.message', and then copy
					as much as possible to 'pcBuffer'. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 802170c:	4b15      	ldr	r3, [pc, #84]	@ (8021764 <prvGetMessageFromStreamBuffer+0xa0>)
 802170e:	6818      	ldr	r0, [r3, #0]
 8021710:	68bb      	ldr	r3, [r7, #8]
 8021712:	2200      	movs	r2, #0
 8021714:	9200      	str	r2, [sp, #0]
 8021716:	4a14      	ldr	r2, [pc, #80]	@ (8021768 <prvGetMessageFromStreamBuffer+0xa4>)
 8021718:	2100      	movs	r1, #0
 802171a:	f7ee ff1a 	bl	8010552 <uxStreamBufferGet>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 802171e:	683a      	ldr	r2, [r7, #0]
 8021720:	4911      	ldr	r1, [pc, #68]	@ (8021768 <prvGetMessageFromStreamBuffer+0xa4>)
 8021722:	6878      	ldr	r0, [r7, #4]
 8021724:	f000 fae4 	bl	8021cf0 <memcpy>
					xMessageLength = xBufferLength;
 8021728:	683b      	ldr	r3, [r7, #0]
 802172a:	60bb      	str	r3, [r7, #8]

					/* Terminate the string at the very end of the buffer. */
					pcBuffer[ xBufferLength - 1 ] = 0x00;
 802172c:	683b      	ldr	r3, [r7, #0]
 802172e:	3b01      	subs	r3, #1
 8021730:	687a      	ldr	r2, [r7, #4]
 8021732:	4413      	add	r3, r2
 8021734:	2200      	movs	r2, #0
 8021736:	701a      	strb	r2, [r3, #0]
 8021738:	e00d      	b.n	8021756 <prvGetMessageFromStreamBuffer+0x92>
				}
				else
				{
					/* The 'pcBuffer' provided by the caller is big enough. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 802173a:	4b0a      	ldr	r3, [pc, #40]	@ (8021764 <prvGetMessageFromStreamBuffer+0xa0>)
 802173c:	6818      	ldr	r0, [r3, #0]
 802173e:	68bb      	ldr	r3, [r7, #8]
 8021740:	2200      	movs	r2, #0
 8021742:	9200      	str	r2, [sp, #0]
 8021744:	687a      	ldr	r2, [r7, #4]
 8021746:	2100      	movs	r1, #0
 8021748:	f7ee ff03 	bl	8010552 <uxStreamBufferGet>

					/* Terminate the string after the string's last character. */
					pcBuffer[ xMessageLength ] = 0x00;
 802174c:	68bb      	ldr	r3, [r7, #8]
 802174e:	687a      	ldr	r2, [r7, #4]
 8021750:	4413      	add	r3, r2
 8021752:	2200      	movs	r2, #0
 8021754:	701a      	strb	r2, [r3, #0]
				}
			}
			xTaskResumeAll();
 8021756:	f7e2 fb5d 	bl	8003e14 <xTaskResumeAll>
		}
	}

	return xMessageLength;
 802175a:	68bb      	ldr	r3, [r7, #8]
}
 802175c:	4618      	mov	r0, r3
 802175e:	3710      	adds	r7, #16
 8021760:	46bd      	mov	sp, r7
 8021762:	bd80      	pop	{r7, pc}
 8021764:	20002490 	.word	0x20002490
 8021768:	200023c8 	.word	0x200023c8

0802176c <prvBufferFormattedString>:
/*-----------------------------------------------------------*/

static size_t prvBufferFormattedString( const char *pcFormatString, va_list xArgs )
{
 802176c:	b580      	push	{r7, lr}
 802176e:	b08e      	sub	sp, #56	@ 0x38
 8021770:	af04      	add	r7, sp, #16
 8021772:	6078      	str	r0, [r7, #4]
 8021774:	6039      	str	r1, [r7, #0]
size_t xLength, xSpace;
uint64_t ullCurrentTime;
uint32_t ulSeconds, ulMilliSeconds, ulMicroSeconds;

	/* Sanity check. */
	configASSERT( pxStreamBuffer );
 8021776:	4b49      	ldr	r3, [pc, #292]	@ (802189c <prvBufferFormattedString+0x130>)
 8021778:	681b      	ldr	r3, [r3, #0]
 802177a:	2b00      	cmp	r3, #0
 802177c:	d104      	bne.n	8021788 <prvBufferFormattedString+0x1c>
 802177e:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8021782:	4847      	ldr	r0, [pc, #284]	@ (80218a0 <prvBufferFormattedString+0x134>)
 8021784:	f7df ff72 	bl	800166c <vAssertCalled>

	vTaskSuspendAll();
 8021788:	f7e2 fb36 	bl	8003df8 <vTaskSuspendAll>
	{
		ullCurrentTime = ullGetHighResolutionTime();
 802178c:	f000 fa2a 	bl	8021be4 <ullGetHighResolutionTime>
 8021790:	e9c7 0108 	strd	r0, r1, [r7, #32]
		ulSeconds = ( uint32_t ) ( ullCurrentTime / 1000000ull );
 8021794:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021798:	4a42      	ldr	r2, [pc, #264]	@ (80218a4 <prvBufferFormattedString+0x138>)
 802179a:	f04f 0300 	mov.w	r3, #0
 802179e:	f7de fe07 	bl	80003b0 <__aeabi_uldivmod>
 80217a2:	4602      	mov	r2, r0
 80217a4:	460b      	mov	r3, r1
 80217a6:	4613      	mov	r3, r2
 80217a8:	61fb      	str	r3, [r7, #28]
		ullCurrentTime = ullCurrentTime % 1000000ull;
 80217aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80217ae:	4a3d      	ldr	r2, [pc, #244]	@ (80218a4 <prvBufferFormattedString+0x138>)
 80217b0:	f04f 0300 	mov.w	r3, #0
 80217b4:	f7de fdfc 	bl	80003b0 <__aeabi_uldivmod>
 80217b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 80217bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80217c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80217c4:	f04f 0300 	mov.w	r3, #0
 80217c8:	f7de fdf2 	bl	80003b0 <__aeabi_uldivmod>
 80217cc:	4602      	mov	r2, r0
 80217ce:	460b      	mov	r3, r1
 80217d0:	4613      	mov	r3, r2
 80217d2:	61bb      	str	r3, [r7, #24]
		ulMicroSeconds = ( uint32_t ) ( ullCurrentTime % 1000ull );
 80217d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80217d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80217dc:	f04f 0300 	mov.w	r3, #0
 80217e0:	f7de fde6 	bl	80003b0 <__aeabi_uldivmod>
 80217e4:	4613      	mov	r3, r2
 80217e6:	617b      	str	r3, [r7, #20]

		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 80217e8:	2000      	movs	r0, #0
 80217ea:	f7e2 fc27 	bl	800403c <pcTaskGetName>
 80217ee:	4603      	mov	r3, r0
 80217f0:	9302      	str	r3, [sp, #8]
 80217f2:	697b      	ldr	r3, [r7, #20]
 80217f4:	9301      	str	r3, [sp, #4]
 80217f6:	69bb      	ldr	r3, [r7, #24]
 80217f8:	9300      	str	r3, [sp, #0]
 80217fa:	69fb      	ldr	r3, [r7, #28]
 80217fc:	4a2a      	ldr	r2, [pc, #168]	@ (80218a8 <prvBufferFormattedString+0x13c>)
 80217fe:	21c8      	movs	r1, #200	@ 0xc8
 8021800:	482a      	ldr	r0, [pc, #168]	@ (80218ac <prvBufferFormattedString+0x140>)
 8021802:	f001 f885 	bl	8022910 <snprintf>
 8021806:	4603      	mov	r3, r0
 8021808:	60fb      	str	r3, [r7, #12]
			( unsigned int ) ulSeconds, ( unsigned int ) ulMilliSeconds, ( unsigned int ) ulMicroSeconds, pcTaskGetTaskName( NULL ) );
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 802180a:	68fb      	ldr	r3, [r7, #12]
 802180c:	4a27      	ldr	r2, [pc, #156]	@ (80218ac <prvBufferFormattedString+0x140>)
 802180e:	1898      	adds	r0, r3, r2
 8021810:	68fb      	ldr	r3, [r7, #12]
 8021812:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 8021816:	683b      	ldr	r3, [r7, #0]
 8021818:	687a      	ldr	r2, [r7, #4]
 802181a:	f001 f85d 	bl	80228d8 <vsnprintf>
 802181e:	4603      	mov	r3, r0
 8021820:	461a      	mov	r2, r3
 8021822:	68fb      	ldr	r3, [r7, #12]
 8021824:	4413      	add	r3, r2
 8021826:	60fb      	str	r3, [r7, #12]

		xSpace = uxStreamBufferGetSpace( pxStreamBuffer );
 8021828:	4b1c      	ldr	r3, [pc, #112]	@ (802189c <prvBufferFormattedString+0x130>)
 802182a:	681b      	ldr	r3, [r3, #0]
 802182c:	4618      	mov	r0, r3
 802182e:	f7ee fd50 	bl	80102d2 <uxStreamBufferGetSpace>
 8021832:	6138      	str	r0, [r7, #16]

		if( xSpace > ( xLength + sizeof( BaseType_t ) ) )
 8021834:	68fb      	ldr	r3, [r7, #12]
 8021836:	3304      	adds	r3, #4
 8021838:	693a      	ldr	r2, [r7, #16]
 802183a:	429a      	cmp	r2, r3
 802183c:	d90e      	bls.n	802185c <prvBufferFormattedString+0xf0>
		{
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) &xLength, sizeof( xLength ) );
 802183e:	4b17      	ldr	r3, [pc, #92]	@ (802189c <prvBufferFormattedString+0x130>)
 8021840:	6818      	ldr	r0, [r3, #0]
 8021842:	f107 020c 	add.w	r2, r7, #12
 8021846:	2304      	movs	r3, #4
 8021848:	2100      	movs	r1, #0
 802184a:	f7ee fe02 	bl	8010452 <uxStreamBufferAdd>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) ( xLogEntry.cMessage ), xLength );
 802184e:	4b13      	ldr	r3, [pc, #76]	@ (802189c <prvBufferFormattedString+0x130>)
 8021850:	6818      	ldr	r0, [r3, #0]
 8021852:	68fb      	ldr	r3, [r7, #12]
 8021854:	4a15      	ldr	r2, [pc, #84]	@ (80218ac <prvBufferFormattedString+0x140>)
 8021856:	2100      	movs	r1, #0
 8021858:	f7ee fdfb 	bl	8010452 <uxStreamBufferAdd>
		}
	}
	xTaskResumeAll();
 802185c:	f7e2 fada 	bl	8003e14 <xTaskResumeAll>

	if( xLoggingTask == NULL )
 8021860:	4b13      	ldr	r3, [pc, #76]	@ (80218b0 <prvBufferFormattedString+0x144>)
 8021862:	681b      	ldr	r3, [r3, #0]
 8021864:	2b00      	cmp	r3, #0
 8021866:	d10a      	bne.n	802187e <prvBufferFormattedString+0x112>
	{
		/* The task isn't running yet, call the hook directly. */
		vUDPLoggingHook( xLogEntry.cMessage, xLength );
 8021868:	68fb      	ldr	r3, [r7, #12]
 802186a:	4619      	mov	r1, r3
 802186c:	480f      	ldr	r0, [pc, #60]	@ (80218ac <prvBufferFormattedString+0x140>)
 802186e:	f000 f85b 	bl	8021928 <vUDPLoggingHook>
		uxSkipCount++;
 8021872:	4b10      	ldr	r3, [pc, #64]	@ (80218b4 <prvBufferFormattedString+0x148>)
 8021874:	681b      	ldr	r3, [r3, #0]
 8021876:	3301      	adds	r3, #1
 8021878:	4a0e      	ldr	r2, [pc, #56]	@ (80218b4 <prvBufferFormattedString+0x148>)
 802187a:	6013      	str	r3, [r2, #0]
 802187c:	e008      	b.n	8021890 <prvBufferFormattedString+0x124>
	}
	else
	{
		/* Unblock the logging task so it can output the message. */
		xTaskNotifyGive( xLoggingTask );
 802187e:	4b0c      	ldr	r3, [pc, #48]	@ (80218b0 <prvBufferFormattedString+0x144>)
 8021880:	6818      	ldr	r0, [r3, #0]
 8021882:	2300      	movs	r3, #0
 8021884:	9300      	str	r3, [sp, #0]
 8021886:	2302      	movs	r3, #2
 8021888:	2200      	movs	r2, #0
 802188a:	2100      	movs	r1, #0
 802188c:	f7e3 fc18 	bl	80050c0 <xTaskGenericNotify>
	}

	return xLength;
 8021890:	68fb      	ldr	r3, [r7, #12]
}
 8021892:	4618      	mov	r0, r3
 8021894:	3728      	adds	r7, #40	@ 0x28
 8021896:	46bd      	mov	sp, r7
 8021898:	bd80      	pop	{r7, pc}
 802189a:	bf00      	nop
 802189c:	20002490 	.word	0x20002490
 80218a0:	08026e58 	.word	0x08026e58
 80218a4:	000f4240 	.word	0x000f4240
 80218a8:	08026e80 	.word	0x08026e80
 80218ac:	200023c8 	.word	0x200023c8
 80218b0:	20002494 	.word	0x20002494
 80218b4:	20002498 	.word	0x20002498

080218b8 <lUDPLoggingPrintf>:
/*-----------------------------------------------------------*/

int lUDPLoggingPrintf( const char *pcFormatString, ... )
{
 80218b8:	b40f      	push	{r0, r1, r2, r3}
 80218ba:	b580      	push	{r7, lr}
 80218bc:	b082      	sub	sp, #8
 80218be:	af00      	add	r7, sp, #0
size_t xLength;

	if( prvInitialiseLogging() != pdFALSE )
 80218c0:	f7ff fece 	bl	8021660 <prvInitialiseLogging>
 80218c4:	4603      	mov	r3, r0
 80218c6:	2b00      	cmp	r3, #0
 80218c8:	d008      	beq.n	80218dc <lUDPLoggingPrintf+0x24>
	{
		va_list args;
		va_start (args, pcFormatString);
 80218ca:	f107 0314 	add.w	r3, r7, #20
 80218ce:	603b      	str	r3, [r7, #0]
		xLength = prvBufferFormattedString (pcFormatString, args);
 80218d0:	6839      	ldr	r1, [r7, #0]
 80218d2:	6938      	ldr	r0, [r7, #16]
 80218d4:	f7ff ff4a 	bl	802176c <prvBufferFormattedString>
 80218d8:	6078      	str	r0, [r7, #4]
 80218da:	e001      	b.n	80218e0 <lUDPLoggingPrintf+0x28>
		va_end (args);
	}
	else
	{
		xLength = 0;
 80218dc:	2300      	movs	r3, #0
 80218de:	607b      	str	r3, [r7, #4]
	}

	return ( int ) xLength;
 80218e0:	687b      	ldr	r3, [r7, #4]
}
 80218e2:	4618      	mov	r0, r3
 80218e4:	3708      	adds	r7, #8
 80218e6:	46bd      	mov	sp, r7
 80218e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80218ec:	b004      	add	sp, #16
 80218ee:	4770      	bx	lr

080218f0 <vUDPLoggingTaskCreate>:
/*-----------------------------------------------------------*/

BaseType_t rc_create;

void vUDPLoggingTaskCreate( void )
{
 80218f0:	b580      	push	{r7, lr}
 80218f2:	b082      	sub	sp, #8
 80218f4:	af02      	add	r7, sp, #8
	/* Start a task which will send out the logging lines to a UDP address. */
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 80218f6:	4b08      	ldr	r3, [pc, #32]	@ (8021918 <vUDPLoggingTaskCreate+0x28>)
 80218f8:	9301      	str	r3, [sp, #4]
 80218fa:	2302      	movs	r3, #2
 80218fc:	9300      	str	r3, [sp, #0]
 80218fe:	2300      	movs	r3, #0
 8021900:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8021904:	4905      	ldr	r1, [pc, #20]	@ (802191c <vUDPLoggingTaskCreate+0x2c>)
 8021906:	4806      	ldr	r0, [pc, #24]	@ (8021920 <vUDPLoggingTaskCreate+0x30>)
 8021908:	f7e2 f87e 	bl	8003a08 <xTaskCreate>
 802190c:	4603      	mov	r3, r0
 802190e:	4a05      	ldr	r2, [pc, #20]	@ (8021924 <vUDPLoggingTaskCreate+0x34>)
 8021910:	6013      	str	r3, [r2, #0]
}
 8021912:	bf00      	nop
 8021914:	46bd      	mov	sp, r7
 8021916:	bd80      	pop	{r7, pc}
 8021918:	20002494 	.word	0x20002494
 802191c:	08026e98 	.word	0x08026e98
 8021920:	08021941 	.word	0x08021941
 8021924:	2000249c 	.word	0x2000249c

08021928 <vUDPLoggingHook>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void __attribute__((weak)) vUDPLoggingHook( const char *pcMessage, BaseType_t xLength )
{
 8021928:	b480      	push	{r7}
 802192a:	b083      	sub	sp, #12
 802192c:	af00      	add	r7, sp, #0
 802192e:	6078      	str	r0, [r7, #4]
 8021930:	6039      	str	r1, [r7, #0]
	( void ) pcMessage;
	( void ) xLength;
}
 8021932:	bf00      	nop
 8021934:	370c      	adds	r7, #12
 8021936:	46bd      	mov	sp, r7
 8021938:	f85d 7b04 	ldr.w	r7, [sp], #4
 802193c:	4770      	bx	lr
	...

08021940 <prvLoggingTask>:
#if( ipconfigOLD_MULTI != 0 )
	#define ENDPOINT_IS_IPv4( pxEndPoint )	( 1 )
#endif

static void prvLoggingTask( void *pvParameters )
{
 8021940:	b580      	push	{r7, lr}
 8021942:	b098      	sub	sp, #96	@ 0x60
 8021944:	af02      	add	r7, sp, #8
 8021946:	6078      	str	r0, [r7, #4]
TickType_t xBlockingTime = pdMS_TO_TICKS( logUDP_LOGGING_BLOCK_TIME_MS );
 8021948:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 802194c:	64bb      	str	r3, [r7, #72]	@ 0x48

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
		for( ;; )
		{
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 802194e:	2000      	movs	r0, #0
 8021950:	f7eb fa92 	bl	800ce78 <FreeRTOS_FirstEndPoint>
 8021954:	6538      	str	r0, [r7, #80]	@ 0x50
 8021956:	e01c      	b.n	8021992 <prvLoggingTask+0x52>
				pxEndPoint != NULL;
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
			{
				if( ( pxEndPoint->bits.bEndPointUp ) && ( ENDPOINT_IS_IPv4( pxEndPoint ) != pdFALSE) )
 8021958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802195a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 802195e:	f003 0310 	and.w	r3, r3, #16
 8021962:	b2db      	uxtb	r3, r3
 8021964:	2b00      	cmp	r3, #0
 8021966:	d00f      	beq.n	8021988 <prvLoggingTask+0x48>
 8021968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802196a:	2b00      	cmp	r3, #0
 802196c:	d009      	beq.n	8021982 <prvLoggingTask+0x42>
 802196e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021970:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8021974:	f003 0304 	and.w	r3, r3, #4
 8021978:	b2db      	uxtb	r3, r3
 802197a:	2b00      	cmp	r3, #0
 802197c:	d101      	bne.n	8021982 <prvLoggingTask+0x42>
 802197e:	2301      	movs	r3, #1
 8021980:	e000      	b.n	8021984 <prvLoggingTask+0x44>
 8021982:	2300      	movs	r3, #0
 8021984:	2b00      	cmp	r3, #0
 8021986:	d108      	bne.n	802199a <prvLoggingTask+0x5a>
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8021988:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 802198a:	2000      	movs	r0, #0
 802198c:	f7eb fa96 	bl	800cebc <FreeRTOS_NextEndPoint>
 8021990:	6538      	str	r0, [r7, #80]	@ 0x50
				pxEndPoint != NULL;
 8021992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021994:	2b00      	cmp	r3, #0
 8021996:	d1df      	bne.n	8021958 <prvLoggingTask+0x18>
 8021998:	e000      	b.n	802199c <prvLoggingTask+0x5c>
				{
					break;
 802199a:	bf00      	nop
				}
			}
			if( pxEndPoint != pdFALSE )
 802199c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802199e:	2b00      	cmp	r3, #0
 80219a0:	d000      	beq.n	80219a4 <prvLoggingTask+0x64>
			{
				break;
 80219a2:	e004      	b.n	80219ae <prvLoggingTask+0x6e>
			}
			vTaskDelay( 1000 );
 80219a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80219a8:	f7e2 f96e 	bl	8003c88 <vTaskDelay>
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80219ac:	e7cf      	b.n	802194e <prvLoggingTask+0xe>
	#endif	/* ( ipconfigMULTI_INTERFACE != 0 ) */

	/* Loop until a socket is created. */
	do
	{
		vTaskDelay( xBlockingTime );
 80219ae:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80219b0:	f7e2 f96a 	bl	8003c88 <vTaskDelay>
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 80219b4:	2211      	movs	r2, #17
 80219b6:	2102      	movs	r1, #2
 80219b8:	2002      	movs	r0, #2
 80219ba:	f7eb ffd9 	bl	800d970 <FreeRTOS_socket>
 80219be:	4603      	mov	r3, r0
 80219c0:	4a4c      	ldr	r2, [pc, #304]	@ (8021af4 <prvLoggingTask+0x1b4>)
 80219c2:	6013      	str	r3, [r2, #0]
	} while( xUDPLoggingSocket == FREERTOS_INVALID_SOCKET );
 80219c4:	4b4b      	ldr	r3, [pc, #300]	@ (8021af4 <prvLoggingTask+0x1b4>)
 80219c6:	681b      	ldr	r3, [r3, #0]
 80219c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80219cc:	d0ef      	beq.n	80219ae <prvLoggingTask+0x6e>

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
//		pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
		configASSERT( pxEndPoint != NULL );
 80219ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80219d0:	2b00      	cmp	r3, #0
 80219d2:	d104      	bne.n	80219de <prvLoggingTask+0x9e>
 80219d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80219d8:	4847      	ldr	r0, [pc, #284]	@ (8021af8 <prvLoggingTask+0x1b8>)
 80219da:	f7df fe47 	bl	800166c <vAssertCalled>
		configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 80219de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80219e0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80219e4:	2b00      	cmp	r3, #0
 80219e6:	d104      	bne.n	80219f2 <prvLoggingTask+0xb2>
 80219e8:	f240 11df 	movw	r1, #479	@ 0x1df
 80219ec:	4842      	ldr	r0, [pc, #264]	@ (8021af8 <prvLoggingTask+0x1b8>)
 80219ee:	f7df fe3d 	bl	800166c <vAssertCalled>
		pxNetworkInterface = pxEndPoint->pxNetworkInterface;
 80219f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80219f4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80219f8:	647b      	str	r3, [r7, #68]	@ 0x44
		//xRemoteAddress.sin_addr = FREERTOS_INADDR_ANY;
	}
	#endif

	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 80219fa:	f246 2309 	movw	r3, #25097	@ 0x6209
 80219fe:	857b      	strh	r3, [r7, #42]	@ 0x2a
	{
		xLocalAddress.sin_addr = pxEndPoint->ulIPAddress;
	}
	#else
	{
		xLocalAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress;
 8021a00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021a02:	681b      	ldr	r3, [r3, #0]
 8021a04:	633b      	str	r3, [r7, #48]	@ 0x30
	#endif
#else
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
#endif

	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 8021a06:	4b3b      	ldr	r3, [pc, #236]	@ (8021af4 <prvLoggingTask+0x1b4>)
 8021a08:	681b      	ldr	r3, [r3, #0]
 8021a0a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8021a0e:	2218      	movs	r2, #24
 8021a10:	4618      	mov	r0, r3
 8021a12:	f7ec f99d 	bl	800dd50 <FreeRTOS_bind>

	xSendTimeOut = xBlockingTime;
 8021a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021a18:	627b      	str	r3, [r7, #36]	@ 0x24
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 8021a1a:	4b36      	ldr	r3, [pc, #216]	@ (8021af4 <prvLoggingTask+0x1b4>)
 8021a1c:	6818      	ldr	r0, [r3, #0]
 8021a1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021a22:	2204      	movs	r2, #4
 8021a24:	9200      	str	r2, [sp, #0]
 8021a26:	2201      	movs	r2, #1
 8021a28:	2100      	movs	r1, #0
 8021a2a:	f7ec ff5b 	bl	800e8e4 <FreeRTOS_setsockopt>

	for( ;; )
	{
		/* Wait for another message to be placed into the stream buffer. */
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 8021a2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8021a30:	2101      	movs	r1, #1
 8021a32:	2000      	movs	r0, #0
 8021a34:	f7e3 fa38 	bl	8004ea8 <ulTaskGenericNotifyTake>

	#if( ipconfigMULTI_INTERFACE != 0 )
		if( pxNetworkInterface->pfGetPhyLinkStatus( pxNetworkInterface ) != pdFALSE )
 8021a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021a3a:	691b      	ldr	r3, [r3, #16]
 8021a3c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8021a3e:	4798      	blx	r3
 8021a40:	4603      	mov	r3, r0
 8021a42:	2b00      	cmp	r3, #0
 8021a44:	d0f3      	beq.n	8021a2e <prvLoggingTask+0xee>
	#else
		if( xSTM32H_GetPhyLinkStatus(&( xInterfaces[ 0 ] )) != pdFALSE )
	#endif
		{
			/* Check for messages in the buffer. */
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8021a46:	2300      	movs	r3, #0
 8021a48:	657b      	str	r3, [r7, #84]	@ 0x54
 8021a4a:	e04c      	b.n	8021ae6 <prvLoggingTask+0x1a6>
			{
				xCount = prvGetMessageFromStreamBuffer ( cLoggingLine, sizeof( cLoggingLine ) );
 8021a4c:	21c8      	movs	r1, #200	@ 0xc8
 8021a4e:	482b      	ldr	r0, [pc, #172]	@ (8021afc <prvLoggingTask+0x1bc>)
 8021a50:	f7ff fe38 	bl	80216c4 <prvGetMessageFromStreamBuffer>
 8021a54:	6438      	str	r0, [r7, #64]	@ 0x40

				if( xCount <= 0 )
 8021a56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021a58:	2b00      	cmp	r3, #0
 8021a5a:	d048      	beq.n	8021aee <prvLoggingTask+0x1ae>
				#if( ipconfigMULTI_INTERFACE != 0 )
				{
				struct freertos_sockaddr xAddress;
				NetworkEndPoint_t *pxEndPoint;

					for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8021a5c:	2000      	movs	r0, #0
 8021a5e:	f7eb fa0b 	bl	800ce78 <FreeRTOS_FirstEndPoint>
 8021a62:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8021a64:	e02a      	b.n	8021abc <prvLoggingTask+0x17c>
						pxEndPoint != NULL;
						)
					{
						if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8021a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021a68:	2b00      	cmp	r3, #0
 8021a6a:	d022      	beq.n	8021ab2 <prvLoggingTask+0x172>
 8021a6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021a6e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8021a72:	f003 0304 	and.w	r3, r3, #4
 8021a76:	b2db      	uxtb	r3, r3
 8021a78:	2b00      	cmp	r3, #0
 8021a7a:	d11a      	bne.n	8021ab2 <prvLoggingTask+0x172>
						{
							xAddress.sin_len = sizeof( xAddress );		/* length of this structure. */
 8021a7c:	2318      	movs	r3, #24
 8021a7e:	733b      	strb	r3, [r7, #12]
							xAddress.sin_family = FREERTOS_AF_INET;
 8021a80:	2302      	movs	r3, #2
 8021a82:	737b      	strb	r3, [r7, #13]
							{
								xAddress.sin_addr = pxEndPoint->ulIPAddress | ~( pxEndPoint->ulNetMask );
							}
							#else
							{
								xAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 8021a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021a86:	681a      	ldr	r2, [r3, #0]
 8021a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021a8a:	685b      	ldr	r3, [r3, #4]
 8021a8c:	43db      	mvns	r3, r3
 8021a8e:	4313      	orrs	r3, r2
 8021a90:	617b      	str	r3, [r7, #20]
							}
							#endif
							xAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 8021a92:	f246 3309 	movw	r3, #25353	@ 0x6309
 8021a96:	81fb      	strh	r3, [r7, #14]
							//if( pxNextEndPoint == NULL )
							{
								FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xAddress, sizeof( xAddress ) );
 8021a98:	4b16      	ldr	r3, [pc, #88]	@ (8021af4 <prvLoggingTask+0x1b4>)
 8021a9a:	6818      	ldr	r0, [r3, #0]
 8021a9c:	2318      	movs	r3, #24
 8021a9e:	9301      	str	r3, [sp, #4]
 8021aa0:	f107 030c 	add.w	r3, r7, #12
 8021aa4:	9300      	str	r3, [sp, #0]
 8021aa6:	2300      	movs	r3, #0
 8021aa8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8021aaa:	4914      	ldr	r1, [pc, #80]	@ (8021afc <prvLoggingTask+0x1bc>)
 8021aac:	f7ec f8e0 	bl	800dc70 <FreeRTOS_sendto>
							}
							break;
 8021ab0:	e007      	b.n	8021ac2 <prvLoggingTask+0x182>
						}
						pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint );
 8021ab2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8021ab4:	2000      	movs	r0, #0
 8021ab6:	f7eb fa01 	bl	800cebc <FreeRTOS_NextEndPoint>
 8021aba:	64f8      	str	r0, [r7, #76]	@ 0x4c
						pxEndPoint != NULL;
 8021abc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021abe:	2b00      	cmp	r3, #0
 8021ac0:	d1d1      	bne.n	8021a66 <prvLoggingTask+0x126>
				{
//#warning Do not send logging as a test
					FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
				}
				#endif
				if( uxSkipCount != ( size_t )0u )
 8021ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8021b00 <prvLoggingTask+0x1c0>)
 8021ac4:	681b      	ldr	r3, [r3, #0]
 8021ac6:	2b00      	cmp	r3, #0
 8021ac8:	d005      	beq.n	8021ad6 <prvLoggingTask+0x196>
				{
					uxSkipCount--;
 8021aca:	4b0d      	ldr	r3, [pc, #52]	@ (8021b00 <prvLoggingTask+0x1c0>)
 8021acc:	681b      	ldr	r3, [r3, #0]
 8021ace:	3b01      	subs	r3, #1
 8021ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8021b00 <prvLoggingTask+0x1c0>)
 8021ad2:	6013      	str	r3, [r2, #0]
 8021ad4:	e004      	b.n	8021ae0 <prvLoggingTask+0x1a0>
				}
				else
				{
					vUDPLoggingHook( cLoggingLine, xCount );
 8021ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021ad8:	4619      	mov	r1, r3
 8021ada:	4808      	ldr	r0, [pc, #32]	@ (8021afc <prvLoggingTask+0x1bc>)
 8021adc:	f7ff ff24 	bl	8021928 <vUDPLoggingHook>
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8021ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021ae2:	3301      	adds	r3, #1
 8021ae4:	657b      	str	r3, [r7, #84]	@ 0x54
 8021ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021ae8:	2b13      	cmp	r3, #19
 8021aea:	ddaf      	ble.n	8021a4c <prvLoggingTask+0x10c>
 8021aec:	e79f      	b.n	8021a2e <prvLoggingTask+0xee>
					break;
 8021aee:	bf00      	nop
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 8021af0:	e79d      	b.n	8021a2e <prvLoggingTask+0xee>
 8021af2:	bf00      	nop
 8021af4:	20000028 	.word	0x20000028
 8021af8:	08026e58 	.word	0x08026e58
 8021afc:	200024a4 	.word	0x200024a4
 8021b00:	20002498 	.word	0x20002498

08021b04 <TIM2_IRQHandler>:

static uint32_t ulInterruptCount = 0;

uint32_t ulTimer2Flags;
void TIM2_IRQHandler(void)
{
 8021b04:	b480      	push	{r7}
 8021b06:	af00      	add	r7, sp, #0
	ulTimer2Flags = htim2.Instance->SR;
 8021b08:	4b0c      	ldr	r3, [pc, #48]	@ (8021b3c <TIM2_IRQHandler+0x38>)
 8021b0a:	681b      	ldr	r3, [r3, #0]
 8021b0c:	691b      	ldr	r3, [r3, #16]
 8021b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8021b40 <TIM2_IRQHandler+0x3c>)
 8021b10:	6013      	str	r3, [r2, #0]
	if( ( ulTimer2Flags & TIM_FLAG_UPDATE ) != 0 )
 8021b12:	4b0b      	ldr	r3, [pc, #44]	@ (8021b40 <TIM2_IRQHandler+0x3c>)
 8021b14:	681b      	ldr	r3, [r3, #0]
 8021b16:	f003 0301 	and.w	r3, r3, #1
 8021b1a:	2b00      	cmp	r3, #0
 8021b1c:	d009      	beq.n	8021b32 <TIM2_IRQHandler+0x2e>
	{
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 8021b1e:	4b07      	ldr	r3, [pc, #28]	@ (8021b3c <TIM2_IRQHandler+0x38>)
 8021b20:	681b      	ldr	r3, [r3, #0]
 8021b22:	f06f 0201 	mvn.w	r2, #1
 8021b26:	611a      	str	r2, [r3, #16]
		ulInterruptCount++;
 8021b28:	4b06      	ldr	r3, [pc, #24]	@ (8021b44 <TIM2_IRQHandler+0x40>)
 8021b2a:	681b      	ldr	r3, [r3, #0]
 8021b2c:	3301      	adds	r3, #1
 8021b2e:	4a05      	ldr	r2, [pc, #20]	@ (8021b44 <TIM2_IRQHandler+0x40>)
 8021b30:	6013      	str	r3, [r2, #0]
	}
}
 8021b32:	bf00      	nop
 8021b34:	46bd      	mov	sp, r7
 8021b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b3a:	4770      	bx	lr
 8021b3c:	200003cc 	.word	0x200003cc
 8021b40:	20002570 	.word	0x20002570
 8021b44:	2000256c 	.word	0x2000256c

08021b48 <vStartHighResolutionTimer>:


/* Timer2 initialization function */
void vStartHighResolutionTimer( void )
{
 8021b48:	b580      	push	{r7, lr}
 8021b4a:	b082      	sub	sp, #8
 8021b4c:	af00      	add	r7, sp, #0
	/* TIM2 clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 8021b4e:	4b20      	ldr	r3, [pc, #128]	@ (8021bd0 <vStartHighResolutionTimer+0x88>)
 8021b50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8021b54:	4a1e      	ldr	r2, [pc, #120]	@ (8021bd0 <vStartHighResolutionTimer+0x88>)
 8021b56:	f043 0301 	orr.w	r3, r3, #1
 8021b5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8021b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8021bd0 <vStartHighResolutionTimer+0x88>)
 8021b60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8021b64:	f003 0301 	and.w	r3, r3, #1
 8021b68:	607b      	str	r3, [r7, #4]
 8021b6a:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;     /* Register base address             */
 8021b6c:	4b19      	ldr	r3, [pc, #100]	@ (8021bd4 <vStartHighResolutionTimer+0x8c>)
 8021b6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8021b72:	601a      	str	r2, [r3, #0]

	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 8021b74:	23c8      	movs	r3, #200	@ 0xc8
 8021b76:	3b01      	subs	r3, #1
 8021b78:	4a16      	ldr	r2, [pc, #88]	@ (8021bd4 <vStartHighResolutionTimer+0x8c>)
 8021b7a:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;			/* Specifies the counter mode. */
 8021b7c:	4b15      	ldr	r3, [pc, #84]	@ (8021bd4 <vStartHighResolutionTimer+0x8c>)
 8021b7e:	2200      	movs	r2, #0
 8021b80:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ( ulReloadCount - 1ul );			/* Specifies the period value to be loaded into the active. */
 8021b82:	4b15      	ldr	r3, [pc, #84]	@ (8021bd8 <vStartHighResolutionTimer+0x90>)
 8021b84:	3b01      	subs	r3, #1
 8021b86:	4a13      	ldr	r2, [pc, #76]	@ (8021bd4 <vStartHighResolutionTimer+0x8c>)
 8021b88:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;	/* Specifies the clock division. */
 8021b8a:	4b12      	ldr	r3, [pc, #72]	@ (8021bd4 <vStartHighResolutionTimer+0x8c>)
 8021b8c:	2200      	movs	r2, #0
 8021b8e:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0ul;					/* Specifies the repetition counter value. */
 8021b90:	4b10      	ldr	r3, [pc, #64]	@ (8021bd4 <vStartHighResolutionTimer+0x8c>)
 8021b92:	2200      	movs	r2, #0
 8021b94:	615a      	str	r2, [r3, #20]
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8021b96:	4b0f      	ldr	r3, [pc, #60]	@ (8021bd4 <vStartHighResolutionTimer+0x8c>)
 8021b98:	2201      	movs	r2, #1
 8021b9a:	771a      	strb	r2, [r3, #28]

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 8021b9c:	2200      	movs	r2, #0
 8021b9e:	2105      	movs	r1, #5
 8021ba0:	201c      	movs	r0, #28
 8021ba2:	f7f7 ffa4 	bl	8019aee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 8021ba6:	201c      	movs	r0, #28
 8021ba8:	f7f7 ffbb 	bl	8019b22 <HAL_NVIC_EnableIRQ>


	HAL_TIM_Base_Init( &htim2 );
 8021bac:	4809      	ldr	r0, [pc, #36]	@ (8021bd4 <vStartHighResolutionTimer+0x8c>)
 8021bae:	f7fd fc96 	bl	801f4de <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT( &htim2 );
 8021bb2:	4808      	ldr	r0, [pc, #32]	@ (8021bd4 <vStartHighResolutionTimer+0x8c>)
 8021bb4:	f7fd fcea 	bl	801f58c <HAL_TIM_Base_Start_IT>
	ulTimer2Flags = htim2.Instance->SR;
 8021bb8:	4b06      	ldr	r3, [pc, #24]	@ (8021bd4 <vStartHighResolutionTimer+0x8c>)
 8021bba:	681b      	ldr	r3, [r3, #0]
 8021bbc:	691b      	ldr	r3, [r3, #16]
 8021bbe:	4a07      	ldr	r2, [pc, #28]	@ (8021bdc <vStartHighResolutionTimer+0x94>)
 8021bc0:	6013      	str	r3, [r2, #0]
	/* Ignore the initial interrupt which sets ulInterruptCount = 1.*/
	ulInterruptCount = 0ul;
 8021bc2:	4b07      	ldr	r3, [pc, #28]	@ (8021be0 <vStartHighResolutionTimer+0x98>)
 8021bc4:	2200      	movs	r2, #0
 8021bc6:	601a      	str	r2, [r3, #0]
}
 8021bc8:	bf00      	nop
 8021bca:	3708      	adds	r7, #8
 8021bcc:	46bd      	mov	sp, r7
 8021bce:	bd80      	pop	{r7, pc}
 8021bd0:	58024400 	.word	0x58024400
 8021bd4:	200003cc 	.word	0x200003cc
 8021bd8:	00989680 	.word	0x00989680
 8021bdc:	20002570 	.word	0x20002570
 8021be0:	2000256c 	.word	0x2000256c

08021be4 <ullGetHighResolutionTime>:

uint64_t ullGetHighResolutionTime()
{
 8021be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021be8:	b08e      	sub	sp, #56	@ 0x38
 8021bea:	af00      	add	r7, sp, #0
uint64_t ullReturn;
	if( htim2.Instance == NULL )
 8021bec:	493d      	ldr	r1, [pc, #244]	@ (8021ce4 <ullGetHighResolutionTime+0x100>)
 8021bee:	6809      	ldr	r1, [r1, #0]
 8021bf0:	2900      	cmp	r1, #0
 8021bf2:	d132      	bne.n	8021c5a <ullGetHighResolutionTime+0x76>
	{
		ullReturn = 1000ull * xTaskGetTickCount();
 8021bf4:	f7e2 fa12 	bl	800401c <xTaskGetTickCount>
 8021bf8:	4603      	mov	r3, r0
 8021bfa:	2200      	movs	r2, #0
 8021bfc:	469a      	mov	sl, r3
 8021bfe:	4693      	mov	fp, r2
 8021c00:	4652      	mov	r2, sl
 8021c02:	465b      	mov	r3, fp
 8021c04:	f04f 0000 	mov.w	r0, #0
 8021c08:	f04f 0100 	mov.w	r1, #0
 8021c0c:	0159      	lsls	r1, r3, #5
 8021c0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8021c12:	0150      	lsls	r0, r2, #5
 8021c14:	4602      	mov	r2, r0
 8021c16:	460b      	mov	r3, r1
 8021c18:	ebb2 040a 	subs.w	r4, r2, sl
 8021c1c:	eb63 050b 	sbc.w	r5, r3, fp
 8021c20:	f04f 0200 	mov.w	r2, #0
 8021c24:	f04f 0300 	mov.w	r3, #0
 8021c28:	00ab      	lsls	r3, r5, #2
 8021c2a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8021c2e:	00a2      	lsls	r2, r4, #2
 8021c30:	4614      	mov	r4, r2
 8021c32:	461d      	mov	r5, r3
 8021c34:	eb14 080a 	adds.w	r8, r4, sl
 8021c38:	eb45 090b 	adc.w	r9, r5, fp
 8021c3c:	f04f 0200 	mov.w	r2, #0
 8021c40:	f04f 0300 	mov.w	r3, #0
 8021c44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8021c48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8021c4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8021c50:	4690      	mov	r8, r2
 8021c52:	4699      	mov	r9, r3
 8021c54:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
 8021c58:	e03c      	b.n	8021cd4 <ullGetHighResolutionTime+0xf0>
	uint32_t ulCounts[2];
	uint32_t ulSlowCount;

		for( ;; )
		{
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8021c5a:	4922      	ldr	r1, [pc, #136]	@ (8021ce4 <ullGetHighResolutionTime+0x100>)
 8021c5c:	6809      	ldr	r1, [r1, #0]
 8021c5e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8021c60:	6279      	str	r1, [r7, #36]	@ 0x24
			ulSlowCount = ulInterruptCount;
 8021c62:	4921      	ldr	r1, [pc, #132]	@ (8021ce8 <ullGetHighResolutionTime+0x104>)
 8021c64:	6809      	ldr	r1, [r1, #0]
 8021c66:	62f9      	str	r1, [r7, #44]	@ 0x2c
			ulCounts[ 1 ] = htim2.Instance->CNT;
 8021c68:	491e      	ldr	r1, [pc, #120]	@ (8021ce4 <ullGetHighResolutionTime+0x100>)
 8021c6a:	6809      	ldr	r1, [r1, #0]
 8021c6c:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8021c6e:	62b9      	str	r1, [r7, #40]	@ 0x28
			if( ulCounts[ 1 ] >= ulCounts[ 0 ] )
 8021c70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021c72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8021c74:	4288      	cmp	r0, r1
 8021c76:	d200      	bcs.n	8021c7a <ullGetHighResolutionTime+0x96>
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8021c78:	e7ef      	b.n	8021c5a <ullGetHighResolutionTime+0x76>
			{
				/* TIM2_IRQHandler() has not occurred in between. */
				break;
 8021c7a:	bf00      	nop
			}
		}
		ullReturn = ( uint64_t )ulSlowCount * ulReloadCount + ulCounts[ 1 ];
 8021c7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8021c7e:	2000      	movs	r0, #0
 8021c80:	61b9      	str	r1, [r7, #24]
 8021c82:	61f8      	str	r0, [r7, #28]
 8021c84:	4819      	ldr	r0, [pc, #100]	@ (8021cec <ullGetHighResolutionTime+0x108>)
 8021c86:	2100      	movs	r1, #0
 8021c88:	6138      	str	r0, [r7, #16]
 8021c8a:	6179      	str	r1, [r7, #20]
 8021c8c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8021c90:	4649      	mov	r1, r9
 8021c92:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8021c96:	4650      	mov	r0, sl
 8021c98:	fb00 f001 	mul.w	r0, r0, r1
 8021c9c:	4659      	mov	r1, fp
 8021c9e:	4644      	mov	r4, r8
 8021ca0:	fb04 f101 	mul.w	r1, r4, r1
 8021ca4:	4401      	add	r1, r0
 8021ca6:	4640      	mov	r0, r8
 8021ca8:	4654      	mov	r4, sl
 8021caa:	fba0 2304 	umull	r2, r3, r0, r4
 8021cae:	4419      	add	r1, r3
 8021cb0:	460b      	mov	r3, r1
 8021cb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8021cb4:	2000      	movs	r0, #0
 8021cb6:	60b9      	str	r1, [r7, #8]
 8021cb8:	60f8      	str	r0, [r7, #12]
 8021cba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8021cbe:	4621      	mov	r1, r4
 8021cc0:	1851      	adds	r1, r2, r1
 8021cc2:	6039      	str	r1, [r7, #0]
 8021cc4:	4629      	mov	r1, r5
 8021cc6:	eb43 0101 	adc.w	r1, r3, r1
 8021cca:	6079      	str	r1, [r7, #4]
 8021ccc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8021cd0:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
	}

	return ullReturn;
 8021cd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 8021cd8:	4610      	mov	r0, r2
 8021cda:	4619      	mov	r1, r3
 8021cdc:	3738      	adds	r7, #56	@ 0x38
 8021cde:	46bd      	mov	sp, r7
 8021ce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021ce4:	200003cc 	.word	0x200003cc
 8021ce8:	2000256c 	.word	0x2000256c
 8021cec:	00989680 	.word	0x00989680

08021cf0 <memcpy>:
	uint32_t uint32;
};

#if( SIMPLE_MEMCPY == 0 )
void *memcpy( void *pvDest, const void *pvSource, size_t ulBytes )
{
 8021cf0:	b480      	push	{r7}
 8021cf2:	b08d      	sub	sp, #52	@ 0x34
 8021cf4:	af00      	add	r7, sp, #0
 8021cf6:	60f8      	str	r0, [r7, #12]
 8021cf8:	60b9      	str	r1, [r7, #8]
 8021cfa:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxSource;
union xPointer pxLastSource;
uint32_t ulAlignBits;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8021cfc:	68fb      	ldr	r3, [r7, #12]
 8021cfe:	61bb      	str	r3, [r7, #24]
	pxSource.u8 = ( uint8_t * ) pvSource;
 8021d00:	68bb      	ldr	r3, [r7, #8]
 8021d02:	617b      	str	r3, [r7, #20]
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 8021d04:	697a      	ldr	r2, [r7, #20]
 8021d06:	687b      	ldr	r3, [r7, #4]
 8021d08:	4413      	add	r3, r2
 8021d0a:	613b      	str	r3, [r7, #16]

	ulAlignBits = ( pxDestination.uint32 & 0x03 ) ^ ( pxSource.uint32 & 0x03 );
 8021d0c:	69ba      	ldr	r2, [r7, #24]
 8021d0e:	697b      	ldr	r3, [r7, #20]
 8021d10:	4053      	eors	r3, r2
 8021d12:	f003 0303 	and.w	r3, r3, #3
 8021d16:	627b      	str	r3, [r7, #36]	@ 0x24

	if( ( ulAlignBits & 0x01 ) == 0 )
 8021d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021d1a:	f003 0301 	and.w	r3, r3, #1
 8021d1e:	2b00      	cmp	r3, #0
 8021d20:	f040 80a1 	bne.w	8021e66 <memcpy+0x176>
	{
		if( ( ( pxSource.uint32 & 1 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 ) )
 8021d24:	697b      	ldr	r3, [r7, #20]
 8021d26:	f003 0301 	and.w	r3, r3, #1
 8021d2a:	2b00      	cmp	r3, #0
 8021d2c:	d00b      	beq.n	8021d46 <memcpy+0x56>
 8021d2e:	697a      	ldr	r2, [r7, #20]
 8021d30:	693b      	ldr	r3, [r7, #16]
 8021d32:	429a      	cmp	r2, r3
 8021d34:	d207      	bcs.n	8021d46 <memcpy+0x56>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 8021d36:	697a      	ldr	r2, [r7, #20]
 8021d38:	1c53      	adds	r3, r2, #1
 8021d3a:	617b      	str	r3, [r7, #20]
 8021d3c:	69bb      	ldr	r3, [r7, #24]
 8021d3e:	1c59      	adds	r1, r3, #1
 8021d40:	61b9      	str	r1, [r7, #24]
 8021d42:	7812      	ldrb	r2, [r2, #0]
 8021d44:	701a      	strb	r2, [r3, #0]
		}
		/* 16-bit aligned here */
		if( ( ulAlignBits & 0x02 ) != 0 )
 8021d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021d48:	f003 0302 	and.w	r3, r3, #2
 8021d4c:	2b00      	cmp	r3, #0
 8021d4e:	d01f      	beq.n	8021d90 <memcpy+0xa0>
		{
			uint32_t extra = pxLastSource.uint32 & 0x01ul;
 8021d50:	693b      	ldr	r3, [r7, #16]
 8021d52:	f003 0301 	and.w	r3, r3, #1
 8021d56:	61fb      	str	r3, [r7, #28]

			pxLastSource.uint32 &= ~0x01ul;
 8021d58:	693b      	ldr	r3, [r7, #16]
 8021d5a:	f023 0301 	bic.w	r3, r3, #1
 8021d5e:	613b      	str	r3, [r7, #16]

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8021d60:	e00a      	b.n	8021d78 <memcpy+0x88>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8021d62:	697a      	ldr	r2, [r7, #20]
 8021d64:	1c93      	adds	r3, r2, #2
 8021d66:	617b      	str	r3, [r7, #20]
 8021d68:	69bb      	ldr	r3, [r7, #24]
 8021d6a:	1c99      	adds	r1, r3, #2
 8021d6c:	61b9      	str	r1, [r7, #24]
 8021d6e:	8812      	ldrh	r2, [r2, #0]
 8021d70:	801a      	strh	r2, [r3, #0]
					ulBytes -= 2;
 8021d72:	687b      	ldr	r3, [r7, #4]
 8021d74:	3b02      	subs	r3, #2
 8021d76:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8021d78:	697a      	ldr	r2, [r7, #20]
 8021d7a:	693b      	ldr	r3, [r7, #16]
 8021d7c:	429a      	cmp	r2, r3
 8021d7e:	d202      	bcs.n	8021d86 <memcpy+0x96>
 8021d80:	687b      	ldr	r3, [r7, #4]
 8021d82:	2b00      	cmp	r3, #0
 8021d84:	d1ed      	bne.n	8021d62 <memcpy+0x72>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8021d86:	693a      	ldr	r2, [r7, #16]
 8021d88:	69fb      	ldr	r3, [r7, #28]
 8021d8a:	4313      	orrs	r3, r2
 8021d8c:	613b      	str	r3, [r7, #16]
 8021d8e:	e0ae      	b.n	8021eee <memcpy+0x1fe>
		else
		{
			int iCount;
			uint32_t extra;

			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 8021d90:	697b      	ldr	r3, [r7, #20]
 8021d92:	f003 0302 	and.w	r3, r3, #2
 8021d96:	2b00      	cmp	r3, #0
 8021d98:	d00c      	beq.n	8021db4 <memcpy+0xc4>
 8021d9a:	697a      	ldr	r2, [r7, #20]
 8021d9c:	693b      	ldr	r3, [r7, #16]
 8021d9e:	3b01      	subs	r3, #1
 8021da0:	429a      	cmp	r2, r3
 8021da2:	d207      	bcs.n	8021db4 <memcpy+0xc4>
			{
				*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8021da4:	697a      	ldr	r2, [r7, #20]
 8021da6:	1c93      	adds	r3, r2, #2
 8021da8:	617b      	str	r3, [r7, #20]
 8021daa:	69bb      	ldr	r3, [r7, #24]
 8021dac:	1c99      	adds	r1, r3, #2
 8021dae:	61b9      	str	r1, [r7, #24]
 8021db0:	8812      	ldrh	r2, [r2, #0]
 8021db2:	801a      	strh	r2, [r3, #0]
			}
			// 32-bit aligned
			extra = pxLastSource.uint32 & 0x03ul;
 8021db4:	693b      	ldr	r3, [r7, #16]
 8021db6:	f003 0303 	and.w	r3, r3, #3
 8021dba:	623b      	str	r3, [r7, #32]

			pxLastSource.uint32 &= ~0x03ul;
 8021dbc:	693b      	ldr	r3, [r7, #16]
 8021dbe:	f023 0303 	bic.w	r3, r3, #3
 8021dc2:	613b      	str	r3, [r7, #16]
			iCount = pxLastSource.u32 - pxSource.u32;
 8021dc4:	693a      	ldr	r2, [r7, #16]
 8021dc6:	697b      	ldr	r3, [r7, #20]
 8021dc8:	1ad3      	subs	r3, r2, r3
 8021dca:	109b      	asrs	r3, r3, #2
 8021dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8021dce:	e02f      	b.n	8021e30 <memcpy+0x140>
			{
				/* Copy 32 bytes */
				/* Normally it doesn't make sense to make this list much longer because
				the indexes will get too big, and therefore longer instructions are needed. */
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 8021dd0:	697a      	ldr	r2, [r7, #20]
 8021dd2:	69bb      	ldr	r3, [r7, #24]
 8021dd4:	6812      	ldr	r2, [r2, #0]
 8021dd6:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 8021dd8:	697a      	ldr	r2, [r7, #20]
 8021dda:	69bb      	ldr	r3, [r7, #24]
 8021ddc:	3304      	adds	r3, #4
 8021dde:	6852      	ldr	r2, [r2, #4]
 8021de0:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 2 ] = pxSource.u32[ 2 ];
 8021de2:	697a      	ldr	r2, [r7, #20]
 8021de4:	69bb      	ldr	r3, [r7, #24]
 8021de6:	3308      	adds	r3, #8
 8021de8:	6892      	ldr	r2, [r2, #8]
 8021dea:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 3 ] = pxSource.u32[ 3 ];
 8021dec:	697a      	ldr	r2, [r7, #20]
 8021dee:	69bb      	ldr	r3, [r7, #24]
 8021df0:	330c      	adds	r3, #12
 8021df2:	68d2      	ldr	r2, [r2, #12]
 8021df4:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 4 ] = pxSource.u32[ 4 ];
 8021df6:	697a      	ldr	r2, [r7, #20]
 8021df8:	69bb      	ldr	r3, [r7, #24]
 8021dfa:	3310      	adds	r3, #16
 8021dfc:	6912      	ldr	r2, [r2, #16]
 8021dfe:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 5 ] = pxSource.u32[ 5 ];
 8021e00:	697a      	ldr	r2, [r7, #20]
 8021e02:	69bb      	ldr	r3, [r7, #24]
 8021e04:	3314      	adds	r3, #20
 8021e06:	6952      	ldr	r2, [r2, #20]
 8021e08:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 6 ] = pxSource.u32[ 6 ];
 8021e0a:	697a      	ldr	r2, [r7, #20]
 8021e0c:	69bb      	ldr	r3, [r7, #24]
 8021e0e:	3318      	adds	r3, #24
 8021e10:	6992      	ldr	r2, [r2, #24]
 8021e12:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 7 ] = pxSource.u32[ 7 ];
 8021e14:	697a      	ldr	r2, [r7, #20]
 8021e16:	69bb      	ldr	r3, [r7, #24]
 8021e18:	331c      	adds	r3, #28
 8021e1a:	69d2      	ldr	r2, [r2, #28]
 8021e1c:	601a      	str	r2, [r3, #0]
				pxDestination.u32 += 8;
 8021e1e:	69bb      	ldr	r3, [r7, #24]
 8021e20:	3320      	adds	r3, #32
 8021e22:	61bb      	str	r3, [r7, #24]
				pxSource.u32 += 8;
 8021e24:	697b      	ldr	r3, [r7, #20]
 8021e26:	3320      	adds	r3, #32
 8021e28:	617b      	str	r3, [r7, #20]
				iCount -= 8;
 8021e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021e2c:	3b08      	subs	r3, #8
 8021e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8021e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021e32:	2b08      	cmp	r3, #8
 8021e34:	dccc      	bgt.n	8021dd0 <memcpy+0xe0>
			}

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8021e36:	e00a      	b.n	8021e4e <memcpy+0x15e>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 8021e38:	697a      	ldr	r2, [r7, #20]
 8021e3a:	1d13      	adds	r3, r2, #4
 8021e3c:	617b      	str	r3, [r7, #20]
 8021e3e:	69bb      	ldr	r3, [r7, #24]
 8021e40:	1d19      	adds	r1, r3, #4
 8021e42:	61b9      	str	r1, [r7, #24]
 8021e44:	6812      	ldr	r2, [r2, #0]
 8021e46:	601a      	str	r2, [r3, #0]
					ulBytes -= 4;
 8021e48:	687b      	ldr	r3, [r7, #4]
 8021e4a:	3b04      	subs	r3, #4
 8021e4c:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8021e4e:	697a      	ldr	r2, [r7, #20]
 8021e50:	693b      	ldr	r3, [r7, #16]
 8021e52:	429a      	cmp	r2, r3
 8021e54:	d202      	bcs.n	8021e5c <memcpy+0x16c>
 8021e56:	687b      	ldr	r3, [r7, #4]
 8021e58:	2b00      	cmp	r3, #0
 8021e5a:	d1ed      	bne.n	8021e38 <memcpy+0x148>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8021e5c:	693a      	ldr	r2, [r7, #16]
 8021e5e:	6a3b      	ldr	r3, [r7, #32]
 8021e60:	4313      	orrs	r3, r2
 8021e62:	613b      	str	r3, [r7, #16]
 8021e64:	e043      	b.n	8021eee <memcpy+0x1fe>
	}
	else
	{
		/* This it the worst alignment, e.g. 0x80000 and 0xA0001,
		only 8-bits copying is possible. */
		int iCount = pxLastSource.u8 - pxSource.u8;
 8021e66:	693a      	ldr	r2, [r7, #16]
 8021e68:	697b      	ldr	r3, [r7, #20]
 8021e6a:	1ad3      	subs	r3, r2, r3
 8021e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8021e6e:	e02f      	b.n	8021ed0 <memcpy+0x1e0>
		{
			/* Copy 8 bytes the hard way */
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 8021e70:	697a      	ldr	r2, [r7, #20]
 8021e72:	69bb      	ldr	r3, [r7, #24]
 8021e74:	7812      	ldrb	r2, [r2, #0]
 8021e76:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 1 ] = pxSource.u8[ 1 ];
 8021e78:	697a      	ldr	r2, [r7, #20]
 8021e7a:	69bb      	ldr	r3, [r7, #24]
 8021e7c:	3301      	adds	r3, #1
 8021e7e:	7852      	ldrb	r2, [r2, #1]
 8021e80:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 2 ] = pxSource.u8[ 2 ];
 8021e82:	697a      	ldr	r2, [r7, #20]
 8021e84:	69bb      	ldr	r3, [r7, #24]
 8021e86:	3302      	adds	r3, #2
 8021e88:	7892      	ldrb	r2, [r2, #2]
 8021e8a:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 3 ] = pxSource.u8[ 3 ];
 8021e8c:	697a      	ldr	r2, [r7, #20]
 8021e8e:	69bb      	ldr	r3, [r7, #24]
 8021e90:	3303      	adds	r3, #3
 8021e92:	78d2      	ldrb	r2, [r2, #3]
 8021e94:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 4 ] = pxSource.u8[ 4 ];
 8021e96:	697a      	ldr	r2, [r7, #20]
 8021e98:	69bb      	ldr	r3, [r7, #24]
 8021e9a:	3304      	adds	r3, #4
 8021e9c:	7912      	ldrb	r2, [r2, #4]
 8021e9e:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 5 ] = pxSource.u8[ 5 ];
 8021ea0:	697a      	ldr	r2, [r7, #20]
 8021ea2:	69bb      	ldr	r3, [r7, #24]
 8021ea4:	3305      	adds	r3, #5
 8021ea6:	7952      	ldrb	r2, [r2, #5]
 8021ea8:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 6 ] = pxSource.u8[ 6 ];
 8021eaa:	697a      	ldr	r2, [r7, #20]
 8021eac:	69bb      	ldr	r3, [r7, #24]
 8021eae:	3306      	adds	r3, #6
 8021eb0:	7992      	ldrb	r2, [r2, #6]
 8021eb2:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 7 ] = pxSource.u8[ 7 ];
 8021eb4:	697a      	ldr	r2, [r7, #20]
 8021eb6:	69bb      	ldr	r3, [r7, #24]
 8021eb8:	3307      	adds	r3, #7
 8021eba:	79d2      	ldrb	r2, [r2, #7]
 8021ebc:	701a      	strb	r2, [r3, #0]
			pxDestination.u8 += 8;
 8021ebe:	69bb      	ldr	r3, [r7, #24]
 8021ec0:	3308      	adds	r3, #8
 8021ec2:	61bb      	str	r3, [r7, #24]
			pxSource.u8 += 8;
 8021ec4:	697b      	ldr	r3, [r7, #20]
 8021ec6:	3308      	adds	r3, #8
 8021ec8:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8021eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ecc:	3b08      	subs	r3, #8
 8021ece:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8021ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ed2:	2b08      	cmp	r3, #8
 8021ed4:	dccc      	bgt.n	8021e70 <memcpy+0x180>
		}
	}
	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8021ed6:	e00a      	b.n	8021eee <memcpy+0x1fe>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
 8021ed8:	697a      	ldr	r2, [r7, #20]
 8021eda:	1c53      	adds	r3, r2, #1
 8021edc:	617b      	str	r3, [r7, #20]
 8021ede:	69bb      	ldr	r3, [r7, #24]
 8021ee0:	1c59      	adds	r1, r3, #1
 8021ee2:	61b9      	str	r1, [r7, #24]
 8021ee4:	7812      	ldrb	r2, [r2, #0]
 8021ee6:	701a      	strb	r2, [r3, #0]
			ulBytes--;
 8021ee8:	687b      	ldr	r3, [r7, #4]
 8021eea:	3b01      	subs	r3, #1
 8021eec:	607b      	str	r3, [r7, #4]
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8021eee:	697a      	ldr	r2, [r7, #20]
 8021ef0:	693b      	ldr	r3, [r7, #16]
 8021ef2:	429a      	cmp	r2, r3
 8021ef4:	d202      	bcs.n	8021efc <memcpy+0x20c>
 8021ef6:	687b      	ldr	r3, [r7, #4]
 8021ef8:	2b00      	cmp	r3, #0
 8021efa:	d1ed      	bne.n	8021ed8 <memcpy+0x1e8>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
		}
	}
	#endif
	return pvDest;
 8021efc:	68fb      	ldr	r3, [r7, #12]
}
 8021efe:	4618      	mov	r0, r3
 8021f00:	3734      	adds	r7, #52	@ 0x34
 8021f02:	46bd      	mov	sp, r7
 8021f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f08:	4770      	bx	lr

08021f0a <memset>:
/*-----------------------------------------------------------*/


#if( SIMPLE_MEMSET == 0 )
void *memset(void *pvDest, int iValue, size_t ulBytes)
{
 8021f0a:	b480      	push	{r7}
 8021f0c:	b08b      	sub	sp, #44	@ 0x2c
 8021f0e:	af00      	add	r7, sp, #0
 8021f10:	60f8      	str	r0, [r7, #12]
 8021f12:	60b9      	str	r1, [r7, #8]
 8021f14:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxLast;
uint32_t ulPattern;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8021f16:	68fb      	ldr	r3, [r7, #12]
 8021f18:	617b      	str	r3, [r7, #20]
	pxLast.u8 = pxDestination.u8 + ulBytes;
 8021f1a:	697a      	ldr	r2, [r7, #20]
 8021f1c:	687b      	ldr	r3, [r7, #4]
 8021f1e:	4413      	add	r3, r2
 8021f20:	613b      	str	r3, [r7, #16]

	if( ulBytes >= 8 )
 8021f22:	687b      	ldr	r3, [r7, #4]
 8021f24:	2b07      	cmp	r3, #7
 8021f26:	d97b      	bls.n	8022020 <memset+0x116>
	{
	uint32_t ulAlignBits;
	uint32_t ulExtra;
	int iCount;

		ulPattern = iValue & 0xff;
 8021f28:	68bb      	ldr	r3, [r7, #8]
 8021f2a:	b2db      	uxtb	r3, r3
 8021f2c:	61fb      	str	r3, [r7, #28]
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
 8021f2e:	69fb      	ldr	r3, [r7, #28]
 8021f30:	021a      	lsls	r2, r3, #8
 8021f32:	69fb      	ldr	r3, [r7, #28]
 8021f34:	041b      	lsls	r3, r3, #16
 8021f36:	431a      	orrs	r2, r3
 8021f38:	69fb      	ldr	r3, [r7, #28]
 8021f3a:	061b      	lsls	r3, r3, #24
 8021f3c:	4313      	orrs	r3, r2
 8021f3e:	69fa      	ldr	r2, [r7, #28]
 8021f40:	4313      	orrs	r3, r2
 8021f42:	61fb      	str	r3, [r7, #28]
		ulAlignBits = ( pxDestination.uint32 & 0x03 );
 8021f44:	697b      	ldr	r3, [r7, #20]
 8021f46:	f003 0303 	and.w	r3, r3, #3
 8021f4a:	627b      	str	r3, [r7, #36]	@ 0x24
		if( ulAlignBits != 0 )
 8021f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f4e:	2b00      	cmp	r3, #0
 8021f50:	d010      	beq.n	8021f74 <memset+0x6a>
		{
			ulAlignBits = 4 - ulAlignBits;
 8021f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f54:	f1c3 0304 	rsb	r3, r3, #4
 8021f58:	627b      	str	r3, [r7, #36]	@ 0x24
			while( ulAlignBits-- > 0 )
 8021f5a:	e006      	b.n	8021f6a <memset+0x60>
			{
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 8021f5c:	697b      	ldr	r3, [r7, #20]
 8021f5e:	68ba      	ldr	r2, [r7, #8]
 8021f60:	b2d2      	uxtb	r2, r2
 8021f62:	701a      	strb	r2, [r3, #0]
				pxDestination.u8++;
 8021f64:	697b      	ldr	r3, [r7, #20]
 8021f66:	3301      	adds	r3, #1
 8021f68:	617b      	str	r3, [r7, #20]
			while( ulAlignBits-- > 0 )
 8021f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f6c:	1e5a      	subs	r2, r3, #1
 8021f6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8021f70:	2b00      	cmp	r3, #0
 8021f72:	d1f3      	bne.n	8021f5c <memset+0x52>
			}
		}
		/* Strip-off the last 1 up-to 3 bytes because they can not be set in a 32-bit
		memory instruction. */
		ulExtra = pxLast.uint32 & 0x03ul;
 8021f74:	693b      	ldr	r3, [r7, #16]
 8021f76:	f003 0303 	and.w	r3, r3, #3
 8021f7a:	61bb      	str	r3, [r7, #24]

		pxLast.uint32 &= ~0x03ul;
 8021f7c:	693b      	ldr	r3, [r7, #16]
 8021f7e:	f023 0303 	bic.w	r3, r3, #3
 8021f82:	613b      	str	r3, [r7, #16]
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 8021f84:	693a      	ldr	r2, [r7, #16]
 8021f86:	697b      	ldr	r3, [r7, #20]
 8021f88:	1ad3      	subs	r3, r2, r3
 8021f8a:	109b      	asrs	r3, r3, #2
 8021f8c:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 8021f8e:	e024      	b.n	8021fda <memset+0xd0>
		{
			/* Set 8 * 4 bytes and save some increments */
			/* It won't make sense to make this list much longer than 8 assignments. */
			pxDestination.u32[ 0 ] = ulPattern;
 8021f90:	697b      	ldr	r3, [r7, #20]
 8021f92:	69fa      	ldr	r2, [r7, #28]
 8021f94:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 1 ] = ulPattern;
 8021f96:	697b      	ldr	r3, [r7, #20]
 8021f98:	3304      	adds	r3, #4
 8021f9a:	69fa      	ldr	r2, [r7, #28]
 8021f9c:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 2 ] = ulPattern;
 8021f9e:	697b      	ldr	r3, [r7, #20]
 8021fa0:	3308      	adds	r3, #8
 8021fa2:	69fa      	ldr	r2, [r7, #28]
 8021fa4:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 3 ] = ulPattern;
 8021fa6:	697b      	ldr	r3, [r7, #20]
 8021fa8:	330c      	adds	r3, #12
 8021faa:	69fa      	ldr	r2, [r7, #28]
 8021fac:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 4 ] = ulPattern;
 8021fae:	697b      	ldr	r3, [r7, #20]
 8021fb0:	3310      	adds	r3, #16
 8021fb2:	69fa      	ldr	r2, [r7, #28]
 8021fb4:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 5 ] = ulPattern;
 8021fb6:	697b      	ldr	r3, [r7, #20]
 8021fb8:	3314      	adds	r3, #20
 8021fba:	69fa      	ldr	r2, [r7, #28]
 8021fbc:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 6 ] = ulPattern;
 8021fbe:	697b      	ldr	r3, [r7, #20]
 8021fc0:	3318      	adds	r3, #24
 8021fc2:	69fa      	ldr	r2, [r7, #28]
 8021fc4:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 7 ] = ulPattern;
 8021fc6:	697b      	ldr	r3, [r7, #20]
 8021fc8:	331c      	adds	r3, #28
 8021fca:	69fa      	ldr	r2, [r7, #28]
 8021fcc:	601a      	str	r2, [r3, #0]
			pxDestination.u32 += 8;
 8021fce:	697b      	ldr	r3, [r7, #20]
 8021fd0:	3320      	adds	r3, #32
 8021fd2:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8021fd4:	6a3b      	ldr	r3, [r7, #32]
 8021fd6:	3b08      	subs	r3, #8
 8021fd8:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 8021fda:	6a3b      	ldr	r3, [r7, #32]
 8021fdc:	2b08      	cmp	r3, #8
 8021fde:	dcd7      	bgt.n	8021f90 <memset+0x86>
		}

		#if( MEMCPY_USES_LOOP_COUNTER != 0 )
		{
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8021fe0:	e008      	b.n	8021ff4 <memset+0xea>
			{
				pxDestination.u32[0] = ulPattern;
 8021fe2:	697b      	ldr	r3, [r7, #20]
 8021fe4:	69fa      	ldr	r2, [r7, #28]
 8021fe6:	601a      	str	r2, [r3, #0]
				pxDestination.u32++;
 8021fe8:	697b      	ldr	r3, [r7, #20]
 8021fea:	3304      	adds	r3, #4
 8021fec:	617b      	str	r3, [r7, #20]
				ulBytes += 4;
 8021fee:	687b      	ldr	r3, [r7, #4]
 8021ff0:	3304      	adds	r3, #4
 8021ff2:	607b      	str	r3, [r7, #4]
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8021ff4:	697a      	ldr	r2, [r7, #20]
 8021ff6:	693b      	ldr	r3, [r7, #16]
 8021ff8:	429a      	cmp	r2, r3
 8021ffa:	d202      	bcs.n	8022002 <memset+0xf8>
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	2b00      	cmp	r3, #0
 8022000:	d1ef      	bne.n	8021fe2 <memset+0xd8>
				pxDestination.u32[0] = ulPattern;
				pxDestination.u32++;
			}
		}
		#endif
		pxLast.uint32 |= ulExtra;
 8022002:	693a      	ldr	r2, [r7, #16]
 8022004:	69bb      	ldr	r3, [r7, #24]
 8022006:	4313      	orrs	r3, r2
 8022008:	613b      	str	r3, [r7, #16]
	}

	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 802200a:	e009      	b.n	8022020 <memset+0x116>
		{
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
 802200c:	697b      	ldr	r3, [r7, #20]
 802200e:	68ba      	ldr	r2, [r7, #8]
 8022010:	b2d2      	uxtb	r2, r2
 8022012:	701a      	strb	r2, [r3, #0]
			pxDestination.u8++;
 8022014:	697b      	ldr	r3, [r7, #20]
 8022016:	3301      	adds	r3, #1
 8022018:	617b      	str	r3, [r7, #20]
			ulBytes++;
 802201a:	687b      	ldr	r3, [r7, #4]
 802201c:	3301      	adds	r3, #1
 802201e:	607b      	str	r3, [r7, #4]
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8022020:	697a      	ldr	r2, [r7, #20]
 8022022:	693b      	ldr	r3, [r7, #16]
 8022024:	429a      	cmp	r2, r3
 8022026:	d202      	bcs.n	802202e <memset+0x124>
 8022028:	687b      	ldr	r3, [r7, #4]
 802202a:	2b00      	cmp	r3, #0
 802202c:	d1ee      	bne.n	802200c <memset+0x102>
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
			pxDestination.u8++;
		}
	}
	#endif
	return pvDest;
 802202e:	68fb      	ldr	r3, [r7, #12]
}
 8022030:	4618      	mov	r0, r3
 8022032:	372c      	adds	r7, #44	@ 0x2c
 8022034:	46bd      	mov	sp, r7
 8022036:	f85d 7b04 	ldr.w	r7, [sp], #4
 802203a:	4770      	bx	lr

0802203c <xApplicationMemoryPermissions>:
extern void vOutputChar( const char cChar, const TickType_t xTicksToWait  );

#ifdef __GNUC__

__attribute__((weak)) BaseType_t xApplicationMemoryPermissions( uint32_t aAddress )
{
 802203c:	b480      	push	{r7}
 802203e:	b083      	sub	sp, #12
 8022040:	af00      	add	r7, sp, #0
 8022042:	6078      	str	r0, [r7, #4]
	( void ) aAddress;
	/* Return 1 for readable, 2 for writeable, 3 for both. */
	return 0x03;
 8022044:	2303      	movs	r3, #3
}
 8022046:	4618      	mov	r0, r3
 8022048:	370c      	adds	r7, #12
 802204a:	46bd      	mov	sp, r7
 802204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022050:	4770      	bx	lr

08022052 <vOutputChar>:


__attribute__((weak)) void vOutputChar( const char cChar, const TickType_t xTicksToWait  )
{
 8022052:	b480      	push	{r7}
 8022054:	b083      	sub	sp, #12
 8022056:	af00      	add	r7, sp, #0
 8022058:	4603      	mov	r3, r0
 802205a:	6039      	str	r1, [r7, #0]
 802205c:	71fb      	strb	r3, [r7, #7]
	( void ) cChar;
	( void ) xTicksToWait;
	/* Do nothing. */
}
 802205e:	bf00      	nop
 8022060:	370c      	adds	r7, #12
 8022062:	46bd      	mov	sp, r7
 8022064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022068:	4770      	bx	lr

0802206a <strbuf_init>:
#else
	static const _U32 u32 = { 0, 1, 2, 3 };
#endif

static void strbuf_init( struct SStringBuf *apStr, char *apBuf, const char *apMaxStr )
{
 802206a:	b580      	push	{r7, lr}
 802206c:	b084      	sub	sp, #16
 802206e:	af00      	add	r7, sp, #0
 8022070:	60f8      	str	r0, [r7, #12]
 8022072:	60b9      	str	r1, [r7, #8]
 8022074:	607a      	str	r2, [r7, #4]
	apStr->str = apBuf;
 8022076:	68fb      	ldr	r3, [r7, #12]
 8022078:	68ba      	ldr	r2, [r7, #8]
 802207a:	601a      	str	r2, [r3, #0]
	apStr->orgStr = apBuf;
 802207c:	68fb      	ldr	r3, [r7, #12]
 802207e:	68ba      	ldr	r2, [r7, #8]
 8022080:	605a      	str	r2, [r3, #4]
	apStr->nulPos = apMaxStr-1;
 8022082:	687b      	ldr	r3, [r7, #4]
 8022084:	1e5a      	subs	r2, r3, #1
 8022086:	68fb      	ldr	r3, [r7, #12]
 8022088:	609a      	str	r2, [r3, #8]
	apStr->curLen = 0;
 802208a:	68fb      	ldr	r3, [r7, #12]
 802208c:	2200      	movs	r2, #0
 802208e:	60da      	str	r2, [r3, #12]

	memset( &apStr->flags, '\0', sizeof apStr->flags );
 8022090:	68fb      	ldr	r3, [r7, #12]
 8022092:	3310      	adds	r3, #16
 8022094:	2210      	movs	r2, #16
 8022096:	2100      	movs	r1, #0
 8022098:	4618      	mov	r0, r3
 802209a:	f7ff ff36 	bl	8021f0a <memset>
}
 802209e:	bf00      	nop
 80220a0:	3710      	adds	r7, #16
 80220a2:	46bd      	mov	sp, r7
 80220a4:	bd80      	pop	{r7, pc}

080220a6 <strbuf_printchar>:
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 80220a6:	b580      	push	{r7, lr}
 80220a8:	b082      	sub	sp, #8
 80220aa:	af00      	add	r7, sp, #0
 80220ac:	6078      	str	r0, [r7, #4]
 80220ae:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 80220b0:	687b      	ldr	r3, [r7, #4]
 80220b2:	681b      	ldr	r3, [r3, #0]
 80220b4:	2b00      	cmp	r3, #0
 80220b6:	d10d      	bne.n	80220d4 <strbuf_printchar+0x2e>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 80220b8:	683b      	ldr	r3, [r7, #0]
 80220ba:	b2db      	uxtb	r3, r3
 80220bc:	2214      	movs	r2, #20
 80220be:	4611      	mov	r1, r2
 80220c0:	4618      	mov	r0, r3
 80220c2:	f7ff ffc6 	bl	8022052 <vOutputChar>
		apStr->curLen++;
 80220c6:	687b      	ldr	r3, [r7, #4]
 80220c8:	68db      	ldr	r3, [r3, #12]
 80220ca:	1c5a      	adds	r2, r3, #1
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 80220d0:	2301      	movs	r3, #1
 80220d2:	e022      	b.n	802211a <strbuf_printchar+0x74>
	}
	if( apStr->str < apStr->nulPos )
 80220d4:	687b      	ldr	r3, [r7, #4]
 80220d6:	681a      	ldr	r2, [r3, #0]
 80220d8:	687b      	ldr	r3, [r7, #4]
 80220da:	689b      	ldr	r3, [r3, #8]
 80220dc:	429a      	cmp	r2, r3
 80220de:	d20e      	bcs.n	80220fe <strbuf_printchar+0x58>
	{
		*( apStr->str++ ) = c;
 80220e0:	687b      	ldr	r3, [r7, #4]
 80220e2:	681b      	ldr	r3, [r3, #0]
 80220e4:	1c59      	adds	r1, r3, #1
 80220e6:	687a      	ldr	r2, [r7, #4]
 80220e8:	6011      	str	r1, [r2, #0]
 80220ea:	683a      	ldr	r2, [r7, #0]
 80220ec:	b2d2      	uxtb	r2, r2
 80220ee:	701a      	strb	r2, [r3, #0]
		apStr->curLen++;
 80220f0:	687b      	ldr	r3, [r7, #4]
 80220f2:	68db      	ldr	r3, [r3, #12]
 80220f4:	1c5a      	adds	r2, r3, #1
 80220f6:	687b      	ldr	r3, [r7, #4]
 80220f8:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 80220fa:	2301      	movs	r3, #1
 80220fc:	e00d      	b.n	802211a <strbuf_printchar+0x74>
	}
	if( apStr->str == apStr->nulPos )
 80220fe:	687b      	ldr	r3, [r7, #4]
 8022100:	681a      	ldr	r2, [r3, #0]
 8022102:	687b      	ldr	r3, [r7, #4]
 8022104:	689b      	ldr	r3, [r3, #8]
 8022106:	429a      	cmp	r2, r3
 8022108:	d106      	bne.n	8022118 <strbuf_printchar+0x72>
	{
		*( apStr->str++ ) = '\0';
 802210a:	687b      	ldr	r3, [r7, #4]
 802210c:	681b      	ldr	r3, [r3, #0]
 802210e:	1c59      	adds	r1, r3, #1
 8022110:	687a      	ldr	r2, [r7, #4]
 8022112:	6011      	str	r1, [r2, #0]
 8022114:	2200      	movs	r2, #0
 8022116:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8022118:	2300      	movs	r3, #0
}
 802211a:	4618      	mov	r0, r3
 802211c:	3708      	adds	r7, #8
 802211e:	46bd      	mov	sp, r7
 8022120:	bd80      	pop	{r7, pc}

08022122 <strbuf_printchar_inline>:
/*-----------------------------------------------------------*/

static __inline BaseType_t strbuf_printchar_inline( struct SStringBuf *apStr, int c )
{
 8022122:	b580      	push	{r7, lr}
 8022124:	b082      	sub	sp, #8
 8022126:	af00      	add	r7, sp, #0
 8022128:	6078      	str	r0, [r7, #4]
 802212a:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 802212c:	687b      	ldr	r3, [r7, #4]
 802212e:	681b      	ldr	r3, [r3, #0]
 8022130:	2b00      	cmp	r3, #0
 8022132:	d112      	bne.n	802215a <strbuf_printchar_inline+0x38>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8022134:	683b      	ldr	r3, [r7, #0]
 8022136:	b2db      	uxtb	r3, r3
 8022138:	2214      	movs	r2, #20
 802213a:	4611      	mov	r1, r2
 802213c:	4618      	mov	r0, r3
 802213e:	f7ff ff88 	bl	8022052 <vOutputChar>
		if( c == 0 )
 8022142:	683b      	ldr	r3, [r7, #0]
 8022144:	2b00      	cmp	r3, #0
 8022146:	d101      	bne.n	802214c <strbuf_printchar_inline+0x2a>
		{
			return pdFALSE;
 8022148:	2300      	movs	r3, #0
 802214a:	e02e      	b.n	80221aa <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 802214c:	687b      	ldr	r3, [r7, #4]
 802214e:	68db      	ldr	r3, [r3, #12]
 8022150:	1c5a      	adds	r2, r3, #1
 8022152:	687b      	ldr	r3, [r7, #4]
 8022154:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022156:	2301      	movs	r3, #1
 8022158:	e027      	b.n	80221aa <strbuf_printchar_inline+0x88>
	}
	if( apStr->str < apStr->nulPos )
 802215a:	687b      	ldr	r3, [r7, #4]
 802215c:	681a      	ldr	r2, [r3, #0]
 802215e:	687b      	ldr	r3, [r7, #4]
 8022160:	689b      	ldr	r3, [r3, #8]
 8022162:	429a      	cmp	r2, r3
 8022164:	d213      	bcs.n	802218e <strbuf_printchar_inline+0x6c>
	{
		*(apStr->str++) = c;
 8022166:	687b      	ldr	r3, [r7, #4]
 8022168:	681b      	ldr	r3, [r3, #0]
 802216a:	1c59      	adds	r1, r3, #1
 802216c:	687a      	ldr	r2, [r7, #4]
 802216e:	6011      	str	r1, [r2, #0]
 8022170:	683a      	ldr	r2, [r7, #0]
 8022172:	b2d2      	uxtb	r2, r2
 8022174:	701a      	strb	r2, [r3, #0]
		if( c == 0 )
 8022176:	683b      	ldr	r3, [r7, #0]
 8022178:	2b00      	cmp	r3, #0
 802217a:	d101      	bne.n	8022180 <strbuf_printchar_inline+0x5e>
		{
			return pdFALSE;
 802217c:	2300      	movs	r3, #0
 802217e:	e014      	b.n	80221aa <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 8022180:	687b      	ldr	r3, [r7, #4]
 8022182:	68db      	ldr	r3, [r3, #12]
 8022184:	1c5a      	adds	r2, r3, #1
 8022186:	687b      	ldr	r3, [r7, #4]
 8022188:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 802218a:	2301      	movs	r3, #1
 802218c:	e00d      	b.n	80221aa <strbuf_printchar_inline+0x88>
	}
	if( apStr->str == apStr->nulPos )
 802218e:	687b      	ldr	r3, [r7, #4]
 8022190:	681a      	ldr	r2, [r3, #0]
 8022192:	687b      	ldr	r3, [r7, #4]
 8022194:	689b      	ldr	r3, [r3, #8]
 8022196:	429a      	cmp	r2, r3
 8022198:	d106      	bne.n	80221a8 <strbuf_printchar_inline+0x86>
	{
		*( apStr->str++ ) = '\0';
 802219a:	687b      	ldr	r3, [r7, #4]
 802219c:	681b      	ldr	r3, [r3, #0]
 802219e:	1c59      	adds	r1, r3, #1
 80221a0:	687a      	ldr	r2, [r7, #4]
 80221a2:	6011      	str	r1, [r2, #0]
 80221a4:	2200      	movs	r2, #0
 80221a6:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 80221a8:	2300      	movs	r3, #0
}
 80221aa:	4618      	mov	r0, r3
 80221ac:	3708      	adds	r7, #8
 80221ae:	46bd      	mov	sp, r7
 80221b0:	bd80      	pop	{r7, pc}
	...

080221b4 <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 80221b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80221b6:	b085      	sub	sp, #20
 80221b8:	af00      	add	r7, sp, #0
 80221ba:	6078      	str	r0, [r7, #4]
 80221bc:	6039      	str	r1, [r7, #0]
	register int padchar = ' ';
 80221be:	2620      	movs	r6, #32
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 80221c0:	683b      	ldr	r3, [r7, #0]
 80221c2:	4618      	mov	r0, r3
 80221c4:	f7ff ff3a 	bl	802203c <xApplicationMemoryPermissions>
 80221c8:	4603      	mov	r3, r0
 80221ca:	2b00      	cmp	r3, #0
 80221cc:	d101      	bne.n	80221d2 <prints+0x1e>
	{
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
 80221ce:	4b4c      	ldr	r3, [pc, #304]	@ (8022300 <prints+0x14c>)
 80221d0:	603b      	str	r3, [r7, #0]
	}

	if( apBuf->flags.width > 0 )
 80221d2:	687b      	ldr	r3, [r7, #4]
 80221d4:	695b      	ldr	r3, [r3, #20]
 80221d6:	2b00      	cmp	r3, #0
 80221d8:	dd1b      	ble.n	8022212 <prints+0x5e>
	{
		register int count = 0;
 80221da:	2400      	movs	r4, #0
		register const char *ptr;
		for( ptr = apString; *ptr; ++ptr )
 80221dc:	683d      	ldr	r5, [r7, #0]
 80221de:	e001      	b.n	80221e4 <prints+0x30>
		{
			++count;
 80221e0:	3401      	adds	r4, #1
		for( ptr = apString; *ptr; ++ptr )
 80221e2:	3501      	adds	r5, #1
 80221e4:	782b      	ldrb	r3, [r5, #0]
 80221e6:	2b00      	cmp	r3, #0
 80221e8:	d1fa      	bne.n	80221e0 <prints+0x2c>
		}

		if( count >= apBuf->flags.width )
 80221ea:	687b      	ldr	r3, [r7, #4]
 80221ec:	695b      	ldr	r3, [r3, #20]
 80221ee:	429c      	cmp	r4, r3
 80221f0:	db03      	blt.n	80221fa <prints+0x46>
		{
			apBuf->flags.width = 0;
 80221f2:	687b      	ldr	r3, [r7, #4]
 80221f4:	2200      	movs	r2, #0
 80221f6:	615a      	str	r2, [r3, #20]
 80221f8:	e004      	b.n	8022204 <prints+0x50>
		}
		else
		{
			apBuf->flags.width -= count;
 80221fa:	687b      	ldr	r3, [r7, #4]
 80221fc:	695b      	ldr	r3, [r3, #20]
 80221fe:	1b1a      	subs	r2, r3, r4
 8022200:	687b      	ldr	r3, [r7, #4]
 8022202:	615a      	str	r2, [r3, #20]
		}

		if( apBuf->flags.pad & PAD_ZERO )
 8022204:	687b      	ldr	r3, [r7, #4]
 8022206:	7f1b      	ldrb	r3, [r3, #28]
 8022208:	f003 0302 	and.w	r3, r3, #2
 802220c:	2b00      	cmp	r3, #0
 802220e:	d000      	beq.n	8022212 <prints+0x5e>
		{
			padchar = '0';
 8022210:	2630      	movs	r6, #48	@ 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 8022212:	687b      	ldr	r3, [r7, #4]
 8022214:	7f1b      	ldrb	r3, [r3, #28]
 8022216:	f003 0301 	and.w	r3, r3, #1
 802221a:	2b00      	cmp	r3, #0
 802221c:	d112      	bne.n	8022244 <prints+0x90>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 802221e:	e00d      	b.n	802223c <prints+0x88>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 8022220:	4631      	mov	r1, r6
 8022222:	6878      	ldr	r0, [r7, #4]
 8022224:	f7ff ff3f 	bl	80220a6 <strbuf_printchar>
 8022228:	4603      	mov	r3, r0
 802222a:	2b00      	cmp	r3, #0
 802222c:	d101      	bne.n	8022232 <prints+0x7e>
			{
				return pdFALSE;
 802222e:	2300      	movs	r3, #0
 8022230:	e062      	b.n	80222f8 <prints+0x144>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8022232:	687b      	ldr	r3, [r7, #4]
 8022234:	695b      	ldr	r3, [r3, #20]
 8022236:	1e5a      	subs	r2, r3, #1
 8022238:	687b      	ldr	r3, [r7, #4]
 802223a:	615a      	str	r2, [r3, #20]
 802223c:	687b      	ldr	r3, [r7, #4]
 802223e:	695b      	ldr	r3, [r3, #20]
 8022240:	2b00      	cmp	r3, #0
 8022242:	dced      	bgt.n	8022220 <prints+0x6c>
			}
		}
	}
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 8022244:	687b      	ldr	r3, [r7, #4]
 8022246:	7f9b      	ldrb	r3, [r3, #30]
 8022248:	f003 0302 	and.w	r3, r3, #2
 802224c:	b2db      	uxtb	r3, r3
 802224e:	2b00      	cmp	r3, #0
 8022250:	d036      	beq.n	80222c0 <prints+0x10c>
 8022252:	687b      	ldr	r3, [r7, #4]
 8022254:	7f1b      	ldrb	r3, [r3, #28]
 8022256:	2b01      	cmp	r3, #1
 8022258:	d132      	bne.n	80222c0 <prints+0x10c>
		/* The string to print represents an integer number.
		 * In this case, printLimit is the min number of digits to print
		 * If the length of the number to print is less than the min nb of i
		 * digits to display, we add 0 before printing the number
		 */
		len = strlen( apString );
 802225a:	6838      	ldr	r0, [r7, #0]
 802225c:	f7de f84a 	bl	80002f4 <strlen>
 8022260:	4603      	mov	r3, r0
 8022262:	60bb      	str	r3, [r7, #8]

		if( len < apBuf->flags.printLimit )
 8022264:	687b      	ldr	r3, [r7, #4]
 8022266:	699b      	ldr	r3, [r3, #24]
 8022268:	68ba      	ldr	r2, [r7, #8]
 802226a:	429a      	cmp	r2, r3
 802226c:	da28      	bge.n	80222c0 <prints+0x10c>
		{
			i = apBuf->flags.printLimit - len;
 802226e:	687b      	ldr	r3, [r7, #4]
 8022270:	699a      	ldr	r2, [r3, #24]
 8022272:	68bb      	ldr	r3, [r7, #8]
 8022274:	1ad3      	subs	r3, r2, r3
 8022276:	60fb      	str	r3, [r7, #12]
			for( ; i; i-- )
 8022278:	e00b      	b.n	8022292 <prints+0xde>
			{
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 802227a:	2130      	movs	r1, #48	@ 0x30
 802227c:	6878      	ldr	r0, [r7, #4]
 802227e:	f7ff ff12 	bl	80220a6 <strbuf_printchar>
 8022282:	4603      	mov	r3, r0
 8022284:	2b00      	cmp	r3, #0
 8022286:	d101      	bne.n	802228c <prints+0xd8>
				{
					return pdFALSE;
 8022288:	2300      	movs	r3, #0
 802228a:	e035      	b.n	80222f8 <prints+0x144>
			for( ; i; i-- )
 802228c:	68fb      	ldr	r3, [r7, #12]
 802228e:	3b01      	subs	r3, #1
 8022290:	60fb      	str	r3, [r7, #12]
 8022292:	68fb      	ldr	r3, [r7, #12]
 8022294:	2b00      	cmp	r3, #0
 8022296:	d1f0      	bne.n	802227a <prints+0xc6>
		}
	}
	/* The string to print is not the result of a number conversion to ascii.
	 * For a string, printLimit is the max number of characters to display
	 */
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8022298:	e012      	b.n	80222c0 <prints+0x10c>
	{
		if( !strbuf_printchar( apBuf, *apString ) )
 802229a:	683b      	ldr	r3, [r7, #0]
 802229c:	781b      	ldrb	r3, [r3, #0]
 802229e:	4619      	mov	r1, r3
 80222a0:	6878      	ldr	r0, [r7, #4]
 80222a2:	f7ff ff00 	bl	80220a6 <strbuf_printchar>
 80222a6:	4603      	mov	r3, r0
 80222a8:	2b00      	cmp	r3, #0
 80222aa:	d101      	bne.n	80222b0 <prints+0xfc>
		{
			return pdFALSE;
 80222ac:	2300      	movs	r3, #0
 80222ae:	e023      	b.n	80222f8 <prints+0x144>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 80222b0:	683b      	ldr	r3, [r7, #0]
 80222b2:	3301      	adds	r3, #1
 80222b4:	603b      	str	r3, [r7, #0]
 80222b6:	687b      	ldr	r3, [r7, #4]
 80222b8:	699b      	ldr	r3, [r3, #24]
 80222ba:	1e5a      	subs	r2, r3, #1
 80222bc:	687b      	ldr	r3, [r7, #4]
 80222be:	619a      	str	r2, [r3, #24]
 80222c0:	687b      	ldr	r3, [r7, #4]
 80222c2:	699b      	ldr	r3, [r3, #24]
 80222c4:	2b00      	cmp	r3, #0
 80222c6:	d012      	beq.n	80222ee <prints+0x13a>
 80222c8:	683b      	ldr	r3, [r7, #0]
 80222ca:	781b      	ldrb	r3, [r3, #0]
 80222cc:	2b00      	cmp	r3, #0
 80222ce:	d1e4      	bne.n	802229a <prints+0xe6>
		}
	}

	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80222d0:	e00d      	b.n	80222ee <prints+0x13a>
	{
		if( !strbuf_printchar( apBuf, padchar ) )
 80222d2:	4631      	mov	r1, r6
 80222d4:	6878      	ldr	r0, [r7, #4]
 80222d6:	f7ff fee6 	bl	80220a6 <strbuf_printchar>
 80222da:	4603      	mov	r3, r0
 80222dc:	2b00      	cmp	r3, #0
 80222de:	d101      	bne.n	80222e4 <prints+0x130>
		{
			return pdFALSE;
 80222e0:	2300      	movs	r3, #0
 80222e2:	e009      	b.n	80222f8 <prints+0x144>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80222e4:	687b      	ldr	r3, [r7, #4]
 80222e6:	695b      	ldr	r3, [r3, #20]
 80222e8:	1e5a      	subs	r2, r3, #1
 80222ea:	687b      	ldr	r3, [r7, #4]
 80222ec:	615a      	str	r2, [r3, #20]
 80222ee:	687b      	ldr	r3, [r7, #4]
 80222f0:	695b      	ldr	r3, [r3, #20]
 80222f2:	2b00      	cmp	r3, #0
 80222f4:	dced      	bgt.n	80222d2 <prints+0x11e>
		}
	}

	return pdTRUE;
 80222f6:	2301      	movs	r3, #1
}
 80222f8:	4618      	mov	r0, r3
 80222fa:	3714      	adds	r7, #20
 80222fc:	46bd      	mov	sp, r7
 80222fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022300:	08026ea0 	.word	0x08026ea0

08022304 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 8022304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022308:	b087      	sub	sp, #28
 802230a:	af00      	add	r7, sp, #0
 802230c:	6078      	str	r0, [r7, #4]
 802230e:	6039      	str	r1, [r7, #0]
	char print_buf[ PRINT_BUF_LEN ];
	register char *s;
	register int t, neg = 0;
 8022310:	f04f 0900 	mov.w	r9, #0
	register unsigned int u = i;
 8022314:	683d      	ldr	r5, [r7, #0]
	register unsigned base = apBuf->flags.base;
 8022316:	687b      	ldr	r3, [r7, #4]
 8022318:	691b      	ldr	r3, [r3, #16]
 802231a:	461e      	mov	r6, r3

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 802231c:	687a      	ldr	r2, [r7, #4]
 802231e:	7f93      	ldrb	r3, [r2, #30]
 8022320:	f043 0302 	orr.w	r3, r3, #2
 8022324:	7793      	strb	r3, [r2, #30]

	if( i == 0 )
 8022326:	683b      	ldr	r3, [r7, #0]
 8022328:	2b00      	cmp	r3, #0
 802232a:	d10b      	bne.n	8022344 <printi+0x40>
	{
		print_buf[ 0 ] = '0';
 802232c:	2330      	movs	r3, #48	@ 0x30
 802232e:	733b      	strb	r3, [r7, #12]
		print_buf[ 1 ] = '\0';
 8022330:	2300      	movs	r3, #0
 8022332:	737b      	strb	r3, [r7, #13]
		return prints( apBuf, print_buf );
 8022334:	f107 030c 	add.w	r3, r7, #12
 8022338:	4619      	mov	r1, r3
 802233a:	6878      	ldr	r0, [r7, #4]
 802233c:	f7ff ff3a 	bl	80221b4 <prints>
 8022340:	4603      	mov	r3, r0
 8022342:	e067      	b.n	8022414 <printi+0x110>
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 8022344:	687b      	ldr	r3, [r7, #4]
 8022346:	7f9b      	ldrb	r3, [r3, #30]
 8022348:	f003 0301 	and.w	r3, r3, #1
 802234c:	b2db      	uxtb	r3, r3
 802234e:	2b00      	cmp	r3, #0
 8022350:	d009      	beq.n	8022366 <printi+0x62>
 8022352:	2e0a      	cmp	r6, #10
 8022354:	d107      	bne.n	8022366 <printi+0x62>
 8022356:	683b      	ldr	r3, [r7, #0]
 8022358:	2b00      	cmp	r3, #0
 802235a:	da04      	bge.n	8022366 <printi+0x62>
	{
		neg = 1;
 802235c:	f04f 0901 	mov.w	r9, #1
		u = -i;
 8022360:	683b      	ldr	r3, [r7, #0]
 8022362:	425b      	negs	r3, r3
 8022364:	461d      	mov	r5, r3
	}

	s = print_buf + sizeof print_buf - 1;
 8022366:	f107 040c 	add.w	r4, r7, #12
 802236a:	340b      	adds	r4, #11

	*s = '\0';
 802236c:	2300      	movs	r3, #0
 802236e:	7023      	strb	r3, [r4, #0]
	switch( base )
 8022370:	2e10      	cmp	r6, #16
 8022372:	d017      	beq.n	80223a4 <printi+0xa0>
 8022374:	2e10      	cmp	r6, #16
 8022376:	d829      	bhi.n	80223cc <printi+0xc8>
 8022378:	2e08      	cmp	r6, #8
 802237a:	d024      	beq.n	80223c6 <printi+0xc2>
 802237c:	2e0a      	cmp	r6, #10
 802237e:	d022      	beq.n	80223c6 <printi+0xc2>
 8022380:	e024      	b.n	80223cc <printi+0xc8>
	{
	case 16:
		while( u != 0 )
		{
			t = u & 0xF;
 8022382:	462b      	mov	r3, r5
 8022384:	f003 080f 	and.w	r8, r3, #15
			if( t >= 10 )
 8022388:	f1b8 0f09 	cmp.w	r8, #9
 802238c:	dd03      	ble.n	8022396 <printi+0x92>
			{
				t += apBuf->flags.letBase - '0' - 10;
 802238e:	687b      	ldr	r3, [r7, #4]
 8022390:	7f5b      	ldrb	r3, [r3, #29]
 8022392:	3b3a      	subs	r3, #58	@ 0x3a
 8022394:	4498      	add	r8, r3
			}
			*( --s ) = t + '0';
 8022396:	fa5f f388 	uxtb.w	r3, r8
 802239a:	3c01      	subs	r4, #1
 802239c:	3330      	adds	r3, #48	@ 0x30
 802239e:	b2db      	uxtb	r3, r3
 80223a0:	7023      	strb	r3, [r4, #0]
			u >>= 4;
 80223a2:	092d      	lsrs	r5, r5, #4
		while( u != 0 )
 80223a4:	2d00      	cmp	r5, #0
 80223a6:	d1ec      	bne.n	8022382 <printi+0x7e>
		}
		break;
 80223a8:	e010      	b.n	80223cc <printi+0xc8>
	case 8:
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
 80223aa:	fbb5 f3f6 	udiv	r3, r5, r6
 80223ae:	fb06 f303 	mul.w	r3, r6, r3
 80223b2:	1aeb      	subs	r3, r5, r3
 80223b4:	4698      	mov	r8, r3
			*( --s ) = t + '0';
 80223b6:	fa5f f388 	uxtb.w	r3, r8
 80223ba:	3c01      	subs	r4, #1
 80223bc:	3330      	adds	r3, #48	@ 0x30
 80223be:	b2db      	uxtb	r3, r3
 80223c0:	7023      	strb	r3, [r4, #0]
			u /= base;
 80223c2:	fbb5 f5f6 	udiv	r5, r5, r6
		while( u )
 80223c6:	2d00      	cmp	r5, #0
 80223c8:	d1ef      	bne.n	80223aa <printi+0xa6>
		}
		break;
 80223ca:	bf00      	nop
		}
		break;
*/
	}

	if( neg != 0 )
 80223cc:	f1b9 0f00 	cmp.w	r9, #0
 80223d0:	d01b      	beq.n	802240a <printi+0x106>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 80223d2:	687b      	ldr	r3, [r7, #4]
 80223d4:	695b      	ldr	r3, [r3, #20]
 80223d6:	2b00      	cmp	r3, #0
 80223d8:	d014      	beq.n	8022404 <printi+0x100>
 80223da:	687b      	ldr	r3, [r7, #4]
 80223dc:	7f1b      	ldrb	r3, [r3, #28]
 80223de:	f003 0302 	and.w	r3, r3, #2
 80223e2:	2b00      	cmp	r3, #0
 80223e4:	d00e      	beq.n	8022404 <printi+0x100>
		{
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 80223e6:	212d      	movs	r1, #45	@ 0x2d
 80223e8:	6878      	ldr	r0, [r7, #4]
 80223ea:	f7ff fe5c 	bl	80220a6 <strbuf_printchar>
 80223ee:	4603      	mov	r3, r0
 80223f0:	2b00      	cmp	r3, #0
 80223f2:	d101      	bne.n	80223f8 <printi+0xf4>
			{
				return pdFALSE;
 80223f4:	2300      	movs	r3, #0
 80223f6:	e00d      	b.n	8022414 <printi+0x110>
			}
			--apBuf->flags.width;
 80223f8:	687b      	ldr	r3, [r7, #4]
 80223fa:	695b      	ldr	r3, [r3, #20]
 80223fc:	1e5a      	subs	r2, r3, #1
 80223fe:	687b      	ldr	r3, [r7, #4]
 8022400:	615a      	str	r2, [r3, #20]
 8022402:	e002      	b.n	802240a <printi+0x106>
		}
		else
		{
			*( --s ) = '-';
 8022404:	3c01      	subs	r4, #1
 8022406:	232d      	movs	r3, #45	@ 0x2d
 8022408:	7023      	strb	r3, [r4, #0]
		}
	}

	return prints( apBuf, s );
 802240a:	4621      	mov	r1, r4
 802240c:	6878      	ldr	r0, [r7, #4]
 802240e:	f7ff fed1 	bl	80221b4 <prints>
 8022412:	4603      	mov	r3, r0
}
 8022414:	4618      	mov	r0, r3
 8022416:	371c      	adds	r7, #28
 8022418:	46bd      	mov	sp, r7
 802241a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08022420 <printIp>:
/*-----------------------------------------------------------*/

static BaseType_t printIp(struct SStringBuf *apBuf, unsigned i )
{
 8022420:	b590      	push	{r4, r7, lr}
 8022422:	b089      	sub	sp, #36	@ 0x24
 8022424:	af02      	add	r7, sp, #8
 8022426:	6078      	str	r0, [r7, #4]
 8022428:	6039      	str	r1, [r7, #0]
	char print_buf[16];

	sprintf( print_buf, "%u.%u.%u.%u",
 802242a:	683b      	ldr	r3, [r7, #0]
 802242c:	0e19      	lsrs	r1, r3, #24
		i >> 24,
		( i >> 16 ) & 0xff,
 802242e:	683b      	ldr	r3, [r7, #0]
 8022430:	0c1b      	lsrs	r3, r3, #16
	sprintf( print_buf, "%u.%u.%u.%u",
 8022432:	b2dc      	uxtb	r4, r3
		( i >> 8 ) & 0xff,
 8022434:	683b      	ldr	r3, [r7, #0]
 8022436:	0a1b      	lsrs	r3, r3, #8
	sprintf( print_buf, "%u.%u.%u.%u",
 8022438:	b2db      	uxtb	r3, r3
 802243a:	683a      	ldr	r2, [r7, #0]
 802243c:	b2d2      	uxtb	r2, r2
 802243e:	f107 0008 	add.w	r0, r7, #8
 8022442:	9201      	str	r2, [sp, #4]
 8022444:	9300      	str	r3, [sp, #0]
 8022446:	4623      	mov	r3, r4
 8022448:	460a      	mov	r2, r1
 802244a:	4909      	ldr	r1, [pc, #36]	@ (8022470 <printIp+0x50>)
 802244c:	f000 fa81 	bl	8022952 <sprintf>
		i & 0xff );
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 8022450:	687a      	ldr	r2, [r7, #4]
 8022452:	7f93      	ldrb	r3, [r2, #30]
 8022454:	f043 0302 	orr.w	r3, r3, #2
 8022458:	7793      	strb	r3, [r2, #30]
	prints( apBuf, print_buf );
 802245a:	f107 0308 	add.w	r3, r7, #8
 802245e:	4619      	mov	r1, r3
 8022460:	6878      	ldr	r0, [r7, #4]
 8022462:	f7ff fea7 	bl	80221b4 <prints>

	return pdTRUE;
 8022466:	2301      	movs	r3, #1
}
 8022468:	4618      	mov	r0, r3
 802246a:	371c      	adds	r7, #28
 802246c:	46bd      	mov	sp, r7
 802246e:	bd90      	pop	{r4, r7, pc}
 8022470:	08026ea8 	.word	0x08026ea8

08022474 <usNetToHost>:
/*-----------------------------------------------------------*/

static uint16_t usNetToHost( uint16_t usValue )
{
 8022474:	b480      	push	{r7}
 8022476:	b083      	sub	sp, #12
 8022478:	af00      	add	r7, sp, #0
 802247a:	4603      	mov	r3, r0
 802247c:	80fb      	strh	r3, [r7, #6]
	if( u32.ulWords[ 0 ] == 0x00010203 )
 802247e:	4a0b      	ldr	r2, [pc, #44]	@ (80224ac <usNetToHost+0x38>)
 8022480:	4b0b      	ldr	r3, [pc, #44]	@ (80224b0 <usNetToHost+0x3c>)
 8022482:	429a      	cmp	r2, r3
 8022484:	d101      	bne.n	802248a <usNetToHost+0x16>
	{
		return usValue;
 8022486:	88fb      	ldrh	r3, [r7, #6]
 8022488:	e009      	b.n	802249e <usNetToHost+0x2a>
	}
	else
	{
		return ( usValue << 8 ) | ( usValue >> 8 );
 802248a:	88fb      	ldrh	r3, [r7, #6]
 802248c:	021b      	lsls	r3, r3, #8
 802248e:	b21a      	sxth	r2, r3
 8022490:	88fb      	ldrh	r3, [r7, #6]
 8022492:	0a1b      	lsrs	r3, r3, #8
 8022494:	b29b      	uxth	r3, r3
 8022496:	b21b      	sxth	r3, r3
 8022498:	4313      	orrs	r3, r2
 802249a:	b21b      	sxth	r3, r3
 802249c:	b29b      	uxth	r3, r3
	}
}
 802249e:	4618      	mov	r0, r3
 80224a0:	370c      	adds	r7, #12
 80224a2:	46bd      	mov	sp, r7
 80224a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224a8:	4770      	bx	lr
 80224aa:	bf00      	nop
 80224ac:	03020100 	.word	0x03020100
 80224b0:	00010203 	.word	0x00010203

080224b4 <printIPv6>:

static BaseType_t printIPv6( struct SStringBuf *apBuf, uint16_t *pusAddress )
{
 80224b4:	b580      	push	{r7, lr}
 80224b6:	b088      	sub	sp, #32
 80224b8:	af00      	add	r7, sp, #0
 80224ba:	6078      	str	r0, [r7, #4]
 80224bc:	6039      	str	r1, [r7, #0]
	int iIndex;
	int iZeroStart = -1;
 80224be:	f04f 33ff 	mov.w	r3, #4294967295
 80224c2:	61bb      	str	r3, [r7, #24]
	int iZeroLength = 0;
 80224c4:	2300      	movs	r3, #0
 80224c6:	617b      	str	r3, [r7, #20]
	int iCurStart = 0;
 80224c8:	2300      	movs	r3, #0
 80224ca:	613b      	str	r3, [r7, #16]
	int iCurLength = 0;
 80224cc:	2300      	movs	r3, #0
 80224ce:	60fb      	str	r3, [r7, #12]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 80224d0:	2300      	movs	r3, #0
 80224d2:	61fb      	str	r3, [r7, #28]
 80224d4:	e026      	b.n	8022524 <printIPv6+0x70>
	{
	uint16_t usValue = pusAddress[ iIndex ];
 80224d6:	69fb      	ldr	r3, [r7, #28]
 80224d8:	005b      	lsls	r3, r3, #1
 80224da:	683a      	ldr	r2, [r7, #0]
 80224dc:	4413      	add	r3, r2
 80224de:	881b      	ldrh	r3, [r3, #0]
 80224e0:	817b      	strh	r3, [r7, #10]
		if( usValue == 0 )
 80224e2:	897b      	ldrh	r3, [r7, #10]
 80224e4:	2b00      	cmp	r3, #0
 80224e6:	d107      	bne.n	80224f8 <printIPv6+0x44>
		{
			if( iCurLength == 0 )
 80224e8:	68fb      	ldr	r3, [r7, #12]
 80224ea:	2b00      	cmp	r3, #0
 80224ec:	d101      	bne.n	80224f2 <printIPv6+0x3e>
			{
				iCurStart = iIndex;
 80224ee:	69fb      	ldr	r3, [r7, #28]
 80224f0:	613b      	str	r3, [r7, #16]
			}
			iCurLength++;
 80224f2:	68fb      	ldr	r3, [r7, #12]
 80224f4:	3301      	adds	r3, #1
 80224f6:	60fb      	str	r3, [r7, #12]
		}
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 80224f8:	897b      	ldrh	r3, [r7, #10]
 80224fa:	2b00      	cmp	r3, #0
 80224fc:	d102      	bne.n	8022504 <printIPv6+0x50>
 80224fe:	69fb      	ldr	r3, [r7, #28]
 8022500:	2b07      	cmp	r3, #7
 8022502:	d10c      	bne.n	802251e <printIPv6+0x6a>
		{
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 8022504:	68fb      	ldr	r3, [r7, #12]
 8022506:	2b01      	cmp	r3, #1
 8022508:	dd07      	ble.n	802251a <printIPv6+0x66>
 802250a:	697a      	ldr	r2, [r7, #20]
 802250c:	68fb      	ldr	r3, [r7, #12]
 802250e:	429a      	cmp	r2, r3
 8022510:	da03      	bge.n	802251a <printIPv6+0x66>
			{
				iZeroLength = iCurLength;
 8022512:	68fb      	ldr	r3, [r7, #12]
 8022514:	617b      	str	r3, [r7, #20]
				iZeroStart = iCurStart;
 8022516:	693b      	ldr	r3, [r7, #16]
 8022518:	61bb      	str	r3, [r7, #24]
			}
			iCurLength = 0;
 802251a:	2300      	movs	r3, #0
 802251c:	60fb      	str	r3, [r7, #12]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 802251e:	69fb      	ldr	r3, [r7, #28]
 8022520:	3301      	adds	r3, #1
 8022522:	61fb      	str	r3, [r7, #28]
 8022524:	69fb      	ldr	r3, [r7, #28]
 8022526:	2b07      	cmp	r3, #7
 8022528:	ddd5      	ble.n	80224d6 <printIPv6+0x22>
		}
	}

	apBuf->flags.base = 16;
 802252a:	687b      	ldr	r3, [r7, #4]
 802252c:	2210      	movs	r2, #16
 802252e:	611a      	str	r2, [r3, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 8022530:	687b      	ldr	r3, [r7, #4]
 8022532:	2261      	movs	r2, #97	@ 0x61
 8022534:	775a      	strb	r2, [r3, #29]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 8022536:	2300      	movs	r3, #0
 8022538:	61fb      	str	r3, [r7, #28]
 802253a:	e02b      	b.n	8022594 <printIPv6+0xe0>
	{
		if( iIndex == iZeroStart )
 802253c:	69fa      	ldr	r2, [r7, #28]
 802253e:	69bb      	ldr	r3, [r7, #24]
 8022540:	429a      	cmp	r2, r3
 8022542:	d110      	bne.n	8022566 <printIPv6+0xb2>
		{
			iIndex += iZeroLength - 1;
 8022544:	697b      	ldr	r3, [r7, #20]
 8022546:	3b01      	subs	r3, #1
 8022548:	69fa      	ldr	r2, [r7, #28]
 802254a:	4413      	add	r3, r2
 802254c:	61fb      	str	r3, [r7, #28]
			strbuf_printchar( apBuf, ':' );
 802254e:	213a      	movs	r1, #58	@ 0x3a
 8022550:	6878      	ldr	r0, [r7, #4]
 8022552:	f7ff fda8 	bl	80220a6 <strbuf_printchar>
			if( iIndex == 7 )
 8022556:	69fb      	ldr	r3, [r7, #28]
 8022558:	2b07      	cmp	r3, #7
 802255a:	d118      	bne.n	802258e <printIPv6+0xda>
			{
				strbuf_printchar( apBuf, ':' );
 802255c:	213a      	movs	r1, #58	@ 0x3a
 802255e:	6878      	ldr	r0, [r7, #4]
 8022560:	f7ff fda1 	bl	80220a6 <strbuf_printchar>
 8022564:	e013      	b.n	802258e <printIPv6+0xda>
			}
		}
		else
		{
			if( iIndex > 0 )
 8022566:	69fb      	ldr	r3, [r7, #28]
 8022568:	2b00      	cmp	r3, #0
 802256a:	dd03      	ble.n	8022574 <printIPv6+0xc0>
			{
				strbuf_printchar( apBuf, ':' );
 802256c:	213a      	movs	r1, #58	@ 0x3a
 802256e:	6878      	ldr	r0, [r7, #4]
 8022570:	f7ff fd99 	bl	80220a6 <strbuf_printchar>
			}
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 8022574:	69fb      	ldr	r3, [r7, #28]
 8022576:	005b      	lsls	r3, r3, #1
 8022578:	683a      	ldr	r2, [r7, #0]
 802257a:	4413      	add	r3, r2
 802257c:	881b      	ldrh	r3, [r3, #0]
 802257e:	4618      	mov	r0, r3
 8022580:	f7ff ff78 	bl	8022474 <usNetToHost>
 8022584:	4603      	mov	r3, r0
 8022586:	4619      	mov	r1, r3
 8022588:	6878      	ldr	r0, [r7, #4]
 802258a:	f7ff febb 	bl	8022304 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 802258e:	69fb      	ldr	r3, [r7, #28]
 8022590:	3301      	adds	r3, #1
 8022592:	61fb      	str	r3, [r7, #28]
 8022594:	69fb      	ldr	r3, [r7, #28]
 8022596:	2b07      	cmp	r3, #7
 8022598:	ddd0      	ble.n	802253c <printIPv6+0x88>
		}
	}

	return pdTRUE;
 802259a:	2301      	movs	r3, #1
}
 802259c:	4618      	mov	r0, r3
 802259e:	3720      	adds	r7, #32
 80225a0:	46bd      	mov	sp, r7
 80225a2:	bd80      	pop	{r7, pc}

080225a4 <tiny_print>:
/*-----------------------------------------------------------*/

static void tiny_print( struct SStringBuf *apBuf, const char *format, va_list args )
{
 80225a4:	b590      	push	{r4, r7, lr}
 80225a6:	b087      	sub	sp, #28
 80225a8:	af00      	add	r7, sp, #0
 80225aa:	60f8      	str	r0, [r7, #12]
 80225ac:	60b9      	str	r1, [r7, #8]
 80225ae:	607a      	str	r2, [r7, #4]
	char scr[2];

	for( ; ; )
	{
		int ch = *( format++ );
 80225b0:	68bb      	ldr	r3, [r7, #8]
 80225b2:	1c5a      	adds	r2, r3, #1
 80225b4:	60ba      	str	r2, [r7, #8]
 80225b6:	781b      	ldrb	r3, [r3, #0]
 80225b8:	617b      	str	r3, [r7, #20]

		if( ch != '%' )
 80225ba:	697b      	ldr	r3, [r7, #20]
 80225bc:	2b25      	cmp	r3, #37	@ 0x25
 80225be:	d00f      	beq.n	80225e0 <tiny_print+0x3c>
		{
			do
			{
				/* Put the most like flow in a small loop */
				if( strbuf_printchar_inline( apBuf, ch ) == 0 )
 80225c0:	6979      	ldr	r1, [r7, #20]
 80225c2:	68f8      	ldr	r0, [r7, #12]
 80225c4:	f7ff fdad 	bl	8022122 <strbuf_printchar_inline>
 80225c8:	4603      	mov	r3, r0
 80225ca:	2b00      	cmp	r3, #0
 80225cc:	f000 817e 	beq.w	80228cc <tiny_print+0x328>
				{
					return;
				}
				ch = *( format++ );
 80225d0:	68bb      	ldr	r3, [r7, #8]
 80225d2:	1c5a      	adds	r2, r3, #1
 80225d4:	60ba      	str	r2, [r7, #8]
 80225d6:	781b      	ldrb	r3, [r3, #0]
 80225d8:	617b      	str	r3, [r7, #20]
			} while( ch != '%' );
 80225da:	697b      	ldr	r3, [r7, #20]
 80225dc:	2b25      	cmp	r3, #37	@ 0x25
 80225de:	d1ef      	bne.n	80225c0 <tiny_print+0x1c>
		}
		ch = *( format++ );
 80225e0:	68bb      	ldr	r3, [r7, #8]
 80225e2:	1c5a      	adds	r2, r3, #1
 80225e4:	60ba      	str	r2, [r7, #8]
 80225e6:	781b      	ldrb	r3, [r3, #0]
 80225e8:	617b      	str	r3, [r7, #20]
		/* Now ch has character after '%', format pointing to next */

		if( ch == '\0' )
 80225ea:	697b      	ldr	r3, [r7, #20]
 80225ec:	2b00      	cmp	r3, #0
 80225ee:	f000 8165 	beq.w	80228bc <tiny_print+0x318>
		{
			break;
		}
		if( ch == '%' )
 80225f2:	697b      	ldr	r3, [r7, #20]
 80225f4:	2b25      	cmp	r3, #37	@ 0x25
 80225f6:	d108      	bne.n	802260a <tiny_print+0x66>
		{
			if( strbuf_printchar( apBuf, ch ) == 0 )
 80225f8:	6979      	ldr	r1, [r7, #20]
 80225fa:	68f8      	ldr	r0, [r7, #12]
 80225fc:	f7ff fd53 	bl	80220a6 <strbuf_printchar>
 8022600:	4603      	mov	r3, r0
 8022602:	2b00      	cmp	r3, #0
 8022604:	f040 814e 	bne.w	80228a4 <tiny_print+0x300>
			{
				return;
 8022608:	e161      	b.n	80228ce <tiny_print+0x32a>
			}
			continue;
		}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 802260a:	68fb      	ldr	r3, [r7, #12]
 802260c:	3310      	adds	r3, #16
 802260e:	2210      	movs	r2, #16
 8022610:	2100      	movs	r1, #0
 8022612:	4618      	mov	r0, r3
 8022614:	f7ff fc79 	bl	8021f0a <memset>

		if( ch == '-' )
 8022618:	697b      	ldr	r3, [r7, #20]
 802261a:	2b2d      	cmp	r3, #45	@ 0x2d
 802261c:	d114      	bne.n	8022648 <tiny_print+0xa4>
		{
			ch = *( format++ );
 802261e:	68bb      	ldr	r3, [r7, #8]
 8022620:	1c5a      	adds	r2, r3, #1
 8022622:	60ba      	str	r2, [r7, #8]
 8022624:	781b      	ldrb	r3, [r3, #0]
 8022626:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad = PAD_RIGHT;
 8022628:	68fb      	ldr	r3, [r7, #12]
 802262a:	2201      	movs	r2, #1
 802262c:	771a      	strb	r2, [r3, #28]
		}
		while( ch == '0' )
 802262e:	e00b      	b.n	8022648 <tiny_print+0xa4>
		{
			ch = *( format++ );
 8022630:	68bb      	ldr	r3, [r7, #8]
 8022632:	1c5a      	adds	r2, r3, #1
 8022634:	60ba      	str	r2, [r7, #8]
 8022636:	781b      	ldrb	r3, [r3, #0]
 8022638:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad |= PAD_ZERO;
 802263a:	68fb      	ldr	r3, [r7, #12]
 802263c:	7f1b      	ldrb	r3, [r3, #28]
 802263e:	f043 0302 	orr.w	r3, r3, #2
 8022642:	b2da      	uxtb	r2, r3
 8022644:	68fb      	ldr	r3, [r7, #12]
 8022646:	771a      	strb	r2, [r3, #28]
		while( ch == '0' )
 8022648:	697b      	ldr	r3, [r7, #20]
 802264a:	2b30      	cmp	r3, #48	@ 0x30
 802264c:	d0f0      	beq.n	8022630 <tiny_print+0x8c>
		}
		if( ch == '*' )
 802264e:	697b      	ldr	r3, [r7, #20]
 8022650:	2b2a      	cmp	r3, #42	@ 0x2a
 8022652:	d120      	bne.n	8022696 <tiny_print+0xf2>
		{
			ch = *( format++ );
 8022654:	68bb      	ldr	r3, [r7, #8]
 8022656:	1c5a      	adds	r2, r3, #1
 8022658:	60ba      	str	r2, [r7, #8]
 802265a:	781b      	ldrb	r3, [r3, #0]
 802265c:	617b      	str	r3, [r7, #20]
			apBuf->flags.width = va_arg( args, int );
 802265e:	687b      	ldr	r3, [r7, #4]
 8022660:	1d1a      	adds	r2, r3, #4
 8022662:	607a      	str	r2, [r7, #4]
 8022664:	681a      	ldr	r2, [r3, #0]
 8022666:	68fb      	ldr	r3, [r7, #12]
 8022668:	615a      	str	r2, [r3, #20]
 802266a:	e01a      	b.n	80226a2 <tiny_print+0xfe>
		}
		else
		{
			while( ch >= '0' && ch <= '9' )
			{
				apBuf->flags.width *= 10;
 802266c:	68fb      	ldr	r3, [r7, #12]
 802266e:	695a      	ldr	r2, [r3, #20]
 8022670:	4613      	mov	r3, r2
 8022672:	009b      	lsls	r3, r3, #2
 8022674:	4413      	add	r3, r2
 8022676:	005b      	lsls	r3, r3, #1
 8022678:	461a      	mov	r2, r3
 802267a:	68fb      	ldr	r3, [r7, #12]
 802267c:	615a      	str	r2, [r3, #20]
				apBuf->flags.width += ch - '0';
 802267e:	68fb      	ldr	r3, [r7, #12]
 8022680:	695a      	ldr	r2, [r3, #20]
 8022682:	697b      	ldr	r3, [r7, #20]
 8022684:	3b30      	subs	r3, #48	@ 0x30
 8022686:	441a      	add	r2, r3
 8022688:	68fb      	ldr	r3, [r7, #12]
 802268a:	615a      	str	r2, [r3, #20]
				ch = *( format++ );
 802268c:	68bb      	ldr	r3, [r7, #8]
 802268e:	1c5a      	adds	r2, r3, #1
 8022690:	60ba      	str	r2, [r7, #8]
 8022692:	781b      	ldrb	r3, [r3, #0]
 8022694:	617b      	str	r3, [r7, #20]
			while( ch >= '0' && ch <= '9' )
 8022696:	697b      	ldr	r3, [r7, #20]
 8022698:	2b2f      	cmp	r3, #47	@ 0x2f
 802269a:	dd02      	ble.n	80226a2 <tiny_print+0xfe>
 802269c:	697b      	ldr	r3, [r7, #20]
 802269e:	2b39      	cmp	r3, #57	@ 0x39
 80226a0:	dde4      	ble.n	802266c <tiny_print+0xc8>
			}
		}
		if( ch == '.' )
 80226a2:	697b      	ldr	r3, [r7, #20]
 80226a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80226a6:	d12e      	bne.n	8022706 <tiny_print+0x162>
		{
			ch = *( format++ );
 80226a8:	68bb      	ldr	r3, [r7, #8]
 80226aa:	1c5a      	adds	r2, r3, #1
 80226ac:	60ba      	str	r2, [r7, #8]
 80226ae:	781b      	ldrb	r3, [r3, #0]
 80226b0:	617b      	str	r3, [r7, #20]
			if( ch == '*' )
 80226b2:	697b      	ldr	r3, [r7, #20]
 80226b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80226b6:	d120      	bne.n	80226fa <tiny_print+0x156>
			{
				apBuf->flags.printLimit = va_arg( args, int );
 80226b8:	687b      	ldr	r3, [r7, #4]
 80226ba:	1d1a      	adds	r2, r3, #4
 80226bc:	607a      	str	r2, [r7, #4]
 80226be:	681a      	ldr	r2, [r3, #0]
 80226c0:	68fb      	ldr	r3, [r7, #12]
 80226c2:	619a      	str	r2, [r3, #24]
				ch = *( format++ );
 80226c4:	68bb      	ldr	r3, [r7, #8]
 80226c6:	1c5a      	adds	r2, r3, #1
 80226c8:	60ba      	str	r2, [r7, #8]
 80226ca:	781b      	ldrb	r3, [r3, #0]
 80226cc:	617b      	str	r3, [r7, #20]
 80226ce:	e01a      	b.n	8022706 <tiny_print+0x162>
			}
			else
			{
				while( ch >= '0' && ch <= '9' )
				{
					apBuf->flags.printLimit *= 10;
 80226d0:	68fb      	ldr	r3, [r7, #12]
 80226d2:	699a      	ldr	r2, [r3, #24]
 80226d4:	4613      	mov	r3, r2
 80226d6:	009b      	lsls	r3, r3, #2
 80226d8:	4413      	add	r3, r2
 80226da:	005b      	lsls	r3, r3, #1
 80226dc:	461a      	mov	r2, r3
 80226de:	68fb      	ldr	r3, [r7, #12]
 80226e0:	619a      	str	r2, [r3, #24]
					apBuf->flags.printLimit += ch - '0';
 80226e2:	68fb      	ldr	r3, [r7, #12]
 80226e4:	699a      	ldr	r2, [r3, #24]
 80226e6:	697b      	ldr	r3, [r7, #20]
 80226e8:	3b30      	subs	r3, #48	@ 0x30
 80226ea:	441a      	add	r2, r3
 80226ec:	68fb      	ldr	r3, [r7, #12]
 80226ee:	619a      	str	r2, [r3, #24]
					ch = *( format++ );
 80226f0:	68bb      	ldr	r3, [r7, #8]
 80226f2:	1c5a      	adds	r2, r3, #1
 80226f4:	60ba      	str	r2, [r7, #8]
 80226f6:	781b      	ldrb	r3, [r3, #0]
 80226f8:	617b      	str	r3, [r7, #20]
				while( ch >= '0' && ch <= '9' )
 80226fa:	697b      	ldr	r3, [r7, #20]
 80226fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80226fe:	dd02      	ble.n	8022706 <tiny_print+0x162>
 8022700:	697b      	ldr	r3, [r7, #20]
 8022702:	2b39      	cmp	r3, #57	@ 0x39
 8022704:	dde4      	ble.n	80226d0 <tiny_print+0x12c>
				}
			}
		}
		if( apBuf->flags.printLimit == 0 )
 8022706:	68fb      	ldr	r3, [r7, #12]
 8022708:	699b      	ldr	r3, [r3, #24]
 802270a:	2b00      	cmp	r3, #0
 802270c:	d104      	bne.n	8022718 <tiny_print+0x174>
		{
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 802270e:	68fb      	ldr	r3, [r7, #12]
 8022710:	699b      	ldr	r3, [r3, #24]
 8022712:	1e5a      	subs	r2, r3, #1
 8022714:	68fb      	ldr	r3, [r7, #12]
 8022716:	619a      	str	r2, [r3, #24]
		}
		if( ch == 'p' )
 8022718:	697b      	ldr	r3, [r7, #20]
 802271a:	2b70      	cmp	r3, #112	@ 0x70
 802271c:	d118      	bne.n	8022750 <tiny_print+0x1ac>
		{
			if( format[0] == 'i' && format[1] == 'p' )
 802271e:	68bb      	ldr	r3, [r7, #8]
 8022720:	781b      	ldrb	r3, [r3, #0]
 8022722:	2b69      	cmp	r3, #105	@ 0x69
 8022724:	d114      	bne.n	8022750 <tiny_print+0x1ac>
 8022726:	68bb      	ldr	r3, [r7, #8]
 8022728:	3301      	adds	r3, #1
 802272a:	781b      	ldrb	r3, [r3, #0]
 802272c:	2b70      	cmp	r3, #112	@ 0x70
 802272e:	d10f      	bne.n	8022750 <tiny_print+0x1ac>
			{
				format += 2;	/* eat the "pi" of "pip" */
 8022730:	68bb      	ldr	r3, [r7, #8]
 8022732:	3302      	adds	r3, #2
 8022734:	60bb      	str	r3, [r7, #8]
				/* Print a IPv6 address */
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 8022736:	687b      	ldr	r3, [r7, #4]
 8022738:	1d1a      	adds	r2, r3, #4
 802273a:	607a      	str	r2, [r7, #4]
 802273c:	681b      	ldr	r3, [r3, #0]
 802273e:	4619      	mov	r1, r3
 8022740:	68f8      	ldr	r0, [r7, #12]
 8022742:	f7ff feb7 	bl	80224b4 <printIPv6>
 8022746:	4603      	mov	r3, r0
 8022748:	2b00      	cmp	r3, #0
 802274a:	f040 80ad 	bne.w	80228a8 <tiny_print+0x304>
				{
					break;
 802274e:	e0b8      	b.n	80228c2 <tiny_print+0x31e>
				}
				continue;
			}
		}
		if( ch == 's' )
 8022750:	697b      	ldr	r3, [r7, #20]
 8022752:	2b73      	cmp	r3, #115	@ 0x73
 8022754:	d112      	bne.n	802277c <tiny_print+0x1d8>
		{
			register char *s = ( char * )va_arg( args, int );
 8022756:	687b      	ldr	r3, [r7, #4]
 8022758:	1d1a      	adds	r2, r3, #4
 802275a:	607a      	str	r2, [r7, #4]
 802275c:	681b      	ldr	r3, [r3, #0]
 802275e:	461c      	mov	r4, r3
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 8022760:	2c00      	cmp	r4, #0
 8022762:	d001      	beq.n	8022768 <tiny_print+0x1c4>
 8022764:	4623      	mov	r3, r4
 8022766:	e000      	b.n	802276a <tiny_print+0x1c6>
 8022768:	4b5a      	ldr	r3, [pc, #360]	@ (80228d4 <tiny_print+0x330>)
 802276a:	4619      	mov	r1, r3
 802276c:	68f8      	ldr	r0, [r7, #12]
 802276e:	f7ff fd21 	bl	80221b4 <prints>
 8022772:	4603      	mov	r3, r0
 8022774:	2b00      	cmp	r3, #0
 8022776:	f040 8099 	bne.w	80228ac <tiny_print+0x308>
			{
				break;
 802277a:	e0a2      	b.n	80228c2 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'c' )
 802277c:	697b      	ldr	r3, [r7, #20]
 802277e:	2b63      	cmp	r3, #99	@ 0x63
 8022780:	d10f      	bne.n	80227a2 <tiny_print+0x1fe>
		{
			/* char are converted to int then pushed on the stack */
			scr[0] = ( char ) va_arg( args, int );
 8022782:	687b      	ldr	r3, [r7, #4]
 8022784:	1d1a      	adds	r2, r3, #4
 8022786:	607a      	str	r2, [r7, #4]
 8022788:	681b      	ldr	r3, [r3, #0]
 802278a:	b2db      	uxtb	r3, r3
 802278c:	743b      	strb	r3, [r7, #16]

			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 802278e:	7c3b      	ldrb	r3, [r7, #16]
 8022790:	4619      	mov	r1, r3
 8022792:	68f8      	ldr	r0, [r7, #12]
 8022794:	f7ff fc87 	bl	80220a6 <strbuf_printchar>
 8022798:	4603      	mov	r3, r0
 802279a:	2b00      	cmp	r3, #0
 802279c:	f040 8088 	bne.w	80228b0 <tiny_print+0x30c>
			{
				return;
 80227a0:	e095      	b.n	80228ce <tiny_print+0x32a>
			}

			continue;
		}
		if( ch == 'l' )
 80227a2:	697b      	ldr	r3, [r7, #20]
 80227a4:	2b6c      	cmp	r3, #108	@ 0x6c
 80227a6:	d109      	bne.n	80227bc <tiny_print+0x218>
		{
			ch = *( format++ );
 80227a8:	68bb      	ldr	r3, [r7, #8]
 80227aa:	1c5a      	adds	r2, r3, #1
 80227ac:	60ba      	str	r2, [r7, #8]
 80227ae:	781b      	ldrb	r3, [r3, #0]
 80227b0:	617b      	str	r3, [r7, #20]
			apBuf->flags.long32 = 1;
 80227b2:	68fa      	ldr	r2, [r7, #12]
 80227b4:	7f93      	ldrb	r3, [r2, #30]
 80227b6:	f043 0304 	orr.w	r3, r3, #4
 80227ba:	7793      	strb	r3, [r2, #30]
			/* Makes not difference as u32 == long */
		}
		if( ch == 'L' )
 80227bc:	697b      	ldr	r3, [r7, #20]
 80227be:	2b4c      	cmp	r3, #76	@ 0x4c
 80227c0:	d109      	bne.n	80227d6 <tiny_print+0x232>
		{
			ch = *( format++ );
 80227c2:	68bb      	ldr	r3, [r7, #8]
 80227c4:	1c5a      	adds	r2, r3, #1
 80227c6:	60ba      	str	r2, [r7, #8]
 80227c8:	781b      	ldrb	r3, [r3, #0]
 80227ca:	617b      	str	r3, [r7, #20]
			apBuf->flags.long64 = 1;
 80227cc:	68fa      	ldr	r2, [r7, #12]
 80227ce:	7f93      	ldrb	r3, [r2, #30]
 80227d0:	f043 0308 	orr.w	r3, r3, #8
 80227d4:	7793      	strb	r3, [r2, #30]
			/* Does make a difference */
		}
		apBuf->flags.base = 10;
 80227d6:	68fb      	ldr	r3, [r7, #12]
 80227d8:	220a      	movs	r2, #10
 80227da:	611a      	str	r2, [r3, #16]
		apBuf->flags.letBase = 'a';
 80227dc:	68fb      	ldr	r3, [r7, #12]
 80227de:	2261      	movs	r2, #97	@ 0x61
 80227e0:	775a      	strb	r2, [r3, #29]

		if( ch == 'd' || ch == 'u' )
 80227e2:	697b      	ldr	r3, [r7, #20]
 80227e4:	2b64      	cmp	r3, #100	@ 0x64
 80227e6:	d002      	beq.n	80227ee <tiny_print+0x24a>
 80227e8:	697b      	ldr	r3, [r7, #20]
 80227ea:	2b75      	cmp	r3, #117	@ 0x75
 80227ec:	d116      	bne.n	802281c <tiny_print+0x278>
		{
			apBuf->flags.isSigned = ( ch == 'd' );
 80227ee:	697b      	ldr	r3, [r7, #20]
 80227f0:	2b64      	cmp	r3, #100	@ 0x64
 80227f2:	bf0c      	ite	eq
 80227f4:	2301      	moveq	r3, #1
 80227f6:	2300      	movne	r3, #0
 80227f8:	b2d9      	uxtb	r1, r3
 80227fa:	68fa      	ldr	r2, [r7, #12]
 80227fc:	7f93      	ldrb	r3, [r2, #30]
 80227fe:	f361 0300 	bfi	r3, r1, #0, #1
 8022802:	7793      	strb	r3, [r2, #30]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	1d1a      	adds	r2, r3, #4
 8022808:	607a      	str	r2, [r7, #4]
 802280a:	681b      	ldr	r3, [r3, #0]
 802280c:	4619      	mov	r1, r3
 802280e:	68f8      	ldr	r0, [r7, #12]
 8022810:	f7ff fd78 	bl	8022304 <printi>
 8022814:	4603      	mov	r3, r0
 8022816:	2b00      	cmp	r3, #0
 8022818:	d14c      	bne.n	80228b4 <tiny_print+0x310>
			{
				break;
 802281a:	e052      	b.n	80228c2 <tiny_print+0x31e>
			}
			continue;
		}

		apBuf->flags.base = 16;		/* From here all hexadecimal */
 802281c:	68fb      	ldr	r3, [r7, #12]
 802281e:	2210      	movs	r2, #16
 8022820:	611a      	str	r2, [r3, #16]

		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 8022822:	697b      	ldr	r3, [r7, #20]
 8022824:	2b78      	cmp	r3, #120	@ 0x78
 8022826:	d117      	bne.n	8022858 <tiny_print+0x2b4>
 8022828:	68bb      	ldr	r3, [r7, #8]
 802282a:	781b      	ldrb	r3, [r3, #0]
 802282c:	2b69      	cmp	r3, #105	@ 0x69
 802282e:	d113      	bne.n	8022858 <tiny_print+0x2b4>
 8022830:	68bb      	ldr	r3, [r7, #8]
 8022832:	3301      	adds	r3, #1
 8022834:	781b      	ldrb	r3, [r3, #0]
 8022836:	2b70      	cmp	r3, #112	@ 0x70
 8022838:	d10e      	bne.n	8022858 <tiny_print+0x2b4>
		{
			format += 2;	/* eat the "xi" of "xip" */
 802283a:	68bb      	ldr	r3, [r7, #8]
 802283c:	3302      	adds	r3, #2
 802283e:	60bb      	str	r3, [r7, #8]
			/* Will use base 10 again */
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 8022840:	687b      	ldr	r3, [r7, #4]
 8022842:	1d1a      	adds	r2, r3, #4
 8022844:	607a      	str	r2, [r7, #4]
 8022846:	681b      	ldr	r3, [r3, #0]
 8022848:	4619      	mov	r1, r3
 802284a:	68f8      	ldr	r0, [r7, #12]
 802284c:	f7ff fde8 	bl	8022420 <printIp>
 8022850:	4603      	mov	r3, r0
 8022852:	2b00      	cmp	r3, #0
 8022854:	d130      	bne.n	80228b8 <tiny_print+0x314>
			{
				break;
 8022856:	e034      	b.n	80228c2 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 8022858:	697b      	ldr	r3, [r7, #20]
 802285a:	2b78      	cmp	r3, #120	@ 0x78
 802285c:	d009      	beq.n	8022872 <tiny_print+0x2ce>
 802285e:	697b      	ldr	r3, [r7, #20]
 8022860:	2b58      	cmp	r3, #88	@ 0x58
 8022862:	d006      	beq.n	8022872 <tiny_print+0x2ce>
 8022864:	697b      	ldr	r3, [r7, #20]
 8022866:	2b70      	cmp	r3, #112	@ 0x70
 8022868:	d003      	beq.n	8022872 <tiny_print+0x2ce>
 802286a:	697b      	ldr	r3, [r7, #20]
 802286c:	2b6f      	cmp	r3, #111	@ 0x6f
 802286e:	f47f ae9f 	bne.w	80225b0 <tiny_print+0xc>
		{
			if( ch == 'X' )
 8022872:	697b      	ldr	r3, [r7, #20]
 8022874:	2b58      	cmp	r3, #88	@ 0x58
 8022876:	d103      	bne.n	8022880 <tiny_print+0x2dc>
			{
				apBuf->flags.letBase = 'A';
 8022878:	68fb      	ldr	r3, [r7, #12]
 802287a:	2241      	movs	r2, #65	@ 0x41
 802287c:	775a      	strb	r2, [r3, #29]
 802287e:	e005      	b.n	802288c <tiny_print+0x2e8>
			}
			else if( ch == 'o' )
 8022880:	697b      	ldr	r3, [r7, #20]
 8022882:	2b6f      	cmp	r3, #111	@ 0x6f
 8022884:	d102      	bne.n	802288c <tiny_print+0x2e8>
			{
				apBuf->flags.base = 8;
 8022886:	68fb      	ldr	r3, [r7, #12]
 8022888:	2208      	movs	r2, #8
 802288a:	611a      	str	r2, [r3, #16]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 802288c:	687b      	ldr	r3, [r7, #4]
 802288e:	1d1a      	adds	r2, r3, #4
 8022890:	607a      	str	r2, [r7, #4]
 8022892:	681b      	ldr	r3, [r3, #0]
 8022894:	4619      	mov	r1, r3
 8022896:	68f8      	ldr	r0, [r7, #12]
 8022898:	f7ff fd34 	bl	8022304 <printi>
 802289c:	4603      	mov	r3, r0
 802289e:	2b00      	cmp	r3, #0
 80228a0:	d00e      	beq.n	80228c0 <tiny_print+0x31c>
			{
				break;
			}
			continue;
 80228a2:	e00a      	b.n	80228ba <tiny_print+0x316>
			continue;
 80228a4:	bf00      	nop
 80228a6:	e683      	b.n	80225b0 <tiny_print+0xc>
				continue;
 80228a8:	bf00      	nop
 80228aa:	e681      	b.n	80225b0 <tiny_print+0xc>
			continue;
 80228ac:	bf00      	nop
 80228ae:	e67f      	b.n	80225b0 <tiny_print+0xc>
			continue;
 80228b0:	bf00      	nop
 80228b2:	e67d      	b.n	80225b0 <tiny_print+0xc>
			continue;
 80228b4:	bf00      	nop
 80228b6:	e67b      	b.n	80225b0 <tiny_print+0xc>
			continue;
 80228b8:	bf00      	nop
	{
 80228ba:	e679      	b.n	80225b0 <tiny_print+0xc>
			break;
 80228bc:	bf00      	nop
 80228be:	e000      	b.n	80228c2 <tiny_print+0x31e>
				break;
 80228c0:	bf00      	nop
		}
	}
	strbuf_printchar( apBuf, '\0' );
 80228c2:	2100      	movs	r1, #0
 80228c4:	68f8      	ldr	r0, [r7, #12]
 80228c6:	f7ff fbee 	bl	80220a6 <strbuf_printchar>
 80228ca:	e000      	b.n	80228ce <tiny_print+0x32a>
					return;
 80228cc:	bf00      	nop
}
 80228ce:	371c      	adds	r7, #28
 80228d0:	46bd      	mov	sp, r7
 80228d2:	bd90      	pop	{r4, r7, pc}
 80228d4:	08026eb4 	.word	0x08026eb4

080228d8 <vsnprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int vsnprintf( char *apBuf, size_t aMaxLen, const char *apFmt, va_list args )
{
 80228d8:	b580      	push	{r7, lr}
 80228da:	b08c      	sub	sp, #48	@ 0x30
 80228dc:	af00      	add	r7, sp, #0
 80228de:	60f8      	str	r0, [r7, #12]
 80228e0:	60b9      	str	r1, [r7, #8]
 80228e2:	607a      	str	r2, [r7, #4]
 80228e4:	603b      	str	r3, [r7, #0]
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 80228e6:	68fa      	ldr	r2, [r7, #12]
 80228e8:	68bb      	ldr	r3, [r7, #8]
 80228ea:	441a      	add	r2, r3
 80228ec:	f107 0310 	add.w	r3, r7, #16
 80228f0:	68f9      	ldr	r1, [r7, #12]
 80228f2:	4618      	mov	r0, r3
 80228f4:	f7ff fbb9 	bl	802206a <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 80228f8:	f107 0310 	add.w	r3, r7, #16
 80228fc:	683a      	ldr	r2, [r7, #0]
 80228fe:	6879      	ldr	r1, [r7, #4]
 8022900:	4618      	mov	r0, r3
 8022902:	f7ff fe4f 	bl	80225a4 <tiny_print>

	return strBuf.curLen;
 8022906:	69fb      	ldr	r3, [r7, #28]
}
 8022908:	4618      	mov	r0, r3
 802290a:	3730      	adds	r7, #48	@ 0x30
 802290c:	46bd      	mov	sp, r7
 802290e:	bd80      	pop	{r7, pc}

08022910 <snprintf>:
/*-----------------------------------------------------------*/

int snprintf( char *apBuf, size_t aMaxLen, const char *apFmt, ... )
{
 8022910:	b40c      	push	{r2, r3}
 8022912:	b580      	push	{r7, lr}
 8022914:	b08c      	sub	sp, #48	@ 0x30
 8022916:	af00      	add	r7, sp, #0
 8022918:	6078      	str	r0, [r7, #4]
 802291a:	6039      	str	r1, [r7, #0]
	va_list args;

	va_start( args,  apFmt );
 802291c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8022920:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8022922:	687a      	ldr	r2, [r7, #4]
 8022924:	683b      	ldr	r3, [r7, #0]
 8022926:	441a      	add	r2, r3
 8022928:	f107 030c 	add.w	r3, r7, #12
 802292c:	6879      	ldr	r1, [r7, #4]
 802292e:	4618      	mov	r0, r3
 8022930:	f7ff fb9b 	bl	802206a <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8022934:	f107 030c 	add.w	r3, r7, #12
 8022938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802293a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 802293c:	4618      	mov	r0, r3
 802293e:	f7ff fe31 	bl	80225a4 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8022942:	69bb      	ldr	r3, [r7, #24]
}
 8022944:	4618      	mov	r0, r3
 8022946:	3730      	adds	r7, #48	@ 0x30
 8022948:	46bd      	mov	sp, r7
 802294a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802294e:	b002      	add	sp, #8
 8022950:	4770      	bx	lr

08022952 <sprintf>:
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 8022952:	b40e      	push	{r1, r2, r3}
 8022954:	b580      	push	{r7, lr}
 8022956:	b08d      	sub	sp, #52	@ 0x34
 8022958:	af00      	add	r7, sp, #0
 802295a:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args,  apFmt );
 802295c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8022960:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 8022962:	687b      	ldr	r3, [r7, #4]
 8022964:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8022968:	f107 030c 	add.w	r3, r7, #12
 802296c:	6879      	ldr	r1, [r7, #4]
 802296e:	4618      	mov	r0, r3
 8022970:	f7ff fb7b 	bl	802206a <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8022974:	f107 030c 	add.w	r3, r7, #12
 8022978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802297a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 802297c:	4618      	mov	r0, r3
 802297e:	f7ff fe11 	bl	80225a4 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8022982:	69bb      	ldr	r3, [r7, #24]
}
 8022984:	4618      	mov	r0, r3
 8022986:	3734      	adds	r7, #52	@ 0x34
 8022988:	46bd      	mov	sp, r7
 802298a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802298e:	b003      	add	sp, #12
 8022990:	4770      	bx	lr
	...

08022994 <rand>:
 8022994:	4b16      	ldr	r3, [pc, #88]	@ (80229f0 <rand+0x5c>)
 8022996:	b510      	push	{r4, lr}
 8022998:	681c      	ldr	r4, [r3, #0]
 802299a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802299c:	b9b3      	cbnz	r3, 80229cc <rand+0x38>
 802299e:	2018      	movs	r0, #24
 80229a0:	f000 fa70 	bl	8022e84 <malloc>
 80229a4:	4602      	mov	r2, r0
 80229a6:	6320      	str	r0, [r4, #48]	@ 0x30
 80229a8:	b920      	cbnz	r0, 80229b4 <rand+0x20>
 80229aa:	4b12      	ldr	r3, [pc, #72]	@ (80229f4 <rand+0x60>)
 80229ac:	4812      	ldr	r0, [pc, #72]	@ (80229f8 <rand+0x64>)
 80229ae:	2152      	movs	r1, #82	@ 0x52
 80229b0:	f000 fa00 	bl	8022db4 <__assert_func>
 80229b4:	4911      	ldr	r1, [pc, #68]	@ (80229fc <rand+0x68>)
 80229b6:	4b12      	ldr	r3, [pc, #72]	@ (8022a00 <rand+0x6c>)
 80229b8:	e9c0 1300 	strd	r1, r3, [r0]
 80229bc:	4b11      	ldr	r3, [pc, #68]	@ (8022a04 <rand+0x70>)
 80229be:	6083      	str	r3, [r0, #8]
 80229c0:	230b      	movs	r3, #11
 80229c2:	8183      	strh	r3, [r0, #12]
 80229c4:	2100      	movs	r1, #0
 80229c6:	2001      	movs	r0, #1
 80229c8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80229cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80229ce:	480e      	ldr	r0, [pc, #56]	@ (8022a08 <rand+0x74>)
 80229d0:	690b      	ldr	r3, [r1, #16]
 80229d2:	694c      	ldr	r4, [r1, #20]
 80229d4:	4a0d      	ldr	r2, [pc, #52]	@ (8022a0c <rand+0x78>)
 80229d6:	4358      	muls	r0, r3
 80229d8:	fb02 0004 	mla	r0, r2, r4, r0
 80229dc:	fba3 3202 	umull	r3, r2, r3, r2
 80229e0:	3301      	adds	r3, #1
 80229e2:	eb40 0002 	adc.w	r0, r0, r2
 80229e6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80229ea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80229ee:	bd10      	pop	{r4, pc}
 80229f0:	20000038 	.word	0x20000038
 80229f4:	08027074 	.word	0x08027074
 80229f8:	0802708b 	.word	0x0802708b
 80229fc:	abcd330e 	.word	0xabcd330e
 8022a00:	e66d1234 	.word	0xe66d1234
 8022a04:	0005deec 	.word	0x0005deec
 8022a08:	5851f42d 	.word	0x5851f42d
 8022a0c:	4c957f2d 	.word	0x4c957f2d

08022a10 <std>:
 8022a10:	2300      	movs	r3, #0
 8022a12:	b510      	push	{r4, lr}
 8022a14:	4604      	mov	r4, r0
 8022a16:	e9c0 3300 	strd	r3, r3, [r0]
 8022a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022a1e:	6083      	str	r3, [r0, #8]
 8022a20:	8181      	strh	r1, [r0, #12]
 8022a22:	6643      	str	r3, [r0, #100]	@ 0x64
 8022a24:	81c2      	strh	r2, [r0, #14]
 8022a26:	6183      	str	r3, [r0, #24]
 8022a28:	4619      	mov	r1, r3
 8022a2a:	2208      	movs	r2, #8
 8022a2c:	305c      	adds	r0, #92	@ 0x5c
 8022a2e:	f7ff fa6c 	bl	8021f0a <memset>
 8022a32:	4b0d      	ldr	r3, [pc, #52]	@ (8022a68 <std+0x58>)
 8022a34:	6263      	str	r3, [r4, #36]	@ 0x24
 8022a36:	4b0d      	ldr	r3, [pc, #52]	@ (8022a6c <std+0x5c>)
 8022a38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8022a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8022a70 <std+0x60>)
 8022a3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8022a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8022a74 <std+0x64>)
 8022a40:	6323      	str	r3, [r4, #48]	@ 0x30
 8022a42:	4b0d      	ldr	r3, [pc, #52]	@ (8022a78 <std+0x68>)
 8022a44:	6224      	str	r4, [r4, #32]
 8022a46:	429c      	cmp	r4, r3
 8022a48:	d006      	beq.n	8022a58 <std+0x48>
 8022a4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8022a4e:	4294      	cmp	r4, r2
 8022a50:	d002      	beq.n	8022a58 <std+0x48>
 8022a52:	33d0      	adds	r3, #208	@ 0xd0
 8022a54:	429c      	cmp	r4, r3
 8022a56:	d105      	bne.n	8022a64 <std+0x54>
 8022a58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8022a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022a60:	f000 b9a4 	b.w	8022dac <__retarget_lock_init_recursive>
 8022a64:	bd10      	pop	{r4, pc}
 8022a66:	bf00      	nop
 8022a68:	08022b95 	.word	0x08022b95
 8022a6c:	08022bb7 	.word	0x08022bb7
 8022a70:	08022bef 	.word	0x08022bef
 8022a74:	08022c13 	.word	0x08022c13
 8022a78:	20002574 	.word	0x20002574

08022a7c <stdio_exit_handler>:
 8022a7c:	4a02      	ldr	r2, [pc, #8]	@ (8022a88 <stdio_exit_handler+0xc>)
 8022a7e:	4903      	ldr	r1, [pc, #12]	@ (8022a8c <stdio_exit_handler+0x10>)
 8022a80:	4803      	ldr	r0, [pc, #12]	@ (8022a90 <stdio_exit_handler+0x14>)
 8022a82:	f000 b869 	b.w	8022b58 <_fwalk_sglue>
 8022a86:	bf00      	nop
 8022a88:	2000002c 	.word	0x2000002c
 8022a8c:	080230f9 	.word	0x080230f9
 8022a90:	2000003c 	.word	0x2000003c

08022a94 <cleanup_stdio>:
 8022a94:	6841      	ldr	r1, [r0, #4]
 8022a96:	4b0c      	ldr	r3, [pc, #48]	@ (8022ac8 <cleanup_stdio+0x34>)
 8022a98:	4299      	cmp	r1, r3
 8022a9a:	b510      	push	{r4, lr}
 8022a9c:	4604      	mov	r4, r0
 8022a9e:	d001      	beq.n	8022aa4 <cleanup_stdio+0x10>
 8022aa0:	f000 fb2a 	bl	80230f8 <_fflush_r>
 8022aa4:	68a1      	ldr	r1, [r4, #8]
 8022aa6:	4b09      	ldr	r3, [pc, #36]	@ (8022acc <cleanup_stdio+0x38>)
 8022aa8:	4299      	cmp	r1, r3
 8022aaa:	d002      	beq.n	8022ab2 <cleanup_stdio+0x1e>
 8022aac:	4620      	mov	r0, r4
 8022aae:	f000 fb23 	bl	80230f8 <_fflush_r>
 8022ab2:	68e1      	ldr	r1, [r4, #12]
 8022ab4:	4b06      	ldr	r3, [pc, #24]	@ (8022ad0 <cleanup_stdio+0x3c>)
 8022ab6:	4299      	cmp	r1, r3
 8022ab8:	d004      	beq.n	8022ac4 <cleanup_stdio+0x30>
 8022aba:	4620      	mov	r0, r4
 8022abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022ac0:	f000 bb1a 	b.w	80230f8 <_fflush_r>
 8022ac4:	bd10      	pop	{r4, pc}
 8022ac6:	bf00      	nop
 8022ac8:	20002574 	.word	0x20002574
 8022acc:	200025dc 	.word	0x200025dc
 8022ad0:	20002644 	.word	0x20002644

08022ad4 <global_stdio_init.part.0>:
 8022ad4:	b510      	push	{r4, lr}
 8022ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8022b04 <global_stdio_init.part.0+0x30>)
 8022ad8:	4c0b      	ldr	r4, [pc, #44]	@ (8022b08 <global_stdio_init.part.0+0x34>)
 8022ada:	4a0c      	ldr	r2, [pc, #48]	@ (8022b0c <global_stdio_init.part.0+0x38>)
 8022adc:	601a      	str	r2, [r3, #0]
 8022ade:	4620      	mov	r0, r4
 8022ae0:	2200      	movs	r2, #0
 8022ae2:	2104      	movs	r1, #4
 8022ae4:	f7ff ff94 	bl	8022a10 <std>
 8022ae8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8022aec:	2201      	movs	r2, #1
 8022aee:	2109      	movs	r1, #9
 8022af0:	f7ff ff8e 	bl	8022a10 <std>
 8022af4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8022af8:	2202      	movs	r2, #2
 8022afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022afe:	2112      	movs	r1, #18
 8022b00:	f7ff bf86 	b.w	8022a10 <std>
 8022b04:	200026ac 	.word	0x200026ac
 8022b08:	20002574 	.word	0x20002574
 8022b0c:	08022a7d 	.word	0x08022a7d

08022b10 <__sfp_lock_acquire>:
 8022b10:	4801      	ldr	r0, [pc, #4]	@ (8022b18 <__sfp_lock_acquire+0x8>)
 8022b12:	f000 b94c 	b.w	8022dae <__retarget_lock_acquire_recursive>
 8022b16:	bf00      	nop
 8022b18:	200026b5 	.word	0x200026b5

08022b1c <__sfp_lock_release>:
 8022b1c:	4801      	ldr	r0, [pc, #4]	@ (8022b24 <__sfp_lock_release+0x8>)
 8022b1e:	f000 b947 	b.w	8022db0 <__retarget_lock_release_recursive>
 8022b22:	bf00      	nop
 8022b24:	200026b5 	.word	0x200026b5

08022b28 <__sinit>:
 8022b28:	b510      	push	{r4, lr}
 8022b2a:	4604      	mov	r4, r0
 8022b2c:	f7ff fff0 	bl	8022b10 <__sfp_lock_acquire>
 8022b30:	6a23      	ldr	r3, [r4, #32]
 8022b32:	b11b      	cbz	r3, 8022b3c <__sinit+0x14>
 8022b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022b38:	f7ff bff0 	b.w	8022b1c <__sfp_lock_release>
 8022b3c:	4b04      	ldr	r3, [pc, #16]	@ (8022b50 <__sinit+0x28>)
 8022b3e:	6223      	str	r3, [r4, #32]
 8022b40:	4b04      	ldr	r3, [pc, #16]	@ (8022b54 <__sinit+0x2c>)
 8022b42:	681b      	ldr	r3, [r3, #0]
 8022b44:	2b00      	cmp	r3, #0
 8022b46:	d1f5      	bne.n	8022b34 <__sinit+0xc>
 8022b48:	f7ff ffc4 	bl	8022ad4 <global_stdio_init.part.0>
 8022b4c:	e7f2      	b.n	8022b34 <__sinit+0xc>
 8022b4e:	bf00      	nop
 8022b50:	08022a95 	.word	0x08022a95
 8022b54:	200026ac 	.word	0x200026ac

08022b58 <_fwalk_sglue>:
 8022b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022b5c:	4607      	mov	r7, r0
 8022b5e:	4688      	mov	r8, r1
 8022b60:	4614      	mov	r4, r2
 8022b62:	2600      	movs	r6, #0
 8022b64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022b68:	f1b9 0901 	subs.w	r9, r9, #1
 8022b6c:	d505      	bpl.n	8022b7a <_fwalk_sglue+0x22>
 8022b6e:	6824      	ldr	r4, [r4, #0]
 8022b70:	2c00      	cmp	r4, #0
 8022b72:	d1f7      	bne.n	8022b64 <_fwalk_sglue+0xc>
 8022b74:	4630      	mov	r0, r6
 8022b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022b7a:	89ab      	ldrh	r3, [r5, #12]
 8022b7c:	2b01      	cmp	r3, #1
 8022b7e:	d907      	bls.n	8022b90 <_fwalk_sglue+0x38>
 8022b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022b84:	3301      	adds	r3, #1
 8022b86:	d003      	beq.n	8022b90 <_fwalk_sglue+0x38>
 8022b88:	4629      	mov	r1, r5
 8022b8a:	4638      	mov	r0, r7
 8022b8c:	47c0      	blx	r8
 8022b8e:	4306      	orrs	r6, r0
 8022b90:	3568      	adds	r5, #104	@ 0x68
 8022b92:	e7e9      	b.n	8022b68 <_fwalk_sglue+0x10>

08022b94 <__sread>:
 8022b94:	b510      	push	{r4, lr}
 8022b96:	460c      	mov	r4, r1
 8022b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022b9c:	f000 f8b8 	bl	8022d10 <_read_r>
 8022ba0:	2800      	cmp	r0, #0
 8022ba2:	bfab      	itete	ge
 8022ba4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8022ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8022ba8:	181b      	addge	r3, r3, r0
 8022baa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8022bae:	bfac      	ite	ge
 8022bb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8022bb2:	81a3      	strhlt	r3, [r4, #12]
 8022bb4:	bd10      	pop	{r4, pc}

08022bb6 <__swrite>:
 8022bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022bba:	461f      	mov	r7, r3
 8022bbc:	898b      	ldrh	r3, [r1, #12]
 8022bbe:	05db      	lsls	r3, r3, #23
 8022bc0:	4605      	mov	r5, r0
 8022bc2:	460c      	mov	r4, r1
 8022bc4:	4616      	mov	r6, r2
 8022bc6:	d505      	bpl.n	8022bd4 <__swrite+0x1e>
 8022bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022bcc:	2302      	movs	r3, #2
 8022bce:	2200      	movs	r2, #0
 8022bd0:	f000 f88c 	bl	8022cec <_lseek_r>
 8022bd4:	89a3      	ldrh	r3, [r4, #12]
 8022bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022bda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8022bde:	81a3      	strh	r3, [r4, #12]
 8022be0:	4632      	mov	r2, r6
 8022be2:	463b      	mov	r3, r7
 8022be4:	4628      	mov	r0, r5
 8022be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022bea:	f000 b8a3 	b.w	8022d34 <_write_r>

08022bee <__sseek>:
 8022bee:	b510      	push	{r4, lr}
 8022bf0:	460c      	mov	r4, r1
 8022bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022bf6:	f000 f879 	bl	8022cec <_lseek_r>
 8022bfa:	1c43      	adds	r3, r0, #1
 8022bfc:	89a3      	ldrh	r3, [r4, #12]
 8022bfe:	bf15      	itete	ne
 8022c00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8022c02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8022c06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8022c0a:	81a3      	strheq	r3, [r4, #12]
 8022c0c:	bf18      	it	ne
 8022c0e:	81a3      	strhne	r3, [r4, #12]
 8022c10:	bd10      	pop	{r4, pc}

08022c12 <__sclose>:
 8022c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022c16:	f000 b859 	b.w	8022ccc <_close_r>

08022c1a <memcmp>:
 8022c1a:	b510      	push	{r4, lr}
 8022c1c:	3901      	subs	r1, #1
 8022c1e:	4402      	add	r2, r0
 8022c20:	4290      	cmp	r0, r2
 8022c22:	d101      	bne.n	8022c28 <memcmp+0xe>
 8022c24:	2000      	movs	r0, #0
 8022c26:	e005      	b.n	8022c34 <memcmp+0x1a>
 8022c28:	7803      	ldrb	r3, [r0, #0]
 8022c2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022c2e:	42a3      	cmp	r3, r4
 8022c30:	d001      	beq.n	8022c36 <memcmp+0x1c>
 8022c32:	1b18      	subs	r0, r3, r4
 8022c34:	bd10      	pop	{r4, pc}
 8022c36:	3001      	adds	r0, #1
 8022c38:	e7f2      	b.n	8022c20 <memcmp+0x6>

08022c3a <memmove>:
 8022c3a:	4288      	cmp	r0, r1
 8022c3c:	b510      	push	{r4, lr}
 8022c3e:	eb01 0402 	add.w	r4, r1, r2
 8022c42:	d902      	bls.n	8022c4a <memmove+0x10>
 8022c44:	4284      	cmp	r4, r0
 8022c46:	4623      	mov	r3, r4
 8022c48:	d807      	bhi.n	8022c5a <memmove+0x20>
 8022c4a:	1e43      	subs	r3, r0, #1
 8022c4c:	42a1      	cmp	r1, r4
 8022c4e:	d008      	beq.n	8022c62 <memmove+0x28>
 8022c50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022c54:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022c58:	e7f8      	b.n	8022c4c <memmove+0x12>
 8022c5a:	4402      	add	r2, r0
 8022c5c:	4601      	mov	r1, r0
 8022c5e:	428a      	cmp	r2, r1
 8022c60:	d100      	bne.n	8022c64 <memmove+0x2a>
 8022c62:	bd10      	pop	{r4, pc}
 8022c64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022c68:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022c6c:	e7f7      	b.n	8022c5e <memmove+0x24>
	...

08022c70 <strcasecmp>:
 8022c70:	b530      	push	{r4, r5, lr}
 8022c72:	4d0b      	ldr	r5, [pc, #44]	@ (8022ca0 <strcasecmp+0x30>)
 8022c74:	4604      	mov	r4, r0
 8022c76:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022c7a:	5cea      	ldrb	r2, [r5, r3]
 8022c7c:	f002 0203 	and.w	r2, r2, #3
 8022c80:	2a01      	cmp	r2, #1
 8022c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022c86:	5ca8      	ldrb	r0, [r5, r2]
 8022c88:	f000 0003 	and.w	r0, r0, #3
 8022c8c:	bf08      	it	eq
 8022c8e:	3320      	addeq	r3, #32
 8022c90:	2801      	cmp	r0, #1
 8022c92:	bf08      	it	eq
 8022c94:	3220      	addeq	r2, #32
 8022c96:	1a98      	subs	r0, r3, r2
 8022c98:	d101      	bne.n	8022c9e <strcasecmp+0x2e>
 8022c9a:	2a00      	cmp	r2, #0
 8022c9c:	d1eb      	bne.n	8022c76 <strcasecmp+0x6>
 8022c9e:	bd30      	pop	{r4, r5, pc}
 8022ca0:	08027120 	.word	0x08027120

08022ca4 <strncpy>:
 8022ca4:	b510      	push	{r4, lr}
 8022ca6:	3901      	subs	r1, #1
 8022ca8:	4603      	mov	r3, r0
 8022caa:	b132      	cbz	r2, 8022cba <strncpy+0x16>
 8022cac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022cb0:	f803 4b01 	strb.w	r4, [r3], #1
 8022cb4:	3a01      	subs	r2, #1
 8022cb6:	2c00      	cmp	r4, #0
 8022cb8:	d1f7      	bne.n	8022caa <strncpy+0x6>
 8022cba:	441a      	add	r2, r3
 8022cbc:	2100      	movs	r1, #0
 8022cbe:	4293      	cmp	r3, r2
 8022cc0:	d100      	bne.n	8022cc4 <strncpy+0x20>
 8022cc2:	bd10      	pop	{r4, pc}
 8022cc4:	f803 1b01 	strb.w	r1, [r3], #1
 8022cc8:	e7f9      	b.n	8022cbe <strncpy+0x1a>
	...

08022ccc <_close_r>:
 8022ccc:	b538      	push	{r3, r4, r5, lr}
 8022cce:	4d06      	ldr	r5, [pc, #24]	@ (8022ce8 <_close_r+0x1c>)
 8022cd0:	2300      	movs	r3, #0
 8022cd2:	4604      	mov	r4, r0
 8022cd4:	4608      	mov	r0, r1
 8022cd6:	602b      	str	r3, [r5, #0]
 8022cd8:	f7df fcba 	bl	8002650 <_close>
 8022cdc:	1c43      	adds	r3, r0, #1
 8022cde:	d102      	bne.n	8022ce6 <_close_r+0x1a>
 8022ce0:	682b      	ldr	r3, [r5, #0]
 8022ce2:	b103      	cbz	r3, 8022ce6 <_close_r+0x1a>
 8022ce4:	6023      	str	r3, [r4, #0]
 8022ce6:	bd38      	pop	{r3, r4, r5, pc}
 8022ce8:	200026b0 	.word	0x200026b0

08022cec <_lseek_r>:
 8022cec:	b538      	push	{r3, r4, r5, lr}
 8022cee:	4d07      	ldr	r5, [pc, #28]	@ (8022d0c <_lseek_r+0x20>)
 8022cf0:	4604      	mov	r4, r0
 8022cf2:	4608      	mov	r0, r1
 8022cf4:	4611      	mov	r1, r2
 8022cf6:	2200      	movs	r2, #0
 8022cf8:	602a      	str	r2, [r5, #0]
 8022cfa:	461a      	mov	r2, r3
 8022cfc:	f7df fccf 	bl	800269e <_lseek>
 8022d00:	1c43      	adds	r3, r0, #1
 8022d02:	d102      	bne.n	8022d0a <_lseek_r+0x1e>
 8022d04:	682b      	ldr	r3, [r5, #0]
 8022d06:	b103      	cbz	r3, 8022d0a <_lseek_r+0x1e>
 8022d08:	6023      	str	r3, [r4, #0]
 8022d0a:	bd38      	pop	{r3, r4, r5, pc}
 8022d0c:	200026b0 	.word	0x200026b0

08022d10 <_read_r>:
 8022d10:	b538      	push	{r3, r4, r5, lr}
 8022d12:	4d07      	ldr	r5, [pc, #28]	@ (8022d30 <_read_r+0x20>)
 8022d14:	4604      	mov	r4, r0
 8022d16:	4608      	mov	r0, r1
 8022d18:	4611      	mov	r1, r2
 8022d1a:	2200      	movs	r2, #0
 8022d1c:	602a      	str	r2, [r5, #0]
 8022d1e:	461a      	mov	r2, r3
 8022d20:	f7df fc5d 	bl	80025de <_read>
 8022d24:	1c43      	adds	r3, r0, #1
 8022d26:	d102      	bne.n	8022d2e <_read_r+0x1e>
 8022d28:	682b      	ldr	r3, [r5, #0]
 8022d2a:	b103      	cbz	r3, 8022d2e <_read_r+0x1e>
 8022d2c:	6023      	str	r3, [r4, #0]
 8022d2e:	bd38      	pop	{r3, r4, r5, pc}
 8022d30:	200026b0 	.word	0x200026b0

08022d34 <_write_r>:
 8022d34:	b538      	push	{r3, r4, r5, lr}
 8022d36:	4d07      	ldr	r5, [pc, #28]	@ (8022d54 <_write_r+0x20>)
 8022d38:	4604      	mov	r4, r0
 8022d3a:	4608      	mov	r0, r1
 8022d3c:	4611      	mov	r1, r2
 8022d3e:	2200      	movs	r2, #0
 8022d40:	602a      	str	r2, [r5, #0]
 8022d42:	461a      	mov	r2, r3
 8022d44:	f7df fc68 	bl	8002618 <_write>
 8022d48:	1c43      	adds	r3, r0, #1
 8022d4a:	d102      	bne.n	8022d52 <_write_r+0x1e>
 8022d4c:	682b      	ldr	r3, [r5, #0]
 8022d4e:	b103      	cbz	r3, 8022d52 <_write_r+0x1e>
 8022d50:	6023      	str	r3, [r4, #0]
 8022d52:	bd38      	pop	{r3, r4, r5, pc}
 8022d54:	200026b0 	.word	0x200026b0

08022d58 <__errno>:
 8022d58:	4b01      	ldr	r3, [pc, #4]	@ (8022d60 <__errno+0x8>)
 8022d5a:	6818      	ldr	r0, [r3, #0]
 8022d5c:	4770      	bx	lr
 8022d5e:	bf00      	nop
 8022d60:	20000038 	.word	0x20000038

08022d64 <__libc_init_array>:
 8022d64:	b570      	push	{r4, r5, r6, lr}
 8022d66:	4d0d      	ldr	r5, [pc, #52]	@ (8022d9c <__libc_init_array+0x38>)
 8022d68:	4c0d      	ldr	r4, [pc, #52]	@ (8022da0 <__libc_init_array+0x3c>)
 8022d6a:	1b64      	subs	r4, r4, r5
 8022d6c:	10a4      	asrs	r4, r4, #2
 8022d6e:	2600      	movs	r6, #0
 8022d70:	42a6      	cmp	r6, r4
 8022d72:	d109      	bne.n	8022d88 <__libc_init_array+0x24>
 8022d74:	4d0b      	ldr	r5, [pc, #44]	@ (8022da4 <__libc_init_array+0x40>)
 8022d76:	4c0c      	ldr	r4, [pc, #48]	@ (8022da8 <__libc_init_array+0x44>)
 8022d78:	f000 fe3a 	bl	80239f0 <_init>
 8022d7c:	1b64      	subs	r4, r4, r5
 8022d7e:	10a4      	asrs	r4, r4, #2
 8022d80:	2600      	movs	r6, #0
 8022d82:	42a6      	cmp	r6, r4
 8022d84:	d105      	bne.n	8022d92 <__libc_init_array+0x2e>
 8022d86:	bd70      	pop	{r4, r5, r6, pc}
 8022d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8022d8c:	4798      	blx	r3
 8022d8e:	3601      	adds	r6, #1
 8022d90:	e7ee      	b.n	8022d70 <__libc_init_array+0xc>
 8022d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8022d96:	4798      	blx	r3
 8022d98:	3601      	adds	r6, #1
 8022d9a:	e7f2      	b.n	8022d82 <__libc_init_array+0x1e>
 8022d9c:	0802725c 	.word	0x0802725c
 8022da0:	0802725c 	.word	0x0802725c
 8022da4:	0802725c 	.word	0x0802725c
 8022da8:	08027260 	.word	0x08027260

08022dac <__retarget_lock_init_recursive>:
 8022dac:	4770      	bx	lr

08022dae <__retarget_lock_acquire_recursive>:
 8022dae:	4770      	bx	lr

08022db0 <__retarget_lock_release_recursive>:
 8022db0:	4770      	bx	lr
	...

08022db4 <__assert_func>:
 8022db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022db6:	4614      	mov	r4, r2
 8022db8:	461a      	mov	r2, r3
 8022dba:	4b09      	ldr	r3, [pc, #36]	@ (8022de0 <__assert_func+0x2c>)
 8022dbc:	681b      	ldr	r3, [r3, #0]
 8022dbe:	4605      	mov	r5, r0
 8022dc0:	68d8      	ldr	r0, [r3, #12]
 8022dc2:	b954      	cbnz	r4, 8022dda <__assert_func+0x26>
 8022dc4:	4b07      	ldr	r3, [pc, #28]	@ (8022de4 <__assert_func+0x30>)
 8022dc6:	461c      	mov	r4, r3
 8022dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022dcc:	9100      	str	r1, [sp, #0]
 8022dce:	462b      	mov	r3, r5
 8022dd0:	4905      	ldr	r1, [pc, #20]	@ (8022de8 <__assert_func+0x34>)
 8022dd2:	f000 f9b9 	bl	8023148 <fiprintf>
 8022dd6:	f000 f9d9 	bl	802318c <abort>
 8022dda:	4b04      	ldr	r3, [pc, #16]	@ (8022dec <__assert_func+0x38>)
 8022ddc:	e7f4      	b.n	8022dc8 <__assert_func+0x14>
 8022dde:	bf00      	nop
 8022de0:	20000038 	.word	0x20000038
 8022de4:	0802711e 	.word	0x0802711e
 8022de8:	080270f0 	.word	0x080270f0
 8022dec:	080270e3 	.word	0x080270e3

08022df0 <_free_r>:
 8022df0:	b538      	push	{r3, r4, r5, lr}
 8022df2:	4605      	mov	r5, r0
 8022df4:	2900      	cmp	r1, #0
 8022df6:	d041      	beq.n	8022e7c <_free_r+0x8c>
 8022df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022dfc:	1f0c      	subs	r4, r1, #4
 8022dfe:	2b00      	cmp	r3, #0
 8022e00:	bfb8      	it	lt
 8022e02:	18e4      	addlt	r4, r4, r3
 8022e04:	f000 f8e8 	bl	8022fd8 <__malloc_lock>
 8022e08:	4a1d      	ldr	r2, [pc, #116]	@ (8022e80 <_free_r+0x90>)
 8022e0a:	6813      	ldr	r3, [r2, #0]
 8022e0c:	b933      	cbnz	r3, 8022e1c <_free_r+0x2c>
 8022e0e:	6063      	str	r3, [r4, #4]
 8022e10:	6014      	str	r4, [r2, #0]
 8022e12:	4628      	mov	r0, r5
 8022e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022e18:	f000 b8e4 	b.w	8022fe4 <__malloc_unlock>
 8022e1c:	42a3      	cmp	r3, r4
 8022e1e:	d908      	bls.n	8022e32 <_free_r+0x42>
 8022e20:	6820      	ldr	r0, [r4, #0]
 8022e22:	1821      	adds	r1, r4, r0
 8022e24:	428b      	cmp	r3, r1
 8022e26:	bf01      	itttt	eq
 8022e28:	6819      	ldreq	r1, [r3, #0]
 8022e2a:	685b      	ldreq	r3, [r3, #4]
 8022e2c:	1809      	addeq	r1, r1, r0
 8022e2e:	6021      	streq	r1, [r4, #0]
 8022e30:	e7ed      	b.n	8022e0e <_free_r+0x1e>
 8022e32:	461a      	mov	r2, r3
 8022e34:	685b      	ldr	r3, [r3, #4]
 8022e36:	b10b      	cbz	r3, 8022e3c <_free_r+0x4c>
 8022e38:	42a3      	cmp	r3, r4
 8022e3a:	d9fa      	bls.n	8022e32 <_free_r+0x42>
 8022e3c:	6811      	ldr	r1, [r2, #0]
 8022e3e:	1850      	adds	r0, r2, r1
 8022e40:	42a0      	cmp	r0, r4
 8022e42:	d10b      	bne.n	8022e5c <_free_r+0x6c>
 8022e44:	6820      	ldr	r0, [r4, #0]
 8022e46:	4401      	add	r1, r0
 8022e48:	1850      	adds	r0, r2, r1
 8022e4a:	4283      	cmp	r3, r0
 8022e4c:	6011      	str	r1, [r2, #0]
 8022e4e:	d1e0      	bne.n	8022e12 <_free_r+0x22>
 8022e50:	6818      	ldr	r0, [r3, #0]
 8022e52:	685b      	ldr	r3, [r3, #4]
 8022e54:	6053      	str	r3, [r2, #4]
 8022e56:	4408      	add	r0, r1
 8022e58:	6010      	str	r0, [r2, #0]
 8022e5a:	e7da      	b.n	8022e12 <_free_r+0x22>
 8022e5c:	d902      	bls.n	8022e64 <_free_r+0x74>
 8022e5e:	230c      	movs	r3, #12
 8022e60:	602b      	str	r3, [r5, #0]
 8022e62:	e7d6      	b.n	8022e12 <_free_r+0x22>
 8022e64:	6820      	ldr	r0, [r4, #0]
 8022e66:	1821      	adds	r1, r4, r0
 8022e68:	428b      	cmp	r3, r1
 8022e6a:	bf04      	itt	eq
 8022e6c:	6819      	ldreq	r1, [r3, #0]
 8022e6e:	685b      	ldreq	r3, [r3, #4]
 8022e70:	6063      	str	r3, [r4, #4]
 8022e72:	bf04      	itt	eq
 8022e74:	1809      	addeq	r1, r1, r0
 8022e76:	6021      	streq	r1, [r4, #0]
 8022e78:	6054      	str	r4, [r2, #4]
 8022e7a:	e7ca      	b.n	8022e12 <_free_r+0x22>
 8022e7c:	bd38      	pop	{r3, r4, r5, pc}
 8022e7e:	bf00      	nop
 8022e80:	200026bc 	.word	0x200026bc

08022e84 <malloc>:
 8022e84:	4b02      	ldr	r3, [pc, #8]	@ (8022e90 <malloc+0xc>)
 8022e86:	4601      	mov	r1, r0
 8022e88:	6818      	ldr	r0, [r3, #0]
 8022e8a:	f000 b825 	b.w	8022ed8 <_malloc_r>
 8022e8e:	bf00      	nop
 8022e90:	20000038 	.word	0x20000038

08022e94 <sbrk_aligned>:
 8022e94:	b570      	push	{r4, r5, r6, lr}
 8022e96:	4e0f      	ldr	r6, [pc, #60]	@ (8022ed4 <sbrk_aligned+0x40>)
 8022e98:	460c      	mov	r4, r1
 8022e9a:	6831      	ldr	r1, [r6, #0]
 8022e9c:	4605      	mov	r5, r0
 8022e9e:	b911      	cbnz	r1, 8022ea6 <sbrk_aligned+0x12>
 8022ea0:	f000 f964 	bl	802316c <_sbrk_r>
 8022ea4:	6030      	str	r0, [r6, #0]
 8022ea6:	4621      	mov	r1, r4
 8022ea8:	4628      	mov	r0, r5
 8022eaa:	f000 f95f 	bl	802316c <_sbrk_r>
 8022eae:	1c43      	adds	r3, r0, #1
 8022eb0:	d103      	bne.n	8022eba <sbrk_aligned+0x26>
 8022eb2:	f04f 34ff 	mov.w	r4, #4294967295
 8022eb6:	4620      	mov	r0, r4
 8022eb8:	bd70      	pop	{r4, r5, r6, pc}
 8022eba:	1cc4      	adds	r4, r0, #3
 8022ebc:	f024 0403 	bic.w	r4, r4, #3
 8022ec0:	42a0      	cmp	r0, r4
 8022ec2:	d0f8      	beq.n	8022eb6 <sbrk_aligned+0x22>
 8022ec4:	1a21      	subs	r1, r4, r0
 8022ec6:	4628      	mov	r0, r5
 8022ec8:	f000 f950 	bl	802316c <_sbrk_r>
 8022ecc:	3001      	adds	r0, #1
 8022ece:	d1f2      	bne.n	8022eb6 <sbrk_aligned+0x22>
 8022ed0:	e7ef      	b.n	8022eb2 <sbrk_aligned+0x1e>
 8022ed2:	bf00      	nop
 8022ed4:	200026b8 	.word	0x200026b8

08022ed8 <_malloc_r>:
 8022ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022edc:	1ccd      	adds	r5, r1, #3
 8022ede:	f025 0503 	bic.w	r5, r5, #3
 8022ee2:	3508      	adds	r5, #8
 8022ee4:	2d0c      	cmp	r5, #12
 8022ee6:	bf38      	it	cc
 8022ee8:	250c      	movcc	r5, #12
 8022eea:	2d00      	cmp	r5, #0
 8022eec:	4606      	mov	r6, r0
 8022eee:	db01      	blt.n	8022ef4 <_malloc_r+0x1c>
 8022ef0:	42a9      	cmp	r1, r5
 8022ef2:	d904      	bls.n	8022efe <_malloc_r+0x26>
 8022ef4:	230c      	movs	r3, #12
 8022ef6:	6033      	str	r3, [r6, #0]
 8022ef8:	2000      	movs	r0, #0
 8022efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022efe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022fd4 <_malloc_r+0xfc>
 8022f02:	f000 f869 	bl	8022fd8 <__malloc_lock>
 8022f06:	f8d8 3000 	ldr.w	r3, [r8]
 8022f0a:	461c      	mov	r4, r3
 8022f0c:	bb44      	cbnz	r4, 8022f60 <_malloc_r+0x88>
 8022f0e:	4629      	mov	r1, r5
 8022f10:	4630      	mov	r0, r6
 8022f12:	f7ff ffbf 	bl	8022e94 <sbrk_aligned>
 8022f16:	1c43      	adds	r3, r0, #1
 8022f18:	4604      	mov	r4, r0
 8022f1a:	d158      	bne.n	8022fce <_malloc_r+0xf6>
 8022f1c:	f8d8 4000 	ldr.w	r4, [r8]
 8022f20:	4627      	mov	r7, r4
 8022f22:	2f00      	cmp	r7, #0
 8022f24:	d143      	bne.n	8022fae <_malloc_r+0xd6>
 8022f26:	2c00      	cmp	r4, #0
 8022f28:	d04b      	beq.n	8022fc2 <_malloc_r+0xea>
 8022f2a:	6823      	ldr	r3, [r4, #0]
 8022f2c:	4639      	mov	r1, r7
 8022f2e:	4630      	mov	r0, r6
 8022f30:	eb04 0903 	add.w	r9, r4, r3
 8022f34:	f000 f91a 	bl	802316c <_sbrk_r>
 8022f38:	4581      	cmp	r9, r0
 8022f3a:	d142      	bne.n	8022fc2 <_malloc_r+0xea>
 8022f3c:	6821      	ldr	r1, [r4, #0]
 8022f3e:	1a6d      	subs	r5, r5, r1
 8022f40:	4629      	mov	r1, r5
 8022f42:	4630      	mov	r0, r6
 8022f44:	f7ff ffa6 	bl	8022e94 <sbrk_aligned>
 8022f48:	3001      	adds	r0, #1
 8022f4a:	d03a      	beq.n	8022fc2 <_malloc_r+0xea>
 8022f4c:	6823      	ldr	r3, [r4, #0]
 8022f4e:	442b      	add	r3, r5
 8022f50:	6023      	str	r3, [r4, #0]
 8022f52:	f8d8 3000 	ldr.w	r3, [r8]
 8022f56:	685a      	ldr	r2, [r3, #4]
 8022f58:	bb62      	cbnz	r2, 8022fb4 <_malloc_r+0xdc>
 8022f5a:	f8c8 7000 	str.w	r7, [r8]
 8022f5e:	e00f      	b.n	8022f80 <_malloc_r+0xa8>
 8022f60:	6822      	ldr	r2, [r4, #0]
 8022f62:	1b52      	subs	r2, r2, r5
 8022f64:	d420      	bmi.n	8022fa8 <_malloc_r+0xd0>
 8022f66:	2a0b      	cmp	r2, #11
 8022f68:	d917      	bls.n	8022f9a <_malloc_r+0xc2>
 8022f6a:	1961      	adds	r1, r4, r5
 8022f6c:	42a3      	cmp	r3, r4
 8022f6e:	6025      	str	r5, [r4, #0]
 8022f70:	bf18      	it	ne
 8022f72:	6059      	strne	r1, [r3, #4]
 8022f74:	6863      	ldr	r3, [r4, #4]
 8022f76:	bf08      	it	eq
 8022f78:	f8c8 1000 	streq.w	r1, [r8]
 8022f7c:	5162      	str	r2, [r4, r5]
 8022f7e:	604b      	str	r3, [r1, #4]
 8022f80:	4630      	mov	r0, r6
 8022f82:	f000 f82f 	bl	8022fe4 <__malloc_unlock>
 8022f86:	f104 000b 	add.w	r0, r4, #11
 8022f8a:	1d23      	adds	r3, r4, #4
 8022f8c:	f020 0007 	bic.w	r0, r0, #7
 8022f90:	1ac2      	subs	r2, r0, r3
 8022f92:	bf1c      	itt	ne
 8022f94:	1a1b      	subne	r3, r3, r0
 8022f96:	50a3      	strne	r3, [r4, r2]
 8022f98:	e7af      	b.n	8022efa <_malloc_r+0x22>
 8022f9a:	6862      	ldr	r2, [r4, #4]
 8022f9c:	42a3      	cmp	r3, r4
 8022f9e:	bf0c      	ite	eq
 8022fa0:	f8c8 2000 	streq.w	r2, [r8]
 8022fa4:	605a      	strne	r2, [r3, #4]
 8022fa6:	e7eb      	b.n	8022f80 <_malloc_r+0xa8>
 8022fa8:	4623      	mov	r3, r4
 8022faa:	6864      	ldr	r4, [r4, #4]
 8022fac:	e7ae      	b.n	8022f0c <_malloc_r+0x34>
 8022fae:	463c      	mov	r4, r7
 8022fb0:	687f      	ldr	r7, [r7, #4]
 8022fb2:	e7b6      	b.n	8022f22 <_malloc_r+0x4a>
 8022fb4:	461a      	mov	r2, r3
 8022fb6:	685b      	ldr	r3, [r3, #4]
 8022fb8:	42a3      	cmp	r3, r4
 8022fba:	d1fb      	bne.n	8022fb4 <_malloc_r+0xdc>
 8022fbc:	2300      	movs	r3, #0
 8022fbe:	6053      	str	r3, [r2, #4]
 8022fc0:	e7de      	b.n	8022f80 <_malloc_r+0xa8>
 8022fc2:	230c      	movs	r3, #12
 8022fc4:	6033      	str	r3, [r6, #0]
 8022fc6:	4630      	mov	r0, r6
 8022fc8:	f000 f80c 	bl	8022fe4 <__malloc_unlock>
 8022fcc:	e794      	b.n	8022ef8 <_malloc_r+0x20>
 8022fce:	6005      	str	r5, [r0, #0]
 8022fd0:	e7d6      	b.n	8022f80 <_malloc_r+0xa8>
 8022fd2:	bf00      	nop
 8022fd4:	200026bc 	.word	0x200026bc

08022fd8 <__malloc_lock>:
 8022fd8:	4801      	ldr	r0, [pc, #4]	@ (8022fe0 <__malloc_lock+0x8>)
 8022fda:	f7ff bee8 	b.w	8022dae <__retarget_lock_acquire_recursive>
 8022fde:	bf00      	nop
 8022fe0:	200026b4 	.word	0x200026b4

08022fe4 <__malloc_unlock>:
 8022fe4:	4801      	ldr	r0, [pc, #4]	@ (8022fec <__malloc_unlock+0x8>)
 8022fe6:	f7ff bee3 	b.w	8022db0 <__retarget_lock_release_recursive>
 8022fea:	bf00      	nop
 8022fec:	200026b4 	.word	0x200026b4

08022ff0 <__sflush_r>:
 8022ff0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ff8:	0716      	lsls	r6, r2, #28
 8022ffa:	4605      	mov	r5, r0
 8022ffc:	460c      	mov	r4, r1
 8022ffe:	d454      	bmi.n	80230aa <__sflush_r+0xba>
 8023000:	684b      	ldr	r3, [r1, #4]
 8023002:	2b00      	cmp	r3, #0
 8023004:	dc02      	bgt.n	802300c <__sflush_r+0x1c>
 8023006:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023008:	2b00      	cmp	r3, #0
 802300a:	dd48      	ble.n	802309e <__sflush_r+0xae>
 802300c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802300e:	2e00      	cmp	r6, #0
 8023010:	d045      	beq.n	802309e <__sflush_r+0xae>
 8023012:	2300      	movs	r3, #0
 8023014:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8023018:	682f      	ldr	r7, [r5, #0]
 802301a:	6a21      	ldr	r1, [r4, #32]
 802301c:	602b      	str	r3, [r5, #0]
 802301e:	d030      	beq.n	8023082 <__sflush_r+0x92>
 8023020:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023022:	89a3      	ldrh	r3, [r4, #12]
 8023024:	0759      	lsls	r1, r3, #29
 8023026:	d505      	bpl.n	8023034 <__sflush_r+0x44>
 8023028:	6863      	ldr	r3, [r4, #4]
 802302a:	1ad2      	subs	r2, r2, r3
 802302c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802302e:	b10b      	cbz	r3, 8023034 <__sflush_r+0x44>
 8023030:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023032:	1ad2      	subs	r2, r2, r3
 8023034:	2300      	movs	r3, #0
 8023036:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023038:	6a21      	ldr	r1, [r4, #32]
 802303a:	4628      	mov	r0, r5
 802303c:	47b0      	blx	r6
 802303e:	1c43      	adds	r3, r0, #1
 8023040:	89a3      	ldrh	r3, [r4, #12]
 8023042:	d106      	bne.n	8023052 <__sflush_r+0x62>
 8023044:	6829      	ldr	r1, [r5, #0]
 8023046:	291d      	cmp	r1, #29
 8023048:	d82b      	bhi.n	80230a2 <__sflush_r+0xb2>
 802304a:	4a2a      	ldr	r2, [pc, #168]	@ (80230f4 <__sflush_r+0x104>)
 802304c:	410a      	asrs	r2, r1
 802304e:	07d6      	lsls	r6, r2, #31
 8023050:	d427      	bmi.n	80230a2 <__sflush_r+0xb2>
 8023052:	2200      	movs	r2, #0
 8023054:	6062      	str	r2, [r4, #4]
 8023056:	04d9      	lsls	r1, r3, #19
 8023058:	6922      	ldr	r2, [r4, #16]
 802305a:	6022      	str	r2, [r4, #0]
 802305c:	d504      	bpl.n	8023068 <__sflush_r+0x78>
 802305e:	1c42      	adds	r2, r0, #1
 8023060:	d101      	bne.n	8023066 <__sflush_r+0x76>
 8023062:	682b      	ldr	r3, [r5, #0]
 8023064:	b903      	cbnz	r3, 8023068 <__sflush_r+0x78>
 8023066:	6560      	str	r0, [r4, #84]	@ 0x54
 8023068:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802306a:	602f      	str	r7, [r5, #0]
 802306c:	b1b9      	cbz	r1, 802309e <__sflush_r+0xae>
 802306e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023072:	4299      	cmp	r1, r3
 8023074:	d002      	beq.n	802307c <__sflush_r+0x8c>
 8023076:	4628      	mov	r0, r5
 8023078:	f7ff feba 	bl	8022df0 <_free_r>
 802307c:	2300      	movs	r3, #0
 802307e:	6363      	str	r3, [r4, #52]	@ 0x34
 8023080:	e00d      	b.n	802309e <__sflush_r+0xae>
 8023082:	2301      	movs	r3, #1
 8023084:	4628      	mov	r0, r5
 8023086:	47b0      	blx	r6
 8023088:	4602      	mov	r2, r0
 802308a:	1c50      	adds	r0, r2, #1
 802308c:	d1c9      	bne.n	8023022 <__sflush_r+0x32>
 802308e:	682b      	ldr	r3, [r5, #0]
 8023090:	2b00      	cmp	r3, #0
 8023092:	d0c6      	beq.n	8023022 <__sflush_r+0x32>
 8023094:	2b1d      	cmp	r3, #29
 8023096:	d001      	beq.n	802309c <__sflush_r+0xac>
 8023098:	2b16      	cmp	r3, #22
 802309a:	d11e      	bne.n	80230da <__sflush_r+0xea>
 802309c:	602f      	str	r7, [r5, #0]
 802309e:	2000      	movs	r0, #0
 80230a0:	e022      	b.n	80230e8 <__sflush_r+0xf8>
 80230a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80230a6:	b21b      	sxth	r3, r3
 80230a8:	e01b      	b.n	80230e2 <__sflush_r+0xf2>
 80230aa:	690f      	ldr	r7, [r1, #16]
 80230ac:	2f00      	cmp	r7, #0
 80230ae:	d0f6      	beq.n	802309e <__sflush_r+0xae>
 80230b0:	0793      	lsls	r3, r2, #30
 80230b2:	680e      	ldr	r6, [r1, #0]
 80230b4:	bf08      	it	eq
 80230b6:	694b      	ldreq	r3, [r1, #20]
 80230b8:	600f      	str	r7, [r1, #0]
 80230ba:	bf18      	it	ne
 80230bc:	2300      	movne	r3, #0
 80230be:	eba6 0807 	sub.w	r8, r6, r7
 80230c2:	608b      	str	r3, [r1, #8]
 80230c4:	f1b8 0f00 	cmp.w	r8, #0
 80230c8:	dde9      	ble.n	802309e <__sflush_r+0xae>
 80230ca:	6a21      	ldr	r1, [r4, #32]
 80230cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80230ce:	4643      	mov	r3, r8
 80230d0:	463a      	mov	r2, r7
 80230d2:	4628      	mov	r0, r5
 80230d4:	47b0      	blx	r6
 80230d6:	2800      	cmp	r0, #0
 80230d8:	dc08      	bgt.n	80230ec <__sflush_r+0xfc>
 80230da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80230de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80230e2:	81a3      	strh	r3, [r4, #12]
 80230e4:	f04f 30ff 	mov.w	r0, #4294967295
 80230e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80230ec:	4407      	add	r7, r0
 80230ee:	eba8 0800 	sub.w	r8, r8, r0
 80230f2:	e7e7      	b.n	80230c4 <__sflush_r+0xd4>
 80230f4:	dfbffffe 	.word	0xdfbffffe

080230f8 <_fflush_r>:
 80230f8:	b538      	push	{r3, r4, r5, lr}
 80230fa:	690b      	ldr	r3, [r1, #16]
 80230fc:	4605      	mov	r5, r0
 80230fe:	460c      	mov	r4, r1
 8023100:	b913      	cbnz	r3, 8023108 <_fflush_r+0x10>
 8023102:	2500      	movs	r5, #0
 8023104:	4628      	mov	r0, r5
 8023106:	bd38      	pop	{r3, r4, r5, pc}
 8023108:	b118      	cbz	r0, 8023112 <_fflush_r+0x1a>
 802310a:	6a03      	ldr	r3, [r0, #32]
 802310c:	b90b      	cbnz	r3, 8023112 <_fflush_r+0x1a>
 802310e:	f7ff fd0b 	bl	8022b28 <__sinit>
 8023112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023116:	2b00      	cmp	r3, #0
 8023118:	d0f3      	beq.n	8023102 <_fflush_r+0xa>
 802311a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802311c:	07d0      	lsls	r0, r2, #31
 802311e:	d404      	bmi.n	802312a <_fflush_r+0x32>
 8023120:	0599      	lsls	r1, r3, #22
 8023122:	d402      	bmi.n	802312a <_fflush_r+0x32>
 8023124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023126:	f7ff fe42 	bl	8022dae <__retarget_lock_acquire_recursive>
 802312a:	4628      	mov	r0, r5
 802312c:	4621      	mov	r1, r4
 802312e:	f7ff ff5f 	bl	8022ff0 <__sflush_r>
 8023132:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023134:	07da      	lsls	r2, r3, #31
 8023136:	4605      	mov	r5, r0
 8023138:	d4e4      	bmi.n	8023104 <_fflush_r+0xc>
 802313a:	89a3      	ldrh	r3, [r4, #12]
 802313c:	059b      	lsls	r3, r3, #22
 802313e:	d4e1      	bmi.n	8023104 <_fflush_r+0xc>
 8023140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023142:	f7ff fe35 	bl	8022db0 <__retarget_lock_release_recursive>
 8023146:	e7dd      	b.n	8023104 <_fflush_r+0xc>

08023148 <fiprintf>:
 8023148:	b40e      	push	{r1, r2, r3}
 802314a:	b503      	push	{r0, r1, lr}
 802314c:	4601      	mov	r1, r0
 802314e:	ab03      	add	r3, sp, #12
 8023150:	4805      	ldr	r0, [pc, #20]	@ (8023168 <fiprintf+0x20>)
 8023152:	f853 2b04 	ldr.w	r2, [r3], #4
 8023156:	6800      	ldr	r0, [r0, #0]
 8023158:	9301      	str	r3, [sp, #4]
 802315a:	f000 f847 	bl	80231ec <_vfiprintf_r>
 802315e:	b002      	add	sp, #8
 8023160:	f85d eb04 	ldr.w	lr, [sp], #4
 8023164:	b003      	add	sp, #12
 8023166:	4770      	bx	lr
 8023168:	20000038 	.word	0x20000038

0802316c <_sbrk_r>:
 802316c:	b538      	push	{r3, r4, r5, lr}
 802316e:	4d06      	ldr	r5, [pc, #24]	@ (8023188 <_sbrk_r+0x1c>)
 8023170:	2300      	movs	r3, #0
 8023172:	4604      	mov	r4, r0
 8023174:	4608      	mov	r0, r1
 8023176:	602b      	str	r3, [r5, #0]
 8023178:	f7df fa9e 	bl	80026b8 <_sbrk>
 802317c:	1c43      	adds	r3, r0, #1
 802317e:	d102      	bne.n	8023186 <_sbrk_r+0x1a>
 8023180:	682b      	ldr	r3, [r5, #0]
 8023182:	b103      	cbz	r3, 8023186 <_sbrk_r+0x1a>
 8023184:	6023      	str	r3, [r4, #0]
 8023186:	bd38      	pop	{r3, r4, r5, pc}
 8023188:	200026b0 	.word	0x200026b0

0802318c <abort>:
 802318c:	b508      	push	{r3, lr}
 802318e:	2006      	movs	r0, #6
 8023190:	f000 fb8e 	bl	80238b0 <raise>
 8023194:	2001      	movs	r0, #1
 8023196:	f7df fa17 	bl	80025c8 <_exit>

0802319a <__sfputc_r>:
 802319a:	6893      	ldr	r3, [r2, #8]
 802319c:	3b01      	subs	r3, #1
 802319e:	2b00      	cmp	r3, #0
 80231a0:	b410      	push	{r4}
 80231a2:	6093      	str	r3, [r2, #8]
 80231a4:	da08      	bge.n	80231b8 <__sfputc_r+0x1e>
 80231a6:	6994      	ldr	r4, [r2, #24]
 80231a8:	42a3      	cmp	r3, r4
 80231aa:	db01      	blt.n	80231b0 <__sfputc_r+0x16>
 80231ac:	290a      	cmp	r1, #10
 80231ae:	d103      	bne.n	80231b8 <__sfputc_r+0x1e>
 80231b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80231b4:	f000 bac0 	b.w	8023738 <__swbuf_r>
 80231b8:	6813      	ldr	r3, [r2, #0]
 80231ba:	1c58      	adds	r0, r3, #1
 80231bc:	6010      	str	r0, [r2, #0]
 80231be:	7019      	strb	r1, [r3, #0]
 80231c0:	4608      	mov	r0, r1
 80231c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80231c6:	4770      	bx	lr

080231c8 <__sfputs_r>:
 80231c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80231ca:	4606      	mov	r6, r0
 80231cc:	460f      	mov	r7, r1
 80231ce:	4614      	mov	r4, r2
 80231d0:	18d5      	adds	r5, r2, r3
 80231d2:	42ac      	cmp	r4, r5
 80231d4:	d101      	bne.n	80231da <__sfputs_r+0x12>
 80231d6:	2000      	movs	r0, #0
 80231d8:	e007      	b.n	80231ea <__sfputs_r+0x22>
 80231da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80231de:	463a      	mov	r2, r7
 80231e0:	4630      	mov	r0, r6
 80231e2:	f7ff ffda 	bl	802319a <__sfputc_r>
 80231e6:	1c43      	adds	r3, r0, #1
 80231e8:	d1f3      	bne.n	80231d2 <__sfputs_r+0xa>
 80231ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080231ec <_vfiprintf_r>:
 80231ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231f0:	460d      	mov	r5, r1
 80231f2:	b09d      	sub	sp, #116	@ 0x74
 80231f4:	4614      	mov	r4, r2
 80231f6:	4698      	mov	r8, r3
 80231f8:	4606      	mov	r6, r0
 80231fa:	b118      	cbz	r0, 8023204 <_vfiprintf_r+0x18>
 80231fc:	6a03      	ldr	r3, [r0, #32]
 80231fe:	b90b      	cbnz	r3, 8023204 <_vfiprintf_r+0x18>
 8023200:	f7ff fc92 	bl	8022b28 <__sinit>
 8023204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023206:	07d9      	lsls	r1, r3, #31
 8023208:	d405      	bmi.n	8023216 <_vfiprintf_r+0x2a>
 802320a:	89ab      	ldrh	r3, [r5, #12]
 802320c:	059a      	lsls	r2, r3, #22
 802320e:	d402      	bmi.n	8023216 <_vfiprintf_r+0x2a>
 8023210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023212:	f7ff fdcc 	bl	8022dae <__retarget_lock_acquire_recursive>
 8023216:	89ab      	ldrh	r3, [r5, #12]
 8023218:	071b      	lsls	r3, r3, #28
 802321a:	d501      	bpl.n	8023220 <_vfiprintf_r+0x34>
 802321c:	692b      	ldr	r3, [r5, #16]
 802321e:	b99b      	cbnz	r3, 8023248 <_vfiprintf_r+0x5c>
 8023220:	4629      	mov	r1, r5
 8023222:	4630      	mov	r0, r6
 8023224:	f000 fac6 	bl	80237b4 <__swsetup_r>
 8023228:	b170      	cbz	r0, 8023248 <_vfiprintf_r+0x5c>
 802322a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802322c:	07dc      	lsls	r4, r3, #31
 802322e:	d504      	bpl.n	802323a <_vfiprintf_r+0x4e>
 8023230:	f04f 30ff 	mov.w	r0, #4294967295
 8023234:	b01d      	add	sp, #116	@ 0x74
 8023236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802323a:	89ab      	ldrh	r3, [r5, #12]
 802323c:	0598      	lsls	r0, r3, #22
 802323e:	d4f7      	bmi.n	8023230 <_vfiprintf_r+0x44>
 8023240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023242:	f7ff fdb5 	bl	8022db0 <__retarget_lock_release_recursive>
 8023246:	e7f3      	b.n	8023230 <_vfiprintf_r+0x44>
 8023248:	2300      	movs	r3, #0
 802324a:	9309      	str	r3, [sp, #36]	@ 0x24
 802324c:	2320      	movs	r3, #32
 802324e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023252:	f8cd 800c 	str.w	r8, [sp, #12]
 8023256:	2330      	movs	r3, #48	@ 0x30
 8023258:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023408 <_vfiprintf_r+0x21c>
 802325c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023260:	f04f 0901 	mov.w	r9, #1
 8023264:	4623      	mov	r3, r4
 8023266:	469a      	mov	sl, r3
 8023268:	f813 2b01 	ldrb.w	r2, [r3], #1
 802326c:	b10a      	cbz	r2, 8023272 <_vfiprintf_r+0x86>
 802326e:	2a25      	cmp	r2, #37	@ 0x25
 8023270:	d1f9      	bne.n	8023266 <_vfiprintf_r+0x7a>
 8023272:	ebba 0b04 	subs.w	fp, sl, r4
 8023276:	d00b      	beq.n	8023290 <_vfiprintf_r+0xa4>
 8023278:	465b      	mov	r3, fp
 802327a:	4622      	mov	r2, r4
 802327c:	4629      	mov	r1, r5
 802327e:	4630      	mov	r0, r6
 8023280:	f7ff ffa2 	bl	80231c8 <__sfputs_r>
 8023284:	3001      	adds	r0, #1
 8023286:	f000 80a7 	beq.w	80233d8 <_vfiprintf_r+0x1ec>
 802328a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802328c:	445a      	add	r2, fp
 802328e:	9209      	str	r2, [sp, #36]	@ 0x24
 8023290:	f89a 3000 	ldrb.w	r3, [sl]
 8023294:	2b00      	cmp	r3, #0
 8023296:	f000 809f 	beq.w	80233d8 <_vfiprintf_r+0x1ec>
 802329a:	2300      	movs	r3, #0
 802329c:	f04f 32ff 	mov.w	r2, #4294967295
 80232a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80232a4:	f10a 0a01 	add.w	sl, sl, #1
 80232a8:	9304      	str	r3, [sp, #16]
 80232aa:	9307      	str	r3, [sp, #28]
 80232ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80232b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80232b2:	4654      	mov	r4, sl
 80232b4:	2205      	movs	r2, #5
 80232b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80232ba:	4853      	ldr	r0, [pc, #332]	@ (8023408 <_vfiprintf_r+0x21c>)
 80232bc:	f7dd f828 	bl	8000310 <memchr>
 80232c0:	9a04      	ldr	r2, [sp, #16]
 80232c2:	b9d8      	cbnz	r0, 80232fc <_vfiprintf_r+0x110>
 80232c4:	06d1      	lsls	r1, r2, #27
 80232c6:	bf44      	itt	mi
 80232c8:	2320      	movmi	r3, #32
 80232ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80232ce:	0713      	lsls	r3, r2, #28
 80232d0:	bf44      	itt	mi
 80232d2:	232b      	movmi	r3, #43	@ 0x2b
 80232d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80232d8:	f89a 3000 	ldrb.w	r3, [sl]
 80232dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80232de:	d015      	beq.n	802330c <_vfiprintf_r+0x120>
 80232e0:	9a07      	ldr	r2, [sp, #28]
 80232e2:	4654      	mov	r4, sl
 80232e4:	2000      	movs	r0, #0
 80232e6:	f04f 0c0a 	mov.w	ip, #10
 80232ea:	4621      	mov	r1, r4
 80232ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80232f0:	3b30      	subs	r3, #48	@ 0x30
 80232f2:	2b09      	cmp	r3, #9
 80232f4:	d94b      	bls.n	802338e <_vfiprintf_r+0x1a2>
 80232f6:	b1b0      	cbz	r0, 8023326 <_vfiprintf_r+0x13a>
 80232f8:	9207      	str	r2, [sp, #28]
 80232fa:	e014      	b.n	8023326 <_vfiprintf_r+0x13a>
 80232fc:	eba0 0308 	sub.w	r3, r0, r8
 8023300:	fa09 f303 	lsl.w	r3, r9, r3
 8023304:	4313      	orrs	r3, r2
 8023306:	9304      	str	r3, [sp, #16]
 8023308:	46a2      	mov	sl, r4
 802330a:	e7d2      	b.n	80232b2 <_vfiprintf_r+0xc6>
 802330c:	9b03      	ldr	r3, [sp, #12]
 802330e:	1d19      	adds	r1, r3, #4
 8023310:	681b      	ldr	r3, [r3, #0]
 8023312:	9103      	str	r1, [sp, #12]
 8023314:	2b00      	cmp	r3, #0
 8023316:	bfbb      	ittet	lt
 8023318:	425b      	neglt	r3, r3
 802331a:	f042 0202 	orrlt.w	r2, r2, #2
 802331e:	9307      	strge	r3, [sp, #28]
 8023320:	9307      	strlt	r3, [sp, #28]
 8023322:	bfb8      	it	lt
 8023324:	9204      	strlt	r2, [sp, #16]
 8023326:	7823      	ldrb	r3, [r4, #0]
 8023328:	2b2e      	cmp	r3, #46	@ 0x2e
 802332a:	d10a      	bne.n	8023342 <_vfiprintf_r+0x156>
 802332c:	7863      	ldrb	r3, [r4, #1]
 802332e:	2b2a      	cmp	r3, #42	@ 0x2a
 8023330:	d132      	bne.n	8023398 <_vfiprintf_r+0x1ac>
 8023332:	9b03      	ldr	r3, [sp, #12]
 8023334:	1d1a      	adds	r2, r3, #4
 8023336:	681b      	ldr	r3, [r3, #0]
 8023338:	9203      	str	r2, [sp, #12]
 802333a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802333e:	3402      	adds	r4, #2
 8023340:	9305      	str	r3, [sp, #20]
 8023342:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023418 <_vfiprintf_r+0x22c>
 8023346:	7821      	ldrb	r1, [r4, #0]
 8023348:	2203      	movs	r2, #3
 802334a:	4650      	mov	r0, sl
 802334c:	f7dc ffe0 	bl	8000310 <memchr>
 8023350:	b138      	cbz	r0, 8023362 <_vfiprintf_r+0x176>
 8023352:	9b04      	ldr	r3, [sp, #16]
 8023354:	eba0 000a 	sub.w	r0, r0, sl
 8023358:	2240      	movs	r2, #64	@ 0x40
 802335a:	4082      	lsls	r2, r0
 802335c:	4313      	orrs	r3, r2
 802335e:	3401      	adds	r4, #1
 8023360:	9304      	str	r3, [sp, #16]
 8023362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023366:	4829      	ldr	r0, [pc, #164]	@ (802340c <_vfiprintf_r+0x220>)
 8023368:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802336c:	2206      	movs	r2, #6
 802336e:	f7dc ffcf 	bl	8000310 <memchr>
 8023372:	2800      	cmp	r0, #0
 8023374:	d03f      	beq.n	80233f6 <_vfiprintf_r+0x20a>
 8023376:	4b26      	ldr	r3, [pc, #152]	@ (8023410 <_vfiprintf_r+0x224>)
 8023378:	bb1b      	cbnz	r3, 80233c2 <_vfiprintf_r+0x1d6>
 802337a:	9b03      	ldr	r3, [sp, #12]
 802337c:	3307      	adds	r3, #7
 802337e:	f023 0307 	bic.w	r3, r3, #7
 8023382:	3308      	adds	r3, #8
 8023384:	9303      	str	r3, [sp, #12]
 8023386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023388:	443b      	add	r3, r7
 802338a:	9309      	str	r3, [sp, #36]	@ 0x24
 802338c:	e76a      	b.n	8023264 <_vfiprintf_r+0x78>
 802338e:	fb0c 3202 	mla	r2, ip, r2, r3
 8023392:	460c      	mov	r4, r1
 8023394:	2001      	movs	r0, #1
 8023396:	e7a8      	b.n	80232ea <_vfiprintf_r+0xfe>
 8023398:	2300      	movs	r3, #0
 802339a:	3401      	adds	r4, #1
 802339c:	9305      	str	r3, [sp, #20]
 802339e:	4619      	mov	r1, r3
 80233a0:	f04f 0c0a 	mov.w	ip, #10
 80233a4:	4620      	mov	r0, r4
 80233a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80233aa:	3a30      	subs	r2, #48	@ 0x30
 80233ac:	2a09      	cmp	r2, #9
 80233ae:	d903      	bls.n	80233b8 <_vfiprintf_r+0x1cc>
 80233b0:	2b00      	cmp	r3, #0
 80233b2:	d0c6      	beq.n	8023342 <_vfiprintf_r+0x156>
 80233b4:	9105      	str	r1, [sp, #20]
 80233b6:	e7c4      	b.n	8023342 <_vfiprintf_r+0x156>
 80233b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80233bc:	4604      	mov	r4, r0
 80233be:	2301      	movs	r3, #1
 80233c0:	e7f0      	b.n	80233a4 <_vfiprintf_r+0x1b8>
 80233c2:	ab03      	add	r3, sp, #12
 80233c4:	9300      	str	r3, [sp, #0]
 80233c6:	462a      	mov	r2, r5
 80233c8:	4b12      	ldr	r3, [pc, #72]	@ (8023414 <_vfiprintf_r+0x228>)
 80233ca:	a904      	add	r1, sp, #16
 80233cc:	4630      	mov	r0, r6
 80233ce:	f3af 8000 	nop.w
 80233d2:	4607      	mov	r7, r0
 80233d4:	1c78      	adds	r0, r7, #1
 80233d6:	d1d6      	bne.n	8023386 <_vfiprintf_r+0x19a>
 80233d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80233da:	07d9      	lsls	r1, r3, #31
 80233dc:	d405      	bmi.n	80233ea <_vfiprintf_r+0x1fe>
 80233de:	89ab      	ldrh	r3, [r5, #12]
 80233e0:	059a      	lsls	r2, r3, #22
 80233e2:	d402      	bmi.n	80233ea <_vfiprintf_r+0x1fe>
 80233e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80233e6:	f7ff fce3 	bl	8022db0 <__retarget_lock_release_recursive>
 80233ea:	89ab      	ldrh	r3, [r5, #12]
 80233ec:	065b      	lsls	r3, r3, #25
 80233ee:	f53f af1f 	bmi.w	8023230 <_vfiprintf_r+0x44>
 80233f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80233f4:	e71e      	b.n	8023234 <_vfiprintf_r+0x48>
 80233f6:	ab03      	add	r3, sp, #12
 80233f8:	9300      	str	r3, [sp, #0]
 80233fa:	462a      	mov	r2, r5
 80233fc:	4b05      	ldr	r3, [pc, #20]	@ (8023414 <_vfiprintf_r+0x228>)
 80233fe:	a904      	add	r1, sp, #16
 8023400:	4630      	mov	r0, r6
 8023402:	f000 f879 	bl	80234f8 <_printf_i>
 8023406:	e7e4      	b.n	80233d2 <_vfiprintf_r+0x1e6>
 8023408:	08027220 	.word	0x08027220
 802340c:	0802722a 	.word	0x0802722a
 8023410:	00000000 	.word	0x00000000
 8023414:	080231c9 	.word	0x080231c9
 8023418:	08027226 	.word	0x08027226

0802341c <_printf_common>:
 802341c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023420:	4616      	mov	r6, r2
 8023422:	4698      	mov	r8, r3
 8023424:	688a      	ldr	r2, [r1, #8]
 8023426:	690b      	ldr	r3, [r1, #16]
 8023428:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802342c:	4293      	cmp	r3, r2
 802342e:	bfb8      	it	lt
 8023430:	4613      	movlt	r3, r2
 8023432:	6033      	str	r3, [r6, #0]
 8023434:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023438:	4607      	mov	r7, r0
 802343a:	460c      	mov	r4, r1
 802343c:	b10a      	cbz	r2, 8023442 <_printf_common+0x26>
 802343e:	3301      	adds	r3, #1
 8023440:	6033      	str	r3, [r6, #0]
 8023442:	6823      	ldr	r3, [r4, #0]
 8023444:	0699      	lsls	r1, r3, #26
 8023446:	bf42      	ittt	mi
 8023448:	6833      	ldrmi	r3, [r6, #0]
 802344a:	3302      	addmi	r3, #2
 802344c:	6033      	strmi	r3, [r6, #0]
 802344e:	6825      	ldr	r5, [r4, #0]
 8023450:	f015 0506 	ands.w	r5, r5, #6
 8023454:	d106      	bne.n	8023464 <_printf_common+0x48>
 8023456:	f104 0a19 	add.w	sl, r4, #25
 802345a:	68e3      	ldr	r3, [r4, #12]
 802345c:	6832      	ldr	r2, [r6, #0]
 802345e:	1a9b      	subs	r3, r3, r2
 8023460:	42ab      	cmp	r3, r5
 8023462:	dc26      	bgt.n	80234b2 <_printf_common+0x96>
 8023464:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023468:	6822      	ldr	r2, [r4, #0]
 802346a:	3b00      	subs	r3, #0
 802346c:	bf18      	it	ne
 802346e:	2301      	movne	r3, #1
 8023470:	0692      	lsls	r2, r2, #26
 8023472:	d42b      	bmi.n	80234cc <_printf_common+0xb0>
 8023474:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023478:	4641      	mov	r1, r8
 802347a:	4638      	mov	r0, r7
 802347c:	47c8      	blx	r9
 802347e:	3001      	adds	r0, #1
 8023480:	d01e      	beq.n	80234c0 <_printf_common+0xa4>
 8023482:	6823      	ldr	r3, [r4, #0]
 8023484:	6922      	ldr	r2, [r4, #16]
 8023486:	f003 0306 	and.w	r3, r3, #6
 802348a:	2b04      	cmp	r3, #4
 802348c:	bf02      	ittt	eq
 802348e:	68e5      	ldreq	r5, [r4, #12]
 8023490:	6833      	ldreq	r3, [r6, #0]
 8023492:	1aed      	subeq	r5, r5, r3
 8023494:	68a3      	ldr	r3, [r4, #8]
 8023496:	bf0c      	ite	eq
 8023498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802349c:	2500      	movne	r5, #0
 802349e:	4293      	cmp	r3, r2
 80234a0:	bfc4      	itt	gt
 80234a2:	1a9b      	subgt	r3, r3, r2
 80234a4:	18ed      	addgt	r5, r5, r3
 80234a6:	2600      	movs	r6, #0
 80234a8:	341a      	adds	r4, #26
 80234aa:	42b5      	cmp	r5, r6
 80234ac:	d11a      	bne.n	80234e4 <_printf_common+0xc8>
 80234ae:	2000      	movs	r0, #0
 80234b0:	e008      	b.n	80234c4 <_printf_common+0xa8>
 80234b2:	2301      	movs	r3, #1
 80234b4:	4652      	mov	r2, sl
 80234b6:	4641      	mov	r1, r8
 80234b8:	4638      	mov	r0, r7
 80234ba:	47c8      	blx	r9
 80234bc:	3001      	adds	r0, #1
 80234be:	d103      	bne.n	80234c8 <_printf_common+0xac>
 80234c0:	f04f 30ff 	mov.w	r0, #4294967295
 80234c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80234c8:	3501      	adds	r5, #1
 80234ca:	e7c6      	b.n	802345a <_printf_common+0x3e>
 80234cc:	18e1      	adds	r1, r4, r3
 80234ce:	1c5a      	adds	r2, r3, #1
 80234d0:	2030      	movs	r0, #48	@ 0x30
 80234d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80234d6:	4422      	add	r2, r4
 80234d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80234dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80234e0:	3302      	adds	r3, #2
 80234e2:	e7c7      	b.n	8023474 <_printf_common+0x58>
 80234e4:	2301      	movs	r3, #1
 80234e6:	4622      	mov	r2, r4
 80234e8:	4641      	mov	r1, r8
 80234ea:	4638      	mov	r0, r7
 80234ec:	47c8      	blx	r9
 80234ee:	3001      	adds	r0, #1
 80234f0:	d0e6      	beq.n	80234c0 <_printf_common+0xa4>
 80234f2:	3601      	adds	r6, #1
 80234f4:	e7d9      	b.n	80234aa <_printf_common+0x8e>
	...

080234f8 <_printf_i>:
 80234f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80234fc:	7e0f      	ldrb	r7, [r1, #24]
 80234fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023500:	2f78      	cmp	r7, #120	@ 0x78
 8023502:	4691      	mov	r9, r2
 8023504:	4680      	mov	r8, r0
 8023506:	460c      	mov	r4, r1
 8023508:	469a      	mov	sl, r3
 802350a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802350e:	d807      	bhi.n	8023520 <_printf_i+0x28>
 8023510:	2f62      	cmp	r7, #98	@ 0x62
 8023512:	d80a      	bhi.n	802352a <_printf_i+0x32>
 8023514:	2f00      	cmp	r7, #0
 8023516:	f000 80d2 	beq.w	80236be <_printf_i+0x1c6>
 802351a:	2f58      	cmp	r7, #88	@ 0x58
 802351c:	f000 80b9 	beq.w	8023692 <_printf_i+0x19a>
 8023520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023524:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023528:	e03a      	b.n	80235a0 <_printf_i+0xa8>
 802352a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802352e:	2b15      	cmp	r3, #21
 8023530:	d8f6      	bhi.n	8023520 <_printf_i+0x28>
 8023532:	a101      	add	r1, pc, #4	@ (adr r1, 8023538 <_printf_i+0x40>)
 8023534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023538:	08023591 	.word	0x08023591
 802353c:	080235a5 	.word	0x080235a5
 8023540:	08023521 	.word	0x08023521
 8023544:	08023521 	.word	0x08023521
 8023548:	08023521 	.word	0x08023521
 802354c:	08023521 	.word	0x08023521
 8023550:	080235a5 	.word	0x080235a5
 8023554:	08023521 	.word	0x08023521
 8023558:	08023521 	.word	0x08023521
 802355c:	08023521 	.word	0x08023521
 8023560:	08023521 	.word	0x08023521
 8023564:	080236a5 	.word	0x080236a5
 8023568:	080235cf 	.word	0x080235cf
 802356c:	0802365f 	.word	0x0802365f
 8023570:	08023521 	.word	0x08023521
 8023574:	08023521 	.word	0x08023521
 8023578:	080236c7 	.word	0x080236c7
 802357c:	08023521 	.word	0x08023521
 8023580:	080235cf 	.word	0x080235cf
 8023584:	08023521 	.word	0x08023521
 8023588:	08023521 	.word	0x08023521
 802358c:	08023667 	.word	0x08023667
 8023590:	6833      	ldr	r3, [r6, #0]
 8023592:	1d1a      	adds	r2, r3, #4
 8023594:	681b      	ldr	r3, [r3, #0]
 8023596:	6032      	str	r2, [r6, #0]
 8023598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802359c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80235a0:	2301      	movs	r3, #1
 80235a2:	e09d      	b.n	80236e0 <_printf_i+0x1e8>
 80235a4:	6833      	ldr	r3, [r6, #0]
 80235a6:	6820      	ldr	r0, [r4, #0]
 80235a8:	1d19      	adds	r1, r3, #4
 80235aa:	6031      	str	r1, [r6, #0]
 80235ac:	0606      	lsls	r6, r0, #24
 80235ae:	d501      	bpl.n	80235b4 <_printf_i+0xbc>
 80235b0:	681d      	ldr	r5, [r3, #0]
 80235b2:	e003      	b.n	80235bc <_printf_i+0xc4>
 80235b4:	0645      	lsls	r5, r0, #25
 80235b6:	d5fb      	bpl.n	80235b0 <_printf_i+0xb8>
 80235b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80235bc:	2d00      	cmp	r5, #0
 80235be:	da03      	bge.n	80235c8 <_printf_i+0xd0>
 80235c0:	232d      	movs	r3, #45	@ 0x2d
 80235c2:	426d      	negs	r5, r5
 80235c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80235c8:	4859      	ldr	r0, [pc, #356]	@ (8023730 <_printf_i+0x238>)
 80235ca:	230a      	movs	r3, #10
 80235cc:	e011      	b.n	80235f2 <_printf_i+0xfa>
 80235ce:	6821      	ldr	r1, [r4, #0]
 80235d0:	6833      	ldr	r3, [r6, #0]
 80235d2:	0608      	lsls	r0, r1, #24
 80235d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80235d8:	d402      	bmi.n	80235e0 <_printf_i+0xe8>
 80235da:	0649      	lsls	r1, r1, #25
 80235dc:	bf48      	it	mi
 80235de:	b2ad      	uxthmi	r5, r5
 80235e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80235e2:	4853      	ldr	r0, [pc, #332]	@ (8023730 <_printf_i+0x238>)
 80235e4:	6033      	str	r3, [r6, #0]
 80235e6:	bf14      	ite	ne
 80235e8:	230a      	movne	r3, #10
 80235ea:	2308      	moveq	r3, #8
 80235ec:	2100      	movs	r1, #0
 80235ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80235f2:	6866      	ldr	r6, [r4, #4]
 80235f4:	60a6      	str	r6, [r4, #8]
 80235f6:	2e00      	cmp	r6, #0
 80235f8:	bfa2      	ittt	ge
 80235fa:	6821      	ldrge	r1, [r4, #0]
 80235fc:	f021 0104 	bicge.w	r1, r1, #4
 8023600:	6021      	strge	r1, [r4, #0]
 8023602:	b90d      	cbnz	r5, 8023608 <_printf_i+0x110>
 8023604:	2e00      	cmp	r6, #0
 8023606:	d04b      	beq.n	80236a0 <_printf_i+0x1a8>
 8023608:	4616      	mov	r6, r2
 802360a:	fbb5 f1f3 	udiv	r1, r5, r3
 802360e:	fb03 5711 	mls	r7, r3, r1, r5
 8023612:	5dc7      	ldrb	r7, [r0, r7]
 8023614:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023618:	462f      	mov	r7, r5
 802361a:	42bb      	cmp	r3, r7
 802361c:	460d      	mov	r5, r1
 802361e:	d9f4      	bls.n	802360a <_printf_i+0x112>
 8023620:	2b08      	cmp	r3, #8
 8023622:	d10b      	bne.n	802363c <_printf_i+0x144>
 8023624:	6823      	ldr	r3, [r4, #0]
 8023626:	07df      	lsls	r7, r3, #31
 8023628:	d508      	bpl.n	802363c <_printf_i+0x144>
 802362a:	6923      	ldr	r3, [r4, #16]
 802362c:	6861      	ldr	r1, [r4, #4]
 802362e:	4299      	cmp	r1, r3
 8023630:	bfde      	ittt	le
 8023632:	2330      	movle	r3, #48	@ 0x30
 8023634:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023638:	f106 36ff 	addle.w	r6, r6, #4294967295
 802363c:	1b92      	subs	r2, r2, r6
 802363e:	6122      	str	r2, [r4, #16]
 8023640:	f8cd a000 	str.w	sl, [sp]
 8023644:	464b      	mov	r3, r9
 8023646:	aa03      	add	r2, sp, #12
 8023648:	4621      	mov	r1, r4
 802364a:	4640      	mov	r0, r8
 802364c:	f7ff fee6 	bl	802341c <_printf_common>
 8023650:	3001      	adds	r0, #1
 8023652:	d14a      	bne.n	80236ea <_printf_i+0x1f2>
 8023654:	f04f 30ff 	mov.w	r0, #4294967295
 8023658:	b004      	add	sp, #16
 802365a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802365e:	6823      	ldr	r3, [r4, #0]
 8023660:	f043 0320 	orr.w	r3, r3, #32
 8023664:	6023      	str	r3, [r4, #0]
 8023666:	4833      	ldr	r0, [pc, #204]	@ (8023734 <_printf_i+0x23c>)
 8023668:	2778      	movs	r7, #120	@ 0x78
 802366a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802366e:	6823      	ldr	r3, [r4, #0]
 8023670:	6831      	ldr	r1, [r6, #0]
 8023672:	061f      	lsls	r7, r3, #24
 8023674:	f851 5b04 	ldr.w	r5, [r1], #4
 8023678:	d402      	bmi.n	8023680 <_printf_i+0x188>
 802367a:	065f      	lsls	r7, r3, #25
 802367c:	bf48      	it	mi
 802367e:	b2ad      	uxthmi	r5, r5
 8023680:	6031      	str	r1, [r6, #0]
 8023682:	07d9      	lsls	r1, r3, #31
 8023684:	bf44      	itt	mi
 8023686:	f043 0320 	orrmi.w	r3, r3, #32
 802368a:	6023      	strmi	r3, [r4, #0]
 802368c:	b11d      	cbz	r5, 8023696 <_printf_i+0x19e>
 802368e:	2310      	movs	r3, #16
 8023690:	e7ac      	b.n	80235ec <_printf_i+0xf4>
 8023692:	4827      	ldr	r0, [pc, #156]	@ (8023730 <_printf_i+0x238>)
 8023694:	e7e9      	b.n	802366a <_printf_i+0x172>
 8023696:	6823      	ldr	r3, [r4, #0]
 8023698:	f023 0320 	bic.w	r3, r3, #32
 802369c:	6023      	str	r3, [r4, #0]
 802369e:	e7f6      	b.n	802368e <_printf_i+0x196>
 80236a0:	4616      	mov	r6, r2
 80236a2:	e7bd      	b.n	8023620 <_printf_i+0x128>
 80236a4:	6833      	ldr	r3, [r6, #0]
 80236a6:	6825      	ldr	r5, [r4, #0]
 80236a8:	6961      	ldr	r1, [r4, #20]
 80236aa:	1d18      	adds	r0, r3, #4
 80236ac:	6030      	str	r0, [r6, #0]
 80236ae:	062e      	lsls	r6, r5, #24
 80236b0:	681b      	ldr	r3, [r3, #0]
 80236b2:	d501      	bpl.n	80236b8 <_printf_i+0x1c0>
 80236b4:	6019      	str	r1, [r3, #0]
 80236b6:	e002      	b.n	80236be <_printf_i+0x1c6>
 80236b8:	0668      	lsls	r0, r5, #25
 80236ba:	d5fb      	bpl.n	80236b4 <_printf_i+0x1bc>
 80236bc:	8019      	strh	r1, [r3, #0]
 80236be:	2300      	movs	r3, #0
 80236c0:	6123      	str	r3, [r4, #16]
 80236c2:	4616      	mov	r6, r2
 80236c4:	e7bc      	b.n	8023640 <_printf_i+0x148>
 80236c6:	6833      	ldr	r3, [r6, #0]
 80236c8:	1d1a      	adds	r2, r3, #4
 80236ca:	6032      	str	r2, [r6, #0]
 80236cc:	681e      	ldr	r6, [r3, #0]
 80236ce:	6862      	ldr	r2, [r4, #4]
 80236d0:	2100      	movs	r1, #0
 80236d2:	4630      	mov	r0, r6
 80236d4:	f7dc fe1c 	bl	8000310 <memchr>
 80236d8:	b108      	cbz	r0, 80236de <_printf_i+0x1e6>
 80236da:	1b80      	subs	r0, r0, r6
 80236dc:	6060      	str	r0, [r4, #4]
 80236de:	6863      	ldr	r3, [r4, #4]
 80236e0:	6123      	str	r3, [r4, #16]
 80236e2:	2300      	movs	r3, #0
 80236e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80236e8:	e7aa      	b.n	8023640 <_printf_i+0x148>
 80236ea:	6923      	ldr	r3, [r4, #16]
 80236ec:	4632      	mov	r2, r6
 80236ee:	4649      	mov	r1, r9
 80236f0:	4640      	mov	r0, r8
 80236f2:	47d0      	blx	sl
 80236f4:	3001      	adds	r0, #1
 80236f6:	d0ad      	beq.n	8023654 <_printf_i+0x15c>
 80236f8:	6823      	ldr	r3, [r4, #0]
 80236fa:	079b      	lsls	r3, r3, #30
 80236fc:	d413      	bmi.n	8023726 <_printf_i+0x22e>
 80236fe:	68e0      	ldr	r0, [r4, #12]
 8023700:	9b03      	ldr	r3, [sp, #12]
 8023702:	4298      	cmp	r0, r3
 8023704:	bfb8      	it	lt
 8023706:	4618      	movlt	r0, r3
 8023708:	e7a6      	b.n	8023658 <_printf_i+0x160>
 802370a:	2301      	movs	r3, #1
 802370c:	4632      	mov	r2, r6
 802370e:	4649      	mov	r1, r9
 8023710:	4640      	mov	r0, r8
 8023712:	47d0      	blx	sl
 8023714:	3001      	adds	r0, #1
 8023716:	d09d      	beq.n	8023654 <_printf_i+0x15c>
 8023718:	3501      	adds	r5, #1
 802371a:	68e3      	ldr	r3, [r4, #12]
 802371c:	9903      	ldr	r1, [sp, #12]
 802371e:	1a5b      	subs	r3, r3, r1
 8023720:	42ab      	cmp	r3, r5
 8023722:	dcf2      	bgt.n	802370a <_printf_i+0x212>
 8023724:	e7eb      	b.n	80236fe <_printf_i+0x206>
 8023726:	2500      	movs	r5, #0
 8023728:	f104 0619 	add.w	r6, r4, #25
 802372c:	e7f5      	b.n	802371a <_printf_i+0x222>
 802372e:	bf00      	nop
 8023730:	08027231 	.word	0x08027231
 8023734:	08027242 	.word	0x08027242

08023738 <__swbuf_r>:
 8023738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802373a:	460e      	mov	r6, r1
 802373c:	4614      	mov	r4, r2
 802373e:	4605      	mov	r5, r0
 8023740:	b118      	cbz	r0, 802374a <__swbuf_r+0x12>
 8023742:	6a03      	ldr	r3, [r0, #32]
 8023744:	b90b      	cbnz	r3, 802374a <__swbuf_r+0x12>
 8023746:	f7ff f9ef 	bl	8022b28 <__sinit>
 802374a:	69a3      	ldr	r3, [r4, #24]
 802374c:	60a3      	str	r3, [r4, #8]
 802374e:	89a3      	ldrh	r3, [r4, #12]
 8023750:	071a      	lsls	r2, r3, #28
 8023752:	d501      	bpl.n	8023758 <__swbuf_r+0x20>
 8023754:	6923      	ldr	r3, [r4, #16]
 8023756:	b943      	cbnz	r3, 802376a <__swbuf_r+0x32>
 8023758:	4621      	mov	r1, r4
 802375a:	4628      	mov	r0, r5
 802375c:	f000 f82a 	bl	80237b4 <__swsetup_r>
 8023760:	b118      	cbz	r0, 802376a <__swbuf_r+0x32>
 8023762:	f04f 37ff 	mov.w	r7, #4294967295
 8023766:	4638      	mov	r0, r7
 8023768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802376a:	6823      	ldr	r3, [r4, #0]
 802376c:	6922      	ldr	r2, [r4, #16]
 802376e:	1a98      	subs	r0, r3, r2
 8023770:	6963      	ldr	r3, [r4, #20]
 8023772:	b2f6      	uxtb	r6, r6
 8023774:	4283      	cmp	r3, r0
 8023776:	4637      	mov	r7, r6
 8023778:	dc05      	bgt.n	8023786 <__swbuf_r+0x4e>
 802377a:	4621      	mov	r1, r4
 802377c:	4628      	mov	r0, r5
 802377e:	f7ff fcbb 	bl	80230f8 <_fflush_r>
 8023782:	2800      	cmp	r0, #0
 8023784:	d1ed      	bne.n	8023762 <__swbuf_r+0x2a>
 8023786:	68a3      	ldr	r3, [r4, #8]
 8023788:	3b01      	subs	r3, #1
 802378a:	60a3      	str	r3, [r4, #8]
 802378c:	6823      	ldr	r3, [r4, #0]
 802378e:	1c5a      	adds	r2, r3, #1
 8023790:	6022      	str	r2, [r4, #0]
 8023792:	701e      	strb	r6, [r3, #0]
 8023794:	6962      	ldr	r2, [r4, #20]
 8023796:	1c43      	adds	r3, r0, #1
 8023798:	429a      	cmp	r2, r3
 802379a:	d004      	beq.n	80237a6 <__swbuf_r+0x6e>
 802379c:	89a3      	ldrh	r3, [r4, #12]
 802379e:	07db      	lsls	r3, r3, #31
 80237a0:	d5e1      	bpl.n	8023766 <__swbuf_r+0x2e>
 80237a2:	2e0a      	cmp	r6, #10
 80237a4:	d1df      	bne.n	8023766 <__swbuf_r+0x2e>
 80237a6:	4621      	mov	r1, r4
 80237a8:	4628      	mov	r0, r5
 80237aa:	f7ff fca5 	bl	80230f8 <_fflush_r>
 80237ae:	2800      	cmp	r0, #0
 80237b0:	d0d9      	beq.n	8023766 <__swbuf_r+0x2e>
 80237b2:	e7d6      	b.n	8023762 <__swbuf_r+0x2a>

080237b4 <__swsetup_r>:
 80237b4:	b538      	push	{r3, r4, r5, lr}
 80237b6:	4b29      	ldr	r3, [pc, #164]	@ (802385c <__swsetup_r+0xa8>)
 80237b8:	4605      	mov	r5, r0
 80237ba:	6818      	ldr	r0, [r3, #0]
 80237bc:	460c      	mov	r4, r1
 80237be:	b118      	cbz	r0, 80237c8 <__swsetup_r+0x14>
 80237c0:	6a03      	ldr	r3, [r0, #32]
 80237c2:	b90b      	cbnz	r3, 80237c8 <__swsetup_r+0x14>
 80237c4:	f7ff f9b0 	bl	8022b28 <__sinit>
 80237c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80237cc:	0719      	lsls	r1, r3, #28
 80237ce:	d422      	bmi.n	8023816 <__swsetup_r+0x62>
 80237d0:	06da      	lsls	r2, r3, #27
 80237d2:	d407      	bmi.n	80237e4 <__swsetup_r+0x30>
 80237d4:	2209      	movs	r2, #9
 80237d6:	602a      	str	r2, [r5, #0]
 80237d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80237dc:	81a3      	strh	r3, [r4, #12]
 80237de:	f04f 30ff 	mov.w	r0, #4294967295
 80237e2:	e033      	b.n	802384c <__swsetup_r+0x98>
 80237e4:	0758      	lsls	r0, r3, #29
 80237e6:	d512      	bpl.n	802380e <__swsetup_r+0x5a>
 80237e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80237ea:	b141      	cbz	r1, 80237fe <__swsetup_r+0x4a>
 80237ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80237f0:	4299      	cmp	r1, r3
 80237f2:	d002      	beq.n	80237fa <__swsetup_r+0x46>
 80237f4:	4628      	mov	r0, r5
 80237f6:	f7ff fafb 	bl	8022df0 <_free_r>
 80237fa:	2300      	movs	r3, #0
 80237fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80237fe:	89a3      	ldrh	r3, [r4, #12]
 8023800:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8023804:	81a3      	strh	r3, [r4, #12]
 8023806:	2300      	movs	r3, #0
 8023808:	6063      	str	r3, [r4, #4]
 802380a:	6923      	ldr	r3, [r4, #16]
 802380c:	6023      	str	r3, [r4, #0]
 802380e:	89a3      	ldrh	r3, [r4, #12]
 8023810:	f043 0308 	orr.w	r3, r3, #8
 8023814:	81a3      	strh	r3, [r4, #12]
 8023816:	6923      	ldr	r3, [r4, #16]
 8023818:	b94b      	cbnz	r3, 802382e <__swsetup_r+0x7a>
 802381a:	89a3      	ldrh	r3, [r4, #12]
 802381c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8023820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023824:	d003      	beq.n	802382e <__swsetup_r+0x7a>
 8023826:	4621      	mov	r1, r4
 8023828:	4628      	mov	r0, r5
 802382a:	f000 f883 	bl	8023934 <__smakebuf_r>
 802382e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023832:	f013 0201 	ands.w	r2, r3, #1
 8023836:	d00a      	beq.n	802384e <__swsetup_r+0x9a>
 8023838:	2200      	movs	r2, #0
 802383a:	60a2      	str	r2, [r4, #8]
 802383c:	6962      	ldr	r2, [r4, #20]
 802383e:	4252      	negs	r2, r2
 8023840:	61a2      	str	r2, [r4, #24]
 8023842:	6922      	ldr	r2, [r4, #16]
 8023844:	b942      	cbnz	r2, 8023858 <__swsetup_r+0xa4>
 8023846:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802384a:	d1c5      	bne.n	80237d8 <__swsetup_r+0x24>
 802384c:	bd38      	pop	{r3, r4, r5, pc}
 802384e:	0799      	lsls	r1, r3, #30
 8023850:	bf58      	it	pl
 8023852:	6962      	ldrpl	r2, [r4, #20]
 8023854:	60a2      	str	r2, [r4, #8]
 8023856:	e7f4      	b.n	8023842 <__swsetup_r+0x8e>
 8023858:	2000      	movs	r0, #0
 802385a:	e7f7      	b.n	802384c <__swsetup_r+0x98>
 802385c:	20000038 	.word	0x20000038

08023860 <_raise_r>:
 8023860:	291f      	cmp	r1, #31
 8023862:	b538      	push	{r3, r4, r5, lr}
 8023864:	4605      	mov	r5, r0
 8023866:	460c      	mov	r4, r1
 8023868:	d904      	bls.n	8023874 <_raise_r+0x14>
 802386a:	2316      	movs	r3, #22
 802386c:	6003      	str	r3, [r0, #0]
 802386e:	f04f 30ff 	mov.w	r0, #4294967295
 8023872:	bd38      	pop	{r3, r4, r5, pc}
 8023874:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023876:	b112      	cbz	r2, 802387e <_raise_r+0x1e>
 8023878:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802387c:	b94b      	cbnz	r3, 8023892 <_raise_r+0x32>
 802387e:	4628      	mov	r0, r5
 8023880:	f000 f830 	bl	80238e4 <_getpid_r>
 8023884:	4622      	mov	r2, r4
 8023886:	4601      	mov	r1, r0
 8023888:	4628      	mov	r0, r5
 802388a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802388e:	f000 b817 	b.w	80238c0 <_kill_r>
 8023892:	2b01      	cmp	r3, #1
 8023894:	d00a      	beq.n	80238ac <_raise_r+0x4c>
 8023896:	1c59      	adds	r1, r3, #1
 8023898:	d103      	bne.n	80238a2 <_raise_r+0x42>
 802389a:	2316      	movs	r3, #22
 802389c:	6003      	str	r3, [r0, #0]
 802389e:	2001      	movs	r0, #1
 80238a0:	e7e7      	b.n	8023872 <_raise_r+0x12>
 80238a2:	2100      	movs	r1, #0
 80238a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80238a8:	4620      	mov	r0, r4
 80238aa:	4798      	blx	r3
 80238ac:	2000      	movs	r0, #0
 80238ae:	e7e0      	b.n	8023872 <_raise_r+0x12>

080238b0 <raise>:
 80238b0:	4b02      	ldr	r3, [pc, #8]	@ (80238bc <raise+0xc>)
 80238b2:	4601      	mov	r1, r0
 80238b4:	6818      	ldr	r0, [r3, #0]
 80238b6:	f7ff bfd3 	b.w	8023860 <_raise_r>
 80238ba:	bf00      	nop
 80238bc:	20000038 	.word	0x20000038

080238c0 <_kill_r>:
 80238c0:	b538      	push	{r3, r4, r5, lr}
 80238c2:	4d07      	ldr	r5, [pc, #28]	@ (80238e0 <_kill_r+0x20>)
 80238c4:	2300      	movs	r3, #0
 80238c6:	4604      	mov	r4, r0
 80238c8:	4608      	mov	r0, r1
 80238ca:	4611      	mov	r1, r2
 80238cc:	602b      	str	r3, [r5, #0]
 80238ce:	f7de fe6b 	bl	80025a8 <_kill>
 80238d2:	1c43      	adds	r3, r0, #1
 80238d4:	d102      	bne.n	80238dc <_kill_r+0x1c>
 80238d6:	682b      	ldr	r3, [r5, #0]
 80238d8:	b103      	cbz	r3, 80238dc <_kill_r+0x1c>
 80238da:	6023      	str	r3, [r4, #0]
 80238dc:	bd38      	pop	{r3, r4, r5, pc}
 80238de:	bf00      	nop
 80238e0:	200026b0 	.word	0x200026b0

080238e4 <_getpid_r>:
 80238e4:	f7de be58 	b.w	8002598 <_getpid>

080238e8 <__swhatbuf_r>:
 80238e8:	b570      	push	{r4, r5, r6, lr}
 80238ea:	460c      	mov	r4, r1
 80238ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80238f0:	2900      	cmp	r1, #0
 80238f2:	b096      	sub	sp, #88	@ 0x58
 80238f4:	4615      	mov	r5, r2
 80238f6:	461e      	mov	r6, r3
 80238f8:	da0d      	bge.n	8023916 <__swhatbuf_r+0x2e>
 80238fa:	89a3      	ldrh	r3, [r4, #12]
 80238fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8023900:	f04f 0100 	mov.w	r1, #0
 8023904:	bf14      	ite	ne
 8023906:	2340      	movne	r3, #64	@ 0x40
 8023908:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802390c:	2000      	movs	r0, #0
 802390e:	6031      	str	r1, [r6, #0]
 8023910:	602b      	str	r3, [r5, #0]
 8023912:	b016      	add	sp, #88	@ 0x58
 8023914:	bd70      	pop	{r4, r5, r6, pc}
 8023916:	466a      	mov	r2, sp
 8023918:	f000 f848 	bl	80239ac <_fstat_r>
 802391c:	2800      	cmp	r0, #0
 802391e:	dbec      	blt.n	80238fa <__swhatbuf_r+0x12>
 8023920:	9901      	ldr	r1, [sp, #4]
 8023922:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023926:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802392a:	4259      	negs	r1, r3
 802392c:	4159      	adcs	r1, r3
 802392e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023932:	e7eb      	b.n	802390c <__swhatbuf_r+0x24>

08023934 <__smakebuf_r>:
 8023934:	898b      	ldrh	r3, [r1, #12]
 8023936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023938:	079d      	lsls	r5, r3, #30
 802393a:	4606      	mov	r6, r0
 802393c:	460c      	mov	r4, r1
 802393e:	d507      	bpl.n	8023950 <__smakebuf_r+0x1c>
 8023940:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023944:	6023      	str	r3, [r4, #0]
 8023946:	6123      	str	r3, [r4, #16]
 8023948:	2301      	movs	r3, #1
 802394a:	6163      	str	r3, [r4, #20]
 802394c:	b003      	add	sp, #12
 802394e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023950:	ab01      	add	r3, sp, #4
 8023952:	466a      	mov	r2, sp
 8023954:	f7ff ffc8 	bl	80238e8 <__swhatbuf_r>
 8023958:	9f00      	ldr	r7, [sp, #0]
 802395a:	4605      	mov	r5, r0
 802395c:	4639      	mov	r1, r7
 802395e:	4630      	mov	r0, r6
 8023960:	f7ff faba 	bl	8022ed8 <_malloc_r>
 8023964:	b948      	cbnz	r0, 802397a <__smakebuf_r+0x46>
 8023966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802396a:	059a      	lsls	r2, r3, #22
 802396c:	d4ee      	bmi.n	802394c <__smakebuf_r+0x18>
 802396e:	f023 0303 	bic.w	r3, r3, #3
 8023972:	f043 0302 	orr.w	r3, r3, #2
 8023976:	81a3      	strh	r3, [r4, #12]
 8023978:	e7e2      	b.n	8023940 <__smakebuf_r+0xc>
 802397a:	89a3      	ldrh	r3, [r4, #12]
 802397c:	6020      	str	r0, [r4, #0]
 802397e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023982:	81a3      	strh	r3, [r4, #12]
 8023984:	9b01      	ldr	r3, [sp, #4]
 8023986:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802398a:	b15b      	cbz	r3, 80239a4 <__smakebuf_r+0x70>
 802398c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023990:	4630      	mov	r0, r6
 8023992:	f000 f81d 	bl	80239d0 <_isatty_r>
 8023996:	b128      	cbz	r0, 80239a4 <__smakebuf_r+0x70>
 8023998:	89a3      	ldrh	r3, [r4, #12]
 802399a:	f023 0303 	bic.w	r3, r3, #3
 802399e:	f043 0301 	orr.w	r3, r3, #1
 80239a2:	81a3      	strh	r3, [r4, #12]
 80239a4:	89a3      	ldrh	r3, [r4, #12]
 80239a6:	431d      	orrs	r5, r3
 80239a8:	81a5      	strh	r5, [r4, #12]
 80239aa:	e7cf      	b.n	802394c <__smakebuf_r+0x18>

080239ac <_fstat_r>:
 80239ac:	b538      	push	{r3, r4, r5, lr}
 80239ae:	4d07      	ldr	r5, [pc, #28]	@ (80239cc <_fstat_r+0x20>)
 80239b0:	2300      	movs	r3, #0
 80239b2:	4604      	mov	r4, r0
 80239b4:	4608      	mov	r0, r1
 80239b6:	4611      	mov	r1, r2
 80239b8:	602b      	str	r3, [r5, #0]
 80239ba:	f7de fe55 	bl	8002668 <_fstat>
 80239be:	1c43      	adds	r3, r0, #1
 80239c0:	d102      	bne.n	80239c8 <_fstat_r+0x1c>
 80239c2:	682b      	ldr	r3, [r5, #0]
 80239c4:	b103      	cbz	r3, 80239c8 <_fstat_r+0x1c>
 80239c6:	6023      	str	r3, [r4, #0]
 80239c8:	bd38      	pop	{r3, r4, r5, pc}
 80239ca:	bf00      	nop
 80239cc:	200026b0 	.word	0x200026b0

080239d0 <_isatty_r>:
 80239d0:	b538      	push	{r3, r4, r5, lr}
 80239d2:	4d06      	ldr	r5, [pc, #24]	@ (80239ec <_isatty_r+0x1c>)
 80239d4:	2300      	movs	r3, #0
 80239d6:	4604      	mov	r4, r0
 80239d8:	4608      	mov	r0, r1
 80239da:	602b      	str	r3, [r5, #0]
 80239dc:	f7de fe54 	bl	8002688 <_isatty>
 80239e0:	1c43      	adds	r3, r0, #1
 80239e2:	d102      	bne.n	80239ea <_isatty_r+0x1a>
 80239e4:	682b      	ldr	r3, [r5, #0]
 80239e6:	b103      	cbz	r3, 80239ea <_isatty_r+0x1a>
 80239e8:	6023      	str	r3, [r4, #0]
 80239ea:	bd38      	pop	{r3, r4, r5, pc}
 80239ec:	200026b0 	.word	0x200026b0

080239f0 <_init>:
 80239f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239f2:	bf00      	nop
 80239f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80239f6:	bc08      	pop	{r3}
 80239f8:	469e      	mov	lr, r3
 80239fa:	4770      	bx	lr

080239fc <_fini>:
 80239fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239fe:	bf00      	nop
 8023a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023a02:	bc08      	pop	{r3}
 8023a04:	469e      	mov	lr, r3
 8023a06:	4770      	bx	lr
